// Online C compiler to run C program online
#include <stdio.h>
#include <stdint.h>

#define SYMMETRY_ADC_HALF_SCALE 128
#define SYMMETRY_ADC_FULL_SCALE 255
#define SYMMETRY_ADC_NUM_BITS 8
#define FIRST_HALFCYCLE 0
#define SECOND_HALFCYCLE 1
#define FIRST_QUADRANT 0
#define SECOND_QUADRANT 1
#define FIRST_QUADRANT_START_INDEX 0
#define SECOND_QUADRANT_START_INDEX 128
#define THIRD_QUADRANT_START_INDEX 256
#define FOURTH_QUADRANT_START_INDEX 384

volatile uint32_t N = 0;
volatile uint32_t N_total = 0;
volatile uint32_t N_raw = 0;
uint8_t prescaler_index = 0;
uint8_t check[196608] = {0};
uint32_t check_index = 0;

volatile uint8_t waveshape = 0;
volatile uint16_t speed = 0;
volatile uint8_t depth = 0;
volatile uint16_t symmetry = 0;
volatile uint16_t iindex = 0;
volatile uint8_t halfcycle = 0;
volatile uint8_t quadrant = 0;
volatile uint16_t raw_start_value = 0;
volatile uint16_t final_start_value = 0;
volatile uint16_t raw_prescaler = 0;
volatile uint16_t final_prescaler = 0;

//CUSTOM TYPES
enum Polarity{
	NEGATIVE,
	POSITIVE
};

enum Adjust_Prescaler_Action{
	DO_NOTHING,
	MULTIPLY_BY_TWO,
};

enum Validate{
	NO,
	YES
};

enum TIM16_final_start_value_Oscillation_Mode{
	DO_NOT_OSCILLATE,
	OSCILLATE_UPWARDS,
	OSCILLATE_DOWNWARDS
};

enum Symmetry_Status{
	CW,
	CCW
};

enum Symmetry_Type{
	SHORTEN,
	LENGTHEN
};

volatile enum Adjust_Prescaler_Action prescaler_adjust = 0;

uint16_t TIM16_prescalers[6] = {2048, 1024, 512, 256, 128, 64};

uint8_t Adjust_TIM16_Prescaler(enum Adjust_Prescaler_Action prescaler_adjust_val);
uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent);

int main() {
    
    //INITIALISE
    iindex = 0;
    quadrant = FIRST_QUADRANT;
    halfcycle = FIRST_HALFCYCLE;
        
    for(prescaler_index = 0; prescaler_index < 6; prescaler_index++){
        
        raw_prescaler = TIM16_prescalers[prescaler_index];
        
        for(raw_start_value = 0; raw_start_value < 128; raw_start_value++){
            
            for(symmetry = 0; symmetry < 256; symmetry++){
                
                iindex = 0;
                N_total = 0;
                N = 0;
                
                for(iindex; iindex < 2; iindex++){
                
                    //PROCESS INDEX
        
        		    if(iindex == FIRST_QUADRANT_START_INDEX){
        			    quadrant = FIRST_QUADRANT;
        			    halfcycle = FIRST_HALFCYCLE;
        		    }
        		    else if(iindex == SECOND_QUADRANT_START_INDEX){
        			    quadrant = SECOND_QUADRANT;
        			    halfcycle = FIRST_HALFCYCLE;
        		    }
        		    else if(iindex == THIRD_QUADRANT_START_INDEX){
        			    quadrant = FIRST_QUADRANT;
        			    halfcycle = SECOND_HALFCYCLE;
        		    }
        		    else if(iindex == FOURTH_QUADRANT_START_INDEX){
        			    quadrant = SECOND_QUADRANT;
        			    halfcycle = SECOND_HALFCYCLE;
        		    }
        		    
                    //PROCESS FINAL VALUES
                    enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
            		enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
            
            		uint8_t pot_rotation_corrected = 0;
            		enum Symmetry_Status symmetry_status = CW;
            
            		//DETERMINE IF CW OR CCW SYMMETRY POT ROTATION
            		if(symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
            			symmetry_status = CW;
            		}
            		else{ //adc is 128-255
            			symmetry_status = CCW;
            		}
            
            		//DETERMINE WHETHER TO SHORTEN OR LENGTHEN BASED ON CURRENT INDEX AND SYMMETRY POT POSITION
            
            		if(halfcycle == FIRST_HALFCYCLE){
            
            			if(symmetry_status == CW){
            
            				symmetry_type_for_halfcycle = LENGTHEN;
            			}
            			else{
            
            				symmetry_type_for_halfcycle = SHORTEN;
            			}
            		}
            		else{
            
            			if(symmetry_status == CW){
            
            				symmetry_type_for_halfcycle = SHORTEN;
            			}
            			else{
            
            				symmetry_type_for_halfcycle = LENGTHEN;
            			}
            		}
            
            		if(symmetry_status == CW){
            
            			pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - symmetry;
            		}
            		else{ //CCW
            
            			pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - symmetry);
            		}
            
            		//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
            		uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - raw_start_value;
            
            		uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected;
            
            		uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
            
            
            		//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
            		uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
            
            		uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
            
            
            		if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
            
            			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
            
            				//remainder is 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in 0.5
            
            				//manipulated_period_shorten should oscillate over the halfperiod between manipulated_period_shorten and manipulated_period_shorten - 1; //DONE
            				//manipulated_period_lengthen should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1; //DONE
            
            				if(symmetry_type_for_halfcycle == SHORTEN){
            
            					TIM16_final_start_value_oscillation_mode = OSCILLATE_DOWNWARDS;
            				}
            				else if(symmetry_type_for_halfcycle == LENGTHEN){
            
            					TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
            				}
            				prescaler_adjust = DO_NOTHING;
            			}
            			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
            
            				//remainder is zero, which means both shortened and lengthened manipulated periods have no no remainder
            
            				manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
            				manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
            
            				if(symmetry_type_for_halfcycle == SHORTEN){
            					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
            				}
            				else if(symmetry_type_for_halfcycle == LENGTHEN){
            					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
            				}
            				prescaler_adjust = DO_NOTHING;
            			}
            			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
            
            				//remainder is less than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in less than 0.5
            
            				manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
            				manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
            
            				if(symmetry_type_for_halfcycle == SHORTEN){
            					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
            				}
            				else if(symmetry_type_for_halfcycle == LENGTHEN){
            					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
            				}
            				prescaler_adjust = DO_NOTHING;
            			}
            			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
            
            				//remainder is greater than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in more than 0.5
            
            				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
            				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
            
            				if(symmetry_type_for_halfcycle == SHORTEN){
            					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
            				}
            				else if(symmetry_type_for_halfcycle == LENGTHEN){
            					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
            				}
            				prescaler_adjust = DO_NOTHING;
            			}
            		}
            
            		else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
            
            			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
            
            				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
            				//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
            				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
            
            				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
            
            					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
            					//DO NOT OSCILLATE BETWEEN VALUES //DONE
            					//prescaler during lengthened halfperiod should be set to half //DONE
            
            					if(symmetry_type_for_halfcycle == SHORTEN){
            						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
            						prescaler_adjust = DO_NOTHING;
            					}
            					else if(symmetry_type_for_halfcycle == LENGTHEN){
            						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
            						prescaler_adjust = MULTIPLY_BY_TWO;
            					}
            				}
            				else{
            
            					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
            					//prescaler during lengthened halfperiod should be set to half //DONE
            					//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE
            
            					if(symmetry_type_for_halfcycle == SHORTEN){
            						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
            						prescaler_adjust = DO_NOTHING;
            					}
            					else if(symmetry_type_for_halfcycle == LENGTHEN){
            						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
            						prescaler_adjust = MULTIPLY_BY_TWO;
            					}
            				}
            			}
            			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
            
            				manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
            
            				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
            
            					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
            					//DO NOT OSCILLATE BETWEEN VALUES //DONE
            					//prescaler during lengthened halfperiod should be set to half //DONE
            
            					if(symmetry_type_for_halfcycle == SHORTEN){
            						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
            						prescaler_adjust = DO_NOTHING;
            					}
            					else if(symmetry_type_for_halfcycle == LENGTHEN){
            						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
            						prescaler_adjust = MULTIPLY_BY_TWO;
            					}
            				}
            				else{
            
            					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
            					//prescaler during lengthened halfperiod should be set to half //DONE
            					//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE
            
            					if(symmetry_type_for_halfcycle == SHORTEN){
            						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
            						prescaler_adjust = DO_NOTHING;
            					}
            					else if(symmetry_type_for_halfcycle == LENGTHEN){
            						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
            						prescaler_adjust = MULTIPLY_BY_TWO;
            					}
            				}
            			}
            			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
            
            				manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
            				//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
            				manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
            
            				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
            
            					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
            					//DO NOT OSCILLATE BETWEEN VALUES //DONE
            					//prescaler during lengthened halfperiod should be set to half //DONE
            
            					if(symmetry_type_for_halfcycle == SHORTEN){
            						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
            						prescaler_adjust = DO_NOTHING;
            					}
            					else if(symmetry_type_for_halfcycle == LENGTHEN){
            						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
            						prescaler_adjust = MULTIPLY_BY_TWO;
            					}
            				}
            				else{
            
            					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
            					//prescaler during lengthened halfperiod should be set to half //DONE
            					//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE
            
            					if(symmetry_type_for_halfcycle == SHORTEN){
            						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
            						prescaler_adjust = DO_NOTHING;
            					}
            					else if(symmetry_type_for_halfcycle == LENGTHEN){
            						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
            						prescaler_adjust = MULTIPLY_BY_TWO;
            					}
            				}
            			}
            			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
            
            				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
            				//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
            				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
            
            				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
            
            					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
            					//DO NOT OSCILLATE BETWEEN VALUES //DONE
            					//prescaler during lengthened halfperiod should be set to half //DONE
            
            					if(symmetry_type_for_halfcycle == SHORTEN){
            						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
            						prescaler_adjust = DO_NOTHING;
            					}
            					else if(symmetry_type_for_halfcycle == LENGTHEN){
            						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
            						prescaler_adjust = MULTIPLY_BY_TWO;
            					}
            				}
            				else{
            
            					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
            					//prescaler during lengthened halfperiod should be set to half //DONE
            					//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE
            
            					if(symmetry_type_for_halfcycle == SHORTEN){
            						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
            						prescaler_adjust = DO_NOTHING;
            					}
            					else if(symmetry_type_for_halfcycle == LENGTHEN){
            						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
            						prescaler_adjust = MULTIPLY_BY_TWO;
            					}
            				}
            			}
            		}
            
            	//DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
            	//NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
            	//ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
            	if(symmetry_type_for_halfcycle == SHORTEN){
            
            		if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
            
            			final_start_value = 256 - manipulated_period_shorten;
            		}
            		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
            
            			if(unsigned_bitwise_modulo(iindex, 1) == 0){ //if current index is even
            
            				final_start_value = 256 - manipulated_period_shorten;
            			}
            			else{ //if current index is odd
            
            				final_start_value = 256 - manipulated_period_shorten - 1;
            			}
            		}
            		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
            
            			if(unsigned_bitwise_modulo(iindex, 1) == 0){ //if current index is even
            
            				final_start_value = 256 - manipulated_period_shorten;
            			}
            			else{ //if current index is odd
            
            				final_start_value = 256 - manipulated_period_shorten + 1;
            			}
            		}
            	}
            	else if(symmetry_type_for_halfcycle == LENGTHEN){
            
            		if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
            
            			final_start_value = 256 - manipulated_period_lengthen;
            		}
            		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
            
            			if(unsigned_bitwise_modulo(iindex, 1) == 0){ //if current index is even
            
            				final_start_value = 256 - manipulated_period_lengthen;
            			}
            			else{ //if current index is odd
            
            				final_start_value = 256 - manipulated_period_lengthen - 1;
            			}
            		}
            		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
            
            			if(unsigned_bitwise_modulo(iindex, 1) == 0){ //if current index is even
            
            				final_start_value = 256 - manipulated_period_lengthen;
            			}
            			else{ //if current index is odd
            
            				final_start_value = 256 - manipulated_period_lengthen + 1;
            			}
            		}
            	}
            
            	Adjust_TIM16_Prescaler(prescaler_adjust);    
        
                iindex += 256;
                N = final_prescaler * (256 - final_start_value);
                N_total = N_total + N;
                
                }
                N_raw = raw_prescaler * (256 - raw_start_value);
                if((2 * N_raw) == N_total){
                    check[check_index] = 1;
                }
                else{
                    check[check_index] = 0;
                }
                check_index++;
            }
        }
    }
    
    for(uint32_t j = 0; j < 196608; j++){
        
        printf("%d\n",check[j]);
    }
    	
    return 1;
}

uint8_t Adjust_TIM16_Prescaler(enum Adjust_Prescaler_Action prescaler_adjust_val){

    if(prescaler_adjust_val == MULTIPLY_BY_TWO){
    	final_prescaler = raw_prescaler << 1;
    }
    else if(prescaler_adjust_val == DO_NOTHING){
    	final_prescaler = raw_prescaler;
    }
return 1;
}

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){

    return dividend & ((1 << base_2_exponent) - 1);
}