TIM14 - PWM generator with 10-bit resolution (1024 duty cycles)

TIM16 - frequency generation (upon its interrupt select and condition the next duty cycle to load)

TIM17 - ADC single channel conversion (these are stepped through for the 4 channels)





Making sure we can reuse the STM32G031K8 instead of the PIC16F1824


PIC16F1824 TMR0 Frequency of oscillation equation:

Fosc/4/prescaler/(256-TMR0)/NUM_SAMPLES_IN_WAVE



The original PIC16F1824 code limits TMR0 to 0-127. 

TMR0 is a START FROM VALUE (!!!), i.e. loading a value into TMR0 on its overflow causes counting to begin again from that value, until it reaches 255 and overflows

This means that the extremes of actual number of count values are 256-0, i.e. 256, and 256-127, i.e. 128.



Notice that:

	Although we do not use TMR0 = 128, it will make sense in a minute:

	32000000/4/2/(256-128)/512 = 61Hz

	But by changing TMR0 to 0 and changing the prescaler to 1 we get:

	32000000/4/1/(256-0)/512 = 61Hz

	THEREFORE, if TMR0 'would' equal 128, we instead decrease the prescaler and set TMR0 to zero instead.
	
	





So...... can we transfer this to the STM32G031K8?







TIM16 stuff (frequency gen)

	- TIM16 in output compare mode


I think to make any timer equivalent to an 8-bit timer we would set the AUTO-RELOAD-REGISTER (ARR) to 255 (or 256 NOT QUITE SURE YET)), and then 
instead of calculating what value TMR0 would be, we work out what value to set the Count Register to, which will be between 0 and 127. The auto-reload 
register can be set to preload so we don't have to continually keep telling it to be an 8-bit timer, but we will of course need to update the count 
register (and tell the timer to start counting again if it turns off or whatever on overflow) upon an interrupt


In terms of making sure that the oscillations are the same speed as in the old PIC16F1824 code:

We just have to make sure that the 'divide by 4' option is selected for the internal clock source (i.e. 64MHz/4), and we have to 'shift' the prescalers
such that 2 becomes 4, 4 becomes 8, etc. This is fine as 256 (the max prescaler on the PIC16F1824 can easily become 512 on the STM32 because the STM32 prescaler
can go all the way up to 65536!

This is proven by:
	32000000/4/2/(256-127)/512 = 60.6Hz
and
	64000000/4/4/(256-127)/512 = 60.6Hz


Because we will use TIM16 in output compare mode, to make TIM16 in the stm32 work the same as TMR0 in the pic16f1824 we will have to set the ARR to 255 (or 256 idk) 
(to make it behave as an 8-bit timer), set the CCR register (capture compare register, the thing that the output (tim16_cnt) is compared to) also to 255 (or 256 idk), and we update the TIM16_CNT register on overflow
with the equivalent of TMR0 loaded upon overflow, to make the counter begin counting from that value.








TIM14 stuff (PWM gen)

	- TIM14 in PWM mode

Since:
	64000000/2/1024 = 31.25kHz, which is exactly the same PWM frequency as used in the PIC16F1824, we therefore just need to set the ARR for TIM14 to 1023 (to give 1024 possible duty cycles),
	to select 'divide by 2' on the internal clock, enable auto-reload-preload (I think), and set the prescaler to 0 (which is the same as divide by 1 for some reason)





TIM17 stuff (ADC trigger)

	- TIM17 in output compare mode

Since:
	1/(64000000/2/((2^16)-1)) = 2.048ms, to get TIM17 overflowing every ~2ms, we can make our lives easier than TIM16, set the ARR to anything equal to or above the desired overflow count, in this
	instancve the only option is 65535 though, set the CCR to 65535 ((2^16)-1), set the internal clock division to 2, and set the prescaler to 0 (= divide by 1). 


