
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6dc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  0800d798  0800d798  0000e798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e208  0800e208  00010458  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e208  0800e208  0000f208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e210  0800e210  00010458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e210  0800e210  0000f210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e214  0800e214  0000f214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000458  20000000  0800e218  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000898  20000458  0800e670  00010458  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cf0  0800e670  00010cf0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021221  00000000  00000000  00010480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000473a  00000000  00000000  000316a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e0  00000000  00000000  00035de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001278  00000000  00000000  000375c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015ac8  00000000  00000000  00038838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00008423  00000000  00000000  0004e300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00056723  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000054e0  00000000  00000000  00056768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000054  00000000  00000000  0005bc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000458 	.word	0x20000458
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800d780 	.word	0x0800d780

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000045c 	.word	0x2000045c
 8000100:	0800d780 	.word	0x0800d780

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <Initialise_Preset_Arrays>:
volatile enum Validate user_presets_used_array[NUM_PRESETS] = {(enum Validate)NO};

volatile uint8_t CC_array[5] = {0};

//FUNCTION DEFINITIONS
uint8_t Initialise_Preset_Arrays(void){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]
 8000454:	e047      	b.n	80004e6 <Initialise_Preset_Arrays+0x9e>

		if(i == 0){
 8000456:	1dfb      	adds	r3, r7, #7
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d10c      	bne.n	8000478 <Initialise_Preset_Arrays+0x30>
			factory_presets_array[i] = &factory_preset_0;
 800045e:	1dfb      	adds	r3, r7, #7
 8000460:	781a      	ldrb	r2, [r3, #0]
 8000462:	4b25      	ldr	r3, [pc, #148]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 8000464:	0092      	lsls	r2, r2, #2
 8000466:	4925      	ldr	r1, [pc, #148]	@ (80004fc <Initialise_Preset_Arrays+0xb4>)
 8000468:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_0;
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	781a      	ldrb	r2, [r3, #0]
 800046e:	4b24      	ldr	r3, [pc, #144]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 8000470:	0092      	lsls	r2, r2, #2
 8000472:	4924      	ldr	r1, [pc, #144]	@ (8000504 <Initialise_Preset_Arrays+0xbc>)
 8000474:	50d1      	str	r1, [r2, r3]
 8000476:	e031      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 1){
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d10c      	bne.n	800049a <Initialise_Preset_Arrays+0x52>
			factory_presets_array[i] = &factory_preset_1;
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	781a      	ldrb	r2, [r3, #0]
 8000484:	4b1c      	ldr	r3, [pc, #112]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 8000486:	0092      	lsls	r2, r2, #2
 8000488:	491f      	ldr	r1, [pc, #124]	@ (8000508 <Initialise_Preset_Arrays+0xc0>)
 800048a:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_1;
 800048c:	1dfb      	adds	r3, r7, #7
 800048e:	781a      	ldrb	r2, [r3, #0]
 8000490:	4b1b      	ldr	r3, [pc, #108]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 8000492:	0092      	lsls	r2, r2, #2
 8000494:	491d      	ldr	r1, [pc, #116]	@ (800050c <Initialise_Preset_Arrays+0xc4>)
 8000496:	50d1      	str	r1, [r2, r3]
 8000498:	e020      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 2){
 800049a:	1dfb      	adds	r3, r7, #7
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b02      	cmp	r3, #2
 80004a0:	d10c      	bne.n	80004bc <Initialise_Preset_Arrays+0x74>
			factory_presets_array[i] = &factory_preset_2;
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	4919      	ldr	r1, [pc, #100]	@ (8000510 <Initialise_Preset_Arrays+0xc8>)
 80004ac:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_2;
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781a      	ldrb	r2, [r3, #0]
 80004b2:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 80004b4:	0092      	lsls	r2, r2, #2
 80004b6:	4917      	ldr	r1, [pc, #92]	@ (8000514 <Initialise_Preset_Arrays+0xcc>)
 80004b8:	50d1      	str	r1, [r2, r3]
 80004ba:	e00f      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 3){
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d10b      	bne.n	80004dc <Initialise_Preset_Arrays+0x94>
			factory_presets_array[i] = &factory_preset_3;
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 80004ca:	0092      	lsls	r2, r2, #2
 80004cc:	4912      	ldr	r1, [pc, #72]	@ (8000518 <Initialise_Preset_Arrays+0xd0>)
 80004ce:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_3;
 80004d0:	1dfb      	adds	r3, r7, #7
 80004d2:	781a      	ldrb	r2, [r3, #0]
 80004d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 80004d6:	0092      	lsls	r2, r2, #2
 80004d8:	4910      	ldr	r1, [pc, #64]	@ (800051c <Initialise_Preset_Arrays+0xd4>)
 80004da:	50d1      	str	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 80004dc:	1dfb      	adds	r3, r7, #7
 80004de:	781a      	ldrb	r2, [r3, #0]
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	3201      	adds	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b0f      	cmp	r3, #15
 80004ec:	d9b3      	bls.n	8000456 <Initialise_Preset_Arrays+0xe>
		}
	}

	return 1;
 80004ee:	2301      	movs	r3, #1
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000474 	.word	0x20000474
 80004fc:	0800d798 	.word	0x0800d798
 8000500:	20000484 	.word	0x20000484
 8000504:	20000000 	.word	0x20000000
 8000508:	0800d7a0 	.word	0x0800d7a0
 800050c:	20000008 	.word	0x20000008
 8000510:	0800d7a8 	.word	0x0800d7a8
 8000514:	20000010 	.word	0x20000010
 8000518:	0800d7b0 	.word	0x0800d7b0
 800051c:	20000018 	.word	0x20000018

08000520 <Update_Params_Based_On_Mode_Selected>:

uint8_t Update_Params_Based_On_Mode_Selected(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0

	if(waveshape_fsm.current_state == MANUAL_MODE){
 8000524:	4b68      	ldr	r3, [pc, #416]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	2b01      	cmp	r3, #1
 800052c:	d104      	bne.n	8000538 <Update_Params_Based_On_Mode_Selected+0x18>
		params.waveshape = params_manual.waveshape;
 800052e:	4b67      	ldr	r3, [pc, #412]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000530:	799b      	ldrb	r3, [r3, #6]
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b66      	ldr	r3, [pc, #408]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000536:	719a      	strb	r2, [r3, #6]
	}
	if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8000538:	4b66      	ldr	r3, [pc, #408]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b01      	cmp	r3, #1
 8000540:	d104      	bne.n	800054c <Update_Params_Based_On_Mode_Selected+0x2c>
		params.speed = params_manual.speed;
 8000542:	4b62      	ldr	r3, [pc, #392]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000544:	891b      	ldrh	r3, [r3, #8]
 8000546:	b29a      	uxth	r2, r3
 8000548:	4b61      	ldr	r3, [pc, #388]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800054a:	811a      	strh	r2, [r3, #8]
	}
	if(depth_fsm.current_state == MANUAL_MODE){
 800054c:	4b62      	ldr	r3, [pc, #392]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	2b01      	cmp	r3, #1
 8000554:	d104      	bne.n	8000560 <Update_Params_Based_On_Mode_Selected+0x40>
		params.depth = params_manual.depth;
 8000556:	4b5d      	ldr	r3, [pc, #372]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000558:	7a9b      	ldrb	r3, [r3, #10]
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b5c      	ldr	r3, [pc, #368]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800055e:	729a      	strb	r2, [r3, #10]
	}
	if(symmetry_fsm.current_state == MANUAL_MODE){
 8000560:	4b5e      	ldr	r3, [pc, #376]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b01      	cmp	r3, #1
 8000568:	d104      	bne.n	8000574 <Update_Params_Based_On_Mode_Selected+0x54>
		params.symmetry = params_manual.symmetry;
 800056a:	4b58      	ldr	r3, [pc, #352]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 800056c:	899b      	ldrh	r3, [r3, #12]
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b57      	ldr	r3, [pc, #348]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000572:	819a      	strh	r2, [r3, #12]
	}
	if(phase_fsm.current_state == MANUAL_MODE){
 8000574:	4b5a      	ldr	r3, [pc, #360]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b01      	cmp	r3, #1
 800057c:	d104      	bne.n	8000588 <Update_Params_Based_On_Mode_Selected+0x68>
		params.duty_delay_line_read_pointer_offset = params_manual.duty_delay_line_read_pointer_offset;
 800057e:	4b53      	ldr	r3, [pc, #332]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000580:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000582:	b29a      	uxth	r2, r3
 8000584:	4b52      	ldr	r3, [pc, #328]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000586:	845a      	strh	r2, [r3, #34]	@ 0x22
	}

	if(waveshape_fsm.current_state == PC_MODE){
 8000588:	4b4f      	ldr	r3, [pc, #316]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b03      	cmp	r3, #3
 8000590:	d10e      	bne.n	80005b0 <Update_Params_Based_On_Mode_Selected+0x90>
		Update_Waveshape_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000592:	4b54      	ldr	r3, [pc, #336]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	1e5a      	subs	r2, r3, #1
 800059a:	0013      	movs	r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	189b      	adds	r3, r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	4a51      	ldr	r2, [pc, #324]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005a4:	189b      	adds	r3, r3, r2
 80005a6:	4a4a      	ldr	r2, [pc, #296]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 f8fd 	bl	80007aa <Update_Waveshape_with_Converted_Preset_Value>
	}
	if(speed_fsm.current_state.shared_state == PC_MODE){
 80005b0:	4b48      	ldr	r3, [pc, #288]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d10e      	bne.n	80005d8 <Update_Params_Based_On_Mode_Selected+0xb8>
		Update_Speed_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005ba:	4b4a      	ldr	r3, [pc, #296]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	1e5a      	subs	r2, r3, #1
 80005c2:	0013      	movs	r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	189b      	adds	r3, r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4a47      	ldr	r2, [pc, #284]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005cc:	189b      	adds	r3, r3, r2
 80005ce:	4a40      	ldr	r2, [pc, #256]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005d0:	0011      	movs	r1, r2
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 f912 	bl	80007fc <Update_Speed_with_Converted_Preset_Value>
	}
	if(depth_fsm.current_state == PC_MODE){
 80005d8:	4b3f      	ldr	r3, [pc, #252]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d10e      	bne.n	8000600 <Update_Params_Based_On_Mode_Selected+0xe0>
		Update_Depth_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005e2:	4b40      	ldr	r3, [pc, #256]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	1e5a      	subs	r2, r3, #1
 80005ea:	0013      	movs	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	189b      	adds	r3, r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	4a3d      	ldr	r2, [pc, #244]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005f4:	189b      	adds	r3, r3, r2
 80005f6:	4a36      	ldr	r2, [pc, #216]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005f8:	0011      	movs	r1, r2
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 f90d 	bl	800081a <Update_Depth_with_Converted_Preset_Value>
	}
	if(symmetry_fsm.current_state == PC_MODE){
 8000600:	4b36      	ldr	r3, [pc, #216]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b03      	cmp	r3, #3
 8000608:	d10e      	bne.n	8000628 <Update_Params_Based_On_Mode_Selected+0x108>
		Update_Symmetry_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 800060a:	4b36      	ldr	r3, [pc, #216]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	1e5a      	subs	r2, r3, #1
 8000612:	0013      	movs	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	189b      	adds	r3, r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	4a33      	ldr	r2, [pc, #204]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 800061c:	189b      	adds	r3, r3, r2
 800061e:	4a2c      	ldr	r2, [pc, #176]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000620:	0011      	movs	r1, r2
 8000622:	0018      	movs	r0, r3
 8000624:	f000 f908 	bl	8000838 <Update_Symmetry_with_Converted_Preset_Value>
	}
	if(phase_fsm.current_state == PC_MODE){
 8000628:	4b2d      	ldr	r3, [pc, #180]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b03      	cmp	r3, #3
 8000630:	d10e      	bne.n	8000650 <Update_Params_Based_On_Mode_Selected+0x130>
		Update_Phase_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000632:	4b2c      	ldr	r3, [pc, #176]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	0013      	movs	r3, r2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	189b      	adds	r3, r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4a29      	ldr	r2, [pc, #164]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 8000644:	189b      	adds	r3, r3, r2
 8000646:	4a22      	ldr	r2, [pc, #136]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f000 f903 	bl	8000856 <Update_Phase_with_Converted_Preset_Value>
	}


	if(waveshape_fsm.current_state == CC_MODE){
 8000650:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b02      	cmp	r3, #2
 8000658:	d105      	bne.n	8000666 <Update_Params_Based_On_Mode_Selected+0x146>
		Update_Waveshape_with_CC_Value(&CC_array[WAVESHAPE_ARR], &params);
 800065a:	4a1d      	ldr	r2, [pc, #116]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800065c:	4b23      	ldr	r3, [pc, #140]	@ (80006ec <Update_Params_Based_On_Mode_Selected+0x1cc>)
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fa7b 	bl	8000b5c <Update_Waveshape_with_CC_Value>
	}
	if(speed_fsm.current_state.shared_state == CC_MODE){
 8000666:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b02      	cmp	r3, #2
 800066e:	d105      	bne.n	800067c <Update_Params_Based_On_Mode_Selected+0x15c>
		Update_Speed_with_CC_Value(&CC_array[SPEED_ARR], &params);
 8000670:	4a17      	ldr	r2, [pc, #92]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000672:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <Update_Params_Based_On_Mode_Selected+0x1d0>)
 8000674:	0011      	movs	r1, r2
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fa95 	bl	8000ba6 <Update_Speed_with_CC_Value>
	}
	if(depth_fsm.current_state == CC_MODE){
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b02      	cmp	r3, #2
 8000684:	d105      	bne.n	8000692 <Update_Params_Based_On_Mode_Selected+0x172>
		Update_Depth_with_CC_Value(&CC_array[DEPTH_ARR], &params);
 8000686:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000688:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <Update_Params_Based_On_Mode_Selected+0x1d4>)
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f000 faa3 	bl	8000bd8 <Update_Depth_with_CC_Value>
	}
	if(symmetry_fsm.current_state == CC_MODE){
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b02      	cmp	r3, #2
 800069a:	d105      	bne.n	80006a8 <Update_Params_Based_On_Mode_Selected+0x188>
		Update_Symmetry_with_CC_Value(&CC_array[SYMMETRY_ARR], &params);
 800069c:	4a0c      	ldr	r2, [pc, #48]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <Update_Params_Based_On_Mode_Selected+0x1d8>)
 80006a0:	0011      	movs	r1, r2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 faab 	bl	8000bfe <Update_Symmetry_with_CC_Value>
	}
	if(phase_fsm.current_state == CC_MODE){
 80006a8:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	d105      	bne.n	80006be <Update_Params_Based_On_Mode_Selected+0x19e>
		Update_Phase_with_CC_Value(&CC_array[PHASE_ARR], &params);
 80006b2:	4a07      	ldr	r2, [pc, #28]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006b4:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <Update_Params_Based_On_Mode_Selected+0x1dc>)
 80006b6:	0011      	movs	r1, r2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fab9 	bl	8000c30 <Update_Phase_with_CC_Value>
	}

	return 1;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	0018      	movs	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	20000438 	.word	0x20000438
 80006cc:	20000c7c 	.word	0x20000c7c
 80006d0:	20000c58 	.word	0x20000c58
 80006d4:	20000430 	.word	0x20000430
 80006d8:	20000434 	.word	0x20000434
 80006dc:	2000043c 	.word	0x2000043c
 80006e0:	20000440 	.word	0x20000440
 80006e4:	200004bc 	.word	0x200004bc
 80006e8:	20000494 	.word	0x20000494
 80006ec:	200004c4 	.word	0x200004c4
 80006f0:	200004c5 	.word	0x200004c5
 80006f4:	200004c6 	.word	0x200004c6
 80006f8:	200004c7 	.word	0x200004c7
 80006fc:	200004c8 	.word	0x200004c8

08000700 <Convert_All_Preset_Values>:


uint8_t Convert_All_Preset_Values(volatile struct Preset* preset_ptr, volatile struct Preset_Converted* preset_converted_ptr){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]

	preset_converted_ptr->waveshape = preset_ptr->waveshape; //7-bit copy
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	701a      	strb	r2, [r3, #0]
	preset_converted_ptr->speed = (preset_ptr->speed) << 3; //convert to 10-bit
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	785b      	ldrb	r3, [r3, #1]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	b29a      	uxth	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	805a      	strh	r2, [r3, #2]
	preset_converted_ptr->depth = preset_ptr->depth; //7-bit copy
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	789b      	ldrb	r3, [r3, #2]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	711a      	strb	r2, [r3, #4]
	preset_converted_ptr->symmetry = (preset_ptr->symmetry) << 1; //convert to 8-bit
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	78db      	ldrb	r3, [r3, #3]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	18db      	adds	r3, r3, r3
 8000734:	b29a      	uxth	r2, r3
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	80da      	strh	r2, [r3, #6]
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	791b      	ldrb	r3, [r3, #4]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	b29a      	uxth	r2, r3
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	811a      	strh	r2, [r3, #8]

	return 1;
 8000748:	2301      	movs	r3, #1
}
 800074a:	0018      	movs	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	b002      	add	sp, #8
 8000750:	bd80      	pop	{r7, pc}

08000752 <Convert_All_Params_Values_for_Preset>:

uint8_t Convert_All_Params_Values_for_Preset(volatile struct Params *params_ptr, volatile struct Preset* preset_ptr){
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	6039      	str	r1, [r7, #0]

	preset_ptr->waveshape = params_ptr->waveshape; //7-bit copy
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	799b      	ldrb	r3, [r3, #6]
 8000760:	b2da      	uxtb	r2, r3
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	701a      	strb	r2, [r3, #0]
	preset_ptr->speed = params_ptr->speed >> 3; //convert from 10-bit to 7-bit
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	891b      	ldrh	r3, [r3, #8]
 800076a:	b29b      	uxth	r3, r3
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	b29b      	uxth	r3, r3
 8000770:	b2da      	uxtb	r2, r3
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	705a      	strb	r2, [r3, #1]
	preset_ptr->depth = params_ptr->depth; //7-bit copy
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7a9b      	ldrb	r3, [r3, #10]
 800077a:	b2da      	uxtb	r2, r3
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	709a      	strb	r2, [r3, #2]
	preset_ptr->symmetry = params_ptr->symmetry >> 1; //convert from 8-bit to 7-bit
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	899b      	ldrh	r3, [r3, #12]
 8000784:	b29b      	uxth	r3, r3
 8000786:	085b      	lsrs	r3, r3, #1
 8000788:	b29b      	uxth	r3, r3
 800078a:	b2da      	uxtb	r2, r3
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	70da      	strb	r2, [r3, #3]
	preset_ptr->phase = params_ptr->duty_delay_line_read_pointer_offset >> 2; //convert from 9-bit to 7-bit
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000794:	b29b      	uxth	r3, r3
 8000796:	089b      	lsrs	r3, r3, #2
 8000798:	b29b      	uxth	r3, r3
 800079a:	b2da      	uxtb	r2, r3
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	711a      	strb	r2, [r3, #4]

	return 1;
 80007a0:	2301      	movs	r3, #1
}
 80007a2:	0018      	movs	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b002      	add	sp, #8
 80007a8:	bd80      	pop	{r7, pc}

080007aa <Update_Waveshape_with_Converted_Preset_Value>:
	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;

	return 1;
}

uint8_t Update_Waveshape_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b084      	sub	sp, #16
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
 80007b2:	6039      	str	r1, [r7, #0]

	uint8_t waveshape = preset_converted_ptr->waveshape;
 80007b4:	210f      	movs	r1, #15
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	7812      	ldrb	r2, [r2, #0]
 80007bc:	701a      	strb	r2, [r3, #0]

	if(waveshape <= TRIANGLE_MODE_ADC_THRESHOLD){
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80007c4:	d803      	bhi.n	80007ce <Update_Waveshape_with_Converted_Preset_Value+0x24>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	2200      	movs	r2, #0
 80007ca:	719a      	strb	r2, [r3, #6]
 80007cc:	e011      	b.n	80007f2 <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SINE_MODE_ADC_THRESHOLD){
 80007ce:	230f      	movs	r3, #15
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b55      	cmp	r3, #85	@ 0x55
 80007d6:	d803      	bhi.n	80007e0 <Update_Waveshape_with_Converted_Preset_Value+0x36>
		params_ptr->waveshape = SINE_MODE; //sine wave
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	2201      	movs	r2, #1
 80007dc:	719a      	strb	r2, [r3, #6]
 80007de:	e008      	b.n	80007f2 <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SQUARE_MODE_ADC_THRESHOLD){
 80007e0:	230f      	movs	r3, #15
 80007e2:	18fb      	adds	r3, r7, r3
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db02      	blt.n	80007f2 <Update_Waveshape_with_Converted_Preset_Value+0x48>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	2202      	movs	r2, #2
 80007f0:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	0018      	movs	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b004      	add	sp, #16
 80007fa:	bd80      	pop	{r7, pc}

080007fc <Update_Speed_with_Converted_Preset_Value>:

uint8_t Update_Speed_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]

	params_ptr->speed = preset_converted_ptr->speed;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	885b      	ldrh	r3, [r3, #2]
 800080a:	b29a      	uxth	r2, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	811a      	strh	r2, [r3, #8]

	return 1;
 8000810:	2301      	movs	r3, #1
}
 8000812:	0018      	movs	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}

0800081a <Update_Depth_with_Converted_Preset_Value>:

uint8_t Update_Depth_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	6039      	str	r1, [r7, #0]

	params_ptr->depth = preset_converted_ptr->depth;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	791b      	ldrb	r3, [r3, #4]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	729a      	strb	r2, [r3, #10]

	return 1;
 800082e:	2301      	movs	r3, #1
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	b002      	add	sp, #8
 8000836:	bd80      	pop	{r7, pc}

08000838 <Update_Symmetry_with_Converted_Preset_Value>:

uint8_t Update_Symmetry_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]

	params_ptr->symmetry = preset_converted_ptr->symmetry;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	88db      	ldrh	r3, [r3, #6]
 8000846:	b29a      	uxth	r2, r3
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	819a      	strh	r2, [r3, #12]

	return 1;
 800084c:	2301      	movs	r3, #1
}
 800084e:	0018      	movs	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	b002      	add	sp, #8
 8000854:	bd80      	pop	{r7, pc}

08000856 <Update_Phase_with_Converted_Preset_Value>:

uint8_t Update_Phase_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
 800085e:	6039      	str	r1, [r7, #0]

	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	891b      	ldrh	r3, [r3, #8]
 8000864:	b29a      	uxth	r2, r3
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 800086a:	2301      	movs	r3, #1
}
 800086c:	0018      	movs	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	b002      	add	sp, #8
 8000872:	bd80      	pop	{r7, pc}

08000874 <Read_and_Interpret_Preset_From_Flash>:
	*Doubleword_ptr = packed;

	return 1;
}

uint8_t Read_and_Interpret_Preset_From_Flash(uint32_t address_val, volatile struct Preset* preset_ptr){
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]

	uint8_t *flash = (uint8_t *)address_val;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	613b      	str	r3, [r7, #16]
	uint8_t *preset = (uint8_t *)preset_ptr;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 8000886:	2317      	movs	r3, #23
 8000888:	18fb      	adds	r3, r7, r3
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
 800088e:	e020      	b.n	80008d2 <Read_and_Interpret_Preset_From_Flash+0x5e>

		if(*(flash + i) > 0x7F){ //127
 8000890:	2117      	movs	r1, #23
 8000892:	187b      	adds	r3, r7, r1
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	18d3      	adds	r3, r2, r3
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b25b      	sxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	da06      	bge.n	80008b0 <Read_and_Interpret_Preset_From_Flash+0x3c>
			*(preset + i) = 0x7F;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	18d3      	adds	r3, r2, r3
 80008aa:	227f      	movs	r2, #127	@ 0x7f
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	e00a      	b.n	80008c6 <Read_and_Interpret_Preset_From_Flash+0x52>
		}
		else{
			*(preset + i) = *(flash + i);
 80008b0:	2117      	movs	r1, #23
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	18d2      	adds	r2, r2, r3
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	68f9      	ldr	r1, [r7, #12]
 80008c0:	18cb      	adds	r3, r1, r3
 80008c2:	7812      	ldrb	r2, [r2, #0]
 80008c4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 80008c6:	2117      	movs	r1, #23
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	3201      	adds	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
 80008d2:	2317      	movs	r3, #23
 80008d4:	18fb      	adds	r3, r7, r3
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b04      	cmp	r3, #4
 80008da:	d9d9      	bls.n	8000890 <Read_and_Interpret_Preset_From_Flash+0x1c>
		}
	}

	return 1;
 80008dc:	2301      	movs	r3, #1
}
 80008de:	0018      	movs	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b006      	add	sp, #24
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <Read_and_Interpret_Misc_From_Flash>:
	*Doubleword_ptr = packed;

	return 1;
}

uint8_t Read_and_Interpret_Misc_From_Flash(uint32_t address_val, volatile enum Validate *user_presets_used_array_ptr, volatile uint32_t *statuses_ptr, volatile enum MIDI_Channel *MIDI_basic_channel_ptr, uint8_t num_presets){
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b088      	sub	sp, #32
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	60f8      	str	r0, [r7, #12]
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
 80008f2:	603b      	str	r3, [r7, #0]

	uint8_t *address = (uint8_t *)address_val;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	61bb      	str	r3, [r7, #24]

	volatile uint8_t interpretted_value = 0;
 80008f8:	2316      	movs	r3, #22
 80008fa:	18fb      	adds	r3, r7, r3
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]

	//PRESETS
	for(uint8_t i = 0; i < num_presets; i++){
 8000900:	231f      	movs	r3, #31
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	e02c      	b.n	8000964 <Read_and_Interpret_Misc_From_Flash+0x7e>

		interpretted_value = *(address + i);
 800090a:	211f      	movs	r1, #31
 800090c:	187b      	adds	r3, r7, r1
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	18d3      	adds	r3, r2, r3
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	2016      	movs	r0, #22
 8000918:	183b      	adds	r3, r7, r0
 800091a:	701a      	strb	r2, [r3, #0]

		if(interpretted_value == (enum Validate)YES){
 800091c:	183b      	adds	r3, r7, r0
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b01      	cmp	r3, #1
 8000924:	d106      	bne.n	8000934 <Read_and_Interpret_Misc_From_Flash+0x4e>

			*(user_presets_used_array_ptr + i) = (enum Validate)YES;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	18d3      	adds	r3, r2, r3
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
 8000932:	e011      	b.n	8000958 <Read_and_Interpret_Misc_From_Flash+0x72>
		}
		else if((interpretted_value == 0xFF) || (interpretted_value == (enum Validate)NO)){
 8000934:	2216      	movs	r2, #22
 8000936:	18bb      	adds	r3, r7, r2
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2bff      	cmp	r3, #255	@ 0xff
 800093e:	d004      	beq.n	800094a <Read_and_Interpret_Misc_From_Flash+0x64>
 8000940:	18bb      	adds	r3, r7, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d106      	bne.n	8000958 <Read_and_Interpret_Misc_From_Flash+0x72>

			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
 800094a:	231f      	movs	r3, #31
 800094c:	18fb      	adds	r3, r7, r3
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	68ba      	ldr	r2, [r7, #8]
 8000952:	18d3      	adds	r3, r2, r3
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < num_presets; i++){
 8000958:	211f      	movs	r1, #31
 800095a:	187b      	adds	r3, r7, r1
 800095c:	781a      	ldrb	r2, [r3, #0]
 800095e:	187b      	adds	r3, r7, r1
 8000960:	3201      	adds	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
 8000964:	231f      	movs	r3, #31
 8000966:	18fa      	adds	r2, r7, r3
 8000968:	2128      	movs	r1, #40	@ 0x28
 800096a:	187b      	adds	r3, r7, r1
 800096c:	7812      	ldrb	r2, [r2, #0]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	429a      	cmp	r2, r3
 8000972:	d3ca      	bcc.n	800090a <Read_and_Interpret_Misc_From_Flash+0x24>
		}
	}

	//START REQUIRED BEFORE SYNC MODE
	interpretted_value = *(address + num_presets);
 8000974:	187b      	adds	r3, r7, r1
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	18d3      	adds	r3, r2, r3
 800097c:	781a      	ldrb	r2, [r3, #0]
 800097e:	2116      	movs	r1, #22
 8000980:	187b      	adds	r3, r7, r1
 8000982:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)NO){
 8000984:	187b      	adds	r3, r7, r1
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d105      	bne.n	800099a <Read_and_Interpret_Misc_From_Flash+0xb4>
		Clear_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2180      	movs	r1, #128	@ 0x80
 8000992:	0018      	movs	r0, r3
 8000994:	f005 fcac 	bl	80062f0 <Clear_Status_Bit>
 8000998:	e00f      	b.n	80009ba <Read_and_Interpret_Misc_From_Flash+0xd4>
	}
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 800099a:	2216      	movs	r2, #22
 800099c:	18bb      	adds	r3, r7, r2
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d004      	beq.n	80009b0 <Read_and_Interpret_Misc_From_Flash+0xca>
 80009a6:	18bb      	adds	r3, r7, r2
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2bff      	cmp	r3, #255	@ 0xff
 80009ae:	d104      	bne.n	80009ba <Read_and_Interpret_Misc_From_Flash+0xd4>
		Set_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2180      	movs	r1, #128	@ 0x80
 80009b4:	0018      	movs	r0, r3
 80009b6:	f005 fc89 	bl	80062cc <Set_Status_Bit>
	}

	//OMNI ON/OFF
	interpretted_value = *(address + num_presets + 1);
 80009ba:	2328      	movs	r3, #40	@ 0x28
 80009bc:	18fb      	adds	r3, r7, r3
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	3301      	adds	r3, #1
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	18d3      	adds	r3, r2, r3
 80009c6:	781a      	ldrb	r2, [r3, #0]
 80009c8:	2116      	movs	r1, #22
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)YES){
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d107      	bne.n	80009e8 <Read_and_Interpret_Misc_From_Flash+0x102>
		Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI ON
 80009d8:	2380      	movs	r3, #128	@ 0x80
 80009da:	00da      	lsls	r2, r3, #3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	0011      	movs	r1, r2
 80009e0:	0018      	movs	r0, r3
 80009e2:	f005 fc73 	bl	80062cc <Set_Status_Bit>
 80009e6:	e011      	b.n	8000a0c <Read_and_Interpret_Misc_From_Flash+0x126>
	}
	else if((interpretted_value == (enum Validate)NO) || (interpretted_value == 0xFF)){
 80009e8:	2216      	movs	r2, #22
 80009ea:	18bb      	adds	r3, r7, r2
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d004      	beq.n	80009fe <Read_and_Interpret_Misc_From_Flash+0x118>
 80009f4:	18bb      	adds	r3, r7, r2
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2bff      	cmp	r3, #255	@ 0xff
 80009fc:	d106      	bne.n	8000a0c <Read_and_Interpret_Misc_From_Flash+0x126>
		Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI OFF
 80009fe:	2380      	movs	r3, #128	@ 0x80
 8000a00:	00da      	lsls	r2, r3, #3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	0011      	movs	r1, r2
 8000a06:	0018      	movs	r0, r3
 8000a08:	f005 fc72 	bl	80062f0 <Clear_Status_Bit>
	}

	//BASIC CHANNEL
	interpretted_value = *(address + num_presets + 2);
 8000a0c:	2328      	movs	r3, #40	@ 0x28
 8000a0e:	18fb      	adds	r3, r7, r3
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	3302      	adds	r3, #2
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	18d3      	adds	r3, r2, r3
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	2116      	movs	r1, #22
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	701a      	strb	r2, [r3, #0]

	if(interpretted_value > (uint8_t)MIDI_CH_SIXTEEN){
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b0f      	cmp	r3, #15
 8000a28:	d908      	bls.n	8000a3c <Read_and_Interpret_Misc_From_Flash+0x156>

		uint8_t midi_channel_default = MIDI_BASIC_CHANNEL_DEFAULT;
 8000a2a:	2117      	movs	r1, #23
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)midi_channel_default;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	187a      	adds	r2, r7, r1
 8000a36:	7812      	ldrb	r2, [r2, #0]
 8000a38:	701a      	strb	r2, [r3, #0]
 8000a3a:	e005      	b.n	8000a48 <Read_and_Interpret_Misc_From_Flash+0x162>
	}
	else{

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)interpretted_value;
 8000a3c:	2316      	movs	r3, #22
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8000a48:	2301      	movs	r3, #1
}
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b008      	add	sp, #32
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>:

uint8_t Update_Converted_Preset_Array_with_User_or_Factory_Presets(volatile struct Preset_Converted* presets_converted_array_ptr,
																	volatile enum Validate *user_presets_used_array_ptr,
																	const struct Preset **factory_presets_array_ptr,
																	volatile struct Preset **user_presets_array_ptr,
																	uint8_t size_of_factory_and_user_arrays){
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	60f8      	str	r0, [r7, #12]
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
 8000a5e:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000a60:	2317      	movs	r3, #23
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
 8000a68:	e03c      	b.n	8000ae4 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x92>

		if(*(user_presets_used_array_ptr + i) == (enum Validate)YES){
 8000a6a:	2117      	movs	r1, #23
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	68ba      	ldr	r2, [r7, #8]
 8000a72:	18d3      	adds	r3, r2, r3
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d112      	bne.n	8000aa2 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x50>
			Convert_All_Preset_Values(*(user_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	683a      	ldr	r2, [r7, #0]
 8000a84:	18d3      	adds	r3, r2, r3
 8000a86:	6818      	ldr	r0, [r3, #0]
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	0013      	movs	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	189b      	adds	r3, r3, r2
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	001a      	movs	r2, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	189b      	adds	r3, r3, r2
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	f7ff fe30 	bl	8000700 <Convert_All_Preset_Values>
 8000aa0:	e01a      	b.n	8000ad8 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
		}
		else if(*(user_presets_used_array_ptr + i) == (enum Validate)NO){
 8000aa2:	2117      	movs	r1, #23
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	68ba      	ldr	r2, [r7, #8]
 8000aaa:	18d3      	adds	r3, r2, r3
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d111      	bne.n	8000ad8 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
			Convert_All_Preset_Values((struct Preset *) *(factory_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	18d3      	adds	r3, r2, r3
 8000abe:	6818      	ldr	r0, [r3, #0]
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	781a      	ldrb	r2, [r3, #0]
 8000ac4:	0013      	movs	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	189b      	adds	r3, r3, r2
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	001a      	movs	r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	189b      	adds	r3, r3, r2
 8000ad2:	0019      	movs	r1, r3
 8000ad4:	f7ff fe14 	bl	8000700 <Convert_All_Preset_Values>
	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000ad8:	2117      	movs	r1, #23
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	781a      	ldrb	r2, [r3, #0]
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	3201      	adds	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
 8000ae4:	2317      	movs	r3, #23
 8000ae6:	18fa      	adds	r2, r7, r3
 8000ae8:	2320      	movs	r3, #32
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	7812      	ldrb	r2, [r2, #0]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d3ba      	bcc.n	8000a6a <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x18>
		}
	}

	return 1;
 8000af4:	2301      	movs	r3, #1
}
 8000af6:	0018      	movs	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b006      	add	sp, #24
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <Read_and_Interpret_User_Presets_From_Flash>:

uint8_t Read_and_Interpret_User_Presets_From_Flash(void){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &user_preset_0);
 8000b04:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <Read_and_Interpret_User_Presets_From_Flash+0x3c>)
 8000b06:	4a0e      	ldr	r2, [pc, #56]	@ (8000b40 <Read_and_Interpret_User_Presets_From_Flash+0x40>)
 8000b08:	0019      	movs	r1, r3
 8000b0a:	0010      	movs	r0, r2
 8000b0c:	f7ff feb2 	bl	8000874 <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &user_preset_1);
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <Read_and_Interpret_User_Presets_From_Flash+0x44>)
 8000b12:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <Read_and_Interpret_User_Presets_From_Flash+0x48>)
 8000b14:	0019      	movs	r1, r3
 8000b16:	0010      	movs	r0, r2
 8000b18:	f7ff feac 	bl	8000874 <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &user_preset_2);
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <Read_and_Interpret_User_Presets_From_Flash+0x4c>)
 8000b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b50 <Read_and_Interpret_User_Presets_From_Flash+0x50>)
 8000b20:	0019      	movs	r1, r3
 8000b22:	0010      	movs	r0, r2
 8000b24:	f7ff fea6 	bl	8000874 <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &user_preset_3);
 8000b28:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <Read_and_Interpret_User_Presets_From_Flash+0x54>)
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b58 <Read_and_Interpret_User_Presets_From_Flash+0x58>)
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	0010      	movs	r0, r2
 8000b30:	f7ff fea0 	bl	8000874 <Read_and_Interpret_Preset_From_Flash>

	return 1;
 8000b34:	2301      	movs	r3, #1
}
 8000b36:	0018      	movs	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	0800f800 	.word	0x0800f800
 8000b44:	20000008 	.word	0x20000008
 8000b48:	0800f808 	.word	0x0800f808
 8000b4c:	20000010 	.word	0x20000010
 8000b50:	0800f810 	.word	0x0800f810
 8000b54:	20000018 	.word	0x20000018
 8000b58:	0800f818 	.word	0x0800f818

08000b5c <Update_Waveshape_with_CC_Value>:

uint8_t Update_Waveshape_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]

	if(*data <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b6e:	d803      	bhi.n	8000b78 <Update_Waveshape_with_CC_Value+0x1c>
		params_ptr->waveshape = TRIANGLE_MODE;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	2200      	movs	r2, #0
 8000b74:	719a      	strb	r2, [r3, #6]
 8000b76:	e011      	b.n	8000b9c <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SINE_MODE_ADC_THRESHOLD){
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b55      	cmp	r3, #85	@ 0x55
 8000b80:	d803      	bhi.n	8000b8a <Update_Waveshape_with_CC_Value+0x2e>
		params_ptr->waveshape = SINE_MODE;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	2201      	movs	r2, #1
 8000b86:	719a      	strb	r2, [r3, #6]
 8000b88:	e008      	b.n	8000b9c <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SQUARE_MODE_ADC_THRESHOLD){
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	db02      	blt.n	8000b9c <Update_Waveshape_with_CC_Value+0x40>
		params_ptr->waveshape = SQUARE_MODE;
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	2202      	movs	r2, #2
 8000b9a:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 8000b9c:	2301      	movs	r3, #1
}
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <Update_Speed_with_CC_Value>:

uint8_t Update_Speed_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b084      	sub	sp, #16
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]

	uint16_t speed = (uint16_t)*data;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	210e      	movs	r1, #14
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	801a      	strh	r2, [r3, #0]

	speed <<= 3; //convert to 10-bit
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	187a      	adds	r2, r7, r1
 8000bc0:	8812      	ldrh	r2, [r2, #0]
 8000bc2:	00d2      	lsls	r2, r2, #3
 8000bc4:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = speed;
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	187a      	adds	r2, r7, r1
 8000bca:	8812      	ldrh	r2, [r2, #0]
 8000bcc:	811a      	strh	r2, [r3, #8]

	return 1;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b004      	add	sp, #16
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <Update_Depth_with_CC_Value>:

uint8_t Update_Depth_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]

	uint8_t depth = (uint8_t)*data;
 8000be2:	210f      	movs	r1, #15
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	7812      	ldrb	r2, [r2, #0]
 8000bea:	701a      	strb	r2, [r3, #0]
	params_ptr->depth = depth;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	187a      	adds	r2, r7, r1
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	729a      	strb	r2, [r3, #10]

	return 1;
 8000bf4:	2301      	movs	r3, #1
}
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b004      	add	sp, #16
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <Update_Symmetry_with_CC_Value>:

uint8_t Update_Symmetry_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]

	uint8_t symmetry = (uint8_t)*data;
 8000c08:	210f      	movs	r1, #15
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	7812      	ldrb	r2, [r2, #0]
 8000c10:	701a      	strb	r2, [r3, #0]

	symmetry <<= 1; //convert to 8-bit
 8000c12:	187a      	adds	r2, r7, r1
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	18db      	adds	r3, r3, r3
 8000c1a:	7013      	strb	r3, [r2, #0]
	params_ptr->symmetry = symmetry;
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	819a      	strh	r2, [r3, #12]

	return 1;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	0018      	movs	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b004      	add	sp, #16
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <Update_Phase_with_CC_Value>:

uint8_t Update_Phase_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]

	uint8_t phase = (uint8_t)*data;
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	701a      	strb	r2, [r3, #0]

	phase <<= 2; //convert to 9-bit
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	187a      	adds	r2, r7, r1
 8000c48:	7812      	ldrb	r2, [r2, #0]
 8000c4a:	0092      	lsls	r2, r2, #2
 8000c4c:	701a      	strb	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = phase;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8000c58:	2301      	movs	r3, #1
}
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b004      	add	sp, #16
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <Set_Waveshape_to_CC_Mode_and_Value>:

uint8_t Set_Waveshape_to_CC_Mode_and_Value(uint8_t *data){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4b07      	ldr	r3, [pc, #28]	@ (8000c90 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c74:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = CC_MODE;
 8000c76:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c78:	2202      	movs	r2, #2
 8000c7a:	701a      	strb	r2, [r3, #0]

	CC_array[WAVESHAPE_ARR] = *data;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	781a      	ldrb	r2, [r3, #0]
 8000c80:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <Set_Waveshape_to_CC_Mode_and_Value+0x30>)
 8000c82:	701a      	strb	r2, [r3, #0]

	return 1;
 8000c84:	2301      	movs	r3, #1
}
 8000c86:	0018      	movs	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b002      	add	sp, #8
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	20000438 	.word	0x20000438
 8000c94:	200004c4 	.word	0x200004c4

08000c98 <Set_Speed_to_CC_Mode_and_Value>:

uint8_t Set_Speed_to_CC_Mode_and_Value(uint8_t *data){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000ca0:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000ca8:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000cac:	2202      	movs	r2, #2
 8000cae:	701a      	strb	r2, [r3, #0]

	CC_array[SPEED_ARR] = *data;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	781a      	ldrb	r2, [r3, #0]
 8000cb4:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <Set_Speed_to_CC_Mode_and_Value+0x30>)
 8000cb6:	705a      	strb	r2, [r3, #1]

	return 1;
 8000cb8:	2301      	movs	r3, #1
}
 8000cba:	0018      	movs	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			@ (mov r8, r8)
 8000cc4:	20000430 	.word	0x20000430
 8000cc8:	200004c4 	.word	0x200004c4

08000ccc <Set_Depth_to_CC_Mode_and_Value>:

uint8_t Set_Depth_to_CC_Mode_and_Value(uint8_t *data){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b07      	ldr	r3, [pc, #28]	@ (8000cf8 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000cdc:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = CC_MODE;
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	701a      	strb	r2, [r3, #0]

	CC_array[DEPTH_ARR] = *data;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	781a      	ldrb	r2, [r3, #0]
 8000ce8:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <Set_Depth_to_CC_Mode_and_Value+0x30>)
 8000cea:	709a      	strb	r2, [r3, #2]

	return 1;
 8000cec:	2301      	movs	r3, #1
}
 8000cee:	0018      	movs	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	20000434 	.word	0x20000434
 8000cfc:	200004c4 	.word	0x200004c4

08000d00 <Set_Symmetry_to_CC_Mode_and_Value>:

uint8_t Set_Symmetry_to_CC_Mode_and_Value(uint8_t *data){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000d08:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000d10:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = CC_MODE;
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000d14:	2202      	movs	r2, #2
 8000d16:	701a      	strb	r2, [r3, #0]

	CC_array[SYMMETRY_ARR] = *data;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	781a      	ldrb	r2, [r3, #0]
 8000d1c:	4b04      	ldr	r3, [pc, #16]	@ (8000d30 <Set_Symmetry_to_CC_Mode_and_Value+0x30>)
 8000d1e:	70da      	strb	r2, [r3, #3]

	return 1;
 8000d20:	2301      	movs	r3, #1
}
 8000d22:	0018      	movs	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	2000043c 	.word	0x2000043c
 8000d30:	200004c4 	.word	0x200004c4

08000d34 <Set_Phase_to_CC_Mode_and_Value>:

uint8_t Set_Phase_to_CC_Mode_and_Value(uint8_t *data){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000d44:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = CC_MODE;
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000d48:	2202      	movs	r2, #2
 8000d4a:	701a      	strb	r2, [r3, #0]

	CC_array[PHASE_ARR] = *data;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	781a      	ldrb	r2, [r3, #0]
 8000d50:	4b04      	ldr	r3, [pc, #16]	@ (8000d64 <Set_Phase_to_CC_Mode_and_Value+0x30>)
 8000d52:	711a      	strb	r2, [r3, #4]

	return 1;
 8000d54:	2301      	movs	r3, #1
}
 8000d56:	0018      	movs	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	20000440 	.word	0x20000440
 8000d64:	200004c4 	.word	0x200004c4

08000d68 <Set_All_Pots_to_PC_Mode>:

uint8_t Set_All_Pots_to_PC_Mode(void){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d74:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = PC_MODE;
 8000d76:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d78:	2203      	movs	r2, #3
 8000d7a:	701a      	strb	r2, [r3, #0]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d84:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.shared_state = PC_MODE;
 8000d86:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d88:	2203      	movs	r2, #3
 8000d8a:	701a      	strb	r2, [r3, #0]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <Set_All_Pots_to_PC_Mode+0x64>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <Set_All_Pots_to_PC_Mode+0x64>)
 8000d94:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = PC_MODE;
 8000d96:	4b0d      	ldr	r3, [pc, #52]	@ (8000dcc <Set_All_Pots_to_PC_Mode+0x64>)
 8000d98:	2203      	movs	r2, #3
 8000d9a:	701a      	strb	r2, [r3, #0]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <Set_All_Pots_to_PC_Mode+0x68>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <Set_All_Pots_to_PC_Mode+0x68>)
 8000da4:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = PC_MODE;
 8000da6:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <Set_All_Pots_to_PC_Mode+0x68>)
 8000da8:	2203      	movs	r2, #3
 8000daa:	701a      	strb	r2, [r3, #0]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000dac:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <Set_All_Pots_to_PC_Mode+0x6c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4b08      	ldr	r3, [pc, #32]	@ (8000dd4 <Set_All_Pots_to_PC_Mode+0x6c>)
 8000db4:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = PC_MODE;
 8000db6:	4b07      	ldr	r3, [pc, #28]	@ (8000dd4 <Set_All_Pots_to_PC_Mode+0x6c>)
 8000db8:	2203      	movs	r2, #3
 8000dba:	701a      	strb	r2, [r3, #0]

	return 1;
 8000dbc:	2301      	movs	r3, #1
}
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000438 	.word	0x20000438
 8000dc8:	20000430 	.word	0x20000430
 8000dcc:	20000434 	.word	0x20000434
 8000dd0:	2000043c 	.word	0x2000043c
 8000dd4:	20000440 	.word	0x20000440

08000dd8 <Store_Params_as_User_Preset>:
uint8_t Store_Params_as_User_Preset(enum Preset_Selected preset,
									volatile struct Params *params_ptr,
									volatile enum Validate *user_presets_used_array_ptr,
									volatile struct Preset **user_presets_array_ptr,
									const struct Preset **factory_presets_array_ptr,
									volatile struct Preset_Converted *presets_converted_array_ptr){
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b089      	sub	sp, #36	@ 0x24
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	240f      	movs	r4, #15
 8000de6:	193b      	adds	r3, r7, r4
 8000de8:	1c02      	adds	r2, r0, #0
 8000dea:	701a      	strb	r2, [r3, #0]

	//this function takes whatever the params for the pots are currently set to, regardless of CC, PC, etc.
	//and stores them to a given preset

	uint8_t preset_index = (uint8_t)preset - 1;
 8000dec:	2117      	movs	r1, #23
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	193a      	adds	r2, r7, r4
 8000df2:	7812      	ldrb	r2, [r2, #0]
 8000df4:	3a01      	subs	r2, #1
 8000df6:	701a      	strb	r2, [r3, #0]

	*(user_presets_used_array_ptr + preset_index) = YES;
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	18d3      	adds	r3, r2, r3
 8000e00:	2201      	movs	r2, #1
 8000e02:	701a      	strb	r2, [r3, #0]

	Convert_All_Params_Values_for_Preset(params_ptr, *(user_presets_array_ptr + preset_index));
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	18d3      	adds	r3, r2, r3
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	0011      	movs	r1, r2
 8000e14:	0018      	movs	r0, r3
 8000e16:	f7ff fc9c 	bl	8000752 <Convert_All_Params_Values_for_Preset>
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array_ptr,
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000e22:	2404      	movs	r4, #4
 8000e24:	9400      	str	r4, [sp, #0]
 8000e26:	f7ff fe14 	bl	8000a52 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
																user_presets_used_array_ptr,
																factory_presets_array_ptr,
																user_presets_array_ptr,
																NUM_PRESETS);

	return 1;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b007      	add	sp, #28
 8000e32:	bd90      	pop	{r4, r7, pc}

08000e34 <set_LED_to_state>:

//VARIABLE DEFINITIONS
volatile uint8_t LED_counter = 0;
volatile uint32_t led_blink_period = LED_BLINK_PERIOD;

uint8_t set_LED_to_state(volatile struct LED_FSM *LED_FSM_ptr, enum LED_States desired_state){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	000a      	movs	r2, r1
 8000e3e:	1cfb      	adds	r3, r7, #3
 8000e40:	701a      	strb	r2, [r3, #0]

	if(desired_state == LED_CONFIRM){
 8000e42:	1cfb      	adds	r3, r7, #3
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b07      	cmp	r3, #7
 8000e48:	d114      	bne.n	8000e74 <set_LED_to_state+0x40>

		if(LED_fsm.current_state != LED_CONFIRM){
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec0 <set_LED_to_state+0x8c>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b07      	cmp	r3, #7
 8000e52:	d026      	beq.n	8000ea2 <set_LED_to_state+0x6e>

			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000e54:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <set_LED_to_state+0x90>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	625a      	str	r2, [r3, #36]	@ 0x24
			led_blink_period = LED_BLINK_PERIOD >> 1;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <set_LED_to_state+0x94>)
 8000e5e:	2296      	movs	r2, #150	@ 0x96
 8000e60:	601a      	str	r2, [r3, #0]
			LED_counter = 0;
 8000e62:	4b1a      	ldr	r3, [pc, #104]	@ (8000ecc <set_LED_to_state+0x98>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, led_blink_period);
 8000e68:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <set_LED_to_state+0x90>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a16      	ldr	r2, [pc, #88]	@ (8000ec8 <set_LED_to_state+0x94>)
 8000e6e:	6812      	ldr	r2, [r2, #0]
 8000e70:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e72:	e016      	b.n	8000ea2 <set_LED_to_state+0x6e>
		}
	}
	else{

		if(LED_FSM_ptr->current_state != desired_state){
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	1cfa      	adds	r2, r7, #3
 8000e7c:	7812      	ldrb	r2, [r2, #0]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d00f      	beq.n	8000ea2 <set_LED_to_state+0x6e>

			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000e82:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <set_LED_to_state+0x90>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	@ 0x24
			led_blink_period = LED_BLINK_PERIOD;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <set_LED_to_state+0x94>)
 8000e8c:	2296      	movs	r2, #150	@ 0x96
 8000e8e:	0052      	lsls	r2, r2, #1
 8000e90:	601a      	str	r2, [r3, #0]
			LED_counter = 0;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <set_LED_to_state+0x98>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, led_blink_period);
 8000e98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <set_LED_to_state+0x90>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <set_LED_to_state+0x94>)
 8000e9e:	6812      	ldr	r2, [r2, #0]
 8000ea0:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}

	LED_FSM_ptr->prev_state = LED_FSM_ptr->current_state;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	705a      	strb	r2, [r3, #1]
	LED_FSM_ptr->current_state = desired_state;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	1cfa      	adds	r2, r7, #3
 8000eb0:	7812      	ldrb	r2, [r2, #0]
 8000eb2:	701a      	strb	r2, [r3, #0]

	return 1;
 8000eb4:	2301      	movs	r3, #1
}
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b002      	add	sp, #8
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	20000448 	.word	0x20000448
 8000ec4:	200005e0 	.word	0x200005e0
 8000ec8:	20000020 	.word	0x20000020
 8000ecc:	200004c9 	.word	0x200004c9

08000ed0 <Is_Status_Byte>:
volatile uint8_t active_status_byte;
volatile uint8_t running_status_byte;
volatile struct MIDI_Data MIDI_data = {.MIDI_data_buffer = 0};

//FUNCTION DEFINITIONS
enum Validate Is_Status_Byte(volatile uint8_t *data){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000ed8:	210f      	movs	r1, #15
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	7812      	ldrb	r2, [r2, #0]
 8000ee0:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000ee2:	187b      	adds	r3, r7, r1
 8000ee4:	187a      	adds	r2, r7, r1
 8000ee6:	7812      	ldrb	r2, [r2, #0]
 8000ee8:	09d2      	lsrs	r2, r2, #7
 8000eea:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <Is_Status_Byte+0x28>

		return (enum Validate)YES;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e000      	b.n	8000efa <Is_Status_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)NO;
 8000ef8:	2300      	movs	r3, #0
	}
}
 8000efa:	0018      	movs	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b004      	add	sp, #16
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <Is_Data_Byte>:

enum Validate Is_Data_Byte(volatile uint8_t *data){
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b084      	sub	sp, #16
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	7812      	ldrb	r2, [r2, #0]
 8000f12:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	187a      	adds	r2, r7, r1
 8000f18:	7812      	ldrb	r2, [r2, #0]
 8000f1a:	09d2      	lsrs	r2, r2, #7
 8000f1c:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <Is_Data_Byte+0x28>

		return (enum Validate)NO;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e000      	b.n	8000f2c <Is_Data_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)YES;
 8000f2a:	2301      	movs	r3, #1
	}
}
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b004      	add	sp, #16
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <Is_PC_Status_Byte>:

enum Validate Is_PC_Status_Byte(volatile uint8_t *data){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_PROGRAM_CHANGE >> 4;
 8000f3c:	210f      	movs	r1, #15
 8000f3e:	187b      	adds	r3, r7, r1
 8000f40:	220c      	movs	r2, #12
 8000f42:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	200e      	movs	r0, #14
 8000f4c:	183b      	adds	r3, r7, r0
 8000f4e:	0912      	lsrs	r2, r2, #4
 8000f50:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000f52:	183a      	adds	r2, r7, r0
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	7812      	ldrb	r2, [r2, #0]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d101      	bne.n	8000f62 <Is_PC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <Is_PC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000f62:	2300      	movs	r3, #0
	}
}
 8000f64:	0018      	movs	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b004      	add	sp, #16
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <Is_CC_Status_Byte>:

enum Validate Is_CC_Status_Byte(volatile uint8_t *data){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_CONTROL_CHANGE >> 4;
 8000f74:	210f      	movs	r1, #15
 8000f76:	187b      	adds	r3, r7, r1
 8000f78:	220b      	movs	r2, #11
 8000f7a:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	200e      	movs	r0, #14
 8000f84:	183b      	adds	r3, r7, r0
 8000f86:	0912      	lsrs	r2, r2, #4
 8000f88:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000f8a:	183a      	adds	r2, r7, r0
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	7812      	ldrb	r2, [r2, #0]
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d101      	bne.n	8000f9a <Is_CC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <Is_CC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000f9a:	2300      	movs	r3, #0
	}
}
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b004      	add	sp, #16
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>:

enum Validate Is_Utilised_Channel_Mode_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b77      	cmp	r3, #119	@ 0x77
 8000fb4:	d91d      	bls.n	8000ff2 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4e>

		if(*first_data_byte == RESET_ALL_CONTROLLERS){ //put all pots into CC mode and set to 50%
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b79      	cmp	r3, #121	@ 0x79
 8000fbe:	d101      	bne.n	8000fc4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x20>

			return (enum Validate)YES;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e017      	b.n	8000ff4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == LOCAL_CONTROL){
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b7a      	cmp	r3, #122	@ 0x7a
 8000fcc:	d101      	bne.n	8000fd2 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x2e>

			return (enum Validate)YES;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e010      	b.n	8000ff4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_ON){
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b7d      	cmp	r3, #125	@ 0x7d
 8000fda:	d101      	bne.n	8000fe0 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x3c>

			return (enum Validate)YES;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e009      	b.n	8000ff4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_OFF){
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b7c      	cmp	r3, #124	@ 0x7c
 8000fe8:	d101      	bne.n	8000fee <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4a>

			return (enum Validate)YES;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e002      	b.n	8000ff4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else{

			return (enum Validate)NO;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e000      	b.n	8000ff4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
	}
	else{

		return (enum Validate)NO;
 8000ff2:	2300      	movs	r3, #0
	}
}
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b002      	add	sp, #8
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <Is_Utilised_CC_First_Data_Byte>:

enum Validate Is_Utilised_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b77      	cmp	r3, #119	@ 0x77
 800100c:	d901      	bls.n	8001012 <Is_Utilised_CC_First_Data_Byte+0x16>

		return (enum Validate)NO;
 800100e:	2300      	movs	r3, #0
 8001010:	e023      	b.n	800105a <Is_Utilised_CC_First_Data_Byte+0x5e>
	}
	else{

		if(*first_data_byte == WAVESHAPE_CC){
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b14      	cmp	r3, #20
 800101a:	d101      	bne.n	8001020 <Is_Utilised_CC_First_Data_Byte+0x24>

			return (enum Validate)YES;
 800101c:	2301      	movs	r3, #1
 800101e:	e01c      	b.n	800105a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SPEED_CC){
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b15      	cmp	r3, #21
 8001028:	d101      	bne.n	800102e <Is_Utilised_CC_First_Data_Byte+0x32>

			return (enum Validate)YES;
 800102a:	2301      	movs	r3, #1
 800102c:	e015      	b.n	800105a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == DEPTH_CC){
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b16      	cmp	r3, #22
 8001036:	d101      	bne.n	800103c <Is_Utilised_CC_First_Data_Byte+0x40>

			return (enum Validate)YES;
 8001038:	2301      	movs	r3, #1
 800103a:	e00e      	b.n	800105a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SYMMETRY_CC){
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b17      	cmp	r3, #23
 8001044:	d101      	bne.n	800104a <Is_Utilised_CC_First_Data_Byte+0x4e>

			return (enum Validate)YES;
 8001046:	2301      	movs	r3, #1
 8001048:	e007      	b.n	800105a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == PHASE_CC){
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b18      	cmp	r3, #24
 8001052:	d101      	bne.n	8001058 <Is_Utilised_CC_First_Data_Byte+0x5c>

			return (enum Validate)YES;
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else{

			return (enum Validate)NO;
 8001058:	2300      	movs	r3, #0
		}
	}
}
 800105a:	0018      	movs	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	b002      	add	sp, #8
 8001060:	bd80      	pop	{r7, pc}

08001062 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>:

enum Validate Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(volatile uint8_t *first_data_byte, volatile uint8_t *second_data_byte){
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]

	if(*first_data_byte == RESET_ALL_CONTROLLERS){
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b79      	cmp	r3, #121	@ 0x79
 8001074:	d108      	bne.n	8001088 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x26>

		if(*second_data_byte == 0){
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x22>

			return (enum Validate)YES;
 8001080:	2301      	movs	r3, #1
 8001082:	e031      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8001084:	2300      	movs	r3, #0
 8001086:	e02f      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == LOCAL_CONTROL){
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b7a      	cmp	r3, #122	@ 0x7a
 8001090:	d10d      	bne.n	80010ae <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x4c>

		if((*second_data_byte == 0) || (*second_data_byte == 127)){
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d004      	beq.n	80010a6 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x44>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80010a4:	d101      	bne.n	80010aa <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x48>

			return (enum Validate)YES;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e01e      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e01c      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_OFF){
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b7c      	cmp	r3, #124	@ 0x7c
 80010b6:	d108      	bne.n	80010ca <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x68>

		if((*second_data_byte == 0)){
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x64>

			return (enum Validate)YES;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e010      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e00e      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_ON){
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b7d      	cmp	r3, #125	@ 0x7d
 80010d2:	d108      	bne.n	80010e6 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x84>

		if((*second_data_byte == 0)){
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x80>

			return (enum Validate)YES;
 80010de:	2301      	movs	r3, #1
 80010e0:	e002      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else{

		return (enum Validate)NO; //should not even be called if first data byte is always valid
 80010e6:	2300      	movs	r3, #0
	}
}
 80010e8:	0018      	movs	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b002      	add	sp, #8
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <Is_Sysex_Start_Status_Byte>:
	}

	return 1;
}

enum Validate Is_Sysex_Start_Status_Byte(volatile uint8_t *data){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

	if(*data == (uint8_t)SYSTEM_EXCLUSIVE_START){
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2bf0      	cmp	r3, #240	@ 0xf0
 8001100:	d101      	bne.n	8001106 <Is_Sysex_Start_Status_Byte+0x16>

		return (enum Validate)YES;
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <Is_Sysex_Start_Status_Byte+0x18>
	}
	else{

		return (enum Validate)NO;
 8001106:	2300      	movs	r3, #0
	}
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	b002      	add	sp, #8
 800110e:	bd80      	pop	{r7, pc}

08001110 <Is_Channelised_Status_Byte_On_Basic_Channel>:

		return (enum Validate)NO;
	}
}

enum Validate Is_Channelised_Status_Byte_On_Basic_Channel(volatile uint8_t *data, volatile enum MIDI_Channel MIDI_basic_channel){
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	000a      	movs	r2, r1
 800111a:	1cfb      	adds	r3, r7, #3
 800111c:	701a      	strb	r2, [r3, #0]

	uint8_t ch = *data & 0x0F;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	200f      	movs	r0, #15
 8001126:	183b      	adds	r3, r7, r0
 8001128:	210f      	movs	r1, #15
 800112a:	400a      	ands	r2, r1
 800112c:	701a      	strb	r2, [r3, #0]
	uint8_t b_ch = (uint8_t)MIDI_basic_channel;
 800112e:	210e      	movs	r1, #14
 8001130:	187b      	adds	r3, r7, r1
 8001132:	1cfa      	adds	r2, r7, #3
 8001134:	7812      	ldrb	r2, [r2, #0]
 8001136:	701a      	strb	r2, [r3, #0]

	if(ch == b_ch){
 8001138:	183a      	adds	r2, r7, r0
 800113a:	187b      	adds	r3, r7, r1
 800113c:	7812      	ldrb	r2, [r2, #0]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	429a      	cmp	r2, r3
 8001142:	d101      	bne.n	8001148 <Is_Channelised_Status_Byte_On_Basic_Channel+0x38>

		return (enum Validate)YES;
 8001144:	2301      	movs	r3, #1
 8001146:	e000      	b.n	800114a <Is_Channelised_Status_Byte_On_Basic_Channel+0x3a>
	}
	else{

		return (enum Validate)NO;
 8001148:	2300      	movs	r3, #0
	}
}
 800114a:	0018      	movs	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	b004      	add	sp, #16
 8001150:	bd80      	pop	{r7, pc}

08001152 <Is_Data_Buffer_Empty>:

enum Validate Is_Data_Buffer_Empty(volatile struct MIDI_Data *MIDI_data_struct){
 8001152:	b580      	push	{r7, lr}
 8001154:	b084      	sub	sp, #16
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]

	uint16_t sum = 0;
 800115a:	230e      	movs	r3, #14
 800115c:	18fb      	adds	r3, r7, r3
 800115e:	2200      	movs	r2, #0
 8001160:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001162:	230d      	movs	r3, #13
 8001164:	18fb      	adds	r3, r7, r3
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	e011      	b.n	8001190 <Is_Data_Buffer_Empty+0x3e>

		sum += MIDI_data_struct->MIDI_data_buffer[i];
 800116c:	200d      	movs	r0, #13
 800116e:	183b      	adds	r3, r7, r0
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	5cd3      	ldrb	r3, [r2, r3]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	0019      	movs	r1, r3
 800117a:	220e      	movs	r2, #14
 800117c:	18bb      	adds	r3, r7, r2
 800117e:	18ba      	adds	r2, r7, r2
 8001180:	8812      	ldrh	r2, [r2, #0]
 8001182:	188a      	adds	r2, r1, r2
 8001184:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001186:	183b      	adds	r3, r7, r0
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	183b      	adds	r3, r7, r0
 800118c:	3201      	adds	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	230d      	movs	r3, #13
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b09      	cmp	r3, #9
 8001198:	d9e8      	bls.n	800116c <Is_Data_Buffer_Empty+0x1a>
	}

	if(sum == 0){
 800119a:	230e      	movs	r3, #14
 800119c:	18fb      	adds	r3, r7, r3
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <Is_Data_Buffer_Empty+0x56>

		return (enum Validate)YES;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e000      	b.n	80011aa <Is_Data_Buffer_Empty+0x58>
	}
	else{

		return (enum Validate)NO;
 80011a8:	2300      	movs	r3, #0
	}
}
 80011aa:	0018      	movs	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b004      	add	sp, #16
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <Clear_Data_Buffer>:
			return 1;
		}
	}
}

uint8_t Clear_Data_Buffer(volatile struct MIDI_Data *MIDI_data_struct){
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 80011ba:	230f      	movs	r3, #15
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	e00a      	b.n	80011da <Clear_Data_Buffer+0x28>

		MIDI_data_struct->MIDI_data_buffer[i] = 0;
 80011c4:	200f      	movs	r0, #15
 80011c6:	183b      	adds	r3, r7, r0
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	2100      	movs	r1, #0
 80011ce:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 80011d0:	183b      	adds	r3, r7, r0
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	183b      	adds	r3, r7, r0
 80011d6:	3201      	adds	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
 80011da:	230f      	movs	r3, #15
 80011dc:	18fb      	adds	r3, r7, r3
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b09      	cmp	r3, #9
 80011e2:	d9ef      	bls.n	80011c4 <Clear_Data_Buffer+0x12>
	}

	return 1;
 80011e4:	2301      	movs	r3, #1
}
 80011e6:	0018      	movs	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b004      	add	sp, #16
 80011ec:	bd80      	pop	{r7, pc}

080011ee <Is_Program_Change_Data_Byte_In_Range>:

enum Validate Is_Program_Change_Data_Byte_In_Range(volatile uint8_t *PC_data, uint8_t size_of_factory_or_user_array){
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	000a      	movs	r2, r1
 80011f8:	1cfb      	adds	r3, r7, #3
 80011fa:	701a      	strb	r2, [r3, #0]

	if(*PC_data < size_of_factory_or_user_array){
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	1cfa      	adds	r2, r7, #3
 8001204:	7812      	ldrb	r2, [r2, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d901      	bls.n	800120e <Is_Program_Change_Data_Byte_In_Range+0x20>

		return (enum Validate)YES;
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <Is_Program_Change_Data_Byte_In_Range+0x22>
	}
	else{

		return (enum Validate)NO;
 800120e:	2300      	movs	r3, #0
	}
}
 8001210:	0018      	movs	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	b002      	add	sp, #8
 8001216:	bd80      	pop	{r7, pc}

08001218 <Is_System_Real_Time_Status_Byte>:

enum Validate Is_System_Real_Time_Status_Byte(volatile uint8_t *data){
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

	if(*data == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2bf8      	cmp	r3, #248	@ 0xf8
 8001228:	d101      	bne.n	800122e <Is_System_Real_Time_Status_Byte+0x16>
		return (enum Validate)YES;
 800122a:	2301      	movs	r3, #1
 800122c:	e023      	b.n	8001276 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_START){
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2bfa      	cmp	r3, #250	@ 0xfa
 8001236:	d101      	bne.n	800123c <Is_System_Real_Time_Status_Byte+0x24>
		return (enum Validate)YES;
 8001238:	2301      	movs	r3, #1
 800123a:	e01c      	b.n	8001276 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_CONTINUE){
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2bfb      	cmp	r3, #251	@ 0xfb
 8001244:	d101      	bne.n	800124a <Is_System_Real_Time_Status_Byte+0x32>
		return (enum Validate)YES;
 8001246:	2301      	movs	r3, #1
 8001248:	e015      	b.n	8001276 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_STOP){
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2bfc      	cmp	r3, #252	@ 0xfc
 8001252:	d101      	bne.n	8001258 <Is_System_Real_Time_Status_Byte+0x40>
		return (enum Validate)YES;
 8001254:	2301      	movs	r3, #1
 8001256:	e00e      	b.n	8001276 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_ACTIVE_SENSING){
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001260:	d101      	bne.n	8001266 <Is_System_Real_Time_Status_Byte+0x4e>
		return (enum Validate)YES;
 8001262:	2301      	movs	r3, #1
 8001264:	e007      	b.n	8001276 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_RESET){
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2bff      	cmp	r3, #255	@ 0xff
 800126e:	d101      	bne.n	8001274 <Is_System_Real_Time_Status_Byte+0x5c>
		return (enum Validate)YES;
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else{
		return (enum Validate)NO;
 8001274:	2300      	movs	r3, #0
	}
}
 8001276:	0018      	movs	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	b002      	add	sp, #8
 800127c:	bd80      	pop	{r7, pc}

0800127e <Is_OMNI_On>:

enum Validate Is_OMNI_On(volatile uint32_t *statuses_ptr){
 800127e:	b5b0      	push	{r4, r5, r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]

	uint8_t omni_mode = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001286:	250f      	movs	r5, #15
 8001288:	197c      	adds	r4, r7, r5
 800128a:	2380      	movs	r3, #128	@ 0x80
 800128c:	00da      	lsls	r2, r3, #3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	0011      	movs	r1, r2
 8001292:	0018      	movs	r0, r3
 8001294:	f005 f806 	bl	80062a4 <Get_Status_Bit>
 8001298:	0003      	movs	r3, r0
 800129a:	7023      	strb	r3, [r4, #0]

	if(omni_mode == 1){
 800129c:	197b      	adds	r3, r7, r5
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <Is_OMNI_On+0x2a>

		return (enum Validate)YES;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <Is_OMNI_On+0x2c>
	}
	else{

		return (enum Validate)NO;
 80012a8:	2300      	movs	r3, #0
	}
}
 80012aa:	0018      	movs	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b004      	add	sp, #16
 80012b0:	bdb0      	pop	{r4, r5, r7, pc}

080012b2 <Reset_and_Stop_MIDI_Software_Timer>:

uint8_t Reset_and_Stop_MIDI_Software_Timer(uint32_t *midi_counter_ptr, volatile uint32_t *statuses_ptr){
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]

	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Is_Running);
 80012bc:	2380      	movs	r3, #128	@ 0x80
 80012be:	005a      	lsls	r2, r3, #1
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	0011      	movs	r1, r2
 80012c4:	0018      	movs	r0, r3
 80012c6:	f005 f813 	bl	80062f0 <Clear_Status_Bit>
	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Has_Timed_Out);
 80012ca:	2380      	movs	r3, #128	@ 0x80
 80012cc:	009a      	lsls	r2, r3, #2
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	0011      	movs	r1, r2
 80012d2:	0018      	movs	r0, r3
 80012d4:	f005 f80c 	bl	80062f0 <Clear_Status_Bit>
	*midi_counter_ptr = 0;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]

	return 1;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	0018      	movs	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b002      	add	sp, #8
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <Reset_All_Controllers>:

uint8_t Reset_All_Controllers(struct Params *params_ptr, struct Delay_Line* delay_line_ptr){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80012f2:	4b24      	ldr	r3, [pc, #144]	@ (8001384 <Reset_All_Controllers+0x9c>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b22      	ldr	r3, [pc, #136]	@ (8001384 <Reset_All_Controllers+0x9c>)
 80012fa:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 80012fc:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <Reset_All_Controllers+0xa0>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <Reset_All_Controllers+0xa0>)
 8001304:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8001306:	4b21      	ldr	r3, [pc, #132]	@ (800138c <Reset_All_Controllers+0xa4>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b1f      	ldr	r3, [pc, #124]	@ (800138c <Reset_All_Controllers+0xa4>)
 800130e:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8001310:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <Reset_All_Controllers+0xa8>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <Reset_All_Controllers+0xa8>)
 8001318:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 800131a:	4b1e      	ldr	r3, [pc, #120]	@ (8001394 <Reset_All_Controllers+0xac>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <Reset_All_Controllers+0xac>)
 8001322:	705a      	strb	r2, [r3, #1]

	//Put all pots into CC mode
	waveshape_fsm.current_state = CC_MODE;
 8001324:	4b17      	ldr	r3, [pc, #92]	@ (8001384 <Reset_All_Controllers+0x9c>)
 8001326:	2202      	movs	r2, #2
 8001328:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 800132a:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <Reset_All_Controllers+0xa0>)
 800132c:	2202      	movs	r2, #2
 800132e:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = CC_MODE;
 8001330:	4b16      	ldr	r3, [pc, #88]	@ (800138c <Reset_All_Controllers+0xa4>)
 8001332:	2202      	movs	r2, #2
 8001334:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = CC_MODE;
 8001336:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <Reset_All_Controllers+0xa8>)
 8001338:	2202      	movs	r2, #2
 800133a:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = CC_MODE;
 800133c:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <Reset_All_Controllers+0xac>)
 800133e:	2202      	movs	r2, #2
 8001340:	701a      	strb	r2, [r3, #0]

	uint8_t data = 127 >> 1;
 8001342:	230e      	movs	r3, #14
 8001344:	18fb      	adds	r3, r7, r3
 8001346:	223f      	movs	r2, #63	@ 0x3f
 8001348:	701a      	strb	r2, [r3, #0]

	for(uint8_t index = 0; index < NUM_POTS; index++){
 800134a:	230f      	movs	r3, #15
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
 8001352:	e00c      	b.n	800136e <Reset_All_Controllers+0x86>

		CC_array[index] = data;
 8001354:	200f      	movs	r0, #15
 8001356:	183b      	adds	r3, r7, r0
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	4a0f      	ldr	r2, [pc, #60]	@ (8001398 <Reset_All_Controllers+0xb0>)
 800135c:	210e      	movs	r1, #14
 800135e:	1879      	adds	r1, r7, r1
 8001360:	7809      	ldrb	r1, [r1, #0]
 8001362:	54d1      	strb	r1, [r2, r3]
	for(uint8_t index = 0; index < NUM_POTS; index++){
 8001364:	183b      	adds	r3, r7, r0
 8001366:	781a      	ldrb	r2, [r3, #0]
 8001368:	183b      	adds	r3, r7, r0
 800136a:	3201      	adds	r2, #1
 800136c:	701a      	strb	r2, [r3, #0]
 800136e:	230f      	movs	r3, #15
 8001370:	18fb      	adds	r3, r7, r3
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b04      	cmp	r3, #4
 8001376:	d9ed      	bls.n	8001354 <Reset_All_Controllers+0x6c>
	}

	return 1;
 8001378:	2301      	movs	r3, #1
}
 800137a:	0018      	movs	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	b004      	add	sp, #16
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	20000438 	.word	0x20000438
 8001388:	20000430 	.word	0x20000430
 800138c:	20000434 	.word	0x20000434
 8001390:	2000043c 	.word	0x2000043c
 8001394:	20000440 	.word	0x20000440
 8001398:	200004c4 	.word	0x200004c4

0800139c <Set_Local_Control>:

uint8_t Set_Local_Control(){
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80013a0:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <Set_Local_Control+0x5c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <Set_Local_Control+0x5c>)
 80013a8:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 80013aa:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <Set_Local_Control+0x60>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <Set_Local_Control+0x60>)
 80013b2:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 80013b4:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <Set_Local_Control+0x64>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <Set_Local_Control+0x64>)
 80013bc:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 80013be:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <Set_Local_Control+0x68>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <Set_Local_Control+0x68>)
 80013c6:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <Set_Local_Control+0x6c>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <Set_Local_Control+0x6c>)
 80013d0:	705a      	strb	r2, [r3, #1]

	//Put all pots into manual mode
	waveshape_fsm.current_state = MANUAL_MODE;
 80013d2:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <Set_Local_Control+0x5c>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = MANUAL_MODE;
 80013d8:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <Set_Local_Control+0x60>)
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = MANUAL_MODE;
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <Set_Local_Control+0x64>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = MANUAL_MODE;
 80013e4:	4b07      	ldr	r3, [pc, #28]	@ (8001404 <Set_Local_Control+0x68>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = MANUAL_MODE;
 80013ea:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <Set_Local_Control+0x6c>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	701a      	strb	r2, [r3, #0]

	return 1;
 80013f0:	2301      	movs	r3, #1
}
 80013f2:	0018      	movs	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000438 	.word	0x20000438
 80013fc:	20000430 	.word	0x20000430
 8001400:	20000434 	.word	0x20000434
 8001404:	2000043c 	.word	0x2000043c
 8001408:	20000440 	.word	0x20000440

0800140c <Set_OMNI_Off>:

uint8_t Set_OMNI_Off(volatile uint32_t *statuses_ptr){
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

	//Clear status bit
	Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001414:	2380      	movs	r3, #128	@ 0x80
 8001416:	00da      	lsls	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	0011      	movs	r1, r2
 800141c:	0018      	movs	r0, r3
 800141e:	f004 ff67 	bl	80062f0 <Clear_Status_Bit>

	return 1;
 8001422:	2301      	movs	r3, #1
}
 8001424:	0018      	movs	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	b002      	add	sp, #8
 800142a:	bd80      	pop	{r7, pc}

0800142c <Set_OMNI_On>:

uint8_t Set_OMNI_On(volatile uint32_t *statuses_ptr){
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

	//Set status bit
	Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001434:	2380      	movs	r3, #128	@ 0x80
 8001436:	00da      	lsls	r2, r3, #3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	0011      	movs	r1, r2
 800143c:	0018      	movs	r0, r3
 800143e:	f004 ff45 	bl	80062cc <Set_Status_Bit>

	return 1;
 8001442:	2301      	movs	r3, #1
}
 8001444:	0018      	movs	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	b002      	add	sp, #8
 800144a:	bd80      	pop	{r7, pc}

0800144c <Start_UART_Receive>:
//VARIABLE DEFINITIONS
volatile uint8_t rx_buffer[1] = {0};
volatile enum Validate UART_DMA_TX_is_complete = YES;

//FUNCTION DEFINITIONS
uint8_t Start_UART_Receive(void){
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0

	//START UART RECEIVE
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8001450:	4904      	ldr	r1, [pc, #16]	@ (8001464 <Start_UART_Receive+0x18>)
 8001452:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <Start_UART_Receive+0x1c>)
 8001454:	2201      	movs	r2, #1
 8001456:	0018      	movs	r0, r3
 8001458:	f00a fe3a 	bl	800c0d0 <HAL_UART_Receive_DMA>

	return 1;
 800145c:	2301      	movs	r3, #1
}
 800145e:	0018      	movs	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200004dc 	.word	0x200004dc
 8001468:	20000a48 	.word	0x20000a48

0800146c <Pot_Check>:
volatile uint8_t symmetry_pot_adc_measurement_num = 0;
volatile uint8_t phase_pot_adc_measurement_num = 0;
volatile uint8_t pots_counter = 0;

//FUNCTION DEFINITIONS
uint8_t Pot_Check(volatile uint16_t* ADCResults_arr, enum Pot_Type pot_type){
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	@ 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	000a      	movs	r2, r1
 8001476:	1cfb      	adds	r3, r7, #3
 8001478:	701a      	strb	r2, [r3, #0]
	static uint16_t second_symmetry_measurement;

	static uint16_t first_phase_measurement;
	static uint16_t second_phase_measurement;

	uint16_t *first_measurement_ptr = NULL;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t *second_measurement_ptr = NULL;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
	volatile uint8_t *measurement_num_ptr = NULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
	void *measurement_ptr = NULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
	uint8_t tolerance = 0;
 800148a:	2117      	movs	r1, #23
 800148c:	187b      	adds	r3, r7, r1
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
	volatile struct Normal_FSM* normal_fsm_ptr = NULL;
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]

	if(pot_type == WAVESHAPE_POT){
 800149a:	1cfb      	adds	r3, r7, #3
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10d      	bne.n	80014be <Pot_Check+0x52>

		first_measurement_ptr = &first_waveshape_measurement;
 80014a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001658 <Pot_Check+0x1ec>)
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_waveshape_measurement;
 80014a6:	4b6d      	ldr	r3, [pc, #436]	@ (800165c <Pot_Check+0x1f0>)
 80014a8:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &waveshape_pot_adc_measurement_num;
 80014aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001660 <Pot_Check+0x1f4>)
 80014ac:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + WAVESHAPE_ADC_RESULT_INDEX);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	61bb      	str	r3, [r7, #24]
		tolerance = WAVESHAPE_TOLERANCE;
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	2246      	movs	r2, #70	@ 0x46
 80014b6:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &waveshape_fsm;
 80014b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001664 <Pot_Check+0x1f8>)
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	e04e      	b.n	800155c <Pot_Check+0xf0>
	}
	else if(pot_type == SPEED_POT){
 80014be:	1cfb      	adds	r3, r7, #3
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d10f      	bne.n	80014e6 <Pot_Check+0x7a>

		first_measurement_ptr = &first_speed_measurement;
 80014c6:	4b68      	ldr	r3, [pc, #416]	@ (8001668 <Pot_Check+0x1fc>)
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_speed_measurement;
 80014ca:	4b68      	ldr	r3, [pc, #416]	@ (800166c <Pot_Check+0x200>)
 80014cc:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &speed_pot_adc_measurement_num;
 80014ce:	4b68      	ldr	r3, [pc, #416]	@ (8001670 <Pot_Check+0x204>)
 80014d0:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SPEED_ADC_RESULT_INDEX);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3302      	adds	r3, #2
 80014d6:	61bb      	str	r3, [r7, #24]
		tolerance = SPEED_TOLERANCE;
 80014d8:	2317      	movs	r3, #23
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	2246      	movs	r2, #70	@ 0x46
 80014de:	701a      	strb	r2, [r3, #0]
		speed_fsm_ptr = &speed_fsm;
 80014e0:	4b64      	ldr	r3, [pc, #400]	@ (8001674 <Pot_Check+0x208>)
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	e03a      	b.n	800155c <Pot_Check+0xf0>
	}
	else if(pot_type == DEPTH_POT){
 80014e6:	1cfb      	adds	r3, r7, #3
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d10f      	bne.n	800150e <Pot_Check+0xa2>

		first_measurement_ptr = &first_depth_measurement;
 80014ee:	4b62      	ldr	r3, [pc, #392]	@ (8001678 <Pot_Check+0x20c>)
 80014f0:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_depth_measurement;
 80014f2:	4b62      	ldr	r3, [pc, #392]	@ (800167c <Pot_Check+0x210>)
 80014f4:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &depth_pot_adc_measurement_num;
 80014f6:	4b62      	ldr	r3, [pc, #392]	@ (8001680 <Pot_Check+0x214>)
 80014f8:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DEPTH_ADC_RESULT_INDEX);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3304      	adds	r3, #4
 80014fe:	61bb      	str	r3, [r7, #24]
		tolerance = DEPTH_TOLERANCE;
 8001500:	2317      	movs	r3, #23
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	2246      	movs	r2, #70	@ 0x46
 8001506:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &depth_fsm;
 8001508:	4b5e      	ldr	r3, [pc, #376]	@ (8001684 <Pot_Check+0x218>)
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	e026      	b.n	800155c <Pot_Check+0xf0>
	}
	else if(pot_type == SYMMETRY_POT){
 800150e:	1cfb      	adds	r3, r7, #3
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b03      	cmp	r3, #3
 8001514:	d10f      	bne.n	8001536 <Pot_Check+0xca>

		first_measurement_ptr = &first_symmetry_measurement;
 8001516:	4b5c      	ldr	r3, [pc, #368]	@ (8001688 <Pot_Check+0x21c>)
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_symmetry_measurement;
 800151a:	4b5c      	ldr	r3, [pc, #368]	@ (800168c <Pot_Check+0x220>)
 800151c:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &symmetry_pot_adc_measurement_num;
 800151e:	4b5c      	ldr	r3, [pc, #368]	@ (8001690 <Pot_Check+0x224>)
 8001520:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SYMMETRY_ADC_RESULT_INDEX);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3306      	adds	r3, #6
 8001526:	61bb      	str	r3, [r7, #24]
		tolerance = SYMMETRY_TOLERANCE;
 8001528:	2317      	movs	r3, #23
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	2246      	movs	r2, #70	@ 0x46
 800152e:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &symmetry_fsm;
 8001530:	4b58      	ldr	r3, [pc, #352]	@ (8001694 <Pot_Check+0x228>)
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	e012      	b.n	800155c <Pot_Check+0xf0>
	}
	else if(pot_type == PHASE_POT){
 8001536:	1cfb      	adds	r3, r7, #3
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b04      	cmp	r3, #4
 800153c:	d10e      	bne.n	800155c <Pot_Check+0xf0>

		first_measurement_ptr = &first_phase_measurement;
 800153e:	4b56      	ldr	r3, [pc, #344]	@ (8001698 <Pot_Check+0x22c>)
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_phase_measurement;
 8001542:	4b56      	ldr	r3, [pc, #344]	@ (800169c <Pot_Check+0x230>)
 8001544:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &phase_pot_adc_measurement_num;
 8001546:	4b56      	ldr	r3, [pc, #344]	@ (80016a0 <Pot_Check+0x234>)
 8001548:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3308      	adds	r3, #8
 800154e:	61bb      	str	r3, [r7, #24]
		tolerance = PHASE_TOLERANCE;
 8001550:	2317      	movs	r3, #23
 8001552:	18fb      	adds	r3, r7, r3
 8001554:	2246      	movs	r2, #70	@ 0x46
 8001556:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &phase_fsm;
 8001558:	4b52      	ldr	r3, [pc, #328]	@ (80016a4 <Pot_Check+0x238>)
 800155a:	613b      	str	r3, [r7, #16]
	}

	if(*measurement_num_ptr == 0){
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10b      	bne.n	800157e <Pot_Check+0x112>

		*first_measurement_ptr = *((uint16_t*)measurement_ptr);
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	881a      	ldrh	r2, [r3, #0]
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	801a      	strh	r2, [r3, #0]

			(*measurement_num_ptr)++;
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	3301      	adds	r3, #1
 8001576:	b2da      	uxtb	r2, r3
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	e066      	b.n	800164c <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 1){
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b01      	cmp	r3, #1
 8001586:	d10b      	bne.n	80015a0 <Pot_Check+0x134>

		*second_measurement_ptr = *((uint16_t*)measurement_ptr);
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	881a      	ldrh	r2, [r3, #0]
 800158c:	6a3b      	ldr	r3, [r7, #32]
 800158e:	801a      	strh	r2, [r3, #0]

		(*measurement_num_ptr)++;
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	3301      	adds	r3, #1
 8001598:	b2da      	uxtb	r2, r3
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	701a      	strb	r2, [r3, #0]
 800159e:	e055      	b.n	800164c <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 2){
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d150      	bne.n	800164c <Pot_Check+0x1e0>

		*measurement_num_ptr = 0;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]

		uint16_t diff = 0;
 80015b0:	200a      	movs	r0, #10
 80015b2:	183b      	adds	r3, r7, r0
 80015b4:	2200      	movs	r2, #0
 80015b6:	801a      	strh	r2, [r3, #0]

		if(*first_measurement_ptr > *second_measurement_ptr){
 80015b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ba:	881a      	ldrh	r2, [r3, #0]
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d907      	bls.n	80015d4 <Pot_Check+0x168>

			diff = *first_measurement_ptr - *second_measurement_ptr;
 80015c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c6:	8819      	ldrh	r1, [r3, #0]
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	881a      	ldrh	r2, [r3, #0]
 80015cc:	183b      	adds	r3, r7, r0
 80015ce:	1a8a      	subs	r2, r1, r2
 80015d0:	801a      	strh	r2, [r3, #0]
 80015d2:	e00d      	b.n	80015f0 <Pot_Check+0x184>

		}
		else if(*second_measurement_ptr > *first_measurement_ptr){
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	881a      	ldrh	r2, [r3, #0]
 80015d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d907      	bls.n	80015f0 <Pot_Check+0x184>

			diff = *second_measurement_ptr - *first_measurement_ptr;
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	8819      	ldrh	r1, [r3, #0]
 80015e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e6:	881a      	ldrh	r2, [r3, #0]
 80015e8:	230a      	movs	r3, #10
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	1a8a      	subs	r2, r1, r2
 80015ee:	801a      	strh	r2, [r3, #0]
		/*else{

			diff = 0
		}*/

		if(diff > tolerance){
 80015f0:	2317      	movs	r3, #23
 80015f2:	18fb      	adds	r3, r7, r3
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	220a      	movs	r2, #10
 80015fa:	18ba      	adds	r2, r7, r2
 80015fc:	8812      	ldrh	r2, [r2, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d924      	bls.n	800164c <Pot_Check+0x1e0>

			if(normal_fsm_ptr != NULL){
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d008      	beq.n	800161a <Pot_Check+0x1ae>

				normal_fsm_ptr->prev_state = normal_fsm_ptr->current_state;
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	705a      	strb	r2, [r3, #1]
				normal_fsm_ptr->current_state = MANUAL_MODE;
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
 8001618:	e018      	b.n	800164c <Pot_Check+0x1e0>

			}
			else if(speed_fsm_ptr != NULL){
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d015      	beq.n	800164c <Pot_Check+0x1e0>

				speed_fsm_ptr->prev_state = speed_fsm_ptr->current_state;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	705a      	strb	r2, [r3, #1]
				speed_fsm_ptr->current_state.shared_state = MANUAL_MODE;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2201      	movs	r2, #1
 800162c:	701a      	strb	r2, [r3, #0]
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 800162e:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <Pot_Check+0x23c>)
 8001630:	2120      	movs	r1, #32
 8001632:	0018      	movs	r0, r3
 8001634:	f004 fe5c 	bl	80062f0 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001638:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <Pot_Check+0x23c>)
 800163a:	2140      	movs	r1, #64	@ 0x40
 800163c:	0018      	movs	r0, r3
 800163e:	f004 fe57 	bl	80062f0 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, First_Sync_Complete);
 8001642:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <Pot_Check+0x23c>)
 8001644:	2108      	movs	r1, #8
 8001646:	0018      	movs	r0, r3
 8001648:	f004 fe52 	bl	80062f0 <Clear_Status_Bit>
			}
		}
	}

	return 1;
 800164c:	2301      	movs	r3, #1
}
 800164e:	0018      	movs	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	b00a      	add	sp, #40	@ 0x28
 8001654:	bd80      	pop	{r7, pc}
 8001656:	46c0      	nop			@ (mov r8, r8)
 8001658:	200004e4 	.word	0x200004e4
 800165c:	200004e6 	.word	0x200004e6
 8001660:	200004dd 	.word	0x200004dd
 8001664:	20000438 	.word	0x20000438
 8001668:	200004e8 	.word	0x200004e8
 800166c:	200004ea 	.word	0x200004ea
 8001670:	200004de 	.word	0x200004de
 8001674:	20000430 	.word	0x20000430
 8001678:	200004ec 	.word	0x200004ec
 800167c:	200004ee 	.word	0x200004ee
 8001680:	200004df 	.word	0x200004df
 8001684:	20000434 	.word	0x20000434
 8001688:	200004f0 	.word	0x200004f0
 800168c:	200004f2 	.word	0x200004f2
 8001690:	200004e0 	.word	0x200004e0
 8001694:	2000043c 	.word	0x2000043c
 8001698:	200004f4 	.word	0x200004f4
 800169c:	200004f6 	.word	0x200004f6
 80016a0:	200004e1 	.word	0x200004e1
 80016a4:	20000440 	.word	0x20000440
 80016a8:	20000c3c 	.word	0x20000c3c

080016ac <Check_Tap_Tempo_Switch_State>:

uint8_t Check_Tap_Tempo_Switch_State(volatile struct Tap_Tempo_Switch_States *tap_tempo_switch_states_ptr){
 80016ac:	b5b0      	push	{r4, r5, r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

	static uint8_t extend_rising_edge = 0;
	static uint8_t tap_tempo_switch_state_counter = TAP_TEMPO_SWITCH_CONFIDENCE_COUNT;

	uint8_t switch_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 80016b4:	250f      	movs	r5, #15
 80016b6:	197c      	adds	r4, r7, r5
 80016b8:	2380      	movs	r3, #128	@ 0x80
 80016ba:	00da      	lsls	r2, r3, #3
 80016bc:	23a0      	movs	r3, #160	@ 0xa0
 80016be:	05db      	lsls	r3, r3, #23
 80016c0:	0011      	movs	r1, r2
 80016c2:	0018      	movs	r0, r3
 80016c4:	f006 fe94 	bl	80083f0 <HAL_GPIO_ReadPin>
 80016c8:	0003      	movs	r3, r0
 80016ca:	7023      	strb	r3, [r4, #0]

	if(switch_state == 0){
 80016cc:	197b      	adds	r3, r7, r5
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10a      	bne.n	80016ea <Check_Tap_Tempo_Switch_State+0x3e>

		if(tap_tempo_switch_state_counter != 0){
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d01e      	beq.n	800171a <Check_Tap_Tempo_Switch_State+0x6e>

			tap_tempo_switch_state_counter--;
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 80016e6:	701a      	strb	r2, [r3, #0]
 80016e8:	e017      	b.n	800171a <Check_Tap_Tempo_Switch_State+0x6e>
		}
	}
	else{

		if(tap_tempo_switch_state_counter != TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 80016ea:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b0e      	cmp	r3, #14
 80016f0:	d013      	beq.n	800171a <Check_Tap_Tempo_Switch_State+0x6e>

			if(extend_rising_edge == COUNT_TO_DELAY_RISING_TAP_TEMPO_EDGE){
 80016f2:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <Check_Tap_Tempo_Switch_State+0x9c>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	d109      	bne.n	800170e <Check_Tap_Tempo_Switch_State+0x62>

				tap_tempo_switch_state_counter++;
 80016fa:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 8001704:	701a      	strb	r2, [r3, #0]
				extend_rising_edge = 0;
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
 800170c:	e005      	b.n	800171a <Check_Tap_Tempo_Switch_State+0x6e>
			}
			else{
				extend_rising_edge++;
 800170e:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001718:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(tap_tempo_switch_state_counter == 0){
 800171a:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d103      	bne.n	800172a <Check_Tap_Tempo_Switch_State+0x7e>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	e006      	b.n	8001738 <Check_Tap_Tempo_Switch_State+0x8c>
	}
	else if(tap_tempo_switch_state_counter == TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <Check_Tap_Tempo_Switch_State+0x98>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b0e      	cmp	r3, #14
 8001730:	d102      	bne.n	8001738 <Check_Tap_Tempo_Switch_State+0x8c>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = NOT_DEPRESSED;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8001738:	2301      	movs	r3, #1
}
 800173a:	0018      	movs	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	b004      	add	sp, #16
 8001740:	bdb0      	pop	{r4, r5, r7, pc}
 8001742:	46c0      	nop			@ (mov r8, r8)
 8001744:	20000024 	.word	0x20000024
 8001748:	200004f8 	.word	0x200004f8

0800174c <SystemClock_Config>:

LPTIM_HandleTypeDef hlptim1;

//FUNCTIONS
void SystemClock_Config(void)
{
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b093      	sub	sp, #76	@ 0x4c
 8001750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001752:	2410      	movs	r4, #16
 8001754:	193b      	adds	r3, r7, r4
 8001756:	0018      	movs	r0, r3
 8001758:	2338      	movs	r3, #56	@ 0x38
 800175a:	001a      	movs	r2, r3
 800175c:	2100      	movs	r1, #0
 800175e:	f00b ffd9 	bl	800d714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001762:	003b      	movs	r3, r7
 8001764:	0018      	movs	r0, r3
 8001766:	2310      	movs	r3, #16
 8001768:	001a      	movs	r2, r3
 800176a:	2100      	movs	r1, #0
 800176c:	f00b ffd2 	bl	800d714 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001770:	2380      	movs	r3, #128	@ 0x80
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	0018      	movs	r0, r3
 8001776:	f007 faad 	bl	8008cd4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800177a:	193b      	adds	r3, r7, r4
 800177c:	2202      	movs	r2, #2
 800177e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001780:	193b      	adds	r3, r7, r4
 8001782:	2280      	movs	r2, #128	@ 0x80
 8001784:	0052      	lsls	r2, r2, #1
 8001786:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001788:	0021      	movs	r1, r4
 800178a:	187b      	adds	r3, r7, r1
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001790:	187b      	adds	r3, r7, r1
 8001792:	2240      	movs	r2, #64	@ 0x40
 8001794:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001796:	187b      	adds	r3, r7, r1
 8001798:	2202      	movs	r2, #2
 800179a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800179c:	187b      	adds	r3, r7, r1
 800179e:	2202      	movs	r2, #2
 80017a0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80017a2:	187b      	adds	r3, r7, r1
 80017a4:	2200      	movs	r2, #0
 80017a6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	2208      	movs	r2, #8
 80017ac:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	2280      	movs	r2, #128	@ 0x80
 80017b2:	0292      	lsls	r2, r2, #10
 80017b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80017b6:	187b      	adds	r3, r7, r1
 80017b8:	22c0      	movs	r2, #192	@ 0xc0
 80017ba:	04d2      	lsls	r2, r2, #19
 80017bc:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017be:	187b      	adds	r3, r7, r1
 80017c0:	2280      	movs	r2, #128	@ 0x80
 80017c2:	0592      	lsls	r2, r2, #22
 80017c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c6:	187b      	adds	r3, r7, r1
 80017c8:	0018      	movs	r0, r3
 80017ca:	f007 facf 	bl	8008d6c <HAL_RCC_OscConfig>
 80017ce:	1e03      	subs	r3, r0, #0
 80017d0:	d001      	beq.n	80017d6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80017d2:	f000 fdcb 	bl	800236c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d6:	003b      	movs	r3, r7
 80017d8:	2207      	movs	r2, #7
 80017da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017dc:	003b      	movs	r3, r7
 80017de:	2202      	movs	r2, #2
 80017e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e2:	003b      	movs	r3, r7
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017e8:	003b      	movs	r3, r7
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017ee:	003b      	movs	r3, r7
 80017f0:	2102      	movs	r1, #2
 80017f2:	0018      	movs	r0, r3
 80017f4:	f007 fdd4 	bl	80093a0 <HAL_RCC_ClockConfig>
 80017f8:	1e03      	subs	r3, r0, #0
 80017fa:	d001      	beq.n	8001800 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80017fc:	f000 fdb6 	bl	800236c <Error_Handler>
  }
}
 8001800:	46c0      	nop			@ (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	b013      	add	sp, #76	@ 0x4c
 8001806:	bd90      	pop	{r4, r7, pc}

08001808 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	0018      	movs	r0, r3
 8001812:	230c      	movs	r3, #12
 8001814:	001a      	movs	r2, r3
 8001816:	2100      	movs	r1, #0
 8001818:	f00b ff7c 	bl	800d714 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800181c:	4b54      	ldr	r3, [pc, #336]	@ (8001970 <MX_ADC1_Init+0x168>)
 800181e:	4a55      	ldr	r2, [pc, #340]	@ (8001974 <MX_ADC1_Init+0x16c>)
 8001820:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001822:	4b53      	ldr	r3, [pc, #332]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001824:	2280      	movs	r2, #128	@ 0x80
 8001826:	05d2      	lsls	r2, r2, #23
 8001828:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800182a:	4b51      	ldr	r3, [pc, #324]	@ (8001970 <MX_ADC1_Init+0x168>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001830:	4b4f      	ldr	r3, [pc, #316]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001836:	4b4e      	ldr	r3, [pc, #312]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001838:	2280      	movs	r2, #128	@ 0x80
 800183a:	0392      	lsls	r2, r2, #14
 800183c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800183e:	4b4c      	ldr	r3, [pc, #304]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001840:	2208      	movs	r2, #8
 8001842:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001844:	4b4a      	ldr	r3, [pc, #296]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001846:	2200      	movs	r2, #0
 8001848:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800184a:	4b49      	ldr	r3, [pc, #292]	@ (8001970 <MX_ADC1_Init+0x168>)
 800184c:	2200      	movs	r2, #0
 800184e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001850:	4b47      	ldr	r3, [pc, #284]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001852:	2200      	movs	r2, #0
 8001854:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 8001856:	4b46      	ldr	r3, [pc, #280]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001858:	2205      	movs	r2, #5
 800185a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800185c:	4b44      	ldr	r3, [pc, #272]	@ (8001970 <MX_ADC1_Init+0x168>)
 800185e:	2220      	movs	r2, #32
 8001860:	2100      	movs	r1, #0
 8001862:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001864:	4b42      	ldr	r3, [pc, #264]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800186a:	4b41      	ldr	r3, [pc, #260]	@ (8001970 <MX_ADC1_Init+0x168>)
 800186c:	2200      	movs	r2, #0
 800186e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001870:	4b3f      	ldr	r3, [pc, #252]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001872:	222c      	movs	r2, #44	@ 0x2c
 8001874:	2100      	movs	r1, #0
 8001876:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001878:	4b3d      	ldr	r3, [pc, #244]	@ (8001970 <MX_ADC1_Init+0x168>)
 800187a:	2200      	movs	r2, #0
 800187c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800187e:	4b3c      	ldr	r3, [pc, #240]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001880:	2200      	movs	r2, #0
 8001882:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001884:	4b3a      	ldr	r3, [pc, #232]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001886:	2200      	movs	r2, #0
 8001888:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800188a:	4b39      	ldr	r3, [pc, #228]	@ (8001970 <MX_ADC1_Init+0x168>)
 800188c:	223c      	movs	r2, #60	@ 0x3c
 800188e:	2100      	movs	r1, #0
 8001890:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001892:	4b37      	ldr	r3, [pc, #220]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001894:	2200      	movs	r2, #0
 8001896:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001898:	4b35      	ldr	r3, [pc, #212]	@ (8001970 <MX_ADC1_Init+0x168>)
 800189a:	0018      	movs	r0, r3
 800189c:	f004 ff56 	bl	800674c <HAL_ADC_Init>
 80018a0:	1e03      	subs	r3, r0, #0
 80018a2:	d001      	beq.n	80018a8 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80018a4:	f000 fd62 	bl	800236c <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	2201      	movs	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2200      	movs	r2, #0
 80018b2:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ba:	1d3a      	adds	r2, r7, #4
 80018bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001970 <MX_ADC1_Init+0x168>)
 80018be:	0011      	movs	r1, r2
 80018c0:	0018      	movs	r0, r3
 80018c2:	f005 fac7 	bl	8006e54 <HAL_ADC_ConfigChannel>
 80018c6:	1e03      	subs	r3, r0, #0
 80018c8:	d001      	beq.n	80018ce <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80018ca:	f000 fd4f 	bl	800236c <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	4a29      	ldr	r2, [pc, #164]	@ (8001978 <MX_ADC1_Init+0x170>)
 80018d2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	2204      	movs	r2, #4
 80018d8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018e0:	1d3a      	adds	r2, r7, #4
 80018e2:	4b23      	ldr	r3, [pc, #140]	@ (8001970 <MX_ADC1_Init+0x168>)
 80018e4:	0011      	movs	r1, r2
 80018e6:	0018      	movs	r0, r3
 80018e8:	f005 fab4 	bl	8006e54 <HAL_ADC_ConfigChannel>
 80018ec:	1e03      	subs	r3, r0, #0
 80018ee:	d001      	beq.n	80018f4 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80018f0:	f000 fd3c 	bl	800236c <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	4a21      	ldr	r2, [pc, #132]	@ (800197c <MX_ADC1_Init+0x174>)
 80018f8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2208      	movs	r2, #8
 80018fe:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001906:	1d3a      	adds	r2, r7, #4
 8001908:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <MX_ADC1_Init+0x168>)
 800190a:	0011      	movs	r1, r2
 800190c:	0018      	movs	r0, r3
 800190e:	f005 faa1 	bl	8006e54 <HAL_ADC_ConfigChannel>
 8001912:	1e03      	subs	r3, r0, #0
 8001914:	d001      	beq.n	800191a <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001916:	f000 fd29 	bl	800236c <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	4a18      	ldr	r2, [pc, #96]	@ (8001980 <MX_ADC1_Init+0x178>)
 800191e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	220c      	movs	r2, #12
 8001924:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800192c:	1d3a      	adds	r2, r7, #4
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001930:	0011      	movs	r1, r2
 8001932:	0018      	movs	r0, r3
 8001934:	f005 fa8e 	bl	8006e54 <HAL_ADC_ConfigChannel>
 8001938:	1e03      	subs	r3, r0, #0
 800193a:	d001      	beq.n	8001940 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800193c:	f000 fd16 	bl	800236c <Error_Handler>
  }

  /** Configure Channel 6
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	4a10      	ldr	r2, [pc, #64]	@ (8001984 <MX_ADC1_Init+0x17c>)
 8001944:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2210      	movs	r2, #16
 800194a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001952:	1d3a      	adds	r2, r7, #4
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <MX_ADC1_Init+0x168>)
 8001956:	0011      	movs	r1, r2
 8001958:	0018      	movs	r0, r3
 800195a:	f005 fa7b 	bl	8006e54 <HAL_ADC_ConfigChannel>
 800195e:	1e03      	subs	r3, r0, #0
 8001960:	d001      	beq.n	8001966 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8001962:	f000 fd03 	bl	800236c <Error_Handler>
  }
}
 8001966:	46c0      	nop			@ (mov r8, r8)
 8001968:	46bd      	mov	sp, r7
 800196a:	b004      	add	sp, #16
 800196c:	bd80      	pop	{r7, pc}
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	200004fc 	.word	0x200004fc
 8001974:	40012400 	.word	0x40012400
 8001978:	04000002 	.word	0x04000002
 800197c:	10000010 	.word	0x10000010
 8001980:	14000020 	.word	0x14000020
 8001984:	18000040 	.word	0x18000040

08001988 <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b094      	sub	sp, #80	@ 0x50
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800198e:	2334      	movs	r3, #52	@ 0x34
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	0018      	movs	r0, r3
 8001994:	231c      	movs	r3, #28
 8001996:	001a      	movs	r2, r3
 8001998:	2100      	movs	r1, #0
 800199a:	f00b febb 	bl	800d714 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800199e:	003b      	movs	r3, r7
 80019a0:	0018      	movs	r0, r3
 80019a2:	2334      	movs	r3, #52	@ 0x34
 80019a4:	001a      	movs	r2, r3
 80019a6:	2100      	movs	r1, #0
 80019a8:	f00b feb4 	bl	800d714 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80019ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019ae:	4a3b      	ldr	r2, [pc, #236]	@ (8001a9c <MX_TIM16_Init+0x114>)
 80019b0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80019b2:	4b39      	ldr	r3, [pc, #228]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b8:	4b37      	ldr	r3, [pc, #220]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 80019be:	4b36      	ldr	r3, [pc, #216]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019c0:	22ff      	movs	r2, #255	@ 0xff
 80019c2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80019c4:	4b34      	ldr	r3, [pc, #208]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019c6:	2280      	movs	r2, #128	@ 0x80
 80019c8:	0092      	lsls	r2, r2, #2
 80019ca:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80019cc:	4b32      	ldr	r3, [pc, #200]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019d2:	4b31      	ldr	r3, [pc, #196]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019d4:	2280      	movs	r2, #128	@ 0x80
 80019d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80019d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019da:	0018      	movs	r0, r3
 80019dc:	f008 f804 	bl	80099e8 <HAL_TIM_Base_Init>
 80019e0:	1e03      	subs	r3, r0, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 80019e4:	f000 fcc2 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80019e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a98 <MX_TIM16_Init+0x110>)
 80019ea:	0018      	movs	r0, r3
 80019ec:	f008 f902 	bl	8009bf4 <HAL_TIM_OC_Init>
 80019f0:	1e03      	subs	r3, r0, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 80019f4:	f000 fcba 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80019f8:	2134      	movs	r1, #52	@ 0x34
 80019fa:	187b      	adds	r3, r7, r1
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	22ff      	movs	r2, #255	@ 0xff
 8001a04:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a06:	187b      	adds	r3, r7, r1
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a12:	187b      	adds	r3, r7, r1
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a18:	187b      	adds	r3, r7, r1
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a1e:	187b      	adds	r3, r7, r1
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a24:	1879      	adds	r1, r7, r1
 8001a26:	4b1c      	ldr	r3, [pc, #112]	@ (8001a98 <MX_TIM16_Init+0x110>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f008 ff56 	bl	800a8dc <HAL_TIM_OC_ConfigChannel>
 8001a30:	1e03      	subs	r3, r0, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8001a34:	f000 fc9a 	bl	800236c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8001a38:	4b17      	ldr	r3, [pc, #92]	@ (8001a98 <MX_TIM16_Init+0x110>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	699a      	ldr	r2, [r3, #24]
 8001a3e:	4b16      	ldr	r3, [pc, #88]	@ (8001a98 <MX_TIM16_Init+0x110>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2108      	movs	r1, #8
 8001a44:	438a      	bics	r2, r1
 8001a46:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a48:	003b      	movs	r3, r7
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a4e:	003b      	movs	r3, r7
 8001a50:	2200      	movs	r2, #0
 8001a52:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a54:	003b      	movs	r3, r7
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a5a:	003b      	movs	r3, r7
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a60:	003b      	movs	r3, r7
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a66:	003b      	movs	r3, r7
 8001a68:	2280      	movs	r2, #128	@ 0x80
 8001a6a:	0192      	lsls	r2, r2, #6
 8001a6c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a6e:	003b      	movs	r3, r7
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a74:	003b      	movs	r3, r7
 8001a76:	2200      	movs	r2, #0
 8001a78:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001a7a:	003a      	movs	r2, r7
 8001a7c:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <MX_TIM16_Init+0x110>)
 8001a7e:	0011      	movs	r1, r2
 8001a80:	0018      	movs	r0, r3
 8001a82:	f00a f951 	bl	800bd28 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a86:	1e03      	subs	r3, r0, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 8001a8a:	f000 fc6f 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b014      	add	sp, #80	@ 0x50
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	20000758 	.word	0x20000758
 8001a9c:	40014400 	.word	0x40014400

08001aa0 <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	@ 0x30
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	0018      	movs	r0, r3
 8001aac:	2310      	movs	r3, #16
 8001aae:	001a      	movs	r2, r3
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	f00b fe2f 	bl	800d714 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab6:	2314      	movs	r3, #20
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	0018      	movs	r0, r3
 8001abc:	230c      	movs	r3, #12
 8001abe:	001a      	movs	r2, r3
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	f00b fe27 	bl	800d714 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	0018      	movs	r0, r3
 8001aca:	2310      	movs	r3, #16
 8001acc:	001a      	movs	r2, r3
 8001ace:	2100      	movs	r1, #0
 8001ad0:	f00b fe20 	bl	800d714 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001ad6:	2280      	movs	r2, #128	@ 0x80
 8001ad8:	05d2      	lsls	r2, r2, #23
 8001ada:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 8001adc:	4b2c      	ldr	r3, [pc, #176]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001ade:	223f      	movs	r2, #63	@ 0x3f
 8001ae0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2097152 - 1;
 8001ae8:	4b29      	ldr	r3, [pc, #164]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001aea:	4a2a      	ldr	r2, [pc, #168]	@ (8001b94 <MX_TIM2_Init+0xf4>)
 8001aec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001aee:	4b28      	ldr	r3, [pc, #160]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001af0:	2280      	movs	r2, #128	@ 0x80
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001af6:	4b26      	ldr	r3, [pc, #152]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001af8:	2280      	movs	r2, #128	@ 0x80
 8001afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001afc:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001afe:	0018      	movs	r0, r3
 8001b00:	f007 ff72 	bl	80099e8 <HAL_TIM_Base_Init>
 8001b04:	1e03      	subs	r3, r0, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001b08:	f000 fc30 	bl	800236c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0c:	2120      	movs	r1, #32
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2280      	movs	r2, #128	@ 0x80
 8001b12:	0152      	lsls	r2, r2, #5
 8001b14:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b16:	187a      	adds	r2, r7, r1
 8001b18:	4b1d      	ldr	r3, [pc, #116]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001b1a:	0011      	movs	r1, r2
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f009 f8e1 	bl	800ace4 <HAL_TIM_ConfigClockSource>
 8001b22:	1e03      	subs	r3, r0, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001b26:	f000 fc21 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001b2a:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f008 fc0d 	bl	800a34c <HAL_TIM_IC_Init>
 8001b32:	1e03      	subs	r3, r0, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001b36:	f000 fc19 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3a:	2114      	movs	r1, #20
 8001b3c:	187b      	adds	r3, r7, r1
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b42:	187b      	adds	r3, r7, r1
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b48:	187a      	adds	r2, r7, r1
 8001b4a:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001b4c:	0011      	movs	r1, r2
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f00a f882 	bl	800bc58 <HAL_TIMEx_MasterConfigSynchronization>
 8001b54:	1e03      	subs	r3, r0, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001b58:	f000 fc08 	bl	800236c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	2202      	movs	r2, #2
 8001b60:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2201      	movs	r2, #1
 8001b66:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	220f      	movs	r2, #15
 8001b72:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b74:	1d39      	adds	r1, r7, #4
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <MX_TIM2_Init+0xf0>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f008 ff0e 	bl	800a99c <HAL_TIM_IC_ConfigChannel>
 8001b80:	1e03      	subs	r3, r0, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001b84:	f000 fbf2 	bl	800236c <Error_Handler>

  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b88:	46c0      	nop			@ (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b00c      	add	sp, #48	@ 0x30
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000814 	.word	0x20000814
 8001b94:	001fffff 	.word	0x001fffff

08001b98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08e      	sub	sp, #56	@ 0x38
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b9e:	2328      	movs	r3, #40	@ 0x28
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	2310      	movs	r3, #16
 8001ba6:	001a      	movs	r2, r3
 8001ba8:	2100      	movs	r1, #0
 8001baa:	f00b fdb3 	bl	800d714 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bae:	231c      	movs	r3, #28
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	230c      	movs	r3, #12
 8001bb6:	001a      	movs	r2, r3
 8001bb8:	2100      	movs	r1, #0
 8001bba:	f00b fdab 	bl	800d714 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bbe:	003b      	movs	r3, r7
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	231c      	movs	r3, #28
 8001bc4:	001a      	movs	r2, r3
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	f00b fda4 	bl	800d714 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bcc:	4b32      	ldr	r3, [pc, #200]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001bce:	4a33      	ldr	r2, [pc, #204]	@ (8001c9c <MX_TIM3_Init+0x104>)
 8001bd0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 8001bd2:	4b31      	ldr	r3, [pc, #196]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001bd4:	4a32      	ldr	r2, [pc, #200]	@ (8001ca0 <MX_TIM3_Init+0x108>)
 8001bd6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd8:	4b2f      	ldr	r3, [pc, #188]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8001bde:	4b2e      	ldr	r3, [pc, #184]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001be0:	4a30      	ldr	r2, [pc, #192]	@ (8001ca4 <MX_TIM3_Init+0x10c>)
 8001be2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001be4:	4b2c      	ldr	r3, [pc, #176]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001be6:	2280      	movs	r2, #128	@ 0x80
 8001be8:	0092      	lsls	r2, r2, #2
 8001bea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bec:	4b2a      	ldr	r3, [pc, #168]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001bee:	2280      	movs	r2, #128	@ 0x80
 8001bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bf2:	4b29      	ldr	r3, [pc, #164]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f007 fef7 	bl	80099e8 <HAL_TIM_Base_Init>
 8001bfa:	1e03      	subs	r3, r0, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001bfe:	f000 fbb5 	bl	800236c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c02:	2128      	movs	r1, #40	@ 0x28
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	2280      	movs	r2, #128	@ 0x80
 8001c08:	0152      	lsls	r2, r2, #5
 8001c0a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c0c:	187a      	adds	r2, r7, r1
 8001c0e:	4b22      	ldr	r3, [pc, #136]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001c10:	0011      	movs	r1, r2
 8001c12:	0018      	movs	r0, r3
 8001c14:	f009 f866 	bl	800ace4 <HAL_TIM_ConfigClockSource>
 8001c18:	1e03      	subs	r3, r0, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001c1c:	f000 fba6 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001c20:	4b1d      	ldr	r3, [pc, #116]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001c22:	0018      	movs	r0, r3
 8001c24:	f007 ffe6 	bl	8009bf4 <HAL_TIM_OC_Init>
 8001c28:	1e03      	subs	r3, r0, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001c2c:	f000 fb9e 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c30:	211c      	movs	r1, #28
 8001c32:	187b      	adds	r3, r7, r1
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c38:	187b      	adds	r3, r7, r1
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c3e:	187a      	adds	r2, r7, r1
 8001c40:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001c42:	0011      	movs	r1, r2
 8001c44:	0018      	movs	r0, r3
 8001c46:	f00a f807 	bl	800bc58 <HAL_TIMEx_MasterConfigSynchronization>
 8001c4a:	1e03      	subs	r3, r0, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001c4e:	f000 fb8d 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001c52:	003b      	movs	r3, r7
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001c58:	003b      	movs	r3, r7
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c5e:	003b      	movs	r3, r7
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c64:	003b      	movs	r3, r7
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c6a:	0039      	movs	r1, r7
 8001c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	0018      	movs	r0, r3
 8001c72:	f008 fe33 	bl	800a8dc <HAL_TIM_OC_ConfigChannel>
 8001c76:	1e03      	subs	r3, r0, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001c7a:	f000 fb77 	bl	800236c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699a      	ldr	r2, [r3, #24]
 8001c84:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <MX_TIM3_Init+0x100>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2108      	movs	r1, #8
 8001c8a:	438a      	bics	r2, r1
 8001c8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	46bd      	mov	sp, r7
 8001c92:	b00e      	add	sp, #56	@ 0x38
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	46c0      	nop			@ (mov r8, r8)
 8001c98:	200008d0 	.word	0x200008d0
 8001c9c:	40000400 	.word	0x40000400
 8001ca0:	00007fff 	.word	0x00007fff
 8001ca4:	00000fff 	.word	0x00000fff

08001ca8 <MX_TIM1_Init>:

void MX_TIM1_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b09c      	sub	sp, #112	@ 0x70
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cae:	2360      	movs	r3, #96	@ 0x60
 8001cb0:	18fb      	adds	r3, r7, r3
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	2310      	movs	r3, #16
 8001cb6:	001a      	movs	r2, r3
 8001cb8:	2100      	movs	r1, #0
 8001cba:	f00b fd2b 	bl	800d714 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cbe:	2354      	movs	r3, #84	@ 0x54
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	230c      	movs	r3, #12
 8001cc6:	001a      	movs	r2, r3
 8001cc8:	2100      	movs	r1, #0
 8001cca:	f00b fd23 	bl	800d714 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cce:	2338      	movs	r3, #56	@ 0x38
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	231c      	movs	r3, #28
 8001cd6:	001a      	movs	r2, r3
 8001cd8:	2100      	movs	r1, #0
 8001cda:	f00b fd1b 	bl	800d714 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	2334      	movs	r3, #52	@ 0x34
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	f00b fd14 	bl	800d714 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cec:	4b5f      	ldr	r3, [pc, #380]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001cee:	4a60      	ldr	r2, [pc, #384]	@ (8001e70 <MX_TIM1_Init+0x1c8>)
 8001cf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cf2:	4b5e      	ldr	r3, [pc, #376]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf8:	4b5c      	ldr	r3, [pc, #368]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024 - 1;
 8001cfe:	4b5b      	ldr	r3, [pc, #364]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d00:	4a5c      	ldr	r2, [pc, #368]	@ (8001e74 <MX_TIM1_Init+0x1cc>)
 8001d02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001d04:	4b59      	ldr	r3, [pc, #356]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	0052      	lsls	r2, r2, #1
 8001d0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d0c:	4b57      	ldr	r3, [pc, #348]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d12:	4b56      	ldr	r3, [pc, #344]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d14:	2280      	movs	r2, #128	@ 0x80
 8001d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d18:	4b54      	ldr	r3, [pc, #336]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f007 fe64 	bl	80099e8 <HAL_TIM_Base_Init>
 8001d20:	1e03      	subs	r3, r0, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001d24:	f000 fb22 	bl	800236c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d28:	2160      	movs	r1, #96	@ 0x60
 8001d2a:	187b      	adds	r3, r7, r1
 8001d2c:	2280      	movs	r2, #128	@ 0x80
 8001d2e:	0152      	lsls	r2, r2, #5
 8001d30:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d32:	187a      	adds	r2, r7, r1
 8001d34:	4b4d      	ldr	r3, [pc, #308]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d36:	0011      	movs	r1, r2
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f008 ffd3 	bl	800ace4 <HAL_TIM_ConfigClockSource>
 8001d3e:	1e03      	subs	r3, r0, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001d42:	f000 fb13 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d46:	4b49      	ldr	r3, [pc, #292]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f008 f9b3 	bl	800a0b4 <HAL_TIM_PWM_Init>
 8001d4e:	1e03      	subs	r3, r0, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8001d52:	f000 fb0b 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d56:	2154      	movs	r1, #84	@ 0x54
 8001d58:	187b      	adds	r3, r7, r1
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d5e:	187b      	adds	r3, r7, r1
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d64:	187b      	adds	r3, r7, r1
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d6a:	187a      	adds	r2, r7, r1
 8001d6c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001d6e:	0011      	movs	r1, r2
 8001d70:	0018      	movs	r0, r3
 8001d72:	f009 ff71 	bl	800bc58 <HAL_TIMEx_MasterConfigSynchronization>
 8001d76:	1e03      	subs	r3, r0, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001d7a:	f000 faf7 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d7e:	2138      	movs	r1, #56	@ 0x38
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	2260      	movs	r2, #96	@ 0x60
 8001d84:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001d86:	187b      	adds	r3, r7, r1
 8001d88:	2200      	movs	r2, #0
 8001d8a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d8c:	187b      	adds	r3, r7, r1
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d92:	187b      	adds	r3, r7, r1
 8001d94:	2200      	movs	r2, #0
 8001d96:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d98:	187b      	adds	r3, r7, r1
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d9e:	187b      	adds	r3, r7, r1
 8001da0:	2200      	movs	r2, #0
 8001da2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001da4:	187b      	adds	r3, r7, r1
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001daa:	1879      	adds	r1, r7, r1
 8001dac:	4b2f      	ldr	r3, [pc, #188]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001dae:	2204      	movs	r2, #4
 8001db0:	0018      	movs	r0, r3
 8001db2:	f008 fe97 	bl	800aae4 <HAL_TIM_PWM_ConfigChannel>
 8001db6:	1e03      	subs	r3, r0, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001dba:	f000 fad7 	bl	800236c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699a      	ldr	r2, [r3, #24]
 8001dc4:	4b29      	ldr	r3, [pc, #164]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	492b      	ldr	r1, [pc, #172]	@ (8001e78 <MX_TIM1_Init+0x1d0>)
 8001dca:	400a      	ands	r2, r1
 8001dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001dce:	2338      	movs	r3, #56	@ 0x38
 8001dd0:	18f9      	adds	r1, r7, r3
 8001dd2:	4b26      	ldr	r3, [pc, #152]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001dd4:	220c      	movs	r2, #12
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f008 fe84 	bl	800aae4 <HAL_TIM_PWM_ConfigChannel>
 8001ddc:	1e03      	subs	r3, r0, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001de0:	f000 fac4 	bl	800236c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8001de4:	4b21      	ldr	r3, [pc, #132]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	69da      	ldr	r2, [r3, #28]
 8001dea:	4b20      	ldr	r3, [pc, #128]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4922      	ldr	r1, [pc, #136]	@ (8001e78 <MX_TIM1_Init+0x1d0>)
 8001df0:	400a      	ands	r2, r1
 8001df2:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e06:	1d3b      	adds	r3, r7, #4
 8001e08:	2200      	movs	r2, #0
 8001e0a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	2280      	movs	r2, #128	@ 0x80
 8001e16:	0192      	lsls	r2, r2, #6
 8001e18:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	2200      	movs	r2, #0
 8001e2a:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	2280      	movs	r2, #128	@ 0x80
 8001e30:	0492      	lsls	r2, r2, #18
 8001e32:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	2200      	movs	r2, #0
 8001e38:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	2200      	movs	r2, #0
 8001e44:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e46:	1d3a      	adds	r2, r7, #4
 8001e48:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001e4a:	0011      	movs	r1, r2
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f009 ff6b 	bl	800bd28 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e52:	1e03      	subs	r3, r0, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM1_Init+0x1b2>
  {
    Error_Handler();
 8001e56:	f000 fa89 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e5a:	4b04      	ldr	r3, [pc, #16]	@ (8001e6c <MX_TIM1_Init+0x1c4>)
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f003 fbcd 	bl	80055fc <HAL_TIM_MspPostInit>

}
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b01c      	add	sp, #112	@ 0x70
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			@ (mov r8, r8)
 8001e6c:	2000098c 	.word	0x2000098c
 8001e70:	40012c00 	.word	0x40012c00
 8001e74:	000003ff 	.word	0x000003ff
 8001e78:	fffff7ff 	.word	0xfffff7ff

08001e7c <MX_TIM17_Init>:

void MX_TIM17_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b094      	sub	sp, #80	@ 0x50
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e82:	2334      	movs	r3, #52	@ 0x34
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	0018      	movs	r0, r3
 8001e88:	231c      	movs	r3, #28
 8001e8a:	001a      	movs	r2, r3
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	f00b fc41 	bl	800d714 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e92:	003b      	movs	r3, r7
 8001e94:	0018      	movs	r0, r3
 8001e96:	2334      	movs	r3, #52	@ 0x34
 8001e98:	001a      	movs	r2, r3
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	f00b fc3a 	bl	800d714 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001ea0:	4b3a      	ldr	r3, [pc, #232]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001ea2:	4a3b      	ldr	r2, [pc, #236]	@ (8001f90 <MX_TIM17_Init+0x114>)
 8001ea4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 8001ea6:	4b39      	ldr	r3, [pc, #228]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001ea8:	4a3a      	ldr	r2, [pc, #232]	@ (8001f94 <MX_TIM17_Init+0x118>)
 8001eaa:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eac:	4b37      	ldr	r3, [pc, #220]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024 - 1;
 8001eb2:	4b36      	ldr	r3, [pc, #216]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001eb4:	4a38      	ldr	r2, [pc, #224]	@ (8001f98 <MX_TIM17_Init+0x11c>)
 8001eb6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001eb8:	4b34      	ldr	r3, [pc, #208]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001eba:	2280      	movs	r2, #128	@ 0x80
 8001ebc:	0092      	lsls	r2, r2, #2
 8001ebe:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001ec0:	4b32      	ldr	r3, [pc, #200]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ec6:	4b31      	ldr	r3, [pc, #196]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001ec8:	2280      	movs	r2, #128	@ 0x80
 8001eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001ecc:	4b2f      	ldr	r3, [pc, #188]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f007 fd8a 	bl	80099e8 <HAL_TIM_Base_Init>
 8001ed4:	1e03      	subs	r3, r0, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001ed8:	f000 fa48 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001edc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f007 fe88 	bl	8009bf4 <HAL_TIM_OC_Init>
 8001ee4:	1e03      	subs	r3, r0, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8001ee8:	f000 fa40 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001eec:	2134      	movs	r1, #52	@ 0x34
 8001eee:	187b      	adds	r3, r7, r1
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 512 - 1;
 8001ef4:	187b      	adds	r3, r7, r1
 8001ef6:	4a29      	ldr	r2, [pc, #164]	@ (8001f9c <MX_TIM17_Init+0x120>)
 8001ef8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001efa:	187b      	adds	r3, r7, r1
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	2200      	movs	r2, #0
 8001f04:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f06:	187b      	adds	r3, r7, r1
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	2200      	movs	r2, #0
 8001f10:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f12:	187b      	adds	r3, r7, r1
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f18:	1879      	adds	r1, r7, r1
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f008 fcdc 	bl	800a8dc <HAL_TIM_OC_ConfigChannel>
 8001f24:	1e03      	subs	r3, r0, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 8001f28:	f000 fa20 	bl	800236c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8001f2c:	4b17      	ldr	r3, [pc, #92]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699a      	ldr	r2, [r3, #24]
 8001f32:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2108      	movs	r1, #8
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f3c:	003b      	movs	r3, r7
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f42:	003b      	movs	r3, r7
 8001f44:	2200      	movs	r2, #0
 8001f46:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f48:	003b      	movs	r3, r7
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f4e:	003b      	movs	r3, r7
 8001f50:	2200      	movs	r2, #0
 8001f52:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f54:	003b      	movs	r3, r7
 8001f56:	2200      	movs	r2, #0
 8001f58:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f5a:	003b      	movs	r3, r7
 8001f5c:	2280      	movs	r2, #128	@ 0x80
 8001f5e:	0192      	lsls	r2, r2, #6
 8001f60:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f62:	003b      	movs	r3, r7
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f68:	003b      	movs	r3, r7
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001f6e:	003a      	movs	r2, r7
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <MX_TIM17_Init+0x110>)
 8001f72:	0011      	movs	r1, r2
 8001f74:	0018      	movs	r0, r3
 8001f76:	f009 fed7 	bl	800bd28 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f7a:	1e03      	subs	r3, r0, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 8001f7e:	f000 f9f5 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001f82:	46c0      	nop			@ (mov r8, r8)
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b014      	add	sp, #80	@ 0x50
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	46c0      	nop			@ (mov r8, r8)
 8001f8c:	2000069c 	.word	0x2000069c
 8001f90:	40014800 	.word	0x40014800
 8001f94:	00007fff 	.word	0x00007fff
 8001f98:	000003ff 	.word	0x000003ff
 8001f9c:	000001ff 	.word	0x000001ff

08001fa0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPTIM1_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001fa4:	4b17      	ldr	r3, [pc, #92]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fa6:	4a18      	ldr	r2, [pc, #96]	@ (8002008 <MX_LPTIM1_Init+0x68>)
 8001fa8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001faa:	4b16      	ldr	r3, [pc, #88]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8001fb0:	4b14      	ldr	r3, [pc, #80]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fb2:	22e0      	movs	r2, #224	@ 0xe0
 8001fb4:	0112      	lsls	r2, r2, #4
 8001fb6:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001fb8:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fba:	4a14      	ldr	r2, [pc, #80]	@ (800200c <MX_LPTIM1_Init+0x6c>)
 8001fbc:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001fbe:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fc6:	2280      	movs	r2, #128	@ 0x80
 8001fc8:	03d2      	lsls	r2, r2, #15
 8001fca:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001fde:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <MX_LPTIM1_Init+0x64>)
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f006 fa69 	bl	80084b8 <HAL_LPTIM_Init>
 8001fe6:	1e03      	subs	r3, r0, #0
 8001fe8:	d001      	beq.n	8001fee <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8001fea:	f000 f9bf 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

  HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 2);
 8001fee:	2202      	movs	r2, #2
 8001ff0:	2102      	movs	r1, #2
 8001ff2:	2011      	movs	r0, #17
 8001ff4:	f005 fd38 	bl	8007a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001ff8:	2011      	movs	r0, #17
 8001ffa:	f005 fd4a 	bl	8007a92 <HAL_NVIC_EnableIRQ>
}
 8001ffe:	46c0      	nop			@ (mov r8, r8)
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000bcc 	.word	0x20000bcc
 8002008:	40007c00 	.word	0x40007c00
 800200c:	0000ffff 	.word	0x0000ffff

08002010 <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	0018      	movs	r0, r3
 800201a:	231c      	movs	r3, #28
 800201c:	001a      	movs	r2, r3
 800201e:	2100      	movs	r1, #0
 8002020:	f00b fb78 	bl	800d714 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002024:	4b1f      	ldr	r3, [pc, #124]	@ (80020a4 <MX_TIM14_Init+0x94>)
 8002026:	4a20      	ldr	r2, [pc, #128]	@ (80020a8 <MX_TIM14_Init+0x98>)
 8002028:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (512 * 64) - 1;
 800202a:	4b1e      	ldr	r3, [pc, #120]	@ (80020a4 <MX_TIM14_Init+0x94>)
 800202c:	4a1f      	ldr	r2, [pc, #124]	@ (80020ac <MX_TIM14_Init+0x9c>)
 800202e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002030:	4b1c      	ldr	r3, [pc, #112]	@ (80020a4 <MX_TIM14_Init+0x94>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = led_blink_period;
 8002036:	4b1e      	ldr	r3, [pc, #120]	@ (80020b0 <MX_TIM14_Init+0xa0>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4b1a      	ldr	r3, [pc, #104]	@ (80020a4 <MX_TIM14_Init+0x94>)
 800203c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800203e:	4b19      	ldr	r3, [pc, #100]	@ (80020a4 <MX_TIM14_Init+0x94>)
 8002040:	2280      	movs	r2, #128	@ 0x80
 8002042:	0092      	lsls	r2, r2, #2
 8002044:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002046:	4b17      	ldr	r3, [pc, #92]	@ (80020a4 <MX_TIM14_Init+0x94>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800204c:	4b15      	ldr	r3, [pc, #84]	@ (80020a4 <MX_TIM14_Init+0x94>)
 800204e:	0018      	movs	r0, r3
 8002050:	f007 fcca 	bl	80099e8 <HAL_TIM_Base_Init>
 8002054:	1e03      	subs	r3, r0, #0
 8002056:	d001      	beq.n	800205c <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8002058:	f000 f988 	bl	800236c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 800205c:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <MX_TIM14_Init+0x94>)
 800205e:	0018      	movs	r0, r3
 8002060:	f007 fdc8 	bl	8009bf4 <HAL_TIM_OC_Init>
 8002064:	1e03      	subs	r3, r0, #0
 8002066:	d001      	beq.n	800206c <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8002068:	f000 f980 	bl	800236c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = led_blink_period - 1;
 8002072:	4b0f      	ldr	r3, [pc, #60]	@ (80020b0 <MX_TIM14_Init+0xa0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	1e5a      	subs	r2, r3, #1
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2200      	movs	r2, #0
 8002086:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002088:	1d39      	adds	r1, r7, #4
 800208a:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <MX_TIM14_Init+0x94>)
 800208c:	2200      	movs	r2, #0
 800208e:	0018      	movs	r0, r3
 8002090:	f008 fc24 	bl	800a8dc <HAL_TIM_OC_ConfigChannel>
 8002094:	1e03      	subs	r3, r0, #0
 8002096:	d001      	beq.n	800209c <MX_TIM14_Init+0x8c>
  {
    Error_Handler();
 8002098:	f000 f968 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800209c:	46c0      	nop			@ (mov r8, r8)
 800209e:	46bd      	mov	sp, r7
 80020a0:	b008      	add	sp, #32
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	200005e0 	.word	0x200005e0
 80020a8:	40002000 	.word	0x40002000
 80020ac:	00007fff 	.word	0x00007fff
 80020b0:	20000020 	.word	0x20000020

080020b4 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80020b8:	4b15      	ldr	r3, [pc, #84]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020ba:	4a16      	ldr	r2, [pc, #88]	@ (8002114 <MX_USART2_UART_Init+0x60>)
 80020bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 80020be:	4b14      	ldr	r3, [pc, #80]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020c0:	4a15      	ldr	r2, [pc, #84]	@ (8002118 <MX_USART2_UART_Init+0x64>)
 80020c2:	605a      	str	r2, [r3, #4]
  //huart2.Init.BaudRate = 57600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020c4:	4b12      	ldr	r3, [pc, #72]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020ca:	4b11      	ldr	r3, [pc, #68]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020d8:	220c      	movs	r2, #12
 80020da:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020e8:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020ee:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020fa:	4b05      	ldr	r3, [pc, #20]	@ (8002110 <MX_USART2_UART_Init+0x5c>)
 80020fc:	0018      	movs	r0, r3
 80020fe:	f009 fecf 	bl	800bea0 <HAL_UART_Init>
 8002102:	1e03      	subs	r3, r0, #0
 8002104:	d001      	beq.n	800210a <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8002106:	f000 f931 	bl	800236c <Error_Handler>
  }
}
 800210a:	46c0      	nop			@ (mov r8, r8)
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000a48 	.word	0x20000a48
 8002114:	40004400 	.word	0x40004400
 8002118:	00007a12 	.word	0x00007a12

0800211c <MX_DMA_Init>:
    Error_Handler();
  }
}

void MX_DMA_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002122:	4b10      	ldr	r3, [pc, #64]	@ (8002164 <MX_DMA_Init+0x48>)
 8002124:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002126:	4b0f      	ldr	r3, [pc, #60]	@ (8002164 <MX_DMA_Init+0x48>)
 8002128:	2101      	movs	r1, #1
 800212a:	430a      	orrs	r2, r1
 800212c:	639a      	str	r2, [r3, #56]	@ 0x38
 800212e:	4b0d      	ldr	r3, [pc, #52]	@ (8002164 <MX_DMA_Init+0x48>)
 8002130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002132:	2201      	movs	r2, #1
 8002134:	4013      	ands	r3, r2
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */ // - ADC
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	2009      	movs	r0, #9
 8002140:	f005 fc92 	bl	8007a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002144:	2009      	movs	r0, #9
 8002146:	f005 fca4 	bl	8007a92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */ // - UART RX is ch2, TX is ch3
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 2);
 800214a:	2202      	movs	r2, #2
 800214c:	2102      	movs	r1, #2
 800214e:	200a      	movs	r0, #10
 8002150:	f005 fc8a 	bl	8007a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002154:	200a      	movs	r0, #10
 8002156:	f005 fc9c 	bl	8007a92 <HAL_NVIC_EnableIRQ>

}
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	46bd      	mov	sp, r7
 800215e:	b002      	add	sp, #8
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	40021000 	.word	0x40021000

08002168 <MX_GPIO_Init>:


void MX_GPIO_Init(void)
{
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b08b      	sub	sp, #44	@ 0x2c
 800216c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216e:	2414      	movs	r4, #20
 8002170:	193b      	adds	r3, r7, r4
 8002172:	0018      	movs	r0, r3
 8002174:	2314      	movs	r3, #20
 8002176:	001a      	movs	r2, r3
 8002178:	2100      	movs	r1, #0
 800217a:	f00b facb 	bl	800d714 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	4b77      	ldr	r3, [pc, #476]	@ (800235c <MX_GPIO_Init+0x1f4>)
 8002180:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002182:	4b76      	ldr	r3, [pc, #472]	@ (800235c <MX_GPIO_Init+0x1f4>)
 8002184:	2104      	movs	r1, #4
 8002186:	430a      	orrs	r2, r1
 8002188:	635a      	str	r2, [r3, #52]	@ 0x34
 800218a:	4b74      	ldr	r3, [pc, #464]	@ (800235c <MX_GPIO_Init+0x1f4>)
 800218c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800218e:	2204      	movs	r2, #4
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002196:	4b71      	ldr	r3, [pc, #452]	@ (800235c <MX_GPIO_Init+0x1f4>)
 8002198:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800219a:	4b70      	ldr	r3, [pc, #448]	@ (800235c <MX_GPIO_Init+0x1f4>)
 800219c:	2120      	movs	r1, #32
 800219e:	430a      	orrs	r2, r1
 80021a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80021a2:	4b6e      	ldr	r3, [pc, #440]	@ (800235c <MX_GPIO_Init+0x1f4>)
 80021a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a6:	2220      	movs	r2, #32
 80021a8:	4013      	ands	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	4b6b      	ldr	r3, [pc, #428]	@ (800235c <MX_GPIO_Init+0x1f4>)
 80021b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021b2:	4b6a      	ldr	r3, [pc, #424]	@ (800235c <MX_GPIO_Init+0x1f4>)
 80021b4:	2101      	movs	r1, #1
 80021b6:	430a      	orrs	r2, r1
 80021b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80021ba:	4b68      	ldr	r3, [pc, #416]	@ (800235c <MX_GPIO_Init+0x1f4>)
 80021bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021be:	2201      	movs	r2, #1
 80021c0:	4013      	ands	r3, r2
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c6:	4b65      	ldr	r3, [pc, #404]	@ (800235c <MX_GPIO_Init+0x1f4>)
 80021c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021ca:	4b64      	ldr	r3, [pc, #400]	@ (800235c <MX_GPIO_Init+0x1f4>)
 80021cc:	2102      	movs	r1, #2
 80021ce:	430a      	orrs	r2, r1
 80021d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80021d2:	4b62      	ldr	r3, [pc, #392]	@ (800235c <MX_GPIO_Init+0x1f4>)
 80021d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d6:	2202      	movs	r2, #2
 80021d8:	4013      	ands	r3, r2
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  /*HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, GPIO_PIN_RESET);*/

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80021de:	4b60      	ldr	r3, [pc, #384]	@ (8002360 <MX_GPIO_Init+0x1f8>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	2140      	movs	r1, #64	@ 0x40
 80021e4:	0018      	movs	r0, r3
 80021e6:	f006 f920 	bl	800842a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80021ea:	193b      	adds	r3, r7, r4
 80021ec:	2204      	movs	r2, #4
 80021ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021f0:	193b      	adds	r3, r7, r4
 80021f2:	2288      	movs	r2, #136	@ 0x88
 80021f4:	0352      	lsls	r2, r2, #13
 80021f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	193b      	adds	r3, r7, r4
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80021fe:	193b      	adds	r3, r7, r4
 8002200:	4a58      	ldr	r2, [pc, #352]	@ (8002364 <MX_GPIO_Init+0x1fc>)
 8002202:	0019      	movs	r1, r3
 8002204:	0010      	movs	r0, r2
 8002206:	f005 ff8f 	bl	8008128 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_OUT_Pin */
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 800220a:	0021      	movs	r1, r4
 800220c:	193b      	adds	r3, r7, r4
 800220e:	2280      	movs	r2, #128	@ 0x80
 8002210:	0092      	lsls	r2, r2, #2
 8002212:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002214:	000c      	movs	r4, r1
 8002216:	193b      	adds	r3, r7, r4
 8002218:	2201      	movs	r2, #1
 800221a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	193b      	adds	r3, r7, r4
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	193b      	adds	r3, r7, r4
 8002224:	2200      	movs	r2, #0
 8002226:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 8002228:	193a      	adds	r2, r7, r4
 800222a:	23a0      	movs	r3, #160	@ 0xa0
 800222c:	05db      	lsls	r3, r3, #23
 800222e:	0011      	movs	r1, r2
 8002230:	0018      	movs	r0, r3
 8002232:	f005 ff79 	bl	8008128 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002236:	193b      	adds	r3, r7, r4
 8002238:	2240      	movs	r2, #64	@ 0x40
 800223a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223c:	193b      	adds	r3, r7, r4
 800223e:	2201      	movs	r2, #1
 8002240:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	193b      	adds	r3, r7, r4
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	193b      	adds	r3, r7, r4
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800224e:	193b      	adds	r3, r7, r4
 8002250:	4a43      	ldr	r2, [pc, #268]	@ (8002360 <MX_GPIO_Init+0x1f8>)
 8002252:	0019      	movs	r1, r3
 8002254:	0010      	movs	r0, r2
 8002256:	f005 ff67 	bl	8008128 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_IN_Pin */
  GPIO_InitStruct.Pin = SW_IN_Pin;
 800225a:	193b      	adds	r3, r7, r4
 800225c:	2280      	movs	r2, #128	@ 0x80
 800225e:	00d2      	lsls	r2, r2, #3
 8002260:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002262:	193b      	adds	r3, r7, r4
 8002264:	2200      	movs	r2, #0
 8002266:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002268:	193b      	adds	r3, r7, r4
 800226a:	2201      	movs	r2, #1
 800226c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 800226e:	193a      	adds	r2, r7, r4
 8002270:	23a0      	movs	r3, #160	@ 0xa0
 8002272:	05db      	lsls	r3, r3, #23
 8002274:	0011      	movs	r1, r2
 8002276:	0018      	movs	r0, r3
 8002278:	f005 ff56 	bl	8008128 <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_Pin;
 800227c:	193b      	adds	r3, r7, r4
 800227e:	2240      	movs	r2, #64	@ 0x40
 8002280:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002282:	193b      	adds	r3, r7, r4
 8002284:	2201      	movs	r2, #1
 8002286:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	193b      	adds	r3, r7, r4
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228e:	193b      	adds	r3, r7, r4
 8002290:	2200      	movs	r2, #0
 8002292:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8002294:	193b      	adds	r3, r7, r4
 8002296:	4a34      	ldr	r2, [pc, #208]	@ (8002368 <MX_GPIO_Init+0x200>)
 8002298:	0019      	movs	r1, r3
 800229a:	0010      	movs	r0, r2
 800229c:	f005 ff44 	bl	8008128 <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_2_Pin;
 80022a0:	193b      	adds	r3, r7, r4
 80022a2:	2210      	movs	r2, #16
 80022a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a6:	193b      	adds	r3, r7, r4
 80022a8:	2201      	movs	r2, #1
 80022aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	193b      	adds	r3, r7, r4
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	193b      	adds	r3, r7, r4
 80022b4:	2200      	movs	r2, #0
 80022b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_2_GPIO_Port, &GPIO_InitStruct);
 80022b8:	193b      	adds	r3, r7, r4
 80022ba:	4a2b      	ldr	r2, [pc, #172]	@ (8002368 <MX_GPIO_Init+0x200>)
 80022bc:	0019      	movs	r1, r3
 80022be:	0010      	movs	r0, r2
 80022c0:	f005 ff32 	bl	8008128 <HAL_GPIO_Init>

  //Configure CLK IN Pin - i.e. dedicated clock inputs to use this pin rather than the Tap-tempo switch debouncing SW IN pin
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80022c4:	0021      	movs	r1, r4
 80022c6:	187b      	adds	r3, r7, r1
 80022c8:	2280      	movs	r2, #128	@ 0x80
 80022ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80022cc:	187b      	adds	r3, r7, r1
 80022ce:	22c4      	movs	r2, #196	@ 0xc4
 80022d0:	0392      	lsls	r2, r2, #14
 80022d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; //seems to improve stuff for CLK IN??
 80022d4:	000c      	movs	r4, r1
 80022d6:	193b      	adds	r3, r7, r4
 80022d8:	2202      	movs	r2, #2
 80022da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	193b      	adds	r3, r7, r4
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 80022e2:	193b      	adds	r3, r7, r4
 80022e4:	4a20      	ldr	r2, [pc, #128]	@ (8002368 <MX_GPIO_Init+0x200>)
 80022e6:	0019      	movs	r1, r3
 80022e8:	0010      	movs	r0, r2
 80022ea:	f005 ff1d 	bl	8008128 <HAL_GPIO_Init>

  //Configure hacked on pot high leg -> i.e. it is to be set high
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 80022ee:	0021      	movs	r1, r4
 80022f0:	187b      	adds	r3, r7, r1
 80022f2:	2280      	movs	r2, #128	@ 0x80
 80022f4:	0152      	lsls	r2, r2, #5
 80022f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f8:	000c      	movs	r4, r1
 80022fa:	193b      	adds	r3, r7, r4
 80022fc:	2201      	movs	r2, #1
 80022fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	193b      	adds	r3, r7, r4
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	193b      	adds	r3, r7, r4
 8002308:	2200      	movs	r2, #0
 800230a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 800230c:	193a      	adds	r2, r7, r4
 800230e:	23a0      	movs	r3, #160	@ 0xa0
 8002310:	05db      	lsls	r3, r3, #23
 8002312:	0011      	movs	r1, r2
 8002314:	0018      	movs	r0, r3
 8002316:	f005 ff07 	bl	8008128 <HAL_GPIO_Init>

  //Configure hacked on pot low leg -> i.e. it is to be set low
  GPIO_InitStruct.Pin = HACK_POT_LOW_Pin;
 800231a:	0021      	movs	r1, r4
 800231c:	187b      	adds	r3, r7, r1
 800231e:	2280      	movs	r2, #128	@ 0x80
 8002320:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002322:	187b      	adds	r3, r7, r1
 8002324:	2201      	movs	r2, #1
 8002326:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	187b      	adds	r3, r7, r1
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	187b      	adds	r3, r7, r1
 8002330:	2200      	movs	r2, #0
 8002332:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_LOW_GPIO_Port, &GPIO_InitStruct);
 8002334:	187a      	adds	r2, r7, r1
 8002336:	23a0      	movs	r3, #160	@ 0xa0
 8002338:	05db      	lsls	r3, r3, #23
 800233a:	0011      	movs	r1, r2
 800233c:	0018      	movs	r0, r3
 800233e:	f005 fef3 	bl	8008128 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 2);
 8002342:	2202      	movs	r2, #2
 8002344:	2102      	movs	r1, #2
 8002346:	2007      	movs	r0, #7
 8002348:	f005 fb8e 	bl	8007a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800234c:	2007      	movs	r0, #7
 800234e:	f005 fba0 	bl	8007a92 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002352:	46c0      	nop			@ (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	b00b      	add	sp, #44	@ 0x2c
 8002358:	bd90      	pop	{r4, r7, pc}
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	40021000 	.word	0x40021000
 8002360:	50000800 	.word	0x50000800
 8002364:	50001400 	.word	0x50001400
 8002368:	50000400 	.word	0x50000400

0800236c <Error_Handler>:

void Error_Handler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002370:	b672      	cpsid	i
}
 8002372:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002374:	46c0      	nop			@ (mov r8, r8)
 8002376:	e7fd      	b.n	8002374 <Error_Handler+0x8>

08002378 <System_Init>:
  {

  }
}

void System_Init(void){
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800237c:	f003 fff6 	bl	800636c <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8002380:	f7ff f9e4 	bl	800174c <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002384:	f7ff fef0 	bl	8002168 <MX_GPIO_Init>
	MX_DMA_Init();
 8002388:	f7ff fec8 	bl	800211c <MX_DMA_Init>
	MX_USART2_UART_Init();
 800238c:	f7ff fe92 	bl	80020b4 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8002390:	f7ff fa3a 	bl	8001808 <MX_ADC1_Init>
	MX_TIM16_Init(); //Frequency Gen.
 8002394:	f7ff faf8 	bl	8001988 <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement is TIM2_ch1
 8002398:	f7ff fb82 	bl	8001aa0 <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse is TIM3_ch1
 800239c:	f7ff fbfc 	bl	8001b98 <MX_TIM3_Init>
	MX_TIM1_Init(); //PWM Gen. Main/Secondary Oscillator on ch2/ch4
 80023a0:	f7ff fc82 	bl	8001ca8 <MX_TIM1_Init>
	MX_TIM17_Init();
 80023a4:	f7ff fd6a 	bl	8001e7c <MX_TIM17_Init>
	MX_TIM14_Init();
 80023a8:	f7ff fe32 	bl	8002010 <MX_TIM14_Init>
	//MX_IWDG_Init(); fucks up stuff - to be config'd
	MX_LPTIM1_Init(); //Tap Tempo checking/debouncing timer
 80023ac:	f7ff fdf8 	bl	8001fa0 <MX_LPTIM1_Init>

	//Calibrate ADC - DO NOT MOVE TO BEFORE OTHER CONFIG ABOVE
	HAL_ADCEx_Calibration_Start(&hadc1);
 80023b0:	4b21      	ldr	r3, [pc, #132]	@ (8002438 <System_Init+0xc0>)
 80023b2:	0018      	movs	r0, r3
 80023b4:	f005 f976 	bl	80076a4 <HAL_ADCEx_Calibration_Start>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM16_callback);
 80023b8:	4a20      	ldr	r2, [pc, #128]	@ (800243c <System_Init+0xc4>)
 80023ba:	4b21      	ldr	r3, [pc, #132]	@ (8002440 <System_Init+0xc8>)
 80023bc:	210e      	movs	r1, #14
 80023be:	0018      	movs	r0, r3
 80023c0:	f008 fdea 	bl	800af98 <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 80023c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002444 <System_Init+0xcc>)
 80023c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002438 <System_Init+0xc0>)
 80023c8:	2100      	movs	r1, #0
 80023ca:	0018      	movs	r0, r3
 80023cc:	f004 fb96 	bl	8006afc <HAL_ADC_RegisterCallback>

	//Set custom callback function for I/P capture input falling edge event
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, &TIM2_ch1_IP_capture_callback);
 80023d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002448 <System_Init+0xd0>)
 80023d2:	4b1e      	ldr	r3, [pc, #120]	@ (800244c <System_Init+0xd4>)
 80023d4:	2112      	movs	r1, #18
 80023d6:	0018      	movs	r0, r3
 80023d8:	f008 fdde 	bl	800af98 <HAL_TIM_RegisterCallback>

	//Set custom callback function for I/P capture timer overflow (Update event/overflow)
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM2_ch1_overflow_callback);
 80023dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002450 <System_Init+0xd8>)
 80023de:	4b1b      	ldr	r3, [pc, #108]	@ (800244c <System_Init+0xd4>)
 80023e0:	210e      	movs	r1, #14
 80023e2:	0018      	movs	r0, r3
 80023e4:	f008 fdd8 	bl	800af98 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM3_ch1 (Measurement Re-Elapse) (CCR match)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM3_ch1_IP_capture_measurement_reelapse_callback);
 80023e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002454 <System_Init+0xdc>)
 80023ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002458 <System_Init+0xe0>)
 80023ec:	2114      	movs	r1, #20
 80023ee:	0018      	movs	r0, r3
 80023f0:	f008 fdd2 	bl	800af98 <HAL_TIM_RegisterCallback>

	//Set custom callback function for DMA TX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID, &UART2_TX_transfer_complete_callback);
 80023f4:	4a19      	ldr	r2, [pc, #100]	@ (800245c <System_Init+0xe4>)
 80023f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002460 <System_Init+0xe8>)
 80023f8:	2101      	movs	r1, #1
 80023fa:	0018      	movs	r0, r3
 80023fc:	f009 fdb8 	bl	800bf70 <HAL_UART_RegisterCallback>

	//Set custom callback function for DMA RX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, &UART2_RX_transfer_complete_callback);
 8002400:	4a18      	ldr	r2, [pc, #96]	@ (8002464 <System_Init+0xec>)
 8002402:	4b17      	ldr	r3, [pc, #92]	@ (8002460 <System_Init+0xe8>)
 8002404:	2103      	movs	r1, #3
 8002406:	0018      	movs	r0, r3
 8002408:	f009 fdb2 	bl	800bf70 <HAL_UART_RegisterCallback>

	//Set custom callback for LPTIM1 (Tap Tempo SW state check)
	HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, &LPTIM1_callback);
 800240c:	4a16      	ldr	r2, [pc, #88]	@ (8002468 <System_Init+0xf0>)
 800240e:	4b17      	ldr	r3, [pc, #92]	@ (800246c <System_Init+0xf4>)
 8002410:	2102      	movs	r1, #2
 8002412:	0018      	movs	r0, r3
 8002414:	f006 fa76 	bl	8008904 <HAL_LPTIM_RegisterCallback>

	//Set custom callback function for TIM17
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback);
 8002418:	4a15      	ldr	r2, [pc, #84]	@ (8002470 <System_Init+0xf8>)
 800241a:	4b16      	ldr	r3, [pc, #88]	@ (8002474 <System_Init+0xfc>)
 800241c:	2114      	movs	r1, #20
 800241e:	0018      	movs	r0, r3
 8002420:	f008 fdba 	bl	800af98 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM14
	HAL_TIM_RegisterCallback(&htim14, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM14_callback);
 8002424:	4a14      	ldr	r2, [pc, #80]	@ (8002478 <System_Init+0x100>)
 8002426:	4b15      	ldr	r3, [pc, #84]	@ (800247c <System_Init+0x104>)
 8002428:	2114      	movs	r1, #20
 800242a:	0018      	movs	r0, r3
 800242c:	f008 fdb4 	bl	800af98 <HAL_TIM_RegisterCallback>
}
 8002430:	46c0      	nop			@ (mov r8, r8)
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			@ (mov r8, r8)
 8002438:	200004fc 	.word	0x200004fc
 800243c:	08002481 	.word	0x08002481
 8002440:	20000758 	.word	0x20000758
 8002444:	080024d5 	.word	0x080024d5
 8002448:	08002569 	.word	0x08002569
 800244c:	20000814 	.word	0x20000814
 8002450:	08002685 	.word	0x08002685
 8002454:	08002791 	.word	0x08002791
 8002458:	200008d0 	.word	0x200008d0
 800245c:	080028cd 	.word	0x080028cd
 8002460:	20000a48 	.word	0x20000a48
 8002464:	080028dd 	.word	0x080028dd
 8002468:	08003cbd 	.word	0x08003cbd
 800246c:	20000bcc 	.word	0x20000bcc
 8002470:	08004301 	.word	0x08004301
 8002474:	2000069c 	.word	0x2000069c
 8002478:	08004311 	.word	0x08004311
 800247c:	200005e0 	.word	0x200005e0

08002480 <TIM16_callback>:
#include "custom_callbacks.h"

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Set_Oscillator_Values(&params);
 8002488:	4b0d      	ldr	r3, [pc, #52]	@ (80024c0 <TIM16_callback+0x40>)
 800248a:	0018      	movs	r0, r3
 800248c:	f002 fb4e 	bl	8004b2c <Set_Oscillator_Values>
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002490:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <TIM16_callback+0x40>)
 8002492:	2100      	movs	r1, #0
 8002494:	0018      	movs	r0, r3
 8002496:	f002 fb75 	bl	8004b84 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 800249a:	4a0a      	ldr	r2, [pc, #40]	@ (80024c4 <TIM16_callback+0x44>)
 800249c:	4b08      	ldr	r3, [pc, #32]	@ (80024c0 <TIM16_callback+0x40>)
 800249e:	0011      	movs	r1, r2
 80024a0:	0018      	movs	r0, r3
 80024a2:	f002 fc65 	bl	8004d70 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 80024a6:	4b08      	ldr	r3, [pc, #32]	@ (80024c8 <TIM16_callback+0x48>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	001a      	movs	r2, r3
 80024ac:	4907      	ldr	r1, [pc, #28]	@ (80024cc <TIM16_callback+0x4c>)
 80024ae:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <TIM16_callback+0x50>)
 80024b0:	0018      	movs	r0, r3
 80024b2:	f004 fbaf 	bl	8006c14 <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80024b6:	46c0      	nop			@ (mov r8, r8)
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b002      	add	sp, #8
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	46c0      	nop			@ (mov r8, r8)
 80024c0:	20000c58 	.word	0x20000c58
 80024c4:	20000028 	.word	0x20000028
 80024c8:	0800dfb8 	.word	0x0800dfb8
 80024cc:	20000c4c 	.word	0x20000c4c
 80024d0:	200004fc 	.word	0x200004fc

080024d4 <ADC_DMA_conversion_complete_callback>:

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 80024d4:	b5b0      	push	{r4, r5, r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	0018      	movs	r0, r3
 80024e0:	f004 fc26 	bl	8006d30 <HAL_ADC_Stop_DMA>
	Process_ADC_Conversion_Values(&params_manual, ADCResultsDMA);
 80024e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002554 <ADC_DMA_conversion_complete_callback+0x80>)
 80024e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002558 <ADC_DMA_conversion_complete_callback+0x84>)
 80024e8:	0011      	movs	r1, r2
 80024ea:	0018      	movs	r0, r3
 80024ec:	f002 fcd6 	bl	8004e9c <Process_ADC_Conversion_Values>

	//copies into running params based on mode
	Update_Params_Based_On_Mode_Selected();
 80024f0:	f7fe f816 	bl	8000520 <Update_Params_Based_On_Mode_Selected>

	enum Validate first_sync_complete = Get_Status_Bit(&statuses, First_Sync_Complete);
 80024f4:	250f      	movs	r5, #15
 80024f6:	197c      	adds	r4, r7, r5
 80024f8:	4b18      	ldr	r3, [pc, #96]	@ (800255c <ADC_DMA_conversion_complete_callback+0x88>)
 80024fa:	2108      	movs	r1, #8
 80024fc:	0018      	movs	r0, r3
 80024fe:	f003 fed1 	bl	80062a4 <Get_Status_Bit>
 8002502:	0003      	movs	r3, r0
 8002504:	7023      	strb	r3, [r4, #0]

	//overwrites raw speed values if a sync has completed
	if(first_sync_complete == YES){
 8002506:	197b      	adds	r3, r7, r5
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d10a      	bne.n	8002524 <ADC_DMA_conversion_complete_callback+0x50>

		params.raw_start_value = params_working.raw_start_value;
 800250e:	4b14      	ldr	r3, [pc, #80]	@ (8002560 <ADC_DMA_conversion_complete_callback+0x8c>)
 8002510:	8a5b      	ldrh	r3, [r3, #18]
 8002512:	b29a      	uxth	r2, r3
 8002514:	4b13      	ldr	r3, [pc, #76]	@ (8002564 <ADC_DMA_conversion_complete_callback+0x90>)
 8002516:	825a      	strh	r2, [r3, #18]
		params.raw_prescaler = params_working.raw_prescaler;
 8002518:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <ADC_DMA_conversion_complete_callback+0x8c>)
 800251a:	8b5b      	ldrh	r3, [r3, #26]
 800251c:	b29a      	uxth	r2, r3
 800251e:	4b11      	ldr	r3, [pc, #68]	@ (8002564 <ADC_DMA_conversion_complete_callback+0x90>)
 8002520:	835a      	strh	r2, [r3, #26]
 8002522:	e003      	b.n	800252c <ADC_DMA_conversion_complete_callback+0x58>
	}
	else{

		Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(&params);
 8002524:	4b0f      	ldr	r3, [pc, #60]	@ (8002564 <ADC_DMA_conversion_complete_callback+0x90>)
 8002526:	0018      	movs	r0, r3
 8002528:	f002 faca 	bl	8004ac0 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	}

	Process_TIM16_Final_Start_Value_and_Final_Prescaler(&params);
 800252c:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <ADC_DMA_conversion_complete_callback+0x90>)
 800252e:	0018      	movs	r0, r3
 8002530:	f003 fa2a 	bl	8005988 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//after initial conversion is complete, set the conversion complete flag - leave this after raw/final value processing rather than actually when ADC values are converted for startup routine reasons.
	if(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){
 8002534:	4b09      	ldr	r3, [pc, #36]	@ (800255c <ADC_DMA_conversion_complete_callback+0x88>)
 8002536:	2110      	movs	r1, #16
 8002538:	0018      	movs	r0, r3
 800253a:	f003 feb3 	bl	80062a4 <Get_Status_Bit>
 800253e:	1e03      	subs	r3, r0, #0
 8002540:	d104      	bne.n	800254c <ADC_DMA_conversion_complete_callback+0x78>
		Set_Status_Bit(&statuses, Initial_ADC_Conversion_Complete);
 8002542:	4b06      	ldr	r3, [pc, #24]	@ (800255c <ADC_DMA_conversion_complete_callback+0x88>)
 8002544:	2110      	movs	r1, #16
 8002546:	0018      	movs	r0, r3
 8002548:	f003 fec0 	bl	80062cc <Set_Status_Bit>
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 800254c:	46c0      	nop			@ (mov r8, r8)
 800254e:	46bd      	mov	sp, r7
 8002550:	b004      	add	sp, #16
 8002552:	bdb0      	pop	{r4, r5, r7, pc}
 8002554:	20000c4c 	.word	0x20000c4c
 8002558:	20000c7c 	.word	0x20000c7c
 800255c:	20000c3c 	.word	0x20000c3c
 8002560:	20000cc4 	.word	0x20000cc4
 8002564:	20000c58 	.word	0x20000c58

08002568 <TIM2_ch1_IP_capture_callback>:

void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2100      	movs	r1, #0
 8002574:	0018      	movs	r0, r3
 8002576:	f008 fc8b 	bl	800ae90 <HAL_TIM_ReadCapturedValue>
 800257a:	0002      	movs	r2, r0
 800257c:	4b3a      	ldr	r3, [pc, #232]	@ (8002668 <TIM2_ch1_IP_capture_callback+0x100>)
 800257e:	601a      	str	r2, [r3, #0]

	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 8002580:	4b39      	ldr	r3, [pc, #228]	@ (8002668 <TIM2_ch1_IP_capture_callback+0x100>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0a5b      	lsrs	r3, r3, #9
 8002586:	b29a      	uxth	r2, r3
 8002588:	4b38      	ldr	r3, [pc, #224]	@ (800266c <TIM2_ch1_IP_capture_callback+0x104>)
 800258a:	801a      	strh	r2, [r3, #0]

	//since the input capture measurement is z, and this is 512x the interrupt period, we just use the interrupt
	//period = z/512 as the 'elapse period value' if we also set the elapse timer prescaler to 512x less than the
	//input capture measurement timer

	if(IP_CAP_fsm.current_state == IDLE){
 800258c:	4b38      	ldr	r3, [pc, #224]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d108      	bne.n	80025a8 <TIM2_ch1_IP_capture_callback+0x40>

		Begin_Input_Capture_Measurement();
 8002596:	f002 f97f 	bl	8004898 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 800259a:	4b35      	ldr	r3, [pc, #212]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = IDLE;
 80025a0:	4b33      	ldr	r3, [pc, #204]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	705a      	strb	r2, [r3, #1]
		//BEGIN PROCESSING
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80025a6:	e05b      	b.n	8002660 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){ //second edge
 80025a8:	4b31      	ldr	r3, [pc, #196]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d124      	bne.n	80025fc <TIM2_ch1_IP_capture_callback+0x94>
		if(interrupt_period >= HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is >= than 129
 80025b2:	4b2e      	ldr	r3, [pc, #184]	@ (800266c <TIM2_ch1_IP_capture_callback+0x104>)
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b80      	cmp	r3, #128	@ 0x80
 80025ba:	d951      	bls.n	8002660 <TIM2_ch1_IP_capture_callback+0xf8>
				Start_Measurement_Reelapse_Timer();
 80025bc:	f002 f94e 	bl	800485c <Start_Measurement_Reelapse_Timer>
			IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 80025c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 80025c2:	2202      	movs	r2, #2
 80025c4:	701a      	strb	r2, [r3, #0]
			IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 80025c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	705a      	strb	r2, [r3, #1]
			Copy_Params_Structs(&params, &params_to_be_loaded);
 80025cc:	4a29      	ldr	r2, [pc, #164]	@ (8002674 <TIM2_ch1_IP_capture_callback+0x10c>)
 80025ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002678 <TIM2_ch1_IP_capture_callback+0x110>)
 80025d0:	0011      	movs	r1, r2
 80025d2:	0018      	movs	r0, r3
 80025d4:	f002 f930 	bl	8004838 <Copy_Params_Structs>
			if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 80025d8:	4b28      	ldr	r3, [pc, #160]	@ (800267c <TIM2_ch1_IP_capture_callback+0x114>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b05      	cmp	r3, #5
 80025e0:	d004      	beq.n	80025ec <TIM2_ch1_IP_capture_callback+0x84>
 80025e2:	4b26      	ldr	r3, [pc, #152]	@ (800267c <TIM2_ch1_IP_capture_callback+0x114>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b07      	cmp	r3, #7
 80025ea:	d101      	bne.n	80025f0 <TIM2_ch1_IP_capture_callback+0x88>
				Advance_Pending_States();
 80025ec:	f002 fda2 	bl	8005134 <Advance_Pending_States>
			Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 80025f0:	4b23      	ldr	r3, [pc, #140]	@ (8002680 <TIM2_ch1_IP_capture_callback+0x118>)
 80025f2:	2104      	movs	r1, #4
 80025f4:	0018      	movs	r0, r3
 80025f6:	f003 fe69 	bl	80062cc <Set_Status_Bit>
}
 80025fa:	e031      	b.n	8002660 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){ //first edge
 80025fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d108      	bne.n	8002618 <TIM2_ch1_IP_capture_callback+0xb0>
		Begin_Input_Capture_Measurement();
 8002606:	f002 f947 	bl	8004898 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 800260a:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 800260c:	2203      	movs	r2, #3
 800260e:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8002610:	4b17      	ldr	r3, [pc, #92]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 8002612:	2202      	movs	r2, #2
 8002614:	705a      	strb	r2, [r3, #1]
}
 8002616:	e023      	b.n	8002660 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){ //second edge
 8002618:	4b15      	ldr	r3, [pc, #84]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b03      	cmp	r3, #3
 8002620:	d11e      	bne.n	8002660 <TIM2_ch1_IP_capture_callback+0xf8>
			Start_Measurement_Reelapse_Timer();
 8002622:	f002 f91b 	bl	800485c <Start_Measurement_Reelapse_Timer>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8002626:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 8002628:	2202      	movs	r2, #2
 800262a:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 800262c:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <TIM2_ch1_IP_capture_callback+0x108>)
 800262e:	2203      	movs	r2, #3
 8002630:	705a      	strb	r2, [r3, #1]
		Copy_Params_Structs(&params, &params_to_be_loaded);
 8002632:	4a10      	ldr	r2, [pc, #64]	@ (8002674 <TIM2_ch1_IP_capture_callback+0x10c>)
 8002634:	4b10      	ldr	r3, [pc, #64]	@ (8002678 <TIM2_ch1_IP_capture_callback+0x110>)
 8002636:	0011      	movs	r1, r2
 8002638:	0018      	movs	r0, r3
 800263a:	f002 f8fd 	bl	8004838 <Copy_Params_Structs>
		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 800263e:	4b0f      	ldr	r3, [pc, #60]	@ (800267c <TIM2_ch1_IP_capture_callback+0x114>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b05      	cmp	r3, #5
 8002646:	d004      	beq.n	8002652 <TIM2_ch1_IP_capture_callback+0xea>
 8002648:	4b0c      	ldr	r3, [pc, #48]	@ (800267c <TIM2_ch1_IP_capture_callback+0x114>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b07      	cmp	r3, #7
 8002650:	d101      	bne.n	8002656 <TIM2_ch1_IP_capture_callback+0xee>
			Advance_Pending_States();
 8002652:	f002 fd6f 	bl	8005134 <Advance_Pending_States>
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 8002656:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <TIM2_ch1_IP_capture_callback+0x118>)
 8002658:	2104      	movs	r1, #4
 800265a:	0018      	movs	r0, r3
 800265c:	f003 fe36 	bl	80062cc <Set_Status_Bit>
}
 8002660:	46c0      	nop			@ (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	b002      	add	sp, #8
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000c34 	.word	0x20000c34
 800266c:	20000c38 	.word	0x20000c38
 8002670:	20000444 	.word	0x20000444
 8002674:	20000ca0 	.word	0x20000ca0
 8002678:	20000c58 	.word	0x20000c58
 800267c:	20000430 	.word	0x20000430
 8002680:	20000c3c 	.word	0x20000c3c

08002684 <TIM2_ch1_overflow_callback>:


void TIM2_ch1_overflow_callback(TIM_HandleTypeDef *htim){
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]

	union Speed_FSM_States previous = speed_fsm.prev_state;
 800268c:	240c      	movs	r4, #12
 800268e:	193b      	adds	r3, r7, r4
 8002690:	4a3a      	ldr	r2, [pc, #232]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 8002692:	7852      	ldrb	r2, [r2, #1]
 8002694:	701a      	strb	r2, [r3, #0]

	if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){
 8002696:	4b3a      	ldr	r3, [pc, #232]	@ (8002780 <TIM2_ch1_overflow_callback+0xfc>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b01      	cmp	r3, #1
 800269e:	d131      	bne.n	8002704 <TIM2_ch1_overflow_callback+0x80>

		IP_CAP_fsm.current_state = IDLE;
 80026a0:	4b37      	ldr	r3, [pc, #220]	@ (8002780 <TIM2_ch1_overflow_callback+0xfc>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 80026a6:	4b36      	ldr	r3, [pc, #216]	@ (8002780 <TIM2_ch1_overflow_callback+0xfc>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	705a      	strb	r2, [r3, #1]

		MIDI_CLK_fsm = NOT_COMPILING;
 80026ac:	4b35      	ldr	r3, [pc, #212]	@ (8002784 <TIM2_ch1_overflow_callback+0x100>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 80026b2:	4b35      	ldr	r3, [pc, #212]	@ (8002788 <TIM2_ch1_overflow_callback+0x104>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80026b8:	2380      	movs	r3, #128	@ 0x80
 80026ba:	0099      	lsls	r1, r3, #2
 80026bc:	23a0      	movs	r3, #160	@ 0xa0
 80026be:	05db      	lsls	r3, r3, #23
 80026c0:	2201      	movs	r2, #1
 80026c2:	0018      	movs	r0, r3
 80026c4:	f005 feb1 	bl	800842a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80026c8:	4b30      	ldr	r3, [pc, #192]	@ (800278c <TIM2_ch1_overflow_callback+0x108>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	2140      	movs	r1, #64	@ 0x40
 80026ce:	0018      	movs	r0, r3
 80026d0:	f005 feab 	bl	800842a <HAL_GPIO_WritePin>

		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80026d4:	4b29      	ldr	r3, [pc, #164]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d049      	beq.n	8002772 <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 80026de:	4b27      	ldr	r3, [pc, #156]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b06      	cmp	r3, #6
 80026e6:	d044      	beq.n	8002772 <TIM2_ch1_overflow_callback+0xee>
 80026e8:	4b24      	ldr	r3, [pc, #144]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d03f      	beq.n	8002772 <TIM2_ch1_overflow_callback+0xee>

			speed_fsm.prev_state = speed_fsm.current_state;
 80026f2:	4b22      	ldr	r3, [pc, #136]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 80026f4:	4a21      	ldr	r2, [pc, #132]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 80026f6:	7812      	ldrb	r2, [r2, #0]
 80026f8:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 80026fa:	4b20      	ldr	r3, [pc, #128]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 80026fc:	193a      	adds	r2, r7, r4
 80026fe:	7812      	ldrb	r2, [r2, #0]
 8002700:	701a      	strb	r2, [r3, #0]

			speed_fsm.prev_state = speed_fsm.current_state;
			speed_fsm.current_state = previous;
		}
	}
}
 8002702:	e036      	b.n	8002772 <TIM2_ch1_overflow_callback+0xee>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8002704:	4b1e      	ldr	r3, [pc, #120]	@ (8002780 <TIM2_ch1_overflow_callback+0xfc>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b03      	cmp	r3, #3
 800270c:	d131      	bne.n	8002772 <TIM2_ch1_overflow_callback+0xee>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 800270e:	4b1c      	ldr	r3, [pc, #112]	@ (8002780 <TIM2_ch1_overflow_callback+0xfc>)
 8002710:	2202      	movs	r2, #2
 8002712:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002714:	4b1a      	ldr	r3, [pc, #104]	@ (8002780 <TIM2_ch1_overflow_callback+0xfc>)
 8002716:	2203      	movs	r2, #3
 8002718:	705a      	strb	r2, [r3, #1]
		MIDI_CLK_fsm = NOT_COMPILING;
 800271a:	4b1a      	ldr	r3, [pc, #104]	@ (8002784 <TIM2_ch1_overflow_callback+0x100>)
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 8002720:	4b19      	ldr	r3, [pc, #100]	@ (8002788 <TIM2_ch1_overflow_callback+0x104>)
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002726:	2380      	movs	r3, #128	@ 0x80
 8002728:	0099      	lsls	r1, r3, #2
 800272a:	23a0      	movs	r3, #160	@ 0xa0
 800272c:	05db      	lsls	r3, r3, #23
 800272e:	2201      	movs	r2, #1
 8002730:	0018      	movs	r0, r3
 8002732:	f005 fe7a 	bl	800842a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002736:	4b15      	ldr	r3, [pc, #84]	@ (800278c <TIM2_ch1_overflow_callback+0x108>)
 8002738:	2200      	movs	r2, #0
 800273a:	2140      	movs	r1, #64	@ 0x40
 800273c:	0018      	movs	r0, r3
 800273e:	f005 fe74 	bl	800842a <HAL_GPIO_WritePin>
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002742:	4b0e      	ldr	r3, [pc, #56]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b04      	cmp	r3, #4
 800274a:	d012      	beq.n	8002772 <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 800274c:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b06      	cmp	r3, #6
 8002754:	d00d      	beq.n	8002772 <TIM2_ch1_overflow_callback+0xee>
 8002756:	4b09      	ldr	r3, [pc, #36]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 800275c:	2b08      	cmp	r3, #8
 800275e:	d008      	beq.n	8002772 <TIM2_ch1_overflow_callback+0xee>
			speed_fsm.prev_state = speed_fsm.current_state;
 8002760:	4b06      	ldr	r3, [pc, #24]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 8002762:	4a06      	ldr	r2, [pc, #24]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 8002764:	7812      	ldrb	r2, [r2, #0]
 8002766:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002768:	4b04      	ldr	r3, [pc, #16]	@ (800277c <TIM2_ch1_overflow_callback+0xf8>)
 800276a:	220c      	movs	r2, #12
 800276c:	18ba      	adds	r2, r7, r2
 800276e:	7812      	ldrb	r2, [r2, #0]
 8002770:	701a      	strb	r2, [r3, #0]
}
 8002772:	46c0      	nop			@ (mov r8, r8)
 8002774:	46bd      	mov	sp, r7
 8002776:	b005      	add	sp, #20
 8002778:	bd90      	pop	{r4, r7, pc}
 800277a:	46c0      	nop			@ (mov r8, r8)
 800277c:	20000430 	.word	0x20000430
 8002780:	20000444 	.word	0x20000444
 8002784:	20000ce8 	.word	0x20000ce8
 8002788:	20000c3a 	.word	0x20000c3a
 800278c:	50000800 	.word	0x50000800

08002790 <TIM3_ch1_IP_capture_measurement_reelapse_callback>:

void TIM3_ch1_IP_capture_measurement_reelapse_callback(TIM_HandleTypeDef *htim){
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002798:	4b41      	ldr	r3, [pc, #260]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b0b      	cmp	r3, #11
 80027a0:	d01c      	beq.n	80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 80027a2:	4b3f      	ldr	r3, [pc, #252]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b0c      	cmp	r3, #12
 80027aa:	d017      	beq.n	80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 80027ac:	4b3c      	ldr	r3, [pc, #240]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b0d      	cmp	r3, #13
 80027b4:	d012      	beq.n	80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 80027b6:	4b3a      	ldr	r3, [pc, #232]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b10      	cmp	r3, #16
 80027be:	d00d      	beq.n	80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 80027c0:	4b37      	ldr	r3, [pc, #220]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b11      	cmp	r3, #17
 80027c8:	d008      	beq.n	80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 80027ca:	4b35      	ldr	r3, [pc, #212]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 80027d0:	2b12      	cmp	r3, #18
 80027d2:	d003      	beq.n	80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>

		// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
		Set_Oscillator_Values(&params_to_be_loaded);
 80027d4:	4b33      	ldr	r3, [pc, #204]	@ (80028a4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 80027d6:	0018      	movs	r0, r3
 80027d8:	f002 f9a8 	bl	8004b2c <Set_Oscillator_Values>
	}

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 80027dc:	4b32      	ldr	r3, [pc, #200]	@ (80028a8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x118>)
 80027de:	2100      	movs	r1, #0
 80027e0:	0018      	movs	r0, r3
 80027e2:	f003 fcf8 	bl	80061d6 <Stop_OC_TIM>

	if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){
 80027e6:	4b31      	ldr	r3, [pc, #196]	@ (80028ac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d106      	bne.n	80027fe <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x6e>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = IDLE;
 80027f0:	4b2e      	ldr	r3, [pc, #184]	@ (80028ac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 80027f6:	4b2d      	ldr	r3, [pc, #180]	@ (80028ac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 80027f8:	2202      	movs	r2, #2
 80027fa:	705a      	strb	r2, [r3, #1]
 80027fc:	e00a      	b.n	8002814 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>
	}
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 80027fe:	4b2b      	ldr	r3, [pc, #172]	@ (80028ac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b03      	cmp	r3, #3
 8002806:	d105      	bne.n	8002814 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8002808:	4b28      	ldr	r3, [pc, #160]	@ (80028ac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 800280e:	4b27      	ldr	r3, [pc, #156]	@ (80028ac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002810:	2203      	movs	r2, #3
 8002812:	705a      	strb	r2, [r3, #1]
	}

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002814:	4b22      	ldr	r3, [pc, #136]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b0b      	cmp	r3, #11
 800281c:	d03c      	beq.n	8002898 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 800281e:	4b20      	ldr	r3, [pc, #128]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b0c      	cmp	r3, #12
 8002826:	d037      	beq.n	8002898 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8002828:	4b1d      	ldr	r3, [pc, #116]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b0d      	cmp	r3, #13
 8002830:	d032      	beq.n	8002898 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 8002832:	4b1b      	ldr	r3, [pc, #108]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b10      	cmp	r3, #16
 800283a:	d02d      	beq.n	8002898 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 800283c:	4b18      	ldr	r3, [pc, #96]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b11      	cmp	r3, #17
 8002844:	d028      	beq.n	8002898 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8002846:	4b16      	ldr	r3, [pc, #88]	@ (80028a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 800284c:	2b12      	cmp	r3, #18
 800284e:	d023      	beq.n	8002898 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>

		Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002850:	4a17      	ldr	r2, [pc, #92]	@ (80028b0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x120>)
 8002852:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002854:	0011      	movs	r1, r2
 8002856:	0018      	movs	r0, r3
 8002858:	f001 ffee 	bl	8004838 <Copy_Params_Structs>
		Copy_Params_Structs(&params_to_be_loaded, &params);
 800285c:	4a15      	ldr	r2, [pc, #84]	@ (80028b4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 800285e:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002860:	0011      	movs	r1, r2
 8002862:	0018      	movs	r0, r3
 8002864:	f001 ffe8 	bl	8004838 <Copy_Params_Structs>

		Set_Status_Bit(&statuses, First_Sync_Complete);
 8002868:	4b13      	ldr	r3, [pc, #76]	@ (80028b8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x128>)
 800286a:	2108      	movs	r1, #8
 800286c:	0018      	movs	r0, r3
 800286e:	f003 fd2d 	bl	80062cc <Set_Status_Bit>

		Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002872:	4b10      	ldr	r3, [pc, #64]	@ (80028b4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002874:	2100      	movs	r1, #0
 8002876:	0018      	movs	r0, r3
 8002878:	f002 f984 	bl	8004b84 <Calculate_Next_Main_Oscillator_Values>
		Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 800287c:	4a0f      	ldr	r2, [pc, #60]	@ (80028bc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x12c>)
 800287e:	4b0d      	ldr	r3, [pc, #52]	@ (80028b4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002880:	0011      	movs	r1, r2
 8002882:	0018      	movs	r0, r3
 8002884:	f002 fa74 	bl	8004d70 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002888:	4b0d      	ldr	r3, [pc, #52]	@ (80028c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x130>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	001a      	movs	r2, r3
 800288e:	490d      	ldr	r1, [pc, #52]	@ (80028c4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x134>)
 8002890:	4b0d      	ldr	r3, [pc, #52]	@ (80028c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x138>)
 8002892:	0018      	movs	r0, r3
 8002894:	f004 f9be 	bl	8006c14 <HAL_ADC_Start_DMA>

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002898:	46c0      	nop			@ (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	b002      	add	sp, #8
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000430 	.word	0x20000430
 80028a4:	20000ca0 	.word	0x20000ca0
 80028a8:	200008d0 	.word	0x200008d0
 80028ac:	20000444 	.word	0x20000444
 80028b0:	20000cc4 	.word	0x20000cc4
 80028b4:	20000c58 	.word	0x20000c58
 80028b8:	20000c3c 	.word	0x20000c3c
 80028bc:	20000028 	.word	0x20000028
 80028c0:	0800dfb8 	.word	0x0800dfb8
 80028c4:	20000c4c 	.word	0x20000c4c
 80028c8:	200004fc 	.word	0x200004fc

080028cc <UART2_TX_transfer_complete_callback>:

void UART2_TX_transfer_complete_callback(UART_HandleTypeDef *huart){
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

	//UART_DMA_TX_is_complete = YES;
}
 80028d4:	46c0      	nop			@ (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b002      	add	sp, #8
 80028da:	bd80      	pop	{r7, pc}

080028dc <UART2_RX_transfer_complete_callback>:

void UART2_RX_transfer_complete_callback(UART_HandleTypeDef *huart){
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

	if(Is_System_Real_Time_Status_Byte(rx_buffer) == YES){
 80028e4:	4bbe      	ldr	r3, [pc, #760]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 80028e6:	0018      	movs	r0, r3
 80028e8:	f7fe fc96 	bl	8001218 <Is_System_Real_Time_Status_Byte>
 80028ec:	0003      	movs	r3, r0
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d001      	beq.n	80028f6 <UART2_RX_transfer_complete_callback+0x1a>
 80028f2:	f000 fc0c 	bl	800310e <UART2_RX_transfer_complete_callback+0x832>

		if(Get_Status_Bit(&statuses, Start_Required_Before_Sync_Mode) == YES){
 80028f6:	4bbb      	ldr	r3, [pc, #748]	@ (8002be4 <UART2_RX_transfer_complete_callback+0x308>)
 80028f8:	2180      	movs	r1, #128	@ 0x80
 80028fa:	0018      	movs	r0, r3
 80028fc:	f003 fcd2 	bl	80062a4 <Get_Status_Bit>
 8002900:	0003      	movs	r3, r0
 8002902:	2b01      	cmp	r3, #1
 8002904:	d001      	beq.n	800290a <UART2_RX_transfer_complete_callback+0x2e>
 8002906:	f001 f895 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

			if((MIDI_CLK_fsm == NOT_COMPILING) && (IP_CAP_fsm.current_state == IDLE)
 800290a:	4bb7      	ldr	r3, [pc, #732]	@ (8002be8 <UART2_RX_transfer_complete_callback+0x30c>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d159      	bne.n	80029c8 <UART2_RX_transfer_complete_callback+0xec>
 8002914:	4bb5      	ldr	r3, [pc, #724]	@ (8002bec <UART2_RX_transfer_complete_callback+0x310>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d154      	bne.n	80029c8 <UART2_RX_transfer_complete_callback+0xec>
					&& ((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 800291e:	4bb4      	ldr	r3, [pc, #720]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b04      	cmp	r3, #4
 8002926:	d013      	beq.n	8002950 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == MANUAL_MODE)
 8002928:	4bb1      	ldr	r3, [pc, #708]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d00e      	beq.n	8002950 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE)
 8002932:	4baf      	ldr	r3, [pc, #700]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b06      	cmp	r3, #6
 800293a:	d009      	beq.n	8002950 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == PC_MODE)
 800293c:	4bac      	ldr	r3, [pc, #688]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b03      	cmp	r3, #3
 8002944:	d004      	beq.n	8002950 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == CC_MODE))){
 8002946:	4baa      	ldr	r3, [pc, #680]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d13b      	bne.n	80029c8 <UART2_RX_transfer_complete_callback+0xec>

				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002950:	4ba3      	ldr	r3, [pc, #652]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2bfa      	cmp	r3, #250	@ 0xfa
 8002958:	d10b      	bne.n	8002972 <UART2_RX_transfer_complete_callback+0x96>

					speed_fsm.prev_state = speed_fsm.current_state;
 800295a:	4ba5      	ldr	r3, [pc, #660]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 800295c:	4aa4      	ldr	r2, [pc, #656]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 800295e:	7812      	ldrb	r2, [r2, #0]
 8002960:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A0_MODE;
 8002962:	4ba3      	ldr	r3, [pc, #652]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002964:	2209      	movs	r2, #9
 8002966:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 8002968:	4ba2      	ldr	r3, [pc, #648]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 800296e:	f001 f85e 	bl	8003a2e <UART2_RX_transfer_complete_callback+0x1152>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002972:	4b9b      	ldr	r3, [pc, #620]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2bf8      	cmp	r3, #248	@ 0xf8
 800297a:	d001      	beq.n	8002980 <UART2_RX_transfer_complete_callback+0xa4>
 800297c:	f001 f857 	bl	8003a2e <UART2_RX_transfer_complete_callback+0x1152>

					speed_fsm.prev_state = speed_fsm.current_state;
 8002980:	4b9b      	ldr	r3, [pc, #620]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002982:	4a9b      	ldr	r2, [pc, #620]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002984:	7812      	ldrb	r2, [r2, #0]
 8002986:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B0_MODE;
 8002988:	4b99      	ldr	r3, [pc, #612]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 800298a:	220b      	movs	r2, #11
 800298c:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 800298e:	4b99      	ldr	r3, [pc, #612]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002994:	2380      	movs	r3, #128	@ 0x80
 8002996:	0099      	lsls	r1, r3, #2
 8002998:	23a0      	movs	r3, #160	@ 0xa0
 800299a:	05db      	lsls	r3, r3, #23
 800299c:	2200      	movs	r2, #0
 800299e:	0018      	movs	r0, r3
 80029a0:	f005 fd43 	bl	800842a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80029a4:	4b94      	ldr	r3, [pc, #592]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	2140      	movs	r1, #64	@ 0x40
 80029aa:	0018      	movs	r0, r3
 80029ac:	f005 fd3d 	bl	800842a <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 80029b0:	4b8d      	ldr	r3, [pc, #564]	@ (8002be8 <UART2_RX_transfer_complete_callback+0x30c>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80029b6:	4b8f      	ldr	r3, [pc, #572]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	3301      	adds	r3, #1
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	4b8c      	ldr	r3, [pc, #560]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 80029c2:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80029c4:	f001 f833 	bl	8003a2e <UART2_RX_transfer_complete_callback+0x1152>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A0_MODE){
 80029c8:	4b89      	ldr	r3, [pc, #548]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b09      	cmp	r3, #9
 80029d0:	d123      	bne.n	8002a1a <UART2_RX_transfer_complete_callback+0x13e>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80029d2:	4b83      	ldr	r3, [pc, #524]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2bf8      	cmp	r3, #248	@ 0xf8
 80029da:	d001      	beq.n	80029e0 <UART2_RX_transfer_complete_callback+0x104>
 80029dc:	f001 f82a 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80029e0:	2380      	movs	r3, #128	@ 0x80
 80029e2:	0099      	lsls	r1, r3, #2
 80029e4:	23a0      	movs	r3, #160	@ 0xa0
 80029e6:	05db      	lsls	r3, r3, #23
 80029e8:	2200      	movs	r2, #0
 80029ea:	0018      	movs	r0, r3
 80029ec:	f005 fd1d 	bl	800842a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80029f0:	4b81      	ldr	r3, [pc, #516]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	2140      	movs	r1, #64	@ 0x40
 80029f6:	0018      	movs	r0, r3
 80029f8:	f005 fd17 	bl	800842a <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 80029fc:	4b7a      	ldr	r3, [pc, #488]	@ (8002be8 <UART2_RX_transfer_complete_callback+0x30c>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002a02:	4b7c      	ldr	r3, [pc, #496]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	3301      	adds	r3, #1
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	4b79      	ldr	r3, [pc, #484]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002a0e:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8002a10:	4b77      	ldr	r3, [pc, #476]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002a12:	220a      	movs	r2, #10
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	f001 f80d 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A1_MODE){
 8002a1a:	4b75      	ldr	r3, [pc, #468]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b0a      	cmp	r3, #10
 8002a22:	d145      	bne.n	8002ab0 <UART2_RX_transfer_complete_callback+0x1d4>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002a24:	4b6e      	ldr	r3, [pc, #440]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2bf8      	cmp	r3, #248	@ 0xf8
 8002a2c:	d001      	beq.n	8002a32 <UART2_RX_transfer_complete_callback+0x156>
 8002a2e:	f001 f801 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002a32:	4b6d      	ldr	r3, [pc, #436]	@ (8002be8 <UART2_RX_transfer_complete_callback+0x30c>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002a38:	4b6e      	ldr	r3, [pc, #440]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	4b6c      	ldr	r3, [pc, #432]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002a44:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002a46:	4b6b      	ldr	r3, [pc, #428]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b0b      	cmp	r3, #11
 8002a4e:	d80f      	bhi.n	8002a70 <UART2_RX_transfer_complete_callback+0x194>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002a50:	2380      	movs	r3, #128	@ 0x80
 8002a52:	0099      	lsls	r1, r3, #2
 8002a54:	23a0      	movs	r3, #160	@ 0xa0
 8002a56:	05db      	lsls	r3, r3, #23
 8002a58:	2200      	movs	r2, #0
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f005 fce5 	bl	800842a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002a60:	4b65      	ldr	r3, [pc, #404]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	2140      	movs	r1, #64	@ 0x40
 8002a66:	0018      	movs	r0, r3
 8002a68:	f005 fcdf 	bl	800842a <HAL_GPIO_WritePin>
 8002a6c:	f000 ffe2 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002a70:	4b60      	ldr	r3, [pc, #384]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b18      	cmp	r3, #24
 8002a78:	d80f      	bhi.n	8002a9a <UART2_RX_transfer_complete_callback+0x1be>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002a7a:	2380      	movs	r3, #128	@ 0x80
 8002a7c:	0099      	lsls	r1, r3, #2
 8002a7e:	23a0      	movs	r3, #160	@ 0xa0
 8002a80:	05db      	lsls	r3, r3, #23
 8002a82:	2201      	movs	r2, #1
 8002a84:	0018      	movs	r0, r3
 8002a86:	f005 fcd0 	bl	800842a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002a8a:	4b5b      	ldr	r3, [pc, #364]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2140      	movs	r1, #64	@ 0x40
 8002a90:	0018      	movs	r0, r3
 8002a92:	f005 fcca 	bl	800842a <HAL_GPIO_WritePin>
 8002a96:	f000 ffcd 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8002a9a:	4b55      	ldr	r3, [pc, #340]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002a9c:	220a      	movs	r2, #10
 8002a9e:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002aa0:	4b53      	ldr	r3, [pc, #332]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002aa2:	2208      	movs	r2, #8
 8002aa4:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8002aa6:	4b53      	ldr	r3, [pc, #332]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]
 8002aac:	f000 ffc2 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE){
 8002ab0:	4b4f      	ldr	r3, [pc, #316]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b0b      	cmp	r3, #11
 8002ab8:	d142      	bne.n	8002b40 <UART2_RX_transfer_complete_callback+0x264>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002aba:	4b49      	ldr	r3, [pc, #292]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2bf8      	cmp	r3, #248	@ 0xf8
 8002ac2:	d001      	beq.n	8002ac8 <UART2_RX_transfer_complete_callback+0x1ec>
 8002ac4:	f000 ffb6 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002ac8:	4b47      	ldr	r3, [pc, #284]	@ (8002be8 <UART2_RX_transfer_complete_callback+0x30c>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002ace:	4b49      	ldr	r3, [pc, #292]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	4b46      	ldr	r3, [pc, #280]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002ada:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002adc:	4b45      	ldr	r3, [pc, #276]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b0b      	cmp	r3, #11
 8002ae4:	d80f      	bhi.n	8002b06 <UART2_RX_transfer_complete_callback+0x22a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002ae6:	2380      	movs	r3, #128	@ 0x80
 8002ae8:	0099      	lsls	r1, r3, #2
 8002aea:	23a0      	movs	r3, #160	@ 0xa0
 8002aec:	05db      	lsls	r3, r3, #23
 8002aee:	2200      	movs	r2, #0
 8002af0:	0018      	movs	r0, r3
 8002af2:	f005 fc9a 	bl	800842a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002af6:	4b40      	ldr	r3, [pc, #256]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	2140      	movs	r1, #64	@ 0x40
 8002afc:	0018      	movs	r0, r3
 8002afe:	f005 fc94 	bl	800842a <HAL_GPIO_WritePin>
 8002b02:	f000 ff97 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002b06:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b18      	cmp	r3, #24
 8002b0e:	d80f      	bhi.n	8002b30 <UART2_RX_transfer_complete_callback+0x254>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002b10:	2380      	movs	r3, #128	@ 0x80
 8002b12:	0099      	lsls	r1, r3, #2
 8002b14:	23a0      	movs	r3, #160	@ 0xa0
 8002b16:	05db      	lsls	r3, r3, #23
 8002b18:	2201      	movs	r2, #1
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f005 fc85 	bl	800842a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002b20:	4b35      	ldr	r3, [pc, #212]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	2140      	movs	r1, #64	@ 0x40
 8002b26:	0018      	movs	r0, r3
 8002b28:	f005 fc7f 	bl	800842a <HAL_GPIO_WritePin>
 8002b2c:	f000 ff82 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002b30:	4b30      	ldr	r3, [pc, #192]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B1_MODE;
 8002b36:	4b2e      	ldr	r3, [pc, #184]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002b38:	220c      	movs	r2, #12
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	f000 ff7a 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE){
 8002b40:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d158      	bne.n	8002bfc <UART2_RX_transfer_complete_callback+0x320>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002b4a:	4b25      	ldr	r3, [pc, #148]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2bf8      	cmp	r3, #248	@ 0xf8
 8002b52:	d138      	bne.n	8002bc6 <UART2_RX_transfer_complete_callback+0x2ea>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002b54:	4b24      	ldr	r3, [pc, #144]	@ (8002be8 <UART2_RX_transfer_complete_callback+0x30c>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002b5a:	4b26      	ldr	r3, [pc, #152]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	3301      	adds	r3, #1
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	4b23      	ldr	r3, [pc, #140]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002b66:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002b68:	4b22      	ldr	r3, [pc, #136]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b0b      	cmp	r3, #11
 8002b70:	d80f      	bhi.n	8002b92 <UART2_RX_transfer_complete_callback+0x2b6>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002b72:	2380      	movs	r3, #128	@ 0x80
 8002b74:	0099      	lsls	r1, r3, #2
 8002b76:	23a0      	movs	r3, #160	@ 0xa0
 8002b78:	05db      	lsls	r3, r3, #23
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f005 fc54 	bl	800842a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002b82:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	2140      	movs	r1, #64	@ 0x40
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f005 fc4e 	bl	800842a <HAL_GPIO_WritePin>
 8002b8e:	f000 ff51 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002b92:	4b18      	ldr	r3, [pc, #96]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b18      	cmp	r3, #24
 8002b9a:	d80f      	bhi.n	8002bbc <UART2_RX_transfer_complete_callback+0x2e0>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002b9c:	2380      	movs	r3, #128	@ 0x80
 8002b9e:	0099      	lsls	r1, r3, #2
 8002ba0:	23a0      	movs	r3, #160	@ 0xa0
 8002ba2:	05db      	lsls	r3, r3, #23
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f005 fc3f 	bl	800842a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002bac:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <UART2_RX_transfer_complete_callback+0x31c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2140      	movs	r1, #64	@ 0x40
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f005 fc39 	bl	800842a <HAL_GPIO_WritePin>
 8002bb8:	f000 ff3c 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf4 <UART2_RX_transfer_complete_callback+0x318>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	701a      	strb	r2, [r3, #0]
 8002bc2:	f000 ff37 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002bc6:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <UART2_RX_transfer_complete_callback+0x304>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2bfa      	cmp	r3, #250	@ 0xfa
 8002bce:	d001      	beq.n	8002bd4 <UART2_RX_transfer_complete_callback+0x2f8>
 8002bd0:	f000 ff30 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <UART2_RX_transfer_complete_callback+0x314>)
 8002bd6:	220d      	movs	r2, #13
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	f000 ff2b 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
 8002bde:	46c0      	nop			@ (mov r8, r8)
 8002be0:	200004dc 	.word	0x200004dc
 8002be4:	20000c3c 	.word	0x20000c3c
 8002be8:	20000ce8 	.word	0x20000ce8
 8002bec:	20000444 	.word	0x20000444
 8002bf0:	20000430 	.word	0x20000430
 8002bf4:	20000c3a 	.word	0x20000c3a
 8002bf8:	50000800 	.word	0x50000800
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE){
 8002bfc:	4bdc      	ldr	r3, [pc, #880]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b0d      	cmp	r3, #13
 8002c04:	d160      	bne.n	8002cc8 <UART2_RX_transfer_complete_callback+0x3ec>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c06:	4bdb      	ldr	r3, [pc, #876]	@ (8002f74 <UART2_RX_transfer_complete_callback+0x698>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2bf8      	cmp	r3, #248	@ 0xf8
 8002c0e:	d001      	beq.n	8002c14 <UART2_RX_transfer_complete_callback+0x338>
 8002c10:	f000 ff10 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8002c14:	4bd8      	ldr	r3, [pc, #864]	@ (8002f78 <UART2_RX_transfer_complete_callback+0x69c>)
 8002c16:	0018      	movs	r0, r3
 8002c18:	f001 ff88 	bl	8004b2c <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002c1c:	2380      	movs	r3, #128	@ 0x80
 8002c1e:	0099      	lsls	r1, r3, #2
 8002c20:	23a0      	movs	r3, #160	@ 0xa0
 8002c22:	05db      	lsls	r3, r3, #23
 8002c24:	2201      	movs	r2, #1
 8002c26:	0018      	movs	r0, r3
 8002c28:	f005 fbff 	bl	800842a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002c2c:	4bd3      	ldr	r3, [pc, #844]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2140      	movs	r1, #64	@ 0x40
 8002c32:	0018      	movs	r0, r3
 8002c34:	f005 fbf9 	bl	800842a <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002c38:	2380      	movs	r3, #128	@ 0x80
 8002c3a:	0099      	lsls	r1, r3, #2
 8002c3c:	23a0      	movs	r3, #160	@ 0xa0
 8002c3e:	05db      	lsls	r3, r3, #23
 8002c40:	2200      	movs	r2, #0
 8002c42:	0018      	movs	r0, r3
 8002c44:	f005 fbf1 	bl	800842a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002c48:	4bcc      	ldr	r3, [pc, #816]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	2140      	movs	r1, #64	@ 0x40
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f005 fbeb 	bl	800842a <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002c54:	4bca      	ldr	r3, [pc, #808]	@ (8002f80 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 1;
 8002c5a:	4bca      	ldr	r3, [pc, #808]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	701a      	strb	r2, [r3, #0]

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002c60:	4bc3      	ldr	r3, [pc, #780]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002c62:	220d      	movs	r2, #13
 8002c64:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002c66:	4bc2      	ldr	r3, [pc, #776]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002c68:	2208      	movs	r2, #8
 8002c6a:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8002c6c:	4bc6      	ldr	r3, [pc, #792]	@ (8002f88 <UART2_RX_transfer_complete_callback+0x6ac>)
 8002c6e:	2100      	movs	r1, #0
 8002c70:	0018      	movs	r0, r3
 8002c72:	f003 fab0 	bl	80061d6 <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8002c76:	4bc5      	ldr	r3, [pc, #788]	@ (8002f8c <UART2_RX_transfer_complete_callback+0x6b0>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002c7c:	4ac4      	ldr	r2, [pc, #784]	@ (8002f90 <UART2_RX_transfer_complete_callback+0x6b4>)
 8002c7e:	4bbe      	ldr	r3, [pc, #760]	@ (8002f78 <UART2_RX_transfer_complete_callback+0x69c>)
 8002c80:	0011      	movs	r1, r2
 8002c82:	0018      	movs	r0, r3
 8002c84:	f001 fdd8 	bl	8004838 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8002c88:	4ac2      	ldr	r2, [pc, #776]	@ (8002f94 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002c8a:	4bbb      	ldr	r3, [pc, #748]	@ (8002f78 <UART2_RX_transfer_complete_callback+0x69c>)
 8002c8c:	0011      	movs	r1, r2
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f001 fdd2 	bl	8004838 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8002c94:	4bc0      	ldr	r3, [pc, #768]	@ (8002f98 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c96:	2108      	movs	r1, #8
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f003 fb17 	bl	80062cc <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002c9e:	4bbd      	ldr	r3, [pc, #756]	@ (8002f94 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f001 ff6e 	bl	8004b84 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002ca8:	4abc      	ldr	r2, [pc, #752]	@ (8002f9c <UART2_RX_transfer_complete_callback+0x6c0>)
 8002caa:	4bba      	ldr	r3, [pc, #744]	@ (8002f94 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002cac:	0011      	movs	r1, r2
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f002 f85e 	bl	8004d70 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002cb4:	4bba      	ldr	r3, [pc, #744]	@ (8002fa0 <UART2_RX_transfer_complete_callback+0x6c4>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	001a      	movs	r2, r3
 8002cba:	49ba      	ldr	r1, [pc, #744]	@ (8002fa4 <UART2_RX_transfer_complete_callback+0x6c8>)
 8002cbc:	4bba      	ldr	r3, [pc, #744]	@ (8002fa8 <UART2_RX_transfer_complete_callback+0x6cc>)
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f003 ffa8 	bl	8006c14 <HAL_ADC_Start_DMA>
 8002cc4:	f000 feb6 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == NO)){
 8002cc8:	4ba9      	ldr	r3, [pc, #676]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d146      	bne.n	8002d60 <UART2_RX_transfer_complete_callback+0x484>
 8002cd2:	4bb1      	ldr	r3, [pc, #708]	@ (8002f98 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002cd4:	2120      	movs	r1, #32
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f003 fae4 	bl	80062a4 <Get_Status_Bit>
 8002cdc:	1e03      	subs	r3, r0, #0
 8002cde:	d13f      	bne.n	8002d60 <UART2_RX_transfer_complete_callback+0x484>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002ce0:	4ba4      	ldr	r3, [pc, #656]	@ (8002f74 <UART2_RX_transfer_complete_callback+0x698>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2bf8      	cmp	r3, #248	@ 0xf8
 8002ce8:	d001      	beq.n	8002cee <UART2_RX_transfer_complete_callback+0x412>
 8002cea:	f000 fea3 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002cee:	4ba4      	ldr	r3, [pc, #656]	@ (8002f80 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002cf4:	4ba3      	ldr	r3, [pc, #652]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	4ba1      	ldr	r3, [pc, #644]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d00:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002d02:	4ba0      	ldr	r3, [pc, #640]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b0b      	cmp	r3, #11
 8002d0a:	d80f      	bhi.n	8002d2c <UART2_RX_transfer_complete_callback+0x450>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002d0c:	2380      	movs	r3, #128	@ 0x80
 8002d0e:	0099      	lsls	r1, r3, #2
 8002d10:	23a0      	movs	r3, #160	@ 0xa0
 8002d12:	05db      	lsls	r3, r3, #23
 8002d14:	2200      	movs	r2, #0
 8002d16:	0018      	movs	r0, r3
 8002d18:	f005 fb87 	bl	800842a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002d1c:	4b97      	ldr	r3, [pc, #604]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	2140      	movs	r1, #64	@ 0x40
 8002d22:	0018      	movs	r0, r3
 8002d24:	f005 fb81 	bl	800842a <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d28:	f000 fe84 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002d2c:	4b95      	ldr	r3, [pc, #596]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b18      	cmp	r3, #24
 8002d34:	d80f      	bhi.n	8002d56 <UART2_RX_transfer_complete_callback+0x47a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002d36:	2380      	movs	r3, #128	@ 0x80
 8002d38:	0099      	lsls	r1, r3, #2
 8002d3a:	23a0      	movs	r3, #160	@ 0xa0
 8002d3c:	05db      	lsls	r3, r3, #23
 8002d3e:	2201      	movs	r2, #1
 8002d40:	0018      	movs	r0, r3
 8002d42:	f005 fb72 	bl	800842a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002d46:	4b8d      	ldr	r3, [pc, #564]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2140      	movs	r1, #64	@ 0x40
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f005 fb6c 	bl	800842a <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d52:	f000 fe6f 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002d56:	4b8b      	ldr	r3, [pc, #556]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d5c:	f000 fe6a 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8002d60:	4b83      	ldr	r3, [pc, #524]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d14c      	bne.n	8002e04 <UART2_RX_transfer_complete_callback+0x528>
 8002d6a:	4b88      	ldr	r3, [pc, #544]	@ (8002f8c <UART2_RX_transfer_complete_callback+0x6b0>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d147      	bne.n	8002e04 <UART2_RX_transfer_complete_callback+0x528>
 8002d74:	4b88      	ldr	r3, [pc, #544]	@ (8002f98 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002d76:	2120      	movs	r1, #32
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f003 fa93 	bl	80062a4 <Get_Status_Bit>
 8002d7e:	0003      	movs	r3, r0
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d13f      	bne.n	8002e04 <UART2_RX_transfer_complete_callback+0x528>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d84:	4b7b      	ldr	r3, [pc, #492]	@ (8002f74 <UART2_RX_transfer_complete_callback+0x698>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2bf8      	cmp	r3, #248	@ 0xf8
 8002d8c:	d11e      	bne.n	8002dcc <UART2_RX_transfer_complete_callback+0x4f0>

					MIDI_CLK_tag = 0; //just in case
 8002d8e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002d94:	4b7b      	ldr	r3, [pc, #492]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4b79      	ldr	r3, [pc, #484]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002da0:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_fsm = COMPILING;
 8002da2:	4b77      	ldr	r3, [pc, #476]	@ (8002f80 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B0_MODE;
 8002da8:	4b71      	ldr	r3, [pc, #452]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002daa:	2210      	movs	r2, #16
 8002dac:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002dae:	4b70      	ldr	r3, [pc, #448]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002db0:	2208      	movs	r2, #8
 8002db2:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002db4:	4b78      	ldr	r3, [pc, #480]	@ (8002f98 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002db6:	2120      	movs	r1, #32
 8002db8:	0018      	movs	r0, r3
 8002dba:	f003 fa99 	bl	80062f0 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002dbe:	4b76      	ldr	r3, [pc, #472]	@ (8002f98 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002dc0:	2140      	movs	r1, #64	@ 0x40
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f003 fa94 	bl	80062f0 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002dc8:	f000 fe33 	bl	8003a32 <UART2_RX_transfer_complete_callback+0x1156>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002dcc:	4b69      	ldr	r3, [pc, #420]	@ (8002f74 <UART2_RX_transfer_complete_callback+0x698>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2bfa      	cmp	r3, #250	@ 0xfa
 8002dd4:	d001      	beq.n	8002dda <UART2_RX_transfer_complete_callback+0x4fe>
 8002dd6:	f000 fe2c 	bl	8003a32 <UART2_RX_transfer_complete_callback+0x1156>

					MIDI_CLK_tag = 0; //just in case
 8002dda:	4b6a      	ldr	r3, [pc, #424]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A0_MODE;
 8002de0:	4b63      	ldr	r3, [pc, #396]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002de2:	220e      	movs	r2, #14
 8002de4:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002de6:	4b62      	ldr	r3, [pc, #392]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002de8:	2208      	movs	r2, #8
 8002dea:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002dec:	4b6a      	ldr	r3, [pc, #424]	@ (8002f98 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002dee:	2120      	movs	r1, #32
 8002df0:	0018      	movs	r0, r3
 8002df2:	f003 fa7d 	bl	80062f0 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002df6:	4b68      	ldr	r3, [pc, #416]	@ (8002f98 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002df8:	2140      	movs	r1, #64	@ 0x40
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f003 fa78 	bl	80062f0 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002e00:	f000 fe17 	bl	8003a32 <UART2_RX_transfer_complete_callback+0x1156>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A0_MODE){
 8002e04:	4b5a      	ldr	r3, [pc, #360]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b0e      	cmp	r3, #14
 8002e0c:	d123      	bne.n	8002e56 <UART2_RX_transfer_complete_callback+0x57a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002e0e:	4b59      	ldr	r3, [pc, #356]	@ (8002f74 <UART2_RX_transfer_complete_callback+0x698>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2bf8      	cmp	r3, #248	@ 0xf8
 8002e16:	d001      	beq.n	8002e1c <UART2_RX_transfer_complete_callback+0x540>
 8002e18:	f000 fe0c 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002e1c:	2380      	movs	r3, #128	@ 0x80
 8002e1e:	0099      	lsls	r1, r3, #2
 8002e20:	23a0      	movs	r3, #160	@ 0xa0
 8002e22:	05db      	lsls	r3, r3, #23
 8002e24:	2200      	movs	r2, #0
 8002e26:	0018      	movs	r0, r3
 8002e28:	f005 faff 	bl	800842a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002e2c:	4b53      	ldr	r3, [pc, #332]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	2140      	movs	r1, #64	@ 0x40
 8002e32:	0018      	movs	r0, r3
 8002e34:	f005 faf9 	bl	800842a <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002e38:	4b51      	ldr	r3, [pc, #324]	@ (8002f80 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002e3e:	4b51      	ldr	r3, [pc, #324]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	3301      	adds	r3, #1
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	4b4e      	ldr	r3, [pc, #312]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e4a:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002e4c:	4b48      	ldr	r3, [pc, #288]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002e4e:	220f      	movs	r2, #15
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	f000 fdef 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A1_MODE){
 8002e56:	4b46      	ldr	r3, [pc, #280]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b0f      	cmp	r3, #15
 8002e5e:	d142      	bne.n	8002ee6 <UART2_RX_transfer_complete_callback+0x60a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002e60:	4b44      	ldr	r3, [pc, #272]	@ (8002f74 <UART2_RX_transfer_complete_callback+0x698>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2bf8      	cmp	r3, #248	@ 0xf8
 8002e68:	d001      	beq.n	8002e6e <UART2_RX_transfer_complete_callback+0x592>
 8002e6a:	f000 fde3 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_tag++;
 8002e6e:	4b45      	ldr	r3, [pc, #276]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	3301      	adds	r3, #1
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	4b42      	ldr	r3, [pc, #264]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e7a:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002e7c:	4b41      	ldr	r3, [pc, #260]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b0b      	cmp	r3, #11
 8002e84:	d80f      	bhi.n	8002ea6 <UART2_RX_transfer_complete_callback+0x5ca>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002e86:	2380      	movs	r3, #128	@ 0x80
 8002e88:	0099      	lsls	r1, r3, #2
 8002e8a:	23a0      	movs	r3, #160	@ 0xa0
 8002e8c:	05db      	lsls	r3, r3, #23
 8002e8e:	2200      	movs	r2, #0
 8002e90:	0018      	movs	r0, r3
 8002e92:	f005 faca 	bl	800842a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002e96:	4b39      	ldr	r3, [pc, #228]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	2140      	movs	r1, #64	@ 0x40
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f005 fac4 	bl	800842a <HAL_GPIO_WritePin>
 8002ea2:	f000 fdc7 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002ea6:	4b37      	ldr	r3, [pc, #220]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b18      	cmp	r3, #24
 8002eae:	d80f      	bhi.n	8002ed0 <UART2_RX_transfer_complete_callback+0x5f4>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002eb0:	2380      	movs	r3, #128	@ 0x80
 8002eb2:	0099      	lsls	r1, r3, #2
 8002eb4:	23a0      	movs	r3, #160	@ 0xa0
 8002eb6:	05db      	lsls	r3, r3, #23
 8002eb8:	2201      	movs	r2, #1
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f005 fab5 	bl	800842a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2140      	movs	r1, #64	@ 0x40
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f005 faaf 	bl	800842a <HAL_GPIO_WritePin>
 8002ecc:	f000 fdb2 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002ed0:	4b27      	ldr	r3, [pc, #156]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002ed2:	220f      	movs	r2, #15
 8002ed4:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002ed6:	4b26      	ldr	r3, [pc, #152]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002ed8:	2208      	movs	r2, #8
 8002eda:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8002edc:	4b29      	ldr	r3, [pc, #164]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	f000 fda7 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE){
 8002ee6:	4b22      	ldr	r3, [pc, #136]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b10      	cmp	r3, #16
 8002eee:	d15d      	bne.n	8002fac <UART2_RX_transfer_complete_callback+0x6d0>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002ef0:	4b20      	ldr	r3, [pc, #128]	@ (8002f74 <UART2_RX_transfer_complete_callback+0x698>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2bf8      	cmp	r3, #248	@ 0xf8
 8002ef8:	d001      	beq.n	8002efe <UART2_RX_transfer_complete_callback+0x622>
 8002efa:	f000 fd9b 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					//when sftwre timer times out the midi clk tag is reset to 0
					MIDI_CLK_tag++;
 8002efe:	4b21      	ldr	r3, [pc, #132]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	3301      	adds	r3, #1
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	4b1e      	ldr	r3, [pc, #120]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002f0a:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b0b      	cmp	r3, #11
 8002f14:	d80f      	bhi.n	8002f36 <UART2_RX_transfer_complete_callback+0x65a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002f16:	2380      	movs	r3, #128	@ 0x80
 8002f18:	0099      	lsls	r1, r3, #2
 8002f1a:	23a0      	movs	r3, #160	@ 0xa0
 8002f1c:	05db      	lsls	r3, r3, #23
 8002f1e:	2200      	movs	r2, #0
 8002f20:	0018      	movs	r0, r3
 8002f22:	f005 fa82 	bl	800842a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002f26:	4b15      	ldr	r3, [pc, #84]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	2140      	movs	r1, #64	@ 0x40
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f005 fa7c 	bl	800842a <HAL_GPIO_WritePin>
 8002f32:	f000 fd7f 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002f36:	4b13      	ldr	r3, [pc, #76]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b18      	cmp	r3, #24
 8002f3e:	d80f      	bhi.n	8002f60 <UART2_RX_transfer_complete_callback+0x684>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002f40:	2380      	movs	r3, #128	@ 0x80
 8002f42:	0099      	lsls	r1, r3, #2
 8002f44:	23a0      	movs	r3, #160	@ 0xa0
 8002f46:	05db      	lsls	r3, r3, #23
 8002f48:	2201      	movs	r2, #1
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f005 fa6d 	bl	800842a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002f50:	4b0a      	ldr	r3, [pc, #40]	@ (8002f7c <UART2_RX_transfer_complete_callback+0x6a0>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	2140      	movs	r1, #64	@ 0x40
 8002f56:	0018      	movs	r0, r3
 8002f58:	f005 fa67 	bl	800842a <HAL_GPIO_WritePin>
 8002f5c:	f000 fd6a 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B1_MODE;
 8002f60:	4b03      	ldr	r3, [pc, #12]	@ (8002f70 <UART2_RX_transfer_complete_callback+0x694>)
 8002f62:	2211      	movs	r2, #17
 8002f64:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						MIDI_CLK_tag = 1;
 8002f66:	4b07      	ldr	r3, [pc, #28]	@ (8002f84 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
 8002f6c:	f000 fd62 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
 8002f70:	20000430 	.word	0x20000430
 8002f74:	200004dc 	.word	0x200004dc
 8002f78:	20000ca0 	.word	0x20000ca0
 8002f7c:	50000800 	.word	0x50000800
 8002f80:	20000ce8 	.word	0x20000ce8
 8002f84:	20000c3a 	.word	0x20000c3a
 8002f88:	200008d0 	.word	0x200008d0
 8002f8c:	20000444 	.word	0x20000444
 8002f90:	20000cc4 	.word	0x20000cc4
 8002f94:	20000c58 	.word	0x20000c58
 8002f98:	20000c3c 	.word	0x20000c3c
 8002f9c:	20000028 	.word	0x20000028
 8002fa0:	0800dfb8 	.word	0x0800dfb8
 8002fa4:	20000c4c 	.word	0x20000c4c
 8002fa8:	200004fc 	.word	0x200004fc
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE){
 8002fac:	4bed      	ldr	r3, [pc, #948]	@ (8003364 <UART2_RX_transfer_complete_callback+0xa88>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b11      	cmp	r3, #17
 8002fb4:	d146      	bne.n	8003044 <UART2_RX_transfer_complete_callback+0x768>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002fb6:	4bec      	ldr	r3, [pc, #944]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2bf8      	cmp	r3, #248	@ 0xf8
 8002fbe:	d135      	bne.n	800302c <UART2_RX_transfer_complete_callback+0x750>

					MIDI_CLK_tag++;
 8002fc0:	4bea      	ldr	r3, [pc, #936]	@ (800336c <UART2_RX_transfer_complete_callback+0xa90>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	4be8      	ldr	r3, [pc, #928]	@ (800336c <UART2_RX_transfer_complete_callback+0xa90>)
 8002fcc:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002fce:	4be7      	ldr	r3, [pc, #924]	@ (800336c <UART2_RX_transfer_complete_callback+0xa90>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b0b      	cmp	r3, #11
 8002fd6:	d80f      	bhi.n	8002ff8 <UART2_RX_transfer_complete_callback+0x71c>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002fd8:	2380      	movs	r3, #128	@ 0x80
 8002fda:	0099      	lsls	r1, r3, #2
 8002fdc:	23a0      	movs	r3, #160	@ 0xa0
 8002fde:	05db      	lsls	r3, r3, #23
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f005 fa21 	bl	800842a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002fe8:	4be1      	ldr	r3, [pc, #900]	@ (8003370 <UART2_RX_transfer_complete_callback+0xa94>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	2140      	movs	r1, #64	@ 0x40
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f005 fa1b 	bl	800842a <HAL_GPIO_WritePin>
 8002ff4:	f000 fd1e 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002ff8:	4bdc      	ldr	r3, [pc, #880]	@ (800336c <UART2_RX_transfer_complete_callback+0xa90>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b18      	cmp	r3, #24
 8003000:	d80f      	bhi.n	8003022 <UART2_RX_transfer_complete_callback+0x746>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003002:	2380      	movs	r3, #128	@ 0x80
 8003004:	0099      	lsls	r1, r3, #2
 8003006:	23a0      	movs	r3, #160	@ 0xa0
 8003008:	05db      	lsls	r3, r3, #23
 800300a:	2201      	movs	r2, #1
 800300c:	0018      	movs	r0, r3
 800300e:	f005 fa0c 	bl	800842a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003012:	4bd7      	ldr	r3, [pc, #860]	@ (8003370 <UART2_RX_transfer_complete_callback+0xa94>)
 8003014:	2200      	movs	r2, #0
 8003016:	2140      	movs	r1, #64	@ 0x40
 8003018:	0018      	movs	r0, r3
 800301a:	f005 fa06 	bl	800842a <HAL_GPIO_WritePin>
 800301e:	f000 fd09 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8003022:	4bd2      	ldr	r3, [pc, #840]	@ (800336c <UART2_RX_transfer_complete_callback+0xa90>)
 8003024:	2201      	movs	r2, #1
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	f000 fd04 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 800302c:	4bce      	ldr	r3, [pc, #824]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2bfa      	cmp	r3, #250	@ 0xfa
 8003034:	d001      	beq.n	800303a <UART2_RX_transfer_complete_callback+0x75e>
 8003036:	f000 fcfd 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 800303a:	4bca      	ldr	r3, [pc, #808]	@ (8003364 <UART2_RX_transfer_complete_callback+0xa88>)
 800303c:	2212      	movs	r2, #18
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	f000 fcf8 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE){
 8003044:	4bc7      	ldr	r3, [pc, #796]	@ (8003364 <UART2_RX_transfer_complete_callback+0xa88>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b12      	cmp	r3, #18
 800304c:	d001      	beq.n	8003052 <UART2_RX_transfer_complete_callback+0x776>
 800304e:	f000 fcf1 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003052:	4bc5      	ldr	r3, [pc, #788]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2bf8      	cmp	r3, #248	@ 0xf8
 800305a:	d001      	beq.n	8003060 <UART2_RX_transfer_complete_callback+0x784>
 800305c:	f000 fcea 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8003060:	4bc4      	ldr	r3, [pc, #784]	@ (8003374 <UART2_RX_transfer_complete_callback+0xa98>)
 8003062:	0018      	movs	r0, r3
 8003064:	f001 fd62 	bl	8004b2c <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003068:	2380      	movs	r3, #128	@ 0x80
 800306a:	0099      	lsls	r1, r3, #2
 800306c:	23a0      	movs	r3, #160	@ 0xa0
 800306e:	05db      	lsls	r3, r3, #23
 8003070:	2201      	movs	r2, #1
 8003072:	0018      	movs	r0, r3
 8003074:	f005 f9d9 	bl	800842a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003078:	4bbd      	ldr	r3, [pc, #756]	@ (8003370 <UART2_RX_transfer_complete_callback+0xa94>)
 800307a:	2200      	movs	r2, #0
 800307c:	2140      	movs	r1, #64	@ 0x40
 800307e:	0018      	movs	r0, r3
 8003080:	f005 f9d3 	bl	800842a <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003084:	2380      	movs	r3, #128	@ 0x80
 8003086:	0099      	lsls	r1, r3, #2
 8003088:	23a0      	movs	r3, #160	@ 0xa0
 800308a:	05db      	lsls	r3, r3, #23
 800308c:	2200      	movs	r2, #0
 800308e:	0018      	movs	r0, r3
 8003090:	f005 f9cb 	bl	800842a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003094:	4bb6      	ldr	r3, [pc, #728]	@ (8003370 <UART2_RX_transfer_complete_callback+0xa94>)
 8003096:	2201      	movs	r2, #1
 8003098:	2140      	movs	r1, #64	@ 0x40
 800309a:	0018      	movs	r0, r3
 800309c:	f005 f9c5 	bl	800842a <HAL_GPIO_WritePin>

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 80030a0:	4bb0      	ldr	r3, [pc, #704]	@ (8003364 <UART2_RX_transfer_complete_callback+0xa88>)
 80030a2:	2212      	movs	r2, #18
 80030a4:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 80030a6:	4baf      	ldr	r3, [pc, #700]	@ (8003364 <UART2_RX_transfer_complete_callback+0xa88>)
 80030a8:	2208      	movs	r2, #8
 80030aa:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 1;
 80030ac:	4baf      	ldr	r3, [pc, #700]	@ (800336c <UART2_RX_transfer_complete_callback+0xa90>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 80030b2:	4bb1      	ldr	r3, [pc, #708]	@ (8003378 <UART2_RX_transfer_complete_callback+0xa9c>)
 80030b4:	2100      	movs	r1, #0
 80030b6:	0018      	movs	r0, r3
 80030b8:	f003 f88d 	bl	80061d6 <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 80030bc:	4baf      	ldr	r3, [pc, #700]	@ (800337c <UART2_RX_transfer_complete_callback+0xaa0>)
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 80030c2:	4aaf      	ldr	r2, [pc, #700]	@ (8003380 <UART2_RX_transfer_complete_callback+0xaa4>)
 80030c4:	4bab      	ldr	r3, [pc, #684]	@ (8003374 <UART2_RX_transfer_complete_callback+0xa98>)
 80030c6:	0011      	movs	r1, r2
 80030c8:	0018      	movs	r0, r3
 80030ca:	f001 fbb5 	bl	8004838 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 80030ce:	4aad      	ldr	r2, [pc, #692]	@ (8003384 <UART2_RX_transfer_complete_callback+0xaa8>)
 80030d0:	4ba8      	ldr	r3, [pc, #672]	@ (8003374 <UART2_RX_transfer_complete_callback+0xa98>)
 80030d2:	0011      	movs	r1, r2
 80030d4:	0018      	movs	r0, r3
 80030d6:	f001 fbaf 	bl	8004838 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 80030da:	4bab      	ldr	r3, [pc, #684]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 80030dc:	2108      	movs	r1, #8
 80030de:	0018      	movs	r0, r3
 80030e0:	f003 f8f4 	bl	80062cc <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 80030e4:	4ba7      	ldr	r3, [pc, #668]	@ (8003384 <UART2_RX_transfer_complete_callback+0xaa8>)
 80030e6:	2100      	movs	r1, #0
 80030e8:	0018      	movs	r0, r3
 80030ea:	f001 fd4b 	bl	8004b84 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80030ee:	4aa7      	ldr	r2, [pc, #668]	@ (800338c <UART2_RX_transfer_complete_callback+0xab0>)
 80030f0:	4ba4      	ldr	r3, [pc, #656]	@ (8003384 <UART2_RX_transfer_complete_callback+0xaa8>)
 80030f2:	0011      	movs	r1, r2
 80030f4:	0018      	movs	r0, r3
 80030f6:	f001 fe3b 	bl	8004d70 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 80030fa:	4ba5      	ldr	r3, [pc, #660]	@ (8003390 <UART2_RX_transfer_complete_callback+0xab4>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	001a      	movs	r2, r3
 8003100:	49a4      	ldr	r1, [pc, #656]	@ (8003394 <UART2_RX_transfer_complete_callback+0xab8>)
 8003102:	4ba5      	ldr	r3, [pc, #660]	@ (8003398 <UART2_RX_transfer_complete_callback+0xabc>)
 8003104:	0018      	movs	r0, r3
 8003106:	f003 fd85 	bl	8006c14 <HAL_ADC_Start_DMA>
 800310a:	f000 fc93 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
		}
	}
	//not a realtime status byte
	else{

		if(active_status_byte == 0){
 800310e:	4ba3      	ldr	r3, [pc, #652]	@ (800339c <UART2_RX_transfer_complete_callback+0xac0>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d000      	beq.n	800311a <UART2_RX_transfer_complete_callback+0x83e>
 8003118:	e29e      	b.n	8003658 <UART2_RX_transfer_complete_callback+0xd7c>

			if(running_status_byte == 0){
 800311a:	4ba1      	ldr	r3, [pc, #644]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d000      	beq.n	8003126 <UART2_RX_transfer_complete_callback+0x84a>
 8003124:	e0a3      	b.n	800326e <UART2_RX_transfer_complete_callback+0x992>

				if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003126:	4b9f      	ldr	r3, [pc, #636]	@ (80033a4 <UART2_RX_transfer_complete_callback+0xac8>)
 8003128:	0018      	movs	r0, r3
 800312a:	f7fe f812 	bl	8001152 <Is_Data_Buffer_Empty>
 800312e:	0003      	movs	r3, r0
 8003130:	2b01      	cmp	r3, #1
 8003132:	d001      	beq.n	8003138 <UART2_RX_transfer_complete_callback+0x85c>
 8003134:	f000 fc7e 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					if(Is_Status_Byte(rx_buffer) == YES){
 8003138:	4b8b      	ldr	r3, [pc, #556]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800313a:	0018      	movs	r0, r3
 800313c:	f7fd fec8 	bl	8000ed0 <Is_Status_Byte>
 8003140:	0003      	movs	r3, r0
 8003142:	2b01      	cmp	r3, #1
 8003144:	d001      	beq.n	800314a <UART2_RX_transfer_complete_callback+0x86e>
 8003146:	f000 fc75 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_PC_Status_Byte(rx_buffer) == YES){
 800314a:	4b87      	ldr	r3, [pc, #540]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800314c:	0018      	movs	r0, r3
 800314e:	f7fd fef1 	bl	8000f34 <Is_PC_Status_Byte>
 8003152:	0003      	movs	r3, r0
 8003154:	2b01      	cmp	r3, #1
 8003156:	d134      	bne.n	80031c2 <UART2_RX_transfer_complete_callback+0x8e6>

							running_status_byte = (uint8_t)*rx_buffer;
 8003158:	4b83      	ldr	r3, [pc, #524]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	4b90      	ldr	r3, [pc, #576]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 8003160:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003162:	4b91      	ldr	r3, [pc, #580]	@ (80033a8 <UART2_RX_transfer_complete_callback+0xacc>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	b2da      	uxtb	r2, r3
 8003168:	4b7f      	ldr	r3, [pc, #508]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800316a:	0011      	movs	r1, r2
 800316c:	0018      	movs	r0, r3
 800316e:	f7fd ffcf 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003172:	0003      	movs	r3, r0
 8003174:	2b01      	cmp	r3, #1
 8003176:	d10d      	bne.n	8003194 <UART2_RX_transfer_complete_callback+0x8b8>

								active_status_byte = (uint8_t)*rx_buffer;
 8003178:	4b7b      	ldr	r3, [pc, #492]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	b2da      	uxtb	r2, r3
 800317e:	4b87      	ldr	r3, [pc, #540]	@ (800339c <UART2_RX_transfer_complete_callback+0xac0>)
 8003180:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003182:	2380      	movs	r3, #128	@ 0x80
 8003184:	005a      	lsls	r2, r3, #1
 8003186:	4b80      	ldr	r3, [pc, #512]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 8003188:	0011      	movs	r1, r2
 800318a:	0018      	movs	r0, r3
 800318c:	f003 f89e 	bl	80062cc <Set_Status_Bit>
 8003190:	f000 fc50 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 8003194:	4b7c      	ldr	r3, [pc, #496]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 8003196:	0018      	movs	r0, r3
 8003198:	f7fe f871 	bl	800127e <Is_OMNI_On>
 800319c:	0003      	movs	r3, r0
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d001      	beq.n	80031a6 <UART2_RX_transfer_complete_callback+0x8ca>
 80031a2:	f000 fc47 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 80031a6:	4b70      	ldr	r3, [pc, #448]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	4b7b      	ldr	r3, [pc, #492]	@ (800339c <UART2_RX_transfer_complete_callback+0xac0>)
 80031ae:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80031b0:	2380      	movs	r3, #128	@ 0x80
 80031b2:	005a      	lsls	r2, r3, #1
 80031b4:	4b74      	ldr	r3, [pc, #464]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 80031b6:	0011      	movs	r1, r2
 80031b8:	0018      	movs	r0, r3
 80031ba:	f003 f887 	bl	80062cc <Set_Status_Bit>
 80031be:	f000 fc39 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80031c2:	4b69      	ldr	r3, [pc, #420]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031c4:	0018      	movs	r0, r3
 80031c6:	f7fd fed1 	bl	8000f6c <Is_CC_Status_Byte>
 80031ca:	0003      	movs	r3, r0
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d134      	bne.n	800323a <UART2_RX_transfer_complete_callback+0x95e>

							running_status_byte = (uint8_t)*rx_buffer;
 80031d0:	4b65      	ldr	r3, [pc, #404]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4b72      	ldr	r3, [pc, #456]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 80031d8:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80031da:	4b73      	ldr	r3, [pc, #460]	@ (80033a8 <UART2_RX_transfer_complete_callback+0xacc>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	4b61      	ldr	r3, [pc, #388]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031e2:	0011      	movs	r1, r2
 80031e4:	0018      	movs	r0, r3
 80031e6:	f7fd ff93 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80031ea:	0003      	movs	r3, r0
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d10d      	bne.n	800320c <UART2_RX_transfer_complete_callback+0x930>

								active_status_byte = (uint8_t)*rx_buffer;
 80031f0:	4b5d      	ldr	r3, [pc, #372]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	4b69      	ldr	r3, [pc, #420]	@ (800339c <UART2_RX_transfer_complete_callback+0xac0>)
 80031f8:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80031fa:	2380      	movs	r3, #128	@ 0x80
 80031fc:	005a      	lsls	r2, r3, #1
 80031fe:	4b62      	ldr	r3, [pc, #392]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 8003200:	0011      	movs	r1, r2
 8003202:	0018      	movs	r0, r3
 8003204:	f003 f862 	bl	80062cc <Set_Status_Bit>
 8003208:	f000 fc14 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 800320c:	4b5e      	ldr	r3, [pc, #376]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 800320e:	0018      	movs	r0, r3
 8003210:	f7fe f835 	bl	800127e <Is_OMNI_On>
 8003214:	0003      	movs	r3, r0
 8003216:	2b01      	cmp	r3, #1
 8003218:	d001      	beq.n	800321e <UART2_RX_transfer_complete_callback+0x942>
 800321a:	f000 fc0b 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 800321e:	4b52      	ldr	r3, [pc, #328]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	b2da      	uxtb	r2, r3
 8003224:	4b5d      	ldr	r3, [pc, #372]	@ (800339c <UART2_RX_transfer_complete_callback+0xac0>)
 8003226:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003228:	2380      	movs	r3, #128	@ 0x80
 800322a:	005a      	lsls	r2, r3, #1
 800322c:	4b56      	ldr	r3, [pc, #344]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 800322e:	0011      	movs	r1, r2
 8003230:	0018      	movs	r0, r3
 8003232:	f003 f84b 	bl	80062cc <Set_Status_Bit>
 8003236:	f000 fbfd 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 800323a:	4b4b      	ldr	r3, [pc, #300]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800323c:	0018      	movs	r0, r3
 800323e:	f7fd ff57 	bl	80010f0 <Is_Sysex_Start_Status_Byte>
 8003242:	0003      	movs	r3, r0
 8003244:	2b01      	cmp	r3, #1
 8003246:	d001      	beq.n	800324c <UART2_RX_transfer_complete_callback+0x970>
 8003248:	f000 fbf4 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							active_status_byte = (uint8_t)*rx_buffer;
 800324c:	4b46      	ldr	r3, [pc, #280]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	b2da      	uxtb	r2, r3
 8003252:	4b52      	ldr	r3, [pc, #328]	@ (800339c <UART2_RX_transfer_complete_callback+0xac0>)
 8003254:	701a      	strb	r2, [r3, #0]
							running_status_byte = 0;
 8003256:	4b52      	ldr	r3, [pc, #328]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800325c:	2380      	movs	r3, #128	@ 0x80
 800325e:	005a      	lsls	r2, r3, #1
 8003260:	4b49      	ldr	r3, [pc, #292]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 8003262:	0011      	movs	r1, r2
 8003264:	0018      	movs	r0, r3
 8003266:	f003 f831 	bl	80062cc <Set_Status_Bit>
 800326a:	f000 fbe3 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						}
					}
				}
			}
			else if(running_status_byte != 0){
 800326e:	4b4c      	ldr	r3, [pc, #304]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <UART2_RX_transfer_complete_callback+0x9a0>
 8003278:	f000 fbdc 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

				if(Is_Data_Byte(rx_buffer) == YES){
 800327c:	4b3a      	ldr	r3, [pc, #232]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 800327e:	0018      	movs	r0, r3
 8003280:	f7fd fe3f 	bl	8000f02 <Is_Data_Byte>
 8003284:	0003      	movs	r3, r0
 8003286:	2b01      	cmp	r3, #1
 8003288:	d000      	beq.n	800328c <UART2_RX_transfer_complete_callback+0x9b0>
 800328a:	e151      	b.n	8003530 <UART2_RX_transfer_complete_callback+0xc54>

					Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800328c:	2380      	movs	r3, #128	@ 0x80
 800328e:	005a      	lsls	r2, r3, #1
 8003290:	4b3d      	ldr	r3, [pc, #244]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 8003292:	0011      	movs	r1, r2
 8003294:	0018      	movs	r0, r3
 8003296:	f003 f819 	bl	80062cc <Set_Status_Bit>

					if(Is_PC_Status_Byte(&running_status_byte) == YES){
 800329a:	4b41      	ldr	r3, [pc, #260]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 800329c:	0018      	movs	r0, r3
 800329e:	f7fd fe49 	bl	8000f34 <Is_PC_Status_Byte>
 80032a2:	0003      	movs	r3, r0
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d143      	bne.n	8003330 <UART2_RX_transfer_complete_callback+0xa54>

						if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 80032a8:	4b3f      	ldr	r3, [pc, #252]	@ (80033a8 <UART2_RX_transfer_complete_callback+0xacc>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	4b3c      	ldr	r3, [pc, #240]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 80032b0:	0011      	movs	r1, r2
 80032b2:	0018      	movs	r0, r3
 80032b4:	f7fd ff2c 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80032b8:	0003      	movs	r3, r0
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d008      	beq.n	80032d0 <UART2_RX_transfer_complete_callback+0x9f4>
																|| (Is_OMNI_On(&statuses) == YES)){
 80032be:	4b32      	ldr	r3, [pc, #200]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 80032c0:	0018      	movs	r0, r3
 80032c2:	f7fd ffdc 	bl	800127e <Is_OMNI_On>
 80032c6:	0003      	movs	r3, r0
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d001      	beq.n	80032d0 <UART2_RX_transfer_complete_callback+0x9f4>
 80032cc:	f000 fbb2 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80032d0:	4b34      	ldr	r3, [pc, #208]	@ (80033a4 <UART2_RX_transfer_complete_callback+0xac8>)
 80032d2:	0018      	movs	r0, r3
 80032d4:	f7fd ff3d 	bl	8001152 <Is_Data_Buffer_Empty>
 80032d8:	0003      	movs	r3, r0
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d001      	beq.n	80032e2 <UART2_RX_transfer_complete_callback+0xa06>
 80032de:	f000 fba9 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

								//first data byte received
								if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 80032e2:	4b21      	ldr	r3, [pc, #132]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 80032e4:	2104      	movs	r1, #4
 80032e6:	0018      	movs	r0, r3
 80032e8:	f7fd ff81 	bl	80011ee <Is_Program_Change_Data_Byte_In_Range>
 80032ec:	0003      	movs	r3, r0
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d10f      	bne.n	8003312 <UART2_RX_transfer_complete_callback+0xa36>

									Set_All_Pots_to_PC_Mode();
 80032f2:	f7fd fd39 	bl	8000d68 <Set_All_Pots_to_PC_Mode>
									preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 80032f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	3301      	adds	r3, #1
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	4b2a      	ldr	r3, [pc, #168]	@ (80033ac <UART2_RX_transfer_complete_callback+0xad0>)
 8003302:	701a      	strb	r2, [r3, #0]
									Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 8003304:	f7fd f90c 	bl	8000520 <Update_Params_Based_On_Mode_Selected>
									Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003308:	4b1f      	ldr	r3, [pc, #124]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 800330a:	2108      	movs	r1, #8
 800330c:	0018      	movs	r0, r3
 800330e:	f002 ffef 	bl	80062f0 <Clear_Status_Bit>
								}

								//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
								Clear_Data_Buffer(&MIDI_data);
 8003312:	4b24      	ldr	r3, [pc, #144]	@ (80033a4 <UART2_RX_transfer_complete_callback+0xac8>)
 8003314:	0018      	movs	r0, r3
 8003316:	f7fd ff4c 	bl	80011b2 <Clear_Data_Buffer>
								active_status_byte = 0;
 800331a:	4b20      	ldr	r3, [pc, #128]	@ (800339c <UART2_RX_transfer_complete_callback+0xac0>)
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]

								//not really required
								Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003320:	4a19      	ldr	r2, [pc, #100]	@ (8003388 <UART2_RX_transfer_complete_callback+0xaac>)
 8003322:	4b23      	ldr	r3, [pc, #140]	@ (80033b0 <UART2_RX_transfer_complete_callback+0xad4>)
 8003324:	0011      	movs	r1, r2
 8003326:	0018      	movs	r0, r3
 8003328:	f7fd ffc3 	bl	80012b2 <Reset_and_Stop_MIDI_Software_Timer>
 800332c:	f000 fb82 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(&running_status_byte) == YES){
 8003330:	4b1b      	ldr	r3, [pc, #108]	@ (80033a0 <UART2_RX_transfer_complete_callback+0xac4>)
 8003332:	0018      	movs	r0, r3
 8003334:	f7fd fe1a 	bl	8000f6c <Is_CC_Status_Byte>
 8003338:	0003      	movs	r3, r0
 800333a:	2b01      	cmp	r3, #1
 800333c:	d001      	beq.n	8003342 <UART2_RX_transfer_complete_callback+0xa66>
 800333e:	f000 fb79 	bl	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003342:	4b18      	ldr	r3, [pc, #96]	@ (80033a4 <UART2_RX_transfer_complete_callback+0xac8>)
 8003344:	0018      	movs	r0, r3
 8003346:	f7fd ff04 	bl	8001152 <Is_Data_Buffer_Empty>
 800334a:	0003      	movs	r3, r0
 800334c:	2b01      	cmp	r3, #1
 800334e:	d131      	bne.n	80033b4 <UART2_RX_transfer_complete_callback+0xad8>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8003350:	4b05      	ldr	r3, [pc, #20]	@ (8003368 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	4b13      	ldr	r3, [pc, #76]	@ (80033a4 <UART2_RX_transfer_complete_callback+0xac8>)
 8003358:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 800335a:	4b15      	ldr	r3, [pc, #84]	@ (80033b0 <UART2_RX_transfer_complete_callback+0xad4>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	e368      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
 8003362:	46c0      	nop			@ (mov r8, r8)
 8003364:	20000430 	.word	0x20000430
 8003368:	200004dc 	.word	0x200004dc
 800336c:	20000c3a 	.word	0x20000c3a
 8003370:	50000800 	.word	0x50000800
 8003374:	20000ca0 	.word	0x20000ca0
 8003378:	200008d0 	.word	0x200008d0
 800337c:	20000444 	.word	0x20000444
 8003380:	20000cc4 	.word	0x20000cc4
 8003384:	20000c58 	.word	0x20000c58
 8003388:	20000c3c 	.word	0x20000c3c
 800338c:	20000028 	.word	0x20000028
 8003390:	0800dfb8 	.word	0x0800dfb8
 8003394:	20000c4c 	.word	0x20000c4c
 8003398:	200004fc 	.word	0x200004fc
 800339c:	200004cb 	.word	0x200004cb
 80033a0:	200004cc 	.word	0x200004cc
 80033a4:	200004d0 	.word	0x200004d0
 80033a8:	200004ca 	.word	0x200004ca
 80033ac:	200004bc 	.word	0x200004bc
 80033b0:	20000c44 	.word	0x20000c44

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 80033b4:	4bd6      	ldr	r3, [pc, #856]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4bd6      	ldr	r3, [pc, #856]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80033bc:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80033be:	4ad6      	ldr	r2, [pc, #856]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 80033c0:	4bd6      	ldr	r3, [pc, #856]	@ (800371c <UART2_RX_transfer_complete_callback+0xe40>)
 80033c2:	0011      	movs	r1, r2
 80033c4:	0018      	movs	r0, r3
 80033c6:	f7fd ff74 	bl	80012b2 <Reset_and_Stop_MIDI_Software_Timer>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80033ca:	4bd2      	ldr	r3, [pc, #840]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7fd fde9 	bl	8000fa4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 80033d2:	0003      	movs	r3, r0
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d14c      	bne.n	8003472 <UART2_RX_transfer_complete_callback+0xb96>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES){
 80033d8:	4bd1      	ldr	r3, [pc, #836]	@ (8003720 <UART2_RX_transfer_complete_callback+0xe44>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4bd1      	ldr	r3, [pc, #836]	@ (8003724 <UART2_RX_transfer_complete_callback+0xe48>)
 80033e0:	0011      	movs	r1, r2
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7fd fe94 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80033e8:	0003      	movs	r3, r0
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d139      	bne.n	8003462 <UART2_RX_transfer_complete_callback+0xb86>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 80033ee:	4ace      	ldr	r2, [pc, #824]	@ (8003728 <UART2_RX_transfer_complete_callback+0xe4c>)
 80033f0:	4bc8      	ldr	r3, [pc, #800]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80033f2:	0011      	movs	r1, r2
 80033f4:	0018      	movs	r0, r3
 80033f6:	f7fd fe34 	bl	8001062 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 80033fa:	0003      	movs	r3, r0
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d130      	bne.n	8003462 <UART2_RX_transfer_complete_callback+0xb86>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 8003400:	4bc4      	ldr	r3, [pc, #784]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003402:	785b      	ldrb	r3, [r3, #1]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b79      	cmp	r3, #121	@ 0x79
 8003408:	d10b      	bne.n	8003422 <UART2_RX_transfer_complete_callback+0xb46>

											Reset_All_Controllers(&params, &delay_line);
 800340a:	4ac8      	ldr	r2, [pc, #800]	@ (800372c <UART2_RX_transfer_complete_callback+0xe50>)
 800340c:	4bc8      	ldr	r3, [pc, #800]	@ (8003730 <UART2_RX_transfer_complete_callback+0xe54>)
 800340e:	0011      	movs	r1, r2
 8003410:	0018      	movs	r0, r3
 8003412:	f7fd ff69 	bl	80012e8 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003416:	4bc0      	ldr	r3, [pc, #768]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003418:	2108      	movs	r1, #8
 800341a:	0018      	movs	r0, r3
 800341c:	f002 ff68 	bl	80062f0 <Clear_Status_Bit>
 8003420:	e01f      	b.n	8003462 <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 8003422:	4bbc      	ldr	r3, [pc, #752]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003424:	785b      	ldrb	r3, [r3, #1]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b7a      	cmp	r3, #122	@ 0x7a
 800342a:	d107      	bne.n	800343c <UART2_RX_transfer_complete_callback+0xb60>

											Set_Local_Control();
 800342c:	f7fd ffb6 	bl	800139c <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003430:	4bb9      	ldr	r3, [pc, #740]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003432:	2108      	movs	r1, #8
 8003434:	0018      	movs	r0, r3
 8003436:	f002 ff5b 	bl	80062f0 <Clear_Status_Bit>
 800343a:	e012      	b.n	8003462 <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 800343c:	4bb5      	ldr	r3, [pc, #724]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 800343e:	785b      	ldrb	r3, [r3, #1]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b7c      	cmp	r3, #124	@ 0x7c
 8003444:	d104      	bne.n	8003450 <UART2_RX_transfer_complete_callback+0xb74>

											Set_OMNI_Off(&statuses);
 8003446:	4bb4      	ldr	r3, [pc, #720]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003448:	0018      	movs	r0, r3
 800344a:	f7fd ffdf 	bl	800140c <Set_OMNI_Off>
 800344e:	e008      	b.n	8003462 <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003450:	4bb0      	ldr	r3, [pc, #704]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003452:	785b      	ldrb	r3, [r3, #1]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b7d      	cmp	r3, #125	@ 0x7d
 8003458:	d103      	bne.n	8003462 <UART2_RX_transfer_complete_callback+0xb86>

											Set_OMNI_On(&statuses);
 800345a:	4baf      	ldr	r3, [pc, #700]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 800345c:	0018      	movs	r0, r3
 800345e:	f7fd ffe5 	bl	800142c <Set_OMNI_On>
										}
									}
								}

								//not required
								active_status_byte = 0;
 8003462:	4bb4      	ldr	r3, [pc, #720]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003468:	4baa      	ldr	r3, [pc, #680]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 800346a:	0018      	movs	r0, r3
 800346c:	f7fd fea1 	bl	80011b2 <Clear_Data_Buffer>
 8003470:	e2e0      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003472:	4ba8      	ldr	r3, [pc, #672]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003474:	0018      	movs	r0, r3
 8003476:	f7fd fdc1 	bl	8000ffc <Is_Utilised_CC_First_Data_Byte>
 800347a:	0003      	movs	r3, r0
 800347c:	2b01      	cmp	r3, #1
 800347e:	d14f      	bne.n	8003520 <UART2_RX_transfer_complete_callback+0xc44>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 8003480:	4ba7      	ldr	r3, [pc, #668]	@ (8003720 <UART2_RX_transfer_complete_callback+0xe44>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	b2da      	uxtb	r2, r3
 8003486:	4ba7      	ldr	r3, [pc, #668]	@ (8003724 <UART2_RX_transfer_complete_callback+0xe48>)
 8003488:	0011      	movs	r1, r2
 800348a:	0018      	movs	r0, r3
 800348c:	f7fd fe40 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003490:	0003      	movs	r3, r0
 8003492:	2b01      	cmp	r3, #1
 8003494:	d006      	beq.n	80034a4 <UART2_RX_transfer_complete_callback+0xbc8>
										|| (Is_OMNI_On(&statuses) == YES)){
 8003496:	4ba0      	ldr	r3, [pc, #640]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003498:	0018      	movs	r0, r3
 800349a:	f7fd fef0 	bl	800127e <Is_OMNI_On>
 800349e:	0003      	movs	r3, r0
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d135      	bne.n	8003510 <UART2_RX_transfer_complete_callback+0xc34>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 80034a4:	4b9b      	ldr	r3, [pc, #620]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b14      	cmp	r3, #20
 80034ac:	d104      	bne.n	80034b8 <UART2_RX_transfer_complete_callback+0xbdc>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80034ae:	4b9e      	ldr	r3, [pc, #632]	@ (8003728 <UART2_RX_transfer_complete_callback+0xe4c>)
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7fd fbd7 	bl	8000c64 <Set_Waveshape_to_CC_Mode_and_Value>
 80034b6:	e02b      	b.n	8003510 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 80034b8:	4b96      	ldr	r3, [pc, #600]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b15      	cmp	r3, #21
 80034c0:	d109      	bne.n	80034d6 <UART2_RX_transfer_complete_callback+0xbfa>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80034c2:	4b99      	ldr	r3, [pc, #612]	@ (8003728 <UART2_RX_transfer_complete_callback+0xe4c>)
 80034c4:	0018      	movs	r0, r3
 80034c6:	f7fd fbe7 	bl	8000c98 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80034ca:	4b93      	ldr	r3, [pc, #588]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 80034cc:	2108      	movs	r1, #8
 80034ce:	0018      	movs	r0, r3
 80034d0:	f002 ff0e 	bl	80062f0 <Clear_Status_Bit>
 80034d4:	e01c      	b.n	8003510 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 80034d6:	4b8f      	ldr	r3, [pc, #572]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b16      	cmp	r3, #22
 80034de:	d104      	bne.n	80034ea <UART2_RX_transfer_complete_callback+0xc0e>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80034e0:	4b91      	ldr	r3, [pc, #580]	@ (8003728 <UART2_RX_transfer_complete_callback+0xe4c>)
 80034e2:	0018      	movs	r0, r3
 80034e4:	f7fd fbf2 	bl	8000ccc <Set_Depth_to_CC_Mode_and_Value>
 80034e8:	e012      	b.n	8003510 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 80034ea:	4b8a      	ldr	r3, [pc, #552]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b17      	cmp	r3, #23
 80034f2:	d104      	bne.n	80034fe <UART2_RX_transfer_complete_callback+0xc22>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80034f4:	4b8c      	ldr	r3, [pc, #560]	@ (8003728 <UART2_RX_transfer_complete_callback+0xe4c>)
 80034f6:	0018      	movs	r0, r3
 80034f8:	f7fd fc02 	bl	8000d00 <Set_Symmetry_to_CC_Mode_and_Value>
 80034fc:	e008      	b.n	8003510 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 80034fe:	4b85      	ldr	r3, [pc, #532]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b18      	cmp	r3, #24
 8003506:	d103      	bne.n	8003510 <UART2_RX_transfer_complete_callback+0xc34>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003508:	4b87      	ldr	r3, [pc, #540]	@ (8003728 <UART2_RX_transfer_complete_callback+0xe4c>)
 800350a:	0018      	movs	r0, r3
 800350c:	f7fd fc12 	bl	8000d34 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 8003510:	4b88      	ldr	r3, [pc, #544]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 8003512:	2200      	movs	r2, #0
 8003514:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003516:	4b7f      	ldr	r3, [pc, #508]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003518:	0018      	movs	r0, r3
 800351a:	f7fd fe4a 	bl	80011b2 <Clear_Data_Buffer>
 800351e:	e289      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 8003520:	4b84      	ldr	r3, [pc, #528]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003526:	4b7b      	ldr	r3, [pc, #492]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003528:	0018      	movs	r0, r3
 800352a:	f7fd fe42 	bl	80011b2 <Clear_Data_Buffer>
 800352e:	e281      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
					}
					//don't need to check Sysex with running status, as not supported by MIDI
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8003530:	4b78      	ldr	r3, [pc, #480]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003532:	0018      	movs	r0, r3
 8003534:	f7fd fe3d 	bl	80011b2 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003538:	4a77      	ldr	r2, [pc, #476]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 800353a:	4b78      	ldr	r3, [pc, #480]	@ (800371c <UART2_RX_transfer_complete_callback+0xe40>)
 800353c:	0011      	movs	r1, r2
 800353e:	0018      	movs	r0, r3
 8003540:	f7fd feb7 	bl	80012b2 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003544:	4b72      	ldr	r3, [pc, #456]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 8003546:	0018      	movs	r0, r3
 8003548:	f7fd fcf4 	bl	8000f34 <Is_PC_Status_Byte>
 800354c:	0003      	movs	r3, r0
 800354e:	2b01      	cmp	r3, #1
 8003550:	d131      	bne.n	80035b6 <UART2_RX_transfer_complete_callback+0xcda>

						running_status_byte = (uint8_t)*rx_buffer;
 8003552:	4b6f      	ldr	r3, [pc, #444]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	b2da      	uxtb	r2, r3
 8003558:	4b72      	ldr	r3, [pc, #456]	@ (8003724 <UART2_RX_transfer_complete_callback+0xe48>)
 800355a:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 800355c:	4b70      	ldr	r3, [pc, #448]	@ (8003720 <UART2_RX_transfer_complete_callback+0xe44>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	4b6b      	ldr	r3, [pc, #428]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 8003564:	0011      	movs	r1, r2
 8003566:	0018      	movs	r0, r3
 8003568:	f7fd fdd2 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 800356c:	0003      	movs	r3, r0
 800356e:	2b01      	cmp	r3, #1
 8003570:	d10c      	bne.n	800358c <UART2_RX_transfer_complete_callback+0xcb0>

							active_status_byte = (uint8_t)*rx_buffer;
 8003572:	4b67      	ldr	r3, [pc, #412]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	b2da      	uxtb	r2, r3
 8003578:	4b6e      	ldr	r3, [pc, #440]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 800357a:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800357c:	2380      	movs	r3, #128	@ 0x80
 800357e:	005a      	lsls	r2, r3, #1
 8003580:	4b65      	ldr	r3, [pc, #404]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003582:	0011      	movs	r1, r2
 8003584:	0018      	movs	r0, r3
 8003586:	f002 fea1 	bl	80062cc <Set_Status_Bit>
 800358a:	e253      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 800358c:	4b62      	ldr	r3, [pc, #392]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 800358e:	0018      	movs	r0, r3
 8003590:	f7fd fe75 	bl	800127e <Is_OMNI_On>
 8003594:	0003      	movs	r3, r0
 8003596:	2b01      	cmp	r3, #1
 8003598:	d000      	beq.n	800359c <UART2_RX_transfer_complete_callback+0xcc0>
 800359a:	e24b      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 800359c:	4b5c      	ldr	r3, [pc, #368]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	4b64      	ldr	r3, [pc, #400]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 80035a4:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80035a6:	2380      	movs	r3, #128	@ 0x80
 80035a8:	005a      	lsls	r2, r3, #1
 80035aa:	4b5b      	ldr	r3, [pc, #364]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 80035ac:	0011      	movs	r1, r2
 80035ae:	0018      	movs	r0, r3
 80035b0:	f002 fe8c 	bl	80062cc <Set_Status_Bit>
 80035b4:	e23e      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80035b6:	4b56      	ldr	r3, [pc, #344]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 80035b8:	0018      	movs	r0, r3
 80035ba:	f7fd fcd7 	bl	8000f6c <Is_CC_Status_Byte>
 80035be:	0003      	movs	r3, r0
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d131      	bne.n	8003628 <UART2_RX_transfer_complete_callback+0xd4c>

						running_status_byte = (uint8_t)*rx_buffer;
 80035c4:	4b52      	ldr	r3, [pc, #328]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	4b56      	ldr	r3, [pc, #344]	@ (8003724 <UART2_RX_transfer_complete_callback+0xe48>)
 80035cc:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80035ce:	4b54      	ldr	r3, [pc, #336]	@ (8003720 <UART2_RX_transfer_complete_callback+0xe44>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	4b4e      	ldr	r3, [pc, #312]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 80035d6:	0011      	movs	r1, r2
 80035d8:	0018      	movs	r0, r3
 80035da:	f7fd fd99 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80035de:	0003      	movs	r3, r0
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d10c      	bne.n	80035fe <UART2_RX_transfer_complete_callback+0xd22>

							active_status_byte = (uint8_t)*rx_buffer;
 80035e4:	4b4a      	ldr	r3, [pc, #296]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	4b52      	ldr	r3, [pc, #328]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 80035ec:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80035ee:	2380      	movs	r3, #128	@ 0x80
 80035f0:	005a      	lsls	r2, r3, #1
 80035f2:	4b49      	ldr	r3, [pc, #292]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 80035f4:	0011      	movs	r1, r2
 80035f6:	0018      	movs	r0, r3
 80035f8:	f002 fe68 	bl	80062cc <Set_Status_Bit>
 80035fc:	e21a      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 80035fe:	4b46      	ldr	r3, [pc, #280]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003600:	0018      	movs	r0, r3
 8003602:	f7fd fe3c 	bl	800127e <Is_OMNI_On>
 8003606:	0003      	movs	r3, r0
 8003608:	2b01      	cmp	r3, #1
 800360a:	d000      	beq.n	800360e <UART2_RX_transfer_complete_callback+0xd32>
 800360c:	e212      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 800360e:	4b40      	ldr	r3, [pc, #256]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	b2da      	uxtb	r2, r3
 8003614:	4b47      	ldr	r3, [pc, #284]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 8003616:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003618:	2380      	movs	r3, #128	@ 0x80
 800361a:	005a      	lsls	r2, r3, #1
 800361c:	4b3e      	ldr	r3, [pc, #248]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 800361e:	0011      	movs	r1, r2
 8003620:	0018      	movs	r0, r3
 8003622:	f002 fe53 	bl	80062cc <Set_Status_Bit>
 8003626:	e205      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003628:	4b39      	ldr	r3, [pc, #228]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 800362a:	0018      	movs	r0, r3
 800362c:	f7fd fd60 	bl	80010f0 <Is_Sysex_Start_Status_Byte>
 8003630:	0003      	movs	r3, r0
 8003632:	2b01      	cmp	r3, #1
 8003634:	d000      	beq.n	8003638 <UART2_RX_transfer_complete_callback+0xd5c>
 8003636:	e1fd      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8003638:	4b35      	ldr	r3, [pc, #212]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	b2da      	uxtb	r2, r3
 800363e:	4b3d      	ldr	r3, [pc, #244]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 8003640:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003642:	4b38      	ldr	r3, [pc, #224]	@ (8003724 <UART2_RX_transfer_complete_callback+0xe48>)
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003648:	2380      	movs	r3, #128	@ 0x80
 800364a:	005a      	lsls	r2, r3, #1
 800364c:	4b32      	ldr	r3, [pc, #200]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 800364e:	0011      	movs	r1, r2
 8003650:	0018      	movs	r0, r3
 8003652:	f002 fe3b 	bl	80062cc <Set_Status_Bit>
 8003656:	e1ed      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
			}
		}
		else if(active_status_byte != 0){ //CC/PC only called if on basic channel or omni ON
 8003658:	4b36      	ldr	r3, [pc, #216]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d100      	bne.n	8003664 <UART2_RX_transfer_complete_callback+0xd88>
 8003662:	e1e7      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

			if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out) == YES){
 8003664:	2380      	movs	r3, #128	@ 0x80
 8003666:	009a      	lsls	r2, r3, #2
 8003668:	4b2b      	ldr	r3, [pc, #172]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 800366a:	0011      	movs	r1, r2
 800366c:	0018      	movs	r0, r3
 800366e:	f002 fe19 	bl	80062a4 <Get_Status_Bit>
 8003672:	0003      	movs	r3, r0
 8003674:	2b01      	cmp	r3, #1
 8003676:	d10d      	bne.n	8003694 <UART2_RX_transfer_complete_callback+0xdb8>

				active_status_byte = 0;
 8003678:	4b2e      	ldr	r3, [pc, #184]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 800367e:	4b25      	ldr	r3, [pc, #148]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 8003680:	0018      	movs	r0, r3
 8003682:	f7fd fd96 	bl	80011b2 <Clear_Data_Buffer>
				//running status is kept

				Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003686:	4a24      	ldr	r2, [pc, #144]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003688:	4b24      	ldr	r3, [pc, #144]	@ (800371c <UART2_RX_transfer_complete_callback+0xe40>)
 800368a:	0011      	movs	r1, r2
 800368c:	0018      	movs	r0, r3
 800368e:	f7fd fe10 	bl	80012b2 <Reset_and_Stop_MIDI_Software_Timer>
 8003692:	e1cf      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
				//In this condition, the data bytes haven't been received in enough time, so any subsequent data bytes
				//sent after this are simply ignored
			}
			else{ //not timed out

				if(Is_Data_Byte(rx_buffer) == YES){
 8003694:	4b1e      	ldr	r3, [pc, #120]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 8003696:	0018      	movs	r0, r3
 8003698:	f7fd fc33 	bl	8000f02 <Is_Data_Byte>
 800369c:	0003      	movs	r3, r0
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d000      	beq.n	80036a4 <UART2_RX_transfer_complete_callback+0xdc8>
 80036a2:	e133      	b.n	800390c <UART2_RX_transfer_complete_callback+0x1030>

					if(Is_PC_Status_Byte(&active_status_byte) == YES){
 80036a4:	4b23      	ldr	r3, [pc, #140]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 80036a6:	0018      	movs	r0, r3
 80036a8:	f7fd fc44 	bl	8000f34 <Is_PC_Status_Byte>
 80036ac:	0003      	movs	r3, r0
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d144      	bne.n	800373c <UART2_RX_transfer_complete_callback+0xe60>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80036b2:	4b18      	ldr	r3, [pc, #96]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80036b4:	0018      	movs	r0, r3
 80036b6:	f7fd fd4c 	bl	8001152 <Is_Data_Buffer_Empty>
 80036ba:	0003      	movs	r3, r0
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d000      	beq.n	80036c2 <UART2_RX_transfer_complete_callback+0xde6>
 80036c0:	e1b8      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							//first data byte received
							if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 80036c2:	4b13      	ldr	r3, [pc, #76]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 80036c4:	2104      	movs	r1, #4
 80036c6:	0018      	movs	r0, r3
 80036c8:	f7fd fd91 	bl	80011ee <Is_Program_Change_Data_Byte_In_Range>
 80036cc:	0003      	movs	r3, r0
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d10f      	bne.n	80036f2 <UART2_RX_transfer_complete_callback+0xe16>

								Set_All_Pots_to_PC_Mode();
 80036d2:	f7fd fb49 	bl	8000d68 <Set_All_Pots_to_PC_Mode>
								preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 80036d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003710 <UART2_RX_transfer_complete_callback+0xe34>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	3301      	adds	r3, #1
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	4b15      	ldr	r3, [pc, #84]	@ (8003738 <UART2_RX_transfer_complete_callback+0xe5c>)
 80036e2:	701a      	strb	r2, [r3, #0]
								Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 80036e4:	f7fc ff1c 	bl	8000520 <Update_Params_Based_On_Mode_Selected>
								Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80036e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 80036ea:	2108      	movs	r1, #8
 80036ec:	0018      	movs	r0, r3
 80036ee:	f002 fdff 	bl	80062f0 <Clear_Status_Bit>
							}

							//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
							Clear_Data_Buffer(&MIDI_data);
 80036f2:	4b08      	ldr	r3, [pc, #32]	@ (8003714 <UART2_RX_transfer_complete_callback+0xe38>)
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7fd fd5c 	bl	80011b2 <Clear_Data_Buffer>
							active_status_byte = 0;
 80036fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003734 <UART2_RX_transfer_complete_callback+0xe58>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	701a      	strb	r2, [r3, #0]

							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003700:	4a05      	ldr	r2, [pc, #20]	@ (8003718 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003702:	4b06      	ldr	r3, [pc, #24]	@ (800371c <UART2_RX_transfer_complete_callback+0xe40>)
 8003704:	0011      	movs	r1, r2
 8003706:	0018      	movs	r0, r3
 8003708:	f7fd fdd3 	bl	80012b2 <Reset_and_Stop_MIDI_Software_Timer>
 800370c:	e192      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
 800370e:	46c0      	nop			@ (mov r8, r8)
 8003710:	200004dc 	.word	0x200004dc
 8003714:	200004d0 	.word	0x200004d0
 8003718:	20000c3c 	.word	0x20000c3c
 800371c:	20000c44 	.word	0x20000c44
 8003720:	200004ca 	.word	0x200004ca
 8003724:	200004cc 	.word	0x200004cc
 8003728:	200004d1 	.word	0x200004d1
 800372c:	20000028 	.word	0x20000028
 8003730:	20000c58 	.word	0x20000c58
 8003734:	200004cb 	.word	0x200004cb
 8003738:	200004bc 	.word	0x200004bc

						}
					}
					else if(Is_CC_Status_Byte(&active_status_byte) == YES){
 800373c:	4bc4      	ldr	r3, [pc, #784]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 800373e:	0018      	movs	r0, r3
 8003740:	f7fd fc14 	bl	8000f6c <Is_CC_Status_Byte>
 8003744:	0003      	movs	r3, r0
 8003746:	2b01      	cmp	r3, #1
 8003748:	d000      	beq.n	800374c <UART2_RX_transfer_complete_callback+0xe70>
 800374a:	e0d2      	b.n	80038f2 <UART2_RX_transfer_complete_callback+0x1016>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800374c:	4bc1      	ldr	r3, [pc, #772]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 800374e:	0018      	movs	r0, r3
 8003750:	f7fd fcff 	bl	8001152 <Is_Data_Buffer_Empty>
 8003754:	0003      	movs	r3, r0
 8003756:	2b01      	cmp	r3, #1
 8003758:	d108      	bne.n	800376c <UART2_RX_transfer_complete_callback+0xe90>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 800375a:	4bbf      	ldr	r3, [pc, #764]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	b2da      	uxtb	r2, r3
 8003760:	4bbc      	ldr	r3, [pc, #752]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 8003762:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 8003764:	4bbd      	ldr	r3, [pc, #756]	@ (8003a5c <UART2_RX_transfer_complete_callback+0x1180>)
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	e163      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 800376c:	4bba      	ldr	r3, [pc, #744]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	b2da      	uxtb	r2, r3
 8003772:	4bb8      	ldr	r3, [pc, #736]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 8003774:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003776:	4aba      	ldr	r2, [pc, #744]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 8003778:	4bb8      	ldr	r3, [pc, #736]	@ (8003a5c <UART2_RX_transfer_complete_callback+0x1180>)
 800377a:	0011      	movs	r1, r2
 800377c:	0018      	movs	r0, r3
 800377e:	f7fd fd98 	bl	80012b2 <Reset_and_Stop_MIDI_Software_Timer>
							Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003782:	4bb7      	ldr	r3, [pc, #732]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 8003784:	2108      	movs	r1, #8
 8003786:	0018      	movs	r0, r3
 8003788:	f002 fdb2 	bl	80062f0 <Clear_Status_Bit>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 800378c:	4bb1      	ldr	r3, [pc, #708]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 800378e:	0018      	movs	r0, r3
 8003790:	f7fd fc08 	bl	8000fa4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 8003794:	0003      	movs	r3, r0
 8003796:	2b01      	cmp	r3, #1
 8003798:	d14c      	bne.n	8003834 <UART2_RX_transfer_complete_callback+0xf58>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES){
 800379a:	4bb2      	ldr	r3, [pc, #712]	@ (8003a64 <UART2_RX_transfer_complete_callback+0x1188>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	4bab      	ldr	r3, [pc, #684]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 80037a2:	0011      	movs	r1, r2
 80037a4:	0018      	movs	r0, r3
 80037a6:	f7fd fcb3 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80037aa:	0003      	movs	r3, r0
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d139      	bne.n	8003824 <UART2_RX_transfer_complete_callback+0xf48>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 80037b0:	4aad      	ldr	r2, [pc, #692]	@ (8003a68 <UART2_RX_transfer_complete_callback+0x118c>)
 80037b2:	4ba8      	ldr	r3, [pc, #672]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 80037b4:	0011      	movs	r1, r2
 80037b6:	0018      	movs	r0, r3
 80037b8:	f7fd fc53 	bl	8001062 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 80037bc:	0003      	movs	r3, r0
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d130      	bne.n	8003824 <UART2_RX_transfer_complete_callback+0xf48>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 80037c2:	4ba4      	ldr	r3, [pc, #656]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 80037c4:	785b      	ldrb	r3, [r3, #1]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b79      	cmp	r3, #121	@ 0x79
 80037ca:	d10b      	bne.n	80037e4 <UART2_RX_transfer_complete_callback+0xf08>

											Reset_All_Controllers(&params, &delay_line);
 80037cc:	4aa7      	ldr	r2, [pc, #668]	@ (8003a6c <UART2_RX_transfer_complete_callback+0x1190>)
 80037ce:	4ba8      	ldr	r3, [pc, #672]	@ (8003a70 <UART2_RX_transfer_complete_callback+0x1194>)
 80037d0:	0011      	movs	r1, r2
 80037d2:	0018      	movs	r0, r3
 80037d4:	f7fd fd88 	bl	80012e8 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80037d8:	4ba1      	ldr	r3, [pc, #644]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 80037da:	2108      	movs	r1, #8
 80037dc:	0018      	movs	r0, r3
 80037de:	f002 fd87 	bl	80062f0 <Clear_Status_Bit>
 80037e2:	e01f      	b.n	8003824 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 80037e4:	4b9b      	ldr	r3, [pc, #620]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 80037e6:	785b      	ldrb	r3, [r3, #1]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b7a      	cmp	r3, #122	@ 0x7a
 80037ec:	d107      	bne.n	80037fe <UART2_RX_transfer_complete_callback+0xf22>

											Set_Local_Control();
 80037ee:	f7fd fdd5 	bl	800139c <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80037f2:	4b9b      	ldr	r3, [pc, #620]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 80037f4:	2108      	movs	r1, #8
 80037f6:	0018      	movs	r0, r3
 80037f8:	f002 fd7a 	bl	80062f0 <Clear_Status_Bit>
 80037fc:	e012      	b.n	8003824 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 80037fe:	4b95      	ldr	r3, [pc, #596]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 8003800:	785b      	ldrb	r3, [r3, #1]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b7c      	cmp	r3, #124	@ 0x7c
 8003806:	d104      	bne.n	8003812 <UART2_RX_transfer_complete_callback+0xf36>

											Set_OMNI_Off(&statuses);
 8003808:	4b95      	ldr	r3, [pc, #596]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 800380a:	0018      	movs	r0, r3
 800380c:	f7fd fdfe 	bl	800140c <Set_OMNI_Off>
 8003810:	e008      	b.n	8003824 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003812:	4b90      	ldr	r3, [pc, #576]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 8003814:	785b      	ldrb	r3, [r3, #1]
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b7d      	cmp	r3, #125	@ 0x7d
 800381a:	d103      	bne.n	8003824 <UART2_RX_transfer_complete_callback+0xf48>

											Set_OMNI_On(&statuses);
 800381c:	4b90      	ldr	r3, [pc, #576]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 800381e:	0018      	movs	r0, r3
 8003820:	f7fd fe04 	bl	800142c <Set_OMNI_On>
										}
									}
								}

								active_status_byte = 0;
 8003824:	4b8a      	ldr	r3, [pc, #552]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 8003826:	2200      	movs	r2, #0
 8003828:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 800382a:	4b8a      	ldr	r3, [pc, #552]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 800382c:	0018      	movs	r0, r3
 800382e:	f7fd fcc0 	bl	80011b2 <Clear_Data_Buffer>
 8003832:	e0ff      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003834:	4b87      	ldr	r3, [pc, #540]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 8003836:	0018      	movs	r0, r3
 8003838:	f7fd fbe0 	bl	8000ffc <Is_Utilised_CC_First_Data_Byte>
 800383c:	0003      	movs	r3, r0
 800383e:	2b01      	cmp	r3, #1
 8003840:	d14f      	bne.n	80038e2 <UART2_RX_transfer_complete_callback+0x1006>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES)
 8003842:	4b88      	ldr	r3, [pc, #544]	@ (8003a64 <UART2_RX_transfer_complete_callback+0x1188>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	b2da      	uxtb	r2, r3
 8003848:	4b81      	ldr	r3, [pc, #516]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 800384a:	0011      	movs	r1, r2
 800384c:	0018      	movs	r0, r3
 800384e:	f7fd fc5f 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003852:	0003      	movs	r3, r0
 8003854:	2b01      	cmp	r3, #1
 8003856:	d006      	beq.n	8003866 <UART2_RX_transfer_complete_callback+0xf8a>
										|| (Is_OMNI_On(&statuses) == YES)){
 8003858:	4b81      	ldr	r3, [pc, #516]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 800385a:	0018      	movs	r0, r3
 800385c:	f7fd fd0f 	bl	800127e <Is_OMNI_On>
 8003860:	0003      	movs	r3, r0
 8003862:	2b01      	cmp	r3, #1
 8003864:	d135      	bne.n	80038d2 <UART2_RX_transfer_complete_callback+0xff6>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 8003866:	4b7b      	ldr	r3, [pc, #492]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b14      	cmp	r3, #20
 800386e:	d104      	bne.n	800387a <UART2_RX_transfer_complete_callback+0xf9e>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003870:	4b7d      	ldr	r3, [pc, #500]	@ (8003a68 <UART2_RX_transfer_complete_callback+0x118c>)
 8003872:	0018      	movs	r0, r3
 8003874:	f7fd f9f6 	bl	8000c64 <Set_Waveshape_to_CC_Mode_and_Value>
 8003878:	e02b      	b.n	80038d2 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 800387a:	4b76      	ldr	r3, [pc, #472]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b15      	cmp	r3, #21
 8003882:	d109      	bne.n	8003898 <UART2_RX_transfer_complete_callback+0xfbc>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003884:	4b78      	ldr	r3, [pc, #480]	@ (8003a68 <UART2_RX_transfer_complete_callback+0x118c>)
 8003886:	0018      	movs	r0, r3
 8003888:	f7fd fa06 	bl	8000c98 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 800388c:	4b74      	ldr	r3, [pc, #464]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 800388e:	2108      	movs	r1, #8
 8003890:	0018      	movs	r0, r3
 8003892:	f002 fd2d 	bl	80062f0 <Clear_Status_Bit>
 8003896:	e01c      	b.n	80038d2 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8003898:	4b6e      	ldr	r3, [pc, #440]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b16      	cmp	r3, #22
 80038a0:	d104      	bne.n	80038ac <UART2_RX_transfer_complete_callback+0xfd0>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80038a2:	4b71      	ldr	r3, [pc, #452]	@ (8003a68 <UART2_RX_transfer_complete_callback+0x118c>)
 80038a4:	0018      	movs	r0, r3
 80038a6:	f7fd fa11 	bl	8000ccc <Set_Depth_to_CC_Mode_and_Value>
 80038aa:	e012      	b.n	80038d2 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 80038ac:	4b69      	ldr	r3, [pc, #420]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b17      	cmp	r3, #23
 80038b4:	d104      	bne.n	80038c0 <UART2_RX_transfer_complete_callback+0xfe4>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80038b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003a68 <UART2_RX_transfer_complete_callback+0x118c>)
 80038b8:	0018      	movs	r0, r3
 80038ba:	f7fd fa21 	bl	8000d00 <Set_Symmetry_to_CC_Mode_and_Value>
 80038be:	e008      	b.n	80038d2 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 80038c0:	4b64      	ldr	r3, [pc, #400]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b18      	cmp	r3, #24
 80038c8:	d103      	bne.n	80038d2 <UART2_RX_transfer_complete_callback+0xff6>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80038ca:	4b67      	ldr	r3, [pc, #412]	@ (8003a68 <UART2_RX_transfer_complete_callback+0x118c>)
 80038cc:	0018      	movs	r0, r3
 80038ce:	f7fd fa31 	bl	8000d34 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 80038d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80038d8:	4b5e      	ldr	r3, [pc, #376]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 80038da:	0018      	movs	r0, r3
 80038dc:	f7fd fc69 	bl	80011b2 <Clear_Data_Buffer>
 80038e0:	e0a8      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 80038e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80038e8:	4b5a      	ldr	r3, [pc, #360]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 80038ea:	0018      	movs	r0, r3
 80038ec:	f7fd fc61 	bl	80011b2 <Clear_Data_Buffer>
 80038f0:	e0a0      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(&active_status_byte) == YES){
 80038f2:	4b57      	ldr	r3, [pc, #348]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 80038f4:	0018      	movs	r0, r3
 80038f6:	f7fd fbfb 	bl	80010f0 <Is_Sysex_Start_Status_Byte>
 80038fa:	0003      	movs	r3, r0
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d000      	beq.n	8003902 <UART2_RX_transfer_complete_callback+0x1026>
 8003900:	e098      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						//@TODO

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003902:	4b54      	ldr	r3, [pc, #336]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 8003904:	0018      	movs	r0, r3
 8003906:	f7fd fc24 	bl	8001152 <Is_Data_Buffer_Empty>
 800390a:	e093      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 800390c:	4b51      	ldr	r3, [pc, #324]	@ (8003a54 <UART2_RX_transfer_complete_callback+0x1178>)
 800390e:	0018      	movs	r0, r3
 8003910:	f7fd fc4f 	bl	80011b2 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003914:	4a52      	ldr	r2, [pc, #328]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 8003916:	4b51      	ldr	r3, [pc, #324]	@ (8003a5c <UART2_RX_transfer_complete_callback+0x1180>)
 8003918:	0011      	movs	r1, r2
 800391a:	0018      	movs	r0, r3
 800391c:	f7fd fcc9 	bl	80012b2 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003920:	4b4d      	ldr	r3, [pc, #308]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003922:	0018      	movs	r0, r3
 8003924:	f7fd fb06 	bl	8000f34 <Is_PC_Status_Byte>
 8003928:	0003      	movs	r3, r0
 800392a:	2b01      	cmp	r3, #1
 800392c:	d130      	bne.n	8003990 <UART2_RX_transfer_complete_callback+0x10b4>

						running_status_byte = (uint8_t)*rx_buffer;
 800392e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	b2da      	uxtb	r2, r3
 8003934:	4b4f      	ldr	r3, [pc, #316]	@ (8003a74 <UART2_RX_transfer_complete_callback+0x1198>)
 8003936:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003938:	4b4a      	ldr	r3, [pc, #296]	@ (8003a64 <UART2_RX_transfer_complete_callback+0x1188>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	b2da      	uxtb	r2, r3
 800393e:	4b46      	ldr	r3, [pc, #280]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003940:	0011      	movs	r1, r2
 8003942:	0018      	movs	r0, r3
 8003944:	f7fd fbe4 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003948:	0003      	movs	r3, r0
 800394a:	2b01      	cmp	r3, #1
 800394c:	d10c      	bne.n	8003968 <UART2_RX_transfer_complete_callback+0x108c>

							active_status_byte = (uint8_t)*rx_buffer;
 800394e:	4b42      	ldr	r3, [pc, #264]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	b2da      	uxtb	r2, r3
 8003954:	4b3e      	ldr	r3, [pc, #248]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 8003956:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003958:	2380      	movs	r3, #128	@ 0x80
 800395a:	005a      	lsls	r2, r3, #1
 800395c:	4b40      	ldr	r3, [pc, #256]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 800395e:	0011      	movs	r1, r2
 8003960:	0018      	movs	r0, r3
 8003962:	f002 fcb3 	bl	80062cc <Set_Status_Bit>
 8003966:	e065      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003968:	4b3d      	ldr	r3, [pc, #244]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 800396a:	0018      	movs	r0, r3
 800396c:	f7fd fc87 	bl	800127e <Is_OMNI_On>
 8003970:	0003      	movs	r3, r0
 8003972:	2b01      	cmp	r3, #1
 8003974:	d15e      	bne.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003976:	4b38      	ldr	r3, [pc, #224]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	b2da      	uxtb	r2, r3
 800397c:	4b34      	ldr	r3, [pc, #208]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 800397e:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003980:	2380      	movs	r3, #128	@ 0x80
 8003982:	005a      	lsls	r2, r3, #1
 8003984:	4b36      	ldr	r3, [pc, #216]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 8003986:	0011      	movs	r1, r2
 8003988:	0018      	movs	r0, r3
 800398a:	f002 fc9f 	bl	80062cc <Set_Status_Bit>
 800398e:	e051      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8003990:	4b31      	ldr	r3, [pc, #196]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003992:	0018      	movs	r0, r3
 8003994:	f7fd faea 	bl	8000f6c <Is_CC_Status_Byte>
 8003998:	0003      	movs	r3, r0
 800399a:	2b01      	cmp	r3, #1
 800399c:	d130      	bne.n	8003a00 <UART2_RX_transfer_complete_callback+0x1124>

						running_status_byte = (uint8_t)*rx_buffer;
 800399e:	4b2e      	ldr	r3, [pc, #184]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	4b33      	ldr	r3, [pc, #204]	@ (8003a74 <UART2_RX_transfer_complete_callback+0x1198>)
 80039a6:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80039a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003a64 <UART2_RX_transfer_complete_callback+0x1188>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 80039b0:	0011      	movs	r1, r2
 80039b2:	0018      	movs	r0, r3
 80039b4:	f7fd fbac 	bl	8001110 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80039b8:	0003      	movs	r3, r0
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d10c      	bne.n	80039d8 <UART2_RX_transfer_complete_callback+0x10fc>

							active_status_byte = (uint8_t)*rx_buffer;
 80039be:	4b26      	ldr	r3, [pc, #152]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	4b22      	ldr	r3, [pc, #136]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 80039c6:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80039c8:	2380      	movs	r3, #128	@ 0x80
 80039ca:	005a      	lsls	r2, r3, #1
 80039cc:	4b24      	ldr	r3, [pc, #144]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 80039ce:	0011      	movs	r1, r2
 80039d0:	0018      	movs	r0, r3
 80039d2:	f002 fc7b 	bl	80062cc <Set_Status_Bit>
 80039d6:	e02d      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 80039d8:	4b21      	ldr	r3, [pc, #132]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 80039da:	0018      	movs	r0, r3
 80039dc:	f7fd fc4f 	bl	800127e <Is_OMNI_On>
 80039e0:	0003      	movs	r3, r0
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d126      	bne.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 80039e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	4b18      	ldr	r3, [pc, #96]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 80039ee:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80039f0:	2380      	movs	r3, #128	@ 0x80
 80039f2:	005a      	lsls	r2, r3, #1
 80039f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 80039f6:	0011      	movs	r1, r2
 80039f8:	0018      	movs	r0, r3
 80039fa:	f002 fc67 	bl	80062cc <Set_Status_Bit>
 80039fe:	e019      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003a00:	4b15      	ldr	r3, [pc, #84]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003a02:	0018      	movs	r0, r3
 8003a04:	f7fd fb74 	bl	80010f0 <Is_Sysex_Start_Status_Byte>
 8003a08:	0003      	movs	r3, r0
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d112      	bne.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8003a0e:	4b12      	ldr	r3, [pc, #72]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	4b0e      	ldr	r3, [pc, #56]	@ (8003a50 <UART2_RX_transfer_complete_callback+0x1174>)
 8003a16:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003a18:	4b16      	ldr	r3, [pc, #88]	@ (8003a74 <UART2_RX_transfer_complete_callback+0x1198>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003a1e:	2380      	movs	r3, #128	@ 0x80
 8003a20:	005a      	lsls	r2, r3, #1
 8003a22:	4b0f      	ldr	r3, [pc, #60]	@ (8003a60 <UART2_RX_transfer_complete_callback+0x1184>)
 8003a24:	0011      	movs	r1, r2
 8003a26:	0018      	movs	r0, r3
 8003a28:	f002 fc50 	bl	80062cc <Set_Status_Bit>
 8003a2c:	e002      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8003a2e:	46c0      	nop			@ (mov r8, r8)
 8003a30:	e000      	b.n	8003a34 <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003a32:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}

	*rx_buffer = 0;
 8003a34:	4b08      	ldr	r3, [pc, #32]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8003a3a:	4907      	ldr	r1, [pc, #28]	@ (8003a58 <UART2_RX_transfer_complete_callback+0x117c>)
 8003a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a78 <UART2_RX_transfer_complete_callback+0x119c>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	0018      	movs	r0, r3
 8003a42:	f008 fb45 	bl	800c0d0 <HAL_UART_Receive_DMA>
}
 8003a46:	46c0      	nop			@ (mov r8, r8)
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b002      	add	sp, #8
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			@ (mov r8, r8)
 8003a50:	200004cb 	.word	0x200004cb
 8003a54:	200004d0 	.word	0x200004d0
 8003a58:	200004dc 	.word	0x200004dc
 8003a5c:	20000c44 	.word	0x20000c44
 8003a60:	20000c3c 	.word	0x20000c3c
 8003a64:	200004ca 	.word	0x200004ca
 8003a68:	200004d1 	.word	0x200004d1
 8003a6c:	20000028 	.word	0x20000028
 8003a70:	20000c58 	.word	0x20000c58
 8003a74:	200004cc 	.word	0x200004cc
 8003a78:	20000a48 	.word	0x20000a48

08003a7c <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	0002      	movs	r2, r0
 8003a84:	1dbb      	adds	r3, r7, #6
 8003a86:	801a      	strh	r2, [r3, #0]

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with falling interrupt
 8003a88:	1dbb      	adds	r3, r7, #6
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	2b80      	cmp	r3, #128	@ 0x80
 8003a8e:	d117      	bne.n	8003ac0 <HAL_GPIO_EXTI_Falling_Callback+0x44>

		if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8003a90:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac8 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b06      	cmp	r3, #6
 8003a98:	d004      	beq.n	8003aa4 <HAL_GPIO_EXTI_Falling_Callback+0x28>
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac8 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b07      	cmp	r3, #7
 8003aa2:	d10d      	bne.n	8003ac0 <HAL_GPIO_EXTI_Falling_Callback+0x44>

			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003aa4:	2380      	movs	r3, #128	@ 0x80
 8003aa6:	0099      	lsls	r1, r3, #2
 8003aa8:	23a0      	movs	r3, #160	@ 0xa0
 8003aaa:	05db      	lsls	r3, r3, #23
 8003aac:	2201      	movs	r2, #1
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f004 fcbb 	bl	800842a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003ab4:	4b05      	ldr	r3, [pc, #20]	@ (8003acc <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2140      	movs	r1, #64	@ 0x40
 8003aba:	0018      	movs	r0, r3
 8003abc:	f004 fcb5 	bl	800842a <HAL_GPIO_WritePin>
		}
	}
}
 8003ac0:	46c0      	nop			@ (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b002      	add	sp, #8
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	20000430 	.word	0x20000430
 8003acc:	50000800 	.word	0x50000800

08003ad0 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	0002      	movs	r2, r0
 8003ad8:	1dbb      	adds	r3, r7, #6
 8003ada:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with rising interrupt
 8003adc:	1dbb      	adds	r3, r7, #6
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	2b80      	cmp	r3, #128	@ 0x80
 8003ae2:	d000      	beq.n	8003ae6 <HAL_GPIO_EXTI_Rising_Callback+0x16>
 8003ae4:	e0dd      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>

		if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8003ae6:	4b71      	ldr	r3, [pc, #452]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d114      	bne.n	8003b1a <HAL_GPIO_EXTI_Rising_Callback+0x4a>

			//Set SW OUT
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003af0:	2380      	movs	r3, #128	@ 0x80
 8003af2:	0099      	lsls	r1, r3, #2
 8003af4:	23a0      	movs	r3, #160	@ 0xa0
 8003af6:	05db      	lsls	r3, r3, #23
 8003af8:	2200      	movs	r2, #0
 8003afa:	0018      	movs	r0, r3
 8003afc:	f004 fc95 	bl	800842a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003b00:	4b6b      	ldr	r3, [pc, #428]	@ (8003cb0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	2140      	movs	r1, #64	@ 0x40
 8003b06:	0018      	movs	r0, r3
 8003b08:	f004 fc8f 	bl	800842a <HAL_GPIO_WritePin>

			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003b0c:	4b67      	ldr	r3, [pc, #412]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003b12:	4b66      	ldr	r3, [pc, #408]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b14:	2207      	movs	r2, #7
 8003b16:	701a      	strb	r2, [r3, #0]
		}

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8003b18:	e0c3      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == PC_MODE){
 8003b1a:	4b64      	ldr	r3, [pc, #400]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	d114      	bne.n	8003b4e <HAL_GPIO_EXTI_Rising_Callback+0x7e>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003b24:	2380      	movs	r3, #128	@ 0x80
 8003b26:	0099      	lsls	r1, r3, #2
 8003b28:	23a0      	movs	r3, #160	@ 0xa0
 8003b2a:	05db      	lsls	r3, r3, #23
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f004 fc7b 	bl	800842a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003b34:	4b5e      	ldr	r3, [pc, #376]	@ (8003cb0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	2140      	movs	r1, #64	@ 0x40
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f004 fc75 	bl	800842a <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = PC_MODE;
 8003b40:	4b5a      	ldr	r3, [pc, #360]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b42:	2203      	movs	r2, #3
 8003b44:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003b46:	4b59      	ldr	r3, [pc, #356]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b48:	2207      	movs	r2, #7
 8003b4a:	701a      	strb	r2, [r3, #0]
}
 8003b4c:	e0a9      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == CC_MODE){
 8003b4e:	4b57      	ldr	r3, [pc, #348]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d114      	bne.n	8003b82 <HAL_GPIO_EXTI_Rising_Callback+0xb2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003b58:	2380      	movs	r3, #128	@ 0x80
 8003b5a:	0099      	lsls	r1, r3, #2
 8003b5c:	23a0      	movs	r3, #160	@ 0xa0
 8003b5e:	05db      	lsls	r3, r3, #23
 8003b60:	2200      	movs	r2, #0
 8003b62:	0018      	movs	r0, r3
 8003b64:	f004 fc61 	bl	800842a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003b68:	4b51      	ldr	r3, [pc, #324]	@ (8003cb0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	2140      	movs	r1, #64	@ 0x40
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f004 fc5b 	bl	800842a <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = CC_MODE;
 8003b74:	4b4d      	ldr	r3, [pc, #308]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b76:	2202      	movs	r2, #2
 8003b78:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003b7a:	4b4c      	ldr	r3, [pc, #304]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b7c:	2207      	movs	r2, #7
 8003b7e:	701a      	strb	r2, [r3, #0]
}
 8003b80:	e08f      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003b82:	4b4a      	ldr	r3, [pc, #296]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d12b      	bne.n	8003be4 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8003b8c:	4b49      	ldr	r3, [pc, #292]	@ (8003cb4 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d126      	bne.n	8003be4 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8003b96:	4b48      	ldr	r3, [pc, #288]	@ (8003cb8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003b98:	2120      	movs	r1, #32
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f002 fb82 	bl	80062a4 <Get_Status_Bit>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d11e      	bne.n	8003be4 <HAL_GPIO_EXTI_Rising_Callback+0x114>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003ba6:	2380      	movs	r3, #128	@ 0x80
 8003ba8:	0099      	lsls	r1, r3, #2
 8003baa:	23a0      	movs	r3, #160	@ 0xa0
 8003bac:	05db      	lsls	r3, r3, #23
 8003bae:	2200      	movs	r2, #0
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f004 fc3a 	bl	800842a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	2140      	movs	r1, #64	@ 0x40
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f004 fc34 	bl	800842a <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = TAP_MODE;
 8003bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003bc8:	4b38      	ldr	r3, [pc, #224]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003bca:	2207      	movs	r2, #7
 8003bcc:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003bce:	4b3a      	ldr	r3, [pc, #232]	@ (8003cb8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003bd0:	2120      	movs	r1, #32
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f002 fb8c 	bl	80062f0 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003bd8:	4b37      	ldr	r3, [pc, #220]	@ (8003cb8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003bda:	2140      	movs	r1, #64	@ 0x40
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f002 fb87 	bl	80062f0 <Clear_Status_Bit>
 8003be2:	e05e      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003be4:	4b31      	ldr	r3, [pc, #196]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d12b      	bne.n	8003c46 <HAL_GPIO_EXTI_Rising_Callback+0x176>
 8003bee:	4b31      	ldr	r3, [pc, #196]	@ (8003cb4 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d126      	bne.n	8003c46 <HAL_GPIO_EXTI_Rising_Callback+0x176>
 8003bf8:	4b2f      	ldr	r3, [pc, #188]	@ (8003cb8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003bfa:	2120      	movs	r1, #32
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f002 fb51 	bl	80062a4 <Get_Status_Bit>
 8003c02:	0003      	movs	r3, r0
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d11e      	bne.n	8003c46 <HAL_GPIO_EXTI_Rising_Callback+0x176>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003c08:	2380      	movs	r3, #128	@ 0x80
 8003c0a:	0099      	lsls	r1, r3, #2
 8003c0c:	23a0      	movs	r3, #160	@ 0xa0
 8003c0e:	05db      	lsls	r3, r3, #23
 8003c10:	2200      	movs	r2, #0
 8003c12:	0018      	movs	r0, r3
 8003c14:	f004 fc09 	bl	800842a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003c18:	4b25      	ldr	r3, [pc, #148]	@ (8003cb0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	2140      	movs	r1, #64	@ 0x40
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f004 fc03 	bl	800842a <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003c24:	4b21      	ldr	r3, [pc, #132]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003c26:	2208      	movs	r2, #8
 8003c28:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003c2a:	4b20      	ldr	r3, [pc, #128]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003c2c:	2207      	movs	r2, #7
 8003c2e:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003c30:	4b21      	ldr	r3, [pc, #132]	@ (8003cb8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003c32:	2120      	movs	r1, #32
 8003c34:	0018      	movs	r0, r3
 8003c36:	f002 fb5b 	bl	80062f0 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8003cb8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003c3c:	2140      	movs	r1, #64	@ 0x40
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f002 fb56 	bl	80062f0 <Clear_Status_Bit>
 8003c44:	e02d      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){ //second edge
 8003c46:	4b19      	ldr	r3, [pc, #100]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b07      	cmp	r3, #7
 8003c4e:	d114      	bne.n	8003c7a <HAL_GPIO_EXTI_Rising_Callback+0x1aa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003c50:	2380      	movs	r3, #128	@ 0x80
 8003c52:	0099      	lsls	r1, r3, #2
 8003c54:	23a0      	movs	r3, #160	@ 0xa0
 8003c56:	05db      	lsls	r3, r3, #23
 8003c58:	2200      	movs	r2, #0
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f004 fbe5 	bl	800842a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003c60:	4b13      	ldr	r3, [pc, #76]	@ (8003cb0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	2140      	movs	r1, #64	@ 0x40
 8003c66:	0018      	movs	r0, r3
 8003c68:	f004 fbdf 	bl	800842a <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003c6e:	2207      	movs	r2, #7
 8003c70:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8003c72:	4b0e      	ldr	r3, [pc, #56]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003c74:	2206      	movs	r2, #6
 8003c76:	701a      	strb	r2, [r3, #0]
}
 8003c78:	e013      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE){
 8003c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003cac <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b06      	cmp	r3, #6
 8003c82:	d10e      	bne.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003c84:	2380      	movs	r3, #128	@ 0x80
 8003c86:	0099      	lsls	r1, r3, #2
 8003c88:	23a0      	movs	r3, #160	@ 0xa0
 8003c8a:	05db      	lsls	r3, r3, #23
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f004 fbcb 	bl	800842a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003c94:	4b06      	ldr	r3, [pc, #24]	@ (8003cb0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	2140      	movs	r1, #64	@ 0x40
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f004 fbc5 	bl	800842a <HAL_GPIO_WritePin>
}
 8003ca0:	e7ff      	b.n	8003ca2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
 8003ca2:	46c0      	nop			@ (mov r8, r8)
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	b002      	add	sp, #8
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	46c0      	nop			@ (mov r8, r8)
 8003cac:	20000430 	.word	0x20000430
 8003cb0:	50000800 	.word	0x50000800
 8003cb4:	20000444 	.word	0x20000444
 8003cb8:	20000c3c 	.word	0x20000c3c

08003cbc <LPTIM1_callback>:

void LPTIM1_callback(LPTIM_HandleTypeDef *hlptim){
 8003cbc:	b5b0      	push	{r4, r5, r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	6078      	str	r0, [r7, #4]
	static volatile struct Tap_Tempo_Switch_States tap_tempo_switch_states = {0};
	static volatile enum Validate preset_save_mode_is_inactive = YES;

	//CHECK IF NEED TAP_PENDING TRANSITION

	uint8_t pin_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8003cc4:	250f      	movs	r5, #15
 8003cc6:	197c      	adds	r4, r7, r5
 8003cc8:	2380      	movs	r3, #128	@ 0x80
 8003cca:	00da      	lsls	r2, r3, #3
 8003ccc:	23a0      	movs	r3, #160	@ 0xa0
 8003cce:	05db      	lsls	r3, r3, #23
 8003cd0:	0011      	movs	r1, r2
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	f004 fb8c 	bl	80083f0 <HAL_GPIO_ReadPin>
 8003cd8:	0003      	movs	r3, r0
 8003cda:	7023      	strb	r3, [r4, #0]

	if(preset_save_mode_is_inactive == YES){
 8003cdc:	4bc2      	ldr	r3, [pc, #776]	@ (8003fe8 <LPTIM1_callback+0x32c>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d000      	beq.n	8003ce8 <LPTIM1_callback+0x2c>
 8003ce6:	e1a2      	b.n	800402e <LPTIM1_callback+0x372>

		if((speed_fsm.current_state.shared_state == MANUAL_MODE) && (pin_state == 0)){
 8003ce8:	4bc0      	ldr	r3, [pc, #768]	@ (8003fec <LPTIM1_callback+0x330>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d10a      	bne.n	8003d08 <LPTIM1_callback+0x4c>
 8003cf2:	197b      	adds	r3, r7, r5
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <LPTIM1_callback+0x4c>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003cfa:	4bbc      	ldr	r3, [pc, #752]	@ (8003fec <LPTIM1_callback+0x330>)
 8003cfc:	2205      	movs	r2, #5
 8003cfe:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003d00:	4bba      	ldr	r3, [pc, #744]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	705a      	strb	r2, [r3, #1]
 8003d06:	e070      	b.n	8003dea <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.shared_state == CC_MODE) && (pin_state == 0)){
 8003d08:	4bb8      	ldr	r3, [pc, #736]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d10b      	bne.n	8003d2a <LPTIM1_callback+0x6e>
 8003d12:	230f      	movs	r3, #15
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d106      	bne.n	8003d2a <LPTIM1_callback+0x6e>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003d1c:	4bb3      	ldr	r3, [pc, #716]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d1e:	2205      	movs	r2, #5
 8003d20:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = CC_MODE;
 8003d22:	4bb2      	ldr	r3, [pc, #712]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d24:	2202      	movs	r2, #2
 8003d26:	705a      	strb	r2, [r3, #1]
 8003d28:	e05f      	b.n	8003dea <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.shared_state == PC_MODE) && (pin_state == 0)){
 8003d2a:	4bb0      	ldr	r3, [pc, #704]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d10b      	bne.n	8003d4c <LPTIM1_callback+0x90>
 8003d34:	230f      	movs	r3, #15
 8003d36:	18fb      	adds	r3, r7, r3
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <LPTIM1_callback+0x90>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003d3e:	4bab      	ldr	r3, [pc, #684]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d40:	2205      	movs	r2, #5
 8003d42:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = PC_MODE;
 8003d44:	4ba9      	ldr	r3, [pc, #676]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d46:	2203      	movs	r2, #3
 8003d48:	705a      	strb	r2, [r3, #1]
 8003d4a:	e04e      	b.n	8003dea <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003d4c:	4ba7      	ldr	r3, [pc, #668]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b06      	cmp	r3, #6
 8003d54:	d122      	bne.n	8003d9c <LPTIM1_callback+0xe0>
 8003d56:	230f      	movs	r3, #15
 8003d58:	18fb      	adds	r3, r7, r3
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d11d      	bne.n	8003d9c <LPTIM1_callback+0xe0>
 8003d60:	4ba3      	ldr	r3, [pc, #652]	@ (8003ff0 <LPTIM1_callback+0x334>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d118      	bne.n	8003d9c <LPTIM1_callback+0xe0>
 8003d6a:	4ba2      	ldr	r3, [pc, #648]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003d6c:	2120      	movs	r1, #32
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f002 fa98 	bl	80062a4 <Get_Status_Bit>
 8003d74:	0003      	movs	r3, r0
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d110      	bne.n	8003d9c <LPTIM1_callback+0xe0>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003d7a:	4b9c      	ldr	r3, [pc, #624]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d7c:	2205      	movs	r2, #5
 8003d7e:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_MODE;
 8003d80:	4b9a      	ldr	r3, [pc, #616]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d82:	2206      	movs	r2, #6
 8003d84:	705a      	strb	r2, [r3, #1]

			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003d86:	4b9b      	ldr	r3, [pc, #620]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003d88:	2120      	movs	r1, #32
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f002 fab0 	bl	80062f0 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003d90:	4b98      	ldr	r3, [pc, #608]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003d92:	2140      	movs	r1, #64	@ 0x40
 8003d94:	0018      	movs	r0, r3
 8003d96:	f002 faab 	bl	80062f0 <Clear_Status_Bit>
 8003d9a:	e026      	b.n	8003dea <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003d9c:	4b93      	ldr	r3, [pc, #588]	@ (8003fec <LPTIM1_callback+0x330>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d121      	bne.n	8003dea <LPTIM1_callback+0x12e>
 8003da6:	230f      	movs	r3, #15
 8003da8:	18fb      	adds	r3, r7, r3
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d11c      	bne.n	8003dea <LPTIM1_callback+0x12e>
 8003db0:	4b8f      	ldr	r3, [pc, #572]	@ (8003ff0 <LPTIM1_callback+0x334>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d117      	bne.n	8003dea <LPTIM1_callback+0x12e>
 8003dba:	4b8e      	ldr	r3, [pc, #568]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003dbc:	2120      	movs	r1, #32
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f002 fa70 	bl	80062a4 <Get_Status_Bit>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d10f      	bne.n	8003dea <LPTIM1_callback+0x12e>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003dca:	4b88      	ldr	r3, [pc, #544]	@ (8003fec <LPTIM1_callback+0x330>)
 8003dcc:	2205      	movs	r2, #5
 8003dce:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003dd0:	4b86      	ldr	r3, [pc, #536]	@ (8003fec <LPTIM1_callback+0x330>)
 8003dd2:	2208      	movs	r2, #8
 8003dd4:	705a      	strb	r2, [r3, #1]

			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003dd6:	4b87      	ldr	r3, [pc, #540]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003dd8:	2120      	movs	r1, #32
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f002 fa88 	bl	80062f0 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003de0:	4b84      	ldr	r3, [pc, #528]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003de2:	2140      	movs	r1, #64	@ 0x40
 8003de4:	0018      	movs	r0, r3
 8003de6:	f002 fa83 	bl	80062f0 <Clear_Status_Bit>
		}

		//CHECK TAP TEMPO STATE

		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == TAP_MODE)){
 8003dea:	4b80      	ldr	r3, [pc, #512]	@ (8003fec <LPTIM1_callback+0x330>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b05      	cmp	r3, #5
 8003df2:	d004      	beq.n	8003dfe <LPTIM1_callback+0x142>
 8003df4:	4b7d      	ldr	r3, [pc, #500]	@ (8003fec <LPTIM1_callback+0x330>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d11a      	bne.n	8003e34 <LPTIM1_callback+0x178>

			if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8003dfe:	4b7e      	ldr	r3, [pc, #504]	@ (8003ff8 <LPTIM1_callback+0x33c>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d108      	bne.n	8003e1a <LPTIM1_callback+0x15e>

				//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003e08:	2380      	movs	r3, #128	@ 0x80
 8003e0a:	0099      	lsls	r1, r3, #2
 8003e0c:	23a0      	movs	r3, #160	@ 0xa0
 8003e0e:	05db      	lsls	r3, r3, #23
 8003e10:	2200      	movs	r2, #0
 8003e12:	0018      	movs	r0, r3
 8003e14:	f004 fb09 	bl	800842a <HAL_GPIO_WritePin>
 8003e18:	e00c      	b.n	8003e34 <LPTIM1_callback+0x178>
				//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);

			}
			else if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 8003e1a:	4b77      	ldr	r3, [pc, #476]	@ (8003ff8 <LPTIM1_callback+0x33c>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d107      	bne.n	8003e34 <LPTIM1_callback+0x178>

				//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003e24:	2380      	movs	r3, #128	@ 0x80
 8003e26:	0099      	lsls	r1, r3, #2
 8003e28:	23a0      	movs	r3, #160	@ 0xa0
 8003e2a:	05db      	lsls	r3, r3, #23
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f004 fafb 	bl	800842a <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
			}
		}

		//CHECK FOR SPEED POT CHANGES
		if(Get_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out) == YES){
 8003e34:	2380      	movs	r3, #128	@ 0x80
 8003e36:	011a      	lsls	r2, r3, #4
 8003e38:	4b6e      	ldr	r3, [pc, #440]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003e3a:	0011      	movs	r1, r2
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f002 fa31 	bl	80062a4 <Get_Status_Bit>
 8003e42:	0003      	movs	r3, r0
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d000      	beq.n	8003e4a <LPTIM1_callback+0x18e>
 8003e48:	e0c0      	b.n	8003fcc <LPTIM1_callback+0x310>

			Clear_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8003e4a:	2380      	movs	r3, #128	@ 0x80
 8003e4c:	011a      	lsls	r2, r3, #4
 8003e4e:	4b69      	ldr	r3, [pc, #420]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003e50:	0011      	movs	r1, r2
 8003e52:	0018      	movs	r0, r3
 8003e54:	f002 fa4c 	bl	80062f0 <Clear_Status_Bit>

			pots_counter = 0;
 8003e58:	4b68      	ldr	r3, [pc, #416]	@ (8003ffc <LPTIM1_callback+0x340>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	701a      	strb	r2, [r3, #0]

			//PERFORM SPEED POT CHECKING
			if((speed_fsm.current_state.shared_state == PC_MODE) || (speed_fsm.current_state.shared_state == CC_MODE)){
 8003e5e:	4b63      	ldr	r3, [pc, #396]	@ (8003fec <LPTIM1_callback+0x330>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d004      	beq.n	8003e72 <LPTIM1_callback+0x1b6>
 8003e68:	4b60      	ldr	r3, [pc, #384]	@ (8003fec <LPTIM1_callback+0x330>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d105      	bne.n	8003e7e <LPTIM1_callback+0x1c2>

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003e72:	4b63      	ldr	r3, [pc, #396]	@ (8004000 <LPTIM1_callback+0x344>)
 8003e74:	2101      	movs	r1, #1
 8003e76:	0018      	movs	r0, r3
 8003e78:	f7fd faf8 	bl	800146c <Pot_Check>
 8003e7c:	e069      	b.n	8003f52 <LPTIM1_callback+0x296>
			}
			else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003e7e:	4b5b      	ldr	r3, [pc, #364]	@ (8003fec <LPTIM1_callback+0x330>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b06      	cmp	r3, #6
 8003e86:	d117      	bne.n	8003eb8 <LPTIM1_callback+0x1fc>
 8003e88:	4b59      	ldr	r3, [pc, #356]	@ (8003ff0 <LPTIM1_callback+0x334>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d112      	bne.n	8003eb8 <LPTIM1_callback+0x1fc>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003e92:	4b58      	ldr	r3, [pc, #352]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003e94:	2140      	movs	r1, #64	@ 0x40
 8003e96:	0018      	movs	r0, r3
 8003e98:	f002 fa18 	bl	80062cc <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003e9c:	4b55      	ldr	r3, [pc, #340]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003e9e:	2120      	movs	r1, #32
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f002 f9ff 	bl	80062a4 <Get_Status_Bit>
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d152      	bne.n	8003f52 <LPTIM1_callback+0x296>

					Pot_Check(ADCResultsDMA, SPEED_POT);
 8003eac:	4b54      	ldr	r3, [pc, #336]	@ (8004000 <LPTIM1_callback+0x344>)
 8003eae:	2101      	movs	r1, #1
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7fd fadb 	bl	800146c <Pot_Check>
				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003eb6:	e04c      	b.n	8003f52 <LPTIM1_callback+0x296>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003eb8:	4b4c      	ldr	r3, [pc, #304]	@ (8003fec <LPTIM1_callback+0x330>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d12b      	bne.n	8003f1a <LPTIM1_callback+0x25e>
 8003ec2:	4b4b      	ldr	r3, [pc, #300]	@ (8003ff0 <LPTIM1_callback+0x334>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d126      	bne.n	8003f1a <LPTIM1_callback+0x25e>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003ecc:	4b49      	ldr	r3, [pc, #292]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003ece:	2140      	movs	r1, #64	@ 0x40
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f002 f9fb 	bl	80062cc <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003ed6:	4b47      	ldr	r3, [pc, #284]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003ed8:	2120      	movs	r1, #32
 8003eda:	0018      	movs	r0, r3
 8003edc:	f002 f9e2 	bl	80062a4 <Get_Status_Bit>
 8003ee0:	0003      	movs	r3, r0
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d135      	bne.n	8003f52 <LPTIM1_callback+0x296>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003ee6:	2380      	movs	r3, #128	@ 0x80
 8003ee8:	0099      	lsls	r1, r3, #2
 8003eea:	23a0      	movs	r3, #160	@ 0xa0
 8003eec:	05db      	lsls	r3, r3, #23
 8003eee:	2201      	movs	r2, #1
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f004 fa9a 	bl	800842a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003ef6:	4b43      	ldr	r3, [pc, #268]	@ (8004004 <LPTIM1_callback+0x348>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	2140      	movs	r1, #64	@ 0x40
 8003efc:	0018      	movs	r0, r3
 8003efe:	f004 fa94 	bl	800842a <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = NOT_COMPILING;
 8003f02:	4b41      	ldr	r3, [pc, #260]	@ (8004008 <LPTIM1_callback+0x34c>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 0;
 8003f08:	4b40      	ldr	r3, [pc, #256]	@ (800400c <LPTIM1_callback+0x350>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	701a      	strb	r2, [r3, #0]

					Pot_Check(ADCResultsDMA, SPEED_POT);
 8003f0e:	4b3c      	ldr	r3, [pc, #240]	@ (8004000 <LPTIM1_callback+0x344>)
 8003f10:	2101      	movs	r1, #1
 8003f12:	0018      	movs	r0, r3
 8003f14:	f7fd faaa 	bl	800146c <Pot_Check>
				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003f18:	e01b      	b.n	8003f52 <LPTIM1_callback+0x296>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003f1a:	4b34      	ldr	r3, [pc, #208]	@ (8003fec <LPTIM1_callback+0x330>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d116      	bne.n	8003f52 <LPTIM1_callback+0x296>
 8003f24:	4b32      	ldr	r3, [pc, #200]	@ (8003ff0 <LPTIM1_callback+0x334>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d111      	bne.n	8003f52 <LPTIM1_callback+0x296>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003f2e:	4b31      	ldr	r3, [pc, #196]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003f30:	2140      	movs	r1, #64	@ 0x40
 8003f32:	0018      	movs	r0, r3
 8003f34:	f002 f9ca 	bl	80062cc <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003f38:	4b2e      	ldr	r3, [pc, #184]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003f3a:	2120      	movs	r1, #32
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f002 f9b1 	bl	80062a4 <Get_Status_Bit>
 8003f42:	0003      	movs	r3, r0
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d104      	bne.n	8003f52 <LPTIM1_callback+0x296>

					Pot_Check(ADCResultsDMA, SPEED_POT);
 8003f48:	4b2d      	ldr	r3, [pc, #180]	@ (8004000 <LPTIM1_callback+0x344>)
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f7fd fa8d 	bl	800146c <Pot_Check>
				}
			}

			if((waveshape_fsm.current_state == PC_MODE) || (waveshape_fsm.current_state == CC_MODE)){
 8003f52:	4b2f      	ldr	r3, [pc, #188]	@ (8004010 <LPTIM1_callback+0x354>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b03      	cmp	r3, #3
 8003f5a:	d004      	beq.n	8003f66 <LPTIM1_callback+0x2aa>
 8003f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8004010 <LPTIM1_callback+0x354>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d104      	bne.n	8003f70 <LPTIM1_callback+0x2b4>
				Pot_Check(ADCResultsDMA, WAVESHAPE_POT);
 8003f66:	4b26      	ldr	r3, [pc, #152]	@ (8004000 <LPTIM1_callback+0x344>)
 8003f68:	2100      	movs	r1, #0
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f7fd fa7e 	bl	800146c <Pot_Check>
			}
			if((depth_fsm.current_state == PC_MODE) || (depth_fsm.current_state == CC_MODE)){
 8003f70:	4b28      	ldr	r3, [pc, #160]	@ (8004014 <LPTIM1_callback+0x358>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d004      	beq.n	8003f84 <LPTIM1_callback+0x2c8>
 8003f7a:	4b26      	ldr	r3, [pc, #152]	@ (8004014 <LPTIM1_callback+0x358>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d104      	bne.n	8003f8e <LPTIM1_callback+0x2d2>
				Pot_Check(ADCResultsDMA, DEPTH_POT);
 8003f84:	4b1e      	ldr	r3, [pc, #120]	@ (8004000 <LPTIM1_callback+0x344>)
 8003f86:	2102      	movs	r1, #2
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7fd fa6f 	bl	800146c <Pot_Check>
			}
			if((symmetry_fsm.current_state == PC_MODE) || (symmetry_fsm.current_state == CC_MODE)){
 8003f8e:	4b22      	ldr	r3, [pc, #136]	@ (8004018 <LPTIM1_callback+0x35c>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d004      	beq.n	8003fa2 <LPTIM1_callback+0x2e6>
 8003f98:	4b1f      	ldr	r3, [pc, #124]	@ (8004018 <LPTIM1_callback+0x35c>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d104      	bne.n	8003fac <LPTIM1_callback+0x2f0>
				Pot_Check(ADCResultsDMA, SYMMETRY_POT);
 8003fa2:	4b17      	ldr	r3, [pc, #92]	@ (8004000 <LPTIM1_callback+0x344>)
 8003fa4:	2103      	movs	r1, #3
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f7fd fa60 	bl	800146c <Pot_Check>
			}
			if((phase_fsm.current_state == PC_MODE) || (phase_fsm.current_state == CC_MODE)){
 8003fac:	4b1b      	ldr	r3, [pc, #108]	@ (800401c <LPTIM1_callback+0x360>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d004      	beq.n	8003fc0 <LPTIM1_callback+0x304>
 8003fb6:	4b19      	ldr	r3, [pc, #100]	@ (800401c <LPTIM1_callback+0x360>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d136      	bne.n	800402e <LPTIM1_callback+0x372>
				Pot_Check(ADCResultsDMA, PHASE_POT);
 8003fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8004000 <LPTIM1_callback+0x344>)
 8003fc2:	2104      	movs	r1, #4
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f7fd fa51 	bl	800146c <Pot_Check>
 8003fca:	e030      	b.n	800402e <LPTIM1_callback+0x372>
			}

		}
		else{

			if(pots_counter == POT_COUNTER_COUNT){
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003ffc <LPTIM1_callback+0x340>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b40      	cmp	r3, #64	@ 0x40
 8003fd4:	d124      	bne.n	8004020 <LPTIM1_callback+0x364>

				Set_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8003fd6:	2380      	movs	r3, #128	@ 0x80
 8003fd8:	011a      	lsls	r2, r3, #4
 8003fda:	4b06      	ldr	r3, [pc, #24]	@ (8003ff4 <LPTIM1_callback+0x338>)
 8003fdc:	0011      	movs	r1, r2
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f002 f974 	bl	80062cc <Set_Status_Bit>
 8003fe4:	e023      	b.n	800402e <LPTIM1_callback+0x372>
 8003fe6:	46c0      	nop			@ (mov r8, r8)
 8003fe8:	20000025 	.word	0x20000025
 8003fec:	20000430 	.word	0x20000430
 8003ff0:	20000444 	.word	0x20000444
 8003ff4:	20000c3c 	.word	0x20000c3c
 8003ff8:	20000c28 	.word	0x20000c28
 8003ffc:	200004e2 	.word	0x200004e2
 8004000:	20000c4c 	.word	0x20000c4c
 8004004:	50000800 	.word	0x50000800
 8004008:	20000ce8 	.word	0x20000ce8
 800400c:	20000c3a 	.word	0x20000c3a
 8004010:	20000438 	.word	0x20000438
 8004014:	20000434 	.word	0x20000434
 8004018:	2000043c 	.word	0x2000043c
 800401c:	20000440 	.word	0x20000440
			}
			else{

				pots_counter++;
 8004020:	4ba3      	ldr	r3, [pc, #652]	@ (80042b0 <LPTIM1_callback+0x5f4>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	3301      	adds	r3, #1
 8004028:	b2da      	uxtb	r2, r3
 800402a:	4ba1      	ldr	r3, [pc, #644]	@ (80042b0 <LPTIM1_callback+0x5f4>)
 800402c:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	//check if tap tempo switch is depressed
	Check_Tap_Tempo_Switch_State(&tap_tempo_switch_states);
 800402e:	4ba1      	ldr	r3, [pc, #644]	@ (80042b4 <LPTIM1_callback+0x5f8>)
 8004030:	0018      	movs	r0, r3
 8004032:	f7fd fb3b 	bl	80016ac <Check_Tap_Tempo_Switch_State>
	static enum Preset_Selected preset = PRESET_ONE;
	static enum Validate first_time = YES;
	enum LED_States led_state;
	static enum LED_States led_state_saved;

	led_state = LED_fsm.current_state;
 8004036:	230e      	movs	r3, #14
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	4a9f      	ldr	r2, [pc, #636]	@ (80042b8 <LPTIM1_callback+0x5fc>)
 800403c:	7812      	ldrb	r2, [r2, #0]
 800403e:	701a      	strb	r2, [r3, #0]


	if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8004040:	4b9c      	ldr	r3, [pc, #624]	@ (80042b4 <LPTIM1_callback+0x5f8>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b01      	cmp	r3, #1
 8004048:	d000      	beq.n	800404c <LPTIM1_callback+0x390>
 800404a:	e085      	b.n	8004158 <LPTIM1_callback+0x49c>

		if((Get_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_is_Running) == YES)
 800404c:	2380      	movs	r3, #128	@ 0x80
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	4b9a      	ldr	r3, [pc, #616]	@ (80042bc <LPTIM1_callback+0x600>)
 8004052:	0011      	movs	r1, r2
 8004054:	0018      	movs	r0, r3
 8004056:	f002 f925 	bl	80062a4 <Get_Status_Bit>
 800405a:	0003      	movs	r3, r0
 800405c:	2b01      	cmp	r3, #1
 800405e:	d117      	bne.n	8004090 <LPTIM1_callback+0x3d4>
			&& (Get_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_Has_Timed_Out) == NO)
 8004060:	2380      	movs	r3, #128	@ 0x80
 8004062:	019a      	lsls	r2, r3, #6
 8004064:	4b95      	ldr	r3, [pc, #596]	@ (80042bc <LPTIM1_callback+0x600>)
 8004066:	0011      	movs	r1, r2
 8004068:	0018      	movs	r0, r3
 800406a:	f002 f91b 	bl	80062a4 <Get_Status_Bit>
 800406e:	1e03      	subs	r3, r0, #0
 8004070:	d10e      	bne.n	8004090 <LPTIM1_callback+0x3d4>
			&& (preset_save_mode_is_inactive == NO)){
 8004072:	4b93      	ldr	r3, [pc, #588]	@ (80042c0 <LPTIM1_callback+0x604>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d109      	bne.n	8004090 <LPTIM1_callback+0x3d4>

			Clear_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_is_Running);
 800407c:	2380      	movs	r3, #128	@ 0x80
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	4b8e      	ldr	r3, [pc, #568]	@ (80042bc <LPTIM1_callback+0x600>)
 8004082:	0011      	movs	r1, r2
 8004084:	0018      	movs	r0, r3
 8004086:	f002 f933 	bl	80062f0 <Clear_Status_Bit>
			advance_idle_counter = 0;
 800408a:	4b8e      	ldr	r3, [pc, #568]	@ (80042c4 <LPTIM1_callback+0x608>)
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
		}

		if(depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT){
 8004090:	4b8d      	ldr	r3, [pc, #564]	@ (80042c8 <LPTIM1_callback+0x60c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a8d      	ldr	r2, [pc, #564]	@ (80042cc <LPTIM1_callback+0x610>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d805      	bhi.n	80040a6 <LPTIM1_callback+0x3ea>

			//save count will always be less than advance count
			depressed_num++;
 800409a:	4b8b      	ldr	r3, [pc, #556]	@ (80042c8 <LPTIM1_callback+0x60c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	4b89      	ldr	r3, [pc, #548]	@ (80042c8 <LPTIM1_callback+0x60c>)
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	e0fa      	b.n	800429c <LPTIM1_callback+0x5e0>
		}
		else{

			preset_save_mode_is_inactive = NO;
 80040a6:	4b86      	ldr	r3, [pc, #536]	@ (80042c0 <LPTIM1_callback+0x604>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	701a      	strb	r2, [r3, #0]

			depressed_num = 0;
 80040ac:	4b86      	ldr	r3, [pc, #536]	@ (80042c8 <LPTIM1_callback+0x60c>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]

			if(first_time == YES){
 80040b2:	4b87      	ldr	r3, [pc, #540]	@ (80042d0 <LPTIM1_callback+0x614>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d107      	bne.n	80040ca <LPTIM1_callback+0x40e>

				first_time = NO;
 80040ba:	4b85      	ldr	r3, [pc, #532]	@ (80042d0 <LPTIM1_callback+0x614>)
 80040bc:	2200      	movs	r2, #0
 80040be:	701a      	strb	r2, [r3, #0]
				led_state_saved = led_state;
 80040c0:	4b84      	ldr	r3, [pc, #528]	@ (80042d4 <LPTIM1_callback+0x618>)
 80040c2:	220e      	movs	r2, #14
 80040c4:	18ba      	adds	r2, r7, r2
 80040c6:	7812      	ldrb	r2, [r2, #0]
 80040c8:	701a      	strb	r2, [r3, #0]
			}

			if(preset == PRESET_ONE){
 80040ca:	4b83      	ldr	r3, [pc, #524]	@ (80042d8 <LPTIM1_callback+0x61c>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d108      	bne.n	80040e4 <LPTIM1_callback+0x428>

				set_LED_to_state(&LED_fsm, LED_ONE_BLINK);
 80040d2:	4b79      	ldr	r3, [pc, #484]	@ (80042b8 <LPTIM1_callback+0x5fc>)
 80040d4:	2103      	movs	r1, #3
 80040d6:	0018      	movs	r0, r3
 80040d8:	f7fc feac 	bl	8000e34 <set_LED_to_state>
				preset = PRESET_TWO;
 80040dc:	4b7e      	ldr	r3, [pc, #504]	@ (80042d8 <LPTIM1_callback+0x61c>)
 80040de:	2202      	movs	r2, #2
 80040e0:	701a      	strb	r2, [r3, #0]
 80040e2:	e025      	b.n	8004130 <LPTIM1_callback+0x474>
			}
			else if(preset == PRESET_TWO){
 80040e4:	4b7c      	ldr	r3, [pc, #496]	@ (80042d8 <LPTIM1_callback+0x61c>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d108      	bne.n	80040fe <LPTIM1_callback+0x442>

				set_LED_to_state(&LED_fsm, LED_TWO_BLINK);
 80040ec:	4b72      	ldr	r3, [pc, #456]	@ (80042b8 <LPTIM1_callback+0x5fc>)
 80040ee:	2104      	movs	r1, #4
 80040f0:	0018      	movs	r0, r3
 80040f2:	f7fc fe9f 	bl	8000e34 <set_LED_to_state>
				preset = PRESET_THREE;
 80040f6:	4b78      	ldr	r3, [pc, #480]	@ (80042d8 <LPTIM1_callback+0x61c>)
 80040f8:	2203      	movs	r2, #3
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	e018      	b.n	8004130 <LPTIM1_callback+0x474>
			}
			else if(preset == PRESET_THREE){
 80040fe:	4b76      	ldr	r3, [pc, #472]	@ (80042d8 <LPTIM1_callback+0x61c>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b03      	cmp	r3, #3
 8004104:	d108      	bne.n	8004118 <LPTIM1_callback+0x45c>

				set_LED_to_state(&LED_fsm, LED_THREE_BLINK);
 8004106:	4b6c      	ldr	r3, [pc, #432]	@ (80042b8 <LPTIM1_callback+0x5fc>)
 8004108:	2105      	movs	r1, #5
 800410a:	0018      	movs	r0, r3
 800410c:	f7fc fe92 	bl	8000e34 <set_LED_to_state>
				preset = PRESET_FOUR;
 8004110:	4b71      	ldr	r3, [pc, #452]	@ (80042d8 <LPTIM1_callback+0x61c>)
 8004112:	2204      	movs	r2, #4
 8004114:	701a      	strb	r2, [r3, #0]
 8004116:	e00b      	b.n	8004130 <LPTIM1_callback+0x474>
			}
			else if(preset == PRESET_FOUR){
 8004118:	4b6f      	ldr	r3, [pc, #444]	@ (80042d8 <LPTIM1_callback+0x61c>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b04      	cmp	r3, #4
 800411e:	d107      	bne.n	8004130 <LPTIM1_callback+0x474>

				set_LED_to_state(&LED_fsm, LED_FOUR_BLINK);
 8004120:	4b65      	ldr	r3, [pc, #404]	@ (80042b8 <LPTIM1_callback+0x5fc>)
 8004122:	2106      	movs	r1, #6
 8004124:	0018      	movs	r0, r3
 8004126:	f7fc fe85 	bl	8000e34 <set_LED_to_state>
				preset = PRESET_ONE;
 800412a:	4b6b      	ldr	r3, [pc, #428]	@ (80042d8 <LPTIM1_callback+0x61c>)
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]
			}

			if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8004130:	4b6a      	ldr	r3, [pc, #424]	@ (80042dc <LPTIM1_callback+0x620>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b05      	cmp	r3, #5
 8004138:	d000      	beq.n	800413c <LPTIM1_callback+0x480>
 800413a:	e0af      	b.n	800429c <LPTIM1_callback+0x5e0>

				union Speed_FSM_States curr_state = speed_fsm.current_state;
 800413c:	210c      	movs	r1, #12
 800413e:	187b      	adds	r3, r7, r1
 8004140:	4a66      	ldr	r2, [pc, #408]	@ (80042dc <LPTIM1_callback+0x620>)
 8004142:	7812      	ldrb	r2, [r2, #0]
 8004144:	701a      	strb	r2, [r3, #0]
				speed_fsm.current_state = speed_fsm.prev_state;
 8004146:	4b65      	ldr	r3, [pc, #404]	@ (80042dc <LPTIM1_callback+0x620>)
 8004148:	4a64      	ldr	r2, [pc, #400]	@ (80042dc <LPTIM1_callback+0x620>)
 800414a:	7852      	ldrb	r2, [r2, #1]
 800414c:	701a      	strb	r2, [r3, #0]
				speed_fsm.prev_state = curr_state;
 800414e:	4b63      	ldr	r3, [pc, #396]	@ (80042dc <LPTIM1_callback+0x620>)
 8004150:	187a      	adds	r2, r7, r1
 8004152:	7812      	ldrb	r2, [r2, #0]
 8004154:	705a      	strb	r2, [r3, #1]
 8004156:	e0a1      	b.n	800429c <LPTIM1_callback+0x5e0>
			}
		}
	}
	else{

		if((preset_save_mode_is_inactive == NO)){
 8004158:	4b59      	ldr	r3, [pc, #356]	@ (80042c0 <LPTIM1_callback+0x604>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d118      	bne.n	8004194 <LPTIM1_callback+0x4d8>

			if(Get_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_is_Running) == NO){
 8004162:	2380      	movs	r3, #128	@ 0x80
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	4b55      	ldr	r3, [pc, #340]	@ (80042bc <LPTIM1_callback+0x600>)
 8004168:	0011      	movs	r1, r2
 800416a:	0018      	movs	r0, r3
 800416c:	f002 f89a 	bl	80062a4 <Get_Status_Bit>
 8004170:	1e03      	subs	r3, r0, #0
 8004172:	d10f      	bne.n	8004194 <LPTIM1_callback+0x4d8>

				Set_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_is_Running);
 8004174:	2380      	movs	r3, #128	@ 0x80
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	4b50      	ldr	r3, [pc, #320]	@ (80042bc <LPTIM1_callback+0x600>)
 800417a:	0011      	movs	r1, r2
 800417c:	0018      	movs	r0, r3
 800417e:	f002 f8a5 	bl	80062cc <Set_Status_Bit>

				depressed_num = 0;
 8004182:	4b51      	ldr	r3, [pc, #324]	@ (80042c8 <LPTIM1_callback+0x60c>)
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]

				//debug
				HAL_GPIO_WritePin(MONITOR_2_GPIO_Port, MONITOR_2_Pin, 1);
 8004188:	4b55      	ldr	r3, [pc, #340]	@ (80042e0 <LPTIM1_callback+0x624>)
 800418a:	2201      	movs	r2, #1
 800418c:	2110      	movs	r1, #16
 800418e:	0018      	movs	r0, r3
 8004190:	f004 f94b 	bl	800842a <HAL_GPIO_WritePin>
				//debug end
			}
		}

		if(Get_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_Has_Timed_Out) == YES){
 8004194:	2380      	movs	r3, #128	@ 0x80
 8004196:	019a      	lsls	r2, r3, #6
 8004198:	4b48      	ldr	r3, [pc, #288]	@ (80042bc <LPTIM1_callback+0x600>)
 800419a:	0011      	movs	r1, r2
 800419c:	0018      	movs	r0, r3
 800419e:	f002 f881 	bl	80062a4 <Get_Status_Bit>
 80041a2:	0003      	movs	r3, r0
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d164      	bne.n	8004272 <LPTIM1_callback+0x5b6>

			Clear_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_Has_Timed_Out);
 80041a8:	2380      	movs	r3, #128	@ 0x80
 80041aa:	019a      	lsls	r2, r3, #6
 80041ac:	4b43      	ldr	r3, [pc, #268]	@ (80042bc <LPTIM1_callback+0x600>)
 80041ae:	0011      	movs	r1, r2
 80041b0:	0018      	movs	r0, r3
 80041b2:	f002 f89d 	bl	80062f0 <Clear_Status_Bit>
			advance_idle_counter = 0;
 80041b6:	4b43      	ldr	r3, [pc, #268]	@ (80042c4 <LPTIM1_callback+0x608>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]

			//debug
			HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
 80041bc:	4b48      	ldr	r3, [pc, #288]	@ (80042e0 <LPTIM1_callback+0x624>)
 80041be:	2201      	movs	r2, #1
 80041c0:	2140      	movs	r1, #64	@ 0x40
 80041c2:	0018      	movs	r0, r3
 80041c4:	f004 f931 	bl	800842a <HAL_GPIO_WritePin>
			//debug end

			if((depressed_num >= TAP_TEMPO_SWITCH_PRESET_SAVE_COUNT)
 80041c8:	4b3f      	ldr	r3, [pc, #252]	@ (80042c8 <LPTIM1_callback+0x60c>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	23fa      	movs	r3, #250	@ 0xfa
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d34e      	bcc.n	8004272 <LPTIM1_callback+0x5b6>
				&& (depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT)
 80041d4:	4b3c      	ldr	r3, [pc, #240]	@ (80042c8 <LPTIM1_callback+0x60c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a3c      	ldr	r2, [pc, #240]	@ (80042cc <LPTIM1_callback+0x610>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d849      	bhi.n	8004272 <LPTIM1_callback+0x5b6>
				&& (preset_save_mode_is_inactive == NO)
 80041de:	4b38      	ldr	r3, [pc, #224]	@ (80042c0 <LPTIM1_callback+0x604>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d144      	bne.n	8004272 <LPTIM1_callback+0x5b6>
				&& (pin_state == 1)){
 80041e8:	230f      	movs	r3, #15
 80041ea:	18fb      	adds	r3, r7, r3
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d13f      	bne.n	8004272 <LPTIM1_callback+0x5b6>

				//led confirm - overwrite prev state with saved state
				LED_fsm.prev_state = led_state_saved;
 80041f2:	4b38      	ldr	r3, [pc, #224]	@ (80042d4 <LPTIM1_callback+0x618>)
 80041f4:	781a      	ldrb	r2, [r3, #0]
 80041f6:	4b30      	ldr	r3, [pc, #192]	@ (80042b8 <LPTIM1_callback+0x5fc>)
 80041f8:	705a      	strb	r2, [r3, #1]
				set_LED_to_state(&LED_fsm, LED_CONFIRM);
 80041fa:	4b2f      	ldr	r3, [pc, #188]	@ (80042b8 <LPTIM1_callback+0x5fc>)
 80041fc:	2107      	movs	r1, #7
 80041fe:	0018      	movs	r0, r3
 8004200:	f7fc fe18 	bl	8000e34 <set_LED_to_state>

				//reset
				first_time = YES;
 8004204:	4b32      	ldr	r3, [pc, #200]	@ (80042d0 <LPTIM1_callback+0x614>)
 8004206:	2201      	movs	r2, #1
 8004208:	701a      	strb	r2, [r3, #0]
				preset_save_mode_is_inactive = YES;
 800420a:	4b2d      	ldr	r3, [pc, #180]	@ (80042c0 <LPTIM1_callback+0x604>)
 800420c:	2201      	movs	r2, #1
 800420e:	701a      	strb	r2, [r3, #0]

				//get correct preset, as it will be 'off by one'
				if(preset == PRESET_ONE){
 8004210:	4b31      	ldr	r3, [pc, #196]	@ (80042d8 <LPTIM1_callback+0x61c>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d103      	bne.n	8004220 <LPTIM1_callback+0x564>

					preset = PRESET_FOUR;
 8004218:	4b2f      	ldr	r3, [pc, #188]	@ (80042d8 <LPTIM1_callback+0x61c>)
 800421a:	2204      	movs	r2, #4
 800421c:	701a      	strb	r2, [r3, #0]
 800421e:	e016      	b.n	800424e <LPTIM1_callback+0x592>
				}
				else if(preset == PRESET_TWO){
 8004220:	4b2d      	ldr	r3, [pc, #180]	@ (80042d8 <LPTIM1_callback+0x61c>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b02      	cmp	r3, #2
 8004226:	d103      	bne.n	8004230 <LPTIM1_callback+0x574>

					preset = PRESET_ONE;
 8004228:	4b2b      	ldr	r3, [pc, #172]	@ (80042d8 <LPTIM1_callback+0x61c>)
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	e00e      	b.n	800424e <LPTIM1_callback+0x592>
				}
				else if(preset == PRESET_THREE){
 8004230:	4b29      	ldr	r3, [pc, #164]	@ (80042d8 <LPTIM1_callback+0x61c>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b03      	cmp	r3, #3
 8004236:	d103      	bne.n	8004240 <LPTIM1_callback+0x584>

					preset = PRESET_TWO;
 8004238:	4b27      	ldr	r3, [pc, #156]	@ (80042d8 <LPTIM1_callback+0x61c>)
 800423a:	2202      	movs	r2, #2
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	e006      	b.n	800424e <LPTIM1_callback+0x592>
				}
				else if(preset == PRESET_FOUR){
 8004240:	4b25      	ldr	r3, [pc, #148]	@ (80042d8 <LPTIM1_callback+0x61c>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b04      	cmp	r3, #4
 8004246:	d102      	bne.n	800424e <LPTIM1_callback+0x592>

					preset = PRESET_THREE;
 8004248:	4b23      	ldr	r3, [pc, #140]	@ (80042d8 <LPTIM1_callback+0x61c>)
 800424a:	2203      	movs	r2, #3
 800424c:	701a      	strb	r2, [r3, #0]
				}

				//convert running params to preset, and update user preset and user preset used
				Store_Params_as_User_Preset(preset,
 800424e:	4b22      	ldr	r3, [pc, #136]	@ (80042d8 <LPTIM1_callback+0x61c>)
 8004250:	7818      	ldrb	r0, [r3, #0]
 8004252:	4c24      	ldr	r4, [pc, #144]	@ (80042e4 <LPTIM1_callback+0x628>)
 8004254:	4a24      	ldr	r2, [pc, #144]	@ (80042e8 <LPTIM1_callback+0x62c>)
 8004256:	4925      	ldr	r1, [pc, #148]	@ (80042ec <LPTIM1_callback+0x630>)
 8004258:	4b25      	ldr	r3, [pc, #148]	@ (80042f0 <LPTIM1_callback+0x634>)
 800425a:	9301      	str	r3, [sp, #4]
 800425c:	4b25      	ldr	r3, [pc, #148]	@ (80042f4 <LPTIM1_callback+0x638>)
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	0023      	movs	r3, r4
 8004262:	f7fc fdb9 	bl	8000dd8 <Store_Params_as_User_Preset>
											user_presets_array,
											factory_presets_array,
											presets_converted_array);

				//set the current pot mode to PC_MODE and update current preset active
				Set_All_Pots_to_PC_Mode();
 8004266:	f7fc fd7f 	bl	8000d68 <Set_All_Pots_to_PC_Mode>
				preset_selected = preset;
 800426a:	4b1b      	ldr	r3, [pc, #108]	@ (80042d8 <LPTIM1_callback+0x61c>)
 800426c:	781a      	ldrb	r2, [r3, #0]
 800426e:	4b22      	ldr	r3, [pc, #136]	@ (80042f8 <LPTIM1_callback+0x63c>)
 8004270:	701a      	strb	r2, [r3, #0]
				//@TODO

			}
		}

		depressed_num = 0; //important if switch is released early
 8004272:	4b15      	ldr	r3, [pc, #84]	@ (80042c8 <LPTIM1_callback+0x60c>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]

		if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8004278:	4b18      	ldr	r3, [pc, #96]	@ (80042dc <LPTIM1_callback+0x620>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b05      	cmp	r3, #5
 8004280:	d10c      	bne.n	800429c <LPTIM1_callback+0x5e0>

			union Speed_FSM_States curr_state = speed_fsm.current_state;
 8004282:	2108      	movs	r1, #8
 8004284:	187b      	adds	r3, r7, r1
 8004286:	4a15      	ldr	r2, [pc, #84]	@ (80042dc <LPTIM1_callback+0x620>)
 8004288:	7812      	ldrb	r2, [r2, #0]
 800428a:	701a      	strb	r2, [r3, #0]
			speed_fsm.current_state = speed_fsm.prev_state;
 800428c:	4b13      	ldr	r3, [pc, #76]	@ (80042dc <LPTIM1_callback+0x620>)
 800428e:	4a13      	ldr	r2, [pc, #76]	@ (80042dc <LPTIM1_callback+0x620>)
 8004290:	7852      	ldrb	r2, [r2, #1]
 8004292:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state = curr_state;
 8004294:	4b11      	ldr	r3, [pc, #68]	@ (80042dc <LPTIM1_callback+0x620>)
 8004296:	187a      	adds	r2, r7, r1
 8004298:	7812      	ldrb	r2, [r2, #0]
 800429a:	705a      	strb	r2, [r3, #1]
		}
	}

	//SET TIMER TRIGGER
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 800429c:	4b17      	ldr	r3, [pc, #92]	@ (80042fc <LPTIM1_callback+0x640>)
 800429e:	22fa      	movs	r2, #250	@ 0xfa
 80042a0:	21fa      	movs	r1, #250	@ 0xfa
 80042a2:	0018      	movs	r0, r3
 80042a4:	f004 f9b8 	bl	8008618 <HAL_LPTIM_SetOnce_Start_IT>

}
 80042a8:	46c0      	nop			@ (mov r8, r8)
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b004      	add	sp, #16
 80042ae:	bdb0      	pop	{r4, r5, r7, pc}
 80042b0:	200004e2 	.word	0x200004e2
 80042b4:	20000c28 	.word	0x20000c28
 80042b8:	20000448 	.word	0x20000448
 80042bc:	20000c3c 	.word	0x20000c3c
 80042c0:	20000025 	.word	0x20000025
 80042c4:	20000c48 	.word	0x20000c48
 80042c8:	20000c2c 	.word	0x20000c2c
 80042cc:	000009c3 	.word	0x000009c3
 80042d0:	20000026 	.word	0x20000026
 80042d4:	20000c30 	.word	0x20000c30
 80042d8:	20000027 	.word	0x20000027
 80042dc:	20000430 	.word	0x20000430
 80042e0:	50000400 	.word	0x50000400
 80042e4:	20000484 	.word	0x20000484
 80042e8:	200004c0 	.word	0x200004c0
 80042ec:	20000c58 	.word	0x20000c58
 80042f0:	20000494 	.word	0x20000494
 80042f4:	20000474 	.word	0x20000474
 80042f8:	200004bc 	.word	0x200004bc
 80042fc:	20000bcc 	.word	0x20000bcc

08004300 <TIM17_callback>:

void TIM17_callback(TIM_HandleTypeDef *htim){
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]


}
 8004308:	46c0      	nop			@ (mov r8, r8)
 800430a:	46bd      	mov	sp, r7
 800430c:	b002      	add	sp, #8
 800430e:	bd80      	pop	{r7, pc}

08004310 <TIM14_callback>:

void TIM14_callback(TIM_HandleTypeDef *htim){
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]

	if(LED_fsm.current_state == LED_ON){
 8004318:	4bd1      	ldr	r3, [pc, #836]	@ (8004660 <TIM14_callback+0x350>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d106      	bne.n	8004330 <TIM14_callback+0x20>

		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004322:	4bd0      	ldr	r3, [pc, #832]	@ (8004664 <TIM14_callback+0x354>)
 8004324:	2201      	movs	r2, #1
 8004326:	2140      	movs	r1, #64	@ 0x40
 8004328:	0018      	movs	r0, r3
 800432a:	f004 f87e 	bl	800842a <HAL_GPIO_WritePin>

				set_LED_to_state(&LED_fsm, prev);
			}
		}
	}
}
 800432e:	e1c3      	b.n	80046b8 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_OFF){
 8004330:	4bcb      	ldr	r3, [pc, #812]	@ (8004660 <TIM14_callback+0x350>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b01      	cmp	r3, #1
 8004338:	d106      	bne.n	8004348 <TIM14_callback+0x38>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800433a:	4bca      	ldr	r3, [pc, #808]	@ (8004664 <TIM14_callback+0x354>)
 800433c:	2200      	movs	r2, #0
 800433e:	2140      	movs	r1, #64	@ 0x40
 8004340:	0018      	movs	r0, r3
 8004342:	f004 f872 	bl	800842a <HAL_GPIO_WritePin>
}
 8004346:	e1b7      	b.n	80046b8 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_ONE_BLINK){
 8004348:	4bc5      	ldr	r3, [pc, #788]	@ (8004660 <TIM14_callback+0x350>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b03      	cmp	r3, #3
 8004350:	d133      	bne.n	80043ba <TIM14_callback+0xaa>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004352:	4bc5      	ldr	r3, [pc, #788]	@ (8004668 <TIM14_callback+0x358>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2200      	movs	r2, #0
 8004358:	625a      	str	r2, [r3, #36]	@ 0x24
		if(LED_counter == 0){
 800435a:	4bc4      	ldr	r3, [pc, #784]	@ (800466c <TIM14_callback+0x35c>)
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10d      	bne.n	8004380 <TIM14_callback+0x70>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004364:	4bbf      	ldr	r3, [pc, #764]	@ (8004664 <TIM14_callback+0x354>)
 8004366:	2201      	movs	r2, #1
 8004368:	2140      	movs	r1, #64	@ 0x40
 800436a:	0018      	movs	r0, r3
 800436c:	f004 f85d 	bl	800842a <HAL_GPIO_WritePin>
			LED_counter++;
 8004370:	4bbe      	ldr	r3, [pc, #760]	@ (800466c <TIM14_callback+0x35c>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	3301      	adds	r3, #1
 8004378:	b2da      	uxtb	r2, r3
 800437a:	4bbc      	ldr	r3, [pc, #752]	@ (800466c <TIM14_callback+0x35c>)
 800437c:	701a      	strb	r2, [r3, #0]
}
 800437e:	e19b      	b.n	80046b8 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 1)){
 8004380:	4bba      	ldr	r3, [pc, #744]	@ (800466c <TIM14_callback+0x35c>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b04      	cmp	r3, #4
 8004388:	d900      	bls.n	800438c <TIM14_callback+0x7c>
 800438a:	e195      	b.n	80046b8 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800438c:	4bb5      	ldr	r3, [pc, #724]	@ (8004664 <TIM14_callback+0x354>)
 800438e:	2200      	movs	r2, #0
 8004390:	2140      	movs	r1, #64	@ 0x40
 8004392:	0018      	movs	r0, r3
 8004394:	f004 f849 	bl	800842a <HAL_GPIO_WritePin>
			LED_counter++;
 8004398:	4bb4      	ldr	r3, [pc, #720]	@ (800466c <TIM14_callback+0x35c>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	3301      	adds	r3, #1
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	4bb2      	ldr	r3, [pc, #712]	@ (800466c <TIM14_callback+0x35c>)
 80043a4:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 1){
 80043a6:	4bb1      	ldr	r3, [pc, #708]	@ (800466c <TIM14_callback+0x35c>)
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b05      	cmp	r3, #5
 80043ae:	d000      	beq.n	80043b2 <TIM14_callback+0xa2>
 80043b0:	e182      	b.n	80046b8 <TIM14_callback+0x3a8>
				LED_counter = 0;
 80043b2:	4bae      	ldr	r3, [pc, #696]	@ (800466c <TIM14_callback+0x35c>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	701a      	strb	r2, [r3, #0]
}
 80043b8:	e17e      	b.n	80046b8 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_TWO_BLINK){
 80043ba:	4ba9      	ldr	r3, [pc, #676]	@ (8004660 <TIM14_callback+0x350>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d156      	bne.n	8004472 <TIM14_callback+0x162>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 80043c4:	4ba8      	ldr	r3, [pc, #672]	@ (8004668 <TIM14_callback+0x358>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2200      	movs	r2, #0
 80043ca:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 3) && (LED_counter % 2 == 0)){
 80043cc:	4ba7      	ldr	r3, [pc, #668]	@ (800466c <TIM14_callback+0x35c>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d815      	bhi.n	8004402 <TIM14_callback+0xf2>
 80043d6:	4ba5      	ldr	r3, [pc, #660]	@ (800466c <TIM14_callback+0x35c>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2201      	movs	r2, #1
 80043de:	4013      	ands	r3, r2
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10d      	bne.n	8004402 <TIM14_callback+0xf2>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80043e6:	4b9f      	ldr	r3, [pc, #636]	@ (8004664 <TIM14_callback+0x354>)
 80043e8:	2201      	movs	r2, #1
 80043ea:	2140      	movs	r1, #64	@ 0x40
 80043ec:	0018      	movs	r0, r3
 80043ee:	f004 f81c 	bl	800842a <HAL_GPIO_WritePin>
			LED_counter++;
 80043f2:	4b9e      	ldr	r3, [pc, #632]	@ (800466c <TIM14_callback+0x35c>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	3301      	adds	r3, #1
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	4b9b      	ldr	r3, [pc, #620]	@ (800466c <TIM14_callback+0x35c>)
 80043fe:	701a      	strb	r2, [r3, #0]
 8004400:	e15a      	b.n	80046b8 <TIM14_callback+0x3a8>
		else if((LED_counter < 3) && (LED_counter % 2 == 1)){
 8004402:	4b9a      	ldr	r3, [pc, #616]	@ (800466c <TIM14_callback+0x35c>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d815      	bhi.n	8004438 <TIM14_callback+0x128>
 800440c:	4b97      	ldr	r3, [pc, #604]	@ (800466c <TIM14_callback+0x35c>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2201      	movs	r2, #1
 8004414:	4013      	ands	r3, r2
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	d10d      	bne.n	8004438 <TIM14_callback+0x128>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800441c:	4b91      	ldr	r3, [pc, #580]	@ (8004664 <TIM14_callback+0x354>)
 800441e:	2200      	movs	r2, #0
 8004420:	2140      	movs	r1, #64	@ 0x40
 8004422:	0018      	movs	r0, r3
 8004424:	f004 f801 	bl	800842a <HAL_GPIO_WritePin>
			LED_counter++;
 8004428:	4b90      	ldr	r3, [pc, #576]	@ (800466c <TIM14_callback+0x35c>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	3301      	adds	r3, #1
 8004430:	b2da      	uxtb	r2, r3
 8004432:	4b8e      	ldr	r3, [pc, #568]	@ (800466c <TIM14_callback+0x35c>)
 8004434:	701a      	strb	r2, [r3, #0]
 8004436:	e13f      	b.n	80046b8 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 3)){
 8004438:	4b8c      	ldr	r3, [pc, #560]	@ (800466c <TIM14_callback+0x35c>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b06      	cmp	r3, #6
 8004440:	d900      	bls.n	8004444 <TIM14_callback+0x134>
 8004442:	e139      	b.n	80046b8 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004444:	4b87      	ldr	r3, [pc, #540]	@ (8004664 <TIM14_callback+0x354>)
 8004446:	2200      	movs	r2, #0
 8004448:	2140      	movs	r1, #64	@ 0x40
 800444a:	0018      	movs	r0, r3
 800444c:	f003 ffed 	bl	800842a <HAL_GPIO_WritePin>
			LED_counter++;
 8004450:	4b86      	ldr	r3, [pc, #536]	@ (800466c <TIM14_callback+0x35c>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	b2db      	uxtb	r3, r3
 8004456:	3301      	adds	r3, #1
 8004458:	b2da      	uxtb	r2, r3
 800445a:	4b84      	ldr	r3, [pc, #528]	@ (800466c <TIM14_callback+0x35c>)
 800445c:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 3){
 800445e:	4b83      	ldr	r3, [pc, #524]	@ (800466c <TIM14_callback+0x35c>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b07      	cmp	r3, #7
 8004466:	d000      	beq.n	800446a <TIM14_callback+0x15a>
 8004468:	e126      	b.n	80046b8 <TIM14_callback+0x3a8>
				LED_counter = 0;
 800446a:	4b80      	ldr	r3, [pc, #512]	@ (800466c <TIM14_callback+0x35c>)
 800446c:	2200      	movs	r2, #0
 800446e:	701a      	strb	r2, [r3, #0]
}
 8004470:	e122      	b.n	80046b8 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_THREE_BLINK){
 8004472:	4b7b      	ldr	r3, [pc, #492]	@ (8004660 <TIM14_callback+0x350>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b05      	cmp	r3, #5
 800447a:	d156      	bne.n	800452a <TIM14_callback+0x21a>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 800447c:	4b7a      	ldr	r3, [pc, #488]	@ (8004668 <TIM14_callback+0x358>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2200      	movs	r2, #0
 8004482:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 5) && (LED_counter % 2 == 0)){
 8004484:	4b79      	ldr	r3, [pc, #484]	@ (800466c <TIM14_callback+0x35c>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b04      	cmp	r3, #4
 800448c:	d815      	bhi.n	80044ba <TIM14_callback+0x1aa>
 800448e:	4b77      	ldr	r3, [pc, #476]	@ (800466c <TIM14_callback+0x35c>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2201      	movs	r2, #1
 8004496:	4013      	ands	r3, r2
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10d      	bne.n	80044ba <TIM14_callback+0x1aa>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800449e:	4b71      	ldr	r3, [pc, #452]	@ (8004664 <TIM14_callback+0x354>)
 80044a0:	2201      	movs	r2, #1
 80044a2:	2140      	movs	r1, #64	@ 0x40
 80044a4:	0018      	movs	r0, r3
 80044a6:	f003 ffc0 	bl	800842a <HAL_GPIO_WritePin>
			LED_counter++;
 80044aa:	4b70      	ldr	r3, [pc, #448]	@ (800466c <TIM14_callback+0x35c>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	3301      	adds	r3, #1
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	4b6d      	ldr	r3, [pc, #436]	@ (800466c <TIM14_callback+0x35c>)
 80044b6:	701a      	strb	r2, [r3, #0]
 80044b8:	e0fe      	b.n	80046b8 <TIM14_callback+0x3a8>
		else if((LED_counter < 5) && (LED_counter % 2 == 1)){
 80044ba:	4b6c      	ldr	r3, [pc, #432]	@ (800466c <TIM14_callback+0x35c>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d815      	bhi.n	80044f0 <TIM14_callback+0x1e0>
 80044c4:	4b69      	ldr	r3, [pc, #420]	@ (800466c <TIM14_callback+0x35c>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2201      	movs	r2, #1
 80044cc:	4013      	ands	r3, r2
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d10d      	bne.n	80044f0 <TIM14_callback+0x1e0>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80044d4:	4b63      	ldr	r3, [pc, #396]	@ (8004664 <TIM14_callback+0x354>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	2140      	movs	r1, #64	@ 0x40
 80044da:	0018      	movs	r0, r3
 80044dc:	f003 ffa5 	bl	800842a <HAL_GPIO_WritePin>
			LED_counter++;
 80044e0:	4b62      	ldr	r3, [pc, #392]	@ (800466c <TIM14_callback+0x35c>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	3301      	adds	r3, #1
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	4b60      	ldr	r3, [pc, #384]	@ (800466c <TIM14_callback+0x35c>)
 80044ec:	701a      	strb	r2, [r3, #0]
 80044ee:	e0e3      	b.n	80046b8 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 5)){
 80044f0:	4b5e      	ldr	r3, [pc, #376]	@ (800466c <TIM14_callback+0x35c>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d900      	bls.n	80044fc <TIM14_callback+0x1ec>
 80044fa:	e0dd      	b.n	80046b8 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80044fc:	4b59      	ldr	r3, [pc, #356]	@ (8004664 <TIM14_callback+0x354>)
 80044fe:	2200      	movs	r2, #0
 8004500:	2140      	movs	r1, #64	@ 0x40
 8004502:	0018      	movs	r0, r3
 8004504:	f003 ff91 	bl	800842a <HAL_GPIO_WritePin>
			LED_counter++;
 8004508:	4b58      	ldr	r3, [pc, #352]	@ (800466c <TIM14_callback+0x35c>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	b2db      	uxtb	r3, r3
 800450e:	3301      	adds	r3, #1
 8004510:	b2da      	uxtb	r2, r3
 8004512:	4b56      	ldr	r3, [pc, #344]	@ (800466c <TIM14_callback+0x35c>)
 8004514:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 5){
 8004516:	4b55      	ldr	r3, [pc, #340]	@ (800466c <TIM14_callback+0x35c>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b09      	cmp	r3, #9
 800451e:	d000      	beq.n	8004522 <TIM14_callback+0x212>
 8004520:	e0ca      	b.n	80046b8 <TIM14_callback+0x3a8>
				LED_counter = 0;
 8004522:	4b52      	ldr	r3, [pc, #328]	@ (800466c <TIM14_callback+0x35c>)
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
}
 8004528:	e0c6      	b.n	80046b8 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_FOUR_BLINK){
 800452a:	4b4d      	ldr	r3, [pc, #308]	@ (8004660 <TIM14_callback+0x350>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b06      	cmp	r3, #6
 8004532:	d156      	bne.n	80045e2 <TIM14_callback+0x2d2>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004534:	4b4c      	ldr	r3, [pc, #304]	@ (8004668 <TIM14_callback+0x358>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2200      	movs	r2, #0
 800453a:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 7) && (LED_counter % 2 == 0)){
 800453c:	4b4b      	ldr	r3, [pc, #300]	@ (800466c <TIM14_callback+0x35c>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b06      	cmp	r3, #6
 8004544:	d815      	bhi.n	8004572 <TIM14_callback+0x262>
 8004546:	4b49      	ldr	r3, [pc, #292]	@ (800466c <TIM14_callback+0x35c>)
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2201      	movs	r2, #1
 800454e:	4013      	ands	r3, r2
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10d      	bne.n	8004572 <TIM14_callback+0x262>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004556:	4b43      	ldr	r3, [pc, #268]	@ (8004664 <TIM14_callback+0x354>)
 8004558:	2201      	movs	r2, #1
 800455a:	2140      	movs	r1, #64	@ 0x40
 800455c:	0018      	movs	r0, r3
 800455e:	f003 ff64 	bl	800842a <HAL_GPIO_WritePin>
			LED_counter++;
 8004562:	4b42      	ldr	r3, [pc, #264]	@ (800466c <TIM14_callback+0x35c>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	b2db      	uxtb	r3, r3
 8004568:	3301      	adds	r3, #1
 800456a:	b2da      	uxtb	r2, r3
 800456c:	4b3f      	ldr	r3, [pc, #252]	@ (800466c <TIM14_callback+0x35c>)
 800456e:	701a      	strb	r2, [r3, #0]
 8004570:	e0a2      	b.n	80046b8 <TIM14_callback+0x3a8>
		else if((LED_counter < 7) && (LED_counter % 2 == 1)){
 8004572:	4b3e      	ldr	r3, [pc, #248]	@ (800466c <TIM14_callback+0x35c>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b06      	cmp	r3, #6
 800457a:	d815      	bhi.n	80045a8 <TIM14_callback+0x298>
 800457c:	4b3b      	ldr	r3, [pc, #236]	@ (800466c <TIM14_callback+0x35c>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2201      	movs	r2, #1
 8004584:	4013      	ands	r3, r2
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b01      	cmp	r3, #1
 800458a:	d10d      	bne.n	80045a8 <TIM14_callback+0x298>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800458c:	4b35      	ldr	r3, [pc, #212]	@ (8004664 <TIM14_callback+0x354>)
 800458e:	2200      	movs	r2, #0
 8004590:	2140      	movs	r1, #64	@ 0x40
 8004592:	0018      	movs	r0, r3
 8004594:	f003 ff49 	bl	800842a <HAL_GPIO_WritePin>
			LED_counter++;
 8004598:	4b34      	ldr	r3, [pc, #208]	@ (800466c <TIM14_callback+0x35c>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	3301      	adds	r3, #1
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	4b32      	ldr	r3, [pc, #200]	@ (800466c <TIM14_callback+0x35c>)
 80045a4:	701a      	strb	r2, [r3, #0]
 80045a6:	e087      	b.n	80046b8 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 80045a8:	4b30      	ldr	r3, [pc, #192]	@ (800466c <TIM14_callback+0x35c>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b0a      	cmp	r3, #10
 80045b0:	d900      	bls.n	80045b4 <TIM14_callback+0x2a4>
 80045b2:	e081      	b.n	80046b8 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80045b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004664 <TIM14_callback+0x354>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	2140      	movs	r1, #64	@ 0x40
 80045ba:	0018      	movs	r0, r3
 80045bc:	f003 ff35 	bl	800842a <HAL_GPIO_WritePin>
			LED_counter++;
 80045c0:	4b2a      	ldr	r3, [pc, #168]	@ (800466c <TIM14_callback+0x35c>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	3301      	adds	r3, #1
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	4b28      	ldr	r3, [pc, #160]	@ (800466c <TIM14_callback+0x35c>)
 80045cc:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 7){
 80045ce:	4b27      	ldr	r3, [pc, #156]	@ (800466c <TIM14_callback+0x35c>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b0b      	cmp	r3, #11
 80045d6:	d000      	beq.n	80045da <TIM14_callback+0x2ca>
 80045d8:	e06e      	b.n	80046b8 <TIM14_callback+0x3a8>
				LED_counter = 0;
 80045da:	4b24      	ldr	r3, [pc, #144]	@ (800466c <TIM14_callback+0x35c>)
 80045dc:	2200      	movs	r2, #0
 80045de:	701a      	strb	r2, [r3, #0]
}
 80045e0:	e06a      	b.n	80046b8 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_CONFIRM){
 80045e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004660 <TIM14_callback+0x350>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b07      	cmp	r3, #7
 80045ea:	d165      	bne.n	80046b8 <TIM14_callback+0x3a8>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 80045ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004668 <TIM14_callback+0x358>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2200      	movs	r2, #0
 80045f2:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 7) && (LED_counter % 2 == 0)){
 80045f4:	4b1d      	ldr	r3, [pc, #116]	@ (800466c <TIM14_callback+0x35c>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b06      	cmp	r3, #6
 80045fc:	d815      	bhi.n	800462a <TIM14_callback+0x31a>
 80045fe:	4b1b      	ldr	r3, [pc, #108]	@ (800466c <TIM14_callback+0x35c>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2201      	movs	r2, #1
 8004606:	4013      	ands	r3, r2
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10d      	bne.n	800462a <TIM14_callback+0x31a>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800460e:	4b15      	ldr	r3, [pc, #84]	@ (8004664 <TIM14_callback+0x354>)
 8004610:	2201      	movs	r2, #1
 8004612:	2140      	movs	r1, #64	@ 0x40
 8004614:	0018      	movs	r0, r3
 8004616:	f003 ff08 	bl	800842a <HAL_GPIO_WritePin>
			LED_counter++;
 800461a:	4b14      	ldr	r3, [pc, #80]	@ (800466c <TIM14_callback+0x35c>)
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	b2db      	uxtb	r3, r3
 8004620:	3301      	adds	r3, #1
 8004622:	b2da      	uxtb	r2, r3
 8004624:	4b11      	ldr	r3, [pc, #68]	@ (800466c <TIM14_callback+0x35c>)
 8004626:	701a      	strb	r2, [r3, #0]
 8004628:	e046      	b.n	80046b8 <TIM14_callback+0x3a8>
		else if((LED_counter < 7) && (LED_counter % 2 == 1)){
 800462a:	4b10      	ldr	r3, [pc, #64]	@ (800466c <TIM14_callback+0x35c>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b06      	cmp	r3, #6
 8004632:	d81d      	bhi.n	8004670 <TIM14_callback+0x360>
 8004634:	4b0d      	ldr	r3, [pc, #52]	@ (800466c <TIM14_callback+0x35c>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2201      	movs	r2, #1
 800463c:	4013      	ands	r3, r2
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b01      	cmp	r3, #1
 8004642:	d115      	bne.n	8004670 <TIM14_callback+0x360>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004644:	4b07      	ldr	r3, [pc, #28]	@ (8004664 <TIM14_callback+0x354>)
 8004646:	2200      	movs	r2, #0
 8004648:	2140      	movs	r1, #64	@ 0x40
 800464a:	0018      	movs	r0, r3
 800464c:	f003 feed 	bl	800842a <HAL_GPIO_WritePin>
			LED_counter++;
 8004650:	4b06      	ldr	r3, [pc, #24]	@ (800466c <TIM14_callback+0x35c>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	3301      	adds	r3, #1
 8004658:	b2da      	uxtb	r2, r3
 800465a:	4b04      	ldr	r3, [pc, #16]	@ (800466c <TIM14_callback+0x35c>)
 800465c:	701a      	strb	r2, [r3, #0]
 800465e:	e02b      	b.n	80046b8 <TIM14_callback+0x3a8>
 8004660:	20000448 	.word	0x20000448
 8004664:	50000800 	.word	0x50000800
 8004668:	200005e0 	.word	0x200005e0
 800466c:	200004c9 	.word	0x200004c9
		else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 8004670:	4b13      	ldr	r3, [pc, #76]	@ (80046c0 <TIM14_callback+0x3b0>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b0a      	cmp	r3, #10
 8004678:	d81e      	bhi.n	80046b8 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800467a:	4b12      	ldr	r3, [pc, #72]	@ (80046c4 <TIM14_callback+0x3b4>)
 800467c:	2200      	movs	r2, #0
 800467e:	2140      	movs	r1, #64	@ 0x40
 8004680:	0018      	movs	r0, r3
 8004682:	f003 fed2 	bl	800842a <HAL_GPIO_WritePin>
			LED_counter++;
 8004686:	4b0e      	ldr	r3, [pc, #56]	@ (80046c0 <TIM14_callback+0x3b0>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	3301      	adds	r3, #1
 800468e:	b2da      	uxtb	r2, r3
 8004690:	4b0b      	ldr	r3, [pc, #44]	@ (80046c0 <TIM14_callback+0x3b0>)
 8004692:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 7){
 8004694:	4b0a      	ldr	r3, [pc, #40]	@ (80046c0 <TIM14_callback+0x3b0>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b0b      	cmp	r3, #11
 800469c:	d10c      	bne.n	80046b8 <TIM14_callback+0x3a8>
				enum LED_States prev = LED_fsm.prev_state;
 800469e:	210f      	movs	r1, #15
 80046a0:	187b      	adds	r3, r7, r1
 80046a2:	4a09      	ldr	r2, [pc, #36]	@ (80046c8 <TIM14_callback+0x3b8>)
 80046a4:	7852      	ldrb	r2, [r2, #1]
 80046a6:	701a      	strb	r2, [r3, #0]
				set_LED_to_state(&LED_fsm, prev);
 80046a8:	187b      	adds	r3, r7, r1
 80046aa:	781a      	ldrb	r2, [r3, #0]
 80046ac:	4b06      	ldr	r3, [pc, #24]	@ (80046c8 <TIM14_callback+0x3b8>)
 80046ae:	0011      	movs	r1, r2
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7fc fbbf 	bl	8000e34 <set_LED_to_state>
}
 80046b6:	e7ff      	b.n	80046b8 <TIM14_callback+0x3a8>
 80046b8:	46c0      	nop			@ (mov r8, r8)
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b004      	add	sp, #16
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	200004c9 	.word	0x200004c9
 80046c4:	50000800 	.word	0x50000800
 80046c8:	20000448 	.word	0x20000448

080046cc <Input_Capture_Processing>:
volatile uint32_t TIM2_ch1_input_capture_value;
volatile uint16_t interrupt_period = 0;
volatile uint8_t MIDI_CLK_tag = 0;

//FUNCTION DEFINITIONS
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params *params_ptr){
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	0002      	movs	r2, r0
 80046d4:	6039      	str	r1, [r7, #0]
 80046d6:	1dbb      	adds	r3, r7, #6
 80046d8:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Clear_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started); //reset flag
 80046da:	4b34      	ldr	r3, [pc, #208]	@ (80047ac <Input_Capture_Processing+0xe0>)
 80046dc:	2104      	movs	r1, #4
 80046de:	0018      	movs	r0, r3
 80046e0:	f001 fe06 	bl	80062f0 <Clear_Status_Bit>

	//DETERMINE WHAT TO SET THE RAW_START_VALUE AND BASE_PRESCALER TO BASED ON THE I/P CAPTURE VALUE
	//CHECK FOR PRIMALITY
	if(isPrime(interrupt_period_value) == YES){
 80046e4:	1dbb      	adds	r3, r7, #6
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	0018      	movs	r0, r3
 80046ec:	f001 fd8f 	bl	800620e <isPrime>
 80046f0:	0003      	movs	r3, r0
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d106      	bne.n	8004704 <Input_Capture_Processing+0x38>

		interrupt_period_value += 1;
 80046f6:	1dbb      	adds	r3, r7, #6
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3301      	adds	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	1dbb      	adds	r3, r7, #6
 8004702:	801a      	strh	r2, [r3, #0]
	}

	//START FINDING FACTORS
	uint32_t N = interrupt_period_value << 6; //calculate the N-value which is prescaler_meas * interrupt_period_meas. The measurement prescaler is used which is 64. (TIM2 has a prescaler of 64*512, but since we divide this value by 512, the prescaler is then just 64).
 8004704:	1dbb      	adds	r3, r7, #6
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	b29b      	uxth	r3, r3
 800470a:	019b      	lsls	r3, r3, #6
 800470c:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 800470e:	2317      	movs	r3, #23
 8004710:	18fb      	adds	r3, r7, r3
 8004712:	2200      	movs	r2, #0
 8004714:	701a      	strb	r2, [r3, #0]
 8004716:	e02d      	b.n	8004774 <Input_Capture_Processing+0xa8>

		interrupt_period_value = 256 - i;
 8004718:	2317      	movs	r3, #23
 800471a:	18fb      	adds	r3, r7, r3
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	b29b      	uxth	r3, r3
 8004720:	2280      	movs	r2, #128	@ 0x80
 8004722:	0052      	lsls	r2, r2, #1
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	b29a      	uxth	r2, r3
 8004728:	1dbb      	adds	r3, r7, #6
 800472a:	801a      	strh	r2, [r3, #0]
		uint16_t remainder = N % interrupt_period_value;
 800472c:	1dbb      	adds	r3, r7, #6
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	b29b      	uxth	r3, r3
 8004732:	001a      	movs	r2, r3
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	0011      	movs	r1, r2
 8004738:	0018      	movs	r0, r3
 800473a:	f7fb fd69 	bl	8000210 <__aeabi_uidivmod>
 800473e:	000b      	movs	r3, r1
 8004740:	001a      	movs	r2, r3
 8004742:	210e      	movs	r1, #14
 8004744:	187b      	adds	r3, r7, r1
 8004746:	801a      	strh	r2, [r3, #0]

		if(remainder == 0){ //check if no remainder -> integer
 8004748:	187b      	adds	r3, r7, r1
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10b      	bne.n	8004768 <Input_Capture_Processing+0x9c>

			params_ptr->raw_prescaler = N / interrupt_period_value;
 8004750:	1dbb      	adds	r3, r7, #6
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	b29b      	uxth	r3, r3
 8004756:	0019      	movs	r1, r3
 8004758:	6938      	ldr	r0, [r7, #16]
 800475a:	f7fb fcd3 	bl	8000104 <__udivsi3>
 800475e:	0003      	movs	r3, r0
 8004760:	b29a      	uxth	r2, r3
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	835a      	strh	r2, [r3, #26]
			break;
 8004766:	e00a      	b.n	800477e <Input_Capture_Processing+0xb2>
	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8004768:	2117      	movs	r1, #23
 800476a:	187b      	adds	r3, r7, r1
 800476c:	781a      	ldrb	r2, [r3, #0]
 800476e:	187b      	adds	r3, r7, r1
 8004770:	3201      	adds	r2, #1
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	2317      	movs	r3, #23
 8004776:	18fb      	adds	r3, r7, r3
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b80      	cmp	r3, #128	@ 0x80
 800477c:	d9cc      	bls.n	8004718 <Input_Capture_Processing+0x4c>
		}
	}

	params_ptr->raw_start_value = 256 - interrupt_period_value;
 800477e:	1dbb      	adds	r3, r7, #6
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	b29b      	uxth	r3, r3
 8004784:	2280      	movs	r2, #128	@ 0x80
 8004786:	0052      	lsls	r2, r2, #1
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	b29a      	uxth	r2, r3
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	825a      	strh	r2, [r3, #18]

	Calculate_Next_Main_Oscillator_Values(params_ptr, (enum Next_Values_Processing_Mode)IP_CAPTURE_MODE);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2101      	movs	r1, #1
 8004794:	0018      	movs	r0, r3
 8004796:	f000 f9f5 	bl	8004b84 <Calculate_Next_Main_Oscillator_Values>
	Process_TIM16_Final_Start_Value_and_Final_Prescaler(params_ptr);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	0018      	movs	r0, r3
 800479e:	f001 f8f3 	bl	8005988 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);

	return 1;
 80047a2:	2301      	movs	r3, #1
}
 80047a4:	0018      	movs	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	b006      	add	sp, #24
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	20000c3c 	.word	0x20000c3c

080047b0 <Start_Input_Capture_Timer>:

uint8_t Start_Input_Capture_Timer(void){
 80047b0:	b590      	push	{r4, r7, lr}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0

	uint8_t ok = Start_IC_TIM(&htim2, TIM_CHANNEL_1);
 80047b6:	1dfc      	adds	r4, r7, #7
 80047b8:	4b09      	ldr	r3, [pc, #36]	@ (80047e0 <Start_Input_Capture_Timer+0x30>)
 80047ba:	2100      	movs	r1, #0
 80047bc:	0018      	movs	r0, r3
 80047be:	f000 f811 	bl	80047e4 <Start_IC_TIM>
 80047c2:	0003      	movs	r3, r0
 80047c4:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 80047c6:	1dfb      	adds	r3, r7, #7
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <Start_Input_Capture_Timer+0x22>

		Error_Handler();
 80047ce:	f7fd fdcd 	bl	800236c <Error_Handler>
	}

	return ok;
 80047d2:	1dfb      	adds	r3, r7, #7
 80047d4:	781b      	ldrb	r3, [r3, #0]
}
 80047d6:	0018      	movs	r0, r3
 80047d8:	46bd      	mov	sp, r7
 80047da:	b003      	add	sp, #12
 80047dc:	bd90      	pop	{r4, r7, pc}
 80047de:	46c0      	nop			@ (mov r8, r8)
 80047e0:	20000814 	.word	0x20000814

080047e4 <Start_IC_TIM>:

uint8_t Start_IC_TIM(TIM_HandleTypeDef *TIM, uint32_t IC_TIM_channel){
 80047e4:	b5b0      	push	{r4, r5, r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]

	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 80047ee:	250f      	movs	r5, #15
 80047f0:	197c      	adds	r4, r7, r5
 80047f2:	4b10      	ldr	r3, [pc, #64]	@ (8004834 <Start_IC_TIM+0x50>)
 80047f4:	0018      	movs	r0, r3
 80047f6:	f005 f9a9 	bl	8009b4c <HAL_TIM_Base_Start_IT>
 80047fa:	0003      	movs	r3, r0
 80047fc:	7023      	strb	r3, [r4, #0]
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	4b0c      	ldr	r3, [pc, #48]	@ (8004834 <Start_IC_TIM+0x50>)
 8004802:	0011      	movs	r1, r2
 8004804:	0018      	movs	r0, r3
 8004806:	f005 fe0f 	bl	800a428 <HAL_TIM_IC_Start_IT>
 800480a:	0003      	movs	r3, r0
 800480c:	0019      	movs	r1, r3
 800480e:	197b      	adds	r3, r7, r5
 8004810:	197a      	adds	r2, r7, r5
 8004812:	7812      	ldrb	r2, [r2, #0]
 8004814:	400a      	ands	r2, r1
 8004816:	701a      	strb	r2, [r3, #0]

	if(ok_AND != HAL_OK){
 8004818:	197b      	adds	r3, r7, r5
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <Start_IC_TIM+0x40>

		Error_Handler();
 8004820:	f7fd fda4 	bl	800236c <Error_Handler>
	}

	return ok_AND;
 8004824:	230f      	movs	r3, #15
 8004826:	18fb      	adds	r3, r7, r3
 8004828:	781b      	ldrb	r3, [r3, #0]
}
 800482a:	0018      	movs	r0, r3
 800482c:	46bd      	mov	sp, r7
 800482e:	b004      	add	sp, #16
 8004830:	bdb0      	pop	{r4, r5, r7, pc}
 8004832:	46c0      	nop			@ (mov r8, r8)
 8004834:	20000814 	.word	0x20000814

08004838 <Copy_Params_Structs>:

uint8_t Copy_Params_Structs(struct Params *src_ptr, struct Params *dst_ptr){
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]

	*dst_ptr = *src_ptr;
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	0010      	movs	r0, r2
 8004848:	0019      	movs	r1, r3
 800484a:	2324      	movs	r3, #36	@ 0x24
 800484c:	001a      	movs	r2, r3
 800484e:	f008 ff8d 	bl	800d76c <memcpy>

	return 1;
 8004852:	2301      	movs	r3, #1
}
 8004854:	0018      	movs	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	b002      	add	sp, #8
 800485a:	bd80      	pop	{r7, pc}

0800485c <Start_Measurement_Reelapse_Timer>:

uint8_t Start_Measurement_Reelapse_Timer(void){
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8004860:	4b0b      	ldr	r3, [pc, #44]	@ (8004890 <Start_Measurement_Reelapse_Timer+0x34>)
 8004862:	2100      	movs	r1, #0
 8004864:	0018      	movs	r0, r3
 8004866:	f001 fcb6 	bl	80061d6 <Stop_OC_TIM>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800486a:	4b09      	ldr	r3, [pc, #36]	@ (8004890 <Start_Measurement_Reelapse_Timer+0x34>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2200      	movs	r2, #0
 8004870:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 8004872:	4b08      	ldr	r3, [pc, #32]	@ (8004894 <Start_Measurement_Reelapse_Timer+0x38>)
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29a      	uxth	r2, r3
 8004878:	4b05      	ldr	r3, [pc, #20]	@ (8004890 <Start_Measurement_Reelapse_Timer+0x34>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	635a      	str	r2, [r3, #52]	@ 0x34
	Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 800487e:	4b04      	ldr	r3, [pc, #16]	@ (8004890 <Start_Measurement_Reelapse_Timer+0x34>)
 8004880:	2100      	movs	r1, #0
 8004882:	0018      	movs	r0, r3
 8004884:	f001 fc8b 	bl	800619e <Start_OC_TIM>

	return 1;
 8004888:	2301      	movs	r3, #1
}
 800488a:	0018      	movs	r0, r3
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	200008d0 	.word	0x200008d0
 8004894:	20000c38 	.word	0x20000c38

08004898 <Begin_Input_Capture_Measurement>:

uint8_t Begin_Input_Capture_Measurement(void){
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0

	__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 800489c:	4b03      	ldr	r3, [pc, #12]	@ (80048ac <Begin_Input_Capture_Measurement+0x14>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2200      	movs	r2, #0
 80048a2:	625a      	str	r2, [r3, #36]	@ 0x24

	return 1;
 80048a4:	2301      	movs	r3, #1
}
 80048a6:	0018      	movs	r0, r3
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20000814 	.word	0x20000814

080048b0 <main>:
//INCLUDES
#include "main.h"
#include "main_vars.h"

int main(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
	//SYSTEM INIT
	System_Init();
 80048b4:	f7fd fd60 	bl	8002378 <System_Init>

	//STARTUP
	Startup();
 80048b8:	f000 fb5a 	bl	8004f70 <Startup>

	while (1)
	{
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 80048bc:	4b4b      	ldr	r3, [pc, #300]	@ (80049ec <main+0x13c>)
 80048be:	2104      	movs	r1, #4
 80048c0:	0018      	movs	r0, r3
 80048c2:	f001 fcef 	bl	80062a4 <Get_Status_Bit>
 80048c6:	0003      	movs	r3, r0
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d107      	bne.n	80048dc <main+0x2c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

			Input_Capture_Processing(interrupt_period, &params_to_be_loaded);
 80048cc:	4b48      	ldr	r3, [pc, #288]	@ (80049f0 <main+0x140>)
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	4a48      	ldr	r2, [pc, #288]	@ (80049f4 <main+0x144>)
 80048d4:	0011      	movs	r1, r2
 80048d6:	0018      	movs	r0, r3
 80048d8:	f7ff fef8 	bl	80046cc <Input_Capture_Processing>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
		}

		if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running) == YES){
 80048dc:	4b43      	ldr	r3, [pc, #268]	@ (80049ec <main+0x13c>)
 80048de:	2140      	movs	r1, #64	@ 0x40
 80048e0:	0018      	movs	r0, r3
 80048e2:	f001 fcdf 	bl	80062a4 <Get_Status_Bit>
 80048e6:	0003      	movs	r3, r0
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d12b      	bne.n	8004944 <main+0x94>

			if(idle_counter < IDLE_COUNT){
 80048ec:	4b42      	ldr	r3, [pc, #264]	@ (80049f8 <main+0x148>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	23fa      	movs	r3, #250	@ 0xfa
 80048f2:	01db      	lsls	r3, r3, #7
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d218      	bcs.n	800492a <main+0x7a>

				if(IP_CAP_fsm.current_state != IDLE){
 80048f8:	4b40      	ldr	r3, [pc, #256]	@ (80049fc <main+0x14c>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00d      	beq.n	800491e <main+0x6e>

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004902:	4b3a      	ldr	r3, [pc, #232]	@ (80049ec <main+0x13c>)
 8004904:	2140      	movs	r1, #64	@ 0x40
 8004906:	0018      	movs	r0, r3
 8004908:	f001 fcf2 	bl	80062f0 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 800490c:	4b37      	ldr	r3, [pc, #220]	@ (80049ec <main+0x13c>)
 800490e:	2120      	movs	r1, #32
 8004910:	0018      	movs	r0, r3
 8004912:	f001 fced 	bl	80062f0 <Clear_Status_Bit>
					idle_counter = 0;
 8004916:	4b38      	ldr	r3, [pc, #224]	@ (80049f8 <main+0x148>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	e012      	b.n	8004944 <main+0x94>
				}
				else{

					idle_counter++;
 800491e:	4b36      	ldr	r3, [pc, #216]	@ (80049f8 <main+0x148>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	4b34      	ldr	r3, [pc, #208]	@ (80049f8 <main+0x148>)
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	e00c      	b.n	8004944 <main+0x94>
				}
			}
			else{

				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800492a:	4b30      	ldr	r3, [pc, #192]	@ (80049ec <main+0x13c>)
 800492c:	2140      	movs	r1, #64	@ 0x40
 800492e:	0018      	movs	r0, r3
 8004930:	f001 fcde 	bl	80062f0 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004934:	4b2d      	ldr	r3, [pc, #180]	@ (80049ec <main+0x13c>)
 8004936:	2120      	movs	r1, #32
 8004938:	0018      	movs	r0, r3
 800493a:	f001 fcc7 	bl	80062cc <Set_Status_Bit>
				idle_counter = 0;
 800493e:	4b2e      	ldr	r3, [pc, #184]	@ (80049f8 <main+0x148>)
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]
			}
		}

		if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running) == YES){
 8004944:	2380      	movs	r3, #128	@ 0x80
 8004946:	005a      	lsls	r2, r3, #1
 8004948:	4b28      	ldr	r3, [pc, #160]	@ (80049ec <main+0x13c>)
 800494a:	0011      	movs	r1, r2
 800494c:	0018      	movs	r0, r3
 800494e:	f001 fca9 	bl	80062a4 <Get_Status_Bit>
 8004952:	0003      	movs	r3, r0
 8004954:	2b01      	cmp	r3, #1
 8004956:	d122      	bne.n	800499e <main+0xee>

			if(midi_counter < MIDI_COUNT){
 8004958:	4b29      	ldr	r3, [pc, #164]	@ (8004a00 <main+0x150>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a29      	ldr	r2, [pc, #164]	@ (8004a04 <main+0x154>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d805      	bhi.n	800496e <main+0xbe>

				midi_counter++;
 8004962:	4b27      	ldr	r3, [pc, #156]	@ (8004a00 <main+0x150>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	4b25      	ldr	r3, [pc, #148]	@ (8004a00 <main+0x150>)
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	e017      	b.n	800499e <main+0xee>
			}
			else{

				Clear_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800496e:	2380      	movs	r3, #128	@ 0x80
 8004970:	005a      	lsls	r2, r3, #1
 8004972:	4b1e      	ldr	r3, [pc, #120]	@ (80049ec <main+0x13c>)
 8004974:	0011      	movs	r1, r2
 8004976:	0018      	movs	r0, r3
 8004978:	f001 fcba 	bl	80062f0 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out);
 800497c:	2380      	movs	r3, #128	@ 0x80
 800497e:	009a      	lsls	r2, r3, #2
 8004980:	4b1a      	ldr	r3, [pc, #104]	@ (80049ec <main+0x13c>)
 8004982:	0011      	movs	r1, r2
 8004984:	0018      	movs	r0, r3
 8004986:	f001 fca1 	bl	80062cc <Set_Status_Bit>
				active_status_byte = 0;
 800498a:	4b1f      	ldr	r3, [pc, #124]	@ (8004a08 <main+0x158>)
 800498c:	2200      	movs	r2, #0
 800498e:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 8004990:	4b1e      	ldr	r3, [pc, #120]	@ (8004a0c <main+0x15c>)
 8004992:	0018      	movs	r0, r3
 8004994:	f7fc fc0d 	bl	80011b2 <Clear_Data_Buffer>
				midi_counter = 0;
 8004998:	4b19      	ldr	r3, [pc, #100]	@ (8004a00 <main+0x150>)
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
			}
		}

		if(Get_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_is_Running) == YES){
 800499e:	2380      	movs	r3, #128	@ 0x80
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	4b12      	ldr	r3, [pc, #72]	@ (80049ec <main+0x13c>)
 80049a4:	0011      	movs	r1, r2
 80049a6:	0018      	movs	r0, r3
 80049a8:	f001 fc7c 	bl	80062a4 <Get_Status_Bit>
 80049ac:	0003      	movs	r3, r0
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d184      	bne.n	80048bc <main+0xc>

			if(advance_idle_counter < ADVANCE_IDLE_COUNT){
 80049b2:	4b17      	ldr	r3, [pc, #92]	@ (8004a10 <main+0x160>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a13      	ldr	r2, [pc, #76]	@ (8004a04 <main+0x154>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d805      	bhi.n	80049c8 <main+0x118>

				advance_idle_counter++;
 80049bc:	4b14      	ldr	r3, [pc, #80]	@ (8004a10 <main+0x160>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	4b13      	ldr	r3, [pc, #76]	@ (8004a10 <main+0x160>)
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	e779      	b.n	80048bc <main+0xc>
			}
			else{

				Clear_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_is_Running);
 80049c8:	2380      	movs	r3, #128	@ 0x80
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	4b07      	ldr	r3, [pc, #28]	@ (80049ec <main+0x13c>)
 80049ce:	0011      	movs	r1, r2
 80049d0:	0018      	movs	r0, r3
 80049d2:	f001 fc8d 	bl	80062f0 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Tap_Tempo_Advance_Idle_Timer_Has_Timed_Out);
 80049d6:	2380      	movs	r3, #128	@ 0x80
 80049d8:	019a      	lsls	r2, r3, #6
 80049da:	4b04      	ldr	r3, [pc, #16]	@ (80049ec <main+0x13c>)
 80049dc:	0011      	movs	r1, r2
 80049de:	0018      	movs	r0, r3
 80049e0:	f001 fc74 	bl	80062cc <Set_Status_Bit>
				advance_idle_counter = 0;
 80049e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004a10 <main+0x160>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 80049ea:	e767      	b.n	80048bc <main+0xc>
 80049ec:	20000c3c 	.word	0x20000c3c
 80049f0:	20000c38 	.word	0x20000c38
 80049f4:	20000ca0 	.word	0x20000ca0
 80049f8:	20000c40 	.word	0x20000c40
 80049fc:	20000444 	.word	0x20000444
 8004a00:	20000c44 	.word	0x20000c44
 8004a04:	00030d3f 	.word	0x00030d3f
 8004a08:	200004cb 	.word	0x200004cb
 8004a0c:	200004d0 	.word	0x200004d0
 8004a10:	20000c48 	.word	0x20000c48

08004a14 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>:
								.duty_delay_line_start_offset = 1,  //initial value is 1st index - to give us space to fill index 0
								.duty_delay_line_finish_offset = FINAL_INDEX + 1}; //initial value is 512th index, one larger than the index of the final sample

//FUNCTION DEFINITIONS
uint8_t Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel_1, uint32_t PWM_TIM_channel_2)
{
 8004a14:	b590      	push	{r4, r7, lr}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
	uint8_t ok_OR = 0;
 8004a20:	2417      	movs	r4, #23
 8004a22:	193b      	adds	r3, r7, r4
 8004a24:	2200      	movs	r2, #0
 8004a26:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_Base_Start(TIM);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f005 f842 	bl	8009ab4 <HAL_TIM_Base_Start>
 8004a30:	0003      	movs	r3, r0
 8004a32:	0019      	movs	r1, r3
 8004a34:	193b      	adds	r3, r7, r4
 8004a36:	193a      	adds	r2, r7, r4
 8004a38:	7812      	ldrb	r2, [r2, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	0011      	movs	r1, r2
 8004a44:	0018      	movs	r0, r3
 8004a46:	f005 fba3 	bl	800a190 <HAL_TIM_PWM_Start>
 8004a4a:	0003      	movs	r3, r0
 8004a4c:	0019      	movs	r1, r3
 8004a4e:	193b      	adds	r3, r7, r4
 8004a50:	193a      	adds	r2, r7, r4
 8004a52:	7812      	ldrb	r2, [r2, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	0011      	movs	r1, r2
 8004a5e:	0018      	movs	r0, r3
 8004a60:	f005 fb96 	bl	800a190 <HAL_TIM_PWM_Start>
 8004a64:	0003      	movs	r3, r0
 8004a66:	0019      	movs	r1, r3
 8004a68:	193b      	adds	r3, r7, r4
 8004a6a:	193a      	adds	r2, r7, r4
 8004a6c:	7812      	ldrb	r2, [r2, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	701a      	strb	r2, [r3, #0]

	if(ok_OR != HAL_OK){
 8004a72:	193b      	adds	r3, r7, r4
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x6a>

		Error_Handler();
 8004a7a:	f7fd fc77 	bl	800236c <Error_Handler>
	}

	return ok_OR;
 8004a7e:	2317      	movs	r3, #23
 8004a80:	18fb      	adds	r3, r7, r3
 8004a82:	781b      	ldrb	r3, [r3, #0]
}
 8004a84:	0018      	movs	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	b007      	add	sp, #28
 8004a8a:	bd90      	pop	{r4, r7, pc}

08004a8c <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 8004a8c:	b590      	push	{r4, r7, lr}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 8004a92:	1dfc      	adds	r4, r7, #7
 8004a94:	4b09      	ldr	r3, [pc, #36]	@ (8004abc <Start_Freq_Gen_Timer+0x30>)
 8004a96:	2100      	movs	r1, #0
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f001 fb80 	bl	800619e <Start_OC_TIM>
 8004a9e:	0003      	movs	r3, r0
 8004aa0:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8004aa2:	1dfb      	adds	r3, r7, #7
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <Start_Freq_Gen_Timer+0x22>

		Error_Handler();
 8004aaa:	f7fd fc5f 	bl	800236c <Error_Handler>
	}

	return ok;
 8004aae:	1dfb      	adds	r3, r7, #7
 8004ab0:	781b      	ldrb	r3, [r3, #0]
}
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	b003      	add	sp, #12
 8004ab8:	bd90      	pop	{r4, r7, pc}
 8004aba:	46c0      	nop			@ (mov r8, r8)
 8004abc:	20000758 	.word	0x20000758

08004ac0 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:

uint8_t Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(struct Params* params_ptr){
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]

	uint32_t speed_control = 0;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60fb      	str	r3, [r7, #12]
	uint8_t how_many_128 = 0;
 8004acc:	210b      	movs	r1, #11
 8004ace:	187b      	adds	r3, r7, r1
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	701a      	strb	r2, [r3, #0]

    //speed_control = (speed_adc_10_bit/1024)*'range macro'
    speed_control = params_ptr->speed * NUMBER_OF_FREQUENCY_STEPS;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	891b      	ldrh	r3, [r3, #8]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	001a      	movs	r2, r3
 8004adc:	0013      	movs	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	189b      	adds	r3, r3, r2
 8004ae2:	019b      	lsls	r3, r3, #6
 8004ae4:	189b      	adds	r3, r3, r2
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	189b      	adds	r3, r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	0a9b      	lsrs	r3, r3, #10
 8004af0:	60fb      	str	r3, [r7, #12]

    how_many_128 = (uint8_t)(speed_control >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	09da      	lsrs	r2, r3, #7
 8004af6:	187b      	adds	r3, r7, r1
 8004af8:	701a      	strb	r2, [r3, #0]
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	187b      	adds	r3, r7, r1
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	01db      	lsls	r3, r3, #7
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	825a      	strh	r2, [r3, #18]
    params_ptr->raw_prescaler = SLOWEST_SPEED_PRESCALER >> how_many_128;
 8004b10:	187b      	adds	r3, r7, r1
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2280      	movs	r2, #128	@ 0x80
 8004b16:	00d2      	lsls	r2, r2, #3
 8004b18:	411a      	asrs	r2, r3
 8004b1a:	0013      	movs	r3, r2
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	835a      	strh	r2, [r3, #26]

    return 1;
 8004b22:	2301      	movs	r3, #1
}
 8004b24:	0018      	movs	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	b004      	add	sp, #16
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <Set_Oscillator_Values>:

uint8_t Set_Oscillator_Values(struct Params* params_ptr){
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]

	////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE MAIN OSCILLATOR//
	////////////////////////////////////////////////////////
	__HAL_TIM_SET_AUTORELOAD(&htim16, params_ptr->final_ARR);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	8b1b      	ldrh	r3, [r3, #24]
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	4b10      	ldr	r3, [pc, #64]	@ (8004b7c <Set_Oscillator_Values+0x50>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	8b1b      	ldrh	r3, [r3, #24]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	001a      	movs	r2, r3
 8004b48:	4b0c      	ldr	r3, [pc, #48]	@ (8004b7c <Set_Oscillator_Values+0x50>)
 8004b4a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_PRESCALER(&htim16, params_ptr->final_prescaler_minus_one); //have to take one off the divisor
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	8bdb      	ldrh	r3, [r3, #30]
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	4b0a      	ldr	r3, [pc, #40]	@ (8004b7c <Set_Oscillator_Values+0x50>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	629a      	str	r2, [r3, #40]	@ 0x28

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, params_ptr->prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	885b      	ldrh	r3, [r3, #2]
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	4b08      	ldr	r3, [pc, #32]	@ (8004b80 <Set_Oscillator_Values+0x54>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	639a      	str	r2, [r3, #56]	@ 0x38

	/////////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE SECONDARY OSCILLATOR//
	/////////////////////////////////////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	889b      	ldrh	r3, [r3, #4]
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	4b05      	ldr	r3, [pc, #20]	@ (8004b80 <Set_Oscillator_Values+0x54>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	641a      	str	r2, [r3, #64]	@ 0x40

	return 1;
 8004b70:	2301      	movs	r3, #1
}
 8004b72:	0018      	movs	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b002      	add	sp, #8
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	46c0      	nop			@ (mov r8, r8)
 8004b7c:	20000758 	.word	0x20000758
 8004b80:	2000098c 	.word	0x2000098c

08004b84 <Calculate_Next_Main_Oscillator_Values>:

uint8_t Calculate_Next_Main_Oscillator_Values(struct Params* params_ptr, enum Next_Values_Processing_Mode mode){
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	000a      	movs	r2, r1
 8004b8e:	1cfb      	adds	r3, r7, #3
 8004b90:	701a      	strb	r2, [r3, #0]

	if(mode == REGULAR_MODE){
 8004b92:	1cfb      	adds	r3, r7, #3
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d144      	bne.n	8004c24 <Calculate_Next_Main_Oscillator_Values+0xa0>

		params_ptr->index++;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	89db      	ldrh	r3, [r3, #14]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	81da      	strh	r2, [r3, #14]

		if(params_ptr->index == FINAL_INDEX + 1){
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	89db      	ldrh	r3, [r3, #14]
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	2380      	movs	r3, #128	@ 0x80
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d102      	bne.n	8004bbc <Calculate_Next_Main_Oscillator_Values+0x38>
			params_ptr->index = 0;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	81da      	strh	r2, [r3, #14]
		}

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	89db      	ldrh	r3, [r3, #14]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d106      	bne.n	8004bd4 <Calculate_Next_Main_Oscillator_Values+0x50>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	741a      	strb	r2, [r3, #16]
 8004bd2:	e05a      	b.n	8004c8a <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == SECOND_QUADRANT_START_INDEX){
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	89db      	ldrh	r3, [r3, #14]
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b80      	cmp	r3, #128	@ 0x80
 8004bdc:	d106      	bne.n	8004bec <Calculate_Next_Main_Oscillator_Values+0x68>
			params_ptr->quadrant = SECOND_QUADRANT;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	741a      	strb	r2, [r3, #16]
 8004bea:	e04e      	b.n	8004c8a <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == THIRD_QUADRANT_START_INDEX){
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	89db      	ldrh	r3, [r3, #14]
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	2380      	movs	r3, #128	@ 0x80
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d106      	bne.n	8004c08 <Calculate_Next_Main_Oscillator_Values+0x84>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	741a      	strb	r2, [r3, #16]
 8004c06:	e040      	b.n	8004c8a <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == FOURTH_QUADRANT_START_INDEX){
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	89db      	ldrh	r3, [r3, #14]
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	23c0      	movs	r3, #192	@ 0xc0
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d139      	bne.n	8004c8a <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = SECOND_QUADRANT;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	741a      	strb	r2, [r3, #16]
 8004c22:	e032      	b.n	8004c8a <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == IP_CAPTURE_MODE){
 8004c24:	1cfb      	adds	r3, r7, #3
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d11f      	bne.n	8004c6c <Calculate_Next_Main_Oscillator_Values+0xe8>

		if(params_ptr->waveshape == SINE_MODE || params_ptr->waveshape == TRIANGLE_MODE){
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	799b      	ldrb	r3, [r3, #6]
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d004      	beq.n	8004c40 <Calculate_Next_Main_Oscillator_Values+0xbc>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	799b      	ldrb	r3, [r3, #6]
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <Calculate_Next_Main_Oscillator_Values+0xd2>

			params_ptr->index = SINE_OR_TRIANGLE_WAVE_TEMPO_PERCEIVED_APEX_INDEX;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	22a7      	movs	r2, #167	@ 0xa7
 8004c44:	0052      	lsls	r2, r2, #1
 8004c46:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SINE_OR_TRI_SYNCED;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SINE_OR_TRI_SYNCED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	741a      	strb	r2, [r3, #16]
 8004c54:	e019      	b.n	8004c8a <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else{

			params_ptr->index = SQUARE_WAVE_TEMPO_APEX_INDEX;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2280      	movs	r2, #128	@ 0x80
 8004c5a:	0052      	lsls	r2, r2, #1
 8004c5c:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SQUARE_SYNCED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SQUARE_SYNCED;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	741a      	strb	r2, [r3, #16]
 8004c6a:	e00e      	b.n	8004c8a <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == STARTUP_MODE){
 8004c6c:	1cfb      	adds	r3, r7, #3
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d10a      	bne.n	8004c8a <Calculate_Next_Main_Oscillator_Values+0x106>

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	89db      	ldrh	r3, [r3, #14]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d105      	bne.n	8004c8a <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	741a      	strb	r2, [r3, #16]
		}
	}

	//ONCE INDEX IS SET, FIND THE DUTY VALUE
	if(params_ptr->waveshape == TRIANGLE_MODE){
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	799b      	ldrb	r3, [r3, #6]
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d109      	bne.n	8004ca8 <Calculate_Next_Main_Oscillator_Values+0x124>
		params_ptr->duty = tri_wavetable[params_ptr->index];
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	89db      	ldrh	r3, [r3, #14]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	001a      	movs	r2, r3
 8004c9c:	4b31      	ldr	r3, [pc, #196]	@ (8004d64 <Calculate_Next_Main_Oscillator_Values+0x1e0>)
 8004c9e:	0052      	lsls	r2, r2, #1
 8004ca0:	5ad2      	ldrh	r2, [r2, r3]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	801a      	strh	r2, [r3, #0]
 8004ca6:	e029      	b.n	8004cfc <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if(params_ptr->waveshape == SINE_MODE){
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	799b      	ldrb	r3, [r3, #6]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d109      	bne.n	8004cc6 <Calculate_Next_Main_Oscillator_Values+0x142>
		params_ptr->duty = sine_wavetable[params_ptr->index];
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	89db      	ldrh	r3, [r3, #14]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	001a      	movs	r2, r3
 8004cba:	4b2b      	ldr	r3, [pc, #172]	@ (8004d68 <Calculate_Next_Main_Oscillator_Values+0x1e4>)
 8004cbc:	0052      	lsls	r2, r2, #1
 8004cbe:	5ad2      	ldrh	r2, [r2, r3]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	801a      	strh	r2, [r3, #0]
 8004cc4:	e01a      	b.n	8004cfc <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	799b      	ldrb	r3, [r3, #6]
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d108      	bne.n	8004ce2 <Calculate_Next_Main_Oscillator_Values+0x15e>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	89db      	ldrh	r3, [r3, #14]
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2bff      	cmp	r3, #255	@ 0xff
 8004cd8:	d803      	bhi.n	8004ce2 <Calculate_Next_Main_Oscillator_Values+0x15e>
		params_ptr->duty = PWM_DUTY_VALUE_MAX;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a23      	ldr	r2, [pc, #140]	@ (8004d6c <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004cde:	801a      	strh	r2, [r3, #0]
 8004ce0:	e00c      	b.n	8004cfc <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index >= THIRD_QUADRANT_START_INDEX)){
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	799b      	ldrb	r3, [r3, #6]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d107      	bne.n	8004cfc <Calculate_Next_Main_Oscillator_Values+0x178>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	89db      	ldrh	r3, [r3, #14]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2bff      	cmp	r3, #255	@ 0xff
 8004cf4:	d902      	bls.n	8004cfc <Calculate_Next_Main_Oscillator_Values+0x178>
		params_ptr->duty = PWM_DUTY_VALUE_MIN;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	801a      	strh	r2, [r3, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(params_ptr->depth == ((1 << DEPTH_ADC_RESOLUTION) - 1)){ //255
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	7a9b      	ldrb	r3, [r3, #10]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d04:	d108      	bne.n	8004d18 <Calculate_Next_Main_Oscillator_Values+0x194>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	4a17      	ldr	r2, [pc, #92]	@ (8004d6c <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	801a      	strh	r2, [r3, #0]
 8004d16:	e01b      	b.n	8004d50 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else if(params_ptr->depth != 0){
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	7a9b      	ldrb	r3, [r3, #10]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d013      	beq.n	8004d4a <Calculate_Next_Main_Oscillator_Values+0x1c6>

			//duty = 1023 - duty*(current_depth >> 8);
			uint32_t multiply_product = 0;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]
			multiply_product = (params_ptr->duty) * (params_ptr->depth);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	001a      	movs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	7a9b      	ldrb	r3, [r3, #10]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	4353      	muls	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]
			params_ptr->duty = PWM_DUTY_VALUE_MAX - (multiply_product >> DEPTH_ADC_RESOLUTION);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	09db      	lsrs	r3, r3, #7
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	4a0b      	ldr	r2, [pc, #44]	@ (8004d6c <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	801a      	strh	r2, [r3, #0]
 8004d48:	e002      	b.n	8004d50 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else{
			params_ptr->duty = PWM_DUTY_VALUE_MAX; //if depth is 0, just output 1023
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a07      	ldr	r2, [pc, #28]	@ (8004d6c <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004d4e:	801a      	strh	r2, [r3, #0]
		}

	#endif

	//SET THE NEXT VALUE FOR THE MAIN OSCILLATOR
	params_ptr->prev_duty = params_ptr->duty;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	805a      	strh	r2, [r3, #2]

	return 1;
 8004d5a:	2301      	movs	r3, #1
}
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	b004      	add	sp, #16
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	0800dbb8 	.word	0x0800dbb8
 8004d68:	0800d7b8 	.word	0x0800d7b8
 8004d6c:	000003ff 	.word	0x000003ff

08004d70 <Write_Next_Main_Oscillator_Values_to_Delay_Line>:

uint8_t Write_Next_Main_Oscillator_Values_to_Delay_Line(struct Params* params_ptr, struct Delay_Line* delay_line_ptr){
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]

	//STORE THE VALUES IN THE APPROPRIATE '0TH - 1' INDEX RELATIVE TO THE START POINTER
		if(delay_line_ptr->duty_delay_line_start_offset != 0){
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	4a44      	ldr	r2, [pc, #272]	@ (8004e90 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004d7e:	5a9b      	ldrh	r3, [r3, r2]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00b      	beq.n	8004d9e <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x2e>
			delay_line_ptr->duty_delay_line_storage_array[delay_line_ptr->duty_delay_line_start_offset - 1] = params_ptr->duty;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	4a41      	ldr	r2, [pc, #260]	@ (8004e90 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004d8a:	5a9b      	ldrh	r3, [r3, r2]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	1e5a      	subs	r2, r3, #1
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	b299      	uxth	r1, r3
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	0052      	lsls	r2, r2, #1
 8004d9a:	52d1      	strh	r1, [r2, r3]
 8004d9c:	e006      	b.n	8004dac <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x3c>
		}
		else{
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	b299      	uxth	r1, r3
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	2380      	movs	r3, #128	@ 0x80
 8004da8:	00db      	lsls	r3, r3, #3
 8004daa:	52d1      	strh	r1, [r2, r3]
		}

		//DECREMENT THE START AND FINISH POINTERS
		if(delay_line_ptr->duty_delay_line_start_offset == 0){
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	4a38      	ldr	r2, [pc, #224]	@ (8004e90 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004db0:	5a9b      	ldrh	r3, [r3, r2]
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10e      	bne.n	8004dd6 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x66>
			delay_line_ptr->duty_delay_line_start_offset = FINAL_INDEX + 1;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	4a35      	ldr	r2, [pc, #212]	@ (8004e90 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004dbc:	2180      	movs	r1, #128	@ 0x80
 8004dbe:	0089      	lsls	r1, r1, #2
 8004dc0:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	4a33      	ldr	r2, [pc, #204]	@ (8004e94 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004dc6:	5a9b      	ldrh	r3, [r3, r2]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b299      	uxth	r1, r3
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	4a30      	ldr	r2, [pc, #192]	@ (8004e94 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004dd2:	5299      	strh	r1, [r3, r2]
 8004dd4:	e026      	b.n	8004e24 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else if(delay_line_ptr->duty_delay_line_finish_offset == 0){
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	4a2e      	ldr	r2, [pc, #184]	@ (8004e94 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004dda:	5a9b      	ldrh	r3, [r3, r2]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10e      	bne.n	8004e00 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x90>
			delay_line_ptr->duty_delay_line_finish_offset = FINAL_INDEX + 1;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	4a2b      	ldr	r2, [pc, #172]	@ (8004e94 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004de6:	2180      	movs	r1, #128	@ 0x80
 8004de8:	0089      	lsls	r1, r1, #2
 8004dea:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	4a28      	ldr	r2, [pc, #160]	@ (8004e90 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004df0:	5a9b      	ldrh	r3, [r3, r2]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b299      	uxth	r1, r3
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	4a25      	ldr	r2, [pc, #148]	@ (8004e90 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004dfc:	5299      	strh	r1, [r3, r2]
 8004dfe:	e011      	b.n	8004e24 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else{
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	4a23      	ldr	r2, [pc, #140]	@ (8004e90 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004e04:	5a9b      	ldrh	r3, [r3, r2]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b299      	uxth	r1, r3
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	4a20      	ldr	r2, [pc, #128]	@ (8004e90 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004e10:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	4a1f      	ldr	r2, [pc, #124]	@ (8004e94 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004e16:	5a9b      	ldrh	r3, [r3, r2]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b299      	uxth	r1, r3
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	4a1c      	ldr	r2, [pc, #112]	@ (8004e94 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004e22:	5299      	strh	r1, [r3, r2]
		}

		//DETERMINE THE DELAYED WAVE'S VALUES
		if(delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	4a1a      	ldr	r2, [pc, #104]	@ (8004e90 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004e28:	5a9b      	ldrh	r3, [r3, r2]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	001a      	movs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	18d2      	adds	r2, r2, r3
 8004e36:	2380      	movs	r3, #128	@ 0x80
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	dd13      	ble.n	8004e66 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xf6>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + (delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	4913      	ldr	r1, [pc, #76]	@ (8004e90 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004e44:	5a5b      	ldrh	r3, [r3, r1]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	0019      	movs	r1, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	18cb      	adds	r3, r1, r3
 8004e52:	4911      	ldr	r1, [pc, #68]	@ (8004e98 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x128>)
 8004e54:	468c      	mov	ip, r1
 8004e56:	4463      	add	r3, ip
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	18d3      	adds	r3, r2, r3
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	809a      	strh	r2, [r3, #4]
 8004e64:	e00f      	b.n	8004e86 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x116>
		}
		else{
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset);
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	4909      	ldr	r1, [pc, #36]	@ (8004e90 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004e6c:	5a5b      	ldrh	r3, [r3, r1]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	0019      	movs	r1, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	18cb      	adds	r3, r1, r3
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	18d3      	adds	r3, r2, r3
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	809a      	strh	r2, [r3, #4]
		}

	return 1;
 8004e86:	2301      	movs	r3, #1
}
 8004e88:	0018      	movs	r0, r3
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	b002      	add	sp, #8
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	00000402 	.word	0x00000402
 8004e94:	00000404 	.word	0x00000404
 8004e98:	7ffffe00 	.word	0x7ffffe00

08004e9c <Process_ADC_Conversion_Values>:

uint8_t Process_ADC_Conversion_Values(struct Params* params_ptr, volatile uint16_t* ADCResultsDMA_ptr){
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA_ptr[WAVESHAPE_ADC_RESULT_INDEX] >> 5; //set ADC_Result to waveshape index value, truncate to 7-bit
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	2116      	movs	r1, #22
 8004eae:	187b      	adds	r3, r7, r1
 8004eb0:	0952      	lsrs	r2, r2, #5
 8004eb2:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8004eb4:	187b      	adds	r3, r7, r1
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004eba:	d803      	bhi.n	8004ec4 <Process_ADC_Conversion_Values+0x28>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	719a      	strb	r2, [r3, #6]
 8004ec2:	e010      	b.n	8004ee6 <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8004ec4:	2316      	movs	r3, #22
 8004ec6:	18fb      	adds	r3, r7, r3
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	2b55      	cmp	r3, #85	@ 0x55
 8004ecc:	d803      	bhi.n	8004ed6 <Process_ADC_Conversion_Values+0x3a>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	719a      	strb	r2, [r3, #6]
 8004ed4:	e007      	b.n	8004ee6 <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 8004ed6:	2316      	movs	r3, #22
 8004ed8:	18fb      	adds	r3, r7, r3
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ede:	d802      	bhi.n	8004ee6 <Process_ADC_Conversion_Values+0x4a>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	719a      	strb	r2, [r3, #6]
	}

	//GET SPEED
	uint16_t temp_speed = ADCResultsDMA_ptr[SPEED_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	3302      	adds	r3, #2
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	2114      	movs	r1, #20
 8004ef0:	187b      	adds	r3, r7, r1
 8004ef2:	0952      	lsrs	r2, r2, #5
 8004ef4:	801a      	strh	r2, [r3, #0]
	temp_speed <<= 3; //convert to 10-bit
 8004ef6:	187b      	adds	r3, r7, r1
 8004ef8:	187a      	adds	r2, r7, r1
 8004efa:	8812      	ldrh	r2, [r2, #0]
 8004efc:	00d2      	lsls	r2, r2, #3
 8004efe:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = temp_speed;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	187a      	adds	r2, r7, r1
 8004f04:	8812      	ldrh	r2, [r2, #0]
 8004f06:	811a      	strh	r2, [r3, #8]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON

		uint8_t temp_depth = ADCResultsDMA_ptr[DEPTH_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	095b      	lsrs	r3, r3, #5
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	2113      	movs	r1, #19
 8004f16:	187b      	adds	r3, r7, r1
 8004f18:	701a      	strb	r2, [r3, #0]
		params_ptr->depth = temp_depth;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	187a      	adds	r2, r7, r1
 8004f1e:	7812      	ldrb	r2, [r2, #0]
 8004f20:	729a      	strb	r2, [r3, #10]
	#endif

	//GET SYMMETRY
	#if SYMMETRY_ON_OR_OFF == ON

		uint16_t temp_symmetry = ADCResultsDMA_ptr[SYMMETRY_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	3306      	adds	r3, #6
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	2110      	movs	r1, #16
 8004f2c:	187b      	adds	r3, r7, r1
 8004f2e:	0952      	lsrs	r2, r2, #5
 8004f30:	801a      	strh	r2, [r3, #0]
		temp_symmetry <<= 1; //convert to 8-bit
 8004f32:	187a      	adds	r2, r7, r1
 8004f34:	187b      	adds	r3, r7, r1
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	18db      	adds	r3, r3, r3
 8004f3a:	8013      	strh	r3, [r2, #0]
		params_ptr->symmetry = temp_symmetry;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	187a      	adds	r2, r7, r1
 8004f40:	8812      	ldrh	r2, [r2, #0]
 8004f42:	819a      	strh	r2, [r3, #12]

	#endif

	//GET DELAY LINE READ POINTER OFFSET

	uint16_t temp_delay = ADCResultsDMA_ptr[DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	3308      	adds	r3, #8
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	210e      	movs	r1, #14
 8004f4e:	187b      	adds	r3, r7, r1
 8004f50:	0952      	lsrs	r2, r2, #5
 8004f52:	801a      	strh	r2, [r3, #0]
	temp_delay <<= 2; //convert to 9-bit
 8004f54:	187b      	adds	r3, r7, r1
 8004f56:	187a      	adds	r2, r7, r1
 8004f58:	8812      	ldrh	r2, [r2, #0]
 8004f5a:	0092      	lsls	r2, r2, #2
 8004f5c:	801a      	strh	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = temp_delay;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	187a      	adds	r2, r7, r1
 8004f62:	8812      	ldrh	r2, [r2, #0]
 8004f64:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8004f66:	2301      	movs	r3, #1
}
 8004f68:	0018      	movs	r0, r3
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	b006      	add	sp, #24
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <Startup>:
#include "stm32g0xx_ll_lptim.h"
#include "stm32g0xx_hal_flash.h"

#include "CC_and_PC.h" //for some reason compiler shits itself if this is included in startup.h

uint8_t __attribute__((optimize("O0")))Startup(void){
 8004f70:	b590      	push	{r4, r7, lr}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af02      	add	r7, sp, #8

	//Shouldn't be required now we have a default state set below, even in case flash not programmed //Set_Status_Bit(&statuses, Start_Required_Before_Sync_Mode); //set default mode to requiring START MIDI message before beginning a sync

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8004f76:	2007      	movs	r0, #7
 8004f78:	f002 fd9b 	bl	8007ab2 <HAL_NVIC_DisableIRQ>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 8004f7c:	4b5a      	ldr	r3, [pc, #360]	@ (80050e8 <Startup+0x178>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	4b59      	ldr	r3, [pc, #356]	@ (80050e8 <Startup+0x178>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2101      	movs	r1, #1
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM16
 8004f8c:	4b57      	ldr	r3, [pc, #348]	@ (80050ec <Startup+0x17c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	4b56      	ldr	r3, [pc, #344]	@ (80050ec <Startup+0x17c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2101      	movs	r1, #1
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	60da      	str	r2, [r3, #12]

	//SET DEFAULT PIN STATES
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 8004f9c:	2380      	movs	r3, #128	@ 0x80
 8004f9e:	0099      	lsls	r1, r3, #2
 8004fa0:	23a0      	movs	r3, #160	@ 0xa0
 8004fa2:	05db      	lsls	r3, r3, #23
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f003 fa3f 	bl	800842a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_HIGH_GPIO_Port, HACK_POT_HIGH_Pin, 1);
 8004fac:	2380      	movs	r3, #128	@ 0x80
 8004fae:	0159      	lsls	r1, r3, #5
 8004fb0:	23a0      	movs	r3, #160	@ 0xa0
 8004fb2:	05db      	lsls	r3, r3, #23
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	f003 fa37 	bl	800842a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_LOW_GPIO_Port, HACK_POT_LOW_Pin, 0);
 8004fbc:	23a0      	movs	r3, #160	@ 0xa0
 8004fbe:	05db      	lsls	r3, r3, #23
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2180      	movs	r1, #128	@ 0x80
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f003 fa30 	bl	800842a <HAL_GPIO_WritePin>

	//Point Arrays to Presets
	Initialise_Preset_Arrays();
 8004fca:	f7fb fa3d 	bl	8000448 <Initialise_Preset_Arrays>

	//Read User Presets From Flash, regardless of whether they have been written to before
	Read_and_Interpret_User_Presets_From_Flash();
 8004fce:	f7fb fd97 	bl	8000b00 <Read_and_Interpret_User_Presets_From_Flash>

	//Read 'User Preset Used' Bytes, 'Start Required Before MIDI CLK' Byte, MIDI Omni On/Off Status Bit, and MIDI Basic Channel
	Read_and_Interpret_Misc_From_Flash(MISC_FLASH_MEMORY_ADDRESS, user_presets_used_array, &statuses, &MIDI_basic_channel, NUM_PRESETS);
 8004fd2:	4b47      	ldr	r3, [pc, #284]	@ (80050f0 <Startup+0x180>)
 8004fd4:	4a47      	ldr	r2, [pc, #284]	@ (80050f4 <Startup+0x184>)
 8004fd6:	4948      	ldr	r1, [pc, #288]	@ (80050f8 <Startup+0x188>)
 8004fd8:	4c48      	ldr	r4, [pc, #288]	@ (80050fc <Startup+0x18c>)
 8004fda:	2004      	movs	r0, #4
 8004fdc:	9000      	str	r0, [sp, #0]
 8004fde:	0020      	movs	r0, r4
 8004fe0:	f7fb fc81 	bl	80008e6 <Read_and_Interpret_Misc_From_Flash>

	//Set the Converted Preset Array to the Relevant Factory/User Preset depending upon the 'User Preset Used' Byte read from Flash
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array,
 8004fe4:	4b46      	ldr	r3, [pc, #280]	@ (8005100 <Startup+0x190>)
 8004fe6:	4a47      	ldr	r2, [pc, #284]	@ (8005104 <Startup+0x194>)
 8004fe8:	4943      	ldr	r1, [pc, #268]	@ (80050f8 <Startup+0x188>)
 8004fea:	4847      	ldr	r0, [pc, #284]	@ (8005108 <Startup+0x198>)
 8004fec:	2404      	movs	r4, #4
 8004fee:	9400      	str	r4, [sp, #0]
 8004ff0:	f7fb fd2f 	bl	8000a52 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
												  	  	  	  factory_presets_array,
															  user_presets_array,
															  NUM_PRESETS);

	//GET ADC VALUES
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 8004ff4:	4b45      	ldr	r3, [pc, #276]	@ (800510c <Startup+0x19c>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	001a      	movs	r2, r3
 8004ffa:	4945      	ldr	r1, [pc, #276]	@ (8005110 <Startup+0x1a0>)
 8004ffc:	4b45      	ldr	r3, [pc, #276]	@ (8005114 <Startup+0x1a4>)
 8004ffe:	0018      	movs	r0, r3
 8005000:	f001 fe08 	bl	8006c14 <HAL_ADC_Start_DMA>

	//WAIT
	while(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){}; //wait while first ADC conversion is ongoing - raw and final values will be computed within this time
 8005004:	46c0      	nop			@ (mov r8, r8)
 8005006:	4b3b      	ldr	r3, [pc, #236]	@ (80050f4 <Startup+0x184>)
 8005008:	2110      	movs	r1, #16
 800500a:	0018      	movs	r0, r3
 800500c:	f001 f94a 	bl	80062a4 <Get_Status_Bit>
 8005010:	1e03      	subs	r3, r0, #0
 8005012:	d0f8      	beq.n	8005006 <Startup+0x96>

	// re-initialise all values in delay line storage array to middle value of wave (if sine/triangle mode) or bottom of wave if square mode, as they are initialised to 0 on startup
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8005014:	1dbb      	adds	r3, r7, #6
 8005016:	2200      	movs	r2, #0
 8005018:	801a      	strh	r2, [r3, #0]
 800501a:	e02c      	b.n	8005076 <Startup+0x106>

		if(params.waveshape == SQUARE_MODE){
 800501c:	4b3e      	ldr	r3, [pc, #248]	@ (8005118 <Startup+0x1a8>)
 800501e:	799b      	ldrb	r3, [r3, #6]
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d111      	bne.n	800504a <Startup+0xda>

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
 8005026:	4b3c      	ldr	r3, [pc, #240]	@ (8005118 <Startup+0x1a8>)
 8005028:	7a9b      	ldrb	r3, [r3, #10]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	001a      	movs	r2, r3
 800502e:	0013      	movs	r3, r2
 8005030:	029b      	lsls	r3, r3, #10
 8005032:	1a9b      	subs	r3, r3, r2
 8005034:	11db      	asrs	r3, r3, #7
 8005036:	b29b      	uxth	r3, r3
 8005038:	1dba      	adds	r2, r7, #6
 800503a:	8812      	ldrh	r2, [r2, #0]
 800503c:	4937      	ldr	r1, [pc, #220]	@ (800511c <Startup+0x1ac>)
 800503e:	1acb      	subs	r3, r1, r3
 8005040:	b299      	uxth	r1, r3
 8005042:	4b37      	ldr	r3, [pc, #220]	@ (8005120 <Startup+0x1b0>)
 8005044:	0052      	lsls	r2, r2, #1
 8005046:	52d1      	strh	r1, [r2, r3]
 8005048:	e010      	b.n	800506c <Startup+0xfc>
		}
		else{

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - (((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION) >> 1);
 800504a:	4b33      	ldr	r3, [pc, #204]	@ (8005118 <Startup+0x1a8>)
 800504c:	7a9b      	ldrb	r3, [r3, #10]
 800504e:	b2db      	uxtb	r3, r3
 8005050:	001a      	movs	r2, r3
 8005052:	0013      	movs	r3, r2
 8005054:	029b      	lsls	r3, r3, #10
 8005056:	1a9b      	subs	r3, r3, r2
 8005058:	121b      	asrs	r3, r3, #8
 800505a:	b29b      	uxth	r3, r3
 800505c:	1dba      	adds	r2, r7, #6
 800505e:	8812      	ldrh	r2, [r2, #0]
 8005060:	492e      	ldr	r1, [pc, #184]	@ (800511c <Startup+0x1ac>)
 8005062:	1acb      	subs	r3, r1, r3
 8005064:	b299      	uxth	r1, r3
 8005066:	4b2e      	ldr	r3, [pc, #184]	@ (8005120 <Startup+0x1b0>)
 8005068:	0052      	lsls	r2, r2, #1
 800506a:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 800506c:	1dbb      	adds	r3, r7, #6
 800506e:	881a      	ldrh	r2, [r3, #0]
 8005070:	1dbb      	adds	r3, r7, #6
 8005072:	3201      	adds	r2, #1
 8005074:	801a      	strh	r2, [r3, #0]
 8005076:	1dbb      	adds	r3, r7, #6
 8005078:	881a      	ldrh	r2, [r3, #0]
 800507a:	2380      	movs	r3, #128	@ 0x80
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	429a      	cmp	r2, r3
 8005080:	d9cc      	bls.n	800501c <Startup+0xac>
		}
	}

	//PREPARE OSCILLATORS
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)STARTUP_MODE);
 8005082:	4b25      	ldr	r3, [pc, #148]	@ (8005118 <Startup+0x1a8>)
 8005084:	2102      	movs	r1, #2
 8005086:	0018      	movs	r0, r3
 8005088:	f7ff fd7c 	bl	8004b84 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 800508c:	4a24      	ldr	r2, [pc, #144]	@ (8005120 <Startup+0x1b0>)
 800508e:	4b22      	ldr	r3, [pc, #136]	@ (8005118 <Startup+0x1a8>)
 8005090:	0011      	movs	r1, r2
 8005092:	0018      	movs	r0, r3
 8005094:	f7ff fe6c 	bl	8004d70 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	Set_Oscillator_Values(&params);
 8005098:	4b1f      	ldr	r3, [pc, #124]	@ (8005118 <Startup+0x1a8>)
 800509a:	0018      	movs	r0, r3
 800509c:	f7ff fd46 	bl	8004b2c <Set_Oscillator_Values>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(&htim1, TIM_CHANNEL_2, TIM_CHANNEL_4);
 80050a0:	4b20      	ldr	r3, [pc, #128]	@ (8005124 <Startup+0x1b4>)
 80050a2:	220c      	movs	r2, #12
 80050a4:	2104      	movs	r1, #4
 80050a6:	0018      	movs	r0, r3
 80050a8:	f7ff fcb4 	bl	8004a14 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>
	Start_Freq_Gen_Timer();
 80050ac:	f7ff fcee 	bl	8004a8c <Start_Freq_Gen_Timer>

	//START UART RECEIVE
	Start_UART_Receive();
 80050b0:	f7fc f9cc 	bl	800144c <Start_UART_Receive>

	//START IP CAP
	Start_Input_Capture_Timer();
 80050b4:	f7ff fb7c 	bl	80047b0 <Start_Input_Capture_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 80050b8:	f001 f8ec 	bl	8006294 <Global_Interrupt_Enable>

	//ENABLE TAP-TEMPO SWITCH CHECKING
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 80050bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005128 <Startup+0x1b8>)
 80050be:	22fa      	movs	r2, #250	@ 0xfa
 80050c0:	21fa      	movs	r1, #250	@ 0xfa
 80050c2:	0018      	movs	r0, r3
 80050c4:	f003 faa8 	bl	8008618 <HAL_LPTIM_SetOnce_Start_IT>

	//TURN LED OFF ON STARTUP
	LED_fsm.current_state = LED_OFF;
 80050c8:	4b18      	ldr	r3, [pc, #96]	@ (800512c <Startup+0x1bc>)
 80050ca:	2201      	movs	r2, #1
 80050cc:	701a      	strb	r2, [r3, #0]

	//ENABLE LED TIMER
	Start_OC_TIM(&htim14, TIM_CHANNEL_1);
 80050ce:	4b18      	ldr	r3, [pc, #96]	@ (8005130 <Startup+0x1c0>)
 80050d0:	2100      	movs	r1, #0
 80050d2:	0018      	movs	r0, r3
 80050d4:	f001 f863 	bl	800619e <Start_OC_TIM>

	//ENABLE EXTI
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80050d8:	2007      	movs	r0, #7
 80050da:	f002 fcda 	bl	8007a92 <HAL_NVIC_EnableIRQ>

	return 1;
 80050de:	2301      	movs	r3, #1
}
 80050e0:	0018      	movs	r0, r3
 80050e2:	46bd      	mov	sp, r7
 80050e4:	b003      	add	sp, #12
 80050e6:	bd90      	pop	{r4, r7, pc}
 80050e8:	20000814 	.word	0x20000814
 80050ec:	20000758 	.word	0x20000758
 80050f0:	200004ca 	.word	0x200004ca
 80050f4:	20000c3c 	.word	0x20000c3c
 80050f8:	200004c0 	.word	0x200004c0
 80050fc:	0800f820 	.word	0x0800f820
 8005100:	20000484 	.word	0x20000484
 8005104:	20000474 	.word	0x20000474
 8005108:	20000494 	.word	0x20000494
 800510c:	0800dfb8 	.word	0x0800dfb8
 8005110:	20000c4c 	.word	0x20000c4c
 8005114:	200004fc 	.word	0x200004fc
 8005118:	20000c58 	.word	0x20000c58
 800511c:	000003ff 	.word	0x000003ff
 8005120:	20000028 	.word	0x20000028
 8005124:	2000098c 	.word	0x2000098c
 8005128:	20000bcc 	.word	0x20000bcc
 800512c:	20000448 	.word	0x20000448
 8005130:	200005e0 	.word	0x200005e0

08005134 <Advance_Pending_States>:
volatile struct IP_CAP_FSM IP_CAP_fsm = {.current_state = IDLE, .prev_state = IP_CAP_NONE};
volatile enum MIDI_CLK_FSM_State MIDI_CLK_fsm = NOT_COMPILING;
volatile struct LED_FSM LED_fsm = {.current_state = LED_OFF, .prev_state = LED_NONE};

//FUNCTION DEFINITIONS
uint8_t Advance_Pending_States(void){
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0

	//UPDATE SPEED FSM
	union Speed_FSM_States current_state = speed_fsm.current_state;
 800513a:	1d3b      	adds	r3, r7, #4
 800513c:	4a12      	ldr	r2, [pc, #72]	@ (8005188 <Advance_Pending_States+0x54>)
 800513e:	7812      	ldrb	r2, [r2, #0]
 8005140:	701a      	strb	r2, [r3, #0]

	if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8005142:	4b11      	ldr	r3, [pc, #68]	@ (8005188 <Advance_Pending_States+0x54>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b05      	cmp	r3, #5
 800514a:	d103      	bne.n	8005154 <Advance_Pending_States+0x20>

		speed_fsm.current_state.speed_exclusive_state = TAP_MODE;
 800514c:	4b0e      	ldr	r3, [pc, #56]	@ (8005188 <Advance_Pending_States+0x54>)
 800514e:	2204      	movs	r2, #4
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	e007      	b.n	8005164 <Advance_Pending_States+0x30>
	}
	else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){
 8005154:	4b0c      	ldr	r3, [pc, #48]	@ (8005188 <Advance_Pending_States+0x54>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b07      	cmp	r3, #7
 800515c:	d102      	bne.n	8005164 <Advance_Pending_States+0x30>

		speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 800515e:	4b0a      	ldr	r3, [pc, #40]	@ (8005188 <Advance_Pending_States+0x54>)
 8005160:	2206      	movs	r2, #6
 8005162:	701a      	strb	r2, [r3, #0]
	}

	//DON'T ADD MIDI CLK CODE


	if(!((current_state.speed_exclusive_state == CLK_IN_MODE) || (current_state.speed_exclusive_state == TAP_MODE))){
 8005164:	1d3b      	adds	r3, r7, #4
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b06      	cmp	r3, #6
 800516a:	d007      	beq.n	800517c <Advance_Pending_States+0x48>
 800516c:	1d3b      	adds	r3, r7, #4
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b04      	cmp	r3, #4
 8005172:	d003      	beq.n	800517c <Advance_Pending_States+0x48>

		speed_fsm.prev_state = current_state;
 8005174:	4b04      	ldr	r3, [pc, #16]	@ (8005188 <Advance_Pending_States+0x54>)
 8005176:	1d3a      	adds	r2, r7, #4
 8005178:	7812      	ldrb	r2, [r2, #0]
 800517a:	705a      	strb	r2, [r3, #1]
	}

	return 1;
 800517c:	2301      	movs	r3, #1
}
 800517e:	0018      	movs	r0, r3
 8005180:	46bd      	mov	sp, r7
 8005182:	b002      	add	sp, #8
 8005184:	bd80      	pop	{r7, pc}
 8005186:	46c0      	nop			@ (mov r8, r8)
 8005188:	20000430 	.word	0x20000430

0800518c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005192:	4b0f      	ldr	r3, [pc, #60]	@ (80051d0 <HAL_MspInit+0x44>)
 8005194:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005196:	4b0e      	ldr	r3, [pc, #56]	@ (80051d0 <HAL_MspInit+0x44>)
 8005198:	2101      	movs	r1, #1
 800519a:	430a      	orrs	r2, r1
 800519c:	641a      	str	r2, [r3, #64]	@ 0x40
 800519e:	4b0c      	ldr	r3, [pc, #48]	@ (80051d0 <HAL_MspInit+0x44>)
 80051a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a2:	2201      	movs	r2, #1
 80051a4:	4013      	ands	r3, r2
 80051a6:	607b      	str	r3, [r7, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80051aa:	4b09      	ldr	r3, [pc, #36]	@ (80051d0 <HAL_MspInit+0x44>)
 80051ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051ae:	4b08      	ldr	r3, [pc, #32]	@ (80051d0 <HAL_MspInit+0x44>)
 80051b0:	2180      	movs	r1, #128	@ 0x80
 80051b2:	0549      	lsls	r1, r1, #21
 80051b4:	430a      	orrs	r2, r1
 80051b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80051b8:	4b05      	ldr	r3, [pc, #20]	@ (80051d0 <HAL_MspInit+0x44>)
 80051ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051bc:	2380      	movs	r3, #128	@ 0x80
 80051be:	055b      	lsls	r3, r3, #21
 80051c0:	4013      	ands	r3, r2
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051c6:	46c0      	nop			@ (mov r8, r8)
 80051c8:	46bd      	mov	sp, r7
 80051ca:	b002      	add	sp, #8
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	46c0      	nop			@ (mov r8, r8)
 80051d0:	40021000 	.word	0x40021000

080051d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80051d4:	b590      	push	{r4, r7, lr}
 80051d6:	b08b      	sub	sp, #44	@ 0x2c
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051dc:	2414      	movs	r4, #20
 80051de:	193b      	adds	r3, r7, r4
 80051e0:	0018      	movs	r0, r3
 80051e2:	2314      	movs	r3, #20
 80051e4:	001a      	movs	r2, r3
 80051e6:	2100      	movs	r1, #0
 80051e8:	f008 fa94 	bl	800d714 <memset>
  if(hadc->Instance==ADC1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a2e      	ldr	r2, [pc, #184]	@ (80052ac <HAL_ADC_MspInit+0xd8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d155      	bne.n	80052a2 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80051f6:	4b2e      	ldr	r3, [pc, #184]	@ (80052b0 <HAL_ADC_MspInit+0xdc>)
 80051f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051fa:	4b2d      	ldr	r3, [pc, #180]	@ (80052b0 <HAL_ADC_MspInit+0xdc>)
 80051fc:	2180      	movs	r1, #128	@ 0x80
 80051fe:	0349      	lsls	r1, r1, #13
 8005200:	430a      	orrs	r2, r1
 8005202:	641a      	str	r2, [r3, #64]	@ 0x40
 8005204:	4b2a      	ldr	r3, [pc, #168]	@ (80052b0 <HAL_ADC_MspInit+0xdc>)
 8005206:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005208:	2380      	movs	r3, #128	@ 0x80
 800520a:	035b      	lsls	r3, r3, #13
 800520c:	4013      	ands	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005212:	4b27      	ldr	r3, [pc, #156]	@ (80052b0 <HAL_ADC_MspInit+0xdc>)
 8005214:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005216:	4b26      	ldr	r3, [pc, #152]	@ (80052b0 <HAL_ADC_MspInit+0xdc>)
 8005218:	2101      	movs	r1, #1
 800521a:	430a      	orrs	r2, r1
 800521c:	635a      	str	r2, [r3, #52]	@ 0x34
 800521e:	4b24      	ldr	r3, [pc, #144]	@ (80052b0 <HAL_ADC_MspInit+0xdc>)
 8005220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005222:	2201      	movs	r2, #1
 8005224:	4013      	ands	r3, r2
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800522a:	193b      	adds	r3, r7, r4
 800522c:	2273      	movs	r2, #115	@ 0x73
 800522e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005230:	193b      	adds	r3, r7, r4
 8005232:	2203      	movs	r2, #3
 8005234:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005236:	193b      	adds	r3, r7, r4
 8005238:	2200      	movs	r2, #0
 800523a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800523c:	193a      	adds	r2, r7, r4
 800523e:	23a0      	movs	r3, #160	@ 0xa0
 8005240:	05db      	lsls	r3, r3, #23
 8005242:	0011      	movs	r1, r2
 8005244:	0018      	movs	r0, r3
 8005246:	f002 ff6f 	bl	8008128 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800524a:	4b1a      	ldr	r3, [pc, #104]	@ (80052b4 <HAL_ADC_MspInit+0xe0>)
 800524c:	4a1a      	ldr	r2, [pc, #104]	@ (80052b8 <HAL_ADC_MspInit+0xe4>)
 800524e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005250:	4b18      	ldr	r3, [pc, #96]	@ (80052b4 <HAL_ADC_MspInit+0xe0>)
 8005252:	2205      	movs	r2, #5
 8005254:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005256:	4b17      	ldr	r3, [pc, #92]	@ (80052b4 <HAL_ADC_MspInit+0xe0>)
 8005258:	2200      	movs	r2, #0
 800525a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800525c:	4b15      	ldr	r3, [pc, #84]	@ (80052b4 <HAL_ADC_MspInit+0xe0>)
 800525e:	2200      	movs	r2, #0
 8005260:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005262:	4b14      	ldr	r3, [pc, #80]	@ (80052b4 <HAL_ADC_MspInit+0xe0>)
 8005264:	2280      	movs	r2, #128	@ 0x80
 8005266:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005268:	4b12      	ldr	r3, [pc, #72]	@ (80052b4 <HAL_ADC_MspInit+0xe0>)
 800526a:	2280      	movs	r2, #128	@ 0x80
 800526c:	0052      	lsls	r2, r2, #1
 800526e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005270:	4b10      	ldr	r3, [pc, #64]	@ (80052b4 <HAL_ADC_MspInit+0xe0>)
 8005272:	2280      	movs	r2, #128	@ 0x80
 8005274:	00d2      	lsls	r2, r2, #3
 8005276:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8005278:	4b0e      	ldr	r3, [pc, #56]	@ (80052b4 <HAL_ADC_MspInit+0xe0>)
 800527a:	2200      	movs	r2, #0
 800527c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800527e:	4b0d      	ldr	r3, [pc, #52]	@ (80052b4 <HAL_ADC_MspInit+0xe0>)
 8005280:	2280      	movs	r2, #128	@ 0x80
 8005282:	0192      	lsls	r2, r2, #6
 8005284:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005286:	4b0b      	ldr	r3, [pc, #44]	@ (80052b4 <HAL_ADC_MspInit+0xe0>)
 8005288:	0018      	movs	r0, r3
 800528a:	f002 fc2f 	bl	8007aec <HAL_DMA_Init>
 800528e:	1e03      	subs	r3, r0, #0
 8005290:	d001      	beq.n	8005296 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8005292:	f7fd f86b 	bl	800236c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a06      	ldr	r2, [pc, #24]	@ (80052b4 <HAL_ADC_MspInit+0xe0>)
 800529a:	651a      	str	r2, [r3, #80]	@ 0x50
 800529c:	4b05      	ldr	r3, [pc, #20]	@ (80052b4 <HAL_ADC_MspInit+0xe0>)
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80052a2:	46c0      	nop			@ (mov r8, r8)
 80052a4:	46bd      	mov	sp, r7
 80052a6:	b00b      	add	sp, #44	@ 0x2c
 80052a8:	bd90      	pop	{r4, r7, pc}
 80052aa:	46c0      	nop			@ (mov r8, r8)
 80052ac:	40012400 	.word	0x40012400
 80052b0:	40021000 	.word	0x40021000
 80052b4:	20000584 	.word	0x20000584
 80052b8:	40020008 	.word	0x40020008

080052bc <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80052bc:	b590      	push	{r4, r7, lr}
 80052be:	b097      	sub	sp, #92	@ 0x5c
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052c4:	2344      	movs	r3, #68	@ 0x44
 80052c6:	18fb      	adds	r3, r7, r3
 80052c8:	0018      	movs	r0, r3
 80052ca:	2314      	movs	r3, #20
 80052cc:	001a      	movs	r2, r3
 80052ce:	2100      	movs	r1, #0
 80052d0:	f008 fa20 	bl	800d714 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80052d4:	241c      	movs	r4, #28
 80052d6:	193b      	adds	r3, r7, r4
 80052d8:	0018      	movs	r0, r3
 80052da:	2328      	movs	r3, #40	@ 0x28
 80052dc:	001a      	movs	r2, r3
 80052de:	2100      	movs	r1, #0
 80052e0:	f008 fa18 	bl	800d714 <memset>
  if(hlptim->Instance==LPTIM1)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a46      	ldr	r2, [pc, #280]	@ (8005404 <HAL_LPTIM_MspInit+0x148>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d13e      	bne.n	800536c <HAL_LPTIM_MspInit+0xb0>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80052ee:	193b      	adds	r3, r7, r4
 80052f0:	2280      	movs	r2, #128	@ 0x80
 80052f2:	0092      	lsls	r2, r2, #2
 80052f4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 80052f6:	193b      	adds	r3, r7, r4
 80052f8:	2200      	movs	r2, #0
 80052fa:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80052fc:	193b      	adds	r3, r7, r4
 80052fe:	0018      	movs	r0, r3
 8005300:	f004 f9f8 	bl	80096f4 <HAL_RCCEx_PeriphCLKConfig>
 8005304:	1e03      	subs	r3, r0, #0
 8005306:	d001      	beq.n	800530c <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 8005308:	f7fd f830 	bl	800236c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800530c:	4b3e      	ldr	r3, [pc, #248]	@ (8005408 <HAL_LPTIM_MspInit+0x14c>)
 800530e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005310:	4b3d      	ldr	r3, [pc, #244]	@ (8005408 <HAL_LPTIM_MspInit+0x14c>)
 8005312:	2180      	movs	r1, #128	@ 0x80
 8005314:	0609      	lsls	r1, r1, #24
 8005316:	430a      	orrs	r2, r1
 8005318:	63da      	str	r2, [r3, #60]	@ 0x3c
 800531a:	4b3b      	ldr	r3, [pc, #236]	@ (8005408 <HAL_LPTIM_MspInit+0x14c>)
 800531c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800531e:	0fdb      	lsrs	r3, r3, #31
 8005320:	07db      	lsls	r3, r3, #31
 8005322:	61bb      	str	r3, [r7, #24]
 8005324:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005326:	4b38      	ldr	r3, [pc, #224]	@ (8005408 <HAL_LPTIM_MspInit+0x14c>)
 8005328:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800532a:	4b37      	ldr	r3, [pc, #220]	@ (8005408 <HAL_LPTIM_MspInit+0x14c>)
 800532c:	2102      	movs	r1, #2
 800532e:	430a      	orrs	r2, r1
 8005330:	635a      	str	r2, [r3, #52]	@ 0x34
 8005332:	4b35      	ldr	r3, [pc, #212]	@ (8005408 <HAL_LPTIM_MspInit+0x14c>)
 8005334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005336:	2202      	movs	r2, #2
 8005338:	4013      	ands	r3, r2
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	697b      	ldr	r3, [r7, #20]
    /**LPTIM1 GPIO Configuration
    PB0     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800533e:	2144      	movs	r1, #68	@ 0x44
 8005340:	187b      	adds	r3, r7, r1
 8005342:	2201      	movs	r2, #1
 8005344:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005346:	187b      	adds	r3, r7, r1
 8005348:	2202      	movs	r2, #2
 800534a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800534c:	187b      	adds	r3, r7, r1
 800534e:	2200      	movs	r2, #0
 8005350:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005352:	187b      	adds	r3, r7, r1
 8005354:	2200      	movs	r2, #0
 8005356:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM1;
 8005358:	187b      	adds	r3, r7, r1
 800535a:	2205      	movs	r2, #5
 800535c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800535e:	187b      	adds	r3, r7, r1
 8005360:	4a2a      	ldr	r2, [pc, #168]	@ (800540c <HAL_LPTIM_MspInit+0x150>)
 8005362:	0019      	movs	r1, r3
 8005364:	0010      	movs	r0, r2
 8005366:	f002 fedf 	bl	8008128 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 800536a:	e046      	b.n	80053fa <HAL_LPTIM_MspInit+0x13e>
  else if(hlptim->Instance==LPTIM2)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a27      	ldr	r2, [pc, #156]	@ (8005410 <HAL_LPTIM_MspInit+0x154>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d141      	bne.n	80053fa <HAL_LPTIM_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8005376:	211c      	movs	r1, #28
 8005378:	187b      	adds	r3, r7, r1
 800537a:	2280      	movs	r2, #128	@ 0x80
 800537c:	00d2      	lsls	r2, r2, #3
 800537e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK1;
 8005380:	187b      	adds	r3, r7, r1
 8005382:	2200      	movs	r2, #0
 8005384:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005386:	187b      	adds	r3, r7, r1
 8005388:	0018      	movs	r0, r3
 800538a:	f004 f9b3 	bl	80096f4 <HAL_RCCEx_PeriphCLKConfig>
 800538e:	1e03      	subs	r3, r0, #0
 8005390:	d001      	beq.n	8005396 <HAL_LPTIM_MspInit+0xda>
      Error_Handler();
 8005392:	f7fc ffeb 	bl	800236c <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8005396:	4b1c      	ldr	r3, [pc, #112]	@ (8005408 <HAL_LPTIM_MspInit+0x14c>)
 8005398:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800539a:	4b1b      	ldr	r3, [pc, #108]	@ (8005408 <HAL_LPTIM_MspInit+0x14c>)
 800539c:	2180      	movs	r1, #128	@ 0x80
 800539e:	05c9      	lsls	r1, r1, #23
 80053a0:	430a      	orrs	r2, r1
 80053a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80053a4:	4b18      	ldr	r3, [pc, #96]	@ (8005408 <HAL_LPTIM_MspInit+0x14c>)
 80053a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053a8:	2380      	movs	r3, #128	@ 0x80
 80053aa:	05db      	lsls	r3, r3, #23
 80053ac:	4013      	ands	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053b2:	4b15      	ldr	r3, [pc, #84]	@ (8005408 <HAL_LPTIM_MspInit+0x14c>)
 80053b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053b6:	4b14      	ldr	r3, [pc, #80]	@ (8005408 <HAL_LPTIM_MspInit+0x14c>)
 80053b8:	2101      	movs	r1, #1
 80053ba:	430a      	orrs	r2, r1
 80053bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80053be:	4b12      	ldr	r3, [pc, #72]	@ (8005408 <HAL_LPTIM_MspInit+0x14c>)
 80053c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c2:	2201      	movs	r2, #1
 80053c4:	4013      	ands	r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80053ca:	2144      	movs	r1, #68	@ 0x44
 80053cc:	187b      	adds	r3, r7, r1
 80053ce:	2280      	movs	r2, #128	@ 0x80
 80053d0:	0052      	lsls	r2, r2, #1
 80053d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053d4:	187b      	adds	r3, r7, r1
 80053d6:	2202      	movs	r2, #2
 80053d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053da:	187b      	adds	r3, r7, r1
 80053dc:	2200      	movs	r2, #0
 80053de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053e0:	187b      	adds	r3, r7, r1
 80053e2:	2200      	movs	r2, #0
 80053e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM2;
 80053e6:	187b      	adds	r3, r7, r1
 80053e8:	2205      	movs	r2, #5
 80053ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053ec:	187a      	adds	r2, r7, r1
 80053ee:	23a0      	movs	r3, #160	@ 0xa0
 80053f0:	05db      	lsls	r3, r3, #23
 80053f2:	0011      	movs	r1, r2
 80053f4:	0018      	movs	r0, r3
 80053f6:	f002 fe97 	bl	8008128 <HAL_GPIO_Init>
}
 80053fa:	46c0      	nop			@ (mov r8, r8)
 80053fc:	46bd      	mov	sp, r7
 80053fe:	b017      	add	sp, #92	@ 0x5c
 8005400:	bd90      	pop	{r4, r7, pc}
 8005402:	46c0      	nop			@ (mov r8, r8)
 8005404:	40007c00 	.word	0x40007c00
 8005408:	40021000 	.word	0x40021000
 800540c:	50000400 	.word	0x50000400
 8005410:	40009400 	.word	0x40009400

08005414 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005414:	b590      	push	{r4, r7, lr}
 8005416:	b099      	sub	sp, #100	@ 0x64
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800541c:	234c      	movs	r3, #76	@ 0x4c
 800541e:	18fb      	adds	r3, r7, r3
 8005420:	0018      	movs	r0, r3
 8005422:	2314      	movs	r3, #20
 8005424:	001a      	movs	r2, r3
 8005426:	2100      	movs	r1, #0
 8005428:	f008 f974 	bl	800d714 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800542c:	2424      	movs	r4, #36	@ 0x24
 800542e:	193b      	adds	r3, r7, r4
 8005430:	0018      	movs	r0, r3
 8005432:	2328      	movs	r3, #40	@ 0x28
 8005434:	001a      	movs	r2, r3
 8005436:	2100      	movs	r1, #0
 8005438:	f008 f96c 	bl	800d714 <memset>
  if(htim_base->Instance==TIM1)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a68      	ldr	r2, [pc, #416]	@ (80055e4 <HAL_TIM_Base_MspInit+0x1d0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d11d      	bne.n	8005482 <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8005446:	193b      	adds	r3, r7, r4
 8005448:	2280      	movs	r2, #128	@ 0x80
 800544a:	0392      	lsls	r2, r2, #14
 800544c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800544e:	193b      	adds	r3, r7, r4
 8005450:	2200      	movs	r2, #0
 8005452:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005454:	193b      	adds	r3, r7, r4
 8005456:	0018      	movs	r0, r3
 8005458:	f004 f94c 	bl	80096f4 <HAL_RCCEx_PeriphCLKConfig>
 800545c:	1e03      	subs	r3, r0, #0
 800545e:	d001      	beq.n	8005464 <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 8005460:	f7fc ff84 	bl	800236c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005464:	4b60      	ldr	r3, [pc, #384]	@ (80055e8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005466:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005468:	4b5f      	ldr	r3, [pc, #380]	@ (80055e8 <HAL_TIM_Base_MspInit+0x1d4>)
 800546a:	2180      	movs	r1, #128	@ 0x80
 800546c:	0109      	lsls	r1, r1, #4
 800546e:	430a      	orrs	r2, r1
 8005470:	641a      	str	r2, [r3, #64]	@ 0x40
 8005472:	4b5d      	ldr	r3, [pc, #372]	@ (80055e8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005474:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005476:	2380      	movs	r3, #128	@ 0x80
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	4013      	ands	r3, r2
 800547c:	623b      	str	r3, [r7, #32]
 800547e:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }

}
 8005480:	e0ab      	b.n	80055da <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM2)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	2380      	movs	r3, #128	@ 0x80
 8005488:	05db      	lsls	r3, r3, #23
 800548a:	429a      	cmp	r2, r3
 800548c:	d138      	bne.n	8005500 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800548e:	4b56      	ldr	r3, [pc, #344]	@ (80055e8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005490:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005492:	4b55      	ldr	r3, [pc, #340]	@ (80055e8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005494:	2101      	movs	r1, #1
 8005496:	430a      	orrs	r2, r1
 8005498:	63da      	str	r2, [r3, #60]	@ 0x3c
 800549a:	4b53      	ldr	r3, [pc, #332]	@ (80055e8 <HAL_TIM_Base_MspInit+0x1d4>)
 800549c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800549e:	2201      	movs	r2, #1
 80054a0:	4013      	ands	r3, r2
 80054a2:	61fb      	str	r3, [r7, #28]
 80054a4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054a6:	4b50      	ldr	r3, [pc, #320]	@ (80055e8 <HAL_TIM_Base_MspInit+0x1d4>)
 80054a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054aa:	4b4f      	ldr	r3, [pc, #316]	@ (80055e8 <HAL_TIM_Base_MspInit+0x1d4>)
 80054ac:	2101      	movs	r1, #1
 80054ae:	430a      	orrs	r2, r1
 80054b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80054b2:	4b4d      	ldr	r3, [pc, #308]	@ (80055e8 <HAL_TIM_Base_MspInit+0x1d4>)
 80054b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054b6:	2201      	movs	r2, #1
 80054b8:	4013      	ands	r3, r2
 80054ba:	61bb      	str	r3, [r7, #24]
 80054bc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 80054be:	214c      	movs	r1, #76	@ 0x4c
 80054c0:	187b      	adds	r3, r7, r1
 80054c2:	2280      	movs	r2, #128	@ 0x80
 80054c4:	0212      	lsls	r2, r2, #8
 80054c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c8:	187b      	adds	r3, r7, r1
 80054ca:	2202      	movs	r2, #2
 80054cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP; //even though we do not 'technically' need a pullup as a push-pull O/P will be driving the I/P cap pin, I think it is better to ensure the I/P cap input properly idles
 80054ce:	187b      	adds	r3, r7, r1
 80054d0:	2201      	movs	r2, #1
 80054d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054d4:	187b      	adds	r3, r7, r1
 80054d6:	2200      	movs	r2, #0
 80054d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80054da:	187b      	adds	r3, r7, r1
 80054dc:	2202      	movs	r2, #2
 80054de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 80054e0:	187a      	adds	r2, r7, r1
 80054e2:	23a0      	movs	r3, #160	@ 0xa0
 80054e4:	05db      	lsls	r3, r3, #23
 80054e6:	0011      	movs	r1, r2
 80054e8:	0018      	movs	r0, r3
 80054ea:	f002 fe1d 	bl	8008128 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 2);
 80054ee:	2202      	movs	r2, #2
 80054f0:	2102      	movs	r1, #2
 80054f2:	200f      	movs	r0, #15
 80054f4:	f002 fab8 	bl	8007a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80054f8:	200f      	movs	r0, #15
 80054fa:	f002 faca 	bl	8007a92 <HAL_NVIC_EnableIRQ>
}
 80054fe:	e06c      	b.n	80055da <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM3)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a39      	ldr	r2, [pc, #228]	@ (80055ec <HAL_TIM_Base_MspInit+0x1d8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d114      	bne.n	8005534 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800550a:	4b37      	ldr	r3, [pc, #220]	@ (80055e8 <HAL_TIM_Base_MspInit+0x1d4>)
 800550c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800550e:	4b36      	ldr	r3, [pc, #216]	@ (80055e8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005510:	2102      	movs	r1, #2
 8005512:	430a      	orrs	r2, r1
 8005514:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005516:	4b34      	ldr	r3, [pc, #208]	@ (80055e8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800551a:	2202      	movs	r2, #2
 800551c:	4013      	ands	r3, r2
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005522:	2200      	movs	r2, #0
 8005524:	2100      	movs	r1, #0
 8005526:	2010      	movs	r0, #16
 8005528:	f002 fa9e 	bl	8007a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800552c:	2010      	movs	r0, #16
 800552e:	f002 fab0 	bl	8007a92 <HAL_NVIC_EnableIRQ>
}
 8005532:	e052      	b.n	80055da <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM16)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a2d      	ldr	r2, [pc, #180]	@ (80055f0 <HAL_TIM_Base_MspInit+0x1dc>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d116      	bne.n	800556c <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800553e:	4b2a      	ldr	r3, [pc, #168]	@ (80055e8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005540:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005542:	4b29      	ldr	r3, [pc, #164]	@ (80055e8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005544:	2180      	movs	r1, #128	@ 0x80
 8005546:	0289      	lsls	r1, r1, #10
 8005548:	430a      	orrs	r2, r1
 800554a:	641a      	str	r2, [r3, #64]	@ 0x40
 800554c:	4b26      	ldr	r3, [pc, #152]	@ (80055e8 <HAL_TIM_Base_MspInit+0x1d4>)
 800554e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005550:	2380      	movs	r3, #128	@ 0x80
 8005552:	029b      	lsls	r3, r3, #10
 8005554:	4013      	ands	r3, r2
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800555a:	2200      	movs	r2, #0
 800555c:	2100      	movs	r1, #0
 800555e:	2015      	movs	r0, #21
 8005560:	f002 fa82 	bl	8007a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005564:	2015      	movs	r0, #21
 8005566:	f002 fa94 	bl	8007a92 <HAL_NVIC_EnableIRQ>
}
 800556a:	e036      	b.n	80055da <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM17)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a20      	ldr	r2, [pc, #128]	@ (80055f4 <HAL_TIM_Base_MspInit+0x1e0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d116      	bne.n	80055a4 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005576:	4b1c      	ldr	r3, [pc, #112]	@ (80055e8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005578:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800557a:	4b1b      	ldr	r3, [pc, #108]	@ (80055e8 <HAL_TIM_Base_MspInit+0x1d4>)
 800557c:	2180      	movs	r1, #128	@ 0x80
 800557e:	02c9      	lsls	r1, r1, #11
 8005580:	430a      	orrs	r2, r1
 8005582:	641a      	str	r2, [r3, #64]	@ 0x40
 8005584:	4b18      	ldr	r3, [pc, #96]	@ (80055e8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005586:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005588:	2380      	movs	r3, #128	@ 0x80
 800558a:	02db      	lsls	r3, r3, #11
 800558c:	4013      	ands	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 8005592:	2203      	movs	r2, #3
 8005594:	2103      	movs	r1, #3
 8005596:	2016      	movs	r0, #22
 8005598:	f002 fa66 	bl	8007a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800559c:	2016      	movs	r0, #22
 800559e:	f002 fa78 	bl	8007a92 <HAL_NVIC_EnableIRQ>
}
 80055a2:	e01a      	b.n	80055da <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM14)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a13      	ldr	r2, [pc, #76]	@ (80055f8 <HAL_TIM_Base_MspInit+0x1e4>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d115      	bne.n	80055da <HAL_TIM_Base_MspInit+0x1c6>
      __HAL_RCC_TIM14_CLK_ENABLE();
 80055ae:	4b0e      	ldr	r3, [pc, #56]	@ (80055e8 <HAL_TIM_Base_MspInit+0x1d4>)
 80055b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055b2:	4b0d      	ldr	r3, [pc, #52]	@ (80055e8 <HAL_TIM_Base_MspInit+0x1d4>)
 80055b4:	2180      	movs	r1, #128	@ 0x80
 80055b6:	0209      	lsls	r1, r1, #8
 80055b8:	430a      	orrs	r2, r1
 80055ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80055bc:	4b0a      	ldr	r3, [pc, #40]	@ (80055e8 <HAL_TIM_Base_MspInit+0x1d4>)
 80055be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055c0:	2380      	movs	r3, #128	@ 0x80
 80055c2:	021b      	lsls	r3, r3, #8
 80055c4:	4013      	ands	r3, r2
 80055c6:	60bb      	str	r3, [r7, #8]
 80055c8:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 80055ca:	2203      	movs	r2, #3
 80055cc:	2103      	movs	r1, #3
 80055ce:	2013      	movs	r0, #19
 80055d0:	f002 fa4a 	bl	8007a68 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80055d4:	2013      	movs	r0, #19
 80055d6:	f002 fa5c 	bl	8007a92 <HAL_NVIC_EnableIRQ>
}
 80055da:	46c0      	nop			@ (mov r8, r8)
 80055dc:	46bd      	mov	sp, r7
 80055de:	b019      	add	sp, #100	@ 0x64
 80055e0:	bd90      	pop	{r4, r7, pc}
 80055e2:	46c0      	nop			@ (mov r8, r8)
 80055e4:	40012c00 	.word	0x40012c00
 80055e8:	40021000 	.word	0x40021000
 80055ec:	40000400 	.word	0x40000400
 80055f0:	40014400 	.word	0x40014400
 80055f4:	40014800 	.word	0x40014800
 80055f8:	40002000 	.word	0x40002000

080055fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80055fc:	b590      	push	{r4, r7, lr}
 80055fe:	b08b      	sub	sp, #44	@ 0x2c
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005604:	2414      	movs	r4, #20
 8005606:	193b      	adds	r3, r7, r4
 8005608:	0018      	movs	r0, r3
 800560a:	2314      	movs	r3, #20
 800560c:	001a      	movs	r2, r3
 800560e:	2100      	movs	r1, #0
 8005610:	f008 f880 	bl	800d714 <memset>
  if(htim->Instance==TIM1)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a25      	ldr	r2, [pc, #148]	@ (80056b0 <HAL_TIM_MspPostInit+0xb4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d144      	bne.n	80056a8 <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800561e:	4b25      	ldr	r3, [pc, #148]	@ (80056b4 <HAL_TIM_MspPostInit+0xb8>)
 8005620:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005622:	4b24      	ldr	r3, [pc, #144]	@ (80056b4 <HAL_TIM_MspPostInit+0xb8>)
 8005624:	2101      	movs	r1, #1
 8005626:	430a      	orrs	r2, r1
 8005628:	635a      	str	r2, [r3, #52]	@ 0x34
 800562a:	4b22      	ldr	r3, [pc, #136]	@ (80056b4 <HAL_TIM_MspPostInit+0xb8>)
 800562c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800562e:	2201      	movs	r2, #1
 8005630:	4013      	ands	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005636:	4b1f      	ldr	r3, [pc, #124]	@ (80056b4 <HAL_TIM_MspPostInit+0xb8>)
 8005638:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800563a:	4b1e      	ldr	r3, [pc, #120]	@ (80056b4 <HAL_TIM_MspPostInit+0xb8>)
 800563c:	2102      	movs	r1, #2
 800563e:	430a      	orrs	r2, r1
 8005640:	635a      	str	r2, [r3, #52]	@ 0x34
 8005642:	4b1c      	ldr	r3, [pc, #112]	@ (80056b4 <HAL_TIM_MspPostInit+0xb8>)
 8005644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005646:	2202      	movs	r2, #2
 8005648:	4013      	ands	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11 [PA9]     ------> TIM1_CH4
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
 800564e:	193b      	adds	r3, r7, r4
 8005650:	2280      	movs	r2, #128	@ 0x80
 8005652:	0112      	lsls	r2, r2, #4
 8005654:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005656:	193b      	adds	r3, r7, r4
 8005658:	2202      	movs	r2, #2
 800565a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565c:	193b      	adds	r3, r7, r4
 800565e:	2200      	movs	r2, #0
 8005660:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005662:	193b      	adds	r3, r7, r4
 8005664:	2200      	movs	r2, #0
 8005666:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005668:	193b      	adds	r3, r7, r4
 800566a:	2202      	movs	r2, #2
 800566c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 800566e:	193a      	adds	r2, r7, r4
 8005670:	23a0      	movs	r3, #160	@ 0xa0
 8005672:	05db      	lsls	r3, r3, #23
 8005674:	0011      	movs	r1, r2
 8005676:	0018      	movs	r0, r3
 8005678:	f002 fd56 	bl	8008128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAIN_OSCILLATOR_Pin;
 800567c:	0021      	movs	r1, r4
 800567e:	187b      	adds	r3, r7, r1
 8005680:	2208      	movs	r2, #8
 8005682:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005684:	187b      	adds	r3, r7, r1
 8005686:	2202      	movs	r2, #2
 8005688:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800568a:	187b      	adds	r3, r7, r1
 800568c:	2200      	movs	r2, #0
 800568e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005690:	187b      	adds	r3, r7, r1
 8005692:	2200      	movs	r2, #0
 8005694:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005696:	187b      	adds	r3, r7, r1
 8005698:	2201      	movs	r2, #1
 800569a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 800569c:	187b      	adds	r3, r7, r1
 800569e:	4a06      	ldr	r2, [pc, #24]	@ (80056b8 <HAL_TIM_MspPostInit+0xbc>)
 80056a0:	0019      	movs	r1, r3
 80056a2:	0010      	movs	r0, r2
 80056a4:	f002 fd40 	bl	8008128 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80056a8:	46c0      	nop			@ (mov r8, r8)
 80056aa:	46bd      	mov	sp, r7
 80056ac:	b00b      	add	sp, #44	@ 0x2c
 80056ae:	bd90      	pop	{r4, r7, pc}
 80056b0:	40012c00 	.word	0x40012c00
 80056b4:	40021000 	.word	0x40021000
 80056b8:	50000400 	.word	0x50000400

080056bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80056bc:	b590      	push	{r4, r7, lr}
 80056be:	b08b      	sub	sp, #44	@ 0x2c
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056c4:	2414      	movs	r4, #20
 80056c6:	193b      	adds	r3, r7, r4
 80056c8:	0018      	movs	r0, r3
 80056ca:	2314      	movs	r3, #20
 80056cc:	001a      	movs	r2, r3
 80056ce:	2100      	movs	r1, #0
 80056d0:	f008 f820 	bl	800d714 <memset>
  if(huart->Instance==USART2)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a4a      	ldr	r2, [pc, #296]	@ (8005804 <HAL_UART_MspInit+0x148>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d000      	beq.n	80056e0 <HAL_UART_MspInit+0x24>
 80056de:	e08d      	b.n	80057fc <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80056e0:	4b49      	ldr	r3, [pc, #292]	@ (8005808 <HAL_UART_MspInit+0x14c>)
 80056e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056e4:	4b48      	ldr	r3, [pc, #288]	@ (8005808 <HAL_UART_MspInit+0x14c>)
 80056e6:	2180      	movs	r1, #128	@ 0x80
 80056e8:	0289      	lsls	r1, r1, #10
 80056ea:	430a      	orrs	r2, r1
 80056ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80056ee:	4b46      	ldr	r3, [pc, #280]	@ (8005808 <HAL_UART_MspInit+0x14c>)
 80056f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056f2:	2380      	movs	r3, #128	@ 0x80
 80056f4:	029b      	lsls	r3, r3, #10
 80056f6:	4013      	ands	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]
 80056fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056fc:	4b42      	ldr	r3, [pc, #264]	@ (8005808 <HAL_UART_MspInit+0x14c>)
 80056fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005700:	4b41      	ldr	r3, [pc, #260]	@ (8005808 <HAL_UART_MspInit+0x14c>)
 8005702:	2101      	movs	r1, #1
 8005704:	430a      	orrs	r2, r1
 8005706:	635a      	str	r2, [r3, #52]	@ 0x34
 8005708:	4b3f      	ldr	r3, [pc, #252]	@ (8005808 <HAL_UART_MspInit+0x14c>)
 800570a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800570c:	2201      	movs	r2, #1
 800570e:	4013      	ands	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8005714:	0021      	movs	r1, r4
 8005716:	187b      	adds	r3, r7, r1
 8005718:	220c      	movs	r2, #12
 800571a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800571c:	187b      	adds	r3, r7, r1
 800571e:	2202      	movs	r2, #2
 8005720:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005722:	187b      	adds	r3, r7, r1
 8005724:	2201      	movs	r2, #1
 8005726:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005728:	187b      	adds	r3, r7, r1
 800572a:	2200      	movs	r2, #0
 800572c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800572e:	187b      	adds	r3, r7, r1
 8005730:	2201      	movs	r2, #1
 8005732:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005734:	187a      	adds	r2, r7, r1
 8005736:	23a0      	movs	r3, #160	@ 0xa0
 8005738:	05db      	lsls	r3, r3, #23
 800573a:	0011      	movs	r1, r2
 800573c:	0018      	movs	r0, r3
 800573e:	f002 fcf3 	bl	8008128 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8005742:	4b32      	ldr	r3, [pc, #200]	@ (800580c <HAL_UART_MspInit+0x150>)
 8005744:	4a32      	ldr	r2, [pc, #200]	@ (8005810 <HAL_UART_MspInit+0x154>)
 8005746:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005748:	4b30      	ldr	r3, [pc, #192]	@ (800580c <HAL_UART_MspInit+0x150>)
 800574a:	2234      	movs	r2, #52	@ 0x34
 800574c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800574e:	4b2f      	ldr	r3, [pc, #188]	@ (800580c <HAL_UART_MspInit+0x150>)
 8005750:	2200      	movs	r2, #0
 8005752:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005754:	4b2d      	ldr	r3, [pc, #180]	@ (800580c <HAL_UART_MspInit+0x150>)
 8005756:	2200      	movs	r2, #0
 8005758:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800575a:	4b2c      	ldr	r3, [pc, #176]	@ (800580c <HAL_UART_MspInit+0x150>)
 800575c:	2280      	movs	r2, #128	@ 0x80
 800575e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005760:	4b2a      	ldr	r3, [pc, #168]	@ (800580c <HAL_UART_MspInit+0x150>)
 8005762:	2200      	movs	r2, #0
 8005764:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005766:	4b29      	ldr	r3, [pc, #164]	@ (800580c <HAL_UART_MspInit+0x150>)
 8005768:	2200      	movs	r2, #0
 800576a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800576c:	4b27      	ldr	r3, [pc, #156]	@ (800580c <HAL_UART_MspInit+0x150>)
 800576e:	2200      	movs	r2, #0
 8005770:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005772:	4b26      	ldr	r3, [pc, #152]	@ (800580c <HAL_UART_MspInit+0x150>)
 8005774:	2280      	movs	r2, #128	@ 0x80
 8005776:	0152      	lsls	r2, r2, #5
 8005778:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800577a:	4b24      	ldr	r3, [pc, #144]	@ (800580c <HAL_UART_MspInit+0x150>)
 800577c:	0018      	movs	r0, r3
 800577e:	f002 f9b5 	bl	8007aec <HAL_DMA_Init>
 8005782:	1e03      	subs	r3, r0, #0
 8005784:	d001      	beq.n	800578a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8005786:	f7fc fdf1 	bl	800236c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2180      	movs	r1, #128	@ 0x80
 800578e:	4a1f      	ldr	r2, [pc, #124]	@ (800580c <HAL_UART_MspInit+0x150>)
 8005790:	505a      	str	r2, [r3, r1]
 8005792:	4b1e      	ldr	r3, [pc, #120]	@ (800580c <HAL_UART_MspInit+0x150>)
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8005798:	4b1e      	ldr	r3, [pc, #120]	@ (8005814 <HAL_UART_MspInit+0x158>)
 800579a:	4a1f      	ldr	r2, [pc, #124]	@ (8005818 <HAL_UART_MspInit+0x15c>)
 800579c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800579e:	4b1d      	ldr	r3, [pc, #116]	@ (8005814 <HAL_UART_MspInit+0x158>)
 80057a0:	2235      	movs	r2, #53	@ 0x35
 80057a2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80057a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005814 <HAL_UART_MspInit+0x158>)
 80057a6:	2210      	movs	r2, #16
 80057a8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005814 <HAL_UART_MspInit+0x158>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80057b0:	4b18      	ldr	r3, [pc, #96]	@ (8005814 <HAL_UART_MspInit+0x158>)
 80057b2:	2280      	movs	r2, #128	@ 0x80
 80057b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057b6:	4b17      	ldr	r3, [pc, #92]	@ (8005814 <HAL_UART_MspInit+0x158>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057bc:	4b15      	ldr	r3, [pc, #84]	@ (8005814 <HAL_UART_MspInit+0x158>)
 80057be:	2200      	movs	r2, #0
 80057c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80057c2:	4b14      	ldr	r3, [pc, #80]	@ (8005814 <HAL_UART_MspInit+0x158>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80057c8:	4b12      	ldr	r3, [pc, #72]	@ (8005814 <HAL_UART_MspInit+0x158>)
 80057ca:	2280      	movs	r2, #128	@ 0x80
 80057cc:	0152      	lsls	r2, r2, #5
 80057ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80057d0:	4b10      	ldr	r3, [pc, #64]	@ (8005814 <HAL_UART_MspInit+0x158>)
 80057d2:	0018      	movs	r0, r3
 80057d4:	f002 f98a 	bl	8007aec <HAL_DMA_Init>
 80057d8:	1e03      	subs	r3, r0, #0
 80057da:	d001      	beq.n	80057e0 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 80057dc:	f7fc fdc6 	bl	800236c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a0c      	ldr	r2, [pc, #48]	@ (8005814 <HAL_UART_MspInit+0x158>)
 80057e4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80057e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005814 <HAL_UART_MspInit+0x158>)
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 80057ec:	2201      	movs	r2, #1
 80057ee:	2101      	movs	r1, #1
 80057f0:	201c      	movs	r0, #28
 80057f2:	f002 f939 	bl	8007a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80057f6:	201c      	movs	r0, #28
 80057f8:	f002 f94b 	bl	8007a92 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80057fc:	46c0      	nop			@ (mov r8, r8)
 80057fe:	46bd      	mov	sp, r7
 8005800:	b00b      	add	sp, #44	@ 0x2c
 8005802:	bd90      	pop	{r4, r7, pc}
 8005804:	40004400 	.word	0x40004400
 8005808:	40021000 	.word	0x40021000
 800580c:	20000b14 	.word	0x20000b14
 8005810:	4002001c 	.word	0x4002001c
 8005814:	20000b70 	.word	0x20000b70
 8005818:	40020030 	.word	0x40020030

0800581c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005820:	46c0      	nop			@ (mov r8, r8)
 8005822:	e7fd      	b.n	8005820 <NMI_Handler+0x4>

08005824 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005828:	46c0      	nop			@ (mov r8, r8)
 800582a:	e7fd      	b.n	8005828 <HardFault_Handler+0x4>

0800582c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005830:	46c0      	nop			@ (mov r8, r8)
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800583a:	46c0      	nop			@ (mov r8, r8)
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005844:	f000 fdfc 	bl	8006440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005848:	46c0      	nop			@ (mov r8, r8)
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(CLK_IN_Pin);
 8005852:	2080      	movs	r0, #128	@ 0x80
 8005854:	f002 fe06 	bl	8008464 <HAL_GPIO_EXTI_IRQHandler>
	//HAL_GPIO_EXTI_IRQHandler(SW_IN_Pin);

  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005858:	46c0      	nop			@ (mov r8, r8)
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
	...

08005860 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005864:	4b03      	ldr	r3, [pc, #12]	@ (8005874 <DMA1_Channel1_IRQHandler+0x14>)
 8005866:	0018      	movs	r0, r3
 8005868:	f002 fb1c 	bl	8007ea4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800586c:	46c0      	nop			@ (mov r8, r8)
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	46c0      	nop			@ (mov r8, r8)
 8005874:	20000584 	.word	0x20000584

08005878 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800587c:	4b05      	ldr	r3, [pc, #20]	@ (8005894 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800587e:	0018      	movs	r0, r3
 8005880:	f002 fb10 	bl	8007ea4 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005884:	4b04      	ldr	r3, [pc, #16]	@ (8005898 <DMA1_Channel2_3_IRQHandler+0x20>)
 8005886:	0018      	movs	r0, r3
 8005888:	f002 fb0c 	bl	8007ea4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800588c:	46c0      	nop			@ (mov r8, r8)
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	46c0      	nop			@ (mov r8, r8)
 8005894:	20000b14 	.word	0x20000b14
 8005898:	20000b70 	.word	0x20000b70

0800589c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80058a0:	4b03      	ldr	r3, [pc, #12]	@ (80058b0 <TIM2_IRQHandler+0x14>)
 80058a2:	0018      	movs	r0, r3
 80058a4:	f004 fef0 	bl	800a688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80058a8:	46c0      	nop			@ (mov r8, r8)
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	46c0      	nop			@ (mov r8, r8)
 80058b0:	20000814 	.word	0x20000814

080058b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80058b8:	4b03      	ldr	r3, [pc, #12]	@ (80058c8 <TIM3_IRQHandler+0x14>)
 80058ba:	0018      	movs	r0, r3
 80058bc:	f004 fee4 	bl	800a688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80058c0:	46c0      	nop			@ (mov r8, r8)
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	46c0      	nop			@ (mov r8, r8)
 80058c8:	200008d0 	.word	0x200008d0

080058cc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80058d0:	4b03      	ldr	r3, [pc, #12]	@ (80058e0 <TIM16_IRQHandler+0x14>)
 80058d2:	0018      	movs	r0, r3
 80058d4:	f004 fed8 	bl	800a688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80058d8:	46c0      	nop			@ (mov r8, r8)
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	46c0      	nop			@ (mov r8, r8)
 80058e0:	20000758 	.word	0x20000758

080058e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80058e8:	4b03      	ldr	r3, [pc, #12]	@ (80058f8 <USART2_IRQHandler+0x14>)
 80058ea:	0018      	movs	r0, r3
 80058ec:	f006 fc4e 	bl	800c18c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80058f0:	46c0      	nop			@ (mov r8, r8)
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	46c0      	nop			@ (mov r8, r8)
 80058f8:	20000a48 	.word	0x20000a48

080058fc <LPTIM1_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void LPTIM1_IRQHandler(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  HAL_LPTIM_IRQHandler(&hlptim1);
 8005900:	4b03      	ldr	r3, [pc, #12]	@ (8005910 <LPTIM1_IRQHandler+0x14>)
 8005902:	0018      	movs	r0, r3
 8005904:	f002 ff1c 	bl	8008740 <HAL_LPTIM_IRQHandler>
}
 8005908:	46c0      	nop			@ (mov r8, r8)
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	46c0      	nop			@ (mov r8, r8)
 8005910:	20000bcc 	.word	0x20000bcc

08005914 <TIM17_IRQHandler>:


void TIM17_IRQHandler(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005918:	4b03      	ldr	r3, [pc, #12]	@ (8005928 <TIM17_IRQHandler+0x14>)
 800591a:	0018      	movs	r0, r3
 800591c:	f004 feb4 	bl	800a688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8005920:	46c0      	nop			@ (mov r8, r8)
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	46c0      	nop			@ (mov r8, r8)
 8005928:	2000069c 	.word	0x2000069c

0800592c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005930:	4b03      	ldr	r3, [pc, #12]	@ (8005940 <TIM14_IRQHandler+0x14>)
 8005932:	0018      	movs	r0, r3
 8005934:	f004 fea8 	bl	800a688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8005938:	46c0      	nop			@ (mov r8, r8)
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	46c0      	nop			@ (mov r8, r8)
 8005940:	200005e0 	.word	0x200005e0

08005944 <Adjust_TIM16_Prescaler>:
#include "symmetry_adjustment.h"


uint8_t Adjust_TIM16_Prescaler(struct Params* params_ptr){
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]

    if(params_ptr->prescaler_adjust == MULTIPLY_BY_TWO){
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2220      	movs	r2, #32
 8005950:	5c9b      	ldrb	r3, [r3, r2]
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b01      	cmp	r3, #1
 8005956:	d107      	bne.n	8005968 <Adjust_TIM16_Prescaler+0x24>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler << 1;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	8b5b      	ldrh	r3, [r3, #26]
 800595c:	b29b      	uxth	r3, r3
 800595e:	18db      	adds	r3, r3, r3
 8005960:	b29a      	uxth	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	839a      	strh	r2, [r3, #28]
 8005966:	e00a      	b.n	800597e <Adjust_TIM16_Prescaler+0x3a>
    }
    else if(params_ptr->prescaler_adjust == DO_NOTHING){
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2220      	movs	r2, #32
 800596c:	5c9b      	ldrb	r3, [r3, r2]
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <Adjust_TIM16_Prescaler+0x3a>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	8b5b      	ldrh	r3, [r3, #26]
 8005978:	b29a      	uxth	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	839a      	strh	r2, [r3, #28]
    }
    return 1;
 800597e:	2301      	movs	r3, #1
}
 8005980:	0018      	movs	r0, r3
 8005982:	46bd      	mov	sp, r7
 8005984:	b002      	add	sp, #8
 8005986:	bd80      	pop	{r7, pc}

08005988 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>:

uint8_t Process_TIM16_Final_Start_Value_and_Final_Prescaler(struct Params* params_ptr){
 8005988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]

    #if SYMMETRY_ON_OR_OFF == ON

	enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005990:	2317      	movs	r3, #23
 8005992:	18fb      	adds	r3, r7, r3
 8005994:	2200      	movs	r2, #0
 8005996:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 8005998:	2316      	movs	r3, #22
 800599a:	18fb      	adds	r3, r7, r3
 800599c:	2200      	movs	r2, #0
 800599e:	701a      	strb	r2, [r3, #0]

			uint8_t pot_rotation_corrected = 0;
 80059a0:	2315      	movs	r3, #21
 80059a2:	18fb      	adds	r3, r7, r3
 80059a4:	2200      	movs	r2, #0
 80059a6:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Status symmetry_status = CW;
 80059a8:	2114      	movs	r1, #20
 80059aa:	187b      	adds	r3, r7, r1
 80059ac:	2200      	movs	r2, #0
 80059ae:	701a      	strb	r2, [r3, #0]

			//DETERMINE IF CW OR CCW SYMMETRY POT ROTATION
			if(params_ptr->symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	899b      	ldrh	r3, [r3, #12]
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80059b8:	d803      	bhi.n	80059c2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3a>
				symmetry_status = CW;
 80059ba:	187b      	adds	r3, r7, r1
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	e003      	b.n	80059ca <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x42>
			}
			else{ //adc is 128-255
				symmetry_status = CCW;
 80059c2:	2314      	movs	r3, #20
 80059c4:	18fb      	adds	r3, r7, r3
 80059c6:	2201      	movs	r2, #1
 80059c8:	701a      	strb	r2, [r3, #0]
			}

			//DETERMINE WHETHER TO SHORTEN OR LENGTHEN BASED ON CURRENT INDEX AND SYMMETRY POT POSITION
			if((params_ptr->waveshape == SINE_MODE) || (params_ptr->waveshape == TRIANGLE_MODE)){
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	799b      	ldrb	r3, [r3, #6]
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d004      	beq.n	80059de <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x56>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	799b      	ldrb	r3, [r3, #6]
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d146      	bne.n	8005a6c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe4>

				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	7c1b      	ldrb	r3, [r3, #16]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d104      	bne.n	80059f2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6a>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	7c5b      	ldrb	r3, [r3, #17]
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7e>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	7c1b      	ldrb	r3, [r3, #16]
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d113      	bne.n	8005a24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	7c5b      	ldrb	r3, [r3, #17]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d10e      	bne.n	8005a24 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>

					if(symmetry_status == CW){
 8005a06:	2314      	movs	r3, #20
 8005a08:	18fb      	adds	r3, r7, r3
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d104      	bne.n	8005a1a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x92>

						symmetry_type_for_halfcycle = LENGTHEN;
 8005a10:	2316      	movs	r3, #22
 8005a12:	18fb      	adds	r3, r7, r3
 8005a14:	2201      	movs	r2, #1
 8005a16:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 8005a18:	e027      	b.n	8005a6a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 8005a1a:	2316      	movs	r3, #22
 8005a1c:	18fb      	adds	r3, r7, r3
 8005a1e:	2200      	movs	r2, #0
 8005a20:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 8005a22:	e022      	b.n	8005a6a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
				}
				else if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT)){
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	7c1b      	ldrb	r3, [r3, #16]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d104      	bne.n	8005a38 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xb0>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	7c5b      	ldrb	r3, [r3, #17]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d009      	beq.n	8005a4c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xc4>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	7c1b      	ldrb	r3, [r3, #16]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d13c      	bne.n	8005abc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	7c5b      	ldrb	r3, [r3, #17]
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d137      	bne.n	8005abc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>

					if(symmetry_status == CW){
 8005a4c:	2314      	movs	r3, #20
 8005a4e:	18fb      	adds	r3, r7, r3
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d104      	bne.n	8005a60 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd8>

						symmetry_type_for_halfcycle = SHORTEN;
 8005a56:	2316      	movs	r3, #22
 8005a58:	18fb      	adds	r3, r7, r3
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005a5e:	e02d      	b.n	8005abc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 8005a60:	2316      	movs	r3, #22
 8005a62:	18fb      	adds	r3, r7, r3
 8005a64:	2201      	movs	r2, #1
 8005a66:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005a68:	e028      	b.n	8005abc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 8005a6a:	e027      	b.n	8005abc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
				}
			}
			else if(params_ptr->waveshape == SQUARE_MODE){
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	799b      	ldrb	r3, [r3, #6]
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d123      	bne.n	8005abe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>

				if(params_ptr->halfcycle == FIRST_HALFCYCLE){
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	7c1b      	ldrb	r3, [r3, #16]
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10e      	bne.n	8005a9e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x116>

					if(symmetry_status == CW){
 8005a80:	2314      	movs	r3, #20
 8005a82:	18fb      	adds	r3, r7, r3
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d104      	bne.n	8005a94 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x10c>

						symmetry_type_for_halfcycle = LENGTHEN;
 8005a8a:	2316      	movs	r3, #22
 8005a8c:	18fb      	adds	r3, r7, r3
 8005a8e:	2201      	movs	r2, #1
 8005a90:	701a      	strb	r2, [r3, #0]
 8005a92:	e014      	b.n	8005abe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 8005a94:	2316      	movs	r3, #22
 8005a96:	18fb      	adds	r3, r7, r3
 8005a98:	2200      	movs	r2, #0
 8005a9a:	701a      	strb	r2, [r3, #0]
 8005a9c:	e00f      	b.n	8005abe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
				}
				else{

					if(symmetry_status == CW){
 8005a9e:	2314      	movs	r3, #20
 8005aa0:	18fb      	adds	r3, r7, r3
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d104      	bne.n	8005ab2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x12a>

						symmetry_type_for_halfcycle = SHORTEN;
 8005aa8:	2316      	movs	r3, #22
 8005aaa:	18fb      	adds	r3, r7, r3
 8005aac:	2200      	movs	r2, #0
 8005aae:	701a      	strb	r2, [r3, #0]
 8005ab0:	e005      	b.n	8005abe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 8005ab2:	2316      	movs	r3, #22
 8005ab4:	18fb      	adds	r3, r7, r3
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	701a      	strb	r2, [r3, #0]
 8005aba:	e000      	b.n	8005abe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005abc:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			if(symmetry_status == CW){
 8005abe:	2314      	movs	r3, #20
 8005ac0:	18fb      	adds	r3, r7, r3
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d109      	bne.n	8005adc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x154>

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - params_ptr->symmetry;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	899b      	ldrh	r3, [r3, #12]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	2315      	movs	r3, #21
 8005ad2:	18fb      	adds	r3, r7, r3
 8005ad4:	217f      	movs	r1, #127	@ 0x7f
 8005ad6:	1a8a      	subs	r2, r1, r2
 8005ad8:	701a      	strb	r2, [r3, #0]
 8005ada:	e007      	b.n	8005aec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x164>
			}
			else{ //CCW

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	899b      	ldrh	r3, [r3, #12]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	2315      	movs	r3, #21
 8005ae6:	18fb      	adds	r3, r7, r3
 8005ae8:	3a80      	subs	r2, #128	@ 0x80
 8005aea:	701a      	strb	r2, [r3, #0]
			}

			//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - params_ptr->raw_start_value;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	8a5b      	ldrh	r3, [r3, #18]
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	200e      	movs	r0, #14
 8005af4:	183b      	adds	r3, r7, r0
 8005af6:	2180      	movs	r1, #128	@ 0x80
 8005af8:	0049      	lsls	r1, r1, #1
 8005afa:	1a8a      	subs	r2, r1, r2
 8005afc:	801a      	strh	r2, [r3, #0]

			//uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = (two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected);
			//COMMENT LINE BELOW IN AND LINE ABOVE OUT TO EXPERIMENT WITH MORE EXTREME SYMMETRY ADJUSTMENT
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = ((two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected) * 12) >> 3; //x(12/8) - 12/8 is the absolute maximum we can get away with
 8005afe:	0001      	movs	r1, r0
 8005b00:	187b      	adds	r3, r7, r1
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	2215      	movs	r2, #21
 8005b06:	18ba      	adds	r2, r7, r2
 8005b08:	7812      	ldrb	r2, [r2, #0]
 8005b0a:	435a      	muls	r2, r3
 8005b0c:	0013      	movs	r3, r2
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	189b      	adds	r3, r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	10da      	asrs	r2, r3, #3
 8005b16:	240c      	movs	r4, #12
 8005b18:	193b      	adds	r3, r7, r4
 8005b1a:	801a      	strh	r2, [r3, #0]

			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 8005b1c:	250a      	movs	r5, #10
 8005b1e:	197b      	adds	r3, r7, r5
 8005b20:	193a      	adds	r2, r7, r4
 8005b22:	8812      	ldrh	r2, [r2, #0]
 8005b24:	0a12      	lsrs	r2, r2, #8
 8005b26:	801a      	strh	r2, [r3, #0]


			//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8005b28:	2312      	movs	r3, #18
 8005b2a:	18fb      	adds	r3, r7, r3
 8005b2c:	0008      	movs	r0, r1
 8005b2e:	1879      	adds	r1, r7, r1
 8005b30:	197a      	adds	r2, r7, r5
 8005b32:	8809      	ldrh	r1, [r1, #0]
 8005b34:	8812      	ldrh	r2, [r2, #0]
 8005b36:	1a8a      	subs	r2, r1, r2
 8005b38:	801a      	strh	r2, [r3, #0]

			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 8005b3a:	2610      	movs	r6, #16
 8005b3c:	19bb      	adds	r3, r7, r6
 8005b3e:	1839      	adds	r1, r7, r0
 8005b40:	197a      	adds	r2, r7, r5
 8005b42:	8809      	ldrh	r1, [r1, #0]
 8005b44:	8812      	ldrh	r2, [r2, #0]
 8005b46:	188a      	adds	r2, r1, r2
 8005b48:	801a      	strh	r2, [r3, #0]


			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 8005b4a:	19bb      	adds	r3, r7, r6
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	2bff      	cmp	r3, #255	@ 0xff
 8005b50:	d90f      	bls.n	8005b72 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 8005b52:	19bb      	adds	r3, r7, r6
 8005b54:	881a      	ldrh	r2, [r3, #0]
 8005b56:	2380      	movs	r3, #128	@ 0x80
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d000      	beq.n	8005b60 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1d8>
 8005b5e:	e0b0      	b.n	8005cc2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>
 8005b60:	193b      	adds	r3, r7, r4
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	2108      	movs	r1, #8
 8005b66:	0018      	movs	r0, r3
 8005b68:	f000 fb80 	bl	800626c <unsigned_bitwise_modulo>
 8005b6c:	1e03      	subs	r3, r0, #0
 8005b6e:	d000      	beq.n	8005b72 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 8005b70:	e0a7      	b.n	8005cc2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005b72:	230c      	movs	r3, #12
 8005b74:	18fb      	adds	r3, r7, r3
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	2108      	movs	r1, #8
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	f000 fb76 	bl	800626c <unsigned_bitwise_modulo>
 8005b80:	0003      	movs	r3, r0
 8005b82:	2b80      	cmp	r3, #128	@ 0x80
 8005b84:	d117      	bne.n	8005bb6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x22e>
					//remainder is 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in 0.5

					//manipulated_period_shorten should oscillate over the halfperiod between manipulated_period_shorten and manipulated_period_shorten - 1; //DONE
					//manipulated_period_lengthen should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1; //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005b86:	2316      	movs	r3, #22
 8005b88:	18fb      	adds	r3, r7, r3
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d104      	bne.n	8005b9a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x212>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_DOWNWARDS;
 8005b90:	2317      	movs	r3, #23
 8005b92:	18fb      	adds	r3, r7, r3
 8005b94:	2202      	movs	r2, #2
 8005b96:	701a      	strb	r2, [r3, #0]
 8005b98:	e008      	b.n	8005bac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005b9a:	2316      	movs	r3, #22
 8005b9c:	18fb      	adds	r3, r7, r3
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d103      	bne.n	8005bac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005ba4:	2317      	movs	r3, #23
 8005ba6:	18fb      	adds	r3, r7, r3
 8005ba8:	2201      	movs	r2, #1
 8005baa:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005bb4:	e21f      	b.n	8005ff6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8005bb6:	230c      	movs	r3, #12
 8005bb8:	18fb      	adds	r3, r7, r3
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	2108      	movs	r1, #8
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	f000 fb54 	bl	800626c <unsigned_bitwise_modulo>
 8005bc4:	1e03      	subs	r3, r0, #0
 8005bc6:	d121      	bne.n	8005c0c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x284>

					//remainder is zero, which means both shortened and lengthened manipulated periods have no no remainder

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 8005bc8:	2212      	movs	r2, #18
 8005bca:	18bb      	adds	r3, r7, r2
 8005bcc:	18ba      	adds	r2, r7, r2
 8005bce:	8812      	ldrh	r2, [r2, #0]
 8005bd0:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8005bd2:	2210      	movs	r2, #16
 8005bd4:	18bb      	adds	r3, r7, r2
 8005bd6:	18ba      	adds	r2, r7, r2
 8005bd8:	8812      	ldrh	r2, [r2, #0]
 8005bda:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005bdc:	2316      	movs	r3, #22
 8005bde:	18fb      	adds	r3, r7, r3
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d104      	bne.n	8005bf0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x268>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005be6:	2317      	movs	r3, #23
 8005be8:	18fb      	adds	r3, r7, r3
 8005bea:	2200      	movs	r2, #0
 8005bec:	701a      	strb	r2, [r3, #0]
 8005bee:	e008      	b.n	8005c02 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005bf0:	2316      	movs	r3, #22
 8005bf2:	18fb      	adds	r3, r7, r3
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d103      	bne.n	8005c02 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005bfa:	2317      	movs	r3, #23
 8005bfc:	18fb      	adds	r3, r7, r3
 8005bfe:	2200      	movs	r2, #0
 8005c00:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2220      	movs	r2, #32
 8005c06:	2100      	movs	r1, #0
 8005c08:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005c0a:	e1f4      	b.n	8005ff6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8005c0c:	230c      	movs	r3, #12
 8005c0e:	18fb      	adds	r3, r7, r3
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	2108      	movs	r1, #8
 8005c14:	0018      	movs	r0, r3
 8005c16:	f000 fb29 	bl	800626c <unsigned_bitwise_modulo>
 8005c1a:	0003      	movs	r3, r0
 8005c1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c1e:	d821      	bhi.n	8005c64 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2dc>

					//remainder is less than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in less than 0.5

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 8005c20:	2212      	movs	r2, #18
 8005c22:	18bb      	adds	r3, r7, r2
 8005c24:	18ba      	adds	r2, r7, r2
 8005c26:	8812      	ldrh	r2, [r2, #0]
 8005c28:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8005c2a:	2210      	movs	r2, #16
 8005c2c:	18bb      	adds	r3, r7, r2
 8005c2e:	18ba      	adds	r2, r7, r2
 8005c30:	8812      	ldrh	r2, [r2, #0]
 8005c32:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005c34:	2316      	movs	r3, #22
 8005c36:	18fb      	adds	r3, r7, r3
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d104      	bne.n	8005c48 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2c0>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005c3e:	2317      	movs	r3, #23
 8005c40:	18fb      	adds	r3, r7, r3
 8005c42:	2200      	movs	r2, #0
 8005c44:	701a      	strb	r2, [r3, #0]
 8005c46:	e008      	b.n	8005c5a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005c48:	2316      	movs	r3, #22
 8005c4a:	18fb      	adds	r3, r7, r3
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d103      	bne.n	8005c5a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005c52:	2317      	movs	r3, #23
 8005c54:	18fb      	adds	r3, r7, r3
 8005c56:	2200      	movs	r2, #0
 8005c58:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	2100      	movs	r1, #0
 8005c60:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005c62:	e1c8      	b.n	8005ff6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8005c64:	230c      	movs	r3, #12
 8005c66:	18fb      	adds	r3, r7, r3
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	2108      	movs	r1, #8
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	f000 fafd 	bl	800626c <unsigned_bitwise_modulo>
 8005c72:	0003      	movs	r3, r0
 8005c74:	2b80      	cmp	r3, #128	@ 0x80
 8005c76:	d800      	bhi.n	8005c7a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2f2>
 8005c78:	e1bd      	b.n	8005ff6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>

					//remainder is greater than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in more than 0.5

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8005c7a:	2212      	movs	r2, #18
 8005c7c:	18bb      	adds	r3, r7, r2
 8005c7e:	18ba      	adds	r2, r7, r2
 8005c80:	8812      	ldrh	r2, [r2, #0]
 8005c82:	3a01      	subs	r2, #1
 8005c84:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8005c86:	2210      	movs	r2, #16
 8005c88:	18bb      	adds	r3, r7, r2
 8005c8a:	18ba      	adds	r2, r7, r2
 8005c8c:	8812      	ldrh	r2, [r2, #0]
 8005c8e:	3201      	adds	r2, #1
 8005c90:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005c92:	2316      	movs	r3, #22
 8005c94:	18fb      	adds	r3, r7, r3
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d104      	bne.n	8005ca6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x31e>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005c9c:	2317      	movs	r3, #23
 8005c9e:	18fb      	adds	r3, r7, r3
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	701a      	strb	r2, [r3, #0]
 8005ca4:	e008      	b.n	8005cb8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005ca6:	2316      	movs	r3, #22
 8005ca8:	18fb      	adds	r3, r7, r3
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d103      	bne.n	8005cb8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005cb0:	2317      	movs	r3, #23
 8005cb2:	18fb      	adds	r3, r7, r3
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005cc0:	e199      	b.n	8005ff6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
			}

			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 8005cc2:	2110      	movs	r1, #16
 8005cc4:	187b      	adds	r3, r7, r1
 8005cc6:	881a      	ldrh	r2, [r3, #0]
 8005cc8:	2380      	movs	r3, #128	@ 0x80
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d810      	bhi.n	8005cf2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 8005cd0:	187b      	adds	r3, r7, r1
 8005cd2:	881a      	ldrh	r2, [r3, #0]
 8005cd4:	2380      	movs	r3, #128	@ 0x80
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d000      	beq.n	8005cde <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x356>
 8005cdc:	e18c      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 8005cde:	230c      	movs	r3, #12
 8005ce0:	18fb      	adds	r3, r7, r3
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	2108      	movs	r1, #8
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	f000 fac0 	bl	800626c <unsigned_bitwise_modulo>
 8005cec:	1e03      	subs	r3, r0, #0
 8005cee:	d100      	bne.n	8005cf2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 8005cf0:	e182      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005cf2:	230c      	movs	r3, #12
 8005cf4:	18fb      	adds	r3, r7, r3
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	2108      	movs	r1, #8
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f000 fab6 	bl	800626c <unsigned_bitwise_modulo>
 8005d00:	0003      	movs	r3, r0
 8005d02:	2b80      	cmp	r3, #128	@ 0x80
 8005d04:	d159      	bne.n	8005dba <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x432>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8005d06:	2212      	movs	r2, #18
 8005d08:	18bb      	adds	r3, r7, r2
 8005d0a:	18ba      	adds	r2, r7, r2
 8005d0c:	8812      	ldrh	r2, [r2, #0]
 8005d0e:	3a01      	subs	r2, #1
 8005d10:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8005d12:	2110      	movs	r1, #16
 8005d14:	187b      	adds	r3, r7, r1
 8005d16:	187a      	adds	r2, r7, r1
 8005d18:	8812      	ldrh	r2, [r2, #0]
 8005d1a:	3201      	adds	r2, #1
 8005d1c:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005d1e:	000c      	movs	r4, r1
 8005d20:	187b      	adds	r3, r7, r1
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	2101      	movs	r1, #1
 8005d26:	0018      	movs	r0, r3
 8005d28:	f000 faa0 	bl	800626c <unsigned_bitwise_modulo>
 8005d2c:	1e03      	subs	r3, r0, #0
 8005d2e:	d121      	bne.n	8005d74 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ec>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005d30:	193b      	adds	r3, r7, r4
 8005d32:	193a      	adds	r2, r7, r4
 8005d34:	8812      	ldrh	r2, [r2, #0]
 8005d36:	0852      	lsrs	r2, r2, #1
 8005d38:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005d3a:	2316      	movs	r3, #22
 8005d3c:	18fb      	adds	r3, r7, r3
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d108      	bne.n	8005d56 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ce>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005d44:	2317      	movs	r3, #23
 8005d46:	18fb      	adds	r3, r7, r3
 8005d48:	2200      	movs	r2, #0
 8005d4a:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	2100      	movs	r1, #0
 8005d52:	5499      	strb	r1, [r3, r2]
 8005d54:	e150      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005d56:	2316      	movs	r3, #22
 8005d58:	18fb      	adds	r3, r7, r3
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d000      	beq.n	8005d62 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3da>
 8005d60:	e14a      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005d62:	2317      	movs	r3, #23
 8005d64:	18fb      	adds	r3, r7, r3
 8005d66:	2200      	movs	r2, #0
 8005d68:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	2101      	movs	r1, #1
 8005d70:	5499      	strb	r1, [r3, r2]
 8005d72:	e141      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005d74:	2210      	movs	r2, #16
 8005d76:	18bb      	adds	r3, r7, r2
 8005d78:	18ba      	adds	r2, r7, r2
 8005d7a:	8812      	ldrh	r2, [r2, #0]
 8005d7c:	0852      	lsrs	r2, r2, #1
 8005d7e:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005d80:	2316      	movs	r3, #22
 8005d82:	18fb      	adds	r3, r7, r3
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d108      	bne.n	8005d9c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x414>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005d8a:	2317      	movs	r3, #23
 8005d8c:	18fb      	adds	r3, r7, r3
 8005d8e:	2200      	movs	r2, #0
 8005d90:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2220      	movs	r2, #32
 8005d96:	2100      	movs	r1, #0
 8005d98:	5499      	strb	r1, [r3, r2]
 8005d9a:	e12d      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005d9c:	2316      	movs	r3, #22
 8005d9e:	18fb      	adds	r3, r7, r3
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d000      	beq.n	8005da8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x420>
 8005da6:	e127      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005da8:	2317      	movs	r3, #23
 8005daa:	18fb      	adds	r3, r7, r3
 8005dac:	2201      	movs	r2, #1
 8005dae:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2220      	movs	r2, #32
 8005db4:	2101      	movs	r1, #1
 8005db6:	5499      	strb	r1, [r3, r2]
 8005db8:	e11e      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8005dba:	230c      	movs	r3, #12
 8005dbc:	18fb      	adds	r3, r7, r3
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	2108      	movs	r1, #8
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	f000 fa52 	bl	800626c <unsigned_bitwise_modulo>
 8005dc8:	1e03      	subs	r3, r0, #0
 8005dca:	d152      	bne.n	8005e72 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4ea>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8005dcc:	2212      	movs	r2, #18
 8005dce:	18bb      	adds	r3, r7, r2
 8005dd0:	18ba      	adds	r2, r7, r2
 8005dd2:	8812      	ldrh	r2, [r2, #0]
 8005dd4:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005dd6:	2410      	movs	r4, #16
 8005dd8:	193b      	adds	r3, r7, r4
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	2101      	movs	r1, #1
 8005dde:	0018      	movs	r0, r3
 8005de0:	f000 fa44 	bl	800626c <unsigned_bitwise_modulo>
 8005de4:	1e03      	subs	r3, r0, #0
 8005de6:	d121      	bne.n	8005e2c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4a4>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005de8:	193b      	adds	r3, r7, r4
 8005dea:	193a      	adds	r2, r7, r4
 8005dec:	8812      	ldrh	r2, [r2, #0]
 8005dee:	0852      	lsrs	r2, r2, #1
 8005df0:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005df2:	2316      	movs	r3, #22
 8005df4:	18fb      	adds	r3, r7, r3
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d108      	bne.n	8005e0e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x486>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005dfc:	2317      	movs	r3, #23
 8005dfe:	18fb      	adds	r3, r7, r3
 8005e00:	2200      	movs	r2, #0
 8005e02:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2220      	movs	r2, #32
 8005e08:	2100      	movs	r1, #0
 8005e0a:	5499      	strb	r1, [r3, r2]
 8005e0c:	e0f4      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005e0e:	2316      	movs	r3, #22
 8005e10:	18fb      	adds	r3, r7, r3
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d000      	beq.n	8005e1a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x492>
 8005e18:	e0ee      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005e1a:	2317      	movs	r3, #23
 8005e1c:	18fb      	adds	r3, r7, r3
 8005e1e:	2200      	movs	r2, #0
 8005e20:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2220      	movs	r2, #32
 8005e26:	2101      	movs	r1, #1
 8005e28:	5499      	strb	r1, [r3, r2]
 8005e2a:	e0e5      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005e2c:	2210      	movs	r2, #16
 8005e2e:	18bb      	adds	r3, r7, r2
 8005e30:	18ba      	adds	r2, r7, r2
 8005e32:	8812      	ldrh	r2, [r2, #0]
 8005e34:	0852      	lsrs	r2, r2, #1
 8005e36:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005e38:	2316      	movs	r3, #22
 8005e3a:	18fb      	adds	r3, r7, r3
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d108      	bne.n	8005e54 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4cc>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005e42:	2317      	movs	r3, #23
 8005e44:	18fb      	adds	r3, r7, r3
 8005e46:	2200      	movs	r2, #0
 8005e48:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	2100      	movs	r1, #0
 8005e50:	5499      	strb	r1, [r3, r2]
 8005e52:	e0d1      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005e54:	2316      	movs	r3, #22
 8005e56:	18fb      	adds	r3, r7, r3
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d000      	beq.n	8005e60 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4d8>
 8005e5e:	e0cb      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005e60:	2317      	movs	r3, #23
 8005e62:	18fb      	adds	r3, r7, r3
 8005e64:	2201      	movs	r2, #1
 8005e66:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	5499      	strb	r1, [r3, r2]
 8005e70:	e0c2      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8005e72:	230c      	movs	r3, #12
 8005e74:	18fb      	adds	r3, r7, r3
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	2108      	movs	r1, #8
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	f000 f9f6 	bl	800626c <unsigned_bitwise_modulo>
 8005e80:	0003      	movs	r3, r0
 8005e82:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e84:	d856      	bhi.n	8005f34 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x5ac>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8005e86:	2212      	movs	r2, #18
 8005e88:	18bb      	adds	r3, r7, r2
 8005e8a:	18ba      	adds	r2, r7, r2
 8005e8c:	8812      	ldrh	r2, [r2, #0]
 8005e8e:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8005e90:	2410      	movs	r4, #16
 8005e92:	193b      	adds	r3, r7, r4
 8005e94:	193a      	adds	r2, r7, r4
 8005e96:	8812      	ldrh	r2, [r2, #0]
 8005e98:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005e9a:	193b      	adds	r3, r7, r4
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	0018      	movs	r0, r3
 8005ea2:	f000 f9e3 	bl	800626c <unsigned_bitwise_modulo>
 8005ea6:	1e03      	subs	r3, r0, #0
 8005ea8:	d121      	bne.n	8005eee <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x566>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005eaa:	193b      	adds	r3, r7, r4
 8005eac:	193a      	adds	r2, r7, r4
 8005eae:	8812      	ldrh	r2, [r2, #0]
 8005eb0:	0852      	lsrs	r2, r2, #1
 8005eb2:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005eb4:	2316      	movs	r3, #22
 8005eb6:	18fb      	adds	r3, r7, r3
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d108      	bne.n	8005ed0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x548>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005ebe:	2317      	movs	r3, #23
 8005ec0:	18fb      	adds	r3, r7, r3
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	2100      	movs	r1, #0
 8005ecc:	5499      	strb	r1, [r3, r2]
 8005ece:	e093      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005ed0:	2316      	movs	r3, #22
 8005ed2:	18fb      	adds	r3, r7, r3
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d000      	beq.n	8005edc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x554>
 8005eda:	e08d      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005edc:	2317      	movs	r3, #23
 8005ede:	18fb      	adds	r3, r7, r3
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	2101      	movs	r1, #1
 8005eea:	5499      	strb	r1, [r3, r2]
 8005eec:	e084      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005eee:	2210      	movs	r2, #16
 8005ef0:	18bb      	adds	r3, r7, r2
 8005ef2:	18ba      	adds	r2, r7, r2
 8005ef4:	8812      	ldrh	r2, [r2, #0]
 8005ef6:	0852      	lsrs	r2, r2, #1
 8005ef8:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005efa:	2316      	movs	r3, #22
 8005efc:	18fb      	adds	r3, r7, r3
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d108      	bne.n	8005f16 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x58e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005f04:	2317      	movs	r3, #23
 8005f06:	18fb      	adds	r3, r7, r3
 8005f08:	2200      	movs	r2, #0
 8005f0a:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	2100      	movs	r1, #0
 8005f12:	5499      	strb	r1, [r3, r2]
 8005f14:	e070      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005f16:	2316      	movs	r3, #22
 8005f18:	18fb      	adds	r3, r7, r3
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d000      	beq.n	8005f22 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x59a>
 8005f20:	e06a      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005f22:	2317      	movs	r3, #23
 8005f24:	18fb      	adds	r3, r7, r3
 8005f26:	2201      	movs	r2, #1
 8005f28:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	2101      	movs	r1, #1
 8005f30:	5499      	strb	r1, [r3, r2]
 8005f32:	e061      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8005f34:	230c      	movs	r3, #12
 8005f36:	18fb      	adds	r3, r7, r3
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	2108      	movs	r1, #8
 8005f3c:	0018      	movs	r0, r3
 8005f3e:	f000 f995 	bl	800626c <unsigned_bitwise_modulo>
 8005f42:	0003      	movs	r3, r0
 8005f44:	2b80      	cmp	r3, #128	@ 0x80
 8005f46:	d957      	bls.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8005f48:	2212      	movs	r2, #18
 8005f4a:	18bb      	adds	r3, r7, r2
 8005f4c:	18ba      	adds	r2, r7, r2
 8005f4e:	8812      	ldrh	r2, [r2, #0]
 8005f50:	3a01      	subs	r2, #1
 8005f52:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8005f54:	2410      	movs	r4, #16
 8005f56:	193b      	adds	r3, r7, r4
 8005f58:	193a      	adds	r2, r7, r4
 8005f5a:	8812      	ldrh	r2, [r2, #0]
 8005f5c:	3201      	adds	r2, #1
 8005f5e:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005f60:	193b      	adds	r3, r7, r4
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	2101      	movs	r1, #1
 8005f66:	0018      	movs	r0, r3
 8005f68:	f000 f980 	bl	800626c <unsigned_bitwise_modulo>
 8005f6c:	1e03      	subs	r3, r0, #0
 8005f6e:	d120      	bne.n	8005fb2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x62a>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005f70:	193b      	adds	r3, r7, r4
 8005f72:	193a      	adds	r2, r7, r4
 8005f74:	8812      	ldrh	r2, [r2, #0]
 8005f76:	0852      	lsrs	r2, r2, #1
 8005f78:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005f7a:	2316      	movs	r3, #22
 8005f7c:	18fb      	adds	r3, r7, r3
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d108      	bne.n	8005f96 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x60e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005f84:	2317      	movs	r3, #23
 8005f86:	18fb      	adds	r3, r7, r3
 8005f88:	2200      	movs	r2, #0
 8005f8a:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	2100      	movs	r1, #0
 8005f92:	5499      	strb	r1, [r3, r2]
 8005f94:	e030      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005f96:	2316      	movs	r3, #22
 8005f98:	18fb      	adds	r3, r7, r3
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d12b      	bne.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005fa0:	2317      	movs	r3, #23
 8005fa2:	18fb      	adds	r3, r7, r3
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2220      	movs	r2, #32
 8005fac:	2101      	movs	r1, #1
 8005fae:	5499      	strb	r1, [r3, r2]
 8005fb0:	e022      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005fb2:	2210      	movs	r2, #16
 8005fb4:	18bb      	adds	r3, r7, r2
 8005fb6:	18ba      	adds	r2, r7, r2
 8005fb8:	8812      	ldrh	r2, [r2, #0]
 8005fba:	0852      	lsrs	r2, r2, #1
 8005fbc:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005fbe:	2316      	movs	r3, #22
 8005fc0:	18fb      	adds	r3, r7, r3
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d108      	bne.n	8005fda <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x652>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005fc8:	2317      	movs	r3, #23
 8005fca:	18fb      	adds	r3, r7, r3
 8005fcc:	2200      	movs	r2, #0
 8005fce:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	5499      	strb	r1, [r3, r2]
 8005fd8:	e00e      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005fda:	2316      	movs	r3, #22
 8005fdc:	18fb      	adds	r3, r7, r3
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d109      	bne.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005fe4:	2317      	movs	r3, #23
 8005fe6:	18fb      	adds	r3, r7, r3
 8005fe8:	2201      	movs	r2, #1
 8005fea:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	5499      	strb	r1, [r3, r2]
 8005ff4:	e000      	b.n	8005ff8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005ff6:	46c0      	nop			@ (mov r8, r8)
			}

	        //DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	        //NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	        //ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8005ff8:	2316      	movs	r3, #22
 8005ffa:	18fb      	adds	r3, r7, r3
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d152      	bne.n	80060a8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x720>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8006002:	2317      	movs	r3, #23
 8006004:	18fb      	adds	r3, r7, r3
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d109      	bne.n	8006020 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x698>

	                params_ptr->final_start_value = 256 - manipulated_period_shorten;
 800600c:	2312      	movs	r3, #18
 800600e:	18fb      	adds	r3, r7, r3
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	2280      	movs	r2, #128	@ 0x80
 8006014:	0052      	lsls	r2, r2, #1
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	b29a      	uxth	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	829a      	strh	r2, [r3, #20]
 800601e:	e099      	b.n	8006154 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8006020:	2317      	movs	r3, #23
 8006022:	18fb      	adds	r3, r7, r3
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d11b      	bne.n	8006062 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6da>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	89db      	ldrh	r3, [r3, #14]
 800602e:	b29b      	uxth	r3, r3
 8006030:	2101      	movs	r1, #1
 8006032:	0018      	movs	r0, r3
 8006034:	f000 f91a 	bl	800626c <unsigned_bitwise_modulo>
 8006038:	1e03      	subs	r3, r0, #0
 800603a:	d109      	bne.n	8006050 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6c8>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 800603c:	2312      	movs	r3, #18
 800603e:	18fb      	adds	r3, r7, r3
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	2280      	movs	r2, #128	@ 0x80
 8006044:	0052      	lsls	r2, r2, #1
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	b29a      	uxth	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	829a      	strh	r2, [r3, #20]
 800604e:	e081      	b.n	8006154 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten - 1;
 8006050:	2312      	movs	r3, #18
 8006052:	18fb      	adds	r3, r7, r3
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	22ff      	movs	r2, #255	@ 0xff
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	b29a      	uxth	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	829a      	strh	r2, [r3, #20]
 8006060:	e078      	b.n	8006154 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8006062:	2317      	movs	r3, #23
 8006064:	18fb      	adds	r3, r7, r3
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b02      	cmp	r3, #2
 800606a:	d000      	beq.n	800606e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6e6>
 800606c:	e072      	b.n	8006154 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	89db      	ldrh	r3, [r3, #14]
 8006072:	b29b      	uxth	r3, r3
 8006074:	2101      	movs	r1, #1
 8006076:	0018      	movs	r0, r3
 8006078:	f000 f8f8 	bl	800626c <unsigned_bitwise_modulo>
 800607c:	1e03      	subs	r3, r0, #0
 800607e:	d109      	bne.n	8006094 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x70c>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8006080:	2312      	movs	r3, #18
 8006082:	18fb      	adds	r3, r7, r3
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	2280      	movs	r2, #128	@ 0x80
 8006088:	0052      	lsls	r2, r2, #1
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	b29a      	uxth	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	829a      	strh	r2, [r3, #20]
 8006092:	e05f      	b.n	8006154 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten + 1;
 8006094:	2312      	movs	r3, #18
 8006096:	18fb      	adds	r3, r7, r3
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	2202      	movs	r2, #2
 800609c:	32ff      	adds	r2, #255	@ 0xff
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	829a      	strh	r2, [r3, #20]
 80060a6:	e055      	b.n	8006154 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	        }
	        else if(symmetry_type_for_halfcycle == LENGTHEN){
 80060a8:	2316      	movs	r3, #22
 80060aa:	18fb      	adds	r3, r7, r3
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d150      	bne.n	8006154 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 80060b2:	2317      	movs	r3, #23
 80060b4:	18fb      	adds	r3, r7, r3
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d109      	bne.n	80060d0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x748>

	                params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 80060bc:	2310      	movs	r3, #16
 80060be:	18fb      	adds	r3, r7, r3
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	2280      	movs	r2, #128	@ 0x80
 80060c4:	0052      	lsls	r2, r2, #1
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	829a      	strh	r2, [r3, #20]
 80060ce:	e041      	b.n	8006154 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 80060d0:	2317      	movs	r3, #23
 80060d2:	18fb      	adds	r3, r7, r3
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d11b      	bne.n	8006112 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x78a>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	89db      	ldrh	r3, [r3, #14]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	2101      	movs	r1, #1
 80060e2:	0018      	movs	r0, r3
 80060e4:	f000 f8c2 	bl	800626c <unsigned_bitwise_modulo>
 80060e8:	1e03      	subs	r3, r0, #0
 80060ea:	d109      	bne.n	8006100 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x778>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 80060ec:	2310      	movs	r3, #16
 80060ee:	18fb      	adds	r3, r7, r3
 80060f0:	881b      	ldrh	r3, [r3, #0]
 80060f2:	2280      	movs	r2, #128	@ 0x80
 80060f4:	0052      	lsls	r2, r2, #1
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	829a      	strh	r2, [r3, #20]
 80060fe:	e029      	b.n	8006154 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 8006100:	2310      	movs	r3, #16
 8006102:	18fb      	adds	r3, r7, r3
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	22ff      	movs	r2, #255	@ 0xff
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	b29a      	uxth	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	829a      	strh	r2, [r3, #20]
 8006110:	e020      	b.n	8006154 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8006112:	2317      	movs	r3, #23
 8006114:	18fb      	adds	r3, r7, r3
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	2b02      	cmp	r3, #2
 800611a:	d11b      	bne.n	8006154 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	89db      	ldrh	r3, [r3, #14]
 8006120:	b29b      	uxth	r3, r3
 8006122:	2101      	movs	r1, #1
 8006124:	0018      	movs	r0, r3
 8006126:	f000 f8a1 	bl	800626c <unsigned_bitwise_modulo>
 800612a:	1e03      	subs	r3, r0, #0
 800612c:	d109      	bne.n	8006142 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7ba>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 800612e:	2310      	movs	r3, #16
 8006130:	18fb      	adds	r3, r7, r3
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	2280      	movs	r2, #128	@ 0x80
 8006136:	0052      	lsls	r2, r2, #1
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	b29a      	uxth	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	829a      	strh	r2, [r3, #20]
 8006140:	e008      	b.n	8006154 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen + 1;
 8006142:	2310      	movs	r3, #16
 8006144:	18fb      	adds	r3, r7, r3
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	2202      	movs	r2, #2
 800614a:	32ff      	adds	r2, #255	@ 0xff
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	b29a      	uxth	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	829a      	strh	r2, [r3, #20]
	                }
	            }
	        }

	        Adjust_TIM16_Prescaler(params_ptr);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	0018      	movs	r0, r3
 8006158:	f7ff fbf4 	bl	8005944 <Adjust_TIM16_Prescaler>
		params_ptr->final_start_value = params_ptr->raw_start_value;
		params_ptr->prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(params_ptr);
    #endif

    params_ptr->final_period = 256 - params_ptr->final_start_value;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	8a9b      	ldrh	r3, [r3, #20]
 8006160:	b29b      	uxth	r3, r3
 8006162:	2280      	movs	r2, #128	@ 0x80
 8006164:	0052      	lsls	r2, r2, #1
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	b29a      	uxth	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	82da      	strh	r2, [r3, #22]
    params_ptr->final_ARR = params_ptr->final_period - 1;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	8adb      	ldrh	r3, [r3, #22]
 8006172:	b29b      	uxth	r3, r3
 8006174:	3b01      	subs	r3, #1
 8006176:	b29a      	uxth	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	831a      	strh	r2, [r3, #24]
    params_ptr->final_prescaler_minus_one = params_ptr->final_prescaler - 1;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	8b9b      	ldrh	r3, [r3, #28]
 8006180:	b29b      	uxth	r3, r3
 8006182:	3b01      	subs	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	83da      	strh	r2, [r3, #30]

    return 1;
 800618a:	2301      	movs	r3, #1
}
 800618c:	0018      	movs	r0, r3
 800618e:	46bd      	mov	sp, r7
 8006190:	b007      	add	sp, #28
 8006192:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006194 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006198:	46c0      	nop			@ (mov r8, r8)
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <Start_OC_TIM>:
//INCLUDES
#include "timers.h"

//FUNCTION DEFINITIONS
uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 800619e:	b5b0      	push	{r4, r5, r7, lr}
 80061a0:	b084      	sub	sp, #16
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 80061a8:	250f      	movs	r5, #15
 80061aa:	197c      	adds	r4, r7, r5
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	0011      	movs	r1, r2
 80061b2:	0018      	movs	r0, r3
 80061b4:	f003 fd8c 	bl	8009cd0 <HAL_TIM_OC_Start_IT>
 80061b8:	0003      	movs	r3, r0
 80061ba:	7023      	strb	r3, [r4, #0]
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 80061bc:	197b      	adds	r3, r7, r5
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <Start_OC_TIM+0x2a>

		Error_Handler();
 80061c4:	f7fc f8d2 	bl	800236c <Error_Handler>
	}

	return ok;
 80061c8:	230f      	movs	r3, #15
 80061ca:	18fb      	adds	r3, r7, r3
 80061cc:	781b      	ldrb	r3, [r3, #0]
}
 80061ce:	0018      	movs	r0, r3
 80061d0:	46bd      	mov	sp, r7
 80061d2:	b004      	add	sp, #16
 80061d4:	bdb0      	pop	{r4, r5, r7, pc}

080061d6 <Stop_OC_TIM>:

uint8_t Stop_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 80061d6:	b5b0      	push	{r4, r5, r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Stop_IT(TIM, OC_TIM_channel);
 80061e0:	250f      	movs	r5, #15
 80061e2:	197c      	adds	r4, r7, r5
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	0011      	movs	r1, r2
 80061ea:	0018      	movs	r0, r3
 80061ec:	f003 fe94 	bl	8009f18 <HAL_TIM_OC_Stop_IT>
 80061f0:	0003      	movs	r3, r0
 80061f2:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 80061f4:	197b      	adds	r3, r7, r5
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <Stop_OC_TIM+0x2a>

		Error_Handler();
 80061fc:	f7fc f8b6 	bl	800236c <Error_Handler>
	}

	return ok;
 8006200:	230f      	movs	r3, #15
 8006202:	18fb      	adds	r3, r7, r3
 8006204:	781b      	ldrb	r3, [r3, #0]
}
 8006206:	0018      	movs	r0, r3
 8006208:	46bd      	mov	sp, r7
 800620a:	b004      	add	sp, #16
 800620c:	bdb0      	pop	{r4, r5, r7, pc}

0800620e <isPrime>:
#include "utility.h"

enum Validate isPrime(uint16_t x){
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	0002      	movs	r2, r0
 8006216:	1dbb      	adds	r3, r7, #6
 8006218:	801a      	strh	r2, [r3, #0]
    for (uint16_t d = 2; d * d <= x; d++) {
 800621a:	230e      	movs	r3, #14
 800621c:	18fb      	adds	r3, r7, r3
 800621e:	2202      	movs	r2, #2
 8006220:	801a      	strh	r2, [r3, #0]
 8006222:	e014      	b.n	800624e <isPrime+0x40>
        if (x % d == 0)
 8006224:	1dba      	adds	r2, r7, #6
 8006226:	230e      	movs	r3, #14
 8006228:	18fb      	adds	r3, r7, r3
 800622a:	8812      	ldrh	r2, [r2, #0]
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	0019      	movs	r1, r3
 8006230:	0010      	movs	r0, r2
 8006232:	f7f9 ffed 	bl	8000210 <__aeabi_uidivmod>
 8006236:	000b      	movs	r3, r1
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <isPrime+0x34>
            return NO;
 800623e:	2300      	movs	r3, #0
 8006240:	e010      	b.n	8006264 <isPrime+0x56>
    for (uint16_t d = 2; d * d <= x; d++) {
 8006242:	210e      	movs	r1, #14
 8006244:	187b      	adds	r3, r7, r1
 8006246:	881a      	ldrh	r2, [r3, #0]
 8006248:	187b      	adds	r3, r7, r1
 800624a:	3201      	adds	r2, #1
 800624c:	801a      	strh	r2, [r3, #0]
 800624e:	220e      	movs	r2, #14
 8006250:	18bb      	adds	r3, r7, r2
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	18ba      	adds	r2, r7, r2
 8006256:	8812      	ldrh	r2, [r2, #0]
 8006258:	435a      	muls	r2, r3
 800625a:	1dbb      	adds	r3, r7, #6
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	429a      	cmp	r2, r3
 8006260:	dde0      	ble.n	8006224 <isPrime+0x16>
    }
    return YES;
 8006262:	2301      	movs	r3, #1
}
 8006264:	0018      	movs	r0, r3
 8006266:	46bd      	mov	sp, r7
 8006268:	b004      	add	sp, #16
 800626a:	bd80      	pop	{r7, pc}

0800626c <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	000a      	movs	r2, r1
 8006276:	1cfb      	adds	r3, r7, #3
 8006278:	701a      	strb	r2, [r3, #0]

    return dividend & ((1 << base_2_exponent) - 1);
 800627a:	1cfb      	adds	r3, r7, #3
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	2201      	movs	r2, #1
 8006280:	409a      	lsls	r2, r3
 8006282:	0013      	movs	r3, r2
 8006284:	3b01      	subs	r3, #1
 8006286:	001a      	movs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4013      	ands	r3, r2
}
 800628c:	0018      	movs	r0, r3
 800628e:	46bd      	mov	sp, r7
 8006290:	b002      	add	sp, #8
 8006292:	bd80      	pop	{r7, pc}

08006294 <Global_Interrupt_Enable>:

uint8_t Global_Interrupt_Enable(void){
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8006298:	b662      	cpsie	i
}
 800629a:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
	return 1;
 800629c:	2301      	movs	r3, #1
}
 800629e:	0018      	movs	r0, r3
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <Get_Status_Bit>:

	__disable_irq();
	return 1;
}

enum Validate Get_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	000a      	movs	r2, r1
 80062ae:	1cbb      	adds	r3, r7, #2
 80062b0:	801a      	strh	r2, [r3, #0]

    if(*bits & bit){
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	1cba      	adds	r2, r7, #2
 80062b8:	8812      	ldrh	r2, [r2, #0]
 80062ba:	4013      	ands	r3, r2
 80062bc:	d001      	beq.n	80062c2 <Get_Status_Bit+0x1e>

        return (enum Validate) YES;
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <Get_Status_Bit+0x20>
    }

    else{

        return (enum Validate) NO;
 80062c2:	2300      	movs	r3, #0
    }
}
 80062c4:	0018      	movs	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	b002      	add	sp, #8
 80062ca:	bd80      	pop	{r7, pc}

080062cc <Set_Status_Bit>:

void Set_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	000a      	movs	r2, r1
 80062d6:	1cbb      	adds	r3, r7, #2
 80062d8:	801a      	strh	r2, [r3, #0]

	*bits |= bit;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	1cbb      	adds	r3, r7, #2
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	601a      	str	r2, [r3, #0]
}
 80062e8:	46c0      	nop			@ (mov r8, r8)
 80062ea:	46bd      	mov	sp, r7
 80062ec:	b002      	add	sp, #8
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <Clear_Status_Bit>:

void Clear_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	000a      	movs	r2, r1
 80062fa:	1cbb      	adds	r3, r7, #2
 80062fc:	801a      	strh	r2, [r3, #0]

	*bits &= ~bit;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	1cba      	adds	r2, r7, #2
 8006304:	8812      	ldrh	r2, [r2, #0]
 8006306:	43d2      	mvns	r2, r2
 8006308:	401a      	ands	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	601a      	str	r2, [r3, #0]
}
 800630e:	46c0      	nop			@ (mov r8, r8)
 8006310:	46bd      	mov	sp, r7
 8006312:	b002      	add	sp, #8
 8006314:	bd80      	pop	{r7, pc}
	...

08006318 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006318:	480d      	ldr	r0, [pc, #52]	@ (8006350 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800631a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800631c:	f7ff ff3a 	bl	8006194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006320:	480c      	ldr	r0, [pc, #48]	@ (8006354 <LoopForever+0x6>)
  ldr r1, =_edata
 8006322:	490d      	ldr	r1, [pc, #52]	@ (8006358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006324:	4a0d      	ldr	r2, [pc, #52]	@ (800635c <LoopForever+0xe>)
  movs r3, #0
 8006326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006328:	e002      	b.n	8006330 <LoopCopyDataInit>

0800632a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800632a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800632c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800632e:	3304      	adds	r3, #4

08006330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006334:	d3f9      	bcc.n	800632a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006336:	4a0a      	ldr	r2, [pc, #40]	@ (8006360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006338:	4c0a      	ldr	r4, [pc, #40]	@ (8006364 <LoopForever+0x16>)
  movs r3, #0
 800633a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800633c:	e001      	b.n	8006342 <LoopFillZerobss>

0800633e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800633e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006340:	3204      	adds	r2, #4

08006342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006344:	d3fb      	bcc.n	800633e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006346:	f007 f9ed 	bl	800d724 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800634a:	f7fe fab1 	bl	80048b0 <main>

0800634e <LoopForever>:

LoopForever:
  b LoopForever
 800634e:	e7fe      	b.n	800634e <LoopForever>
  ldr   r0, =_estack
 8006350:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8006354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006358:	20000458 	.word	0x20000458
  ldr r2, =_sidata
 800635c:	0800e218 	.word	0x0800e218
  ldr r2, =_sbss
 8006360:	20000458 	.word	0x20000458
  ldr r4, =_ebss
 8006364:	20000cf0 	.word	0x20000cf0

08006368 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006368:	e7fe      	b.n	8006368 <ADC1_IRQHandler>
	...

0800636c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006372:	1dfb      	adds	r3, r7, #7
 8006374:	2200      	movs	r2, #0
 8006376:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006378:	4b0b      	ldr	r3, [pc, #44]	@ (80063a8 <HAL_Init+0x3c>)
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	4b0a      	ldr	r3, [pc, #40]	@ (80063a8 <HAL_Init+0x3c>)
 800637e:	2180      	movs	r1, #128	@ 0x80
 8006380:	0049      	lsls	r1, r1, #1
 8006382:	430a      	orrs	r2, r1
 8006384:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006386:	2000      	movs	r0, #0
 8006388:	f000 f810 	bl	80063ac <HAL_InitTick>
 800638c:	1e03      	subs	r3, r0, #0
 800638e:	d003      	beq.n	8006398 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8006390:	1dfb      	adds	r3, r7, #7
 8006392:	2201      	movs	r2, #1
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	e001      	b.n	800639c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8006398:	f7fe fef8 	bl	800518c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800639c:	1dfb      	adds	r3, r7, #7
 800639e:	781b      	ldrb	r3, [r3, #0]
}
 80063a0:	0018      	movs	r0, r3
 80063a2:	46bd      	mov	sp, r7
 80063a4:	b002      	add	sp, #8
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	40022000 	.word	0x40022000

080063ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063ac:	b590      	push	{r4, r7, lr}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80063b4:	230f      	movs	r3, #15
 80063b6:	18fb      	adds	r3, r7, r3
 80063b8:	2200      	movs	r2, #0
 80063ba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80063bc:	4b1d      	ldr	r3, [pc, #116]	@ (8006434 <HAL_InitTick+0x88>)
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d02b      	beq.n	800641c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80063c4:	4b1c      	ldr	r3, [pc, #112]	@ (8006438 <HAL_InitTick+0x8c>)
 80063c6:	681c      	ldr	r4, [r3, #0]
 80063c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006434 <HAL_InitTick+0x88>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	0019      	movs	r1, r3
 80063ce:	23fa      	movs	r3, #250	@ 0xfa
 80063d0:	0098      	lsls	r0, r3, #2
 80063d2:	f7f9 fe97 	bl	8000104 <__udivsi3>
 80063d6:	0003      	movs	r3, r0
 80063d8:	0019      	movs	r1, r3
 80063da:	0020      	movs	r0, r4
 80063dc:	f7f9 fe92 	bl	8000104 <__udivsi3>
 80063e0:	0003      	movs	r3, r0
 80063e2:	0018      	movs	r0, r3
 80063e4:	f001 fb75 	bl	8007ad2 <HAL_SYSTICK_Config>
 80063e8:	1e03      	subs	r3, r0, #0
 80063ea:	d112      	bne.n	8006412 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d80a      	bhi.n	8006408 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	2301      	movs	r3, #1
 80063f6:	425b      	negs	r3, r3
 80063f8:	2200      	movs	r2, #0
 80063fa:	0018      	movs	r0, r3
 80063fc:	f001 fb34 	bl	8007a68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006400:	4b0e      	ldr	r3, [pc, #56]	@ (800643c <HAL_InitTick+0x90>)
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	e00d      	b.n	8006424 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8006408:	230f      	movs	r3, #15
 800640a:	18fb      	adds	r3, r7, r3
 800640c:	2201      	movs	r2, #1
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	e008      	b.n	8006424 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006412:	230f      	movs	r3, #15
 8006414:	18fb      	adds	r3, r7, r3
 8006416:	2201      	movs	r2, #1
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	e003      	b.n	8006424 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800641c:	230f      	movs	r3, #15
 800641e:	18fb      	adds	r3, r7, r3
 8006420:	2201      	movs	r2, #1
 8006422:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8006424:	230f      	movs	r3, #15
 8006426:	18fb      	adds	r3, r7, r3
 8006428:	781b      	ldrb	r3, [r3, #0]
}
 800642a:	0018      	movs	r0, r3
 800642c:	46bd      	mov	sp, r7
 800642e:	b005      	add	sp, #20
 8006430:	bd90      	pop	{r4, r7, pc}
 8006432:	46c0      	nop			@ (mov r8, r8)
 8006434:	20000454 	.word	0x20000454
 8006438:	2000044c 	.word	0x2000044c
 800643c:	20000450 	.word	0x20000450

08006440 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006444:	4b05      	ldr	r3, [pc, #20]	@ (800645c <HAL_IncTick+0x1c>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	001a      	movs	r2, r3
 800644a:	4b05      	ldr	r3, [pc, #20]	@ (8006460 <HAL_IncTick+0x20>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	18d2      	adds	r2, r2, r3
 8006450:	4b03      	ldr	r3, [pc, #12]	@ (8006460 <HAL_IncTick+0x20>)
 8006452:	601a      	str	r2, [r3, #0]
}
 8006454:	46c0      	nop			@ (mov r8, r8)
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	46c0      	nop			@ (mov r8, r8)
 800645c:	20000454 	.word	0x20000454
 8006460:	20000cec 	.word	0x20000cec

08006464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0
  return uwTick;
 8006468:	4b02      	ldr	r3, [pc, #8]	@ (8006474 <HAL_GetTick+0x10>)
 800646a:	681b      	ldr	r3, [r3, #0]
}
 800646c:	0018      	movs	r0, r3
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	46c0      	nop			@ (mov r8, r8)
 8006474:	20000cec 	.word	0x20000cec

08006478 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a05      	ldr	r2, [pc, #20]	@ (800649c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8006488:	401a      	ands	r2, r3
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	431a      	orrs	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	601a      	str	r2, [r3, #0]
}
 8006492:	46c0      	nop			@ (mov r8, r8)
 8006494:	46bd      	mov	sp, r7
 8006496:	b002      	add	sp, #8
 8006498:	bd80      	pop	{r7, pc}
 800649a:	46c0      	nop			@ (mov r8, r8)
 800649c:	fe3fffff 	.word	0xfe3fffff

080064a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	23e0      	movs	r3, #224	@ 0xe0
 80064ae:	045b      	lsls	r3, r3, #17
 80064b0:	4013      	ands	r3, r2
}
 80064b2:	0018      	movs	r0, r3
 80064b4:	46bd      	mov	sp, r7
 80064b6:	b002      	add	sp, #8
 80064b8:	bd80      	pop	{r7, pc}

080064ba <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	60f8      	str	r0, [r7, #12]
 80064c2:	60b9      	str	r1, [r7, #8]
 80064c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	2104      	movs	r1, #4
 80064ce:	400a      	ands	r2, r1
 80064d0:	2107      	movs	r1, #7
 80064d2:	4091      	lsls	r1, r2
 80064d4:	000a      	movs	r2, r1
 80064d6:	43d2      	mvns	r2, r2
 80064d8:	401a      	ands	r2, r3
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2104      	movs	r1, #4
 80064de:	400b      	ands	r3, r1
 80064e0:	6879      	ldr	r1, [r7, #4]
 80064e2:	4099      	lsls	r1, r3
 80064e4:	000b      	movs	r3, r1
 80064e6:	431a      	orrs	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80064ec:	46c0      	nop			@ (mov r8, r8)
 80064ee:	46bd      	mov	sp, r7
 80064f0:	b004      	add	sp, #16
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	2104      	movs	r1, #4
 8006506:	400a      	ands	r2, r1
 8006508:	2107      	movs	r1, #7
 800650a:	4091      	lsls	r1, r2
 800650c:	000a      	movs	r2, r1
 800650e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2104      	movs	r1, #4
 8006514:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8006516:	40da      	lsrs	r2, r3
 8006518:	0013      	movs	r3, r2
}
 800651a:	0018      	movs	r0, r3
 800651c:	46bd      	mov	sp, r7
 800651e:	b002      	add	sp, #8
 8006520:	bd80      	pop	{r7, pc}

08006522 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	23c0      	movs	r3, #192	@ 0xc0
 8006530:	011b      	lsls	r3, r3, #4
 8006532:	4013      	ands	r3, r2
 8006534:	d101      	bne.n	800653a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006536:	2301      	movs	r3, #1
 8006538:	e000      	b.n	800653c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800653a:	2300      	movs	r3, #0
}
 800653c:	0018      	movs	r0, r3
 800653e:	46bd      	mov	sp, r7
 8006540:	b002      	add	sp, #8
 8006542:	bd80      	pop	{r7, pc}

08006544 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	211f      	movs	r1, #31
 8006558:	400a      	ands	r2, r1
 800655a:	210f      	movs	r1, #15
 800655c:	4091      	lsls	r1, r2
 800655e:	000a      	movs	r2, r1
 8006560:	43d2      	mvns	r2, r2
 8006562:	401a      	ands	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	0e9b      	lsrs	r3, r3, #26
 8006568:	210f      	movs	r1, #15
 800656a:	4019      	ands	r1, r3
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	201f      	movs	r0, #31
 8006570:	4003      	ands	r3, r0
 8006572:	4099      	lsls	r1, r3
 8006574:	000b      	movs	r3, r1
 8006576:	431a      	orrs	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800657c:	46c0      	nop			@ (mov r8, r8)
 800657e:	46bd      	mov	sp, r7
 8006580:	b004      	add	sp, #16
 8006582:	bd80      	pop	{r7, pc}

08006584 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	035b      	lsls	r3, r3, #13
 8006596:	0b5b      	lsrs	r3, r3, #13
 8006598:	431a      	orrs	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800659e:	46c0      	nop			@ (mov r8, r8)
 80065a0:	46bd      	mov	sp, r7
 80065a2:	b002      	add	sp, #8
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b4:	683a      	ldr	r2, [r7, #0]
 80065b6:	0352      	lsls	r2, r2, #13
 80065b8:	0b52      	lsrs	r2, r2, #13
 80065ba:	43d2      	mvns	r2, r2
 80065bc:	401a      	ands	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80065c2:	46c0      	nop			@ (mov r8, r8)
 80065c4:	46bd      	mov	sp, r7
 80065c6:	b002      	add	sp, #8
 80065c8:	bd80      	pop	{r7, pc}
	...

080065cc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	0212      	lsls	r2, r2, #8
 80065e0:	43d2      	mvns	r2, r2
 80065e2:	401a      	ands	r2, r3
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	021b      	lsls	r3, r3, #8
 80065e8:	6879      	ldr	r1, [r7, #4]
 80065ea:	400b      	ands	r3, r1
 80065ec:	4904      	ldr	r1, [pc, #16]	@ (8006600 <LL_ADC_SetChannelSamplingTime+0x34>)
 80065ee:	400b      	ands	r3, r1
 80065f0:	431a      	orrs	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80065f6:	46c0      	nop			@ (mov r8, r8)
 80065f8:	46bd      	mov	sp, r7
 80065fa:	b004      	add	sp, #16
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	46c0      	nop			@ (mov r8, r8)
 8006600:	07ffff00 	.word	0x07ffff00

08006604 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	4a05      	ldr	r2, [pc, #20]	@ (8006628 <LL_ADC_EnableInternalRegulator+0x24>)
 8006612:	4013      	ands	r3, r2
 8006614:	2280      	movs	r2, #128	@ 0x80
 8006616:	0552      	lsls	r2, r2, #21
 8006618:	431a      	orrs	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800661e:	46c0      	nop			@ (mov r8, r8)
 8006620:	46bd      	mov	sp, r7
 8006622:	b002      	add	sp, #8
 8006624:	bd80      	pop	{r7, pc}
 8006626:	46c0      	nop			@ (mov r8, r8)
 8006628:	6fffffe8 	.word	0x6fffffe8

0800662c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689a      	ldr	r2, [r3, #8]
 8006638:	2380      	movs	r3, #128	@ 0x80
 800663a:	055b      	lsls	r3, r3, #21
 800663c:	401a      	ands	r2, r3
 800663e:	2380      	movs	r3, #128	@ 0x80
 8006640:	055b      	lsls	r3, r3, #21
 8006642:	429a      	cmp	r2, r3
 8006644:	d101      	bne.n	800664a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8006646:	2301      	movs	r3, #1
 8006648:	e000      	b.n	800664c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800664a:	2300      	movs	r3, #0
}
 800664c:	0018      	movs	r0, r3
 800664e:	46bd      	mov	sp, r7
 8006650:	b002      	add	sp, #8
 8006652:	bd80      	pop	{r7, pc}

08006654 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	4a04      	ldr	r2, [pc, #16]	@ (8006674 <LL_ADC_Enable+0x20>)
 8006662:	4013      	ands	r3, r2
 8006664:	2201      	movs	r2, #1
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800666c:	46c0      	nop			@ (mov r8, r8)
 800666e:	46bd      	mov	sp, r7
 8006670:	b002      	add	sp, #8
 8006672:	bd80      	pop	{r7, pc}
 8006674:	7fffffe8 	.word	0x7fffffe8

08006678 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	4a04      	ldr	r2, [pc, #16]	@ (8006698 <LL_ADC_Disable+0x20>)
 8006686:	4013      	ands	r3, r2
 8006688:	2202      	movs	r2, #2
 800668a:	431a      	orrs	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006690:	46c0      	nop			@ (mov r8, r8)
 8006692:	46bd      	mov	sp, r7
 8006694:	b002      	add	sp, #8
 8006696:	bd80      	pop	{r7, pc}
 8006698:	7fffffe8 	.word	0x7fffffe8

0800669c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	2201      	movs	r2, #1
 80066aa:	4013      	ands	r3, r2
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <LL_ADC_IsEnabled+0x18>
 80066b0:	2301      	movs	r3, #1
 80066b2:	e000      	b.n	80066b6 <LL_ADC_IsEnabled+0x1a>
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	0018      	movs	r0, r3
 80066b8:	46bd      	mov	sp, r7
 80066ba:	b002      	add	sp, #8
 80066bc:	bd80      	pop	{r7, pc}

080066be <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b082      	sub	sp, #8
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	2202      	movs	r2, #2
 80066cc:	4013      	ands	r3, r2
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d101      	bne.n	80066d6 <LL_ADC_IsDisableOngoing+0x18>
 80066d2:	2301      	movs	r3, #1
 80066d4:	e000      	b.n	80066d8 <LL_ADC_IsDisableOngoing+0x1a>
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	0018      	movs	r0, r3
 80066da:	46bd      	mov	sp, r7
 80066dc:	b002      	add	sp, #8
 80066de:	bd80      	pop	{r7, pc}

080066e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	4a04      	ldr	r2, [pc, #16]	@ (8006700 <LL_ADC_REG_StartConversion+0x20>)
 80066ee:	4013      	ands	r3, r2
 80066f0:	2204      	movs	r2, #4
 80066f2:	431a      	orrs	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80066f8:	46c0      	nop			@ (mov r8, r8)
 80066fa:	46bd      	mov	sp, r7
 80066fc:	b002      	add	sp, #8
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	7fffffe8 	.word	0x7fffffe8

08006704 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	4a04      	ldr	r2, [pc, #16]	@ (8006724 <LL_ADC_REG_StopConversion+0x20>)
 8006712:	4013      	ands	r3, r2
 8006714:	2210      	movs	r2, #16
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800671c:	46c0      	nop			@ (mov r8, r8)
 800671e:	46bd      	mov	sp, r7
 8006720:	b002      	add	sp, #8
 8006722:	bd80      	pop	{r7, pc}
 8006724:	7fffffe8 	.word	0x7fffffe8

08006728 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	2204      	movs	r2, #4
 8006736:	4013      	ands	r3, r2
 8006738:	2b04      	cmp	r3, #4
 800673a:	d101      	bne.n	8006740 <LL_ADC_REG_IsConversionOngoing+0x18>
 800673c:	2301      	movs	r3, #1
 800673e:	e000      	b.n	8006742 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006740:	2300      	movs	r3, #0
}
 8006742:	0018      	movs	r0, r3
 8006744:	46bd      	mov	sp, r7
 8006746:	b002      	add	sp, #8
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b088      	sub	sp, #32
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006754:	231f      	movs	r3, #31
 8006756:	18fb      	adds	r3, r7, r3
 8006758:	2200      	movs	r2, #0
 800675a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800675c:	2300      	movs	r3, #0
 800675e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8006760:	2300      	movs	r3, #0
 8006762:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006764:	2300      	movs	r3, #0
 8006766:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e19f      	b.n	8006ab2 <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006776:	2b00      	cmp	r3, #0
 8006778:	d12a      	bne.n	80067d0 <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4acf      	ldr	r2, [pc, #828]	@ (8006abc <HAL_ADC_Init+0x370>)
 800677e:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4acf      	ldr	r2, [pc, #828]	@ (8006ac0 <HAL_ADC_Init+0x374>)
 8006784:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4ace      	ldr	r2, [pc, #824]	@ (8006ac4 <HAL_ADC_Init+0x378>)
 800678a:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4ace      	ldr	r2, [pc, #824]	@ (8006ac8 <HAL_ADC_Init+0x37c>)
 8006790:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4acd      	ldr	r2, [pc, #820]	@ (8006acc <HAL_ADC_Init+0x380>)
 8006796:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4acd      	ldr	r2, [pc, #820]	@ (8006ad0 <HAL_ADC_Init+0x384>)
 800679c:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4acc      	ldr	r2, [pc, #816]	@ (8006ad4 <HAL_ADC_Init+0x388>)
 80067a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (hadc->MspInitCallback == NULL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2280      	movs	r2, #128	@ 0x80
 80067a8:	589b      	ldr	r3, [r3, r2]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d103      	bne.n	80067b6 <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2180      	movs	r1, #128	@ 0x80
 80067b2:	4ac9      	ldr	r2, [pc, #804]	@ (8006ad8 <HAL_ADC_Init+0x38c>)
 80067b4:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2280      	movs	r2, #128	@ 0x80
 80067ba:	589b      	ldr	r3, [r3, r2]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	0010      	movs	r0, r2
 80067c0:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2254      	movs	r2, #84	@ 0x54
 80067cc:	2100      	movs	r1, #0
 80067ce:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	0018      	movs	r0, r3
 80067d6:	f7ff ff29 	bl	800662c <LL_ADC_IsInternalRegulatorEnabled>
 80067da:	1e03      	subs	r3, r0, #0
 80067dc:	d115      	bne.n	800680a <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	0018      	movs	r0, r3
 80067e4:	f7ff ff0e 	bl	8006604 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80067e8:	4bbc      	ldr	r3, [pc, #752]	@ (8006adc <HAL_ADC_Init+0x390>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	49bc      	ldr	r1, [pc, #752]	@ (8006ae0 <HAL_ADC_Init+0x394>)
 80067ee:	0018      	movs	r0, r3
 80067f0:	f7f9 fc88 	bl	8000104 <__udivsi3>
 80067f4:	0003      	movs	r3, r0
 80067f6:	3301      	adds	r3, #1
 80067f8:	005b      	lsls	r3, r3, #1
 80067fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80067fc:	e002      	b.n	8006804 <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	3b01      	subs	r3, #1
 8006802:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1f9      	bne.n	80067fe <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	0018      	movs	r0, r3
 8006810:	f7ff ff0c 	bl	800662c <LL_ADC_IsInternalRegulatorEnabled>
 8006814:	1e03      	subs	r3, r0, #0
 8006816:	d10f      	bne.n	8006838 <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800681c:	2210      	movs	r2, #16
 800681e:	431a      	orrs	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006828:	2201      	movs	r2, #1
 800682a:	431a      	orrs	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006830:	231f      	movs	r3, #31
 8006832:	18fb      	adds	r3, r7, r3
 8006834:	2201      	movs	r2, #1
 8006836:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	0018      	movs	r0, r3
 800683e:	f7ff ff73 	bl	8006728 <LL_ADC_REG_IsConversionOngoing>
 8006842:	0003      	movs	r3, r0
 8006844:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800684a:	2210      	movs	r2, #16
 800684c:	4013      	ands	r3, r2
 800684e:	d000      	beq.n	8006852 <HAL_ADC_Init+0x106>
 8006850:	e122      	b.n	8006a98 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d000      	beq.n	800685a <HAL_ADC_Init+0x10e>
 8006858:	e11e      	b.n	8006a98 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800685e:	4aa1      	ldr	r2, [pc, #644]	@ (8006ae4 <HAL_ADC_Init+0x398>)
 8006860:	4013      	ands	r3, r2
 8006862:	2202      	movs	r2, #2
 8006864:	431a      	orrs	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	0018      	movs	r0, r3
 8006870:	f7ff ff14 	bl	800669c <LL_ADC_IsEnabled>
 8006874:	1e03      	subs	r3, r0, #0
 8006876:	d000      	beq.n	800687a <HAL_ADC_Init+0x12e>
 8006878:	e0ad      	b.n	80069d6 <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	7e1b      	ldrb	r3, [r3, #24]
 8006882:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006884:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	7e5b      	ldrb	r3, [r3, #25]
 800688a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800688c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	7e9b      	ldrb	r3, [r3, #26]
 8006892:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006894:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <HAL_ADC_Init+0x158>
 800689e:	2380      	movs	r3, #128	@ 0x80
 80068a0:	015b      	lsls	r3, r3, #5
 80068a2:	e000      	b.n	80068a6 <HAL_ADC_Init+0x15a>
 80068a4:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80068a6:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80068ac:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	da04      	bge.n	80068c0 <HAL_ADC_Init+0x174>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	085b      	lsrs	r3, r3, #1
 80068be:	e001      	b.n	80068c4 <HAL_ADC_Init+0x178>
 80068c0:	2380      	movs	r3, #128	@ 0x80
 80068c2:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80068c4:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	212c      	movs	r1, #44	@ 0x2c
 80068ca:	5c5b      	ldrb	r3, [r3, r1]
 80068cc:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80068ce:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2220      	movs	r2, #32
 80068da:	5c9b      	ldrb	r3, [r3, r2]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d115      	bne.n	800690c <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	7e9b      	ldrb	r3, [r3, #26]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d105      	bne.n	80068f4 <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	2280      	movs	r2, #128	@ 0x80
 80068ec:	0252      	lsls	r2, r2, #9
 80068ee:	4313      	orrs	r3, r2
 80068f0:	61bb      	str	r3, [r7, #24]
 80068f2:	e00b      	b.n	800690c <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f8:	2220      	movs	r2, #32
 80068fa:	431a      	orrs	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006904:	2201      	movs	r2, #1
 8006906:	431a      	orrs	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00a      	beq.n	800692a <HAL_ADC_Init+0x1de>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006918:	23e0      	movs	r3, #224	@ 0xe0
 800691a:	005b      	lsls	r3, r3, #1
 800691c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8006922:	4313      	orrs	r3, r2
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	4313      	orrs	r3, r2
 8006928:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	4a6d      	ldr	r2, [pc, #436]	@ (8006ae8 <HAL_ADC_Init+0x39c>)
 8006932:	4013      	ands	r3, r2
 8006934:	0019      	movs	r1, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	430a      	orrs	r2, r1
 800693e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	0f9b      	lsrs	r3, r3, #30
 8006946:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800694c:	4313      	orrs	r3, r2
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	4313      	orrs	r3, r2
 8006952:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	223c      	movs	r2, #60	@ 0x3c
 8006958:	5c9b      	ldrb	r3, [r3, r2]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d111      	bne.n	8006982 <HAL_ADC_Init+0x236>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	0f9b      	lsrs	r3, r3, #30
 8006964:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800696a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8006970:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8006976:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	4313      	orrs	r3, r2
 800697c:	2201      	movs	r2, #1
 800697e:	4313      	orrs	r3, r2
 8006980:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	4a58      	ldr	r2, [pc, #352]	@ (8006aec <HAL_ADC_Init+0x3a0>)
 800698a:	4013      	ands	r3, r2
 800698c:	0019      	movs	r1, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	430a      	orrs	r2, r1
 8006996:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	23c0      	movs	r3, #192	@ 0xc0
 800699e:	061b      	lsls	r3, r3, #24
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d018      	beq.n	80069d6 <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80069a8:	2380      	movs	r3, #128	@ 0x80
 80069aa:	05db      	lsls	r3, r3, #23
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d012      	beq.n	80069d6 <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80069b4:	2380      	movs	r3, #128	@ 0x80
 80069b6:	061b      	lsls	r3, r3, #24
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d00c      	beq.n	80069d6 <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80069bc:	4b4c      	ldr	r3, [pc, #304]	@ (8006af0 <HAL_ADC_Init+0x3a4>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a4c      	ldr	r2, [pc, #304]	@ (8006af4 <HAL_ADC_Init+0x3a8>)
 80069c2:	4013      	ands	r3, r2
 80069c4:	0019      	movs	r1, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	23f0      	movs	r3, #240	@ 0xf0
 80069cc:	039b      	lsls	r3, r3, #14
 80069ce:	401a      	ands	r2, r3
 80069d0:	4b47      	ldr	r3, [pc, #284]	@ (8006af0 <HAL_ADC_Init+0x3a4>)
 80069d2:	430a      	orrs	r2, r1
 80069d4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6818      	ldr	r0, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069de:	001a      	movs	r2, r3
 80069e0:	2100      	movs	r1, #0
 80069e2:	f7ff fd6a 	bl	80064ba <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6818      	ldr	r0, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ee:	4942      	ldr	r1, [pc, #264]	@ (8006af8 <HAL_ADC_Init+0x3ac>)
 80069f0:	001a      	movs	r2, r3
 80069f2:	f7ff fd62 	bl	80064ba <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d109      	bne.n	8006a12 <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2110      	movs	r1, #16
 8006a0a:	4249      	negs	r1, r1
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a10:	e018      	b.n	8006a44 <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	691a      	ldr	r2, [r3, #16]
 8006a16:	2380      	movs	r3, #128	@ 0x80
 8006a18:	039b      	lsls	r3, r3, #14
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d112      	bne.n	8006a44 <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	221c      	movs	r2, #28
 8006a2e:	4013      	ands	r3, r2
 8006a30:	2210      	movs	r2, #16
 8006a32:	4252      	negs	r2, r2
 8006a34:	409a      	lsls	r2, r3
 8006a36:	0011      	movs	r1, r2
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	430a      	orrs	r2, r1
 8006a42:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2100      	movs	r1, #0
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f7ff fd52 	bl	80064f4 <LL_ADC_GetSamplingTimeCommonChannels>
 8006a50:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d10b      	bne.n	8006a72 <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a64:	2203      	movs	r2, #3
 8006a66:	4393      	bics	r3, r2
 8006a68:	2201      	movs	r2, #1
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006a70:	e01c      	b.n	8006aac <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a76:	2212      	movs	r2, #18
 8006a78:	4393      	bics	r3, r2
 8006a7a:	2210      	movs	r2, #16
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a86:	2201      	movs	r2, #1
 8006a88:	431a      	orrs	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8006a8e:	231f      	movs	r3, #31
 8006a90:	18fb      	adds	r3, r7, r3
 8006a92:	2201      	movs	r2, #1
 8006a94:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006a96:	e009      	b.n	8006aac <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a9c:	2210      	movs	r2, #16
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006aa4:	231f      	movs	r3, #31
 8006aa6:	18fb      	adds	r3, r7, r3
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8006aac:	231f      	movs	r3, #31
 8006aae:	18fb      	adds	r3, r7, r3
 8006ab0:	781b      	ldrb	r3, [r3, #0]
}
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	b008      	add	sp, #32
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	46c0      	nop			@ (mov r8, r8)
 8006abc:	08006e15 	.word	0x08006e15
 8006ac0:	08006e25 	.word	0x08006e25
 8006ac4:	08006e35 	.word	0x08006e35
 8006ac8:	08006e45 	.word	0x08006e45
 8006acc:	0800789d 	.word	0x0800789d
 8006ad0:	080078ad 	.word	0x080078ad
 8006ad4:	080078bd 	.word	0x080078bd
 8006ad8:	080051d5 	.word	0x080051d5
 8006adc:	2000044c 	.word	0x2000044c
 8006ae0:	00030d40 	.word	0x00030d40
 8006ae4:	fffffefd 	.word	0xfffffefd
 8006ae8:	ffde0201 	.word	0xffde0201
 8006aec:	1ffffc02 	.word	0x1ffffc02
 8006af0:	40012708 	.word	0x40012708
 8006af4:	ffc3ffff 	.word	0xffc3ffff
 8006af8:	07ffff04 	.word	0x07ffff04

08006afc <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	607a      	str	r2, [r7, #4]
 8006b06:	230b      	movs	r3, #11
 8006b08:	18fb      	adds	r3, r7, r3
 8006b0a:	1c0a      	adds	r2, r1, #0
 8006b0c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b0e:	2317      	movs	r3, #23
 8006b10:	18fb      	adds	r3, r7, r3
 8006b12:	2200      	movs	r2, #0
 8006b14:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d107      	bne.n	8006b2c <HAL_ADC_RegisterCallback+0x30>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b20:	2210      	movs	r2, #16
 8006b22:	431a      	orrs	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	65da      	str	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e06d      	b.n	8006c08 <HAL_ADC_RegisterCallback+0x10c>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b30:	2201      	movs	r2, #1
 8006b32:	4013      	ands	r3, r2
 8006b34:	d03a      	beq.n	8006bac <HAL_ADC_RegisterCallback+0xb0>
  {
    switch (CallbackID)
 8006b36:	230b      	movs	r3, #11
 8006b38:	18fb      	adds	r3, r7, r3
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	2b0a      	cmp	r3, #10
 8006b3e:	d82a      	bhi.n	8006b96 <HAL_ADC_RegisterCallback+0x9a>
 8006b40:	009a      	lsls	r2, r3, #2
 8006b42:	4b33      	ldr	r3, [pc, #204]	@ (8006c10 <HAL_ADC_RegisterCallback+0x114>)
 8006b44:	18d3      	adds	r3, r2, r3
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	469f      	mov	pc, r3
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006b50:	e057      	b.n	8006c02 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8006b58:	e053      	b.n	8006c02 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006b60:	e04f      	b.n	8006c02 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8006b68:	e04b      	b.n	8006c02 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006b70:	e047      	b.n	8006c02 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8006b78:	e043      	b.n	8006c02 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006b80:	e03f      	b.n	8006c02 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2180      	movs	r1, #128	@ 0x80
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	505a      	str	r2, [r3, r1]
        break;
 8006b8a:	e03a      	b.n	8006c02 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2184      	movs	r1, #132	@ 0x84
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	505a      	str	r2, [r3, r1]
        break;
 8006b94:	e035      	b.n	8006c02 <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b9a:	2210      	movs	r2, #16
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 8006ba2:	2317      	movs	r3, #23
 8006ba4:	18fb      	adds	r3, r7, r3
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	701a      	strb	r2, [r3, #0]
        break;
 8006baa:	e02a      	b.n	8006c02 <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d11c      	bne.n	8006bee <HAL_ADC_RegisterCallback+0xf2>
  {
    switch (CallbackID)
 8006bb4:	230b      	movs	r3, #11
 8006bb6:	18fb      	adds	r3, r7, r3
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b09      	cmp	r3, #9
 8006bbc:	d002      	beq.n	8006bc4 <HAL_ADC_RegisterCallback+0xc8>
 8006bbe:	2b0a      	cmp	r3, #10
 8006bc0:	d005      	beq.n	8006bce <HAL_ADC_RegisterCallback+0xd2>
 8006bc2:	e009      	b.n	8006bd8 <HAL_ADC_RegisterCallback+0xdc>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2180      	movs	r1, #128	@ 0x80
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	505a      	str	r2, [r3, r1]
        break;
 8006bcc:	e019      	b.n	8006c02 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2184      	movs	r1, #132	@ 0x84
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	505a      	str	r2, [r3, r1]
        break;
 8006bd6:	e014      	b.n	8006c02 <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bdc:	2210      	movs	r2, #16
 8006bde:	431a      	orrs	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 8006be4:	2317      	movs	r3, #23
 8006be6:	18fb      	adds	r3, r7, r3
 8006be8:	2201      	movs	r2, #1
 8006bea:	701a      	strb	r2, [r3, #0]
        break;
 8006bec:	e009      	b.n	8006c02 <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bf2:	2210      	movs	r2, #16
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Return error status */
    status =  HAL_ERROR;
 8006bfa:	2317      	movs	r3, #23
 8006bfc:	18fb      	adds	r3, r7, r3
 8006bfe:	2201      	movs	r2, #1
 8006c00:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006c02:	2317      	movs	r3, #23
 8006c04:	18fb      	adds	r3, r7, r3
 8006c06:	781b      	ldrb	r3, [r3, #0]
}
 8006c08:	0018      	movs	r0, r3
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	b006      	add	sp, #24
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	0800e01c 	.word	0x0800e01c

08006c14 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006c14:	b5b0      	push	{r4, r5, r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	0018      	movs	r0, r3
 8006c26:	f7ff fd7f 	bl	8006728 <LL_ADC_REG_IsConversionOngoing>
 8006c2a:	1e03      	subs	r3, r0, #0
 8006c2c:	d16c      	bne.n	8006d08 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2254      	movs	r2, #84	@ 0x54
 8006c32:	5c9b      	ldrb	r3, [r3, r2]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d101      	bne.n	8006c3c <HAL_ADC_Start_DMA+0x28>
 8006c38:	2302      	movs	r3, #2
 8006c3a:	e06c      	b.n	8006d16 <HAL_ADC_Start_DMA+0x102>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2254      	movs	r2, #84	@ 0x54
 8006c40:	2101      	movs	r1, #1
 8006c42:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	d113      	bne.n	8006c78 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	0018      	movs	r0, r3
 8006c56:	f7ff fd21 	bl	800669c <LL_ADC_IsEnabled>
 8006c5a:	1e03      	subs	r3, r0, #0
 8006c5c:	d004      	beq.n	8006c68 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	0018      	movs	r0, r3
 8006c64:	f7ff fd08 	bl	8006678 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2101      	movs	r1, #1
 8006c74:	430a      	orrs	r2, r1
 8006c76:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006c78:	2517      	movs	r5, #23
 8006c7a:	197c      	adds	r4, r7, r5
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	0018      	movs	r0, r3
 8006c80:	f000 fb02 	bl	8007288 <ADC_Enable>
 8006c84:	0003      	movs	r3, r0
 8006c86:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006c88:	002c      	movs	r4, r5
 8006c8a:	193b      	adds	r3, r7, r4
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d13e      	bne.n	8006d10 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c96:	4a22      	ldr	r2, [pc, #136]	@ (8006d20 <HAL_ADC_Start_DMA+0x10c>)
 8006c98:	4013      	ands	r3, r2
 8006c9a:	2280      	movs	r2, #128	@ 0x80
 8006c9c:	0052      	lsls	r2, r2, #1
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cae:	4a1d      	ldr	r2, [pc, #116]	@ (8006d24 <HAL_ADC_Start_DMA+0x110>)
 8006cb0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8006d28 <HAL_ADC_Start_DMA+0x114>)
 8006cb8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8006d2c <HAL_ADC_Start_DMA+0x118>)
 8006cc0:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	221c      	movs	r2, #28
 8006cc8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2254      	movs	r2, #84	@ 0x54
 8006cce:	2100      	movs	r1, #0
 8006cd0:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2110      	movs	r1, #16
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3340      	adds	r3, #64	@ 0x40
 8006cec:	0019      	movs	r1, r3
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	193c      	adds	r4, r7, r4
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f000 ff84 	bl	8007c00 <HAL_DMA_Start_IT>
 8006cf8:	0003      	movs	r3, r0
 8006cfa:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	0018      	movs	r0, r3
 8006d02:	f7ff fced 	bl	80066e0 <LL_ADC_REG_StartConversion>
 8006d06:	e003      	b.n	8006d10 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006d08:	2317      	movs	r3, #23
 8006d0a:	18fb      	adds	r3, r7, r3
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8006d10:	2317      	movs	r3, #23
 8006d12:	18fb      	adds	r3, r7, r3
 8006d14:	781b      	ldrb	r3, [r3, #0]
}
 8006d16:	0018      	movs	r0, r3
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	b006      	add	sp, #24
 8006d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8006d1e:	46c0      	nop			@ (mov r8, r8)
 8006d20:	fffff0fe 	.word	0xfffff0fe
 8006d24:	08007451 	.word	0x08007451
 8006d28:	0800751d 	.word	0x0800751d
 8006d2c:	0800753d 	.word	0x0800753d

08006d30 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006d30:	b5b0      	push	{r4, r5, r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2254      	movs	r2, #84	@ 0x54
 8006d3c:	5c9b      	ldrb	r3, [r3, r2]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <HAL_ADC_Stop_DMA+0x16>
 8006d42:	2302      	movs	r3, #2
 8006d44:	e05f      	b.n	8006e06 <HAL_ADC_Stop_DMA+0xd6>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2254      	movs	r2, #84	@ 0x54
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8006d4e:	250f      	movs	r5, #15
 8006d50:	197c      	adds	r4, r7, r5
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	0018      	movs	r0, r3
 8006d56:	f000 fa55 	bl	8007204 <ADC_ConversionStop>
 8006d5a:	0003      	movs	r3, r0
 8006d5c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006d5e:	0029      	movs	r1, r5
 8006d60:	187b      	adds	r3, r7, r1
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d147      	bne.n	8006df8 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d6c:	2225      	movs	r2, #37	@ 0x25
 8006d6e:	5c9b      	ldrb	r3, [r3, r2]
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d112      	bne.n	8006d9c <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d7a:	000d      	movs	r5, r1
 8006d7c:	187c      	adds	r4, r7, r1
 8006d7e:	0018      	movs	r0, r3
 8006d80:	f000 ffc4 	bl	8007d0c <HAL_DMA_Abort>
 8006d84:	0003      	movs	r3, r0
 8006d86:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006d88:	197b      	adds	r3, r7, r5
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d005      	beq.n	8006d9c <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d94:	2240      	movs	r2, #64	@ 0x40
 8006d96:	431a      	orrs	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2110      	movs	r1, #16
 8006da8:	438a      	bics	r2, r1
 8006daa:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8006dac:	220f      	movs	r2, #15
 8006dae:	18bb      	adds	r3, r7, r2
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d107      	bne.n	8006dc6 <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8006db6:	18bc      	adds	r4, r7, r2
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	0018      	movs	r0, r3
 8006dbc:	f000 faea 	bl	8007394 <ADC_Disable>
 8006dc0:	0003      	movs	r3, r0
 8006dc2:	7023      	strb	r3, [r4, #0]
 8006dc4:	e003      	b.n	8006dce <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	0018      	movs	r0, r3
 8006dca:	f000 fae3 	bl	8007394 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006dce:	230f      	movs	r3, #15
 8006dd0:	18fb      	adds	r3, r7, r3
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d107      	bne.n	8006de8 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ddc:	4a0c      	ldr	r2, [pc, #48]	@ (8006e10 <HAL_ADC_Stop_DMA+0xe0>)
 8006dde:	4013      	ands	r3, r2
 8006de0:	2201      	movs	r2, #1
 8006de2:	431a      	orrs	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68da      	ldr	r2, [r3, #12]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2101      	movs	r1, #1
 8006df4:	438a      	bics	r2, r1
 8006df6:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2254      	movs	r2, #84	@ 0x54
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006e00:	230f      	movs	r3, #15
 8006e02:	18fb      	adds	r3, r7, r3
 8006e04:	781b      	ldrb	r3, [r3, #0]
}
 8006e06:	0018      	movs	r0, r3
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	b004      	add	sp, #16
 8006e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8006e0e:	46c0      	nop			@ (mov r8, r8)
 8006e10:	fffffefe 	.word	0xfffffefe

08006e14 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006e1c:	46c0      	nop			@ (mov r8, r8)
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	b002      	add	sp, #8
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006e2c:	46c0      	nop			@ (mov r8, r8)
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	b002      	add	sp, #8
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006e3c:	46c0      	nop			@ (mov r8, r8)
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	b002      	add	sp, #8
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006e4c:	46c0      	nop			@ (mov r8, r8)
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	b002      	add	sp, #8
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e5e:	2317      	movs	r3, #23
 8006e60:	18fb      	adds	r3, r7, r3
 8006e62:	2200      	movs	r2, #0
 8006e64:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006e66:	2300      	movs	r3, #0
 8006e68:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2254      	movs	r2, #84	@ 0x54
 8006e6e:	5c9b      	ldrb	r3, [r3, r2]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d101      	bne.n	8006e78 <HAL_ADC_ConfigChannel+0x24>
 8006e74:	2302      	movs	r3, #2
 8006e76:	e1c0      	b.n	80071fa <HAL_ADC_ConfigChannel+0x3a6>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2254      	movs	r2, #84	@ 0x54
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	0018      	movs	r0, r3
 8006e86:	f7ff fc4f 	bl	8006728 <LL_ADC_REG_IsConversionOngoing>
 8006e8a:	1e03      	subs	r3, r0, #0
 8006e8c:	d000      	beq.n	8006e90 <HAL_ADC_ConfigChannel+0x3c>
 8006e8e:	e1a3      	b.n	80071d8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d100      	bne.n	8006e9a <HAL_ADC_ConfigChannel+0x46>
 8006e98:	e143      	b.n	8007122 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	691a      	ldr	r2, [r3, #16]
 8006e9e:	2380      	movs	r3, #128	@ 0x80
 8006ea0:	061b      	lsls	r3, r3, #24
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d004      	beq.n	8006eb0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006eaa:	4ac1      	ldr	r2, [pc, #772]	@ (80071b0 <HAL_ADC_ConfigChannel+0x35c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d108      	bne.n	8006ec2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	0019      	movs	r1, r3
 8006eba:	0010      	movs	r0, r2
 8006ebc:	f7ff fb62 	bl	8006584 <LL_ADC_REG_SetSequencerChAdd>
 8006ec0:	e0c9      	b.n	8007056 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	211f      	movs	r1, #31
 8006ecc:	400b      	ands	r3, r1
 8006ece:	210f      	movs	r1, #15
 8006ed0:	4099      	lsls	r1, r3
 8006ed2:	000b      	movs	r3, r1
 8006ed4:	43db      	mvns	r3, r3
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	0019      	movs	r1, r3
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	035b      	lsls	r3, r3, #13
 8006ee0:	0b5b      	lsrs	r3, r3, #13
 8006ee2:	d105      	bne.n	8006ef0 <HAL_ADC_ConfigChannel+0x9c>
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	0e9b      	lsrs	r3, r3, #26
 8006eea:	221f      	movs	r2, #31
 8006eec:	4013      	ands	r3, r2
 8006eee:	e098      	b.n	8007022 <HAL_ADC_ConfigChannel+0x1ce>
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	d000      	beq.n	8006efc <HAL_ADC_ConfigChannel+0xa8>
 8006efa:	e091      	b.n	8007020 <HAL_ADC_ConfigChannel+0x1cc>
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2202      	movs	r2, #2
 8006f02:	4013      	ands	r3, r2
 8006f04:	d000      	beq.n	8006f08 <HAL_ADC_ConfigChannel+0xb4>
 8006f06:	e089      	b.n	800701c <HAL_ADC_ConfigChannel+0x1c8>
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2204      	movs	r2, #4
 8006f0e:	4013      	ands	r3, r2
 8006f10:	d000      	beq.n	8006f14 <HAL_ADC_ConfigChannel+0xc0>
 8006f12:	e081      	b.n	8007018 <HAL_ADC_ConfigChannel+0x1c4>
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2208      	movs	r2, #8
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	d000      	beq.n	8006f20 <HAL_ADC_ConfigChannel+0xcc>
 8006f1e:	e079      	b.n	8007014 <HAL_ADC_ConfigChannel+0x1c0>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2210      	movs	r2, #16
 8006f26:	4013      	ands	r3, r2
 8006f28:	d000      	beq.n	8006f2c <HAL_ADC_ConfigChannel+0xd8>
 8006f2a:	e071      	b.n	8007010 <HAL_ADC_ConfigChannel+0x1bc>
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2220      	movs	r2, #32
 8006f32:	4013      	ands	r3, r2
 8006f34:	d000      	beq.n	8006f38 <HAL_ADC_ConfigChannel+0xe4>
 8006f36:	e069      	b.n	800700c <HAL_ADC_ConfigChannel+0x1b8>
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2240      	movs	r2, #64	@ 0x40
 8006f3e:	4013      	ands	r3, r2
 8006f40:	d000      	beq.n	8006f44 <HAL_ADC_ConfigChannel+0xf0>
 8006f42:	e061      	b.n	8007008 <HAL_ADC_ConfigChannel+0x1b4>
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2280      	movs	r2, #128	@ 0x80
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	d000      	beq.n	8006f50 <HAL_ADC_ConfigChannel+0xfc>
 8006f4e:	e059      	b.n	8007004 <HAL_ADC_ConfigChannel+0x1b0>
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	2380      	movs	r3, #128	@ 0x80
 8006f56:	005b      	lsls	r3, r3, #1
 8006f58:	4013      	ands	r3, r2
 8006f5a:	d151      	bne.n	8007000 <HAL_ADC_ConfigChannel+0x1ac>
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	2380      	movs	r3, #128	@ 0x80
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4013      	ands	r3, r2
 8006f66:	d149      	bne.n	8006ffc <HAL_ADC_ConfigChannel+0x1a8>
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	2380      	movs	r3, #128	@ 0x80
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	4013      	ands	r3, r2
 8006f72:	d141      	bne.n	8006ff8 <HAL_ADC_ConfigChannel+0x1a4>
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	2380      	movs	r3, #128	@ 0x80
 8006f7a:	011b      	lsls	r3, r3, #4
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	d139      	bne.n	8006ff4 <HAL_ADC_ConfigChannel+0x1a0>
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	2380      	movs	r3, #128	@ 0x80
 8006f86:	015b      	lsls	r3, r3, #5
 8006f88:	4013      	ands	r3, r2
 8006f8a:	d131      	bne.n	8006ff0 <HAL_ADC_ConfigChannel+0x19c>
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	2380      	movs	r3, #128	@ 0x80
 8006f92:	019b      	lsls	r3, r3, #6
 8006f94:	4013      	ands	r3, r2
 8006f96:	d129      	bne.n	8006fec <HAL_ADC_ConfigChannel+0x198>
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	2380      	movs	r3, #128	@ 0x80
 8006f9e:	01db      	lsls	r3, r3, #7
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	d121      	bne.n	8006fe8 <HAL_ADC_ConfigChannel+0x194>
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	2380      	movs	r3, #128	@ 0x80
 8006faa:	021b      	lsls	r3, r3, #8
 8006fac:	4013      	ands	r3, r2
 8006fae:	d119      	bne.n	8006fe4 <HAL_ADC_ConfigChannel+0x190>
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	2380      	movs	r3, #128	@ 0x80
 8006fb6:	025b      	lsls	r3, r3, #9
 8006fb8:	4013      	ands	r3, r2
 8006fba:	d111      	bne.n	8006fe0 <HAL_ADC_ConfigChannel+0x18c>
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	2380      	movs	r3, #128	@ 0x80
 8006fc2:	029b      	lsls	r3, r3, #10
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	d109      	bne.n	8006fdc <HAL_ADC_ConfigChannel+0x188>
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	2380      	movs	r3, #128	@ 0x80
 8006fce:	02db      	lsls	r3, r3, #11
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	d001      	beq.n	8006fd8 <HAL_ADC_ConfigChannel+0x184>
 8006fd4:	2312      	movs	r3, #18
 8006fd6:	e024      	b.n	8007022 <HAL_ADC_ConfigChannel+0x1ce>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	e022      	b.n	8007022 <HAL_ADC_ConfigChannel+0x1ce>
 8006fdc:	2311      	movs	r3, #17
 8006fde:	e020      	b.n	8007022 <HAL_ADC_ConfigChannel+0x1ce>
 8006fe0:	2310      	movs	r3, #16
 8006fe2:	e01e      	b.n	8007022 <HAL_ADC_ConfigChannel+0x1ce>
 8006fe4:	230f      	movs	r3, #15
 8006fe6:	e01c      	b.n	8007022 <HAL_ADC_ConfigChannel+0x1ce>
 8006fe8:	230e      	movs	r3, #14
 8006fea:	e01a      	b.n	8007022 <HAL_ADC_ConfigChannel+0x1ce>
 8006fec:	230d      	movs	r3, #13
 8006fee:	e018      	b.n	8007022 <HAL_ADC_ConfigChannel+0x1ce>
 8006ff0:	230c      	movs	r3, #12
 8006ff2:	e016      	b.n	8007022 <HAL_ADC_ConfigChannel+0x1ce>
 8006ff4:	230b      	movs	r3, #11
 8006ff6:	e014      	b.n	8007022 <HAL_ADC_ConfigChannel+0x1ce>
 8006ff8:	230a      	movs	r3, #10
 8006ffa:	e012      	b.n	8007022 <HAL_ADC_ConfigChannel+0x1ce>
 8006ffc:	2309      	movs	r3, #9
 8006ffe:	e010      	b.n	8007022 <HAL_ADC_ConfigChannel+0x1ce>
 8007000:	2308      	movs	r3, #8
 8007002:	e00e      	b.n	8007022 <HAL_ADC_ConfigChannel+0x1ce>
 8007004:	2307      	movs	r3, #7
 8007006:	e00c      	b.n	8007022 <HAL_ADC_ConfigChannel+0x1ce>
 8007008:	2306      	movs	r3, #6
 800700a:	e00a      	b.n	8007022 <HAL_ADC_ConfigChannel+0x1ce>
 800700c:	2305      	movs	r3, #5
 800700e:	e008      	b.n	8007022 <HAL_ADC_ConfigChannel+0x1ce>
 8007010:	2304      	movs	r3, #4
 8007012:	e006      	b.n	8007022 <HAL_ADC_ConfigChannel+0x1ce>
 8007014:	2303      	movs	r3, #3
 8007016:	e004      	b.n	8007022 <HAL_ADC_ConfigChannel+0x1ce>
 8007018:	2302      	movs	r3, #2
 800701a:	e002      	b.n	8007022 <HAL_ADC_ConfigChannel+0x1ce>
 800701c:	2301      	movs	r3, #1
 800701e:	e000      	b.n	8007022 <HAL_ADC_ConfigChannel+0x1ce>
 8007020:	2300      	movs	r3, #0
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	6852      	ldr	r2, [r2, #4]
 8007026:	201f      	movs	r0, #31
 8007028:	4002      	ands	r2, r0
 800702a:	4093      	lsls	r3, r2
 800702c:	000a      	movs	r2, r1
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	089b      	lsrs	r3, r3, #2
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	429a      	cmp	r2, r3
 8007042:	d808      	bhi.n	8007056 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6818      	ldr	r0, [r3, #0]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	6859      	ldr	r1, [r3, #4]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	001a      	movs	r2, r3
 8007052:	f7ff fa77 	bl	8006544 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6818      	ldr	r0, [r3, #0]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	6819      	ldr	r1, [r3, #0]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	001a      	movs	r2, r3
 8007064:	f7ff fab2 	bl	80065cc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	db00      	blt.n	8007072 <HAL_ADC_ConfigChannel+0x21e>
 8007070:	e0bc      	b.n	80071ec <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007072:	4b50      	ldr	r3, [pc, #320]	@ (80071b4 <HAL_ADC_ConfigChannel+0x360>)
 8007074:	0018      	movs	r0, r3
 8007076:	f7ff fa13 	bl	80064a0 <LL_ADC_GetCommonPathInternalCh>
 800707a:	0003      	movs	r3, r0
 800707c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a4d      	ldr	r2, [pc, #308]	@ (80071b8 <HAL_ADC_ConfigChannel+0x364>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d122      	bne.n	80070ce <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	2380      	movs	r3, #128	@ 0x80
 800708c:	041b      	lsls	r3, r3, #16
 800708e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007090:	d11d      	bne.n	80070ce <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	2280      	movs	r2, #128	@ 0x80
 8007096:	0412      	lsls	r2, r2, #16
 8007098:	4313      	orrs	r3, r2
 800709a:	4a46      	ldr	r2, [pc, #280]	@ (80071b4 <HAL_ADC_ConfigChannel+0x360>)
 800709c:	0019      	movs	r1, r3
 800709e:	0010      	movs	r0, r2
 80070a0:	f7ff f9ea 	bl	8006478 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80070a4:	4b45      	ldr	r3, [pc, #276]	@ (80071bc <HAL_ADC_ConfigChannel+0x368>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4945      	ldr	r1, [pc, #276]	@ (80071c0 <HAL_ADC_ConfigChannel+0x36c>)
 80070aa:	0018      	movs	r0, r3
 80070ac:	f7f9 f82a 	bl	8000104 <__udivsi3>
 80070b0:	0003      	movs	r3, r0
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	0013      	movs	r3, r2
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	189b      	adds	r3, r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80070be:	e002      	b.n	80070c6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	3b01      	subs	r3, #1
 80070c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1f9      	bne.n	80070c0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80070cc:	e08e      	b.n	80071ec <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a3c      	ldr	r2, [pc, #240]	@ (80071c4 <HAL_ADC_ConfigChannel+0x370>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d10e      	bne.n	80070f6 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	2380      	movs	r3, #128	@ 0x80
 80070dc:	045b      	lsls	r3, r3, #17
 80070de:	4013      	ands	r3, r2
 80070e0:	d109      	bne.n	80070f6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	2280      	movs	r2, #128	@ 0x80
 80070e6:	0452      	lsls	r2, r2, #17
 80070e8:	4313      	orrs	r3, r2
 80070ea:	4a32      	ldr	r2, [pc, #200]	@ (80071b4 <HAL_ADC_ConfigChannel+0x360>)
 80070ec:	0019      	movs	r1, r3
 80070ee:	0010      	movs	r0, r2
 80070f0:	f7ff f9c2 	bl	8006478 <LL_ADC_SetCommonPathInternalCh>
 80070f4:	e07a      	b.n	80071ec <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a33      	ldr	r2, [pc, #204]	@ (80071c8 <HAL_ADC_ConfigChannel+0x374>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d000      	beq.n	8007102 <HAL_ADC_ConfigChannel+0x2ae>
 8007100:	e074      	b.n	80071ec <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	2380      	movs	r3, #128	@ 0x80
 8007106:	03db      	lsls	r3, r3, #15
 8007108:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800710a:	d000      	beq.n	800710e <HAL_ADC_ConfigChannel+0x2ba>
 800710c:	e06e      	b.n	80071ec <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	2280      	movs	r2, #128	@ 0x80
 8007112:	03d2      	lsls	r2, r2, #15
 8007114:	4313      	orrs	r3, r2
 8007116:	4a27      	ldr	r2, [pc, #156]	@ (80071b4 <HAL_ADC_ConfigChannel+0x360>)
 8007118:	0019      	movs	r1, r3
 800711a:	0010      	movs	r0, r2
 800711c:	f7ff f9ac 	bl	8006478 <LL_ADC_SetCommonPathInternalCh>
 8007120:	e064      	b.n	80071ec <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691a      	ldr	r2, [r3, #16]
 8007126:	2380      	movs	r3, #128	@ 0x80
 8007128:	061b      	lsls	r3, r3, #24
 800712a:	429a      	cmp	r2, r3
 800712c:	d004      	beq.n	8007138 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007132:	4a1f      	ldr	r2, [pc, #124]	@ (80071b0 <HAL_ADC_ConfigChannel+0x35c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d107      	bne.n	8007148 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	0019      	movs	r1, r3
 8007142:	0010      	movs	r0, r2
 8007144:	f7ff fa2f 	bl	80065a6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	da4d      	bge.n	80071ec <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007150:	4b18      	ldr	r3, [pc, #96]	@ (80071b4 <HAL_ADC_ConfigChannel+0x360>)
 8007152:	0018      	movs	r0, r3
 8007154:	f7ff f9a4 	bl	80064a0 <LL_ADC_GetCommonPathInternalCh>
 8007158:	0003      	movs	r3, r0
 800715a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a15      	ldr	r2, [pc, #84]	@ (80071b8 <HAL_ADC_ConfigChannel+0x364>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d108      	bne.n	8007178 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	4a18      	ldr	r2, [pc, #96]	@ (80071cc <HAL_ADC_ConfigChannel+0x378>)
 800716a:	4013      	ands	r3, r2
 800716c:	4a11      	ldr	r2, [pc, #68]	@ (80071b4 <HAL_ADC_ConfigChannel+0x360>)
 800716e:	0019      	movs	r1, r3
 8007170:	0010      	movs	r0, r2
 8007172:	f7ff f981 	bl	8006478 <LL_ADC_SetCommonPathInternalCh>
 8007176:	e039      	b.n	80071ec <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a11      	ldr	r2, [pc, #68]	@ (80071c4 <HAL_ADC_ConfigChannel+0x370>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d108      	bne.n	8007194 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	4a12      	ldr	r2, [pc, #72]	@ (80071d0 <HAL_ADC_ConfigChannel+0x37c>)
 8007186:	4013      	ands	r3, r2
 8007188:	4a0a      	ldr	r2, [pc, #40]	@ (80071b4 <HAL_ADC_ConfigChannel+0x360>)
 800718a:	0019      	movs	r1, r3
 800718c:	0010      	movs	r0, r2
 800718e:	f7ff f973 	bl	8006478 <LL_ADC_SetCommonPathInternalCh>
 8007192:	e02b      	b.n	80071ec <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a0b      	ldr	r2, [pc, #44]	@ (80071c8 <HAL_ADC_ConfigChannel+0x374>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d126      	bne.n	80071ec <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	4a0c      	ldr	r2, [pc, #48]	@ (80071d4 <HAL_ADC_ConfigChannel+0x380>)
 80071a2:	4013      	ands	r3, r2
 80071a4:	4a03      	ldr	r2, [pc, #12]	@ (80071b4 <HAL_ADC_ConfigChannel+0x360>)
 80071a6:	0019      	movs	r1, r3
 80071a8:	0010      	movs	r0, r2
 80071aa:	f7ff f965 	bl	8006478 <LL_ADC_SetCommonPathInternalCh>
 80071ae:	e01d      	b.n	80071ec <HAL_ADC_ConfigChannel+0x398>
 80071b0:	80000004 	.word	0x80000004
 80071b4:	40012708 	.word	0x40012708
 80071b8:	b0001000 	.word	0xb0001000
 80071bc:	2000044c 	.word	0x2000044c
 80071c0:	00030d40 	.word	0x00030d40
 80071c4:	b8004000 	.word	0xb8004000
 80071c8:	b4002000 	.word	0xb4002000
 80071cc:	ff7fffff 	.word	0xff7fffff
 80071d0:	feffffff 	.word	0xfeffffff
 80071d4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071dc:	2220      	movs	r2, #32
 80071de:	431a      	orrs	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80071e4:	2317      	movs	r3, #23
 80071e6:	18fb      	adds	r3, r7, r3
 80071e8:	2201      	movs	r2, #1
 80071ea:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2254      	movs	r2, #84	@ 0x54
 80071f0:	2100      	movs	r1, #0
 80071f2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80071f4:	2317      	movs	r3, #23
 80071f6:	18fb      	adds	r3, r7, r3
 80071f8:	781b      	ldrb	r3, [r3, #0]
}
 80071fa:	0018      	movs	r0, r3
 80071fc:	46bd      	mov	sp, r7
 80071fe:	b006      	add	sp, #24
 8007200:	bd80      	pop	{r7, pc}
 8007202:	46c0      	nop			@ (mov r8, r8)

08007204 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	0018      	movs	r0, r3
 8007212:	f7ff fa89 	bl	8006728 <LL_ADC_REG_IsConversionOngoing>
 8007216:	1e03      	subs	r3, r0, #0
 8007218:	d031      	beq.n	800727e <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	0018      	movs	r0, r3
 8007220:	f7ff fa4d 	bl	80066be <LL_ADC_IsDisableOngoing>
 8007224:	1e03      	subs	r3, r0, #0
 8007226:	d104      	bne.n	8007232 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	0018      	movs	r0, r3
 800722e:	f7ff fa69 	bl	8006704 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007232:	f7ff f917 	bl	8006464 <HAL_GetTick>
 8007236:	0003      	movs	r3, r0
 8007238:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800723a:	e01a      	b.n	8007272 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800723c:	f7ff f912 	bl	8006464 <HAL_GetTick>
 8007240:	0002      	movs	r2, r0
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	2b02      	cmp	r3, #2
 8007248:	d913      	bls.n	8007272 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	2204      	movs	r2, #4
 8007252:	4013      	ands	r3, r2
 8007254:	d00d      	beq.n	8007272 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800725a:	2210      	movs	r2, #16
 800725c:	431a      	orrs	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007266:	2201      	movs	r2, #1
 8007268:	431a      	orrs	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e006      	b.n	8007280 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	2204      	movs	r2, #4
 800727a:	4013      	ands	r3, r2
 800727c:	d1de      	bne.n	800723c <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	0018      	movs	r0, r3
 8007282:	46bd      	mov	sp, r7
 8007284:	b004      	add	sp, #16
 8007286:	bd80      	pop	{r7, pc}

08007288 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007290:	2300      	movs	r3, #0
 8007292:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	0018      	movs	r0, r3
 800729a:	f7ff f9ff 	bl	800669c <LL_ADC_IsEnabled>
 800729e:	1e03      	subs	r3, r0, #0
 80072a0:	d000      	beq.n	80072a4 <ADC_Enable+0x1c>
 80072a2:	e069      	b.n	8007378 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	4a36      	ldr	r2, [pc, #216]	@ (8007384 <ADC_Enable+0xfc>)
 80072ac:	4013      	ands	r3, r2
 80072ae:	d00d      	beq.n	80072cc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072b4:	2210      	movs	r2, #16
 80072b6:	431a      	orrs	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072c0:	2201      	movs	r2, #1
 80072c2:	431a      	orrs	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e056      	b.n	800737a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	0018      	movs	r0, r3
 80072d2:	f7ff f9bf 	bl	8006654 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80072d6:	4b2c      	ldr	r3, [pc, #176]	@ (8007388 <ADC_Enable+0x100>)
 80072d8:	0018      	movs	r0, r3
 80072da:	f7ff f8e1 	bl	80064a0 <LL_ADC_GetCommonPathInternalCh>
 80072de:	0002      	movs	r2, r0
 80072e0:	2380      	movs	r3, #128	@ 0x80
 80072e2:	041b      	lsls	r3, r3, #16
 80072e4:	4013      	ands	r3, r2
 80072e6:	d00f      	beq.n	8007308 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80072e8:	4b28      	ldr	r3, [pc, #160]	@ (800738c <ADC_Enable+0x104>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4928      	ldr	r1, [pc, #160]	@ (8007390 <ADC_Enable+0x108>)
 80072ee:	0018      	movs	r0, r3
 80072f0:	f7f8 ff08 	bl	8000104 <__udivsi3>
 80072f4:	0003      	movs	r3, r0
 80072f6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80072f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80072fa:	e002      	b.n	8007302 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	3b01      	subs	r3, #1
 8007300:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1f9      	bne.n	80072fc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	7e5b      	ldrb	r3, [r3, #25]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d033      	beq.n	8007378 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8007310:	f7ff f8a8 	bl	8006464 <HAL_GetTick>
 8007314:	0003      	movs	r3, r0
 8007316:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007318:	e027      	b.n	800736a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	0018      	movs	r0, r3
 8007320:	f7ff f9bc 	bl	800669c <LL_ADC_IsEnabled>
 8007324:	1e03      	subs	r3, r0, #0
 8007326:	d104      	bne.n	8007332 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	0018      	movs	r0, r3
 800732e:	f7ff f991 	bl	8006654 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007332:	f7ff f897 	bl	8006464 <HAL_GetTick>
 8007336:	0002      	movs	r2, r0
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	2b02      	cmp	r3, #2
 800733e:	d914      	bls.n	800736a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2201      	movs	r2, #1
 8007348:	4013      	ands	r3, r2
 800734a:	2b01      	cmp	r3, #1
 800734c:	d00d      	beq.n	800736a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007352:	2210      	movs	r2, #16
 8007354:	431a      	orrs	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800735e:	2201      	movs	r2, #1
 8007360:	431a      	orrs	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e007      	b.n	800737a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2201      	movs	r2, #1
 8007372:	4013      	ands	r3, r2
 8007374:	2b01      	cmp	r3, #1
 8007376:	d1d0      	bne.n	800731a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	0018      	movs	r0, r3
 800737c:	46bd      	mov	sp, r7
 800737e:	b004      	add	sp, #16
 8007380:	bd80      	pop	{r7, pc}
 8007382:	46c0      	nop			@ (mov r8, r8)
 8007384:	80000017 	.word	0x80000017
 8007388:	40012708 	.word	0x40012708
 800738c:	2000044c 	.word	0x2000044c
 8007390:	00030d40 	.word	0x00030d40

08007394 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	0018      	movs	r0, r3
 80073a2:	f7ff f98c 	bl	80066be <LL_ADC_IsDisableOngoing>
 80073a6:	0003      	movs	r3, r0
 80073a8:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	0018      	movs	r0, r3
 80073b0:	f7ff f974 	bl	800669c <LL_ADC_IsEnabled>
 80073b4:	1e03      	subs	r3, r0, #0
 80073b6:	d046      	beq.n	8007446 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d143      	bne.n	8007446 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	2205      	movs	r2, #5
 80073c6:	4013      	ands	r3, r2
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d10d      	bne.n	80073e8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	0018      	movs	r0, r3
 80073d2:	f7ff f951 	bl	8006678 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2203      	movs	r2, #3
 80073dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80073de:	f7ff f841 	bl	8006464 <HAL_GetTick>
 80073e2:	0003      	movs	r3, r0
 80073e4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80073e6:	e028      	b.n	800743a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ec:	2210      	movs	r2, #16
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073f8:	2201      	movs	r2, #1
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e021      	b.n	8007448 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007404:	f7ff f82e 	bl	8006464 <HAL_GetTick>
 8007408:	0002      	movs	r2, r0
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	2b02      	cmp	r3, #2
 8007410:	d913      	bls.n	800743a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	2201      	movs	r2, #1
 800741a:	4013      	ands	r3, r2
 800741c:	d00d      	beq.n	800743a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007422:	2210      	movs	r2, #16
 8007424:	431a      	orrs	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800742e:	2201      	movs	r2, #1
 8007430:	431a      	orrs	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e006      	b.n	8007448 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	2201      	movs	r2, #1
 8007442:	4013      	ands	r3, r2
 8007444:	d1de      	bne.n	8007404 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	0018      	movs	r0, r3
 800744a:	46bd      	mov	sp, r7
 800744c:	b004      	add	sp, #16
 800744e:	bd80      	pop	{r7, pc}

08007450 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800745c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007462:	2250      	movs	r2, #80	@ 0x50
 8007464:	4013      	ands	r3, r2
 8007466:	d142      	bne.n	80074ee <ADC_DMAConvCplt+0x9e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800746c:	2280      	movs	r2, #128	@ 0x80
 800746e:	0092      	lsls	r2, r2, #2
 8007470:	431a      	orrs	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	0018      	movs	r0, r3
 800747c:	f7ff f851 	bl	8006522 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007480:	1e03      	subs	r3, r0, #0
 8007482:	d02e      	beq.n	80074e2 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	7e9b      	ldrb	r3, [r3, #26]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d12a      	bne.n	80074e2 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2208      	movs	r2, #8
 8007494:	4013      	ands	r3, r2
 8007496:	2b08      	cmp	r3, #8
 8007498:	d123      	bne.n	80074e2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	0018      	movs	r0, r3
 80074a0:	f7ff f942 	bl	8006728 <LL_ADC_REG_IsConversionOngoing>
 80074a4:	1e03      	subs	r3, r0, #0
 80074a6:	d110      	bne.n	80074ca <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	210c      	movs	r1, #12
 80074b4:	438a      	bics	r2, r1
 80074b6:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074bc:	4a16      	ldr	r2, [pc, #88]	@ (8007518 <ADC_DMAConvCplt+0xc8>)
 80074be:	4013      	ands	r3, r2
 80074c0:	2201      	movs	r2, #1
 80074c2:	431a      	orrs	r2, r3
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80074c8:	e00b      	b.n	80074e2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ce:	2220      	movs	r2, #32
 80074d0:	431a      	orrs	r2, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074da:	2201      	movs	r2, #1
 80074dc:	431a      	orrs	r2, r3
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	0010      	movs	r0, r2
 80074ea:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80074ec:	e010      	b.n	8007510 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074f2:	2210      	movs	r2, #16
 80074f4:	4013      	ands	r3, r2
 80074f6:	d005      	beq.n	8007504 <ADC_DMAConvCplt+0xb4>
      hadc->ErrorCallback(hadc);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	0010      	movs	r0, r2
 8007500:	4798      	blx	r3
}
 8007502:	e005      	b.n	8007510 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	0010      	movs	r0, r2
 800750e:	4798      	blx	r3
}
 8007510:	46c0      	nop			@ (mov r8, r8)
 8007512:	46bd      	mov	sp, r7
 8007514:	b004      	add	sp, #16
 8007516:	bd80      	pop	{r7, pc}
 8007518:	fffffefe 	.word	0xfffffefe

0800751c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007528:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	0010      	movs	r0, r2
 8007532:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007534:	46c0      	nop			@ (mov r8, r8)
 8007536:	46bd      	mov	sp, r7
 8007538:	b004      	add	sp, #16
 800753a:	bd80      	pop	{r7, pc}

0800753c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007548:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800754e:	2240      	movs	r2, #64	@ 0x40
 8007550:	431a      	orrs	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800755a:	2204      	movs	r2, #4
 800755c:	431a      	orrs	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	0010      	movs	r0, r2
 800756a:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800756c:	46c0      	nop			@ (mov r8, r8)
 800756e:	46bd      	mov	sp, r7
 8007570:	b004      	add	sp, #16
 8007572:	bd80      	pop	{r7, pc}

08007574 <LL_ADC_GetCommonClock>:
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	23f0      	movs	r3, #240	@ 0xf0
 8007582:	039b      	lsls	r3, r3, #14
 8007584:	4013      	ands	r3, r2
}
 8007586:	0018      	movs	r0, r3
 8007588:	46bd      	mov	sp, r7
 800758a:	b002      	add	sp, #8
 800758c:	bd80      	pop	{r7, pc}

0800758e <LL_ADC_GetClock>:
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b082      	sub	sp, #8
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	0f9b      	lsrs	r3, r3, #30
 800759c:	079b      	lsls	r3, r3, #30
}
 800759e:	0018      	movs	r0, r3
 80075a0:	46bd      	mov	sp, r7
 80075a2:	b002      	add	sp, #8
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <LL_ADC_SetCalibrationFactor>:
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	22b4      	movs	r2, #180	@ 0xb4
 80075b4:	589b      	ldr	r3, [r3, r2]
 80075b6:	227f      	movs	r2, #127	@ 0x7f
 80075b8:	4393      	bics	r3, r2
 80075ba:	001a      	movs	r2, r3
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	431a      	orrs	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	21b4      	movs	r1, #180	@ 0xb4
 80075c4:	505a      	str	r2, [r3, r1]
}
 80075c6:	46c0      	nop			@ (mov r8, r8)
 80075c8:	46bd      	mov	sp, r7
 80075ca:	b002      	add	sp, #8
 80075cc:	bd80      	pop	{r7, pc}

080075ce <LL_ADC_GetCalibrationFactor>:
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b082      	sub	sp, #8
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	22b4      	movs	r2, #180	@ 0xb4
 80075da:	589b      	ldr	r3, [r3, r2]
 80075dc:	227f      	movs	r2, #127	@ 0x7f
 80075de:	4013      	ands	r3, r2
}
 80075e0:	0018      	movs	r0, r3
 80075e2:	46bd      	mov	sp, r7
 80075e4:	b002      	add	sp, #8
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <LL_ADC_Enable>:
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	4a04      	ldr	r2, [pc, #16]	@ (8007608 <LL_ADC_Enable+0x20>)
 80075f6:	4013      	ands	r3, r2
 80075f8:	2201      	movs	r2, #1
 80075fa:	431a      	orrs	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	609a      	str	r2, [r3, #8]
}
 8007600:	46c0      	nop			@ (mov r8, r8)
 8007602:	46bd      	mov	sp, r7
 8007604:	b002      	add	sp, #8
 8007606:	bd80      	pop	{r7, pc}
 8007608:	7fffffe8 	.word	0x7fffffe8

0800760c <LL_ADC_Disable>:
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	4a04      	ldr	r2, [pc, #16]	@ (800762c <LL_ADC_Disable+0x20>)
 800761a:	4013      	ands	r3, r2
 800761c:	2202      	movs	r2, #2
 800761e:	431a      	orrs	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	609a      	str	r2, [r3, #8]
}
 8007624:	46c0      	nop			@ (mov r8, r8)
 8007626:	46bd      	mov	sp, r7
 8007628:	b002      	add	sp, #8
 800762a:	bd80      	pop	{r7, pc}
 800762c:	7fffffe8 	.word	0x7fffffe8

08007630 <LL_ADC_IsEnabled>:
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	2201      	movs	r2, #1
 800763e:	4013      	ands	r3, r2
 8007640:	2b01      	cmp	r3, #1
 8007642:	d101      	bne.n	8007648 <LL_ADC_IsEnabled+0x18>
 8007644:	2301      	movs	r3, #1
 8007646:	e000      	b.n	800764a <LL_ADC_IsEnabled+0x1a>
 8007648:	2300      	movs	r3, #0
}
 800764a:	0018      	movs	r0, r3
 800764c:	46bd      	mov	sp, r7
 800764e:	b002      	add	sp, #8
 8007650:	bd80      	pop	{r7, pc}
	...

08007654 <LL_ADC_StartCalibration>:
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	4a05      	ldr	r2, [pc, #20]	@ (8007678 <LL_ADC_StartCalibration+0x24>)
 8007662:	4013      	ands	r3, r2
 8007664:	2280      	movs	r2, #128	@ 0x80
 8007666:	0612      	lsls	r2, r2, #24
 8007668:	431a      	orrs	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	609a      	str	r2, [r3, #8]
}
 800766e:	46c0      	nop			@ (mov r8, r8)
 8007670:	46bd      	mov	sp, r7
 8007672:	b002      	add	sp, #8
 8007674:	bd80      	pop	{r7, pc}
 8007676:	46c0      	nop			@ (mov r8, r8)
 8007678:	7fffffe8 	.word	0x7fffffe8

0800767c <LL_ADC_IsCalibrationOnGoing>:
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	0fdb      	lsrs	r3, r3, #31
 800768a:	07da      	lsls	r2, r3, #31
 800768c:	2380      	movs	r3, #128	@ 0x80
 800768e:	061b      	lsls	r3, r3, #24
 8007690:	429a      	cmp	r2, r3
 8007692:	d101      	bne.n	8007698 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007694:	2301      	movs	r3, #1
 8007696:	e000      	b.n	800769a <LL_ADC_IsCalibrationOnGoing+0x1e>
 8007698:	2300      	movs	r3, #0
}
 800769a:	0018      	movs	r0, r3
 800769c:	46bd      	mov	sp, r7
 800769e:	b002      	add	sp, #8
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80076a4:	b590      	push	{r4, r7, lr}
 80076a6:	b08b      	sub	sp, #44	@ 0x2c
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80076ac:	2300      	movs	r3, #0
 80076ae:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80076b0:	2300      	movs	r3, #0
 80076b2:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2254      	movs	r2, #84	@ 0x54
 80076b8:	5c9b      	ldrb	r3, [r3, r2]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d101      	bne.n	80076c2 <HAL_ADCEx_Calibration_Start+0x1e>
 80076be:	2302      	movs	r3, #2
 80076c0:	e0dd      	b.n	800787e <HAL_ADCEx_Calibration_Start+0x1da>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2254      	movs	r2, #84	@ 0x54
 80076c6:	2101      	movs	r1, #1
 80076c8:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80076ca:	231f      	movs	r3, #31
 80076cc:	18fc      	adds	r4, r7, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	0018      	movs	r0, r3
 80076d2:	f7ff fe5f 	bl	8007394 <ADC_Disable>
 80076d6:	0003      	movs	r3, r0
 80076d8:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	0018      	movs	r0, r3
 80076e0:	f7ff ffa6 	bl	8007630 <LL_ADC_IsEnabled>
 80076e4:	1e03      	subs	r3, r0, #0
 80076e6:	d000      	beq.n	80076ea <HAL_ADCEx_Calibration_Start+0x46>
 80076e8:	e0bc      	b.n	8007864 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ee:	4a66      	ldr	r2, [pc, #408]	@ (8007888 <HAL_ADCEx_Calibration_Start+0x1e4>)
 80076f0:	4013      	ands	r3, r2
 80076f2:	2202      	movs	r2, #2
 80076f4:	431a      	orrs	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	4a62      	ldr	r2, [pc, #392]	@ (800788c <HAL_ADCEx_Calibration_Start+0x1e8>)
 8007702:	4013      	ands	r3, r2
 8007704:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68da      	ldr	r2, [r3, #12]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	495f      	ldr	r1, [pc, #380]	@ (8007890 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8007712:	400a      	ands	r2, r1
 8007714:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8007716:	2300      	movs	r3, #0
 8007718:	627b      	str	r3, [r7, #36]	@ 0x24
 800771a:	e02d      	b.n	8007778 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	0018      	movs	r0, r3
 8007722:	f7ff ff97 	bl	8007654 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007726:	e014      	b.n	8007752 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	3301      	adds	r3, #1
 800772c:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	4a58      	ldr	r2, [pc, #352]	@ (8007894 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d90d      	bls.n	8007752 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800773a:	2212      	movs	r2, #18
 800773c:	4393      	bics	r3, r2
 800773e:	2210      	movs	r2, #16
 8007740:	431a      	orrs	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2254      	movs	r2, #84	@ 0x54
 800774a:	2100      	movs	r1, #0
 800774c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e095      	b.n	800787e <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	0018      	movs	r0, r3
 8007758:	f7ff ff90 	bl	800767c <LL_ADC_IsCalibrationOnGoing>
 800775c:	1e03      	subs	r3, r0, #0
 800775e:	d1e3      	bne.n	8007728 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	0018      	movs	r0, r3
 8007766:	f7ff ff32 	bl	80075ce <LL_ADC_GetCalibrationFactor>
 800776a:	0002      	movs	r2, r0
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	189b      	adds	r3, r3, r2
 8007770:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8007772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007774:	3301      	adds	r3, #1
 8007776:	627b      	str	r3, [r7, #36]	@ 0x24
 8007778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777a:	2b07      	cmp	r3, #7
 800777c:	d9ce      	bls.n	800771c <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800777e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007780:	6a38      	ldr	r0, [r7, #32]
 8007782:	f7f8 fcbf 	bl	8000104 <__udivsi3>
 8007786:	0003      	movs	r3, r0
 8007788:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	0018      	movs	r0, r3
 8007790:	f7ff ff2a 	bl	80075e8 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	0018      	movs	r0, r3
 800779a:	f7ff fef8 	bl	800758e <LL_ADC_GetClock>
 800779e:	1e03      	subs	r3, r0, #0
 80077a0:	d11b      	bne.n	80077da <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80077a2:	4b3d      	ldr	r3, [pc, #244]	@ (8007898 <HAL_ADCEx_Calibration_Start+0x1f4>)
 80077a4:	0018      	movs	r0, r3
 80077a6:	f7ff fee5 	bl	8007574 <LL_ADC_GetCommonClock>
 80077aa:	0003      	movs	r3, r0
 80077ac:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	23e0      	movs	r3, #224	@ 0xe0
 80077b2:	035b      	lsls	r3, r3, #13
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d310      	bcc.n	80077da <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	0c9b      	lsrs	r3, r3, #18
 80077bc:	3b03      	subs	r3, #3
 80077be:	2201      	movs	r2, #1
 80077c0:	409a      	lsls	r2, r3
 80077c2:	0013      	movs	r3, r2
 80077c4:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	085b      	lsrs	r3, r3, #1
 80077ca:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 80077cc:	e002      	b.n	80077d4 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	3b01      	subs	r3, #1
 80077d2:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1f9      	bne.n	80077ce <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6a3a      	ldr	r2, [r7, #32]
 80077e0:	0011      	movs	r1, r2
 80077e2:	0018      	movs	r0, r3
 80077e4:	f7ff fedf 	bl	80075a6 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	0018      	movs	r0, r3
 80077ee:	f7ff ff0d 	bl	800760c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80077f2:	f7fe fe37 	bl	8006464 <HAL_GetTick>
 80077f6:	0003      	movs	r3, r0
 80077f8:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80077fa:	e01b      	b.n	8007834 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80077fc:	f7fe fe32 	bl	8006464 <HAL_GetTick>
 8007800:	0002      	movs	r2, r0
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	2b02      	cmp	r3, #2
 8007808:	d914      	bls.n	8007834 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	0018      	movs	r0, r3
 8007810:	f7ff ff0e 	bl	8007630 <LL_ADC_IsEnabled>
 8007814:	1e03      	subs	r3, r0, #0
 8007816:	d00d      	beq.n	8007834 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800781c:	2210      	movs	r2, #16
 800781e:	431a      	orrs	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007828:	2201      	movs	r2, #1
 800782a:	431a      	orrs	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e024      	b.n	800787e <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	0018      	movs	r0, r3
 800783a:	f7ff fef9 	bl	8007630 <LL_ADC_IsEnabled>
 800783e:	1e03      	subs	r3, r0, #0
 8007840:	d1dc      	bne.n	80077fc <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68d9      	ldr	r1, [r3, #12]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	69ba      	ldr	r2, [r7, #24]
 800784e:	430a      	orrs	r2, r1
 8007850:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007856:	2203      	movs	r2, #3
 8007858:	4393      	bics	r3, r2
 800785a:	2201      	movs	r2, #1
 800785c:	431a      	orrs	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	659a      	str	r2, [r3, #88]	@ 0x58
 8007862:	e005      	b.n	8007870 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007868:	2210      	movs	r2, #16
 800786a:	431a      	orrs	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2254      	movs	r2, #84	@ 0x54
 8007874:	2100      	movs	r1, #0
 8007876:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8007878:	231f      	movs	r3, #31
 800787a:	18fb      	adds	r3, r7, r3
 800787c:	781b      	ldrb	r3, [r3, #0]
}
 800787e:	0018      	movs	r0, r3
 8007880:	46bd      	mov	sp, r7
 8007882:	b00b      	add	sp, #44	@ 0x2c
 8007884:	bd90      	pop	{r4, r7, pc}
 8007886:	46c0      	nop			@ (mov r8, r8)
 8007888:	fffffefd 	.word	0xfffffefd
 800788c:	00008003 	.word	0x00008003
 8007890:	ffff7ffc 	.word	0xffff7ffc
 8007894:	0002f1ff 	.word	0x0002f1ff
 8007898:	40012708 	.word	0x40012708

0800789c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80078a4:	46c0      	nop			@ (mov r8, r8)
 80078a6:	46bd      	mov	sp, r7
 80078a8:	b002      	add	sp, #8
 80078aa:	bd80      	pop	{r7, pc}

080078ac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80078b4:	46c0      	nop			@ (mov r8, r8)
 80078b6:	46bd      	mov	sp, r7
 80078b8:	b002      	add	sp, #8
 80078ba:	bd80      	pop	{r7, pc}

080078bc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80078c4:	46c0      	nop			@ (mov r8, r8)
 80078c6:	46bd      	mov	sp, r7
 80078c8:	b002      	add	sp, #8
 80078ca:	bd80      	pop	{r7, pc}

080078cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	0002      	movs	r2, r0
 80078d4:	1dfb      	adds	r3, r7, #7
 80078d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80078d8:	1dfb      	adds	r3, r7, #7
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80078de:	d809      	bhi.n	80078f4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078e0:	1dfb      	adds	r3, r7, #7
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	001a      	movs	r2, r3
 80078e6:	231f      	movs	r3, #31
 80078e8:	401a      	ands	r2, r3
 80078ea:	4b04      	ldr	r3, [pc, #16]	@ (80078fc <__NVIC_EnableIRQ+0x30>)
 80078ec:	2101      	movs	r1, #1
 80078ee:	4091      	lsls	r1, r2
 80078f0:	000a      	movs	r2, r1
 80078f2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80078f4:	46c0      	nop			@ (mov r8, r8)
 80078f6:	46bd      	mov	sp, r7
 80078f8:	b002      	add	sp, #8
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	e000e100 	.word	0xe000e100

08007900 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	0002      	movs	r2, r0
 8007908:	1dfb      	adds	r3, r7, #7
 800790a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800790c:	1dfb      	adds	r3, r7, #7
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	2b7f      	cmp	r3, #127	@ 0x7f
 8007912:	d810      	bhi.n	8007936 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007914:	1dfb      	adds	r3, r7, #7
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	001a      	movs	r2, r3
 800791a:	231f      	movs	r3, #31
 800791c:	4013      	ands	r3, r2
 800791e:	4908      	ldr	r1, [pc, #32]	@ (8007940 <__NVIC_DisableIRQ+0x40>)
 8007920:	2201      	movs	r2, #1
 8007922:	409a      	lsls	r2, r3
 8007924:	0013      	movs	r3, r2
 8007926:	2280      	movs	r2, #128	@ 0x80
 8007928:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800792a:	f3bf 8f4f 	dsb	sy
}
 800792e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8007930:	f3bf 8f6f 	isb	sy
}
 8007934:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8007936:	46c0      	nop			@ (mov r8, r8)
 8007938:	46bd      	mov	sp, r7
 800793a:	b002      	add	sp, #8
 800793c:	bd80      	pop	{r7, pc}
 800793e:	46c0      	nop			@ (mov r8, r8)
 8007940:	e000e100 	.word	0xe000e100

08007944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007944:	b590      	push	{r4, r7, lr}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	0002      	movs	r2, r0
 800794c:	6039      	str	r1, [r7, #0]
 800794e:	1dfb      	adds	r3, r7, #7
 8007950:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007952:	1dfb      	adds	r3, r7, #7
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	2b7f      	cmp	r3, #127	@ 0x7f
 8007958:	d828      	bhi.n	80079ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800795a:	4a2f      	ldr	r2, [pc, #188]	@ (8007a18 <__NVIC_SetPriority+0xd4>)
 800795c:	1dfb      	adds	r3, r7, #7
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	b25b      	sxtb	r3, r3
 8007962:	089b      	lsrs	r3, r3, #2
 8007964:	33c0      	adds	r3, #192	@ 0xc0
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	589b      	ldr	r3, [r3, r2]
 800796a:	1dfa      	adds	r2, r7, #7
 800796c:	7812      	ldrb	r2, [r2, #0]
 800796e:	0011      	movs	r1, r2
 8007970:	2203      	movs	r2, #3
 8007972:	400a      	ands	r2, r1
 8007974:	00d2      	lsls	r2, r2, #3
 8007976:	21ff      	movs	r1, #255	@ 0xff
 8007978:	4091      	lsls	r1, r2
 800797a:	000a      	movs	r2, r1
 800797c:	43d2      	mvns	r2, r2
 800797e:	401a      	ands	r2, r3
 8007980:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	019b      	lsls	r3, r3, #6
 8007986:	22ff      	movs	r2, #255	@ 0xff
 8007988:	401a      	ands	r2, r3
 800798a:	1dfb      	adds	r3, r7, #7
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	0018      	movs	r0, r3
 8007990:	2303      	movs	r3, #3
 8007992:	4003      	ands	r3, r0
 8007994:	00db      	lsls	r3, r3, #3
 8007996:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007998:	481f      	ldr	r0, [pc, #124]	@ (8007a18 <__NVIC_SetPriority+0xd4>)
 800799a:	1dfb      	adds	r3, r7, #7
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	b25b      	sxtb	r3, r3
 80079a0:	089b      	lsrs	r3, r3, #2
 80079a2:	430a      	orrs	r2, r1
 80079a4:	33c0      	adds	r3, #192	@ 0xc0
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80079aa:	e031      	b.n	8007a10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80079ac:	4a1b      	ldr	r2, [pc, #108]	@ (8007a1c <__NVIC_SetPriority+0xd8>)
 80079ae:	1dfb      	adds	r3, r7, #7
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	0019      	movs	r1, r3
 80079b4:	230f      	movs	r3, #15
 80079b6:	400b      	ands	r3, r1
 80079b8:	3b08      	subs	r3, #8
 80079ba:	089b      	lsrs	r3, r3, #2
 80079bc:	3306      	adds	r3, #6
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	18d3      	adds	r3, r2, r3
 80079c2:	3304      	adds	r3, #4
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	1dfa      	adds	r2, r7, #7
 80079c8:	7812      	ldrb	r2, [r2, #0]
 80079ca:	0011      	movs	r1, r2
 80079cc:	2203      	movs	r2, #3
 80079ce:	400a      	ands	r2, r1
 80079d0:	00d2      	lsls	r2, r2, #3
 80079d2:	21ff      	movs	r1, #255	@ 0xff
 80079d4:	4091      	lsls	r1, r2
 80079d6:	000a      	movs	r2, r1
 80079d8:	43d2      	mvns	r2, r2
 80079da:	401a      	ands	r2, r3
 80079dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	019b      	lsls	r3, r3, #6
 80079e2:	22ff      	movs	r2, #255	@ 0xff
 80079e4:	401a      	ands	r2, r3
 80079e6:	1dfb      	adds	r3, r7, #7
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	0018      	movs	r0, r3
 80079ec:	2303      	movs	r3, #3
 80079ee:	4003      	ands	r3, r0
 80079f0:	00db      	lsls	r3, r3, #3
 80079f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80079f4:	4809      	ldr	r0, [pc, #36]	@ (8007a1c <__NVIC_SetPriority+0xd8>)
 80079f6:	1dfb      	adds	r3, r7, #7
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	001c      	movs	r4, r3
 80079fc:	230f      	movs	r3, #15
 80079fe:	4023      	ands	r3, r4
 8007a00:	3b08      	subs	r3, #8
 8007a02:	089b      	lsrs	r3, r3, #2
 8007a04:	430a      	orrs	r2, r1
 8007a06:	3306      	adds	r3, #6
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	18c3      	adds	r3, r0, r3
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	601a      	str	r2, [r3, #0]
}
 8007a10:	46c0      	nop			@ (mov r8, r8)
 8007a12:	46bd      	mov	sp, r7
 8007a14:	b003      	add	sp, #12
 8007a16:	bd90      	pop	{r4, r7, pc}
 8007a18:	e000e100 	.word	0xe000e100
 8007a1c:	e000ed00 	.word	0xe000ed00

08007a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	1e5a      	subs	r2, r3, #1
 8007a2c:	2380      	movs	r3, #128	@ 0x80
 8007a2e:	045b      	lsls	r3, r3, #17
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d301      	bcc.n	8007a38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007a34:	2301      	movs	r3, #1
 8007a36:	e010      	b.n	8007a5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a38:	4b0a      	ldr	r3, [pc, #40]	@ (8007a64 <SysTick_Config+0x44>)
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	3a01      	subs	r2, #1
 8007a3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007a40:	2301      	movs	r3, #1
 8007a42:	425b      	negs	r3, r3
 8007a44:	2103      	movs	r1, #3
 8007a46:	0018      	movs	r0, r3
 8007a48:	f7ff ff7c 	bl	8007944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a4c:	4b05      	ldr	r3, [pc, #20]	@ (8007a64 <SysTick_Config+0x44>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a52:	4b04      	ldr	r3, [pc, #16]	@ (8007a64 <SysTick_Config+0x44>)
 8007a54:	2207      	movs	r2, #7
 8007a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	0018      	movs	r0, r3
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	b002      	add	sp, #8
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	46c0      	nop			@ (mov r8, r8)
 8007a64:	e000e010 	.word	0xe000e010

08007a68 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60b9      	str	r1, [r7, #8]
 8007a70:	607a      	str	r2, [r7, #4]
 8007a72:	210f      	movs	r1, #15
 8007a74:	187b      	adds	r3, r7, r1
 8007a76:	1c02      	adds	r2, r0, #0
 8007a78:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	187b      	adds	r3, r7, r1
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	b25b      	sxtb	r3, r3
 8007a82:	0011      	movs	r1, r2
 8007a84:	0018      	movs	r0, r3
 8007a86:	f7ff ff5d 	bl	8007944 <__NVIC_SetPriority>
}
 8007a8a:	46c0      	nop			@ (mov r8, r8)
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	b004      	add	sp, #16
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b082      	sub	sp, #8
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	0002      	movs	r2, r0
 8007a9a:	1dfb      	adds	r3, r7, #7
 8007a9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a9e:	1dfb      	adds	r3, r7, #7
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	b25b      	sxtb	r3, r3
 8007aa4:	0018      	movs	r0, r3
 8007aa6:	f7ff ff11 	bl	80078cc <__NVIC_EnableIRQ>
}
 8007aaa:	46c0      	nop			@ (mov r8, r8)
 8007aac:	46bd      	mov	sp, r7
 8007aae:	b002      	add	sp, #8
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b082      	sub	sp, #8
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	0002      	movs	r2, r0
 8007aba:	1dfb      	adds	r3, r7, #7
 8007abc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007abe:	1dfb      	adds	r3, r7, #7
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	b25b      	sxtb	r3, r3
 8007ac4:	0018      	movs	r0, r3
 8007ac6:	f7ff ff1b 	bl	8007900 <__NVIC_DisableIRQ>
}
 8007aca:	46c0      	nop			@ (mov r8, r8)
 8007acc:	46bd      	mov	sp, r7
 8007ace:	b002      	add	sp, #8
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b082      	sub	sp, #8
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	0018      	movs	r0, r3
 8007ade:	f7ff ff9f 	bl	8007a20 <SysTick_Config>
 8007ae2:	0003      	movs	r3, r0
}
 8007ae4:	0018      	movs	r0, r3
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	b002      	add	sp, #8
 8007aea:	bd80      	pop	{r7, pc}

08007aec <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e077      	b.n	8007bee <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a3d      	ldr	r2, [pc, #244]	@ (8007bf8 <HAL_DMA_Init+0x10c>)
 8007b04:	4694      	mov	ip, r2
 8007b06:	4463      	add	r3, ip
 8007b08:	2114      	movs	r1, #20
 8007b0a:	0018      	movs	r0, r3
 8007b0c:	f7f8 fafa 	bl	8000104 <__udivsi3>
 8007b10:	0003      	movs	r3, r0
 8007b12:	009a      	lsls	r2, r3, #2
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2225      	movs	r2, #37	@ 0x25
 8007b1c:	2102      	movs	r1, #2
 8007b1e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4934      	ldr	r1, [pc, #208]	@ (8007bfc <HAL_DMA_Init+0x110>)
 8007b2c:	400a      	ands	r2, r1
 8007b2e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6819      	ldr	r1, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	689a      	ldr	r2, [r3, #8]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	431a      	orrs	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	431a      	orrs	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	69db      	ldr	r3, [r3, #28]
 8007b56:	431a      	orrs	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a1b      	ldr	r3, [r3, #32]
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	0018      	movs	r0, r3
 8007b6a:	f000 fa8d 	bl	8008088 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	689a      	ldr	r2, [r3, #8]
 8007b72:	2380      	movs	r3, #128	@ 0x80
 8007b74:	01db      	lsls	r3, r3, #7
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d102      	bne.n	8007b80 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b88:	213f      	movs	r1, #63	@ 0x3f
 8007b8a:	400a      	ands	r2, r1
 8007b8c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007b96:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d011      	beq.n	8007bc4 <HAL_DMA_Init+0xd8>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	2b04      	cmp	r3, #4
 8007ba6:	d80d      	bhi.n	8007bc4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	0018      	movs	r0, r3
 8007bac:	f000 fa98 	bl	80080e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007bc0:	605a      	str	r2, [r3, #4]
 8007bc2:	e008      	b.n	8007bd6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2225      	movs	r2, #37	@ 0x25
 8007be0:	2101      	movs	r1, #1
 8007be2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2224      	movs	r2, #36	@ 0x24
 8007be8:	2100      	movs	r1, #0
 8007bea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	0018      	movs	r0, r3
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	b002      	add	sp, #8
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	46c0      	nop			@ (mov r8, r8)
 8007bf8:	bffdfff8 	.word	0xbffdfff8
 8007bfc:	ffff800f 	.word	0xffff800f

08007c00 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
 8007c0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c0e:	2317      	movs	r3, #23
 8007c10:	18fb      	adds	r3, r7, r3
 8007c12:	2200      	movs	r2, #0
 8007c14:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2224      	movs	r2, #36	@ 0x24
 8007c1a:	5c9b      	ldrb	r3, [r3, r2]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d101      	bne.n	8007c24 <HAL_DMA_Start_IT+0x24>
 8007c20:	2302      	movs	r3, #2
 8007c22:	e06f      	b.n	8007d04 <HAL_DMA_Start_IT+0x104>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2224      	movs	r2, #36	@ 0x24
 8007c28:	2101      	movs	r1, #1
 8007c2a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2225      	movs	r2, #37	@ 0x25
 8007c30:	5c9b      	ldrb	r3, [r3, r2]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d157      	bne.n	8007ce8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2225      	movs	r2, #37	@ 0x25
 8007c3c:	2102      	movs	r1, #2
 8007c3e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2101      	movs	r1, #1
 8007c52:	438a      	bics	r2, r1
 8007c54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	68b9      	ldr	r1, [r7, #8]
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f000 f9d3 	bl	8008008 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d008      	beq.n	8007c7c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	210e      	movs	r1, #14
 8007c76:	430a      	orrs	r2, r1
 8007c78:	601a      	str	r2, [r3, #0]
 8007c7a:	e00f      	b.n	8007c9c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2104      	movs	r1, #4
 8007c88:	438a      	bics	r2, r1
 8007c8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	210a      	movs	r1, #10
 8007c98:	430a      	orrs	r2, r1
 8007c9a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	2380      	movs	r3, #128	@ 0x80
 8007ca4:	025b      	lsls	r3, r3, #9
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	d008      	beq.n	8007cbc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb4:	2180      	movs	r1, #128	@ 0x80
 8007cb6:	0049      	lsls	r1, r1, #1
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d008      	beq.n	8007cd6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cce:	2180      	movs	r1, #128	@ 0x80
 8007cd0:	0049      	lsls	r1, r1, #1
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	601a      	str	r2, [r3, #0]
 8007ce6:	e00a      	b.n	8007cfe <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2280      	movs	r2, #128	@ 0x80
 8007cec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2224      	movs	r2, #36	@ 0x24
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8007cf6:	2317      	movs	r3, #23
 8007cf8:	18fb      	adds	r3, r7, r3
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007cfe:	2317      	movs	r3, #23
 8007d00:	18fb      	adds	r3, r7, r3
 8007d02:	781b      	ldrb	r3, [r3, #0]
}
 8007d04:	0018      	movs	r0, r3
 8007d06:	46bd      	mov	sp, r7
 8007d08:	b006      	add	sp, #24
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e050      	b.n	8007dc0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2225      	movs	r2, #37	@ 0x25
 8007d22:	5c9b      	ldrb	r3, [r3, r2]
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d008      	beq.n	8007d3c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2204      	movs	r2, #4
 8007d2e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2224      	movs	r2, #36	@ 0x24
 8007d34:	2100      	movs	r1, #0
 8007d36:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e041      	b.n	8007dc0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	210e      	movs	r1, #14
 8007d48:	438a      	bics	r2, r1
 8007d4a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d56:	491c      	ldr	r1, [pc, #112]	@ (8007dc8 <HAL_DMA_Abort+0xbc>)
 8007d58:	400a      	ands	r2, r1
 8007d5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2101      	movs	r1, #1
 8007d68:	438a      	bics	r2, r1
 8007d6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8007d6c:	4b17      	ldr	r3, [pc, #92]	@ (8007dcc <HAL_DMA_Abort+0xc0>)
 8007d6e:	6859      	ldr	r1, [r3, #4]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d74:	221c      	movs	r2, #28
 8007d76:	4013      	ands	r3, r2
 8007d78:	2201      	movs	r2, #1
 8007d7a:	409a      	lsls	r2, r3
 8007d7c:	4b13      	ldr	r3, [pc, #76]	@ (8007dcc <HAL_DMA_Abort+0xc0>)
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007d8a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00c      	beq.n	8007dae <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d9e:	490a      	ldr	r1, [pc, #40]	@ (8007dc8 <HAL_DMA_Abort+0xbc>)
 8007da0:	400a      	ands	r2, r1
 8007da2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007dac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2225      	movs	r2, #37	@ 0x25
 8007db2:	2101      	movs	r1, #1
 8007db4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2224      	movs	r2, #36	@ 0x24
 8007dba:	2100      	movs	r1, #0
 8007dbc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	0018      	movs	r0, r3
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	b002      	add	sp, #8
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	fffffeff 	.word	0xfffffeff
 8007dcc:	40020000 	.word	0x40020000

08007dd0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dd8:	210f      	movs	r1, #15
 8007dda:	187b      	adds	r3, r7, r1
 8007ddc:	2200      	movs	r2, #0
 8007dde:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2225      	movs	r2, #37	@ 0x25
 8007de4:	5c9b      	ldrb	r3, [r3, r2]
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d006      	beq.n	8007dfa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2204      	movs	r2, #4
 8007df0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007df2:	187b      	adds	r3, r7, r1
 8007df4:	2201      	movs	r2, #1
 8007df6:	701a      	strb	r2, [r3, #0]
 8007df8:	e049      	b.n	8007e8e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	210e      	movs	r1, #14
 8007e06:	438a      	bics	r2, r1
 8007e08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2101      	movs	r1, #1
 8007e16:	438a      	bics	r2, r1
 8007e18:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e24:	491d      	ldr	r1, [pc, #116]	@ (8007e9c <HAL_DMA_Abort_IT+0xcc>)
 8007e26:	400a      	ands	r2, r1
 8007e28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8007e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8007ea0 <HAL_DMA_Abort_IT+0xd0>)
 8007e2c:	6859      	ldr	r1, [r3, #4]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e32:	221c      	movs	r2, #28
 8007e34:	4013      	ands	r3, r2
 8007e36:	2201      	movs	r2, #1
 8007e38:	409a      	lsls	r2, r3
 8007e3a:	4b19      	ldr	r3, [pc, #100]	@ (8007ea0 <HAL_DMA_Abort_IT+0xd0>)
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007e48:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00c      	beq.n	8007e6c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e5c:	490f      	ldr	r1, [pc, #60]	@ (8007e9c <HAL_DMA_Abort_IT+0xcc>)
 8007e5e:	400a      	ands	r2, r1
 8007e60:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007e6a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2225      	movs	r2, #37	@ 0x25
 8007e70:	2101      	movs	r1, #1
 8007e72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2224      	movs	r2, #36	@ 0x24
 8007e78:	2100      	movs	r1, #0
 8007e7a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d004      	beq.n	8007e8e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	0010      	movs	r0, r2
 8007e8c:	4798      	blx	r3
    }
  }
  return status;
 8007e8e:	230f      	movs	r3, #15
 8007e90:	18fb      	adds	r3, r7, r3
 8007e92:	781b      	ldrb	r3, [r3, #0]
}
 8007e94:	0018      	movs	r0, r3
 8007e96:	46bd      	mov	sp, r7
 8007e98:	b004      	add	sp, #16
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	fffffeff 	.word	0xfffffeff
 8007ea0:	40020000 	.word	0x40020000

08007ea4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8007eac:	4b55      	ldr	r3, [pc, #340]	@ (8008004 <HAL_DMA_IRQHandler+0x160>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ebe:	221c      	movs	r2, #28
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	2204      	movs	r2, #4
 8007ec4:	409a      	lsls	r2, r3
 8007ec6:	0013      	movs	r3, r2
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	4013      	ands	r3, r2
 8007ecc:	d027      	beq.n	8007f1e <HAL_DMA_IRQHandler+0x7a>
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2204      	movs	r2, #4
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	d023      	beq.n	8007f1e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2220      	movs	r2, #32
 8007ede:	4013      	ands	r3, r2
 8007ee0:	d107      	bne.n	8007ef2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2104      	movs	r1, #4
 8007eee:	438a      	bics	r2, r1
 8007ef0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8007ef2:	4b44      	ldr	r3, [pc, #272]	@ (8008004 <HAL_DMA_IRQHandler+0x160>)
 8007ef4:	6859      	ldr	r1, [r3, #4]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007efa:	221c      	movs	r2, #28
 8007efc:	4013      	ands	r3, r2
 8007efe:	2204      	movs	r2, #4
 8007f00:	409a      	lsls	r2, r3
 8007f02:	4b40      	ldr	r3, [pc, #256]	@ (8008004 <HAL_DMA_IRQHandler+0x160>)
 8007f04:	430a      	orrs	r2, r1
 8007f06:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d100      	bne.n	8007f12 <HAL_DMA_IRQHandler+0x6e>
 8007f10:	e073      	b.n	8007ffa <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	0010      	movs	r0, r2
 8007f1a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8007f1c:	e06d      	b.n	8007ffa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f22:	221c      	movs	r2, #28
 8007f24:	4013      	ands	r3, r2
 8007f26:	2202      	movs	r2, #2
 8007f28:	409a      	lsls	r2, r3
 8007f2a:	0013      	movs	r3, r2
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	4013      	ands	r3, r2
 8007f30:	d02e      	beq.n	8007f90 <HAL_DMA_IRQHandler+0xec>
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	2202      	movs	r2, #2
 8007f36:	4013      	ands	r3, r2
 8007f38:	d02a      	beq.n	8007f90 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2220      	movs	r2, #32
 8007f42:	4013      	ands	r3, r2
 8007f44:	d10b      	bne.n	8007f5e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	210a      	movs	r1, #10
 8007f52:	438a      	bics	r2, r1
 8007f54:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2225      	movs	r2, #37	@ 0x25
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8007f5e:	4b29      	ldr	r3, [pc, #164]	@ (8008004 <HAL_DMA_IRQHandler+0x160>)
 8007f60:	6859      	ldr	r1, [r3, #4]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f66:	221c      	movs	r2, #28
 8007f68:	4013      	ands	r3, r2
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	409a      	lsls	r2, r3
 8007f6e:	4b25      	ldr	r3, [pc, #148]	@ (8008004 <HAL_DMA_IRQHandler+0x160>)
 8007f70:	430a      	orrs	r2, r1
 8007f72:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2224      	movs	r2, #36	@ 0x24
 8007f78:	2100      	movs	r1, #0
 8007f7a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d03a      	beq.n	8007ffa <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	0010      	movs	r0, r2
 8007f8c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8007f8e:	e034      	b.n	8007ffa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f94:	221c      	movs	r2, #28
 8007f96:	4013      	ands	r3, r2
 8007f98:	2208      	movs	r2, #8
 8007f9a:	409a      	lsls	r2, r3
 8007f9c:	0013      	movs	r3, r2
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	d02b      	beq.n	8007ffc <HAL_DMA_IRQHandler+0x158>
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	2208      	movs	r2, #8
 8007fa8:	4013      	ands	r3, r2
 8007faa:	d027      	beq.n	8007ffc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	210e      	movs	r1, #14
 8007fb8:	438a      	bics	r2, r1
 8007fba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007fbc:	4b11      	ldr	r3, [pc, #68]	@ (8008004 <HAL_DMA_IRQHandler+0x160>)
 8007fbe:	6859      	ldr	r1, [r3, #4]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc4:	221c      	movs	r2, #28
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	2201      	movs	r2, #1
 8007fca:	409a      	lsls	r2, r3
 8007fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8008004 <HAL_DMA_IRQHandler+0x160>)
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2225      	movs	r2, #37	@ 0x25
 8007fdc:	2101      	movs	r1, #1
 8007fde:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2224      	movs	r2, #36	@ 0x24
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d005      	beq.n	8007ffc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	0010      	movs	r0, r2
 8007ff8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007ffa:	46c0      	nop			@ (mov r8, r8)
 8007ffc:	46c0      	nop			@ (mov r8, r8)
}
 8007ffe:	46bd      	mov	sp, r7
 8008000:	b004      	add	sp, #16
 8008002:	bd80      	pop	{r7, pc}
 8008004:	40020000 	.word	0x40020000

08008008 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
 8008014:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800801e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008024:	2b00      	cmp	r3, #0
 8008026:	d004      	beq.n	8008032 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008030:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8008032:	4b14      	ldr	r3, [pc, #80]	@ (8008084 <DMA_SetConfig+0x7c>)
 8008034:	6859      	ldr	r1, [r3, #4]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800803a:	221c      	movs	r2, #28
 800803c:	4013      	ands	r3, r2
 800803e:	2201      	movs	r2, #1
 8008040:	409a      	lsls	r2, r3
 8008042:	4b10      	ldr	r3, [pc, #64]	@ (8008084 <DMA_SetConfig+0x7c>)
 8008044:	430a      	orrs	r2, r1
 8008046:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	2b10      	cmp	r3, #16
 8008056:	d108      	bne.n	800806a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008068:	e007      	b.n	800807a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	60da      	str	r2, [r3, #12]
}
 800807a:	46c0      	nop			@ (mov r8, r8)
 800807c:	46bd      	mov	sp, r7
 800807e:	b004      	add	sp, #16
 8008080:	bd80      	pop	{r7, pc}
 8008082:	46c0      	nop			@ (mov r8, r8)
 8008084:	40020000 	.word	0x40020000

08008088 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008094:	089b      	lsrs	r3, r3, #2
 8008096:	4a10      	ldr	r2, [pc, #64]	@ (80080d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8008098:	4694      	mov	ip, r2
 800809a:	4463      	add	r3, ip
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	001a      	movs	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	001a      	movs	r2, r3
 80080aa:	23ff      	movs	r3, #255	@ 0xff
 80080ac:	4013      	ands	r3, r2
 80080ae:	3b08      	subs	r3, #8
 80080b0:	2114      	movs	r1, #20
 80080b2:	0018      	movs	r0, r3
 80080b4:	f7f8 f826 	bl	8000104 <__udivsi3>
 80080b8:	0003      	movs	r3, r0
 80080ba:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a07      	ldr	r2, [pc, #28]	@ (80080dc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80080c0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	221f      	movs	r2, #31
 80080c6:	4013      	ands	r3, r2
 80080c8:	2201      	movs	r2, #1
 80080ca:	409a      	lsls	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80080d0:	46c0      	nop			@ (mov r8, r8)
 80080d2:	46bd      	mov	sp, r7
 80080d4:	b004      	add	sp, #16
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	10008200 	.word	0x10008200
 80080dc:	40020880 	.word	0x40020880

080080e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	223f      	movs	r2, #63	@ 0x3f
 80080ee:	4013      	ands	r3, r2
 80080f0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	4a0a      	ldr	r2, [pc, #40]	@ (8008120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80080f6:	4694      	mov	ip, r2
 80080f8:	4463      	add	r3, ip
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	001a      	movs	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a07      	ldr	r2, [pc, #28]	@ (8008124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008106:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	3b01      	subs	r3, #1
 800810c:	2203      	movs	r2, #3
 800810e:	4013      	ands	r3, r2
 8008110:	2201      	movs	r2, #1
 8008112:	409a      	lsls	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8008118:	46c0      	nop			@ (mov r8, r8)
 800811a:	46bd      	mov	sp, r7
 800811c:	b004      	add	sp, #16
 800811e:	bd80      	pop	{r7, pc}
 8008120:	1000823f 	.word	0x1000823f
 8008124:	40020940 	.word	0x40020940

08008128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008132:	2300      	movs	r3, #0
 8008134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008136:	e147      	b.n	80083c8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2101      	movs	r1, #1
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	4091      	lsls	r1, r2
 8008142:	000a      	movs	r2, r1
 8008144:	4013      	ands	r3, r2
 8008146:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d100      	bne.n	8008150 <HAL_GPIO_Init+0x28>
 800814e:	e138      	b.n	80083c2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	2203      	movs	r2, #3
 8008156:	4013      	ands	r3, r2
 8008158:	2b01      	cmp	r3, #1
 800815a:	d005      	beq.n	8008168 <HAL_GPIO_Init+0x40>
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	2203      	movs	r2, #3
 8008162:	4013      	ands	r3, r2
 8008164:	2b02      	cmp	r3, #2
 8008166:	d130      	bne.n	80081ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	005b      	lsls	r3, r3, #1
 8008172:	2203      	movs	r2, #3
 8008174:	409a      	lsls	r2, r3
 8008176:	0013      	movs	r3, r2
 8008178:	43da      	mvns	r2, r3
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	4013      	ands	r3, r2
 800817e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	68da      	ldr	r2, [r3, #12]
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	409a      	lsls	r2, r3
 800818a:	0013      	movs	r3, r2
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	4313      	orrs	r3, r2
 8008190:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800819e:	2201      	movs	r2, #1
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	409a      	lsls	r2, r3
 80081a4:	0013      	movs	r3, r2
 80081a6:	43da      	mvns	r2, r3
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	4013      	ands	r3, r2
 80081ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	091b      	lsrs	r3, r3, #4
 80081b4:	2201      	movs	r2, #1
 80081b6:	401a      	ands	r2, r3
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	409a      	lsls	r2, r3
 80081bc:	0013      	movs	r3, r2
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	2203      	movs	r2, #3
 80081d0:	4013      	ands	r3, r2
 80081d2:	2b03      	cmp	r3, #3
 80081d4:	d017      	beq.n	8008206 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	005b      	lsls	r3, r3, #1
 80081e0:	2203      	movs	r2, #3
 80081e2:	409a      	lsls	r2, r3
 80081e4:	0013      	movs	r3, r2
 80081e6:	43da      	mvns	r2, r3
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	4013      	ands	r3, r2
 80081ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	689a      	ldr	r2, [r3, #8]
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	005b      	lsls	r3, r3, #1
 80081f6:	409a      	lsls	r2, r3
 80081f8:	0013      	movs	r3, r2
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	2203      	movs	r2, #3
 800820c:	4013      	ands	r3, r2
 800820e:	2b02      	cmp	r3, #2
 8008210:	d123      	bne.n	800825a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	08da      	lsrs	r2, r3, #3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	3208      	adds	r2, #8
 800821a:	0092      	lsls	r2, r2, #2
 800821c:	58d3      	ldr	r3, [r2, r3]
 800821e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	2207      	movs	r2, #7
 8008224:	4013      	ands	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	220f      	movs	r2, #15
 800822a:	409a      	lsls	r2, r3
 800822c:	0013      	movs	r3, r2
 800822e:	43da      	mvns	r2, r3
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	4013      	ands	r3, r2
 8008234:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	691a      	ldr	r2, [r3, #16]
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	2107      	movs	r1, #7
 800823e:	400b      	ands	r3, r1
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	409a      	lsls	r2, r3
 8008244:	0013      	movs	r3, r2
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	4313      	orrs	r3, r2
 800824a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	08da      	lsrs	r2, r3, #3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	3208      	adds	r2, #8
 8008254:	0092      	lsls	r2, r2, #2
 8008256:	6939      	ldr	r1, [r7, #16]
 8008258:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	005b      	lsls	r3, r3, #1
 8008264:	2203      	movs	r2, #3
 8008266:	409a      	lsls	r2, r3
 8008268:	0013      	movs	r3, r2
 800826a:	43da      	mvns	r2, r3
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	4013      	ands	r3, r2
 8008270:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	2203      	movs	r2, #3
 8008278:	401a      	ands	r2, r3
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	005b      	lsls	r3, r3, #1
 800827e:	409a      	lsls	r2, r3
 8008280:	0013      	movs	r3, r2
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	4313      	orrs	r3, r2
 8008286:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	685a      	ldr	r2, [r3, #4]
 8008292:	23c0      	movs	r3, #192	@ 0xc0
 8008294:	029b      	lsls	r3, r3, #10
 8008296:	4013      	ands	r3, r2
 8008298:	d100      	bne.n	800829c <HAL_GPIO_Init+0x174>
 800829a:	e092      	b.n	80083c2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800829c:	4a50      	ldr	r2, [pc, #320]	@ (80083e0 <HAL_GPIO_Init+0x2b8>)
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	089b      	lsrs	r3, r3, #2
 80082a2:	3318      	adds	r3, #24
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	589b      	ldr	r3, [r3, r2]
 80082a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	2203      	movs	r2, #3
 80082ae:	4013      	ands	r3, r2
 80082b0:	00db      	lsls	r3, r3, #3
 80082b2:	220f      	movs	r2, #15
 80082b4:	409a      	lsls	r2, r3
 80082b6:	0013      	movs	r3, r2
 80082b8:	43da      	mvns	r2, r3
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	4013      	ands	r3, r2
 80082be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	23a0      	movs	r3, #160	@ 0xa0
 80082c4:	05db      	lsls	r3, r3, #23
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d013      	beq.n	80082f2 <HAL_GPIO_Init+0x1ca>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a45      	ldr	r2, [pc, #276]	@ (80083e4 <HAL_GPIO_Init+0x2bc>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d00d      	beq.n	80082ee <HAL_GPIO_Init+0x1c6>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a44      	ldr	r2, [pc, #272]	@ (80083e8 <HAL_GPIO_Init+0x2c0>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d007      	beq.n	80082ea <HAL_GPIO_Init+0x1c2>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a43      	ldr	r2, [pc, #268]	@ (80083ec <HAL_GPIO_Init+0x2c4>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d101      	bne.n	80082e6 <HAL_GPIO_Init+0x1be>
 80082e2:	2303      	movs	r3, #3
 80082e4:	e006      	b.n	80082f4 <HAL_GPIO_Init+0x1cc>
 80082e6:	2305      	movs	r3, #5
 80082e8:	e004      	b.n	80082f4 <HAL_GPIO_Init+0x1cc>
 80082ea:	2302      	movs	r3, #2
 80082ec:	e002      	b.n	80082f4 <HAL_GPIO_Init+0x1cc>
 80082ee:	2301      	movs	r3, #1
 80082f0:	e000      	b.n	80082f4 <HAL_GPIO_Init+0x1cc>
 80082f2:	2300      	movs	r3, #0
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	2103      	movs	r1, #3
 80082f8:	400a      	ands	r2, r1
 80082fa:	00d2      	lsls	r2, r2, #3
 80082fc:	4093      	lsls	r3, r2
 80082fe:	693a      	ldr	r2, [r7, #16]
 8008300:	4313      	orrs	r3, r2
 8008302:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8008304:	4936      	ldr	r1, [pc, #216]	@ (80083e0 <HAL_GPIO_Init+0x2b8>)
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	089b      	lsrs	r3, r3, #2
 800830a:	3318      	adds	r3, #24
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008312:	4b33      	ldr	r3, [pc, #204]	@ (80083e0 <HAL_GPIO_Init+0x2b8>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	43da      	mvns	r2, r3
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	4013      	ands	r3, r2
 8008320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	2380      	movs	r3, #128	@ 0x80
 8008328:	035b      	lsls	r3, r3, #13
 800832a:	4013      	ands	r3, r2
 800832c:	d003      	beq.n	8008336 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	4313      	orrs	r3, r2
 8008334:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008336:	4b2a      	ldr	r3, [pc, #168]	@ (80083e0 <HAL_GPIO_Init+0x2b8>)
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800833c:	4b28      	ldr	r3, [pc, #160]	@ (80083e0 <HAL_GPIO_Init+0x2b8>)
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	43da      	mvns	r2, r3
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	4013      	ands	r3, r2
 800834a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	2380      	movs	r3, #128	@ 0x80
 8008352:	039b      	lsls	r3, r3, #14
 8008354:	4013      	ands	r3, r2
 8008356:	d003      	beq.n	8008360 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	4313      	orrs	r3, r2
 800835e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008360:	4b1f      	ldr	r3, [pc, #124]	@ (80083e0 <HAL_GPIO_Init+0x2b8>)
 8008362:	693a      	ldr	r2, [r7, #16]
 8008364:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008366:	4a1e      	ldr	r2, [pc, #120]	@ (80083e0 <HAL_GPIO_Init+0x2b8>)
 8008368:	2384      	movs	r3, #132	@ 0x84
 800836a:	58d3      	ldr	r3, [r2, r3]
 800836c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	43da      	mvns	r2, r3
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	4013      	ands	r3, r2
 8008376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	2380      	movs	r3, #128	@ 0x80
 800837e:	029b      	lsls	r3, r3, #10
 8008380:	4013      	ands	r3, r2
 8008382:	d003      	beq.n	800838c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8008384:	693a      	ldr	r2, [r7, #16]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	4313      	orrs	r3, r2
 800838a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800838c:	4914      	ldr	r1, [pc, #80]	@ (80083e0 <HAL_GPIO_Init+0x2b8>)
 800838e:	2284      	movs	r2, #132	@ 0x84
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8008394:	4a12      	ldr	r2, [pc, #72]	@ (80083e0 <HAL_GPIO_Init+0x2b8>)
 8008396:	2380      	movs	r3, #128	@ 0x80
 8008398:	58d3      	ldr	r3, [r2, r3]
 800839a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	43da      	mvns	r2, r3
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	4013      	ands	r3, r2
 80083a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	685a      	ldr	r2, [r3, #4]
 80083aa:	2380      	movs	r3, #128	@ 0x80
 80083ac:	025b      	lsls	r3, r3, #9
 80083ae:	4013      	ands	r3, r2
 80083b0:	d003      	beq.n	80083ba <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80083b2:	693a      	ldr	r2, [r7, #16]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80083ba:	4909      	ldr	r1, [pc, #36]	@ (80083e0 <HAL_GPIO_Init+0x2b8>)
 80083bc:	2280      	movs	r2, #128	@ 0x80
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	3301      	adds	r3, #1
 80083c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	40da      	lsrs	r2, r3
 80083d0:	1e13      	subs	r3, r2, #0
 80083d2:	d000      	beq.n	80083d6 <HAL_GPIO_Init+0x2ae>
 80083d4:	e6b0      	b.n	8008138 <HAL_GPIO_Init+0x10>
  }
}
 80083d6:	46c0      	nop			@ (mov r8, r8)
 80083d8:	46c0      	nop			@ (mov r8, r8)
 80083da:	46bd      	mov	sp, r7
 80083dc:	b006      	add	sp, #24
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	40021800 	.word	0x40021800
 80083e4:	50000400 	.word	0x50000400
 80083e8:	50000800 	.word	0x50000800
 80083ec:	50000c00 	.word	0x50000c00

080083f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	000a      	movs	r2, r1
 80083fa:	1cbb      	adds	r3, r7, #2
 80083fc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	1cba      	adds	r2, r7, #2
 8008404:	8812      	ldrh	r2, [r2, #0]
 8008406:	4013      	ands	r3, r2
 8008408:	d004      	beq.n	8008414 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800840a:	230f      	movs	r3, #15
 800840c:	18fb      	adds	r3, r7, r3
 800840e:	2201      	movs	r2, #1
 8008410:	701a      	strb	r2, [r3, #0]
 8008412:	e003      	b.n	800841c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008414:	230f      	movs	r3, #15
 8008416:	18fb      	adds	r3, r7, r3
 8008418:	2200      	movs	r2, #0
 800841a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800841c:	230f      	movs	r3, #15
 800841e:	18fb      	adds	r3, r7, r3
 8008420:	781b      	ldrb	r3, [r3, #0]
}
 8008422:	0018      	movs	r0, r3
 8008424:	46bd      	mov	sp, r7
 8008426:	b004      	add	sp, #16
 8008428:	bd80      	pop	{r7, pc}

0800842a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b082      	sub	sp, #8
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	0008      	movs	r0, r1
 8008434:	0011      	movs	r1, r2
 8008436:	1cbb      	adds	r3, r7, #2
 8008438:	1c02      	adds	r2, r0, #0
 800843a:	801a      	strh	r2, [r3, #0]
 800843c:	1c7b      	adds	r3, r7, #1
 800843e:	1c0a      	adds	r2, r1, #0
 8008440:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008442:	1c7b      	adds	r3, r7, #1
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d004      	beq.n	8008454 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800844a:	1cbb      	adds	r3, r7, #2
 800844c:	881a      	ldrh	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008452:	e003      	b.n	800845c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008454:	1cbb      	adds	r3, r7, #2
 8008456:	881a      	ldrh	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800845c:	46c0      	nop			@ (mov r8, r8)
 800845e:	46bd      	mov	sp, r7
 8008460:	b002      	add	sp, #8
 8008462:	bd80      	pop	{r7, pc}

08008464 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	0002      	movs	r2, r0
 800846c:	1dbb      	adds	r3, r7, #6
 800846e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8008470:	4b10      	ldr	r3, [pc, #64]	@ (80084b4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	1dba      	adds	r2, r7, #6
 8008476:	8812      	ldrh	r2, [r2, #0]
 8008478:	4013      	ands	r3, r2
 800847a:	d008      	beq.n	800848e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800847c:	4b0d      	ldr	r3, [pc, #52]	@ (80084b4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800847e:	1dba      	adds	r2, r7, #6
 8008480:	8812      	ldrh	r2, [r2, #0]
 8008482:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8008484:	1dbb      	adds	r3, r7, #6
 8008486:	881b      	ldrh	r3, [r3, #0]
 8008488:	0018      	movs	r0, r3
 800848a:	f7fb fb21 	bl	8003ad0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800848e:	4b09      	ldr	r3, [pc, #36]	@ (80084b4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	1dba      	adds	r2, r7, #6
 8008494:	8812      	ldrh	r2, [r2, #0]
 8008496:	4013      	ands	r3, r2
 8008498:	d008      	beq.n	80084ac <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800849a:	4b06      	ldr	r3, [pc, #24]	@ (80084b4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800849c:	1dba      	adds	r2, r7, #6
 800849e:	8812      	ldrh	r2, [r2, #0]
 80084a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80084a2:	1dbb      	adds	r3, r7, #6
 80084a4:	881b      	ldrh	r3, [r3, #0]
 80084a6:	0018      	movs	r0, r3
 80084a8:	f7fb fae8 	bl	8003a7c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80084ac:	46c0      	nop			@ (mov r8, r8)
 80084ae:	46bd      	mov	sp, r7
 80084b0:	b002      	add	sp, #8
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	40021800 	.word	0x40021800

080084b8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e097      	b.n	80085fa <HAL_LPTIM_Init+0x142>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2236      	movs	r2, #54	@ 0x36
 80084ce:	5c9b      	ldrb	r3, [r3, r2]
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d113      	bne.n	80084fe <HAL_LPTIM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2235      	movs	r2, #53	@ 0x35
 80084da:	2100      	movs	r1, #0
 80084dc:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    LPTIM_ResetCallback(hlptim);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	0018      	movs	r0, r3
 80084e2:	f000 fa8f 	bl	8008a04 <LPTIM_ResetCallback>

    if (hlptim->MspInitCallback == NULL)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d102      	bne.n	80084f4 <HAL_LPTIM_Init+0x3c>
    {
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a44      	ldr	r2, [pc, #272]	@ (8008604 <HAL_LPTIM_Init+0x14c>)
 80084f2:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	0010      	movs	r0, r2
 80084fc:	4798      	blx	r3
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2236      	movs	r2, #54	@ 0x36
 8008502:	2102      	movs	r1, #2
 8008504:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d005      	beq.n	8008522 <HAL_LPTIM_Init+0x6a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800851a:	2380      	movs	r3, #128	@ 0x80
 800851c:	041b      	lsls	r3, r3, #16
 800851e:	429a      	cmp	r2, r3
 8008520:	d103      	bne.n	800852a <HAL_LPTIM_Init+0x72>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	221e      	movs	r2, #30
 8008526:	4393      	bics	r3, r2
 8008528:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	695b      	ldr	r3, [r3, #20]
 800852e:	4a36      	ldr	r2, [pc, #216]	@ (8008608 <HAL_LPTIM_Init+0x150>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d003      	beq.n	800853c <HAL_LPTIM_Init+0x84>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	4a35      	ldr	r2, [pc, #212]	@ (800860c <HAL_LPTIM_Init+0x154>)
 8008538:	4013      	ands	r3, r2
 800853a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	4a34      	ldr	r2, [pc, #208]	@ (8008610 <HAL_LPTIM_Init+0x158>)
 8008540:	4013      	ands	r3, r2
 8008542:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800854c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8008552:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8008558:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 800855e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	4313      	orrs	r3, r2
 8008564:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d107      	bne.n	800857e <HAL_LPTIM_Init+0xc6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008576:	4313      	orrs	r3, r2
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	4313      	orrs	r3, r2
 800857c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d005      	beq.n	8008592 <HAL_LPTIM_Init+0xda>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800858a:	2380      	movs	r3, #128	@ 0x80
 800858c:	041b      	lsls	r3, r3, #16
 800858e:	429a      	cmp	r2, r3
 8008590:	d107      	bne.n	80085a2 <HAL_LPTIM_Init+0xea>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800859a:	4313      	orrs	r3, r2
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	4313      	orrs	r3, r2
 80085a0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	4a18      	ldr	r2, [pc, #96]	@ (8008608 <HAL_LPTIM_Init+0x150>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d00a      	beq.n	80085c2 <HAL_LPTIM_Init+0x10a>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80085b4:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80085ba:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	4313      	orrs	r3, r2
 80085c0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a11      	ldr	r2, [pc, #68]	@ (8008614 <HAL_LPTIM_Init+0x15c>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d108      	bne.n	80085e6 <HAL_LPTIM_Init+0x12e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80085e4:	e004      	b.n	80085f0 <HAL_LPTIM_Init+0x138>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80085ee:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2236      	movs	r2, #54	@ 0x36
 80085f4:	2101      	movs	r1, #1
 80085f6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	0018      	movs	r0, r3
 80085fc:	46bd      	mov	sp, r7
 80085fe:	b004      	add	sp, #16
 8008600:	bd80      	pop	{r7, pc}
 8008602:	46c0      	nop			@ (mov r8, r8)
 8008604:	080052bd 	.word	0x080052bd
 8008608:	0000ffff 	.word	0x0000ffff
 800860c:	ffff1f3f 	.word	0xffff1f3f
 8008610:	ff19f1fe 	.word	0xff19f1fe
 8008614:	40007c00 	.word	0x40007c00

08008618 <HAL_LPTIM_SetOnce_Start_IT>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_SetOnce_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2236      	movs	r2, #54	@ 0x36
 8008628:	2102      	movs	r1, #2
 800862a:	5499      	strb	r1, [r3, r2]

  /* Set WAVE bit to enable the set once mode */
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68da      	ldr	r2, [r3, #12]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2180      	movs	r1, #128	@ 0x80
 8008638:	0349      	lsls	r1, r1, #13
 800863a:	430a      	orrs	r2, r1
 800863c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	691a      	ldr	r2, [r3, #16]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2101      	movs	r1, #1
 800864a:	430a      	orrs	r2, r1
 800864c:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2210      	movs	r2, #16
 8008654:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2110      	movs	r1, #16
 8008662:	0018      	movs	r0, r3
 8008664:	f000 f9fa 	bl	8008a5c <LPTIM_WaitForFlag>
 8008668:	0003      	movs	r3, r0
 800866a:	2b03      	cmp	r3, #3
 800866c:	d101      	bne.n	8008672 <HAL_LPTIM_SetOnce_Start_IT+0x5a>
  {
    return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e060      	b.n	8008734 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2208      	movs	r2, #8
 8008678:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2108      	movs	r1, #8
 8008686:	0018      	movs	r0, r3
 8008688:	f000 f9e8 	bl	8008a5c <LPTIM_WaitForFlag>
 800868c:	0003      	movs	r3, r0
 800868e:	2b03      	cmp	r3, #3
 8008690:	d101      	bne.n	8008696 <HAL_LPTIM_SetOnce_Start_IT+0x7e>
  {
    return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e04e      	b.n	8008734 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	0018      	movs	r0, r3
 800869a:	f000 fa17 	bl	8008acc <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	0018      	movs	r0, r3
 80086a2:	f000 f9a3 	bl	80089ec <HAL_LPTIM_GetState>
 80086a6:	0003      	movs	r3, r0
 80086a8:	2b03      	cmp	r3, #3
 80086aa:	d101      	bne.n	80086b0 <HAL_LPTIM_SetOnce_Start_IT+0x98>
  {
    return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e041      	b.n	8008734 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689a      	ldr	r2, [r3, #8]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2110      	movs	r1, #16
 80086bc:	430a      	orrs	r2, r1
 80086be:	609a      	str	r2, [r3, #8]

  /* Enable Compare write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	689a      	ldr	r2, [r3, #8]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2108      	movs	r1, #8
 80086cc:	430a      	orrs	r2, r1
 80086ce:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	689a      	ldr	r2, [r3, #8]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2102      	movs	r1, #2
 80086dc:	430a      	orrs	r2, r1
 80086de:	609a      	str	r2, [r3, #8]

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	689a      	ldr	r2, [r3, #8]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2101      	movs	r1, #1
 80086ec:	430a      	orrs	r2, r1
 80086ee:	609a      	str	r2, [r3, #8]

  /* If external trigger source is used, then enable external trigger interrupt */
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	695b      	ldr	r3, [r3, #20]
 80086f4:	4a11      	ldr	r2, [pc, #68]	@ (800873c <HAL_LPTIM_SetOnce_Start_IT+0x124>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d007      	beq.n	800870a <HAL_LPTIM_SetOnce_Start_IT+0xf2>
  {
    /* Enable external trigger interrupt */
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689a      	ldr	r2, [r3, #8]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2104      	movs	r1, #4
 8008706:	430a      	orrs	r2, r1
 8008708:	609a      	str	r2, [r3, #8]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	691a      	ldr	r2, [r3, #16]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2101      	movs	r1, #1
 8008716:	430a      	orrs	r2, r1
 8008718:	611a      	str	r2, [r3, #16]

  /* Start timer in single (one shot) mode */
  __HAL_LPTIM_START_SINGLE(hlptim);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	691a      	ldr	r2, [r3, #16]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2102      	movs	r1, #2
 8008726:	430a      	orrs	r2, r1
 8008728:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2236      	movs	r2, #54	@ 0x36
 800872e:	2101      	movs	r1, #1
 8008730:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	0018      	movs	r0, r3
 8008736:	46bd      	mov	sp, r7
 8008738:	b004      	add	sp, #16
 800873a:	bd80      	pop	{r7, pc}
 800873c:	0000ffff 	.word	0x0000ffff

08008740 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2201      	movs	r2, #1
 8008750:	4013      	ands	r3, r2
 8008752:	2b01      	cmp	r3, #1
 8008754:	d10f      	bne.n	8008776 <HAL_LPTIM_IRQHandler+0x36>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	2201      	movs	r2, #1
 800875e:	4013      	ands	r3, r2
 8008760:	2b01      	cmp	r3, #1
 8008762:	d108      	bne.n	8008776 <HAL_LPTIM_IRQHandler+0x36>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2201      	movs	r2, #1
 800876a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	0010      	movs	r0, r2
 8008774:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2202      	movs	r2, #2
 800877e:	4013      	ands	r3, r2
 8008780:	2b02      	cmp	r3, #2
 8008782:	d10f      	bne.n	80087a4 <HAL_LPTIM_IRQHandler+0x64>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	2202      	movs	r2, #2
 800878c:	4013      	ands	r3, r2
 800878e:	2b02      	cmp	r3, #2
 8008790:	d108      	bne.n	80087a4 <HAL_LPTIM_IRQHandler+0x64>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2202      	movs	r2, #2
 8008798:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	0010      	movs	r0, r2
 80087a2:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2204      	movs	r2, #4
 80087ac:	4013      	ands	r3, r2
 80087ae:	2b04      	cmp	r3, #4
 80087b0:	d10f      	bne.n	80087d2 <HAL_LPTIM_IRQHandler+0x92>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	2204      	movs	r2, #4
 80087ba:	4013      	ands	r3, r2
 80087bc:	2b04      	cmp	r3, #4
 80087be:	d108      	bne.n	80087d2 <HAL_LPTIM_IRQHandler+0x92>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2204      	movs	r2, #4
 80087c6:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	0010      	movs	r0, r2
 80087d0:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2208      	movs	r2, #8
 80087da:	4013      	ands	r3, r2
 80087dc:	2b08      	cmp	r3, #8
 80087de:	d10f      	bne.n	8008800 <HAL_LPTIM_IRQHandler+0xc0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	2208      	movs	r2, #8
 80087e8:	4013      	ands	r3, r2
 80087ea:	2b08      	cmp	r3, #8
 80087ec:	d108      	bne.n	8008800 <HAL_LPTIM_IRQHandler+0xc0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2208      	movs	r2, #8
 80087f4:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	0010      	movs	r0, r2
 80087fe:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2210      	movs	r2, #16
 8008808:	4013      	ands	r3, r2
 800880a:	2b10      	cmp	r3, #16
 800880c:	d10f      	bne.n	800882e <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	2210      	movs	r2, #16
 8008816:	4013      	ands	r3, r2
 8008818:	2b10      	cmp	r3, #16
 800881a:	d108      	bne.n	800882e <HAL_LPTIM_IRQHandler+0xee>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2210      	movs	r2, #16
 8008822:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	0010      	movs	r0, r2
 800882c:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2220      	movs	r2, #32
 8008836:	4013      	ands	r3, r2
 8008838:	2b20      	cmp	r3, #32
 800883a:	d10f      	bne.n	800885c <HAL_LPTIM_IRQHandler+0x11c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	2220      	movs	r2, #32
 8008844:	4013      	ands	r3, r2
 8008846:	2b20      	cmp	r3, #32
 8008848:	d108      	bne.n	800885c <HAL_LPTIM_IRQHandler+0x11c>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2220      	movs	r2, #32
 8008850:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	0010      	movs	r0, r2
 800885a:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2240      	movs	r2, #64	@ 0x40
 8008864:	4013      	ands	r3, r2
 8008866:	2b40      	cmp	r3, #64	@ 0x40
 8008868:	d10f      	bne.n	800888a <HAL_LPTIM_IRQHandler+0x14a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	2240      	movs	r2, #64	@ 0x40
 8008872:	4013      	ands	r3, r2
 8008874:	2b40      	cmp	r3, #64	@ 0x40
 8008876:	d108      	bne.n	800888a <HAL_LPTIM_IRQHandler+0x14a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2240      	movs	r2, #64	@ 0x40
 800887e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	0010      	movs	r0, r2
 8008888:	4798      	blx	r3
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800888a:	46c0      	nop			@ (mov r8, r8)
 800888c:	46bd      	mov	sp, r7
 800888e:	b002      	add	sp, #8
 8008890:	bd80      	pop	{r7, pc}

08008892 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b082      	sub	sp, #8
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800889a:	46c0      	nop			@ (mov r8, r8)
 800889c:	46bd      	mov	sp, r7
 800889e:	b002      	add	sp, #8
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80088aa:	46c0      	nop			@ (mov r8, r8)
 80088ac:	46bd      	mov	sp, r7
 80088ae:	b002      	add	sp, #8
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b082      	sub	sp, #8
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80088ba:	46c0      	nop			@ (mov r8, r8)
 80088bc:	46bd      	mov	sp, r7
 80088be:	b002      	add	sp, #8
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b082      	sub	sp, #8
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80088ca:	46c0      	nop			@ (mov r8, r8)
 80088cc:	46bd      	mov	sp, r7
 80088ce:	b002      	add	sp, #8
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80088da:	46c0      	nop			@ (mov r8, r8)
 80088dc:	46bd      	mov	sp, r7
 80088de:	b002      	add	sp, #8
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b082      	sub	sp, #8
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80088ea:	46c0      	nop			@ (mov r8, r8)
 80088ec:	46bd      	mov	sp, r7
 80088ee:	b002      	add	sp, #8
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b082      	sub	sp, #8
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80088fa:	46c0      	nop			@ (mov r8, r8)
 80088fc:	46bd      	mov	sp, r7
 80088fe:	b002      	add	sp, #8
 8008900:	bd80      	pop	{r7, pc}
	...

08008904 <HAL_LPTIM_RegisterCallback>:
  * @retval status
  */
HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef        *hlptim,
                                             HAL_LPTIM_CallbackIDTypeDef CallbackID,
                                             pLPTIM_CallbackTypeDef      pCallback)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	607a      	str	r2, [r7, #4]
 800890e:	230b      	movs	r3, #11
 8008910:	18fb      	adds	r3, r7, r3
 8008912:	1c0a      	adds	r2, r1, #0
 8008914:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008916:	2317      	movs	r3, #23
 8008918:	18fb      	adds	r3, r7, r3
 800891a:	2200      	movs	r2, #0
 800891c:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <HAL_LPTIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e05a      	b.n	80089de <HAL_LPTIM_RegisterCallback+0xda>
  }

  if (hlptim->State == HAL_LPTIM_STATE_READY)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2236      	movs	r2, #54	@ 0x36
 800892c:	5c9b      	ldrb	r3, [r3, r2]
 800892e:	b2db      	uxtb	r3, r3
 8008930:	2b01      	cmp	r3, #1
 8008932:	d132      	bne.n	800899a <HAL_LPTIM_RegisterCallback+0x96>
  {
    switch (CallbackID)
 8008934:	230b      	movs	r3, #11
 8008936:	18fb      	adds	r3, r7, r3
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	2b08      	cmp	r3, #8
 800893c:	d828      	bhi.n	8008990 <HAL_LPTIM_RegisterCallback+0x8c>
 800893e:	009a      	lsls	r2, r3, #2
 8008940:	4b29      	ldr	r3, [pc, #164]	@ (80089e8 <HAL_LPTIM_RegisterCallback+0xe4>)
 8008942:	18d3      	adds	r3, r2, r3
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	469f      	mov	pc, r3
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 800894e:	e043      	b.n	80089d8 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8008956:	e03f      	b.n	80089d8 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_MATCH_CB_ID :
        hlptim->CompareMatchCallback = pCallback;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 800895e:	e03b      	b.n	80089d8 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_MATCH_CB_ID :
        hlptim->AutoReloadMatchCallback = pCallback;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 8008966:	e037      	b.n	80089d8 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_TRIGGER_CB_ID :
        hlptim->TriggerCallback = pCallback;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 800896e:	e033      	b.n	80089d8 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_WRITE_CB_ID :
        hlptim->CompareWriteCallback = pCallback;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008976:	e02f      	b.n	80089d8 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_WRITE_CB_ID :
        hlptim->AutoReloadWriteCallback = pCallback;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800897e:	e02b      	b.n	80089d8 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_UP_CB_ID :
        hlptim->DirectionUpCallback = pCallback;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008986:	e027      	b.n	80089d8 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
        hlptim->DirectionDownCallback = pCallback;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800898e:	e023      	b.n	80089d8 <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8008990:	2317      	movs	r3, #23
 8008992:	18fb      	adds	r3, r7, r3
 8008994:	2201      	movs	r2, #1
 8008996:	701a      	strb	r2, [r3, #0]
        break;
 8008998:	e01e      	b.n	80089d8 <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2236      	movs	r2, #54	@ 0x36
 800899e:	5c9b      	ldrb	r3, [r3, r2]
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d114      	bne.n	80089d0 <HAL_LPTIM_RegisterCallback+0xcc>
  {
    switch (CallbackID)
 80089a6:	230b      	movs	r3, #11
 80089a8:	18fb      	adds	r3, r7, r3
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <HAL_LPTIM_RegisterCallback+0xb2>
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d004      	beq.n	80089be <HAL_LPTIM_RegisterCallback+0xba>
 80089b4:	e007      	b.n	80089c6 <HAL_LPTIM_RegisterCallback+0xc2>
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80089bc:	e00c      	b.n	80089d8 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 80089c4:	e008      	b.n	80089d8 <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 80089c6:	2317      	movs	r3, #23
 80089c8:	18fb      	adds	r3, r7, r3
 80089ca:	2201      	movs	r2, #1
 80089cc:	701a      	strb	r2, [r3, #0]
        break;
 80089ce:	e003      	b.n	80089d8 <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80089d0:	2317      	movs	r3, #23
 80089d2:	18fb      	adds	r3, r7, r3
 80089d4:	2201      	movs	r2, #1
 80089d6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80089d8:	2317      	movs	r3, #23
 80089da:	18fb      	adds	r3, r7, r3
 80089dc:	781b      	ldrb	r3, [r3, #0]
}
 80089de:	0018      	movs	r0, r3
 80089e0:	46bd      	mov	sp, r7
 80089e2:	b006      	add	sp, #24
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	46c0      	nop			@ (mov r8, r8)
 80089e8:	0800e048 	.word	0x0800e048

080089ec <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2236      	movs	r2, #54	@ 0x36
 80089f8:	5c9b      	ldrb	r3, [r3, r2]
 80089fa:	b2db      	uxtb	r3, r3
}
 80089fc:	0018      	movs	r0, r3
 80089fe:	46bd      	mov	sp, r7
 8008a00:	b002      	add	sp, #8
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <LPTIM_ResetCallback>:
  * @param  lptim pointer to a LPTIM_HandleTypeDef structure that contains
  *                the configuration information for LPTIM module.
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8008a40 <LPTIM_ResetCallback+0x3c>)
 8008a10:	641a      	str	r2, [r3, #64]	@ 0x40
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a0b      	ldr	r2, [pc, #44]	@ (8008a44 <LPTIM_ResetCallback+0x40>)
 8008a16:	645a      	str	r2, [r3, #68]	@ 0x44
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a0b      	ldr	r2, [pc, #44]	@ (8008a48 <LPTIM_ResetCallback+0x44>)
 8008a1c:	649a      	str	r2, [r3, #72]	@ 0x48
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a0a      	ldr	r2, [pc, #40]	@ (8008a4c <LPTIM_ResetCallback+0x48>)
 8008a22:	64da      	str	r2, [r3, #76]	@ 0x4c
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a0a      	ldr	r2, [pc, #40]	@ (8008a50 <LPTIM_ResetCallback+0x4c>)
 8008a28:	651a      	str	r2, [r3, #80]	@ 0x50
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a09      	ldr	r2, [pc, #36]	@ (8008a54 <LPTIM_ResetCallback+0x50>)
 8008a2e:	655a      	str	r2, [r3, #84]	@ 0x54
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a09      	ldr	r2, [pc, #36]	@ (8008a58 <LPTIM_ResetCallback+0x54>)
 8008a34:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8008a36:	46c0      	nop			@ (mov r8, r8)
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	b002      	add	sp, #8
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	46c0      	nop			@ (mov r8, r8)
 8008a40:	08008893 	.word	0x08008893
 8008a44:	080088a3 	.word	0x080088a3
 8008a48:	080088b3 	.word	0x080088b3
 8008a4c:	080088c3 	.word	0x080088c3
 8008a50:	080088d3 	.word	0x080088d3
 8008a54:	080088e3 	.word	0x080088e3
 8008a58:	080088f3 	.word	0x080088f3

08008a5c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8008a66:	230f      	movs	r3, #15
 8008a68:	18fb      	adds	r3, r7, r3
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8008a6e:	4b15      	ldr	r3, [pc, #84]	@ (8008ac4 <LPTIM_WaitForFlag+0x68>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4915      	ldr	r1, [pc, #84]	@ (8008ac8 <LPTIM_WaitForFlag+0x6c>)
 8008a74:	0018      	movs	r0, r3
 8008a76:	f7f7 fb45 	bl	8000104 <__udivsi3>
 8008a7a:	0003      	movs	r3, r0
 8008a7c:	001a      	movs	r2, r3
 8008a7e:	0013      	movs	r3, r2
 8008a80:	015b      	lsls	r3, r3, #5
 8008a82:	1a9b      	subs	r3, r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	189b      	adds	r3, r3, r2
 8008a88:	00db      	lsls	r3, r3, #3
 8008a8a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d103      	bne.n	8008aa0 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8008a98:	230f      	movs	r3, #15
 8008a9a:	18fb      	adds	r3, r7, r3
 8008a9c:	2203      	movs	r2, #3
 8008a9e:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d002      	beq.n	8008ab6 <LPTIM_WaitForFlag+0x5a>
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1ea      	bne.n	8008a8c <LPTIM_WaitForFlag+0x30>

  return result;
 8008ab6:	230f      	movs	r3, #15
 8008ab8:	18fb      	adds	r3, r7, r3
 8008aba:	781b      	ldrb	r3, [r3, #0]
}
 8008abc:	0018      	movs	r0, r3
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	b004      	add	sp, #16
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	2000044c 	.word	0x2000044c
 8008ac8:	00004e20 	.word	0x00004e20

08008acc <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b08c      	sub	sp, #48	@ 0x30
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8008adc:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ade:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8008ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f383 8810 	msr	PRIMASK, r3
}
 8008aec:	46c0      	nop			@ (mov r8, r8)
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a72      	ldr	r2, [pc, #456]	@ (8008cbc <LPTIM_Disable+0x1f0>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d003      	beq.n	8008b00 <LPTIM_Disable+0x34>
 8008af8:	4a71      	ldr	r2, [pc, #452]	@ (8008cc0 <LPTIM_Disable+0x1f4>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d007      	beq.n	8008b0e <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8008afe:	e00d      	b.n	8008b1c <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008b00:	4b70      	ldr	r3, [pc, #448]	@ (8008cc4 <LPTIM_Disable+0x1f8>)
 8008b02:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008b04:	23c0      	movs	r3, #192	@ 0xc0
 8008b06:	031b      	lsls	r3, r3, #12
 8008b08:	4013      	ands	r3, r2
 8008b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8008b0c:	e006      	b.n	8008b1c <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008b0e:	4b6d      	ldr	r3, [pc, #436]	@ (8008cc4 <LPTIM_Disable+0x1f8>)
 8008b10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008b12:	23c0      	movs	r3, #192	@ 0xc0
 8008b14:	039b      	lsls	r3, r3, #14
 8008b16:	4013      	ands	r3, r2
 8008b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8008b1a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b42:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a5c      	ldr	r2, [pc, #368]	@ (8008cbc <LPTIM_Disable+0x1f0>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d003      	beq.n	8008b56 <LPTIM_Disable+0x8a>
 8008b4e:	4a5c      	ldr	r2, [pc, #368]	@ (8008cc0 <LPTIM_Disable+0x1f4>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d00e      	beq.n	8008b72 <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8008b54:	e01b      	b.n	8008b8e <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8008b56:	4b5b      	ldr	r3, [pc, #364]	@ (8008cc4 <LPTIM_Disable+0x1f8>)
 8008b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b5a:	4b5a      	ldr	r3, [pc, #360]	@ (8008cc4 <LPTIM_Disable+0x1f8>)
 8008b5c:	2180      	movs	r1, #128	@ 0x80
 8008b5e:	0609      	lsls	r1, r1, #24
 8008b60:	430a      	orrs	r2, r1
 8008b62:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8008b64:	4b57      	ldr	r3, [pc, #348]	@ (8008cc4 <LPTIM_Disable+0x1f8>)
 8008b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b68:	4b56      	ldr	r3, [pc, #344]	@ (8008cc4 <LPTIM_Disable+0x1f8>)
 8008b6a:	0052      	lsls	r2, r2, #1
 8008b6c:	0852      	lsrs	r2, r2, #1
 8008b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 8008b70:	e00d      	b.n	8008b8e <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8008b72:	4b54      	ldr	r3, [pc, #336]	@ (8008cc4 <LPTIM_Disable+0x1f8>)
 8008b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b76:	4b53      	ldr	r3, [pc, #332]	@ (8008cc4 <LPTIM_Disable+0x1f8>)
 8008b78:	2180      	movs	r1, #128	@ 0x80
 8008b7a:	05c9      	lsls	r1, r1, #23
 8008b7c:	430a      	orrs	r2, r1
 8008b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8008b80:	4b50      	ldr	r3, [pc, #320]	@ (8008cc4 <LPTIM_Disable+0x1f8>)
 8008b82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b84:	4b4f      	ldr	r3, [pc, #316]	@ (8008cc4 <LPTIM_Disable+0x1f8>)
 8008b86:	4950      	ldr	r1, [pc, #320]	@ (8008cc8 <LPTIM_Disable+0x1fc>)
 8008b88:	400a      	ands	r2, r1
 8008b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 8008b8c:	46c0      	nop			@ (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d103      	bne.n	8008b9c <LPTIM_Disable+0xd0>
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d100      	bne.n	8008b9c <LPTIM_Disable+0xd0>
 8008b9a:	e071      	b.n	8008c80 <LPTIM_Disable+0x1b4>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a46      	ldr	r2, [pc, #280]	@ (8008cbc <LPTIM_Disable+0x1f0>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d003      	beq.n	8008bae <LPTIM_Disable+0xe2>
 8008ba6:	4a46      	ldr	r2, [pc, #280]	@ (8008cc0 <LPTIM_Disable+0x1f4>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d007      	beq.n	8008bbc <LPTIM_Disable+0xf0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8008bac:	e00d      	b.n	8008bca <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8008bae:	4b45      	ldr	r3, [pc, #276]	@ (8008cc4 <LPTIM_Disable+0x1f8>)
 8008bb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008bb2:	4b44      	ldr	r3, [pc, #272]	@ (8008cc4 <LPTIM_Disable+0x1f8>)
 8008bb4:	4945      	ldr	r1, [pc, #276]	@ (8008ccc <LPTIM_Disable+0x200>)
 8008bb6:	400a      	ands	r2, r1
 8008bb8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008bba:	e006      	b.n	8008bca <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8008bbc:	4b41      	ldr	r3, [pc, #260]	@ (8008cc4 <LPTIM_Disable+0x1f8>)
 8008bbe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008bc0:	4b40      	ldr	r3, [pc, #256]	@ (8008cc4 <LPTIM_Disable+0x1f8>)
 8008bc2:	4943      	ldr	r1, [pc, #268]	@ (8008cd0 <LPTIM_Disable+0x204>)
 8008bc4:	400a      	ands	r2, r1
 8008bc6:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008bc8:	46c0      	nop			@ (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d01b      	beq.n	8008c08 <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	691a      	ldr	r2, [r3, #16]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2101      	movs	r1, #1
 8008bdc:	430a      	orrs	r2, r1
 8008bde:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	69fa      	ldr	r2, [r7, #28]
 8008be6:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2108      	movs	r1, #8
 8008bec:	0018      	movs	r0, r3
 8008bee:	f7ff ff35 	bl	8008a5c <LPTIM_WaitForFlag>
 8008bf2:	0003      	movs	r3, r0
 8008bf4:	2b03      	cmp	r3, #3
 8008bf6:	d103      	bne.n	8008c00 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2236      	movs	r2, #54	@ 0x36
 8008bfc:	2103      	movs	r1, #3
 8008bfe:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2208      	movs	r2, #8
 8008c06:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d01b      	beq.n	8008c46 <LPTIM_Disable+0x17a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	691a      	ldr	r2, [r3, #16]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2101      	movs	r1, #1
 8008c1a:	430a      	orrs	r2, r1
 8008c1c:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	69ba      	ldr	r2, [r7, #24]
 8008c24:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2110      	movs	r1, #16
 8008c2a:	0018      	movs	r0, r3
 8008c2c:	f7ff ff16 	bl	8008a5c <LPTIM_WaitForFlag>
 8008c30:	0003      	movs	r3, r0
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	d103      	bne.n	8008c3e <LPTIM_Disable+0x172>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2236      	movs	r2, #54	@ 0x36
 8008c3a:	2103      	movs	r1, #3
 8008c3c:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2210      	movs	r2, #16
 8008c44:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8008cbc <LPTIM_Disable+0x1f0>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d003      	beq.n	8008c58 <LPTIM_Disable+0x18c>
 8008c50:	4a1b      	ldr	r2, [pc, #108]	@ (8008cc0 <LPTIM_Disable+0x1f4>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d00a      	beq.n	8008c6c <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8008c56:	e013      	b.n	8008c80 <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8008c58:	4b1a      	ldr	r3, [pc, #104]	@ (8008cc4 <LPTIM_Disable+0x1f8>)
 8008c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8008ccc <LPTIM_Disable+0x200>)
 8008c5e:	4013      	ands	r3, r2
 8008c60:	0019      	movs	r1, r3
 8008c62:	4b18      	ldr	r3, [pc, #96]	@ (8008cc4 <LPTIM_Disable+0x1f8>)
 8008c64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c66:	430a      	orrs	r2, r1
 8008c68:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008c6a:	e009      	b.n	8008c80 <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8008c6c:	4b15      	ldr	r3, [pc, #84]	@ (8008cc4 <LPTIM_Disable+0x1f8>)
 8008c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c70:	4a17      	ldr	r2, [pc, #92]	@ (8008cd0 <LPTIM_Disable+0x204>)
 8008c72:	4013      	ands	r3, r2
 8008c74:	0019      	movs	r1, r3
 8008c76:	4b13      	ldr	r3, [pc, #76]	@ (8008cc4 <LPTIM_Disable+0x1f8>)
 8008c78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008c7e:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	691a      	ldr	r2, [r3, #16]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2101      	movs	r1, #1
 8008c8c:	438a      	bics	r2, r1
 8008c8e:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c96:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6a3a      	ldr	r2, [r7, #32]
 8008c9e:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	625a      	str	r2, [r3, #36]	@ 0x24
 8008ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008caa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	f383 8810 	msr	PRIMASK, r3
}
 8008cb2:	46c0      	nop			@ (mov r8, r8)

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8008cb4:	46c0      	nop			@ (mov r8, r8)
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	b00c      	add	sp, #48	@ 0x30
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	40007c00 	.word	0x40007c00
 8008cc0:	40009400 	.word	0x40009400
 8008cc4:	40021000 	.word	0x40021000
 8008cc8:	bfffffff 	.word	0xbfffffff
 8008ccc:	fff3ffff 	.word	0xfff3ffff
 8008cd0:	ffcfffff 	.word	0xffcfffff

08008cd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008cdc:	4b19      	ldr	r3, [pc, #100]	@ (8008d44 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a19      	ldr	r2, [pc, #100]	@ (8008d48 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	0019      	movs	r1, r3
 8008ce6:	4b17      	ldr	r3, [pc, #92]	@ (8008d44 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	430a      	orrs	r2, r1
 8008cec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	2380      	movs	r3, #128	@ 0x80
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d11f      	bne.n	8008d38 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8008cf8:	4b14      	ldr	r3, [pc, #80]	@ (8008d4c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	0013      	movs	r3, r2
 8008cfe:	005b      	lsls	r3, r3, #1
 8008d00:	189b      	adds	r3, r3, r2
 8008d02:	005b      	lsls	r3, r3, #1
 8008d04:	4912      	ldr	r1, [pc, #72]	@ (8008d50 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8008d06:	0018      	movs	r0, r3
 8008d08:	f7f7 f9fc 	bl	8000104 <__udivsi3>
 8008d0c:	0003      	movs	r3, r0
 8008d0e:	3301      	adds	r3, #1
 8008d10:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008d12:	e008      	b.n	8008d26 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d003      	beq.n	8008d22 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	60fb      	str	r3, [r7, #12]
 8008d20:	e001      	b.n	8008d26 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e009      	b.n	8008d3a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008d26:	4b07      	ldr	r3, [pc, #28]	@ (8008d44 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008d28:	695a      	ldr	r2, [r3, #20]
 8008d2a:	2380      	movs	r3, #128	@ 0x80
 8008d2c:	00db      	lsls	r3, r3, #3
 8008d2e:	401a      	ands	r2, r3
 8008d30:	2380      	movs	r3, #128	@ 0x80
 8008d32:	00db      	lsls	r3, r3, #3
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d0ed      	beq.n	8008d14 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	0018      	movs	r0, r3
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	b004      	add	sp, #16
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	46c0      	nop			@ (mov r8, r8)
 8008d44:	40007000 	.word	0x40007000
 8008d48:	fffff9ff 	.word	0xfffff9ff
 8008d4c:	2000044c 	.word	0x2000044c
 8008d50:	000f4240 	.word	0x000f4240

08008d54 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8008d58:	4b03      	ldr	r3, [pc, #12]	@ (8008d68 <LL_RCC_GetAPB1Prescaler+0x14>)
 8008d5a:	689a      	ldr	r2, [r3, #8]
 8008d5c:	23e0      	movs	r3, #224	@ 0xe0
 8008d5e:	01db      	lsls	r3, r3, #7
 8008d60:	4013      	ands	r3, r2
}
 8008d62:	0018      	movs	r0, r3
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	40021000 	.word	0x40021000

08008d6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b088      	sub	sp, #32
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d101      	bne.n	8008d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e2fe      	b.n	800937c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2201      	movs	r2, #1
 8008d84:	4013      	ands	r3, r2
 8008d86:	d100      	bne.n	8008d8a <HAL_RCC_OscConfig+0x1e>
 8008d88:	e07c      	b.n	8008e84 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d8a:	4bc3      	ldr	r3, [pc, #780]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	2238      	movs	r2, #56	@ 0x38
 8008d90:	4013      	ands	r3, r2
 8008d92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008d94:	4bc0      	ldr	r3, [pc, #768]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	2203      	movs	r2, #3
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	2b10      	cmp	r3, #16
 8008da2:	d102      	bne.n	8008daa <HAL_RCC_OscConfig+0x3e>
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	2b03      	cmp	r3, #3
 8008da8:	d002      	beq.n	8008db0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	2b08      	cmp	r3, #8
 8008dae:	d10b      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008db0:	4bb9      	ldr	r3, [pc, #740]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	2380      	movs	r3, #128	@ 0x80
 8008db6:	029b      	lsls	r3, r3, #10
 8008db8:	4013      	ands	r3, r2
 8008dba:	d062      	beq.n	8008e82 <HAL_RCC_OscConfig+0x116>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d15e      	bne.n	8008e82 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e2d9      	b.n	800937c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685a      	ldr	r2, [r3, #4]
 8008dcc:	2380      	movs	r3, #128	@ 0x80
 8008dce:	025b      	lsls	r3, r3, #9
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d107      	bne.n	8008de4 <HAL_RCC_OscConfig+0x78>
 8008dd4:	4bb0      	ldr	r3, [pc, #704]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	4baf      	ldr	r3, [pc, #700]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008dda:	2180      	movs	r1, #128	@ 0x80
 8008ddc:	0249      	lsls	r1, r1, #9
 8008dde:	430a      	orrs	r2, r1
 8008de0:	601a      	str	r2, [r3, #0]
 8008de2:	e020      	b.n	8008e26 <HAL_RCC_OscConfig+0xba>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	685a      	ldr	r2, [r3, #4]
 8008de8:	23a0      	movs	r3, #160	@ 0xa0
 8008dea:	02db      	lsls	r3, r3, #11
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d10e      	bne.n	8008e0e <HAL_RCC_OscConfig+0xa2>
 8008df0:	4ba9      	ldr	r3, [pc, #676]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	4ba8      	ldr	r3, [pc, #672]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008df6:	2180      	movs	r1, #128	@ 0x80
 8008df8:	02c9      	lsls	r1, r1, #11
 8008dfa:	430a      	orrs	r2, r1
 8008dfc:	601a      	str	r2, [r3, #0]
 8008dfe:	4ba6      	ldr	r3, [pc, #664]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	4ba5      	ldr	r3, [pc, #660]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008e04:	2180      	movs	r1, #128	@ 0x80
 8008e06:	0249      	lsls	r1, r1, #9
 8008e08:	430a      	orrs	r2, r1
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	e00b      	b.n	8008e26 <HAL_RCC_OscConfig+0xba>
 8008e0e:	4ba2      	ldr	r3, [pc, #648]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	4ba1      	ldr	r3, [pc, #644]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008e14:	49a1      	ldr	r1, [pc, #644]	@ (800909c <HAL_RCC_OscConfig+0x330>)
 8008e16:	400a      	ands	r2, r1
 8008e18:	601a      	str	r2, [r3, #0]
 8008e1a:	4b9f      	ldr	r3, [pc, #636]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	4b9e      	ldr	r3, [pc, #632]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008e20:	499f      	ldr	r1, [pc, #636]	@ (80090a0 <HAL_RCC_OscConfig+0x334>)
 8008e22:	400a      	ands	r2, r1
 8008e24:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d014      	beq.n	8008e58 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e2e:	f7fd fb19 	bl	8006464 <HAL_GetTick>
 8008e32:	0003      	movs	r3, r0
 8008e34:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e36:	e008      	b.n	8008e4a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e38:	f7fd fb14 	bl	8006464 <HAL_GetTick>
 8008e3c:	0002      	movs	r2, r0
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	2b64      	cmp	r3, #100	@ 0x64
 8008e44:	d901      	bls.n	8008e4a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e298      	b.n	800937c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e4a:	4b93      	ldr	r3, [pc, #588]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	2380      	movs	r3, #128	@ 0x80
 8008e50:	029b      	lsls	r3, r3, #10
 8008e52:	4013      	ands	r3, r2
 8008e54:	d0f0      	beq.n	8008e38 <HAL_RCC_OscConfig+0xcc>
 8008e56:	e015      	b.n	8008e84 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e58:	f7fd fb04 	bl	8006464 <HAL_GetTick>
 8008e5c:	0003      	movs	r3, r0
 8008e5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008e60:	e008      	b.n	8008e74 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e62:	f7fd faff 	bl	8006464 <HAL_GetTick>
 8008e66:	0002      	movs	r2, r0
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	2b64      	cmp	r3, #100	@ 0x64
 8008e6e:	d901      	bls.n	8008e74 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008e70:	2303      	movs	r3, #3
 8008e72:	e283      	b.n	800937c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008e74:	4b88      	ldr	r3, [pc, #544]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	2380      	movs	r3, #128	@ 0x80
 8008e7a:	029b      	lsls	r3, r3, #10
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	d1f0      	bne.n	8008e62 <HAL_RCC_OscConfig+0xf6>
 8008e80:	e000      	b.n	8008e84 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e82:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2202      	movs	r2, #2
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	d100      	bne.n	8008e90 <HAL_RCC_OscConfig+0x124>
 8008e8e:	e099      	b.n	8008fc4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e90:	4b81      	ldr	r3, [pc, #516]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	2238      	movs	r2, #56	@ 0x38
 8008e96:	4013      	ands	r3, r2
 8008e98:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008e9a:	4b7f      	ldr	r3, [pc, #508]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	2203      	movs	r2, #3
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	2b10      	cmp	r3, #16
 8008ea8:	d102      	bne.n	8008eb0 <HAL_RCC_OscConfig+0x144>
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d002      	beq.n	8008eb6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d135      	bne.n	8008f22 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008eb6:	4b78      	ldr	r3, [pc, #480]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	2380      	movs	r3, #128	@ 0x80
 8008ebc:	00db      	lsls	r3, r3, #3
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	d005      	beq.n	8008ece <HAL_RCC_OscConfig+0x162>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d101      	bne.n	8008ece <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e256      	b.n	800937c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ece:	4b72      	ldr	r3, [pc, #456]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	4a74      	ldr	r2, [pc, #464]	@ (80090a4 <HAL_RCC_OscConfig+0x338>)
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	0019      	movs	r1, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	695b      	ldr	r3, [r3, #20]
 8008edc:	021a      	lsls	r2, r3, #8
 8008ede:	4b6e      	ldr	r3, [pc, #440]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008ee0:	430a      	orrs	r2, r1
 8008ee2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d112      	bne.n	8008f10 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008eea:	4b6b      	ldr	r3, [pc, #428]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a6e      	ldr	r2, [pc, #440]	@ (80090a8 <HAL_RCC_OscConfig+0x33c>)
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	0019      	movs	r1, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	691a      	ldr	r2, [r3, #16]
 8008ef8:	4b67      	ldr	r3, [pc, #412]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008efa:	430a      	orrs	r2, r1
 8008efc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008efe:	4b66      	ldr	r3, [pc, #408]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	0adb      	lsrs	r3, r3, #11
 8008f04:	2207      	movs	r2, #7
 8008f06:	4013      	ands	r3, r2
 8008f08:	4a68      	ldr	r2, [pc, #416]	@ (80090ac <HAL_RCC_OscConfig+0x340>)
 8008f0a:	40da      	lsrs	r2, r3
 8008f0c:	4b68      	ldr	r3, [pc, #416]	@ (80090b0 <HAL_RCC_OscConfig+0x344>)
 8008f0e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008f10:	4b68      	ldr	r3, [pc, #416]	@ (80090b4 <HAL_RCC_OscConfig+0x348>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	0018      	movs	r0, r3
 8008f16:	f7fd fa49 	bl	80063ac <HAL_InitTick>
 8008f1a:	1e03      	subs	r3, r0, #0
 8008f1c:	d051      	beq.n	8008fc2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e22c      	b.n	800937c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d030      	beq.n	8008f8c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a5e      	ldr	r2, [pc, #376]	@ (80090a8 <HAL_RCC_OscConfig+0x33c>)
 8008f30:	4013      	ands	r3, r2
 8008f32:	0019      	movs	r1, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	691a      	ldr	r2, [r3, #16]
 8008f38:	4b57      	ldr	r3, [pc, #348]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8008f3e:	4b56      	ldr	r3, [pc, #344]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	4b55      	ldr	r3, [pc, #340]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008f44:	2180      	movs	r1, #128	@ 0x80
 8008f46:	0049      	lsls	r1, r1, #1
 8008f48:	430a      	orrs	r2, r1
 8008f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f4c:	f7fd fa8a 	bl	8006464 <HAL_GetTick>
 8008f50:	0003      	movs	r3, r0
 8008f52:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f54:	e008      	b.n	8008f68 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f56:	f7fd fa85 	bl	8006464 <HAL_GetTick>
 8008f5a:	0002      	movs	r2, r0
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d901      	bls.n	8008f68 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008f64:	2303      	movs	r3, #3
 8008f66:	e209      	b.n	800937c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f68:	4b4b      	ldr	r3, [pc, #300]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	2380      	movs	r3, #128	@ 0x80
 8008f6e:	00db      	lsls	r3, r3, #3
 8008f70:	4013      	ands	r3, r2
 8008f72:	d0f0      	beq.n	8008f56 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f74:	4b48      	ldr	r3, [pc, #288]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	4a4a      	ldr	r2, [pc, #296]	@ (80090a4 <HAL_RCC_OscConfig+0x338>)
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	0019      	movs	r1, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	695b      	ldr	r3, [r3, #20]
 8008f82:	021a      	lsls	r2, r3, #8
 8008f84:	4b44      	ldr	r3, [pc, #272]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008f86:	430a      	orrs	r2, r1
 8008f88:	605a      	str	r2, [r3, #4]
 8008f8a:	e01b      	b.n	8008fc4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008f8c:	4b42      	ldr	r3, [pc, #264]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	4b41      	ldr	r3, [pc, #260]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008f92:	4949      	ldr	r1, [pc, #292]	@ (80090b8 <HAL_RCC_OscConfig+0x34c>)
 8008f94:	400a      	ands	r2, r1
 8008f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f98:	f7fd fa64 	bl	8006464 <HAL_GetTick>
 8008f9c:	0003      	movs	r3, r0
 8008f9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008fa0:	e008      	b.n	8008fb4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fa2:	f7fd fa5f 	bl	8006464 <HAL_GetTick>
 8008fa6:	0002      	movs	r2, r0
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d901      	bls.n	8008fb4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e1e3      	b.n	800937c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008fb4:	4b38      	ldr	r3, [pc, #224]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	2380      	movs	r3, #128	@ 0x80
 8008fba:	00db      	lsls	r3, r3, #3
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	d1f0      	bne.n	8008fa2 <HAL_RCC_OscConfig+0x236>
 8008fc0:	e000      	b.n	8008fc4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fc2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2208      	movs	r2, #8
 8008fca:	4013      	ands	r3, r2
 8008fcc:	d047      	beq.n	800905e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008fce:	4b32      	ldr	r3, [pc, #200]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	2238      	movs	r2, #56	@ 0x38
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	2b18      	cmp	r3, #24
 8008fd8:	d10a      	bne.n	8008ff0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008fda:	4b2f      	ldr	r3, [pc, #188]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fde:	2202      	movs	r2, #2
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	d03c      	beq.n	800905e <HAL_RCC_OscConfig+0x2f2>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d138      	bne.n	800905e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e1c5      	b.n	800937c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d019      	beq.n	800902c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008ff8:	4b27      	ldr	r3, [pc, #156]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008ffa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008ffc:	4b26      	ldr	r3, [pc, #152]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8008ffe:	2101      	movs	r1, #1
 8009000:	430a      	orrs	r2, r1
 8009002:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009004:	f7fd fa2e 	bl	8006464 <HAL_GetTick>
 8009008:	0003      	movs	r3, r0
 800900a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800900c:	e008      	b.n	8009020 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800900e:	f7fd fa29 	bl	8006464 <HAL_GetTick>
 8009012:	0002      	movs	r2, r0
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	2b02      	cmp	r3, #2
 800901a:	d901      	bls.n	8009020 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800901c:	2303      	movs	r3, #3
 800901e:	e1ad      	b.n	800937c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009020:	4b1d      	ldr	r3, [pc, #116]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8009022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009024:	2202      	movs	r2, #2
 8009026:	4013      	ands	r3, r2
 8009028:	d0f1      	beq.n	800900e <HAL_RCC_OscConfig+0x2a2>
 800902a:	e018      	b.n	800905e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800902c:	4b1a      	ldr	r3, [pc, #104]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 800902e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009030:	4b19      	ldr	r3, [pc, #100]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8009032:	2101      	movs	r1, #1
 8009034:	438a      	bics	r2, r1
 8009036:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009038:	f7fd fa14 	bl	8006464 <HAL_GetTick>
 800903c:	0003      	movs	r3, r0
 800903e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009040:	e008      	b.n	8009054 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009042:	f7fd fa0f 	bl	8006464 <HAL_GetTick>
 8009046:	0002      	movs	r2, r0
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	1ad3      	subs	r3, r2, r3
 800904c:	2b02      	cmp	r3, #2
 800904e:	d901      	bls.n	8009054 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8009050:	2303      	movs	r3, #3
 8009052:	e193      	b.n	800937c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009054:	4b10      	ldr	r3, [pc, #64]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8009056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009058:	2202      	movs	r2, #2
 800905a:	4013      	ands	r3, r2
 800905c:	d1f1      	bne.n	8009042 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2204      	movs	r2, #4
 8009064:	4013      	ands	r3, r2
 8009066:	d100      	bne.n	800906a <HAL_RCC_OscConfig+0x2fe>
 8009068:	e0c6      	b.n	80091f8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800906a:	231f      	movs	r3, #31
 800906c:	18fb      	adds	r3, r7, r3
 800906e:	2200      	movs	r2, #0
 8009070:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009072:	4b09      	ldr	r3, [pc, #36]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	2238      	movs	r2, #56	@ 0x38
 8009078:	4013      	ands	r3, r2
 800907a:	2b20      	cmp	r3, #32
 800907c:	d11e      	bne.n	80090bc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800907e:	4b06      	ldr	r3, [pc, #24]	@ (8009098 <HAL_RCC_OscConfig+0x32c>)
 8009080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009082:	2202      	movs	r2, #2
 8009084:	4013      	ands	r3, r2
 8009086:	d100      	bne.n	800908a <HAL_RCC_OscConfig+0x31e>
 8009088:	e0b6      	b.n	80091f8 <HAL_RCC_OscConfig+0x48c>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d000      	beq.n	8009094 <HAL_RCC_OscConfig+0x328>
 8009092:	e0b1      	b.n	80091f8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	e171      	b.n	800937c <HAL_RCC_OscConfig+0x610>
 8009098:	40021000 	.word	0x40021000
 800909c:	fffeffff 	.word	0xfffeffff
 80090a0:	fffbffff 	.word	0xfffbffff
 80090a4:	ffff80ff 	.word	0xffff80ff
 80090a8:	ffffc7ff 	.word	0xffffc7ff
 80090ac:	00f42400 	.word	0x00f42400
 80090b0:	2000044c 	.word	0x2000044c
 80090b4:	20000450 	.word	0x20000450
 80090b8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80090bc:	4bb1      	ldr	r3, [pc, #708]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 80090be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090c0:	2380      	movs	r3, #128	@ 0x80
 80090c2:	055b      	lsls	r3, r3, #21
 80090c4:	4013      	ands	r3, r2
 80090c6:	d101      	bne.n	80090cc <HAL_RCC_OscConfig+0x360>
 80090c8:	2301      	movs	r3, #1
 80090ca:	e000      	b.n	80090ce <HAL_RCC_OscConfig+0x362>
 80090cc:	2300      	movs	r3, #0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d011      	beq.n	80090f6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80090d2:	4bac      	ldr	r3, [pc, #688]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 80090d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090d6:	4bab      	ldr	r3, [pc, #684]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 80090d8:	2180      	movs	r1, #128	@ 0x80
 80090da:	0549      	lsls	r1, r1, #21
 80090dc:	430a      	orrs	r2, r1
 80090de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80090e0:	4ba8      	ldr	r3, [pc, #672]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 80090e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090e4:	2380      	movs	r3, #128	@ 0x80
 80090e6:	055b      	lsls	r3, r3, #21
 80090e8:	4013      	ands	r3, r2
 80090ea:	60fb      	str	r3, [r7, #12]
 80090ec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80090ee:	231f      	movs	r3, #31
 80090f0:	18fb      	adds	r3, r7, r3
 80090f2:	2201      	movs	r2, #1
 80090f4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090f6:	4ba4      	ldr	r3, [pc, #656]	@ (8009388 <HAL_RCC_OscConfig+0x61c>)
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	2380      	movs	r3, #128	@ 0x80
 80090fc:	005b      	lsls	r3, r3, #1
 80090fe:	4013      	ands	r3, r2
 8009100:	d11a      	bne.n	8009138 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009102:	4ba1      	ldr	r3, [pc, #644]	@ (8009388 <HAL_RCC_OscConfig+0x61c>)
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	4ba0      	ldr	r3, [pc, #640]	@ (8009388 <HAL_RCC_OscConfig+0x61c>)
 8009108:	2180      	movs	r1, #128	@ 0x80
 800910a:	0049      	lsls	r1, r1, #1
 800910c:	430a      	orrs	r2, r1
 800910e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8009110:	f7fd f9a8 	bl	8006464 <HAL_GetTick>
 8009114:	0003      	movs	r3, r0
 8009116:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009118:	e008      	b.n	800912c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800911a:	f7fd f9a3 	bl	8006464 <HAL_GetTick>
 800911e:	0002      	movs	r2, r0
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	1ad3      	subs	r3, r2, r3
 8009124:	2b02      	cmp	r3, #2
 8009126:	d901      	bls.n	800912c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8009128:	2303      	movs	r3, #3
 800912a:	e127      	b.n	800937c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800912c:	4b96      	ldr	r3, [pc, #600]	@ (8009388 <HAL_RCC_OscConfig+0x61c>)
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	2380      	movs	r3, #128	@ 0x80
 8009132:	005b      	lsls	r3, r3, #1
 8009134:	4013      	ands	r3, r2
 8009136:	d0f0      	beq.n	800911a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d106      	bne.n	800914e <HAL_RCC_OscConfig+0x3e2>
 8009140:	4b90      	ldr	r3, [pc, #576]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 8009142:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009144:	4b8f      	ldr	r3, [pc, #572]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 8009146:	2101      	movs	r1, #1
 8009148:	430a      	orrs	r2, r1
 800914a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800914c:	e01c      	b.n	8009188 <HAL_RCC_OscConfig+0x41c>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	2b05      	cmp	r3, #5
 8009154:	d10c      	bne.n	8009170 <HAL_RCC_OscConfig+0x404>
 8009156:	4b8b      	ldr	r3, [pc, #556]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 8009158:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800915a:	4b8a      	ldr	r3, [pc, #552]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 800915c:	2104      	movs	r1, #4
 800915e:	430a      	orrs	r2, r1
 8009160:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009162:	4b88      	ldr	r3, [pc, #544]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 8009164:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009166:	4b87      	ldr	r3, [pc, #540]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 8009168:	2101      	movs	r1, #1
 800916a:	430a      	orrs	r2, r1
 800916c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800916e:	e00b      	b.n	8009188 <HAL_RCC_OscConfig+0x41c>
 8009170:	4b84      	ldr	r3, [pc, #528]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 8009172:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009174:	4b83      	ldr	r3, [pc, #524]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 8009176:	2101      	movs	r1, #1
 8009178:	438a      	bics	r2, r1
 800917a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800917c:	4b81      	ldr	r3, [pc, #516]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 800917e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009180:	4b80      	ldr	r3, [pc, #512]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 8009182:	2104      	movs	r1, #4
 8009184:	438a      	bics	r2, r1
 8009186:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d014      	beq.n	80091ba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009190:	f7fd f968 	bl	8006464 <HAL_GetTick>
 8009194:	0003      	movs	r3, r0
 8009196:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009198:	e009      	b.n	80091ae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800919a:	f7fd f963 	bl	8006464 <HAL_GetTick>
 800919e:	0002      	movs	r2, r0
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	1ad3      	subs	r3, r2, r3
 80091a4:	4a79      	ldr	r2, [pc, #484]	@ (800938c <HAL_RCC_OscConfig+0x620>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d901      	bls.n	80091ae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80091aa:	2303      	movs	r3, #3
 80091ac:	e0e6      	b.n	800937c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091ae:	4b75      	ldr	r3, [pc, #468]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 80091b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091b2:	2202      	movs	r2, #2
 80091b4:	4013      	ands	r3, r2
 80091b6:	d0f0      	beq.n	800919a <HAL_RCC_OscConfig+0x42e>
 80091b8:	e013      	b.n	80091e2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091ba:	f7fd f953 	bl	8006464 <HAL_GetTick>
 80091be:	0003      	movs	r3, r0
 80091c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80091c2:	e009      	b.n	80091d8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091c4:	f7fd f94e 	bl	8006464 <HAL_GetTick>
 80091c8:	0002      	movs	r2, r0
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	4a6f      	ldr	r2, [pc, #444]	@ (800938c <HAL_RCC_OscConfig+0x620>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d901      	bls.n	80091d8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80091d4:	2303      	movs	r3, #3
 80091d6:	e0d1      	b.n	800937c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80091d8:	4b6a      	ldr	r3, [pc, #424]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 80091da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091dc:	2202      	movs	r2, #2
 80091de:	4013      	ands	r3, r2
 80091e0:	d1f0      	bne.n	80091c4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80091e2:	231f      	movs	r3, #31
 80091e4:	18fb      	adds	r3, r7, r3
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d105      	bne.n	80091f8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80091ec:	4b65      	ldr	r3, [pc, #404]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 80091ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091f0:	4b64      	ldr	r3, [pc, #400]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 80091f2:	4967      	ldr	r1, [pc, #412]	@ (8009390 <HAL_RCC_OscConfig+0x624>)
 80091f4:	400a      	ands	r2, r1
 80091f6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	69db      	ldr	r3, [r3, #28]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d100      	bne.n	8009202 <HAL_RCC_OscConfig+0x496>
 8009200:	e0bb      	b.n	800937a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009202:	4b60      	ldr	r3, [pc, #384]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	2238      	movs	r2, #56	@ 0x38
 8009208:	4013      	ands	r3, r2
 800920a:	2b10      	cmp	r3, #16
 800920c:	d100      	bne.n	8009210 <HAL_RCC_OscConfig+0x4a4>
 800920e:	e07b      	b.n	8009308 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	69db      	ldr	r3, [r3, #28]
 8009214:	2b02      	cmp	r3, #2
 8009216:	d156      	bne.n	80092c6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009218:	4b5a      	ldr	r3, [pc, #360]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	4b59      	ldr	r3, [pc, #356]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 800921e:	495d      	ldr	r1, [pc, #372]	@ (8009394 <HAL_RCC_OscConfig+0x628>)
 8009220:	400a      	ands	r2, r1
 8009222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009224:	f7fd f91e 	bl	8006464 <HAL_GetTick>
 8009228:	0003      	movs	r3, r0
 800922a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800922c:	e008      	b.n	8009240 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800922e:	f7fd f919 	bl	8006464 <HAL_GetTick>
 8009232:	0002      	movs	r2, r0
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	2b02      	cmp	r3, #2
 800923a:	d901      	bls.n	8009240 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800923c:	2303      	movs	r3, #3
 800923e:	e09d      	b.n	800937c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009240:	4b50      	ldr	r3, [pc, #320]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	2380      	movs	r3, #128	@ 0x80
 8009246:	049b      	lsls	r3, r3, #18
 8009248:	4013      	ands	r3, r2
 800924a:	d1f0      	bne.n	800922e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800924c:	4b4d      	ldr	r3, [pc, #308]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	4a51      	ldr	r2, [pc, #324]	@ (8009398 <HAL_RCC_OscConfig+0x62c>)
 8009252:	4013      	ands	r3, r2
 8009254:	0019      	movs	r1, r3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a1a      	ldr	r2, [r3, #32]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800925e:	431a      	orrs	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009264:	021b      	lsls	r3, r3, #8
 8009266:	431a      	orrs	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800926c:	431a      	orrs	r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009272:	431a      	orrs	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009278:	431a      	orrs	r2, r3
 800927a:	4b42      	ldr	r3, [pc, #264]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 800927c:	430a      	orrs	r2, r1
 800927e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009280:	4b40      	ldr	r3, [pc, #256]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	4b3f      	ldr	r3, [pc, #252]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 8009286:	2180      	movs	r1, #128	@ 0x80
 8009288:	0449      	lsls	r1, r1, #17
 800928a:	430a      	orrs	r2, r1
 800928c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800928e:	4b3d      	ldr	r3, [pc, #244]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 8009290:	68da      	ldr	r2, [r3, #12]
 8009292:	4b3c      	ldr	r3, [pc, #240]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 8009294:	2180      	movs	r1, #128	@ 0x80
 8009296:	0549      	lsls	r1, r1, #21
 8009298:	430a      	orrs	r2, r1
 800929a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800929c:	f7fd f8e2 	bl	8006464 <HAL_GetTick>
 80092a0:	0003      	movs	r3, r0
 80092a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092a4:	e008      	b.n	80092b8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092a6:	f7fd f8dd 	bl	8006464 <HAL_GetTick>
 80092aa:	0002      	movs	r2, r0
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	d901      	bls.n	80092b8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80092b4:	2303      	movs	r3, #3
 80092b6:	e061      	b.n	800937c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092b8:	4b32      	ldr	r3, [pc, #200]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	2380      	movs	r3, #128	@ 0x80
 80092be:	049b      	lsls	r3, r3, #18
 80092c0:	4013      	ands	r3, r2
 80092c2:	d0f0      	beq.n	80092a6 <HAL_RCC_OscConfig+0x53a>
 80092c4:	e059      	b.n	800937a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092c6:	4b2f      	ldr	r3, [pc, #188]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	4b2e      	ldr	r3, [pc, #184]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 80092cc:	4931      	ldr	r1, [pc, #196]	@ (8009394 <HAL_RCC_OscConfig+0x628>)
 80092ce:	400a      	ands	r2, r1
 80092d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092d2:	f7fd f8c7 	bl	8006464 <HAL_GetTick>
 80092d6:	0003      	movs	r3, r0
 80092d8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80092da:	e008      	b.n	80092ee <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092dc:	f7fd f8c2 	bl	8006464 <HAL_GetTick>
 80092e0:	0002      	movs	r2, r0
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d901      	bls.n	80092ee <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80092ea:	2303      	movs	r3, #3
 80092ec:	e046      	b.n	800937c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80092ee:	4b25      	ldr	r3, [pc, #148]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	2380      	movs	r3, #128	@ 0x80
 80092f4:	049b      	lsls	r3, r3, #18
 80092f6:	4013      	ands	r3, r2
 80092f8:	d1f0      	bne.n	80092dc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80092fa:	4b22      	ldr	r3, [pc, #136]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 80092fc:	68da      	ldr	r2, [r3, #12]
 80092fe:	4b21      	ldr	r3, [pc, #132]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 8009300:	4926      	ldr	r1, [pc, #152]	@ (800939c <HAL_RCC_OscConfig+0x630>)
 8009302:	400a      	ands	r2, r1
 8009304:	60da      	str	r2, [r3, #12]
 8009306:	e038      	b.n	800937a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	69db      	ldr	r3, [r3, #28]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d101      	bne.n	8009314 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	e033      	b.n	800937c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8009314:	4b1b      	ldr	r3, [pc, #108]	@ (8009384 <HAL_RCC_OscConfig+0x618>)
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	2203      	movs	r2, #3
 800931e:	401a      	ands	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a1b      	ldr	r3, [r3, #32]
 8009324:	429a      	cmp	r2, r3
 8009326:	d126      	bne.n	8009376 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	2270      	movs	r2, #112	@ 0x70
 800932c:	401a      	ands	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009332:	429a      	cmp	r2, r3
 8009334:	d11f      	bne.n	8009376 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009336:	697a      	ldr	r2, [r7, #20]
 8009338:	23fe      	movs	r3, #254	@ 0xfe
 800933a:	01db      	lsls	r3, r3, #7
 800933c:	401a      	ands	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009342:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009344:	429a      	cmp	r2, r3
 8009346:	d116      	bne.n	8009376 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009348:	697a      	ldr	r2, [r7, #20]
 800934a:	23f8      	movs	r3, #248	@ 0xf8
 800934c:	039b      	lsls	r3, r3, #14
 800934e:	401a      	ands	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009354:	429a      	cmp	r2, r3
 8009356:	d10e      	bne.n	8009376 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	23e0      	movs	r3, #224	@ 0xe0
 800935c:	051b      	lsls	r3, r3, #20
 800935e:	401a      	ands	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009364:	429a      	cmp	r2, r3
 8009366:	d106      	bne.n	8009376 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	0f5b      	lsrs	r3, r3, #29
 800936c:	075a      	lsls	r2, r3, #29
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009372:	429a      	cmp	r2, r3
 8009374:	d001      	beq.n	800937a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8009376:	2301      	movs	r3, #1
 8009378:	e000      	b.n	800937c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800937a:	2300      	movs	r3, #0
}
 800937c:	0018      	movs	r0, r3
 800937e:	46bd      	mov	sp, r7
 8009380:	b008      	add	sp, #32
 8009382:	bd80      	pop	{r7, pc}
 8009384:	40021000 	.word	0x40021000
 8009388:	40007000 	.word	0x40007000
 800938c:	00001388 	.word	0x00001388
 8009390:	efffffff 	.word	0xefffffff
 8009394:	feffffff 	.word	0xfeffffff
 8009398:	11c1808c 	.word	0x11c1808c
 800939c:	eefefffc 	.word	0xeefefffc

080093a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d101      	bne.n	80093b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e0e9      	b.n	8009588 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80093b4:	4b76      	ldr	r3, [pc, #472]	@ (8009590 <HAL_RCC_ClockConfig+0x1f0>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2207      	movs	r2, #7
 80093ba:	4013      	ands	r3, r2
 80093bc:	683a      	ldr	r2, [r7, #0]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d91e      	bls.n	8009400 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093c2:	4b73      	ldr	r3, [pc, #460]	@ (8009590 <HAL_RCC_ClockConfig+0x1f0>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2207      	movs	r2, #7
 80093c8:	4393      	bics	r3, r2
 80093ca:	0019      	movs	r1, r3
 80093cc:	4b70      	ldr	r3, [pc, #448]	@ (8009590 <HAL_RCC_ClockConfig+0x1f0>)
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	430a      	orrs	r2, r1
 80093d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80093d4:	f7fd f846 	bl	8006464 <HAL_GetTick>
 80093d8:	0003      	movs	r3, r0
 80093da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80093dc:	e009      	b.n	80093f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093de:	f7fd f841 	bl	8006464 <HAL_GetTick>
 80093e2:	0002      	movs	r2, r0
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	4a6a      	ldr	r2, [pc, #424]	@ (8009594 <HAL_RCC_ClockConfig+0x1f4>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d901      	bls.n	80093f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80093ee:	2303      	movs	r3, #3
 80093f0:	e0ca      	b.n	8009588 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80093f2:	4b67      	ldr	r3, [pc, #412]	@ (8009590 <HAL_RCC_ClockConfig+0x1f0>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2207      	movs	r2, #7
 80093f8:	4013      	ands	r3, r2
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d1ee      	bne.n	80093de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2202      	movs	r2, #2
 8009406:	4013      	ands	r3, r2
 8009408:	d015      	beq.n	8009436 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2204      	movs	r2, #4
 8009410:	4013      	ands	r3, r2
 8009412:	d006      	beq.n	8009422 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8009414:	4b60      	ldr	r3, [pc, #384]	@ (8009598 <HAL_RCC_ClockConfig+0x1f8>)
 8009416:	689a      	ldr	r2, [r3, #8]
 8009418:	4b5f      	ldr	r3, [pc, #380]	@ (8009598 <HAL_RCC_ClockConfig+0x1f8>)
 800941a:	21e0      	movs	r1, #224	@ 0xe0
 800941c:	01c9      	lsls	r1, r1, #7
 800941e:	430a      	orrs	r2, r1
 8009420:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009422:	4b5d      	ldr	r3, [pc, #372]	@ (8009598 <HAL_RCC_ClockConfig+0x1f8>)
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	4a5d      	ldr	r2, [pc, #372]	@ (800959c <HAL_RCC_ClockConfig+0x1fc>)
 8009428:	4013      	ands	r3, r2
 800942a:	0019      	movs	r1, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689a      	ldr	r2, [r3, #8]
 8009430:	4b59      	ldr	r3, [pc, #356]	@ (8009598 <HAL_RCC_ClockConfig+0x1f8>)
 8009432:	430a      	orrs	r2, r1
 8009434:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2201      	movs	r2, #1
 800943c:	4013      	ands	r3, r2
 800943e:	d057      	beq.n	80094f0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d107      	bne.n	8009458 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009448:	4b53      	ldr	r3, [pc, #332]	@ (8009598 <HAL_RCC_ClockConfig+0x1f8>)
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	2380      	movs	r3, #128	@ 0x80
 800944e:	029b      	lsls	r3, r3, #10
 8009450:	4013      	ands	r3, r2
 8009452:	d12b      	bne.n	80094ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	e097      	b.n	8009588 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	2b02      	cmp	r3, #2
 800945e:	d107      	bne.n	8009470 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009460:	4b4d      	ldr	r3, [pc, #308]	@ (8009598 <HAL_RCC_ClockConfig+0x1f8>)
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	2380      	movs	r3, #128	@ 0x80
 8009466:	049b      	lsls	r3, r3, #18
 8009468:	4013      	ands	r3, r2
 800946a:	d11f      	bne.n	80094ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	e08b      	b.n	8009588 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d107      	bne.n	8009488 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009478:	4b47      	ldr	r3, [pc, #284]	@ (8009598 <HAL_RCC_ClockConfig+0x1f8>)
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	2380      	movs	r3, #128	@ 0x80
 800947e:	00db      	lsls	r3, r3, #3
 8009480:	4013      	ands	r3, r2
 8009482:	d113      	bne.n	80094ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e07f      	b.n	8009588 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	2b03      	cmp	r3, #3
 800948e:	d106      	bne.n	800949e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009490:	4b41      	ldr	r3, [pc, #260]	@ (8009598 <HAL_RCC_ClockConfig+0x1f8>)
 8009492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009494:	2202      	movs	r2, #2
 8009496:	4013      	ands	r3, r2
 8009498:	d108      	bne.n	80094ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e074      	b.n	8009588 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800949e:	4b3e      	ldr	r3, [pc, #248]	@ (8009598 <HAL_RCC_ClockConfig+0x1f8>)
 80094a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094a2:	2202      	movs	r2, #2
 80094a4:	4013      	ands	r3, r2
 80094a6:	d101      	bne.n	80094ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e06d      	b.n	8009588 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80094ac:	4b3a      	ldr	r3, [pc, #232]	@ (8009598 <HAL_RCC_ClockConfig+0x1f8>)
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	2207      	movs	r2, #7
 80094b2:	4393      	bics	r3, r2
 80094b4:	0019      	movs	r1, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	685a      	ldr	r2, [r3, #4]
 80094ba:	4b37      	ldr	r3, [pc, #220]	@ (8009598 <HAL_RCC_ClockConfig+0x1f8>)
 80094bc:	430a      	orrs	r2, r1
 80094be:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094c0:	f7fc ffd0 	bl	8006464 <HAL_GetTick>
 80094c4:	0003      	movs	r3, r0
 80094c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094c8:	e009      	b.n	80094de <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094ca:	f7fc ffcb 	bl	8006464 <HAL_GetTick>
 80094ce:	0002      	movs	r2, r0
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	4a2f      	ldr	r2, [pc, #188]	@ (8009594 <HAL_RCC_ClockConfig+0x1f4>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d901      	bls.n	80094de <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80094da:	2303      	movs	r3, #3
 80094dc:	e054      	b.n	8009588 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094de:	4b2e      	ldr	r3, [pc, #184]	@ (8009598 <HAL_RCC_ClockConfig+0x1f8>)
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	2238      	movs	r2, #56	@ 0x38
 80094e4:	401a      	ands	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	00db      	lsls	r3, r3, #3
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d1ec      	bne.n	80094ca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80094f0:	4b27      	ldr	r3, [pc, #156]	@ (8009590 <HAL_RCC_ClockConfig+0x1f0>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2207      	movs	r2, #7
 80094f6:	4013      	ands	r3, r2
 80094f8:	683a      	ldr	r2, [r7, #0]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d21e      	bcs.n	800953c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094fe:	4b24      	ldr	r3, [pc, #144]	@ (8009590 <HAL_RCC_ClockConfig+0x1f0>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2207      	movs	r2, #7
 8009504:	4393      	bics	r3, r2
 8009506:	0019      	movs	r1, r3
 8009508:	4b21      	ldr	r3, [pc, #132]	@ (8009590 <HAL_RCC_ClockConfig+0x1f0>)
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	430a      	orrs	r2, r1
 800950e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009510:	f7fc ffa8 	bl	8006464 <HAL_GetTick>
 8009514:	0003      	movs	r3, r0
 8009516:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009518:	e009      	b.n	800952e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800951a:	f7fc ffa3 	bl	8006464 <HAL_GetTick>
 800951e:	0002      	movs	r2, r0
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	4a1b      	ldr	r2, [pc, #108]	@ (8009594 <HAL_RCC_ClockConfig+0x1f4>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d901      	bls.n	800952e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800952a:	2303      	movs	r3, #3
 800952c:	e02c      	b.n	8009588 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800952e:	4b18      	ldr	r3, [pc, #96]	@ (8009590 <HAL_RCC_ClockConfig+0x1f0>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2207      	movs	r2, #7
 8009534:	4013      	ands	r3, r2
 8009536:	683a      	ldr	r2, [r7, #0]
 8009538:	429a      	cmp	r2, r3
 800953a:	d1ee      	bne.n	800951a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2204      	movs	r2, #4
 8009542:	4013      	ands	r3, r2
 8009544:	d009      	beq.n	800955a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8009546:	4b14      	ldr	r3, [pc, #80]	@ (8009598 <HAL_RCC_ClockConfig+0x1f8>)
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	4a15      	ldr	r2, [pc, #84]	@ (80095a0 <HAL_RCC_ClockConfig+0x200>)
 800954c:	4013      	ands	r3, r2
 800954e:	0019      	movs	r1, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	68da      	ldr	r2, [r3, #12]
 8009554:	4b10      	ldr	r3, [pc, #64]	@ (8009598 <HAL_RCC_ClockConfig+0x1f8>)
 8009556:	430a      	orrs	r2, r1
 8009558:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800955a:	f000 f829 	bl	80095b0 <HAL_RCC_GetSysClockFreq>
 800955e:	0001      	movs	r1, r0
 8009560:	4b0d      	ldr	r3, [pc, #52]	@ (8009598 <HAL_RCC_ClockConfig+0x1f8>)
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	0a1b      	lsrs	r3, r3, #8
 8009566:	220f      	movs	r2, #15
 8009568:	401a      	ands	r2, r3
 800956a:	4b0e      	ldr	r3, [pc, #56]	@ (80095a4 <HAL_RCC_ClockConfig+0x204>)
 800956c:	0092      	lsls	r2, r2, #2
 800956e:	58d3      	ldr	r3, [r2, r3]
 8009570:	221f      	movs	r2, #31
 8009572:	4013      	ands	r3, r2
 8009574:	000a      	movs	r2, r1
 8009576:	40da      	lsrs	r2, r3
 8009578:	4b0b      	ldr	r3, [pc, #44]	@ (80095a8 <HAL_RCC_ClockConfig+0x208>)
 800957a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800957c:	4b0b      	ldr	r3, [pc, #44]	@ (80095ac <HAL_RCC_ClockConfig+0x20c>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	0018      	movs	r0, r3
 8009582:	f7fc ff13 	bl	80063ac <HAL_InitTick>
 8009586:	0003      	movs	r3, r0
}
 8009588:	0018      	movs	r0, r3
 800958a:	46bd      	mov	sp, r7
 800958c:	b004      	add	sp, #16
 800958e:	bd80      	pop	{r7, pc}
 8009590:	40022000 	.word	0x40022000
 8009594:	00001388 	.word	0x00001388
 8009598:	40021000 	.word	0x40021000
 800959c:	fffff0ff 	.word	0xfffff0ff
 80095a0:	ffff8fff 	.word	0xffff8fff
 80095a4:	0800dfbc 	.word	0x0800dfbc
 80095a8:	2000044c 	.word	0x2000044c
 80095ac:	20000450 	.word	0x20000450

080095b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80095b6:	4b3c      	ldr	r3, [pc, #240]	@ (80096a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	2238      	movs	r2, #56	@ 0x38
 80095bc:	4013      	ands	r3, r2
 80095be:	d10f      	bne.n	80095e0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80095c0:	4b39      	ldr	r3, [pc, #228]	@ (80096a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	0adb      	lsrs	r3, r3, #11
 80095c6:	2207      	movs	r2, #7
 80095c8:	4013      	ands	r3, r2
 80095ca:	2201      	movs	r2, #1
 80095cc:	409a      	lsls	r2, r3
 80095ce:	0013      	movs	r3, r2
 80095d0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80095d2:	6839      	ldr	r1, [r7, #0]
 80095d4:	4835      	ldr	r0, [pc, #212]	@ (80096ac <HAL_RCC_GetSysClockFreq+0xfc>)
 80095d6:	f7f6 fd95 	bl	8000104 <__udivsi3>
 80095da:	0003      	movs	r3, r0
 80095dc:	613b      	str	r3, [r7, #16]
 80095de:	e05d      	b.n	800969c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80095e0:	4b31      	ldr	r3, [pc, #196]	@ (80096a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	2238      	movs	r2, #56	@ 0x38
 80095e6:	4013      	ands	r3, r2
 80095e8:	2b08      	cmp	r3, #8
 80095ea:	d102      	bne.n	80095f2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80095ec:	4b30      	ldr	r3, [pc, #192]	@ (80096b0 <HAL_RCC_GetSysClockFreq+0x100>)
 80095ee:	613b      	str	r3, [r7, #16]
 80095f0:	e054      	b.n	800969c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80095f2:	4b2d      	ldr	r3, [pc, #180]	@ (80096a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	2238      	movs	r2, #56	@ 0x38
 80095f8:	4013      	ands	r3, r2
 80095fa:	2b10      	cmp	r3, #16
 80095fc:	d138      	bne.n	8009670 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80095fe:	4b2a      	ldr	r3, [pc, #168]	@ (80096a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	2203      	movs	r2, #3
 8009604:	4013      	ands	r3, r2
 8009606:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009608:	4b27      	ldr	r3, [pc, #156]	@ (80096a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	091b      	lsrs	r3, r3, #4
 800960e:	2207      	movs	r2, #7
 8009610:	4013      	ands	r3, r2
 8009612:	3301      	adds	r3, #1
 8009614:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2b03      	cmp	r3, #3
 800961a:	d10d      	bne.n	8009638 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800961c:	68b9      	ldr	r1, [r7, #8]
 800961e:	4824      	ldr	r0, [pc, #144]	@ (80096b0 <HAL_RCC_GetSysClockFreq+0x100>)
 8009620:	f7f6 fd70 	bl	8000104 <__udivsi3>
 8009624:	0003      	movs	r3, r0
 8009626:	0019      	movs	r1, r3
 8009628:	4b1f      	ldr	r3, [pc, #124]	@ (80096a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	0a1b      	lsrs	r3, r3, #8
 800962e:	227f      	movs	r2, #127	@ 0x7f
 8009630:	4013      	ands	r3, r2
 8009632:	434b      	muls	r3, r1
 8009634:	617b      	str	r3, [r7, #20]
        break;
 8009636:	e00d      	b.n	8009654 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8009638:	68b9      	ldr	r1, [r7, #8]
 800963a:	481c      	ldr	r0, [pc, #112]	@ (80096ac <HAL_RCC_GetSysClockFreq+0xfc>)
 800963c:	f7f6 fd62 	bl	8000104 <__udivsi3>
 8009640:	0003      	movs	r3, r0
 8009642:	0019      	movs	r1, r3
 8009644:	4b18      	ldr	r3, [pc, #96]	@ (80096a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	0a1b      	lsrs	r3, r3, #8
 800964a:	227f      	movs	r2, #127	@ 0x7f
 800964c:	4013      	ands	r3, r2
 800964e:	434b      	muls	r3, r1
 8009650:	617b      	str	r3, [r7, #20]
        break;
 8009652:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8009654:	4b14      	ldr	r3, [pc, #80]	@ (80096a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	0f5b      	lsrs	r3, r3, #29
 800965a:	2207      	movs	r2, #7
 800965c:	4013      	ands	r3, r2
 800965e:	3301      	adds	r3, #1
 8009660:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8009662:	6879      	ldr	r1, [r7, #4]
 8009664:	6978      	ldr	r0, [r7, #20]
 8009666:	f7f6 fd4d 	bl	8000104 <__udivsi3>
 800966a:	0003      	movs	r3, r0
 800966c:	613b      	str	r3, [r7, #16]
 800966e:	e015      	b.n	800969c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009670:	4b0d      	ldr	r3, [pc, #52]	@ (80096a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	2238      	movs	r2, #56	@ 0x38
 8009676:	4013      	ands	r3, r2
 8009678:	2b20      	cmp	r3, #32
 800967a:	d103      	bne.n	8009684 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800967c:	2380      	movs	r3, #128	@ 0x80
 800967e:	021b      	lsls	r3, r3, #8
 8009680:	613b      	str	r3, [r7, #16]
 8009682:	e00b      	b.n	800969c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009684:	4b08      	ldr	r3, [pc, #32]	@ (80096a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	2238      	movs	r2, #56	@ 0x38
 800968a:	4013      	ands	r3, r2
 800968c:	2b18      	cmp	r3, #24
 800968e:	d103      	bne.n	8009698 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8009690:	23fa      	movs	r3, #250	@ 0xfa
 8009692:	01db      	lsls	r3, r3, #7
 8009694:	613b      	str	r3, [r7, #16]
 8009696:	e001      	b.n	800969c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8009698:	2300      	movs	r3, #0
 800969a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800969c:	693b      	ldr	r3, [r7, #16]
}
 800969e:	0018      	movs	r0, r3
 80096a0:	46bd      	mov	sp, r7
 80096a2:	b006      	add	sp, #24
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	46c0      	nop			@ (mov r8, r8)
 80096a8:	40021000 	.word	0x40021000
 80096ac:	00f42400 	.word	0x00f42400
 80096b0:	007a1200 	.word	0x007a1200

080096b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80096b8:	4b02      	ldr	r3, [pc, #8]	@ (80096c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80096ba:	681b      	ldr	r3, [r3, #0]
}
 80096bc:	0018      	movs	r0, r3
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	46c0      	nop			@ (mov r8, r8)
 80096c4:	2000044c 	.word	0x2000044c

080096c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80096c8:	b5b0      	push	{r4, r5, r7, lr}
 80096ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80096cc:	f7ff fff2 	bl	80096b4 <HAL_RCC_GetHCLKFreq>
 80096d0:	0004      	movs	r4, r0
 80096d2:	f7ff fb3f 	bl	8008d54 <LL_RCC_GetAPB1Prescaler>
 80096d6:	0003      	movs	r3, r0
 80096d8:	0b1a      	lsrs	r2, r3, #12
 80096da:	4b05      	ldr	r3, [pc, #20]	@ (80096f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80096dc:	0092      	lsls	r2, r2, #2
 80096de:	58d3      	ldr	r3, [r2, r3]
 80096e0:	221f      	movs	r2, #31
 80096e2:	4013      	ands	r3, r2
 80096e4:	40dc      	lsrs	r4, r3
 80096e6:	0023      	movs	r3, r4
}
 80096e8:	0018      	movs	r0, r3
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bdb0      	pop	{r4, r5, r7, pc}
 80096ee:	46c0      	nop			@ (mov r8, r8)
 80096f0:	0800dffc 	.word	0x0800dffc

080096f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b086      	sub	sp, #24
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80096fc:	2313      	movs	r3, #19
 80096fe:	18fb      	adds	r3, r7, r3
 8009700:	2200      	movs	r2, #0
 8009702:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009704:	2312      	movs	r3, #18
 8009706:	18fb      	adds	r3, r7, r3
 8009708:	2200      	movs	r2, #0
 800970a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	2380      	movs	r3, #128	@ 0x80
 8009712:	029b      	lsls	r3, r3, #10
 8009714:	4013      	ands	r3, r2
 8009716:	d100      	bne.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8009718:	e0a3      	b.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800971a:	2011      	movs	r0, #17
 800971c:	183b      	adds	r3, r7, r0
 800971e:	2200      	movs	r2, #0
 8009720:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009722:	4ba5      	ldr	r3, [pc, #660]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009724:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009726:	2380      	movs	r3, #128	@ 0x80
 8009728:	055b      	lsls	r3, r3, #21
 800972a:	4013      	ands	r3, r2
 800972c:	d110      	bne.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800972e:	4ba2      	ldr	r3, [pc, #648]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009730:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009732:	4ba1      	ldr	r3, [pc, #644]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009734:	2180      	movs	r1, #128	@ 0x80
 8009736:	0549      	lsls	r1, r1, #21
 8009738:	430a      	orrs	r2, r1
 800973a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800973c:	4b9e      	ldr	r3, [pc, #632]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800973e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009740:	2380      	movs	r3, #128	@ 0x80
 8009742:	055b      	lsls	r3, r3, #21
 8009744:	4013      	ands	r3, r2
 8009746:	60bb      	str	r3, [r7, #8]
 8009748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800974a:	183b      	adds	r3, r7, r0
 800974c:	2201      	movs	r2, #1
 800974e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009750:	4b9a      	ldr	r3, [pc, #616]	@ (80099bc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	4b99      	ldr	r3, [pc, #612]	@ (80099bc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8009756:	2180      	movs	r1, #128	@ 0x80
 8009758:	0049      	lsls	r1, r1, #1
 800975a:	430a      	orrs	r2, r1
 800975c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800975e:	f7fc fe81 	bl	8006464 <HAL_GetTick>
 8009762:	0003      	movs	r3, r0
 8009764:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009766:	e00b      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009768:	f7fc fe7c 	bl	8006464 <HAL_GetTick>
 800976c:	0002      	movs	r2, r0
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	1ad3      	subs	r3, r2, r3
 8009772:	2b02      	cmp	r3, #2
 8009774:	d904      	bls.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8009776:	2313      	movs	r3, #19
 8009778:	18fb      	adds	r3, r7, r3
 800977a:	2203      	movs	r2, #3
 800977c:	701a      	strb	r2, [r3, #0]
        break;
 800977e:	e005      	b.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009780:	4b8e      	ldr	r3, [pc, #568]	@ (80099bc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	2380      	movs	r3, #128	@ 0x80
 8009786:	005b      	lsls	r3, r3, #1
 8009788:	4013      	ands	r3, r2
 800978a:	d0ed      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800978c:	2313      	movs	r3, #19
 800978e:	18fb      	adds	r3, r7, r3
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d154      	bne.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009796:	4b88      	ldr	r3, [pc, #544]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009798:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800979a:	23c0      	movs	r3, #192	@ 0xc0
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4013      	ands	r3, r2
 80097a0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d019      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ac:	697a      	ldr	r2, [r7, #20]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d014      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80097b2:	4b81      	ldr	r3, [pc, #516]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097b6:	4a82      	ldr	r2, [pc, #520]	@ (80099c0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80097b8:	4013      	ands	r3, r2
 80097ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80097bc:	4b7e      	ldr	r3, [pc, #504]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80097c0:	4b7d      	ldr	r3, [pc, #500]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097c2:	2180      	movs	r1, #128	@ 0x80
 80097c4:	0249      	lsls	r1, r1, #9
 80097c6:	430a      	orrs	r2, r1
 80097c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80097ca:	4b7b      	ldr	r3, [pc, #492]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80097ce:	4b7a      	ldr	r3, [pc, #488]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097d0:	497c      	ldr	r1, [pc, #496]	@ (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80097d2:	400a      	ands	r2, r1
 80097d4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80097d6:	4b78      	ldr	r3, [pc, #480]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097d8:	697a      	ldr	r2, [r7, #20]
 80097da:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	2201      	movs	r2, #1
 80097e0:	4013      	ands	r3, r2
 80097e2:	d016      	beq.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097e4:	f7fc fe3e 	bl	8006464 <HAL_GetTick>
 80097e8:	0003      	movs	r3, r0
 80097ea:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097ec:	e00c      	b.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097ee:	f7fc fe39 	bl	8006464 <HAL_GetTick>
 80097f2:	0002      	movs	r2, r0
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	4a73      	ldr	r2, [pc, #460]	@ (80099c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d904      	bls.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80097fe:	2313      	movs	r3, #19
 8009800:	18fb      	adds	r3, r7, r3
 8009802:	2203      	movs	r2, #3
 8009804:	701a      	strb	r2, [r3, #0]
            break;
 8009806:	e004      	b.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009808:	4b6b      	ldr	r3, [pc, #428]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800980a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800980c:	2202      	movs	r2, #2
 800980e:	4013      	ands	r3, r2
 8009810:	d0ed      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8009812:	2313      	movs	r3, #19
 8009814:	18fb      	adds	r3, r7, r3
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d10a      	bne.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800981c:	4b66      	ldr	r3, [pc, #408]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800981e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009820:	4a67      	ldr	r2, [pc, #412]	@ (80099c0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8009822:	4013      	ands	r3, r2
 8009824:	0019      	movs	r1, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800982a:	4b63      	ldr	r3, [pc, #396]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800982c:	430a      	orrs	r2, r1
 800982e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009830:	e00c      	b.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009832:	2312      	movs	r3, #18
 8009834:	18fb      	adds	r3, r7, r3
 8009836:	2213      	movs	r2, #19
 8009838:	18ba      	adds	r2, r7, r2
 800983a:	7812      	ldrb	r2, [r2, #0]
 800983c:	701a      	strb	r2, [r3, #0]
 800983e:	e005      	b.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009840:	2312      	movs	r3, #18
 8009842:	18fb      	adds	r3, r7, r3
 8009844:	2213      	movs	r2, #19
 8009846:	18ba      	adds	r2, r7, r2
 8009848:	7812      	ldrb	r2, [r2, #0]
 800984a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800984c:	2311      	movs	r3, #17
 800984e:	18fb      	adds	r3, r7, r3
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d105      	bne.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009856:	4b58      	ldr	r3, [pc, #352]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009858:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800985a:	4b57      	ldr	r3, [pc, #348]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800985c:	495b      	ldr	r1, [pc, #364]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800985e:	400a      	ands	r2, r1
 8009860:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2201      	movs	r2, #1
 8009868:	4013      	ands	r3, r2
 800986a:	d009      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800986c:	4b52      	ldr	r3, [pc, #328]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800986e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009870:	2203      	movs	r2, #3
 8009872:	4393      	bics	r3, r2
 8009874:	0019      	movs	r1, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	4b4f      	ldr	r3, [pc, #316]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800987c:	430a      	orrs	r2, r1
 800987e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2210      	movs	r2, #16
 8009886:	4013      	ands	r3, r2
 8009888:	d009      	beq.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800988a:	4b4b      	ldr	r3, [pc, #300]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800988c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800988e:	4a50      	ldr	r2, [pc, #320]	@ (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8009890:	4013      	ands	r3, r2
 8009892:	0019      	movs	r1, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	689a      	ldr	r2, [r3, #8]
 8009898:	4b47      	ldr	r3, [pc, #284]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800989a:	430a      	orrs	r2, r1
 800989c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	2380      	movs	r3, #128	@ 0x80
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4013      	ands	r3, r2
 80098a8:	d009      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80098aa:	4b43      	ldr	r3, [pc, #268]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80098ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ae:	4a49      	ldr	r2, [pc, #292]	@ (80099d4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80098b0:	4013      	ands	r3, r2
 80098b2:	0019      	movs	r1, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	695a      	ldr	r2, [r3, #20]
 80098b8:	4b3f      	ldr	r3, [pc, #252]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80098ba:	430a      	orrs	r2, r1
 80098bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	2380      	movs	r3, #128	@ 0x80
 80098c4:	00db      	lsls	r3, r3, #3
 80098c6:	4013      	ands	r3, r2
 80098c8:	d009      	beq.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80098ca:	4b3b      	ldr	r3, [pc, #236]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80098cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ce:	4a42      	ldr	r2, [pc, #264]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80098d0:	4013      	ands	r3, r2
 80098d2:	0019      	movs	r1, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	699a      	ldr	r2, [r3, #24]
 80098d8:	4b37      	ldr	r3, [pc, #220]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80098da:	430a      	orrs	r2, r1
 80098dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2220      	movs	r2, #32
 80098e4:	4013      	ands	r3, r2
 80098e6:	d009      	beq.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80098e8:	4b33      	ldr	r3, [pc, #204]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80098ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ec:	4a3b      	ldr	r2, [pc, #236]	@ (80099dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80098ee:	4013      	ands	r3, r2
 80098f0:	0019      	movs	r1, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68da      	ldr	r2, [r3, #12]
 80098f6:	4b30      	ldr	r3, [pc, #192]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80098f8:	430a      	orrs	r2, r1
 80098fa:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	2380      	movs	r3, #128	@ 0x80
 8009902:	01db      	lsls	r3, r3, #7
 8009904:	4013      	ands	r3, r2
 8009906:	d015      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009908:	4b2b      	ldr	r3, [pc, #172]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800990a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	0899      	lsrs	r1, r3, #2
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	69da      	ldr	r2, [r3, #28]
 8009914:	4b28      	ldr	r3, [pc, #160]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009916:	430a      	orrs	r2, r1
 8009918:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	69da      	ldr	r2, [r3, #28]
 800991e:	2380      	movs	r3, #128	@ 0x80
 8009920:	05db      	lsls	r3, r3, #23
 8009922:	429a      	cmp	r2, r3
 8009924:	d106      	bne.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009926:	4b24      	ldr	r3, [pc, #144]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009928:	68da      	ldr	r2, [r3, #12]
 800992a:	4b23      	ldr	r3, [pc, #140]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800992c:	2180      	movs	r1, #128	@ 0x80
 800992e:	0249      	lsls	r1, r1, #9
 8009930:	430a      	orrs	r2, r1
 8009932:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	2380      	movs	r3, #128	@ 0x80
 800993a:	039b      	lsls	r3, r3, #14
 800993c:	4013      	ands	r3, r2
 800993e:	d016      	beq.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8009940:	4b1d      	ldr	r3, [pc, #116]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009944:	4a26      	ldr	r2, [pc, #152]	@ (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8009946:	4013      	ands	r3, r2
 8009948:	0019      	movs	r1, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a1a      	ldr	r2, [r3, #32]
 800994e:	4b1a      	ldr	r3, [pc, #104]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009950:	430a      	orrs	r2, r1
 8009952:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6a1a      	ldr	r2, [r3, #32]
 8009958:	2380      	movs	r3, #128	@ 0x80
 800995a:	03db      	lsls	r3, r3, #15
 800995c:	429a      	cmp	r2, r3
 800995e:	d106      	bne.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8009960:	4b15      	ldr	r3, [pc, #84]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009962:	68da      	ldr	r2, [r3, #12]
 8009964:	4b14      	ldr	r3, [pc, #80]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009966:	2180      	movs	r1, #128	@ 0x80
 8009968:	0449      	lsls	r1, r1, #17
 800996a:	430a      	orrs	r2, r1
 800996c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	2380      	movs	r3, #128	@ 0x80
 8009974:	011b      	lsls	r3, r3, #4
 8009976:	4013      	ands	r3, r2
 8009978:	d016      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800997a:	4b0f      	ldr	r3, [pc, #60]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800997c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800997e:	4a19      	ldr	r2, [pc, #100]	@ (80099e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009980:	4013      	ands	r3, r2
 8009982:	0019      	movs	r1, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	691a      	ldr	r2, [r3, #16]
 8009988:	4b0b      	ldr	r3, [pc, #44]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800998a:	430a      	orrs	r2, r1
 800998c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	691a      	ldr	r2, [r3, #16]
 8009992:	2380      	movs	r3, #128	@ 0x80
 8009994:	01db      	lsls	r3, r3, #7
 8009996:	429a      	cmp	r2, r3
 8009998:	d106      	bne.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800999a:	4b07      	ldr	r3, [pc, #28]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800999c:	68da      	ldr	r2, [r3, #12]
 800999e:	4b06      	ldr	r3, [pc, #24]	@ (80099b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80099a0:	2180      	movs	r1, #128	@ 0x80
 80099a2:	0249      	lsls	r1, r1, #9
 80099a4:	430a      	orrs	r2, r1
 80099a6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80099a8:	2312      	movs	r3, #18
 80099aa:	18fb      	adds	r3, r7, r3
 80099ac:	781b      	ldrb	r3, [r3, #0]
}
 80099ae:	0018      	movs	r0, r3
 80099b0:	46bd      	mov	sp, r7
 80099b2:	b006      	add	sp, #24
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	46c0      	nop			@ (mov r8, r8)
 80099b8:	40021000 	.word	0x40021000
 80099bc:	40007000 	.word	0x40007000
 80099c0:	fffffcff 	.word	0xfffffcff
 80099c4:	fffeffff 	.word	0xfffeffff
 80099c8:	00001388 	.word	0x00001388
 80099cc:	efffffff 	.word	0xefffffff
 80099d0:	fffff3ff 	.word	0xfffff3ff
 80099d4:	fff3ffff 	.word	0xfff3ffff
 80099d8:	ffcfffff 	.word	0xffcfffff
 80099dc:	ffffcfff 	.word	0xffffcfff
 80099e0:	ffbfffff 	.word	0xffbfffff
 80099e4:	ffff3fff 	.word	0xffff3fff

080099e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d101      	bne.n	80099fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	e056      	b.n	8009aa8 <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	223d      	movs	r2, #61	@ 0x3d
 80099fe:	5c9b      	ldrb	r3, [r3, r2]
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d113      	bne.n	8009a2e <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	223c      	movs	r2, #60	@ 0x3c
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	0018      	movs	r0, r3
 8009a12:	f002 f8c5 	bl	800bba0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d102      	bne.n	8009a24 <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4a23      	ldr	r2, [pc, #140]	@ (8009ab0 <HAL_TIM_Base_Init+0xc8>)
 8009a22:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	0010      	movs	r0, r2
 8009a2c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	223d      	movs	r2, #61	@ 0x3d
 8009a32:	2102      	movs	r1, #2
 8009a34:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	0019      	movs	r1, r3
 8009a40:	0010      	movs	r0, r2
 8009a42:	f001 fbaf 	bl	800b1a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2248      	movs	r2, #72	@ 0x48
 8009a4a:	2101      	movs	r1, #1
 8009a4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	223e      	movs	r2, #62	@ 0x3e
 8009a52:	2101      	movs	r1, #1
 8009a54:	5499      	strb	r1, [r3, r2]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	223f      	movs	r2, #63	@ 0x3f
 8009a5a:	2101      	movs	r1, #1
 8009a5c:	5499      	strb	r1, [r3, r2]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2240      	movs	r2, #64	@ 0x40
 8009a62:	2101      	movs	r1, #1
 8009a64:	5499      	strb	r1, [r3, r2]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2241      	movs	r2, #65	@ 0x41
 8009a6a:	2101      	movs	r1, #1
 8009a6c:	5499      	strb	r1, [r3, r2]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2242      	movs	r2, #66	@ 0x42
 8009a72:	2101      	movs	r1, #1
 8009a74:	5499      	strb	r1, [r3, r2]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2243      	movs	r2, #67	@ 0x43
 8009a7a:	2101      	movs	r1, #1
 8009a7c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2244      	movs	r2, #68	@ 0x44
 8009a82:	2101      	movs	r1, #1
 8009a84:	5499      	strb	r1, [r3, r2]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2245      	movs	r2, #69	@ 0x45
 8009a8a:	2101      	movs	r1, #1
 8009a8c:	5499      	strb	r1, [r3, r2]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2246      	movs	r2, #70	@ 0x46
 8009a92:	2101      	movs	r1, #1
 8009a94:	5499      	strb	r1, [r3, r2]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2247      	movs	r2, #71	@ 0x47
 8009a9a:	2101      	movs	r1, #1
 8009a9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	223d      	movs	r2, #61	@ 0x3d
 8009aa2:	2101      	movs	r1, #1
 8009aa4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009aa6:	2300      	movs	r3, #0
}
 8009aa8:	0018      	movs	r0, r3
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	b002      	add	sp, #8
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	08005415 	.word	0x08005415

08009ab4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	223d      	movs	r2, #61	@ 0x3d
 8009ac0:	5c9b      	ldrb	r3, [r3, r2]
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d001      	beq.n	8009acc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e035      	b.n	8009b38 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	223d      	movs	r2, #61	@ 0x3d
 8009ad0:	2102      	movs	r1, #2
 8009ad2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a19      	ldr	r2, [pc, #100]	@ (8009b40 <HAL_TIM_Base_Start+0x8c>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d00a      	beq.n	8009af4 <HAL_TIM_Base_Start+0x40>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	2380      	movs	r3, #128	@ 0x80
 8009ae4:	05db      	lsls	r3, r3, #23
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d004      	beq.n	8009af4 <HAL_TIM_Base_Start+0x40>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a15      	ldr	r2, [pc, #84]	@ (8009b44 <HAL_TIM_Base_Start+0x90>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d116      	bne.n	8009b22 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	4a13      	ldr	r2, [pc, #76]	@ (8009b48 <HAL_TIM_Base_Start+0x94>)
 8009afc:	4013      	ands	r3, r2
 8009afe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2b06      	cmp	r3, #6
 8009b04:	d016      	beq.n	8009b34 <HAL_TIM_Base_Start+0x80>
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	2380      	movs	r3, #128	@ 0x80
 8009b0a:	025b      	lsls	r3, r3, #9
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d011      	beq.n	8009b34 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2101      	movs	r1, #1
 8009b1c:	430a      	orrs	r2, r1
 8009b1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b20:	e008      	b.n	8009b34 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2101      	movs	r1, #1
 8009b2e:	430a      	orrs	r2, r1
 8009b30:	601a      	str	r2, [r3, #0]
 8009b32:	e000      	b.n	8009b36 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b34:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	0018      	movs	r0, r3
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	b004      	add	sp, #16
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	40012c00 	.word	0x40012c00
 8009b44:	40000400 	.word	0x40000400
 8009b48:	00010007 	.word	0x00010007

08009b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	223d      	movs	r2, #61	@ 0x3d
 8009b58:	5c9b      	ldrb	r3, [r3, r2]
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d001      	beq.n	8009b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e03d      	b.n	8009be0 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	223d      	movs	r2, #61	@ 0x3d
 8009b68:	2102      	movs	r1, #2
 8009b6a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68da      	ldr	r2, [r3, #12]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2101      	movs	r1, #1
 8009b78:	430a      	orrs	r2, r1
 8009b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a19      	ldr	r2, [pc, #100]	@ (8009be8 <HAL_TIM_Base_Start_IT+0x9c>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d00a      	beq.n	8009b9c <HAL_TIM_Base_Start_IT+0x50>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	2380      	movs	r3, #128	@ 0x80
 8009b8c:	05db      	lsls	r3, r3, #23
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d004      	beq.n	8009b9c <HAL_TIM_Base_Start_IT+0x50>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a15      	ldr	r2, [pc, #84]	@ (8009bec <HAL_TIM_Base_Start_IT+0xa0>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d116      	bne.n	8009bca <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	4a13      	ldr	r2, [pc, #76]	@ (8009bf0 <HAL_TIM_Base_Start_IT+0xa4>)
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2b06      	cmp	r3, #6
 8009bac:	d016      	beq.n	8009bdc <HAL_TIM_Base_Start_IT+0x90>
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	2380      	movs	r3, #128	@ 0x80
 8009bb2:	025b      	lsls	r3, r3, #9
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d011      	beq.n	8009bdc <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2101      	movs	r1, #1
 8009bc4:	430a      	orrs	r2, r1
 8009bc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bc8:	e008      	b.n	8009bdc <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	430a      	orrs	r2, r1
 8009bd8:	601a      	str	r2, [r3, #0]
 8009bda:	e000      	b.n	8009bde <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bdc:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	0018      	movs	r0, r3
 8009be2:	46bd      	mov	sp, r7
 8009be4:	b004      	add	sp, #16
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	40012c00 	.word	0x40012c00
 8009bec:	40000400 	.word	0x40000400
 8009bf0:	00010007 	.word	0x00010007

08009bf4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d101      	bne.n	8009c06 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e056      	b.n	8009cb4 <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	223d      	movs	r2, #61	@ 0x3d
 8009c0a:	5c9b      	ldrb	r3, [r3, r2]
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d113      	bne.n	8009c3a <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	223c      	movs	r2, #60	@ 0x3c
 8009c16:	2100      	movs	r1, #0
 8009c18:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	0018      	movs	r0, r3
 8009c1e:	f001 ffbf 	bl	800bba0 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d102      	bne.n	8009c30 <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4a23      	ldr	r2, [pc, #140]	@ (8009cbc <HAL_TIM_OC_Init+0xc8>)
 8009c2e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	0010      	movs	r0, r2
 8009c38:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	223d      	movs	r2, #61	@ 0x3d
 8009c3e:	2102      	movs	r1, #2
 8009c40:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	3304      	adds	r3, #4
 8009c4a:	0019      	movs	r1, r3
 8009c4c:	0010      	movs	r0, r2
 8009c4e:	f001 faa9 	bl	800b1a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2248      	movs	r2, #72	@ 0x48
 8009c56:	2101      	movs	r1, #1
 8009c58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	223e      	movs	r2, #62	@ 0x3e
 8009c5e:	2101      	movs	r1, #1
 8009c60:	5499      	strb	r1, [r3, r2]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	223f      	movs	r2, #63	@ 0x3f
 8009c66:	2101      	movs	r1, #1
 8009c68:	5499      	strb	r1, [r3, r2]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2240      	movs	r2, #64	@ 0x40
 8009c6e:	2101      	movs	r1, #1
 8009c70:	5499      	strb	r1, [r3, r2]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2241      	movs	r2, #65	@ 0x41
 8009c76:	2101      	movs	r1, #1
 8009c78:	5499      	strb	r1, [r3, r2]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2242      	movs	r2, #66	@ 0x42
 8009c7e:	2101      	movs	r1, #1
 8009c80:	5499      	strb	r1, [r3, r2]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2243      	movs	r2, #67	@ 0x43
 8009c86:	2101      	movs	r1, #1
 8009c88:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2244      	movs	r2, #68	@ 0x44
 8009c8e:	2101      	movs	r1, #1
 8009c90:	5499      	strb	r1, [r3, r2]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2245      	movs	r2, #69	@ 0x45
 8009c96:	2101      	movs	r1, #1
 8009c98:	5499      	strb	r1, [r3, r2]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2246      	movs	r2, #70	@ 0x46
 8009c9e:	2101      	movs	r1, #1
 8009ca0:	5499      	strb	r1, [r3, r2]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2247      	movs	r2, #71	@ 0x47
 8009ca6:	2101      	movs	r1, #1
 8009ca8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	223d      	movs	r2, #61	@ 0x3d
 8009cae:	2101      	movs	r1, #1
 8009cb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	0018      	movs	r0, r3
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	b002      	add	sp, #8
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	08009cc1 	.word	0x08009cc1

08009cc0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009cc8:	46c0      	nop			@ (mov r8, r8)
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	b002      	add	sp, #8
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009cda:	230f      	movs	r3, #15
 8009cdc:	18fb      	adds	r3, r7, r3
 8009cde:	2200      	movs	r2, #0
 8009ce0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d108      	bne.n	8009cfa <HAL_TIM_OC_Start_IT+0x2a>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	223e      	movs	r2, #62	@ 0x3e
 8009cec:	5c9b      	ldrb	r3, [r3, r2]
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	1e5a      	subs	r2, r3, #1
 8009cf4:	4193      	sbcs	r3, r2
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	e037      	b.n	8009d6a <HAL_TIM_OC_Start_IT+0x9a>
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	2b04      	cmp	r3, #4
 8009cfe:	d108      	bne.n	8009d12 <HAL_TIM_OC_Start_IT+0x42>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	223f      	movs	r2, #63	@ 0x3f
 8009d04:	5c9b      	ldrb	r3, [r3, r2]
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	1e5a      	subs	r2, r3, #1
 8009d0c:	4193      	sbcs	r3, r2
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	e02b      	b.n	8009d6a <HAL_TIM_OC_Start_IT+0x9a>
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	2b08      	cmp	r3, #8
 8009d16:	d108      	bne.n	8009d2a <HAL_TIM_OC_Start_IT+0x5a>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2240      	movs	r2, #64	@ 0x40
 8009d1c:	5c9b      	ldrb	r3, [r3, r2]
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	3b01      	subs	r3, #1
 8009d22:	1e5a      	subs	r2, r3, #1
 8009d24:	4193      	sbcs	r3, r2
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	e01f      	b.n	8009d6a <HAL_TIM_OC_Start_IT+0x9a>
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	2b0c      	cmp	r3, #12
 8009d2e:	d108      	bne.n	8009d42 <HAL_TIM_OC_Start_IT+0x72>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2241      	movs	r2, #65	@ 0x41
 8009d34:	5c9b      	ldrb	r3, [r3, r2]
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	1e5a      	subs	r2, r3, #1
 8009d3c:	4193      	sbcs	r3, r2
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	e013      	b.n	8009d6a <HAL_TIM_OC_Start_IT+0x9a>
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	2b10      	cmp	r3, #16
 8009d46:	d108      	bne.n	8009d5a <HAL_TIM_OC_Start_IT+0x8a>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2242      	movs	r2, #66	@ 0x42
 8009d4c:	5c9b      	ldrb	r3, [r3, r2]
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	3b01      	subs	r3, #1
 8009d52:	1e5a      	subs	r2, r3, #1
 8009d54:	4193      	sbcs	r3, r2
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	e007      	b.n	8009d6a <HAL_TIM_OC_Start_IT+0x9a>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2243      	movs	r2, #67	@ 0x43
 8009d5e:	5c9b      	ldrb	r3, [r3, r2]
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	3b01      	subs	r3, #1
 8009d64:	1e5a      	subs	r2, r3, #1
 8009d66:	4193      	sbcs	r3, r2
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d001      	beq.n	8009d72 <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e0c4      	b.n	8009efc <HAL_TIM_OC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d104      	bne.n	8009d82 <HAL_TIM_OC_Start_IT+0xb2>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	223e      	movs	r2, #62	@ 0x3e
 8009d7c:	2102      	movs	r1, #2
 8009d7e:	5499      	strb	r1, [r3, r2]
 8009d80:	e023      	b.n	8009dca <HAL_TIM_OC_Start_IT+0xfa>
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	2b04      	cmp	r3, #4
 8009d86:	d104      	bne.n	8009d92 <HAL_TIM_OC_Start_IT+0xc2>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	223f      	movs	r2, #63	@ 0x3f
 8009d8c:	2102      	movs	r1, #2
 8009d8e:	5499      	strb	r1, [r3, r2]
 8009d90:	e01b      	b.n	8009dca <HAL_TIM_OC_Start_IT+0xfa>
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	2b08      	cmp	r3, #8
 8009d96:	d104      	bne.n	8009da2 <HAL_TIM_OC_Start_IT+0xd2>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2240      	movs	r2, #64	@ 0x40
 8009d9c:	2102      	movs	r1, #2
 8009d9e:	5499      	strb	r1, [r3, r2]
 8009da0:	e013      	b.n	8009dca <HAL_TIM_OC_Start_IT+0xfa>
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	2b0c      	cmp	r3, #12
 8009da6:	d104      	bne.n	8009db2 <HAL_TIM_OC_Start_IT+0xe2>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2241      	movs	r2, #65	@ 0x41
 8009dac:	2102      	movs	r1, #2
 8009dae:	5499      	strb	r1, [r3, r2]
 8009db0:	e00b      	b.n	8009dca <HAL_TIM_OC_Start_IT+0xfa>
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2b10      	cmp	r3, #16
 8009db6:	d104      	bne.n	8009dc2 <HAL_TIM_OC_Start_IT+0xf2>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2242      	movs	r2, #66	@ 0x42
 8009dbc:	2102      	movs	r1, #2
 8009dbe:	5499      	strb	r1, [r3, r2]
 8009dc0:	e003      	b.n	8009dca <HAL_TIM_OC_Start_IT+0xfa>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2243      	movs	r2, #67	@ 0x43
 8009dc6:	2102      	movs	r1, #2
 8009dc8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	2b0c      	cmp	r3, #12
 8009dce:	d02a      	beq.n	8009e26 <HAL_TIM_OC_Start_IT+0x156>
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	2b0c      	cmp	r3, #12
 8009dd4:	d830      	bhi.n	8009e38 <HAL_TIM_OC_Start_IT+0x168>
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	2b08      	cmp	r3, #8
 8009dda:	d01b      	beq.n	8009e14 <HAL_TIM_OC_Start_IT+0x144>
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	2b08      	cmp	r3, #8
 8009de0:	d82a      	bhi.n	8009e38 <HAL_TIM_OC_Start_IT+0x168>
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d003      	beq.n	8009df0 <HAL_TIM_OC_Start_IT+0x120>
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	2b04      	cmp	r3, #4
 8009dec:	d009      	beq.n	8009e02 <HAL_TIM_OC_Start_IT+0x132>
 8009dee:	e023      	b.n	8009e38 <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	68da      	ldr	r2, [r3, #12]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2102      	movs	r1, #2
 8009dfc:	430a      	orrs	r2, r1
 8009dfe:	60da      	str	r2, [r3, #12]
      break;
 8009e00:	e01f      	b.n	8009e42 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	68da      	ldr	r2, [r3, #12]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2104      	movs	r1, #4
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	60da      	str	r2, [r3, #12]
      break;
 8009e12:	e016      	b.n	8009e42 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68da      	ldr	r2, [r3, #12]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2108      	movs	r1, #8
 8009e20:	430a      	orrs	r2, r1
 8009e22:	60da      	str	r2, [r3, #12]
      break;
 8009e24:	e00d      	b.n	8009e42 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68da      	ldr	r2, [r3, #12]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2110      	movs	r1, #16
 8009e32:	430a      	orrs	r2, r1
 8009e34:	60da      	str	r2, [r3, #12]
      break;
 8009e36:	e004      	b.n	8009e42 <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 8009e38:	230f      	movs	r3, #15
 8009e3a:	18fb      	adds	r3, r7, r3
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	701a      	strb	r2, [r3, #0]
      break;
 8009e40:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8009e42:	230f      	movs	r3, #15
 8009e44:	18fb      	adds	r3, r7, r3
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d154      	bne.n	8009ef6 <HAL_TIM_OC_Start_IT+0x226>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	2201      	movs	r2, #1
 8009e54:	0018      	movs	r0, r3
 8009e56:	f001 fe7f 	bl	800bb58 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a29      	ldr	r2, [pc, #164]	@ (8009f04 <HAL_TIM_OC_Start_IT+0x234>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d009      	beq.n	8009e78 <HAL_TIM_OC_Start_IT+0x1a8>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a27      	ldr	r2, [pc, #156]	@ (8009f08 <HAL_TIM_OC_Start_IT+0x238>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d004      	beq.n	8009e78 <HAL_TIM_OC_Start_IT+0x1a8>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a26      	ldr	r2, [pc, #152]	@ (8009f0c <HAL_TIM_OC_Start_IT+0x23c>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d101      	bne.n	8009e7c <HAL_TIM_OC_Start_IT+0x1ac>
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e000      	b.n	8009e7e <HAL_TIM_OC_Start_IT+0x1ae>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d008      	beq.n	8009e94 <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2180      	movs	r1, #128	@ 0x80
 8009e8e:	0209      	lsls	r1, r1, #8
 8009e90:	430a      	orrs	r2, r1
 8009e92:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a1a      	ldr	r2, [pc, #104]	@ (8009f04 <HAL_TIM_OC_Start_IT+0x234>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d00a      	beq.n	8009eb4 <HAL_TIM_OC_Start_IT+0x1e4>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	2380      	movs	r3, #128	@ 0x80
 8009ea4:	05db      	lsls	r3, r3, #23
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d004      	beq.n	8009eb4 <HAL_TIM_OC_Start_IT+0x1e4>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a18      	ldr	r2, [pc, #96]	@ (8009f10 <HAL_TIM_OC_Start_IT+0x240>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d116      	bne.n	8009ee2 <HAL_TIM_OC_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	4a16      	ldr	r2, [pc, #88]	@ (8009f14 <HAL_TIM_OC_Start_IT+0x244>)
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	2b06      	cmp	r3, #6
 8009ec4:	d016      	beq.n	8009ef4 <HAL_TIM_OC_Start_IT+0x224>
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	2380      	movs	r3, #128	@ 0x80
 8009eca:	025b      	lsls	r3, r3, #9
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d011      	beq.n	8009ef4 <HAL_TIM_OC_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2101      	movs	r1, #1
 8009edc:	430a      	orrs	r2, r1
 8009ede:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ee0:	e008      	b.n	8009ef4 <HAL_TIM_OC_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2101      	movs	r1, #1
 8009eee:	430a      	orrs	r2, r1
 8009ef0:	601a      	str	r2, [r3, #0]
 8009ef2:	e000      	b.n	8009ef6 <HAL_TIM_OC_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ef4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8009ef6:	230f      	movs	r3, #15
 8009ef8:	18fb      	adds	r3, r7, r3
 8009efa:	781b      	ldrb	r3, [r3, #0]
}
 8009efc:	0018      	movs	r0, r3
 8009efe:	46bd      	mov	sp, r7
 8009f00:	b004      	add	sp, #16
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	40012c00 	.word	0x40012c00
 8009f08:	40014400 	.word	0x40014400
 8009f0c:	40014800 	.word	0x40014800
 8009f10:	40000400 	.word	0x40000400
 8009f14:	00010007 	.word	0x00010007

08009f18 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f22:	230f      	movs	r3, #15
 8009f24:	18fb      	adds	r3, r7, r3
 8009f26:	2200      	movs	r2, #0
 8009f28:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	2b0c      	cmp	r3, #12
 8009f2e:	d02a      	beq.n	8009f86 <HAL_TIM_OC_Stop_IT+0x6e>
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	2b0c      	cmp	r3, #12
 8009f34:	d830      	bhi.n	8009f98 <HAL_TIM_OC_Stop_IT+0x80>
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	2b08      	cmp	r3, #8
 8009f3a:	d01b      	beq.n	8009f74 <HAL_TIM_OC_Stop_IT+0x5c>
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	2b08      	cmp	r3, #8
 8009f40:	d82a      	bhi.n	8009f98 <HAL_TIM_OC_Stop_IT+0x80>
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d003      	beq.n	8009f50 <HAL_TIM_OC_Stop_IT+0x38>
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	2b04      	cmp	r3, #4
 8009f4c:	d009      	beq.n	8009f62 <HAL_TIM_OC_Stop_IT+0x4a>
 8009f4e:	e023      	b.n	8009f98 <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68da      	ldr	r2, [r3, #12]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2102      	movs	r1, #2
 8009f5c:	438a      	bics	r2, r1
 8009f5e:	60da      	str	r2, [r3, #12]
      break;
 8009f60:	e01f      	b.n	8009fa2 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68da      	ldr	r2, [r3, #12]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	2104      	movs	r1, #4
 8009f6e:	438a      	bics	r2, r1
 8009f70:	60da      	str	r2, [r3, #12]
      break;
 8009f72:	e016      	b.n	8009fa2 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	68da      	ldr	r2, [r3, #12]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2108      	movs	r1, #8
 8009f80:	438a      	bics	r2, r1
 8009f82:	60da      	str	r2, [r3, #12]
      break;
 8009f84:	e00d      	b.n	8009fa2 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68da      	ldr	r2, [r3, #12]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2110      	movs	r1, #16
 8009f92:	438a      	bics	r2, r1
 8009f94:	60da      	str	r2, [r3, #12]
      break;
 8009f96:	e004      	b.n	8009fa2 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8009f98:	230f      	movs	r3, #15
 8009f9a:	18fb      	adds	r3, r7, r3
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	701a      	strb	r2, [r3, #0]
      break;
 8009fa0:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8009fa2:	230f      	movs	r3, #15
 8009fa4:	18fb      	adds	r3, r7, r3
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d000      	beq.n	8009fae <HAL_TIM_OC_Stop_IT+0x96>
 8009fac:	e06e      	b.n	800a08c <HAL_TIM_OC_Stop_IT+0x174>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	6839      	ldr	r1, [r7, #0]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	0018      	movs	r0, r3
 8009fb8:	f001 fdce 	bl	800bb58 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a36      	ldr	r2, [pc, #216]	@ (800a09c <HAL_TIM_OC_Stop_IT+0x184>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d009      	beq.n	8009fda <HAL_TIM_OC_Stop_IT+0xc2>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a35      	ldr	r2, [pc, #212]	@ (800a0a0 <HAL_TIM_OC_Stop_IT+0x188>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d004      	beq.n	8009fda <HAL_TIM_OC_Stop_IT+0xc2>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a33      	ldr	r2, [pc, #204]	@ (800a0a4 <HAL_TIM_OC_Stop_IT+0x18c>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d101      	bne.n	8009fde <HAL_TIM_OC_Stop_IT+0xc6>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e000      	b.n	8009fe0 <HAL_TIM_OC_Stop_IT+0xc8>
 8009fde:	2300      	movs	r3, #0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d013      	beq.n	800a00c <HAL_TIM_OC_Stop_IT+0xf4>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	6a1b      	ldr	r3, [r3, #32]
 8009fea:	4a2f      	ldr	r2, [pc, #188]	@ (800a0a8 <HAL_TIM_OC_Stop_IT+0x190>)
 8009fec:	4013      	ands	r3, r2
 8009fee:	d10d      	bne.n	800a00c <HAL_TIM_OC_Stop_IT+0xf4>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	4a2d      	ldr	r2, [pc, #180]	@ (800a0ac <HAL_TIM_OC_Stop_IT+0x194>)
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	d107      	bne.n	800a00c <HAL_TIM_OC_Stop_IT+0xf4>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	492a      	ldr	r1, [pc, #168]	@ (800a0b0 <HAL_TIM_OC_Stop_IT+0x198>)
 800a008:	400a      	ands	r2, r1
 800a00a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	4a25      	ldr	r2, [pc, #148]	@ (800a0a8 <HAL_TIM_OC_Stop_IT+0x190>)
 800a014:	4013      	ands	r3, r2
 800a016:	d10d      	bne.n	800a034 <HAL_TIM_OC_Stop_IT+0x11c>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	6a1b      	ldr	r3, [r3, #32]
 800a01e:	4a23      	ldr	r2, [pc, #140]	@ (800a0ac <HAL_TIM_OC_Stop_IT+0x194>)
 800a020:	4013      	ands	r3, r2
 800a022:	d107      	bne.n	800a034 <HAL_TIM_OC_Stop_IT+0x11c>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2101      	movs	r1, #1
 800a030:	438a      	bics	r2, r1
 800a032:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d104      	bne.n	800a044 <HAL_TIM_OC_Stop_IT+0x12c>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	223e      	movs	r2, #62	@ 0x3e
 800a03e:	2101      	movs	r1, #1
 800a040:	5499      	strb	r1, [r3, r2]
 800a042:	e023      	b.n	800a08c <HAL_TIM_OC_Stop_IT+0x174>
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	2b04      	cmp	r3, #4
 800a048:	d104      	bne.n	800a054 <HAL_TIM_OC_Stop_IT+0x13c>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	223f      	movs	r2, #63	@ 0x3f
 800a04e:	2101      	movs	r1, #1
 800a050:	5499      	strb	r1, [r3, r2]
 800a052:	e01b      	b.n	800a08c <HAL_TIM_OC_Stop_IT+0x174>
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	2b08      	cmp	r3, #8
 800a058:	d104      	bne.n	800a064 <HAL_TIM_OC_Stop_IT+0x14c>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2240      	movs	r2, #64	@ 0x40
 800a05e:	2101      	movs	r1, #1
 800a060:	5499      	strb	r1, [r3, r2]
 800a062:	e013      	b.n	800a08c <HAL_TIM_OC_Stop_IT+0x174>
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	2b0c      	cmp	r3, #12
 800a068:	d104      	bne.n	800a074 <HAL_TIM_OC_Stop_IT+0x15c>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2241      	movs	r2, #65	@ 0x41
 800a06e:	2101      	movs	r1, #1
 800a070:	5499      	strb	r1, [r3, r2]
 800a072:	e00b      	b.n	800a08c <HAL_TIM_OC_Stop_IT+0x174>
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	2b10      	cmp	r3, #16
 800a078:	d104      	bne.n	800a084 <HAL_TIM_OC_Stop_IT+0x16c>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2242      	movs	r2, #66	@ 0x42
 800a07e:	2101      	movs	r1, #1
 800a080:	5499      	strb	r1, [r3, r2]
 800a082:	e003      	b.n	800a08c <HAL_TIM_OC_Stop_IT+0x174>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2243      	movs	r2, #67	@ 0x43
 800a088:	2101      	movs	r1, #1
 800a08a:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 800a08c:	230f      	movs	r3, #15
 800a08e:	18fb      	adds	r3, r7, r3
 800a090:	781b      	ldrb	r3, [r3, #0]
}
 800a092:	0018      	movs	r0, r3
 800a094:	46bd      	mov	sp, r7
 800a096:	b004      	add	sp, #16
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	46c0      	nop			@ (mov r8, r8)
 800a09c:	40012c00 	.word	0x40012c00
 800a0a0:	40014400 	.word	0x40014400
 800a0a4:	40014800 	.word	0x40014800
 800a0a8:	00001111 	.word	0x00001111
 800a0ac:	00000444 	.word	0x00000444
 800a0b0:	ffff7fff 	.word	0xffff7fff

0800a0b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d101      	bne.n	800a0c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e056      	b.n	800a174 <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	223d      	movs	r2, #61	@ 0x3d
 800a0ca:	5c9b      	ldrb	r3, [r3, r2]
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d113      	bne.n	800a0fa <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	223c      	movs	r2, #60	@ 0x3c
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	0018      	movs	r0, r3
 800a0de:	f001 fd5f 	bl	800bba0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d102      	bne.n	800a0f0 <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4a23      	ldr	r2, [pc, #140]	@ (800a17c <HAL_TIM_PWM_Init+0xc8>)
 800a0ee:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	0010      	movs	r0, r2
 800a0f8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	223d      	movs	r2, #61	@ 0x3d
 800a0fe:	2102      	movs	r1, #2
 800a100:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	3304      	adds	r3, #4
 800a10a:	0019      	movs	r1, r3
 800a10c:	0010      	movs	r0, r2
 800a10e:	f001 f849 	bl	800b1a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2248      	movs	r2, #72	@ 0x48
 800a116:	2101      	movs	r1, #1
 800a118:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	223e      	movs	r2, #62	@ 0x3e
 800a11e:	2101      	movs	r1, #1
 800a120:	5499      	strb	r1, [r3, r2]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	223f      	movs	r2, #63	@ 0x3f
 800a126:	2101      	movs	r1, #1
 800a128:	5499      	strb	r1, [r3, r2]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2240      	movs	r2, #64	@ 0x40
 800a12e:	2101      	movs	r1, #1
 800a130:	5499      	strb	r1, [r3, r2]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2241      	movs	r2, #65	@ 0x41
 800a136:	2101      	movs	r1, #1
 800a138:	5499      	strb	r1, [r3, r2]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2242      	movs	r2, #66	@ 0x42
 800a13e:	2101      	movs	r1, #1
 800a140:	5499      	strb	r1, [r3, r2]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2243      	movs	r2, #67	@ 0x43
 800a146:	2101      	movs	r1, #1
 800a148:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2244      	movs	r2, #68	@ 0x44
 800a14e:	2101      	movs	r1, #1
 800a150:	5499      	strb	r1, [r3, r2]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2245      	movs	r2, #69	@ 0x45
 800a156:	2101      	movs	r1, #1
 800a158:	5499      	strb	r1, [r3, r2]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2246      	movs	r2, #70	@ 0x46
 800a15e:	2101      	movs	r1, #1
 800a160:	5499      	strb	r1, [r3, r2]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2247      	movs	r2, #71	@ 0x47
 800a166:	2101      	movs	r1, #1
 800a168:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	223d      	movs	r2, #61	@ 0x3d
 800a16e:	2101      	movs	r1, #1
 800a170:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a172:	2300      	movs	r3, #0
}
 800a174:	0018      	movs	r0, r3
 800a176:	46bd      	mov	sp, r7
 800a178:	b002      	add	sp, #8
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	0800a181 	.word	0x0800a181

0800a180 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a188:	46c0      	nop			@ (mov r8, r8)
 800a18a:	46bd      	mov	sp, r7
 800a18c:	b002      	add	sp, #8
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d108      	bne.n	800a1b2 <HAL_TIM_PWM_Start+0x22>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	223e      	movs	r2, #62	@ 0x3e
 800a1a4:	5c9b      	ldrb	r3, [r3, r2]
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	1e5a      	subs	r2, r3, #1
 800a1ac:	4193      	sbcs	r3, r2
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	e037      	b.n	800a222 <HAL_TIM_PWM_Start+0x92>
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	2b04      	cmp	r3, #4
 800a1b6:	d108      	bne.n	800a1ca <HAL_TIM_PWM_Start+0x3a>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	223f      	movs	r2, #63	@ 0x3f
 800a1bc:	5c9b      	ldrb	r3, [r3, r2]
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	1e5a      	subs	r2, r3, #1
 800a1c4:	4193      	sbcs	r3, r2
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	e02b      	b.n	800a222 <HAL_TIM_PWM_Start+0x92>
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	2b08      	cmp	r3, #8
 800a1ce:	d108      	bne.n	800a1e2 <HAL_TIM_PWM_Start+0x52>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2240      	movs	r2, #64	@ 0x40
 800a1d4:	5c9b      	ldrb	r3, [r3, r2]
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	1e5a      	subs	r2, r3, #1
 800a1dc:	4193      	sbcs	r3, r2
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	e01f      	b.n	800a222 <HAL_TIM_PWM_Start+0x92>
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	2b0c      	cmp	r3, #12
 800a1e6:	d108      	bne.n	800a1fa <HAL_TIM_PWM_Start+0x6a>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2241      	movs	r2, #65	@ 0x41
 800a1ec:	5c9b      	ldrb	r3, [r3, r2]
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	1e5a      	subs	r2, r3, #1
 800a1f4:	4193      	sbcs	r3, r2
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	e013      	b.n	800a222 <HAL_TIM_PWM_Start+0x92>
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	2b10      	cmp	r3, #16
 800a1fe:	d108      	bne.n	800a212 <HAL_TIM_PWM_Start+0x82>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2242      	movs	r2, #66	@ 0x42
 800a204:	5c9b      	ldrb	r3, [r3, r2]
 800a206:	b2db      	uxtb	r3, r3
 800a208:	3b01      	subs	r3, #1
 800a20a:	1e5a      	subs	r2, r3, #1
 800a20c:	4193      	sbcs	r3, r2
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	e007      	b.n	800a222 <HAL_TIM_PWM_Start+0x92>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2243      	movs	r2, #67	@ 0x43
 800a216:	5c9b      	ldrb	r3, [r3, r2]
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	3b01      	subs	r3, #1
 800a21c:	1e5a      	subs	r2, r3, #1
 800a21e:	4193      	sbcs	r3, r2
 800a220:	b2db      	uxtb	r3, r3
 800a222:	2b00      	cmp	r3, #0
 800a224:	d001      	beq.n	800a22a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e081      	b.n	800a32e <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d104      	bne.n	800a23a <HAL_TIM_PWM_Start+0xaa>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	223e      	movs	r2, #62	@ 0x3e
 800a234:	2102      	movs	r1, #2
 800a236:	5499      	strb	r1, [r3, r2]
 800a238:	e023      	b.n	800a282 <HAL_TIM_PWM_Start+0xf2>
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	2b04      	cmp	r3, #4
 800a23e:	d104      	bne.n	800a24a <HAL_TIM_PWM_Start+0xba>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	223f      	movs	r2, #63	@ 0x3f
 800a244:	2102      	movs	r1, #2
 800a246:	5499      	strb	r1, [r3, r2]
 800a248:	e01b      	b.n	800a282 <HAL_TIM_PWM_Start+0xf2>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2b08      	cmp	r3, #8
 800a24e:	d104      	bne.n	800a25a <HAL_TIM_PWM_Start+0xca>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2240      	movs	r2, #64	@ 0x40
 800a254:	2102      	movs	r1, #2
 800a256:	5499      	strb	r1, [r3, r2]
 800a258:	e013      	b.n	800a282 <HAL_TIM_PWM_Start+0xf2>
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	2b0c      	cmp	r3, #12
 800a25e:	d104      	bne.n	800a26a <HAL_TIM_PWM_Start+0xda>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2241      	movs	r2, #65	@ 0x41
 800a264:	2102      	movs	r1, #2
 800a266:	5499      	strb	r1, [r3, r2]
 800a268:	e00b      	b.n	800a282 <HAL_TIM_PWM_Start+0xf2>
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	2b10      	cmp	r3, #16
 800a26e:	d104      	bne.n	800a27a <HAL_TIM_PWM_Start+0xea>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2242      	movs	r2, #66	@ 0x42
 800a274:	2102      	movs	r1, #2
 800a276:	5499      	strb	r1, [r3, r2]
 800a278:	e003      	b.n	800a282 <HAL_TIM_PWM_Start+0xf2>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2243      	movs	r2, #67	@ 0x43
 800a27e:	2102      	movs	r1, #2
 800a280:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	6839      	ldr	r1, [r7, #0]
 800a288:	2201      	movs	r2, #1
 800a28a:	0018      	movs	r0, r3
 800a28c:	f001 fc64 	bl	800bb58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a28      	ldr	r2, [pc, #160]	@ (800a338 <HAL_TIM_PWM_Start+0x1a8>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d009      	beq.n	800a2ae <HAL_TIM_PWM_Start+0x11e>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a27      	ldr	r2, [pc, #156]	@ (800a33c <HAL_TIM_PWM_Start+0x1ac>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d004      	beq.n	800a2ae <HAL_TIM_PWM_Start+0x11e>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a25      	ldr	r2, [pc, #148]	@ (800a340 <HAL_TIM_PWM_Start+0x1b0>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d101      	bne.n	800a2b2 <HAL_TIM_PWM_Start+0x122>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e000      	b.n	800a2b4 <HAL_TIM_PWM_Start+0x124>
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d008      	beq.n	800a2ca <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2180      	movs	r1, #128	@ 0x80
 800a2c4:	0209      	lsls	r1, r1, #8
 800a2c6:	430a      	orrs	r2, r1
 800a2c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a1a      	ldr	r2, [pc, #104]	@ (800a338 <HAL_TIM_PWM_Start+0x1a8>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d00a      	beq.n	800a2ea <HAL_TIM_PWM_Start+0x15a>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	2380      	movs	r3, #128	@ 0x80
 800a2da:	05db      	lsls	r3, r3, #23
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d004      	beq.n	800a2ea <HAL_TIM_PWM_Start+0x15a>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a17      	ldr	r2, [pc, #92]	@ (800a344 <HAL_TIM_PWM_Start+0x1b4>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d116      	bne.n	800a318 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	4a15      	ldr	r2, [pc, #84]	@ (800a348 <HAL_TIM_PWM_Start+0x1b8>)
 800a2f2:	4013      	ands	r3, r2
 800a2f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2b06      	cmp	r3, #6
 800a2fa:	d016      	beq.n	800a32a <HAL_TIM_PWM_Start+0x19a>
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	2380      	movs	r3, #128	@ 0x80
 800a300:	025b      	lsls	r3, r3, #9
 800a302:	429a      	cmp	r2, r3
 800a304:	d011      	beq.n	800a32a <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2101      	movs	r1, #1
 800a312:	430a      	orrs	r2, r1
 800a314:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a316:	e008      	b.n	800a32a <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2101      	movs	r1, #1
 800a324:	430a      	orrs	r2, r1
 800a326:	601a      	str	r2, [r3, #0]
 800a328:	e000      	b.n	800a32c <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a32a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	0018      	movs	r0, r3
 800a330:	46bd      	mov	sp, r7
 800a332:	b004      	add	sp, #16
 800a334:	bd80      	pop	{r7, pc}
 800a336:	46c0      	nop			@ (mov r8, r8)
 800a338:	40012c00 	.word	0x40012c00
 800a33c:	40014400 	.word	0x40014400
 800a340:	40014800 	.word	0x40014800
 800a344:	40000400 	.word	0x40000400
 800a348:	00010007 	.word	0x00010007

0800a34c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d101      	bne.n	800a35e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e056      	b.n	800a40c <HAL_TIM_IC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	223d      	movs	r2, #61	@ 0x3d
 800a362:	5c9b      	ldrb	r3, [r3, r2]
 800a364:	b2db      	uxtb	r3, r3
 800a366:	2b00      	cmp	r3, #0
 800a368:	d113      	bne.n	800a392 <HAL_TIM_IC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	223c      	movs	r2, #60	@ 0x3c
 800a36e:	2100      	movs	r1, #0
 800a370:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	0018      	movs	r0, r3
 800a376:	f001 fc13 	bl	800bba0 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d102      	bne.n	800a388 <HAL_TIM_IC_Init+0x3c>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4a23      	ldr	r2, [pc, #140]	@ (800a414 <HAL_TIM_IC_Init+0xc8>)
 800a386:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	0010      	movs	r0, r2
 800a390:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	223d      	movs	r2, #61	@ 0x3d
 800a396:	2102      	movs	r1, #2
 800a398:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	3304      	adds	r3, #4
 800a3a2:	0019      	movs	r1, r3
 800a3a4:	0010      	movs	r0, r2
 800a3a6:	f000 fefd 	bl	800b1a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2248      	movs	r2, #72	@ 0x48
 800a3ae:	2101      	movs	r1, #1
 800a3b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	223e      	movs	r2, #62	@ 0x3e
 800a3b6:	2101      	movs	r1, #1
 800a3b8:	5499      	strb	r1, [r3, r2]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	223f      	movs	r2, #63	@ 0x3f
 800a3be:	2101      	movs	r1, #1
 800a3c0:	5499      	strb	r1, [r3, r2]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2240      	movs	r2, #64	@ 0x40
 800a3c6:	2101      	movs	r1, #1
 800a3c8:	5499      	strb	r1, [r3, r2]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2241      	movs	r2, #65	@ 0x41
 800a3ce:	2101      	movs	r1, #1
 800a3d0:	5499      	strb	r1, [r3, r2]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2242      	movs	r2, #66	@ 0x42
 800a3d6:	2101      	movs	r1, #1
 800a3d8:	5499      	strb	r1, [r3, r2]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2243      	movs	r2, #67	@ 0x43
 800a3de:	2101      	movs	r1, #1
 800a3e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2244      	movs	r2, #68	@ 0x44
 800a3e6:	2101      	movs	r1, #1
 800a3e8:	5499      	strb	r1, [r3, r2]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2245      	movs	r2, #69	@ 0x45
 800a3ee:	2101      	movs	r1, #1
 800a3f0:	5499      	strb	r1, [r3, r2]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2246      	movs	r2, #70	@ 0x46
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	5499      	strb	r1, [r3, r2]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2247      	movs	r2, #71	@ 0x47
 800a3fe:	2101      	movs	r1, #1
 800a400:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	223d      	movs	r2, #61	@ 0x3d
 800a406:	2101      	movs	r1, #1
 800a408:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	0018      	movs	r0, r3
 800a40e:	46bd      	mov	sp, r7
 800a410:	b002      	add	sp, #8
 800a412:	bd80      	pop	{r7, pc}
 800a414:	0800a419 	.word	0x0800a419

0800a418 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a420:	46c0      	nop			@ (mov r8, r8)
 800a422:	46bd      	mov	sp, r7
 800a424:	b002      	add	sp, #8
 800a426:	bd80      	pop	{r7, pc}

0800a428 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a432:	230f      	movs	r3, #15
 800a434:	18fb      	adds	r3, r7, r3
 800a436:	2200      	movs	r2, #0
 800a438:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d104      	bne.n	800a44a <HAL_TIM_IC_Start_IT+0x22>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	223e      	movs	r2, #62	@ 0x3e
 800a444:	5c9b      	ldrb	r3, [r3, r2]
 800a446:	b2db      	uxtb	r3, r3
 800a448:	e023      	b.n	800a492 <HAL_TIM_IC_Start_IT+0x6a>
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	2b04      	cmp	r3, #4
 800a44e:	d104      	bne.n	800a45a <HAL_TIM_IC_Start_IT+0x32>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	223f      	movs	r2, #63	@ 0x3f
 800a454:	5c9b      	ldrb	r3, [r3, r2]
 800a456:	b2db      	uxtb	r3, r3
 800a458:	e01b      	b.n	800a492 <HAL_TIM_IC_Start_IT+0x6a>
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	2b08      	cmp	r3, #8
 800a45e:	d104      	bne.n	800a46a <HAL_TIM_IC_Start_IT+0x42>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2240      	movs	r2, #64	@ 0x40
 800a464:	5c9b      	ldrb	r3, [r3, r2]
 800a466:	b2db      	uxtb	r3, r3
 800a468:	e013      	b.n	800a492 <HAL_TIM_IC_Start_IT+0x6a>
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	2b0c      	cmp	r3, #12
 800a46e:	d104      	bne.n	800a47a <HAL_TIM_IC_Start_IT+0x52>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2241      	movs	r2, #65	@ 0x41
 800a474:	5c9b      	ldrb	r3, [r3, r2]
 800a476:	b2db      	uxtb	r3, r3
 800a478:	e00b      	b.n	800a492 <HAL_TIM_IC_Start_IT+0x6a>
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	2b10      	cmp	r3, #16
 800a47e:	d104      	bne.n	800a48a <HAL_TIM_IC_Start_IT+0x62>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2242      	movs	r2, #66	@ 0x42
 800a484:	5c9b      	ldrb	r3, [r3, r2]
 800a486:	b2db      	uxtb	r3, r3
 800a488:	e003      	b.n	800a492 <HAL_TIM_IC_Start_IT+0x6a>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2243      	movs	r2, #67	@ 0x43
 800a48e:	5c9b      	ldrb	r3, [r3, r2]
 800a490:	b2db      	uxtb	r3, r3
 800a492:	220e      	movs	r2, #14
 800a494:	18ba      	adds	r2, r7, r2
 800a496:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d104      	bne.n	800a4a8 <HAL_TIM_IC_Start_IT+0x80>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2244      	movs	r2, #68	@ 0x44
 800a4a2:	5c9b      	ldrb	r3, [r3, r2]
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	e013      	b.n	800a4d0 <HAL_TIM_IC_Start_IT+0xa8>
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	2b04      	cmp	r3, #4
 800a4ac:	d104      	bne.n	800a4b8 <HAL_TIM_IC_Start_IT+0x90>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2245      	movs	r2, #69	@ 0x45
 800a4b2:	5c9b      	ldrb	r3, [r3, r2]
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	e00b      	b.n	800a4d0 <HAL_TIM_IC_Start_IT+0xa8>
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	2b08      	cmp	r3, #8
 800a4bc:	d104      	bne.n	800a4c8 <HAL_TIM_IC_Start_IT+0xa0>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2246      	movs	r2, #70	@ 0x46
 800a4c2:	5c9b      	ldrb	r3, [r3, r2]
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	e003      	b.n	800a4d0 <HAL_TIM_IC_Start_IT+0xa8>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2247      	movs	r2, #71	@ 0x47
 800a4cc:	5c9b      	ldrb	r3, [r3, r2]
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	210d      	movs	r1, #13
 800a4d2:	187a      	adds	r2, r7, r1
 800a4d4:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a4d6:	230e      	movs	r3, #14
 800a4d8:	18fb      	adds	r3, r7, r3
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d103      	bne.n	800a4e8 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a4e0:	187b      	adds	r3, r7, r1
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d001      	beq.n	800a4ec <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e0c3      	b.n	800a674 <HAL_TIM_IC_Start_IT+0x24c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d104      	bne.n	800a4fc <HAL_TIM_IC_Start_IT+0xd4>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	223e      	movs	r2, #62	@ 0x3e
 800a4f6:	2102      	movs	r1, #2
 800a4f8:	5499      	strb	r1, [r3, r2]
 800a4fa:	e023      	b.n	800a544 <HAL_TIM_IC_Start_IT+0x11c>
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	2b04      	cmp	r3, #4
 800a500:	d104      	bne.n	800a50c <HAL_TIM_IC_Start_IT+0xe4>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	223f      	movs	r2, #63	@ 0x3f
 800a506:	2102      	movs	r1, #2
 800a508:	5499      	strb	r1, [r3, r2]
 800a50a:	e01b      	b.n	800a544 <HAL_TIM_IC_Start_IT+0x11c>
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	2b08      	cmp	r3, #8
 800a510:	d104      	bne.n	800a51c <HAL_TIM_IC_Start_IT+0xf4>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2240      	movs	r2, #64	@ 0x40
 800a516:	2102      	movs	r1, #2
 800a518:	5499      	strb	r1, [r3, r2]
 800a51a:	e013      	b.n	800a544 <HAL_TIM_IC_Start_IT+0x11c>
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	2b0c      	cmp	r3, #12
 800a520:	d104      	bne.n	800a52c <HAL_TIM_IC_Start_IT+0x104>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2241      	movs	r2, #65	@ 0x41
 800a526:	2102      	movs	r1, #2
 800a528:	5499      	strb	r1, [r3, r2]
 800a52a:	e00b      	b.n	800a544 <HAL_TIM_IC_Start_IT+0x11c>
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	2b10      	cmp	r3, #16
 800a530:	d104      	bne.n	800a53c <HAL_TIM_IC_Start_IT+0x114>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2242      	movs	r2, #66	@ 0x42
 800a536:	2102      	movs	r1, #2
 800a538:	5499      	strb	r1, [r3, r2]
 800a53a:	e003      	b.n	800a544 <HAL_TIM_IC_Start_IT+0x11c>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2243      	movs	r2, #67	@ 0x43
 800a540:	2102      	movs	r1, #2
 800a542:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d104      	bne.n	800a554 <HAL_TIM_IC_Start_IT+0x12c>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2244      	movs	r2, #68	@ 0x44
 800a54e:	2102      	movs	r1, #2
 800a550:	5499      	strb	r1, [r3, r2]
 800a552:	e013      	b.n	800a57c <HAL_TIM_IC_Start_IT+0x154>
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	2b04      	cmp	r3, #4
 800a558:	d104      	bne.n	800a564 <HAL_TIM_IC_Start_IT+0x13c>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2245      	movs	r2, #69	@ 0x45
 800a55e:	2102      	movs	r1, #2
 800a560:	5499      	strb	r1, [r3, r2]
 800a562:	e00b      	b.n	800a57c <HAL_TIM_IC_Start_IT+0x154>
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	2b08      	cmp	r3, #8
 800a568:	d104      	bne.n	800a574 <HAL_TIM_IC_Start_IT+0x14c>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2246      	movs	r2, #70	@ 0x46
 800a56e:	2102      	movs	r1, #2
 800a570:	5499      	strb	r1, [r3, r2]
 800a572:	e003      	b.n	800a57c <HAL_TIM_IC_Start_IT+0x154>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2247      	movs	r2, #71	@ 0x47
 800a578:	2102      	movs	r1, #2
 800a57a:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	2b0c      	cmp	r3, #12
 800a580:	d02a      	beq.n	800a5d8 <HAL_TIM_IC_Start_IT+0x1b0>
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	2b0c      	cmp	r3, #12
 800a586:	d830      	bhi.n	800a5ea <HAL_TIM_IC_Start_IT+0x1c2>
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	2b08      	cmp	r3, #8
 800a58c:	d01b      	beq.n	800a5c6 <HAL_TIM_IC_Start_IT+0x19e>
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	2b08      	cmp	r3, #8
 800a592:	d82a      	bhi.n	800a5ea <HAL_TIM_IC_Start_IT+0x1c2>
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d003      	beq.n	800a5a2 <HAL_TIM_IC_Start_IT+0x17a>
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	2b04      	cmp	r3, #4
 800a59e:	d009      	beq.n	800a5b4 <HAL_TIM_IC_Start_IT+0x18c>
 800a5a0:	e023      	b.n	800a5ea <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68da      	ldr	r2, [r3, #12]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2102      	movs	r1, #2
 800a5ae:	430a      	orrs	r2, r1
 800a5b0:	60da      	str	r2, [r3, #12]
      break;
 800a5b2:	e01f      	b.n	800a5f4 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	68da      	ldr	r2, [r3, #12]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2104      	movs	r1, #4
 800a5c0:	430a      	orrs	r2, r1
 800a5c2:	60da      	str	r2, [r3, #12]
      break;
 800a5c4:	e016      	b.n	800a5f4 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68da      	ldr	r2, [r3, #12]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2108      	movs	r1, #8
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	60da      	str	r2, [r3, #12]
      break;
 800a5d6:	e00d      	b.n	800a5f4 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68da      	ldr	r2, [r3, #12]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2110      	movs	r1, #16
 800a5e4:	430a      	orrs	r2, r1
 800a5e6:	60da      	str	r2, [r3, #12]
      break;
 800a5e8:	e004      	b.n	800a5f4 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 800a5ea:	230f      	movs	r3, #15
 800a5ec:	18fb      	adds	r3, r7, r3
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	701a      	strb	r2, [r3, #0]
      break;
 800a5f2:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800a5f4:	230f      	movs	r3, #15
 800a5f6:	18fb      	adds	r3, r7, r3
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d137      	bne.n	800a66e <HAL_TIM_IC_Start_IT+0x246>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	6839      	ldr	r1, [r7, #0]
 800a604:	2201      	movs	r2, #1
 800a606:	0018      	movs	r0, r3
 800a608:	f001 faa6 	bl	800bb58 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a1a      	ldr	r2, [pc, #104]	@ (800a67c <HAL_TIM_IC_Start_IT+0x254>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d00a      	beq.n	800a62c <HAL_TIM_IC_Start_IT+0x204>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	2380      	movs	r3, #128	@ 0x80
 800a61c:	05db      	lsls	r3, r3, #23
 800a61e:	429a      	cmp	r2, r3
 800a620:	d004      	beq.n	800a62c <HAL_TIM_IC_Start_IT+0x204>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a16      	ldr	r2, [pc, #88]	@ (800a680 <HAL_TIM_IC_Start_IT+0x258>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d116      	bne.n	800a65a <HAL_TIM_IC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	4a14      	ldr	r2, [pc, #80]	@ (800a684 <HAL_TIM_IC_Start_IT+0x25c>)
 800a634:	4013      	ands	r3, r2
 800a636:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	2b06      	cmp	r3, #6
 800a63c:	d016      	beq.n	800a66c <HAL_TIM_IC_Start_IT+0x244>
 800a63e:	68ba      	ldr	r2, [r7, #8]
 800a640:	2380      	movs	r3, #128	@ 0x80
 800a642:	025b      	lsls	r3, r3, #9
 800a644:	429a      	cmp	r2, r3
 800a646:	d011      	beq.n	800a66c <HAL_TIM_IC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2101      	movs	r1, #1
 800a654:	430a      	orrs	r2, r1
 800a656:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a658:	e008      	b.n	800a66c <HAL_TIM_IC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2101      	movs	r1, #1
 800a666:	430a      	orrs	r2, r1
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	e000      	b.n	800a66e <HAL_TIM_IC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a66c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800a66e:	230f      	movs	r3, #15
 800a670:	18fb      	adds	r3, r7, r3
 800a672:	781b      	ldrb	r3, [r3, #0]
}
 800a674:	0018      	movs	r0, r3
 800a676:	46bd      	mov	sp, r7
 800a678:	b004      	add	sp, #16
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	40012c00 	.word	0x40012c00
 800a680:	40000400 	.word	0x40000400
 800a684:	00010007 	.word	0x00010007

0800a688 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	2202      	movs	r2, #2
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	d027      	beq.n	800a6f8 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2202      	movs	r2, #2
 800a6ac:	4013      	ands	r3, r2
 800a6ae:	d023      	beq.n	800a6f8 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2203      	movs	r2, #3
 800a6b6:	4252      	negs	r2, r2
 800a6b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	699b      	ldr	r3, [r3, #24]
 800a6c6:	2203      	movs	r2, #3
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	d006      	beq.n	800a6da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2294      	movs	r2, #148	@ 0x94
 800a6d0:	589b      	ldr	r3, [r3, r2]
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	0010      	movs	r0, r2
 800a6d6:	4798      	blx	r3
 800a6d8:	e00b      	b.n	800a6f2 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	229c      	movs	r2, #156	@ 0x9c
 800a6de:	589b      	ldr	r3, [r3, r2]
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	0010      	movs	r0, r2
 800a6e4:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	22a0      	movs	r2, #160	@ 0xa0
 800a6ea:	589b      	ldr	r3, [r3, r2]
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	0010      	movs	r0, r2
 800a6f0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	2204      	movs	r2, #4
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	d028      	beq.n	800a752 <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2204      	movs	r2, #4
 800a704:	4013      	ands	r3, r2
 800a706:	d024      	beq.n	800a752 <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2205      	movs	r2, #5
 800a70e:	4252      	negs	r2, r2
 800a710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2202      	movs	r2, #2
 800a716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	699a      	ldr	r2, [r3, #24]
 800a71e:	23c0      	movs	r3, #192	@ 0xc0
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4013      	ands	r3, r2
 800a724:	d006      	beq.n	800a734 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2294      	movs	r2, #148	@ 0x94
 800a72a:	589b      	ldr	r3, [r3, r2]
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	0010      	movs	r0, r2
 800a730:	4798      	blx	r3
 800a732:	e00b      	b.n	800a74c <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	229c      	movs	r2, #156	@ 0x9c
 800a738:	589b      	ldr	r3, [r3, r2]
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	0010      	movs	r0, r2
 800a73e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	22a0      	movs	r2, #160	@ 0xa0
 800a744:	589b      	ldr	r3, [r3, r2]
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	0010      	movs	r0, r2
 800a74a:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	2208      	movs	r2, #8
 800a756:	4013      	ands	r3, r2
 800a758:	d027      	beq.n	800a7aa <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2208      	movs	r2, #8
 800a75e:	4013      	ands	r3, r2
 800a760:	d023      	beq.n	800a7aa <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2209      	movs	r2, #9
 800a768:	4252      	negs	r2, r2
 800a76a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2204      	movs	r2, #4
 800a770:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	69db      	ldr	r3, [r3, #28]
 800a778:	2203      	movs	r2, #3
 800a77a:	4013      	ands	r3, r2
 800a77c:	d006      	beq.n	800a78c <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2294      	movs	r2, #148	@ 0x94
 800a782:	589b      	ldr	r3, [r3, r2]
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	0010      	movs	r0, r2
 800a788:	4798      	blx	r3
 800a78a:	e00b      	b.n	800a7a4 <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	229c      	movs	r2, #156	@ 0x9c
 800a790:	589b      	ldr	r3, [r3, r2]
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	0010      	movs	r0, r2
 800a796:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	22a0      	movs	r2, #160	@ 0xa0
 800a79c:	589b      	ldr	r3, [r3, r2]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	0010      	movs	r0, r2
 800a7a2:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	2210      	movs	r2, #16
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	d028      	beq.n	800a804 <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2210      	movs	r2, #16
 800a7b6:	4013      	ands	r3, r2
 800a7b8:	d024      	beq.n	800a804 <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2211      	movs	r2, #17
 800a7c0:	4252      	negs	r2, r2
 800a7c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2208      	movs	r2, #8
 800a7c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	69da      	ldr	r2, [r3, #28]
 800a7d0:	23c0      	movs	r3, #192	@ 0xc0
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	4013      	ands	r3, r2
 800a7d6:	d006      	beq.n	800a7e6 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2294      	movs	r2, #148	@ 0x94
 800a7dc:	589b      	ldr	r3, [r3, r2]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	0010      	movs	r0, r2
 800a7e2:	4798      	blx	r3
 800a7e4:	e00b      	b.n	800a7fe <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	229c      	movs	r2, #156	@ 0x9c
 800a7ea:	589b      	ldr	r3, [r3, r2]
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	0010      	movs	r0, r2
 800a7f0:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	22a0      	movs	r2, #160	@ 0xa0
 800a7f6:	589b      	ldr	r3, [r3, r2]
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	0010      	movs	r0, r2
 800a7fc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	2201      	movs	r2, #1
 800a808:	4013      	ands	r3, r2
 800a80a:	d00e      	beq.n	800a82a <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2201      	movs	r2, #1
 800a810:	4013      	ands	r3, r2
 800a812:	d00a      	beq.n	800a82a <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2202      	movs	r2, #2
 800a81a:	4252      	negs	r2, r2
 800a81c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2284      	movs	r2, #132	@ 0x84
 800a822:	589b      	ldr	r3, [r3, r2]
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	0010      	movs	r0, r2
 800a828:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	2280      	movs	r2, #128	@ 0x80
 800a82e:	4013      	ands	r3, r2
 800a830:	d104      	bne.n	800a83c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	2380      	movs	r3, #128	@ 0x80
 800a836:	019b      	lsls	r3, r3, #6
 800a838:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a83a:	d00d      	beq.n	800a858 <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2280      	movs	r2, #128	@ 0x80
 800a840:	4013      	ands	r3, r2
 800a842:	d009      	beq.n	800a858 <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a22      	ldr	r2, [pc, #136]	@ (800a8d4 <HAL_TIM_IRQHandler+0x24c>)
 800a84a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	22b4      	movs	r2, #180	@ 0xb4
 800a850:	589b      	ldr	r3, [r3, r2]
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	0010      	movs	r0, r2
 800a856:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a858:	68ba      	ldr	r2, [r7, #8]
 800a85a:	2380      	movs	r3, #128	@ 0x80
 800a85c:	005b      	lsls	r3, r3, #1
 800a85e:	4013      	ands	r3, r2
 800a860:	d00d      	beq.n	800a87e <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2280      	movs	r2, #128	@ 0x80
 800a866:	4013      	ands	r3, r2
 800a868:	d009      	beq.n	800a87e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a1a      	ldr	r2, [pc, #104]	@ (800a8d8 <HAL_TIM_IRQHandler+0x250>)
 800a870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	22b8      	movs	r2, #184	@ 0xb8
 800a876:	589b      	ldr	r3, [r3, r2]
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	0010      	movs	r0, r2
 800a87c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	2240      	movs	r2, #64	@ 0x40
 800a882:	4013      	ands	r3, r2
 800a884:	d00e      	beq.n	800a8a4 <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2240      	movs	r2, #64	@ 0x40
 800a88a:	4013      	ands	r3, r2
 800a88c:	d00a      	beq.n	800a8a4 <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2241      	movs	r2, #65	@ 0x41
 800a894:	4252      	negs	r2, r2
 800a896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	228c      	movs	r2, #140	@ 0x8c
 800a89c:	589b      	ldr	r3, [r3, r2]
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	0010      	movs	r0, r2
 800a8a2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	2220      	movs	r2, #32
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	d00e      	beq.n	800a8ca <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2220      	movs	r2, #32
 800a8b0:	4013      	ands	r3, r2
 800a8b2:	d00a      	beq.n	800a8ca <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2221      	movs	r2, #33	@ 0x21
 800a8ba:	4252      	negs	r2, r2
 800a8bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	22ac      	movs	r2, #172	@ 0xac
 800a8c2:	589b      	ldr	r3, [r3, r2]
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	0010      	movs	r0, r2
 800a8c8:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8ca:	46c0      	nop			@ (mov r8, r8)
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	b004      	add	sp, #16
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	46c0      	nop			@ (mov r8, r8)
 800a8d4:	ffffdf7f 	.word	0xffffdf7f
 800a8d8:	fffffeff 	.word	0xfffffeff

0800a8dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b086      	sub	sp, #24
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8e8:	2317      	movs	r3, #23
 800a8ea:	18fb      	adds	r3, r7, r3
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	223c      	movs	r2, #60	@ 0x3c
 800a8f4:	5c9b      	ldrb	r3, [r3, r2]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d101      	bne.n	800a8fe <HAL_TIM_OC_ConfigChannel+0x22>
 800a8fa:	2302      	movs	r3, #2
 800a8fc:	e048      	b.n	800a990 <HAL_TIM_OC_ConfigChannel+0xb4>
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	223c      	movs	r2, #60	@ 0x3c
 800a902:	2101      	movs	r1, #1
 800a904:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2b14      	cmp	r3, #20
 800a90a:	d835      	bhi.n	800a978 <HAL_TIM_OC_ConfigChannel+0x9c>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	009a      	lsls	r2, r3, #2
 800a910:	4b21      	ldr	r3, [pc, #132]	@ (800a998 <HAL_TIM_OC_ConfigChannel+0xbc>)
 800a912:	18d3      	adds	r3, r2, r3
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	68ba      	ldr	r2, [r7, #8]
 800a91e:	0011      	movs	r1, r2
 800a920:	0018      	movs	r0, r3
 800a922:	f000 fcc3 	bl	800b2ac <TIM_OC1_SetConfig>
      break;
 800a926:	e02c      	b.n	800a982 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	68ba      	ldr	r2, [r7, #8]
 800a92e:	0011      	movs	r1, r2
 800a930:	0018      	movs	r0, r3
 800a932:	f000 fd3b 	bl	800b3ac <TIM_OC2_SetConfig>
      break;
 800a936:	e024      	b.n	800a982 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	68ba      	ldr	r2, [r7, #8]
 800a93e:	0011      	movs	r1, r2
 800a940:	0018      	movs	r0, r3
 800a942:	f000 fdb1 	bl	800b4a8 <TIM_OC3_SetConfig>
      break;
 800a946:	e01c      	b.n	800a982 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	0011      	movs	r1, r2
 800a950:	0018      	movs	r0, r3
 800a952:	f000 fe2b 	bl	800b5ac <TIM_OC4_SetConfig>
      break;
 800a956:	e014      	b.n	800a982 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	68ba      	ldr	r2, [r7, #8]
 800a95e:	0011      	movs	r1, r2
 800a960:	0018      	movs	r0, r3
 800a962:	f000 fe87 	bl	800b674 <TIM_OC5_SetConfig>
      break;
 800a966:	e00c      	b.n	800a982 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	68ba      	ldr	r2, [r7, #8]
 800a96e:	0011      	movs	r1, r2
 800a970:	0018      	movs	r0, r3
 800a972:	f000 fed9 	bl	800b728 <TIM_OC6_SetConfig>
      break;
 800a976:	e004      	b.n	800a982 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a978:	2317      	movs	r3, #23
 800a97a:	18fb      	adds	r3, r7, r3
 800a97c:	2201      	movs	r2, #1
 800a97e:	701a      	strb	r2, [r3, #0]
      break;
 800a980:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	223c      	movs	r2, #60	@ 0x3c
 800a986:	2100      	movs	r1, #0
 800a988:	5499      	strb	r1, [r3, r2]

  return status;
 800a98a:	2317      	movs	r3, #23
 800a98c:	18fb      	adds	r3, r7, r3
 800a98e:	781b      	ldrb	r3, [r3, #0]
}
 800a990:	0018      	movs	r0, r3
 800a992:	46bd      	mov	sp, r7
 800a994:	b006      	add	sp, #24
 800a996:	bd80      	pop	{r7, pc}
 800a998:	0800e06c 	.word	0x0800e06c

0800a99c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b086      	sub	sp, #24
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9a8:	2317      	movs	r3, #23
 800a9aa:	18fb      	adds	r3, r7, r3
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	223c      	movs	r2, #60	@ 0x3c
 800a9b4:	5c9b      	ldrb	r3, [r3, r2]
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d101      	bne.n	800a9be <HAL_TIM_IC_ConfigChannel+0x22>
 800a9ba:	2302      	movs	r3, #2
 800a9bc:	e08c      	b.n	800aad8 <HAL_TIM_IC_ConfigChannel+0x13c>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	223c      	movs	r2, #60	@ 0x3c
 800a9c2:	2101      	movs	r1, #1
 800a9c4:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d11b      	bne.n	800aa04 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800a9dc:	f000 ff02 	bl	800b7e4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	699a      	ldr	r2, [r3, #24]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	210c      	movs	r1, #12
 800a9ec:	438a      	bics	r2, r1
 800a9ee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	6999      	ldr	r1, [r3, #24]
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	689a      	ldr	r2, [r3, #8]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	430a      	orrs	r2, r1
 800aa00:	619a      	str	r2, [r3, #24]
 800aa02:	e062      	b.n	800aaca <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b04      	cmp	r3, #4
 800aa08:	d11c      	bne.n	800aa44 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800aa1a:	f000 ff67 	bl	800b8ec <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	699a      	ldr	r2, [r3, #24]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	492d      	ldr	r1, [pc, #180]	@ (800aae0 <HAL_TIM_IC_ConfigChannel+0x144>)
 800aa2a:	400a      	ands	r2, r1
 800aa2c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	6999      	ldr	r1, [r3, #24]
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	021a      	lsls	r2, r3, #8
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	430a      	orrs	r2, r1
 800aa40:	619a      	str	r2, [r3, #24]
 800aa42:	e042      	b.n	800aaca <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2b08      	cmp	r3, #8
 800aa48:	d11b      	bne.n	800aa82 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800aa5a:	f000 ffbb 	bl	800b9d4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	69da      	ldr	r2, [r3, #28]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	210c      	movs	r1, #12
 800aa6a:	438a      	bics	r2, r1
 800aa6c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	69d9      	ldr	r1, [r3, #28]
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	689a      	ldr	r2, [r3, #8]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	430a      	orrs	r2, r1
 800aa7e:	61da      	str	r2, [r3, #28]
 800aa80:	e023      	b.n	800aaca <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2b0c      	cmp	r3, #12
 800aa86:	d11c      	bne.n	800aac2 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800aa98:	f000 ffdc 	bl	800ba54 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	69da      	ldr	r2, [r3, #28]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	490e      	ldr	r1, [pc, #56]	@ (800aae0 <HAL_TIM_IC_ConfigChannel+0x144>)
 800aaa8:	400a      	ands	r2, r1
 800aaaa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	69d9      	ldr	r1, [r3, #28]
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	021a      	lsls	r2, r3, #8
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	430a      	orrs	r2, r1
 800aabe:	61da      	str	r2, [r3, #28]
 800aac0:	e003      	b.n	800aaca <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800aac2:	2317      	movs	r3, #23
 800aac4:	18fb      	adds	r3, r7, r3
 800aac6:	2201      	movs	r2, #1
 800aac8:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	223c      	movs	r2, #60	@ 0x3c
 800aace:	2100      	movs	r1, #0
 800aad0:	5499      	strb	r1, [r3, r2]

  return status;
 800aad2:	2317      	movs	r3, #23
 800aad4:	18fb      	adds	r3, r7, r3
 800aad6:	781b      	ldrb	r3, [r3, #0]
}
 800aad8:	0018      	movs	r0, r3
 800aada:	46bd      	mov	sp, r7
 800aadc:	b006      	add	sp, #24
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	fffff3ff 	.word	0xfffff3ff

0800aae4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aaf0:	2317      	movs	r3, #23
 800aaf2:	18fb      	adds	r3, r7, r3
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	223c      	movs	r2, #60	@ 0x3c
 800aafc:	5c9b      	ldrb	r3, [r3, r2]
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d101      	bne.n	800ab06 <HAL_TIM_PWM_ConfigChannel+0x22>
 800ab02:	2302      	movs	r3, #2
 800ab04:	e0e5      	b.n	800acd2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	223c      	movs	r2, #60	@ 0x3c
 800ab0a:	2101      	movs	r1, #1
 800ab0c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2b14      	cmp	r3, #20
 800ab12:	d900      	bls.n	800ab16 <HAL_TIM_PWM_ConfigChannel+0x32>
 800ab14:	e0d1      	b.n	800acba <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	009a      	lsls	r2, r3, #2
 800ab1a:	4b70      	ldr	r3, [pc, #448]	@ (800acdc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800ab1c:	18d3      	adds	r3, r2, r3
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68ba      	ldr	r2, [r7, #8]
 800ab28:	0011      	movs	r1, r2
 800ab2a:	0018      	movs	r0, r3
 800ab2c:	f000 fbbe 	bl	800b2ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	699a      	ldr	r2, [r3, #24]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2108      	movs	r1, #8
 800ab3c:	430a      	orrs	r2, r1
 800ab3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	699a      	ldr	r2, [r3, #24]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2104      	movs	r1, #4
 800ab4c:	438a      	bics	r2, r1
 800ab4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	6999      	ldr	r1, [r3, #24]
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	691a      	ldr	r2, [r3, #16]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	430a      	orrs	r2, r1
 800ab60:	619a      	str	r2, [r3, #24]
      break;
 800ab62:	e0af      	b.n	800acc4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	68ba      	ldr	r2, [r7, #8]
 800ab6a:	0011      	movs	r1, r2
 800ab6c:	0018      	movs	r0, r3
 800ab6e:	f000 fc1d 	bl	800b3ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	699a      	ldr	r2, [r3, #24]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2180      	movs	r1, #128	@ 0x80
 800ab7e:	0109      	lsls	r1, r1, #4
 800ab80:	430a      	orrs	r2, r1
 800ab82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	699a      	ldr	r2, [r3, #24]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4954      	ldr	r1, [pc, #336]	@ (800ace0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800ab90:	400a      	ands	r2, r1
 800ab92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	6999      	ldr	r1, [r3, #24]
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	691b      	ldr	r3, [r3, #16]
 800ab9e:	021a      	lsls	r2, r3, #8
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	430a      	orrs	r2, r1
 800aba6:	619a      	str	r2, [r3, #24]
      break;
 800aba8:	e08c      	b.n	800acc4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	68ba      	ldr	r2, [r7, #8]
 800abb0:	0011      	movs	r1, r2
 800abb2:	0018      	movs	r0, r3
 800abb4:	f000 fc78 	bl	800b4a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	69da      	ldr	r2, [r3, #28]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	2108      	movs	r1, #8
 800abc4:	430a      	orrs	r2, r1
 800abc6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	69da      	ldr	r2, [r3, #28]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2104      	movs	r1, #4
 800abd4:	438a      	bics	r2, r1
 800abd6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	69d9      	ldr	r1, [r3, #28]
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	691a      	ldr	r2, [r3, #16]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	430a      	orrs	r2, r1
 800abe8:	61da      	str	r2, [r3, #28]
      break;
 800abea:	e06b      	b.n	800acc4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	68ba      	ldr	r2, [r7, #8]
 800abf2:	0011      	movs	r1, r2
 800abf4:	0018      	movs	r0, r3
 800abf6:	f000 fcd9 	bl	800b5ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	69da      	ldr	r2, [r3, #28]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2180      	movs	r1, #128	@ 0x80
 800ac06:	0109      	lsls	r1, r1, #4
 800ac08:	430a      	orrs	r2, r1
 800ac0a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	69da      	ldr	r2, [r3, #28]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4932      	ldr	r1, [pc, #200]	@ (800ace0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800ac18:	400a      	ands	r2, r1
 800ac1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	69d9      	ldr	r1, [r3, #28]
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	021a      	lsls	r2, r3, #8
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	430a      	orrs	r2, r1
 800ac2e:	61da      	str	r2, [r3, #28]
      break;
 800ac30:	e048      	b.n	800acc4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	68ba      	ldr	r2, [r7, #8]
 800ac38:	0011      	movs	r1, r2
 800ac3a:	0018      	movs	r0, r3
 800ac3c:	f000 fd1a 	bl	800b674 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2108      	movs	r1, #8
 800ac4c:	430a      	orrs	r2, r1
 800ac4e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2104      	movs	r1, #4
 800ac5c:	438a      	bics	r2, r1
 800ac5e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	691a      	ldr	r2, [r3, #16]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	430a      	orrs	r2, r1
 800ac70:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ac72:	e027      	b.n	800acc4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	68ba      	ldr	r2, [r7, #8]
 800ac7a:	0011      	movs	r1, r2
 800ac7c:	0018      	movs	r0, r3
 800ac7e:	f000 fd53 	bl	800b728 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2180      	movs	r1, #128	@ 0x80
 800ac8e:	0109      	lsls	r1, r1, #4
 800ac90:	430a      	orrs	r2, r1
 800ac92:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4910      	ldr	r1, [pc, #64]	@ (800ace0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800aca0:	400a      	ands	r2, r1
 800aca2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	021a      	lsls	r2, r3, #8
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	430a      	orrs	r2, r1
 800acb6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800acb8:	e004      	b.n	800acc4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800acba:	2317      	movs	r3, #23
 800acbc:	18fb      	adds	r3, r7, r3
 800acbe:	2201      	movs	r2, #1
 800acc0:	701a      	strb	r2, [r3, #0]
      break;
 800acc2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	223c      	movs	r2, #60	@ 0x3c
 800acc8:	2100      	movs	r1, #0
 800acca:	5499      	strb	r1, [r3, r2]

  return status;
 800accc:	2317      	movs	r3, #23
 800acce:	18fb      	adds	r3, r7, r3
 800acd0:	781b      	ldrb	r3, [r3, #0]
}
 800acd2:	0018      	movs	r0, r3
 800acd4:	46bd      	mov	sp, r7
 800acd6:	b006      	add	sp, #24
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	46c0      	nop			@ (mov r8, r8)
 800acdc:	0800e0c0 	.word	0x0800e0c0
 800ace0:	fffffbff 	.word	0xfffffbff

0800ace4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acee:	230f      	movs	r3, #15
 800acf0:	18fb      	adds	r3, r7, r3
 800acf2:	2200      	movs	r2, #0
 800acf4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	223c      	movs	r2, #60	@ 0x3c
 800acfa:	5c9b      	ldrb	r3, [r3, r2]
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d101      	bne.n	800ad04 <HAL_TIM_ConfigClockSource+0x20>
 800ad00:	2302      	movs	r3, #2
 800ad02:	e0bc      	b.n	800ae7e <HAL_TIM_ConfigClockSource+0x19a>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	223c      	movs	r2, #60	@ 0x3c
 800ad08:	2101      	movs	r1, #1
 800ad0a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	223d      	movs	r2, #61	@ 0x3d
 800ad10:	2102      	movs	r1, #2
 800ad12:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	4a5a      	ldr	r2, [pc, #360]	@ (800ae88 <HAL_TIM_ConfigClockSource+0x1a4>)
 800ad20:	4013      	ands	r3, r2
 800ad22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	4a59      	ldr	r2, [pc, #356]	@ (800ae8c <HAL_TIM_ConfigClockSource+0x1a8>)
 800ad28:	4013      	ands	r3, r2
 800ad2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2280      	movs	r2, #128	@ 0x80
 800ad3a:	0192      	lsls	r2, r2, #6
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d040      	beq.n	800adc2 <HAL_TIM_ConfigClockSource+0xde>
 800ad40:	2280      	movs	r2, #128	@ 0x80
 800ad42:	0192      	lsls	r2, r2, #6
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d900      	bls.n	800ad4a <HAL_TIM_ConfigClockSource+0x66>
 800ad48:	e088      	b.n	800ae5c <HAL_TIM_ConfigClockSource+0x178>
 800ad4a:	2280      	movs	r2, #128	@ 0x80
 800ad4c:	0152      	lsls	r2, r2, #5
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d100      	bne.n	800ad54 <HAL_TIM_ConfigClockSource+0x70>
 800ad52:	e088      	b.n	800ae66 <HAL_TIM_ConfigClockSource+0x182>
 800ad54:	2280      	movs	r2, #128	@ 0x80
 800ad56:	0152      	lsls	r2, r2, #5
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d900      	bls.n	800ad5e <HAL_TIM_ConfigClockSource+0x7a>
 800ad5c:	e07e      	b.n	800ae5c <HAL_TIM_ConfigClockSource+0x178>
 800ad5e:	2b70      	cmp	r3, #112	@ 0x70
 800ad60:	d018      	beq.n	800ad94 <HAL_TIM_ConfigClockSource+0xb0>
 800ad62:	d900      	bls.n	800ad66 <HAL_TIM_ConfigClockSource+0x82>
 800ad64:	e07a      	b.n	800ae5c <HAL_TIM_ConfigClockSource+0x178>
 800ad66:	2b60      	cmp	r3, #96	@ 0x60
 800ad68:	d04f      	beq.n	800ae0a <HAL_TIM_ConfigClockSource+0x126>
 800ad6a:	d900      	bls.n	800ad6e <HAL_TIM_ConfigClockSource+0x8a>
 800ad6c:	e076      	b.n	800ae5c <HAL_TIM_ConfigClockSource+0x178>
 800ad6e:	2b50      	cmp	r3, #80	@ 0x50
 800ad70:	d03b      	beq.n	800adea <HAL_TIM_ConfigClockSource+0x106>
 800ad72:	d900      	bls.n	800ad76 <HAL_TIM_ConfigClockSource+0x92>
 800ad74:	e072      	b.n	800ae5c <HAL_TIM_ConfigClockSource+0x178>
 800ad76:	2b40      	cmp	r3, #64	@ 0x40
 800ad78:	d057      	beq.n	800ae2a <HAL_TIM_ConfigClockSource+0x146>
 800ad7a:	d900      	bls.n	800ad7e <HAL_TIM_ConfigClockSource+0x9a>
 800ad7c:	e06e      	b.n	800ae5c <HAL_TIM_ConfigClockSource+0x178>
 800ad7e:	2b30      	cmp	r3, #48	@ 0x30
 800ad80:	d063      	beq.n	800ae4a <HAL_TIM_ConfigClockSource+0x166>
 800ad82:	d86b      	bhi.n	800ae5c <HAL_TIM_ConfigClockSource+0x178>
 800ad84:	2b20      	cmp	r3, #32
 800ad86:	d060      	beq.n	800ae4a <HAL_TIM_ConfigClockSource+0x166>
 800ad88:	d868      	bhi.n	800ae5c <HAL_TIM_ConfigClockSource+0x178>
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d05d      	beq.n	800ae4a <HAL_TIM_ConfigClockSource+0x166>
 800ad8e:	2b10      	cmp	r3, #16
 800ad90:	d05b      	beq.n	800ae4a <HAL_TIM_ConfigClockSource+0x166>
 800ad92:	e063      	b.n	800ae5c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ada4:	f000 feb8 	bl	800bb18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	2277      	movs	r2, #119	@ 0x77
 800adb4:	4313      	orrs	r3, r2
 800adb6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	609a      	str	r2, [r3, #8]
      break;
 800adc0:	e052      	b.n	800ae68 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800add2:	f000 fea1 	bl	800bb18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	689a      	ldr	r2, [r3, #8]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2180      	movs	r1, #128	@ 0x80
 800ade2:	01c9      	lsls	r1, r1, #7
 800ade4:	430a      	orrs	r2, r1
 800ade6:	609a      	str	r2, [r3, #8]
      break;
 800ade8:	e03e      	b.n	800ae68 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800adf6:	001a      	movs	r2, r3
 800adf8:	f000 fd4a 	bl	800b890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	2150      	movs	r1, #80	@ 0x50
 800ae02:	0018      	movs	r0, r3
 800ae04:	f000 fe6c 	bl	800bae0 <TIM_ITRx_SetConfig>
      break;
 800ae08:	e02e      	b.n	800ae68 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae16:	001a      	movs	r2, r3
 800ae18:	f000 fdaa 	bl	800b970 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2160      	movs	r1, #96	@ 0x60
 800ae22:	0018      	movs	r0, r3
 800ae24:	f000 fe5c 	bl	800bae0 <TIM_ITRx_SetConfig>
      break;
 800ae28:	e01e      	b.n	800ae68 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae36:	001a      	movs	r2, r3
 800ae38:	f000 fd2a 	bl	800b890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2140      	movs	r1, #64	@ 0x40
 800ae42:	0018      	movs	r0, r3
 800ae44:	f000 fe4c 	bl	800bae0 <TIM_ITRx_SetConfig>
      break;
 800ae48:	e00e      	b.n	800ae68 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	0019      	movs	r1, r3
 800ae54:	0010      	movs	r0, r2
 800ae56:	f000 fe43 	bl	800bae0 <TIM_ITRx_SetConfig>
      break;
 800ae5a:	e005      	b.n	800ae68 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800ae5c:	230f      	movs	r3, #15
 800ae5e:	18fb      	adds	r3, r7, r3
 800ae60:	2201      	movs	r2, #1
 800ae62:	701a      	strb	r2, [r3, #0]
      break;
 800ae64:	e000      	b.n	800ae68 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800ae66:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	223d      	movs	r2, #61	@ 0x3d
 800ae6c:	2101      	movs	r1, #1
 800ae6e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	223c      	movs	r2, #60	@ 0x3c
 800ae74:	2100      	movs	r1, #0
 800ae76:	5499      	strb	r1, [r3, r2]

  return status;
 800ae78:	230f      	movs	r3, #15
 800ae7a:	18fb      	adds	r3, r7, r3
 800ae7c:	781b      	ldrb	r3, [r3, #0]
}
 800ae7e:	0018      	movs	r0, r3
 800ae80:	46bd      	mov	sp, r7
 800ae82:	b004      	add	sp, #16
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	46c0      	nop			@ (mov r8, r8)
 800ae88:	ffceff88 	.word	0xffceff88
 800ae8c:	ffff00ff 	.word	0xffff00ff

0800ae90 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	2b0c      	cmp	r3, #12
 800aea2:	d01e      	beq.n	800aee2 <HAL_TIM_ReadCapturedValue+0x52>
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	2b0c      	cmp	r3, #12
 800aea8:	d820      	bhi.n	800aeec <HAL_TIM_ReadCapturedValue+0x5c>
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	2b08      	cmp	r3, #8
 800aeae:	d013      	beq.n	800aed8 <HAL_TIM_ReadCapturedValue+0x48>
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	2b08      	cmp	r3, #8
 800aeb4:	d81a      	bhi.n	800aeec <HAL_TIM_ReadCapturedValue+0x5c>
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d003      	beq.n	800aec4 <HAL_TIM_ReadCapturedValue+0x34>
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	2b04      	cmp	r3, #4
 800aec0:	d005      	beq.n	800aece <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800aec2:	e013      	b.n	800aeec <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aeca:	60fb      	str	r3, [r7, #12]
      break;
 800aecc:	e00f      	b.n	800aeee <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aed4:	60fb      	str	r3, [r7, #12]
      break;
 800aed6:	e00a      	b.n	800aeee <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aede:	60fb      	str	r3, [r7, #12]
      break;
 800aee0:	e005      	b.n	800aeee <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aee8:	60fb      	str	r3, [r7, #12]
      break;
 800aeea:	e000      	b.n	800aeee <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 800aeec:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 800aeee:	68fb      	ldr	r3, [r7, #12]
}
 800aef0:	0018      	movs	r0, r3
 800aef2:	46bd      	mov	sp, r7
 800aef4:	b004      	add	sp, #16
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800af00:	46c0      	nop			@ (mov r8, r8)
 800af02:	46bd      	mov	sp, r7
 800af04:	b002      	add	sp, #8
 800af06:	bd80      	pop	{r7, pc}

0800af08 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800af10:	46c0      	nop			@ (mov r8, r8)
 800af12:	46bd      	mov	sp, r7
 800af14:	b002      	add	sp, #8
 800af16:	bd80      	pop	{r7, pc}

0800af18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af20:	46c0      	nop			@ (mov r8, r8)
 800af22:	46bd      	mov	sp, r7
 800af24:	b002      	add	sp, #8
 800af26:	bd80      	pop	{r7, pc}

0800af28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800af30:	46c0      	nop			@ (mov r8, r8)
 800af32:	46bd      	mov	sp, r7
 800af34:	b002      	add	sp, #8
 800af36:	bd80      	pop	{r7, pc}

0800af38 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800af40:	46c0      	nop			@ (mov r8, r8)
 800af42:	46bd      	mov	sp, r7
 800af44:	b002      	add	sp, #8
 800af46:	bd80      	pop	{r7, pc}

0800af48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af50:	46c0      	nop			@ (mov r8, r8)
 800af52:	46bd      	mov	sp, r7
 800af54:	b002      	add	sp, #8
 800af56:	bd80      	pop	{r7, pc}

0800af58 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800af60:	46c0      	nop			@ (mov r8, r8)
 800af62:	46bd      	mov	sp, r7
 800af64:	b002      	add	sp, #8
 800af66:	bd80      	pop	{r7, pc}

0800af68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af70:	46c0      	nop			@ (mov r8, r8)
 800af72:	46bd      	mov	sp, r7
 800af74:	b002      	add	sp, #8
 800af76:	bd80      	pop	{r7, pc}

0800af78 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800af80:	46c0      	nop			@ (mov r8, r8)
 800af82:	46bd      	mov	sp, r7
 800af84:	b002      	add	sp, #8
 800af86:	bd80      	pop	{r7, pc}

0800af88 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800af90:	46c0      	nop			@ (mov r8, r8)
 800af92:	46bd      	mov	sp, r7
 800af94:	b002      	add	sp, #8
 800af96:	bd80      	pop	{r7, pc}

0800af98 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	607a      	str	r2, [r7, #4]
 800afa2:	230b      	movs	r3, #11
 800afa4:	18fb      	adds	r3, r7, r3
 800afa6:	1c0a      	adds	r2, r1, #0
 800afa8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800afaa:	2317      	movs	r3, #23
 800afac:	18fb      	adds	r3, r7, r3
 800afae:	2200      	movs	r2, #0
 800afb0:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d101      	bne.n	800afbc <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	e0ea      	b.n	800b192 <HAL_TIM_RegisterCallback+0x1fa>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	223d      	movs	r2, #61	@ 0x3d
 800afc0:	5c9b      	ldrb	r3, [r3, r2]
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d000      	beq.n	800afca <HAL_TIM_RegisterCallback+0x32>
 800afc8:	e08e      	b.n	800b0e8 <HAL_TIM_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800afca:	230b      	movs	r3, #11
 800afcc:	18fb      	adds	r3, r7, r3
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	2b1b      	cmp	r3, #27
 800afd2:	d900      	bls.n	800afd6 <HAL_TIM_RegisterCallback+0x3e>
 800afd4:	e083      	b.n	800b0de <HAL_TIM_RegisterCallback+0x146>
 800afd6:	009a      	lsls	r2, r3, #2
 800afd8:	4b70      	ldr	r3, [pc, #448]	@ (800b19c <HAL_TIM_RegisterCallback+0x204>)
 800afda:	18d3      	adds	r3, r2, r3
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800afe6:	e0d1      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800afee:	e0cd      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800aff6:	e0c9      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	687a      	ldr	r2, [r7, #4]
 800affc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800affe:	e0c5      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b006:	e0c1      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b00e:	e0bd      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b016:	e0b9      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b01e:	e0b5      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b026:	e0b1      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	687a      	ldr	r2, [r7, #4]
 800b02c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b02e:	e0ad      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b036:	e0a9      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b03e:	e0a5      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b046:	e0a1      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2180      	movs	r1, #128	@ 0x80
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	505a      	str	r2, [r3, r1]
        break;
 800b050:	e09c      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2184      	movs	r1, #132	@ 0x84
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	505a      	str	r2, [r3, r1]
        break;
 800b05a:	e097      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2188      	movs	r1, #136	@ 0x88
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	505a      	str	r2, [r3, r1]
        break;
 800b064:	e092      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	218c      	movs	r1, #140	@ 0x8c
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	505a      	str	r2, [r3, r1]
        break;
 800b06e:	e08d      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2190      	movs	r1, #144	@ 0x90
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	505a      	str	r2, [r3, r1]
        break;
 800b078:	e088      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2194      	movs	r1, #148	@ 0x94
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	505a      	str	r2, [r3, r1]
        break;
 800b082:	e083      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2198      	movs	r1, #152	@ 0x98
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	505a      	str	r2, [r3, r1]
        break;
 800b08c:	e07e      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	219c      	movs	r1, #156	@ 0x9c
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	505a      	str	r2, [r3, r1]
        break;
 800b096:	e079      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	21a0      	movs	r1, #160	@ 0xa0
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	505a      	str	r2, [r3, r1]
        break;
 800b0a0:	e074      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	21a4      	movs	r1, #164	@ 0xa4
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	505a      	str	r2, [r3, r1]
        break;
 800b0aa:	e06f      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	21a8      	movs	r1, #168	@ 0xa8
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	505a      	str	r2, [r3, r1]
        break;
 800b0b4:	e06a      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	21ac      	movs	r1, #172	@ 0xac
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	505a      	str	r2, [r3, r1]
        break;
 800b0be:	e065      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	21b0      	movs	r1, #176	@ 0xb0
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	505a      	str	r2, [r3, r1]
        break;
 800b0c8:	e060      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	21b4      	movs	r1, #180	@ 0xb4
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	505a      	str	r2, [r3, r1]
        break;
 800b0d2:	e05b      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	21b8      	movs	r1, #184	@ 0xb8
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	505a      	str	r2, [r3, r1]
        break;
 800b0dc:	e056      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b0de:	2317      	movs	r3, #23
 800b0e0:	18fb      	adds	r3, r7, r3
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	701a      	strb	r2, [r3, #0]
        break;
 800b0e6:	e051      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	223d      	movs	r2, #61	@ 0x3d
 800b0ec:	5c9b      	ldrb	r3, [r3, r2]
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d147      	bne.n	800b184 <HAL_TIM_RegisterCallback+0x1ec>
  {
    switch (CallbackID)
 800b0f4:	230b      	movs	r3, #11
 800b0f6:	18fb      	adds	r3, r7, r3
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	2b0d      	cmp	r3, #13
 800b0fc:	d83d      	bhi.n	800b17a <HAL_TIM_RegisterCallback+0x1e2>
 800b0fe:	009a      	lsls	r2, r3, #2
 800b100:	4b27      	ldr	r3, [pc, #156]	@ (800b1a0 <HAL_TIM_RegisterCallback+0x208>)
 800b102:	18d3      	adds	r3, r2, r3
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b10e:	e03d      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b116:	e039      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	687a      	ldr	r2, [r7, #4]
 800b11c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b11e:	e035      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b126:	e031      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b12e:	e02d      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b136:	e029      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b13e:	e025      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b146:	e021      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b14e:	e01d      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b156:	e019      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b15e:	e015      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b166:	e011      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b16e:	e00d      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2180      	movs	r1, #128	@ 0x80
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	505a      	str	r2, [r3, r1]
        break;
 800b178:	e008      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b17a:	2317      	movs	r3, #23
 800b17c:	18fb      	adds	r3, r7, r3
 800b17e:	2201      	movs	r2, #1
 800b180:	701a      	strb	r2, [r3, #0]
        break;
 800b182:	e003      	b.n	800b18c <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800b184:	2317      	movs	r3, #23
 800b186:	18fb      	adds	r3, r7, r3
 800b188:	2201      	movs	r2, #1
 800b18a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800b18c:	2317      	movs	r3, #23
 800b18e:	18fb      	adds	r3, r7, r3
 800b190:	781b      	ldrb	r3, [r3, #0]
}
 800b192:	0018      	movs	r0, r3
 800b194:	46bd      	mov	sp, r7
 800b196:	b006      	add	sp, #24
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	46c0      	nop			@ (mov r8, r8)
 800b19c:	0800e114 	.word	0x0800e114
 800b1a0:	0800e184 	.word	0x0800e184

0800b1a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a37      	ldr	r2, [pc, #220]	@ (800b294 <TIM_Base_SetConfig+0xf0>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d008      	beq.n	800b1ce <TIM_Base_SetConfig+0x2a>
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	2380      	movs	r3, #128	@ 0x80
 800b1c0:	05db      	lsls	r3, r3, #23
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d003      	beq.n	800b1ce <TIM_Base_SetConfig+0x2a>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4a33      	ldr	r2, [pc, #204]	@ (800b298 <TIM_Base_SetConfig+0xf4>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d108      	bne.n	800b1e0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2270      	movs	r2, #112	@ 0x70
 800b1d2:	4393      	bics	r3, r2
 800b1d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	4a2c      	ldr	r2, [pc, #176]	@ (800b294 <TIM_Base_SetConfig+0xf0>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d014      	beq.n	800b212 <TIM_Base_SetConfig+0x6e>
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	2380      	movs	r3, #128	@ 0x80
 800b1ec:	05db      	lsls	r3, r3, #23
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d00f      	beq.n	800b212 <TIM_Base_SetConfig+0x6e>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a28      	ldr	r2, [pc, #160]	@ (800b298 <TIM_Base_SetConfig+0xf4>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d00b      	beq.n	800b212 <TIM_Base_SetConfig+0x6e>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4a27      	ldr	r2, [pc, #156]	@ (800b29c <TIM_Base_SetConfig+0xf8>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d007      	beq.n	800b212 <TIM_Base_SetConfig+0x6e>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4a26      	ldr	r2, [pc, #152]	@ (800b2a0 <TIM_Base_SetConfig+0xfc>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d003      	beq.n	800b212 <TIM_Base_SetConfig+0x6e>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4a25      	ldr	r2, [pc, #148]	@ (800b2a4 <TIM_Base_SetConfig+0x100>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d108      	bne.n	800b224 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	4a24      	ldr	r2, [pc, #144]	@ (800b2a8 <TIM_Base_SetConfig+0x104>)
 800b216:	4013      	ands	r3, r2
 800b218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	68fa      	ldr	r2, [r7, #12]
 800b220:	4313      	orrs	r3, r2
 800b222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2280      	movs	r2, #128	@ 0x80
 800b228:	4393      	bics	r3, r2
 800b22a:	001a      	movs	r2, r3
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	695b      	ldr	r3, [r3, #20]
 800b230:	4313      	orrs	r3, r2
 800b232:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	68fa      	ldr	r2, [r7, #12]
 800b238:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	689a      	ldr	r2, [r3, #8]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	4a11      	ldr	r2, [pc, #68]	@ (800b294 <TIM_Base_SetConfig+0xf0>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d007      	beq.n	800b262 <TIM_Base_SetConfig+0xbe>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	4a12      	ldr	r2, [pc, #72]	@ (800b2a0 <TIM_Base_SetConfig+0xfc>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d003      	beq.n	800b262 <TIM_Base_SetConfig+0xbe>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4a11      	ldr	r2, [pc, #68]	@ (800b2a4 <TIM_Base_SetConfig+0x100>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d103      	bne.n	800b26a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	691a      	ldr	r2, [r3, #16]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2201      	movs	r2, #1
 800b26e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	2201      	movs	r2, #1
 800b276:	4013      	ands	r3, r2
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d106      	bne.n	800b28a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	691b      	ldr	r3, [r3, #16]
 800b280:	2201      	movs	r2, #1
 800b282:	4393      	bics	r3, r2
 800b284:	001a      	movs	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	611a      	str	r2, [r3, #16]
  }
}
 800b28a:	46c0      	nop			@ (mov r8, r8)
 800b28c:	46bd      	mov	sp, r7
 800b28e:	b004      	add	sp, #16
 800b290:	bd80      	pop	{r7, pc}
 800b292:	46c0      	nop			@ (mov r8, r8)
 800b294:	40012c00 	.word	0x40012c00
 800b298:	40000400 	.word	0x40000400
 800b29c:	40002000 	.word	0x40002000
 800b2a0:	40014400 	.word	0x40014400
 800b2a4:	40014800 	.word	0x40014800
 800b2a8:	fffffcff 	.word	0xfffffcff

0800b2ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6a1b      	ldr	r3, [r3, #32]
 800b2ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6a1b      	ldr	r3, [r3, #32]
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	4393      	bics	r3, r2
 800b2c4:	001a      	movs	r2, r3
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	699b      	ldr	r3, [r3, #24]
 800b2d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	4a2e      	ldr	r2, [pc, #184]	@ (800b394 <TIM_OC1_SetConfig+0xe8>)
 800b2da:	4013      	ands	r3, r2
 800b2dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2203      	movs	r2, #3
 800b2e2:	4393      	bics	r3, r2
 800b2e4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	2202      	movs	r2, #2
 800b2f4:	4393      	bics	r3, r2
 800b2f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	697a      	ldr	r2, [r7, #20]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4a24      	ldr	r2, [pc, #144]	@ (800b398 <TIM_OC1_SetConfig+0xec>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d007      	beq.n	800b31a <TIM_OC1_SetConfig+0x6e>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a23      	ldr	r2, [pc, #140]	@ (800b39c <TIM_OC1_SetConfig+0xf0>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d003      	beq.n	800b31a <TIM_OC1_SetConfig+0x6e>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4a22      	ldr	r2, [pc, #136]	@ (800b3a0 <TIM_OC1_SetConfig+0xf4>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d10c      	bne.n	800b334 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	2208      	movs	r2, #8
 800b31e:	4393      	bics	r3, r2
 800b320:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	68db      	ldr	r3, [r3, #12]
 800b326:	697a      	ldr	r2, [r7, #20]
 800b328:	4313      	orrs	r3, r2
 800b32a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	2204      	movs	r2, #4
 800b330:	4393      	bics	r3, r2
 800b332:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a18      	ldr	r2, [pc, #96]	@ (800b398 <TIM_OC1_SetConfig+0xec>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d007      	beq.n	800b34c <TIM_OC1_SetConfig+0xa0>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a17      	ldr	r2, [pc, #92]	@ (800b39c <TIM_OC1_SetConfig+0xf0>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d003      	beq.n	800b34c <TIM_OC1_SetConfig+0xa0>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a16      	ldr	r2, [pc, #88]	@ (800b3a0 <TIM_OC1_SetConfig+0xf4>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d111      	bne.n	800b370 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	4a15      	ldr	r2, [pc, #84]	@ (800b3a4 <TIM_OC1_SetConfig+0xf8>)
 800b350:	4013      	ands	r3, r2
 800b352:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	4a14      	ldr	r2, [pc, #80]	@ (800b3a8 <TIM_OC1_SetConfig+0xfc>)
 800b358:	4013      	ands	r3, r2
 800b35a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	695b      	ldr	r3, [r3, #20]
 800b360:	693a      	ldr	r2, [r7, #16]
 800b362:	4313      	orrs	r3, r2
 800b364:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	699b      	ldr	r3, [r3, #24]
 800b36a:	693a      	ldr	r2, [r7, #16]
 800b36c:	4313      	orrs	r3, r2
 800b36e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	693a      	ldr	r2, [r7, #16]
 800b374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	68fa      	ldr	r2, [r7, #12]
 800b37a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	685a      	ldr	r2, [r3, #4]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	697a      	ldr	r2, [r7, #20]
 800b388:	621a      	str	r2, [r3, #32]
}
 800b38a:	46c0      	nop			@ (mov r8, r8)
 800b38c:	46bd      	mov	sp, r7
 800b38e:	b006      	add	sp, #24
 800b390:	bd80      	pop	{r7, pc}
 800b392:	46c0      	nop			@ (mov r8, r8)
 800b394:	fffeff8f 	.word	0xfffeff8f
 800b398:	40012c00 	.word	0x40012c00
 800b39c:	40014400 	.word	0x40014400
 800b3a0:	40014800 	.word	0x40014800
 800b3a4:	fffffeff 	.word	0xfffffeff
 800b3a8:	fffffdff 	.word	0xfffffdff

0800b3ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b086      	sub	sp, #24
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a1b      	ldr	r3, [r3, #32]
 800b3ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6a1b      	ldr	r3, [r3, #32]
 800b3c0:	2210      	movs	r2, #16
 800b3c2:	4393      	bics	r3, r2
 800b3c4:	001a      	movs	r2, r3
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	699b      	ldr	r3, [r3, #24]
 800b3d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	4a2c      	ldr	r2, [pc, #176]	@ (800b48c <TIM_OC2_SetConfig+0xe0>)
 800b3da:	4013      	ands	r3, r2
 800b3dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	4a2b      	ldr	r2, [pc, #172]	@ (800b490 <TIM_OC2_SetConfig+0xe4>)
 800b3e2:	4013      	ands	r3, r2
 800b3e4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	021b      	lsls	r3, r3, #8
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	2220      	movs	r2, #32
 800b3f6:	4393      	bics	r3, r2
 800b3f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	011b      	lsls	r3, r3, #4
 800b400:	697a      	ldr	r2, [r7, #20]
 800b402:	4313      	orrs	r3, r2
 800b404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4a22      	ldr	r2, [pc, #136]	@ (800b494 <TIM_OC2_SetConfig+0xe8>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d10d      	bne.n	800b42a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	2280      	movs	r2, #128	@ 0x80
 800b412:	4393      	bics	r3, r2
 800b414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	011b      	lsls	r3, r3, #4
 800b41c:	697a      	ldr	r2, [r7, #20]
 800b41e:	4313      	orrs	r3, r2
 800b420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	2240      	movs	r2, #64	@ 0x40
 800b426:	4393      	bics	r3, r2
 800b428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4a19      	ldr	r2, [pc, #100]	@ (800b494 <TIM_OC2_SetConfig+0xe8>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d007      	beq.n	800b442 <TIM_OC2_SetConfig+0x96>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	4a18      	ldr	r2, [pc, #96]	@ (800b498 <TIM_OC2_SetConfig+0xec>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d003      	beq.n	800b442 <TIM_OC2_SetConfig+0x96>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4a17      	ldr	r2, [pc, #92]	@ (800b49c <TIM_OC2_SetConfig+0xf0>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d113      	bne.n	800b46a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	4a16      	ldr	r2, [pc, #88]	@ (800b4a0 <TIM_OC2_SetConfig+0xf4>)
 800b446:	4013      	ands	r3, r2
 800b448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	4a15      	ldr	r2, [pc, #84]	@ (800b4a4 <TIM_OC2_SetConfig+0xf8>)
 800b44e:	4013      	ands	r3, r2
 800b450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	695b      	ldr	r3, [r3, #20]
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	693a      	ldr	r2, [r7, #16]
 800b45a:	4313      	orrs	r3, r2
 800b45c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	699b      	ldr	r3, [r3, #24]
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	693a      	ldr	r2, [r7, #16]
 800b466:	4313      	orrs	r3, r2
 800b468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	693a      	ldr	r2, [r7, #16]
 800b46e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	685a      	ldr	r2, [r3, #4]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	697a      	ldr	r2, [r7, #20]
 800b482:	621a      	str	r2, [r3, #32]
}
 800b484:	46c0      	nop			@ (mov r8, r8)
 800b486:	46bd      	mov	sp, r7
 800b488:	b006      	add	sp, #24
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	feff8fff 	.word	0xfeff8fff
 800b490:	fffffcff 	.word	0xfffffcff
 800b494:	40012c00 	.word	0x40012c00
 800b498:	40014400 	.word	0x40014400
 800b49c:	40014800 	.word	0x40014800
 800b4a0:	fffffbff 	.word	0xfffffbff
 800b4a4:	fffff7ff 	.word	0xfffff7ff

0800b4a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b086      	sub	sp, #24
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a1b      	ldr	r3, [r3, #32]
 800b4b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6a1b      	ldr	r3, [r3, #32]
 800b4bc:	4a31      	ldr	r2, [pc, #196]	@ (800b584 <TIM_OC3_SetConfig+0xdc>)
 800b4be:	401a      	ands	r2, r3
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	69db      	ldr	r3, [r3, #28]
 800b4ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	4a2d      	ldr	r2, [pc, #180]	@ (800b588 <TIM_OC3_SetConfig+0xe0>)
 800b4d4:	4013      	ands	r3, r2
 800b4d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2203      	movs	r2, #3
 800b4dc:	4393      	bics	r3, r2
 800b4de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68fa      	ldr	r2, [r7, #12]
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	4a27      	ldr	r2, [pc, #156]	@ (800b58c <TIM_OC3_SetConfig+0xe4>)
 800b4ee:	4013      	ands	r3, r2
 800b4f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	021b      	lsls	r3, r3, #8
 800b4f8:	697a      	ldr	r2, [r7, #20]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4a23      	ldr	r2, [pc, #140]	@ (800b590 <TIM_OC3_SetConfig+0xe8>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d10d      	bne.n	800b522 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	4a22      	ldr	r2, [pc, #136]	@ (800b594 <TIM_OC3_SetConfig+0xec>)
 800b50a:	4013      	ands	r3, r2
 800b50c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	021b      	lsls	r3, r3, #8
 800b514:	697a      	ldr	r2, [r7, #20]
 800b516:	4313      	orrs	r3, r2
 800b518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	4a1e      	ldr	r2, [pc, #120]	@ (800b598 <TIM_OC3_SetConfig+0xf0>)
 800b51e:	4013      	ands	r3, r2
 800b520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	4a1a      	ldr	r2, [pc, #104]	@ (800b590 <TIM_OC3_SetConfig+0xe8>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d007      	beq.n	800b53a <TIM_OC3_SetConfig+0x92>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	4a1b      	ldr	r2, [pc, #108]	@ (800b59c <TIM_OC3_SetConfig+0xf4>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d003      	beq.n	800b53a <TIM_OC3_SetConfig+0x92>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	4a1a      	ldr	r2, [pc, #104]	@ (800b5a0 <TIM_OC3_SetConfig+0xf8>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d113      	bne.n	800b562 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	4a19      	ldr	r2, [pc, #100]	@ (800b5a4 <TIM_OC3_SetConfig+0xfc>)
 800b53e:	4013      	ands	r3, r2
 800b540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	4a18      	ldr	r2, [pc, #96]	@ (800b5a8 <TIM_OC3_SetConfig+0x100>)
 800b546:	4013      	ands	r3, r2
 800b548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	695b      	ldr	r3, [r3, #20]
 800b54e:	011b      	lsls	r3, r3, #4
 800b550:	693a      	ldr	r2, [r7, #16]
 800b552:	4313      	orrs	r3, r2
 800b554:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	699b      	ldr	r3, [r3, #24]
 800b55a:	011b      	lsls	r3, r3, #4
 800b55c:	693a      	ldr	r2, [r7, #16]
 800b55e:	4313      	orrs	r3, r2
 800b560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	693a      	ldr	r2, [r7, #16]
 800b566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	685a      	ldr	r2, [r3, #4]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	697a      	ldr	r2, [r7, #20]
 800b57a:	621a      	str	r2, [r3, #32]
}
 800b57c:	46c0      	nop			@ (mov r8, r8)
 800b57e:	46bd      	mov	sp, r7
 800b580:	b006      	add	sp, #24
 800b582:	bd80      	pop	{r7, pc}
 800b584:	fffffeff 	.word	0xfffffeff
 800b588:	fffeff8f 	.word	0xfffeff8f
 800b58c:	fffffdff 	.word	0xfffffdff
 800b590:	40012c00 	.word	0x40012c00
 800b594:	fffff7ff 	.word	0xfffff7ff
 800b598:	fffffbff 	.word	0xfffffbff
 800b59c:	40014400 	.word	0x40014400
 800b5a0:	40014800 	.word	0x40014800
 800b5a4:	ffffefff 	.word	0xffffefff
 800b5a8:	ffffdfff 	.word	0xffffdfff

0800b5ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b086      	sub	sp, #24
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6a1b      	ldr	r3, [r3, #32]
 800b5ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6a1b      	ldr	r3, [r3, #32]
 800b5c0:	4a24      	ldr	r2, [pc, #144]	@ (800b654 <TIM_OC4_SetConfig+0xa8>)
 800b5c2:	401a      	ands	r2, r3
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	69db      	ldr	r3, [r3, #28]
 800b5d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	4a20      	ldr	r2, [pc, #128]	@ (800b658 <TIM_OC4_SetConfig+0xac>)
 800b5d8:	4013      	ands	r3, r2
 800b5da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	4a1f      	ldr	r2, [pc, #124]	@ (800b65c <TIM_OC4_SetConfig+0xb0>)
 800b5e0:	4013      	ands	r3, r2
 800b5e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	021b      	lsls	r3, r3, #8
 800b5ea:	68fa      	ldr	r2, [r7, #12]
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	4a1b      	ldr	r2, [pc, #108]	@ (800b660 <TIM_OC4_SetConfig+0xb4>)
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	031b      	lsls	r3, r3, #12
 800b5fe:	693a      	ldr	r2, [r7, #16]
 800b600:	4313      	orrs	r3, r2
 800b602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	4a17      	ldr	r2, [pc, #92]	@ (800b664 <TIM_OC4_SetConfig+0xb8>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d007      	beq.n	800b61c <TIM_OC4_SetConfig+0x70>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	4a16      	ldr	r2, [pc, #88]	@ (800b668 <TIM_OC4_SetConfig+0xbc>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d003      	beq.n	800b61c <TIM_OC4_SetConfig+0x70>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	4a15      	ldr	r2, [pc, #84]	@ (800b66c <TIM_OC4_SetConfig+0xc0>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d109      	bne.n	800b630 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	4a14      	ldr	r2, [pc, #80]	@ (800b670 <TIM_OC4_SetConfig+0xc4>)
 800b620:	4013      	ands	r3, r2
 800b622:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	695b      	ldr	r3, [r3, #20]
 800b628:	019b      	lsls	r3, r3, #6
 800b62a:	697a      	ldr	r2, [r7, #20]
 800b62c:	4313      	orrs	r3, r2
 800b62e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	697a      	ldr	r2, [r7, #20]
 800b634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	685a      	ldr	r2, [r3, #4]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	693a      	ldr	r2, [r7, #16]
 800b648:	621a      	str	r2, [r3, #32]
}
 800b64a:	46c0      	nop			@ (mov r8, r8)
 800b64c:	46bd      	mov	sp, r7
 800b64e:	b006      	add	sp, #24
 800b650:	bd80      	pop	{r7, pc}
 800b652:	46c0      	nop			@ (mov r8, r8)
 800b654:	ffffefff 	.word	0xffffefff
 800b658:	feff8fff 	.word	0xfeff8fff
 800b65c:	fffffcff 	.word	0xfffffcff
 800b660:	ffffdfff 	.word	0xffffdfff
 800b664:	40012c00 	.word	0x40012c00
 800b668:	40014400 	.word	0x40014400
 800b66c:	40014800 	.word	0x40014800
 800b670:	ffffbfff 	.word	0xffffbfff

0800b674 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6a1b      	ldr	r3, [r3, #32]
 800b682:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6a1b      	ldr	r3, [r3, #32]
 800b688:	4a21      	ldr	r2, [pc, #132]	@ (800b710 <TIM_OC5_SetConfig+0x9c>)
 800b68a:	401a      	ands	r2, r3
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b69a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	4a1d      	ldr	r2, [pc, #116]	@ (800b714 <TIM_OC5_SetConfig+0xa0>)
 800b6a0:	4013      	ands	r3, r2
 800b6a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	4a19      	ldr	r2, [pc, #100]	@ (800b718 <TIM_OC5_SetConfig+0xa4>)
 800b6b2:	4013      	ands	r3, r2
 800b6b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	041b      	lsls	r3, r3, #16
 800b6bc:	693a      	ldr	r2, [r7, #16]
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4a15      	ldr	r2, [pc, #84]	@ (800b71c <TIM_OC5_SetConfig+0xa8>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d007      	beq.n	800b6da <TIM_OC5_SetConfig+0x66>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	4a14      	ldr	r2, [pc, #80]	@ (800b720 <TIM_OC5_SetConfig+0xac>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d003      	beq.n	800b6da <TIM_OC5_SetConfig+0x66>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4a13      	ldr	r2, [pc, #76]	@ (800b724 <TIM_OC5_SetConfig+0xb0>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d109      	bne.n	800b6ee <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	4a0c      	ldr	r2, [pc, #48]	@ (800b710 <TIM_OC5_SetConfig+0x9c>)
 800b6de:	4013      	ands	r3, r2
 800b6e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	695b      	ldr	r3, [r3, #20]
 800b6e6:	021b      	lsls	r3, r3, #8
 800b6e8:	697a      	ldr	r2, [r7, #20]
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	697a      	ldr	r2, [r7, #20]
 800b6f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	68fa      	ldr	r2, [r7, #12]
 800b6f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	685a      	ldr	r2, [r3, #4]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	693a      	ldr	r2, [r7, #16]
 800b706:	621a      	str	r2, [r3, #32]
}
 800b708:	46c0      	nop			@ (mov r8, r8)
 800b70a:	46bd      	mov	sp, r7
 800b70c:	b006      	add	sp, #24
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	fffeffff 	.word	0xfffeffff
 800b714:	fffeff8f 	.word	0xfffeff8f
 800b718:	fffdffff 	.word	0xfffdffff
 800b71c:	40012c00 	.word	0x40012c00
 800b720:	40014400 	.word	0x40014400
 800b724:	40014800 	.word	0x40014800

0800b728 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b086      	sub	sp, #24
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a1b      	ldr	r3, [r3, #32]
 800b736:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6a1b      	ldr	r3, [r3, #32]
 800b73c:	4a22      	ldr	r2, [pc, #136]	@ (800b7c8 <TIM_OC6_SetConfig+0xa0>)
 800b73e:	401a      	ands	r2, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b74e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	4a1e      	ldr	r2, [pc, #120]	@ (800b7cc <TIM_OC6_SetConfig+0xa4>)
 800b754:	4013      	ands	r3, r2
 800b756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	021b      	lsls	r3, r3, #8
 800b75e:	68fa      	ldr	r2, [r7, #12]
 800b760:	4313      	orrs	r3, r2
 800b762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	4a1a      	ldr	r2, [pc, #104]	@ (800b7d0 <TIM_OC6_SetConfig+0xa8>)
 800b768:	4013      	ands	r3, r2
 800b76a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	051b      	lsls	r3, r3, #20
 800b772:	693a      	ldr	r2, [r7, #16]
 800b774:	4313      	orrs	r3, r2
 800b776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4a16      	ldr	r2, [pc, #88]	@ (800b7d4 <TIM_OC6_SetConfig+0xac>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d007      	beq.n	800b790 <TIM_OC6_SetConfig+0x68>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a15      	ldr	r2, [pc, #84]	@ (800b7d8 <TIM_OC6_SetConfig+0xb0>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d003      	beq.n	800b790 <TIM_OC6_SetConfig+0x68>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4a14      	ldr	r2, [pc, #80]	@ (800b7dc <TIM_OC6_SetConfig+0xb4>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d109      	bne.n	800b7a4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	4a13      	ldr	r2, [pc, #76]	@ (800b7e0 <TIM_OC6_SetConfig+0xb8>)
 800b794:	4013      	ands	r3, r2
 800b796:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	695b      	ldr	r3, [r3, #20]
 800b79c:	029b      	lsls	r3, r3, #10
 800b79e:	697a      	ldr	r2, [r7, #20]
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	697a      	ldr	r2, [r7, #20]
 800b7a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	685a      	ldr	r2, [r3, #4]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	693a      	ldr	r2, [r7, #16]
 800b7bc:	621a      	str	r2, [r3, #32]
}
 800b7be:	46c0      	nop			@ (mov r8, r8)
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	b006      	add	sp, #24
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	46c0      	nop			@ (mov r8, r8)
 800b7c8:	ffefffff 	.word	0xffefffff
 800b7cc:	feff8fff 	.word	0xfeff8fff
 800b7d0:	ffdfffff 	.word	0xffdfffff
 800b7d4:	40012c00 	.word	0x40012c00
 800b7d8:	40014400 	.word	0x40014400
 800b7dc:	40014800 	.word	0x40014800
 800b7e0:	fffbffff 	.word	0xfffbffff

0800b7e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	607a      	str	r2, [r7, #4]
 800b7f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6a1b      	ldr	r3, [r3, #32]
 800b7f6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6a1b      	ldr	r3, [r3, #32]
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	4393      	bics	r3, r2
 800b800:	001a      	movs	r2, r3
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	699b      	ldr	r3, [r3, #24]
 800b80a:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	4a1e      	ldr	r2, [pc, #120]	@ (800b888 <TIM_TI1_SetConfig+0xa4>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d008      	beq.n	800b826 <TIM_TI1_SetConfig+0x42>
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	2380      	movs	r3, #128	@ 0x80
 800b818:	05db      	lsls	r3, r3, #23
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d003      	beq.n	800b826 <TIM_TI1_SetConfig+0x42>
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	4a1a      	ldr	r2, [pc, #104]	@ (800b88c <TIM_TI1_SetConfig+0xa8>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d101      	bne.n	800b82a <TIM_TI1_SetConfig+0x46>
 800b826:	2301      	movs	r3, #1
 800b828:	e000      	b.n	800b82c <TIM_TI1_SetConfig+0x48>
 800b82a:	2300      	movs	r3, #0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d008      	beq.n	800b842 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	2203      	movs	r2, #3
 800b834:	4393      	bics	r3, r2
 800b836:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b838:	697a      	ldr	r2, [r7, #20]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	4313      	orrs	r3, r2
 800b83e:	617b      	str	r3, [r7, #20]
 800b840:	e003      	b.n	800b84a <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	2201      	movs	r2, #1
 800b846:	4313      	orrs	r3, r2
 800b848:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	22f0      	movs	r2, #240	@ 0xf0
 800b84e:	4393      	bics	r3, r2
 800b850:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	011b      	lsls	r3, r3, #4
 800b856:	22ff      	movs	r2, #255	@ 0xff
 800b858:	4013      	ands	r3, r2
 800b85a:	697a      	ldr	r2, [r7, #20]
 800b85c:	4313      	orrs	r3, r2
 800b85e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	220a      	movs	r2, #10
 800b864:	4393      	bics	r3, r2
 800b866:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	220a      	movs	r2, #10
 800b86c:	4013      	ands	r3, r2
 800b86e:	693a      	ldr	r2, [r7, #16]
 800b870:	4313      	orrs	r3, r2
 800b872:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	697a      	ldr	r2, [r7, #20]
 800b878:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	693a      	ldr	r2, [r7, #16]
 800b87e:	621a      	str	r2, [r3, #32]
}
 800b880:	46c0      	nop			@ (mov r8, r8)
 800b882:	46bd      	mov	sp, r7
 800b884:	b006      	add	sp, #24
 800b886:	bd80      	pop	{r7, pc}
 800b888:	40012c00 	.word	0x40012c00
 800b88c:	40000400 	.word	0x40000400

0800b890 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b086      	sub	sp, #24
 800b894:	af00      	add	r7, sp, #0
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6a1b      	ldr	r3, [r3, #32]
 800b8a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	6a1b      	ldr	r3, [r3, #32]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	4393      	bics	r3, r2
 800b8aa:	001a      	movs	r2, r3
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	699b      	ldr	r3, [r3, #24]
 800b8b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	22f0      	movs	r2, #240	@ 0xf0
 800b8ba:	4393      	bics	r3, r2
 800b8bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	011b      	lsls	r3, r3, #4
 800b8c2:	693a      	ldr	r2, [r7, #16]
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	220a      	movs	r2, #10
 800b8cc:	4393      	bics	r3, r2
 800b8ce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b8d0:	697a      	ldr	r2, [r7, #20]
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	693a      	ldr	r2, [r7, #16]
 800b8dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	697a      	ldr	r2, [r7, #20]
 800b8e2:	621a      	str	r2, [r3, #32]
}
 800b8e4:	46c0      	nop			@ (mov r8, r8)
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	b006      	add	sp, #24
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b086      	sub	sp, #24
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	607a      	str	r2, [r7, #4]
 800b8f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6a1b      	ldr	r3, [r3, #32]
 800b8fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	6a1b      	ldr	r3, [r3, #32]
 800b904:	2210      	movs	r2, #16
 800b906:	4393      	bics	r3, r2
 800b908:	001a      	movs	r2, r3
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	699b      	ldr	r3, [r3, #24]
 800b912:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	4a14      	ldr	r2, [pc, #80]	@ (800b968 <TIM_TI2_SetConfig+0x7c>)
 800b918:	4013      	ands	r3, r2
 800b91a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	021b      	lsls	r3, r3, #8
 800b920:	693a      	ldr	r2, [r7, #16]
 800b922:	4313      	orrs	r3, r2
 800b924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	4a10      	ldr	r2, [pc, #64]	@ (800b96c <TIM_TI2_SetConfig+0x80>)
 800b92a:	4013      	ands	r3, r2
 800b92c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	031b      	lsls	r3, r3, #12
 800b932:	041b      	lsls	r3, r3, #16
 800b934:	0c1b      	lsrs	r3, r3, #16
 800b936:	693a      	ldr	r2, [r7, #16]
 800b938:	4313      	orrs	r3, r2
 800b93a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	22a0      	movs	r2, #160	@ 0xa0
 800b940:	4393      	bics	r3, r2
 800b942:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	011b      	lsls	r3, r3, #4
 800b948:	22a0      	movs	r2, #160	@ 0xa0
 800b94a:	4013      	ands	r3, r2
 800b94c:	697a      	ldr	r2, [r7, #20]
 800b94e:	4313      	orrs	r3, r2
 800b950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	693a      	ldr	r2, [r7, #16]
 800b956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	697a      	ldr	r2, [r7, #20]
 800b95c:	621a      	str	r2, [r3, #32]
}
 800b95e:	46c0      	nop			@ (mov r8, r8)
 800b960:	46bd      	mov	sp, r7
 800b962:	b006      	add	sp, #24
 800b964:	bd80      	pop	{r7, pc}
 800b966:	46c0      	nop			@ (mov r8, r8)
 800b968:	fffffcff 	.word	0xfffffcff
 800b96c:	ffff0fff 	.word	0xffff0fff

0800b970 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b086      	sub	sp, #24
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6a1b      	ldr	r3, [r3, #32]
 800b980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6a1b      	ldr	r3, [r3, #32]
 800b986:	2210      	movs	r2, #16
 800b988:	4393      	bics	r3, r2
 800b98a:	001a      	movs	r2, r3
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	699b      	ldr	r3, [r3, #24]
 800b994:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	4a0d      	ldr	r2, [pc, #52]	@ (800b9d0 <TIM_TI2_ConfigInputStage+0x60>)
 800b99a:	4013      	ands	r3, r2
 800b99c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	031b      	lsls	r3, r3, #12
 800b9a2:	693a      	ldr	r2, [r7, #16]
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	22a0      	movs	r2, #160	@ 0xa0
 800b9ac:	4393      	bics	r3, r2
 800b9ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	011b      	lsls	r3, r3, #4
 800b9b4:	697a      	ldr	r2, [r7, #20]
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	693a      	ldr	r2, [r7, #16]
 800b9be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	697a      	ldr	r2, [r7, #20]
 800b9c4:	621a      	str	r2, [r3, #32]
}
 800b9c6:	46c0      	nop			@ (mov r8, r8)
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	b006      	add	sp, #24
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	46c0      	nop			@ (mov r8, r8)
 800b9d0:	ffff0fff 	.word	0xffff0fff

0800b9d4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b086      	sub	sp, #24
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	607a      	str	r2, [r7, #4]
 800b9e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	6a1b      	ldr	r3, [r3, #32]
 800b9e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	6a1b      	ldr	r3, [r3, #32]
 800b9ec:	4a17      	ldr	r2, [pc, #92]	@ (800ba4c <TIM_TI3_SetConfig+0x78>)
 800b9ee:	401a      	ands	r2, r3
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	69db      	ldr	r3, [r3, #28]
 800b9f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	2203      	movs	r2, #3
 800b9fe:	4393      	bics	r3, r2
 800ba00:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800ba02:	693a      	ldr	r2, [r7, #16]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	4313      	orrs	r3, r2
 800ba08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	22f0      	movs	r2, #240	@ 0xf0
 800ba0e:	4393      	bics	r3, r2
 800ba10:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	011b      	lsls	r3, r3, #4
 800ba16:	22ff      	movs	r2, #255	@ 0xff
 800ba18:	4013      	ands	r3, r2
 800ba1a:	693a      	ldr	r2, [r7, #16]
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	4a0b      	ldr	r2, [pc, #44]	@ (800ba50 <TIM_TI3_SetConfig+0x7c>)
 800ba24:	4013      	ands	r3, r2
 800ba26:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	021a      	lsls	r2, r3, #8
 800ba2c:	23a0      	movs	r3, #160	@ 0xa0
 800ba2e:	011b      	lsls	r3, r3, #4
 800ba30:	4013      	ands	r3, r2
 800ba32:	697a      	ldr	r2, [r7, #20]
 800ba34:	4313      	orrs	r3, r2
 800ba36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	693a      	ldr	r2, [r7, #16]
 800ba3c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	697a      	ldr	r2, [r7, #20]
 800ba42:	621a      	str	r2, [r3, #32]
}
 800ba44:	46c0      	nop			@ (mov r8, r8)
 800ba46:	46bd      	mov	sp, r7
 800ba48:	b006      	add	sp, #24
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	fffffeff 	.word	0xfffffeff
 800ba50:	fffff5ff 	.word	0xfffff5ff

0800ba54 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b086      	sub	sp, #24
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
 800ba60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	6a1b      	ldr	r3, [r3, #32]
 800ba66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	6a1b      	ldr	r3, [r3, #32]
 800ba6c:	4a18      	ldr	r2, [pc, #96]	@ (800bad0 <TIM_TI4_SetConfig+0x7c>)
 800ba6e:	401a      	ands	r2, r3
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	69db      	ldr	r3, [r3, #28]
 800ba78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	4a15      	ldr	r2, [pc, #84]	@ (800bad4 <TIM_TI4_SetConfig+0x80>)
 800ba7e:	4013      	ands	r3, r2
 800ba80:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	021b      	lsls	r3, r3, #8
 800ba86:	693a      	ldr	r2, [r7, #16]
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	4a12      	ldr	r2, [pc, #72]	@ (800bad8 <TIM_TI4_SetConfig+0x84>)
 800ba90:	4013      	ands	r3, r2
 800ba92:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	031b      	lsls	r3, r3, #12
 800ba98:	041b      	lsls	r3, r3, #16
 800ba9a:	0c1b      	lsrs	r3, r3, #16
 800ba9c:	693a      	ldr	r2, [r7, #16]
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	4a0d      	ldr	r2, [pc, #52]	@ (800badc <TIM_TI4_SetConfig+0x88>)
 800baa6:	4013      	ands	r3, r2
 800baa8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	031a      	lsls	r2, r3, #12
 800baae:	23a0      	movs	r3, #160	@ 0xa0
 800bab0:	021b      	lsls	r3, r3, #8
 800bab2:	4013      	ands	r3, r2
 800bab4:	697a      	ldr	r2, [r7, #20]
 800bab6:	4313      	orrs	r3, r2
 800bab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	693a      	ldr	r2, [r7, #16]
 800babe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	697a      	ldr	r2, [r7, #20]
 800bac4:	621a      	str	r2, [r3, #32]
}
 800bac6:	46c0      	nop			@ (mov r8, r8)
 800bac8:	46bd      	mov	sp, r7
 800baca:	b006      	add	sp, #24
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	46c0      	nop			@ (mov r8, r8)
 800bad0:	ffffefff 	.word	0xffffefff
 800bad4:	fffffcff 	.word	0xfffffcff
 800bad8:	ffff0fff 	.word	0xffff0fff
 800badc:	ffff5fff 	.word	0xffff5fff

0800bae0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	689b      	ldr	r3, [r3, #8]
 800baee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	4a08      	ldr	r2, [pc, #32]	@ (800bb14 <TIM_ITRx_SetConfig+0x34>)
 800baf4:	4013      	ands	r3, r2
 800baf6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800baf8:	683a      	ldr	r2, [r7, #0]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	4313      	orrs	r3, r2
 800bafe:	2207      	movs	r2, #7
 800bb00:	4313      	orrs	r3, r2
 800bb02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	609a      	str	r2, [r3, #8]
}
 800bb0a:	46c0      	nop			@ (mov r8, r8)
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	b004      	add	sp, #16
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	46c0      	nop			@ (mov r8, r8)
 800bb14:	ffcfff8f 	.word	0xffcfff8f

0800bb18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b086      	sub	sp, #24
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	60b9      	str	r1, [r7, #8]
 800bb22:	607a      	str	r2, [r7, #4]
 800bb24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	4a09      	ldr	r2, [pc, #36]	@ (800bb54 <TIM_ETR_SetConfig+0x3c>)
 800bb30:	4013      	ands	r3, r2
 800bb32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	021a      	lsls	r2, r3, #8
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	431a      	orrs	r2, r3
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	697a      	ldr	r2, [r7, #20]
 800bb42:	4313      	orrs	r3, r2
 800bb44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	697a      	ldr	r2, [r7, #20]
 800bb4a:	609a      	str	r2, [r3, #8]
}
 800bb4c:	46c0      	nop			@ (mov r8, r8)
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	b006      	add	sp, #24
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	ffff00ff 	.word	0xffff00ff

0800bb58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b086      	sub	sp, #24
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	221f      	movs	r2, #31
 800bb68:	4013      	ands	r3, r2
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	409a      	lsls	r2, r3
 800bb6e:	0013      	movs	r3, r2
 800bb70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6a1b      	ldr	r3, [r3, #32]
 800bb76:	697a      	ldr	r2, [r7, #20]
 800bb78:	43d2      	mvns	r2, r2
 800bb7a:	401a      	ands	r2, r3
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	6a1a      	ldr	r2, [r3, #32]
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	211f      	movs	r1, #31
 800bb88:	400b      	ands	r3, r1
 800bb8a:	6879      	ldr	r1, [r7, #4]
 800bb8c:	4099      	lsls	r1, r3
 800bb8e:	000b      	movs	r3, r1
 800bb90:	431a      	orrs	r2, r3
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	621a      	str	r2, [r3, #32]
}
 800bb96:	46c0      	nop			@ (mov r8, r8)
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	b006      	add	sp, #24
 800bb9c:	bd80      	pop	{r7, pc}
	...

0800bba0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2184      	movs	r1, #132	@ 0x84
 800bbac:	4a1c      	ldr	r2, [pc, #112]	@ (800bc20 <TIM_ResetCallback+0x80>)
 800bbae:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2188      	movs	r1, #136	@ 0x88
 800bbb4:	4a1b      	ldr	r2, [pc, #108]	@ (800bc24 <TIM_ResetCallback+0x84>)
 800bbb6:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	218c      	movs	r1, #140	@ 0x8c
 800bbbc:	4a1a      	ldr	r2, [pc, #104]	@ (800bc28 <TIM_ResetCallback+0x88>)
 800bbbe:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2190      	movs	r1, #144	@ 0x90
 800bbc4:	4a19      	ldr	r2, [pc, #100]	@ (800bc2c <TIM_ResetCallback+0x8c>)
 800bbc6:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2194      	movs	r1, #148	@ 0x94
 800bbcc:	4a18      	ldr	r2, [pc, #96]	@ (800bc30 <TIM_ResetCallback+0x90>)
 800bbce:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2198      	movs	r1, #152	@ 0x98
 800bbd4:	4a17      	ldr	r2, [pc, #92]	@ (800bc34 <TIM_ResetCallback+0x94>)
 800bbd6:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	219c      	movs	r1, #156	@ 0x9c
 800bbdc:	4a16      	ldr	r2, [pc, #88]	@ (800bc38 <TIM_ResetCallback+0x98>)
 800bbde:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	21a0      	movs	r1, #160	@ 0xa0
 800bbe4:	4a15      	ldr	r2, [pc, #84]	@ (800bc3c <TIM_ResetCallback+0x9c>)
 800bbe6:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	21a4      	movs	r1, #164	@ 0xa4
 800bbec:	4a14      	ldr	r2, [pc, #80]	@ (800bc40 <TIM_ResetCallback+0xa0>)
 800bbee:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	21a8      	movs	r1, #168	@ 0xa8
 800bbf4:	4a13      	ldr	r2, [pc, #76]	@ (800bc44 <TIM_ResetCallback+0xa4>)
 800bbf6:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	21ac      	movs	r1, #172	@ 0xac
 800bbfc:	4a12      	ldr	r2, [pc, #72]	@ (800bc48 <TIM_ResetCallback+0xa8>)
 800bbfe:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	21b0      	movs	r1, #176	@ 0xb0
 800bc04:	4a11      	ldr	r2, [pc, #68]	@ (800bc4c <TIM_ResetCallback+0xac>)
 800bc06:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	21b4      	movs	r1, #180	@ 0xb4
 800bc0c:	4a10      	ldr	r2, [pc, #64]	@ (800bc50 <TIM_ResetCallback+0xb0>)
 800bc0e:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	21b8      	movs	r1, #184	@ 0xb8
 800bc14:	4a0f      	ldr	r2, [pc, #60]	@ (800bc54 <TIM_ResetCallback+0xb4>)
 800bc16:	505a      	str	r2, [r3, r1]
}
 800bc18:	46c0      	nop			@ (mov r8, r8)
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	b002      	add	sp, #8
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	0800aef9 	.word	0x0800aef9
 800bc24:	0800af09 	.word	0x0800af09
 800bc28:	0800af69 	.word	0x0800af69
 800bc2c:	0800af79 	.word	0x0800af79
 800bc30:	0800af29 	.word	0x0800af29
 800bc34:	0800af39 	.word	0x0800af39
 800bc38:	0800af19 	.word	0x0800af19
 800bc3c:	0800af49 	.word	0x0800af49
 800bc40:	0800af59 	.word	0x0800af59
 800bc44:	0800af89 	.word	0x0800af89
 800bc48:	0800be61 	.word	0x0800be61
 800bc4c:	0800be71 	.word	0x0800be71
 800bc50:	0800be81 	.word	0x0800be81
 800bc54:	0800be91 	.word	0x0800be91

0800bc58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	223c      	movs	r2, #60	@ 0x3c
 800bc66:	5c9b      	ldrb	r3, [r3, r2]
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d101      	bne.n	800bc70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc6c:	2302      	movs	r3, #2
 800bc6e:	e050      	b.n	800bd12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	223c      	movs	r2, #60	@ 0x3c
 800bc74:	2101      	movs	r1, #1
 800bc76:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	223d      	movs	r2, #61	@ 0x3d
 800bc7c:	2102      	movs	r1, #2
 800bc7e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4a21      	ldr	r2, [pc, #132]	@ (800bd1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d108      	bne.n	800bcac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	4a20      	ldr	r2, [pc, #128]	@ (800bd20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bc9e:	4013      	ands	r3, r2
 800bca0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2270      	movs	r2, #112	@ 0x70
 800bcb0:	4393      	bics	r3, r2
 800bcb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	68fa      	ldr	r2, [r7, #12]
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	68fa      	ldr	r2, [r7, #12]
 800bcc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a14      	ldr	r2, [pc, #80]	@ (800bd1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d00a      	beq.n	800bce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	2380      	movs	r3, #128	@ 0x80
 800bcd6:	05db      	lsls	r3, r3, #23
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d004      	beq.n	800bce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a10      	ldr	r2, [pc, #64]	@ (800bd24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d10c      	bne.n	800bd00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	2280      	movs	r2, #128	@ 0x80
 800bcea:	4393      	bics	r3, r2
 800bcec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	689b      	ldr	r3, [r3, #8]
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	68ba      	ldr	r2, [r7, #8]
 800bcfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	223d      	movs	r2, #61	@ 0x3d
 800bd04:	2101      	movs	r1, #1
 800bd06:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	223c      	movs	r2, #60	@ 0x3c
 800bd0c:	2100      	movs	r1, #0
 800bd0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bd10:	2300      	movs	r3, #0
}
 800bd12:	0018      	movs	r0, r3
 800bd14:	46bd      	mov	sp, r7
 800bd16:	b004      	add	sp, #16
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	46c0      	nop			@ (mov r8, r8)
 800bd1c:	40012c00 	.word	0x40012c00
 800bd20:	ff0fffff 	.word	0xff0fffff
 800bd24:	40000400 	.word	0x40000400

0800bd28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bd32:	2300      	movs	r3, #0
 800bd34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	223c      	movs	r2, #60	@ 0x3c
 800bd3a:	5c9b      	ldrb	r3, [r3, r2]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d101      	bne.n	800bd44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bd40:	2302      	movs	r3, #2
 800bd42:	e06f      	b.n	800be24 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	223c      	movs	r2, #60	@ 0x3c
 800bd48:	2101      	movs	r1, #1
 800bd4a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	22ff      	movs	r2, #255	@ 0xff
 800bd50:	4393      	bics	r3, r2
 800bd52:	001a      	movs	r2, r3
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	4a33      	ldr	r2, [pc, #204]	@ (800be2c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800bd60:	401a      	ands	r2, r3
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	4313      	orrs	r3, r2
 800bd68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	4a30      	ldr	r2, [pc, #192]	@ (800be30 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800bd6e:	401a      	ands	r2, r3
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	4313      	orrs	r3, r2
 800bd76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	4a2e      	ldr	r2, [pc, #184]	@ (800be34 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800bd7c:	401a      	ands	r2, r3
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4313      	orrs	r3, r2
 800bd84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	4a2b      	ldr	r2, [pc, #172]	@ (800be38 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800bd8a:	401a      	ands	r2, r3
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	691b      	ldr	r3, [r3, #16]
 800bd90:	4313      	orrs	r3, r2
 800bd92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	4a29      	ldr	r2, [pc, #164]	@ (800be3c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800bd98:	401a      	ands	r2, r3
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	695b      	ldr	r3, [r3, #20]
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	4a26      	ldr	r2, [pc, #152]	@ (800be40 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800bda6:	401a      	ands	r2, r3
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdac:	4313      	orrs	r3, r2
 800bdae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	4a24      	ldr	r2, [pc, #144]	@ (800be44 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800bdb4:	401a      	ands	r2, r3
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	699b      	ldr	r3, [r3, #24]
 800bdba:	041b      	lsls	r3, r3, #16
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	4a21      	ldr	r2, [pc, #132]	@ (800be48 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800bdc4:	401a      	ands	r2, r3
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	69db      	ldr	r3, [r3, #28]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4a1e      	ldr	r2, [pc, #120]	@ (800be4c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d11c      	bne.n	800be12 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	4a1d      	ldr	r2, [pc, #116]	@ (800be50 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800bddc:	401a      	ands	r2, r3
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bde2:	051b      	lsls	r3, r3, #20
 800bde4:	4313      	orrs	r3, r2
 800bde6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	4a1a      	ldr	r2, [pc, #104]	@ (800be54 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800bdec:	401a      	ands	r2, r3
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	6a1b      	ldr	r3, [r3, #32]
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	4a17      	ldr	r2, [pc, #92]	@ (800be58 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800bdfa:	401a      	ands	r2, r3
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be00:	4313      	orrs	r3, r2
 800be02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	4a15      	ldr	r2, [pc, #84]	@ (800be5c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800be08:	401a      	ands	r2, r3
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be0e:	4313      	orrs	r3, r2
 800be10:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	68fa      	ldr	r2, [r7, #12]
 800be18:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	223c      	movs	r2, #60	@ 0x3c
 800be1e:	2100      	movs	r1, #0
 800be20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800be22:	2300      	movs	r3, #0
}
 800be24:	0018      	movs	r0, r3
 800be26:	46bd      	mov	sp, r7
 800be28:	b004      	add	sp, #16
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	fffffcff 	.word	0xfffffcff
 800be30:	fffffbff 	.word	0xfffffbff
 800be34:	fffff7ff 	.word	0xfffff7ff
 800be38:	ffffefff 	.word	0xffffefff
 800be3c:	ffffdfff 	.word	0xffffdfff
 800be40:	ffffbfff 	.word	0xffffbfff
 800be44:	fff0ffff 	.word	0xfff0ffff
 800be48:	efffffff 	.word	0xefffffff
 800be4c:	40012c00 	.word	0x40012c00
 800be50:	ff0fffff 	.word	0xff0fffff
 800be54:	feffffff 	.word	0xfeffffff
 800be58:	fdffffff 	.word	0xfdffffff
 800be5c:	dfffffff 	.word	0xdfffffff

0800be60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be68:	46c0      	nop			@ (mov r8, r8)
 800be6a:	46bd      	mov	sp, r7
 800be6c:	b002      	add	sp, #8
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800be78:	46c0      	nop			@ (mov r8, r8)
 800be7a:	46bd      	mov	sp, r7
 800be7c:	b002      	add	sp, #8
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be88:	46c0      	nop			@ (mov r8, r8)
 800be8a:	46bd      	mov	sp, r7
 800be8c:	b002      	add	sp, #8
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800be98:	46c0      	nop			@ (mov r8, r8)
 800be9a:	46bd      	mov	sp, r7
 800be9c:	b002      	add	sp, #8
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d101      	bne.n	800beb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800beae:	2301      	movs	r3, #1
 800beb0:	e055      	b.n	800bf5e <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2288      	movs	r2, #136	@ 0x88
 800beb6:	589b      	ldr	r3, [r3, r2]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d116      	bne.n	800beea <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2284      	movs	r2, #132	@ 0x84
 800bec0:	2100      	movs	r1, #0
 800bec2:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	0018      	movs	r0, r3
 800bec8:	f000 fce0 	bl	800c88c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	22c4      	movs	r2, #196	@ 0xc4
 800bed0:	589b      	ldr	r3, [r3, r2]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d103      	bne.n	800bede <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	21c4      	movs	r1, #196	@ 0xc4
 800beda:	4a23      	ldr	r2, [pc, #140]	@ (800bf68 <HAL_UART_Init+0xc8>)
 800bedc:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	22c4      	movs	r2, #196	@ 0xc4
 800bee2:	589b      	ldr	r3, [r3, r2]
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	0010      	movs	r0, r2
 800bee8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2288      	movs	r2, #136	@ 0x88
 800beee:	2124      	movs	r1, #36	@ 0x24
 800bef0:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2101      	movs	r1, #1
 800befe:	438a      	bics	r2, r1
 800bf00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d003      	beq.n	800bf12 <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	0018      	movs	r0, r3
 800bf0e:	f000 ff85 	bl	800ce1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	0018      	movs	r0, r3
 800bf16:	f000 fd09 	bl	800c92c <UART_SetConfig>
 800bf1a:	0003      	movs	r3, r0
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d101      	bne.n	800bf24 <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
 800bf20:	2301      	movs	r3, #1
 800bf22:	e01c      	b.n	800bf5e <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	685a      	ldr	r2, [r3, #4]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	490f      	ldr	r1, [pc, #60]	@ (800bf6c <HAL_UART_Init+0xcc>)
 800bf30:	400a      	ands	r2, r1
 800bf32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	689a      	ldr	r2, [r3, #8]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	212a      	movs	r1, #42	@ 0x2a
 800bf40:	438a      	bics	r2, r1
 800bf42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	681a      	ldr	r2, [r3, #0]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	2101      	movs	r1, #1
 800bf50:	430a      	orrs	r2, r1
 800bf52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	0018      	movs	r0, r3
 800bf58:	f001 f814 	bl	800cf84 <UART_CheckIdleState>
 800bf5c:	0003      	movs	r3, r0
}
 800bf5e:	0018      	movs	r0, r3
 800bf60:	46bd      	mov	sp, r7
 800bf62:	b002      	add	sp, #8
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	46c0      	nop			@ (mov r8, r8)
 800bf68:	080056bd 	.word	0x080056bd
 800bf6c:	ffffb7ff 	.word	0xffffb7ff

0800bf70 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b086      	sub	sp, #24
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	607a      	str	r2, [r7, #4]
 800bf7a:	230b      	movs	r3, #11
 800bf7c:	18fb      	adds	r3, r7, r3
 800bf7e:	1c0a      	adds	r2, r1, #0
 800bf80:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf82:	2317      	movs	r3, #23
 800bf84:	18fb      	adds	r3, r7, r3
 800bf86:	2200      	movs	r2, #0
 800bf88:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d109      	bne.n	800bfa4 <HAL_UART_RegisterCallback+0x34>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2290      	movs	r2, #144	@ 0x90
 800bf94:	589b      	ldr	r3, [r3, r2]
 800bf96:	2240      	movs	r2, #64	@ 0x40
 800bf98:	431a      	orrs	r2, r3
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2190      	movs	r1, #144	@ 0x90
 800bf9e:	505a      	str	r2, [r3, r1]

    return HAL_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e08f      	b.n	800c0c4 <HAL_UART_RegisterCallback+0x154>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2288      	movs	r2, #136	@ 0x88
 800bfa8:	589b      	ldr	r3, [r3, r2]
 800bfaa:	2b20      	cmp	r3, #32
 800bfac:	d157      	bne.n	800c05e <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800bfae:	230b      	movs	r3, #11
 800bfb0:	18fb      	adds	r3, r7, r3
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	2b0c      	cmp	r3, #12
 800bfb6:	d845      	bhi.n	800c044 <HAL_UART_RegisterCallback+0xd4>
 800bfb8:	009a      	lsls	r2, r3, #2
 800bfba:	4b44      	ldr	r3, [pc, #272]	@ (800c0cc <HAL_UART_RegisterCallback+0x15c>)
 800bfbc:	18d3      	adds	r3, r2, r3
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	469f      	mov	pc, r3
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2194      	movs	r1, #148	@ 0x94
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	505a      	str	r2, [r3, r1]
        break;
 800bfca:	e078      	b.n	800c0be <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2198      	movs	r1, #152	@ 0x98
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	505a      	str	r2, [r3, r1]
        break;
 800bfd4:	e073      	b.n	800c0be <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	219c      	movs	r1, #156	@ 0x9c
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	505a      	str	r2, [r3, r1]
        break;
 800bfde:	e06e      	b.n	800c0be <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	21a0      	movs	r1, #160	@ 0xa0
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	505a      	str	r2, [r3, r1]
        break;
 800bfe8:	e069      	b.n	800c0be <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	21a4      	movs	r1, #164	@ 0xa4
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	505a      	str	r2, [r3, r1]
        break;
 800bff2:	e064      	b.n	800c0be <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	21a8      	movs	r1, #168	@ 0xa8
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	505a      	str	r2, [r3, r1]
        break;
 800bffc:	e05f      	b.n	800c0be <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	21ac      	movs	r1, #172	@ 0xac
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	505a      	str	r2, [r3, r1]
        break;
 800c006:	e05a      	b.n	800c0be <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	21b0      	movs	r1, #176	@ 0xb0
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	505a      	str	r2, [r3, r1]
        break;
 800c010:	e055      	b.n	800c0be <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	21b4      	movs	r1, #180	@ 0xb4
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	505a      	str	r2, [r3, r1]
        break;
 800c01a:	e050      	b.n	800c0be <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	21b8      	movs	r1, #184	@ 0xb8
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	505a      	str	r2, [r3, r1]
        break;
 800c024:	e04b      	b.n	800c0be <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	21bc      	movs	r1, #188	@ 0xbc
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	505a      	str	r2, [r3, r1]
        break;
 800c02e:	e046      	b.n	800c0be <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	21c4      	movs	r1, #196	@ 0xc4
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	505a      	str	r2, [r3, r1]
        break;
 800c038:	e041      	b.n	800c0be <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	21c8      	movs	r1, #200	@ 0xc8
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	505a      	str	r2, [r3, r1]
        break;
 800c042:	e03c      	b.n	800c0be <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2290      	movs	r2, #144	@ 0x90
 800c048:	589b      	ldr	r3, [r3, r2]
 800c04a:	2240      	movs	r2, #64	@ 0x40
 800c04c:	431a      	orrs	r2, r3
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2190      	movs	r1, #144	@ 0x90
 800c052:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800c054:	2317      	movs	r3, #23
 800c056:	18fb      	adds	r3, r7, r3
 800c058:	2201      	movs	r2, #1
 800c05a:	701a      	strb	r2, [r3, #0]
        break;
 800c05c:	e02f      	b.n	800c0be <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2288      	movs	r2, #136	@ 0x88
 800c062:	589b      	ldr	r3, [r3, r2]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d11e      	bne.n	800c0a6 <HAL_UART_RegisterCallback+0x136>
  {
    switch (CallbackID)
 800c068:	230b      	movs	r3, #11
 800c06a:	18fb      	adds	r3, r7, r3
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	2b0b      	cmp	r3, #11
 800c070:	d002      	beq.n	800c078 <HAL_UART_RegisterCallback+0x108>
 800c072:	2b0c      	cmp	r3, #12
 800c074:	d005      	beq.n	800c082 <HAL_UART_RegisterCallback+0x112>
 800c076:	e009      	b.n	800c08c <HAL_UART_RegisterCallback+0x11c>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	21c4      	movs	r1, #196	@ 0xc4
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	505a      	str	r2, [r3, r1]
        break;
 800c080:	e01d      	b.n	800c0be <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	21c8      	movs	r1, #200	@ 0xc8
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	505a      	str	r2, [r3, r1]
        break;
 800c08a:	e018      	b.n	800c0be <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2290      	movs	r2, #144	@ 0x90
 800c090:	589b      	ldr	r3, [r3, r2]
 800c092:	2240      	movs	r2, #64	@ 0x40
 800c094:	431a      	orrs	r2, r3
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2190      	movs	r1, #144	@ 0x90
 800c09a:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800c09c:	2317      	movs	r3, #23
 800c09e:	18fb      	adds	r3, r7, r3
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	701a      	strb	r2, [r3, #0]
        break;
 800c0a4:	e00b      	b.n	800c0be <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2290      	movs	r2, #144	@ 0x90
 800c0aa:	589b      	ldr	r3, [r3, r2]
 800c0ac:	2240      	movs	r2, #64	@ 0x40
 800c0ae:	431a      	orrs	r2, r3
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2190      	movs	r1, #144	@ 0x90
 800c0b4:	505a      	str	r2, [r3, r1]

    status =  HAL_ERROR;
 800c0b6:	2317      	movs	r3, #23
 800c0b8:	18fb      	adds	r3, r7, r3
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800c0be:	2317      	movs	r3, #23
 800c0c0:	18fb      	adds	r3, r7, r3
 800c0c2:	781b      	ldrb	r3, [r3, #0]
}
 800c0c4:	0018      	movs	r0, r3
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	b006      	add	sp, #24
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	0800e1d4 	.word	0x0800e1d4

0800c0d0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b088      	sub	sp, #32
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	1dbb      	adds	r3, r7, #6
 800c0dc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	228c      	movs	r2, #140	@ 0x8c
 800c0e2:	589b      	ldr	r3, [r3, r2]
 800c0e4:	2b20      	cmp	r3, #32
 800c0e6:	d14a      	bne.n	800c17e <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d003      	beq.n	800c0f6 <HAL_UART_Receive_DMA+0x26>
 800c0ee:	1dbb      	adds	r3, r7, #6
 800c0f0:	881b      	ldrh	r3, [r3, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d101      	bne.n	800c0fa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e042      	b.n	800c180 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	689a      	ldr	r2, [r3, #8]
 800c0fe:	2380      	movs	r3, #128	@ 0x80
 800c100:	015b      	lsls	r3, r3, #5
 800c102:	429a      	cmp	r2, r3
 800c104:	d109      	bne.n	800c11a <HAL_UART_Receive_DMA+0x4a>
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	691b      	ldr	r3, [r3, #16]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d105      	bne.n	800c11a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	2201      	movs	r2, #1
 800c112:	4013      	ands	r3, r2
 800c114:	d001      	beq.n	800c11a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800c116:	2301      	movs	r3, #1
 800c118:	e032      	b.n	800c180 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2200      	movs	r2, #0
 800c11e:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a18      	ldr	r2, [pc, #96]	@ (800c188 <HAL_UART_Receive_DMA+0xb8>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d020      	beq.n	800c16c <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	685a      	ldr	r2, [r3, #4]
 800c130:	2380      	movs	r3, #128	@ 0x80
 800c132:	041b      	lsls	r3, r3, #16
 800c134:	4013      	ands	r3, r2
 800c136:	d019      	beq.n	800c16c <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c138:	f3ef 8310 	mrs	r3, PRIMASK
 800c13c:	613b      	str	r3, [r7, #16]
  return(result);
 800c13e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c140:	61fb      	str	r3, [r7, #28]
 800c142:	2301      	movs	r3, #1
 800c144:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	f383 8810 	msr	PRIMASK, r3
}
 800c14c:	46c0      	nop			@ (mov r8, r8)
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	681a      	ldr	r2, [r3, #0]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	2180      	movs	r1, #128	@ 0x80
 800c15a:	04c9      	lsls	r1, r1, #19
 800c15c:	430a      	orrs	r2, r1
 800c15e:	601a      	str	r2, [r3, #0]
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	f383 8810 	msr	PRIMASK, r3
}
 800c16a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c16c:	1dbb      	adds	r3, r7, #6
 800c16e:	881a      	ldrh	r2, [r3, #0]
 800c170:	68b9      	ldr	r1, [r7, #8]
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	0018      	movs	r0, r3
 800c176:	f001 f81f 	bl	800d1b8 <UART_Start_Receive_DMA>
 800c17a:	0003      	movs	r3, r0
 800c17c:	e000      	b.n	800c180 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800c17e:	2302      	movs	r3, #2
  }
}
 800c180:	0018      	movs	r0, r3
 800c182:	46bd      	mov	sp, r7
 800c184:	b008      	add	sp, #32
 800c186:	bd80      	pop	{r7, pc}
 800c188:	40008000 	.word	0x40008000

0800c18c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c18c:	b5b0      	push	{r4, r5, r7, lr}
 800c18e:	b0aa      	sub	sp, #168	@ 0xa8
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	69db      	ldr	r3, [r3, #28]
 800c19a:	22a4      	movs	r2, #164	@ 0xa4
 800c19c:	18b9      	adds	r1, r7, r2
 800c19e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	20a0      	movs	r0, #160	@ 0xa0
 800c1a8:	1839      	adds	r1, r7, r0
 800c1aa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	689b      	ldr	r3, [r3, #8]
 800c1b2:	249c      	movs	r4, #156	@ 0x9c
 800c1b4:	1939      	adds	r1, r7, r4
 800c1b6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c1b8:	0011      	movs	r1, r2
 800c1ba:	18bb      	adds	r3, r7, r2
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4aa5      	ldr	r2, [pc, #660]	@ (800c454 <HAL_UART_IRQHandler+0x2c8>)
 800c1c0:	4013      	ands	r3, r2
 800c1c2:	2298      	movs	r2, #152	@ 0x98
 800c1c4:	18bd      	adds	r5, r7, r2
 800c1c6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800c1c8:	18bb      	adds	r3, r7, r2
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d11a      	bne.n	800c206 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c1d0:	187b      	adds	r3, r7, r1
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	2220      	movs	r2, #32
 800c1d6:	4013      	ands	r3, r2
 800c1d8:	d015      	beq.n	800c206 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c1da:	183b      	adds	r3, r7, r0
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2220      	movs	r2, #32
 800c1e0:	4013      	ands	r3, r2
 800c1e2:	d105      	bne.n	800c1f0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c1e4:	193b      	adds	r3, r7, r4
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	2380      	movs	r3, #128	@ 0x80
 800c1ea:	055b      	lsls	r3, r3, #21
 800c1ec:	4013      	ands	r3, r2
 800c1ee:	d00a      	beq.n	800c206 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d100      	bne.n	800c1fa <HAL_UART_IRQHandler+0x6e>
 800c1f8:	e2ea      	b.n	800c7d0 <HAL_UART_IRQHandler+0x644>
      {
        huart->RxISR(huart);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	0010      	movs	r0, r2
 800c202:	4798      	blx	r3
      }
      return;
 800c204:	e2e4      	b.n	800c7d0 <HAL_UART_IRQHandler+0x644>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c206:	2398      	movs	r3, #152	@ 0x98
 800c208:	18fb      	adds	r3, r7, r3
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d100      	bne.n	800c212 <HAL_UART_IRQHandler+0x86>
 800c210:	e128      	b.n	800c464 <HAL_UART_IRQHandler+0x2d8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c212:	239c      	movs	r3, #156	@ 0x9c
 800c214:	18fb      	adds	r3, r7, r3
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a8f      	ldr	r2, [pc, #572]	@ (800c458 <HAL_UART_IRQHandler+0x2cc>)
 800c21a:	4013      	ands	r3, r2
 800c21c:	d106      	bne.n	800c22c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c21e:	23a0      	movs	r3, #160	@ 0xa0
 800c220:	18fb      	adds	r3, r7, r3
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4a8d      	ldr	r2, [pc, #564]	@ (800c45c <HAL_UART_IRQHandler+0x2d0>)
 800c226:	4013      	ands	r3, r2
 800c228:	d100      	bne.n	800c22c <HAL_UART_IRQHandler+0xa0>
 800c22a:	e11b      	b.n	800c464 <HAL_UART_IRQHandler+0x2d8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c22c:	23a4      	movs	r3, #164	@ 0xa4
 800c22e:	18fb      	adds	r3, r7, r3
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2201      	movs	r2, #1
 800c234:	4013      	ands	r3, r2
 800c236:	d012      	beq.n	800c25e <HAL_UART_IRQHandler+0xd2>
 800c238:	23a0      	movs	r3, #160	@ 0xa0
 800c23a:	18fb      	adds	r3, r7, r3
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	2380      	movs	r3, #128	@ 0x80
 800c240:	005b      	lsls	r3, r3, #1
 800c242:	4013      	ands	r3, r2
 800c244:	d00b      	beq.n	800c25e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2201      	movs	r2, #1
 800c24c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2290      	movs	r2, #144	@ 0x90
 800c252:	589b      	ldr	r3, [r3, r2]
 800c254:	2201      	movs	r2, #1
 800c256:	431a      	orrs	r2, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2190      	movs	r1, #144	@ 0x90
 800c25c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c25e:	23a4      	movs	r3, #164	@ 0xa4
 800c260:	18fb      	adds	r3, r7, r3
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2202      	movs	r2, #2
 800c266:	4013      	ands	r3, r2
 800c268:	d011      	beq.n	800c28e <HAL_UART_IRQHandler+0x102>
 800c26a:	239c      	movs	r3, #156	@ 0x9c
 800c26c:	18fb      	adds	r3, r7, r3
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	2201      	movs	r2, #1
 800c272:	4013      	ands	r3, r2
 800c274:	d00b      	beq.n	800c28e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2202      	movs	r2, #2
 800c27c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2290      	movs	r2, #144	@ 0x90
 800c282:	589b      	ldr	r3, [r3, r2]
 800c284:	2204      	movs	r2, #4
 800c286:	431a      	orrs	r2, r3
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2190      	movs	r1, #144	@ 0x90
 800c28c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c28e:	23a4      	movs	r3, #164	@ 0xa4
 800c290:	18fb      	adds	r3, r7, r3
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	2204      	movs	r2, #4
 800c296:	4013      	ands	r3, r2
 800c298:	d011      	beq.n	800c2be <HAL_UART_IRQHandler+0x132>
 800c29a:	239c      	movs	r3, #156	@ 0x9c
 800c29c:	18fb      	adds	r3, r7, r3
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	4013      	ands	r3, r2
 800c2a4:	d00b      	beq.n	800c2be <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	2204      	movs	r2, #4
 800c2ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2290      	movs	r2, #144	@ 0x90
 800c2b2:	589b      	ldr	r3, [r3, r2]
 800c2b4:	2202      	movs	r2, #2
 800c2b6:	431a      	orrs	r2, r3
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2190      	movs	r1, #144	@ 0x90
 800c2bc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c2be:	23a4      	movs	r3, #164	@ 0xa4
 800c2c0:	18fb      	adds	r3, r7, r3
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	2208      	movs	r2, #8
 800c2c6:	4013      	ands	r3, r2
 800c2c8:	d017      	beq.n	800c2fa <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c2ca:	23a0      	movs	r3, #160	@ 0xa0
 800c2cc:	18fb      	adds	r3, r7, r3
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2220      	movs	r2, #32
 800c2d2:	4013      	ands	r3, r2
 800c2d4:	d105      	bne.n	800c2e2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c2d6:	239c      	movs	r3, #156	@ 0x9c
 800c2d8:	18fb      	adds	r3, r7, r3
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a5e      	ldr	r2, [pc, #376]	@ (800c458 <HAL_UART_IRQHandler+0x2cc>)
 800c2de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c2e0:	d00b      	beq.n	800c2fa <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2208      	movs	r2, #8
 800c2e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2290      	movs	r2, #144	@ 0x90
 800c2ee:	589b      	ldr	r3, [r3, r2]
 800c2f0:	2208      	movs	r2, #8
 800c2f2:	431a      	orrs	r2, r3
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2190      	movs	r1, #144	@ 0x90
 800c2f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c2fa:	23a4      	movs	r3, #164	@ 0xa4
 800c2fc:	18fb      	adds	r3, r7, r3
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	2380      	movs	r3, #128	@ 0x80
 800c302:	011b      	lsls	r3, r3, #4
 800c304:	4013      	ands	r3, r2
 800c306:	d013      	beq.n	800c330 <HAL_UART_IRQHandler+0x1a4>
 800c308:	23a0      	movs	r3, #160	@ 0xa0
 800c30a:	18fb      	adds	r3, r7, r3
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	2380      	movs	r3, #128	@ 0x80
 800c310:	04db      	lsls	r3, r3, #19
 800c312:	4013      	ands	r3, r2
 800c314:	d00c      	beq.n	800c330 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2280      	movs	r2, #128	@ 0x80
 800c31c:	0112      	lsls	r2, r2, #4
 800c31e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2290      	movs	r2, #144	@ 0x90
 800c324:	589b      	ldr	r3, [r3, r2]
 800c326:	2220      	movs	r2, #32
 800c328:	431a      	orrs	r2, r3
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2190      	movs	r1, #144	@ 0x90
 800c32e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2290      	movs	r2, #144	@ 0x90
 800c334:	589b      	ldr	r3, [r3, r2]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d100      	bne.n	800c33c <HAL_UART_IRQHandler+0x1b0>
 800c33a:	e24b      	b.n	800c7d4 <HAL_UART_IRQHandler+0x648>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c33c:	23a4      	movs	r3, #164	@ 0xa4
 800c33e:	18fb      	adds	r3, r7, r3
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2220      	movs	r2, #32
 800c344:	4013      	ands	r3, r2
 800c346:	d015      	beq.n	800c374 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c348:	23a0      	movs	r3, #160	@ 0xa0
 800c34a:	18fb      	adds	r3, r7, r3
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	2220      	movs	r2, #32
 800c350:	4013      	ands	r3, r2
 800c352:	d106      	bne.n	800c362 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c354:	239c      	movs	r3, #156	@ 0x9c
 800c356:	18fb      	adds	r3, r7, r3
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	2380      	movs	r3, #128	@ 0x80
 800c35c:	055b      	lsls	r3, r3, #21
 800c35e:	4013      	ands	r3, r2
 800c360:	d008      	beq.n	800c374 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c366:	2b00      	cmp	r3, #0
 800c368:	d004      	beq.n	800c374 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	0010      	movs	r0, r2
 800c372:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2290      	movs	r2, #144	@ 0x90
 800c378:	589b      	ldr	r3, [r3, r2]
 800c37a:	2194      	movs	r1, #148	@ 0x94
 800c37c:	187a      	adds	r2, r7, r1
 800c37e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	689b      	ldr	r3, [r3, #8]
 800c386:	2240      	movs	r2, #64	@ 0x40
 800c388:	4013      	ands	r3, r2
 800c38a:	2b40      	cmp	r3, #64	@ 0x40
 800c38c:	d004      	beq.n	800c398 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c38e:	187b      	adds	r3, r7, r1
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2228      	movs	r2, #40	@ 0x28
 800c394:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c396:	d050      	beq.n	800c43a <HAL_UART_IRQHandler+0x2ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	0018      	movs	r0, r3
 800c39c:	f000 fff2 	bl	800d384 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	689b      	ldr	r3, [r3, #8]
 800c3a6:	2240      	movs	r2, #64	@ 0x40
 800c3a8:	4013      	ands	r3, r2
 800c3aa:	2b40      	cmp	r3, #64	@ 0x40
 800c3ac:	d13e      	bne.n	800c42c <HAL_UART_IRQHandler+0x2a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c3ae:	f3ef 8310 	mrs	r3, PRIMASK
 800c3b2:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800c3b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3b6:	2090      	movs	r0, #144	@ 0x90
 800c3b8:	183a      	adds	r2, r7, r0
 800c3ba:	6013      	str	r3, [r2, #0]
 800c3bc:	2301      	movs	r3, #1
 800c3be:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c3c2:	f383 8810 	msr	PRIMASK, r3
}
 800c3c6:	46c0      	nop			@ (mov r8, r8)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	689a      	ldr	r2, [r3, #8]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	2140      	movs	r1, #64	@ 0x40
 800c3d4:	438a      	bics	r2, r1
 800c3d6:	609a      	str	r2, [r3, #8]
 800c3d8:	183b      	adds	r3, r7, r0
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c3e0:	f383 8810 	msr	PRIMASK, r3
}
 800c3e4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2280      	movs	r2, #128	@ 0x80
 800c3ea:	589b      	ldr	r3, [r3, r2]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d016      	beq.n	800c41e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2280      	movs	r2, #128	@ 0x80
 800c3f4:	589b      	ldr	r3, [r3, r2]
 800c3f6:	4a1a      	ldr	r2, [pc, #104]	@ (800c460 <HAL_UART_IRQHandler+0x2d4>)
 800c3f8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2280      	movs	r2, #128	@ 0x80
 800c3fe:	589b      	ldr	r3, [r3, r2]
 800c400:	0018      	movs	r0, r3
 800c402:	f7fb fce5 	bl	8007dd0 <HAL_DMA_Abort_IT>
 800c406:	1e03      	subs	r3, r0, #0
 800c408:	d022      	beq.n	800c450 <HAL_UART_IRQHandler+0x2c4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2280      	movs	r2, #128	@ 0x80
 800c40e:	589b      	ldr	r3, [r3, r2]
 800c410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	2180      	movs	r1, #128	@ 0x80
 800c416:	5852      	ldr	r2, [r2, r1]
 800c418:	0010      	movs	r0, r2
 800c41a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c41c:	e018      	b.n	800c450 <HAL_UART_IRQHandler+0x2c4>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	22a4      	movs	r2, #164	@ 0xa4
 800c422:	589b      	ldr	r3, [r3, r2]
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	0010      	movs	r0, r2
 800c428:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c42a:	e011      	b.n	800c450 <HAL_UART_IRQHandler+0x2c4>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	22a4      	movs	r2, #164	@ 0xa4
 800c430:	589b      	ldr	r3, [r3, r2]
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	0010      	movs	r0, r2
 800c436:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c438:	e00a      	b.n	800c450 <HAL_UART_IRQHandler+0x2c4>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	22a4      	movs	r2, #164	@ 0xa4
 800c43e:	589b      	ldr	r3, [r3, r2]
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	0010      	movs	r0, r2
 800c444:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2290      	movs	r2, #144	@ 0x90
 800c44a:	2100      	movs	r1, #0
 800c44c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800c44e:	e1c1      	b.n	800c7d4 <HAL_UART_IRQHandler+0x648>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c450:	46c0      	nop			@ (mov r8, r8)
    return;
 800c452:	e1bf      	b.n	800c7d4 <HAL_UART_IRQHandler+0x648>
 800c454:	0000080f 	.word	0x0000080f
 800c458:	10000001 	.word	0x10000001
 800c45c:	04000120 	.word	0x04000120
 800c460:	0800d657 	.word	0x0800d657

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d000      	beq.n	800c46e <HAL_UART_IRQHandler+0x2e2>
 800c46c:	e140      	b.n	800c6f0 <HAL_UART_IRQHandler+0x564>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c46e:	23a4      	movs	r3, #164	@ 0xa4
 800c470:	18fb      	adds	r3, r7, r3
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	2210      	movs	r2, #16
 800c476:	4013      	ands	r3, r2
 800c478:	d100      	bne.n	800c47c <HAL_UART_IRQHandler+0x2f0>
 800c47a:	e139      	b.n	800c6f0 <HAL_UART_IRQHandler+0x564>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c47c:	23a0      	movs	r3, #160	@ 0xa0
 800c47e:	18fb      	adds	r3, r7, r3
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2210      	movs	r2, #16
 800c484:	4013      	ands	r3, r2
 800c486:	d100      	bne.n	800c48a <HAL_UART_IRQHandler+0x2fe>
 800c488:	e132      	b.n	800c6f0 <HAL_UART_IRQHandler+0x564>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2210      	movs	r2, #16
 800c490:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	2240      	movs	r2, #64	@ 0x40
 800c49a:	4013      	ands	r3, r2
 800c49c:	2b40      	cmp	r3, #64	@ 0x40
 800c49e:	d000      	beq.n	800c4a2 <HAL_UART_IRQHandler+0x316>
 800c4a0:	e0a5      	b.n	800c5ee <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2280      	movs	r2, #128	@ 0x80
 800c4a6:	589b      	ldr	r3, [r3, r2]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	685a      	ldr	r2, [r3, #4]
 800c4ac:	217e      	movs	r1, #126	@ 0x7e
 800c4ae:	187b      	adds	r3, r7, r1
 800c4b0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800c4b2:	187b      	adds	r3, r7, r1
 800c4b4:	881b      	ldrh	r3, [r3, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d100      	bne.n	800c4bc <HAL_UART_IRQHandler+0x330>
 800c4ba:	e18d      	b.n	800c7d8 <HAL_UART_IRQHandler+0x64c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	225c      	movs	r2, #92	@ 0x5c
 800c4c0:	5a9b      	ldrh	r3, [r3, r2]
 800c4c2:	187a      	adds	r2, r7, r1
 800c4c4:	8812      	ldrh	r2, [r2, #0]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d300      	bcc.n	800c4cc <HAL_UART_IRQHandler+0x340>
 800c4ca:	e185      	b.n	800c7d8 <HAL_UART_IRQHandler+0x64c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	187a      	adds	r2, r7, r1
 800c4d0:	215e      	movs	r1, #94	@ 0x5e
 800c4d2:	8812      	ldrh	r2, [r2, #0]
 800c4d4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2280      	movs	r2, #128	@ 0x80
 800c4da:	589b      	ldr	r3, [r3, r2]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	2220      	movs	r2, #32
 800c4e2:	4013      	ands	r3, r2
 800c4e4:	d170      	bne.n	800c5c8 <HAL_UART_IRQHandler+0x43c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c4e6:	f3ef 8310 	mrs	r3, PRIMASK
 800c4ea:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800c4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4f6:	f383 8810 	msr	PRIMASK, r3
}
 800c4fa:	46c0      	nop			@ (mov r8, r8)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	49b8      	ldr	r1, [pc, #736]	@ (800c7e8 <HAL_UART_IRQHandler+0x65c>)
 800c508:	400a      	ands	r2, r1
 800c50a:	601a      	str	r2, [r3, #0]
 800c50c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c50e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c512:	f383 8810 	msr	PRIMASK, r3
}
 800c516:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c518:	f3ef 8310 	mrs	r3, PRIMASK
 800c51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800c51e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c520:	677b      	str	r3, [r7, #116]	@ 0x74
 800c522:	2301      	movs	r3, #1
 800c524:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c528:	f383 8810 	msr	PRIMASK, r3
}
 800c52c:	46c0      	nop			@ (mov r8, r8)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	689a      	ldr	r2, [r3, #8]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	2101      	movs	r1, #1
 800c53a:	438a      	bics	r2, r1
 800c53c:	609a      	str	r2, [r3, #8]
 800c53e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c540:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c542:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c544:	f383 8810 	msr	PRIMASK, r3
}
 800c548:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c54a:	f3ef 8310 	mrs	r3, PRIMASK
 800c54e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800c550:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c552:	673b      	str	r3, [r7, #112]	@ 0x70
 800c554:	2301      	movs	r3, #1
 800c556:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c558:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c55a:	f383 8810 	msr	PRIMASK, r3
}
 800c55e:	46c0      	nop			@ (mov r8, r8)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	689a      	ldr	r2, [r3, #8]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	2140      	movs	r1, #64	@ 0x40
 800c56c:	438a      	bics	r2, r1
 800c56e:	609a      	str	r2, [r3, #8]
 800c570:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c572:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c574:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c576:	f383 8810 	msr	PRIMASK, r3
}
 800c57a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	228c      	movs	r2, #140	@ 0x8c
 800c580:	2120      	movs	r1, #32
 800c582:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c58a:	f3ef 8310 	mrs	r3, PRIMASK
 800c58e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800c590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c592:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c594:	2301      	movs	r3, #1
 800c596:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c598:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c59a:	f383 8810 	msr	PRIMASK, r3
}
 800c59e:	46c0      	nop			@ (mov r8, r8)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2110      	movs	r1, #16
 800c5ac:	438a      	bics	r2, r1
 800c5ae:	601a      	str	r2, [r3, #0]
 800c5b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c5b6:	f383 8810 	msr	PRIMASK, r3
}
 800c5ba:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2280      	movs	r2, #128	@ 0x80
 800c5c0:	589b      	ldr	r3, [r3, r2]
 800c5c2:	0018      	movs	r0, r3
 800c5c4:	f7fb fba2 	bl	8007d0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2202      	movs	r2, #2
 800c5cc:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	22c0      	movs	r2, #192	@ 0xc0
 800c5d2:	589b      	ldr	r3, [r3, r2]
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	215c      	movs	r1, #92	@ 0x5c
 800c5d8:	5a51      	ldrh	r1, [r2, r1]
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	205e      	movs	r0, #94	@ 0x5e
 800c5de:	5a12      	ldrh	r2, [r2, r0]
 800c5e0:	b292      	uxth	r2, r2
 800c5e2:	1a8a      	subs	r2, r1, r2
 800c5e4:	b291      	uxth	r1, r2
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	0010      	movs	r0, r2
 800c5ea:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c5ec:	e0f4      	b.n	800c7d8 <HAL_UART_IRQHandler+0x64c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	225c      	movs	r2, #92	@ 0x5c
 800c5f2:	5a99      	ldrh	r1, [r3, r2]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	225e      	movs	r2, #94	@ 0x5e
 800c5f8:	5a9b      	ldrh	r3, [r3, r2]
 800c5fa:	b29a      	uxth	r2, r3
 800c5fc:	208e      	movs	r0, #142	@ 0x8e
 800c5fe:	183b      	adds	r3, r7, r0
 800c600:	1a8a      	subs	r2, r1, r2
 800c602:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	225e      	movs	r2, #94	@ 0x5e
 800c608:	5a9b      	ldrh	r3, [r3, r2]
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d100      	bne.n	800c612 <HAL_UART_IRQHandler+0x486>
 800c610:	e0e4      	b.n	800c7dc <HAL_UART_IRQHandler+0x650>
          && (nb_rx_data > 0U))
 800c612:	183b      	adds	r3, r7, r0
 800c614:	881b      	ldrh	r3, [r3, #0]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d100      	bne.n	800c61c <HAL_UART_IRQHandler+0x490>
 800c61a:	e0df      	b.n	800c7dc <HAL_UART_IRQHandler+0x650>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c61c:	f3ef 8310 	mrs	r3, PRIMASK
 800c620:	60fb      	str	r3, [r7, #12]
  return(result);
 800c622:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c624:	2488      	movs	r4, #136	@ 0x88
 800c626:	193a      	adds	r2, r7, r4
 800c628:	6013      	str	r3, [r2, #0]
 800c62a:	2301      	movs	r3, #1
 800c62c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	f383 8810 	msr	PRIMASK, r3
}
 800c634:	46c0      	nop			@ (mov r8, r8)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	496a      	ldr	r1, [pc, #424]	@ (800c7ec <HAL_UART_IRQHandler+0x660>)
 800c642:	400a      	ands	r2, r1
 800c644:	601a      	str	r2, [r3, #0]
 800c646:	193b      	adds	r3, r7, r4
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	f383 8810 	msr	PRIMASK, r3
}
 800c652:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c654:	f3ef 8310 	mrs	r3, PRIMASK
 800c658:	61bb      	str	r3, [r7, #24]
  return(result);
 800c65a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c65c:	2484      	movs	r4, #132	@ 0x84
 800c65e:	193a      	adds	r2, r7, r4
 800c660:	6013      	str	r3, [r2, #0]
 800c662:	2301      	movs	r3, #1
 800c664:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	f383 8810 	msr	PRIMASK, r3
}
 800c66c:	46c0      	nop			@ (mov r8, r8)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	689a      	ldr	r2, [r3, #8]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	495d      	ldr	r1, [pc, #372]	@ (800c7f0 <HAL_UART_IRQHandler+0x664>)
 800c67a:	400a      	ands	r2, r1
 800c67c:	609a      	str	r2, [r3, #8]
 800c67e:	193b      	adds	r3, r7, r4
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c684:	6a3b      	ldr	r3, [r7, #32]
 800c686:	f383 8810 	msr	PRIMASK, r3
}
 800c68a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	228c      	movs	r2, #140	@ 0x8c
 800c690:	2120      	movs	r1, #32
 800c692:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2200      	movs	r2, #0
 800c698:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6a0:	f3ef 8310 	mrs	r3, PRIMASK
 800c6a4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800c6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6a8:	2480      	movs	r4, #128	@ 0x80
 800c6aa:	193a      	adds	r2, r7, r4
 800c6ac:	6013      	str	r3, [r2, #0]
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6b4:	f383 8810 	msr	PRIMASK, r3
}
 800c6b8:	46c0      	nop			@ (mov r8, r8)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	681a      	ldr	r2, [r3, #0]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2110      	movs	r1, #16
 800c6c6:	438a      	bics	r2, r1
 800c6c8:	601a      	str	r2, [r3, #0]
 800c6ca:	193b      	adds	r3, r7, r4
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6d2:	f383 8810 	msr	PRIMASK, r3
}
 800c6d6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2202      	movs	r2, #2
 800c6dc:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	22c0      	movs	r2, #192	@ 0xc0
 800c6e2:	589b      	ldr	r3, [r3, r2]
 800c6e4:	183a      	adds	r2, r7, r0
 800c6e6:	8811      	ldrh	r1, [r2, #0]
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	0010      	movs	r0, r2
 800c6ec:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c6ee:	e075      	b.n	800c7dc <HAL_UART_IRQHandler+0x650>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c6f0:	23a4      	movs	r3, #164	@ 0xa4
 800c6f2:	18fb      	adds	r3, r7, r3
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	2380      	movs	r3, #128	@ 0x80
 800c6f8:	035b      	lsls	r3, r3, #13
 800c6fa:	4013      	ands	r3, r2
 800c6fc:	d012      	beq.n	800c724 <HAL_UART_IRQHandler+0x598>
 800c6fe:	239c      	movs	r3, #156	@ 0x9c
 800c700:	18fb      	adds	r3, r7, r3
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	2380      	movs	r3, #128	@ 0x80
 800c706:	03db      	lsls	r3, r3, #15
 800c708:	4013      	ands	r3, r2
 800c70a:	d00b      	beq.n	800c724 <HAL_UART_IRQHandler+0x598>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2280      	movs	r2, #128	@ 0x80
 800c712:	0352      	lsls	r2, r2, #13
 800c714:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	22b4      	movs	r2, #180	@ 0xb4
 800c71a:	589b      	ldr	r3, [r3, r2]
 800c71c:	687a      	ldr	r2, [r7, #4]
 800c71e:	0010      	movs	r0, r2
 800c720:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c722:	e05e      	b.n	800c7e2 <HAL_UART_IRQHandler+0x656>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c724:	23a4      	movs	r3, #164	@ 0xa4
 800c726:	18fb      	adds	r3, r7, r3
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	2280      	movs	r2, #128	@ 0x80
 800c72c:	4013      	ands	r3, r2
 800c72e:	d016      	beq.n	800c75e <HAL_UART_IRQHandler+0x5d2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c730:	23a0      	movs	r3, #160	@ 0xa0
 800c732:	18fb      	adds	r3, r7, r3
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	2280      	movs	r2, #128	@ 0x80
 800c738:	4013      	ands	r3, r2
 800c73a:	d106      	bne.n	800c74a <HAL_UART_IRQHandler+0x5be>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c73c:	239c      	movs	r3, #156	@ 0x9c
 800c73e:	18fb      	adds	r3, r7, r3
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	2380      	movs	r3, #128	@ 0x80
 800c744:	041b      	lsls	r3, r3, #16
 800c746:	4013      	ands	r3, r2
 800c748:	d009      	beq.n	800c75e <HAL_UART_IRQHandler+0x5d2>
  {
    if (huart->TxISR != NULL)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d046      	beq.n	800c7e0 <HAL_UART_IRQHandler+0x654>
    {
      huart->TxISR(huart);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	0010      	movs	r0, r2
 800c75a:	4798      	blx	r3
    }
    return;
 800c75c:	e040      	b.n	800c7e0 <HAL_UART_IRQHandler+0x654>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c75e:	23a4      	movs	r3, #164	@ 0xa4
 800c760:	18fb      	adds	r3, r7, r3
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2240      	movs	r2, #64	@ 0x40
 800c766:	4013      	ands	r3, r2
 800c768:	d00a      	beq.n	800c780 <HAL_UART_IRQHandler+0x5f4>
 800c76a:	23a0      	movs	r3, #160	@ 0xa0
 800c76c:	18fb      	adds	r3, r7, r3
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2240      	movs	r2, #64	@ 0x40
 800c772:	4013      	ands	r3, r2
 800c774:	d004      	beq.n	800c780 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	0018      	movs	r0, r3
 800c77a:	f000 ff85 	bl	800d688 <UART_EndTransmit_IT>
    return;
 800c77e:	e030      	b.n	800c7e2 <HAL_UART_IRQHandler+0x656>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c780:	23a4      	movs	r3, #164	@ 0xa4
 800c782:	18fb      	adds	r3, r7, r3
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	2380      	movs	r3, #128	@ 0x80
 800c788:	041b      	lsls	r3, r3, #16
 800c78a:	4013      	ands	r3, r2
 800c78c:	d00d      	beq.n	800c7aa <HAL_UART_IRQHandler+0x61e>
 800c78e:	23a0      	movs	r3, #160	@ 0xa0
 800c790:	18fb      	adds	r3, r7, r3
 800c792:	681a      	ldr	r2, [r3, #0]
 800c794:	2380      	movs	r3, #128	@ 0x80
 800c796:	05db      	lsls	r3, r3, #23
 800c798:	4013      	ands	r3, r2
 800c79a:	d006      	beq.n	800c7aa <HAL_UART_IRQHandler+0x61e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	22bc      	movs	r2, #188	@ 0xbc
 800c7a0:	589b      	ldr	r3, [r3, r2]
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	0010      	movs	r0, r2
 800c7a6:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7a8:	e01b      	b.n	800c7e2 <HAL_UART_IRQHandler+0x656>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c7aa:	23a4      	movs	r3, #164	@ 0xa4
 800c7ac:	18fb      	adds	r3, r7, r3
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	2380      	movs	r3, #128	@ 0x80
 800c7b2:	045b      	lsls	r3, r3, #17
 800c7b4:	4013      	ands	r3, r2
 800c7b6:	d014      	beq.n	800c7e2 <HAL_UART_IRQHandler+0x656>
 800c7b8:	23a0      	movs	r3, #160	@ 0xa0
 800c7ba:	18fb      	adds	r3, r7, r3
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	da0f      	bge.n	800c7e2 <HAL_UART_IRQHandler+0x656>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	22b8      	movs	r2, #184	@ 0xb8
 800c7c6:	589b      	ldr	r3, [r3, r2]
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	0010      	movs	r0, r2
 800c7cc:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7ce:	e008      	b.n	800c7e2 <HAL_UART_IRQHandler+0x656>
      return;
 800c7d0:	46c0      	nop			@ (mov r8, r8)
 800c7d2:	e006      	b.n	800c7e2 <HAL_UART_IRQHandler+0x656>
    return;
 800c7d4:	46c0      	nop			@ (mov r8, r8)
 800c7d6:	e004      	b.n	800c7e2 <HAL_UART_IRQHandler+0x656>
      return;
 800c7d8:	46c0      	nop			@ (mov r8, r8)
 800c7da:	e002      	b.n	800c7e2 <HAL_UART_IRQHandler+0x656>
      return;
 800c7dc:	46c0      	nop			@ (mov r8, r8)
 800c7de:	e000      	b.n	800c7e2 <HAL_UART_IRQHandler+0x656>
    return;
 800c7e0:	46c0      	nop			@ (mov r8, r8)
  }
}
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	b02a      	add	sp, #168	@ 0xa8
 800c7e6:	bdb0      	pop	{r4, r5, r7, pc}
 800c7e8:	fffffeff 	.word	0xfffffeff
 800c7ec:	fffffedf 	.word	0xfffffedf
 800c7f0:	effffffe 	.word	0xeffffffe

0800c7f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c7fc:	46c0      	nop			@ (mov r8, r8)
 800c7fe:	46bd      	mov	sp, r7
 800c800:	b002      	add	sp, #8
 800c802:	bd80      	pop	{r7, pc}

0800c804 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c80c:	46c0      	nop			@ (mov r8, r8)
 800c80e:	46bd      	mov	sp, r7
 800c810:	b002      	add	sp, #8
 800c812:	bd80      	pop	{r7, pc}

0800c814 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c81c:	46c0      	nop			@ (mov r8, r8)
 800c81e:	46bd      	mov	sp, r7
 800c820:	b002      	add	sp, #8
 800c822:	bd80      	pop	{r7, pc}

0800c824 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c82c:	46c0      	nop			@ (mov r8, r8)
 800c82e:	46bd      	mov	sp, r7
 800c830:	b002      	add	sp, #8
 800c832:	bd80      	pop	{r7, pc}

0800c834 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b082      	sub	sp, #8
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c83c:	46c0      	nop			@ (mov r8, r8)
 800c83e:	46bd      	mov	sp, r7
 800c840:	b002      	add	sp, #8
 800c842:	bd80      	pop	{r7, pc}

0800c844 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c84c:	46c0      	nop			@ (mov r8, r8)
 800c84e:	46bd      	mov	sp, r7
 800c850:	b002      	add	sp, #8
 800c852:	bd80      	pop	{r7, pc}

0800c854 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800c85c:	46c0      	nop			@ (mov r8, r8)
 800c85e:	46bd      	mov	sp, r7
 800c860:	b002      	add	sp, #8
 800c862:	bd80      	pop	{r7, pc}

0800c864 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800c86c:	46c0      	nop			@ (mov r8, r8)
 800c86e:	46bd      	mov	sp, r7
 800c870:	b002      	add	sp, #8
 800c872:	bd80      	pop	{r7, pc}

0800c874 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	000a      	movs	r2, r1
 800c87e:	1cbb      	adds	r3, r7, #2
 800c880:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c882:	46c0      	nop			@ (mov r8, r8)
 800c884:	46bd      	mov	sp, r7
 800c886:	b002      	add	sp, #8
 800c888:	bd80      	pop	{r7, pc}
	...

0800c88c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2194      	movs	r1, #148	@ 0x94
 800c898:	4a18      	ldr	r2, [pc, #96]	@ (800c8fc <UART_InitCallbacksToDefault+0x70>)
 800c89a:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2198      	movs	r1, #152	@ 0x98
 800c8a0:	4a17      	ldr	r2, [pc, #92]	@ (800c900 <UART_InitCallbacksToDefault+0x74>)
 800c8a2:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	219c      	movs	r1, #156	@ 0x9c
 800c8a8:	4a16      	ldr	r2, [pc, #88]	@ (800c904 <UART_InitCallbacksToDefault+0x78>)
 800c8aa:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	21a0      	movs	r1, #160	@ 0xa0
 800c8b0:	4a15      	ldr	r2, [pc, #84]	@ (800c908 <UART_InitCallbacksToDefault+0x7c>)
 800c8b2:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	21a4      	movs	r1, #164	@ 0xa4
 800c8b8:	4a14      	ldr	r2, [pc, #80]	@ (800c90c <UART_InitCallbacksToDefault+0x80>)
 800c8ba:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	21a8      	movs	r1, #168	@ 0xa8
 800c8c0:	4a13      	ldr	r2, [pc, #76]	@ (800c910 <UART_InitCallbacksToDefault+0x84>)
 800c8c2:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	21ac      	movs	r1, #172	@ 0xac
 800c8c8:	4a12      	ldr	r2, [pc, #72]	@ (800c914 <UART_InitCallbacksToDefault+0x88>)
 800c8ca:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	21b0      	movs	r1, #176	@ 0xb0
 800c8d0:	4a11      	ldr	r2, [pc, #68]	@ (800c918 <UART_InitCallbacksToDefault+0x8c>)
 800c8d2:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	21b4      	movs	r1, #180	@ 0xb4
 800c8d8:	4a10      	ldr	r2, [pc, #64]	@ (800c91c <UART_InitCallbacksToDefault+0x90>)
 800c8da:	505a      	str	r2, [r3, r1]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	21b8      	movs	r1, #184	@ 0xb8
 800c8e0:	4a0f      	ldr	r2, [pc, #60]	@ (800c920 <UART_InitCallbacksToDefault+0x94>)
 800c8e2:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	21bc      	movs	r1, #188	@ 0xbc
 800c8e8:	4a0e      	ldr	r2, [pc, #56]	@ (800c924 <UART_InitCallbacksToDefault+0x98>)
 800c8ea:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	21c0      	movs	r1, #192	@ 0xc0
 800c8f0:	4a0d      	ldr	r2, [pc, #52]	@ (800c928 <UART_InitCallbacksToDefault+0x9c>)
 800c8f2:	505a      	str	r2, [r3, r1]

}
 800c8f4:	46c0      	nop			@ (mov r8, r8)
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	b002      	add	sp, #8
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	0800c805 	.word	0x0800c805
 800c900:	0800c7f5 	.word	0x0800c7f5
 800c904:	0800c825 	.word	0x0800c825
 800c908:	0800c815 	.word	0x0800c815
 800c90c:	0800c835 	.word	0x0800c835
 800c910:	0800c845 	.word	0x0800c845
 800c914:	0800c855 	.word	0x0800c855
 800c918:	0800c865 	.word	0x0800c865
 800c91c:	0800d6e5 	.word	0x0800d6e5
 800c920:	0800d6f5 	.word	0x0800d6f5
 800c924:	0800d705 	.word	0x0800d705
 800c928:	0800c875 	.word	0x0800c875

0800c92c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c92c:	b5b0      	push	{r4, r5, r7, lr}
 800c92e:	b090      	sub	sp, #64	@ 0x40
 800c930:	af00      	add	r7, sp, #0
 800c932:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c934:	231a      	movs	r3, #26
 800c936:	2220      	movs	r2, #32
 800c938:	189b      	adds	r3, r3, r2
 800c93a:	19db      	adds	r3, r3, r7
 800c93c:	2200      	movs	r2, #0
 800c93e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c942:	689a      	ldr	r2, [r3, #8]
 800c944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c946:	691b      	ldr	r3, [r3, #16]
 800c948:	431a      	orrs	r2, r3
 800c94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c94c:	695b      	ldr	r3, [r3, #20]
 800c94e:	431a      	orrs	r2, r3
 800c950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c952:	69db      	ldr	r3, [r3, #28]
 800c954:	4313      	orrs	r3, r2
 800c956:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4ac4      	ldr	r2, [pc, #784]	@ (800cc70 <UART_SetConfig+0x344>)
 800c960:	4013      	ands	r3, r2
 800c962:	0019      	movs	r1, r3
 800c964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c96a:	430b      	orrs	r3, r1
 800c96c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	4abf      	ldr	r2, [pc, #764]	@ (800cc74 <UART_SetConfig+0x348>)
 800c976:	4013      	ands	r3, r2
 800c978:	0018      	movs	r0, r3
 800c97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c97c:	68d9      	ldr	r1, [r3, #12]
 800c97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	0003      	movs	r3, r0
 800c984:	430b      	orrs	r3, r1
 800c986:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c98a:	699b      	ldr	r3, [r3, #24]
 800c98c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4ab9      	ldr	r2, [pc, #740]	@ (800cc78 <UART_SetConfig+0x34c>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d004      	beq.n	800c9a2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c99a:	6a1b      	ldr	r3, [r3, #32]
 800c99c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	4ab4      	ldr	r2, [pc, #720]	@ (800cc7c <UART_SetConfig+0x350>)
 800c9aa:	4013      	ands	r3, r2
 800c9ac:	0019      	movs	r1, r3
 800c9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9b4:	430b      	orrs	r3, r1
 800c9b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9be:	220f      	movs	r2, #15
 800c9c0:	4393      	bics	r3, r2
 800c9c2:	0018      	movs	r0, r3
 800c9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ca:	681a      	ldr	r2, [r3, #0]
 800c9cc:	0003      	movs	r3, r0
 800c9ce:	430b      	orrs	r3, r1
 800c9d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4aaa      	ldr	r2, [pc, #680]	@ (800cc80 <UART_SetConfig+0x354>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d131      	bne.n	800ca40 <UART_SetConfig+0x114>
 800c9dc:	4ba9      	ldr	r3, [pc, #676]	@ (800cc84 <UART_SetConfig+0x358>)
 800c9de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9e0:	2203      	movs	r2, #3
 800c9e2:	4013      	ands	r3, r2
 800c9e4:	2b03      	cmp	r3, #3
 800c9e6:	d01d      	beq.n	800ca24 <UART_SetConfig+0xf8>
 800c9e8:	d823      	bhi.n	800ca32 <UART_SetConfig+0x106>
 800c9ea:	2b02      	cmp	r3, #2
 800c9ec:	d00c      	beq.n	800ca08 <UART_SetConfig+0xdc>
 800c9ee:	d820      	bhi.n	800ca32 <UART_SetConfig+0x106>
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d002      	beq.n	800c9fa <UART_SetConfig+0xce>
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d00e      	beq.n	800ca16 <UART_SetConfig+0xea>
 800c9f8:	e01b      	b.n	800ca32 <UART_SetConfig+0x106>
 800c9fa:	231b      	movs	r3, #27
 800c9fc:	2220      	movs	r2, #32
 800c9fe:	189b      	adds	r3, r3, r2
 800ca00:	19db      	adds	r3, r3, r7
 800ca02:	2200      	movs	r2, #0
 800ca04:	701a      	strb	r2, [r3, #0]
 800ca06:	e071      	b.n	800caec <UART_SetConfig+0x1c0>
 800ca08:	231b      	movs	r3, #27
 800ca0a:	2220      	movs	r2, #32
 800ca0c:	189b      	adds	r3, r3, r2
 800ca0e:	19db      	adds	r3, r3, r7
 800ca10:	2202      	movs	r2, #2
 800ca12:	701a      	strb	r2, [r3, #0]
 800ca14:	e06a      	b.n	800caec <UART_SetConfig+0x1c0>
 800ca16:	231b      	movs	r3, #27
 800ca18:	2220      	movs	r2, #32
 800ca1a:	189b      	adds	r3, r3, r2
 800ca1c:	19db      	adds	r3, r3, r7
 800ca1e:	2204      	movs	r2, #4
 800ca20:	701a      	strb	r2, [r3, #0]
 800ca22:	e063      	b.n	800caec <UART_SetConfig+0x1c0>
 800ca24:	231b      	movs	r3, #27
 800ca26:	2220      	movs	r2, #32
 800ca28:	189b      	adds	r3, r3, r2
 800ca2a:	19db      	adds	r3, r3, r7
 800ca2c:	2208      	movs	r2, #8
 800ca2e:	701a      	strb	r2, [r3, #0]
 800ca30:	e05c      	b.n	800caec <UART_SetConfig+0x1c0>
 800ca32:	231b      	movs	r3, #27
 800ca34:	2220      	movs	r2, #32
 800ca36:	189b      	adds	r3, r3, r2
 800ca38:	19db      	adds	r3, r3, r7
 800ca3a:	2210      	movs	r2, #16
 800ca3c:	701a      	strb	r2, [r3, #0]
 800ca3e:	e055      	b.n	800caec <UART_SetConfig+0x1c0>
 800ca40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4a90      	ldr	r2, [pc, #576]	@ (800cc88 <UART_SetConfig+0x35c>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d106      	bne.n	800ca58 <UART_SetConfig+0x12c>
 800ca4a:	231b      	movs	r3, #27
 800ca4c:	2220      	movs	r2, #32
 800ca4e:	189b      	adds	r3, r3, r2
 800ca50:	19db      	adds	r3, r3, r7
 800ca52:	2200      	movs	r2, #0
 800ca54:	701a      	strb	r2, [r3, #0]
 800ca56:	e049      	b.n	800caec <UART_SetConfig+0x1c0>
 800ca58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a86      	ldr	r2, [pc, #536]	@ (800cc78 <UART_SetConfig+0x34c>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d13e      	bne.n	800cae0 <UART_SetConfig+0x1b4>
 800ca62:	4b88      	ldr	r3, [pc, #544]	@ (800cc84 <UART_SetConfig+0x358>)
 800ca64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ca66:	23c0      	movs	r3, #192	@ 0xc0
 800ca68:	011b      	lsls	r3, r3, #4
 800ca6a:	4013      	ands	r3, r2
 800ca6c:	22c0      	movs	r2, #192	@ 0xc0
 800ca6e:	0112      	lsls	r2, r2, #4
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d027      	beq.n	800cac4 <UART_SetConfig+0x198>
 800ca74:	22c0      	movs	r2, #192	@ 0xc0
 800ca76:	0112      	lsls	r2, r2, #4
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d82a      	bhi.n	800cad2 <UART_SetConfig+0x1a6>
 800ca7c:	2280      	movs	r2, #128	@ 0x80
 800ca7e:	0112      	lsls	r2, r2, #4
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d011      	beq.n	800caa8 <UART_SetConfig+0x17c>
 800ca84:	2280      	movs	r2, #128	@ 0x80
 800ca86:	0112      	lsls	r2, r2, #4
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d822      	bhi.n	800cad2 <UART_SetConfig+0x1a6>
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d004      	beq.n	800ca9a <UART_SetConfig+0x16e>
 800ca90:	2280      	movs	r2, #128	@ 0x80
 800ca92:	00d2      	lsls	r2, r2, #3
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d00e      	beq.n	800cab6 <UART_SetConfig+0x18a>
 800ca98:	e01b      	b.n	800cad2 <UART_SetConfig+0x1a6>
 800ca9a:	231b      	movs	r3, #27
 800ca9c:	2220      	movs	r2, #32
 800ca9e:	189b      	adds	r3, r3, r2
 800caa0:	19db      	adds	r3, r3, r7
 800caa2:	2200      	movs	r2, #0
 800caa4:	701a      	strb	r2, [r3, #0]
 800caa6:	e021      	b.n	800caec <UART_SetConfig+0x1c0>
 800caa8:	231b      	movs	r3, #27
 800caaa:	2220      	movs	r2, #32
 800caac:	189b      	adds	r3, r3, r2
 800caae:	19db      	adds	r3, r3, r7
 800cab0:	2202      	movs	r2, #2
 800cab2:	701a      	strb	r2, [r3, #0]
 800cab4:	e01a      	b.n	800caec <UART_SetConfig+0x1c0>
 800cab6:	231b      	movs	r3, #27
 800cab8:	2220      	movs	r2, #32
 800caba:	189b      	adds	r3, r3, r2
 800cabc:	19db      	adds	r3, r3, r7
 800cabe:	2204      	movs	r2, #4
 800cac0:	701a      	strb	r2, [r3, #0]
 800cac2:	e013      	b.n	800caec <UART_SetConfig+0x1c0>
 800cac4:	231b      	movs	r3, #27
 800cac6:	2220      	movs	r2, #32
 800cac8:	189b      	adds	r3, r3, r2
 800caca:	19db      	adds	r3, r3, r7
 800cacc:	2208      	movs	r2, #8
 800cace:	701a      	strb	r2, [r3, #0]
 800cad0:	e00c      	b.n	800caec <UART_SetConfig+0x1c0>
 800cad2:	231b      	movs	r3, #27
 800cad4:	2220      	movs	r2, #32
 800cad6:	189b      	adds	r3, r3, r2
 800cad8:	19db      	adds	r3, r3, r7
 800cada:	2210      	movs	r2, #16
 800cadc:	701a      	strb	r2, [r3, #0]
 800cade:	e005      	b.n	800caec <UART_SetConfig+0x1c0>
 800cae0:	231b      	movs	r3, #27
 800cae2:	2220      	movs	r2, #32
 800cae4:	189b      	adds	r3, r3, r2
 800cae6:	19db      	adds	r3, r3, r7
 800cae8:	2210      	movs	r2, #16
 800caea:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800caec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4a61      	ldr	r2, [pc, #388]	@ (800cc78 <UART_SetConfig+0x34c>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d000      	beq.n	800caf8 <UART_SetConfig+0x1cc>
 800caf6:	e092      	b.n	800cc1e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800caf8:	231b      	movs	r3, #27
 800cafa:	2220      	movs	r2, #32
 800cafc:	189b      	adds	r3, r3, r2
 800cafe:	19db      	adds	r3, r3, r7
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	2b08      	cmp	r3, #8
 800cb04:	d015      	beq.n	800cb32 <UART_SetConfig+0x206>
 800cb06:	dc18      	bgt.n	800cb3a <UART_SetConfig+0x20e>
 800cb08:	2b04      	cmp	r3, #4
 800cb0a:	d00d      	beq.n	800cb28 <UART_SetConfig+0x1fc>
 800cb0c:	dc15      	bgt.n	800cb3a <UART_SetConfig+0x20e>
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d002      	beq.n	800cb18 <UART_SetConfig+0x1ec>
 800cb12:	2b02      	cmp	r3, #2
 800cb14:	d005      	beq.n	800cb22 <UART_SetConfig+0x1f6>
 800cb16:	e010      	b.n	800cb3a <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb18:	f7fc fdd6 	bl	80096c8 <HAL_RCC_GetPCLK1Freq>
 800cb1c:	0003      	movs	r3, r0
 800cb1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb20:	e014      	b.n	800cb4c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cb22:	4b5a      	ldr	r3, [pc, #360]	@ (800cc8c <UART_SetConfig+0x360>)
 800cb24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb26:	e011      	b.n	800cb4c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cb28:	f7fc fd42 	bl	80095b0 <HAL_RCC_GetSysClockFreq>
 800cb2c:	0003      	movs	r3, r0
 800cb2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb30:	e00c      	b.n	800cb4c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb32:	2380      	movs	r3, #128	@ 0x80
 800cb34:	021b      	lsls	r3, r3, #8
 800cb36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb38:	e008      	b.n	800cb4c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800cb3e:	231a      	movs	r3, #26
 800cb40:	2220      	movs	r2, #32
 800cb42:	189b      	adds	r3, r3, r2
 800cb44:	19db      	adds	r3, r3, r7
 800cb46:	2201      	movs	r2, #1
 800cb48:	701a      	strb	r2, [r3, #0]
        break;
 800cb4a:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cb4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d100      	bne.n	800cb54 <UART_SetConfig+0x228>
 800cb52:	e147      	b.n	800cde4 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cb54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb58:	4b4d      	ldr	r3, [pc, #308]	@ (800cc90 <UART_SetConfig+0x364>)
 800cb5a:	0052      	lsls	r2, r2, #1
 800cb5c:	5ad3      	ldrh	r3, [r2, r3]
 800cb5e:	0019      	movs	r1, r3
 800cb60:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cb62:	f7f3 facf 	bl	8000104 <__udivsi3>
 800cb66:	0003      	movs	r3, r0
 800cb68:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb6c:	685a      	ldr	r2, [r3, #4]
 800cb6e:	0013      	movs	r3, r2
 800cb70:	005b      	lsls	r3, r3, #1
 800cb72:	189b      	adds	r3, r3, r2
 800cb74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d305      	bcc.n	800cb86 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d906      	bls.n	800cb94 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800cb86:	231a      	movs	r3, #26
 800cb88:	2220      	movs	r2, #32
 800cb8a:	189b      	adds	r3, r3, r2
 800cb8c:	19db      	adds	r3, r3, r7
 800cb8e:	2201      	movs	r2, #1
 800cb90:	701a      	strb	r2, [r3, #0]
 800cb92:	e127      	b.n	800cde4 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb96:	61bb      	str	r3, [r7, #24]
 800cb98:	2300      	movs	r3, #0
 800cb9a:	61fb      	str	r3, [r7, #28]
 800cb9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cba0:	4b3b      	ldr	r3, [pc, #236]	@ (800cc90 <UART_SetConfig+0x364>)
 800cba2:	0052      	lsls	r2, r2, #1
 800cba4:	5ad3      	ldrh	r3, [r2, r3]
 800cba6:	613b      	str	r3, [r7, #16]
 800cba8:	2300      	movs	r3, #0
 800cbaa:	617b      	str	r3, [r7, #20]
 800cbac:	693a      	ldr	r2, [r7, #16]
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	69b8      	ldr	r0, [r7, #24]
 800cbb2:	69f9      	ldr	r1, [r7, #28]
 800cbb4:	f7f3 fb32 	bl	800021c <__aeabi_uldivmod>
 800cbb8:	0002      	movs	r2, r0
 800cbba:	000b      	movs	r3, r1
 800cbbc:	0e11      	lsrs	r1, r2, #24
 800cbbe:	021d      	lsls	r5, r3, #8
 800cbc0:	430d      	orrs	r5, r1
 800cbc2:	0214      	lsls	r4, r2, #8
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	085b      	lsrs	r3, r3, #1
 800cbca:	60bb      	str	r3, [r7, #8]
 800cbcc:	2300      	movs	r3, #0
 800cbce:	60fb      	str	r3, [r7, #12]
 800cbd0:	68b8      	ldr	r0, [r7, #8]
 800cbd2:	68f9      	ldr	r1, [r7, #12]
 800cbd4:	1900      	adds	r0, r0, r4
 800cbd6:	4169      	adcs	r1, r5
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	603b      	str	r3, [r7, #0]
 800cbde:	2300      	movs	r3, #0
 800cbe0:	607b      	str	r3, [r7, #4]
 800cbe2:	683a      	ldr	r2, [r7, #0]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f7f3 fb19 	bl	800021c <__aeabi_uldivmod>
 800cbea:	0002      	movs	r2, r0
 800cbec:	000b      	movs	r3, r1
 800cbee:	0013      	movs	r3, r2
 800cbf0:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cbf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbf4:	23c0      	movs	r3, #192	@ 0xc0
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d309      	bcc.n	800cc10 <UART_SetConfig+0x2e4>
 800cbfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbfe:	2380      	movs	r3, #128	@ 0x80
 800cc00:	035b      	lsls	r3, r3, #13
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d204      	bcs.n	800cc10 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800cc06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc0c:	60da      	str	r2, [r3, #12]
 800cc0e:	e0e9      	b.n	800cde4 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800cc10:	231a      	movs	r3, #26
 800cc12:	2220      	movs	r2, #32
 800cc14:	189b      	adds	r3, r3, r2
 800cc16:	19db      	adds	r3, r3, r7
 800cc18:	2201      	movs	r2, #1
 800cc1a:	701a      	strb	r2, [r3, #0]
 800cc1c:	e0e2      	b.n	800cde4 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc20:	69da      	ldr	r2, [r3, #28]
 800cc22:	2380      	movs	r3, #128	@ 0x80
 800cc24:	021b      	lsls	r3, r3, #8
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d000      	beq.n	800cc2c <UART_SetConfig+0x300>
 800cc2a:	e083      	b.n	800cd34 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800cc2c:	231b      	movs	r3, #27
 800cc2e:	2220      	movs	r2, #32
 800cc30:	189b      	adds	r3, r3, r2
 800cc32:	19db      	adds	r3, r3, r7
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	2b08      	cmp	r3, #8
 800cc38:	d015      	beq.n	800cc66 <UART_SetConfig+0x33a>
 800cc3a:	dc2b      	bgt.n	800cc94 <UART_SetConfig+0x368>
 800cc3c:	2b04      	cmp	r3, #4
 800cc3e:	d00d      	beq.n	800cc5c <UART_SetConfig+0x330>
 800cc40:	dc28      	bgt.n	800cc94 <UART_SetConfig+0x368>
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d002      	beq.n	800cc4c <UART_SetConfig+0x320>
 800cc46:	2b02      	cmp	r3, #2
 800cc48:	d005      	beq.n	800cc56 <UART_SetConfig+0x32a>
 800cc4a:	e023      	b.n	800cc94 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc4c:	f7fc fd3c 	bl	80096c8 <HAL_RCC_GetPCLK1Freq>
 800cc50:	0003      	movs	r3, r0
 800cc52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc54:	e027      	b.n	800cca6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cc56:	4b0d      	ldr	r3, [pc, #52]	@ (800cc8c <UART_SetConfig+0x360>)
 800cc58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc5a:	e024      	b.n	800cca6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cc5c:	f7fc fca8 	bl	80095b0 <HAL_RCC_GetSysClockFreq>
 800cc60:	0003      	movs	r3, r0
 800cc62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc64:	e01f      	b.n	800cca6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc66:	2380      	movs	r3, #128	@ 0x80
 800cc68:	021b      	lsls	r3, r3, #8
 800cc6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc6c:	e01b      	b.n	800cca6 <UART_SetConfig+0x37a>
 800cc6e:	46c0      	nop			@ (mov r8, r8)
 800cc70:	cfff69f3 	.word	0xcfff69f3
 800cc74:	ffffcfff 	.word	0xffffcfff
 800cc78:	40008000 	.word	0x40008000
 800cc7c:	11fff4ff 	.word	0x11fff4ff
 800cc80:	40013800 	.word	0x40013800
 800cc84:	40021000 	.word	0x40021000
 800cc88:	40004400 	.word	0x40004400
 800cc8c:	00f42400 	.word	0x00f42400
 800cc90:	0800e1bc 	.word	0x0800e1bc
      default:
        pclk = 0U;
 800cc94:	2300      	movs	r3, #0
 800cc96:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800cc98:	231a      	movs	r3, #26
 800cc9a:	2220      	movs	r2, #32
 800cc9c:	189b      	adds	r3, r3, r2
 800cc9e:	19db      	adds	r3, r3, r7
 800cca0:	2201      	movs	r2, #1
 800cca2:	701a      	strb	r2, [r3, #0]
        break;
 800cca4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d100      	bne.n	800ccae <UART_SetConfig+0x382>
 800ccac:	e09a      	b.n	800cde4 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ccae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ccb2:	4b58      	ldr	r3, [pc, #352]	@ (800ce14 <UART_SetConfig+0x4e8>)
 800ccb4:	0052      	lsls	r2, r2, #1
 800ccb6:	5ad3      	ldrh	r3, [r2, r3]
 800ccb8:	0019      	movs	r1, r3
 800ccba:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ccbc:	f7f3 fa22 	bl	8000104 <__udivsi3>
 800ccc0:	0003      	movs	r3, r0
 800ccc2:	005a      	lsls	r2, r3, #1
 800ccc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	085b      	lsrs	r3, r3, #1
 800ccca:	18d2      	adds	r2, r2, r3
 800cccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	0019      	movs	r1, r3
 800ccd2:	0010      	movs	r0, r2
 800ccd4:	f7f3 fa16 	bl	8000104 <__udivsi3>
 800ccd8:	0003      	movs	r3, r0
 800ccda:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ccdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccde:	2b0f      	cmp	r3, #15
 800cce0:	d921      	bls.n	800cd26 <UART_SetConfig+0x3fa>
 800cce2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cce4:	2380      	movs	r3, #128	@ 0x80
 800cce6:	025b      	lsls	r3, r3, #9
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d21c      	bcs.n	800cd26 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ccec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccee:	b29a      	uxth	r2, r3
 800ccf0:	200e      	movs	r0, #14
 800ccf2:	2420      	movs	r4, #32
 800ccf4:	1903      	adds	r3, r0, r4
 800ccf6:	19db      	adds	r3, r3, r7
 800ccf8:	210f      	movs	r1, #15
 800ccfa:	438a      	bics	r2, r1
 800ccfc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ccfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd00:	085b      	lsrs	r3, r3, #1
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	2207      	movs	r2, #7
 800cd06:	4013      	ands	r3, r2
 800cd08:	b299      	uxth	r1, r3
 800cd0a:	1903      	adds	r3, r0, r4
 800cd0c:	19db      	adds	r3, r3, r7
 800cd0e:	1902      	adds	r2, r0, r4
 800cd10:	19d2      	adds	r2, r2, r7
 800cd12:	8812      	ldrh	r2, [r2, #0]
 800cd14:	430a      	orrs	r2, r1
 800cd16:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800cd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	1902      	adds	r2, r0, r4
 800cd1e:	19d2      	adds	r2, r2, r7
 800cd20:	8812      	ldrh	r2, [r2, #0]
 800cd22:	60da      	str	r2, [r3, #12]
 800cd24:	e05e      	b.n	800cde4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800cd26:	231a      	movs	r3, #26
 800cd28:	2220      	movs	r2, #32
 800cd2a:	189b      	adds	r3, r3, r2
 800cd2c:	19db      	adds	r3, r3, r7
 800cd2e:	2201      	movs	r2, #1
 800cd30:	701a      	strb	r2, [r3, #0]
 800cd32:	e057      	b.n	800cde4 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cd34:	231b      	movs	r3, #27
 800cd36:	2220      	movs	r2, #32
 800cd38:	189b      	adds	r3, r3, r2
 800cd3a:	19db      	adds	r3, r3, r7
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	2b08      	cmp	r3, #8
 800cd40:	d015      	beq.n	800cd6e <UART_SetConfig+0x442>
 800cd42:	dc18      	bgt.n	800cd76 <UART_SetConfig+0x44a>
 800cd44:	2b04      	cmp	r3, #4
 800cd46:	d00d      	beq.n	800cd64 <UART_SetConfig+0x438>
 800cd48:	dc15      	bgt.n	800cd76 <UART_SetConfig+0x44a>
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d002      	beq.n	800cd54 <UART_SetConfig+0x428>
 800cd4e:	2b02      	cmp	r3, #2
 800cd50:	d005      	beq.n	800cd5e <UART_SetConfig+0x432>
 800cd52:	e010      	b.n	800cd76 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd54:	f7fc fcb8 	bl	80096c8 <HAL_RCC_GetPCLK1Freq>
 800cd58:	0003      	movs	r3, r0
 800cd5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd5c:	e014      	b.n	800cd88 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd5e:	4b2e      	ldr	r3, [pc, #184]	@ (800ce18 <UART_SetConfig+0x4ec>)
 800cd60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd62:	e011      	b.n	800cd88 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd64:	f7fc fc24 	bl	80095b0 <HAL_RCC_GetSysClockFreq>
 800cd68:	0003      	movs	r3, r0
 800cd6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd6c:	e00c      	b.n	800cd88 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd6e:	2380      	movs	r3, #128	@ 0x80
 800cd70:	021b      	lsls	r3, r3, #8
 800cd72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd74:	e008      	b.n	800cd88 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800cd76:	2300      	movs	r3, #0
 800cd78:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800cd7a:	231a      	movs	r3, #26
 800cd7c:	2220      	movs	r2, #32
 800cd7e:	189b      	adds	r3, r3, r2
 800cd80:	19db      	adds	r3, r3, r7
 800cd82:	2201      	movs	r2, #1
 800cd84:	701a      	strb	r2, [r3, #0]
        break;
 800cd86:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800cd88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d02a      	beq.n	800cde4 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cd92:	4b20      	ldr	r3, [pc, #128]	@ (800ce14 <UART_SetConfig+0x4e8>)
 800cd94:	0052      	lsls	r2, r2, #1
 800cd96:	5ad3      	ldrh	r3, [r2, r3]
 800cd98:	0019      	movs	r1, r3
 800cd9a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cd9c:	f7f3 f9b2 	bl	8000104 <__udivsi3>
 800cda0:	0003      	movs	r3, r0
 800cda2:	001a      	movs	r2, r3
 800cda4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	085b      	lsrs	r3, r3, #1
 800cdaa:	18d2      	adds	r2, r2, r3
 800cdac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	0019      	movs	r1, r3
 800cdb2:	0010      	movs	r0, r2
 800cdb4:	f7f3 f9a6 	bl	8000104 <__udivsi3>
 800cdb8:	0003      	movs	r3, r0
 800cdba:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cdbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdbe:	2b0f      	cmp	r3, #15
 800cdc0:	d90a      	bls.n	800cdd8 <UART_SetConfig+0x4ac>
 800cdc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdc4:	2380      	movs	r3, #128	@ 0x80
 800cdc6:	025b      	lsls	r3, r3, #9
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d205      	bcs.n	800cdd8 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cdcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdce:	b29a      	uxth	r2, r3
 800cdd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	60da      	str	r2, [r3, #12]
 800cdd6:	e005      	b.n	800cde4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800cdd8:	231a      	movs	r3, #26
 800cdda:	2220      	movs	r2, #32
 800cddc:	189b      	adds	r3, r3, r2
 800cdde:	19db      	adds	r3, r3, r7
 800cde0:	2201      	movs	r2, #1
 800cde2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde6:	226a      	movs	r2, #106	@ 0x6a
 800cde8:	2101      	movs	r1, #1
 800cdea:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800cdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdee:	2268      	movs	r2, #104	@ 0x68
 800cdf0:	2101      	movs	r1, #1
 800cdf2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cdfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ce00:	231a      	movs	r3, #26
 800ce02:	2220      	movs	r2, #32
 800ce04:	189b      	adds	r3, r3, r2
 800ce06:	19db      	adds	r3, r3, r7
 800ce08:	781b      	ldrb	r3, [r3, #0]
}
 800ce0a:	0018      	movs	r0, r3
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	b010      	add	sp, #64	@ 0x40
 800ce10:	bdb0      	pop	{r4, r5, r7, pc}
 800ce12:	46c0      	nop			@ (mov r8, r8)
 800ce14:	0800e1bc 	.word	0x0800e1bc
 800ce18:	00f42400 	.word	0x00f42400

0800ce1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce28:	2208      	movs	r2, #8
 800ce2a:	4013      	ands	r3, r2
 800ce2c:	d00b      	beq.n	800ce46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	4a4a      	ldr	r2, [pc, #296]	@ (800cf60 <UART_AdvFeatureConfig+0x144>)
 800ce36:	4013      	ands	r3, r2
 800ce38:	0019      	movs	r1, r3
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	430a      	orrs	r2, r1
 800ce44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	4013      	ands	r3, r2
 800ce4e:	d00b      	beq.n	800ce68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	685b      	ldr	r3, [r3, #4]
 800ce56:	4a43      	ldr	r2, [pc, #268]	@ (800cf64 <UART_AdvFeatureConfig+0x148>)
 800ce58:	4013      	ands	r3, r2
 800ce5a:	0019      	movs	r1, r3
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	430a      	orrs	r2, r1
 800ce66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce6c:	2202      	movs	r2, #2
 800ce6e:	4013      	ands	r3, r2
 800ce70:	d00b      	beq.n	800ce8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	4a3b      	ldr	r2, [pc, #236]	@ (800cf68 <UART_AdvFeatureConfig+0x14c>)
 800ce7a:	4013      	ands	r3, r2
 800ce7c:	0019      	movs	r1, r3
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	430a      	orrs	r2, r1
 800ce88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce8e:	2204      	movs	r2, #4
 800ce90:	4013      	ands	r3, r2
 800ce92:	d00b      	beq.n	800ceac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	4a34      	ldr	r2, [pc, #208]	@ (800cf6c <UART_AdvFeatureConfig+0x150>)
 800ce9c:	4013      	ands	r3, r2
 800ce9e:	0019      	movs	r1, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	430a      	orrs	r2, r1
 800ceaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ceb0:	2210      	movs	r2, #16
 800ceb2:	4013      	ands	r3, r2
 800ceb4:	d00b      	beq.n	800cece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	689b      	ldr	r3, [r3, #8]
 800cebc:	4a2c      	ldr	r2, [pc, #176]	@ (800cf70 <UART_AdvFeatureConfig+0x154>)
 800cebe:	4013      	ands	r3, r2
 800cec0:	0019      	movs	r1, r3
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	430a      	orrs	r2, r1
 800cecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ced2:	2220      	movs	r2, #32
 800ced4:	4013      	ands	r3, r2
 800ced6:	d00b      	beq.n	800cef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	689b      	ldr	r3, [r3, #8]
 800cede:	4a25      	ldr	r2, [pc, #148]	@ (800cf74 <UART_AdvFeatureConfig+0x158>)
 800cee0:	4013      	ands	r3, r2
 800cee2:	0019      	movs	r1, r3
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	430a      	orrs	r2, r1
 800ceee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cef4:	2240      	movs	r2, #64	@ 0x40
 800cef6:	4013      	ands	r3, r2
 800cef8:	d01d      	beq.n	800cf36 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	685b      	ldr	r3, [r3, #4]
 800cf00:	4a1d      	ldr	r2, [pc, #116]	@ (800cf78 <UART_AdvFeatureConfig+0x15c>)
 800cf02:	4013      	ands	r3, r2
 800cf04:	0019      	movs	r1, r3
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	430a      	orrs	r2, r1
 800cf10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf16:	2380      	movs	r3, #128	@ 0x80
 800cf18:	035b      	lsls	r3, r3, #13
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d10b      	bne.n	800cf36 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	4a15      	ldr	r2, [pc, #84]	@ (800cf7c <UART_AdvFeatureConfig+0x160>)
 800cf26:	4013      	ands	r3, r2
 800cf28:	0019      	movs	r1, r3
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	430a      	orrs	r2, r1
 800cf34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf3a:	2280      	movs	r2, #128	@ 0x80
 800cf3c:	4013      	ands	r3, r2
 800cf3e:	d00b      	beq.n	800cf58 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	4a0e      	ldr	r2, [pc, #56]	@ (800cf80 <UART_AdvFeatureConfig+0x164>)
 800cf48:	4013      	ands	r3, r2
 800cf4a:	0019      	movs	r1, r3
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	430a      	orrs	r2, r1
 800cf56:	605a      	str	r2, [r3, #4]
  }
}
 800cf58:	46c0      	nop			@ (mov r8, r8)
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	b002      	add	sp, #8
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	ffff7fff 	.word	0xffff7fff
 800cf64:	fffdffff 	.word	0xfffdffff
 800cf68:	fffeffff 	.word	0xfffeffff
 800cf6c:	fffbffff 	.word	0xfffbffff
 800cf70:	ffffefff 	.word	0xffffefff
 800cf74:	ffffdfff 	.word	0xffffdfff
 800cf78:	ffefffff 	.word	0xffefffff
 800cf7c:	ff9fffff 	.word	0xff9fffff
 800cf80:	fff7ffff 	.word	0xfff7ffff

0800cf84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b092      	sub	sp, #72	@ 0x48
 800cf88:	af02      	add	r7, sp, #8
 800cf8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2290      	movs	r2, #144	@ 0x90
 800cf90:	2100      	movs	r1, #0
 800cf92:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf94:	f7f9 fa66 	bl	8006464 <HAL_GetTick>
 800cf98:	0003      	movs	r3, r0
 800cf9a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	2208      	movs	r2, #8
 800cfa4:	4013      	ands	r3, r2
 800cfa6:	2b08      	cmp	r3, #8
 800cfa8:	d12d      	bne.n	800d006 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cfaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfac:	2280      	movs	r2, #128	@ 0x80
 800cfae:	0391      	lsls	r1, r2, #14
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	4a47      	ldr	r2, [pc, #284]	@ (800d0d0 <UART_CheckIdleState+0x14c>)
 800cfb4:	9200      	str	r2, [sp, #0]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f000 f88e 	bl	800d0d8 <UART_WaitOnFlagUntilTimeout>
 800cfbc:	1e03      	subs	r3, r0, #0
 800cfbe:	d022      	beq.n	800d006 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfc0:	f3ef 8310 	mrs	r3, PRIMASK
 800cfc4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800cfc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cfc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cfca:	2301      	movs	r3, #1
 800cfcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfd0:	f383 8810 	msr	PRIMASK, r3
}
 800cfd4:	46c0      	nop			@ (mov r8, r8)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	2180      	movs	r1, #128	@ 0x80
 800cfe2:	438a      	bics	r2, r1
 800cfe4:	601a      	str	r2, [r3, #0]
 800cfe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfec:	f383 8810 	msr	PRIMASK, r3
}
 800cff0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2288      	movs	r2, #136	@ 0x88
 800cff6:	2120      	movs	r1, #32
 800cff8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2284      	movs	r2, #132	@ 0x84
 800cffe:	2100      	movs	r1, #0
 800d000:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d002:	2303      	movs	r3, #3
 800d004:	e060      	b.n	800d0c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	2204      	movs	r2, #4
 800d00e:	4013      	ands	r3, r2
 800d010:	2b04      	cmp	r3, #4
 800d012:	d146      	bne.n	800d0a2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d016:	2280      	movs	r2, #128	@ 0x80
 800d018:	03d1      	lsls	r1, r2, #15
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	4a2c      	ldr	r2, [pc, #176]	@ (800d0d0 <UART_CheckIdleState+0x14c>)
 800d01e:	9200      	str	r2, [sp, #0]
 800d020:	2200      	movs	r2, #0
 800d022:	f000 f859 	bl	800d0d8 <UART_WaitOnFlagUntilTimeout>
 800d026:	1e03      	subs	r3, r0, #0
 800d028:	d03b      	beq.n	800d0a2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d02a:	f3ef 8310 	mrs	r3, PRIMASK
 800d02e:	60fb      	str	r3, [r7, #12]
  return(result);
 800d030:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d032:	637b      	str	r3, [r7, #52]	@ 0x34
 800d034:	2301      	movs	r3, #1
 800d036:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	f383 8810 	msr	PRIMASK, r3
}
 800d03e:	46c0      	nop			@ (mov r8, r8)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	4922      	ldr	r1, [pc, #136]	@ (800d0d4 <UART_CheckIdleState+0x150>)
 800d04c:	400a      	ands	r2, r1
 800d04e:	601a      	str	r2, [r3, #0]
 800d050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d052:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	f383 8810 	msr	PRIMASK, r3
}
 800d05a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d05c:	f3ef 8310 	mrs	r3, PRIMASK
 800d060:	61bb      	str	r3, [r7, #24]
  return(result);
 800d062:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d064:	633b      	str	r3, [r7, #48]	@ 0x30
 800d066:	2301      	movs	r3, #1
 800d068:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d06a:	69fb      	ldr	r3, [r7, #28]
 800d06c:	f383 8810 	msr	PRIMASK, r3
}
 800d070:	46c0      	nop			@ (mov r8, r8)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	689a      	ldr	r2, [r3, #8]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	2101      	movs	r1, #1
 800d07e:	438a      	bics	r2, r1
 800d080:	609a      	str	r2, [r3, #8]
 800d082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d084:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d086:	6a3b      	ldr	r3, [r7, #32]
 800d088:	f383 8810 	msr	PRIMASK, r3
}
 800d08c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	228c      	movs	r2, #140	@ 0x8c
 800d092:	2120      	movs	r1, #32
 800d094:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2284      	movs	r2, #132	@ 0x84
 800d09a:	2100      	movs	r1, #0
 800d09c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d09e:	2303      	movs	r3, #3
 800d0a0:	e012      	b.n	800d0c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2288      	movs	r2, #136	@ 0x88
 800d0a6:	2120      	movs	r1, #32
 800d0a8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	228c      	movs	r2, #140	@ 0x8c
 800d0ae:	2120      	movs	r1, #32
 800d0b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2284      	movs	r2, #132	@ 0x84
 800d0c2:	2100      	movs	r1, #0
 800d0c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d0c6:	2300      	movs	r3, #0
}
 800d0c8:	0018      	movs	r0, r3
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	b010      	add	sp, #64	@ 0x40
 800d0ce:	bd80      	pop	{r7, pc}
 800d0d0:	01ffffff 	.word	0x01ffffff
 800d0d4:	fffffedf 	.word	0xfffffedf

0800d0d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	60f8      	str	r0, [r7, #12]
 800d0e0:	60b9      	str	r1, [r7, #8]
 800d0e2:	603b      	str	r3, [r7, #0]
 800d0e4:	1dfb      	adds	r3, r7, #7
 800d0e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0e8:	e051      	b.n	800d18e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	d04e      	beq.n	800d18e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0f0:	f7f9 f9b8 	bl	8006464 <HAL_GetTick>
 800d0f4:	0002      	movs	r2, r0
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	1ad3      	subs	r3, r2, r3
 800d0fa:	69ba      	ldr	r2, [r7, #24]
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	d302      	bcc.n	800d106 <UART_WaitOnFlagUntilTimeout+0x2e>
 800d100:	69bb      	ldr	r3, [r7, #24]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d101      	bne.n	800d10a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800d106:	2303      	movs	r3, #3
 800d108:	e051      	b.n	800d1ae <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	2204      	movs	r2, #4
 800d112:	4013      	ands	r3, r2
 800d114:	d03b      	beq.n	800d18e <UART_WaitOnFlagUntilTimeout+0xb6>
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	2b80      	cmp	r3, #128	@ 0x80
 800d11a:	d038      	beq.n	800d18e <UART_WaitOnFlagUntilTimeout+0xb6>
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	2b40      	cmp	r3, #64	@ 0x40
 800d120:	d035      	beq.n	800d18e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	69db      	ldr	r3, [r3, #28]
 800d128:	2208      	movs	r2, #8
 800d12a:	4013      	ands	r3, r2
 800d12c:	2b08      	cmp	r3, #8
 800d12e:	d111      	bne.n	800d154 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	2208      	movs	r2, #8
 800d136:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	0018      	movs	r0, r3
 800d13c:	f000 f922 	bl	800d384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2290      	movs	r2, #144	@ 0x90
 800d144:	2108      	movs	r1, #8
 800d146:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2284      	movs	r2, #132	@ 0x84
 800d14c:	2100      	movs	r1, #0
 800d14e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800d150:	2301      	movs	r3, #1
 800d152:	e02c      	b.n	800d1ae <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	69da      	ldr	r2, [r3, #28]
 800d15a:	2380      	movs	r3, #128	@ 0x80
 800d15c:	011b      	lsls	r3, r3, #4
 800d15e:	401a      	ands	r2, r3
 800d160:	2380      	movs	r3, #128	@ 0x80
 800d162:	011b      	lsls	r3, r3, #4
 800d164:	429a      	cmp	r2, r3
 800d166:	d112      	bne.n	800d18e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	2280      	movs	r2, #128	@ 0x80
 800d16e:	0112      	lsls	r2, r2, #4
 800d170:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	0018      	movs	r0, r3
 800d176:	f000 f905 	bl	800d384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2290      	movs	r2, #144	@ 0x90
 800d17e:	2120      	movs	r1, #32
 800d180:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2284      	movs	r2, #132	@ 0x84
 800d186:	2100      	movs	r1, #0
 800d188:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800d18a:	2303      	movs	r3, #3
 800d18c:	e00f      	b.n	800d1ae <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	69db      	ldr	r3, [r3, #28]
 800d194:	68ba      	ldr	r2, [r7, #8]
 800d196:	4013      	ands	r3, r2
 800d198:	68ba      	ldr	r2, [r7, #8]
 800d19a:	1ad3      	subs	r3, r2, r3
 800d19c:	425a      	negs	r2, r3
 800d19e:	4153      	adcs	r3, r2
 800d1a0:	b2db      	uxtb	r3, r3
 800d1a2:	001a      	movs	r2, r3
 800d1a4:	1dfb      	adds	r3, r7, #7
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d09e      	beq.n	800d0ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d1ac:	2300      	movs	r3, #0
}
 800d1ae:	0018      	movs	r0, r3
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	b004      	add	sp, #16
 800d1b4:	bd80      	pop	{r7, pc}
	...

0800d1b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b090      	sub	sp, #64	@ 0x40
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	60b9      	str	r1, [r7, #8]
 800d1c2:	1dbb      	adds	r3, r7, #6
 800d1c4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	68ba      	ldr	r2, [r7, #8]
 800d1ca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	1dba      	adds	r2, r7, #6
 800d1d0:	215c      	movs	r1, #92	@ 0x5c
 800d1d2:	8812      	ldrh	r2, [r2, #0]
 800d1d4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2290      	movs	r2, #144	@ 0x90
 800d1da:	2100      	movs	r1, #0
 800d1dc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	228c      	movs	r2, #140	@ 0x8c
 800d1e2:	2122      	movs	r1, #34	@ 0x22
 800d1e4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2280      	movs	r2, #128	@ 0x80
 800d1ea:	589b      	ldr	r3, [r3, r2]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d02d      	beq.n	800d24c <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2280      	movs	r2, #128	@ 0x80
 800d1f4:	589b      	ldr	r3, [r3, r2]
 800d1f6:	4a40      	ldr	r2, [pc, #256]	@ (800d2f8 <UART_Start_Receive_DMA+0x140>)
 800d1f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2280      	movs	r2, #128	@ 0x80
 800d1fe:	589b      	ldr	r3, [r3, r2]
 800d200:	4a3e      	ldr	r2, [pc, #248]	@ (800d2fc <UART_Start_Receive_DMA+0x144>)
 800d202:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2280      	movs	r2, #128	@ 0x80
 800d208:	589b      	ldr	r3, [r3, r2]
 800d20a:	4a3d      	ldr	r2, [pc, #244]	@ (800d300 <UART_Start_Receive_DMA+0x148>)
 800d20c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2280      	movs	r2, #128	@ 0x80
 800d212:	589b      	ldr	r3, [r3, r2]
 800d214:	2200      	movs	r2, #0
 800d216:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2280      	movs	r2, #128	@ 0x80
 800d21c:	5898      	ldr	r0, [r3, r2]
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	3324      	adds	r3, #36	@ 0x24
 800d224:	0019      	movs	r1, r3
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d22a:	001a      	movs	r2, r3
 800d22c:	1dbb      	adds	r3, r7, #6
 800d22e:	881b      	ldrh	r3, [r3, #0]
 800d230:	f7fa fce6 	bl	8007c00 <HAL_DMA_Start_IT>
 800d234:	1e03      	subs	r3, r0, #0
 800d236:	d009      	beq.n	800d24c <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2290      	movs	r2, #144	@ 0x90
 800d23c:	2110      	movs	r1, #16
 800d23e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	228c      	movs	r2, #140	@ 0x8c
 800d244:	2120      	movs	r1, #32
 800d246:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800d248:	2301      	movs	r3, #1
 800d24a:	e050      	b.n	800d2ee <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	691b      	ldr	r3, [r3, #16]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d019      	beq.n	800d288 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d254:	f3ef 8310 	mrs	r3, PRIMASK
 800d258:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800d25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d25c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d25e:	2301      	movs	r3, #1
 800d260:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d264:	f383 8810 	msr	PRIMASK, r3
}
 800d268:	46c0      	nop			@ (mov r8, r8)
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	681a      	ldr	r2, [r3, #0]
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	2180      	movs	r1, #128	@ 0x80
 800d276:	0049      	lsls	r1, r1, #1
 800d278:	430a      	orrs	r2, r1
 800d27a:	601a      	str	r2, [r3, #0]
 800d27c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d27e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d282:	f383 8810 	msr	PRIMASK, r3
}
 800d286:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d288:	f3ef 8310 	mrs	r3, PRIMASK
 800d28c:	613b      	str	r3, [r7, #16]
  return(result);
 800d28e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d290:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d292:	2301      	movs	r3, #1
 800d294:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	f383 8810 	msr	PRIMASK, r3
}
 800d29c:	46c0      	nop			@ (mov r8, r8)
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	689a      	ldr	r2, [r3, #8]
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2101      	movs	r1, #1
 800d2aa:	430a      	orrs	r2, r1
 800d2ac:	609a      	str	r2, [r3, #8]
 800d2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2b2:	69bb      	ldr	r3, [r7, #24]
 800d2b4:	f383 8810 	msr	PRIMASK, r3
}
 800d2b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2ba:	f3ef 8310 	mrs	r3, PRIMASK
 800d2be:	61fb      	str	r3, [r7, #28]
  return(result);
 800d2c0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d2c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2c8:	6a3b      	ldr	r3, [r7, #32]
 800d2ca:	f383 8810 	msr	PRIMASK, r3
}
 800d2ce:	46c0      	nop			@ (mov r8, r8)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	689a      	ldr	r2, [r3, #8]
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	2140      	movs	r1, #64	@ 0x40
 800d2dc:	430a      	orrs	r2, r1
 800d2de:	609a      	str	r2, [r3, #8]
 800d2e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2e2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e6:	f383 8810 	msr	PRIMASK, r3
}
 800d2ea:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800d2ec:	2300      	movs	r3, #0
}
 800d2ee:	0018      	movs	r0, r3
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	b010      	add	sp, #64	@ 0x40
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	46c0      	nop			@ (mov r8, r8)
 800d2f8:	0800d451 	.word	0x0800d451
 800d2fc:	0800d585 	.word	0x0800d585
 800d300:	0800d5cd 	.word	0x0800d5cd

0800d304 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b08a      	sub	sp, #40	@ 0x28
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d30c:	f3ef 8310 	mrs	r3, PRIMASK
 800d310:	60bb      	str	r3, [r7, #8]
  return(result);
 800d312:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d314:	627b      	str	r3, [r7, #36]	@ 0x24
 800d316:	2301      	movs	r3, #1
 800d318:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	f383 8810 	msr	PRIMASK, r3
}
 800d320:	46c0      	nop			@ (mov r8, r8)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	681a      	ldr	r2, [r3, #0]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	21c0      	movs	r1, #192	@ 0xc0
 800d32e:	438a      	bics	r2, r1
 800d330:	601a      	str	r2, [r3, #0]
 800d332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d334:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	f383 8810 	msr	PRIMASK, r3
}
 800d33c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d33e:	f3ef 8310 	mrs	r3, PRIMASK
 800d342:	617b      	str	r3, [r7, #20]
  return(result);
 800d344:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d346:	623b      	str	r3, [r7, #32]
 800d348:	2301      	movs	r3, #1
 800d34a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	f383 8810 	msr	PRIMASK, r3
}
 800d352:	46c0      	nop			@ (mov r8, r8)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	689a      	ldr	r2, [r3, #8]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	4908      	ldr	r1, [pc, #32]	@ (800d380 <UART_EndTxTransfer+0x7c>)
 800d360:	400a      	ands	r2, r1
 800d362:	609a      	str	r2, [r3, #8]
 800d364:	6a3b      	ldr	r3, [r7, #32]
 800d366:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	f383 8810 	msr	PRIMASK, r3
}
 800d36e:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2288      	movs	r2, #136	@ 0x88
 800d374:	2120      	movs	r1, #32
 800d376:	5099      	str	r1, [r3, r2]
}
 800d378:	46c0      	nop			@ (mov r8, r8)
 800d37a:	46bd      	mov	sp, r7
 800d37c:	b00a      	add	sp, #40	@ 0x28
 800d37e:	bd80      	pop	{r7, pc}
 800d380:	ff7fffff 	.word	0xff7fffff

0800d384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b08e      	sub	sp, #56	@ 0x38
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d38c:	f3ef 8310 	mrs	r3, PRIMASK
 800d390:	617b      	str	r3, [r7, #20]
  return(result);
 800d392:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d394:	637b      	str	r3, [r7, #52]	@ 0x34
 800d396:	2301      	movs	r3, #1
 800d398:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d39a:	69bb      	ldr	r3, [r7, #24]
 800d39c:	f383 8810 	msr	PRIMASK, r3
}
 800d3a0:	46c0      	nop			@ (mov r8, r8)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4926      	ldr	r1, [pc, #152]	@ (800d448 <UART_EndRxTransfer+0xc4>)
 800d3ae:	400a      	ands	r2, r1
 800d3b0:	601a      	str	r2, [r3, #0]
 800d3b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3b6:	69fb      	ldr	r3, [r7, #28]
 800d3b8:	f383 8810 	msr	PRIMASK, r3
}
 800d3bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3be:	f3ef 8310 	mrs	r3, PRIMASK
 800d3c2:	623b      	str	r3, [r7, #32]
  return(result);
 800d3c4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d3c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ce:	f383 8810 	msr	PRIMASK, r3
}
 800d3d2:	46c0      	nop			@ (mov r8, r8)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	689a      	ldr	r2, [r3, #8]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	491b      	ldr	r1, [pc, #108]	@ (800d44c <UART_EndRxTransfer+0xc8>)
 800d3e0:	400a      	ands	r2, r1
 800d3e2:	609a      	str	r2, [r3, #8]
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ea:	f383 8810 	msr	PRIMASK, r3
}
 800d3ee:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d118      	bne.n	800d42a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3f8:	f3ef 8310 	mrs	r3, PRIMASK
 800d3fc:	60bb      	str	r3, [r7, #8]
  return(result);
 800d3fe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d400:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d402:	2301      	movs	r3, #1
 800d404:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f383 8810 	msr	PRIMASK, r3
}
 800d40c:	46c0      	nop			@ (mov r8, r8)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2110      	movs	r1, #16
 800d41a:	438a      	bics	r2, r1
 800d41c:	601a      	str	r2, [r3, #0]
 800d41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d420:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	f383 8810 	msr	PRIMASK, r3
}
 800d428:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	228c      	movs	r2, #140	@ 0x8c
 800d42e:	2120      	movs	r1, #32
 800d430:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2200      	movs	r2, #0
 800d436:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2200      	movs	r2, #0
 800d43c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d43e:	46c0      	nop			@ (mov r8, r8)
 800d440:	46bd      	mov	sp, r7
 800d442:	b00e      	add	sp, #56	@ 0x38
 800d444:	bd80      	pop	{r7, pc}
 800d446:	46c0      	nop			@ (mov r8, r8)
 800d448:	fffffedf 	.word	0xfffffedf
 800d44c:	effffffe 	.word	0xeffffffe

0800d450 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b094      	sub	sp, #80	@ 0x50
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d45c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	2220      	movs	r2, #32
 800d466:	4013      	ands	r3, r2
 800d468:	d16f      	bne.n	800d54a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800d46a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d46c:	225e      	movs	r2, #94	@ 0x5e
 800d46e:	2100      	movs	r1, #0
 800d470:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d472:	f3ef 8310 	mrs	r3, PRIMASK
 800d476:	61bb      	str	r3, [r7, #24]
  return(result);
 800d478:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d47a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d47c:	2301      	movs	r3, #1
 800d47e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	f383 8810 	msr	PRIMASK, r3
}
 800d486:	46c0      	nop			@ (mov r8, r8)
 800d488:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	681a      	ldr	r2, [r3, #0]
 800d48e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	493b      	ldr	r1, [pc, #236]	@ (800d580 <UART_DMAReceiveCplt+0x130>)
 800d494:	400a      	ands	r2, r1
 800d496:	601a      	str	r2, [r3, #0]
 800d498:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d49a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d49c:	6a3b      	ldr	r3, [r7, #32]
 800d49e:	f383 8810 	msr	PRIMASK, r3
}
 800d4a2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4a4:	f3ef 8310 	mrs	r3, PRIMASK
 800d4a8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4b4:	f383 8810 	msr	PRIMASK, r3
}
 800d4b8:	46c0      	nop			@ (mov r8, r8)
 800d4ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	689a      	ldr	r2, [r3, #8]
 800d4c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	2101      	movs	r1, #1
 800d4c6:	438a      	bics	r2, r1
 800d4c8:	609a      	str	r2, [r3, #8]
 800d4ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4d0:	f383 8810 	msr	PRIMASK, r3
}
 800d4d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4d6:	f3ef 8310 	mrs	r3, PRIMASK
 800d4da:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800d4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d4de:	643b      	str	r3, [r7, #64]	@ 0x40
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4e6:	f383 8810 	msr	PRIMASK, r3
}
 800d4ea:	46c0      	nop			@ (mov r8, r8)
 800d4ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	689a      	ldr	r2, [r3, #8]
 800d4f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	2140      	movs	r1, #64	@ 0x40
 800d4f8:	438a      	bics	r2, r1
 800d4fa:	609a      	str	r2, [r3, #8]
 800d4fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d502:	f383 8810 	msr	PRIMASK, r3
}
 800d506:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d508:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d50a:	228c      	movs	r2, #140	@ 0x8c
 800d50c:	2120      	movs	r1, #32
 800d50e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d512:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d514:	2b01      	cmp	r3, #1
 800d516:	d118      	bne.n	800d54a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d518:	f3ef 8310 	mrs	r3, PRIMASK
 800d51c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d51e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d522:	2301      	movs	r3, #1
 800d524:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	f383 8810 	msr	PRIMASK, r3
}
 800d52c:	46c0      	nop			@ (mov r8, r8)
 800d52e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	681a      	ldr	r2, [r3, #0]
 800d534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2110      	movs	r1, #16
 800d53a:	438a      	bics	r2, r1
 800d53c:	601a      	str	r2, [r3, #0]
 800d53e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d540:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	f383 8810 	msr	PRIMASK, r3
}
 800d548:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d54a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d54c:	2200      	movs	r2, #0
 800d54e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d550:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d554:	2b01      	cmp	r3, #1
 800d556:	d109      	bne.n	800d56c <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800d558:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d55a:	22c0      	movs	r2, #192	@ 0xc0
 800d55c:	589b      	ldr	r3, [r3, r2]
 800d55e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d560:	215c      	movs	r1, #92	@ 0x5c
 800d562:	5a51      	ldrh	r1, [r2, r1]
 800d564:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d566:	0010      	movs	r0, r2
 800d568:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d56a:	e005      	b.n	800d578 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800d56c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d56e:	22a0      	movs	r2, #160	@ 0xa0
 800d570:	589b      	ldr	r3, [r3, r2]
 800d572:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d574:	0010      	movs	r0, r2
 800d576:	4798      	blx	r3
}
 800d578:	46c0      	nop			@ (mov r8, r8)
 800d57a:	46bd      	mov	sp, r7
 800d57c:	b014      	add	sp, #80	@ 0x50
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	fffffeff 	.word	0xfffffeff

0800d584 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b084      	sub	sp, #16
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d590:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2201      	movs	r2, #1
 800d596:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d10b      	bne.n	800d5b8 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	22c0      	movs	r2, #192	@ 0xc0
 800d5a4:	589b      	ldr	r3, [r3, r2]
 800d5a6:	68fa      	ldr	r2, [r7, #12]
 800d5a8:	215c      	movs	r1, #92	@ 0x5c
 800d5aa:	5a52      	ldrh	r2, [r2, r1]
 800d5ac:	0852      	lsrs	r2, r2, #1
 800d5ae:	b291      	uxth	r1, r2
 800d5b0:	68fa      	ldr	r2, [r7, #12]
 800d5b2:	0010      	movs	r0, r2
 800d5b4:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d5b6:	e005      	b.n	800d5c4 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	229c      	movs	r2, #156	@ 0x9c
 800d5bc:	589b      	ldr	r3, [r3, r2]
 800d5be:	68fa      	ldr	r2, [r7, #12]
 800d5c0:	0010      	movs	r0, r2
 800d5c2:	4798      	blx	r3
}
 800d5c4:	46c0      	nop			@ (mov r8, r8)
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	b004      	add	sp, #16
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b086      	sub	sp, #24
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	2288      	movs	r2, #136	@ 0x88
 800d5de:	589b      	ldr	r3, [r3, r2]
 800d5e0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	228c      	movs	r2, #140	@ 0x8c
 800d5e6:	589b      	ldr	r3, [r3, r2]
 800d5e8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	689b      	ldr	r3, [r3, #8]
 800d5f0:	2280      	movs	r2, #128	@ 0x80
 800d5f2:	4013      	ands	r3, r2
 800d5f4:	2b80      	cmp	r3, #128	@ 0x80
 800d5f6:	d10a      	bne.n	800d60e <UART_DMAError+0x42>
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	2b21      	cmp	r3, #33	@ 0x21
 800d5fc:	d107      	bne.n	800d60e <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	2256      	movs	r2, #86	@ 0x56
 800d602:	2100      	movs	r1, #0
 800d604:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	0018      	movs	r0, r3
 800d60a:	f7ff fe7b 	bl	800d304 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	689b      	ldr	r3, [r3, #8]
 800d614:	2240      	movs	r2, #64	@ 0x40
 800d616:	4013      	ands	r3, r2
 800d618:	2b40      	cmp	r3, #64	@ 0x40
 800d61a:	d10a      	bne.n	800d632 <UART_DMAError+0x66>
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2b22      	cmp	r3, #34	@ 0x22
 800d620:	d107      	bne.n	800d632 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	225e      	movs	r2, #94	@ 0x5e
 800d626:	2100      	movs	r1, #0
 800d628:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	0018      	movs	r0, r3
 800d62e:	f7ff fea9 	bl	800d384 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	2290      	movs	r2, #144	@ 0x90
 800d636:	589b      	ldr	r3, [r3, r2]
 800d638:	2210      	movs	r2, #16
 800d63a:	431a      	orrs	r2, r3
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	2190      	movs	r1, #144	@ 0x90
 800d640:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	22a4      	movs	r2, #164	@ 0xa4
 800d646:	589b      	ldr	r3, [r3, r2]
 800d648:	697a      	ldr	r2, [r7, #20]
 800d64a:	0010      	movs	r0, r2
 800d64c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d64e:	46c0      	nop			@ (mov r8, r8)
 800d650:	46bd      	mov	sp, r7
 800d652:	b006      	add	sp, #24
 800d654:	bd80      	pop	{r7, pc}

0800d656 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d656:	b580      	push	{r7, lr}
 800d658:	b084      	sub	sp, #16
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d662:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	225e      	movs	r2, #94	@ 0x5e
 800d668:	2100      	movs	r1, #0
 800d66a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	2256      	movs	r2, #86	@ 0x56
 800d670:	2100      	movs	r1, #0
 800d672:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	22a4      	movs	r2, #164	@ 0xa4
 800d678:	589b      	ldr	r3, [r3, r2]
 800d67a:	68fa      	ldr	r2, [r7, #12]
 800d67c:	0010      	movs	r0, r2
 800d67e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d680:	46c0      	nop			@ (mov r8, r8)
 800d682:	46bd      	mov	sp, r7
 800d684:	b004      	add	sp, #16
 800d686:	bd80      	pop	{r7, pc}

0800d688 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b086      	sub	sp, #24
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d690:	f3ef 8310 	mrs	r3, PRIMASK
 800d694:	60bb      	str	r3, [r7, #8]
  return(result);
 800d696:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d698:	617b      	str	r3, [r7, #20]
 800d69a:	2301      	movs	r3, #1
 800d69c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f383 8810 	msr	PRIMASK, r3
}
 800d6a4:	46c0      	nop			@ (mov r8, r8)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	2140      	movs	r1, #64	@ 0x40
 800d6b2:	438a      	bics	r2, r1
 800d6b4:	601a      	str	r2, [r3, #0]
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	f383 8810 	msr	PRIMASK, r3
}
 800d6c0:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2288      	movs	r2, #136	@ 0x88
 800d6c6:	2120      	movs	r1, #32
 800d6c8:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2298      	movs	r2, #152	@ 0x98
 800d6d4:	589b      	ldr	r3, [r3, r2]
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	0010      	movs	r0, r2
 800d6da:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6dc:	46c0      	nop			@ (mov r8, r8)
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	b006      	add	sp, #24
 800d6e2:	bd80      	pop	{r7, pc}

0800d6e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d6ec:	46c0      	nop			@ (mov r8, r8)
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	b002      	add	sp, #8
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d6fc:	46c0      	nop			@ (mov r8, r8)
 800d6fe:	46bd      	mov	sp, r7
 800d700:	b002      	add	sp, #8
 800d702:	bd80      	pop	{r7, pc}

0800d704 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b082      	sub	sp, #8
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d70c:	46c0      	nop			@ (mov r8, r8)
 800d70e:	46bd      	mov	sp, r7
 800d710:	b002      	add	sp, #8
 800d712:	bd80      	pop	{r7, pc}

0800d714 <memset>:
 800d714:	0003      	movs	r3, r0
 800d716:	1882      	adds	r2, r0, r2
 800d718:	4293      	cmp	r3, r2
 800d71a:	d100      	bne.n	800d71e <memset+0xa>
 800d71c:	4770      	bx	lr
 800d71e:	7019      	strb	r1, [r3, #0]
 800d720:	3301      	adds	r3, #1
 800d722:	e7f9      	b.n	800d718 <memset+0x4>

0800d724 <__libc_init_array>:
 800d724:	b570      	push	{r4, r5, r6, lr}
 800d726:	2600      	movs	r6, #0
 800d728:	4c0c      	ldr	r4, [pc, #48]	@ (800d75c <__libc_init_array+0x38>)
 800d72a:	4d0d      	ldr	r5, [pc, #52]	@ (800d760 <__libc_init_array+0x3c>)
 800d72c:	1b64      	subs	r4, r4, r5
 800d72e:	10a4      	asrs	r4, r4, #2
 800d730:	42a6      	cmp	r6, r4
 800d732:	d109      	bne.n	800d748 <__libc_init_array+0x24>
 800d734:	2600      	movs	r6, #0
 800d736:	f000 f823 	bl	800d780 <_init>
 800d73a:	4c0a      	ldr	r4, [pc, #40]	@ (800d764 <__libc_init_array+0x40>)
 800d73c:	4d0a      	ldr	r5, [pc, #40]	@ (800d768 <__libc_init_array+0x44>)
 800d73e:	1b64      	subs	r4, r4, r5
 800d740:	10a4      	asrs	r4, r4, #2
 800d742:	42a6      	cmp	r6, r4
 800d744:	d105      	bne.n	800d752 <__libc_init_array+0x2e>
 800d746:	bd70      	pop	{r4, r5, r6, pc}
 800d748:	00b3      	lsls	r3, r6, #2
 800d74a:	58eb      	ldr	r3, [r5, r3]
 800d74c:	4798      	blx	r3
 800d74e:	3601      	adds	r6, #1
 800d750:	e7ee      	b.n	800d730 <__libc_init_array+0xc>
 800d752:	00b3      	lsls	r3, r6, #2
 800d754:	58eb      	ldr	r3, [r5, r3]
 800d756:	4798      	blx	r3
 800d758:	3601      	adds	r6, #1
 800d75a:	e7f2      	b.n	800d742 <__libc_init_array+0x1e>
 800d75c:	0800e210 	.word	0x0800e210
 800d760:	0800e210 	.word	0x0800e210
 800d764:	0800e214 	.word	0x0800e214
 800d768:	0800e210 	.word	0x0800e210

0800d76c <memcpy>:
 800d76c:	2300      	movs	r3, #0
 800d76e:	b510      	push	{r4, lr}
 800d770:	429a      	cmp	r2, r3
 800d772:	d100      	bne.n	800d776 <memcpy+0xa>
 800d774:	bd10      	pop	{r4, pc}
 800d776:	5ccc      	ldrb	r4, [r1, r3]
 800d778:	54c4      	strb	r4, [r0, r3]
 800d77a:	3301      	adds	r3, #1
 800d77c:	e7f8      	b.n	800d770 <memcpy+0x4>
	...

0800d780 <_init>:
 800d780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d782:	46c0      	nop			@ (mov r8, r8)
 800d784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d786:	bc08      	pop	{r3}
 800d788:	469e      	mov	lr, r3
 800d78a:	4770      	bx	lr

0800d78c <_fini>:
 800d78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d78e:	46c0      	nop			@ (mov r8, r8)
 800d790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d792:	bc08      	pop	{r3}
 800d794:	469e      	mov	lr, r3
 800d796:	4770      	bx	lr
