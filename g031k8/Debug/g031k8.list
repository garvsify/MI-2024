
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e098  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a80  0800e158  0800e158  0000f158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebd8  0800ebd8  000104e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ebd8  0800ebd8  0000fbd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ebe0  0800ebe0  000104e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ebe0  0800ebe0  0000fbe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ebe4  0800ebe4  0000fbe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004e0  20000000  0800ebe8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000008ec  200004e0  0800f0c8  000104e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000dcc  0800f0c8  00010dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000104e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002240a  00000000  00000000  00010508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ce0  00000000  00000000  00032912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001940  00000000  00000000  000375f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001381  00000000  00000000  00038f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017389  00000000  00000000  0003a2b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00008a1d  00000000  00000000  00051642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0005a05f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000059c4  00000000  00000000  0005a0a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000050  00000000  00000000  0005fa68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004e0 	.word	0x200004e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e12c 	.word	0x0800e12c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004e4 	.word	0x200004e4
 8000104:	0800e12c 	.word	0x0800e12c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <Initialise_Preset_Arrays>:
volatile enum Validate user_presets_used_array[NUM_PRESETS] = {(enum Validate)NO};

volatile uint8_t CC_array[5] = {0};

//FUNCTION DEFINITIONS
uint8_t Initialise_Preset_Arrays(void){
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 8000452:	1dfb      	adds	r3, r7, #7
 8000454:	2200      	movs	r2, #0
 8000456:	701a      	strb	r2, [r3, #0]
 8000458:	e05f      	b.n	800051a <Initialise_Preset_Arrays+0xce>

		if(i == 0){
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d112      	bne.n	8000488 <Initialise_Preset_Arrays+0x3c>
			factory_presets_array[i] = &factory_preset_0;
 8000462:	1dfb      	adds	r3, r7, #7
 8000464:	781a      	ldrb	r2, [r3, #0]
 8000466:	4b31      	ldr	r3, [pc, #196]	@ (800052c <Initialise_Preset_Arrays+0xe0>)
 8000468:	0092      	lsls	r2, r2, #2
 800046a:	4931      	ldr	r1, [pc, #196]	@ (8000530 <Initialise_Preset_Arrays+0xe4>)
 800046c:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_0;
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	781a      	ldrb	r2, [r3, #0]
 8000472:	4b30      	ldr	r3, [pc, #192]	@ (8000534 <Initialise_Preset_Arrays+0xe8>)
 8000474:	0092      	lsls	r2, r2, #2
 8000476:	4930      	ldr	r1, [pc, #192]	@ (8000538 <Initialise_Preset_Arrays+0xec>)
 8000478:	50d1      	str	r1, [r2, r3]
			storage_user_presets_array[i] = &storage_user_preset_0;
 800047a:	1dfb      	adds	r3, r7, #7
 800047c:	781a      	ldrb	r2, [r3, #0]
 800047e:	4b2f      	ldr	r3, [pc, #188]	@ (800053c <Initialise_Preset_Arrays+0xf0>)
 8000480:	0092      	lsls	r2, r2, #2
 8000482:	492f      	ldr	r1, [pc, #188]	@ (8000540 <Initialise_Preset_Arrays+0xf4>)
 8000484:	50d1      	str	r1, [r2, r3]
 8000486:	e043      	b.n	8000510 <Initialise_Preset_Arrays+0xc4>
		}
		else if(i == 1){
 8000488:	1dfb      	adds	r3, r7, #7
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d112      	bne.n	80004b6 <Initialise_Preset_Arrays+0x6a>
			factory_presets_array[i] = &factory_preset_1;
 8000490:	1dfb      	adds	r3, r7, #7
 8000492:	781a      	ldrb	r2, [r3, #0]
 8000494:	4b25      	ldr	r3, [pc, #148]	@ (800052c <Initialise_Preset_Arrays+0xe0>)
 8000496:	0092      	lsls	r2, r2, #2
 8000498:	492a      	ldr	r1, [pc, #168]	@ (8000544 <Initialise_Preset_Arrays+0xf8>)
 800049a:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_1;
 800049c:	1dfb      	adds	r3, r7, #7
 800049e:	781a      	ldrb	r2, [r3, #0]
 80004a0:	4b24      	ldr	r3, [pc, #144]	@ (8000534 <Initialise_Preset_Arrays+0xe8>)
 80004a2:	0092      	lsls	r2, r2, #2
 80004a4:	4928      	ldr	r1, [pc, #160]	@ (8000548 <Initialise_Preset_Arrays+0xfc>)
 80004a6:	50d1      	str	r1, [r2, r3]
			storage_user_presets_array[i] = &storage_user_preset_1;
 80004a8:	1dfb      	adds	r3, r7, #7
 80004aa:	781a      	ldrb	r2, [r3, #0]
 80004ac:	4b23      	ldr	r3, [pc, #140]	@ (800053c <Initialise_Preset_Arrays+0xf0>)
 80004ae:	0092      	lsls	r2, r2, #2
 80004b0:	4926      	ldr	r1, [pc, #152]	@ (800054c <Initialise_Preset_Arrays+0x100>)
 80004b2:	50d1      	str	r1, [r2, r3]
 80004b4:	e02c      	b.n	8000510 <Initialise_Preset_Arrays+0xc4>
		}
		else if(i == 2){
 80004b6:	1dfb      	adds	r3, r7, #7
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b02      	cmp	r3, #2
 80004bc:	d112      	bne.n	80004e4 <Initialise_Preset_Arrays+0x98>
			factory_presets_array[i] = &factory_preset_2;
 80004be:	1dfb      	adds	r3, r7, #7
 80004c0:	781a      	ldrb	r2, [r3, #0]
 80004c2:	4b1a      	ldr	r3, [pc, #104]	@ (800052c <Initialise_Preset_Arrays+0xe0>)
 80004c4:	0092      	lsls	r2, r2, #2
 80004c6:	4922      	ldr	r1, [pc, #136]	@ (8000550 <Initialise_Preset_Arrays+0x104>)
 80004c8:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_2;
 80004ca:	1dfb      	adds	r3, r7, #7
 80004cc:	781a      	ldrb	r2, [r3, #0]
 80004ce:	4b19      	ldr	r3, [pc, #100]	@ (8000534 <Initialise_Preset_Arrays+0xe8>)
 80004d0:	0092      	lsls	r2, r2, #2
 80004d2:	4920      	ldr	r1, [pc, #128]	@ (8000554 <Initialise_Preset_Arrays+0x108>)
 80004d4:	50d1      	str	r1, [r2, r3]
			storage_user_presets_array[i] = &storage_user_preset_2;
 80004d6:	1dfb      	adds	r3, r7, #7
 80004d8:	781a      	ldrb	r2, [r3, #0]
 80004da:	4b18      	ldr	r3, [pc, #96]	@ (800053c <Initialise_Preset_Arrays+0xf0>)
 80004dc:	0092      	lsls	r2, r2, #2
 80004de:	491e      	ldr	r1, [pc, #120]	@ (8000558 <Initialise_Preset_Arrays+0x10c>)
 80004e0:	50d1      	str	r1, [r2, r3]
 80004e2:	e015      	b.n	8000510 <Initialise_Preset_Arrays+0xc4>
		}
		else if(i == 3){
 80004e4:	1dfb      	adds	r3, r7, #7
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b03      	cmp	r3, #3
 80004ea:	d111      	bne.n	8000510 <Initialise_Preset_Arrays+0xc4>
			factory_presets_array[i] = &factory_preset_3;
 80004ec:	1dfb      	adds	r3, r7, #7
 80004ee:	781a      	ldrb	r2, [r3, #0]
 80004f0:	4b0e      	ldr	r3, [pc, #56]	@ (800052c <Initialise_Preset_Arrays+0xe0>)
 80004f2:	0092      	lsls	r2, r2, #2
 80004f4:	4919      	ldr	r1, [pc, #100]	@ (800055c <Initialise_Preset_Arrays+0x110>)
 80004f6:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_3;
 80004f8:	1dfb      	adds	r3, r7, #7
 80004fa:	781a      	ldrb	r2, [r3, #0]
 80004fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <Initialise_Preset_Arrays+0xe8>)
 80004fe:	0092      	lsls	r2, r2, #2
 8000500:	4917      	ldr	r1, [pc, #92]	@ (8000560 <Initialise_Preset_Arrays+0x114>)
 8000502:	50d1      	str	r1, [r2, r3]
			storage_user_presets_array[i] = &storage_user_preset_3;
 8000504:	1dfb      	adds	r3, r7, #7
 8000506:	781a      	ldrb	r2, [r3, #0]
 8000508:	4b0c      	ldr	r3, [pc, #48]	@ (800053c <Initialise_Preset_Arrays+0xf0>)
 800050a:	0092      	lsls	r2, r2, #2
 800050c:	4915      	ldr	r1, [pc, #84]	@ (8000564 <Initialise_Preset_Arrays+0x118>)
 800050e:	50d1      	str	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	781a      	ldrb	r2, [r3, #0]
 8000514:	1dfb      	adds	r3, r7, #7
 8000516:	3201      	adds	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]
 800051a:	1dfb      	adds	r3, r7, #7
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b0f      	cmp	r3, #15
 8000520:	d99b      	bls.n	800045a <Initialise_Preset_Arrays+0xe>
		}
	}

	return 1;
 8000522:	2301      	movs	r3, #1
}
 8000524:	0018      	movs	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	b002      	add	sp, #8
 800052a:	bd80      	pop	{r7, pc}
 800052c:	200004fc 	.word	0x200004fc
 8000530:	0800e168 	.word	0x0800e168
 8000534:	2000050c 	.word	0x2000050c
 8000538:	20000000 	.word	0x20000000
 800053c:	20000544 	.word	0x20000544
 8000540:	20000558 	.word	0x20000558
 8000544:	0800e170 	.word	0x0800e170
 8000548:	20000008 	.word	0x20000008
 800054c:	20000560 	.word	0x20000560
 8000550:	0800e178 	.word	0x0800e178
 8000554:	20000010 	.word	0x20000010
 8000558:	20000568 	.word	0x20000568
 800055c:	0800e180 	.word	0x0800e180
 8000560:	20000018 	.word	0x20000018
 8000564:	20000570 	.word	0x20000570

08000568 <Update_Params_Based_On_Mode_Selected>:

uint8_t Update_Params_Based_On_Mode_Selected(void){
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

	if(waveshape_fsm.current_state == MANUAL_MODE){
 800056c:	4b68      	ldr	r3, [pc, #416]	@ (8000710 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	2b01      	cmp	r3, #1
 8000574:	d104      	bne.n	8000580 <Update_Params_Based_On_Mode_Selected+0x18>
		params.waveshape = params_manual.waveshape;
 8000576:	4b67      	ldr	r3, [pc, #412]	@ (8000714 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000578:	799b      	ldrb	r3, [r3, #6]
 800057a:	b2da      	uxtb	r2, r3
 800057c:	4b66      	ldr	r3, [pc, #408]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800057e:	719a      	strb	r2, [r3, #6]
	}
	if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8000580:	4b66      	ldr	r3, [pc, #408]	@ (800071c <Update_Params_Based_On_Mode_Selected+0x1b4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b2db      	uxtb	r3, r3
 8000586:	2b01      	cmp	r3, #1
 8000588:	d104      	bne.n	8000594 <Update_Params_Based_On_Mode_Selected+0x2c>
		params.speed = params_manual.speed;
 800058a:	4b62      	ldr	r3, [pc, #392]	@ (8000714 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 800058c:	891b      	ldrh	r3, [r3, #8]
 800058e:	b29a      	uxth	r2, r3
 8000590:	4b61      	ldr	r3, [pc, #388]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000592:	811a      	strh	r2, [r3, #8]
	}
	if(depth_fsm.current_state == MANUAL_MODE){
 8000594:	4b62      	ldr	r3, [pc, #392]	@ (8000720 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b01      	cmp	r3, #1
 800059c:	d104      	bne.n	80005a8 <Update_Params_Based_On_Mode_Selected+0x40>
		params.depth = params_manual.depth;
 800059e:	4b5d      	ldr	r3, [pc, #372]	@ (8000714 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 80005a0:	7a9b      	ldrb	r3, [r3, #10]
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	4b5c      	ldr	r3, [pc, #368]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005a6:	729a      	strb	r2, [r3, #10]
	}
	if(symmetry_fsm.current_state == MANUAL_MODE){
 80005a8:	4b5e      	ldr	r3, [pc, #376]	@ (8000724 <Update_Params_Based_On_Mode_Selected+0x1bc>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d104      	bne.n	80005bc <Update_Params_Based_On_Mode_Selected+0x54>
		params.symmetry = params_manual.symmetry;
 80005b2:	4b58      	ldr	r3, [pc, #352]	@ (8000714 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 80005b4:	899b      	ldrh	r3, [r3, #12]
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	4b57      	ldr	r3, [pc, #348]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005ba:	819a      	strh	r2, [r3, #12]
	}
	if(phase_fsm.current_state == MANUAL_MODE){
 80005bc:	4b5a      	ldr	r3, [pc, #360]	@ (8000728 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d104      	bne.n	80005d0 <Update_Params_Based_On_Mode_Selected+0x68>
		params.duty_delay_line_read_pointer_offset = params_manual.duty_delay_line_read_pointer_offset;
 80005c6:	4b53      	ldr	r3, [pc, #332]	@ (8000714 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 80005c8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	4b52      	ldr	r3, [pc, #328]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005ce:	845a      	strh	r2, [r3, #34]	@ 0x22
	}

	if(waveshape_fsm.current_state == PC_MODE){
 80005d0:	4b4f      	ldr	r3, [pc, #316]	@ (8000710 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2b03      	cmp	r3, #3
 80005d8:	d10e      	bne.n	80005f8 <Update_Params_Based_On_Mode_Selected+0x90>
		Update_Waveshape_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005da:	4b54      	ldr	r3, [pc, #336]	@ (800072c <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	1e5a      	subs	r2, r3, #1
 80005e2:	0013      	movs	r3, r2
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	189b      	adds	r3, r3, r2
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	4a51      	ldr	r2, [pc, #324]	@ (8000730 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005ec:	189b      	adds	r3, r3, r2
 80005ee:	4a4a      	ldr	r2, [pc, #296]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005f0:	0011      	movs	r1, r2
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 f8fd 	bl	80007f2 <Update_Waveshape_with_Converted_Preset_Value>
	}
	if(speed_fsm.current_state.shared_state == PC_MODE){
 80005f8:	4b48      	ldr	r3, [pc, #288]	@ (800071c <Update_Params_Based_On_Mode_Selected+0x1b4>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b03      	cmp	r3, #3
 8000600:	d10e      	bne.n	8000620 <Update_Params_Based_On_Mode_Selected+0xb8>
		Update_Speed_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000602:	4b4a      	ldr	r3, [pc, #296]	@ (800072c <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	1e5a      	subs	r2, r3, #1
 800060a:	0013      	movs	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	189b      	adds	r3, r3, r2
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	4a47      	ldr	r2, [pc, #284]	@ (8000730 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 8000614:	189b      	adds	r3, r3, r2
 8000616:	4a40      	ldr	r2, [pc, #256]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000618:	0011      	movs	r1, r2
 800061a:	0018      	movs	r0, r3
 800061c:	f000 f912 	bl	8000844 <Update_Speed_with_Converted_Preset_Value>
	}
	if(depth_fsm.current_state == PC_MODE){
 8000620:	4b3f      	ldr	r3, [pc, #252]	@ (8000720 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b03      	cmp	r3, #3
 8000628:	d10e      	bne.n	8000648 <Update_Params_Based_On_Mode_Selected+0xe0>
		Update_Depth_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 800062a:	4b40      	ldr	r3, [pc, #256]	@ (800072c <Update_Params_Based_On_Mode_Selected+0x1c4>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	1e5a      	subs	r2, r3, #1
 8000632:	0013      	movs	r3, r2
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	189b      	adds	r3, r3, r2
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	4a3d      	ldr	r2, [pc, #244]	@ (8000730 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 800063c:	189b      	adds	r3, r3, r2
 800063e:	4a36      	ldr	r2, [pc, #216]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000640:	0011      	movs	r1, r2
 8000642:	0018      	movs	r0, r3
 8000644:	f000 f90d 	bl	8000862 <Update_Depth_with_Converted_Preset_Value>
	}
	if(symmetry_fsm.current_state == PC_MODE){
 8000648:	4b36      	ldr	r3, [pc, #216]	@ (8000724 <Update_Params_Based_On_Mode_Selected+0x1bc>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b03      	cmp	r3, #3
 8000650:	d10e      	bne.n	8000670 <Update_Params_Based_On_Mode_Selected+0x108>
		Update_Symmetry_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000652:	4b36      	ldr	r3, [pc, #216]	@ (800072c <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	b2db      	uxtb	r3, r3
 8000658:	1e5a      	subs	r2, r3, #1
 800065a:	0013      	movs	r3, r2
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	189b      	adds	r3, r3, r2
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	4a33      	ldr	r2, [pc, #204]	@ (8000730 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 8000664:	189b      	adds	r3, r3, r2
 8000666:	4a2c      	ldr	r2, [pc, #176]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000668:	0011      	movs	r1, r2
 800066a:	0018      	movs	r0, r3
 800066c:	f000 f908 	bl	8000880 <Update_Symmetry_with_Converted_Preset_Value>
	}
	if(phase_fsm.current_state == PC_MODE){
 8000670:	4b2d      	ldr	r3, [pc, #180]	@ (8000728 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	2b03      	cmp	r3, #3
 8000678:	d10e      	bne.n	8000698 <Update_Params_Based_On_Mode_Selected+0x130>
		Update_Phase_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 800067a:	4b2c      	ldr	r3, [pc, #176]	@ (800072c <Update_Params_Based_On_Mode_Selected+0x1c4>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	b2db      	uxtb	r3, r3
 8000680:	1e5a      	subs	r2, r3, #1
 8000682:	0013      	movs	r3, r2
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	189b      	adds	r3, r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4a29      	ldr	r2, [pc, #164]	@ (8000730 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 800068c:	189b      	adds	r3, r3, r2
 800068e:	4a22      	ldr	r2, [pc, #136]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000690:	0011      	movs	r1, r2
 8000692:	0018      	movs	r0, r3
 8000694:	f000 f903 	bl	800089e <Update_Phase_with_Converted_Preset_Value>
	}


	if(waveshape_fsm.current_state == CC_MODE){
 8000698:	4b1d      	ldr	r3, [pc, #116]	@ (8000710 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d105      	bne.n	80006ae <Update_Params_Based_On_Mode_Selected+0x146>
		Update_Waveshape_with_CC_Value(&CC_array[WAVESHAPE_ARR], &params);
 80006a2:	4a1d      	ldr	r2, [pc, #116]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006a4:	4b23      	ldr	r3, [pc, #140]	@ (8000734 <Update_Params_Based_On_Mode_Selected+0x1cc>)
 80006a6:	0011      	movs	r1, r2
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 fd2f 	bl	800110c <Update_Waveshape_with_CC_Value>
	}
	if(speed_fsm.current_state.shared_state == CC_MODE){
 80006ae:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <Update_Params_Based_On_Mode_Selected+0x1b4>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d105      	bne.n	80006c4 <Update_Params_Based_On_Mode_Selected+0x15c>
		Update_Speed_with_CC_Value(&CC_array[SPEED_ARR], &params);
 80006b8:	4a17      	ldr	r2, [pc, #92]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000738 <Update_Params_Based_On_Mode_Selected+0x1d0>)
 80006bc:	0011      	movs	r1, r2
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fd49 	bl	8001156 <Update_Speed_with_CC_Value>
	}
	if(depth_fsm.current_state == CC_MODE){
 80006c4:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d105      	bne.n	80006da <Update_Params_Based_On_Mode_Selected+0x172>
		Update_Depth_with_CC_Value(&CC_array[DEPTH_ARR], &params);
 80006ce:	4a12      	ldr	r2, [pc, #72]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006d0:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <Update_Params_Based_On_Mode_Selected+0x1d4>)
 80006d2:	0011      	movs	r1, r2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 fd57 	bl	8001188 <Update_Depth_with_CC_Value>
	}
	if(symmetry_fsm.current_state == CC_MODE){
 80006da:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <Update_Params_Based_On_Mode_Selected+0x1bc>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d105      	bne.n	80006f0 <Update_Params_Based_On_Mode_Selected+0x188>
		Update_Symmetry_with_CC_Value(&CC_array[SYMMETRY_ARR], &params);
 80006e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006e6:	4b16      	ldr	r3, [pc, #88]	@ (8000740 <Update_Params_Based_On_Mode_Selected+0x1d8>)
 80006e8:	0011      	movs	r1, r2
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 fd5f 	bl	80011ae <Update_Symmetry_with_CC_Value>
	}
	if(phase_fsm.current_state == CC_MODE){
 80006f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d105      	bne.n	8000706 <Update_Params_Based_On_Mode_Selected+0x19e>
		Update_Phase_with_CC_Value(&CC_array[PHASE_ARR], &params);
 80006fa:	4a07      	ldr	r2, [pc, #28]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <Update_Params_Based_On_Mode_Selected+0x1dc>)
 80006fe:	0011      	movs	r1, r2
 8000700:	0018      	movs	r0, r3
 8000702:	f000 fd6d 	bl	80011e0 <Update_Phase_with_CC_Value>
	}

	return 1;
 8000706:	2301      	movs	r3, #1
}
 8000708:	0018      	movs	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	20000438 	.word	0x20000438
 8000714:	20000d3c 	.word	0x20000d3c
 8000718:	20000d18 	.word	0x20000d18
 800071c:	20000430 	.word	0x20000430
 8000720:	20000434 	.word	0x20000434
 8000724:	2000043c 	.word	0x2000043c
 8000728:	20000440 	.word	0x20000440
 800072c:	20000554 	.word	0x20000554
 8000730:	2000051c 	.word	0x2000051c
 8000734:	2000057c 	.word	0x2000057c
 8000738:	2000057d 	.word	0x2000057d
 800073c:	2000057e 	.word	0x2000057e
 8000740:	2000057f 	.word	0x2000057f
 8000744:	20000580 	.word	0x20000580

08000748 <Convert_All_Preset_Values>:


uint8_t Convert_All_Preset_Values(volatile struct Preset* preset_ptr, volatile struct Preset_Converted* preset_converted_ptr){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]

	preset_converted_ptr->waveshape = preset_ptr->waveshape; //7-bit copy
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	701a      	strb	r2, [r3, #0]
	preset_converted_ptr->speed = (preset_ptr->speed) << 3; //convert to 10-bit
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	785b      	ldrb	r3, [r3, #1]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	00db      	lsls	r3, r3, #3
 8000764:	b29a      	uxth	r2, r3
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	805a      	strh	r2, [r3, #2]
	preset_converted_ptr->depth = preset_ptr->depth; //7-bit copy
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	789b      	ldrb	r3, [r3, #2]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	711a      	strb	r2, [r3, #4]
	preset_converted_ptr->symmetry = (preset_ptr->symmetry) << 1; //convert to 8-bit
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	78db      	ldrb	r3, [r3, #3]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	18db      	adds	r3, r3, r3
 800077c:	b29a      	uxth	r2, r3
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	80da      	strh	r2, [r3, #6]
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	b29a      	uxth	r2, r3
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	811a      	strh	r2, [r3, #8]

	return 1;
 8000790:	2301      	movs	r3, #1
}
 8000792:	0018      	movs	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	b002      	add	sp, #8
 8000798:	bd80      	pop	{r7, pc}

0800079a <Convert_All_Params_Values_for_Preset>:

uint8_t Convert_All_Params_Values_for_Preset(volatile struct Params *params_ptr, volatile struct Preset* preset_ptr){
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
 80007a2:	6039      	str	r1, [r7, #0]

	preset_ptr->waveshape = params_ptr->waveshape; //7-bit copy
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	799b      	ldrb	r3, [r3, #6]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	701a      	strb	r2, [r3, #0]
	preset_ptr->speed = params_ptr->speed >> 3; //convert from 10-bit to 7-bit
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	891b      	ldrh	r3, [r3, #8]
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	08db      	lsrs	r3, r3, #3
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	705a      	strb	r2, [r3, #1]
	preset_ptr->depth = params_ptr->depth; //7-bit copy
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	7a9b      	ldrb	r3, [r3, #10]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	709a      	strb	r2, [r3, #2]
	preset_ptr->symmetry = params_ptr->symmetry >> 1; //convert from 8-bit to 7-bit
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	899b      	ldrh	r3, [r3, #12]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	085b      	lsrs	r3, r3, #1
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	70da      	strb	r2, [r3, #3]
	preset_ptr->phase = params_ptr->duty_delay_line_read_pointer_offset >> 2; //convert from 9-bit to 7-bit
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80007dc:	b29b      	uxth	r3, r3
 80007de:	089b      	lsrs	r3, r3, #2
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	711a      	strb	r2, [r3, #4]

	return 1;
 80007e8:	2301      	movs	r3, #1
}
 80007ea:	0018      	movs	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b002      	add	sp, #8
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <Update_Waveshape_with_Converted_Preset_Value>:
	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;

	return 1;
}

uint8_t Update_Waveshape_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b084      	sub	sp, #16
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
 80007fa:	6039      	str	r1, [r7, #0]

	uint8_t waveshape = preset_converted_ptr->waveshape;
 80007fc:	210f      	movs	r1, #15
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	7812      	ldrb	r2, [r2, #0]
 8000804:	701a      	strb	r2, [r3, #0]

	if(waveshape <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000806:	187b      	adds	r3, r7, r1
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b2a      	cmp	r3, #42	@ 0x2a
 800080c:	d803      	bhi.n	8000816 <Update_Waveshape_with_Converted_Preset_Value+0x24>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	2200      	movs	r2, #0
 8000812:	719a      	strb	r2, [r3, #6]
 8000814:	e011      	b.n	800083a <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SINE_MODE_ADC_THRESHOLD){
 8000816:	230f      	movs	r3, #15
 8000818:	18fb      	adds	r3, r7, r3
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b55      	cmp	r3, #85	@ 0x55
 800081e:	d803      	bhi.n	8000828 <Update_Waveshape_with_Converted_Preset_Value+0x36>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	2201      	movs	r2, #1
 8000824:	719a      	strb	r2, [r3, #6]
 8000826:	e008      	b.n	800083a <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SQUARE_MODE_ADC_THRESHOLD){
 8000828:	230f      	movs	r3, #15
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b25b      	sxtb	r3, r3
 8000830:	2b00      	cmp	r3, #0
 8000832:	db02      	blt.n	800083a <Update_Waveshape_with_Converted_Preset_Value+0x48>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	2202      	movs	r2, #2
 8000838:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 800083a:	2301      	movs	r3, #1
}
 800083c:	0018      	movs	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	b004      	add	sp, #16
 8000842:	bd80      	pop	{r7, pc}

08000844 <Update_Speed_with_Converted_Preset_Value>:

uint8_t Update_Speed_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]

	params_ptr->speed = preset_converted_ptr->speed;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	885b      	ldrh	r3, [r3, #2]
 8000852:	b29a      	uxth	r2, r3
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	811a      	strh	r2, [r3, #8]

	return 1;
 8000858:	2301      	movs	r3, #1
}
 800085a:	0018      	movs	r0, r3
 800085c:	46bd      	mov	sp, r7
 800085e:	b002      	add	sp, #8
 8000860:	bd80      	pop	{r7, pc}

08000862 <Update_Depth_with_Converted_Preset_Value>:

uint8_t Update_Depth_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
 800086a:	6039      	str	r1, [r7, #0]

	params_ptr->depth = preset_converted_ptr->depth;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	791b      	ldrb	r3, [r3, #4]
 8000870:	b2da      	uxtb	r2, r3
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	729a      	strb	r2, [r3, #10]

	return 1;
 8000876:	2301      	movs	r3, #1
}
 8000878:	0018      	movs	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	b002      	add	sp, #8
 800087e:	bd80      	pop	{r7, pc}

08000880 <Update_Symmetry_with_Converted_Preset_Value>:

uint8_t Update_Symmetry_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]

	params_ptr->symmetry = preset_converted_ptr->symmetry;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	88db      	ldrh	r3, [r3, #6]
 800088e:	b29a      	uxth	r2, r3
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	819a      	strh	r2, [r3, #12]

	return 1;
 8000894:	2301      	movs	r3, #1
}
 8000896:	0018      	movs	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	b002      	add	sp, #8
 800089c:	bd80      	pop	{r7, pc}

0800089e <Update_Phase_with_Converted_Preset_Value>:

uint8_t Update_Phase_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
 80008a6:	6039      	str	r1, [r7, #0]

	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	891b      	ldrh	r3, [r3, #8]
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b002      	add	sp, #8
 80008ba:	bd80      	pop	{r7, pc}

080008bc <Pack_Preset_Into_Doubleword>:
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit

	return 1;
}

uint8_t Pack_Preset_Into_Doubleword(volatile struct Preset* preset_ptr, uint64_t *Doubleword_ptr){
 80008bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008be:	b089      	sub	sp, #36	@ 0x24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]

	uint64_t packed = 0;
 80008c6:	2000      	movs	r0, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	61b8      	str	r0, [r7, #24]
 80008cc:	61f9      	str	r1, [r7, #28]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){
 80008ce:	210f      	movs	r1, #15
 80008d0:	2008      	movs	r0, #8
 80008d2:	1809      	adds	r1, r1, r0
 80008d4:	19c9      	adds	r1, r1, r7
 80008d6:	2000      	movs	r0, #0
 80008d8:	7008      	strb	r0, [r1, #0]
 80008da:	e037      	b.n	800094c <Pack_Preset_Into_Doubleword+0x90>

		packed |= ((uint64_t)*(((uint8_t *)preset_ptr)+i) << (i << 3)); //<< (i*8)
 80008dc:	260f      	movs	r6, #15
 80008de:	2108      	movs	r1, #8
 80008e0:	1870      	adds	r0, r6, r1
 80008e2:	19c1      	adds	r1, r0, r7
 80008e4:	7809      	ldrb	r1, [r1, #0]
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	1841      	adds	r1, r0, r1
 80008ea:	7809      	ldrb	r1, [r1, #0]
 80008ec:	000c      	movs	r4, r1
 80008ee:	2100      	movs	r1, #0
 80008f0:	000d      	movs	r5, r1
 80008f2:	2108      	movs	r1, #8
 80008f4:	1871      	adds	r1, r6, r1
 80008f6:	19c9      	adds	r1, r1, r7
 80008f8:	7809      	ldrb	r1, [r1, #0]
 80008fa:	00c9      	lsls	r1, r1, #3
 80008fc:	0008      	movs	r0, r1
 80008fe:	3820      	subs	r0, #32
 8000900:	2800      	cmp	r0, #0
 8000902:	db03      	blt.n	800090c <Pack_Preset_Into_Doubleword+0x50>
 8000904:	0026      	movs	r6, r4
 8000906:	4086      	lsls	r6, r0
 8000908:	0033      	movs	r3, r6
 800090a:	e008      	b.n	800091e <Pack_Preset_Into_Doubleword+0x62>
 800090c:	2020      	movs	r0, #32
 800090e:	1a40      	subs	r0, r0, r1
 8000910:	0026      	movs	r6, r4
 8000912:	40c6      	lsrs	r6, r0
 8000914:	0030      	movs	r0, r6
 8000916:	002e      	movs	r6, r5
 8000918:	408e      	lsls	r6, r1
 800091a:	0033      	movs	r3, r6
 800091c:	4303      	orrs	r3, r0
 800091e:	0020      	movs	r0, r4
 8000920:	4088      	lsls	r0, r1
 8000922:	0002      	movs	r2, r0
 8000924:	69b9      	ldr	r1, [r7, #24]
 8000926:	4311      	orrs	r1, r2
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	69f9      	ldr	r1, [r7, #28]
 800092c:	4319      	orrs	r1, r3
 800092e:	6079      	str	r1, [r7, #4]
 8000930:	6838      	ldr	r0, [r7, #0]
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	61b8      	str	r0, [r7, #24]
 8000936:	61f9      	str	r1, [r7, #28]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){
 8000938:	260f      	movs	r6, #15
 800093a:	2108      	movs	r1, #8
 800093c:	1870      	adds	r0, r6, r1
 800093e:	19c1      	adds	r1, r0, r7
 8000940:	7808      	ldrb	r0, [r1, #0]
 8000942:	2108      	movs	r1, #8
 8000944:	1871      	adds	r1, r6, r1
 8000946:	19c9      	adds	r1, r1, r7
 8000948:	3001      	adds	r0, #1
 800094a:	7008      	strb	r0, [r1, #0]
 800094c:	210f      	movs	r1, #15
 800094e:	2008      	movs	r0, #8
 8000950:	1809      	adds	r1, r1, r0
 8000952:	19c9      	adds	r1, r1, r7
 8000954:	7809      	ldrb	r1, [r1, #0]
 8000956:	2904      	cmp	r1, #4
 8000958:	d9c0      	bls.n	80008dc <Pack_Preset_Into_Doubleword+0x20>
	}

	*Doubleword_ptr = packed;
 800095a:	68b9      	ldr	r1, [r7, #8]
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	600a      	str	r2, [r1, #0]
 8000962:	604b      	str	r3, [r1, #4]

	return 1;
 8000964:	2301      	movs	r3, #1
}
 8000966:	0018      	movs	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	b009      	add	sp, #36	@ 0x24
 800096c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800096e <Read_and_Interpret_Preset_From_Flash>:

uint8_t Read_and_Interpret_Preset_From_Flash(uint32_t address_val, volatile struct Preset* preset_ptr){
 800096e:	b580      	push	{r7, lr}
 8000970:	b086      	sub	sp, #24
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
 8000976:	6039      	str	r1, [r7, #0]

	uint8_t *flash = (uint8_t *)address_val;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	613b      	str	r3, [r7, #16]
	uint8_t *preset = (uint8_t *)preset_ptr;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 8000980:	2317      	movs	r3, #23
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
 8000988:	e020      	b.n	80009cc <Read_and_Interpret_Preset_From_Flash+0x5e>

		if(*(flash + i) > 0x7F){ //127
 800098a:	2117      	movs	r1, #23
 800098c:	187b      	adds	r3, r7, r1
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	693a      	ldr	r2, [r7, #16]
 8000992:	18d3      	adds	r3, r2, r3
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b25b      	sxtb	r3, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	da06      	bge.n	80009aa <Read_and_Interpret_Preset_From_Flash+0x3c>
			*(preset + i) = 0x7F;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	18d3      	adds	r3, r2, r3
 80009a4:	227f      	movs	r2, #127	@ 0x7f
 80009a6:	701a      	strb	r2, [r3, #0]
 80009a8:	e00a      	b.n	80009c0 <Read_and_Interpret_Preset_From_Flash+0x52>
		}
		else{
			*(preset + i) = *(flash + i);
 80009aa:	2117      	movs	r1, #23
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	18d2      	adds	r2, r2, r3
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	68f9      	ldr	r1, [r7, #12]
 80009ba:	18cb      	adds	r3, r1, r3
 80009bc:	7812      	ldrb	r2, [r2, #0]
 80009be:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 80009c0:	2117      	movs	r1, #23
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	781a      	ldrb	r2, [r3, #0]
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	3201      	adds	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	2317      	movs	r3, #23
 80009ce:	18fb      	adds	r3, r7, r3
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	d9d9      	bls.n	800098a <Read_and_Interpret_Preset_From_Flash+0x1c>
		}
	}

	return 1;
 80009d6:	2301      	movs	r3, #1
}
 80009d8:	0018      	movs	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	b006      	add	sp, #24
 80009de:	bd80      	pop	{r7, pc}

080009e0 <Pack_Misc_Into_Doubleword>:

uint8_t Pack_Misc_Into_Doubleword(volatile enum Validate *user_presets_used_array_ptr, volatile uint32_t *statuses_ptr, volatile enum MIDI_Channel *MIDI_basic_channel_ptr, uint64_t *Doubleword_ptr, uint8_t num_presets){
 80009e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009e2:	b09f      	sub	sp, #124	@ 0x7c
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6678      	str	r0, [r7, #100]	@ 0x64
 80009e8:	6639      	str	r1, [r7, #96]	@ 0x60
 80009ea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80009ec:	65bb      	str	r3, [r7, #88]	@ 0x58

	//This function will break if presets are bigger than 5

	uint64_t packed = 0;
 80009ee:	2200      	movs	r2, #0
 80009f0:	2300      	movs	r3, #0
 80009f2:	673a      	str	r2, [r7, #112]	@ 0x70
 80009f4:	677b      	str	r3, [r7, #116]	@ 0x74

	//USER PRESETS USED ARRAY
	for(uint8_t i = 0; i < num_presets; i++){
 80009f6:	2317      	movs	r3, #23
 80009f8:	2258      	movs	r2, #88	@ 0x58
 80009fa:	189b      	adds	r3, r3, r2
 80009fc:	19da      	adds	r2, r3, r7
 80009fe:	2300      	movs	r3, #0
 8000a00:	7013      	strb	r3, [r2, #0]
 8000a02:	e039      	b.n	8000a78 <Pack_Misc_Into_Doubleword+0x98>

		packed |= ((uint64_t)user_presets_used_array_ptr[i] << (i << 3)); //<< (i*8)
 8000a04:	2117      	movs	r1, #23
 8000a06:	2358      	movs	r3, #88	@ 0x58
 8000a08:	18cb      	adds	r3, r1, r3
 8000a0a:	19db      	adds	r3, r3, r7
 8000a0c:	781a      	ldrb	r2, [r3, #0]
 8000a0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000a10:	189b      	adds	r3, r3, r2
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a18:	2300      	movs	r3, #0
 8000a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a1c:	2358      	movs	r3, #88	@ 0x58
 8000a1e:	18cb      	adds	r3, r1, r3
 8000a20:	19db      	adds	r3, r3, r7
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	00da      	lsls	r2, r3, #3
 8000a26:	0013      	movs	r3, r2
 8000a28:	3b20      	subs	r3, #32
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	db03      	blt.n	8000a36 <Pack_Misc_Into_Doubleword+0x56>
 8000a2e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000a30:	4099      	lsls	r1, r3
 8000a32:	000d      	movs	r5, r1
 8000a34:	e009      	b.n	8000a4a <Pack_Misc_Into_Doubleword+0x6a>
 8000a36:	2320      	movs	r3, #32
 8000a38:	1a9b      	subs	r3, r3, r2
 8000a3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000a3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000a3e:	0006      	movs	r6, r0
 8000a40:	40de      	lsrs	r6, r3
 8000a42:	0033      	movs	r3, r6
 8000a44:	4091      	lsls	r1, r2
 8000a46:	000d      	movs	r5, r1
 8000a48:	431d      	orrs	r5, r3
 8000a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a4c:	4093      	lsls	r3, r2
 8000a4e:	001c      	movs	r4, r3
 8000a50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a52:	4323      	orrs	r3, r4
 8000a54:	61bb      	str	r3, [r7, #24]
 8000a56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a58:	432b      	orrs	r3, r5
 8000a5a:	61fb      	str	r3, [r7, #28]
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	673a      	str	r2, [r7, #112]	@ 0x70
 8000a62:	677b      	str	r3, [r7, #116]	@ 0x74
	for(uint8_t i = 0; i < num_presets; i++){
 8000a64:	2217      	movs	r2, #23
 8000a66:	2358      	movs	r3, #88	@ 0x58
 8000a68:	18d3      	adds	r3, r2, r3
 8000a6a:	19db      	adds	r3, r3, r7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2158      	movs	r1, #88	@ 0x58
 8000a70:	1852      	adds	r2, r2, r1
 8000a72:	19d2      	adds	r2, r2, r7
 8000a74:	3301      	adds	r3, #1
 8000a76:	7013      	strb	r3, [r2, #0]
 8000a78:	2317      	movs	r3, #23
 8000a7a:	2258      	movs	r2, #88	@ 0x58
 8000a7c:	189b      	adds	r3, r3, r2
 8000a7e:	19da      	adds	r2, r3, r7
 8000a80:	2630      	movs	r6, #48	@ 0x30
 8000a82:	2308      	movs	r3, #8
 8000a84:	18f1      	adds	r1, r6, r3
 8000a86:	2358      	movs	r3, #88	@ 0x58
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	18cb      	adds	r3, r1, r3
 8000a8c:	7812      	ldrb	r2, [r2, #0]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d3b7      	bcc.n	8000a04 <Pack_Misc_Into_Doubleword+0x24>
	}

	//START REQUIRED BEFORE MIDI CLK
	enum Validate start_required_before_midi_clk_status_bit = Get_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000a94:	2516      	movs	r5, #22
 8000a96:	2358      	movs	r3, #88	@ 0x58
 8000a98:	18eb      	adds	r3, r5, r3
 8000a9a:	19dc      	adds	r4, r3, r7
 8000a9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000a9e:	2180      	movs	r1, #128	@ 0x80
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f005 ff2f 	bl	8006904 <Get_Status_Bit>
 8000aa6:	0003      	movs	r3, r0
 8000aa8:	7023      	strb	r3, [r4, #0]

	uint8_t shift = num_presets << 3; //<< (4 * 8)
 8000aaa:	2115      	movs	r1, #21
 8000aac:	2358      	movs	r3, #88	@ 0x58
 8000aae:	18cb      	adds	r3, r1, r3
 8000ab0:	19da      	adds	r2, r3, r7
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	18f3      	adds	r3, r6, r3
 8000ab6:	2058      	movs	r0, #88	@ 0x58
 8000ab8:	4684      	mov	ip, r0
 8000aba:	44bc      	add	ip, r7
 8000abc:	4463      	add	r3, ip
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	7013      	strb	r3, [r2, #0]
	packed |= (uint64_t)start_required_before_midi_clk_status_bit << shift;
 8000ac4:	2358      	movs	r3, #88	@ 0x58
 8000ac6:	18eb      	adds	r3, r5, r3
 8000ac8:	19db      	adds	r3, r3, r7
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	633b      	str	r3, [r7, #48]	@ 0x30
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ad4:	2358      	movs	r3, #88	@ 0x58
 8000ad6:	18cb      	adds	r3, r1, r3
 8000ad8:	19db      	adds	r3, r3, r7
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	0013      	movs	r3, r2
 8000ade:	3b20      	subs	r3, #32
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	db03      	blt.n	8000aec <Pack_Misc_Into_Doubleword+0x10c>
 8000ae4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000ae6:	4099      	lsls	r1, r3
 8000ae8:	6579      	str	r1, [r7, #84]	@ 0x54
 8000aea:	e00b      	b.n	8000b04 <Pack_Misc_Into_Doubleword+0x124>
 8000aec:	2320      	movs	r3, #32
 8000aee:	1a9b      	subs	r3, r3, r2
 8000af0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000af2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000af4:	0004      	movs	r4, r0
 8000af6:	40dc      	lsrs	r4, r3
 8000af8:	0023      	movs	r3, r4
 8000afa:	4091      	lsls	r1, r2
 8000afc:	6579      	str	r1, [r7, #84]	@ 0x54
 8000afe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000b00:	4319      	orrs	r1, r3
 8000b02:	6579      	str	r1, [r7, #84]	@ 0x54
 8000b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b06:	4093      	lsls	r3, r2
 8000b08:	653b      	str	r3, [r7, #80]	@ 0x50
 8000b0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000b0c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000b0e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000b10:	0008      	movs	r0, r1
 8000b12:	4318      	orrs	r0, r3
 8000b14:	6138      	str	r0, [r7, #16]
 8000b16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b18:	431a      	orrs	r2, r3
 8000b1a:	617a      	str	r2, [r7, #20]
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	697c      	ldr	r4, [r7, #20]
 8000b20:	673b      	str	r3, [r7, #112]	@ 0x70
 8000b22:	677c      	str	r4, [r7, #116]	@ 0x74

	//OMNI ON/OFF (MIDI CHANNEL VOICE MODE)
	enum Validate MIDI_channel_voice_mode_status_bit = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8000b24:	2514      	movs	r5, #20
 8000b26:	2358      	movs	r3, #88	@ 0x58
 8000b28:	18eb      	adds	r3, r5, r3
 8000b2a:	19dc      	adds	r4, r3, r7
 8000b2c:	2380      	movs	r3, #128	@ 0x80
 8000b2e:	00da      	lsls	r2, r3, #3
 8000b30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000b32:	0011      	movs	r1, r2
 8000b34:	0018      	movs	r0, r3
 8000b36:	f005 fee5 	bl	8006904 <Get_Status_Bit>
 8000b3a:	0003      	movs	r3, r0
 8000b3c:	7023      	strb	r3, [r4, #0]

	packed |= (uint64_t)MIDI_channel_voice_mode_status_bit << (shift + (1 << 3)); //(8 * 5)
 8000b3e:	2358      	movs	r3, #88	@ 0x58
 8000b40:	18eb      	adds	r3, r5, r3
 8000b42:	19db      	adds	r3, r3, r7
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b4e:	2315      	movs	r3, #21
 8000b50:	2258      	movs	r2, #88	@ 0x58
 8000b52:	189b      	adds	r3, r3, r2
 8000b54:	19db      	adds	r3, r3, r7
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	3308      	adds	r3, #8
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	0013      	movs	r3, r2
 8000b5e:	3b20      	subs	r3, #32
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	db03      	blt.n	8000b6c <Pack_Misc_Into_Doubleword+0x18c>
 8000b64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000b66:	4099      	lsls	r1, r3
 8000b68:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8000b6a:	e00b      	b.n	8000b84 <Pack_Misc_Into_Doubleword+0x1a4>
 8000b6c:	2320      	movs	r3, #32
 8000b6e:	1a9b      	subs	r3, r3, r2
 8000b70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000b72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000b74:	0004      	movs	r4, r0
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	0023      	movs	r3, r4
 8000b7a:	4091      	lsls	r1, r2
 8000b7c:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8000b7e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000b80:	4319      	orrs	r1, r3
 8000b82:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8000b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b86:	4093      	lsls	r3, r2
 8000b88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000b8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000b8c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000b8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000b90:	0008      	movs	r0, r1
 8000b92:	4318      	orrs	r0, r3
 8000b94:	60b8      	str	r0, [r7, #8]
 8000b96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b98:	431a      	orrs	r2, r3
 8000b9a:	60fa      	str	r2, [r7, #12]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	68fc      	ldr	r4, [r7, #12]
 8000ba0:	673b      	str	r3, [r7, #112]	@ 0x70
 8000ba2:	677c      	str	r4, [r7, #116]	@ 0x74

	//MIDI BASIC CHANNEL
	packed |= (uint64_t) *MIDI_basic_channel_ptr << (shift + (2 << 3));
 8000ba4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	623b      	str	r3, [r7, #32]
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bb0:	2315      	movs	r3, #21
 8000bb2:	2258      	movs	r2, #88	@ 0x58
 8000bb4:	189b      	adds	r3, r3, r2
 8000bb6:	19db      	adds	r3, r3, r7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	3310      	adds	r3, #16
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	3a20      	subs	r2, #32
 8000bc0:	2a00      	cmp	r2, #0
 8000bc2:	db03      	blt.n	8000bcc <Pack_Misc_Into_Doubleword+0x1ec>
 8000bc4:	6a39      	ldr	r1, [r7, #32]
 8000bc6:	4091      	lsls	r1, r2
 8000bc8:	6479      	str	r1, [r7, #68]	@ 0x44
 8000bca:	e00b      	b.n	8000be4 <Pack_Misc_Into_Doubleword+0x204>
 8000bcc:	2220      	movs	r2, #32
 8000bce:	1ad2      	subs	r2, r2, r3
 8000bd0:	6a38      	ldr	r0, [r7, #32]
 8000bd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000bd4:	0004      	movs	r4, r0
 8000bd6:	40d4      	lsrs	r4, r2
 8000bd8:	0022      	movs	r2, r4
 8000bda:	4099      	lsls	r1, r3
 8000bdc:	6479      	str	r1, [r7, #68]	@ 0x44
 8000bde:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000be0:	4311      	orrs	r1, r2
 8000be2:	6479      	str	r1, [r7, #68]	@ 0x44
 8000be4:	6a3a      	ldr	r2, [r7, #32]
 8000be6:	409a      	lsls	r2, r3
 8000be8:	643a      	str	r2, [r7, #64]	@ 0x40
 8000bea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000bec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000bee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000bf0:	0008      	movs	r0, r1
 8000bf2:	4318      	orrs	r0, r3
 8000bf4:	6038      	str	r0, [r7, #0]
 8000bf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000bf8:	431a      	orrs	r2, r3
 8000bfa:	607a      	str	r2, [r7, #4]
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	687c      	ldr	r4, [r7, #4]
 8000c00:	673b      	str	r3, [r7, #112]	@ 0x70
 8000c02:	677c      	str	r4, [r7, #116]	@ 0x74

	*Doubleword_ptr = packed;
 8000c04:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8000c06:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000c08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c0a:	600a      	str	r2, [r1, #0]
 8000c0c:	604b      	str	r3, [r1, #4]

	return 1;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	0018      	movs	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b01f      	add	sp, #124	@ 0x7c
 8000c16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c18 <Store_Single_Preset_In_Flash>:

uint8_t Store_Single_Preset_In_Flash(volatile struct Preset *preset, uint8_t preset_num){
 8000c18:	b5b0      	push	{r4, r5, r7, lr}
 8000c1a:	b08e      	sub	sp, #56	@ 0x38
 8000c1c:	af02      	add	r7, sp, #8
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	000a      	movs	r2, r1
 8000c22:	1cfb      	adds	r3, r7, #3
 8000c24:	701a      	strb	r2, [r3, #0]

	//whole page has to be erased, so first store state of all presets (including one to be overwritten for simplicity)
	//as well as miscellaneous data

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &storage_user_preset_0);
 8000c26:	4b8f      	ldr	r3, [pc, #572]	@ (8000e64 <Store_Single_Preset_In_Flash+0x24c>)
 8000c28:	4a8f      	ldr	r2, [pc, #572]	@ (8000e68 <Store_Single_Preset_In_Flash+0x250>)
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	0010      	movs	r0, r2
 8000c2e:	f7ff fe9e 	bl	800096e <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &storage_user_preset_1);
 8000c32:	4b8e      	ldr	r3, [pc, #568]	@ (8000e6c <Store_Single_Preset_In_Flash+0x254>)
 8000c34:	4a8e      	ldr	r2, [pc, #568]	@ (8000e70 <Store_Single_Preset_In_Flash+0x258>)
 8000c36:	0019      	movs	r1, r3
 8000c38:	0010      	movs	r0, r2
 8000c3a:	f7ff fe98 	bl	800096e <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &storage_user_preset_2);
 8000c3e:	4b8d      	ldr	r3, [pc, #564]	@ (8000e74 <Store_Single_Preset_In_Flash+0x25c>)
 8000c40:	4a8d      	ldr	r2, [pc, #564]	@ (8000e78 <Store_Single_Preset_In_Flash+0x260>)
 8000c42:	0019      	movs	r1, r3
 8000c44:	0010      	movs	r0, r2
 8000c46:	f7ff fe92 	bl	800096e <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &storage_user_preset_3);
 8000c4a:	4b8c      	ldr	r3, [pc, #560]	@ (8000e7c <Store_Single_Preset_In_Flash+0x264>)
 8000c4c:	4a8c      	ldr	r2, [pc, #560]	@ (8000e80 <Store_Single_Preset_In_Flash+0x268>)
 8000c4e:	0019      	movs	r1, r3
 8000c50:	0010      	movs	r0, r2
 8000c52:	f7ff fe8c 	bl	800096e <Read_and_Interpret_Preset_From_Flash>

	uint64_t preset_packed = 0;
 8000c56:	2200      	movs	r2, #0
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint64_t misc_packed = 0;
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	623a      	str	r2, [r7, #32]
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t errors = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef erase_config = {.TypeErase = FLASH_CR_PER, .Banks = FLASH_CR_MER1, .Page = 31, .NbPages = 1};
 8000c6a:	250c      	movs	r5, #12
 8000c6c:	197b      	adds	r3, r7, r5
 8000c6e:	4a85      	ldr	r2, [pc, #532]	@ (8000e84 <Store_Single_Preset_In_Flash+0x26c>)
 8000c70:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c72:	c313      	stmia	r3!, {r0, r1, r4}
 8000c74:	6812      	ldr	r2, [r2, #0]
 8000c76:	601a      	str	r2, [r3, #0]
	HAL_FLASH_Unlock();
 8000c78:	f007 fdd4 	bl	8008824 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&erase_config, &errors); //all 0xF is no errors
 8000c7c:	231c      	movs	r3, #28
 8000c7e:	18fa      	adds	r2, r7, r3
 8000c80:	197b      	adds	r3, r7, r5
 8000c82:	0011      	movs	r1, r2
 8000c84:	0018      	movs	r0, r3
 8000c86:	f007 fe81 	bl	800898c <HAL_FLASHEx_Erase>

	if(preset_num == 0){
 8000c8a:	1cfb      	adds	r3, r7, #3
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d131      	bne.n	8000cf6 <Store_Single_Preset_In_Flash+0xde>

		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 8000c92:	2428      	movs	r4, #40	@ 0x28
 8000c94:	193a      	adds	r2, r7, r4
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	0011      	movs	r1, r2
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f7ff fe0e 	bl	80008bc <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 8000ca0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ca4:	4970      	ldr	r1, [pc, #448]	@ (8000e68 <Store_Single_Preset_In_Flash+0x250>)
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f007 fd6e 	bl	8008788 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_1, &preset_packed);
 8000cac:	193a      	adds	r2, r7, r4
 8000cae:	4b6f      	ldr	r3, [pc, #444]	@ (8000e6c <Store_Single_Preset_In_Flash+0x254>)
 8000cb0:	0011      	movs	r1, r2
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f7ff fe02 	bl	80008bc <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 8000cb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cbc:	496c      	ldr	r1, [pc, #432]	@ (8000e70 <Store_Single_Preset_In_Flash+0x258>)
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f007 fd62 	bl	8008788 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_2, &preset_packed);
 8000cc4:	193a      	adds	r2, r7, r4
 8000cc6:	4b6b      	ldr	r3, [pc, #428]	@ (8000e74 <Store_Single_Preset_In_Flash+0x25c>)
 8000cc8:	0011      	movs	r1, r2
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f7ff fdf6 	bl	80008bc <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 8000cd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cd4:	4968      	ldr	r1, [pc, #416]	@ (8000e78 <Store_Single_Preset_In_Flash+0x260>)
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f007 fd56 	bl	8008788 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_3, &preset_packed);
 8000cdc:	193a      	adds	r2, r7, r4
 8000cde:	4b67      	ldr	r3, [pc, #412]	@ (8000e7c <Store_Single_Preset_In_Flash+0x264>)
 8000ce0:	0011      	movs	r1, r2
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f7ff fdea 	bl	80008bc <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
 8000ce8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cec:	4964      	ldr	r1, [pc, #400]	@ (8000e80 <Store_Single_Preset_In_Flash+0x268>)
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f007 fd4a 	bl	8008788 <HAL_FLASH_Program>
 8000cf4:	e0a0      	b.n	8000e38 <Store_Single_Preset_In_Flash+0x220>
	}
	else if(preset_num == 1){
 8000cf6:	1cfb      	adds	r3, r7, #3
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d131      	bne.n	8000d62 <Store_Single_Preset_In_Flash+0x14a>

		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 8000cfe:	2428      	movs	r4, #40	@ 0x28
 8000d00:	193a      	adds	r2, r7, r4
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	0011      	movs	r1, r2
 8000d06:	0018      	movs	r0, r3
 8000d08:	f7ff fdd8 	bl	80008bc <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d10:	4957      	ldr	r1, [pc, #348]	@ (8000e70 <Store_Single_Preset_In_Flash+0x258>)
 8000d12:	2001      	movs	r0, #1
 8000d14:	f007 fd38 	bl	8008788 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_0, &preset_packed);
 8000d18:	193a      	adds	r2, r7, r4
 8000d1a:	4b52      	ldr	r3, [pc, #328]	@ (8000e64 <Store_Single_Preset_In_Flash+0x24c>)
 8000d1c:	0011      	movs	r1, r2
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f7ff fdcc 	bl	80008bc <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d28:	494f      	ldr	r1, [pc, #316]	@ (8000e68 <Store_Single_Preset_In_Flash+0x250>)
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f007 fd2c 	bl	8008788 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_2, &preset_packed);
 8000d30:	193a      	adds	r2, r7, r4
 8000d32:	4b50      	ldr	r3, [pc, #320]	@ (8000e74 <Store_Single_Preset_In_Flash+0x25c>)
 8000d34:	0011      	movs	r1, r2
 8000d36:	0018      	movs	r0, r3
 8000d38:	f7ff fdc0 	bl	80008bc <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d40:	494d      	ldr	r1, [pc, #308]	@ (8000e78 <Store_Single_Preset_In_Flash+0x260>)
 8000d42:	2001      	movs	r0, #1
 8000d44:	f007 fd20 	bl	8008788 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_3, &preset_packed);
 8000d48:	193a      	adds	r2, r7, r4
 8000d4a:	4b4c      	ldr	r3, [pc, #304]	@ (8000e7c <Store_Single_Preset_In_Flash+0x264>)
 8000d4c:	0011      	movs	r1, r2
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff fdb4 	bl	80008bc <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d58:	4949      	ldr	r1, [pc, #292]	@ (8000e80 <Store_Single_Preset_In_Flash+0x268>)
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f007 fd14 	bl	8008788 <HAL_FLASH_Program>
 8000d60:	e06a      	b.n	8000e38 <Store_Single_Preset_In_Flash+0x220>
	}
	else if(preset_num == 2){
 8000d62:	1cfb      	adds	r3, r7, #3
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d131      	bne.n	8000dce <Store_Single_Preset_In_Flash+0x1b6>

		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 8000d6a:	2428      	movs	r4, #40	@ 0x28
 8000d6c:	193a      	adds	r2, r7, r4
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	0011      	movs	r1, r2
 8000d72:	0018      	movs	r0, r3
 8000d74:	f7ff fda2 	bl	80008bc <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d7c:	493e      	ldr	r1, [pc, #248]	@ (8000e78 <Store_Single_Preset_In_Flash+0x260>)
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f007 fd02 	bl	8008788 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_0, &preset_packed);
 8000d84:	193a      	adds	r2, r7, r4
 8000d86:	4b37      	ldr	r3, [pc, #220]	@ (8000e64 <Store_Single_Preset_In_Flash+0x24c>)
 8000d88:	0011      	movs	r1, r2
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f7ff fd96 	bl	80008bc <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d94:	4934      	ldr	r1, [pc, #208]	@ (8000e68 <Store_Single_Preset_In_Flash+0x250>)
 8000d96:	2001      	movs	r0, #1
 8000d98:	f007 fcf6 	bl	8008788 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_1, &preset_packed);
 8000d9c:	193a      	adds	r2, r7, r4
 8000d9e:	4b33      	ldr	r3, [pc, #204]	@ (8000e6c <Store_Single_Preset_In_Flash+0x254>)
 8000da0:	0011      	movs	r1, r2
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff fd8a 	bl	80008bc <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 8000da8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dac:	4930      	ldr	r1, [pc, #192]	@ (8000e70 <Store_Single_Preset_In_Flash+0x258>)
 8000dae:	2001      	movs	r0, #1
 8000db0:	f007 fcea 	bl	8008788 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_3, &preset_packed);
 8000db4:	193a      	adds	r2, r7, r4
 8000db6:	4b31      	ldr	r3, [pc, #196]	@ (8000e7c <Store_Single_Preset_In_Flash+0x264>)
 8000db8:	0011      	movs	r1, r2
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f7ff fd7e 	bl	80008bc <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
 8000dc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dc4:	492e      	ldr	r1, [pc, #184]	@ (8000e80 <Store_Single_Preset_In_Flash+0x268>)
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f007 fcde 	bl	8008788 <HAL_FLASH_Program>
 8000dcc:	e034      	b.n	8000e38 <Store_Single_Preset_In_Flash+0x220>
	}
	else if(preset_num == 3){
 8000dce:	1cfb      	adds	r3, r7, #3
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d130      	bne.n	8000e38 <Store_Single_Preset_In_Flash+0x220>

		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 8000dd6:	2428      	movs	r4, #40	@ 0x28
 8000dd8:	193a      	adds	r2, r7, r4
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	0011      	movs	r1, r2
 8000dde:	0018      	movs	r0, r3
 8000de0:	f7ff fd6c 	bl	80008bc <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
 8000de4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000de8:	4925      	ldr	r1, [pc, #148]	@ (8000e80 <Store_Single_Preset_In_Flash+0x268>)
 8000dea:	2001      	movs	r0, #1
 8000dec:	f007 fccc 	bl	8008788 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_0, &preset_packed);
 8000df0:	193a      	adds	r2, r7, r4
 8000df2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <Store_Single_Preset_In_Flash+0x24c>)
 8000df4:	0011      	movs	r1, r2
 8000df6:	0018      	movs	r0, r3
 8000df8:	f7ff fd60 	bl	80008bc <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 8000dfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e00:	4919      	ldr	r1, [pc, #100]	@ (8000e68 <Store_Single_Preset_In_Flash+0x250>)
 8000e02:	2001      	movs	r0, #1
 8000e04:	f007 fcc0 	bl	8008788 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_1, &preset_packed);
 8000e08:	193a      	adds	r2, r7, r4
 8000e0a:	4b18      	ldr	r3, [pc, #96]	@ (8000e6c <Store_Single_Preset_In_Flash+0x254>)
 8000e0c:	0011      	movs	r1, r2
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f7ff fd54 	bl	80008bc <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 8000e14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e18:	4915      	ldr	r1, [pc, #84]	@ (8000e70 <Store_Single_Preset_In_Flash+0x258>)
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f007 fcb4 	bl	8008788 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_2, &preset_packed);
 8000e20:	193a      	adds	r2, r7, r4
 8000e22:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <Store_Single_Preset_In_Flash+0x25c>)
 8000e24:	0011      	movs	r1, r2
 8000e26:	0018      	movs	r0, r3
 8000e28:	f7ff fd48 	bl	80008bc <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 8000e2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e30:	4911      	ldr	r1, [pc, #68]	@ (8000e78 <Store_Single_Preset_In_Flash+0x260>)
 8000e32:	2001      	movs	r0, #1
 8000e34:	f007 fca8 	bl	8008788 <HAL_FLASH_Program>
	}

	Pack_Misc_Into_Doubleword(user_presets_used_array, &statuses, &MIDI_basic_channel, &misc_packed, NUM_PRESETS);
 8000e38:	2320      	movs	r3, #32
 8000e3a:	18fb      	adds	r3, r7, r3
 8000e3c:	4a12      	ldr	r2, [pc, #72]	@ (8000e88 <Store_Single_Preset_In_Flash+0x270>)
 8000e3e:	4913      	ldr	r1, [pc, #76]	@ (8000e8c <Store_Single_Preset_In_Flash+0x274>)
 8000e40:	4813      	ldr	r0, [pc, #76]	@ (8000e90 <Store_Single_Preset_In_Flash+0x278>)
 8000e42:	2404      	movs	r4, #4
 8000e44:	9400      	str	r4, [sp, #0]
 8000e46:	f7ff fdcb 	bl	80009e0 <Pack_Misc_Into_Doubleword>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, MISC_FLASH_MEMORY_ADDRESS, misc_packed);
 8000e4a:	6a3a      	ldr	r2, [r7, #32]
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e4e:	4911      	ldr	r1, [pc, #68]	@ (8000e94 <Store_Single_Preset_In_Flash+0x27c>)
 8000e50:	2001      	movs	r0, #1
 8000e52:	f007 fc99 	bl	8008788 <HAL_FLASH_Program>

	HAL_FLASH_Lock();
 8000e56:	f007 fd09 	bl	800886c <HAL_FLASH_Lock>

	return 1;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b00c      	add	sp, #48	@ 0x30
 8000e62:	bdb0      	pop	{r4, r5, r7, pc}
 8000e64:	20000558 	.word	0x20000558
 8000e68:	0800f800 	.word	0x0800f800
 8000e6c:	20000560 	.word	0x20000560
 8000e70:	0800f808 	.word	0x0800f808
 8000e74:	20000568 	.word	0x20000568
 8000e78:	0800f810 	.word	0x0800f810
 8000e7c:	20000570 	.word	0x20000570
 8000e80:	0800f818 	.word	0x0800f818
 8000e84:	0800e158 	.word	0x0800e158
 8000e88:	20000582 	.word	0x20000582
 8000e8c:	20000cfc 	.word	0x20000cfc
 8000e90:	20000578 	.word	0x20000578
 8000e94:	0800f820 	.word	0x0800f820

08000e98 <Read_and_Interpret_Misc_From_Flash>:

uint8_t Read_and_Interpret_Misc_From_Flash(uint32_t address_val,
										   volatile enum Validate *user_presets_used_array_ptr,
										   volatile uint32_t *statuses_ptr,
										   volatile enum MIDI_Channel *MIDI_basic_channel_ptr,
										   uint8_t num_presets){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	603b      	str	r3, [r7, #0]

	uint8_t *address = (uint8_t *)address_val;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	61bb      	str	r3, [r7, #24]

	volatile uint8_t interpretted_value = 0;
 8000eaa:	2316      	movs	r3, #22
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]

	//PRESETS
	for(uint8_t i = 0; i < num_presets; i++){
 8000eb2:	231f      	movs	r3, #31
 8000eb4:	18fb      	adds	r3, r7, r3
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
 8000eba:	e02c      	b.n	8000f16 <Read_and_Interpret_Misc_From_Flash+0x7e>

		interpretted_value = *(address + i);
 8000ebc:	211f      	movs	r1, #31
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	18d3      	adds	r3, r2, r3
 8000ec6:	781a      	ldrb	r2, [r3, #0]
 8000ec8:	2016      	movs	r0, #22
 8000eca:	183b      	adds	r3, r7, r0
 8000ecc:	701a      	strb	r2, [r3, #0]

		if(interpretted_value == (enum Validate)YES){
 8000ece:	183b      	adds	r3, r7, r0
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d106      	bne.n	8000ee6 <Read_and_Interpret_Misc_From_Flash+0x4e>

			*(user_presets_used_array_ptr + i) = (enum Validate)YES;
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	68ba      	ldr	r2, [r7, #8]
 8000ede:	18d3      	adds	r3, r2, r3
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	e011      	b.n	8000f0a <Read_and_Interpret_Misc_From_Flash+0x72>
		}
		else if((interpretted_value == 0xFF) || (interpretted_value == (enum Validate)NO)){
 8000ee6:	2216      	movs	r2, #22
 8000ee8:	18bb      	adds	r3, r7, r2
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2bff      	cmp	r3, #255	@ 0xff
 8000ef0:	d004      	beq.n	8000efc <Read_and_Interpret_Misc_From_Flash+0x64>
 8000ef2:	18bb      	adds	r3, r7, r2
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d106      	bne.n	8000f0a <Read_and_Interpret_Misc_From_Flash+0x72>

			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
 8000efc:	231f      	movs	r3, #31
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	18d3      	adds	r3, r2, r3
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < num_presets; i++){
 8000f0a:	211f      	movs	r1, #31
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	781a      	ldrb	r2, [r3, #0]
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	3201      	adds	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
 8000f16:	231f      	movs	r3, #31
 8000f18:	18fa      	adds	r2, r7, r3
 8000f1a:	2128      	movs	r1, #40	@ 0x28
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	7812      	ldrb	r2, [r2, #0]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d3ca      	bcc.n	8000ebc <Read_and_Interpret_Misc_From_Flash+0x24>
		}
	}

	//START REQUIRED BEFORE SYNC MODE
	interpretted_value = *(address + num_presets);
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	18d3      	adds	r3, r2, r3
 8000f2e:	781a      	ldrb	r2, [r3, #0]
 8000f30:	2116      	movs	r1, #22
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)NO){
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d105      	bne.n	8000f4c <Read_and_Interpret_Misc_From_Flash+0xb4>
		Clear_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2180      	movs	r1, #128	@ 0x80
 8000f44:	0018      	movs	r0, r3
 8000f46:	f005 fd03 	bl	8006950 <Clear_Status_Bit>
 8000f4a:	e00f      	b.n	8000f6c <Read_and_Interpret_Misc_From_Flash+0xd4>
	}
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 8000f4c:	2216      	movs	r2, #22
 8000f4e:	18bb      	adds	r3, r7, r2
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d004      	beq.n	8000f62 <Read_and_Interpret_Misc_From_Flash+0xca>
 8000f58:	18bb      	adds	r3, r7, r2
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2bff      	cmp	r3, #255	@ 0xff
 8000f60:	d104      	bne.n	8000f6c <Read_and_Interpret_Misc_From_Flash+0xd4>
		Set_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2180      	movs	r1, #128	@ 0x80
 8000f66:	0018      	movs	r0, r3
 8000f68:	f005 fce0 	bl	800692c <Set_Status_Bit>
	}

	//OMNI ON/OFF
	interpretted_value = *(address + num_presets + 1);
 8000f6c:	2328      	movs	r3, #40	@ 0x28
 8000f6e:	18fb      	adds	r3, r7, r3
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	3301      	adds	r3, #1
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	18d3      	adds	r3, r2, r3
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	2116      	movs	r1, #22
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)YES){
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d107      	bne.n	8000f9a <Read_and_Interpret_Misc_From_Flash+0x102>
		Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI ON
 8000f8a:	2380      	movs	r3, #128	@ 0x80
 8000f8c:	00da      	lsls	r2, r3, #3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	0011      	movs	r1, r2
 8000f92:	0018      	movs	r0, r3
 8000f94:	f005 fcca 	bl	800692c <Set_Status_Bit>
 8000f98:	e011      	b.n	8000fbe <Read_and_Interpret_Misc_From_Flash+0x126>
	}
	else if((interpretted_value == (enum Validate)NO) || (interpretted_value == 0xFF)){
 8000f9a:	2216      	movs	r2, #22
 8000f9c:	18bb      	adds	r3, r7, r2
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d004      	beq.n	8000fb0 <Read_and_Interpret_Misc_From_Flash+0x118>
 8000fa6:	18bb      	adds	r3, r7, r2
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2bff      	cmp	r3, #255	@ 0xff
 8000fae:	d106      	bne.n	8000fbe <Read_and_Interpret_Misc_From_Flash+0x126>
		Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI OFF
 8000fb0:	2380      	movs	r3, #128	@ 0x80
 8000fb2:	00da      	lsls	r2, r3, #3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	0011      	movs	r1, r2
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f005 fcc9 	bl	8006950 <Clear_Status_Bit>
	}

	//BASIC CHANNEL
	interpretted_value = *(address + num_presets + 2);
 8000fbe:	2328      	movs	r3, #40	@ 0x28
 8000fc0:	18fb      	adds	r3, r7, r3
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	18d3      	adds	r3, r2, r3
 8000fca:	781a      	ldrb	r2, [r3, #0]
 8000fcc:	2116      	movs	r1, #22
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	701a      	strb	r2, [r3, #0]

	if(interpretted_value > (uint8_t)MIDI_CH_SIXTEEN){
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b0f      	cmp	r3, #15
 8000fda:	d908      	bls.n	8000fee <Read_and_Interpret_Misc_From_Flash+0x156>

		uint8_t midi_channel_default = MIDI_BASIC_CHANNEL_DEFAULT;
 8000fdc:	2117      	movs	r1, #23
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)midi_channel_default;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	187a      	adds	r2, r7, r1
 8000fe8:	7812      	ldrb	r2, [r2, #0]
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	e005      	b.n	8000ffa <Read_and_Interpret_Misc_From_Flash+0x162>
	}
	else{

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)interpretted_value;
 8000fee:	2316      	movs	r3, #22
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b008      	add	sp, #32
 8001002:	bd80      	pop	{r7, pc}

08001004 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>:

uint8_t Update_Converted_Preset_Array_with_User_or_Factory_Presets(volatile struct Preset_Converted* presets_converted_array_ptr,
																	volatile enum Validate *user_presets_used_array_ptr,
																	const struct Preset **factory_presets_array_ptr,
																	volatile struct Preset **user_presets_array_ptr,
																	uint8_t size_of_factory_and_user_arrays){
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8001012:	2317      	movs	r3, #23
 8001014:	18fb      	adds	r3, r7, r3
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
 800101a:	e03c      	b.n	8001096 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x92>

		if(*(user_presets_used_array_ptr + i) == (enum Validate)YES){
 800101c:	2117      	movs	r1, #23
 800101e:	187b      	adds	r3, r7, r1
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	18d3      	adds	r3, r2, r3
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b01      	cmp	r3, #1
 800102c:	d112      	bne.n	8001054 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x50>
			Convert_All_Preset_Values(*(user_presets_array_ptr + i), (presets_converted_array_ptr + i));
 800102e:	187b      	adds	r3, r7, r1
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	18d3      	adds	r3, r2, r3
 8001038:	6818      	ldr	r0, [r3, #0]
 800103a:	187b      	adds	r3, r7, r1
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	0013      	movs	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	189b      	adds	r3, r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	001a      	movs	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	189b      	adds	r3, r3, r2
 800104c:	0019      	movs	r1, r3
 800104e:	f7ff fb7b 	bl	8000748 <Convert_All_Preset_Values>
 8001052:	e01a      	b.n	800108a <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
		}
		else if(*(user_presets_used_array_ptr + i) == (enum Validate)NO){
 8001054:	2117      	movs	r1, #23
 8001056:	187b      	adds	r3, r7, r1
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	18d3      	adds	r3, r2, r3
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d111      	bne.n	800108a <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
			Convert_All_Preset_Values((struct Preset *) *(factory_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8001066:	187b      	adds	r3, r7, r1
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	18d3      	adds	r3, r2, r3
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	187b      	adds	r3, r7, r1
 8001074:	781a      	ldrb	r2, [r3, #0]
 8001076:	0013      	movs	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	189b      	adds	r3, r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	001a      	movs	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	189b      	adds	r3, r3, r2
 8001084:	0019      	movs	r1, r3
 8001086:	f7ff fb5f 	bl	8000748 <Convert_All_Preset_Values>
	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 800108a:	2117      	movs	r1, #23
 800108c:	187b      	adds	r3, r7, r1
 800108e:	781a      	ldrb	r2, [r3, #0]
 8001090:	187b      	adds	r3, r7, r1
 8001092:	3201      	adds	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
 8001096:	2317      	movs	r3, #23
 8001098:	18fa      	adds	r2, r7, r3
 800109a:	2320      	movs	r3, #32
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	7812      	ldrb	r2, [r2, #0]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d3ba      	bcc.n	800101c <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x18>
		}
	}

	return 1;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b006      	add	sp, #24
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <Read_and_Interpret_User_Presets_From_Flash>:

uint8_t Read_and_Interpret_User_Presets_From_Flash(void){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &user_preset_0);
 80010b4:	4b0d      	ldr	r3, [pc, #52]	@ (80010ec <Read_and_Interpret_User_Presets_From_Flash+0x3c>)
 80010b6:	4a0e      	ldr	r2, [pc, #56]	@ (80010f0 <Read_and_Interpret_User_Presets_From_Flash+0x40>)
 80010b8:	0019      	movs	r1, r3
 80010ba:	0010      	movs	r0, r2
 80010bc:	f7ff fc57 	bl	800096e <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &user_preset_1);
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <Read_and_Interpret_User_Presets_From_Flash+0x44>)
 80010c2:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <Read_and_Interpret_User_Presets_From_Flash+0x48>)
 80010c4:	0019      	movs	r1, r3
 80010c6:	0010      	movs	r0, r2
 80010c8:	f7ff fc51 	bl	800096e <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &user_preset_2);
 80010cc:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <Read_and_Interpret_User_Presets_From_Flash+0x4c>)
 80010ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001100 <Read_and_Interpret_User_Presets_From_Flash+0x50>)
 80010d0:	0019      	movs	r1, r3
 80010d2:	0010      	movs	r0, r2
 80010d4:	f7ff fc4b 	bl	800096e <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &user_preset_3);
 80010d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <Read_and_Interpret_User_Presets_From_Flash+0x54>)
 80010da:	4a0b      	ldr	r2, [pc, #44]	@ (8001108 <Read_and_Interpret_User_Presets_From_Flash+0x58>)
 80010dc:	0019      	movs	r1, r3
 80010de:	0010      	movs	r0, r2
 80010e0:	f7ff fc45 	bl	800096e <Read_and_Interpret_Preset_From_Flash>

	return 1;
 80010e4:	2301      	movs	r3, #1
}
 80010e6:	0018      	movs	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000000 	.word	0x20000000
 80010f0:	0800f800 	.word	0x0800f800
 80010f4:	20000008 	.word	0x20000008
 80010f8:	0800f808 	.word	0x0800f808
 80010fc:	20000010 	.word	0x20000010
 8001100:	0800f810 	.word	0x0800f810
 8001104:	20000018 	.word	0x20000018
 8001108:	0800f818 	.word	0x0800f818

0800110c <Update_Waveshape_with_CC_Value>:

uint8_t Update_Waveshape_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]

	if(*data <= TRIANGLE_MODE_ADC_THRESHOLD){
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b2a      	cmp	r3, #42	@ 0x2a
 800111e:	d803      	bhi.n	8001128 <Update_Waveshape_with_CC_Value+0x1c>
		params_ptr->waveshape = TRIANGLE_MODE;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	2200      	movs	r2, #0
 8001124:	719a      	strb	r2, [r3, #6]
 8001126:	e011      	b.n	800114c <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SINE_MODE_ADC_THRESHOLD){
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b55      	cmp	r3, #85	@ 0x55
 8001130:	d803      	bhi.n	800113a <Update_Waveshape_with_CC_Value+0x2e>
		params_ptr->waveshape = SINE_MODE;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2201      	movs	r2, #1
 8001136:	719a      	strb	r2, [r3, #6]
 8001138:	e008      	b.n	800114c <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SQUARE_MODE_ADC_THRESHOLD){
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	b25b      	sxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	db02      	blt.n	800114c <Update_Waveshape_with_CC_Value+0x40>
		params_ptr->waveshape = SQUARE_MODE;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2202      	movs	r2, #2
 800114a:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 800114c:	2301      	movs	r3, #1
}
 800114e:	0018      	movs	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	b002      	add	sp, #8
 8001154:	bd80      	pop	{r7, pc}

08001156 <Update_Speed_with_CC_Value>:

uint8_t Update_Speed_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]

	uint16_t speed = (uint16_t)*data;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	210e      	movs	r1, #14
 8001168:	187b      	adds	r3, r7, r1
 800116a:	801a      	strh	r2, [r3, #0]

	speed <<= 3; //convert to 10-bit
 800116c:	187b      	adds	r3, r7, r1
 800116e:	187a      	adds	r2, r7, r1
 8001170:	8812      	ldrh	r2, [r2, #0]
 8001172:	00d2      	lsls	r2, r2, #3
 8001174:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = speed;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	187a      	adds	r2, r7, r1
 800117a:	8812      	ldrh	r2, [r2, #0]
 800117c:	811a      	strh	r2, [r3, #8]

	return 1;
 800117e:	2301      	movs	r3, #1
}
 8001180:	0018      	movs	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	b004      	add	sp, #16
 8001186:	bd80      	pop	{r7, pc}

08001188 <Update_Depth_with_CC_Value>:

uint8_t Update_Depth_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]

	uint8_t depth = (uint8_t)*data;
 8001192:	210f      	movs	r1, #15
 8001194:	187b      	adds	r3, r7, r1
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	7812      	ldrb	r2, [r2, #0]
 800119a:	701a      	strb	r2, [r3, #0]
	params_ptr->depth = depth;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	187a      	adds	r2, r7, r1
 80011a0:	7812      	ldrb	r2, [r2, #0]
 80011a2:	729a      	strb	r2, [r3, #10]

	return 1;
 80011a4:	2301      	movs	r3, #1
}
 80011a6:	0018      	movs	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b004      	add	sp, #16
 80011ac:	bd80      	pop	{r7, pc}

080011ae <Update_Symmetry_with_CC_Value>:

uint8_t Update_Symmetry_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b084      	sub	sp, #16
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	6039      	str	r1, [r7, #0]

	uint8_t symmetry = (uint8_t)*data;
 80011b8:	210f      	movs	r1, #15
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	701a      	strb	r2, [r3, #0]

	symmetry <<= 1; //convert to 8-bit
 80011c2:	187a      	adds	r2, r7, r1
 80011c4:	187b      	adds	r3, r7, r1
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	18db      	adds	r3, r3, r3
 80011ca:	7013      	strb	r3, [r2, #0]
	params_ptr->symmetry = symmetry;
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	819a      	strh	r2, [r3, #12]

	return 1;
 80011d6:	2301      	movs	r3, #1
}
 80011d8:	0018      	movs	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	b004      	add	sp, #16
 80011de:	bd80      	pop	{r7, pc}

080011e0 <Update_Phase_with_CC_Value>:

uint8_t Update_Phase_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]

	uint8_t phase = (uint8_t)*data;
 80011ea:	210f      	movs	r1, #15
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	7812      	ldrb	r2, [r2, #0]
 80011f2:	701a      	strb	r2, [r3, #0]

	phase <<= 2; //convert to 9-bit
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	187a      	adds	r2, r7, r1
 80011f8:	7812      	ldrb	r2, [r2, #0]
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	701a      	strb	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = phase;
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b29a      	uxth	r2, r3
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8001208:	2301      	movs	r3, #1
}
 800120a:	0018      	movs	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	b004      	add	sp, #16
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <Set_Waveshape_to_CC_Mode_and_Value>:

uint8_t Set_Waveshape_to_CC_Mode_and_Value(uint8_t *data){
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8001224:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = CC_MODE;
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8001228:	2202      	movs	r2, #2
 800122a:	701a      	strb	r2, [r3, #0]

	CC_array[WAVESHAPE_ARR] = *data;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	781a      	ldrb	r2, [r3, #0]
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <Set_Waveshape_to_CC_Mode_and_Value+0x30>)
 8001232:	701a      	strb	r2, [r3, #0]

	return 1;
 8001234:	2301      	movs	r3, #1
}
 8001236:	0018      	movs	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	b002      	add	sp, #8
 800123c:	bd80      	pop	{r7, pc}
 800123e:	46c0      	nop			@ (mov r8, r8)
 8001240:	20000438 	.word	0x20000438
 8001244:	2000057c 	.word	0x2000057c

08001248 <Set_Speed_to_CC_Mode_and_Value>:

uint8_t Set_Speed_to_CC_Mode_and_Value(uint8_t *data){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8001250:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b07      	ldr	r3, [pc, #28]	@ (8001274 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8001258:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 800125a:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 800125c:	2202      	movs	r2, #2
 800125e:	701a      	strb	r2, [r3, #0]

	CC_array[SPEED_ARR] = *data;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	781a      	ldrb	r2, [r3, #0]
 8001264:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <Set_Speed_to_CC_Mode_and_Value+0x30>)
 8001266:	705a      	strb	r2, [r3, #1]

	return 1;
 8001268:	2301      	movs	r3, #1
}
 800126a:	0018      	movs	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			@ (mov r8, r8)
 8001274:	20000430 	.word	0x20000430
 8001278:	2000057c 	.word	0x2000057c

0800127c <Set_Depth_to_CC_Mode_and_Value>:

uint8_t Set_Depth_to_CC_Mode_and_Value(uint8_t *data){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

	depth_fsm.prev_state = depth_fsm.current_state;
 8001284:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 800128c:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = CC_MODE;
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8001290:	2202      	movs	r2, #2
 8001292:	701a      	strb	r2, [r3, #0]

	CC_array[DEPTH_ARR] = *data;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	781a      	ldrb	r2, [r3, #0]
 8001298:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <Set_Depth_to_CC_Mode_and_Value+0x30>)
 800129a:	709a      	strb	r2, [r3, #2]

	return 1;
 800129c:	2301      	movs	r3, #1
}
 800129e:	0018      	movs	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b002      	add	sp, #8
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			@ (mov r8, r8)
 80012a8:	20000434 	.word	0x20000434
 80012ac:	2000057c 	.word	0x2000057c

080012b0 <Set_Symmetry_to_CC_Mode_and_Value>:

uint8_t Set_Symmetry_to_CC_Mode_and_Value(uint8_t *data){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 80012c0:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = CC_MODE;
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 80012c4:	2202      	movs	r2, #2
 80012c6:	701a      	strb	r2, [r3, #0]

	CC_array[SYMMETRY_ARR] = *data;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	781a      	ldrb	r2, [r3, #0]
 80012cc:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <Set_Symmetry_to_CC_Mode_and_Value+0x30>)
 80012ce:	70da      	strb	r2, [r3, #3]

	return 1;
 80012d0:	2301      	movs	r3, #1
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	2000043c 	.word	0x2000043c
 80012e0:	2000057c 	.word	0x2000057c

080012e4 <Set_Phase_to_CC_Mode_and_Value>:

uint8_t Set_Phase_to_CC_Mode_and_Value(uint8_t *data){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

	phase_fsm.prev_state = phase_fsm.current_state;
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 80012f4:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = CC_MODE;
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 80012f8:	2202      	movs	r2, #2
 80012fa:	701a      	strb	r2, [r3, #0]

	CC_array[PHASE_ARR] = *data;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	781a      	ldrb	r2, [r3, #0]
 8001300:	4b04      	ldr	r3, [pc, #16]	@ (8001314 <Set_Phase_to_CC_Mode_and_Value+0x30>)
 8001302:	711a      	strb	r2, [r3, #4]

	return 1;
 8001304:	2301      	movs	r3, #1
}
 8001306:	0018      	movs	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	b002      	add	sp, #8
 800130c:	bd80      	pop	{r7, pc}
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	20000440 	.word	0x20000440
 8001314:	2000057c 	.word	0x2000057c

08001318 <Set_All_Pots_to_PC_Mode>:

uint8_t Set_All_Pots_to_PC_Mode(void){
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 800131c:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <Set_All_Pots_to_PC_Mode+0x5c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <Set_All_Pots_to_PC_Mode+0x5c>)
 8001324:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = PC_MODE;
 8001326:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <Set_All_Pots_to_PC_Mode+0x5c>)
 8001328:	2203      	movs	r2, #3
 800132a:	701a      	strb	r2, [r3, #0]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 800132c:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <Set_All_Pots_to_PC_Mode+0x60>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <Set_All_Pots_to_PC_Mode+0x60>)
 8001334:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.shared_state = PC_MODE;
 8001336:	4b10      	ldr	r3, [pc, #64]	@ (8001378 <Set_All_Pots_to_PC_Mode+0x60>)
 8001338:	2203      	movs	r2, #3
 800133a:	701a      	strb	r2, [r3, #0]

	depth_fsm.prev_state = depth_fsm.current_state;
 800133c:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <Set_All_Pots_to_PC_Mode+0x64>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <Set_All_Pots_to_PC_Mode+0x64>)
 8001344:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = PC_MODE;
 8001346:	4b0d      	ldr	r3, [pc, #52]	@ (800137c <Set_All_Pots_to_PC_Mode+0x64>)
 8001348:	2203      	movs	r2, #3
 800134a:	701a      	strb	r2, [r3, #0]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <Set_All_Pots_to_PC_Mode+0x68>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <Set_All_Pots_to_PC_Mode+0x68>)
 8001354:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = PC_MODE;
 8001356:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <Set_All_Pots_to_PC_Mode+0x68>)
 8001358:	2203      	movs	r2, #3
 800135a:	701a      	strb	r2, [r3, #0]

	phase_fsm.prev_state = phase_fsm.current_state;
 800135c:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <Set_All_Pots_to_PC_Mode+0x6c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <Set_All_Pots_to_PC_Mode+0x6c>)
 8001364:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = PC_MODE;
 8001366:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <Set_All_Pots_to_PC_Mode+0x6c>)
 8001368:	2203      	movs	r2, #3
 800136a:	701a      	strb	r2, [r3, #0]

	return 1;
 800136c:	2301      	movs	r3, #1
}
 800136e:	0018      	movs	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000438 	.word	0x20000438
 8001378:	20000430 	.word	0x20000430
 800137c:	20000434 	.word	0x20000434
 8001380:	2000043c 	.word	0x2000043c
 8001384:	20000440 	.word	0x20000440

08001388 <Store_Params_as_User_Preset>:
uint8_t Store_Params_as_User_Preset(enum Preset_Selected preset,
									volatile struct Params *params_ptr,
									volatile enum Validate *user_presets_used_array_ptr,
									volatile struct Preset **user_presets_array_ptr,
									const struct Preset **factory_presets_array_ptr,
									volatile struct Preset_Converted *presets_converted_array_ptr){
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b089      	sub	sp, #36	@ 0x24
 800138c:	af02      	add	r7, sp, #8
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	240f      	movs	r4, #15
 8001396:	193b      	adds	r3, r7, r4
 8001398:	1c02      	adds	r2, r0, #0
 800139a:	701a      	strb	r2, [r3, #0]

	//this function takes whatever the params for the pots are currently set to, regardless of CC, PC, etc.
	//and stores them to a given preset

	uint8_t preset_index = (uint8_t)preset - 1;
 800139c:	2117      	movs	r1, #23
 800139e:	187b      	adds	r3, r7, r1
 80013a0:	193a      	adds	r2, r7, r4
 80013a2:	7812      	ldrb	r2, [r2, #0]
 80013a4:	3a01      	subs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]

	*(user_presets_used_array_ptr + preset_index) = YES;
 80013a8:	187b      	adds	r3, r7, r1
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	18d3      	adds	r3, r2, r3
 80013b0:	2201      	movs	r2, #1
 80013b2:	701a      	strb	r2, [r3, #0]

	Convert_All_Params_Values_for_Preset(params_ptr, *(user_presets_array_ptr + preset_index));
 80013b4:	187b      	adds	r3, r7, r1
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	18d3      	adds	r3, r2, r3
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	0011      	movs	r1, r2
 80013c4:	0018      	movs	r0, r3
 80013c6:	f7ff f9e8 	bl	800079a <Convert_All_Params_Values_for_Preset>
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array_ptr,
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013d2:	2404      	movs	r4, #4
 80013d4:	9400      	str	r4, [sp, #0]
 80013d6:	f7ff fe15 	bl	8001004 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
																user_presets_used_array_ptr,
																factory_presets_array_ptr,
																user_presets_array_ptr,
																NUM_PRESETS);

	return 1;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	0018      	movs	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	b007      	add	sp, #28
 80013e2:	bd90      	pop	{r4, r7, pc}

080013e4 <set_LED_to_state>:

//VARIABLE DEFINITIONS
volatile uint8_t LED_counter = 0;
volatile uint32_t led_blink_period = LED_BLINK_PERIOD;

uint8_t set_LED_to_state(volatile struct LED_FSM *LED_FSM_ptr, enum LED_States desired_state){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	000a      	movs	r2, r1
 80013ee:	1cfb      	adds	r3, r7, #3
 80013f0:	701a      	strb	r2, [r3, #0]

	if(desired_state == LED_CONFIRM){
 80013f2:	1cfb      	adds	r3, r7, #3
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b07      	cmp	r3, #7
 80013f8:	d114      	bne.n	8001424 <set_LED_to_state+0x40>

		if(LED_fsm.current_state != LED_CONFIRM){
 80013fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001470 <set_LED_to_state+0x8c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b07      	cmp	r3, #7
 8001402:	d026      	beq.n	8001452 <set_LED_to_state+0x6e>

			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001404:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <set_LED_to_state+0x90>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2200      	movs	r2, #0
 800140a:	625a      	str	r2, [r3, #36]	@ 0x24
			led_blink_period = LED_BLINK_PERIOD >> 1;
 800140c:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <set_LED_to_state+0x94>)
 800140e:	2296      	movs	r2, #150	@ 0x96
 8001410:	601a      	str	r2, [r3, #0]
			LED_counter = 0;
 8001412:	4b1a      	ldr	r3, [pc, #104]	@ (800147c <set_LED_to_state+0x98>)
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, led_blink_period);
 8001418:	4b16      	ldr	r3, [pc, #88]	@ (8001474 <set_LED_to_state+0x90>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a16      	ldr	r2, [pc, #88]	@ (8001478 <set_LED_to_state+0x94>)
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	635a      	str	r2, [r3, #52]	@ 0x34
 8001422:	e016      	b.n	8001452 <set_LED_to_state+0x6e>
		}
	}
	else{

		if(LED_FSM_ptr->current_state != desired_state){
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	1cfa      	adds	r2, r7, #3
 800142c:	7812      	ldrb	r2, [r2, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d00f      	beq.n	8001452 <set_LED_to_state+0x6e>

			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001432:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <set_LED_to_state+0x90>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2200      	movs	r2, #0
 8001438:	625a      	str	r2, [r3, #36]	@ 0x24
			led_blink_period = LED_BLINK_PERIOD;
 800143a:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <set_LED_to_state+0x94>)
 800143c:	2296      	movs	r2, #150	@ 0x96
 800143e:	0052      	lsls	r2, r2, #1
 8001440:	601a      	str	r2, [r3, #0]
			LED_counter = 0;
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <set_LED_to_state+0x98>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, led_blink_period);
 8001448:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <set_LED_to_state+0x90>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <set_LED_to_state+0x94>)
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}

	LED_FSM_ptr->prev_state = LED_FSM_ptr->current_state;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b2da      	uxtb	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	705a      	strb	r2, [r3, #1]
	LED_FSM_ptr->current_state = desired_state;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	1cfa      	adds	r2, r7, #3
 8001460:	7812      	ldrb	r2, [r2, #0]
 8001462:	701a      	strb	r2, [r3, #0]

	return 1;
 8001464:	2301      	movs	r3, #1
}
 8001466:	0018      	movs	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	b002      	add	sp, #8
 800146c:	bd80      	pop	{r7, pc}
 800146e:	46c0      	nop			@ (mov r8, r8)
 8001470:	20000448 	.word	0x20000448
 8001474:	20000698 	.word	0x20000698
 8001478:	20000020 	.word	0x20000020
 800147c:	20000581 	.word	0x20000581

08001480 <Is_Status_Byte>:
volatile uint8_t active_status_byte;
volatile uint8_t running_status_byte;
volatile struct MIDI_Data MIDI_data = {.MIDI_data_buffer = 0};

//FUNCTION DEFINITIONS
enum Validate Is_Status_Byte(volatile uint8_t *data){
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8001488:	210f      	movs	r1, #15
 800148a:	187b      	adds	r3, r7, r1
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	7812      	ldrb	r2, [r2, #0]
 8001490:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8001492:	187b      	adds	r3, r7, r1
 8001494:	187a      	adds	r2, r7, r1
 8001496:	7812      	ldrb	r2, [r2, #0]
 8001498:	09d2      	lsrs	r2, r2, #7
 800149a:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 800149c:	187b      	adds	r3, r7, r1
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <Is_Status_Byte+0x28>

		return (enum Validate)YES;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e000      	b.n	80014aa <Is_Status_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)NO;
 80014a8:	2300      	movs	r3, #0
	}
}
 80014aa:	0018      	movs	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b004      	add	sp, #16
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <Is_Data_Byte>:

enum Validate Is_Data_Byte(volatile uint8_t *data){
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b084      	sub	sp, #16
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 80014ba:	210f      	movs	r1, #15
 80014bc:	187b      	adds	r3, r7, r1
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	7812      	ldrb	r2, [r2, #0]
 80014c2:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 80014c4:	187b      	adds	r3, r7, r1
 80014c6:	187a      	adds	r2, r7, r1
 80014c8:	7812      	ldrb	r2, [r2, #0]
 80014ca:	09d2      	lsrs	r2, r2, #7
 80014cc:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 80014ce:	187b      	adds	r3, r7, r1
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <Is_Data_Byte+0x28>

		return (enum Validate)NO;
 80014d6:	2300      	movs	r3, #0
 80014d8:	e000      	b.n	80014dc <Is_Data_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)YES;
 80014da:	2301      	movs	r3, #1
	}
}
 80014dc:	0018      	movs	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	b004      	add	sp, #16
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <Is_PC_Status_Byte>:

enum Validate Is_PC_Status_Byte(volatile uint8_t *data){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_PROGRAM_CHANGE >> 4;
 80014ec:	210f      	movs	r1, #15
 80014ee:	187b      	adds	r3, r7, r1
 80014f0:	220c      	movs	r2, #12
 80014f2:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	200e      	movs	r0, #14
 80014fc:	183b      	adds	r3, r7, r0
 80014fe:	0912      	lsrs	r2, r2, #4
 8001500:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8001502:	183a      	adds	r2, r7, r0
 8001504:	187b      	adds	r3, r7, r1
 8001506:	7812      	ldrb	r2, [r2, #0]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	429a      	cmp	r2, r3
 800150c:	d101      	bne.n	8001512 <Is_PC_Status_Byte+0x2e>

		return (enum Validate)YES;
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <Is_PC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8001512:	2300      	movs	r3, #0
	}
}
 8001514:	0018      	movs	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	b004      	add	sp, #16
 800151a:	bd80      	pop	{r7, pc}

0800151c <Is_CC_Status_Byte>:

enum Validate Is_CC_Status_Byte(volatile uint8_t *data){
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_CONTROL_CHANGE >> 4;
 8001524:	210f      	movs	r1, #15
 8001526:	187b      	adds	r3, r7, r1
 8001528:	220b      	movs	r2, #11
 800152a:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	200e      	movs	r0, #14
 8001534:	183b      	adds	r3, r7, r0
 8001536:	0912      	lsrs	r2, r2, #4
 8001538:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 800153a:	183a      	adds	r2, r7, r0
 800153c:	187b      	adds	r3, r7, r1
 800153e:	7812      	ldrb	r2, [r2, #0]
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d101      	bne.n	800154a <Is_CC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <Is_CC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 800154a:	2300      	movs	r3, #0
	}
}
 800154c:	0018      	movs	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	b004      	add	sp, #16
 8001552:	bd80      	pop	{r7, pc}

08001554 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>:

enum Validate Is_Utilised_Channel_Mode_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b77      	cmp	r3, #119	@ 0x77
 8001564:	d91d      	bls.n	80015a2 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4e>

		if(*first_data_byte == RESET_ALL_CONTROLLERS){ //put all pots into CC mode and set to 50%
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b79      	cmp	r3, #121	@ 0x79
 800156e:	d101      	bne.n	8001574 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x20>

			return (enum Validate)YES;
 8001570:	2301      	movs	r3, #1
 8001572:	e017      	b.n	80015a4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == LOCAL_CONTROL){
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b7a      	cmp	r3, #122	@ 0x7a
 800157c:	d101      	bne.n	8001582 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x2e>

			return (enum Validate)YES;
 800157e:	2301      	movs	r3, #1
 8001580:	e010      	b.n	80015a4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_ON){
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b7d      	cmp	r3, #125	@ 0x7d
 800158a:	d101      	bne.n	8001590 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x3c>

			return (enum Validate)YES;
 800158c:	2301      	movs	r3, #1
 800158e:	e009      	b.n	80015a4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_OFF){
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b7c      	cmp	r3, #124	@ 0x7c
 8001598:	d101      	bne.n	800159e <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4a>

			return (enum Validate)YES;
 800159a:	2301      	movs	r3, #1
 800159c:	e002      	b.n	80015a4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else{

			return (enum Validate)NO;
 800159e:	2300      	movs	r3, #0
 80015a0:	e000      	b.n	80015a4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
	}
	else{

		return (enum Validate)NO;
 80015a2:	2300      	movs	r3, #0
	}
}
 80015a4:	0018      	movs	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b002      	add	sp, #8
 80015aa:	bd80      	pop	{r7, pc}

080015ac <Is_Utilised_CC_First_Data_Byte>:

enum Validate Is_Utilised_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b77      	cmp	r3, #119	@ 0x77
 80015bc:	d901      	bls.n	80015c2 <Is_Utilised_CC_First_Data_Byte+0x16>

		return (enum Validate)NO;
 80015be:	2300      	movs	r3, #0
 80015c0:	e023      	b.n	800160a <Is_Utilised_CC_First_Data_Byte+0x5e>
	}
	else{

		if(*first_data_byte == WAVESHAPE_CC){
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b14      	cmp	r3, #20
 80015ca:	d101      	bne.n	80015d0 <Is_Utilised_CC_First_Data_Byte+0x24>

			return (enum Validate)YES;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e01c      	b.n	800160a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SPEED_CC){
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b15      	cmp	r3, #21
 80015d8:	d101      	bne.n	80015de <Is_Utilised_CC_First_Data_Byte+0x32>

			return (enum Validate)YES;
 80015da:	2301      	movs	r3, #1
 80015dc:	e015      	b.n	800160a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == DEPTH_CC){
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b16      	cmp	r3, #22
 80015e6:	d101      	bne.n	80015ec <Is_Utilised_CC_First_Data_Byte+0x40>

			return (enum Validate)YES;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e00e      	b.n	800160a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SYMMETRY_CC){
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b17      	cmp	r3, #23
 80015f4:	d101      	bne.n	80015fa <Is_Utilised_CC_First_Data_Byte+0x4e>

			return (enum Validate)YES;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e007      	b.n	800160a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == PHASE_CC){
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b18      	cmp	r3, #24
 8001602:	d101      	bne.n	8001608 <Is_Utilised_CC_First_Data_Byte+0x5c>

			return (enum Validate)YES;
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else{

			return (enum Validate)NO;
 8001608:	2300      	movs	r3, #0
		}
	}
}
 800160a:	0018      	movs	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	b002      	add	sp, #8
 8001610:	bd80      	pop	{r7, pc}

08001612 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>:

enum Validate Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(volatile uint8_t *first_data_byte, volatile uint8_t *second_data_byte){
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]

	if(*first_data_byte == RESET_ALL_CONTROLLERS){
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b79      	cmp	r3, #121	@ 0x79
 8001624:	d108      	bne.n	8001638 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x26>

		if(*second_data_byte == 0){
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x22>

			return (enum Validate)YES;
 8001630:	2301      	movs	r3, #1
 8001632:	e031      	b.n	8001698 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8001634:	2300      	movs	r3, #0
 8001636:	e02f      	b.n	8001698 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == LOCAL_CONTROL){
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b7a      	cmp	r3, #122	@ 0x7a
 8001640:	d10d      	bne.n	800165e <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x4c>

		if((*second_data_byte == 0) || (*second_data_byte == 127)){
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	d004      	beq.n	8001656 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x44>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b7f      	cmp	r3, #127	@ 0x7f
 8001654:	d101      	bne.n	800165a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x48>

			return (enum Validate)YES;
 8001656:	2301      	movs	r3, #1
 8001658:	e01e      	b.n	8001698 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 800165a:	2300      	movs	r3, #0
 800165c:	e01c      	b.n	8001698 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_OFF){
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b7c      	cmp	r3, #124	@ 0x7c
 8001666:	d108      	bne.n	800167a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x68>

		if((*second_data_byte == 0)){
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x64>

			return (enum Validate)YES;
 8001672:	2301      	movs	r3, #1
 8001674:	e010      	b.n	8001698 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8001676:	2300      	movs	r3, #0
 8001678:	e00e      	b.n	8001698 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_ON){
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b7d      	cmp	r3, #125	@ 0x7d
 8001682:	d108      	bne.n	8001696 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x84>

		if((*second_data_byte == 0)){
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x80>

			return (enum Validate)YES;
 800168e:	2301      	movs	r3, #1
 8001690:	e002      	b.n	8001698 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else{

		return (enum Validate)NO; //should not even be called if first data byte is always valid
 8001696:	2300      	movs	r3, #0
	}
}
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	b002      	add	sp, #8
 800169e:	bd80      	pop	{r7, pc}

080016a0 <Is_Sysex_Start_Status_Byte>:
	}

	return 1;
}

enum Validate Is_Sysex_Start_Status_Byte(volatile uint8_t *data){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

	if(*data == (uint8_t)SYSTEM_EXCLUSIVE_START){
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2bf0      	cmp	r3, #240	@ 0xf0
 80016b0:	d101      	bne.n	80016b6 <Is_Sysex_Start_Status_Byte+0x16>

		return (enum Validate)YES;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <Is_Sysex_Start_Status_Byte+0x18>
	}
	else{

		return (enum Validate)NO;
 80016b6:	2300      	movs	r3, #0
	}
}
 80016b8:	0018      	movs	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b002      	add	sp, #8
 80016be:	bd80      	pop	{r7, pc}

080016c0 <Is_Channelised_Status_Byte_On_Basic_Channel>:

		return (enum Validate)NO;
	}
}

enum Validate Is_Channelised_Status_Byte_On_Basic_Channel(volatile uint8_t *data, volatile enum MIDI_Channel MIDI_basic_channel){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	000a      	movs	r2, r1
 80016ca:	1cfb      	adds	r3, r7, #3
 80016cc:	701a      	strb	r2, [r3, #0]

	uint8_t ch = *data & 0x0F;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	200f      	movs	r0, #15
 80016d6:	183b      	adds	r3, r7, r0
 80016d8:	210f      	movs	r1, #15
 80016da:	400a      	ands	r2, r1
 80016dc:	701a      	strb	r2, [r3, #0]
	uint8_t b_ch = (uint8_t)MIDI_basic_channel;
 80016de:	210e      	movs	r1, #14
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	1cfa      	adds	r2, r7, #3
 80016e4:	7812      	ldrb	r2, [r2, #0]
 80016e6:	701a      	strb	r2, [r3, #0]

	if(ch == b_ch){
 80016e8:	183a      	adds	r2, r7, r0
 80016ea:	187b      	adds	r3, r7, r1
 80016ec:	7812      	ldrb	r2, [r2, #0]
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d101      	bne.n	80016f8 <Is_Channelised_Status_Byte_On_Basic_Channel+0x38>

		return (enum Validate)YES;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <Is_Channelised_Status_Byte_On_Basic_Channel+0x3a>
	}
	else{

		return (enum Validate)NO;
 80016f8:	2300      	movs	r3, #0
	}
}
 80016fa:	0018      	movs	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b004      	add	sp, #16
 8001700:	bd80      	pop	{r7, pc}

08001702 <Is_Data_Buffer_Empty>:

enum Validate Is_Data_Buffer_Empty(volatile struct MIDI_Data *MIDI_data_struct){
 8001702:	b580      	push	{r7, lr}
 8001704:	b084      	sub	sp, #16
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]

	uint16_t sum = 0;
 800170a:	230e      	movs	r3, #14
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	2200      	movs	r2, #0
 8001710:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001712:	230d      	movs	r3, #13
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
 800171a:	e011      	b.n	8001740 <Is_Data_Buffer_Empty+0x3e>

		sum += MIDI_data_struct->MIDI_data_buffer[i];
 800171c:	200d      	movs	r0, #13
 800171e:	183b      	adds	r3, r7, r0
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	5cd3      	ldrb	r3, [r2, r3]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	0019      	movs	r1, r3
 800172a:	220e      	movs	r2, #14
 800172c:	18bb      	adds	r3, r7, r2
 800172e:	18ba      	adds	r2, r7, r2
 8001730:	8812      	ldrh	r2, [r2, #0]
 8001732:	188a      	adds	r2, r1, r2
 8001734:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001736:	183b      	adds	r3, r7, r0
 8001738:	781a      	ldrb	r2, [r3, #0]
 800173a:	183b      	adds	r3, r7, r0
 800173c:	3201      	adds	r2, #1
 800173e:	701a      	strb	r2, [r3, #0]
 8001740:	230d      	movs	r3, #13
 8001742:	18fb      	adds	r3, r7, r3
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b09      	cmp	r3, #9
 8001748:	d9e8      	bls.n	800171c <Is_Data_Buffer_Empty+0x1a>
	}

	if(sum == 0){
 800174a:	230e      	movs	r3, #14
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <Is_Data_Buffer_Empty+0x56>

		return (enum Validate)YES;
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <Is_Data_Buffer_Empty+0x58>
	}
	else{

		return (enum Validate)NO;
 8001758:	2300      	movs	r3, #0
	}
}
 800175a:	0018      	movs	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	b004      	add	sp, #16
 8001760:	bd80      	pop	{r7, pc}

08001762 <Clear_Data_Buffer>:
			return 1;
		}
	}
}

uint8_t Clear_Data_Buffer(volatile struct MIDI_Data *MIDI_data_struct){
 8001762:	b580      	push	{r7, lr}
 8001764:	b084      	sub	sp, #16
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 800176a:	230f      	movs	r3, #15
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	e00a      	b.n	800178a <Clear_Data_Buffer+0x28>

		MIDI_data_struct->MIDI_data_buffer[i] = 0;
 8001774:	200f      	movs	r0, #15
 8001776:	183b      	adds	r3, r7, r0
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	2100      	movs	r1, #0
 800177e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001780:	183b      	adds	r3, r7, r0
 8001782:	781a      	ldrb	r2, [r3, #0]
 8001784:	183b      	adds	r3, r7, r0
 8001786:	3201      	adds	r2, #1
 8001788:	701a      	strb	r2, [r3, #0]
 800178a:	230f      	movs	r3, #15
 800178c:	18fb      	adds	r3, r7, r3
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b09      	cmp	r3, #9
 8001792:	d9ef      	bls.n	8001774 <Clear_Data_Buffer+0x12>
	}

	return 1;
 8001794:	2301      	movs	r3, #1
}
 8001796:	0018      	movs	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	b004      	add	sp, #16
 800179c:	bd80      	pop	{r7, pc}

0800179e <Is_Program_Change_Data_Byte_In_Range>:

enum Validate Is_Program_Change_Data_Byte_In_Range(volatile uint8_t *PC_data, uint8_t size_of_factory_or_user_array){
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	000a      	movs	r2, r1
 80017a8:	1cfb      	adds	r3, r7, #3
 80017aa:	701a      	strb	r2, [r3, #0]

	if(*PC_data < size_of_factory_or_user_array){
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	1cfa      	adds	r2, r7, #3
 80017b4:	7812      	ldrb	r2, [r2, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d901      	bls.n	80017be <Is_Program_Change_Data_Byte_In_Range+0x20>

		return (enum Validate)YES;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <Is_Program_Change_Data_Byte_In_Range+0x22>
	}
	else{

		return (enum Validate)NO;
 80017be:	2300      	movs	r3, #0
	}
}
 80017c0:	0018      	movs	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b002      	add	sp, #8
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <Is_System_Real_Time_Status_Byte>:

enum Validate Is_System_Real_Time_Status_Byte(volatile uint8_t *data){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

	if(*data == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2bf8      	cmp	r3, #248	@ 0xf8
 80017d8:	d101      	bne.n	80017de <Is_System_Real_Time_Status_Byte+0x16>
		return (enum Validate)YES;
 80017da:	2301      	movs	r3, #1
 80017dc:	e023      	b.n	8001826 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_START){
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2bfa      	cmp	r3, #250	@ 0xfa
 80017e6:	d101      	bne.n	80017ec <Is_System_Real_Time_Status_Byte+0x24>
		return (enum Validate)YES;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e01c      	b.n	8001826 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_CONTINUE){
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2bfb      	cmp	r3, #251	@ 0xfb
 80017f4:	d101      	bne.n	80017fa <Is_System_Real_Time_Status_Byte+0x32>
		return (enum Validate)YES;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e015      	b.n	8001826 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_STOP){
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2bfc      	cmp	r3, #252	@ 0xfc
 8001802:	d101      	bne.n	8001808 <Is_System_Real_Time_Status_Byte+0x40>
		return (enum Validate)YES;
 8001804:	2301      	movs	r3, #1
 8001806:	e00e      	b.n	8001826 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_ACTIVE_SENSING){
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001810:	d101      	bne.n	8001816 <Is_System_Real_Time_Status_Byte+0x4e>
		return (enum Validate)YES;
 8001812:	2301      	movs	r3, #1
 8001814:	e007      	b.n	8001826 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_RESET){
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2bff      	cmp	r3, #255	@ 0xff
 800181e:	d101      	bne.n	8001824 <Is_System_Real_Time_Status_Byte+0x5c>
		return (enum Validate)YES;
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else{
		return (enum Validate)NO;
 8001824:	2300      	movs	r3, #0
	}
}
 8001826:	0018      	movs	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	b002      	add	sp, #8
 800182c:	bd80      	pop	{r7, pc}

0800182e <Is_OMNI_On>:

enum Validate Is_OMNI_On(volatile uint32_t *statuses_ptr){
 800182e:	b5b0      	push	{r4, r5, r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]

	uint8_t omni_mode = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001836:	250f      	movs	r5, #15
 8001838:	197c      	adds	r4, r7, r5
 800183a:	2380      	movs	r3, #128	@ 0x80
 800183c:	00da      	lsls	r2, r3, #3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	0011      	movs	r1, r2
 8001842:	0018      	movs	r0, r3
 8001844:	f005 f85e 	bl	8006904 <Get_Status_Bit>
 8001848:	0003      	movs	r3, r0
 800184a:	7023      	strb	r3, [r4, #0]

	if(omni_mode == 1){
 800184c:	197b      	adds	r3, r7, r5
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <Is_OMNI_On+0x2a>

		return (enum Validate)YES;
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <Is_OMNI_On+0x2c>
	}
	else{

		return (enum Validate)NO;
 8001858:	2300      	movs	r3, #0
	}
}
 800185a:	0018      	movs	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	b004      	add	sp, #16
 8001860:	bdb0      	pop	{r4, r5, r7, pc}

08001862 <Reset_and_Stop_MIDI_Software_Timer>:

uint8_t Reset_and_Stop_MIDI_Software_Timer(uint32_t *midi_counter_ptr, volatile uint32_t *statuses_ptr){
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]

	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Is_Running);
 800186c:	2380      	movs	r3, #128	@ 0x80
 800186e:	005a      	lsls	r2, r3, #1
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	0011      	movs	r1, r2
 8001874:	0018      	movs	r0, r3
 8001876:	f005 f86b 	bl	8006950 <Clear_Status_Bit>
	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Has_Timed_Out);
 800187a:	2380      	movs	r3, #128	@ 0x80
 800187c:	009a      	lsls	r2, r3, #2
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	0011      	movs	r1, r2
 8001882:	0018      	movs	r0, r3
 8001884:	f005 f864 	bl	8006950 <Clear_Status_Bit>
	*midi_counter_ptr = 0;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]

	return 1;
 800188e:	2301      	movs	r3, #1
}
 8001890:	0018      	movs	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	b002      	add	sp, #8
 8001896:	bd80      	pop	{r7, pc}

08001898 <Reset_All_Controllers>:

uint8_t Reset_All_Controllers(struct Params *params_ptr, struct Delay_Line* delay_line_ptr){
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80018a2:	4b24      	ldr	r3, [pc, #144]	@ (8001934 <Reset_All_Controllers+0x9c>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b22      	ldr	r3, [pc, #136]	@ (8001934 <Reset_All_Controllers+0x9c>)
 80018aa:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 80018ac:	4b22      	ldr	r3, [pc, #136]	@ (8001938 <Reset_All_Controllers+0xa0>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4b21      	ldr	r3, [pc, #132]	@ (8001938 <Reset_All_Controllers+0xa0>)
 80018b4:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 80018b6:	4b21      	ldr	r3, [pc, #132]	@ (800193c <Reset_All_Controllers+0xa4>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	4b1f      	ldr	r3, [pc, #124]	@ (800193c <Reset_All_Controllers+0xa4>)
 80018be:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 80018c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001940 <Reset_All_Controllers+0xa8>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001940 <Reset_All_Controllers+0xa8>)
 80018c8:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 80018ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001944 <Reset_All_Controllers+0xac>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001944 <Reset_All_Controllers+0xac>)
 80018d2:	705a      	strb	r2, [r3, #1]

	//Put all pots into CC mode
	waveshape_fsm.current_state = CC_MODE;
 80018d4:	4b17      	ldr	r3, [pc, #92]	@ (8001934 <Reset_All_Controllers+0x9c>)
 80018d6:	2202      	movs	r2, #2
 80018d8:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 80018da:	4b17      	ldr	r3, [pc, #92]	@ (8001938 <Reset_All_Controllers+0xa0>)
 80018dc:	2202      	movs	r2, #2
 80018de:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = CC_MODE;
 80018e0:	4b16      	ldr	r3, [pc, #88]	@ (800193c <Reset_All_Controllers+0xa4>)
 80018e2:	2202      	movs	r2, #2
 80018e4:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = CC_MODE;
 80018e6:	4b16      	ldr	r3, [pc, #88]	@ (8001940 <Reset_All_Controllers+0xa8>)
 80018e8:	2202      	movs	r2, #2
 80018ea:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = CC_MODE;
 80018ec:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <Reset_All_Controllers+0xac>)
 80018ee:	2202      	movs	r2, #2
 80018f0:	701a      	strb	r2, [r3, #0]

	uint8_t data = 127 >> 1;
 80018f2:	230e      	movs	r3, #14
 80018f4:	18fb      	adds	r3, r7, r3
 80018f6:	223f      	movs	r2, #63	@ 0x3f
 80018f8:	701a      	strb	r2, [r3, #0]

	for(uint8_t index = 0; index < NUM_POTS; index++){
 80018fa:	230f      	movs	r3, #15
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
 8001902:	e00c      	b.n	800191e <Reset_All_Controllers+0x86>

		CC_array[index] = data;
 8001904:	200f      	movs	r0, #15
 8001906:	183b      	adds	r3, r7, r0
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	4a0f      	ldr	r2, [pc, #60]	@ (8001948 <Reset_All_Controllers+0xb0>)
 800190c:	210e      	movs	r1, #14
 800190e:	1879      	adds	r1, r7, r1
 8001910:	7809      	ldrb	r1, [r1, #0]
 8001912:	54d1      	strb	r1, [r2, r3]
	for(uint8_t index = 0; index < NUM_POTS; index++){
 8001914:	183b      	adds	r3, r7, r0
 8001916:	781a      	ldrb	r2, [r3, #0]
 8001918:	183b      	adds	r3, r7, r0
 800191a:	3201      	adds	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
 800191e:	230f      	movs	r3, #15
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b04      	cmp	r3, #4
 8001926:	d9ed      	bls.n	8001904 <Reset_All_Controllers+0x6c>
	}

	return 1;
 8001928:	2301      	movs	r3, #1
}
 800192a:	0018      	movs	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	b004      	add	sp, #16
 8001930:	bd80      	pop	{r7, pc}
 8001932:	46c0      	nop			@ (mov r8, r8)
 8001934:	20000438 	.word	0x20000438
 8001938:	20000430 	.word	0x20000430
 800193c:	20000434 	.word	0x20000434
 8001940:	2000043c 	.word	0x2000043c
 8001944:	20000440 	.word	0x20000440
 8001948:	2000057c 	.word	0x2000057c

0800194c <Set_Local_Control>:

uint8_t Set_Local_Control(){
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8001950:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <Set_Local_Control+0x5c>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4b14      	ldr	r3, [pc, #80]	@ (80019a8 <Set_Local_Control+0x5c>)
 8001958:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 800195a:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <Set_Local_Control+0x60>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <Set_Local_Control+0x60>)
 8001962:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8001964:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <Set_Local_Control+0x64>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <Set_Local_Control+0x64>)
 800196c:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <Set_Local_Control+0x68>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <Set_Local_Control+0x68>)
 8001976:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 8001978:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <Set_Local_Control+0x6c>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <Set_Local_Control+0x6c>)
 8001980:	705a      	strb	r2, [r3, #1]

	//Put all pots into manual mode
	waveshape_fsm.current_state = MANUAL_MODE;
 8001982:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <Set_Local_Control+0x5c>)
 8001984:	2201      	movs	r2, #1
 8001986:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = MANUAL_MODE;
 8001988:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <Set_Local_Control+0x60>)
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = MANUAL_MODE;
 800198e:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <Set_Local_Control+0x64>)
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = MANUAL_MODE;
 8001994:	4b07      	ldr	r3, [pc, #28]	@ (80019b4 <Set_Local_Control+0x68>)
 8001996:	2201      	movs	r2, #1
 8001998:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = MANUAL_MODE;
 800199a:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <Set_Local_Control+0x6c>)
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]

	return 1;
 80019a0:	2301      	movs	r3, #1
}
 80019a2:	0018      	movs	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000438 	.word	0x20000438
 80019ac:	20000430 	.word	0x20000430
 80019b0:	20000434 	.word	0x20000434
 80019b4:	2000043c 	.word	0x2000043c
 80019b8:	20000440 	.word	0x20000440

080019bc <Set_OMNI_Off>:

uint8_t Set_OMNI_Off(volatile uint32_t *statuses_ptr){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

	//Clear status bit
	Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 80019c4:	2380      	movs	r3, #128	@ 0x80
 80019c6:	00da      	lsls	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	0011      	movs	r1, r2
 80019cc:	0018      	movs	r0, r3
 80019ce:	f004 ffbf 	bl	8006950 <Clear_Status_Bit>

	return 1;
 80019d2:	2301      	movs	r3, #1
}
 80019d4:	0018      	movs	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b002      	add	sp, #8
 80019da:	bd80      	pop	{r7, pc}

080019dc <Set_OMNI_On>:

uint8_t Set_OMNI_On(volatile uint32_t *statuses_ptr){
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

	//Set status bit
	Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 80019e4:	2380      	movs	r3, #128	@ 0x80
 80019e6:	00da      	lsls	r2, r3, #3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	0011      	movs	r1, r2
 80019ec:	0018      	movs	r0, r3
 80019ee:	f004 ff9d 	bl	800692c <Set_Status_Bit>

	return 1;
 80019f2:	2301      	movs	r3, #1
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b002      	add	sp, #8
 80019fa:	bd80      	pop	{r7, pc}

080019fc <Start_UART_Receive>:
//VARIABLE DEFINITIONS
volatile uint8_t rx_buffer[1] = {0};
volatile enum Validate UART_DMA_TX_is_complete = YES;

//FUNCTION DEFINITIONS
uint8_t Start_UART_Receive(void){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0

	//START UART RECEIVE
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8001a00:	4904      	ldr	r1, [pc, #16]	@ (8001a14 <Start_UART_Receive+0x18>)
 8001a02:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <Start_UART_Receive+0x1c>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	0018      	movs	r0, r3
 8001a08:	f00b f838 	bl	800ca7c <HAL_UART_Receive_DMA>

	return 1;
 8001a0c:	2301      	movs	r3, #1
}
 8001a0e:	0018      	movs	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000594 	.word	0x20000594
 8001a18:	20000b00 	.word	0x20000b00

08001a1c <Pot_Check>:
volatile uint8_t symmetry_pot_adc_measurement_num = 0;
volatile uint8_t phase_pot_adc_measurement_num = 0;
volatile uint8_t pots_counter = 0;

//FUNCTION DEFINITIONS
uint8_t Pot_Check(volatile uint16_t* ADCResults_arr, enum Pot_Type pot_type){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	@ 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	000a      	movs	r2, r1
 8001a26:	1cfb      	adds	r3, r7, #3
 8001a28:	701a      	strb	r2, [r3, #0]
	static uint16_t second_symmetry_measurement;

	static uint16_t first_phase_measurement;
	static uint16_t second_phase_measurement;

	uint16_t *first_measurement_ptr = NULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t *second_measurement_ptr = NULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
	volatile uint8_t *measurement_num_ptr = NULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
	void *measurement_ptr = NULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
	uint8_t tolerance = 0;
 8001a3a:	2117      	movs	r1, #23
 8001a3c:	187b      	adds	r3, r7, r1
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
	volatile struct Normal_FSM* normal_fsm_ptr = NULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]

	if(pot_type == WAVESHAPE_POT){
 8001a4a:	1cfb      	adds	r3, r7, #3
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10d      	bne.n	8001a6e <Pot_Check+0x52>

		first_measurement_ptr = &first_waveshape_measurement;
 8001a52:	4b6d      	ldr	r3, [pc, #436]	@ (8001c08 <Pot_Check+0x1ec>)
 8001a54:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_waveshape_measurement;
 8001a56:	4b6d      	ldr	r3, [pc, #436]	@ (8001c0c <Pot_Check+0x1f0>)
 8001a58:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &waveshape_pot_adc_measurement_num;
 8001a5a:	4b6d      	ldr	r3, [pc, #436]	@ (8001c10 <Pot_Check+0x1f4>)
 8001a5c:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + WAVESHAPE_ADC_RESULT_INDEX);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	61bb      	str	r3, [r7, #24]
		tolerance = WAVESHAPE_TOLERANCE;
 8001a62:	187b      	adds	r3, r7, r1
 8001a64:	2246      	movs	r2, #70	@ 0x46
 8001a66:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &waveshape_fsm;
 8001a68:	4b6a      	ldr	r3, [pc, #424]	@ (8001c14 <Pot_Check+0x1f8>)
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	e04e      	b.n	8001b0c <Pot_Check+0xf0>
	}
	else if(pot_type == SPEED_POT){
 8001a6e:	1cfb      	adds	r3, r7, #3
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d10f      	bne.n	8001a96 <Pot_Check+0x7a>

		first_measurement_ptr = &first_speed_measurement;
 8001a76:	4b68      	ldr	r3, [pc, #416]	@ (8001c18 <Pot_Check+0x1fc>)
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_speed_measurement;
 8001a7a:	4b68      	ldr	r3, [pc, #416]	@ (8001c1c <Pot_Check+0x200>)
 8001a7c:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &speed_pot_adc_measurement_num;
 8001a7e:	4b68      	ldr	r3, [pc, #416]	@ (8001c20 <Pot_Check+0x204>)
 8001a80:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SPEED_ADC_RESULT_INDEX);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3302      	adds	r3, #2
 8001a86:	61bb      	str	r3, [r7, #24]
		tolerance = SPEED_TOLERANCE;
 8001a88:	2317      	movs	r3, #23
 8001a8a:	18fb      	adds	r3, r7, r3
 8001a8c:	2246      	movs	r2, #70	@ 0x46
 8001a8e:	701a      	strb	r2, [r3, #0]
		speed_fsm_ptr = &speed_fsm;
 8001a90:	4b64      	ldr	r3, [pc, #400]	@ (8001c24 <Pot_Check+0x208>)
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	e03a      	b.n	8001b0c <Pot_Check+0xf0>
	}
	else if(pot_type == DEPTH_POT){
 8001a96:	1cfb      	adds	r3, r7, #3
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d10f      	bne.n	8001abe <Pot_Check+0xa2>

		first_measurement_ptr = &first_depth_measurement;
 8001a9e:	4b62      	ldr	r3, [pc, #392]	@ (8001c28 <Pot_Check+0x20c>)
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_depth_measurement;
 8001aa2:	4b62      	ldr	r3, [pc, #392]	@ (8001c2c <Pot_Check+0x210>)
 8001aa4:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &depth_pot_adc_measurement_num;
 8001aa6:	4b62      	ldr	r3, [pc, #392]	@ (8001c30 <Pot_Check+0x214>)
 8001aa8:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DEPTH_ADC_RESULT_INDEX);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3304      	adds	r3, #4
 8001aae:	61bb      	str	r3, [r7, #24]
		tolerance = DEPTH_TOLERANCE;
 8001ab0:	2317      	movs	r3, #23
 8001ab2:	18fb      	adds	r3, r7, r3
 8001ab4:	2246      	movs	r2, #70	@ 0x46
 8001ab6:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &depth_fsm;
 8001ab8:	4b5e      	ldr	r3, [pc, #376]	@ (8001c34 <Pot_Check+0x218>)
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	e026      	b.n	8001b0c <Pot_Check+0xf0>
	}
	else if(pot_type == SYMMETRY_POT){
 8001abe:	1cfb      	adds	r3, r7, #3
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d10f      	bne.n	8001ae6 <Pot_Check+0xca>

		first_measurement_ptr = &first_symmetry_measurement;
 8001ac6:	4b5c      	ldr	r3, [pc, #368]	@ (8001c38 <Pot_Check+0x21c>)
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_symmetry_measurement;
 8001aca:	4b5c      	ldr	r3, [pc, #368]	@ (8001c3c <Pot_Check+0x220>)
 8001acc:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &symmetry_pot_adc_measurement_num;
 8001ace:	4b5c      	ldr	r3, [pc, #368]	@ (8001c40 <Pot_Check+0x224>)
 8001ad0:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SYMMETRY_ADC_RESULT_INDEX);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3306      	adds	r3, #6
 8001ad6:	61bb      	str	r3, [r7, #24]
		tolerance = SYMMETRY_TOLERANCE;
 8001ad8:	2317      	movs	r3, #23
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	2246      	movs	r2, #70	@ 0x46
 8001ade:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &symmetry_fsm;
 8001ae0:	4b58      	ldr	r3, [pc, #352]	@ (8001c44 <Pot_Check+0x228>)
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	e012      	b.n	8001b0c <Pot_Check+0xf0>
	}
	else if(pot_type == PHASE_POT){
 8001ae6:	1cfb      	adds	r3, r7, #3
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d10e      	bne.n	8001b0c <Pot_Check+0xf0>

		first_measurement_ptr = &first_phase_measurement;
 8001aee:	4b56      	ldr	r3, [pc, #344]	@ (8001c48 <Pot_Check+0x22c>)
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_phase_measurement;
 8001af2:	4b56      	ldr	r3, [pc, #344]	@ (8001c4c <Pot_Check+0x230>)
 8001af4:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &phase_pot_adc_measurement_num;
 8001af6:	4b56      	ldr	r3, [pc, #344]	@ (8001c50 <Pot_Check+0x234>)
 8001af8:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3308      	adds	r3, #8
 8001afe:	61bb      	str	r3, [r7, #24]
		tolerance = PHASE_TOLERANCE;
 8001b00:	2317      	movs	r3, #23
 8001b02:	18fb      	adds	r3, r7, r3
 8001b04:	2246      	movs	r2, #70	@ 0x46
 8001b06:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &phase_fsm;
 8001b08:	4b52      	ldr	r3, [pc, #328]	@ (8001c54 <Pot_Check+0x238>)
 8001b0a:	613b      	str	r3, [r7, #16]
	}

	if(*measurement_num_ptr == 0){
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10b      	bne.n	8001b2e <Pot_Check+0x112>

		*first_measurement_ptr = *((uint16_t*)measurement_ptr);
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	881a      	ldrh	r2, [r3, #0]
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	801a      	strh	r2, [r3, #0]

			(*measurement_num_ptr)++;
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	3301      	adds	r3, #1
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	701a      	strb	r2, [r3, #0]
 8001b2c:	e066      	b.n	8001bfc <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 1){
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d10b      	bne.n	8001b50 <Pot_Check+0x134>

		*second_measurement_ptr = *((uint16_t*)measurement_ptr);
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	881a      	ldrh	r2, [r3, #0]
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	801a      	strh	r2, [r3, #0]

		(*measurement_num_ptr)++;
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	3301      	adds	r3, #1
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	701a      	strb	r2, [r3, #0]
 8001b4e:	e055      	b.n	8001bfc <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 2){
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d150      	bne.n	8001bfc <Pot_Check+0x1e0>

		*measurement_num_ptr = 0;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]

		uint16_t diff = 0;
 8001b60:	200a      	movs	r0, #10
 8001b62:	183b      	adds	r3, r7, r0
 8001b64:	2200      	movs	r2, #0
 8001b66:	801a      	strh	r2, [r3, #0]

		if(*first_measurement_ptr > *second_measurement_ptr){
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	881a      	ldrh	r2, [r3, #0]
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d907      	bls.n	8001b84 <Pot_Check+0x168>

			diff = *first_measurement_ptr - *second_measurement_ptr;
 8001b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b76:	8819      	ldrh	r1, [r3, #0]
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	881a      	ldrh	r2, [r3, #0]
 8001b7c:	183b      	adds	r3, r7, r0
 8001b7e:	1a8a      	subs	r2, r1, r2
 8001b80:	801a      	strh	r2, [r3, #0]
 8001b82:	e00d      	b.n	8001ba0 <Pot_Check+0x184>

		}
		else if(*second_measurement_ptr > *first_measurement_ptr){
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	881a      	ldrh	r2, [r3, #0]
 8001b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d907      	bls.n	8001ba0 <Pot_Check+0x184>

			diff = *second_measurement_ptr - *first_measurement_ptr;
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	8819      	ldrh	r1, [r3, #0]
 8001b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b96:	881a      	ldrh	r2, [r3, #0]
 8001b98:	230a      	movs	r3, #10
 8001b9a:	18fb      	adds	r3, r7, r3
 8001b9c:	1a8a      	subs	r2, r1, r2
 8001b9e:	801a      	strh	r2, [r3, #0]
		/*else{

			diff = 0
		}*/

		if(diff > tolerance){
 8001ba0:	2317      	movs	r3, #23
 8001ba2:	18fb      	adds	r3, r7, r3
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	220a      	movs	r2, #10
 8001baa:	18ba      	adds	r2, r7, r2
 8001bac:	8812      	ldrh	r2, [r2, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d924      	bls.n	8001bfc <Pot_Check+0x1e0>

			if(normal_fsm_ptr != NULL){
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <Pot_Check+0x1ae>

				normal_fsm_ptr->prev_state = normal_fsm_ptr->current_state;
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	705a      	strb	r2, [r3, #1]
				normal_fsm_ptr->current_state = MANUAL_MODE;
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]
 8001bc8:	e018      	b.n	8001bfc <Pot_Check+0x1e0>

			}
			else if(speed_fsm_ptr != NULL){
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d015      	beq.n	8001bfc <Pot_Check+0x1e0>

				speed_fsm_ptr->prev_state = speed_fsm_ptr->current_state;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	7812      	ldrb	r2, [r2, #0]
 8001bd6:	705a      	strb	r2, [r3, #1]
				speed_fsm_ptr->current_state.shared_state = MANUAL_MODE;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	701a      	strb	r2, [r3, #0]
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8001bde:	4b1e      	ldr	r3, [pc, #120]	@ (8001c58 <Pot_Check+0x23c>)
 8001be0:	2120      	movs	r1, #32
 8001be2:	0018      	movs	r0, r3
 8001be4:	f004 feb4 	bl	8006950 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001be8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c58 <Pot_Check+0x23c>)
 8001bea:	2140      	movs	r1, #64	@ 0x40
 8001bec:	0018      	movs	r0, r3
 8001bee:	f004 feaf 	bl	8006950 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, First_Sync_Complete);
 8001bf2:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <Pot_Check+0x23c>)
 8001bf4:	2108      	movs	r1, #8
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f004 feaa 	bl	8006950 <Clear_Status_Bit>
			}
		}
	}

	return 1;
 8001bfc:	2301      	movs	r3, #1
}
 8001bfe:	0018      	movs	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b00a      	add	sp, #40	@ 0x28
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			@ (mov r8, r8)
 8001c08:	2000059c 	.word	0x2000059c
 8001c0c:	2000059e 	.word	0x2000059e
 8001c10:	20000595 	.word	0x20000595
 8001c14:	20000438 	.word	0x20000438
 8001c18:	200005a0 	.word	0x200005a0
 8001c1c:	200005a2 	.word	0x200005a2
 8001c20:	20000596 	.word	0x20000596
 8001c24:	20000430 	.word	0x20000430
 8001c28:	200005a4 	.word	0x200005a4
 8001c2c:	200005a6 	.word	0x200005a6
 8001c30:	20000597 	.word	0x20000597
 8001c34:	20000434 	.word	0x20000434
 8001c38:	200005a8 	.word	0x200005a8
 8001c3c:	200005aa 	.word	0x200005aa
 8001c40:	20000598 	.word	0x20000598
 8001c44:	2000043c 	.word	0x2000043c
 8001c48:	200005ac 	.word	0x200005ac
 8001c4c:	200005ae 	.word	0x200005ae
 8001c50:	20000599 	.word	0x20000599
 8001c54:	20000440 	.word	0x20000440
 8001c58:	20000cfc 	.word	0x20000cfc

08001c5c <Check_Tap_Tempo_Switch_State>:

uint8_t Check_Tap_Tempo_Switch_State(volatile struct Tap_Tempo_Switch_States *tap_tempo_switch_states_ptr){
 8001c5c:	b5b0      	push	{r4, r5, r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

	static uint8_t extend_rising_edge = 0;
	static uint8_t tap_tempo_switch_state_counter = TAP_TEMPO_SWITCH_CONFIDENCE_COUNT;

	uint8_t switch_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8001c64:	250f      	movs	r5, #15
 8001c66:	197c      	adds	r4, r7, r5
 8001c68:	2380      	movs	r3, #128	@ 0x80
 8001c6a:	00da      	lsls	r2, r3, #3
 8001c6c:	23a0      	movs	r3, #160	@ 0xa0
 8001c6e:	05db      	lsls	r3, r3, #23
 8001c70:	0011      	movs	r1, r2
 8001c72:	0018      	movs	r0, r3
 8001c74:	f007 f892 	bl	8008d9c <HAL_GPIO_ReadPin>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	7023      	strb	r3, [r4, #0]

	if(switch_state == 0){
 8001c7c:	197b      	adds	r3, r7, r5
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10a      	bne.n	8001c9a <Check_Tap_Tempo_Switch_State+0x3e>

		if(tap_tempo_switch_state_counter != 0){
 8001c84:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf4 <Check_Tap_Tempo_Switch_State+0x98>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d01e      	beq.n	8001cca <Check_Tap_Tempo_Switch_State+0x6e>

			tap_tempo_switch_state_counter--;
 8001c8c:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <Check_Tap_Tempo_Switch_State+0x98>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	4b17      	ldr	r3, [pc, #92]	@ (8001cf4 <Check_Tap_Tempo_Switch_State+0x98>)
 8001c96:	701a      	strb	r2, [r3, #0]
 8001c98:	e017      	b.n	8001cca <Check_Tap_Tempo_Switch_State+0x6e>
		}
	}
	else{

		if(tap_tempo_switch_state_counter != TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 8001c9a:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <Check_Tap_Tempo_Switch_State+0x98>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b0e      	cmp	r3, #14
 8001ca0:	d013      	beq.n	8001cca <Check_Tap_Tempo_Switch_State+0x6e>

			if(extend_rising_edge == COUNT_TO_DELAY_RISING_TAP_TEMPO_EDGE){
 8001ca2:	4b15      	ldr	r3, [pc, #84]	@ (8001cf8 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d109      	bne.n	8001cbe <Check_Tap_Tempo_Switch_State+0x62>

				tap_tempo_switch_state_counter++;
 8001caa:	4b12      	ldr	r3, [pc, #72]	@ (8001cf4 <Check_Tap_Tempo_Switch_State+0x98>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <Check_Tap_Tempo_Switch_State+0x98>)
 8001cb4:	701a      	strb	r2, [r3, #0]
				extend_rising_edge = 0;
 8001cb6:	4b10      	ldr	r3, [pc, #64]	@ (8001cf8 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
 8001cbc:	e005      	b.n	8001cca <Check_Tap_Tempo_Switch_State+0x6e>
			}
			else{
				extend_rising_edge++;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf8 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001cc8:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(tap_tempo_switch_state_counter == 0){
 8001cca:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf4 <Check_Tap_Tempo_Switch_State+0x98>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d103      	bne.n	8001cda <Check_Tap_Tempo_Switch_State+0x7e>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	701a      	strb	r2, [r3, #0]
 8001cd8:	e006      	b.n	8001ce8 <Check_Tap_Tempo_Switch_State+0x8c>
	}
	else if(tap_tempo_switch_state_counter == TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <Check_Tap_Tempo_Switch_State+0x98>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b0e      	cmp	r3, #14
 8001ce0:	d102      	bne.n	8001ce8 <Check_Tap_Tempo_Switch_State+0x8c>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = NOT_DEPRESSED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8001ce8:	2301      	movs	r3, #1
}
 8001cea:	0018      	movs	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b004      	add	sp, #16
 8001cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cf2:	46c0      	nop			@ (mov r8, r8)
 8001cf4:	20000024 	.word	0x20000024
 8001cf8:	200005b0 	.word	0x200005b0

08001cfc <SystemClock_Config>:

LPTIM_HandleTypeDef hlptim1;

//FUNCTIONS
void SystemClock_Config(void)
{
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b093      	sub	sp, #76	@ 0x4c
 8001d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d02:	2410      	movs	r4, #16
 8001d04:	193b      	adds	r3, r7, r4
 8001d06:	0018      	movs	r0, r3
 8001d08:	2338      	movs	r3, #56	@ 0x38
 8001d0a:	001a      	movs	r2, r3
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	f00c f9d7 	bl	800e0c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d12:	003b      	movs	r3, r7
 8001d14:	0018      	movs	r0, r3
 8001d16:	2310      	movs	r3, #16
 8001d18:	001a      	movs	r2, r3
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	f00c f9d0 	bl	800e0c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d20:	2380      	movs	r3, #128	@ 0x80
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	0018      	movs	r0, r3
 8001d26:	f007 fcab 	bl	8009680 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d2a:	193b      	adds	r3, r7, r4
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d30:	193b      	adds	r3, r7, r4
 8001d32:	2280      	movs	r2, #128	@ 0x80
 8001d34:	0052      	lsls	r2, r2, #1
 8001d36:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001d38:	0021      	movs	r1, r4
 8001d3a:	187b      	adds	r3, r7, r1
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d40:	187b      	adds	r3, r7, r1
 8001d42:	2240      	movs	r2, #64	@ 0x40
 8001d44:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d46:	187b      	adds	r3, r7, r1
 8001d48:	2202      	movs	r2, #2
 8001d4a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d4c:	187b      	adds	r3, r7, r1
 8001d4e:	2202      	movs	r2, #2
 8001d50:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001d52:	187b      	adds	r3, r7, r1
 8001d54:	2200      	movs	r2, #0
 8001d56:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001d58:	187b      	adds	r3, r7, r1
 8001d5a:	2208      	movs	r2, #8
 8001d5c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d5e:	187b      	adds	r3, r7, r1
 8001d60:	2280      	movs	r2, #128	@ 0x80
 8001d62:	0292      	lsls	r2, r2, #10
 8001d64:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001d66:	187b      	adds	r3, r7, r1
 8001d68:	22c0      	movs	r2, #192	@ 0xc0
 8001d6a:	04d2      	lsls	r2, r2, #19
 8001d6c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d6e:	187b      	adds	r3, r7, r1
 8001d70:	2280      	movs	r2, #128	@ 0x80
 8001d72:	0592      	lsls	r2, r2, #22
 8001d74:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d76:	187b      	adds	r3, r7, r1
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f007 fccd 	bl	8009718 <HAL_RCC_OscConfig>
 8001d7e:	1e03      	subs	r3, r0, #0
 8001d80:	d001      	beq.n	8001d86 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001d82:	f000 fdcb 	bl	800291c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d86:	003b      	movs	r3, r7
 8001d88:	2207      	movs	r2, #7
 8001d8a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d8c:	003b      	movs	r3, r7
 8001d8e:	2202      	movs	r2, #2
 8001d90:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d92:	003b      	movs	r3, r7
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d98:	003b      	movs	r3, r7
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d9e:	003b      	movs	r3, r7
 8001da0:	2102      	movs	r1, #2
 8001da2:	0018      	movs	r0, r3
 8001da4:	f007 ffd2 	bl	8009d4c <HAL_RCC_ClockConfig>
 8001da8:	1e03      	subs	r3, r0, #0
 8001daa:	d001      	beq.n	8001db0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001dac:	f000 fdb6 	bl	800291c <Error_Handler>
  }
}
 8001db0:	46c0      	nop			@ (mov r8, r8)
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b013      	add	sp, #76	@ 0x4c
 8001db6:	bd90      	pop	{r4, r7, pc}

08001db8 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	230c      	movs	r3, #12
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	f00c f97a 	bl	800e0c0 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001dcc:	4b54      	ldr	r3, [pc, #336]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001dce:	4a55      	ldr	r2, [pc, #340]	@ (8001f24 <MX_ADC1_Init+0x16c>)
 8001dd0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001dd2:	4b53      	ldr	r3, [pc, #332]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001dd4:	2280      	movs	r2, #128	@ 0x80
 8001dd6:	05d2      	lsls	r2, r2, #23
 8001dd8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001dda:	4b51      	ldr	r3, [pc, #324]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001de0:	4b4f      	ldr	r3, [pc, #316]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001de6:	4b4e      	ldr	r3, [pc, #312]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001de8:	2280      	movs	r2, #128	@ 0x80
 8001dea:	0392      	lsls	r2, r2, #14
 8001dec:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001dee:	4b4c      	ldr	r3, [pc, #304]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001df0:	2208      	movs	r2, #8
 8001df2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001df4:	4b4a      	ldr	r3, [pc, #296]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001dfa:	4b49      	ldr	r3, [pc, #292]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e00:	4b47      	ldr	r3, [pc, #284]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 8001e06:	4b46      	ldr	r3, [pc, #280]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001e08:	2205      	movs	r2, #5
 8001e0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e0c:	4b44      	ldr	r3, [pc, #272]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001e0e:	2220      	movs	r2, #32
 8001e10:	2100      	movs	r1, #0
 8001e12:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e14:	4b42      	ldr	r3, [pc, #264]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e1a:	4b41      	ldr	r3, [pc, #260]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e20:	4b3f      	ldr	r3, [pc, #252]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001e22:	222c      	movs	r2, #44	@ 0x2c
 8001e24:	2100      	movs	r1, #0
 8001e26:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e28:	4b3d      	ldr	r3, [pc, #244]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001e2e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001e34:	4b3a      	ldr	r3, [pc, #232]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001e3a:	4b39      	ldr	r3, [pc, #228]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001e3c:	223c      	movs	r2, #60	@ 0x3c
 8001e3e:	2100      	movs	r1, #0
 8001e40:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001e42:	4b37      	ldr	r3, [pc, #220]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e48:	4b35      	ldr	r3, [pc, #212]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f004 ffae 	bl	8006dac <HAL_ADC_Init>
 8001e50:	1e03      	subs	r3, r0, #0
 8001e52:	d001      	beq.n	8001e58 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001e54:	f000 fd62 	bl	800291c <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	2200      	movs	r2, #0
 8001e62:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001e64:	1d3b      	adds	r3, r7, #4
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e6a:	1d3a      	adds	r2, r7, #4
 8001e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001e6e:	0011      	movs	r1, r2
 8001e70:	0018      	movs	r0, r3
 8001e72:	f005 fb1f 	bl	80074b4 <HAL_ADC_ConfigChannel>
 8001e76:	1e03      	subs	r3, r0, #0
 8001e78:	d001      	beq.n	8001e7e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001e7a:	f000 fd4f 	bl	800291c <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	4a29      	ldr	r2, [pc, #164]	@ (8001f28 <MX_ADC1_Init+0x170>)
 8001e82:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2204      	movs	r2, #4
 8001e88:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e90:	1d3a      	adds	r2, r7, #4
 8001e92:	4b23      	ldr	r3, [pc, #140]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001e94:	0011      	movs	r1, r2
 8001e96:	0018      	movs	r0, r3
 8001e98:	f005 fb0c 	bl	80074b4 <HAL_ADC_ConfigChannel>
 8001e9c:	1e03      	subs	r3, r0, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001ea0:	f000 fd3c 	bl	800291c <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	4a21      	ldr	r2, [pc, #132]	@ (8001f2c <MX_ADC1_Init+0x174>)
 8001ea8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	2208      	movs	r2, #8
 8001eae:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eb6:	1d3a      	adds	r2, r7, #4
 8001eb8:	4b19      	ldr	r3, [pc, #100]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001eba:	0011      	movs	r1, r2
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f005 faf9 	bl	80074b4 <HAL_ADC_ConfigChannel>
 8001ec2:	1e03      	subs	r3, r0, #0
 8001ec4:	d001      	beq.n	8001eca <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001ec6:	f000 fd29 	bl	800291c <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	4a18      	ldr	r2, [pc, #96]	@ (8001f30 <MX_ADC1_Init+0x178>)
 8001ece:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001edc:	1d3a      	adds	r2, r7, #4
 8001ede:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001ee0:	0011      	movs	r1, r2
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f005 fae6 	bl	80074b4 <HAL_ADC_ConfigChannel>
 8001ee8:	1e03      	subs	r3, r0, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001eec:	f000 fd16 	bl	800291c <Error_Handler>
  }

  /** Configure Channel 6
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	4a10      	ldr	r2, [pc, #64]	@ (8001f34 <MX_ADC1_Init+0x17c>)
 8001ef4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	2210      	movs	r2, #16
 8001efa:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f02:	1d3a      	adds	r2, r7, #4
 8001f04:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <MX_ADC1_Init+0x168>)
 8001f06:	0011      	movs	r1, r2
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f005 fad3 	bl	80074b4 <HAL_ADC_ConfigChannel>
 8001f0e:	1e03      	subs	r3, r0, #0
 8001f10:	d001      	beq.n	8001f16 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8001f12:	f000 fd03 	bl	800291c <Error_Handler>
  }
}
 8001f16:	46c0      	nop			@ (mov r8, r8)
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b004      	add	sp, #16
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	46c0      	nop			@ (mov r8, r8)
 8001f20:	200005b4 	.word	0x200005b4
 8001f24:	40012400 	.word	0x40012400
 8001f28:	04000002 	.word	0x04000002
 8001f2c:	10000010 	.word	0x10000010
 8001f30:	14000020 	.word	0x14000020
 8001f34:	18000040 	.word	0x18000040

08001f38 <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b094      	sub	sp, #80	@ 0x50
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f3e:	2334      	movs	r3, #52	@ 0x34
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	0018      	movs	r0, r3
 8001f44:	231c      	movs	r3, #28
 8001f46:	001a      	movs	r2, r3
 8001f48:	2100      	movs	r1, #0
 8001f4a:	f00c f8b9 	bl	800e0c0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f4e:	003b      	movs	r3, r7
 8001f50:	0018      	movs	r0, r3
 8001f52:	2334      	movs	r3, #52	@ 0x34
 8001f54:	001a      	movs	r2, r3
 8001f56:	2100      	movs	r1, #0
 8001f58:	f00c f8b2 	bl	800e0c0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001f5c:	4b3a      	ldr	r3, [pc, #232]	@ (8002048 <MX_TIM16_Init+0x110>)
 8001f5e:	4a3b      	ldr	r2, [pc, #236]	@ (800204c <MX_TIM16_Init+0x114>)
 8001f60:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001f62:	4b39      	ldr	r3, [pc, #228]	@ (8002048 <MX_TIM16_Init+0x110>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f68:	4b37      	ldr	r3, [pc, #220]	@ (8002048 <MX_TIM16_Init+0x110>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 8001f6e:	4b36      	ldr	r3, [pc, #216]	@ (8002048 <MX_TIM16_Init+0x110>)
 8001f70:	22ff      	movs	r2, #255	@ 0xff
 8001f72:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001f74:	4b34      	ldr	r3, [pc, #208]	@ (8002048 <MX_TIM16_Init+0x110>)
 8001f76:	2280      	movs	r2, #128	@ 0x80
 8001f78:	0092      	lsls	r2, r2, #2
 8001f7a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001f7c:	4b32      	ldr	r3, [pc, #200]	@ (8002048 <MX_TIM16_Init+0x110>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f82:	4b31      	ldr	r3, [pc, #196]	@ (8002048 <MX_TIM16_Init+0x110>)
 8001f84:	2280      	movs	r2, #128	@ 0x80
 8001f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001f88:	4b2f      	ldr	r3, [pc, #188]	@ (8002048 <MX_TIM16_Init+0x110>)
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f008 fa02 	bl	800a394 <HAL_TIM_Base_Init>
 8001f90:	1e03      	subs	r3, r0, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8001f94:	f000 fcc2 	bl	800291c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001f98:	4b2b      	ldr	r3, [pc, #172]	@ (8002048 <MX_TIM16_Init+0x110>)
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f008 fb00 	bl	800a5a0 <HAL_TIM_OC_Init>
 8001fa0:	1e03      	subs	r3, r0, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8001fa4:	f000 fcba 	bl	800291c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001fa8:	2134      	movs	r1, #52	@ 0x34
 8001faa:	187b      	adds	r3, r7, r1
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 8001fb0:	187b      	adds	r3, r7, r1
 8001fb2:	22ff      	movs	r2, #255	@ 0xff
 8001fb4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fb6:	187b      	adds	r3, r7, r1
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fbc:	187b      	adds	r3, r7, r1
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fc2:	187b      	adds	r3, r7, r1
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fc8:	187b      	adds	r3, r7, r1
 8001fca:	2200      	movs	r2, #0
 8001fcc:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fce:	187b      	adds	r3, r7, r1
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fd4:	1879      	adds	r1, r7, r1
 8001fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8002048 <MX_TIM16_Init+0x110>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f009 f954 	bl	800b288 <HAL_TIM_OC_ConfigChannel>
 8001fe0:	1e03      	subs	r3, r0, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8001fe4:	f000 fc9a 	bl	800291c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8001fe8:	4b17      	ldr	r3, [pc, #92]	@ (8002048 <MX_TIM16_Init+0x110>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <MX_TIM16_Init+0x110>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2108      	movs	r1, #8
 8001ff4:	438a      	bics	r2, r1
 8001ff6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ff8:	003b      	movs	r3, r7
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ffe:	003b      	movs	r3, r7
 8002000:	2200      	movs	r2, #0
 8002002:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002004:	003b      	movs	r3, r7
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800200a:	003b      	movs	r3, r7
 800200c:	2200      	movs	r2, #0
 800200e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002010:	003b      	movs	r3, r7
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002016:	003b      	movs	r3, r7
 8002018:	2280      	movs	r2, #128	@ 0x80
 800201a:	0192      	lsls	r2, r2, #6
 800201c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800201e:	003b      	movs	r3, r7
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002024:	003b      	movs	r3, r7
 8002026:	2200      	movs	r2, #0
 8002028:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800202a:	003a      	movs	r2, r7
 800202c:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <MX_TIM16_Init+0x110>)
 800202e:	0011      	movs	r1, r2
 8002030:	0018      	movs	r0, r3
 8002032:	f00a fb4f 	bl	800c6d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002036:	1e03      	subs	r3, r0, #0
 8002038:	d001      	beq.n	800203e <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 800203a:	f000 fc6f 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 800203e:	46c0      	nop			@ (mov r8, r8)
 8002040:	46bd      	mov	sp, r7
 8002042:	b014      	add	sp, #80	@ 0x50
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	20000810 	.word	0x20000810
 800204c:	40014400 	.word	0x40014400

08002050 <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08c      	sub	sp, #48	@ 0x30
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002056:	2320      	movs	r3, #32
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	0018      	movs	r0, r3
 800205c:	2310      	movs	r3, #16
 800205e:	001a      	movs	r2, r3
 8002060:	2100      	movs	r1, #0
 8002062:	f00c f82d 	bl	800e0c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002066:	2314      	movs	r3, #20
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	0018      	movs	r0, r3
 800206c:	230c      	movs	r3, #12
 800206e:	001a      	movs	r2, r3
 8002070:	2100      	movs	r1, #0
 8002072:	f00c f825 	bl	800e0c0 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	0018      	movs	r0, r3
 800207a:	2310      	movs	r3, #16
 800207c:	001a      	movs	r2, r3
 800207e:	2100      	movs	r1, #0
 8002080:	f00c f81e 	bl	800e0c0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002084:	4b2e      	ldr	r3, [pc, #184]	@ (8002140 <MX_TIM2_Init+0xf0>)
 8002086:	2280      	movs	r2, #128	@ 0x80
 8002088:	05d2      	lsls	r2, r2, #23
 800208a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 800208c:	4b2c      	ldr	r3, [pc, #176]	@ (8002140 <MX_TIM2_Init+0xf0>)
 800208e:	223f      	movs	r2, #63	@ 0x3f
 8002090:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002092:	4b2b      	ldr	r3, [pc, #172]	@ (8002140 <MX_TIM2_Init+0xf0>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2097152 - 1;
 8002098:	4b29      	ldr	r3, [pc, #164]	@ (8002140 <MX_TIM2_Init+0xf0>)
 800209a:	4a2a      	ldr	r2, [pc, #168]	@ (8002144 <MX_TIM2_Init+0xf4>)
 800209c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800209e:	4b28      	ldr	r3, [pc, #160]	@ (8002140 <MX_TIM2_Init+0xf0>)
 80020a0:	2280      	movs	r2, #128	@ 0x80
 80020a2:	0092      	lsls	r2, r2, #2
 80020a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020a6:	4b26      	ldr	r3, [pc, #152]	@ (8002140 <MX_TIM2_Init+0xf0>)
 80020a8:	2280      	movs	r2, #128	@ 0x80
 80020aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020ac:	4b24      	ldr	r3, [pc, #144]	@ (8002140 <MX_TIM2_Init+0xf0>)
 80020ae:	0018      	movs	r0, r3
 80020b0:	f008 f970 	bl	800a394 <HAL_TIM_Base_Init>
 80020b4:	1e03      	subs	r3, r0, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80020b8:	f000 fc30 	bl	800291c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020bc:	2120      	movs	r1, #32
 80020be:	187b      	adds	r3, r7, r1
 80020c0:	2280      	movs	r2, #128	@ 0x80
 80020c2:	0152      	lsls	r2, r2, #5
 80020c4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020c6:	187a      	adds	r2, r7, r1
 80020c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002140 <MX_TIM2_Init+0xf0>)
 80020ca:	0011      	movs	r1, r2
 80020cc:	0018      	movs	r0, r3
 80020ce:	f009 fadf 	bl	800b690 <HAL_TIM_ConfigClockSource>
 80020d2:	1e03      	subs	r3, r0, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80020d6:	f000 fc21 	bl	800291c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80020da:	4b19      	ldr	r3, [pc, #100]	@ (8002140 <MX_TIM2_Init+0xf0>)
 80020dc:	0018      	movs	r0, r3
 80020de:	f008 fe0b 	bl	800acf8 <HAL_TIM_IC_Init>
 80020e2:	1e03      	subs	r3, r0, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80020e6:	f000 fc19 	bl	800291c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ea:	2114      	movs	r1, #20
 80020ec:	187b      	adds	r3, r7, r1
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f2:	187b      	adds	r3, r7, r1
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020f8:	187a      	adds	r2, r7, r1
 80020fa:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <MX_TIM2_Init+0xf0>)
 80020fc:	0011      	movs	r1, r2
 80020fe:	0018      	movs	r0, r3
 8002100:	f00a fa80 	bl	800c604 <HAL_TIMEx_MasterConfigSynchronization>
 8002104:	1e03      	subs	r3, r0, #0
 8002106:	d001      	beq.n	800210c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8002108:	f000 fc08 	bl	800291c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800210c:	1d3b      	adds	r3, r7, #4
 800210e:	2202      	movs	r2, #2
 8002110:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	2201      	movs	r2, #1
 8002116:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002118:	1d3b      	adds	r3, r7, #4
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	220f      	movs	r2, #15
 8002122:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002124:	1d39      	adds	r1, r7, #4
 8002126:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <MX_TIM2_Init+0xf0>)
 8002128:	2200      	movs	r2, #0
 800212a:	0018      	movs	r0, r3
 800212c:	f009 f90c 	bl	800b348 <HAL_TIM_IC_ConfigChannel>
 8002130:	1e03      	subs	r3, r0, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002134:	f000 fbf2 	bl	800291c <Error_Handler>

  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002138:	46c0      	nop			@ (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	b00c      	add	sp, #48	@ 0x30
 800213e:	bd80      	pop	{r7, pc}
 8002140:	200008cc 	.word	0x200008cc
 8002144:	001fffff 	.word	0x001fffff

08002148 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08e      	sub	sp, #56	@ 0x38
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800214e:	2328      	movs	r3, #40	@ 0x28
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	0018      	movs	r0, r3
 8002154:	2310      	movs	r3, #16
 8002156:	001a      	movs	r2, r3
 8002158:	2100      	movs	r1, #0
 800215a:	f00b ffb1 	bl	800e0c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800215e:	231c      	movs	r3, #28
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	0018      	movs	r0, r3
 8002164:	230c      	movs	r3, #12
 8002166:	001a      	movs	r2, r3
 8002168:	2100      	movs	r1, #0
 800216a:	f00b ffa9 	bl	800e0c0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800216e:	003b      	movs	r3, r7
 8002170:	0018      	movs	r0, r3
 8002172:	231c      	movs	r3, #28
 8002174:	001a      	movs	r2, r3
 8002176:	2100      	movs	r1, #0
 8002178:	f00b ffa2 	bl	800e0c0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800217c:	4b32      	ldr	r3, [pc, #200]	@ (8002248 <MX_TIM3_Init+0x100>)
 800217e:	4a33      	ldr	r2, [pc, #204]	@ (800224c <MX_TIM3_Init+0x104>)
 8002180:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 8002182:	4b31      	ldr	r3, [pc, #196]	@ (8002248 <MX_TIM3_Init+0x100>)
 8002184:	4a32      	ldr	r2, [pc, #200]	@ (8002250 <MX_TIM3_Init+0x108>)
 8002186:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002188:	4b2f      	ldr	r3, [pc, #188]	@ (8002248 <MX_TIM3_Init+0x100>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 800218e:	4b2e      	ldr	r3, [pc, #184]	@ (8002248 <MX_TIM3_Init+0x100>)
 8002190:	4a30      	ldr	r2, [pc, #192]	@ (8002254 <MX_TIM3_Init+0x10c>)
 8002192:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002194:	4b2c      	ldr	r3, [pc, #176]	@ (8002248 <MX_TIM3_Init+0x100>)
 8002196:	2280      	movs	r2, #128	@ 0x80
 8002198:	0092      	lsls	r2, r2, #2
 800219a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800219c:	4b2a      	ldr	r3, [pc, #168]	@ (8002248 <MX_TIM3_Init+0x100>)
 800219e:	2280      	movs	r2, #128	@ 0x80
 80021a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021a2:	4b29      	ldr	r3, [pc, #164]	@ (8002248 <MX_TIM3_Init+0x100>)
 80021a4:	0018      	movs	r0, r3
 80021a6:	f008 f8f5 	bl	800a394 <HAL_TIM_Base_Init>
 80021aa:	1e03      	subs	r3, r0, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80021ae:	f000 fbb5 	bl	800291c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021b2:	2128      	movs	r1, #40	@ 0x28
 80021b4:	187b      	adds	r3, r7, r1
 80021b6:	2280      	movs	r2, #128	@ 0x80
 80021b8:	0152      	lsls	r2, r2, #5
 80021ba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021bc:	187a      	adds	r2, r7, r1
 80021be:	4b22      	ldr	r3, [pc, #136]	@ (8002248 <MX_TIM3_Init+0x100>)
 80021c0:	0011      	movs	r1, r2
 80021c2:	0018      	movs	r0, r3
 80021c4:	f009 fa64 	bl	800b690 <HAL_TIM_ConfigClockSource>
 80021c8:	1e03      	subs	r3, r0, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80021cc:	f000 fba6 	bl	800291c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80021d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002248 <MX_TIM3_Init+0x100>)
 80021d2:	0018      	movs	r0, r3
 80021d4:	f008 f9e4 	bl	800a5a0 <HAL_TIM_OC_Init>
 80021d8:	1e03      	subs	r3, r0, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80021dc:	f000 fb9e 	bl	800291c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e0:	211c      	movs	r1, #28
 80021e2:	187b      	adds	r3, r7, r1
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e8:	187b      	adds	r3, r7, r1
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021ee:	187a      	adds	r2, r7, r1
 80021f0:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <MX_TIM3_Init+0x100>)
 80021f2:	0011      	movs	r1, r2
 80021f4:	0018      	movs	r0, r3
 80021f6:	f00a fa05 	bl	800c604 <HAL_TIMEx_MasterConfigSynchronization>
 80021fa:	1e03      	subs	r3, r0, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80021fe:	f000 fb8d 	bl	800291c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002202:	003b      	movs	r3, r7
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002208:	003b      	movs	r3, r7
 800220a:	2200      	movs	r2, #0
 800220c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800220e:	003b      	movs	r3, r7
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002214:	003b      	movs	r3, r7
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800221a:	0039      	movs	r1, r7
 800221c:	4b0a      	ldr	r3, [pc, #40]	@ (8002248 <MX_TIM3_Init+0x100>)
 800221e:	2200      	movs	r2, #0
 8002220:	0018      	movs	r0, r3
 8002222:	f009 f831 	bl	800b288 <HAL_TIM_OC_ConfigChannel>
 8002226:	1e03      	subs	r3, r0, #0
 8002228:	d001      	beq.n	800222e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800222a:	f000 fb77 	bl	800291c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 800222e:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <MX_TIM3_Init+0x100>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	699a      	ldr	r2, [r3, #24]
 8002234:	4b04      	ldr	r3, [pc, #16]	@ (8002248 <MX_TIM3_Init+0x100>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2108      	movs	r1, #8
 800223a:	438a      	bics	r2, r1
 800223c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800223e:	46c0      	nop			@ (mov r8, r8)
 8002240:	46bd      	mov	sp, r7
 8002242:	b00e      	add	sp, #56	@ 0x38
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			@ (mov r8, r8)
 8002248:	20000988 	.word	0x20000988
 800224c:	40000400 	.word	0x40000400
 8002250:	00007fff 	.word	0x00007fff
 8002254:	00000fff 	.word	0x00000fff

08002258 <MX_TIM1_Init>:

void MX_TIM1_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b09c      	sub	sp, #112	@ 0x70
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800225e:	2360      	movs	r3, #96	@ 0x60
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	0018      	movs	r0, r3
 8002264:	2310      	movs	r3, #16
 8002266:	001a      	movs	r2, r3
 8002268:	2100      	movs	r1, #0
 800226a:	f00b ff29 	bl	800e0c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800226e:	2354      	movs	r3, #84	@ 0x54
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	0018      	movs	r0, r3
 8002274:	230c      	movs	r3, #12
 8002276:	001a      	movs	r2, r3
 8002278:	2100      	movs	r1, #0
 800227a:	f00b ff21 	bl	800e0c0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800227e:	2338      	movs	r3, #56	@ 0x38
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	0018      	movs	r0, r3
 8002284:	231c      	movs	r3, #28
 8002286:	001a      	movs	r2, r3
 8002288:	2100      	movs	r1, #0
 800228a:	f00b ff19 	bl	800e0c0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	0018      	movs	r0, r3
 8002292:	2334      	movs	r3, #52	@ 0x34
 8002294:	001a      	movs	r2, r3
 8002296:	2100      	movs	r1, #0
 8002298:	f00b ff12 	bl	800e0c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800229c:	4b5f      	ldr	r3, [pc, #380]	@ (800241c <MX_TIM1_Init+0x1c4>)
 800229e:	4a60      	ldr	r2, [pc, #384]	@ (8002420 <MX_TIM1_Init+0x1c8>)
 80022a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80022a2:	4b5e      	ldr	r3, [pc, #376]	@ (800241c <MX_TIM1_Init+0x1c4>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a8:	4b5c      	ldr	r3, [pc, #368]	@ (800241c <MX_TIM1_Init+0x1c4>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024 - 1;
 80022ae:	4b5b      	ldr	r3, [pc, #364]	@ (800241c <MX_TIM1_Init+0x1c4>)
 80022b0:	4a5c      	ldr	r2, [pc, #368]	@ (8002424 <MX_TIM1_Init+0x1cc>)
 80022b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80022b4:	4b59      	ldr	r3, [pc, #356]	@ (800241c <MX_TIM1_Init+0x1c4>)
 80022b6:	2280      	movs	r2, #128	@ 0x80
 80022b8:	0052      	lsls	r2, r2, #1
 80022ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022bc:	4b57      	ldr	r3, [pc, #348]	@ (800241c <MX_TIM1_Init+0x1c4>)
 80022be:	2200      	movs	r2, #0
 80022c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022c2:	4b56      	ldr	r3, [pc, #344]	@ (800241c <MX_TIM1_Init+0x1c4>)
 80022c4:	2280      	movs	r2, #128	@ 0x80
 80022c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022c8:	4b54      	ldr	r3, [pc, #336]	@ (800241c <MX_TIM1_Init+0x1c4>)
 80022ca:	0018      	movs	r0, r3
 80022cc:	f008 f862 	bl	800a394 <HAL_TIM_Base_Init>
 80022d0:	1e03      	subs	r3, r0, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80022d4:	f000 fb22 	bl	800291c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d8:	2160      	movs	r1, #96	@ 0x60
 80022da:	187b      	adds	r3, r7, r1
 80022dc:	2280      	movs	r2, #128	@ 0x80
 80022de:	0152      	lsls	r2, r2, #5
 80022e0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022e2:	187a      	adds	r2, r7, r1
 80022e4:	4b4d      	ldr	r3, [pc, #308]	@ (800241c <MX_TIM1_Init+0x1c4>)
 80022e6:	0011      	movs	r1, r2
 80022e8:	0018      	movs	r0, r3
 80022ea:	f009 f9d1 	bl	800b690 <HAL_TIM_ConfigClockSource>
 80022ee:	1e03      	subs	r3, r0, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80022f2:	f000 fb13 	bl	800291c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022f6:	4b49      	ldr	r3, [pc, #292]	@ (800241c <MX_TIM1_Init+0x1c4>)
 80022f8:	0018      	movs	r0, r3
 80022fa:	f008 fbb1 	bl	800aa60 <HAL_TIM_PWM_Init>
 80022fe:	1e03      	subs	r3, r0, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8002302:	f000 fb0b 	bl	800291c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002306:	2154      	movs	r1, #84	@ 0x54
 8002308:	187b      	adds	r3, r7, r1
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800230e:	187b      	adds	r3, r7, r1
 8002310:	2200      	movs	r2, #0
 8002312:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002314:	187b      	adds	r3, r7, r1
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800231a:	187a      	adds	r2, r7, r1
 800231c:	4b3f      	ldr	r3, [pc, #252]	@ (800241c <MX_TIM1_Init+0x1c4>)
 800231e:	0011      	movs	r1, r2
 8002320:	0018      	movs	r0, r3
 8002322:	f00a f96f 	bl	800c604 <HAL_TIMEx_MasterConfigSynchronization>
 8002326:	1e03      	subs	r3, r0, #0
 8002328:	d001      	beq.n	800232e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800232a:	f000 faf7 	bl	800291c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800232e:	2138      	movs	r1, #56	@ 0x38
 8002330:	187b      	adds	r3, r7, r1
 8002332:	2260      	movs	r2, #96	@ 0x60
 8002334:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002336:	187b      	adds	r3, r7, r1
 8002338:	2200      	movs	r2, #0
 800233a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800233c:	187b      	adds	r3, r7, r1
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002342:	187b      	adds	r3, r7, r1
 8002344:	2200      	movs	r2, #0
 8002346:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002348:	187b      	adds	r3, r7, r1
 800234a:	2200      	movs	r2, #0
 800234c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800234e:	187b      	adds	r3, r7, r1
 8002350:	2200      	movs	r2, #0
 8002352:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002354:	187b      	adds	r3, r7, r1
 8002356:	2200      	movs	r2, #0
 8002358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800235a:	1879      	adds	r1, r7, r1
 800235c:	4b2f      	ldr	r3, [pc, #188]	@ (800241c <MX_TIM1_Init+0x1c4>)
 800235e:	2204      	movs	r2, #4
 8002360:	0018      	movs	r0, r3
 8002362:	f009 f895 	bl	800b490 <HAL_TIM_PWM_ConfigChannel>
 8002366:	1e03      	subs	r3, r0, #0
 8002368:	d001      	beq.n	800236e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800236a:	f000 fad7 	bl	800291c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 800236e:	4b2b      	ldr	r3, [pc, #172]	@ (800241c <MX_TIM1_Init+0x1c4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699a      	ldr	r2, [r3, #24]
 8002374:	4b29      	ldr	r3, [pc, #164]	@ (800241c <MX_TIM1_Init+0x1c4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	492b      	ldr	r1, [pc, #172]	@ (8002428 <MX_TIM1_Init+0x1d0>)
 800237a:	400a      	ands	r2, r1
 800237c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800237e:	2338      	movs	r3, #56	@ 0x38
 8002380:	18f9      	adds	r1, r7, r3
 8002382:	4b26      	ldr	r3, [pc, #152]	@ (800241c <MX_TIM1_Init+0x1c4>)
 8002384:	220c      	movs	r2, #12
 8002386:	0018      	movs	r0, r3
 8002388:	f009 f882 	bl	800b490 <HAL_TIM_PWM_ConfigChannel>
 800238c:	1e03      	subs	r3, r0, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8002390:	f000 fac4 	bl	800291c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8002394:	4b21      	ldr	r3, [pc, #132]	@ (800241c <MX_TIM1_Init+0x1c4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	69da      	ldr	r2, [r3, #28]
 800239a:	4b20      	ldr	r3, [pc, #128]	@ (800241c <MX_TIM1_Init+0x1c4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4922      	ldr	r1, [pc, #136]	@ (8002428 <MX_TIM1_Init+0x1d0>)
 80023a0:	400a      	ands	r2, r1
 80023a2:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	2200      	movs	r2, #0
 80023ae:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	2200      	movs	r2, #0
 80023ba:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	2200      	movs	r2, #0
 80023c0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	2280      	movs	r2, #128	@ 0x80
 80023c6:	0192      	lsls	r2, r2, #6
 80023c8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	2200      	movs	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80023d0:	1d3b      	adds	r3, r7, #4
 80023d2:	2200      	movs	r2, #0
 80023d4:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	2200      	movs	r2, #0
 80023da:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	2280      	movs	r2, #128	@ 0x80
 80023e0:	0492      	lsls	r2, r2, #18
 80023e2:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	2200      	movs	r2, #0
 80023e8:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80023ea:	1d3b      	adds	r3, r7, #4
 80023ec:	2200      	movs	r2, #0
 80023ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023f0:	1d3b      	adds	r3, r7, #4
 80023f2:	2200      	movs	r2, #0
 80023f4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023f6:	1d3a      	adds	r2, r7, #4
 80023f8:	4b08      	ldr	r3, [pc, #32]	@ (800241c <MX_TIM1_Init+0x1c4>)
 80023fa:	0011      	movs	r1, r2
 80023fc:	0018      	movs	r0, r3
 80023fe:	f00a f969 	bl	800c6d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002402:	1e03      	subs	r3, r0, #0
 8002404:	d001      	beq.n	800240a <MX_TIM1_Init+0x1b2>
  {
    Error_Handler();
 8002406:	f000 fa89 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800240a:	4b04      	ldr	r3, [pc, #16]	@ (800241c <MX_TIM1_Init+0x1c4>)
 800240c:	0018      	movs	r0, r3
 800240e:	f003 fc25 	bl	8005c5c <HAL_TIM_MspPostInit>

}
 8002412:	46c0      	nop			@ (mov r8, r8)
 8002414:	46bd      	mov	sp, r7
 8002416:	b01c      	add	sp, #112	@ 0x70
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			@ (mov r8, r8)
 800241c:	20000a44 	.word	0x20000a44
 8002420:	40012c00 	.word	0x40012c00
 8002424:	000003ff 	.word	0x000003ff
 8002428:	fffff7ff 	.word	0xfffff7ff

0800242c <MX_TIM17_Init>:

void MX_TIM17_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b094      	sub	sp, #80	@ 0x50
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002432:	2334      	movs	r3, #52	@ 0x34
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	0018      	movs	r0, r3
 8002438:	231c      	movs	r3, #28
 800243a:	001a      	movs	r2, r3
 800243c:	2100      	movs	r1, #0
 800243e:	f00b fe3f 	bl	800e0c0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002442:	003b      	movs	r3, r7
 8002444:	0018      	movs	r0, r3
 8002446:	2334      	movs	r3, #52	@ 0x34
 8002448:	001a      	movs	r2, r3
 800244a:	2100      	movs	r1, #0
 800244c:	f00b fe38 	bl	800e0c0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002450:	4b3a      	ldr	r3, [pc, #232]	@ (800253c <MX_TIM17_Init+0x110>)
 8002452:	4a3b      	ldr	r2, [pc, #236]	@ (8002540 <MX_TIM17_Init+0x114>)
 8002454:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 8002456:	4b39      	ldr	r3, [pc, #228]	@ (800253c <MX_TIM17_Init+0x110>)
 8002458:	4a3a      	ldr	r2, [pc, #232]	@ (8002544 <MX_TIM17_Init+0x118>)
 800245a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245c:	4b37      	ldr	r3, [pc, #220]	@ (800253c <MX_TIM17_Init+0x110>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024 - 1;
 8002462:	4b36      	ldr	r3, [pc, #216]	@ (800253c <MX_TIM17_Init+0x110>)
 8002464:	4a38      	ldr	r2, [pc, #224]	@ (8002548 <MX_TIM17_Init+0x11c>)
 8002466:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002468:	4b34      	ldr	r3, [pc, #208]	@ (800253c <MX_TIM17_Init+0x110>)
 800246a:	2280      	movs	r2, #128	@ 0x80
 800246c:	0092      	lsls	r2, r2, #2
 800246e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002470:	4b32      	ldr	r3, [pc, #200]	@ (800253c <MX_TIM17_Init+0x110>)
 8002472:	2200      	movs	r2, #0
 8002474:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002476:	4b31      	ldr	r3, [pc, #196]	@ (800253c <MX_TIM17_Init+0x110>)
 8002478:	2280      	movs	r2, #128	@ 0x80
 800247a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800247c:	4b2f      	ldr	r3, [pc, #188]	@ (800253c <MX_TIM17_Init+0x110>)
 800247e:	0018      	movs	r0, r3
 8002480:	f007 ff88 	bl	800a394 <HAL_TIM_Base_Init>
 8002484:	1e03      	subs	r3, r0, #0
 8002486:	d001      	beq.n	800248c <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8002488:	f000 fa48 	bl	800291c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 800248c:	4b2b      	ldr	r3, [pc, #172]	@ (800253c <MX_TIM17_Init+0x110>)
 800248e:	0018      	movs	r0, r3
 8002490:	f008 f886 	bl	800a5a0 <HAL_TIM_OC_Init>
 8002494:	1e03      	subs	r3, r0, #0
 8002496:	d001      	beq.n	800249c <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8002498:	f000 fa40 	bl	800291c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800249c:	2134      	movs	r1, #52	@ 0x34
 800249e:	187b      	adds	r3, r7, r1
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 512 - 1;
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	4a29      	ldr	r2, [pc, #164]	@ (800254c <MX_TIM17_Init+0x120>)
 80024a8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024aa:	187b      	adds	r3, r7, r1
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024b0:	187b      	adds	r3, r7, r1
 80024b2:	2200      	movs	r2, #0
 80024b4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024b6:	187b      	adds	r3, r7, r1
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024bc:	187b      	adds	r3, r7, r1
 80024be:	2200      	movs	r2, #0
 80024c0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024c2:	187b      	adds	r3, r7, r1
 80024c4:	2200      	movs	r2, #0
 80024c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024c8:	1879      	adds	r1, r7, r1
 80024ca:	4b1c      	ldr	r3, [pc, #112]	@ (800253c <MX_TIM17_Init+0x110>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	0018      	movs	r0, r3
 80024d0:	f008 feda 	bl	800b288 <HAL_TIM_OC_ConfigChannel>
 80024d4:	1e03      	subs	r3, r0, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 80024d8:	f000 fa20 	bl	800291c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 80024dc:	4b17      	ldr	r3, [pc, #92]	@ (800253c <MX_TIM17_Init+0x110>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699a      	ldr	r2, [r3, #24]
 80024e2:	4b16      	ldr	r3, [pc, #88]	@ (800253c <MX_TIM17_Init+0x110>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2108      	movs	r1, #8
 80024e8:	430a      	orrs	r2, r1
 80024ea:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024ec:	003b      	movs	r3, r7
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024f2:	003b      	movs	r3, r7
 80024f4:	2200      	movs	r2, #0
 80024f6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024f8:	003b      	movs	r3, r7
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024fe:	003b      	movs	r3, r7
 8002500:	2200      	movs	r2, #0
 8002502:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002504:	003b      	movs	r3, r7
 8002506:	2200      	movs	r2, #0
 8002508:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800250a:	003b      	movs	r3, r7
 800250c:	2280      	movs	r2, #128	@ 0x80
 800250e:	0192      	lsls	r2, r2, #6
 8002510:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002512:	003b      	movs	r3, r7
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002518:	003b      	movs	r3, r7
 800251a:	2200      	movs	r2, #0
 800251c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800251e:	003a      	movs	r2, r7
 8002520:	4b06      	ldr	r3, [pc, #24]	@ (800253c <MX_TIM17_Init+0x110>)
 8002522:	0011      	movs	r1, r2
 8002524:	0018      	movs	r0, r3
 8002526:	f00a f8d5 	bl	800c6d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800252a:	1e03      	subs	r3, r0, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 800252e:	f000 f9f5 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002532:	46c0      	nop			@ (mov r8, r8)
 8002534:	46bd      	mov	sp, r7
 8002536:	b014      	add	sp, #80	@ 0x50
 8002538:	bd80      	pop	{r7, pc}
 800253a:	46c0      	nop			@ (mov r8, r8)
 800253c:	20000754 	.word	0x20000754
 8002540:	40014800 	.word	0x40014800
 8002544:	00007fff 	.word	0x00007fff
 8002548:	000003ff 	.word	0x000003ff
 800254c:	000001ff 	.word	0x000001ff

08002550 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPTIM1_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002554:	4b17      	ldr	r3, [pc, #92]	@ (80025b4 <MX_LPTIM1_Init+0x64>)
 8002556:	4a18      	ldr	r2, [pc, #96]	@ (80025b8 <MX_LPTIM1_Init+0x68>)
 8002558:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800255a:	4b16      	ldr	r3, [pc, #88]	@ (80025b4 <MX_LPTIM1_Init+0x64>)
 800255c:	2200      	movs	r2, #0
 800255e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8002560:	4b14      	ldr	r3, [pc, #80]	@ (80025b4 <MX_LPTIM1_Init+0x64>)
 8002562:	22e0      	movs	r2, #224	@ 0xe0
 8002564:	0112      	lsls	r2, r2, #4
 8002566:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002568:	4b12      	ldr	r3, [pc, #72]	@ (80025b4 <MX_LPTIM1_Init+0x64>)
 800256a:	4a14      	ldr	r2, [pc, #80]	@ (80025bc <MX_LPTIM1_Init+0x6c>)
 800256c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800256e:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <MX_LPTIM1_Init+0x64>)
 8002570:	2200      	movs	r2, #0
 8002572:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8002574:	4b0f      	ldr	r3, [pc, #60]	@ (80025b4 <MX_LPTIM1_Init+0x64>)
 8002576:	2280      	movs	r2, #128	@ 0x80
 8002578:	03d2      	lsls	r2, r2, #15
 800257a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800257c:	4b0d      	ldr	r3, [pc, #52]	@ (80025b4 <MX_LPTIM1_Init+0x64>)
 800257e:	2200      	movs	r2, #0
 8002580:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002582:	4b0c      	ldr	r3, [pc, #48]	@ (80025b4 <MX_LPTIM1_Init+0x64>)
 8002584:	2200      	movs	r2, #0
 8002586:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002588:	4b0a      	ldr	r3, [pc, #40]	@ (80025b4 <MX_LPTIM1_Init+0x64>)
 800258a:	2200      	movs	r2, #0
 800258c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800258e:	4b09      	ldr	r3, [pc, #36]	@ (80025b4 <MX_LPTIM1_Init+0x64>)
 8002590:	0018      	movs	r0, r3
 8002592:	f006 fc67 	bl	8008e64 <HAL_LPTIM_Init>
 8002596:	1e03      	subs	r3, r0, #0
 8002598:	d001      	beq.n	800259e <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 800259a:	f000 f9bf 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

  HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 2);
 800259e:	2202      	movs	r2, #2
 80025a0:	2102      	movs	r1, #2
 80025a2:	2011      	movs	r0, #17
 80025a4:	f005 fd90 	bl	80080c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80025a8:	2011      	movs	r0, #17
 80025aa:	f005 fda2 	bl	80080f2 <HAL_NVIC_EnableIRQ>
}
 80025ae:	46c0      	nop			@ (mov r8, r8)
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000c84 	.word	0x20000c84
 80025b8:	40007c00 	.word	0x40007c00
 80025bc:	0000ffff 	.word	0x0000ffff

080025c0 <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	0018      	movs	r0, r3
 80025ca:	231c      	movs	r3, #28
 80025cc:	001a      	movs	r2, r3
 80025ce:	2100      	movs	r1, #0
 80025d0:	f00b fd76 	bl	800e0c0 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80025d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002654 <MX_TIM14_Init+0x94>)
 80025d6:	4a20      	ldr	r2, [pc, #128]	@ (8002658 <MX_TIM14_Init+0x98>)
 80025d8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (512 * 64) - 1;
 80025da:	4b1e      	ldr	r3, [pc, #120]	@ (8002654 <MX_TIM14_Init+0x94>)
 80025dc:	4a1f      	ldr	r2, [pc, #124]	@ (800265c <MX_TIM14_Init+0x9c>)
 80025de:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002654 <MX_TIM14_Init+0x94>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = led_blink_period;
 80025e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002660 <MX_TIM14_Init+0xa0>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002654 <MX_TIM14_Init+0x94>)
 80025ec:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80025ee:	4b19      	ldr	r3, [pc, #100]	@ (8002654 <MX_TIM14_Init+0x94>)
 80025f0:	2280      	movs	r2, #128	@ 0x80
 80025f2:	0092      	lsls	r2, r2, #2
 80025f4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f6:	4b17      	ldr	r3, [pc, #92]	@ (8002654 <MX_TIM14_Init+0x94>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80025fc:	4b15      	ldr	r3, [pc, #84]	@ (8002654 <MX_TIM14_Init+0x94>)
 80025fe:	0018      	movs	r0, r3
 8002600:	f007 fec8 	bl	800a394 <HAL_TIM_Base_Init>
 8002604:	1e03      	subs	r3, r0, #0
 8002606:	d001      	beq.n	800260c <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8002608:	f000 f988 	bl	800291c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 800260c:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <MX_TIM14_Init+0x94>)
 800260e:	0018      	movs	r0, r3
 8002610:	f007 ffc6 	bl	800a5a0 <HAL_TIM_OC_Init>
 8002614:	1e03      	subs	r3, r0, #0
 8002616:	d001      	beq.n	800261c <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8002618:	f000 f980 	bl	800291c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800261c:	1d3b      	adds	r3, r7, #4
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = led_blink_period - 1;
 8002622:	4b0f      	ldr	r3, [pc, #60]	@ (8002660 <MX_TIM14_Init+0xa0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	1e5a      	subs	r2, r3, #1
 8002628:	1d3b      	adds	r3, r7, #4
 800262a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002632:	1d3b      	adds	r3, r7, #4
 8002634:	2200      	movs	r2, #0
 8002636:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002638:	1d39      	adds	r1, r7, #4
 800263a:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <MX_TIM14_Init+0x94>)
 800263c:	2200      	movs	r2, #0
 800263e:	0018      	movs	r0, r3
 8002640:	f008 fe22 	bl	800b288 <HAL_TIM_OC_ConfigChannel>
 8002644:	1e03      	subs	r3, r0, #0
 8002646:	d001      	beq.n	800264c <MX_TIM14_Init+0x8c>
  {
    Error_Handler();
 8002648:	f000 f968 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800264c:	46c0      	nop			@ (mov r8, r8)
 800264e:	46bd      	mov	sp, r7
 8002650:	b008      	add	sp, #32
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20000698 	.word	0x20000698
 8002658:	40002000 	.word	0x40002000
 800265c:	00007fff 	.word	0x00007fff
 8002660:	20000020 	.word	0x20000020

08002664 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8002668:	4b15      	ldr	r3, [pc, #84]	@ (80026c0 <MX_USART2_UART_Init+0x5c>)
 800266a:	4a16      	ldr	r2, [pc, #88]	@ (80026c4 <MX_USART2_UART_Init+0x60>)
 800266c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 800266e:	4b14      	ldr	r3, [pc, #80]	@ (80026c0 <MX_USART2_UART_Init+0x5c>)
 8002670:	4a15      	ldr	r2, [pc, #84]	@ (80026c8 <MX_USART2_UART_Init+0x64>)
 8002672:	605a      	str	r2, [r3, #4]
  //huart2.Init.BaudRate = 57600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002674:	4b12      	ldr	r3, [pc, #72]	@ (80026c0 <MX_USART2_UART_Init+0x5c>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800267a:	4b11      	ldr	r3, [pc, #68]	@ (80026c0 <MX_USART2_UART_Init+0x5c>)
 800267c:	2200      	movs	r2, #0
 800267e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002680:	4b0f      	ldr	r3, [pc, #60]	@ (80026c0 <MX_USART2_UART_Init+0x5c>)
 8002682:	2200      	movs	r2, #0
 8002684:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002686:	4b0e      	ldr	r3, [pc, #56]	@ (80026c0 <MX_USART2_UART_Init+0x5c>)
 8002688:	220c      	movs	r2, #12
 800268a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800268c:	4b0c      	ldr	r3, [pc, #48]	@ (80026c0 <MX_USART2_UART_Init+0x5c>)
 800268e:	2200      	movs	r2, #0
 8002690:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002692:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <MX_USART2_UART_Init+0x5c>)
 8002694:	2200      	movs	r2, #0
 8002696:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002698:	4b09      	ldr	r3, [pc, #36]	@ (80026c0 <MX_USART2_UART_Init+0x5c>)
 800269a:	2200      	movs	r2, #0
 800269c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800269e:	4b08      	ldr	r3, [pc, #32]	@ (80026c0 <MX_USART2_UART_Init+0x5c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026a4:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <MX_USART2_UART_Init+0x5c>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026aa:	4b05      	ldr	r3, [pc, #20]	@ (80026c0 <MX_USART2_UART_Init+0x5c>)
 80026ac:	0018      	movs	r0, r3
 80026ae:	f00a f8cd 	bl	800c84c <HAL_UART_Init>
 80026b2:	1e03      	subs	r3, r0, #0
 80026b4:	d001      	beq.n	80026ba <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80026b6:	f000 f931 	bl	800291c <Error_Handler>
  }
}
 80026ba:	46c0      	nop			@ (mov r8, r8)
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000b00 	.word	0x20000b00
 80026c4:	40004400 	.word	0x40004400
 80026c8:	00007a12 	.word	0x00007a12

080026cc <MX_DMA_Init>:
    Error_Handler();
  }
}

void MX_DMA_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026d2:	4b10      	ldr	r3, [pc, #64]	@ (8002714 <MX_DMA_Init+0x48>)
 80026d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002714 <MX_DMA_Init+0x48>)
 80026d8:	2101      	movs	r1, #1
 80026da:	430a      	orrs	r2, r1
 80026dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80026de:	4b0d      	ldr	r3, [pc, #52]	@ (8002714 <MX_DMA_Init+0x48>)
 80026e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e2:	2201      	movs	r2, #1
 80026e4:	4013      	ands	r3, r2
 80026e6:	607b      	str	r3, [r7, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */ // - ADC
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2100      	movs	r1, #0
 80026ee:	2009      	movs	r0, #9
 80026f0:	f005 fcea 	bl	80080c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80026f4:	2009      	movs	r0, #9
 80026f6:	f005 fcfc 	bl	80080f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */ // - UART RX is ch2, TX is ch3
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 2);
 80026fa:	2202      	movs	r2, #2
 80026fc:	2102      	movs	r1, #2
 80026fe:	200a      	movs	r0, #10
 8002700:	f005 fce2 	bl	80080c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002704:	200a      	movs	r0, #10
 8002706:	f005 fcf4 	bl	80080f2 <HAL_NVIC_EnableIRQ>

}
 800270a:	46c0      	nop			@ (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	b002      	add	sp, #8
 8002710:	bd80      	pop	{r7, pc}
 8002712:	46c0      	nop			@ (mov r8, r8)
 8002714:	40021000 	.word	0x40021000

08002718 <MX_GPIO_Init>:


void MX_GPIO_Init(void)
{
 8002718:	b590      	push	{r4, r7, lr}
 800271a:	b08b      	sub	sp, #44	@ 0x2c
 800271c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271e:	2414      	movs	r4, #20
 8002720:	193b      	adds	r3, r7, r4
 8002722:	0018      	movs	r0, r3
 8002724:	2314      	movs	r3, #20
 8002726:	001a      	movs	r2, r3
 8002728:	2100      	movs	r1, #0
 800272a:	f00b fcc9 	bl	800e0c0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800272e:	4b77      	ldr	r3, [pc, #476]	@ (800290c <MX_GPIO_Init+0x1f4>)
 8002730:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002732:	4b76      	ldr	r3, [pc, #472]	@ (800290c <MX_GPIO_Init+0x1f4>)
 8002734:	2104      	movs	r1, #4
 8002736:	430a      	orrs	r2, r1
 8002738:	635a      	str	r2, [r3, #52]	@ 0x34
 800273a:	4b74      	ldr	r3, [pc, #464]	@ (800290c <MX_GPIO_Init+0x1f4>)
 800273c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800273e:	2204      	movs	r2, #4
 8002740:	4013      	ands	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002746:	4b71      	ldr	r3, [pc, #452]	@ (800290c <MX_GPIO_Init+0x1f4>)
 8002748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800274a:	4b70      	ldr	r3, [pc, #448]	@ (800290c <MX_GPIO_Init+0x1f4>)
 800274c:	2120      	movs	r1, #32
 800274e:	430a      	orrs	r2, r1
 8002750:	635a      	str	r2, [r3, #52]	@ 0x34
 8002752:	4b6e      	ldr	r3, [pc, #440]	@ (800290c <MX_GPIO_Init+0x1f4>)
 8002754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002756:	2220      	movs	r2, #32
 8002758:	4013      	ands	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800275e:	4b6b      	ldr	r3, [pc, #428]	@ (800290c <MX_GPIO_Init+0x1f4>)
 8002760:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002762:	4b6a      	ldr	r3, [pc, #424]	@ (800290c <MX_GPIO_Init+0x1f4>)
 8002764:	2101      	movs	r1, #1
 8002766:	430a      	orrs	r2, r1
 8002768:	635a      	str	r2, [r3, #52]	@ 0x34
 800276a:	4b68      	ldr	r3, [pc, #416]	@ (800290c <MX_GPIO_Init+0x1f4>)
 800276c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800276e:	2201      	movs	r2, #1
 8002770:	4013      	ands	r3, r2
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002776:	4b65      	ldr	r3, [pc, #404]	@ (800290c <MX_GPIO_Init+0x1f4>)
 8002778:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800277a:	4b64      	ldr	r3, [pc, #400]	@ (800290c <MX_GPIO_Init+0x1f4>)
 800277c:	2102      	movs	r1, #2
 800277e:	430a      	orrs	r2, r1
 8002780:	635a      	str	r2, [r3, #52]	@ 0x34
 8002782:	4b62      	ldr	r3, [pc, #392]	@ (800290c <MX_GPIO_Init+0x1f4>)
 8002784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002786:	2202      	movs	r2, #2
 8002788:	4013      	ands	r3, r2
 800278a:	607b      	str	r3, [r7, #4]
 800278c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  /*HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, GPIO_PIN_RESET);*/

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800278e:	4b60      	ldr	r3, [pc, #384]	@ (8002910 <MX_GPIO_Init+0x1f8>)
 8002790:	2200      	movs	r2, #0
 8002792:	2140      	movs	r1, #64	@ 0x40
 8002794:	0018      	movs	r0, r3
 8002796:	f006 fb1e 	bl	8008dd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 800279a:	193b      	adds	r3, r7, r4
 800279c:	2204      	movs	r2, #4
 800279e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027a0:	193b      	adds	r3, r7, r4
 80027a2:	2288      	movs	r2, #136	@ 0x88
 80027a4:	0352      	lsls	r2, r2, #13
 80027a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	193b      	adds	r3, r7, r4
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80027ae:	193b      	adds	r3, r7, r4
 80027b0:	4a58      	ldr	r2, [pc, #352]	@ (8002914 <MX_GPIO_Init+0x1fc>)
 80027b2:	0019      	movs	r1, r3
 80027b4:	0010      	movs	r0, r2
 80027b6:	f006 f98d 	bl	8008ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_OUT_Pin */
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 80027ba:	0021      	movs	r1, r4
 80027bc:	193b      	adds	r3, r7, r4
 80027be:	2280      	movs	r2, #128	@ 0x80
 80027c0:	0092      	lsls	r2, r2, #2
 80027c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c4:	000c      	movs	r4, r1
 80027c6:	193b      	adds	r3, r7, r4
 80027c8:	2201      	movs	r2, #1
 80027ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	193b      	adds	r3, r7, r4
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d2:	193b      	adds	r3, r7, r4
 80027d4:	2200      	movs	r2, #0
 80027d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 80027d8:	193a      	adds	r2, r7, r4
 80027da:	23a0      	movs	r3, #160	@ 0xa0
 80027dc:	05db      	lsls	r3, r3, #23
 80027de:	0011      	movs	r1, r2
 80027e0:	0018      	movs	r0, r3
 80027e2:	f006 f977 	bl	8008ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80027e6:	193b      	adds	r3, r7, r4
 80027e8:	2240      	movs	r2, #64	@ 0x40
 80027ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ec:	193b      	adds	r3, r7, r4
 80027ee:	2201      	movs	r2, #1
 80027f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	193b      	adds	r3, r7, r4
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f8:	193b      	adds	r3, r7, r4
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80027fe:	193b      	adds	r3, r7, r4
 8002800:	4a43      	ldr	r2, [pc, #268]	@ (8002910 <MX_GPIO_Init+0x1f8>)
 8002802:	0019      	movs	r1, r3
 8002804:	0010      	movs	r0, r2
 8002806:	f006 f965 	bl	8008ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_IN_Pin */
  GPIO_InitStruct.Pin = SW_IN_Pin;
 800280a:	193b      	adds	r3, r7, r4
 800280c:	2280      	movs	r2, #128	@ 0x80
 800280e:	00d2      	lsls	r2, r2, #3
 8002810:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002812:	193b      	adds	r3, r7, r4
 8002814:	2200      	movs	r2, #0
 8002816:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002818:	193b      	adds	r3, r7, r4
 800281a:	2201      	movs	r2, #1
 800281c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 800281e:	193a      	adds	r2, r7, r4
 8002820:	23a0      	movs	r3, #160	@ 0xa0
 8002822:	05db      	lsls	r3, r3, #23
 8002824:	0011      	movs	r1, r2
 8002826:	0018      	movs	r0, r3
 8002828:	f006 f954 	bl	8008ad4 <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_Pin;
 800282c:	193b      	adds	r3, r7, r4
 800282e:	2240      	movs	r2, #64	@ 0x40
 8002830:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002832:	193b      	adds	r3, r7, r4
 8002834:	2201      	movs	r2, #1
 8002836:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	193b      	adds	r3, r7, r4
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283e:	193b      	adds	r3, r7, r4
 8002840:	2200      	movs	r2, #0
 8002842:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8002844:	193b      	adds	r3, r7, r4
 8002846:	4a34      	ldr	r2, [pc, #208]	@ (8002918 <MX_GPIO_Init+0x200>)
 8002848:	0019      	movs	r1, r3
 800284a:	0010      	movs	r0, r2
 800284c:	f006 f942 	bl	8008ad4 <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_2_Pin;
 8002850:	193b      	adds	r3, r7, r4
 8002852:	2210      	movs	r2, #16
 8002854:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002856:	193b      	adds	r3, r7, r4
 8002858:	2201      	movs	r2, #1
 800285a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	193b      	adds	r3, r7, r4
 800285e:	2200      	movs	r2, #0
 8002860:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	193b      	adds	r3, r7, r4
 8002864:	2200      	movs	r2, #0
 8002866:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_2_GPIO_Port, &GPIO_InitStruct);
 8002868:	193b      	adds	r3, r7, r4
 800286a:	4a2b      	ldr	r2, [pc, #172]	@ (8002918 <MX_GPIO_Init+0x200>)
 800286c:	0019      	movs	r1, r3
 800286e:	0010      	movs	r0, r2
 8002870:	f006 f930 	bl	8008ad4 <HAL_GPIO_Init>

  //Configure CLK IN Pin - i.e. dedicated clock inputs to use this pin rather than the Tap-tempo switch debouncing SW IN pin
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002874:	0021      	movs	r1, r4
 8002876:	187b      	adds	r3, r7, r1
 8002878:	2280      	movs	r2, #128	@ 0x80
 800287a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800287c:	187b      	adds	r3, r7, r1
 800287e:	22c4      	movs	r2, #196	@ 0xc4
 8002880:	0392      	lsls	r2, r2, #14
 8002882:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; //seems to improve stuff for CLK IN??
 8002884:	000c      	movs	r4, r1
 8002886:	193b      	adds	r3, r7, r4
 8002888:	2202      	movs	r2, #2
 800288a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288c:	193b      	adds	r3, r7, r4
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8002892:	193b      	adds	r3, r7, r4
 8002894:	4a20      	ldr	r2, [pc, #128]	@ (8002918 <MX_GPIO_Init+0x200>)
 8002896:	0019      	movs	r1, r3
 8002898:	0010      	movs	r0, r2
 800289a:	f006 f91b 	bl	8008ad4 <HAL_GPIO_Init>

  //Configure hacked on pot high leg -> i.e. it is to be set high
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 800289e:	0021      	movs	r1, r4
 80028a0:	187b      	adds	r3, r7, r1
 80028a2:	2280      	movs	r2, #128	@ 0x80
 80028a4:	0152      	lsls	r2, r2, #5
 80028a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a8:	000c      	movs	r4, r1
 80028aa:	193b      	adds	r3, r7, r4
 80028ac:	2201      	movs	r2, #1
 80028ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	193b      	adds	r3, r7, r4
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b6:	193b      	adds	r3, r7, r4
 80028b8:	2200      	movs	r2, #0
 80028ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 80028bc:	193a      	adds	r2, r7, r4
 80028be:	23a0      	movs	r3, #160	@ 0xa0
 80028c0:	05db      	lsls	r3, r3, #23
 80028c2:	0011      	movs	r1, r2
 80028c4:	0018      	movs	r0, r3
 80028c6:	f006 f905 	bl	8008ad4 <HAL_GPIO_Init>

  //Configure hacked on pot low leg -> i.e. it is to be set low
  GPIO_InitStruct.Pin = HACK_POT_LOW_Pin;
 80028ca:	0021      	movs	r1, r4
 80028cc:	187b      	adds	r3, r7, r1
 80028ce:	2280      	movs	r2, #128	@ 0x80
 80028d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d2:	187b      	adds	r3, r7, r1
 80028d4:	2201      	movs	r2, #1
 80028d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	187b      	adds	r3, r7, r1
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028de:	187b      	adds	r3, r7, r1
 80028e0:	2200      	movs	r2, #0
 80028e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_LOW_GPIO_Port, &GPIO_InitStruct);
 80028e4:	187a      	adds	r2, r7, r1
 80028e6:	23a0      	movs	r3, #160	@ 0xa0
 80028e8:	05db      	lsls	r3, r3, #23
 80028ea:	0011      	movs	r1, r2
 80028ec:	0018      	movs	r0, r3
 80028ee:	f006 f8f1 	bl	8008ad4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 2);
 80028f2:	2202      	movs	r2, #2
 80028f4:	2102      	movs	r1, #2
 80028f6:	2007      	movs	r0, #7
 80028f8:	f005 fbe6 	bl	80080c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80028fc:	2007      	movs	r0, #7
 80028fe:	f005 fbf8 	bl	80080f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002902:	46c0      	nop			@ (mov r8, r8)
 8002904:	46bd      	mov	sp, r7
 8002906:	b00b      	add	sp, #44	@ 0x2c
 8002908:	bd90      	pop	{r4, r7, pc}
 800290a:	46c0      	nop			@ (mov r8, r8)
 800290c:	40021000 	.word	0x40021000
 8002910:	50000800 	.word	0x50000800
 8002914:	50001400 	.word	0x50001400
 8002918:	50000400 	.word	0x50000400

0800291c <Error_Handler>:

void Error_Handler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002920:	b672      	cpsid	i
}
 8002922:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002924:	46c0      	nop			@ (mov r8, r8)
 8002926:	e7fd      	b.n	8002924 <Error_Handler+0x8>

08002928 <System_Init>:
  {

  }
}

void System_Init(void){
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800292c:	f004 f84e 	bl	80069cc <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8002930:	f7ff f9e4 	bl	8001cfc <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002934:	f7ff fef0 	bl	8002718 <MX_GPIO_Init>
	MX_DMA_Init();
 8002938:	f7ff fec8 	bl	80026cc <MX_DMA_Init>
	MX_USART2_UART_Init();
 800293c:	f7ff fe92 	bl	8002664 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8002940:	f7ff fa3a 	bl	8001db8 <MX_ADC1_Init>
	MX_TIM16_Init(); //Frequency Gen.
 8002944:	f7ff faf8 	bl	8001f38 <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement is TIM2_ch1
 8002948:	f7ff fb82 	bl	8002050 <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse is TIM3_ch1
 800294c:	f7ff fbfc 	bl	8002148 <MX_TIM3_Init>
	MX_TIM1_Init(); //PWM Gen. Main/Secondary Oscillator on ch2/ch4
 8002950:	f7ff fc82 	bl	8002258 <MX_TIM1_Init>
	MX_TIM17_Init();
 8002954:	f7ff fd6a 	bl	800242c <MX_TIM17_Init>
	MX_TIM14_Init();
 8002958:	f7ff fe32 	bl	80025c0 <MX_TIM14_Init>
	//MX_IWDG_Init(); fucks up stuff - to be config'd
	MX_LPTIM1_Init(); //Tap Tempo checking/debouncing timer
 800295c:	f7ff fdf8 	bl	8002550 <MX_LPTIM1_Init>

	//Calibrate ADC - DO NOT MOVE TO BEFORE OTHER CONFIG ABOVE
	HAL_ADCEx_Calibration_Start(&hadc1);
 8002960:	4b21      	ldr	r3, [pc, #132]	@ (80029e8 <System_Init+0xc0>)
 8002962:	0018      	movs	r0, r3
 8002964:	f005 f9ce 	bl	8007d04 <HAL_ADCEx_Calibration_Start>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM16_callback);
 8002968:	4a20      	ldr	r2, [pc, #128]	@ (80029ec <System_Init+0xc4>)
 800296a:	4b21      	ldr	r3, [pc, #132]	@ (80029f0 <System_Init+0xc8>)
 800296c:	210e      	movs	r1, #14
 800296e:	0018      	movs	r0, r3
 8002970:	f008 ffe8 	bl	800b944 <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 8002974:	4a1f      	ldr	r2, [pc, #124]	@ (80029f4 <System_Init+0xcc>)
 8002976:	4b1c      	ldr	r3, [pc, #112]	@ (80029e8 <System_Init+0xc0>)
 8002978:	2100      	movs	r1, #0
 800297a:	0018      	movs	r0, r3
 800297c:	f004 fbee 	bl	800715c <HAL_ADC_RegisterCallback>

	//Set custom callback function for I/P capture input falling edge event
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, &TIM2_ch1_IP_capture_callback);
 8002980:	4a1d      	ldr	r2, [pc, #116]	@ (80029f8 <System_Init+0xd0>)
 8002982:	4b1e      	ldr	r3, [pc, #120]	@ (80029fc <System_Init+0xd4>)
 8002984:	2112      	movs	r1, #18
 8002986:	0018      	movs	r0, r3
 8002988:	f008 ffdc 	bl	800b944 <HAL_TIM_RegisterCallback>

	//Set custom callback function for I/P capture timer overflow (Update event/overflow)
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM2_ch1_overflow_callback);
 800298c:	4a1c      	ldr	r2, [pc, #112]	@ (8002a00 <System_Init+0xd8>)
 800298e:	4b1b      	ldr	r3, [pc, #108]	@ (80029fc <System_Init+0xd4>)
 8002990:	210e      	movs	r1, #14
 8002992:	0018      	movs	r0, r3
 8002994:	f008 ffd6 	bl	800b944 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM3_ch1 (Measurement Re-Elapse) (CCR match)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM3_ch1_IP_capture_measurement_reelapse_callback);
 8002998:	4a1a      	ldr	r2, [pc, #104]	@ (8002a04 <System_Init+0xdc>)
 800299a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a08 <System_Init+0xe0>)
 800299c:	2114      	movs	r1, #20
 800299e:	0018      	movs	r0, r3
 80029a0:	f008 ffd0 	bl	800b944 <HAL_TIM_RegisterCallback>

	//Set custom callback function for DMA TX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID, &UART2_TX_transfer_complete_callback);
 80029a4:	4a19      	ldr	r2, [pc, #100]	@ (8002a0c <System_Init+0xe4>)
 80029a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a10 <System_Init+0xe8>)
 80029a8:	2101      	movs	r1, #1
 80029aa:	0018      	movs	r0, r3
 80029ac:	f009 ffb6 	bl	800c91c <HAL_UART_RegisterCallback>

	//Set custom callback function for DMA RX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, &UART2_RX_transfer_complete_callback);
 80029b0:	4a18      	ldr	r2, [pc, #96]	@ (8002a14 <System_Init+0xec>)
 80029b2:	4b17      	ldr	r3, [pc, #92]	@ (8002a10 <System_Init+0xe8>)
 80029b4:	2103      	movs	r1, #3
 80029b6:	0018      	movs	r0, r3
 80029b8:	f009 ffb0 	bl	800c91c <HAL_UART_RegisterCallback>

	//Set custom callback for LPTIM1 (Tap Tempo SW state check)
	HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, &LPTIM1_callback);
 80029bc:	4a16      	ldr	r2, [pc, #88]	@ (8002a18 <System_Init+0xf0>)
 80029be:	4b17      	ldr	r3, [pc, #92]	@ (8002a1c <System_Init+0xf4>)
 80029c0:	2102      	movs	r1, #2
 80029c2:	0018      	movs	r0, r3
 80029c4:	f006 fc74 	bl	80092b0 <HAL_LPTIM_RegisterCallback>

	//Set custom callback function for TIM17
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback);
 80029c8:	4a15      	ldr	r2, [pc, #84]	@ (8002a20 <System_Init+0xf8>)
 80029ca:	4b16      	ldr	r3, [pc, #88]	@ (8002a24 <System_Init+0xfc>)
 80029cc:	2114      	movs	r1, #20
 80029ce:	0018      	movs	r0, r3
 80029d0:	f008 ffb8 	bl	800b944 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM14
	HAL_TIM_RegisterCallback(&htim14, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM14_callback);
 80029d4:	4a14      	ldr	r2, [pc, #80]	@ (8002a28 <System_Init+0x100>)
 80029d6:	4b15      	ldr	r3, [pc, #84]	@ (8002a2c <System_Init+0x104>)
 80029d8:	2114      	movs	r1, #20
 80029da:	0018      	movs	r0, r3
 80029dc:	f008 ffb2 	bl	800b944 <HAL_TIM_RegisterCallback>
}
 80029e0:	46c0      	nop			@ (mov r8, r8)
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	46c0      	nop			@ (mov r8, r8)
 80029e8:	200005b4 	.word	0x200005b4
 80029ec:	08002a31 	.word	0x08002a31
 80029f0:	20000810 	.word	0x20000810
 80029f4:	08002a85 	.word	0x08002a85
 80029f8:	08002b19 	.word	0x08002b19
 80029fc:	200008cc 	.word	0x200008cc
 8002a00:	08002c35 	.word	0x08002c35
 8002a04:	08002d41 	.word	0x08002d41
 8002a08:	20000988 	.word	0x20000988
 8002a0c:	08002e7d 	.word	0x08002e7d
 8002a10:	20000b00 	.word	0x20000b00
 8002a14:	08002e8d 	.word	0x08002e8d
 8002a18:	0800426d 	.word	0x0800426d
 8002a1c:	20000c84 	.word	0x20000c84
 8002a20:	0800495d 	.word	0x0800495d
 8002a24:	20000754 	.word	0x20000754
 8002a28:	0800496d 	.word	0x0800496d
 8002a2c:	20000698 	.word	0x20000698

08002a30 <TIM16_callback>:
uint64_t depressed_num = 0;
enum Validate latched = NO;
//debug

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Set_Oscillator_Values(&params);
 8002a38:	4b0d      	ldr	r3, [pc, #52]	@ (8002a70 <TIM16_callback+0x40>)
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f002 fba6 	bl	800518c <Set_Oscillator_Values>
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002a40:	4b0b      	ldr	r3, [pc, #44]	@ (8002a70 <TIM16_callback+0x40>)
 8002a42:	2100      	movs	r1, #0
 8002a44:	0018      	movs	r0, r3
 8002a46:	f002 fbcd 	bl	80051e4 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a74 <TIM16_callback+0x44>)
 8002a4c:	4b08      	ldr	r3, [pc, #32]	@ (8002a70 <TIM16_callback+0x40>)
 8002a4e:	0011      	movs	r1, r2
 8002a50:	0018      	movs	r0, r3
 8002a52:	f002 fcbd 	bl	80053d0 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002a56:	4b08      	ldr	r3, [pc, #32]	@ (8002a78 <TIM16_callback+0x48>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	001a      	movs	r2, r3
 8002a5c:	4907      	ldr	r1, [pc, #28]	@ (8002a7c <TIM16_callback+0x4c>)
 8002a5e:	4b08      	ldr	r3, [pc, #32]	@ (8002a80 <TIM16_callback+0x50>)
 8002a60:	0018      	movs	r0, r3
 8002a62:	f004 fc07 	bl	8007274 <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002a66:	46c0      	nop			@ (mov r8, r8)
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b002      	add	sp, #8
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	46c0      	nop			@ (mov r8, r8)
 8002a70:	20000d18 	.word	0x20000d18
 8002a74:	20000028 	.word	0x20000028
 8002a78:	0800e988 	.word	0x0800e988
 8002a7c:	20000d0c 	.word	0x20000d0c
 8002a80:	200005b4 	.word	0x200005b4

08002a84 <ADC_DMA_conversion_complete_callback>:

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 8002a84:	b5b0      	push	{r4, r5, r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f004 fc7e 	bl	8007390 <HAL_ADC_Stop_DMA>
	Process_ADC_Conversion_Values(&params_manual, ADCResultsDMA);
 8002a94:	4a1b      	ldr	r2, [pc, #108]	@ (8002b04 <ADC_DMA_conversion_complete_callback+0x80>)
 8002a96:	4b1c      	ldr	r3, [pc, #112]	@ (8002b08 <ADC_DMA_conversion_complete_callback+0x84>)
 8002a98:	0011      	movs	r1, r2
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f002 fd2e 	bl	80054fc <Process_ADC_Conversion_Values>

	//copies into running params based on mode
	Update_Params_Based_On_Mode_Selected();
 8002aa0:	f7fd fd62 	bl	8000568 <Update_Params_Based_On_Mode_Selected>

	enum Validate first_sync_complete = Get_Status_Bit(&statuses, First_Sync_Complete);
 8002aa4:	250f      	movs	r5, #15
 8002aa6:	197c      	adds	r4, r7, r5
 8002aa8:	4b18      	ldr	r3, [pc, #96]	@ (8002b0c <ADC_DMA_conversion_complete_callback+0x88>)
 8002aaa:	2108      	movs	r1, #8
 8002aac:	0018      	movs	r0, r3
 8002aae:	f003 ff29 	bl	8006904 <Get_Status_Bit>
 8002ab2:	0003      	movs	r3, r0
 8002ab4:	7023      	strb	r3, [r4, #0]

	//overwrites raw speed values if a sync has completed
	if(first_sync_complete == YES){
 8002ab6:	197b      	adds	r3, r7, r5
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d10a      	bne.n	8002ad4 <ADC_DMA_conversion_complete_callback+0x50>

		params.raw_start_value = params_working.raw_start_value;
 8002abe:	4b14      	ldr	r3, [pc, #80]	@ (8002b10 <ADC_DMA_conversion_complete_callback+0x8c>)
 8002ac0:	8a5b      	ldrh	r3, [r3, #18]
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	4b13      	ldr	r3, [pc, #76]	@ (8002b14 <ADC_DMA_conversion_complete_callback+0x90>)
 8002ac6:	825a      	strh	r2, [r3, #18]
		params.raw_prescaler = params_working.raw_prescaler;
 8002ac8:	4b11      	ldr	r3, [pc, #68]	@ (8002b10 <ADC_DMA_conversion_complete_callback+0x8c>)
 8002aca:	8b5b      	ldrh	r3, [r3, #26]
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	4b11      	ldr	r3, [pc, #68]	@ (8002b14 <ADC_DMA_conversion_complete_callback+0x90>)
 8002ad0:	835a      	strh	r2, [r3, #26]
 8002ad2:	e003      	b.n	8002adc <ADC_DMA_conversion_complete_callback+0x58>
	}
	else{

		Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(&params);
 8002ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b14 <ADC_DMA_conversion_complete_callback+0x90>)
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f002 fb22 	bl	8005120 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	}

	Process_TIM16_Final_Start_Value_and_Final_Prescaler(&params);
 8002adc:	4b0d      	ldr	r3, [pc, #52]	@ (8002b14 <ADC_DMA_conversion_complete_callback+0x90>)
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f003 fa82 	bl	8005fe8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//after initial conversion is complete, set the conversion complete flag - leave this after raw/final value processing rather than actually when ADC values are converted for startup routine reasons.
	if(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){
 8002ae4:	4b09      	ldr	r3, [pc, #36]	@ (8002b0c <ADC_DMA_conversion_complete_callback+0x88>)
 8002ae6:	2110      	movs	r1, #16
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f003 ff0b 	bl	8006904 <Get_Status_Bit>
 8002aee:	1e03      	subs	r3, r0, #0
 8002af0:	d104      	bne.n	8002afc <ADC_DMA_conversion_complete_callback+0x78>
		Set_Status_Bit(&statuses, Initial_ADC_Conversion_Complete);
 8002af2:	4b06      	ldr	r3, [pc, #24]	@ (8002b0c <ADC_DMA_conversion_complete_callback+0x88>)
 8002af4:	2110      	movs	r1, #16
 8002af6:	0018      	movs	r0, r3
 8002af8:	f003 ff18 	bl	800692c <Set_Status_Bit>
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002afc:	46c0      	nop			@ (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b004      	add	sp, #16
 8002b02:	bdb0      	pop	{r4, r5, r7, pc}
 8002b04:	20000d0c 	.word	0x20000d0c
 8002b08:	20000d3c 	.word	0x20000d3c
 8002b0c:	20000cfc 	.word	0x20000cfc
 8002b10:	20000d84 	.word	0x20000d84
 8002b14:	20000d18 	.word	0x20000d18

08002b18 <TIM2_ch1_IP_capture_callback>:

void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2100      	movs	r1, #0
 8002b24:	0018      	movs	r0, r3
 8002b26:	f008 fe89 	bl	800b83c <HAL_TIM_ReadCapturedValue>
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c18 <TIM2_ch1_IP_capture_callback+0x100>)
 8002b2e:	601a      	str	r2, [r3, #0]

	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 8002b30:	4b39      	ldr	r3, [pc, #228]	@ (8002c18 <TIM2_ch1_IP_capture_callback+0x100>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	0a5b      	lsrs	r3, r3, #9
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	4b38      	ldr	r3, [pc, #224]	@ (8002c1c <TIM2_ch1_IP_capture_callback+0x104>)
 8002b3a:	801a      	strh	r2, [r3, #0]

	//since the input capture measurement is z, and this is 512x the interrupt period, we just use the interrupt
	//period = z/512 as the 'elapse period value' if we also set the elapse timer prescaler to 512x less than the
	//input capture measurement timer

	if(IP_CAP_fsm.current_state == IDLE){
 8002b3c:	4b38      	ldr	r3, [pc, #224]	@ (8002c20 <TIM2_ch1_IP_capture_callback+0x108>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d108      	bne.n	8002b58 <TIM2_ch1_IP_capture_callback+0x40>

		Begin_Input_Capture_Measurement();
 8002b46:	f002 f9d5 	bl	8004ef4 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8002b4a:	4b35      	ldr	r3, [pc, #212]	@ (8002c20 <TIM2_ch1_IP_capture_callback+0x108>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = IDLE;
 8002b50:	4b33      	ldr	r3, [pc, #204]	@ (8002c20 <TIM2_ch1_IP_capture_callback+0x108>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	705a      	strb	r2, [r3, #1]
		//BEGIN PROCESSING
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002b56:	e05b      	b.n	8002c10 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){ //second edge
 8002b58:	4b31      	ldr	r3, [pc, #196]	@ (8002c20 <TIM2_ch1_IP_capture_callback+0x108>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d124      	bne.n	8002bac <TIM2_ch1_IP_capture_callback+0x94>
		if(interrupt_period >= HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is >= than 129
 8002b62:	4b2e      	ldr	r3, [pc, #184]	@ (8002c1c <TIM2_ch1_IP_capture_callback+0x104>)
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b80      	cmp	r3, #128	@ 0x80
 8002b6a:	d951      	bls.n	8002c10 <TIM2_ch1_IP_capture_callback+0xf8>
				Start_Measurement_Reelapse_Timer();
 8002b6c:	f002 f9a4 	bl	8004eb8 <Start_Measurement_Reelapse_Timer>
			IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8002b70:	4b2b      	ldr	r3, [pc, #172]	@ (8002c20 <TIM2_ch1_IP_capture_callback+0x108>)
 8002b72:	2202      	movs	r2, #2
 8002b74:	701a      	strb	r2, [r3, #0]
			IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8002b76:	4b2a      	ldr	r3, [pc, #168]	@ (8002c20 <TIM2_ch1_IP_capture_callback+0x108>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	705a      	strb	r2, [r3, #1]
			Copy_Params_Structs(&params, &params_to_be_loaded);
 8002b7c:	4a29      	ldr	r2, [pc, #164]	@ (8002c24 <TIM2_ch1_IP_capture_callback+0x10c>)
 8002b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8002c28 <TIM2_ch1_IP_capture_callback+0x110>)
 8002b80:	0011      	movs	r1, r2
 8002b82:	0018      	movs	r0, r3
 8002b84:	f002 f986 	bl	8004e94 <Copy_Params_Structs>
			if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8002b88:	4b28      	ldr	r3, [pc, #160]	@ (8002c2c <TIM2_ch1_IP_capture_callback+0x114>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b05      	cmp	r3, #5
 8002b90:	d004      	beq.n	8002b9c <TIM2_ch1_IP_capture_callback+0x84>
 8002b92:	4b26      	ldr	r3, [pc, #152]	@ (8002c2c <TIM2_ch1_IP_capture_callback+0x114>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b07      	cmp	r3, #7
 8002b9a:	d101      	bne.n	8002ba0 <TIM2_ch1_IP_capture_callback+0x88>
				Advance_Pending_States();
 8002b9c:	f002 fdfa 	bl	8005794 <Advance_Pending_States>
			Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 8002ba0:	4b23      	ldr	r3, [pc, #140]	@ (8002c30 <TIM2_ch1_IP_capture_callback+0x118>)
 8002ba2:	2104      	movs	r1, #4
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f003 fec1 	bl	800692c <Set_Status_Bit>
}
 8002baa:	e031      	b.n	8002c10 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){ //first edge
 8002bac:	4b1c      	ldr	r3, [pc, #112]	@ (8002c20 <TIM2_ch1_IP_capture_callback+0x108>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d108      	bne.n	8002bc8 <TIM2_ch1_IP_capture_callback+0xb0>
		Begin_Input_Capture_Measurement();
 8002bb6:	f002 f99d 	bl	8004ef4 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002bba:	4b19      	ldr	r3, [pc, #100]	@ (8002c20 <TIM2_ch1_IP_capture_callback+0x108>)
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8002bc0:	4b17      	ldr	r3, [pc, #92]	@ (8002c20 <TIM2_ch1_IP_capture_callback+0x108>)
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	705a      	strb	r2, [r3, #1]
}
 8002bc6:	e023      	b.n	8002c10 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){ //second edge
 8002bc8:	4b15      	ldr	r3, [pc, #84]	@ (8002c20 <TIM2_ch1_IP_capture_callback+0x108>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d11e      	bne.n	8002c10 <TIM2_ch1_IP_capture_callback+0xf8>
			Start_Measurement_Reelapse_Timer();
 8002bd2:	f002 f971 	bl	8004eb8 <Start_Measurement_Reelapse_Timer>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8002bd6:	4b12      	ldr	r3, [pc, #72]	@ (8002c20 <TIM2_ch1_IP_capture_callback+0x108>)
 8002bd8:	2202      	movs	r2, #2
 8002bda:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002bdc:	4b10      	ldr	r3, [pc, #64]	@ (8002c20 <TIM2_ch1_IP_capture_callback+0x108>)
 8002bde:	2203      	movs	r2, #3
 8002be0:	705a      	strb	r2, [r3, #1]
		Copy_Params_Structs(&params, &params_to_be_loaded);
 8002be2:	4a10      	ldr	r2, [pc, #64]	@ (8002c24 <TIM2_ch1_IP_capture_callback+0x10c>)
 8002be4:	4b10      	ldr	r3, [pc, #64]	@ (8002c28 <TIM2_ch1_IP_capture_callback+0x110>)
 8002be6:	0011      	movs	r1, r2
 8002be8:	0018      	movs	r0, r3
 8002bea:	f002 f953 	bl	8004e94 <Copy_Params_Structs>
		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8002bee:	4b0f      	ldr	r3, [pc, #60]	@ (8002c2c <TIM2_ch1_IP_capture_callback+0x114>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b05      	cmp	r3, #5
 8002bf6:	d004      	beq.n	8002c02 <TIM2_ch1_IP_capture_callback+0xea>
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c2c <TIM2_ch1_IP_capture_callback+0x114>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b07      	cmp	r3, #7
 8002c00:	d101      	bne.n	8002c06 <TIM2_ch1_IP_capture_callback+0xee>
			Advance_Pending_States();
 8002c02:	f002 fdc7 	bl	8005794 <Advance_Pending_States>
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 8002c06:	4b0a      	ldr	r3, [pc, #40]	@ (8002c30 <TIM2_ch1_IP_capture_callback+0x118>)
 8002c08:	2104      	movs	r1, #4
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f003 fe8e 	bl	800692c <Set_Status_Bit>
}
 8002c10:	46c0      	nop			@ (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b002      	add	sp, #8
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000cf4 	.word	0x20000cf4
 8002c1c:	20000cf8 	.word	0x20000cf8
 8002c20:	20000444 	.word	0x20000444
 8002c24:	20000d60 	.word	0x20000d60
 8002c28:	20000d18 	.word	0x20000d18
 8002c2c:	20000430 	.word	0x20000430
 8002c30:	20000cfc 	.word	0x20000cfc

08002c34 <TIM2_ch1_overflow_callback>:


void TIM2_ch1_overflow_callback(TIM_HandleTypeDef *htim){
 8002c34:	b590      	push	{r4, r7, lr}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

	union Speed_FSM_States previous = speed_fsm.prev_state;
 8002c3c:	240c      	movs	r4, #12
 8002c3e:	193b      	adds	r3, r7, r4
 8002c40:	4a3a      	ldr	r2, [pc, #232]	@ (8002d2c <TIM2_ch1_overflow_callback+0xf8>)
 8002c42:	7852      	ldrb	r2, [r2, #1]
 8002c44:	701a      	strb	r2, [r3, #0]

	if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){
 8002c46:	4b3a      	ldr	r3, [pc, #232]	@ (8002d30 <TIM2_ch1_overflow_callback+0xfc>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d131      	bne.n	8002cb4 <TIM2_ch1_overflow_callback+0x80>

		IP_CAP_fsm.current_state = IDLE;
 8002c50:	4b37      	ldr	r3, [pc, #220]	@ (8002d30 <TIM2_ch1_overflow_callback+0xfc>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8002c56:	4b36      	ldr	r3, [pc, #216]	@ (8002d30 <TIM2_ch1_overflow_callback+0xfc>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	705a      	strb	r2, [r3, #1]

		MIDI_CLK_fsm = NOT_COMPILING;
 8002c5c:	4b35      	ldr	r3, [pc, #212]	@ (8002d34 <TIM2_ch1_overflow_callback+0x100>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 8002c62:	4b35      	ldr	r3, [pc, #212]	@ (8002d38 <TIM2_ch1_overflow_callback+0x104>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002c68:	2380      	movs	r3, #128	@ 0x80
 8002c6a:	0099      	lsls	r1, r3, #2
 8002c6c:	23a0      	movs	r3, #160	@ 0xa0
 8002c6e:	05db      	lsls	r3, r3, #23
 8002c70:	2201      	movs	r2, #1
 8002c72:	0018      	movs	r0, r3
 8002c74:	f006 f8af 	bl	8008dd6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002c78:	4b30      	ldr	r3, [pc, #192]	@ (8002d3c <TIM2_ch1_overflow_callback+0x108>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2140      	movs	r1, #64	@ 0x40
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f006 f8a9 	bl	8008dd6 <HAL_GPIO_WritePin>

		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002c84:	4b29      	ldr	r3, [pc, #164]	@ (8002d2c <TIM2_ch1_overflow_callback+0xf8>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d049      	beq.n	8002d22 <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 8002c8e:	4b27      	ldr	r3, [pc, #156]	@ (8002d2c <TIM2_ch1_overflow_callback+0xf8>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b06      	cmp	r3, #6
 8002c96:	d044      	beq.n	8002d22 <TIM2_ch1_overflow_callback+0xee>
 8002c98:	4b24      	ldr	r3, [pc, #144]	@ (8002d2c <TIM2_ch1_overflow_callback+0xf8>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d03f      	beq.n	8002d22 <TIM2_ch1_overflow_callback+0xee>

			speed_fsm.prev_state = speed_fsm.current_state;
 8002ca2:	4b22      	ldr	r3, [pc, #136]	@ (8002d2c <TIM2_ch1_overflow_callback+0xf8>)
 8002ca4:	4a21      	ldr	r2, [pc, #132]	@ (8002d2c <TIM2_ch1_overflow_callback+0xf8>)
 8002ca6:	7812      	ldrb	r2, [r2, #0]
 8002ca8:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002caa:	4b20      	ldr	r3, [pc, #128]	@ (8002d2c <TIM2_ch1_overflow_callback+0xf8>)
 8002cac:	193a      	adds	r2, r7, r4
 8002cae:	7812      	ldrb	r2, [r2, #0]
 8002cb0:	701a      	strb	r2, [r3, #0]

			speed_fsm.prev_state = speed_fsm.current_state;
			speed_fsm.current_state = previous;
		}
	}
}
 8002cb2:	e036      	b.n	8002d22 <TIM2_ch1_overflow_callback+0xee>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8002cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d30 <TIM2_ch1_overflow_callback+0xfc>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	d131      	bne.n	8002d22 <TIM2_ch1_overflow_callback+0xee>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8002cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8002d30 <TIM2_ch1_overflow_callback+0xfc>)
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d30 <TIM2_ch1_overflow_callback+0xfc>)
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	705a      	strb	r2, [r3, #1]
		MIDI_CLK_fsm = NOT_COMPILING;
 8002cca:	4b1a      	ldr	r3, [pc, #104]	@ (8002d34 <TIM2_ch1_overflow_callback+0x100>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 8002cd0:	4b19      	ldr	r3, [pc, #100]	@ (8002d38 <TIM2_ch1_overflow_callback+0x104>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002cd6:	2380      	movs	r3, #128	@ 0x80
 8002cd8:	0099      	lsls	r1, r3, #2
 8002cda:	23a0      	movs	r3, #160	@ 0xa0
 8002cdc:	05db      	lsls	r3, r3, #23
 8002cde:	2201      	movs	r2, #1
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f006 f878 	bl	8008dd6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002ce6:	4b15      	ldr	r3, [pc, #84]	@ (8002d3c <TIM2_ch1_overflow_callback+0x108>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2140      	movs	r1, #64	@ 0x40
 8002cec:	0018      	movs	r0, r3
 8002cee:	f006 f872 	bl	8008dd6 <HAL_GPIO_WritePin>
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d2c <TIM2_ch1_overflow_callback+0xf8>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d012      	beq.n	8002d22 <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d2c <TIM2_ch1_overflow_callback+0xf8>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b06      	cmp	r3, #6
 8002d04:	d00d      	beq.n	8002d22 <TIM2_ch1_overflow_callback+0xee>
 8002d06:	4b09      	ldr	r3, [pc, #36]	@ (8002d2c <TIM2_ch1_overflow_callback+0xf8>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d008      	beq.n	8002d22 <TIM2_ch1_overflow_callback+0xee>
			speed_fsm.prev_state = speed_fsm.current_state;
 8002d10:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <TIM2_ch1_overflow_callback+0xf8>)
 8002d12:	4a06      	ldr	r2, [pc, #24]	@ (8002d2c <TIM2_ch1_overflow_callback+0xf8>)
 8002d14:	7812      	ldrb	r2, [r2, #0]
 8002d16:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002d18:	4b04      	ldr	r3, [pc, #16]	@ (8002d2c <TIM2_ch1_overflow_callback+0xf8>)
 8002d1a:	220c      	movs	r2, #12
 8002d1c:	18ba      	adds	r2, r7, r2
 8002d1e:	7812      	ldrb	r2, [r2, #0]
 8002d20:	701a      	strb	r2, [r3, #0]
}
 8002d22:	46c0      	nop			@ (mov r8, r8)
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b005      	add	sp, #20
 8002d28:	bd90      	pop	{r4, r7, pc}
 8002d2a:	46c0      	nop			@ (mov r8, r8)
 8002d2c:	20000430 	.word	0x20000430
 8002d30:	20000444 	.word	0x20000444
 8002d34:	20000da8 	.word	0x20000da8
 8002d38:	20000cfa 	.word	0x20000cfa
 8002d3c:	50000800 	.word	0x50000800

08002d40 <TIM3_ch1_IP_capture_measurement_reelapse_callback>:

void TIM3_ch1_IP_capture_measurement_reelapse_callback(TIM_HandleTypeDef *htim){
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002d48:	4b41      	ldr	r3, [pc, #260]	@ (8002e50 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b0b      	cmp	r3, #11
 8002d50:	d01c      	beq.n	8002d8c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 8002d52:	4b3f      	ldr	r3, [pc, #252]	@ (8002e50 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b0c      	cmp	r3, #12
 8002d5a:	d017      	beq.n	8002d8c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8002d5c:	4b3c      	ldr	r3, [pc, #240]	@ (8002e50 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b0d      	cmp	r3, #13
 8002d64:	d012      	beq.n	8002d8c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 8002d66:	4b3a      	ldr	r3, [pc, #232]	@ (8002e50 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b10      	cmp	r3, #16
 8002d6e:	d00d      	beq.n	8002d8c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 8002d70:	4b37      	ldr	r3, [pc, #220]	@ (8002e50 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b11      	cmp	r3, #17
 8002d78:	d008      	beq.n	8002d8c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8002d7a:	4b35      	ldr	r3, [pc, #212]	@ (8002e50 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002d80:	2b12      	cmp	r3, #18
 8002d82:	d003      	beq.n	8002d8c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>

		// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
		Set_Oscillator_Values(&params_to_be_loaded);
 8002d84:	4b33      	ldr	r3, [pc, #204]	@ (8002e54 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002d86:	0018      	movs	r0, r3
 8002d88:	f002 fa00 	bl	800518c <Set_Oscillator_Values>
	}

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8002d8c:	4b32      	ldr	r3, [pc, #200]	@ (8002e58 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x118>)
 8002d8e:	2100      	movs	r1, #0
 8002d90:	0018      	movs	r0, r3
 8002d92:	f003 fd50 	bl	8006836 <Stop_OC_TIM>

	if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){
 8002d96:	4b31      	ldr	r3, [pc, #196]	@ (8002e5c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d106      	bne.n	8002dae <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x6e>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = IDLE;
 8002da0:	4b2e      	ldr	r3, [pc, #184]	@ (8002e5c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8002da6:	4b2d      	ldr	r3, [pc, #180]	@ (8002e5c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002da8:	2202      	movs	r2, #2
 8002daa:	705a      	strb	r2, [r3, #1]
 8002dac:	e00a      	b.n	8002dc4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>
	}
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8002dae:	4b2b      	ldr	r3, [pc, #172]	@ (8002e5c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d105      	bne.n	8002dc4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8002db8:	4b28      	ldr	r3, [pc, #160]	@ (8002e5c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002dbe:	4b27      	ldr	r3, [pc, #156]	@ (8002e5c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	705a      	strb	r2, [r3, #1]
	}

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002dc4:	4b22      	ldr	r3, [pc, #136]	@ (8002e50 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b0b      	cmp	r3, #11
 8002dcc:	d03c      	beq.n	8002e48 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 8002dce:	4b20      	ldr	r3, [pc, #128]	@ (8002e50 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b0c      	cmp	r3, #12
 8002dd6:	d037      	beq.n	8002e48 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e50 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b0d      	cmp	r3, #13
 8002de0:	d032      	beq.n	8002e48 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 8002de2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e50 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b10      	cmp	r3, #16
 8002dea:	d02d      	beq.n	8002e48 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 8002dec:	4b18      	ldr	r3, [pc, #96]	@ (8002e50 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b11      	cmp	r3, #17
 8002df4:	d028      	beq.n	8002e48 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8002df6:	4b16      	ldr	r3, [pc, #88]	@ (8002e50 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002dfc:	2b12      	cmp	r3, #18
 8002dfe:	d023      	beq.n	8002e48 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>

		Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002e00:	4a17      	ldr	r2, [pc, #92]	@ (8002e60 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x120>)
 8002e02:	4b14      	ldr	r3, [pc, #80]	@ (8002e54 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002e04:	0011      	movs	r1, r2
 8002e06:	0018      	movs	r0, r3
 8002e08:	f002 f844 	bl	8004e94 <Copy_Params_Structs>
		Copy_Params_Structs(&params_to_be_loaded, &params);
 8002e0c:	4a15      	ldr	r2, [pc, #84]	@ (8002e64 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002e0e:	4b11      	ldr	r3, [pc, #68]	@ (8002e54 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002e10:	0011      	movs	r1, r2
 8002e12:	0018      	movs	r0, r3
 8002e14:	f002 f83e 	bl	8004e94 <Copy_Params_Structs>

		Set_Status_Bit(&statuses, First_Sync_Complete);
 8002e18:	4b13      	ldr	r3, [pc, #76]	@ (8002e68 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x128>)
 8002e1a:	2108      	movs	r1, #8
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f003 fd85 	bl	800692c <Set_Status_Bit>

		Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002e22:	4b10      	ldr	r3, [pc, #64]	@ (8002e64 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002e24:	2100      	movs	r1, #0
 8002e26:	0018      	movs	r0, r3
 8002e28:	f002 f9dc 	bl	80051e4 <Calculate_Next_Main_Oscillator_Values>
		Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002e2c:	4a0f      	ldr	r2, [pc, #60]	@ (8002e6c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x12c>)
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e64 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002e30:	0011      	movs	r1, r2
 8002e32:	0018      	movs	r0, r3
 8002e34:	f002 facc 	bl	80053d0 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002e38:	4b0d      	ldr	r3, [pc, #52]	@ (8002e70 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x130>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	001a      	movs	r2, r3
 8002e3e:	490d      	ldr	r1, [pc, #52]	@ (8002e74 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x134>)
 8002e40:	4b0d      	ldr	r3, [pc, #52]	@ (8002e78 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x138>)
 8002e42:	0018      	movs	r0, r3
 8002e44:	f004 fa16 	bl	8007274 <HAL_ADC_Start_DMA>

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002e48:	46c0      	nop			@ (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	20000430 	.word	0x20000430
 8002e54:	20000d60 	.word	0x20000d60
 8002e58:	20000988 	.word	0x20000988
 8002e5c:	20000444 	.word	0x20000444
 8002e60:	20000d84 	.word	0x20000d84
 8002e64:	20000d18 	.word	0x20000d18
 8002e68:	20000cfc 	.word	0x20000cfc
 8002e6c:	20000028 	.word	0x20000028
 8002e70:	0800e988 	.word	0x0800e988
 8002e74:	20000d0c 	.word	0x20000d0c
 8002e78:	200005b4 	.word	0x200005b4

08002e7c <UART2_TX_transfer_complete_callback>:

void UART2_TX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

	//UART_DMA_TX_is_complete = YES;
}
 8002e84:	46c0      	nop			@ (mov r8, r8)
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b002      	add	sp, #8
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <UART2_RX_transfer_complete_callback>:

void UART2_RX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

	if(Is_System_Real_Time_Status_Byte(rx_buffer) == YES){
 8002e94:	4bbe      	ldr	r3, [pc, #760]	@ (8003190 <UART2_RX_transfer_complete_callback+0x304>)
 8002e96:	0018      	movs	r0, r3
 8002e98:	f7fe fc96 	bl	80017c8 <Is_System_Real_Time_Status_Byte>
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d001      	beq.n	8002ea6 <UART2_RX_transfer_complete_callback+0x1a>
 8002ea2:	f000 fc0c 	bl	80036be <UART2_RX_transfer_complete_callback+0x832>

		if(Get_Status_Bit(&statuses, Start_Required_Before_Sync_Mode) == YES){
 8002ea6:	4bbb      	ldr	r3, [pc, #748]	@ (8003194 <UART2_RX_transfer_complete_callback+0x308>)
 8002ea8:	2180      	movs	r1, #128	@ 0x80
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f003 fd2a 	bl	8006904 <Get_Status_Bit>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d001      	beq.n	8002eba <UART2_RX_transfer_complete_callback+0x2e>
 8002eb6:	f001 f895 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

			if((MIDI_CLK_fsm == NOT_COMPILING) && (IP_CAP_fsm.current_state == IDLE)
 8002eba:	4bb7      	ldr	r3, [pc, #732]	@ (8003198 <UART2_RX_transfer_complete_callback+0x30c>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d159      	bne.n	8002f78 <UART2_RX_transfer_complete_callback+0xec>
 8002ec4:	4bb5      	ldr	r3, [pc, #724]	@ (800319c <UART2_RX_transfer_complete_callback+0x310>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d154      	bne.n	8002f78 <UART2_RX_transfer_complete_callback+0xec>
					&& ((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002ece:	4bb4      	ldr	r3, [pc, #720]	@ (80031a0 <UART2_RX_transfer_complete_callback+0x314>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d013      	beq.n	8002f00 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == MANUAL_MODE)
 8002ed8:	4bb1      	ldr	r3, [pc, #708]	@ (80031a0 <UART2_RX_transfer_complete_callback+0x314>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d00e      	beq.n	8002f00 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE)
 8002ee2:	4baf      	ldr	r3, [pc, #700]	@ (80031a0 <UART2_RX_transfer_complete_callback+0x314>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b06      	cmp	r3, #6
 8002eea:	d009      	beq.n	8002f00 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == PC_MODE)
 8002eec:	4bac      	ldr	r3, [pc, #688]	@ (80031a0 <UART2_RX_transfer_complete_callback+0x314>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d004      	beq.n	8002f00 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == CC_MODE))){
 8002ef6:	4baa      	ldr	r3, [pc, #680]	@ (80031a0 <UART2_RX_transfer_complete_callback+0x314>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d13b      	bne.n	8002f78 <UART2_RX_transfer_complete_callback+0xec>

				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002f00:	4ba3      	ldr	r3, [pc, #652]	@ (8003190 <UART2_RX_transfer_complete_callback+0x304>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2bfa      	cmp	r3, #250	@ 0xfa
 8002f08:	d10b      	bne.n	8002f22 <UART2_RX_transfer_complete_callback+0x96>

					speed_fsm.prev_state = speed_fsm.current_state;
 8002f0a:	4ba5      	ldr	r3, [pc, #660]	@ (80031a0 <UART2_RX_transfer_complete_callback+0x314>)
 8002f0c:	4aa4      	ldr	r2, [pc, #656]	@ (80031a0 <UART2_RX_transfer_complete_callback+0x314>)
 8002f0e:	7812      	ldrb	r2, [r2, #0]
 8002f10:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A0_MODE;
 8002f12:	4ba3      	ldr	r3, [pc, #652]	@ (80031a0 <UART2_RX_transfer_complete_callback+0x314>)
 8002f14:	2209      	movs	r2, #9
 8002f16:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 8002f18:	4ba2      	ldr	r3, [pc, #648]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x318>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002f1e:	f001 f85e 	bl	8003fde <UART2_RX_transfer_complete_callback+0x1152>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002f22:	4b9b      	ldr	r3, [pc, #620]	@ (8003190 <UART2_RX_transfer_complete_callback+0x304>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2bf8      	cmp	r3, #248	@ 0xf8
 8002f2a:	d001      	beq.n	8002f30 <UART2_RX_transfer_complete_callback+0xa4>
 8002f2c:	f001 f857 	bl	8003fde <UART2_RX_transfer_complete_callback+0x1152>

					speed_fsm.prev_state = speed_fsm.current_state;
 8002f30:	4b9b      	ldr	r3, [pc, #620]	@ (80031a0 <UART2_RX_transfer_complete_callback+0x314>)
 8002f32:	4a9b      	ldr	r2, [pc, #620]	@ (80031a0 <UART2_RX_transfer_complete_callback+0x314>)
 8002f34:	7812      	ldrb	r2, [r2, #0]
 8002f36:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B0_MODE;
 8002f38:	4b99      	ldr	r3, [pc, #612]	@ (80031a0 <UART2_RX_transfer_complete_callback+0x314>)
 8002f3a:	220b      	movs	r2, #11
 8002f3c:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 8002f3e:	4b99      	ldr	r3, [pc, #612]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x318>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002f44:	2380      	movs	r3, #128	@ 0x80
 8002f46:	0099      	lsls	r1, r3, #2
 8002f48:	23a0      	movs	r3, #160	@ 0xa0
 8002f4a:	05db      	lsls	r3, r3, #23
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f005 ff41 	bl	8008dd6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002f54:	4b94      	ldr	r3, [pc, #592]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x31c>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	2140      	movs	r1, #64	@ 0x40
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f005 ff3b 	bl	8008dd6 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002f60:	4b8d      	ldr	r3, [pc, #564]	@ (8003198 <UART2_RX_transfer_complete_callback+0x30c>)
 8002f62:	2201      	movs	r2, #1
 8002f64:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002f66:	4b8f      	ldr	r3, [pc, #572]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x318>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	4b8c      	ldr	r3, [pc, #560]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x318>)
 8002f72:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002f74:	f001 f833 	bl	8003fde <UART2_RX_transfer_complete_callback+0x1152>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A0_MODE){
 8002f78:	4b89      	ldr	r3, [pc, #548]	@ (80031a0 <UART2_RX_transfer_complete_callback+0x314>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b09      	cmp	r3, #9
 8002f80:	d123      	bne.n	8002fca <UART2_RX_transfer_complete_callback+0x13e>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002f82:	4b83      	ldr	r3, [pc, #524]	@ (8003190 <UART2_RX_transfer_complete_callback+0x304>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2bf8      	cmp	r3, #248	@ 0xf8
 8002f8a:	d001      	beq.n	8002f90 <UART2_RX_transfer_complete_callback+0x104>
 8002f8c:	f001 f82a 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002f90:	2380      	movs	r3, #128	@ 0x80
 8002f92:	0099      	lsls	r1, r3, #2
 8002f94:	23a0      	movs	r3, #160	@ 0xa0
 8002f96:	05db      	lsls	r3, r3, #23
 8002f98:	2200      	movs	r2, #0
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f005 ff1b 	bl	8008dd6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002fa0:	4b81      	ldr	r3, [pc, #516]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x31c>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	2140      	movs	r1, #64	@ 0x40
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f005 ff15 	bl	8008dd6 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002fac:	4b7a      	ldr	r3, [pc, #488]	@ (8003198 <UART2_RX_transfer_complete_callback+0x30c>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002fb2:	4b7c      	ldr	r3, [pc, #496]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x318>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	3301      	adds	r3, #1
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	4b79      	ldr	r3, [pc, #484]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x318>)
 8002fbe:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8002fc0:	4b77      	ldr	r3, [pc, #476]	@ (80031a0 <UART2_RX_transfer_complete_callback+0x314>)
 8002fc2:	220a      	movs	r2, #10
 8002fc4:	701a      	strb	r2, [r3, #0]
 8002fc6:	f001 f80d 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A1_MODE){
 8002fca:	4b75      	ldr	r3, [pc, #468]	@ (80031a0 <UART2_RX_transfer_complete_callback+0x314>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b0a      	cmp	r3, #10
 8002fd2:	d145      	bne.n	8003060 <UART2_RX_transfer_complete_callback+0x1d4>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002fd4:	4b6e      	ldr	r3, [pc, #440]	@ (8003190 <UART2_RX_transfer_complete_callback+0x304>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2bf8      	cmp	r3, #248	@ 0xf8
 8002fdc:	d001      	beq.n	8002fe2 <UART2_RX_transfer_complete_callback+0x156>
 8002fde:	f001 f801 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002fe2:	4b6d      	ldr	r3, [pc, #436]	@ (8003198 <UART2_RX_transfer_complete_callback+0x30c>)
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002fe8:	4b6e      	ldr	r3, [pc, #440]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x318>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	4b6c      	ldr	r3, [pc, #432]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x318>)
 8002ff4:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002ff6:	4b6b      	ldr	r3, [pc, #428]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x318>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b0b      	cmp	r3, #11
 8002ffe:	d80f      	bhi.n	8003020 <UART2_RX_transfer_complete_callback+0x194>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003000:	2380      	movs	r3, #128	@ 0x80
 8003002:	0099      	lsls	r1, r3, #2
 8003004:	23a0      	movs	r3, #160	@ 0xa0
 8003006:	05db      	lsls	r3, r3, #23
 8003008:	2200      	movs	r2, #0
 800300a:	0018      	movs	r0, r3
 800300c:	f005 fee3 	bl	8008dd6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003010:	4b65      	ldr	r3, [pc, #404]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x31c>)
 8003012:	2201      	movs	r2, #1
 8003014:	2140      	movs	r1, #64	@ 0x40
 8003016:	0018      	movs	r0, r3
 8003018:	f005 fedd 	bl	8008dd6 <HAL_GPIO_WritePin>
 800301c:	f000 ffe2 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8003020:	4b60      	ldr	r3, [pc, #384]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x318>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b18      	cmp	r3, #24
 8003028:	d80f      	bhi.n	800304a <UART2_RX_transfer_complete_callback+0x1be>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 800302a:	2380      	movs	r3, #128	@ 0x80
 800302c:	0099      	lsls	r1, r3, #2
 800302e:	23a0      	movs	r3, #160	@ 0xa0
 8003030:	05db      	lsls	r3, r3, #23
 8003032:	2201      	movs	r2, #1
 8003034:	0018      	movs	r0, r3
 8003036:	f005 fece 	bl	8008dd6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800303a:	4b5b      	ldr	r3, [pc, #364]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x31c>)
 800303c:	2200      	movs	r2, #0
 800303e:	2140      	movs	r1, #64	@ 0x40
 8003040:	0018      	movs	r0, r3
 8003042:	f005 fec8 	bl	8008dd6 <HAL_GPIO_WritePin>
 8003046:	f000 ffcd 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 800304a:	4b55      	ldr	r3, [pc, #340]	@ (80031a0 <UART2_RX_transfer_complete_callback+0x314>)
 800304c:	220a      	movs	r2, #10
 800304e:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003050:	4b53      	ldr	r3, [pc, #332]	@ (80031a0 <UART2_RX_transfer_complete_callback+0x314>)
 8003052:	2208      	movs	r2, #8
 8003054:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8003056:	4b53      	ldr	r3, [pc, #332]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x318>)
 8003058:	2201      	movs	r2, #1
 800305a:	701a      	strb	r2, [r3, #0]
 800305c:	f000 ffc2 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE){
 8003060:	4b4f      	ldr	r3, [pc, #316]	@ (80031a0 <UART2_RX_transfer_complete_callback+0x314>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b0b      	cmp	r3, #11
 8003068:	d142      	bne.n	80030f0 <UART2_RX_transfer_complete_callback+0x264>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800306a:	4b49      	ldr	r3, [pc, #292]	@ (8003190 <UART2_RX_transfer_complete_callback+0x304>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2bf8      	cmp	r3, #248	@ 0xf8
 8003072:	d001      	beq.n	8003078 <UART2_RX_transfer_complete_callback+0x1ec>
 8003074:	f000 ffb6 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8003078:	4b47      	ldr	r3, [pc, #284]	@ (8003198 <UART2_RX_transfer_complete_callback+0x30c>)
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 800307e:	4b49      	ldr	r3, [pc, #292]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x318>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	b2db      	uxtb	r3, r3
 8003084:	3301      	adds	r3, #1
 8003086:	b2da      	uxtb	r2, r3
 8003088:	4b46      	ldr	r3, [pc, #280]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x318>)
 800308a:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 800308c:	4b45      	ldr	r3, [pc, #276]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x318>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b0b      	cmp	r3, #11
 8003094:	d80f      	bhi.n	80030b6 <UART2_RX_transfer_complete_callback+0x22a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003096:	2380      	movs	r3, #128	@ 0x80
 8003098:	0099      	lsls	r1, r3, #2
 800309a:	23a0      	movs	r3, #160	@ 0xa0
 800309c:	05db      	lsls	r3, r3, #23
 800309e:	2200      	movs	r2, #0
 80030a0:	0018      	movs	r0, r3
 80030a2:	f005 fe98 	bl	8008dd6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80030a6:	4b40      	ldr	r3, [pc, #256]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x31c>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	2140      	movs	r1, #64	@ 0x40
 80030ac:	0018      	movs	r0, r3
 80030ae:	f005 fe92 	bl	8008dd6 <HAL_GPIO_WritePin>
 80030b2:	f000 ff97 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 80030b6:	4b3b      	ldr	r3, [pc, #236]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x318>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b18      	cmp	r3, #24
 80030be:	d80f      	bhi.n	80030e0 <UART2_RX_transfer_complete_callback+0x254>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80030c0:	2380      	movs	r3, #128	@ 0x80
 80030c2:	0099      	lsls	r1, r3, #2
 80030c4:	23a0      	movs	r3, #160	@ 0xa0
 80030c6:	05db      	lsls	r3, r3, #23
 80030c8:	2201      	movs	r2, #1
 80030ca:	0018      	movs	r0, r3
 80030cc:	f005 fe83 	bl	8008dd6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80030d0:	4b35      	ldr	r3, [pc, #212]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x31c>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	2140      	movs	r1, #64	@ 0x40
 80030d6:	0018      	movs	r0, r3
 80030d8:	f005 fe7d 	bl	8008dd6 <HAL_GPIO_WritePin>
 80030dc:	f000 ff82 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 80030e0:	4b30      	ldr	r3, [pc, #192]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x318>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B1_MODE;
 80030e6:	4b2e      	ldr	r3, [pc, #184]	@ (80031a0 <UART2_RX_transfer_complete_callback+0x314>)
 80030e8:	220c      	movs	r2, #12
 80030ea:	701a      	strb	r2, [r3, #0]
 80030ec:	f000 ff7a 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE){
 80030f0:	4b2b      	ldr	r3, [pc, #172]	@ (80031a0 <UART2_RX_transfer_complete_callback+0x314>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b0c      	cmp	r3, #12
 80030f8:	d158      	bne.n	80031ac <UART2_RX_transfer_complete_callback+0x320>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80030fa:	4b25      	ldr	r3, [pc, #148]	@ (8003190 <UART2_RX_transfer_complete_callback+0x304>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2bf8      	cmp	r3, #248	@ 0xf8
 8003102:	d138      	bne.n	8003176 <UART2_RX_transfer_complete_callback+0x2ea>

					MIDI_CLK_fsm = COMPILING; //just in case
 8003104:	4b24      	ldr	r3, [pc, #144]	@ (8003198 <UART2_RX_transfer_complete_callback+0x30c>)
 8003106:	2201      	movs	r2, #1
 8003108:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 800310a:	4b26      	ldr	r3, [pc, #152]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x318>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	3301      	adds	r3, #1
 8003112:	b2da      	uxtb	r2, r3
 8003114:	4b23      	ldr	r3, [pc, #140]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x318>)
 8003116:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8003118:	4b22      	ldr	r3, [pc, #136]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x318>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b0b      	cmp	r3, #11
 8003120:	d80f      	bhi.n	8003142 <UART2_RX_transfer_complete_callback+0x2b6>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003122:	2380      	movs	r3, #128	@ 0x80
 8003124:	0099      	lsls	r1, r3, #2
 8003126:	23a0      	movs	r3, #160	@ 0xa0
 8003128:	05db      	lsls	r3, r3, #23
 800312a:	2200      	movs	r2, #0
 800312c:	0018      	movs	r0, r3
 800312e:	f005 fe52 	bl	8008dd6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003132:	4b1d      	ldr	r3, [pc, #116]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x31c>)
 8003134:	2201      	movs	r2, #1
 8003136:	2140      	movs	r1, #64	@ 0x40
 8003138:	0018      	movs	r0, r3
 800313a:	f005 fe4c 	bl	8008dd6 <HAL_GPIO_WritePin>
 800313e:	f000 ff51 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8003142:	4b18      	ldr	r3, [pc, #96]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x318>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b18      	cmp	r3, #24
 800314a:	d80f      	bhi.n	800316c <UART2_RX_transfer_complete_callback+0x2e0>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 800314c:	2380      	movs	r3, #128	@ 0x80
 800314e:	0099      	lsls	r1, r3, #2
 8003150:	23a0      	movs	r3, #160	@ 0xa0
 8003152:	05db      	lsls	r3, r3, #23
 8003154:	2201      	movs	r2, #1
 8003156:	0018      	movs	r0, r3
 8003158:	f005 fe3d 	bl	8008dd6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800315c:	4b12      	ldr	r3, [pc, #72]	@ (80031a8 <UART2_RX_transfer_complete_callback+0x31c>)
 800315e:	2200      	movs	r2, #0
 8003160:	2140      	movs	r1, #64	@ 0x40
 8003162:	0018      	movs	r0, r3
 8003164:	f005 fe37 	bl	8008dd6 <HAL_GPIO_WritePin>
 8003168:	f000 ff3c 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 800316c:	4b0d      	ldr	r3, [pc, #52]	@ (80031a4 <UART2_RX_transfer_complete_callback+0x318>)
 800316e:	2201      	movs	r2, #1
 8003170:	701a      	strb	r2, [r3, #0]
 8003172:	f000 ff37 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8003176:	4b06      	ldr	r3, [pc, #24]	@ (8003190 <UART2_RX_transfer_complete_callback+0x304>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2bfa      	cmp	r3, #250	@ 0xfa
 800317e:	d001      	beq.n	8003184 <UART2_RX_transfer_complete_callback+0x2f8>
 8003180:	f000 ff30 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8003184:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <UART2_RX_transfer_complete_callback+0x314>)
 8003186:	220d      	movs	r2, #13
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	f000 ff2b 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
 800318e:	46c0      	nop			@ (mov r8, r8)
 8003190:	20000594 	.word	0x20000594
 8003194:	20000cfc 	.word	0x20000cfc
 8003198:	20000da8 	.word	0x20000da8
 800319c:	20000444 	.word	0x20000444
 80031a0:	20000430 	.word	0x20000430
 80031a4:	20000cfa 	.word	0x20000cfa
 80031a8:	50000800 	.word	0x50000800
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE){
 80031ac:	4bdc      	ldr	r3, [pc, #880]	@ (8003520 <UART2_RX_transfer_complete_callback+0x694>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b0d      	cmp	r3, #13
 80031b4:	d160      	bne.n	8003278 <UART2_RX_transfer_complete_callback+0x3ec>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80031b6:	4bdb      	ldr	r3, [pc, #876]	@ (8003524 <UART2_RX_transfer_complete_callback+0x698>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2bf8      	cmp	r3, #248	@ 0xf8
 80031be:	d001      	beq.n	80031c4 <UART2_RX_transfer_complete_callback+0x338>
 80031c0:	f000 ff10 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 80031c4:	4bd8      	ldr	r3, [pc, #864]	@ (8003528 <UART2_RX_transfer_complete_callback+0x69c>)
 80031c6:	0018      	movs	r0, r3
 80031c8:	f001 ffe0 	bl	800518c <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80031cc:	2380      	movs	r3, #128	@ 0x80
 80031ce:	0099      	lsls	r1, r3, #2
 80031d0:	23a0      	movs	r3, #160	@ 0xa0
 80031d2:	05db      	lsls	r3, r3, #23
 80031d4:	2201      	movs	r2, #1
 80031d6:	0018      	movs	r0, r3
 80031d8:	f005 fdfd 	bl	8008dd6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80031dc:	4bd3      	ldr	r3, [pc, #844]	@ (800352c <UART2_RX_transfer_complete_callback+0x6a0>)
 80031de:	2200      	movs	r2, #0
 80031e0:	2140      	movs	r1, #64	@ 0x40
 80031e2:	0018      	movs	r0, r3
 80031e4:	f005 fdf7 	bl	8008dd6 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80031e8:	2380      	movs	r3, #128	@ 0x80
 80031ea:	0099      	lsls	r1, r3, #2
 80031ec:	23a0      	movs	r3, #160	@ 0xa0
 80031ee:	05db      	lsls	r3, r3, #23
 80031f0:	2200      	movs	r2, #0
 80031f2:	0018      	movs	r0, r3
 80031f4:	f005 fdef 	bl	8008dd6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80031f8:	4bcc      	ldr	r3, [pc, #816]	@ (800352c <UART2_RX_transfer_complete_callback+0x6a0>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	2140      	movs	r1, #64	@ 0x40
 80031fe:	0018      	movs	r0, r3
 8003200:	f005 fde9 	bl	8008dd6 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING; //just in case
 8003204:	4bca      	ldr	r3, [pc, #808]	@ (8003530 <UART2_RX_transfer_complete_callback+0x6a4>)
 8003206:	2201      	movs	r2, #1
 8003208:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 1;
 800320a:	4bca      	ldr	r3, [pc, #808]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a8>)
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8003210:	4bc3      	ldr	r3, [pc, #780]	@ (8003520 <UART2_RX_transfer_complete_callback+0x694>)
 8003212:	220d      	movs	r2, #13
 8003214:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003216:	4bc2      	ldr	r3, [pc, #776]	@ (8003520 <UART2_RX_transfer_complete_callback+0x694>)
 8003218:	2208      	movs	r2, #8
 800321a:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 800321c:	4bc6      	ldr	r3, [pc, #792]	@ (8003538 <UART2_RX_transfer_complete_callback+0x6ac>)
 800321e:	2100      	movs	r1, #0
 8003220:	0018      	movs	r0, r3
 8003222:	f003 fb08 	bl	8006836 <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8003226:	4bc5      	ldr	r3, [pc, #788]	@ (800353c <UART2_RX_transfer_complete_callback+0x6b0>)
 8003228:	2200      	movs	r2, #0
 800322a:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 800322c:	4ac4      	ldr	r2, [pc, #784]	@ (8003540 <UART2_RX_transfer_complete_callback+0x6b4>)
 800322e:	4bbe      	ldr	r3, [pc, #760]	@ (8003528 <UART2_RX_transfer_complete_callback+0x69c>)
 8003230:	0011      	movs	r1, r2
 8003232:	0018      	movs	r0, r3
 8003234:	f001 fe2e 	bl	8004e94 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8003238:	4ac2      	ldr	r2, [pc, #776]	@ (8003544 <UART2_RX_transfer_complete_callback+0x6b8>)
 800323a:	4bbb      	ldr	r3, [pc, #748]	@ (8003528 <UART2_RX_transfer_complete_callback+0x69c>)
 800323c:	0011      	movs	r1, r2
 800323e:	0018      	movs	r0, r3
 8003240:	f001 fe28 	bl	8004e94 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8003244:	4bc0      	ldr	r3, [pc, #768]	@ (8003548 <UART2_RX_transfer_complete_callback+0x6bc>)
 8003246:	2108      	movs	r1, #8
 8003248:	0018      	movs	r0, r3
 800324a:	f003 fb6f 	bl	800692c <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 800324e:	4bbd      	ldr	r3, [pc, #756]	@ (8003544 <UART2_RX_transfer_complete_callback+0x6b8>)
 8003250:	2100      	movs	r1, #0
 8003252:	0018      	movs	r0, r3
 8003254:	f001 ffc6 	bl	80051e4 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8003258:	4abc      	ldr	r2, [pc, #752]	@ (800354c <UART2_RX_transfer_complete_callback+0x6c0>)
 800325a:	4bba      	ldr	r3, [pc, #744]	@ (8003544 <UART2_RX_transfer_complete_callback+0x6b8>)
 800325c:	0011      	movs	r1, r2
 800325e:	0018      	movs	r0, r3
 8003260:	f002 f8b6 	bl	80053d0 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8003264:	4bba      	ldr	r3, [pc, #744]	@ (8003550 <UART2_RX_transfer_complete_callback+0x6c4>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	001a      	movs	r2, r3
 800326a:	49ba      	ldr	r1, [pc, #744]	@ (8003554 <UART2_RX_transfer_complete_callback+0x6c8>)
 800326c:	4bba      	ldr	r3, [pc, #744]	@ (8003558 <UART2_RX_transfer_complete_callback+0x6cc>)
 800326e:	0018      	movs	r0, r3
 8003270:	f004 f800 	bl	8007274 <HAL_ADC_Start_DMA>
 8003274:	f000 feb6 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == NO)){
 8003278:	4ba9      	ldr	r3, [pc, #676]	@ (8003520 <UART2_RX_transfer_complete_callback+0x694>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b08      	cmp	r3, #8
 8003280:	d146      	bne.n	8003310 <UART2_RX_transfer_complete_callback+0x484>
 8003282:	4bb1      	ldr	r3, [pc, #708]	@ (8003548 <UART2_RX_transfer_complete_callback+0x6bc>)
 8003284:	2120      	movs	r1, #32
 8003286:	0018      	movs	r0, r3
 8003288:	f003 fb3c 	bl	8006904 <Get_Status_Bit>
 800328c:	1e03      	subs	r3, r0, #0
 800328e:	d13f      	bne.n	8003310 <UART2_RX_transfer_complete_callback+0x484>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003290:	4ba4      	ldr	r3, [pc, #656]	@ (8003524 <UART2_RX_transfer_complete_callback+0x698>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2bf8      	cmp	r3, #248	@ 0xf8
 8003298:	d001      	beq.n	800329e <UART2_RX_transfer_complete_callback+0x412>
 800329a:	f000 fea3 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 800329e:	4ba4      	ldr	r3, [pc, #656]	@ (8003530 <UART2_RX_transfer_complete_callback+0x6a4>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80032a4:	4ba3      	ldr	r3, [pc, #652]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a8>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	3301      	adds	r3, #1
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	4ba1      	ldr	r3, [pc, #644]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a8>)
 80032b0:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 80032b2:	4ba0      	ldr	r3, [pc, #640]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a8>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b0b      	cmp	r3, #11
 80032ba:	d80f      	bhi.n	80032dc <UART2_RX_transfer_complete_callback+0x450>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80032bc:	2380      	movs	r3, #128	@ 0x80
 80032be:	0099      	lsls	r1, r3, #2
 80032c0:	23a0      	movs	r3, #160	@ 0xa0
 80032c2:	05db      	lsls	r3, r3, #23
 80032c4:	2200      	movs	r2, #0
 80032c6:	0018      	movs	r0, r3
 80032c8:	f005 fd85 	bl	8008dd6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80032cc:	4b97      	ldr	r3, [pc, #604]	@ (800352c <UART2_RX_transfer_complete_callback+0x6a0>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	2140      	movs	r1, #64	@ 0x40
 80032d2:	0018      	movs	r0, r3
 80032d4:	f005 fd7f 	bl	8008dd6 <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80032d8:	f000 fe84 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 80032dc:	4b95      	ldr	r3, [pc, #596]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a8>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b18      	cmp	r3, #24
 80032e4:	d80f      	bhi.n	8003306 <UART2_RX_transfer_complete_callback+0x47a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80032e6:	2380      	movs	r3, #128	@ 0x80
 80032e8:	0099      	lsls	r1, r3, #2
 80032ea:	23a0      	movs	r3, #160	@ 0xa0
 80032ec:	05db      	lsls	r3, r3, #23
 80032ee:	2201      	movs	r2, #1
 80032f0:	0018      	movs	r0, r3
 80032f2:	f005 fd70 	bl	8008dd6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80032f6:	4b8d      	ldr	r3, [pc, #564]	@ (800352c <UART2_RX_transfer_complete_callback+0x6a0>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	2140      	movs	r1, #64	@ 0x40
 80032fc:	0018      	movs	r0, r3
 80032fe:	f005 fd6a 	bl	8008dd6 <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003302:	f000 fe6f 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8003306:	4b8b      	ldr	r3, [pc, #556]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003308:	2201      	movs	r2, #1
 800330a:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800330c:	f000 fe6a 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003310:	4b83      	ldr	r3, [pc, #524]	@ (8003520 <UART2_RX_transfer_complete_callback+0x694>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b08      	cmp	r3, #8
 8003318:	d14c      	bne.n	80033b4 <UART2_RX_transfer_complete_callback+0x528>
 800331a:	4b88      	ldr	r3, [pc, #544]	@ (800353c <UART2_RX_transfer_complete_callback+0x6b0>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d147      	bne.n	80033b4 <UART2_RX_transfer_complete_callback+0x528>
 8003324:	4b88      	ldr	r3, [pc, #544]	@ (8003548 <UART2_RX_transfer_complete_callback+0x6bc>)
 8003326:	2120      	movs	r1, #32
 8003328:	0018      	movs	r0, r3
 800332a:	f003 faeb 	bl	8006904 <Get_Status_Bit>
 800332e:	0003      	movs	r3, r0
 8003330:	2b01      	cmp	r3, #1
 8003332:	d13f      	bne.n	80033b4 <UART2_RX_transfer_complete_callback+0x528>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003334:	4b7b      	ldr	r3, [pc, #492]	@ (8003524 <UART2_RX_transfer_complete_callback+0x698>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2bf8      	cmp	r3, #248	@ 0xf8
 800333c:	d11e      	bne.n	800337c <UART2_RX_transfer_complete_callback+0x4f0>

					MIDI_CLK_tag = 0; //just in case
 800333e:	4b7d      	ldr	r3, [pc, #500]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003340:	2200      	movs	r2, #0
 8003342:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8003344:	4b7b      	ldr	r3, [pc, #492]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	3301      	adds	r3, #1
 800334c:	b2da      	uxtb	r2, r3
 800334e:	4b79      	ldr	r3, [pc, #484]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003350:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_fsm = COMPILING;
 8003352:	4b77      	ldr	r3, [pc, #476]	@ (8003530 <UART2_RX_transfer_complete_callback+0x6a4>)
 8003354:	2201      	movs	r2, #1
 8003356:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B0_MODE;
 8003358:	4b71      	ldr	r3, [pc, #452]	@ (8003520 <UART2_RX_transfer_complete_callback+0x694>)
 800335a:	2210      	movs	r2, #16
 800335c:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 800335e:	4b70      	ldr	r3, [pc, #448]	@ (8003520 <UART2_RX_transfer_complete_callback+0x694>)
 8003360:	2208      	movs	r2, #8
 8003362:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003364:	4b78      	ldr	r3, [pc, #480]	@ (8003548 <UART2_RX_transfer_complete_callback+0x6bc>)
 8003366:	2120      	movs	r1, #32
 8003368:	0018      	movs	r0, r3
 800336a:	f003 faf1 	bl	8006950 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800336e:	4b76      	ldr	r3, [pc, #472]	@ (8003548 <UART2_RX_transfer_complete_callback+0x6bc>)
 8003370:	2140      	movs	r1, #64	@ 0x40
 8003372:	0018      	movs	r0, r3
 8003374:	f003 faec 	bl	8006950 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003378:	f000 fe33 	bl	8003fe2 <UART2_RX_transfer_complete_callback+0x1156>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 800337c:	4b69      	ldr	r3, [pc, #420]	@ (8003524 <UART2_RX_transfer_complete_callback+0x698>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2bfa      	cmp	r3, #250	@ 0xfa
 8003384:	d001      	beq.n	800338a <UART2_RX_transfer_complete_callback+0x4fe>
 8003386:	f000 fe2c 	bl	8003fe2 <UART2_RX_transfer_complete_callback+0x1156>

					MIDI_CLK_tag = 0; //just in case
 800338a:	4b6a      	ldr	r3, [pc, #424]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a8>)
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A0_MODE;
 8003390:	4b63      	ldr	r3, [pc, #396]	@ (8003520 <UART2_RX_transfer_complete_callback+0x694>)
 8003392:	220e      	movs	r2, #14
 8003394:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003396:	4b62      	ldr	r3, [pc, #392]	@ (8003520 <UART2_RX_transfer_complete_callback+0x694>)
 8003398:	2208      	movs	r2, #8
 800339a:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 800339c:	4b6a      	ldr	r3, [pc, #424]	@ (8003548 <UART2_RX_transfer_complete_callback+0x6bc>)
 800339e:	2120      	movs	r1, #32
 80033a0:	0018      	movs	r0, r3
 80033a2:	f003 fad5 	bl	8006950 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80033a6:	4b68      	ldr	r3, [pc, #416]	@ (8003548 <UART2_RX_transfer_complete_callback+0x6bc>)
 80033a8:	2140      	movs	r1, #64	@ 0x40
 80033aa:	0018      	movs	r0, r3
 80033ac:	f003 fad0 	bl	8006950 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80033b0:	f000 fe17 	bl	8003fe2 <UART2_RX_transfer_complete_callback+0x1156>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A0_MODE){
 80033b4:	4b5a      	ldr	r3, [pc, #360]	@ (8003520 <UART2_RX_transfer_complete_callback+0x694>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b0e      	cmp	r3, #14
 80033bc:	d123      	bne.n	8003406 <UART2_RX_transfer_complete_callback+0x57a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80033be:	4b59      	ldr	r3, [pc, #356]	@ (8003524 <UART2_RX_transfer_complete_callback+0x698>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2bf8      	cmp	r3, #248	@ 0xf8
 80033c6:	d001      	beq.n	80033cc <UART2_RX_transfer_complete_callback+0x540>
 80033c8:	f000 fe0c 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80033cc:	2380      	movs	r3, #128	@ 0x80
 80033ce:	0099      	lsls	r1, r3, #2
 80033d0:	23a0      	movs	r3, #160	@ 0xa0
 80033d2:	05db      	lsls	r3, r3, #23
 80033d4:	2200      	movs	r2, #0
 80033d6:	0018      	movs	r0, r3
 80033d8:	f005 fcfd 	bl	8008dd6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80033dc:	4b53      	ldr	r3, [pc, #332]	@ (800352c <UART2_RX_transfer_complete_callback+0x6a0>)
 80033de:	2201      	movs	r2, #1
 80033e0:	2140      	movs	r1, #64	@ 0x40
 80033e2:	0018      	movs	r0, r3
 80033e4:	f005 fcf7 	bl	8008dd6 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 80033e8:	4b51      	ldr	r3, [pc, #324]	@ (8003530 <UART2_RX_transfer_complete_callback+0x6a4>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80033ee:	4b51      	ldr	r3, [pc, #324]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a8>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	3301      	adds	r3, #1
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	4b4e      	ldr	r3, [pc, #312]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a8>)
 80033fa:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 80033fc:	4b48      	ldr	r3, [pc, #288]	@ (8003520 <UART2_RX_transfer_complete_callback+0x694>)
 80033fe:	220f      	movs	r2, #15
 8003400:	701a      	strb	r2, [r3, #0]
 8003402:	f000 fdef 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A1_MODE){
 8003406:	4b46      	ldr	r3, [pc, #280]	@ (8003520 <UART2_RX_transfer_complete_callback+0x694>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b0f      	cmp	r3, #15
 800340e:	d142      	bne.n	8003496 <UART2_RX_transfer_complete_callback+0x60a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003410:	4b44      	ldr	r3, [pc, #272]	@ (8003524 <UART2_RX_transfer_complete_callback+0x698>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2bf8      	cmp	r3, #248	@ 0xf8
 8003418:	d001      	beq.n	800341e <UART2_RX_transfer_complete_callback+0x592>
 800341a:	f000 fde3 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_tag++;
 800341e:	4b45      	ldr	r3, [pc, #276]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	b2db      	uxtb	r3, r3
 8003424:	3301      	adds	r3, #1
 8003426:	b2da      	uxtb	r2, r3
 8003428:	4b42      	ldr	r3, [pc, #264]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a8>)
 800342a:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 800342c:	4b41      	ldr	r3, [pc, #260]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a8>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b0b      	cmp	r3, #11
 8003434:	d80f      	bhi.n	8003456 <UART2_RX_transfer_complete_callback+0x5ca>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	0099      	lsls	r1, r3, #2
 800343a:	23a0      	movs	r3, #160	@ 0xa0
 800343c:	05db      	lsls	r3, r3, #23
 800343e:	2200      	movs	r2, #0
 8003440:	0018      	movs	r0, r3
 8003442:	f005 fcc8 	bl	8008dd6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003446:	4b39      	ldr	r3, [pc, #228]	@ (800352c <UART2_RX_transfer_complete_callback+0x6a0>)
 8003448:	2201      	movs	r2, #1
 800344a:	2140      	movs	r1, #64	@ 0x40
 800344c:	0018      	movs	r0, r3
 800344e:	f005 fcc2 	bl	8008dd6 <HAL_GPIO_WritePin>
 8003452:	f000 fdc7 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8003456:	4b37      	ldr	r3, [pc, #220]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b18      	cmp	r3, #24
 800345e:	d80f      	bhi.n	8003480 <UART2_RX_transfer_complete_callback+0x5f4>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003460:	2380      	movs	r3, #128	@ 0x80
 8003462:	0099      	lsls	r1, r3, #2
 8003464:	23a0      	movs	r3, #160	@ 0xa0
 8003466:	05db      	lsls	r3, r3, #23
 8003468:	2201      	movs	r2, #1
 800346a:	0018      	movs	r0, r3
 800346c:	f005 fcb3 	bl	8008dd6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003470:	4b2e      	ldr	r3, [pc, #184]	@ (800352c <UART2_RX_transfer_complete_callback+0x6a0>)
 8003472:	2200      	movs	r2, #0
 8003474:	2140      	movs	r1, #64	@ 0x40
 8003476:	0018      	movs	r0, r3
 8003478:	f005 fcad 	bl	8008dd6 <HAL_GPIO_WritePin>
 800347c:	f000 fdb2 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8003480:	4b27      	ldr	r3, [pc, #156]	@ (8003520 <UART2_RX_transfer_complete_callback+0x694>)
 8003482:	220f      	movs	r2, #15
 8003484:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003486:	4b26      	ldr	r3, [pc, #152]	@ (8003520 <UART2_RX_transfer_complete_callback+0x694>)
 8003488:	2208      	movs	r2, #8
 800348a:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 800348c:	4b29      	ldr	r3, [pc, #164]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a8>)
 800348e:	2201      	movs	r2, #1
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	f000 fda7 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE){
 8003496:	4b22      	ldr	r3, [pc, #136]	@ (8003520 <UART2_RX_transfer_complete_callback+0x694>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b10      	cmp	r3, #16
 800349e:	d15d      	bne.n	800355c <UART2_RX_transfer_complete_callback+0x6d0>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80034a0:	4b20      	ldr	r3, [pc, #128]	@ (8003524 <UART2_RX_transfer_complete_callback+0x698>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2bf8      	cmp	r3, #248	@ 0xf8
 80034a8:	d001      	beq.n	80034ae <UART2_RX_transfer_complete_callback+0x622>
 80034aa:	f000 fd9b 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

					//when sftwre timer times out the midi clk tag is reset to 0
					MIDI_CLK_tag++;
 80034ae:	4b21      	ldr	r3, [pc, #132]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a8>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	3301      	adds	r3, #1
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a8>)
 80034ba:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 80034bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a8>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b0b      	cmp	r3, #11
 80034c4:	d80f      	bhi.n	80034e6 <UART2_RX_transfer_complete_callback+0x65a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80034c6:	2380      	movs	r3, #128	@ 0x80
 80034c8:	0099      	lsls	r1, r3, #2
 80034ca:	23a0      	movs	r3, #160	@ 0xa0
 80034cc:	05db      	lsls	r3, r3, #23
 80034ce:	2200      	movs	r2, #0
 80034d0:	0018      	movs	r0, r3
 80034d2:	f005 fc80 	bl	8008dd6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80034d6:	4b15      	ldr	r3, [pc, #84]	@ (800352c <UART2_RX_transfer_complete_callback+0x6a0>)
 80034d8:	2201      	movs	r2, #1
 80034da:	2140      	movs	r1, #64	@ 0x40
 80034dc:	0018      	movs	r0, r3
 80034de:	f005 fc7a 	bl	8008dd6 <HAL_GPIO_WritePin>
 80034e2:	f000 fd7f 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 80034e6:	4b13      	ldr	r3, [pc, #76]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a8>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b18      	cmp	r3, #24
 80034ee:	d80f      	bhi.n	8003510 <UART2_RX_transfer_complete_callback+0x684>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80034f0:	2380      	movs	r3, #128	@ 0x80
 80034f2:	0099      	lsls	r1, r3, #2
 80034f4:	23a0      	movs	r3, #160	@ 0xa0
 80034f6:	05db      	lsls	r3, r3, #23
 80034f8:	2201      	movs	r2, #1
 80034fa:	0018      	movs	r0, r3
 80034fc:	f005 fc6b 	bl	8008dd6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003500:	4b0a      	ldr	r3, [pc, #40]	@ (800352c <UART2_RX_transfer_complete_callback+0x6a0>)
 8003502:	2200      	movs	r2, #0
 8003504:	2140      	movs	r1, #64	@ 0x40
 8003506:	0018      	movs	r0, r3
 8003508:	f005 fc65 	bl	8008dd6 <HAL_GPIO_WritePin>
 800350c:	f000 fd6a 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B1_MODE;
 8003510:	4b03      	ldr	r3, [pc, #12]	@ (8003520 <UART2_RX_transfer_complete_callback+0x694>)
 8003512:	2211      	movs	r2, #17
 8003514:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						MIDI_CLK_tag = 1;
 8003516:	4b07      	ldr	r3, [pc, #28]	@ (8003534 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003518:	2201      	movs	r2, #1
 800351a:	701a      	strb	r2, [r3, #0]
 800351c:	f000 fd62 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
 8003520:	20000430 	.word	0x20000430
 8003524:	20000594 	.word	0x20000594
 8003528:	20000d60 	.word	0x20000d60
 800352c:	50000800 	.word	0x50000800
 8003530:	20000da8 	.word	0x20000da8
 8003534:	20000cfa 	.word	0x20000cfa
 8003538:	20000988 	.word	0x20000988
 800353c:	20000444 	.word	0x20000444
 8003540:	20000d84 	.word	0x20000d84
 8003544:	20000d18 	.word	0x20000d18
 8003548:	20000cfc 	.word	0x20000cfc
 800354c:	20000028 	.word	0x20000028
 8003550:	0800e988 	.word	0x0800e988
 8003554:	20000d0c 	.word	0x20000d0c
 8003558:	200005b4 	.word	0x200005b4
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE){
 800355c:	4bed      	ldr	r3, [pc, #948]	@ (8003914 <UART2_RX_transfer_complete_callback+0xa88>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b11      	cmp	r3, #17
 8003564:	d146      	bne.n	80035f4 <UART2_RX_transfer_complete_callback+0x768>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003566:	4bec      	ldr	r3, [pc, #944]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2bf8      	cmp	r3, #248	@ 0xf8
 800356e:	d135      	bne.n	80035dc <UART2_RX_transfer_complete_callback+0x750>

					MIDI_CLK_tag++;
 8003570:	4bea      	ldr	r3, [pc, #936]	@ (800391c <UART2_RX_transfer_complete_callback+0xa90>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	3301      	adds	r3, #1
 8003578:	b2da      	uxtb	r2, r3
 800357a:	4be8      	ldr	r3, [pc, #928]	@ (800391c <UART2_RX_transfer_complete_callback+0xa90>)
 800357c:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 800357e:	4be7      	ldr	r3, [pc, #924]	@ (800391c <UART2_RX_transfer_complete_callback+0xa90>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b0b      	cmp	r3, #11
 8003586:	d80f      	bhi.n	80035a8 <UART2_RX_transfer_complete_callback+0x71c>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003588:	2380      	movs	r3, #128	@ 0x80
 800358a:	0099      	lsls	r1, r3, #2
 800358c:	23a0      	movs	r3, #160	@ 0xa0
 800358e:	05db      	lsls	r3, r3, #23
 8003590:	2200      	movs	r2, #0
 8003592:	0018      	movs	r0, r3
 8003594:	f005 fc1f 	bl	8008dd6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003598:	4be1      	ldr	r3, [pc, #900]	@ (8003920 <UART2_RX_transfer_complete_callback+0xa94>)
 800359a:	2201      	movs	r2, #1
 800359c:	2140      	movs	r1, #64	@ 0x40
 800359e:	0018      	movs	r0, r3
 80035a0:	f005 fc19 	bl	8008dd6 <HAL_GPIO_WritePin>
 80035a4:	f000 fd1e 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 80035a8:	4bdc      	ldr	r3, [pc, #880]	@ (800391c <UART2_RX_transfer_complete_callback+0xa90>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b18      	cmp	r3, #24
 80035b0:	d80f      	bhi.n	80035d2 <UART2_RX_transfer_complete_callback+0x746>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80035b2:	2380      	movs	r3, #128	@ 0x80
 80035b4:	0099      	lsls	r1, r3, #2
 80035b6:	23a0      	movs	r3, #160	@ 0xa0
 80035b8:	05db      	lsls	r3, r3, #23
 80035ba:	2201      	movs	r2, #1
 80035bc:	0018      	movs	r0, r3
 80035be:	f005 fc0a 	bl	8008dd6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80035c2:	4bd7      	ldr	r3, [pc, #860]	@ (8003920 <UART2_RX_transfer_complete_callback+0xa94>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	2140      	movs	r1, #64	@ 0x40
 80035c8:	0018      	movs	r0, r3
 80035ca:	f005 fc04 	bl	8008dd6 <HAL_GPIO_WritePin>
 80035ce:	f000 fd09 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 80035d2:	4bd2      	ldr	r3, [pc, #840]	@ (800391c <UART2_RX_transfer_complete_callback+0xa90>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	701a      	strb	r2, [r3, #0]
 80035d8:	f000 fd04 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80035dc:	4bce      	ldr	r3, [pc, #824]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa8c>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2bfa      	cmp	r3, #250	@ 0xfa
 80035e4:	d001      	beq.n	80035ea <UART2_RX_transfer_complete_callback+0x75e>
 80035e6:	f000 fcfd 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 80035ea:	4bca      	ldr	r3, [pc, #808]	@ (8003914 <UART2_RX_transfer_complete_callback+0xa88>)
 80035ec:	2212      	movs	r2, #18
 80035ee:	701a      	strb	r2, [r3, #0]
 80035f0:	f000 fcf8 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE){
 80035f4:	4bc7      	ldr	r3, [pc, #796]	@ (8003914 <UART2_RX_transfer_complete_callback+0xa88>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b12      	cmp	r3, #18
 80035fc:	d001      	beq.n	8003602 <UART2_RX_transfer_complete_callback+0x776>
 80035fe:	f000 fcf1 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003602:	4bc5      	ldr	r3, [pc, #788]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2bf8      	cmp	r3, #248	@ 0xf8
 800360a:	d001      	beq.n	8003610 <UART2_RX_transfer_complete_callback+0x784>
 800360c:	f000 fcea 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8003610:	4bc4      	ldr	r3, [pc, #784]	@ (8003924 <UART2_RX_transfer_complete_callback+0xa98>)
 8003612:	0018      	movs	r0, r3
 8003614:	f001 fdba 	bl	800518c <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003618:	2380      	movs	r3, #128	@ 0x80
 800361a:	0099      	lsls	r1, r3, #2
 800361c:	23a0      	movs	r3, #160	@ 0xa0
 800361e:	05db      	lsls	r3, r3, #23
 8003620:	2201      	movs	r2, #1
 8003622:	0018      	movs	r0, r3
 8003624:	f005 fbd7 	bl	8008dd6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003628:	4bbd      	ldr	r3, [pc, #756]	@ (8003920 <UART2_RX_transfer_complete_callback+0xa94>)
 800362a:	2200      	movs	r2, #0
 800362c:	2140      	movs	r1, #64	@ 0x40
 800362e:	0018      	movs	r0, r3
 8003630:	f005 fbd1 	bl	8008dd6 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003634:	2380      	movs	r3, #128	@ 0x80
 8003636:	0099      	lsls	r1, r3, #2
 8003638:	23a0      	movs	r3, #160	@ 0xa0
 800363a:	05db      	lsls	r3, r3, #23
 800363c:	2200      	movs	r2, #0
 800363e:	0018      	movs	r0, r3
 8003640:	f005 fbc9 	bl	8008dd6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003644:	4bb6      	ldr	r3, [pc, #728]	@ (8003920 <UART2_RX_transfer_complete_callback+0xa94>)
 8003646:	2201      	movs	r2, #1
 8003648:	2140      	movs	r1, #64	@ 0x40
 800364a:	0018      	movs	r0, r3
 800364c:	f005 fbc3 	bl	8008dd6 <HAL_GPIO_WritePin>

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 8003650:	4bb0      	ldr	r3, [pc, #704]	@ (8003914 <UART2_RX_transfer_complete_callback+0xa88>)
 8003652:	2212      	movs	r2, #18
 8003654:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003656:	4baf      	ldr	r3, [pc, #700]	@ (8003914 <UART2_RX_transfer_complete_callback+0xa88>)
 8003658:	2208      	movs	r2, #8
 800365a:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 1;
 800365c:	4baf      	ldr	r3, [pc, #700]	@ (800391c <UART2_RX_transfer_complete_callback+0xa90>)
 800365e:	2201      	movs	r2, #1
 8003660:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8003662:	4bb1      	ldr	r3, [pc, #708]	@ (8003928 <UART2_RX_transfer_complete_callback+0xa9c>)
 8003664:	2100      	movs	r1, #0
 8003666:	0018      	movs	r0, r3
 8003668:	f003 f8e5 	bl	8006836 <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 800366c:	4baf      	ldr	r3, [pc, #700]	@ (800392c <UART2_RX_transfer_complete_callback+0xaa0>)
 800366e:	2200      	movs	r2, #0
 8003670:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8003672:	4aaf      	ldr	r2, [pc, #700]	@ (8003930 <UART2_RX_transfer_complete_callback+0xaa4>)
 8003674:	4bab      	ldr	r3, [pc, #684]	@ (8003924 <UART2_RX_transfer_complete_callback+0xa98>)
 8003676:	0011      	movs	r1, r2
 8003678:	0018      	movs	r0, r3
 800367a:	f001 fc0b 	bl	8004e94 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 800367e:	4aad      	ldr	r2, [pc, #692]	@ (8003934 <UART2_RX_transfer_complete_callback+0xaa8>)
 8003680:	4ba8      	ldr	r3, [pc, #672]	@ (8003924 <UART2_RX_transfer_complete_callback+0xa98>)
 8003682:	0011      	movs	r1, r2
 8003684:	0018      	movs	r0, r3
 8003686:	f001 fc05 	bl	8004e94 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 800368a:	4bab      	ldr	r3, [pc, #684]	@ (8003938 <UART2_RX_transfer_complete_callback+0xaac>)
 800368c:	2108      	movs	r1, #8
 800368e:	0018      	movs	r0, r3
 8003690:	f003 f94c 	bl	800692c <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8003694:	4ba7      	ldr	r3, [pc, #668]	@ (8003934 <UART2_RX_transfer_complete_callback+0xaa8>)
 8003696:	2100      	movs	r1, #0
 8003698:	0018      	movs	r0, r3
 800369a:	f001 fda3 	bl	80051e4 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 800369e:	4aa7      	ldr	r2, [pc, #668]	@ (800393c <UART2_RX_transfer_complete_callback+0xab0>)
 80036a0:	4ba4      	ldr	r3, [pc, #656]	@ (8003934 <UART2_RX_transfer_complete_callback+0xaa8>)
 80036a2:	0011      	movs	r1, r2
 80036a4:	0018      	movs	r0, r3
 80036a6:	f001 fe93 	bl	80053d0 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 80036aa:	4ba5      	ldr	r3, [pc, #660]	@ (8003940 <UART2_RX_transfer_complete_callback+0xab4>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	001a      	movs	r2, r3
 80036b0:	49a4      	ldr	r1, [pc, #656]	@ (8003944 <UART2_RX_transfer_complete_callback+0xab8>)
 80036b2:	4ba5      	ldr	r3, [pc, #660]	@ (8003948 <UART2_RX_transfer_complete_callback+0xabc>)
 80036b4:	0018      	movs	r0, r3
 80036b6:	f003 fddd 	bl	8007274 <HAL_ADC_Start_DMA>
 80036ba:	f000 fc93 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
		}
	}
	//not a realtime status byte
	else{

		if(active_status_byte == 0){
 80036be:	4ba3      	ldr	r3, [pc, #652]	@ (800394c <UART2_RX_transfer_complete_callback+0xac0>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d000      	beq.n	80036ca <UART2_RX_transfer_complete_callback+0x83e>
 80036c8:	e29e      	b.n	8003c08 <UART2_RX_transfer_complete_callback+0xd7c>

			if(running_status_byte == 0){
 80036ca:	4ba1      	ldr	r3, [pc, #644]	@ (8003950 <UART2_RX_transfer_complete_callback+0xac4>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d000      	beq.n	80036d6 <UART2_RX_transfer_complete_callback+0x84a>
 80036d4:	e0a3      	b.n	800381e <UART2_RX_transfer_complete_callback+0x992>

				if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80036d6:	4b9f      	ldr	r3, [pc, #636]	@ (8003954 <UART2_RX_transfer_complete_callback+0xac8>)
 80036d8:	0018      	movs	r0, r3
 80036da:	f7fe f812 	bl	8001702 <Is_Data_Buffer_Empty>
 80036de:	0003      	movs	r3, r0
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d001      	beq.n	80036e8 <UART2_RX_transfer_complete_callback+0x85c>
 80036e4:	f000 fc7e 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

					if(Is_Status_Byte(rx_buffer) == YES){
 80036e8:	4b8b      	ldr	r3, [pc, #556]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa8c>)
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7fd fec8 	bl	8001480 <Is_Status_Byte>
 80036f0:	0003      	movs	r3, r0
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d001      	beq.n	80036fa <UART2_RX_transfer_complete_callback+0x86e>
 80036f6:	f000 fc75 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_PC_Status_Byte(rx_buffer) == YES){
 80036fa:	4b87      	ldr	r3, [pc, #540]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa8c>)
 80036fc:	0018      	movs	r0, r3
 80036fe:	f7fd fef1 	bl	80014e4 <Is_PC_Status_Byte>
 8003702:	0003      	movs	r3, r0
 8003704:	2b01      	cmp	r3, #1
 8003706:	d134      	bne.n	8003772 <UART2_RX_transfer_complete_callback+0x8e6>

							running_status_byte = (uint8_t)*rx_buffer;
 8003708:	4b83      	ldr	r3, [pc, #524]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa8c>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	b2da      	uxtb	r2, r3
 800370e:	4b90      	ldr	r3, [pc, #576]	@ (8003950 <UART2_RX_transfer_complete_callback+0xac4>)
 8003710:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003712:	4b91      	ldr	r3, [pc, #580]	@ (8003958 <UART2_RX_transfer_complete_callback+0xacc>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	b2da      	uxtb	r2, r3
 8003718:	4b7f      	ldr	r3, [pc, #508]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa8c>)
 800371a:	0011      	movs	r1, r2
 800371c:	0018      	movs	r0, r3
 800371e:	f7fd ffcf 	bl	80016c0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003722:	0003      	movs	r3, r0
 8003724:	2b01      	cmp	r3, #1
 8003726:	d10d      	bne.n	8003744 <UART2_RX_transfer_complete_callback+0x8b8>

								active_status_byte = (uint8_t)*rx_buffer;
 8003728:	4b7b      	ldr	r3, [pc, #492]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa8c>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	b2da      	uxtb	r2, r3
 800372e:	4b87      	ldr	r3, [pc, #540]	@ (800394c <UART2_RX_transfer_complete_callback+0xac0>)
 8003730:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003732:	2380      	movs	r3, #128	@ 0x80
 8003734:	005a      	lsls	r2, r3, #1
 8003736:	4b80      	ldr	r3, [pc, #512]	@ (8003938 <UART2_RX_transfer_complete_callback+0xaac>)
 8003738:	0011      	movs	r1, r2
 800373a:	0018      	movs	r0, r3
 800373c:	f003 f8f6 	bl	800692c <Set_Status_Bit>
 8003740:	f000 fc50 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 8003744:	4b7c      	ldr	r3, [pc, #496]	@ (8003938 <UART2_RX_transfer_complete_callback+0xaac>)
 8003746:	0018      	movs	r0, r3
 8003748:	f7fe f871 	bl	800182e <Is_OMNI_On>
 800374c:	0003      	movs	r3, r0
 800374e:	2b01      	cmp	r3, #1
 8003750:	d001      	beq.n	8003756 <UART2_RX_transfer_complete_callback+0x8ca>
 8003752:	f000 fc47 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 8003756:	4b70      	ldr	r3, [pc, #448]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	b2da      	uxtb	r2, r3
 800375c:	4b7b      	ldr	r3, [pc, #492]	@ (800394c <UART2_RX_transfer_complete_callback+0xac0>)
 800375e:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003760:	2380      	movs	r3, #128	@ 0x80
 8003762:	005a      	lsls	r2, r3, #1
 8003764:	4b74      	ldr	r3, [pc, #464]	@ (8003938 <UART2_RX_transfer_complete_callback+0xaac>)
 8003766:	0011      	movs	r1, r2
 8003768:	0018      	movs	r0, r3
 800376a:	f003 f8df 	bl	800692c <Set_Status_Bit>
 800376e:	f000 fc39 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8003772:	4b69      	ldr	r3, [pc, #420]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003774:	0018      	movs	r0, r3
 8003776:	f7fd fed1 	bl	800151c <Is_CC_Status_Byte>
 800377a:	0003      	movs	r3, r0
 800377c:	2b01      	cmp	r3, #1
 800377e:	d134      	bne.n	80037ea <UART2_RX_transfer_complete_callback+0x95e>

							running_status_byte = (uint8_t)*rx_buffer;
 8003780:	4b65      	ldr	r3, [pc, #404]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4b72      	ldr	r3, [pc, #456]	@ (8003950 <UART2_RX_transfer_complete_callback+0xac4>)
 8003788:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 800378a:	4b73      	ldr	r3, [pc, #460]	@ (8003958 <UART2_RX_transfer_complete_callback+0xacc>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	b2da      	uxtb	r2, r3
 8003790:	4b61      	ldr	r3, [pc, #388]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003792:	0011      	movs	r1, r2
 8003794:	0018      	movs	r0, r3
 8003796:	f7fd ff93 	bl	80016c0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 800379a:	0003      	movs	r3, r0
 800379c:	2b01      	cmp	r3, #1
 800379e:	d10d      	bne.n	80037bc <UART2_RX_transfer_complete_callback+0x930>

								active_status_byte = (uint8_t)*rx_buffer;
 80037a0:	4b5d      	ldr	r3, [pc, #372]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa8c>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	4b69      	ldr	r3, [pc, #420]	@ (800394c <UART2_RX_transfer_complete_callback+0xac0>)
 80037a8:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80037aa:	2380      	movs	r3, #128	@ 0x80
 80037ac:	005a      	lsls	r2, r3, #1
 80037ae:	4b62      	ldr	r3, [pc, #392]	@ (8003938 <UART2_RX_transfer_complete_callback+0xaac>)
 80037b0:	0011      	movs	r1, r2
 80037b2:	0018      	movs	r0, r3
 80037b4:	f003 f8ba 	bl	800692c <Set_Status_Bit>
 80037b8:	f000 fc14 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 80037bc:	4b5e      	ldr	r3, [pc, #376]	@ (8003938 <UART2_RX_transfer_complete_callback+0xaac>)
 80037be:	0018      	movs	r0, r3
 80037c0:	f7fe f835 	bl	800182e <Is_OMNI_On>
 80037c4:	0003      	movs	r3, r0
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d001      	beq.n	80037ce <UART2_RX_transfer_complete_callback+0x942>
 80037ca:	f000 fc0b 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 80037ce:	4b52      	ldr	r3, [pc, #328]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa8c>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	4b5d      	ldr	r3, [pc, #372]	@ (800394c <UART2_RX_transfer_complete_callback+0xac0>)
 80037d6:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80037d8:	2380      	movs	r3, #128	@ 0x80
 80037da:	005a      	lsls	r2, r3, #1
 80037dc:	4b56      	ldr	r3, [pc, #344]	@ (8003938 <UART2_RX_transfer_complete_callback+0xaac>)
 80037de:	0011      	movs	r1, r2
 80037e0:	0018      	movs	r0, r3
 80037e2:	f003 f8a3 	bl	800692c <Set_Status_Bit>
 80037e6:	f000 fbfd 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 80037ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa8c>)
 80037ec:	0018      	movs	r0, r3
 80037ee:	f7fd ff57 	bl	80016a0 <Is_Sysex_Start_Status_Byte>
 80037f2:	0003      	movs	r3, r0
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d001      	beq.n	80037fc <UART2_RX_transfer_complete_callback+0x970>
 80037f8:	f000 fbf4 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

							active_status_byte = (uint8_t)*rx_buffer;
 80037fc:	4b46      	ldr	r3, [pc, #280]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa8c>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	b2da      	uxtb	r2, r3
 8003802:	4b52      	ldr	r3, [pc, #328]	@ (800394c <UART2_RX_transfer_complete_callback+0xac0>)
 8003804:	701a      	strb	r2, [r3, #0]
							running_status_byte = 0;
 8003806:	4b52      	ldr	r3, [pc, #328]	@ (8003950 <UART2_RX_transfer_complete_callback+0xac4>)
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800380c:	2380      	movs	r3, #128	@ 0x80
 800380e:	005a      	lsls	r2, r3, #1
 8003810:	4b49      	ldr	r3, [pc, #292]	@ (8003938 <UART2_RX_transfer_complete_callback+0xaac>)
 8003812:	0011      	movs	r1, r2
 8003814:	0018      	movs	r0, r3
 8003816:	f003 f889 	bl	800692c <Set_Status_Bit>
 800381a:	f000 fbe3 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

						}
					}
				}
			}
			else if(running_status_byte != 0){
 800381e:	4b4c      	ldr	r3, [pc, #304]	@ (8003950 <UART2_RX_transfer_complete_callback+0xac4>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <UART2_RX_transfer_complete_callback+0x9a0>
 8003828:	f000 fbdc 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

				if(Is_Data_Byte(rx_buffer) == YES){
 800382c:	4b3a      	ldr	r3, [pc, #232]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa8c>)
 800382e:	0018      	movs	r0, r3
 8003830:	f7fd fe3f 	bl	80014b2 <Is_Data_Byte>
 8003834:	0003      	movs	r3, r0
 8003836:	2b01      	cmp	r3, #1
 8003838:	d000      	beq.n	800383c <UART2_RX_transfer_complete_callback+0x9b0>
 800383a:	e151      	b.n	8003ae0 <UART2_RX_transfer_complete_callback+0xc54>

					Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800383c:	2380      	movs	r3, #128	@ 0x80
 800383e:	005a      	lsls	r2, r3, #1
 8003840:	4b3d      	ldr	r3, [pc, #244]	@ (8003938 <UART2_RX_transfer_complete_callback+0xaac>)
 8003842:	0011      	movs	r1, r2
 8003844:	0018      	movs	r0, r3
 8003846:	f003 f871 	bl	800692c <Set_Status_Bit>

					if(Is_PC_Status_Byte(&running_status_byte) == YES){
 800384a:	4b41      	ldr	r3, [pc, #260]	@ (8003950 <UART2_RX_transfer_complete_callback+0xac4>)
 800384c:	0018      	movs	r0, r3
 800384e:	f7fd fe49 	bl	80014e4 <Is_PC_Status_Byte>
 8003852:	0003      	movs	r3, r0
 8003854:	2b01      	cmp	r3, #1
 8003856:	d143      	bne.n	80038e0 <UART2_RX_transfer_complete_callback+0xa54>

						if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 8003858:	4b3f      	ldr	r3, [pc, #252]	@ (8003958 <UART2_RX_transfer_complete_callback+0xacc>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	b2da      	uxtb	r2, r3
 800385e:	4b3c      	ldr	r3, [pc, #240]	@ (8003950 <UART2_RX_transfer_complete_callback+0xac4>)
 8003860:	0011      	movs	r1, r2
 8003862:	0018      	movs	r0, r3
 8003864:	f7fd ff2c 	bl	80016c0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003868:	0003      	movs	r3, r0
 800386a:	2b01      	cmp	r3, #1
 800386c:	d008      	beq.n	8003880 <UART2_RX_transfer_complete_callback+0x9f4>
																|| (Is_OMNI_On(&statuses) == YES)){
 800386e:	4b32      	ldr	r3, [pc, #200]	@ (8003938 <UART2_RX_transfer_complete_callback+0xaac>)
 8003870:	0018      	movs	r0, r3
 8003872:	f7fd ffdc 	bl	800182e <Is_OMNI_On>
 8003876:	0003      	movs	r3, r0
 8003878:	2b01      	cmp	r3, #1
 800387a:	d001      	beq.n	8003880 <UART2_RX_transfer_complete_callback+0x9f4>
 800387c:	f000 fbb2 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

							if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003880:	4b34      	ldr	r3, [pc, #208]	@ (8003954 <UART2_RX_transfer_complete_callback+0xac8>)
 8003882:	0018      	movs	r0, r3
 8003884:	f7fd ff3d 	bl	8001702 <Is_Data_Buffer_Empty>
 8003888:	0003      	movs	r3, r0
 800388a:	2b01      	cmp	r3, #1
 800388c:	d001      	beq.n	8003892 <UART2_RX_transfer_complete_callback+0xa06>
 800388e:	f000 fba9 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

								//first data byte received
								if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 8003892:	4b21      	ldr	r3, [pc, #132]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003894:	2104      	movs	r1, #4
 8003896:	0018      	movs	r0, r3
 8003898:	f7fd ff81 	bl	800179e <Is_Program_Change_Data_Byte_In_Range>
 800389c:	0003      	movs	r3, r0
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d10f      	bne.n	80038c2 <UART2_RX_transfer_complete_callback+0xa36>

									Set_All_Pots_to_PC_Mode();
 80038a2:	f7fd fd39 	bl	8001318 <Set_All_Pots_to_PC_Mode>
									preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 80038a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa8c>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	3301      	adds	r3, #1
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	4b2a      	ldr	r3, [pc, #168]	@ (800395c <UART2_RX_transfer_complete_callback+0xad0>)
 80038b2:	701a      	strb	r2, [r3, #0]
									Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 80038b4:	f7fc fe58 	bl	8000568 <Update_Params_Based_On_Mode_Selected>
									Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80038b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003938 <UART2_RX_transfer_complete_callback+0xaac>)
 80038ba:	2108      	movs	r1, #8
 80038bc:	0018      	movs	r0, r3
 80038be:	f003 f847 	bl	8006950 <Clear_Status_Bit>
								}

								//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
								Clear_Data_Buffer(&MIDI_data);
 80038c2:	4b24      	ldr	r3, [pc, #144]	@ (8003954 <UART2_RX_transfer_complete_callback+0xac8>)
 80038c4:	0018      	movs	r0, r3
 80038c6:	f7fd ff4c 	bl	8001762 <Clear_Data_Buffer>
								active_status_byte = 0;
 80038ca:	4b20      	ldr	r3, [pc, #128]	@ (800394c <UART2_RX_transfer_complete_callback+0xac0>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	701a      	strb	r2, [r3, #0]

								//not really required
								Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80038d0:	4a19      	ldr	r2, [pc, #100]	@ (8003938 <UART2_RX_transfer_complete_callback+0xaac>)
 80038d2:	4b23      	ldr	r3, [pc, #140]	@ (8003960 <UART2_RX_transfer_complete_callback+0xad4>)
 80038d4:	0011      	movs	r1, r2
 80038d6:	0018      	movs	r0, r3
 80038d8:	f7fd ffc3 	bl	8001862 <Reset_and_Stop_MIDI_Software_Timer>
 80038dc:	f000 fb82 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(&running_status_byte) == YES){
 80038e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003950 <UART2_RX_transfer_complete_callback+0xac4>)
 80038e2:	0018      	movs	r0, r3
 80038e4:	f7fd fe1a 	bl	800151c <Is_CC_Status_Byte>
 80038e8:	0003      	movs	r3, r0
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d001      	beq.n	80038f2 <UART2_RX_transfer_complete_callback+0xa66>
 80038ee:	f000 fb79 	bl	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80038f2:	4b18      	ldr	r3, [pc, #96]	@ (8003954 <UART2_RX_transfer_complete_callback+0xac8>)
 80038f4:	0018      	movs	r0, r3
 80038f6:	f7fd ff04 	bl	8001702 <Is_Data_Buffer_Empty>
 80038fa:	0003      	movs	r3, r0
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d131      	bne.n	8003964 <UART2_RX_transfer_complete_callback+0xad8>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8003900:	4b05      	ldr	r3, [pc, #20]	@ (8003918 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	b2da      	uxtb	r2, r3
 8003906:	4b13      	ldr	r3, [pc, #76]	@ (8003954 <UART2_RX_transfer_complete_callback+0xac8>)
 8003908:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 800390a:	4b15      	ldr	r3, [pc, #84]	@ (8003960 <UART2_RX_transfer_complete_callback+0xad4>)
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	e368      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	20000430 	.word	0x20000430
 8003918:	20000594 	.word	0x20000594
 800391c:	20000cfa 	.word	0x20000cfa
 8003920:	50000800 	.word	0x50000800
 8003924:	20000d60 	.word	0x20000d60
 8003928:	20000988 	.word	0x20000988
 800392c:	20000444 	.word	0x20000444
 8003930:	20000d84 	.word	0x20000d84
 8003934:	20000d18 	.word	0x20000d18
 8003938:	20000cfc 	.word	0x20000cfc
 800393c:	20000028 	.word	0x20000028
 8003940:	0800e988 	.word	0x0800e988
 8003944:	20000d0c 	.word	0x20000d0c
 8003948:	200005b4 	.word	0x200005b4
 800394c:	20000583 	.word	0x20000583
 8003950:	20000584 	.word	0x20000584
 8003954:	20000588 	.word	0x20000588
 8003958:	20000582 	.word	0x20000582
 800395c:	20000554 	.word	0x20000554
 8003960:	20000d04 	.word	0x20000d04

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 8003964:	4bd6      	ldr	r3, [pc, #856]	@ (8003cc0 <UART2_RX_transfer_complete_callback+0xe34>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	b2da      	uxtb	r2, r3
 800396a:	4bd6      	ldr	r3, [pc, #856]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe38>)
 800396c:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 800396e:	4ad6      	ldr	r2, [pc, #856]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003970:	4bd6      	ldr	r3, [pc, #856]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe40>)
 8003972:	0011      	movs	r1, r2
 8003974:	0018      	movs	r0, r3
 8003976:	f7fd ff74 	bl	8001862 <Reset_and_Stop_MIDI_Software_Timer>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 800397a:	4bd2      	ldr	r3, [pc, #840]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe38>)
 800397c:	0018      	movs	r0, r3
 800397e:	f7fd fde9 	bl	8001554 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 8003982:	0003      	movs	r3, r0
 8003984:	2b01      	cmp	r3, #1
 8003986:	d14c      	bne.n	8003a22 <UART2_RX_transfer_complete_callback+0xb96>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES){
 8003988:	4bd1      	ldr	r3, [pc, #836]	@ (8003cd0 <UART2_RX_transfer_complete_callback+0xe44>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	b2da      	uxtb	r2, r3
 800398e:	4bd1      	ldr	r3, [pc, #836]	@ (8003cd4 <UART2_RX_transfer_complete_callback+0xe48>)
 8003990:	0011      	movs	r1, r2
 8003992:	0018      	movs	r0, r3
 8003994:	f7fd fe94 	bl	80016c0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003998:	0003      	movs	r3, r0
 800399a:	2b01      	cmp	r3, #1
 800399c:	d139      	bne.n	8003a12 <UART2_RX_transfer_complete_callback+0xb86>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 800399e:	4ace      	ldr	r2, [pc, #824]	@ (8003cd8 <UART2_RX_transfer_complete_callback+0xe4c>)
 80039a0:	4bc8      	ldr	r3, [pc, #800]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe38>)
 80039a2:	0011      	movs	r1, r2
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7fd fe34 	bl	8001612 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 80039aa:	0003      	movs	r3, r0
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d130      	bne.n	8003a12 <UART2_RX_transfer_complete_callback+0xb86>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 80039b0:	4bc4      	ldr	r3, [pc, #784]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe38>)
 80039b2:	785b      	ldrb	r3, [r3, #1]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b79      	cmp	r3, #121	@ 0x79
 80039b8:	d10b      	bne.n	80039d2 <UART2_RX_transfer_complete_callback+0xb46>

											Reset_All_Controllers(&params, &delay_line);
 80039ba:	4ac8      	ldr	r2, [pc, #800]	@ (8003cdc <UART2_RX_transfer_complete_callback+0xe50>)
 80039bc:	4bc8      	ldr	r3, [pc, #800]	@ (8003ce0 <UART2_RX_transfer_complete_callback+0xe54>)
 80039be:	0011      	movs	r1, r2
 80039c0:	0018      	movs	r0, r3
 80039c2:	f7fd ff69 	bl	8001898 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80039c6:	4bc0      	ldr	r3, [pc, #768]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe3c>)
 80039c8:	2108      	movs	r1, #8
 80039ca:	0018      	movs	r0, r3
 80039cc:	f002 ffc0 	bl	8006950 <Clear_Status_Bit>
 80039d0:	e01f      	b.n	8003a12 <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 80039d2:	4bbc      	ldr	r3, [pc, #752]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe38>)
 80039d4:	785b      	ldrb	r3, [r3, #1]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b7a      	cmp	r3, #122	@ 0x7a
 80039da:	d107      	bne.n	80039ec <UART2_RX_transfer_complete_callback+0xb60>

											Set_Local_Control();
 80039dc:	f7fd ffb6 	bl	800194c <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80039e0:	4bb9      	ldr	r3, [pc, #740]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe3c>)
 80039e2:	2108      	movs	r1, #8
 80039e4:	0018      	movs	r0, r3
 80039e6:	f002 ffb3 	bl	8006950 <Clear_Status_Bit>
 80039ea:	e012      	b.n	8003a12 <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 80039ec:	4bb5      	ldr	r3, [pc, #724]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe38>)
 80039ee:	785b      	ldrb	r3, [r3, #1]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b7c      	cmp	r3, #124	@ 0x7c
 80039f4:	d104      	bne.n	8003a00 <UART2_RX_transfer_complete_callback+0xb74>

											Set_OMNI_Off(&statuses);
 80039f6:	4bb4      	ldr	r3, [pc, #720]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe3c>)
 80039f8:	0018      	movs	r0, r3
 80039fa:	f7fd ffdf 	bl	80019bc <Set_OMNI_Off>
 80039fe:	e008      	b.n	8003a12 <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003a00:	4bb0      	ldr	r3, [pc, #704]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a02:	785b      	ldrb	r3, [r3, #1]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b7d      	cmp	r3, #125	@ 0x7d
 8003a08:	d103      	bne.n	8003a12 <UART2_RX_transfer_complete_callback+0xb86>

											Set_OMNI_On(&statuses);
 8003a0a:	4baf      	ldr	r3, [pc, #700]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f7fd ffe5 	bl	80019dc <Set_OMNI_On>
										}
									}
								}

								//not required
								active_status_byte = 0;
 8003a12:	4bb4      	ldr	r3, [pc, #720]	@ (8003ce4 <UART2_RX_transfer_complete_callback+0xe58>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003a18:	4baa      	ldr	r3, [pc, #680]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f7fd fea1 	bl	8001762 <Clear_Data_Buffer>
 8003a20:	e2e0      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003a22:	4ba8      	ldr	r3, [pc, #672]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7fd fdc1 	bl	80015ac <Is_Utilised_CC_First_Data_Byte>
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d14f      	bne.n	8003ad0 <UART2_RX_transfer_complete_callback+0xc44>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 8003a30:	4ba7      	ldr	r3, [pc, #668]	@ (8003cd0 <UART2_RX_transfer_complete_callback+0xe44>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	4ba7      	ldr	r3, [pc, #668]	@ (8003cd4 <UART2_RX_transfer_complete_callback+0xe48>)
 8003a38:	0011      	movs	r1, r2
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f7fd fe40 	bl	80016c0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003a40:	0003      	movs	r3, r0
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d006      	beq.n	8003a54 <UART2_RX_transfer_complete_callback+0xbc8>
										|| (Is_OMNI_On(&statuses) == YES)){
 8003a46:	4ba0      	ldr	r3, [pc, #640]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f7fd fef0 	bl	800182e <Is_OMNI_On>
 8003a4e:	0003      	movs	r3, r0
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d135      	bne.n	8003ac0 <UART2_RX_transfer_complete_callback+0xc34>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 8003a54:	4b9b      	ldr	r3, [pc, #620]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b14      	cmp	r3, #20
 8003a5c:	d104      	bne.n	8003a68 <UART2_RX_transfer_complete_callback+0xbdc>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003a5e:	4b9e      	ldr	r3, [pc, #632]	@ (8003cd8 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003a60:	0018      	movs	r0, r3
 8003a62:	f7fd fbd7 	bl	8001214 <Set_Waveshape_to_CC_Mode_and_Value>
 8003a66:	e02b      	b.n	8003ac0 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 8003a68:	4b96      	ldr	r3, [pc, #600]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b15      	cmp	r3, #21
 8003a70:	d109      	bne.n	8003a86 <UART2_RX_transfer_complete_callback+0xbfa>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003a72:	4b99      	ldr	r3, [pc, #612]	@ (8003cd8 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003a74:	0018      	movs	r0, r3
 8003a76:	f7fd fbe7 	bl	8001248 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003a7a:	4b93      	ldr	r3, [pc, #588]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003a7c:	2108      	movs	r1, #8
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f002 ff66 	bl	8006950 <Clear_Status_Bit>
 8003a84:	e01c      	b.n	8003ac0 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8003a86:	4b8f      	ldr	r3, [pc, #572]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b16      	cmp	r3, #22
 8003a8e:	d104      	bne.n	8003a9a <UART2_RX_transfer_complete_callback+0xc0e>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003a90:	4b91      	ldr	r3, [pc, #580]	@ (8003cd8 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003a92:	0018      	movs	r0, r3
 8003a94:	f7fd fbf2 	bl	800127c <Set_Depth_to_CC_Mode_and_Value>
 8003a98:	e012      	b.n	8003ac0 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8003a9a:	4b8a      	ldr	r3, [pc, #552]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b17      	cmp	r3, #23
 8003aa2:	d104      	bne.n	8003aae <UART2_RX_transfer_complete_callback+0xc22>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003aa4:	4b8c      	ldr	r3, [pc, #560]	@ (8003cd8 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f7fd fc02 	bl	80012b0 <Set_Symmetry_to_CC_Mode_and_Value>
 8003aac:	e008      	b.n	8003ac0 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 8003aae:	4b85      	ldr	r3, [pc, #532]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe38>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b18      	cmp	r3, #24
 8003ab6:	d103      	bne.n	8003ac0 <UART2_RX_transfer_complete_callback+0xc34>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003ab8:	4b87      	ldr	r3, [pc, #540]	@ (8003cd8 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003aba:	0018      	movs	r0, r3
 8003abc:	f7fd fc12 	bl	80012e4 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 8003ac0:	4b88      	ldr	r3, [pc, #544]	@ (8003ce4 <UART2_RX_transfer_complete_callback+0xe58>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003ac6:	4b7f      	ldr	r3, [pc, #508]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe38>)
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f7fd fe4a 	bl	8001762 <Clear_Data_Buffer>
 8003ace:	e289      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 8003ad0:	4b84      	ldr	r3, [pc, #528]	@ (8003ce4 <UART2_RX_transfer_complete_callback+0xe58>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003ad6:	4b7b      	ldr	r3, [pc, #492]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe38>)
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f7fd fe42 	bl	8001762 <Clear_Data_Buffer>
 8003ade:	e281      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
					}
					//don't need to check Sysex with running status, as not supported by MIDI
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8003ae0:	4b78      	ldr	r3, [pc, #480]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe38>)
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f7fd fe3d 	bl	8001762 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003ae8:	4a77      	ldr	r2, [pc, #476]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003aea:	4b78      	ldr	r3, [pc, #480]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe40>)
 8003aec:	0011      	movs	r1, r2
 8003aee:	0018      	movs	r0, r3
 8003af0:	f7fd feb7 	bl	8001862 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003af4:	4b72      	ldr	r3, [pc, #456]	@ (8003cc0 <UART2_RX_transfer_complete_callback+0xe34>)
 8003af6:	0018      	movs	r0, r3
 8003af8:	f7fd fcf4 	bl	80014e4 <Is_PC_Status_Byte>
 8003afc:	0003      	movs	r3, r0
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d131      	bne.n	8003b66 <UART2_RX_transfer_complete_callback+0xcda>

						running_status_byte = (uint8_t)*rx_buffer;
 8003b02:	4b6f      	ldr	r3, [pc, #444]	@ (8003cc0 <UART2_RX_transfer_complete_callback+0xe34>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	4b72      	ldr	r3, [pc, #456]	@ (8003cd4 <UART2_RX_transfer_complete_callback+0xe48>)
 8003b0a:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003b0c:	4b70      	ldr	r3, [pc, #448]	@ (8003cd0 <UART2_RX_transfer_complete_callback+0xe44>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	4b6b      	ldr	r3, [pc, #428]	@ (8003cc0 <UART2_RX_transfer_complete_callback+0xe34>)
 8003b14:	0011      	movs	r1, r2
 8003b16:	0018      	movs	r0, r3
 8003b18:	f7fd fdd2 	bl	80016c0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d10c      	bne.n	8003b3c <UART2_RX_transfer_complete_callback+0xcb0>

							active_status_byte = (uint8_t)*rx_buffer;
 8003b22:	4b67      	ldr	r3, [pc, #412]	@ (8003cc0 <UART2_RX_transfer_complete_callback+0xe34>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	4b6e      	ldr	r3, [pc, #440]	@ (8003ce4 <UART2_RX_transfer_complete_callback+0xe58>)
 8003b2a:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003b2c:	2380      	movs	r3, #128	@ 0x80
 8003b2e:	005a      	lsls	r2, r3, #1
 8003b30:	4b65      	ldr	r3, [pc, #404]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003b32:	0011      	movs	r1, r2
 8003b34:	0018      	movs	r0, r3
 8003b36:	f002 fef9 	bl	800692c <Set_Status_Bit>
 8003b3a:	e253      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003b3c:	4b62      	ldr	r3, [pc, #392]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f7fd fe75 	bl	800182e <Is_OMNI_On>
 8003b44:	0003      	movs	r3, r0
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d000      	beq.n	8003b4c <UART2_RX_transfer_complete_callback+0xcc0>
 8003b4a:	e24b      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003b4c:	4b5c      	ldr	r3, [pc, #368]	@ (8003cc0 <UART2_RX_transfer_complete_callback+0xe34>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	4b64      	ldr	r3, [pc, #400]	@ (8003ce4 <UART2_RX_transfer_complete_callback+0xe58>)
 8003b54:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003b56:	2380      	movs	r3, #128	@ 0x80
 8003b58:	005a      	lsls	r2, r3, #1
 8003b5a:	4b5b      	ldr	r3, [pc, #364]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003b5c:	0011      	movs	r1, r2
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f002 fee4 	bl	800692c <Set_Status_Bit>
 8003b64:	e23e      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8003b66:	4b56      	ldr	r3, [pc, #344]	@ (8003cc0 <UART2_RX_transfer_complete_callback+0xe34>)
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f7fd fcd7 	bl	800151c <Is_CC_Status_Byte>
 8003b6e:	0003      	movs	r3, r0
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d131      	bne.n	8003bd8 <UART2_RX_transfer_complete_callback+0xd4c>

						running_status_byte = (uint8_t)*rx_buffer;
 8003b74:	4b52      	ldr	r3, [pc, #328]	@ (8003cc0 <UART2_RX_transfer_complete_callback+0xe34>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	4b56      	ldr	r3, [pc, #344]	@ (8003cd4 <UART2_RX_transfer_complete_callback+0xe48>)
 8003b7c:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003b7e:	4b54      	ldr	r3, [pc, #336]	@ (8003cd0 <UART2_RX_transfer_complete_callback+0xe44>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	4b4e      	ldr	r3, [pc, #312]	@ (8003cc0 <UART2_RX_transfer_complete_callback+0xe34>)
 8003b86:	0011      	movs	r1, r2
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f7fd fd99 	bl	80016c0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003b8e:	0003      	movs	r3, r0
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d10c      	bne.n	8003bae <UART2_RX_transfer_complete_callback+0xd22>

							active_status_byte = (uint8_t)*rx_buffer;
 8003b94:	4b4a      	ldr	r3, [pc, #296]	@ (8003cc0 <UART2_RX_transfer_complete_callback+0xe34>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	4b52      	ldr	r3, [pc, #328]	@ (8003ce4 <UART2_RX_transfer_complete_callback+0xe58>)
 8003b9c:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003b9e:	2380      	movs	r3, #128	@ 0x80
 8003ba0:	005a      	lsls	r2, r3, #1
 8003ba2:	4b49      	ldr	r3, [pc, #292]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003ba4:	0011      	movs	r1, r2
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f002 fec0 	bl	800692c <Set_Status_Bit>
 8003bac:	e21a      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003bae:	4b46      	ldr	r3, [pc, #280]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f7fd fe3c 	bl	800182e <Is_OMNI_On>
 8003bb6:	0003      	movs	r3, r0
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d000      	beq.n	8003bbe <UART2_RX_transfer_complete_callback+0xd32>
 8003bbc:	e212      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003bbe:	4b40      	ldr	r3, [pc, #256]	@ (8003cc0 <UART2_RX_transfer_complete_callback+0xe34>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	4b47      	ldr	r3, [pc, #284]	@ (8003ce4 <UART2_RX_transfer_complete_callback+0xe58>)
 8003bc6:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003bc8:	2380      	movs	r3, #128	@ 0x80
 8003bca:	005a      	lsls	r2, r3, #1
 8003bcc:	4b3e      	ldr	r3, [pc, #248]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003bce:	0011      	movs	r1, r2
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f002 feab 	bl	800692c <Set_Status_Bit>
 8003bd6:	e205      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003bd8:	4b39      	ldr	r3, [pc, #228]	@ (8003cc0 <UART2_RX_transfer_complete_callback+0xe34>)
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f7fd fd60 	bl	80016a0 <Is_Sysex_Start_Status_Byte>
 8003be0:	0003      	movs	r3, r0
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d000      	beq.n	8003be8 <UART2_RX_transfer_complete_callback+0xd5c>
 8003be6:	e1fd      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8003be8:	4b35      	ldr	r3, [pc, #212]	@ (8003cc0 <UART2_RX_transfer_complete_callback+0xe34>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	4b3d      	ldr	r3, [pc, #244]	@ (8003ce4 <UART2_RX_transfer_complete_callback+0xe58>)
 8003bf0:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003bf2:	4b38      	ldr	r3, [pc, #224]	@ (8003cd4 <UART2_RX_transfer_complete_callback+0xe48>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003bf8:	2380      	movs	r3, #128	@ 0x80
 8003bfa:	005a      	lsls	r2, r3, #1
 8003bfc:	4b32      	ldr	r3, [pc, #200]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003bfe:	0011      	movs	r1, r2
 8003c00:	0018      	movs	r0, r3
 8003c02:	f002 fe93 	bl	800692c <Set_Status_Bit>
 8003c06:	e1ed      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
			}
		}
		else if(active_status_byte != 0){ //CC/PC only called if on basic channel or omni ON
 8003c08:	4b36      	ldr	r3, [pc, #216]	@ (8003ce4 <UART2_RX_transfer_complete_callback+0xe58>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d100      	bne.n	8003c14 <UART2_RX_transfer_complete_callback+0xd88>
 8003c12:	e1e7      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

			if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out) == YES){
 8003c14:	2380      	movs	r3, #128	@ 0x80
 8003c16:	009a      	lsls	r2, r3, #2
 8003c18:	4b2b      	ldr	r3, [pc, #172]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003c1a:	0011      	movs	r1, r2
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f002 fe71 	bl	8006904 <Get_Status_Bit>
 8003c22:	0003      	movs	r3, r0
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d10d      	bne.n	8003c44 <UART2_RX_transfer_complete_callback+0xdb8>

				active_status_byte = 0;
 8003c28:	4b2e      	ldr	r3, [pc, #184]	@ (8003ce4 <UART2_RX_transfer_complete_callback+0xe58>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 8003c2e:	4b25      	ldr	r3, [pc, #148]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe38>)
 8003c30:	0018      	movs	r0, r3
 8003c32:	f7fd fd96 	bl	8001762 <Clear_Data_Buffer>
				//running status is kept

				Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003c36:	4a24      	ldr	r2, [pc, #144]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003c38:	4b24      	ldr	r3, [pc, #144]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe40>)
 8003c3a:	0011      	movs	r1, r2
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f7fd fe10 	bl	8001862 <Reset_and_Stop_MIDI_Software_Timer>
 8003c42:	e1cf      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
				//In this condition, the data bytes haven't been received in enough time, so any subsequent data bytes
				//sent after this are simply ignored
			}
			else{ //not timed out

				if(Is_Data_Byte(rx_buffer) == YES){
 8003c44:	4b1e      	ldr	r3, [pc, #120]	@ (8003cc0 <UART2_RX_transfer_complete_callback+0xe34>)
 8003c46:	0018      	movs	r0, r3
 8003c48:	f7fd fc33 	bl	80014b2 <Is_Data_Byte>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d000      	beq.n	8003c54 <UART2_RX_transfer_complete_callback+0xdc8>
 8003c52:	e133      	b.n	8003ebc <UART2_RX_transfer_complete_callback+0x1030>

					if(Is_PC_Status_Byte(&active_status_byte) == YES){
 8003c54:	4b23      	ldr	r3, [pc, #140]	@ (8003ce4 <UART2_RX_transfer_complete_callback+0xe58>)
 8003c56:	0018      	movs	r0, r3
 8003c58:	f7fd fc44 	bl	80014e4 <Is_PC_Status_Byte>
 8003c5c:	0003      	movs	r3, r0
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d144      	bne.n	8003cec <UART2_RX_transfer_complete_callback+0xe60>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003c62:	4b18      	ldr	r3, [pc, #96]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe38>)
 8003c64:	0018      	movs	r0, r3
 8003c66:	f7fd fd4c 	bl	8001702 <Is_Data_Buffer_Empty>
 8003c6a:	0003      	movs	r3, r0
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d000      	beq.n	8003c72 <UART2_RX_transfer_complete_callback+0xde6>
 8003c70:	e1b8      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

							//first data byte received
							if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 8003c72:	4b13      	ldr	r3, [pc, #76]	@ (8003cc0 <UART2_RX_transfer_complete_callback+0xe34>)
 8003c74:	2104      	movs	r1, #4
 8003c76:	0018      	movs	r0, r3
 8003c78:	f7fd fd91 	bl	800179e <Is_Program_Change_Data_Byte_In_Range>
 8003c7c:	0003      	movs	r3, r0
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d10f      	bne.n	8003ca2 <UART2_RX_transfer_complete_callback+0xe16>

								Set_All_Pots_to_PC_Mode();
 8003c82:	f7fd fb49 	bl	8001318 <Set_All_Pots_to_PC_Mode>
								preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 8003c86:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc0 <UART2_RX_transfer_complete_callback+0xe34>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	4b15      	ldr	r3, [pc, #84]	@ (8003ce8 <UART2_RX_transfer_complete_callback+0xe5c>)
 8003c92:	701a      	strb	r2, [r3, #0]
								Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 8003c94:	f7fc fc68 	bl	8000568 <Update_Params_Based_On_Mode_Selected>
								Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003c98:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003c9a:	2108      	movs	r1, #8
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f002 fe57 	bl	8006950 <Clear_Status_Bit>
							}

							//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
							Clear_Data_Buffer(&MIDI_data);
 8003ca2:	4b08      	ldr	r3, [pc, #32]	@ (8003cc4 <UART2_RX_transfer_complete_callback+0xe38>)
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f7fd fd5c 	bl	8001762 <Clear_Data_Buffer>
							active_status_byte = 0;
 8003caa:	4b0e      	ldr	r3, [pc, #56]	@ (8003ce4 <UART2_RX_transfer_complete_callback+0xe58>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]

							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003cb0:	4a05      	ldr	r2, [pc, #20]	@ (8003cc8 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003cb2:	4b06      	ldr	r3, [pc, #24]	@ (8003ccc <UART2_RX_transfer_complete_callback+0xe40>)
 8003cb4:	0011      	movs	r1, r2
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f7fd fdd3 	bl	8001862 <Reset_and_Stop_MIDI_Software_Timer>
 8003cbc:	e192      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
 8003cbe:	46c0      	nop			@ (mov r8, r8)
 8003cc0:	20000594 	.word	0x20000594
 8003cc4:	20000588 	.word	0x20000588
 8003cc8:	20000cfc 	.word	0x20000cfc
 8003ccc:	20000d04 	.word	0x20000d04
 8003cd0:	20000582 	.word	0x20000582
 8003cd4:	20000584 	.word	0x20000584
 8003cd8:	20000589 	.word	0x20000589
 8003cdc:	20000028 	.word	0x20000028
 8003ce0:	20000d18 	.word	0x20000d18
 8003ce4:	20000583 	.word	0x20000583
 8003ce8:	20000554 	.word	0x20000554

						}
					}
					else if(Is_CC_Status_Byte(&active_status_byte) == YES){
 8003cec:	4bc4      	ldr	r3, [pc, #784]	@ (8004000 <UART2_RX_transfer_complete_callback+0x1174>)
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f7fd fc14 	bl	800151c <Is_CC_Status_Byte>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d000      	beq.n	8003cfc <UART2_RX_transfer_complete_callback+0xe70>
 8003cfa:	e0d2      	b.n	8003ea2 <UART2_RX_transfer_complete_callback+0x1016>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003cfc:	4bc1      	ldr	r3, [pc, #772]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1178>)
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f7fd fcff 	bl	8001702 <Is_Data_Buffer_Empty>
 8003d04:	0003      	movs	r3, r0
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d108      	bne.n	8003d1c <UART2_RX_transfer_complete_callback+0xe90>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8003d0a:	4bbf      	ldr	r3, [pc, #764]	@ (8004008 <UART2_RX_transfer_complete_callback+0x117c>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	4bbc      	ldr	r3, [pc, #752]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d12:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 8003d14:	4bbd      	ldr	r3, [pc, #756]	@ (800400c <UART2_RX_transfer_complete_callback+0x1180>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	e163      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 8003d1c:	4bba      	ldr	r3, [pc, #744]	@ (8004008 <UART2_RX_transfer_complete_callback+0x117c>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	4bb8      	ldr	r3, [pc, #736]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d24:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003d26:	4aba      	ldr	r2, [pc, #744]	@ (8004010 <UART2_RX_transfer_complete_callback+0x1184>)
 8003d28:	4bb8      	ldr	r3, [pc, #736]	@ (800400c <UART2_RX_transfer_complete_callback+0x1180>)
 8003d2a:	0011      	movs	r1, r2
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f7fd fd98 	bl	8001862 <Reset_and_Stop_MIDI_Software_Timer>
							Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003d32:	4bb7      	ldr	r3, [pc, #732]	@ (8004010 <UART2_RX_transfer_complete_callback+0x1184>)
 8003d34:	2108      	movs	r1, #8
 8003d36:	0018      	movs	r0, r3
 8003d38:	f002 fe0a 	bl	8006950 <Clear_Status_Bit>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003d3c:	4bb1      	ldr	r3, [pc, #708]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f7fd fc08 	bl	8001554 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 8003d44:	0003      	movs	r3, r0
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d14c      	bne.n	8003de4 <UART2_RX_transfer_complete_callback+0xf58>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES){
 8003d4a:	4bb2      	ldr	r3, [pc, #712]	@ (8004014 <UART2_RX_transfer_complete_callback+0x1188>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	4bab      	ldr	r3, [pc, #684]	@ (8004000 <UART2_RX_transfer_complete_callback+0x1174>)
 8003d52:	0011      	movs	r1, r2
 8003d54:	0018      	movs	r0, r3
 8003d56:	f7fd fcb3 	bl	80016c0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003d5a:	0003      	movs	r3, r0
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d139      	bne.n	8003dd4 <UART2_RX_transfer_complete_callback+0xf48>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 8003d60:	4aad      	ldr	r2, [pc, #692]	@ (8004018 <UART2_RX_transfer_complete_callback+0x118c>)
 8003d62:	4ba8      	ldr	r3, [pc, #672]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d64:	0011      	movs	r1, r2
 8003d66:	0018      	movs	r0, r3
 8003d68:	f7fd fc53 	bl	8001612 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 8003d6c:	0003      	movs	r3, r0
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d130      	bne.n	8003dd4 <UART2_RX_transfer_complete_callback+0xf48>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 8003d72:	4ba4      	ldr	r3, [pc, #656]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d74:	785b      	ldrb	r3, [r3, #1]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b79      	cmp	r3, #121	@ 0x79
 8003d7a:	d10b      	bne.n	8003d94 <UART2_RX_transfer_complete_callback+0xf08>

											Reset_All_Controllers(&params, &delay_line);
 8003d7c:	4aa7      	ldr	r2, [pc, #668]	@ (800401c <UART2_RX_transfer_complete_callback+0x1190>)
 8003d7e:	4ba8      	ldr	r3, [pc, #672]	@ (8004020 <UART2_RX_transfer_complete_callback+0x1194>)
 8003d80:	0011      	movs	r1, r2
 8003d82:	0018      	movs	r0, r3
 8003d84:	f7fd fd88 	bl	8001898 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003d88:	4ba1      	ldr	r3, [pc, #644]	@ (8004010 <UART2_RX_transfer_complete_callback+0x1184>)
 8003d8a:	2108      	movs	r1, #8
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f002 fddf 	bl	8006950 <Clear_Status_Bit>
 8003d92:	e01f      	b.n	8003dd4 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 8003d94:	4b9b      	ldr	r3, [pc, #620]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d96:	785b      	ldrb	r3, [r3, #1]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b7a      	cmp	r3, #122	@ 0x7a
 8003d9c:	d107      	bne.n	8003dae <UART2_RX_transfer_complete_callback+0xf22>

											Set_Local_Control();
 8003d9e:	f7fd fdd5 	bl	800194c <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003da2:	4b9b      	ldr	r3, [pc, #620]	@ (8004010 <UART2_RX_transfer_complete_callback+0x1184>)
 8003da4:	2108      	movs	r1, #8
 8003da6:	0018      	movs	r0, r3
 8003da8:	f002 fdd2 	bl	8006950 <Clear_Status_Bit>
 8003dac:	e012      	b.n	8003dd4 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 8003dae:	4b95      	ldr	r3, [pc, #596]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1178>)
 8003db0:	785b      	ldrb	r3, [r3, #1]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b7c      	cmp	r3, #124	@ 0x7c
 8003db6:	d104      	bne.n	8003dc2 <UART2_RX_transfer_complete_callback+0xf36>

											Set_OMNI_Off(&statuses);
 8003db8:	4b95      	ldr	r3, [pc, #596]	@ (8004010 <UART2_RX_transfer_complete_callback+0x1184>)
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f7fd fdfe 	bl	80019bc <Set_OMNI_Off>
 8003dc0:	e008      	b.n	8003dd4 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003dc2:	4b90      	ldr	r3, [pc, #576]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1178>)
 8003dc4:	785b      	ldrb	r3, [r3, #1]
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b7d      	cmp	r3, #125	@ 0x7d
 8003dca:	d103      	bne.n	8003dd4 <UART2_RX_transfer_complete_callback+0xf48>

											Set_OMNI_On(&statuses);
 8003dcc:	4b90      	ldr	r3, [pc, #576]	@ (8004010 <UART2_RX_transfer_complete_callback+0x1184>)
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f7fd fe04 	bl	80019dc <Set_OMNI_On>
										}
									}
								}

								active_status_byte = 0;
 8003dd4:	4b8a      	ldr	r3, [pc, #552]	@ (8004000 <UART2_RX_transfer_complete_callback+0x1174>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003dda:	4b8a      	ldr	r3, [pc, #552]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1178>)
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f7fd fcc0 	bl	8001762 <Clear_Data_Buffer>
 8003de2:	e0ff      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003de4:	4b87      	ldr	r3, [pc, #540]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1178>)
 8003de6:	0018      	movs	r0, r3
 8003de8:	f7fd fbe0 	bl	80015ac <Is_Utilised_CC_First_Data_Byte>
 8003dec:	0003      	movs	r3, r0
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d14f      	bne.n	8003e92 <UART2_RX_transfer_complete_callback+0x1006>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES)
 8003df2:	4b88      	ldr	r3, [pc, #544]	@ (8004014 <UART2_RX_transfer_complete_callback+0x1188>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	4b81      	ldr	r3, [pc, #516]	@ (8004000 <UART2_RX_transfer_complete_callback+0x1174>)
 8003dfa:	0011      	movs	r1, r2
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f7fd fc5f 	bl	80016c0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003e02:	0003      	movs	r3, r0
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d006      	beq.n	8003e16 <UART2_RX_transfer_complete_callback+0xf8a>
										|| (Is_OMNI_On(&statuses) == YES)){
 8003e08:	4b81      	ldr	r3, [pc, #516]	@ (8004010 <UART2_RX_transfer_complete_callback+0x1184>)
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f7fd fd0f 	bl	800182e <Is_OMNI_On>
 8003e10:	0003      	movs	r3, r0
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d135      	bne.n	8003e82 <UART2_RX_transfer_complete_callback+0xff6>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 8003e16:	4b7b      	ldr	r3, [pc, #492]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b14      	cmp	r3, #20
 8003e1e:	d104      	bne.n	8003e2a <UART2_RX_transfer_complete_callback+0xf9e>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003e20:	4b7d      	ldr	r3, [pc, #500]	@ (8004018 <UART2_RX_transfer_complete_callback+0x118c>)
 8003e22:	0018      	movs	r0, r3
 8003e24:	f7fd f9f6 	bl	8001214 <Set_Waveshape_to_CC_Mode_and_Value>
 8003e28:	e02b      	b.n	8003e82 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 8003e2a:	4b76      	ldr	r3, [pc, #472]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b15      	cmp	r3, #21
 8003e32:	d109      	bne.n	8003e48 <UART2_RX_transfer_complete_callback+0xfbc>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003e34:	4b78      	ldr	r3, [pc, #480]	@ (8004018 <UART2_RX_transfer_complete_callback+0x118c>)
 8003e36:	0018      	movs	r0, r3
 8003e38:	f7fd fa06 	bl	8001248 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003e3c:	4b74      	ldr	r3, [pc, #464]	@ (8004010 <UART2_RX_transfer_complete_callback+0x1184>)
 8003e3e:	2108      	movs	r1, #8
 8003e40:	0018      	movs	r0, r3
 8003e42:	f002 fd85 	bl	8006950 <Clear_Status_Bit>
 8003e46:	e01c      	b.n	8003e82 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8003e48:	4b6e      	ldr	r3, [pc, #440]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b16      	cmp	r3, #22
 8003e50:	d104      	bne.n	8003e5c <UART2_RX_transfer_complete_callback+0xfd0>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003e52:	4b71      	ldr	r3, [pc, #452]	@ (8004018 <UART2_RX_transfer_complete_callback+0x118c>)
 8003e54:	0018      	movs	r0, r3
 8003e56:	f7fd fa11 	bl	800127c <Set_Depth_to_CC_Mode_and_Value>
 8003e5a:	e012      	b.n	8003e82 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8003e5c:	4b69      	ldr	r3, [pc, #420]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b17      	cmp	r3, #23
 8003e64:	d104      	bne.n	8003e70 <UART2_RX_transfer_complete_callback+0xfe4>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003e66:	4b6c      	ldr	r3, [pc, #432]	@ (8004018 <UART2_RX_transfer_complete_callback+0x118c>)
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f7fd fa21 	bl	80012b0 <Set_Symmetry_to_CC_Mode_and_Value>
 8003e6e:	e008      	b.n	8003e82 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 8003e70:	4b64      	ldr	r3, [pc, #400]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b18      	cmp	r3, #24
 8003e78:	d103      	bne.n	8003e82 <UART2_RX_transfer_complete_callback+0xff6>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003e7a:	4b67      	ldr	r3, [pc, #412]	@ (8004018 <UART2_RX_transfer_complete_callback+0x118c>)
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f7fd fa31 	bl	80012e4 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 8003e82:	4b5f      	ldr	r3, [pc, #380]	@ (8004000 <UART2_RX_transfer_complete_callback+0x1174>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003e88:	4b5e      	ldr	r3, [pc, #376]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f7fd fc69 	bl	8001762 <Clear_Data_Buffer>
 8003e90:	e0a8      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 8003e92:	4b5b      	ldr	r3, [pc, #364]	@ (8004000 <UART2_RX_transfer_complete_callback+0x1174>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003e98:	4b5a      	ldr	r3, [pc, #360]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f7fd fc61 	bl	8001762 <Clear_Data_Buffer>
 8003ea0:	e0a0      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(&active_status_byte) == YES){
 8003ea2:	4b57      	ldr	r3, [pc, #348]	@ (8004000 <UART2_RX_transfer_complete_callback+0x1174>)
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f7fd fbfb 	bl	80016a0 <Is_Sysex_Start_Status_Byte>
 8003eaa:	0003      	movs	r3, r0
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d000      	beq.n	8003eb2 <UART2_RX_transfer_complete_callback+0x1026>
 8003eb0:	e098      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

						//@TODO

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003eb2:	4b54      	ldr	r3, [pc, #336]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1178>)
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f7fd fc24 	bl	8001702 <Is_Data_Buffer_Empty>
 8003eba:	e093      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8003ebc:	4b51      	ldr	r3, [pc, #324]	@ (8004004 <UART2_RX_transfer_complete_callback+0x1178>)
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f7fd fc4f 	bl	8001762 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003ec4:	4a52      	ldr	r2, [pc, #328]	@ (8004010 <UART2_RX_transfer_complete_callback+0x1184>)
 8003ec6:	4b51      	ldr	r3, [pc, #324]	@ (800400c <UART2_RX_transfer_complete_callback+0x1180>)
 8003ec8:	0011      	movs	r1, r2
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f7fd fcc9 	bl	8001862 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003ed0:	4b4d      	ldr	r3, [pc, #308]	@ (8004008 <UART2_RX_transfer_complete_callback+0x117c>)
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f7fd fb06 	bl	80014e4 <Is_PC_Status_Byte>
 8003ed8:	0003      	movs	r3, r0
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d130      	bne.n	8003f40 <UART2_RX_transfer_complete_callback+0x10b4>

						running_status_byte = (uint8_t)*rx_buffer;
 8003ede:	4b4a      	ldr	r3, [pc, #296]	@ (8004008 <UART2_RX_transfer_complete_callback+0x117c>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	4b4f      	ldr	r3, [pc, #316]	@ (8004024 <UART2_RX_transfer_complete_callback+0x1198>)
 8003ee6:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003ee8:	4b4a      	ldr	r3, [pc, #296]	@ (8004014 <UART2_RX_transfer_complete_callback+0x1188>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	4b46      	ldr	r3, [pc, #280]	@ (8004008 <UART2_RX_transfer_complete_callback+0x117c>)
 8003ef0:	0011      	movs	r1, r2
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f7fd fbe4 	bl	80016c0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003ef8:	0003      	movs	r3, r0
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d10c      	bne.n	8003f18 <UART2_RX_transfer_complete_callback+0x108c>

							active_status_byte = (uint8_t)*rx_buffer;
 8003efe:	4b42      	ldr	r3, [pc, #264]	@ (8004008 <UART2_RX_transfer_complete_callback+0x117c>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	4b3e      	ldr	r3, [pc, #248]	@ (8004000 <UART2_RX_transfer_complete_callback+0x1174>)
 8003f06:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003f08:	2380      	movs	r3, #128	@ 0x80
 8003f0a:	005a      	lsls	r2, r3, #1
 8003f0c:	4b40      	ldr	r3, [pc, #256]	@ (8004010 <UART2_RX_transfer_complete_callback+0x1184>)
 8003f0e:	0011      	movs	r1, r2
 8003f10:	0018      	movs	r0, r3
 8003f12:	f002 fd0b 	bl	800692c <Set_Status_Bit>
 8003f16:	e065      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003f18:	4b3d      	ldr	r3, [pc, #244]	@ (8004010 <UART2_RX_transfer_complete_callback+0x1184>)
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f7fd fc87 	bl	800182e <Is_OMNI_On>
 8003f20:	0003      	movs	r3, r0
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d15e      	bne.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003f26:	4b38      	ldr	r3, [pc, #224]	@ (8004008 <UART2_RX_transfer_complete_callback+0x117c>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	4b34      	ldr	r3, [pc, #208]	@ (8004000 <UART2_RX_transfer_complete_callback+0x1174>)
 8003f2e:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003f30:	2380      	movs	r3, #128	@ 0x80
 8003f32:	005a      	lsls	r2, r3, #1
 8003f34:	4b36      	ldr	r3, [pc, #216]	@ (8004010 <UART2_RX_transfer_complete_callback+0x1184>)
 8003f36:	0011      	movs	r1, r2
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f002 fcf7 	bl	800692c <Set_Status_Bit>
 8003f3e:	e051      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8003f40:	4b31      	ldr	r3, [pc, #196]	@ (8004008 <UART2_RX_transfer_complete_callback+0x117c>)
 8003f42:	0018      	movs	r0, r3
 8003f44:	f7fd faea 	bl	800151c <Is_CC_Status_Byte>
 8003f48:	0003      	movs	r3, r0
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d130      	bne.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1124>

						running_status_byte = (uint8_t)*rx_buffer;
 8003f4e:	4b2e      	ldr	r3, [pc, #184]	@ (8004008 <UART2_RX_transfer_complete_callback+0x117c>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	4b33      	ldr	r3, [pc, #204]	@ (8004024 <UART2_RX_transfer_complete_callback+0x1198>)
 8003f56:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003f58:	4b2e      	ldr	r3, [pc, #184]	@ (8004014 <UART2_RX_transfer_complete_callback+0x1188>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8004008 <UART2_RX_transfer_complete_callback+0x117c>)
 8003f60:	0011      	movs	r1, r2
 8003f62:	0018      	movs	r0, r3
 8003f64:	f7fd fbac 	bl	80016c0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003f68:	0003      	movs	r3, r0
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d10c      	bne.n	8003f88 <UART2_RX_transfer_complete_callback+0x10fc>

							active_status_byte = (uint8_t)*rx_buffer;
 8003f6e:	4b26      	ldr	r3, [pc, #152]	@ (8004008 <UART2_RX_transfer_complete_callback+0x117c>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	4b22      	ldr	r3, [pc, #136]	@ (8004000 <UART2_RX_transfer_complete_callback+0x1174>)
 8003f76:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003f78:	2380      	movs	r3, #128	@ 0x80
 8003f7a:	005a      	lsls	r2, r3, #1
 8003f7c:	4b24      	ldr	r3, [pc, #144]	@ (8004010 <UART2_RX_transfer_complete_callback+0x1184>)
 8003f7e:	0011      	movs	r1, r2
 8003f80:	0018      	movs	r0, r3
 8003f82:	f002 fcd3 	bl	800692c <Set_Status_Bit>
 8003f86:	e02d      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003f88:	4b21      	ldr	r3, [pc, #132]	@ (8004010 <UART2_RX_transfer_complete_callback+0x1184>)
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f7fd fc4f 	bl	800182e <Is_OMNI_On>
 8003f90:	0003      	movs	r3, r0
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d126      	bne.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003f96:	4b1c      	ldr	r3, [pc, #112]	@ (8004008 <UART2_RX_transfer_complete_callback+0x117c>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	4b18      	ldr	r3, [pc, #96]	@ (8004000 <UART2_RX_transfer_complete_callback+0x1174>)
 8003f9e:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003fa0:	2380      	movs	r3, #128	@ 0x80
 8003fa2:	005a      	lsls	r2, r3, #1
 8003fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8004010 <UART2_RX_transfer_complete_callback+0x1184>)
 8003fa6:	0011      	movs	r1, r2
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f002 fcbf 	bl	800692c <Set_Status_Bit>
 8003fae:	e019      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003fb0:	4b15      	ldr	r3, [pc, #84]	@ (8004008 <UART2_RX_transfer_complete_callback+0x117c>)
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f7fd fb74 	bl	80016a0 <Is_Sysex_Start_Status_Byte>
 8003fb8:	0003      	movs	r3, r0
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d112      	bne.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8003fbe:	4b12      	ldr	r3, [pc, #72]	@ (8004008 <UART2_RX_transfer_complete_callback+0x117c>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8004000 <UART2_RX_transfer_complete_callback+0x1174>)
 8003fc6:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003fc8:	4b16      	ldr	r3, [pc, #88]	@ (8004024 <UART2_RX_transfer_complete_callback+0x1198>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003fce:	2380      	movs	r3, #128	@ 0x80
 8003fd0:	005a      	lsls	r2, r3, #1
 8003fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004010 <UART2_RX_transfer_complete_callback+0x1184>)
 8003fd4:	0011      	movs	r1, r2
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f002 fca8 	bl	800692c <Set_Status_Bit>
 8003fdc:	e002      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8003fde:	46c0      	nop			@ (mov r8, r8)
 8003fe0:	e000      	b.n	8003fe4 <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003fe2:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}

	*rx_buffer = 0;
 8003fe4:	4b08      	ldr	r3, [pc, #32]	@ (8004008 <UART2_RX_transfer_complete_callback+0x117c>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8003fea:	4907      	ldr	r1, [pc, #28]	@ (8004008 <UART2_RX_transfer_complete_callback+0x117c>)
 8003fec:	4b0e      	ldr	r3, [pc, #56]	@ (8004028 <UART2_RX_transfer_complete_callback+0x119c>)
 8003fee:	2201      	movs	r2, #1
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f008 fd43 	bl	800ca7c <HAL_UART_Receive_DMA>
}
 8003ff6:	46c0      	nop			@ (mov r8, r8)
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	b002      	add	sp, #8
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	46c0      	nop			@ (mov r8, r8)
 8004000:	20000583 	.word	0x20000583
 8004004:	20000588 	.word	0x20000588
 8004008:	20000594 	.word	0x20000594
 800400c:	20000d04 	.word	0x20000d04
 8004010:	20000cfc 	.word	0x20000cfc
 8004014:	20000582 	.word	0x20000582
 8004018:	20000589 	.word	0x20000589
 800401c:	20000028 	.word	0x20000028
 8004020:	20000d18 	.word	0x20000d18
 8004024:	20000584 	.word	0x20000584
 8004028:	20000b00 	.word	0x20000b00

0800402c <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	0002      	movs	r2, r0
 8004034:	1dbb      	adds	r3, r7, #6
 8004036:	801a      	strh	r2, [r3, #0]

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with falling interrupt
 8004038:	1dbb      	adds	r3, r7, #6
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	2b80      	cmp	r3, #128	@ 0x80
 800403e:	d117      	bne.n	8004070 <HAL_GPIO_EXTI_Falling_Callback+0x44>

		if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8004040:	4b0d      	ldr	r3, [pc, #52]	@ (8004078 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b06      	cmp	r3, #6
 8004048:	d004      	beq.n	8004054 <HAL_GPIO_EXTI_Falling_Callback+0x28>
 800404a:	4b0b      	ldr	r3, [pc, #44]	@ (8004078 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b07      	cmp	r3, #7
 8004052:	d10d      	bne.n	8004070 <HAL_GPIO_EXTI_Falling_Callback+0x44>

			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8004054:	2380      	movs	r3, #128	@ 0x80
 8004056:	0099      	lsls	r1, r3, #2
 8004058:	23a0      	movs	r3, #160	@ 0xa0
 800405a:	05db      	lsls	r3, r3, #23
 800405c:	2201      	movs	r2, #1
 800405e:	0018      	movs	r0, r3
 8004060:	f004 feb9 	bl	8008dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004064:	4b05      	ldr	r3, [pc, #20]	@ (800407c <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 8004066:	2200      	movs	r2, #0
 8004068:	2140      	movs	r1, #64	@ 0x40
 800406a:	0018      	movs	r0, r3
 800406c:	f004 feb3 	bl	8008dd6 <HAL_GPIO_WritePin>
		}
	}
}
 8004070:	46c0      	nop			@ (mov r8, r8)
 8004072:	46bd      	mov	sp, r7
 8004074:	b002      	add	sp, #8
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20000430 	.word	0x20000430
 800407c:	50000800 	.word	0x50000800

08004080 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	0002      	movs	r2, r0
 8004088:	1dbb      	adds	r3, r7, #6
 800408a:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with rising interrupt
 800408c:	1dbb      	adds	r3, r7, #6
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	2b80      	cmp	r3, #128	@ 0x80
 8004092:	d000      	beq.n	8004096 <HAL_GPIO_EXTI_Rising_Callback+0x16>
 8004094:	e0dd      	b.n	8004252 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>

		if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8004096:	4b71      	ldr	r3, [pc, #452]	@ (800425c <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b01      	cmp	r3, #1
 800409e:	d114      	bne.n	80040ca <HAL_GPIO_EXTI_Rising_Callback+0x4a>

			//Set SW OUT
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80040a0:	2380      	movs	r3, #128	@ 0x80
 80040a2:	0099      	lsls	r1, r3, #2
 80040a4:	23a0      	movs	r3, #160	@ 0xa0
 80040a6:	05db      	lsls	r3, r3, #23
 80040a8:	2200      	movs	r2, #0
 80040aa:	0018      	movs	r0, r3
 80040ac:	f004 fe93 	bl	8008dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80040b0:	4b6b      	ldr	r3, [pc, #428]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	2140      	movs	r1, #64	@ 0x40
 80040b6:	0018      	movs	r0, r3
 80040b8:	f004 fe8d 	bl	8008dd6 <HAL_GPIO_WritePin>

			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 80040bc:	4b67      	ldr	r3, [pc, #412]	@ (800425c <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80040be:	2201      	movs	r2, #1
 80040c0:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 80040c2:	4b66      	ldr	r3, [pc, #408]	@ (800425c <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80040c4:	2207      	movs	r2, #7
 80040c6:	701a      	strb	r2, [r3, #0]
		}

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80040c8:	e0c3      	b.n	8004252 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == PC_MODE){
 80040ca:	4b64      	ldr	r3, [pc, #400]	@ (800425c <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b03      	cmp	r3, #3
 80040d2:	d114      	bne.n	80040fe <HAL_GPIO_EXTI_Rising_Callback+0x7e>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80040d4:	2380      	movs	r3, #128	@ 0x80
 80040d6:	0099      	lsls	r1, r3, #2
 80040d8:	23a0      	movs	r3, #160	@ 0xa0
 80040da:	05db      	lsls	r3, r3, #23
 80040dc:	2200      	movs	r2, #0
 80040de:	0018      	movs	r0, r3
 80040e0:	f004 fe79 	bl	8008dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80040e4:	4b5e      	ldr	r3, [pc, #376]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	2140      	movs	r1, #64	@ 0x40
 80040ea:	0018      	movs	r0, r3
 80040ec:	f004 fe73 	bl	8008dd6 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = PC_MODE;
 80040f0:	4b5a      	ldr	r3, [pc, #360]	@ (800425c <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80040f2:	2203      	movs	r2, #3
 80040f4:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 80040f6:	4b59      	ldr	r3, [pc, #356]	@ (800425c <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80040f8:	2207      	movs	r2, #7
 80040fa:	701a      	strb	r2, [r3, #0]
}
 80040fc:	e0a9      	b.n	8004252 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == CC_MODE){
 80040fe:	4b57      	ldr	r3, [pc, #348]	@ (800425c <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d114      	bne.n	8004132 <HAL_GPIO_EXTI_Rising_Callback+0xb2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8004108:	2380      	movs	r3, #128	@ 0x80
 800410a:	0099      	lsls	r1, r3, #2
 800410c:	23a0      	movs	r3, #160	@ 0xa0
 800410e:	05db      	lsls	r3, r3, #23
 8004110:	2200      	movs	r2, #0
 8004112:	0018      	movs	r0, r3
 8004114:	f004 fe5f 	bl	8008dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004118:	4b51      	ldr	r3, [pc, #324]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 800411a:	2201      	movs	r2, #1
 800411c:	2140      	movs	r1, #64	@ 0x40
 800411e:	0018      	movs	r0, r3
 8004120:	f004 fe59 	bl	8008dd6 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = CC_MODE;
 8004124:	4b4d      	ldr	r3, [pc, #308]	@ (800425c <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004126:	2202      	movs	r2, #2
 8004128:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 800412a:	4b4c      	ldr	r3, [pc, #304]	@ (800425c <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800412c:	2207      	movs	r2, #7
 800412e:	701a      	strb	r2, [r3, #0]
}
 8004130:	e08f      	b.n	8004252 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8004132:	4b4a      	ldr	r3, [pc, #296]	@ (800425c <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b04      	cmp	r3, #4
 800413a:	d12b      	bne.n	8004194 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 800413c:	4b49      	ldr	r3, [pc, #292]	@ (8004264 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d126      	bne.n	8004194 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8004146:	4b48      	ldr	r3, [pc, #288]	@ (8004268 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8004148:	2120      	movs	r1, #32
 800414a:	0018      	movs	r0, r3
 800414c:	f002 fbda 	bl	8006904 <Get_Status_Bit>
 8004150:	0003      	movs	r3, r0
 8004152:	2b01      	cmp	r3, #1
 8004154:	d11e      	bne.n	8004194 <HAL_GPIO_EXTI_Rising_Callback+0x114>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8004156:	2380      	movs	r3, #128	@ 0x80
 8004158:	0099      	lsls	r1, r3, #2
 800415a:	23a0      	movs	r3, #160	@ 0xa0
 800415c:	05db      	lsls	r3, r3, #23
 800415e:	2200      	movs	r2, #0
 8004160:	0018      	movs	r0, r3
 8004162:	f004 fe38 	bl	8008dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004166:	4b3e      	ldr	r3, [pc, #248]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8004168:	2201      	movs	r2, #1
 800416a:	2140      	movs	r1, #64	@ 0x40
 800416c:	0018      	movs	r0, r3
 800416e:	f004 fe32 	bl	8008dd6 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = TAP_MODE;
 8004172:	4b3a      	ldr	r3, [pc, #232]	@ (800425c <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004174:	2204      	movs	r2, #4
 8004176:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8004178:	4b38      	ldr	r3, [pc, #224]	@ (800425c <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800417a:	2207      	movs	r2, #7
 800417c:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 800417e:	4b3a      	ldr	r3, [pc, #232]	@ (8004268 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8004180:	2120      	movs	r1, #32
 8004182:	0018      	movs	r0, r3
 8004184:	f002 fbe4 	bl	8006950 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004188:	4b37      	ldr	r3, [pc, #220]	@ (8004268 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 800418a:	2140      	movs	r1, #64	@ 0x40
 800418c:	0018      	movs	r0, r3
 800418e:	f002 fbdf 	bl	8006950 <Clear_Status_Bit>
 8004192:	e05e      	b.n	8004252 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8004194:	4b31      	ldr	r3, [pc, #196]	@ (800425c <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b08      	cmp	r3, #8
 800419c:	d12b      	bne.n	80041f6 <HAL_GPIO_EXTI_Rising_Callback+0x176>
 800419e:	4b31      	ldr	r3, [pc, #196]	@ (8004264 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d126      	bne.n	80041f6 <HAL_GPIO_EXTI_Rising_Callback+0x176>
 80041a8:	4b2f      	ldr	r3, [pc, #188]	@ (8004268 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80041aa:	2120      	movs	r1, #32
 80041ac:	0018      	movs	r0, r3
 80041ae:	f002 fba9 	bl	8006904 <Get_Status_Bit>
 80041b2:	0003      	movs	r3, r0
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d11e      	bne.n	80041f6 <HAL_GPIO_EXTI_Rising_Callback+0x176>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80041b8:	2380      	movs	r3, #128	@ 0x80
 80041ba:	0099      	lsls	r1, r3, #2
 80041bc:	23a0      	movs	r3, #160	@ 0xa0
 80041be:	05db      	lsls	r3, r3, #23
 80041c0:	2200      	movs	r2, #0
 80041c2:	0018      	movs	r0, r3
 80041c4:	f004 fe07 	bl	8008dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80041c8:	4b25      	ldr	r3, [pc, #148]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	2140      	movs	r1, #64	@ 0x40
 80041ce:	0018      	movs	r0, r3
 80041d0:	f004 fe01 	bl	8008dd6 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 80041d4:	4b21      	ldr	r3, [pc, #132]	@ (800425c <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80041d6:	2208      	movs	r2, #8
 80041d8:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 80041da:	4b20      	ldr	r3, [pc, #128]	@ (800425c <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80041dc:	2207      	movs	r2, #7
 80041de:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80041e0:	4b21      	ldr	r3, [pc, #132]	@ (8004268 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80041e2:	2120      	movs	r1, #32
 80041e4:	0018      	movs	r0, r3
 80041e6:	f002 fbb3 	bl	8006950 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80041ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004268 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80041ec:	2140      	movs	r1, #64	@ 0x40
 80041ee:	0018      	movs	r0, r3
 80041f0:	f002 fbae 	bl	8006950 <Clear_Status_Bit>
 80041f4:	e02d      	b.n	8004252 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){ //second edge
 80041f6:	4b19      	ldr	r3, [pc, #100]	@ (800425c <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b07      	cmp	r3, #7
 80041fe:	d114      	bne.n	800422a <HAL_GPIO_EXTI_Rising_Callback+0x1aa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8004200:	2380      	movs	r3, #128	@ 0x80
 8004202:	0099      	lsls	r1, r3, #2
 8004204:	23a0      	movs	r3, #160	@ 0xa0
 8004206:	05db      	lsls	r3, r3, #23
 8004208:	2200      	movs	r2, #0
 800420a:	0018      	movs	r0, r3
 800420c:	f004 fde3 	bl	8008dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004210:	4b13      	ldr	r3, [pc, #76]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8004212:	2201      	movs	r2, #1
 8004214:	2140      	movs	r1, #64	@ 0x40
 8004216:	0018      	movs	r0, r3
 8004218:	f004 fddd 	bl	8008dd6 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 800421c:	4b0f      	ldr	r3, [pc, #60]	@ (800425c <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800421e:	2207      	movs	r2, #7
 8004220:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8004222:	4b0e      	ldr	r3, [pc, #56]	@ (800425c <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004224:	2206      	movs	r2, #6
 8004226:	701a      	strb	r2, [r3, #0]
}
 8004228:	e013      	b.n	8004252 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE){
 800422a:	4b0c      	ldr	r3, [pc, #48]	@ (800425c <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b06      	cmp	r3, #6
 8004232:	d10e      	bne.n	8004252 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8004234:	2380      	movs	r3, #128	@ 0x80
 8004236:	0099      	lsls	r1, r3, #2
 8004238:	23a0      	movs	r3, #160	@ 0xa0
 800423a:	05db      	lsls	r3, r3, #23
 800423c:	2200      	movs	r2, #0
 800423e:	0018      	movs	r0, r3
 8004240:	f004 fdc9 	bl	8008dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004244:	4b06      	ldr	r3, [pc, #24]	@ (8004260 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8004246:	2201      	movs	r2, #1
 8004248:	2140      	movs	r1, #64	@ 0x40
 800424a:	0018      	movs	r0, r3
 800424c:	f004 fdc3 	bl	8008dd6 <HAL_GPIO_WritePin>
}
 8004250:	e7ff      	b.n	8004252 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
 8004252:	46c0      	nop			@ (mov r8, r8)
 8004254:	46bd      	mov	sp, r7
 8004256:	b002      	add	sp, #8
 8004258:	bd80      	pop	{r7, pc}
 800425a:	46c0      	nop			@ (mov r8, r8)
 800425c:	20000430 	.word	0x20000430
 8004260:	50000800 	.word	0x50000800
 8004264:	20000444 	.word	0x20000444
 8004268:	20000cfc 	.word	0x20000cfc

0800426c <LPTIM1_callback>:

void LPTIM1_callback(LPTIM_HandleTypeDef *hlptim){
 800426c:	b5b0      	push	{r4, r5, r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af02      	add	r7, sp, #8
 8004272:	6078      	str	r0, [r7, #4]
	static volatile struct Tap_Tempo_Switch_States tap_tempo_switch_states = {0};
	static volatile enum Validate preset_save_mode_is_inactive = YES;

	//CHECK IF NEED TAP_PENDING TRANSITION

	uint8_t pin_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8004274:	2517      	movs	r5, #23
 8004276:	197c      	adds	r4, r7, r5
 8004278:	2380      	movs	r3, #128	@ 0x80
 800427a:	00da      	lsls	r2, r3, #3
 800427c:	23a0      	movs	r3, #160	@ 0xa0
 800427e:	05db      	lsls	r3, r3, #23
 8004280:	0011      	movs	r1, r2
 8004282:	0018      	movs	r0, r3
 8004284:	f004 fd8a 	bl	8008d9c <HAL_GPIO_ReadPin>
 8004288:	0003      	movs	r3, r0
 800428a:	7023      	strb	r3, [r4, #0]

	if(preset_save_mode_is_inactive == YES){
 800428c:	4bc2      	ldr	r3, [pc, #776]	@ (8004598 <LPTIM1_callback+0x32c>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b01      	cmp	r3, #1
 8004294:	d000      	beq.n	8004298 <LPTIM1_callback+0x2c>
 8004296:	e1a2      	b.n	80045de <LPTIM1_callback+0x372>

		if((speed_fsm.current_state.shared_state == MANUAL_MODE) && (pin_state == 0)){
 8004298:	4bc0      	ldr	r3, [pc, #768]	@ (800459c <LPTIM1_callback+0x330>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d10a      	bne.n	80042b8 <LPTIM1_callback+0x4c>
 80042a2:	197b      	adds	r3, r7, r5
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <LPTIM1_callback+0x4c>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 80042aa:	4bbc      	ldr	r3, [pc, #752]	@ (800459c <LPTIM1_callback+0x330>)
 80042ac:	2205      	movs	r2, #5
 80042ae:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 80042b0:	4bba      	ldr	r3, [pc, #744]	@ (800459c <LPTIM1_callback+0x330>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	705a      	strb	r2, [r3, #1]
 80042b6:	e070      	b.n	800439a <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.shared_state == CC_MODE) && (pin_state == 0)){
 80042b8:	4bb8      	ldr	r3, [pc, #736]	@ (800459c <LPTIM1_callback+0x330>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d10b      	bne.n	80042da <LPTIM1_callback+0x6e>
 80042c2:	2317      	movs	r3, #23
 80042c4:	18fb      	adds	r3, r7, r3
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d106      	bne.n	80042da <LPTIM1_callback+0x6e>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 80042cc:	4bb3      	ldr	r3, [pc, #716]	@ (800459c <LPTIM1_callback+0x330>)
 80042ce:	2205      	movs	r2, #5
 80042d0:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = CC_MODE;
 80042d2:	4bb2      	ldr	r3, [pc, #712]	@ (800459c <LPTIM1_callback+0x330>)
 80042d4:	2202      	movs	r2, #2
 80042d6:	705a      	strb	r2, [r3, #1]
 80042d8:	e05f      	b.n	800439a <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.shared_state == PC_MODE) && (pin_state == 0)){
 80042da:	4bb0      	ldr	r3, [pc, #704]	@ (800459c <LPTIM1_callback+0x330>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d10b      	bne.n	80042fc <LPTIM1_callback+0x90>
 80042e4:	2317      	movs	r3, #23
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <LPTIM1_callback+0x90>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 80042ee:	4bab      	ldr	r3, [pc, #684]	@ (800459c <LPTIM1_callback+0x330>)
 80042f0:	2205      	movs	r2, #5
 80042f2:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = PC_MODE;
 80042f4:	4ba9      	ldr	r3, [pc, #676]	@ (800459c <LPTIM1_callback+0x330>)
 80042f6:	2203      	movs	r2, #3
 80042f8:	705a      	strb	r2, [r3, #1]
 80042fa:	e04e      	b.n	800439a <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 80042fc:	4ba7      	ldr	r3, [pc, #668]	@ (800459c <LPTIM1_callback+0x330>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b06      	cmp	r3, #6
 8004304:	d122      	bne.n	800434c <LPTIM1_callback+0xe0>
 8004306:	2317      	movs	r3, #23
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d11d      	bne.n	800434c <LPTIM1_callback+0xe0>
 8004310:	4ba3      	ldr	r3, [pc, #652]	@ (80045a0 <LPTIM1_callback+0x334>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d118      	bne.n	800434c <LPTIM1_callback+0xe0>
 800431a:	4ba2      	ldr	r3, [pc, #648]	@ (80045a4 <LPTIM1_callback+0x338>)
 800431c:	2120      	movs	r1, #32
 800431e:	0018      	movs	r0, r3
 8004320:	f002 faf0 	bl	8006904 <Get_Status_Bit>
 8004324:	0003      	movs	r3, r0
 8004326:	2b01      	cmp	r3, #1
 8004328:	d110      	bne.n	800434c <LPTIM1_callback+0xe0>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 800432a:	4b9c      	ldr	r3, [pc, #624]	@ (800459c <LPTIM1_callback+0x330>)
 800432c:	2205      	movs	r2, #5
 800432e:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_MODE;
 8004330:	4b9a      	ldr	r3, [pc, #616]	@ (800459c <LPTIM1_callback+0x330>)
 8004332:	2206      	movs	r2, #6
 8004334:	705a      	strb	r2, [r3, #1]

			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004336:	4b9b      	ldr	r3, [pc, #620]	@ (80045a4 <LPTIM1_callback+0x338>)
 8004338:	2120      	movs	r1, #32
 800433a:	0018      	movs	r0, r3
 800433c:	f002 fb08 	bl	8006950 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004340:	4b98      	ldr	r3, [pc, #608]	@ (80045a4 <LPTIM1_callback+0x338>)
 8004342:	2140      	movs	r1, #64	@ 0x40
 8004344:	0018      	movs	r0, r3
 8004346:	f002 fb03 	bl	8006950 <Clear_Status_Bit>
 800434a:	e026      	b.n	800439a <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 800434c:	4b93      	ldr	r3, [pc, #588]	@ (800459c <LPTIM1_callback+0x330>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b08      	cmp	r3, #8
 8004354:	d121      	bne.n	800439a <LPTIM1_callback+0x12e>
 8004356:	2317      	movs	r3, #23
 8004358:	18fb      	adds	r3, r7, r3
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d11c      	bne.n	800439a <LPTIM1_callback+0x12e>
 8004360:	4b8f      	ldr	r3, [pc, #572]	@ (80045a0 <LPTIM1_callback+0x334>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d117      	bne.n	800439a <LPTIM1_callback+0x12e>
 800436a:	4b8e      	ldr	r3, [pc, #568]	@ (80045a4 <LPTIM1_callback+0x338>)
 800436c:	2120      	movs	r1, #32
 800436e:	0018      	movs	r0, r3
 8004370:	f002 fac8 	bl	8006904 <Get_Status_Bit>
 8004374:	0003      	movs	r3, r0
 8004376:	2b01      	cmp	r3, #1
 8004378:	d10f      	bne.n	800439a <LPTIM1_callback+0x12e>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 800437a:	4b88      	ldr	r3, [pc, #544]	@ (800459c <LPTIM1_callback+0x330>)
 800437c:	2205      	movs	r2, #5
 800437e:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8004380:	4b86      	ldr	r3, [pc, #536]	@ (800459c <LPTIM1_callback+0x330>)
 8004382:	2208      	movs	r2, #8
 8004384:	705a      	strb	r2, [r3, #1]

			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004386:	4b87      	ldr	r3, [pc, #540]	@ (80045a4 <LPTIM1_callback+0x338>)
 8004388:	2120      	movs	r1, #32
 800438a:	0018      	movs	r0, r3
 800438c:	f002 fae0 	bl	8006950 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004390:	4b84      	ldr	r3, [pc, #528]	@ (80045a4 <LPTIM1_callback+0x338>)
 8004392:	2140      	movs	r1, #64	@ 0x40
 8004394:	0018      	movs	r0, r3
 8004396:	f002 fadb 	bl	8006950 <Clear_Status_Bit>
		}

		//CHECK TAP TEMPO STATE

		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == TAP_MODE)){
 800439a:	4b80      	ldr	r3, [pc, #512]	@ (800459c <LPTIM1_callback+0x330>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b05      	cmp	r3, #5
 80043a2:	d004      	beq.n	80043ae <LPTIM1_callback+0x142>
 80043a4:	4b7d      	ldr	r3, [pc, #500]	@ (800459c <LPTIM1_callback+0x330>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d11a      	bne.n	80043e4 <LPTIM1_callback+0x178>

			if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 80043ae:	4b7e      	ldr	r3, [pc, #504]	@ (80045a8 <LPTIM1_callback+0x33c>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d108      	bne.n	80043ca <LPTIM1_callback+0x15e>

				//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80043b8:	2380      	movs	r3, #128	@ 0x80
 80043ba:	0099      	lsls	r1, r3, #2
 80043bc:	23a0      	movs	r3, #160	@ 0xa0
 80043be:	05db      	lsls	r3, r3, #23
 80043c0:	2200      	movs	r2, #0
 80043c2:	0018      	movs	r0, r3
 80043c4:	f004 fd07 	bl	8008dd6 <HAL_GPIO_WritePin>
 80043c8:	e00c      	b.n	80043e4 <LPTIM1_callback+0x178>
				//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);

			}
			else if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 80043ca:	4b77      	ldr	r3, [pc, #476]	@ (80045a8 <LPTIM1_callback+0x33c>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d107      	bne.n	80043e4 <LPTIM1_callback+0x178>

				//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 80043d4:	2380      	movs	r3, #128	@ 0x80
 80043d6:	0099      	lsls	r1, r3, #2
 80043d8:	23a0      	movs	r3, #160	@ 0xa0
 80043da:	05db      	lsls	r3, r3, #23
 80043dc:	2201      	movs	r2, #1
 80043de:	0018      	movs	r0, r3
 80043e0:	f004 fcf9 	bl	8008dd6 <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
			}
		}

		//CHECK FOR SPEED POT CHANGES
		if(Get_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out) == YES){
 80043e4:	2380      	movs	r3, #128	@ 0x80
 80043e6:	011a      	lsls	r2, r3, #4
 80043e8:	4b6e      	ldr	r3, [pc, #440]	@ (80045a4 <LPTIM1_callback+0x338>)
 80043ea:	0011      	movs	r1, r2
 80043ec:	0018      	movs	r0, r3
 80043ee:	f002 fa89 	bl	8006904 <Get_Status_Bit>
 80043f2:	0003      	movs	r3, r0
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d000      	beq.n	80043fa <LPTIM1_callback+0x18e>
 80043f8:	e0c0      	b.n	800457c <LPTIM1_callback+0x310>

			Clear_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 80043fa:	2380      	movs	r3, #128	@ 0x80
 80043fc:	011a      	lsls	r2, r3, #4
 80043fe:	4b69      	ldr	r3, [pc, #420]	@ (80045a4 <LPTIM1_callback+0x338>)
 8004400:	0011      	movs	r1, r2
 8004402:	0018      	movs	r0, r3
 8004404:	f002 faa4 	bl	8006950 <Clear_Status_Bit>

			pots_counter = 0;
 8004408:	4b68      	ldr	r3, [pc, #416]	@ (80045ac <LPTIM1_callback+0x340>)
 800440a:	2200      	movs	r2, #0
 800440c:	701a      	strb	r2, [r3, #0]

			//PERFORM SPEED POT CHECKING
			if((speed_fsm.current_state.shared_state == PC_MODE) || (speed_fsm.current_state.shared_state == CC_MODE)){
 800440e:	4b63      	ldr	r3, [pc, #396]	@ (800459c <LPTIM1_callback+0x330>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b03      	cmp	r3, #3
 8004416:	d004      	beq.n	8004422 <LPTIM1_callback+0x1b6>
 8004418:	4b60      	ldr	r3, [pc, #384]	@ (800459c <LPTIM1_callback+0x330>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d105      	bne.n	800442e <LPTIM1_callback+0x1c2>

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8004422:	4b63      	ldr	r3, [pc, #396]	@ (80045b0 <LPTIM1_callback+0x344>)
 8004424:	2101      	movs	r1, #1
 8004426:	0018      	movs	r0, r3
 8004428:	f7fd faf8 	bl	8001a1c <Pot_Check>
 800442c:	e069      	b.n	8004502 <LPTIM1_callback+0x296>
			}
			else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 800442e:	4b5b      	ldr	r3, [pc, #364]	@ (800459c <LPTIM1_callback+0x330>)
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b06      	cmp	r3, #6
 8004436:	d117      	bne.n	8004468 <LPTIM1_callback+0x1fc>
 8004438:	4b59      	ldr	r3, [pc, #356]	@ (80045a0 <LPTIM1_callback+0x334>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d112      	bne.n	8004468 <LPTIM1_callback+0x1fc>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004442:	4b58      	ldr	r3, [pc, #352]	@ (80045a4 <LPTIM1_callback+0x338>)
 8004444:	2140      	movs	r1, #64	@ 0x40
 8004446:	0018      	movs	r0, r3
 8004448:	f002 fa70 	bl	800692c <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 800444c:	4b55      	ldr	r3, [pc, #340]	@ (80045a4 <LPTIM1_callback+0x338>)
 800444e:	2120      	movs	r1, #32
 8004450:	0018      	movs	r0, r3
 8004452:	f002 fa57 	bl	8006904 <Get_Status_Bit>
 8004456:	0003      	movs	r3, r0
 8004458:	2b01      	cmp	r3, #1
 800445a:	d152      	bne.n	8004502 <LPTIM1_callback+0x296>

					Pot_Check(ADCResultsDMA, SPEED_POT);
 800445c:	4b54      	ldr	r3, [pc, #336]	@ (80045b0 <LPTIM1_callback+0x344>)
 800445e:	2101      	movs	r1, #1
 8004460:	0018      	movs	r0, r3
 8004462:	f7fd fadb 	bl	8001a1c <Pot_Check>
				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8004466:	e04c      	b.n	8004502 <LPTIM1_callback+0x296>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8004468:	4b4c      	ldr	r3, [pc, #304]	@ (800459c <LPTIM1_callback+0x330>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b08      	cmp	r3, #8
 8004470:	d12b      	bne.n	80044ca <LPTIM1_callback+0x25e>
 8004472:	4b4b      	ldr	r3, [pc, #300]	@ (80045a0 <LPTIM1_callback+0x334>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d126      	bne.n	80044ca <LPTIM1_callback+0x25e>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800447c:	4b49      	ldr	r3, [pc, #292]	@ (80045a4 <LPTIM1_callback+0x338>)
 800447e:	2140      	movs	r1, #64	@ 0x40
 8004480:	0018      	movs	r0, r3
 8004482:	f002 fa53 	bl	800692c <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8004486:	4b47      	ldr	r3, [pc, #284]	@ (80045a4 <LPTIM1_callback+0x338>)
 8004488:	2120      	movs	r1, #32
 800448a:	0018      	movs	r0, r3
 800448c:	f002 fa3a 	bl	8006904 <Get_Status_Bit>
 8004490:	0003      	movs	r3, r0
 8004492:	2b01      	cmp	r3, #1
 8004494:	d135      	bne.n	8004502 <LPTIM1_callback+0x296>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8004496:	2380      	movs	r3, #128	@ 0x80
 8004498:	0099      	lsls	r1, r3, #2
 800449a:	23a0      	movs	r3, #160	@ 0xa0
 800449c:	05db      	lsls	r3, r3, #23
 800449e:	2201      	movs	r2, #1
 80044a0:	0018      	movs	r0, r3
 80044a2:	f004 fc98 	bl	8008dd6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80044a6:	4b43      	ldr	r3, [pc, #268]	@ (80045b4 <LPTIM1_callback+0x348>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	2140      	movs	r1, #64	@ 0x40
 80044ac:	0018      	movs	r0, r3
 80044ae:	f004 fc92 	bl	8008dd6 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = NOT_COMPILING;
 80044b2:	4b41      	ldr	r3, [pc, #260]	@ (80045b8 <LPTIM1_callback+0x34c>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 0;
 80044b8:	4b40      	ldr	r3, [pc, #256]	@ (80045bc <LPTIM1_callback+0x350>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	701a      	strb	r2, [r3, #0]

					Pot_Check(ADCResultsDMA, SPEED_POT);
 80044be:	4b3c      	ldr	r3, [pc, #240]	@ (80045b0 <LPTIM1_callback+0x344>)
 80044c0:	2101      	movs	r1, #1
 80044c2:	0018      	movs	r0, r3
 80044c4:	f7fd faaa 	bl	8001a1c <Pot_Check>
				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 80044c8:	e01b      	b.n	8004502 <LPTIM1_callback+0x296>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 80044ca:	4b34      	ldr	r3, [pc, #208]	@ (800459c <LPTIM1_callback+0x330>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d116      	bne.n	8004502 <LPTIM1_callback+0x296>
 80044d4:	4b32      	ldr	r3, [pc, #200]	@ (80045a0 <LPTIM1_callback+0x334>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d111      	bne.n	8004502 <LPTIM1_callback+0x296>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80044de:	4b31      	ldr	r3, [pc, #196]	@ (80045a4 <LPTIM1_callback+0x338>)
 80044e0:	2140      	movs	r1, #64	@ 0x40
 80044e2:	0018      	movs	r0, r3
 80044e4:	f002 fa22 	bl	800692c <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 80044e8:	4b2e      	ldr	r3, [pc, #184]	@ (80045a4 <LPTIM1_callback+0x338>)
 80044ea:	2120      	movs	r1, #32
 80044ec:	0018      	movs	r0, r3
 80044ee:	f002 fa09 	bl	8006904 <Get_Status_Bit>
 80044f2:	0003      	movs	r3, r0
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d104      	bne.n	8004502 <LPTIM1_callback+0x296>

					Pot_Check(ADCResultsDMA, SPEED_POT);
 80044f8:	4b2d      	ldr	r3, [pc, #180]	@ (80045b0 <LPTIM1_callback+0x344>)
 80044fa:	2101      	movs	r1, #1
 80044fc:	0018      	movs	r0, r3
 80044fe:	f7fd fa8d 	bl	8001a1c <Pot_Check>
				}
			}

			if((waveshape_fsm.current_state == PC_MODE) || (waveshape_fsm.current_state == CC_MODE)){
 8004502:	4b2f      	ldr	r3, [pc, #188]	@ (80045c0 <LPTIM1_callback+0x354>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b03      	cmp	r3, #3
 800450a:	d004      	beq.n	8004516 <LPTIM1_callback+0x2aa>
 800450c:	4b2c      	ldr	r3, [pc, #176]	@ (80045c0 <LPTIM1_callback+0x354>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d104      	bne.n	8004520 <LPTIM1_callback+0x2b4>
				Pot_Check(ADCResultsDMA, WAVESHAPE_POT);
 8004516:	4b26      	ldr	r3, [pc, #152]	@ (80045b0 <LPTIM1_callback+0x344>)
 8004518:	2100      	movs	r1, #0
 800451a:	0018      	movs	r0, r3
 800451c:	f7fd fa7e 	bl	8001a1c <Pot_Check>
			}
			if((depth_fsm.current_state == PC_MODE) || (depth_fsm.current_state == CC_MODE)){
 8004520:	4b28      	ldr	r3, [pc, #160]	@ (80045c4 <LPTIM1_callback+0x358>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b03      	cmp	r3, #3
 8004528:	d004      	beq.n	8004534 <LPTIM1_callback+0x2c8>
 800452a:	4b26      	ldr	r3, [pc, #152]	@ (80045c4 <LPTIM1_callback+0x358>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d104      	bne.n	800453e <LPTIM1_callback+0x2d2>
				Pot_Check(ADCResultsDMA, DEPTH_POT);
 8004534:	4b1e      	ldr	r3, [pc, #120]	@ (80045b0 <LPTIM1_callback+0x344>)
 8004536:	2102      	movs	r1, #2
 8004538:	0018      	movs	r0, r3
 800453a:	f7fd fa6f 	bl	8001a1c <Pot_Check>
			}
			if((symmetry_fsm.current_state == PC_MODE) || (symmetry_fsm.current_state == CC_MODE)){
 800453e:	4b22      	ldr	r3, [pc, #136]	@ (80045c8 <LPTIM1_callback+0x35c>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b03      	cmp	r3, #3
 8004546:	d004      	beq.n	8004552 <LPTIM1_callback+0x2e6>
 8004548:	4b1f      	ldr	r3, [pc, #124]	@ (80045c8 <LPTIM1_callback+0x35c>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d104      	bne.n	800455c <LPTIM1_callback+0x2f0>
				Pot_Check(ADCResultsDMA, SYMMETRY_POT);
 8004552:	4b17      	ldr	r3, [pc, #92]	@ (80045b0 <LPTIM1_callback+0x344>)
 8004554:	2103      	movs	r1, #3
 8004556:	0018      	movs	r0, r3
 8004558:	f7fd fa60 	bl	8001a1c <Pot_Check>
			}
			if((phase_fsm.current_state == PC_MODE) || (phase_fsm.current_state == CC_MODE)){
 800455c:	4b1b      	ldr	r3, [pc, #108]	@ (80045cc <LPTIM1_callback+0x360>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b03      	cmp	r3, #3
 8004564:	d004      	beq.n	8004570 <LPTIM1_callback+0x304>
 8004566:	4b19      	ldr	r3, [pc, #100]	@ (80045cc <LPTIM1_callback+0x360>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d136      	bne.n	80045de <LPTIM1_callback+0x372>
				Pot_Check(ADCResultsDMA, PHASE_POT);
 8004570:	4b0f      	ldr	r3, [pc, #60]	@ (80045b0 <LPTIM1_callback+0x344>)
 8004572:	2104      	movs	r1, #4
 8004574:	0018      	movs	r0, r3
 8004576:	f7fd fa51 	bl	8001a1c <Pot_Check>
 800457a:	e030      	b.n	80045de <LPTIM1_callback+0x372>
			}

		}
		else{

			if(pots_counter == POT_COUNTER_COUNT){
 800457c:	4b0b      	ldr	r3, [pc, #44]	@ (80045ac <LPTIM1_callback+0x340>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b40      	cmp	r3, #64	@ 0x40
 8004584:	d124      	bne.n	80045d0 <LPTIM1_callback+0x364>

				Set_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8004586:	2380      	movs	r3, #128	@ 0x80
 8004588:	011a      	lsls	r2, r3, #4
 800458a:	4b06      	ldr	r3, [pc, #24]	@ (80045a4 <LPTIM1_callback+0x338>)
 800458c:	0011      	movs	r1, r2
 800458e:	0018      	movs	r0, r3
 8004590:	f002 f9cc 	bl	800692c <Set_Status_Bit>
 8004594:	e023      	b.n	80045de <LPTIM1_callback+0x372>
 8004596:	46c0      	nop			@ (mov r8, r8)
 8004598:	20000025 	.word	0x20000025
 800459c:	20000430 	.word	0x20000430
 80045a0:	20000444 	.word	0x20000444
 80045a4:	20000cfc 	.word	0x20000cfc
 80045a8:	20000ce0 	.word	0x20000ce0
 80045ac:	2000059a 	.word	0x2000059a
 80045b0:	20000d0c 	.word	0x20000d0c
 80045b4:	50000800 	.word	0x50000800
 80045b8:	20000da8 	.word	0x20000da8
 80045bc:	20000cfa 	.word	0x20000cfa
 80045c0:	20000438 	.word	0x20000438
 80045c4:	20000434 	.word	0x20000434
 80045c8:	2000043c 	.word	0x2000043c
 80045cc:	20000440 	.word	0x20000440
			}
			else{

				pots_counter++;
 80045d0:	4bb7      	ldr	r3, [pc, #732]	@ (80048b0 <LPTIM1_callback+0x644>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	3301      	adds	r3, #1
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	4bb5      	ldr	r3, [pc, #724]	@ (80048b0 <LPTIM1_callback+0x644>)
 80045dc:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	//check if tap tempo switch is depressed
	Check_Tap_Tempo_Switch_State(&tap_tempo_switch_states);
 80045de:	4bb5      	ldr	r3, [pc, #724]	@ (80048b4 <LPTIM1_callback+0x648>)
 80045e0:	0018      	movs	r0, r3
 80045e2:	f7fd fb3b 	bl	8001c5c <Check_Tap_Tempo_Switch_State>
	static enum Preset_Selected preset = PRESET_ONE;
	static enum Validate first_time = YES;
	enum LED_States led_state;
	static enum LED_States led_state_saved;

	led_state = LED_fsm.current_state;
 80045e6:	2316      	movs	r3, #22
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	4ab3      	ldr	r2, [pc, #716]	@ (80048b8 <LPTIM1_callback+0x64c>)
 80045ec:	7812      	ldrb	r2, [r2, #0]
 80045ee:	701a      	strb	r2, [r3, #0]

	if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 80045f0:	4bb0      	ldr	r3, [pc, #704]	@ (80048b4 <LPTIM1_callback+0x648>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d000      	beq.n	80045fc <LPTIM1_callback+0x390>
 80045fa:	e0bc      	b.n	8004776 <LPTIM1_callback+0x50a>

		if(preset_save_mode_is_inactive == NO){
 80045fc:	4baf      	ldr	r3, [pc, #700]	@ (80048bc <LPTIM1_callback+0x650>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d000      	beq.n	8004608 <LPTIM1_callback+0x39c>
 8004606:	e09b      	b.n	8004740 <LPTIM1_callback+0x4d4>

			//if preset save timer has timed out, come out of preset save mode
			if(Get_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Has_Timed_Out) == YES){
 8004608:	2380      	movs	r3, #128	@ 0x80
 800460a:	019a      	lsls	r2, r3, #6
 800460c:	4bac      	ldr	r3, [pc, #688]	@ (80048c0 <LPTIM1_callback+0x654>)
 800460e:	0011      	movs	r1, r2
 8004610:	0018      	movs	r0, r3
 8004612:	f002 f977 	bl	8006904 <Get_Status_Bit>
 8004616:	0003      	movs	r3, r0
 8004618:	2b01      	cmp	r3, #1
 800461a:	d118      	bne.n	800464e <LPTIM1_callback+0x3e2>

				preset = PRESET_ONE;
 800461c:	4ba9      	ldr	r3, [pc, #676]	@ (80048c4 <LPTIM1_callback+0x658>)
 800461e:	2201      	movs	r2, #1
 8004620:	701a      	strb	r2, [r3, #0]
				preset_save_mode_is_inactive = YES;
 8004622:	4ba6      	ldr	r3, [pc, #664]	@ (80048bc <LPTIM1_callback+0x650>)
 8004624:	2201      	movs	r2, #1
 8004626:	701a      	strb	r2, [r3, #0]
				first_time = YES;
 8004628:	4ba7      	ldr	r3, [pc, #668]	@ (80048c8 <LPTIM1_callback+0x65c>)
 800462a:	2201      	movs	r2, #1
 800462c:	701a      	strb	r2, [r3, #0]
				LED_fsm.prev_state = LED_fsm.current_state;
 800462e:	4ba2      	ldr	r3, [pc, #648]	@ (80048b8 <LPTIM1_callback+0x64c>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	b2da      	uxtb	r2, r3
 8004634:	4ba0      	ldr	r3, [pc, #640]	@ (80048b8 <LPTIM1_callback+0x64c>)
 8004636:	705a      	strb	r2, [r3, #1]
				LED_fsm.current_state = led_state_saved;
 8004638:	4ba4      	ldr	r3, [pc, #656]	@ (80048cc <LPTIM1_callback+0x660>)
 800463a:	781a      	ldrb	r2, [r3, #0]
 800463c:	4b9e      	ldr	r3, [pc, #632]	@ (80048b8 <LPTIM1_callback+0x64c>)
 800463e:	701a      	strb	r2, [r3, #0]

				Clear_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Has_Timed_Out);
 8004640:	2380      	movs	r3, #128	@ 0x80
 8004642:	019a      	lsls	r2, r3, #6
 8004644:	4b9e      	ldr	r3, [pc, #632]	@ (80048c0 <LPTIM1_callback+0x654>)
 8004646:	0011      	movs	r1, r2
 8004648:	0018      	movs	r0, r3
 800464a:	f002 f981 	bl	8006950 <Clear_Status_Bit>
			}
			if((depressed_num >= TAP_TEMPO_SWITCH_PRESET_SAVE_COUNT) && (depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT)){
 800464e:	4ba0      	ldr	r3, [pc, #640]	@ (80048d0 <LPTIM1_callback+0x664>)
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d102      	bne.n	800465e <LPTIM1_callback+0x3f2>
 8004658:	d15f      	bne.n	800471a <LPTIM1_callback+0x4ae>
 800465a:	2af9      	cmp	r2, #249	@ 0xf9
 800465c:	d95d      	bls.n	800471a <LPTIM1_callback+0x4ae>
 800465e:	4b9c      	ldr	r3, [pc, #624]	@ (80048d0 <LPTIM1_callback+0x664>)
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d158      	bne.n	800471a <LPTIM1_callback+0x4ae>
 8004668:	d102      	bne.n	8004670 <LPTIM1_callback+0x404>
 800466a:	499a      	ldr	r1, [pc, #616]	@ (80048d4 <LPTIM1_callback+0x668>)
 800466c:	428a      	cmp	r2, r1
 800466e:	d854      	bhi.n	800471a <LPTIM1_callback+0x4ae>

				//get correct preset, as it will be 'off by one'
				if(preset == PRESET_ONE){
 8004670:	4b94      	ldr	r3, [pc, #592]	@ (80048c4 <LPTIM1_callback+0x658>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d103      	bne.n	8004680 <LPTIM1_callback+0x414>

					preset = PRESET_FOUR;
 8004678:	4b92      	ldr	r3, [pc, #584]	@ (80048c4 <LPTIM1_callback+0x658>)
 800467a:	2204      	movs	r2, #4
 800467c:	701a      	strb	r2, [r3, #0]
 800467e:	e016      	b.n	80046ae <LPTIM1_callback+0x442>
				}
				else if(preset == PRESET_TWO){
 8004680:	4b90      	ldr	r3, [pc, #576]	@ (80048c4 <LPTIM1_callback+0x658>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b02      	cmp	r3, #2
 8004686:	d103      	bne.n	8004690 <LPTIM1_callback+0x424>

					preset = PRESET_ONE;
 8004688:	4b8e      	ldr	r3, [pc, #568]	@ (80048c4 <LPTIM1_callback+0x658>)
 800468a:	2201      	movs	r2, #1
 800468c:	701a      	strb	r2, [r3, #0]
 800468e:	e00e      	b.n	80046ae <LPTIM1_callback+0x442>
				}
				else if(preset == PRESET_THREE){
 8004690:	4b8c      	ldr	r3, [pc, #560]	@ (80048c4 <LPTIM1_callback+0x658>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b03      	cmp	r3, #3
 8004696:	d103      	bne.n	80046a0 <LPTIM1_callback+0x434>

					preset = PRESET_TWO;
 8004698:	4b8a      	ldr	r3, [pc, #552]	@ (80048c4 <LPTIM1_callback+0x658>)
 800469a:	2202      	movs	r2, #2
 800469c:	701a      	strb	r2, [r3, #0]
 800469e:	e006      	b.n	80046ae <LPTIM1_callback+0x442>
				}
				else if(preset == PRESET_FOUR){
 80046a0:	4b88      	ldr	r3, [pc, #544]	@ (80048c4 <LPTIM1_callback+0x658>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d102      	bne.n	80046ae <LPTIM1_callback+0x442>

					preset = PRESET_THREE;
 80046a8:	4b86      	ldr	r3, [pc, #536]	@ (80048c4 <LPTIM1_callback+0x658>)
 80046aa:	2203      	movs	r2, #3
 80046ac:	701a      	strb	r2, [r3, #0]
				}

				//convert running params to preset, and update user preset and user preset used
				Store_Params_as_User_Preset(preset,
 80046ae:	4b85      	ldr	r3, [pc, #532]	@ (80048c4 <LPTIM1_callback+0x658>)
 80046b0:	7818      	ldrb	r0, [r3, #0]
 80046b2:	4c89      	ldr	r4, [pc, #548]	@ (80048d8 <LPTIM1_callback+0x66c>)
 80046b4:	4a89      	ldr	r2, [pc, #548]	@ (80048dc <LPTIM1_callback+0x670>)
 80046b6:	498a      	ldr	r1, [pc, #552]	@ (80048e0 <LPTIM1_callback+0x674>)
 80046b8:	4b8a      	ldr	r3, [pc, #552]	@ (80048e4 <LPTIM1_callback+0x678>)
 80046ba:	9301      	str	r3, [sp, #4]
 80046bc:	4b8a      	ldr	r3, [pc, #552]	@ (80048e8 <LPTIM1_callback+0x67c>)
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	0023      	movs	r3, r4
 80046c2:	f7fc fe61 	bl	8001388 <Store_Params_as_User_Preset>
											user_presets_array,
											factory_presets_array,
											presets_converted_array);

				//set the current pot mode to PC_MODE and update current preset active
				Set_All_Pots_to_PC_Mode();
 80046c6:	f7fc fe27 	bl	8001318 <Set_All_Pots_to_PC_Mode>
				preset_selected = preset;
 80046ca:	4b7e      	ldr	r3, [pc, #504]	@ (80048c4 <LPTIM1_callback+0x658>)
 80046cc:	781a      	ldrb	r2, [r3, #0]
 80046ce:	4b87      	ldr	r3, [pc, #540]	@ (80048ec <LPTIM1_callback+0x680>)
 80046d0:	701a      	strb	r2, [r3, #0]

				//store presets in flash
				Store_Single_Preset_In_Flash(user_presets_array[(uint8_t)(preset_selected - 1)], (uint8_t)(preset_selected - 1));
 80046d2:	4b86      	ldr	r3, [pc, #536]	@ (80048ec <LPTIM1_callback+0x680>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	001a      	movs	r2, r3
 80046de:	4b7e      	ldr	r3, [pc, #504]	@ (80048d8 <LPTIM1_callback+0x66c>)
 80046e0:	0092      	lsls	r2, r2, #2
 80046e2:	58d2      	ldr	r2, [r2, r3]
 80046e4:	4b81      	ldr	r3, [pc, #516]	@ (80048ec <LPTIM1_callback+0x680>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	0019      	movs	r1, r3
 80046f0:	0010      	movs	r0, r2
 80046f2:	f7fc fa91 	bl	8000c18 <Store_Single_Preset_In_Flash>

				//led confirm - overwrite prev state with saved state
				set_LED_to_state(&LED_fsm, LED_CONFIRM);
 80046f6:	4b70      	ldr	r3, [pc, #448]	@ (80048b8 <LPTIM1_callback+0x64c>)
 80046f8:	2107      	movs	r1, #7
 80046fa:	0018      	movs	r0, r3
 80046fc:	f7fc fe72 	bl	80013e4 <set_LED_to_state>
				LED_fsm.prev_state = led_state_saved;
 8004700:	4b72      	ldr	r3, [pc, #456]	@ (80048cc <LPTIM1_callback+0x660>)
 8004702:	781a      	ldrb	r2, [r3, #0]
 8004704:	4b6c      	ldr	r3, [pc, #432]	@ (80048b8 <LPTIM1_callback+0x64c>)
 8004706:	705a      	strb	r2, [r3, #1]

				preset = PRESET_ONE;
 8004708:	4b6e      	ldr	r3, [pc, #440]	@ (80048c4 <LPTIM1_callback+0x658>)
 800470a:	2201      	movs	r2, #1
 800470c:	701a      	strb	r2, [r3, #0]
				preset_save_mode_is_inactive = YES;
 800470e:	4b6b      	ldr	r3, [pc, #428]	@ (80048bc <LPTIM1_callback+0x650>)
 8004710:	2201      	movs	r2, #1
 8004712:	701a      	strb	r2, [r3, #0]
				first_time = YES;
 8004714:	4b6c      	ldr	r3, [pc, #432]	@ (80048c8 <LPTIM1_callback+0x65c>)
 8004716:	2201      	movs	r2, #1
 8004718:	701a      	strb	r2, [r3, #0]
			}

			if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 800471a:	4b75      	ldr	r3, [pc, #468]	@ (80048f0 <LPTIM1_callback+0x684>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b05      	cmp	r3, #5
 8004722:	d11f      	bne.n	8004764 <LPTIM1_callback+0x4f8>

				union Speed_FSM_States curr_state = speed_fsm.current_state;
 8004724:	2114      	movs	r1, #20
 8004726:	187b      	adds	r3, r7, r1
 8004728:	4a71      	ldr	r2, [pc, #452]	@ (80048f0 <LPTIM1_callback+0x684>)
 800472a:	7812      	ldrb	r2, [r2, #0]
 800472c:	701a      	strb	r2, [r3, #0]
				speed_fsm.current_state = speed_fsm.prev_state;
 800472e:	4b70      	ldr	r3, [pc, #448]	@ (80048f0 <LPTIM1_callback+0x684>)
 8004730:	4a6f      	ldr	r2, [pc, #444]	@ (80048f0 <LPTIM1_callback+0x684>)
 8004732:	7852      	ldrb	r2, [r2, #1]
 8004734:	701a      	strb	r2, [r3, #0]
				speed_fsm.prev_state = curr_state;
 8004736:	4b6e      	ldr	r3, [pc, #440]	@ (80048f0 <LPTIM1_callback+0x684>)
 8004738:	187a      	adds	r2, r7, r1
 800473a:	7812      	ldrb	r2, [r2, #0]
 800473c:	705a      	strb	r2, [r3, #1]
 800473e:	e011      	b.n	8004764 <LPTIM1_callback+0x4f8>
			}
		}
		else{

			if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8004740:	4b6b      	ldr	r3, [pc, #428]	@ (80048f0 <LPTIM1_callback+0x684>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b05      	cmp	r3, #5
 8004748:	d10c      	bne.n	8004764 <LPTIM1_callback+0x4f8>

				union Speed_FSM_States curr_state = speed_fsm.current_state;
 800474a:	2110      	movs	r1, #16
 800474c:	187b      	adds	r3, r7, r1
 800474e:	4a68      	ldr	r2, [pc, #416]	@ (80048f0 <LPTIM1_callback+0x684>)
 8004750:	7812      	ldrb	r2, [r2, #0]
 8004752:	701a      	strb	r2, [r3, #0]
				speed_fsm.current_state = speed_fsm.prev_state;
 8004754:	4b66      	ldr	r3, [pc, #408]	@ (80048f0 <LPTIM1_callback+0x684>)
 8004756:	4a66      	ldr	r2, [pc, #408]	@ (80048f0 <LPTIM1_callback+0x684>)
 8004758:	7852      	ldrb	r2, [r2, #1]
 800475a:	701a      	strb	r2, [r3, #0]
				speed_fsm.prev_state = curr_state;
 800475c:	4b64      	ldr	r3, [pc, #400]	@ (80048f0 <LPTIM1_callback+0x684>)
 800475e:	187a      	adds	r2, r7, r1
 8004760:	7812      	ldrb	r2, [r2, #0]
 8004762:	705a      	strb	r2, [r3, #1]
			}
		}

		depressed_num = 0;
 8004764:	495a      	ldr	r1, [pc, #360]	@ (80048d0 <LPTIM1_callback+0x664>)
 8004766:	2200      	movs	r2, #0
 8004768:	2300      	movs	r3, #0
 800476a:	600a      	str	r2, [r1, #0]
 800476c:	604b      	str	r3, [r1, #4]
		latched = NO;
 800476e:	4b61      	ldr	r3, [pc, #388]	@ (80048f4 <LPTIM1_callback+0x688>)
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	e0e0      	b.n	8004938 <LPTIM1_callback+0x6cc>
	}
	else if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8004776:	4b4f      	ldr	r3, [pc, #316]	@ (80048b4 <LPTIM1_callback+0x648>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b01      	cmp	r3, #1
 800477e:	d000      	beq.n	8004782 <LPTIM1_callback+0x516>
 8004780:	e0da      	b.n	8004938 <LPTIM1_callback+0x6cc>

		if(Get_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running) == YES){
 8004782:	2380      	movs	r3, #128	@ 0x80
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	4b4e      	ldr	r3, [pc, #312]	@ (80048c0 <LPTIM1_callback+0x654>)
 8004788:	0011      	movs	r1, r2
 800478a:	0018      	movs	r0, r3
 800478c:	f002 f8ba 	bl	8006904 <Get_Status_Bit>
 8004790:	0003      	movs	r3, r0
 8004792:	2b01      	cmp	r3, #1
 8004794:	d102      	bne.n	800479c <LPTIM1_callback+0x530>

			preset_save_idle_counter = 0;
 8004796:	4b58      	ldr	r3, [pc, #352]	@ (80048f8 <LPTIM1_callback+0x68c>)
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]
		}
		if((depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT) && (depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_COUNT)){
 800479c:	4b4c      	ldr	r3, [pc, #304]	@ (80048d0 <LPTIM1_callback+0x664>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d116      	bne.n	80047d4 <LPTIM1_callback+0x568>
 80047a6:	d102      	bne.n	80047ae <LPTIM1_callback+0x542>
 80047a8:	494a      	ldr	r1, [pc, #296]	@ (80048d4 <LPTIM1_callback+0x668>)
 80047aa:	428a      	cmp	r2, r1
 80047ac:	d812      	bhi.n	80047d4 <LPTIM1_callback+0x568>
 80047ae:	4b48      	ldr	r3, [pc, #288]	@ (80048d0 <LPTIM1_callback+0x664>)
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10d      	bne.n	80047d4 <LPTIM1_callback+0x568>
 80047b8:	d101      	bne.n	80047be <LPTIM1_callback+0x552>
 80047ba:	2af9      	cmp	r2, #249	@ 0xf9
 80047bc:	d80a      	bhi.n	80047d4 <LPTIM1_callback+0x568>

			//save count will always be less than advance count
			depressed_num++;
 80047be:	4b44      	ldr	r3, [pc, #272]	@ (80048d0 <LPTIM1_callback+0x664>)
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2001      	movs	r0, #1
 80047c6:	2100      	movs	r1, #0
 80047c8:	1812      	adds	r2, r2, r0
 80047ca:	414b      	adcs	r3, r1
 80047cc:	4940      	ldr	r1, [pc, #256]	@ (80048d0 <LPTIM1_callback+0x664>)
 80047ce:	600a      	str	r2, [r1, #0]
 80047d0:	604b      	str	r3, [r1, #4]
 80047d2:	e0b1      	b.n	8004938 <LPTIM1_callback+0x6cc>
		}
		else if((depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT) && (depressed_num >= TAP_TEMPO_SWITCH_PRESET_SAVE_COUNT)){
 80047d4:	4b3e      	ldr	r3, [pc, #248]	@ (80048d0 <LPTIM1_callback+0x664>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d116      	bne.n	800480c <LPTIM1_callback+0x5a0>
 80047de:	d102      	bne.n	80047e6 <LPTIM1_callback+0x57a>
 80047e0:	493c      	ldr	r1, [pc, #240]	@ (80048d4 <LPTIM1_callback+0x668>)
 80047e2:	428a      	cmp	r2, r1
 80047e4:	d812      	bhi.n	800480c <LPTIM1_callback+0x5a0>
 80047e6:	4b3a      	ldr	r3, [pc, #232]	@ (80048d0 <LPTIM1_callback+0x664>)
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d102      	bne.n	80047f6 <LPTIM1_callback+0x58a>
 80047f0:	d10c      	bne.n	800480c <LPTIM1_callback+0x5a0>
 80047f2:	2af9      	cmp	r2, #249	@ 0xf9
 80047f4:	d90a      	bls.n	800480c <LPTIM1_callback+0x5a0>

			//Clear_Status_Bit(&statuses, Short_Press);
			depressed_num++;
 80047f6:	4b36      	ldr	r3, [pc, #216]	@ (80048d0 <LPTIM1_callback+0x664>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2001      	movs	r0, #1
 80047fe:	2100      	movs	r1, #0
 8004800:	1812      	adds	r2, r2, r0
 8004802:	414b      	adcs	r3, r1
 8004804:	4932      	ldr	r1, [pc, #200]	@ (80048d0 <LPTIM1_callback+0x664>)
 8004806:	600a      	str	r2, [r1, #0]
 8004808:	604b      	str	r3, [r1, #4]
 800480a:	e095      	b.n	8004938 <LPTIM1_callback+0x6cc>
		}
		else{

			preset_save_mode_is_inactive = NO;
 800480c:	4b2b      	ldr	r3, [pc, #172]	@ (80048bc <LPTIM1_callback+0x650>)
 800480e:	2200      	movs	r2, #0
 8004810:	701a      	strb	r2, [r3, #0]

			//start counter
			Set_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running);
 8004812:	2380      	movs	r3, #128	@ 0x80
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	4b2a      	ldr	r3, [pc, #168]	@ (80048c0 <LPTIM1_callback+0x654>)
 8004818:	0011      	movs	r1, r2
 800481a:	0018      	movs	r0, r3
 800481c:	f002 f886 	bl	800692c <Set_Status_Bit>
			//reset counter
			preset_save_idle_counter = 0;
 8004820:	4b35      	ldr	r3, [pc, #212]	@ (80048f8 <LPTIM1_callback+0x68c>)
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]

			depressed_num++; //may be an issue if overflow
 8004826:	4b2a      	ldr	r3, [pc, #168]	@ (80048d0 <LPTIM1_callback+0x664>)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2001      	movs	r0, #1
 800482e:	2100      	movs	r1, #0
 8004830:	1812      	adds	r2, r2, r0
 8004832:	414b      	adcs	r3, r1
 8004834:	4926      	ldr	r1, [pc, #152]	@ (80048d0 <LPTIM1_callback+0x664>)
 8004836:	600a      	str	r2, [r1, #0]
 8004838:	604b      	str	r3, [r1, #4]

			if(first_time == YES){
 800483a:	4b23      	ldr	r3, [pc, #140]	@ (80048c8 <LPTIM1_callback+0x65c>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d107      	bne.n	8004852 <LPTIM1_callback+0x5e6>

				first_time = NO;
 8004842:	4b21      	ldr	r3, [pc, #132]	@ (80048c8 <LPTIM1_callback+0x65c>)
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]
				led_state_saved = led_state;
 8004848:	4b20      	ldr	r3, [pc, #128]	@ (80048cc <LPTIM1_callback+0x660>)
 800484a:	2216      	movs	r2, #22
 800484c:	18ba      	adds	r2, r7, r2
 800484e:	7812      	ldrb	r2, [r2, #0]
 8004850:	701a      	strb	r2, [r3, #0]
			}

			if(latched == NO){
 8004852:	4b28      	ldr	r3, [pc, #160]	@ (80048f4 <LPTIM1_callback+0x688>)
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d15c      	bne.n	8004914 <LPTIM1_callback+0x6a8>

				latched = YES;
 800485a:	4b26      	ldr	r3, [pc, #152]	@ (80048f4 <LPTIM1_callback+0x688>)
 800485c:	2201      	movs	r2, #1
 800485e:	701a      	strb	r2, [r3, #0]

				if(preset == PRESET_ONE){
 8004860:	4b18      	ldr	r3, [pc, #96]	@ (80048c4 <LPTIM1_callback+0x658>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d108      	bne.n	800487a <LPTIM1_callback+0x60e>

					set_LED_to_state(&LED_fsm, LED_ONE_BLINK);
 8004868:	4b13      	ldr	r3, [pc, #76]	@ (80048b8 <LPTIM1_callback+0x64c>)
 800486a:	2103      	movs	r1, #3
 800486c:	0018      	movs	r0, r3
 800486e:	f7fc fdb9 	bl	80013e4 <set_LED_to_state>
					preset = PRESET_TWO;
 8004872:	4b14      	ldr	r3, [pc, #80]	@ (80048c4 <LPTIM1_callback+0x658>)
 8004874:	2202      	movs	r2, #2
 8004876:	701a      	strb	r2, [r3, #0]
 8004878:	e04c      	b.n	8004914 <LPTIM1_callback+0x6a8>
				}
				else if(preset == PRESET_TWO){
 800487a:	4b12      	ldr	r3, [pc, #72]	@ (80048c4 <LPTIM1_callback+0x658>)
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b02      	cmp	r3, #2
 8004880:	d108      	bne.n	8004894 <LPTIM1_callback+0x628>

					set_LED_to_state(&LED_fsm, LED_TWO_BLINK);
 8004882:	4b0d      	ldr	r3, [pc, #52]	@ (80048b8 <LPTIM1_callback+0x64c>)
 8004884:	2104      	movs	r1, #4
 8004886:	0018      	movs	r0, r3
 8004888:	f7fc fdac 	bl	80013e4 <set_LED_to_state>
					preset = PRESET_THREE;
 800488c:	4b0d      	ldr	r3, [pc, #52]	@ (80048c4 <LPTIM1_callback+0x658>)
 800488e:	2203      	movs	r2, #3
 8004890:	701a      	strb	r2, [r3, #0]
 8004892:	e03f      	b.n	8004914 <LPTIM1_callback+0x6a8>
				}
				else if(preset == PRESET_THREE){
 8004894:	4b0b      	ldr	r3, [pc, #44]	@ (80048c4 <LPTIM1_callback+0x658>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b03      	cmp	r3, #3
 800489a:	d12f      	bne.n	80048fc <LPTIM1_callback+0x690>

					set_LED_to_state(&LED_fsm, LED_THREE_BLINK);
 800489c:	4b06      	ldr	r3, [pc, #24]	@ (80048b8 <LPTIM1_callback+0x64c>)
 800489e:	2105      	movs	r1, #5
 80048a0:	0018      	movs	r0, r3
 80048a2:	f7fc fd9f 	bl	80013e4 <set_LED_to_state>
					preset = PRESET_FOUR;
 80048a6:	4b07      	ldr	r3, [pc, #28]	@ (80048c4 <LPTIM1_callback+0x658>)
 80048a8:	2204      	movs	r2, #4
 80048aa:	701a      	strb	r2, [r3, #0]
 80048ac:	e032      	b.n	8004914 <LPTIM1_callback+0x6a8>
 80048ae:	46c0      	nop			@ (mov r8, r8)
 80048b0:	2000059a 	.word	0x2000059a
 80048b4:	20000ce0 	.word	0x20000ce0
 80048b8:	20000448 	.word	0x20000448
 80048bc:	20000025 	.word	0x20000025
 80048c0:	20000cfc 	.word	0x20000cfc
 80048c4:	20000026 	.word	0x20000026
 80048c8:	20000027 	.word	0x20000027
 80048cc:	20000ce2 	.word	0x20000ce2
 80048d0:	20000ce8 	.word	0x20000ce8
 80048d4:	000009c3 	.word	0x000009c3
 80048d8:	2000050c 	.word	0x2000050c
 80048dc:	20000578 	.word	0x20000578
 80048e0:	20000d18 	.word	0x20000d18
 80048e4:	2000051c 	.word	0x2000051c
 80048e8:	200004fc 	.word	0x200004fc
 80048ec:	20000554 	.word	0x20000554
 80048f0:	20000430 	.word	0x20000430
 80048f4:	20000cf0 	.word	0x20000cf0
 80048f8:	20000d08 	.word	0x20000d08
				}
				else if(preset == PRESET_FOUR){
 80048fc:	4b13      	ldr	r3, [pc, #76]	@ (800494c <LPTIM1_callback+0x6e0>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b04      	cmp	r3, #4
 8004902:	d107      	bne.n	8004914 <LPTIM1_callback+0x6a8>

					set_LED_to_state(&LED_fsm, LED_FOUR_BLINK);
 8004904:	4b12      	ldr	r3, [pc, #72]	@ (8004950 <LPTIM1_callback+0x6e4>)
 8004906:	2106      	movs	r1, #6
 8004908:	0018      	movs	r0, r3
 800490a:	f7fc fd6b 	bl	80013e4 <set_LED_to_state>
					preset = PRESET_ONE;
 800490e:	4b0f      	ldr	r3, [pc, #60]	@ (800494c <LPTIM1_callback+0x6e0>)
 8004910:	2201      	movs	r2, #1
 8004912:	701a      	strb	r2, [r3, #0]
				}
			}

			if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8004914:	4b0f      	ldr	r3, [pc, #60]	@ (8004954 <LPTIM1_callback+0x6e8>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b05      	cmp	r3, #5
 800491c:	d10c      	bne.n	8004938 <LPTIM1_callback+0x6cc>

				union Speed_FSM_States curr_state = speed_fsm.current_state;
 800491e:	210c      	movs	r1, #12
 8004920:	187b      	adds	r3, r7, r1
 8004922:	4a0c      	ldr	r2, [pc, #48]	@ (8004954 <LPTIM1_callback+0x6e8>)
 8004924:	7812      	ldrb	r2, [r2, #0]
 8004926:	701a      	strb	r2, [r3, #0]
				speed_fsm.current_state = speed_fsm.prev_state;
 8004928:	4b0a      	ldr	r3, [pc, #40]	@ (8004954 <LPTIM1_callback+0x6e8>)
 800492a:	4a0a      	ldr	r2, [pc, #40]	@ (8004954 <LPTIM1_callback+0x6e8>)
 800492c:	7852      	ldrb	r2, [r2, #1]
 800492e:	701a      	strb	r2, [r3, #0]
				speed_fsm.prev_state = curr_state;
 8004930:	4b08      	ldr	r3, [pc, #32]	@ (8004954 <LPTIM1_callback+0x6e8>)
 8004932:	187a      	adds	r2, r7, r1
 8004934:	7812      	ldrb	r2, [r2, #0]
 8004936:	705a      	strb	r2, [r3, #1]
			}
		}
	}

	//SET TIMER TRIGGER
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8004938:	4b07      	ldr	r3, [pc, #28]	@ (8004958 <LPTIM1_callback+0x6ec>)
 800493a:	22fa      	movs	r2, #250	@ 0xfa
 800493c:	21fa      	movs	r1, #250	@ 0xfa
 800493e:	0018      	movs	r0, r3
 8004940:	f004 fb40 	bl	8008fc4 <HAL_LPTIM_SetOnce_Start_IT>

}
 8004944:	46c0      	nop			@ (mov r8, r8)
 8004946:	46bd      	mov	sp, r7
 8004948:	b006      	add	sp, #24
 800494a:	bdb0      	pop	{r4, r5, r7, pc}
 800494c:	20000026 	.word	0x20000026
 8004950:	20000448 	.word	0x20000448
 8004954:	20000430 	.word	0x20000430
 8004958:	20000c84 	.word	0x20000c84

0800495c <TIM17_callback>:

void TIM17_callback(TIM_HandleTypeDef *htim){
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]


}
 8004964:	46c0      	nop			@ (mov r8, r8)
 8004966:	46bd      	mov	sp, r7
 8004968:	b002      	add	sp, #8
 800496a:	bd80      	pop	{r7, pc}

0800496c <TIM14_callback>:

void TIM14_callback(TIM_HandleTypeDef *htim){
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]

	if(LED_fsm.current_state == LED_ON){
 8004974:	4bd1      	ldr	r3, [pc, #836]	@ (8004cbc <TIM14_callback+0x350>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d106      	bne.n	800498c <TIM14_callback+0x20>

		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800497e:	4bd0      	ldr	r3, [pc, #832]	@ (8004cc0 <TIM14_callback+0x354>)
 8004980:	2201      	movs	r2, #1
 8004982:	2140      	movs	r1, #64	@ 0x40
 8004984:	0018      	movs	r0, r3
 8004986:	f004 fa26 	bl	8008dd6 <HAL_GPIO_WritePin>

				set_LED_to_state(&LED_fsm, prev);
			}
		}
	}
}
 800498a:	e1c3      	b.n	8004d14 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_OFF){
 800498c:	4bcb      	ldr	r3, [pc, #812]	@ (8004cbc <TIM14_callback+0x350>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b01      	cmp	r3, #1
 8004994:	d106      	bne.n	80049a4 <TIM14_callback+0x38>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004996:	4bca      	ldr	r3, [pc, #808]	@ (8004cc0 <TIM14_callback+0x354>)
 8004998:	2200      	movs	r2, #0
 800499a:	2140      	movs	r1, #64	@ 0x40
 800499c:	0018      	movs	r0, r3
 800499e:	f004 fa1a 	bl	8008dd6 <HAL_GPIO_WritePin>
}
 80049a2:	e1b7      	b.n	8004d14 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_ONE_BLINK){
 80049a4:	4bc5      	ldr	r3, [pc, #788]	@ (8004cbc <TIM14_callback+0x350>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b03      	cmp	r3, #3
 80049ac:	d133      	bne.n	8004a16 <TIM14_callback+0xaa>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 80049ae:	4bc5      	ldr	r3, [pc, #788]	@ (8004cc4 <TIM14_callback+0x358>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2200      	movs	r2, #0
 80049b4:	625a      	str	r2, [r3, #36]	@ 0x24
		if(LED_counter == 0){
 80049b6:	4bc4      	ldr	r3, [pc, #784]	@ (8004cc8 <TIM14_callback+0x35c>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10d      	bne.n	80049dc <TIM14_callback+0x70>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80049c0:	4bbf      	ldr	r3, [pc, #764]	@ (8004cc0 <TIM14_callback+0x354>)
 80049c2:	2201      	movs	r2, #1
 80049c4:	2140      	movs	r1, #64	@ 0x40
 80049c6:	0018      	movs	r0, r3
 80049c8:	f004 fa05 	bl	8008dd6 <HAL_GPIO_WritePin>
			LED_counter++;
 80049cc:	4bbe      	ldr	r3, [pc, #760]	@ (8004cc8 <TIM14_callback+0x35c>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	3301      	adds	r3, #1
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	4bbc      	ldr	r3, [pc, #752]	@ (8004cc8 <TIM14_callback+0x35c>)
 80049d8:	701a      	strb	r2, [r3, #0]
}
 80049da:	e19b      	b.n	8004d14 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 1)){
 80049dc:	4bba      	ldr	r3, [pc, #744]	@ (8004cc8 <TIM14_callback+0x35c>)
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d900      	bls.n	80049e8 <TIM14_callback+0x7c>
 80049e6:	e195      	b.n	8004d14 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80049e8:	4bb5      	ldr	r3, [pc, #724]	@ (8004cc0 <TIM14_callback+0x354>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	2140      	movs	r1, #64	@ 0x40
 80049ee:	0018      	movs	r0, r3
 80049f0:	f004 f9f1 	bl	8008dd6 <HAL_GPIO_WritePin>
			LED_counter++;
 80049f4:	4bb4      	ldr	r3, [pc, #720]	@ (8004cc8 <TIM14_callback+0x35c>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	3301      	adds	r3, #1
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	4bb2      	ldr	r3, [pc, #712]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004a00:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 1){
 8004a02:	4bb1      	ldr	r3, [pc, #708]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b05      	cmp	r3, #5
 8004a0a:	d000      	beq.n	8004a0e <TIM14_callback+0xa2>
 8004a0c:	e182      	b.n	8004d14 <TIM14_callback+0x3a8>
				LED_counter = 0;
 8004a0e:	4bae      	ldr	r3, [pc, #696]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	701a      	strb	r2, [r3, #0]
}
 8004a14:	e17e      	b.n	8004d14 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_TWO_BLINK){
 8004a16:	4ba9      	ldr	r3, [pc, #676]	@ (8004cbc <TIM14_callback+0x350>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d156      	bne.n	8004ace <TIM14_callback+0x162>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004a20:	4ba8      	ldr	r3, [pc, #672]	@ (8004cc4 <TIM14_callback+0x358>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2200      	movs	r2, #0
 8004a26:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 3) && (LED_counter % 2 == 0)){
 8004a28:	4ba7      	ldr	r3, [pc, #668]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d815      	bhi.n	8004a5e <TIM14_callback+0xf2>
 8004a32:	4ba5      	ldr	r3, [pc, #660]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2201      	movs	r2, #1
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10d      	bne.n	8004a5e <TIM14_callback+0xf2>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004a42:	4b9f      	ldr	r3, [pc, #636]	@ (8004cc0 <TIM14_callback+0x354>)
 8004a44:	2201      	movs	r2, #1
 8004a46:	2140      	movs	r1, #64	@ 0x40
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f004 f9c4 	bl	8008dd6 <HAL_GPIO_WritePin>
			LED_counter++;
 8004a4e:	4b9e      	ldr	r3, [pc, #632]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	3301      	adds	r3, #1
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	4b9b      	ldr	r3, [pc, #620]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004a5a:	701a      	strb	r2, [r3, #0]
 8004a5c:	e15a      	b.n	8004d14 <TIM14_callback+0x3a8>
		else if((LED_counter < 3) && (LED_counter % 2 == 1)){
 8004a5e:	4b9a      	ldr	r3, [pc, #616]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d815      	bhi.n	8004a94 <TIM14_callback+0x128>
 8004a68:	4b97      	ldr	r3, [pc, #604]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2201      	movs	r2, #1
 8004a70:	4013      	ands	r3, r2
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d10d      	bne.n	8004a94 <TIM14_callback+0x128>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004a78:	4b91      	ldr	r3, [pc, #580]	@ (8004cc0 <TIM14_callback+0x354>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	2140      	movs	r1, #64	@ 0x40
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f004 f9a9 	bl	8008dd6 <HAL_GPIO_WritePin>
			LED_counter++;
 8004a84:	4b90      	ldr	r3, [pc, #576]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	4b8e      	ldr	r3, [pc, #568]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	e13f      	b.n	8004d14 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 3)){
 8004a94:	4b8c      	ldr	r3, [pc, #560]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b06      	cmp	r3, #6
 8004a9c:	d900      	bls.n	8004aa0 <TIM14_callback+0x134>
 8004a9e:	e139      	b.n	8004d14 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004aa0:	4b87      	ldr	r3, [pc, #540]	@ (8004cc0 <TIM14_callback+0x354>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2140      	movs	r1, #64	@ 0x40
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f004 f995 	bl	8008dd6 <HAL_GPIO_WritePin>
			LED_counter++;
 8004aac:	4b86      	ldr	r3, [pc, #536]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	4b84      	ldr	r3, [pc, #528]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004ab8:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 3){
 8004aba:	4b83      	ldr	r3, [pc, #524]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b07      	cmp	r3, #7
 8004ac2:	d000      	beq.n	8004ac6 <TIM14_callback+0x15a>
 8004ac4:	e126      	b.n	8004d14 <TIM14_callback+0x3a8>
				LED_counter = 0;
 8004ac6:	4b80      	ldr	r3, [pc, #512]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	701a      	strb	r2, [r3, #0]
}
 8004acc:	e122      	b.n	8004d14 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_THREE_BLINK){
 8004ace:	4b7b      	ldr	r3, [pc, #492]	@ (8004cbc <TIM14_callback+0x350>)
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b05      	cmp	r3, #5
 8004ad6:	d156      	bne.n	8004b86 <TIM14_callback+0x21a>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004ad8:	4b7a      	ldr	r3, [pc, #488]	@ (8004cc4 <TIM14_callback+0x358>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2200      	movs	r2, #0
 8004ade:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 5) && (LED_counter % 2 == 0)){
 8004ae0:	4b79      	ldr	r3, [pc, #484]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d815      	bhi.n	8004b16 <TIM14_callback+0x1aa>
 8004aea:	4b77      	ldr	r3, [pc, #476]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2201      	movs	r2, #1
 8004af2:	4013      	ands	r3, r2
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10d      	bne.n	8004b16 <TIM14_callback+0x1aa>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004afa:	4b71      	ldr	r3, [pc, #452]	@ (8004cc0 <TIM14_callback+0x354>)
 8004afc:	2201      	movs	r2, #1
 8004afe:	2140      	movs	r1, #64	@ 0x40
 8004b00:	0018      	movs	r0, r3
 8004b02:	f004 f968 	bl	8008dd6 <HAL_GPIO_WritePin>
			LED_counter++;
 8004b06:	4b70      	ldr	r3, [pc, #448]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	4b6d      	ldr	r3, [pc, #436]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	e0fe      	b.n	8004d14 <TIM14_callback+0x3a8>
		else if((LED_counter < 5) && (LED_counter % 2 == 1)){
 8004b16:	4b6c      	ldr	r3, [pc, #432]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d815      	bhi.n	8004b4c <TIM14_callback+0x1e0>
 8004b20:	4b69      	ldr	r3, [pc, #420]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2201      	movs	r2, #1
 8004b28:	4013      	ands	r3, r2
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d10d      	bne.n	8004b4c <TIM14_callback+0x1e0>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004b30:	4b63      	ldr	r3, [pc, #396]	@ (8004cc0 <TIM14_callback+0x354>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	2140      	movs	r1, #64	@ 0x40
 8004b36:	0018      	movs	r0, r3
 8004b38:	f004 f94d 	bl	8008dd6 <HAL_GPIO_WritePin>
			LED_counter++;
 8004b3c:	4b62      	ldr	r3, [pc, #392]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	3301      	adds	r3, #1
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	4b60      	ldr	r3, [pc, #384]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004b48:	701a      	strb	r2, [r3, #0]
 8004b4a:	e0e3      	b.n	8004d14 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 5)){
 8004b4c:	4b5e      	ldr	r3, [pc, #376]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	d900      	bls.n	8004b58 <TIM14_callback+0x1ec>
 8004b56:	e0dd      	b.n	8004d14 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004b58:	4b59      	ldr	r3, [pc, #356]	@ (8004cc0 <TIM14_callback+0x354>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	2140      	movs	r1, #64	@ 0x40
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f004 f939 	bl	8008dd6 <HAL_GPIO_WritePin>
			LED_counter++;
 8004b64:	4b58      	ldr	r3, [pc, #352]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	4b56      	ldr	r3, [pc, #344]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004b70:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 5){
 8004b72:	4b55      	ldr	r3, [pc, #340]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b09      	cmp	r3, #9
 8004b7a:	d000      	beq.n	8004b7e <TIM14_callback+0x212>
 8004b7c:	e0ca      	b.n	8004d14 <TIM14_callback+0x3a8>
				LED_counter = 0;
 8004b7e:	4b52      	ldr	r3, [pc, #328]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	701a      	strb	r2, [r3, #0]
}
 8004b84:	e0c6      	b.n	8004d14 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_FOUR_BLINK){
 8004b86:	4b4d      	ldr	r3, [pc, #308]	@ (8004cbc <TIM14_callback+0x350>)
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b06      	cmp	r3, #6
 8004b8e:	d156      	bne.n	8004c3e <TIM14_callback+0x2d2>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004b90:	4b4c      	ldr	r3, [pc, #304]	@ (8004cc4 <TIM14_callback+0x358>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2200      	movs	r2, #0
 8004b96:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 7) && (LED_counter % 2 == 0)){
 8004b98:	4b4b      	ldr	r3, [pc, #300]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b06      	cmp	r3, #6
 8004ba0:	d815      	bhi.n	8004bce <TIM14_callback+0x262>
 8004ba2:	4b49      	ldr	r3, [pc, #292]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2201      	movs	r2, #1
 8004baa:	4013      	ands	r3, r2
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10d      	bne.n	8004bce <TIM14_callback+0x262>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004bb2:	4b43      	ldr	r3, [pc, #268]	@ (8004cc0 <TIM14_callback+0x354>)
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	2140      	movs	r1, #64	@ 0x40
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f004 f90c 	bl	8008dd6 <HAL_GPIO_WritePin>
			LED_counter++;
 8004bbe:	4b42      	ldr	r3, [pc, #264]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	4b3f      	ldr	r3, [pc, #252]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004bca:	701a      	strb	r2, [r3, #0]
 8004bcc:	e0a2      	b.n	8004d14 <TIM14_callback+0x3a8>
		else if((LED_counter < 7) && (LED_counter % 2 == 1)){
 8004bce:	4b3e      	ldr	r3, [pc, #248]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b06      	cmp	r3, #6
 8004bd6:	d815      	bhi.n	8004c04 <TIM14_callback+0x298>
 8004bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2201      	movs	r2, #1
 8004be0:	4013      	ands	r3, r2
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d10d      	bne.n	8004c04 <TIM14_callback+0x298>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004be8:	4b35      	ldr	r3, [pc, #212]	@ (8004cc0 <TIM14_callback+0x354>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	2140      	movs	r1, #64	@ 0x40
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f004 f8f1 	bl	8008dd6 <HAL_GPIO_WritePin>
			LED_counter++;
 8004bf4:	4b34      	ldr	r3, [pc, #208]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	4b32      	ldr	r3, [pc, #200]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004c00:	701a      	strb	r2, [r3, #0]
 8004c02:	e087      	b.n	8004d14 <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 8004c04:	4b30      	ldr	r3, [pc, #192]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b0a      	cmp	r3, #10
 8004c0c:	d900      	bls.n	8004c10 <TIM14_callback+0x2a4>
 8004c0e:	e081      	b.n	8004d14 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004c10:	4b2b      	ldr	r3, [pc, #172]	@ (8004cc0 <TIM14_callback+0x354>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	2140      	movs	r1, #64	@ 0x40
 8004c16:	0018      	movs	r0, r3
 8004c18:	f004 f8dd 	bl	8008dd6 <HAL_GPIO_WritePin>
			LED_counter++;
 8004c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	3301      	adds	r3, #1
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	4b28      	ldr	r3, [pc, #160]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004c28:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 7){
 8004c2a:	4b27      	ldr	r3, [pc, #156]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b0b      	cmp	r3, #11
 8004c32:	d000      	beq.n	8004c36 <TIM14_callback+0x2ca>
 8004c34:	e06e      	b.n	8004d14 <TIM14_callback+0x3a8>
				LED_counter = 0;
 8004c36:	4b24      	ldr	r3, [pc, #144]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	701a      	strb	r2, [r3, #0]
}
 8004c3c:	e06a      	b.n	8004d14 <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_CONFIRM){
 8004c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8004cbc <TIM14_callback+0x350>)
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b07      	cmp	r3, #7
 8004c46:	d165      	bne.n	8004d14 <TIM14_callback+0x3a8>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004c48:	4b1e      	ldr	r3, [pc, #120]	@ (8004cc4 <TIM14_callback+0x358>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 7) && (LED_counter % 2 == 0)){
 8004c50:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b06      	cmp	r3, #6
 8004c58:	d815      	bhi.n	8004c86 <TIM14_callback+0x31a>
 8004c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2201      	movs	r2, #1
 8004c62:	4013      	ands	r3, r2
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10d      	bne.n	8004c86 <TIM14_callback+0x31a>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004c6a:	4b15      	ldr	r3, [pc, #84]	@ (8004cc0 <TIM14_callback+0x354>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	2140      	movs	r1, #64	@ 0x40
 8004c70:	0018      	movs	r0, r3
 8004c72:	f004 f8b0 	bl	8008dd6 <HAL_GPIO_WritePin>
			LED_counter++;
 8004c76:	4b14      	ldr	r3, [pc, #80]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	4b11      	ldr	r3, [pc, #68]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	e046      	b.n	8004d14 <TIM14_callback+0x3a8>
		else if((LED_counter < 7) && (LED_counter % 2 == 1)){
 8004c86:	4b10      	ldr	r3, [pc, #64]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b06      	cmp	r3, #6
 8004c8e:	d81d      	bhi.n	8004ccc <TIM14_callback+0x360>
 8004c90:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2201      	movs	r2, #1
 8004c98:	4013      	ands	r3, r2
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d115      	bne.n	8004ccc <TIM14_callback+0x360>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004ca0:	4b07      	ldr	r3, [pc, #28]	@ (8004cc0 <TIM14_callback+0x354>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	2140      	movs	r1, #64	@ 0x40
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f004 f895 	bl	8008dd6 <HAL_GPIO_WritePin>
			LED_counter++;
 8004cac:	4b06      	ldr	r3, [pc, #24]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	4b04      	ldr	r3, [pc, #16]	@ (8004cc8 <TIM14_callback+0x35c>)
 8004cb8:	701a      	strb	r2, [r3, #0]
 8004cba:	e02b      	b.n	8004d14 <TIM14_callback+0x3a8>
 8004cbc:	20000448 	.word	0x20000448
 8004cc0:	50000800 	.word	0x50000800
 8004cc4:	20000698 	.word	0x20000698
 8004cc8:	20000581 	.word	0x20000581
		else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 8004ccc:	4b13      	ldr	r3, [pc, #76]	@ (8004d1c <TIM14_callback+0x3b0>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b0a      	cmp	r3, #10
 8004cd4:	d81e      	bhi.n	8004d14 <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004cd6:	4b12      	ldr	r3, [pc, #72]	@ (8004d20 <TIM14_callback+0x3b4>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2140      	movs	r1, #64	@ 0x40
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f004 f87a 	bl	8008dd6 <HAL_GPIO_WritePin>
			LED_counter++;
 8004ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8004d1c <TIM14_callback+0x3b0>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	3301      	adds	r3, #1
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	4b0b      	ldr	r3, [pc, #44]	@ (8004d1c <TIM14_callback+0x3b0>)
 8004cee:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 7){
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8004d1c <TIM14_callback+0x3b0>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b0b      	cmp	r3, #11
 8004cf8:	d10c      	bne.n	8004d14 <TIM14_callback+0x3a8>
				enum LED_States prev = LED_fsm.prev_state;
 8004cfa:	210f      	movs	r1, #15
 8004cfc:	187b      	adds	r3, r7, r1
 8004cfe:	4a09      	ldr	r2, [pc, #36]	@ (8004d24 <TIM14_callback+0x3b8>)
 8004d00:	7852      	ldrb	r2, [r2, #1]
 8004d02:	701a      	strb	r2, [r3, #0]
				set_LED_to_state(&LED_fsm, prev);
 8004d04:	187b      	adds	r3, r7, r1
 8004d06:	781a      	ldrb	r2, [r3, #0]
 8004d08:	4b06      	ldr	r3, [pc, #24]	@ (8004d24 <TIM14_callback+0x3b8>)
 8004d0a:	0011      	movs	r1, r2
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f7fc fb69 	bl	80013e4 <set_LED_to_state>
}
 8004d12:	e7ff      	b.n	8004d14 <TIM14_callback+0x3a8>
 8004d14:	46c0      	nop			@ (mov r8, r8)
 8004d16:	46bd      	mov	sp, r7
 8004d18:	b004      	add	sp, #16
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	20000581 	.word	0x20000581
 8004d20:	50000800 	.word	0x50000800
 8004d24:	20000448 	.word	0x20000448

08004d28 <Input_Capture_Processing>:
volatile uint32_t TIM2_ch1_input_capture_value;
volatile uint16_t interrupt_period = 0;
volatile uint8_t MIDI_CLK_tag = 0;

//FUNCTION DEFINITIONS
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params *params_ptr){
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	0002      	movs	r2, r0
 8004d30:	6039      	str	r1, [r7, #0]
 8004d32:	1dbb      	adds	r3, r7, #6
 8004d34:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Clear_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started); //reset flag
 8004d36:	4b34      	ldr	r3, [pc, #208]	@ (8004e08 <Input_Capture_Processing+0xe0>)
 8004d38:	2104      	movs	r1, #4
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f001 fe08 	bl	8006950 <Clear_Status_Bit>

	//DETERMINE WHAT TO SET THE RAW_START_VALUE AND BASE_PRESCALER TO BASED ON THE I/P CAPTURE VALUE
	//CHECK FOR PRIMALITY
	if(isPrime(interrupt_period_value) == YES){
 8004d40:	1dbb      	adds	r3, r7, #6
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	0018      	movs	r0, r3
 8004d48:	f001 fd91 	bl	800686e <isPrime>
 8004d4c:	0003      	movs	r3, r0
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d106      	bne.n	8004d60 <Input_Capture_Processing+0x38>

		interrupt_period_value += 1;
 8004d52:	1dbb      	adds	r3, r7, #6
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3301      	adds	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	1dbb      	adds	r3, r7, #6
 8004d5e:	801a      	strh	r2, [r3, #0]
	}

	//START FINDING FACTORS
	uint32_t N = interrupt_period_value << 6; //calculate the N-value which is prescaler_meas * interrupt_period_meas. The measurement prescaler is used which is 64. (TIM2 has a prescaler of 64*512, but since we divide this value by 512, the prescaler is then just 64).
 8004d60:	1dbb      	adds	r3, r7, #6
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	019b      	lsls	r3, r3, #6
 8004d68:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8004d6a:	2317      	movs	r3, #23
 8004d6c:	18fb      	adds	r3, r7, r3
 8004d6e:	2200      	movs	r2, #0
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	e02d      	b.n	8004dd0 <Input_Capture_Processing+0xa8>

		interrupt_period_value = 256 - i;
 8004d74:	2317      	movs	r3, #23
 8004d76:	18fb      	adds	r3, r7, r3
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2280      	movs	r2, #128	@ 0x80
 8004d7e:	0052      	lsls	r2, r2, #1
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	1dbb      	adds	r3, r7, #6
 8004d86:	801a      	strh	r2, [r3, #0]
		uint16_t remainder = N % interrupt_period_value;
 8004d88:	1dbb      	adds	r3, r7, #6
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	001a      	movs	r2, r3
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	0011      	movs	r1, r2
 8004d94:	0018      	movs	r0, r3
 8004d96:	f7fb fa3d 	bl	8000214 <__aeabi_uidivmod>
 8004d9a:	000b      	movs	r3, r1
 8004d9c:	001a      	movs	r2, r3
 8004d9e:	210e      	movs	r1, #14
 8004da0:	187b      	adds	r3, r7, r1
 8004da2:	801a      	strh	r2, [r3, #0]

		if(remainder == 0){ //check if no remainder -> integer
 8004da4:	187b      	adds	r3, r7, r1
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10b      	bne.n	8004dc4 <Input_Capture_Processing+0x9c>

			params_ptr->raw_prescaler = N / interrupt_period_value;
 8004dac:	1dbb      	adds	r3, r7, #6
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	0019      	movs	r1, r3
 8004db4:	6938      	ldr	r0, [r7, #16]
 8004db6:	f7fb f9a7 	bl	8000108 <__udivsi3>
 8004dba:	0003      	movs	r3, r0
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	835a      	strh	r2, [r3, #26]
			break;
 8004dc2:	e00a      	b.n	8004dda <Input_Capture_Processing+0xb2>
	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8004dc4:	2117      	movs	r1, #23
 8004dc6:	187b      	adds	r3, r7, r1
 8004dc8:	781a      	ldrb	r2, [r3, #0]
 8004dca:	187b      	adds	r3, r7, r1
 8004dcc:	3201      	adds	r2, #1
 8004dce:	701a      	strb	r2, [r3, #0]
 8004dd0:	2317      	movs	r3, #23
 8004dd2:	18fb      	adds	r3, r7, r3
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	2b80      	cmp	r3, #128	@ 0x80
 8004dd8:	d9cc      	bls.n	8004d74 <Input_Capture_Processing+0x4c>
		}
	}

	params_ptr->raw_start_value = 256 - interrupt_period_value;
 8004dda:	1dbb      	adds	r3, r7, #6
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2280      	movs	r2, #128	@ 0x80
 8004de2:	0052      	lsls	r2, r2, #1
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	825a      	strh	r2, [r3, #18]

	Calculate_Next_Main_Oscillator_Values(params_ptr, (enum Next_Values_Processing_Mode)IP_CAPTURE_MODE);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2101      	movs	r1, #1
 8004df0:	0018      	movs	r0, r3
 8004df2:	f000 f9f7 	bl	80051e4 <Calculate_Next_Main_Oscillator_Values>
	Process_TIM16_Final_Start_Value_and_Final_Prescaler(params_ptr);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f001 f8f5 	bl	8005fe8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);

	return 1;
 8004dfe:	2301      	movs	r3, #1
}
 8004e00:	0018      	movs	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	b006      	add	sp, #24
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	20000cfc 	.word	0x20000cfc

08004e0c <Start_Input_Capture_Timer>:

uint8_t Start_Input_Capture_Timer(void){
 8004e0c:	b590      	push	{r4, r7, lr}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0

	uint8_t ok = Start_IC_TIM(&htim2, TIM_CHANNEL_1);
 8004e12:	1dfc      	adds	r4, r7, #7
 8004e14:	4b09      	ldr	r3, [pc, #36]	@ (8004e3c <Start_Input_Capture_Timer+0x30>)
 8004e16:	2100      	movs	r1, #0
 8004e18:	0018      	movs	r0, r3
 8004e1a:	f000 f811 	bl	8004e40 <Start_IC_TIM>
 8004e1e:	0003      	movs	r3, r0
 8004e20:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8004e22:	1dfb      	adds	r3, r7, #7
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <Start_Input_Capture_Timer+0x22>

		Error_Handler();
 8004e2a:	f7fd fd77 	bl	800291c <Error_Handler>
	}

	return ok;
 8004e2e:	1dfb      	adds	r3, r7, #7
 8004e30:	781b      	ldrb	r3, [r3, #0]
}
 8004e32:	0018      	movs	r0, r3
 8004e34:	46bd      	mov	sp, r7
 8004e36:	b003      	add	sp, #12
 8004e38:	bd90      	pop	{r4, r7, pc}
 8004e3a:	46c0      	nop			@ (mov r8, r8)
 8004e3c:	200008cc 	.word	0x200008cc

08004e40 <Start_IC_TIM>:

uint8_t Start_IC_TIM(TIM_HandleTypeDef *TIM, uint32_t IC_TIM_channel){
 8004e40:	b5b0      	push	{r4, r5, r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]

	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 8004e4a:	250f      	movs	r5, #15
 8004e4c:	197c      	adds	r4, r7, r5
 8004e4e:	4b10      	ldr	r3, [pc, #64]	@ (8004e90 <Start_IC_TIM+0x50>)
 8004e50:	0018      	movs	r0, r3
 8004e52:	f005 fb51 	bl	800a4f8 <HAL_TIM_Base_Start_IT>
 8004e56:	0003      	movs	r3, r0
 8004e58:	7023      	strb	r3, [r4, #0]
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e90 <Start_IC_TIM+0x50>)
 8004e5e:	0011      	movs	r1, r2
 8004e60:	0018      	movs	r0, r3
 8004e62:	f005 ffb7 	bl	800add4 <HAL_TIM_IC_Start_IT>
 8004e66:	0003      	movs	r3, r0
 8004e68:	0019      	movs	r1, r3
 8004e6a:	197b      	adds	r3, r7, r5
 8004e6c:	197a      	adds	r2, r7, r5
 8004e6e:	7812      	ldrb	r2, [r2, #0]
 8004e70:	400a      	ands	r2, r1
 8004e72:	701a      	strb	r2, [r3, #0]

	if(ok_AND != HAL_OK){
 8004e74:	197b      	adds	r3, r7, r5
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <Start_IC_TIM+0x40>

		Error_Handler();
 8004e7c:	f7fd fd4e 	bl	800291c <Error_Handler>
	}

	return ok_AND;
 8004e80:	230f      	movs	r3, #15
 8004e82:	18fb      	adds	r3, r7, r3
 8004e84:	781b      	ldrb	r3, [r3, #0]
}
 8004e86:	0018      	movs	r0, r3
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	b004      	add	sp, #16
 8004e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e8e:	46c0      	nop			@ (mov r8, r8)
 8004e90:	200008cc 	.word	0x200008cc

08004e94 <Copy_Params_Structs>:

uint8_t Copy_Params_Structs(struct Params *src_ptr, struct Params *dst_ptr){
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]

	*dst_ptr = *src_ptr;
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	0010      	movs	r0, r2
 8004ea4:	0019      	movs	r1, r3
 8004ea6:	2324      	movs	r3, #36	@ 0x24
 8004ea8:	001a      	movs	r2, r3
 8004eaa:	f009 f935 	bl	800e118 <memcpy>

	return 1;
 8004eae:	2301      	movs	r3, #1
}
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b002      	add	sp, #8
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <Start_Measurement_Reelapse_Timer>:

uint8_t Start_Measurement_Reelapse_Timer(void){
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8004ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8004eec <Start_Measurement_Reelapse_Timer+0x34>)
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	f001 fcb8 	bl	8006836 <Stop_OC_TIM>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004ec6:	4b09      	ldr	r3, [pc, #36]	@ (8004eec <Start_Measurement_Reelapse_Timer+0x34>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 8004ece:	4b08      	ldr	r3, [pc, #32]	@ (8004ef0 <Start_Measurement_Reelapse_Timer+0x38>)
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	4b05      	ldr	r3, [pc, #20]	@ (8004eec <Start_Measurement_Reelapse_Timer+0x34>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	635a      	str	r2, [r3, #52]	@ 0x34
	Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8004eda:	4b04      	ldr	r3, [pc, #16]	@ (8004eec <Start_Measurement_Reelapse_Timer+0x34>)
 8004edc:	2100      	movs	r1, #0
 8004ede:	0018      	movs	r0, r3
 8004ee0:	f001 fc8d 	bl	80067fe <Start_OC_TIM>

	return 1;
 8004ee4:	2301      	movs	r3, #1
}
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	20000988 	.word	0x20000988
 8004ef0:	20000cf8 	.word	0x20000cf8

08004ef4 <Begin_Input_Capture_Measurement>:

uint8_t Begin_Input_Capture_Measurement(void){
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0

	__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 8004ef8:	4b03      	ldr	r3, [pc, #12]	@ (8004f08 <Begin_Input_Capture_Measurement+0x14>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2200      	movs	r2, #0
 8004efe:	625a      	str	r2, [r3, #36]	@ 0x24

	return 1;
 8004f00:	2301      	movs	r3, #1
}
 8004f02:	0018      	movs	r0, r3
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	200008cc 	.word	0x200008cc

08004f0c <main>:
//INCLUDES
#include "main.h"
#include "main_vars.h"

int main(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
	//SYSTEM INIT
	System_Init();
 8004f10:	f7fd fd0a 	bl	8002928 <System_Init>

	//STARTUP
	Startup();
 8004f14:	f000 fb5c 	bl	80055d0 <Startup>

	while (1)
	{
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 8004f18:	4b4b      	ldr	r3, [pc, #300]	@ (8005048 <main+0x13c>)
 8004f1a:	2104      	movs	r1, #4
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f001 fcf1 	bl	8006904 <Get_Status_Bit>
 8004f22:	0003      	movs	r3, r0
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d107      	bne.n	8004f38 <main+0x2c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

			Input_Capture_Processing(interrupt_period, &params_to_be_loaded);
 8004f28:	4b48      	ldr	r3, [pc, #288]	@ (800504c <main+0x140>)
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	4a48      	ldr	r2, [pc, #288]	@ (8005050 <main+0x144>)
 8004f30:	0011      	movs	r1, r2
 8004f32:	0018      	movs	r0, r3
 8004f34:	f7ff fef8 	bl	8004d28 <Input_Capture_Processing>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
		}

		if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running) == YES){
 8004f38:	4b43      	ldr	r3, [pc, #268]	@ (8005048 <main+0x13c>)
 8004f3a:	2140      	movs	r1, #64	@ 0x40
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f001 fce1 	bl	8006904 <Get_Status_Bit>
 8004f42:	0003      	movs	r3, r0
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d12b      	bne.n	8004fa0 <main+0x94>

			if(idle_counter < IDLE_COUNT){
 8004f48:	4b42      	ldr	r3, [pc, #264]	@ (8005054 <main+0x148>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	23fa      	movs	r3, #250	@ 0xfa
 8004f4e:	01db      	lsls	r3, r3, #7
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d218      	bcs.n	8004f86 <main+0x7a>

				if(IP_CAP_fsm.current_state != IDLE){
 8004f54:	4b40      	ldr	r3, [pc, #256]	@ (8005058 <main+0x14c>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00d      	beq.n	8004f7a <main+0x6e>

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004f5e:	4b3a      	ldr	r3, [pc, #232]	@ (8005048 <main+0x13c>)
 8004f60:	2140      	movs	r1, #64	@ 0x40
 8004f62:	0018      	movs	r0, r3
 8004f64:	f001 fcf4 	bl	8006950 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004f68:	4b37      	ldr	r3, [pc, #220]	@ (8005048 <main+0x13c>)
 8004f6a:	2120      	movs	r1, #32
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f001 fcef 	bl	8006950 <Clear_Status_Bit>
					idle_counter = 0;
 8004f72:	4b38      	ldr	r3, [pc, #224]	@ (8005054 <main+0x148>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	e012      	b.n	8004fa0 <main+0x94>
				}
				else{

					idle_counter++;
 8004f7a:	4b36      	ldr	r3, [pc, #216]	@ (8005054 <main+0x148>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	4b34      	ldr	r3, [pc, #208]	@ (8005054 <main+0x148>)
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	e00c      	b.n	8004fa0 <main+0x94>
				}
			}
			else{

				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004f86:	4b30      	ldr	r3, [pc, #192]	@ (8005048 <main+0x13c>)
 8004f88:	2140      	movs	r1, #64	@ 0x40
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f001 fce0 	bl	8006950 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004f90:	4b2d      	ldr	r3, [pc, #180]	@ (8005048 <main+0x13c>)
 8004f92:	2120      	movs	r1, #32
 8004f94:	0018      	movs	r0, r3
 8004f96:	f001 fcc9 	bl	800692c <Set_Status_Bit>
				idle_counter = 0;
 8004f9a:	4b2e      	ldr	r3, [pc, #184]	@ (8005054 <main+0x148>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]
			}
		}

		if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running) == YES){
 8004fa0:	2380      	movs	r3, #128	@ 0x80
 8004fa2:	005a      	lsls	r2, r3, #1
 8004fa4:	4b28      	ldr	r3, [pc, #160]	@ (8005048 <main+0x13c>)
 8004fa6:	0011      	movs	r1, r2
 8004fa8:	0018      	movs	r0, r3
 8004faa:	f001 fcab 	bl	8006904 <Get_Status_Bit>
 8004fae:	0003      	movs	r3, r0
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d122      	bne.n	8004ffa <main+0xee>

			if(midi_counter < MIDI_COUNT){
 8004fb4:	4b29      	ldr	r3, [pc, #164]	@ (800505c <main+0x150>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a29      	ldr	r2, [pc, #164]	@ (8005060 <main+0x154>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d805      	bhi.n	8004fca <main+0xbe>

				midi_counter++;
 8004fbe:	4b27      	ldr	r3, [pc, #156]	@ (800505c <main+0x150>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	4b25      	ldr	r3, [pc, #148]	@ (800505c <main+0x150>)
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	e017      	b.n	8004ffa <main+0xee>
			}
			else{

				Clear_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8004fca:	2380      	movs	r3, #128	@ 0x80
 8004fcc:	005a      	lsls	r2, r3, #1
 8004fce:	4b1e      	ldr	r3, [pc, #120]	@ (8005048 <main+0x13c>)
 8004fd0:	0011      	movs	r1, r2
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f001 fcbc 	bl	8006950 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out);
 8004fd8:	2380      	movs	r3, #128	@ 0x80
 8004fda:	009a      	lsls	r2, r3, #2
 8004fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8005048 <main+0x13c>)
 8004fde:	0011      	movs	r1, r2
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	f001 fca3 	bl	800692c <Set_Status_Bit>
				active_status_byte = 0;
 8004fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8005064 <main+0x158>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 8004fec:	4b1e      	ldr	r3, [pc, #120]	@ (8005068 <main+0x15c>)
 8004fee:	0018      	movs	r0, r3
 8004ff0:	f7fc fbb7 	bl	8001762 <Clear_Data_Buffer>
				midi_counter = 0;
 8004ff4:	4b19      	ldr	r3, [pc, #100]	@ (800505c <main+0x150>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	601a      	str	r2, [r3, #0]
			}
		}
		if(Get_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running) == YES){
 8004ffa:	2380      	movs	r3, #128	@ 0x80
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	4b12      	ldr	r3, [pc, #72]	@ (8005048 <main+0x13c>)
 8005000:	0011      	movs	r1, r2
 8005002:	0018      	movs	r0, r3
 8005004:	f001 fc7e 	bl	8006904 <Get_Status_Bit>
 8005008:	0003      	movs	r3, r0
 800500a:	2b01      	cmp	r3, #1
 800500c:	d184      	bne.n	8004f18 <main+0xc>

			if(preset_save_idle_counter < PRESET_SAVE_IDLE_COUNT){
 800500e:	4b17      	ldr	r3, [pc, #92]	@ (800506c <main+0x160>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a17      	ldr	r2, [pc, #92]	@ (8005070 <main+0x164>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d805      	bhi.n	8005024 <main+0x118>

				preset_save_idle_counter++;
 8005018:	4b14      	ldr	r3, [pc, #80]	@ (800506c <main+0x160>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	4b13      	ldr	r3, [pc, #76]	@ (800506c <main+0x160>)
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	e779      	b.n	8004f18 <main+0xc>
			}
			else{

				Clear_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running);
 8005024:	2380      	movs	r3, #128	@ 0x80
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	4b07      	ldr	r3, [pc, #28]	@ (8005048 <main+0x13c>)
 800502a:	0011      	movs	r1, r2
 800502c:	0018      	movs	r0, r3
 800502e:	f001 fc8f 	bl	8006950 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Has_Timed_Out);
 8005032:	2380      	movs	r3, #128	@ 0x80
 8005034:	019a      	lsls	r2, r3, #6
 8005036:	4b04      	ldr	r3, [pc, #16]	@ (8005048 <main+0x13c>)
 8005038:	0011      	movs	r1, r2
 800503a:	0018      	movs	r0, r3
 800503c:	f001 fc76 	bl	800692c <Set_Status_Bit>
				preset_save_idle_counter = 0;
 8005040:	4b0a      	ldr	r3, [pc, #40]	@ (800506c <main+0x160>)
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 8005046:	e767      	b.n	8004f18 <main+0xc>
 8005048:	20000cfc 	.word	0x20000cfc
 800504c:	20000cf8 	.word	0x20000cf8
 8005050:	20000d60 	.word	0x20000d60
 8005054:	20000d00 	.word	0x20000d00
 8005058:	20000444 	.word	0x20000444
 800505c:	20000d04 	.word	0x20000d04
 8005060:	00030d3f 	.word	0x00030d3f
 8005064:	20000583 	.word	0x20000583
 8005068:	20000588 	.word	0x20000588
 800506c:	20000d08 	.word	0x20000d08
 8005070:	001c3a8f 	.word	0x001c3a8f

08005074 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>:
								.duty_delay_line_start_offset = 1,  //initial value is 1st index - to give us space to fill index 0
								.duty_delay_line_finish_offset = FINAL_INDEX + 1}; //initial value is 512th index, one larger than the index of the final sample

//FUNCTION DEFINITIONS
uint8_t Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel_1, uint32_t PWM_TIM_channel_2)
{
 8005074:	b590      	push	{r4, r7, lr}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
	uint8_t ok_OR = 0;
 8005080:	2417      	movs	r4, #23
 8005082:	193b      	adds	r3, r7, r4
 8005084:	2200      	movs	r2, #0
 8005086:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_Base_Start(TIM);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	0018      	movs	r0, r3
 800508c:	f005 f9e8 	bl	800a460 <HAL_TIM_Base_Start>
 8005090:	0003      	movs	r3, r0
 8005092:	0019      	movs	r1, r3
 8005094:	193b      	adds	r3, r7, r4
 8005096:	193a      	adds	r2, r7, r4
 8005098:	7812      	ldrb	r2, [r2, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	0011      	movs	r1, r2
 80050a4:	0018      	movs	r0, r3
 80050a6:	f005 fd49 	bl	800ab3c <HAL_TIM_PWM_Start>
 80050aa:	0003      	movs	r3, r0
 80050ac:	0019      	movs	r1, r3
 80050ae:	193b      	adds	r3, r7, r4
 80050b0:	193a      	adds	r2, r7, r4
 80050b2:	7812      	ldrb	r2, [r2, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	0011      	movs	r1, r2
 80050be:	0018      	movs	r0, r3
 80050c0:	f005 fd3c 	bl	800ab3c <HAL_TIM_PWM_Start>
 80050c4:	0003      	movs	r3, r0
 80050c6:	0019      	movs	r1, r3
 80050c8:	193b      	adds	r3, r7, r4
 80050ca:	193a      	adds	r2, r7, r4
 80050cc:	7812      	ldrb	r2, [r2, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	701a      	strb	r2, [r3, #0]

	if(ok_OR != HAL_OK){
 80050d2:	193b      	adds	r3, r7, r4
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x6a>

		Error_Handler();
 80050da:	f7fd fc1f 	bl	800291c <Error_Handler>
	}

	return ok_OR;
 80050de:	2317      	movs	r3, #23
 80050e0:	18fb      	adds	r3, r7, r3
 80050e2:	781b      	ldrb	r3, [r3, #0]
}
 80050e4:	0018      	movs	r0, r3
 80050e6:	46bd      	mov	sp, r7
 80050e8:	b007      	add	sp, #28
 80050ea:	bd90      	pop	{r4, r7, pc}

080050ec <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 80050ec:	b590      	push	{r4, r7, lr}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 80050f2:	1dfc      	adds	r4, r7, #7
 80050f4:	4b09      	ldr	r3, [pc, #36]	@ (800511c <Start_Freq_Gen_Timer+0x30>)
 80050f6:	2100      	movs	r1, #0
 80050f8:	0018      	movs	r0, r3
 80050fa:	f001 fb80 	bl	80067fe <Start_OC_TIM>
 80050fe:	0003      	movs	r3, r0
 8005100:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8005102:	1dfb      	adds	r3, r7, #7
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <Start_Freq_Gen_Timer+0x22>

		Error_Handler();
 800510a:	f7fd fc07 	bl	800291c <Error_Handler>
	}

	return ok;
 800510e:	1dfb      	adds	r3, r7, #7
 8005110:	781b      	ldrb	r3, [r3, #0]
}
 8005112:	0018      	movs	r0, r3
 8005114:	46bd      	mov	sp, r7
 8005116:	b003      	add	sp, #12
 8005118:	bd90      	pop	{r4, r7, pc}
 800511a:	46c0      	nop			@ (mov r8, r8)
 800511c:	20000810 	.word	0x20000810

08005120 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:

uint8_t Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(struct Params* params_ptr){
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]

	uint32_t speed_control = 0;
 8005128:	2300      	movs	r3, #0
 800512a:	60fb      	str	r3, [r7, #12]
	uint8_t how_many_128 = 0;
 800512c:	210b      	movs	r1, #11
 800512e:	187b      	adds	r3, r7, r1
 8005130:	2200      	movs	r2, #0
 8005132:	701a      	strb	r2, [r3, #0]

    //speed_control = (speed_adc_10_bit/1024)*'range macro'
    speed_control = params_ptr->speed * NUMBER_OF_FREQUENCY_STEPS;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	891b      	ldrh	r3, [r3, #8]
 8005138:	b29b      	uxth	r3, r3
 800513a:	001a      	movs	r2, r3
 800513c:	0013      	movs	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	189b      	adds	r3, r3, r2
 8005142:	019b      	lsls	r3, r3, #6
 8005144:	189b      	adds	r3, r3, r2
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	189b      	adds	r3, r3, r2
 800514a:	60fb      	str	r3, [r7, #12]
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	0a9b      	lsrs	r3, r3, #10
 8005150:	60fb      	str	r3, [r7, #12]

    how_many_128 = (uint8_t)(speed_control >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	09da      	lsrs	r2, r3, #7
 8005156:	187b      	adds	r3, r7, r1
 8005158:	701a      	strb	r2, [r3, #0]
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	b29a      	uxth	r2, r3
 800515e:	187b      	adds	r3, r7, r1
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	b29b      	uxth	r3, r3
 8005164:	01db      	lsls	r3, r3, #7
 8005166:	b29b      	uxth	r3, r3
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	b29a      	uxth	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	825a      	strh	r2, [r3, #18]
    params_ptr->raw_prescaler = SLOWEST_SPEED_PRESCALER >> how_many_128;
 8005170:	187b      	adds	r3, r7, r1
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2280      	movs	r2, #128	@ 0x80
 8005176:	00d2      	lsls	r2, r2, #3
 8005178:	411a      	asrs	r2, r3
 800517a:	0013      	movs	r3, r2
 800517c:	b29a      	uxth	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	835a      	strh	r2, [r3, #26]

    return 1;
 8005182:	2301      	movs	r3, #1
}
 8005184:	0018      	movs	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	b004      	add	sp, #16
 800518a:	bd80      	pop	{r7, pc}

0800518c <Set_Oscillator_Values>:

uint8_t Set_Oscillator_Values(struct Params* params_ptr){
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]

	////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE MAIN OSCILLATOR//
	////////////////////////////////////////////////////////
	__HAL_TIM_SET_AUTORELOAD(&htim16, params_ptr->final_ARR);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	8b1b      	ldrh	r3, [r3, #24]
 8005198:	b29a      	uxth	r2, r3
 800519a:	4b10      	ldr	r3, [pc, #64]	@ (80051dc <Set_Oscillator_Values+0x50>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	8b1b      	ldrh	r3, [r3, #24]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	001a      	movs	r2, r3
 80051a8:	4b0c      	ldr	r3, [pc, #48]	@ (80051dc <Set_Oscillator_Values+0x50>)
 80051aa:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_PRESCALER(&htim16, params_ptr->final_prescaler_minus_one); //have to take one off the divisor
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8bdb      	ldrh	r3, [r3, #30]
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	4b0a      	ldr	r3, [pc, #40]	@ (80051dc <Set_Oscillator_Values+0x50>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	629a      	str	r2, [r3, #40]	@ 0x28

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, params_ptr->prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	885b      	ldrh	r3, [r3, #2]
 80051bc:	b29a      	uxth	r2, r3
 80051be:	4b08      	ldr	r3, [pc, #32]	@ (80051e0 <Set_Oscillator_Values+0x54>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	639a      	str	r2, [r3, #56]	@ 0x38

	/////////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE SECONDARY OSCILLATOR//
	/////////////////////////////////////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	889b      	ldrh	r3, [r3, #4]
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	4b05      	ldr	r3, [pc, #20]	@ (80051e0 <Set_Oscillator_Values+0x54>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	641a      	str	r2, [r3, #64]	@ 0x40

	return 1;
 80051d0:	2301      	movs	r3, #1
}
 80051d2:	0018      	movs	r0, r3
 80051d4:	46bd      	mov	sp, r7
 80051d6:	b002      	add	sp, #8
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	46c0      	nop			@ (mov r8, r8)
 80051dc:	20000810 	.word	0x20000810
 80051e0:	20000a44 	.word	0x20000a44

080051e4 <Calculate_Next_Main_Oscillator_Values>:

uint8_t Calculate_Next_Main_Oscillator_Values(struct Params* params_ptr, enum Next_Values_Processing_Mode mode){
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	000a      	movs	r2, r1
 80051ee:	1cfb      	adds	r3, r7, #3
 80051f0:	701a      	strb	r2, [r3, #0]

	if(mode == REGULAR_MODE){
 80051f2:	1cfb      	adds	r3, r7, #3
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d144      	bne.n	8005284 <Calculate_Next_Main_Oscillator_Values+0xa0>

		params_ptr->index++;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	89db      	ldrh	r3, [r3, #14]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3301      	adds	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	81da      	strh	r2, [r3, #14]

		if(params_ptr->index == FINAL_INDEX + 1){
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	89db      	ldrh	r3, [r3, #14]
 800520c:	b29a      	uxth	r2, r3
 800520e:	2380      	movs	r3, #128	@ 0x80
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	429a      	cmp	r2, r3
 8005214:	d102      	bne.n	800521c <Calculate_Next_Main_Oscillator_Values+0x38>
			params_ptr->index = 0;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	81da      	strh	r2, [r3, #14]
		}

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	89db      	ldrh	r3, [r3, #14]
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d106      	bne.n	8005234 <Calculate_Next_Main_Oscillator_Values+0x50>
			params_ptr->quadrant = FIRST_QUADRANT;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	741a      	strb	r2, [r3, #16]
 8005232:	e05a      	b.n	80052ea <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == SECOND_QUADRANT_START_INDEX){
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	89db      	ldrh	r3, [r3, #14]
 8005238:	b29b      	uxth	r3, r3
 800523a:	2b80      	cmp	r3, #128	@ 0x80
 800523c:	d106      	bne.n	800524c <Calculate_Next_Main_Oscillator_Values+0x68>
			params_ptr->quadrant = SECOND_QUADRANT;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	741a      	strb	r2, [r3, #16]
 800524a:	e04e      	b.n	80052ea <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == THIRD_QUADRANT_START_INDEX){
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	89db      	ldrh	r3, [r3, #14]
 8005250:	b29a      	uxth	r2, r3
 8005252:	2380      	movs	r3, #128	@ 0x80
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	429a      	cmp	r2, r3
 8005258:	d106      	bne.n	8005268 <Calculate_Next_Main_Oscillator_Values+0x84>
			params_ptr->quadrant = FIRST_QUADRANT;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	741a      	strb	r2, [r3, #16]
 8005266:	e040      	b.n	80052ea <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == FOURTH_QUADRANT_START_INDEX){
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	89db      	ldrh	r3, [r3, #14]
 800526c:	b29a      	uxth	r2, r3
 800526e:	23c0      	movs	r3, #192	@ 0xc0
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	429a      	cmp	r2, r3
 8005274:	d139      	bne.n	80052ea <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = SECOND_QUADRANT;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	741a      	strb	r2, [r3, #16]
 8005282:	e032      	b.n	80052ea <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == IP_CAPTURE_MODE){
 8005284:	1cfb      	adds	r3, r7, #3
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d11f      	bne.n	80052cc <Calculate_Next_Main_Oscillator_Values+0xe8>

		if(params_ptr->waveshape == SINE_MODE || params_ptr->waveshape == TRIANGLE_MODE){
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	799b      	ldrb	r3, [r3, #6]
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b01      	cmp	r3, #1
 8005294:	d004      	beq.n	80052a0 <Calculate_Next_Main_Oscillator_Values+0xbc>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	799b      	ldrb	r3, [r3, #6]
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <Calculate_Next_Main_Oscillator_Values+0xd2>

			params_ptr->index = SINE_OR_TRIANGLE_WAVE_TEMPO_PERCEIVED_APEX_INDEX;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	22a7      	movs	r2, #167	@ 0xa7
 80052a4:	0052      	lsls	r2, r2, #1
 80052a6:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SINE_OR_TRI_SYNCED;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SINE_OR_TRI_SYNCED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	741a      	strb	r2, [r3, #16]
 80052b4:	e019      	b.n	80052ea <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else{

			params_ptr->index = SQUARE_WAVE_TEMPO_APEX_INDEX;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2280      	movs	r2, #128	@ 0x80
 80052ba:	0052      	lsls	r2, r2, #1
 80052bc:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SQUARE_SYNCED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SQUARE_SYNCED;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	741a      	strb	r2, [r3, #16]
 80052ca:	e00e      	b.n	80052ea <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == STARTUP_MODE){
 80052cc:	1cfb      	adds	r3, r7, #3
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d10a      	bne.n	80052ea <Calculate_Next_Main_Oscillator_Values+0x106>

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	89db      	ldrh	r3, [r3, #14]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d105      	bne.n	80052ea <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = FIRST_QUADRANT;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	741a      	strb	r2, [r3, #16]
		}
	}

	//ONCE INDEX IS SET, FIND THE DUTY VALUE
	if(params_ptr->waveshape == TRIANGLE_MODE){
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	799b      	ldrb	r3, [r3, #6]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d109      	bne.n	8005308 <Calculate_Next_Main_Oscillator_Values+0x124>
		params_ptr->duty = tri_wavetable[params_ptr->index];
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	89db      	ldrh	r3, [r3, #14]
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	001a      	movs	r2, r3
 80052fc:	4b31      	ldr	r3, [pc, #196]	@ (80053c4 <Calculate_Next_Main_Oscillator_Values+0x1e0>)
 80052fe:	0052      	lsls	r2, r2, #1
 8005300:	5ad2      	ldrh	r2, [r2, r3]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	801a      	strh	r2, [r3, #0]
 8005306:	e029      	b.n	800535c <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if(params_ptr->waveshape == SINE_MODE){
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	799b      	ldrb	r3, [r3, #6]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b01      	cmp	r3, #1
 8005310:	d109      	bne.n	8005326 <Calculate_Next_Main_Oscillator_Values+0x142>
		params_ptr->duty = sine_wavetable[params_ptr->index];
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	89db      	ldrh	r3, [r3, #14]
 8005316:	b29b      	uxth	r3, r3
 8005318:	001a      	movs	r2, r3
 800531a:	4b2b      	ldr	r3, [pc, #172]	@ (80053c8 <Calculate_Next_Main_Oscillator_Values+0x1e4>)
 800531c:	0052      	lsls	r2, r2, #1
 800531e:	5ad2      	ldrh	r2, [r2, r3]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	801a      	strh	r2, [r3, #0]
 8005324:	e01a      	b.n	800535c <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	799b      	ldrb	r3, [r3, #6]
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d108      	bne.n	8005342 <Calculate_Next_Main_Oscillator_Values+0x15e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	89db      	ldrh	r3, [r3, #14]
 8005334:	b29b      	uxth	r3, r3
 8005336:	2bff      	cmp	r3, #255	@ 0xff
 8005338:	d803      	bhi.n	8005342 <Calculate_Next_Main_Oscillator_Values+0x15e>
		params_ptr->duty = PWM_DUTY_VALUE_MAX;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a23      	ldr	r2, [pc, #140]	@ (80053cc <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 800533e:	801a      	strh	r2, [r3, #0]
 8005340:	e00c      	b.n	800535c <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index >= THIRD_QUADRANT_START_INDEX)){
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	799b      	ldrb	r3, [r3, #6]
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d107      	bne.n	800535c <Calculate_Next_Main_Oscillator_Values+0x178>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	89db      	ldrh	r3, [r3, #14]
 8005350:	b29b      	uxth	r3, r3
 8005352:	2bff      	cmp	r3, #255	@ 0xff
 8005354:	d902      	bls.n	800535c <Calculate_Next_Main_Oscillator_Values+0x178>
		params_ptr->duty = PWM_DUTY_VALUE_MIN;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	801a      	strh	r2, [r3, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(params_ptr->depth == ((1 << DEPTH_ADC_RESOLUTION) - 1)){ //255
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	7a9b      	ldrb	r3, [r3, #10]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b7f      	cmp	r3, #127	@ 0x7f
 8005364:	d108      	bne.n	8005378 <Calculate_Next_Main_Oscillator_Values+0x194>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b29b      	uxth	r3, r3
 800536c:	4a17      	ldr	r2, [pc, #92]	@ (80053cc <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	b29a      	uxth	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	801a      	strh	r2, [r3, #0]
 8005376:	e01b      	b.n	80053b0 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else if(params_ptr->depth != 0){
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	7a9b      	ldrb	r3, [r3, #10]
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d013      	beq.n	80053aa <Calculate_Next_Main_Oscillator_Values+0x1c6>

			//duty = 1023 - duty*(current_depth >> 8);
			uint32_t multiply_product = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	60fb      	str	r3, [r7, #12]
			multiply_product = (params_ptr->duty) * (params_ptr->depth);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	b29b      	uxth	r3, r3
 800538c:	001a      	movs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	7a9b      	ldrb	r3, [r3, #10]
 8005392:	b2db      	uxtb	r3, r3
 8005394:	4353      	muls	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
			params_ptr->duty = PWM_DUTY_VALUE_MAX - (multiply_product >> DEPTH_ADC_RESOLUTION);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	09db      	lsrs	r3, r3, #7
 800539c:	b29b      	uxth	r3, r3
 800539e:	4a0b      	ldr	r2, [pc, #44]	@ (80053cc <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	801a      	strh	r2, [r3, #0]
 80053a8:	e002      	b.n	80053b0 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else{
			params_ptr->duty = PWM_DUTY_VALUE_MAX; //if depth is 0, just output 1023
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a07      	ldr	r2, [pc, #28]	@ (80053cc <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 80053ae:	801a      	strh	r2, [r3, #0]
		}

	#endif

	//SET THE NEXT VALUE FOR THE MAIN OSCILLATOR
	params_ptr->prev_duty = params_ptr->duty;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	805a      	strh	r2, [r3, #2]

	return 1;
 80053ba:	2301      	movs	r3, #1
}
 80053bc:	0018      	movs	r0, r3
 80053be:	46bd      	mov	sp, r7
 80053c0:	b004      	add	sp, #16
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	0800e588 	.word	0x0800e588
 80053c8:	0800e188 	.word	0x0800e188
 80053cc:	000003ff 	.word	0x000003ff

080053d0 <Write_Next_Main_Oscillator_Values_to_Delay_Line>:

uint8_t Write_Next_Main_Oscillator_Values_to_Delay_Line(struct Params* params_ptr, struct Delay_Line* delay_line_ptr){
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]

	//STORE THE VALUES IN THE APPROPRIATE '0TH - 1' INDEX RELATIVE TO THE START POINTER
		if(delay_line_ptr->duty_delay_line_start_offset != 0){
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	4a44      	ldr	r2, [pc, #272]	@ (80054f0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80053de:	5a9b      	ldrh	r3, [r3, r2]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00b      	beq.n	80053fe <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x2e>
			delay_line_ptr->duty_delay_line_storage_array[delay_line_ptr->duty_delay_line_start_offset - 1] = params_ptr->duty;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	4a41      	ldr	r2, [pc, #260]	@ (80054f0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80053ea:	5a9b      	ldrh	r3, [r3, r2]
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	1e5a      	subs	r2, r3, #1
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	b299      	uxth	r1, r3
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	0052      	lsls	r2, r2, #1
 80053fa:	52d1      	strh	r1, [r2, r3]
 80053fc:	e006      	b.n	800540c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x3c>
		}
		else{
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	b299      	uxth	r1, r3
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	2380      	movs	r3, #128	@ 0x80
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	52d1      	strh	r1, [r2, r3]
		}

		//DECREMENT THE START AND FINISH POINTERS
		if(delay_line_ptr->duty_delay_line_start_offset == 0){
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	4a38      	ldr	r2, [pc, #224]	@ (80054f0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8005410:	5a9b      	ldrh	r3, [r3, r2]
 8005412:	b29b      	uxth	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10e      	bne.n	8005436 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x66>
			delay_line_ptr->duty_delay_line_start_offset = FINAL_INDEX + 1;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	4a35      	ldr	r2, [pc, #212]	@ (80054f0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800541c:	2180      	movs	r1, #128	@ 0x80
 800541e:	0089      	lsls	r1, r1, #2
 8005420:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	4a33      	ldr	r2, [pc, #204]	@ (80054f4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8005426:	5a9b      	ldrh	r3, [r3, r2]
 8005428:	b29b      	uxth	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b299      	uxth	r1, r3
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	4a30      	ldr	r2, [pc, #192]	@ (80054f4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8005432:	5299      	strh	r1, [r3, r2]
 8005434:	e026      	b.n	8005484 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else if(delay_line_ptr->duty_delay_line_finish_offset == 0){
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	4a2e      	ldr	r2, [pc, #184]	@ (80054f4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 800543a:	5a9b      	ldrh	r3, [r3, r2]
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10e      	bne.n	8005460 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x90>
			delay_line_ptr->duty_delay_line_finish_offset = FINAL_INDEX + 1;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	4a2b      	ldr	r2, [pc, #172]	@ (80054f4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8005446:	2180      	movs	r1, #128	@ 0x80
 8005448:	0089      	lsls	r1, r1, #2
 800544a:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	4a28      	ldr	r2, [pc, #160]	@ (80054f0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8005450:	5a9b      	ldrh	r3, [r3, r2]
 8005452:	b29b      	uxth	r3, r3
 8005454:	3b01      	subs	r3, #1
 8005456:	b299      	uxth	r1, r3
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	4a25      	ldr	r2, [pc, #148]	@ (80054f0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800545c:	5299      	strh	r1, [r3, r2]
 800545e:	e011      	b.n	8005484 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else{
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	4a23      	ldr	r2, [pc, #140]	@ (80054f0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8005464:	5a9b      	ldrh	r3, [r3, r2]
 8005466:	b29b      	uxth	r3, r3
 8005468:	3b01      	subs	r3, #1
 800546a:	b299      	uxth	r1, r3
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	4a20      	ldr	r2, [pc, #128]	@ (80054f0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8005470:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	4a1f      	ldr	r2, [pc, #124]	@ (80054f4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8005476:	5a9b      	ldrh	r3, [r3, r2]
 8005478:	b29b      	uxth	r3, r3
 800547a:	3b01      	subs	r3, #1
 800547c:	b299      	uxth	r1, r3
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	4a1c      	ldr	r2, [pc, #112]	@ (80054f4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8005482:	5299      	strh	r1, [r3, r2]
		}

		//DETERMINE THE DELAYED WAVE'S VALUES
		if(delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	4a1a      	ldr	r2, [pc, #104]	@ (80054f0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8005488:	5a9b      	ldrh	r3, [r3, r2]
 800548a:	b29b      	uxth	r3, r3
 800548c:	001a      	movs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005492:	b29b      	uxth	r3, r3
 8005494:	18d2      	adds	r2, r2, r3
 8005496:	2380      	movs	r3, #128	@ 0x80
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	429a      	cmp	r2, r3
 800549c:	dd13      	ble.n	80054c6 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xf6>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + (delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	4913      	ldr	r1, [pc, #76]	@ (80054f0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80054a4:	5a5b      	ldrh	r3, [r3, r1]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	0019      	movs	r1, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	18cb      	adds	r3, r1, r3
 80054b2:	4911      	ldr	r1, [pc, #68]	@ (80054f8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x128>)
 80054b4:	468c      	mov	ip, r1
 80054b6:	4463      	add	r3, ip
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	18d3      	adds	r3, r2, r3
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	b29a      	uxth	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	809a      	strh	r2, [r3, #4]
 80054c4:	e00f      	b.n	80054e6 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x116>
		}
		else{
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset);
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	4909      	ldr	r1, [pc, #36]	@ (80054f0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80054cc:	5a5b      	ldrh	r3, [r3, r1]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	0019      	movs	r1, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	18cb      	adds	r3, r1, r3
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	18d3      	adds	r3, r2, r3
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	809a      	strh	r2, [r3, #4]
		}

	return 1;
 80054e6:	2301      	movs	r3, #1
}
 80054e8:	0018      	movs	r0, r3
 80054ea:	46bd      	mov	sp, r7
 80054ec:	b002      	add	sp, #8
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	00000402 	.word	0x00000402
 80054f4:	00000404 	.word	0x00000404
 80054f8:	7ffffe00 	.word	0x7ffffe00

080054fc <Process_ADC_Conversion_Values>:

uint8_t Process_ADC_Conversion_Values(struct Params* params_ptr, volatile uint16_t* ADCResultsDMA_ptr){
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA_ptr[WAVESHAPE_ADC_RESULT_INDEX] >> 5; //set ADC_Result to waveshape index value, truncate to 7-bit
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	b29a      	uxth	r2, r3
 800550c:	2116      	movs	r1, #22
 800550e:	187b      	adds	r3, r7, r1
 8005510:	0952      	lsrs	r2, r2, #5
 8005512:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8005514:	187b      	adds	r3, r7, r1
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	2b2a      	cmp	r3, #42	@ 0x2a
 800551a:	d803      	bhi.n	8005524 <Process_ADC_Conversion_Values+0x28>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	719a      	strb	r2, [r3, #6]
 8005522:	e010      	b.n	8005546 <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8005524:	2316      	movs	r3, #22
 8005526:	18fb      	adds	r3, r7, r3
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	2b55      	cmp	r3, #85	@ 0x55
 800552c:	d803      	bhi.n	8005536 <Process_ADC_Conversion_Values+0x3a>
		params_ptr->waveshape = SINE_MODE; //sine wave
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	719a      	strb	r2, [r3, #6]
 8005534:	e007      	b.n	8005546 <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 8005536:	2316      	movs	r3, #22
 8005538:	18fb      	adds	r3, r7, r3
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	2b7f      	cmp	r3, #127	@ 0x7f
 800553e:	d802      	bhi.n	8005546 <Process_ADC_Conversion_Values+0x4a>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	719a      	strb	r2, [r3, #6]
	}

	//GET SPEED
	uint16_t temp_speed = ADCResultsDMA_ptr[SPEED_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	3302      	adds	r3, #2
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	b29a      	uxth	r2, r3
 800554e:	2114      	movs	r1, #20
 8005550:	187b      	adds	r3, r7, r1
 8005552:	0952      	lsrs	r2, r2, #5
 8005554:	801a      	strh	r2, [r3, #0]
	temp_speed <<= 3; //convert to 10-bit
 8005556:	187b      	adds	r3, r7, r1
 8005558:	187a      	adds	r2, r7, r1
 800555a:	8812      	ldrh	r2, [r2, #0]
 800555c:	00d2      	lsls	r2, r2, #3
 800555e:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = temp_speed;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	187a      	adds	r2, r7, r1
 8005564:	8812      	ldrh	r2, [r2, #0]
 8005566:	811a      	strh	r2, [r3, #8]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON

		uint8_t temp_depth = ADCResultsDMA_ptr[DEPTH_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	3304      	adds	r3, #4
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	b29b      	uxth	r3, r3
 8005570:	095b      	lsrs	r3, r3, #5
 8005572:	b29a      	uxth	r2, r3
 8005574:	2113      	movs	r1, #19
 8005576:	187b      	adds	r3, r7, r1
 8005578:	701a      	strb	r2, [r3, #0]
		params_ptr->depth = temp_depth;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	187a      	adds	r2, r7, r1
 800557e:	7812      	ldrb	r2, [r2, #0]
 8005580:	729a      	strb	r2, [r3, #10]
	#endif

	//GET SYMMETRY
	#if SYMMETRY_ON_OR_OFF == ON

		uint16_t temp_symmetry = ADCResultsDMA_ptr[SYMMETRY_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	3306      	adds	r3, #6
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	b29a      	uxth	r2, r3
 800558a:	2110      	movs	r1, #16
 800558c:	187b      	adds	r3, r7, r1
 800558e:	0952      	lsrs	r2, r2, #5
 8005590:	801a      	strh	r2, [r3, #0]
		temp_symmetry <<= 1; //convert to 8-bit
 8005592:	187a      	adds	r2, r7, r1
 8005594:	187b      	adds	r3, r7, r1
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	18db      	adds	r3, r3, r3
 800559a:	8013      	strh	r3, [r2, #0]
		params_ptr->symmetry = temp_symmetry;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	187a      	adds	r2, r7, r1
 80055a0:	8812      	ldrh	r2, [r2, #0]
 80055a2:	819a      	strh	r2, [r3, #12]

	#endif

	//GET DELAY LINE READ POINTER OFFSET

	uint16_t temp_delay = ADCResultsDMA_ptr[DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	3308      	adds	r3, #8
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	210e      	movs	r1, #14
 80055ae:	187b      	adds	r3, r7, r1
 80055b0:	0952      	lsrs	r2, r2, #5
 80055b2:	801a      	strh	r2, [r3, #0]
	temp_delay <<= 2; //convert to 9-bit
 80055b4:	187b      	adds	r3, r7, r1
 80055b6:	187a      	adds	r2, r7, r1
 80055b8:	8812      	ldrh	r2, [r2, #0]
 80055ba:	0092      	lsls	r2, r2, #2
 80055bc:	801a      	strh	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = temp_delay;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	187a      	adds	r2, r7, r1
 80055c2:	8812      	ldrh	r2, [r2, #0]
 80055c4:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 80055c6:	2301      	movs	r3, #1
}
 80055c8:	0018      	movs	r0, r3
 80055ca:	46bd      	mov	sp, r7
 80055cc:	b006      	add	sp, #24
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <Startup>:
#include "stm32g0xx_ll_lptim.h"
#include "stm32g0xx_hal_flash.h"

#include "CC_and_PC.h" //for some reason compiler shits itself if this is included in startup.h

uint8_t __attribute__((optimize("O0")))Startup(void){
 80055d0:	b590      	push	{r4, r7, lr}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af02      	add	r7, sp, #8

	//Shouldn't be required now we have a default state set below, even in case flash not programmed //Set_Status_Bit(&statuses, Start_Required_Before_Sync_Mode); //set default mode to requiring START MIDI message before beginning a sync

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 80055d6:	2007      	movs	r0, #7
 80055d8:	f002 fd9b 	bl	8008112 <HAL_NVIC_DisableIRQ>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 80055dc:	4b5a      	ldr	r3, [pc, #360]	@ (8005748 <Startup+0x178>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68da      	ldr	r2, [r3, #12]
 80055e2:	4b59      	ldr	r3, [pc, #356]	@ (8005748 <Startup+0x178>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2101      	movs	r1, #1
 80055e8:	430a      	orrs	r2, r1
 80055ea:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM16
 80055ec:	4b57      	ldr	r3, [pc, #348]	@ (800574c <Startup+0x17c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	4b56      	ldr	r3, [pc, #344]	@ (800574c <Startup+0x17c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2101      	movs	r1, #1
 80055f8:	430a      	orrs	r2, r1
 80055fa:	60da      	str	r2, [r3, #12]

	//SET DEFAULT PIN STATES
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 80055fc:	2380      	movs	r3, #128	@ 0x80
 80055fe:	0099      	lsls	r1, r3, #2
 8005600:	23a0      	movs	r3, #160	@ 0xa0
 8005602:	05db      	lsls	r3, r3, #23
 8005604:	2201      	movs	r2, #1
 8005606:	0018      	movs	r0, r3
 8005608:	f003 fbe5 	bl	8008dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_HIGH_GPIO_Port, HACK_POT_HIGH_Pin, 1);
 800560c:	2380      	movs	r3, #128	@ 0x80
 800560e:	0159      	lsls	r1, r3, #5
 8005610:	23a0      	movs	r3, #160	@ 0xa0
 8005612:	05db      	lsls	r3, r3, #23
 8005614:	2201      	movs	r2, #1
 8005616:	0018      	movs	r0, r3
 8005618:	f003 fbdd 	bl	8008dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_LOW_GPIO_Port, HACK_POT_LOW_Pin, 0);
 800561c:	23a0      	movs	r3, #160	@ 0xa0
 800561e:	05db      	lsls	r3, r3, #23
 8005620:	2200      	movs	r2, #0
 8005622:	2180      	movs	r1, #128	@ 0x80
 8005624:	0018      	movs	r0, r3
 8005626:	f003 fbd6 	bl	8008dd6 <HAL_GPIO_WritePin>

	//Point Arrays to Presets
	Initialise_Preset_Arrays();
 800562a:	f7fa ff0f 	bl	800044c <Initialise_Preset_Arrays>

	//Read User Presets From Flash, regardless of whether they have been written to before
	Read_and_Interpret_User_Presets_From_Flash();
 800562e:	f7fb fd3f 	bl	80010b0 <Read_and_Interpret_User_Presets_From_Flash>

	//Read 'User Preset Used' Bytes, 'Start Required Before MIDI CLK' Byte, MIDI Omni On/Off Status Bit, and MIDI Basic Channel
	Read_and_Interpret_Misc_From_Flash(MISC_FLASH_MEMORY_ADDRESS, user_presets_used_array, &statuses, &MIDI_basic_channel, NUM_PRESETS);
 8005632:	4b47      	ldr	r3, [pc, #284]	@ (8005750 <Startup+0x180>)
 8005634:	4a47      	ldr	r2, [pc, #284]	@ (8005754 <Startup+0x184>)
 8005636:	4948      	ldr	r1, [pc, #288]	@ (8005758 <Startup+0x188>)
 8005638:	4c48      	ldr	r4, [pc, #288]	@ (800575c <Startup+0x18c>)
 800563a:	2004      	movs	r0, #4
 800563c:	9000      	str	r0, [sp, #0]
 800563e:	0020      	movs	r0, r4
 8005640:	f7fb fc2a 	bl	8000e98 <Read_and_Interpret_Misc_From_Flash>

	//Set the Converted Preset Array to the Relevant Factory/User Preset depending upon the 'User Preset Used' Byte read from Flash
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array,
 8005644:	4b46      	ldr	r3, [pc, #280]	@ (8005760 <Startup+0x190>)
 8005646:	4a47      	ldr	r2, [pc, #284]	@ (8005764 <Startup+0x194>)
 8005648:	4943      	ldr	r1, [pc, #268]	@ (8005758 <Startup+0x188>)
 800564a:	4847      	ldr	r0, [pc, #284]	@ (8005768 <Startup+0x198>)
 800564c:	2404      	movs	r4, #4
 800564e:	9400      	str	r4, [sp, #0]
 8005650:	f7fb fcd8 	bl	8001004 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
												  	  	  	  factory_presets_array,
															  user_presets_array,
															  NUM_PRESETS);

	//GET ADC VALUES
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 8005654:	4b45      	ldr	r3, [pc, #276]	@ (800576c <Startup+0x19c>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	001a      	movs	r2, r3
 800565a:	4945      	ldr	r1, [pc, #276]	@ (8005770 <Startup+0x1a0>)
 800565c:	4b45      	ldr	r3, [pc, #276]	@ (8005774 <Startup+0x1a4>)
 800565e:	0018      	movs	r0, r3
 8005660:	f001 fe08 	bl	8007274 <HAL_ADC_Start_DMA>

	//WAIT
	while(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){}; //wait while first ADC conversion is ongoing - raw and final values will be computed within this time
 8005664:	46c0      	nop			@ (mov r8, r8)
 8005666:	4b3b      	ldr	r3, [pc, #236]	@ (8005754 <Startup+0x184>)
 8005668:	2110      	movs	r1, #16
 800566a:	0018      	movs	r0, r3
 800566c:	f001 f94a 	bl	8006904 <Get_Status_Bit>
 8005670:	1e03      	subs	r3, r0, #0
 8005672:	d0f8      	beq.n	8005666 <Startup+0x96>

	// re-initialise all values in delay line storage array to middle value of wave (if sine/triangle mode) or bottom of wave if square mode, as they are initialised to 0 on startup
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8005674:	1dbb      	adds	r3, r7, #6
 8005676:	2200      	movs	r2, #0
 8005678:	801a      	strh	r2, [r3, #0]
 800567a:	e02c      	b.n	80056d6 <Startup+0x106>

		if(params.waveshape == SQUARE_MODE){
 800567c:	4b3e      	ldr	r3, [pc, #248]	@ (8005778 <Startup+0x1a8>)
 800567e:	799b      	ldrb	r3, [r3, #6]
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d111      	bne.n	80056aa <Startup+0xda>

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
 8005686:	4b3c      	ldr	r3, [pc, #240]	@ (8005778 <Startup+0x1a8>)
 8005688:	7a9b      	ldrb	r3, [r3, #10]
 800568a:	b2db      	uxtb	r3, r3
 800568c:	001a      	movs	r2, r3
 800568e:	0013      	movs	r3, r2
 8005690:	029b      	lsls	r3, r3, #10
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	11db      	asrs	r3, r3, #7
 8005696:	b29b      	uxth	r3, r3
 8005698:	1dba      	adds	r2, r7, #6
 800569a:	8812      	ldrh	r2, [r2, #0]
 800569c:	4937      	ldr	r1, [pc, #220]	@ (800577c <Startup+0x1ac>)
 800569e:	1acb      	subs	r3, r1, r3
 80056a0:	b299      	uxth	r1, r3
 80056a2:	4b37      	ldr	r3, [pc, #220]	@ (8005780 <Startup+0x1b0>)
 80056a4:	0052      	lsls	r2, r2, #1
 80056a6:	52d1      	strh	r1, [r2, r3]
 80056a8:	e010      	b.n	80056cc <Startup+0xfc>
		}
		else{

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - (((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION) >> 1);
 80056aa:	4b33      	ldr	r3, [pc, #204]	@ (8005778 <Startup+0x1a8>)
 80056ac:	7a9b      	ldrb	r3, [r3, #10]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	001a      	movs	r2, r3
 80056b2:	0013      	movs	r3, r2
 80056b4:	029b      	lsls	r3, r3, #10
 80056b6:	1a9b      	subs	r3, r3, r2
 80056b8:	121b      	asrs	r3, r3, #8
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	1dba      	adds	r2, r7, #6
 80056be:	8812      	ldrh	r2, [r2, #0]
 80056c0:	492e      	ldr	r1, [pc, #184]	@ (800577c <Startup+0x1ac>)
 80056c2:	1acb      	subs	r3, r1, r3
 80056c4:	b299      	uxth	r1, r3
 80056c6:	4b2e      	ldr	r3, [pc, #184]	@ (8005780 <Startup+0x1b0>)
 80056c8:	0052      	lsls	r2, r2, #1
 80056ca:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 80056cc:	1dbb      	adds	r3, r7, #6
 80056ce:	881a      	ldrh	r2, [r3, #0]
 80056d0:	1dbb      	adds	r3, r7, #6
 80056d2:	3201      	adds	r2, #1
 80056d4:	801a      	strh	r2, [r3, #0]
 80056d6:	1dbb      	adds	r3, r7, #6
 80056d8:	881a      	ldrh	r2, [r3, #0]
 80056da:	2380      	movs	r3, #128	@ 0x80
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	429a      	cmp	r2, r3
 80056e0:	d9cc      	bls.n	800567c <Startup+0xac>
		}
	}

	//PREPARE OSCILLATORS
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)STARTUP_MODE);
 80056e2:	4b25      	ldr	r3, [pc, #148]	@ (8005778 <Startup+0x1a8>)
 80056e4:	2102      	movs	r1, #2
 80056e6:	0018      	movs	r0, r3
 80056e8:	f7ff fd7c 	bl	80051e4 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80056ec:	4a24      	ldr	r2, [pc, #144]	@ (8005780 <Startup+0x1b0>)
 80056ee:	4b22      	ldr	r3, [pc, #136]	@ (8005778 <Startup+0x1a8>)
 80056f0:	0011      	movs	r1, r2
 80056f2:	0018      	movs	r0, r3
 80056f4:	f7ff fe6c 	bl	80053d0 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	Set_Oscillator_Values(&params);
 80056f8:	4b1f      	ldr	r3, [pc, #124]	@ (8005778 <Startup+0x1a8>)
 80056fa:	0018      	movs	r0, r3
 80056fc:	f7ff fd46 	bl	800518c <Set_Oscillator_Values>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(&htim1, TIM_CHANNEL_2, TIM_CHANNEL_4);
 8005700:	4b20      	ldr	r3, [pc, #128]	@ (8005784 <Startup+0x1b4>)
 8005702:	220c      	movs	r2, #12
 8005704:	2104      	movs	r1, #4
 8005706:	0018      	movs	r0, r3
 8005708:	f7ff fcb4 	bl	8005074 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>
	Start_Freq_Gen_Timer();
 800570c:	f7ff fcee 	bl	80050ec <Start_Freq_Gen_Timer>

	//START UART RECEIVE
	Start_UART_Receive();
 8005710:	f7fc f974 	bl	80019fc <Start_UART_Receive>

	//START IP CAP
	Start_Input_Capture_Timer();
 8005714:	f7ff fb7a 	bl	8004e0c <Start_Input_Capture_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 8005718:	f001 f8ec 	bl	80068f4 <Global_Interrupt_Enable>

	//ENABLE TAP-TEMPO SWITCH CHECKING
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 800571c:	4b1a      	ldr	r3, [pc, #104]	@ (8005788 <Startup+0x1b8>)
 800571e:	22fa      	movs	r2, #250	@ 0xfa
 8005720:	21fa      	movs	r1, #250	@ 0xfa
 8005722:	0018      	movs	r0, r3
 8005724:	f003 fc4e 	bl	8008fc4 <HAL_LPTIM_SetOnce_Start_IT>

	//TURN LED OFF ON STARTUP
	LED_fsm.current_state = LED_OFF;
 8005728:	4b18      	ldr	r3, [pc, #96]	@ (800578c <Startup+0x1bc>)
 800572a:	2201      	movs	r2, #1
 800572c:	701a      	strb	r2, [r3, #0]

	//ENABLE LED TIMER
	Start_OC_TIM(&htim14, TIM_CHANNEL_1);
 800572e:	4b18      	ldr	r3, [pc, #96]	@ (8005790 <Startup+0x1c0>)
 8005730:	2100      	movs	r1, #0
 8005732:	0018      	movs	r0, r3
 8005734:	f001 f863 	bl	80067fe <Start_OC_TIM>

	//ENABLE EXTI
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8005738:	2007      	movs	r0, #7
 800573a:	f002 fcda 	bl	80080f2 <HAL_NVIC_EnableIRQ>

	return 1;
 800573e:	2301      	movs	r3, #1
}
 8005740:	0018      	movs	r0, r3
 8005742:	46bd      	mov	sp, r7
 8005744:	b003      	add	sp, #12
 8005746:	bd90      	pop	{r4, r7, pc}
 8005748:	200008cc 	.word	0x200008cc
 800574c:	20000810 	.word	0x20000810
 8005750:	20000582 	.word	0x20000582
 8005754:	20000cfc 	.word	0x20000cfc
 8005758:	20000578 	.word	0x20000578
 800575c:	0800f820 	.word	0x0800f820
 8005760:	2000050c 	.word	0x2000050c
 8005764:	200004fc 	.word	0x200004fc
 8005768:	2000051c 	.word	0x2000051c
 800576c:	0800e988 	.word	0x0800e988
 8005770:	20000d0c 	.word	0x20000d0c
 8005774:	200005b4 	.word	0x200005b4
 8005778:	20000d18 	.word	0x20000d18
 800577c:	000003ff 	.word	0x000003ff
 8005780:	20000028 	.word	0x20000028
 8005784:	20000a44 	.word	0x20000a44
 8005788:	20000c84 	.word	0x20000c84
 800578c:	20000448 	.word	0x20000448
 8005790:	20000698 	.word	0x20000698

08005794 <Advance_Pending_States>:
volatile struct IP_CAP_FSM IP_CAP_fsm = {.current_state = IDLE, .prev_state = IP_CAP_NONE};
volatile enum MIDI_CLK_FSM_State MIDI_CLK_fsm = NOT_COMPILING;
volatile struct LED_FSM LED_fsm = {.current_state = LED_OFF, .prev_state = LED_NONE};

//FUNCTION DEFINITIONS
uint8_t Advance_Pending_States(void){
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0

	//UPDATE SPEED FSM
	union Speed_FSM_States current_state = speed_fsm.current_state;
 800579a:	1d3b      	adds	r3, r7, #4
 800579c:	4a12      	ldr	r2, [pc, #72]	@ (80057e8 <Advance_Pending_States+0x54>)
 800579e:	7812      	ldrb	r2, [r2, #0]
 80057a0:	701a      	strb	r2, [r3, #0]

	if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 80057a2:	4b11      	ldr	r3, [pc, #68]	@ (80057e8 <Advance_Pending_States+0x54>)
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b05      	cmp	r3, #5
 80057aa:	d103      	bne.n	80057b4 <Advance_Pending_States+0x20>

		speed_fsm.current_state.speed_exclusive_state = TAP_MODE;
 80057ac:	4b0e      	ldr	r3, [pc, #56]	@ (80057e8 <Advance_Pending_States+0x54>)
 80057ae:	2204      	movs	r2, #4
 80057b0:	701a      	strb	r2, [r3, #0]
 80057b2:	e007      	b.n	80057c4 <Advance_Pending_States+0x30>
	}
	else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){
 80057b4:	4b0c      	ldr	r3, [pc, #48]	@ (80057e8 <Advance_Pending_States+0x54>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b07      	cmp	r3, #7
 80057bc:	d102      	bne.n	80057c4 <Advance_Pending_States+0x30>

		speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 80057be:	4b0a      	ldr	r3, [pc, #40]	@ (80057e8 <Advance_Pending_States+0x54>)
 80057c0:	2206      	movs	r2, #6
 80057c2:	701a      	strb	r2, [r3, #0]
	}

	//DON'T ADD MIDI CLK CODE


	if(!((current_state.speed_exclusive_state == CLK_IN_MODE) || (current_state.speed_exclusive_state == TAP_MODE))){
 80057c4:	1d3b      	adds	r3, r7, #4
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b06      	cmp	r3, #6
 80057ca:	d007      	beq.n	80057dc <Advance_Pending_States+0x48>
 80057cc:	1d3b      	adds	r3, r7, #4
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d003      	beq.n	80057dc <Advance_Pending_States+0x48>

		speed_fsm.prev_state = current_state;
 80057d4:	4b04      	ldr	r3, [pc, #16]	@ (80057e8 <Advance_Pending_States+0x54>)
 80057d6:	1d3a      	adds	r2, r7, #4
 80057d8:	7812      	ldrb	r2, [r2, #0]
 80057da:	705a      	strb	r2, [r3, #1]
	}

	return 1;
 80057dc:	2301      	movs	r3, #1
}
 80057de:	0018      	movs	r0, r3
 80057e0:	46bd      	mov	sp, r7
 80057e2:	b002      	add	sp, #8
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	46c0      	nop			@ (mov r8, r8)
 80057e8:	20000430 	.word	0x20000430

080057ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005830 <HAL_MspInit+0x44>)
 80057f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005830 <HAL_MspInit+0x44>)
 80057f8:	2101      	movs	r1, #1
 80057fa:	430a      	orrs	r2, r1
 80057fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80057fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005830 <HAL_MspInit+0x44>)
 8005800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005802:	2201      	movs	r2, #1
 8005804:	4013      	ands	r3, r2
 8005806:	607b      	str	r3, [r7, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800580a:	4b09      	ldr	r3, [pc, #36]	@ (8005830 <HAL_MspInit+0x44>)
 800580c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800580e:	4b08      	ldr	r3, [pc, #32]	@ (8005830 <HAL_MspInit+0x44>)
 8005810:	2180      	movs	r1, #128	@ 0x80
 8005812:	0549      	lsls	r1, r1, #21
 8005814:	430a      	orrs	r2, r1
 8005816:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005818:	4b05      	ldr	r3, [pc, #20]	@ (8005830 <HAL_MspInit+0x44>)
 800581a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800581c:	2380      	movs	r3, #128	@ 0x80
 800581e:	055b      	lsls	r3, r3, #21
 8005820:	4013      	ands	r3, r2
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005826:	46c0      	nop			@ (mov r8, r8)
 8005828:	46bd      	mov	sp, r7
 800582a:	b002      	add	sp, #8
 800582c:	bd80      	pop	{r7, pc}
 800582e:	46c0      	nop			@ (mov r8, r8)
 8005830:	40021000 	.word	0x40021000

08005834 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005834:	b590      	push	{r4, r7, lr}
 8005836:	b08b      	sub	sp, #44	@ 0x2c
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800583c:	2414      	movs	r4, #20
 800583e:	193b      	adds	r3, r7, r4
 8005840:	0018      	movs	r0, r3
 8005842:	2314      	movs	r3, #20
 8005844:	001a      	movs	r2, r3
 8005846:	2100      	movs	r1, #0
 8005848:	f008 fc3a 	bl	800e0c0 <memset>
  if(hadc->Instance==ADC1)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a2e      	ldr	r2, [pc, #184]	@ (800590c <HAL_ADC_MspInit+0xd8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d155      	bne.n	8005902 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8005856:	4b2e      	ldr	r3, [pc, #184]	@ (8005910 <HAL_ADC_MspInit+0xdc>)
 8005858:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800585a:	4b2d      	ldr	r3, [pc, #180]	@ (8005910 <HAL_ADC_MspInit+0xdc>)
 800585c:	2180      	movs	r1, #128	@ 0x80
 800585e:	0349      	lsls	r1, r1, #13
 8005860:	430a      	orrs	r2, r1
 8005862:	641a      	str	r2, [r3, #64]	@ 0x40
 8005864:	4b2a      	ldr	r3, [pc, #168]	@ (8005910 <HAL_ADC_MspInit+0xdc>)
 8005866:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005868:	2380      	movs	r3, #128	@ 0x80
 800586a:	035b      	lsls	r3, r3, #13
 800586c:	4013      	ands	r3, r2
 800586e:	613b      	str	r3, [r7, #16]
 8005870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005872:	4b27      	ldr	r3, [pc, #156]	@ (8005910 <HAL_ADC_MspInit+0xdc>)
 8005874:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005876:	4b26      	ldr	r3, [pc, #152]	@ (8005910 <HAL_ADC_MspInit+0xdc>)
 8005878:	2101      	movs	r1, #1
 800587a:	430a      	orrs	r2, r1
 800587c:	635a      	str	r2, [r3, #52]	@ 0x34
 800587e:	4b24      	ldr	r3, [pc, #144]	@ (8005910 <HAL_ADC_MspInit+0xdc>)
 8005880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005882:	2201      	movs	r2, #1
 8005884:	4013      	ands	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800588a:	193b      	adds	r3, r7, r4
 800588c:	2273      	movs	r2, #115	@ 0x73
 800588e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005890:	193b      	adds	r3, r7, r4
 8005892:	2203      	movs	r2, #3
 8005894:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005896:	193b      	adds	r3, r7, r4
 8005898:	2200      	movs	r2, #0
 800589a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800589c:	193a      	adds	r2, r7, r4
 800589e:	23a0      	movs	r3, #160	@ 0xa0
 80058a0:	05db      	lsls	r3, r3, #23
 80058a2:	0011      	movs	r1, r2
 80058a4:	0018      	movs	r0, r3
 80058a6:	f003 f915 	bl	8008ad4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80058aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005914 <HAL_ADC_MspInit+0xe0>)
 80058ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005918 <HAL_ADC_MspInit+0xe4>)
 80058ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80058b0:	4b18      	ldr	r3, [pc, #96]	@ (8005914 <HAL_ADC_MspInit+0xe0>)
 80058b2:	2205      	movs	r2, #5
 80058b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80058b6:	4b17      	ldr	r3, [pc, #92]	@ (8005914 <HAL_ADC_MspInit+0xe0>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80058bc:	4b15      	ldr	r3, [pc, #84]	@ (8005914 <HAL_ADC_MspInit+0xe0>)
 80058be:	2200      	movs	r2, #0
 80058c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80058c2:	4b14      	ldr	r3, [pc, #80]	@ (8005914 <HAL_ADC_MspInit+0xe0>)
 80058c4:	2280      	movs	r2, #128	@ 0x80
 80058c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80058c8:	4b12      	ldr	r3, [pc, #72]	@ (8005914 <HAL_ADC_MspInit+0xe0>)
 80058ca:	2280      	movs	r2, #128	@ 0x80
 80058cc:	0052      	lsls	r2, r2, #1
 80058ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80058d0:	4b10      	ldr	r3, [pc, #64]	@ (8005914 <HAL_ADC_MspInit+0xe0>)
 80058d2:	2280      	movs	r2, #128	@ 0x80
 80058d4:	00d2      	lsls	r2, r2, #3
 80058d6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80058d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005914 <HAL_ADC_MspInit+0xe0>)
 80058da:	2200      	movs	r2, #0
 80058dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80058de:	4b0d      	ldr	r3, [pc, #52]	@ (8005914 <HAL_ADC_MspInit+0xe0>)
 80058e0:	2280      	movs	r2, #128	@ 0x80
 80058e2:	0192      	lsls	r2, r2, #6
 80058e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80058e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005914 <HAL_ADC_MspInit+0xe0>)
 80058e8:	0018      	movs	r0, r3
 80058ea:	f002 fc2f 	bl	800814c <HAL_DMA_Init>
 80058ee:	1e03      	subs	r3, r0, #0
 80058f0:	d001      	beq.n	80058f6 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80058f2:	f7fd f813 	bl	800291c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a06      	ldr	r2, [pc, #24]	@ (8005914 <HAL_ADC_MspInit+0xe0>)
 80058fa:	651a      	str	r2, [r3, #80]	@ 0x50
 80058fc:	4b05      	ldr	r3, [pc, #20]	@ (8005914 <HAL_ADC_MspInit+0xe0>)
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8005902:	46c0      	nop			@ (mov r8, r8)
 8005904:	46bd      	mov	sp, r7
 8005906:	b00b      	add	sp, #44	@ 0x2c
 8005908:	bd90      	pop	{r4, r7, pc}
 800590a:	46c0      	nop			@ (mov r8, r8)
 800590c:	40012400 	.word	0x40012400
 8005910:	40021000 	.word	0x40021000
 8005914:	2000063c 	.word	0x2000063c
 8005918:	40020008 	.word	0x40020008

0800591c <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 800591c:	b590      	push	{r4, r7, lr}
 800591e:	b097      	sub	sp, #92	@ 0x5c
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005924:	2344      	movs	r3, #68	@ 0x44
 8005926:	18fb      	adds	r3, r7, r3
 8005928:	0018      	movs	r0, r3
 800592a:	2314      	movs	r3, #20
 800592c:	001a      	movs	r2, r3
 800592e:	2100      	movs	r1, #0
 8005930:	f008 fbc6 	bl	800e0c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005934:	241c      	movs	r4, #28
 8005936:	193b      	adds	r3, r7, r4
 8005938:	0018      	movs	r0, r3
 800593a:	2328      	movs	r3, #40	@ 0x28
 800593c:	001a      	movs	r2, r3
 800593e:	2100      	movs	r1, #0
 8005940:	f008 fbbe 	bl	800e0c0 <memset>
  if(hlptim->Instance==LPTIM1)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a46      	ldr	r2, [pc, #280]	@ (8005a64 <HAL_LPTIM_MspInit+0x148>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d13e      	bne.n	80059cc <HAL_LPTIM_MspInit+0xb0>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800594e:	193b      	adds	r3, r7, r4
 8005950:	2280      	movs	r2, #128	@ 0x80
 8005952:	0092      	lsls	r2, r2, #2
 8005954:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 8005956:	193b      	adds	r3, r7, r4
 8005958:	2200      	movs	r2, #0
 800595a:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800595c:	193b      	adds	r3, r7, r4
 800595e:	0018      	movs	r0, r3
 8005960:	f004 fb9e 	bl	800a0a0 <HAL_RCCEx_PeriphCLKConfig>
 8005964:	1e03      	subs	r3, r0, #0
 8005966:	d001      	beq.n	800596c <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 8005968:	f7fc ffd8 	bl	800291c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800596c:	4b3e      	ldr	r3, [pc, #248]	@ (8005a68 <HAL_LPTIM_MspInit+0x14c>)
 800596e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005970:	4b3d      	ldr	r3, [pc, #244]	@ (8005a68 <HAL_LPTIM_MspInit+0x14c>)
 8005972:	2180      	movs	r1, #128	@ 0x80
 8005974:	0609      	lsls	r1, r1, #24
 8005976:	430a      	orrs	r2, r1
 8005978:	63da      	str	r2, [r3, #60]	@ 0x3c
 800597a:	4b3b      	ldr	r3, [pc, #236]	@ (8005a68 <HAL_LPTIM_MspInit+0x14c>)
 800597c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800597e:	0fdb      	lsrs	r3, r3, #31
 8005980:	07db      	lsls	r3, r3, #31
 8005982:	61bb      	str	r3, [r7, #24]
 8005984:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005986:	4b38      	ldr	r3, [pc, #224]	@ (8005a68 <HAL_LPTIM_MspInit+0x14c>)
 8005988:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800598a:	4b37      	ldr	r3, [pc, #220]	@ (8005a68 <HAL_LPTIM_MspInit+0x14c>)
 800598c:	2102      	movs	r1, #2
 800598e:	430a      	orrs	r2, r1
 8005990:	635a      	str	r2, [r3, #52]	@ 0x34
 8005992:	4b35      	ldr	r3, [pc, #212]	@ (8005a68 <HAL_LPTIM_MspInit+0x14c>)
 8005994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005996:	2202      	movs	r2, #2
 8005998:	4013      	ands	r3, r2
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	697b      	ldr	r3, [r7, #20]
    /**LPTIM1 GPIO Configuration
    PB0     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800599e:	2144      	movs	r1, #68	@ 0x44
 80059a0:	187b      	adds	r3, r7, r1
 80059a2:	2201      	movs	r2, #1
 80059a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059a6:	187b      	adds	r3, r7, r1
 80059a8:	2202      	movs	r2, #2
 80059aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ac:	187b      	adds	r3, r7, r1
 80059ae:	2200      	movs	r2, #0
 80059b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059b2:	187b      	adds	r3, r7, r1
 80059b4:	2200      	movs	r2, #0
 80059b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM1;
 80059b8:	187b      	adds	r3, r7, r1
 80059ba:	2205      	movs	r2, #5
 80059bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059be:	187b      	adds	r3, r7, r1
 80059c0:	4a2a      	ldr	r2, [pc, #168]	@ (8005a6c <HAL_LPTIM_MspInit+0x150>)
 80059c2:	0019      	movs	r1, r3
 80059c4:	0010      	movs	r0, r2
 80059c6:	f003 f885 	bl	8008ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 80059ca:	e046      	b.n	8005a5a <HAL_LPTIM_MspInit+0x13e>
  else if(hlptim->Instance==LPTIM2)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a27      	ldr	r2, [pc, #156]	@ (8005a70 <HAL_LPTIM_MspInit+0x154>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d141      	bne.n	8005a5a <HAL_LPTIM_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 80059d6:	211c      	movs	r1, #28
 80059d8:	187b      	adds	r3, r7, r1
 80059da:	2280      	movs	r2, #128	@ 0x80
 80059dc:	00d2      	lsls	r2, r2, #3
 80059de:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK1;
 80059e0:	187b      	adds	r3, r7, r1
 80059e2:	2200      	movs	r2, #0
 80059e4:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80059e6:	187b      	adds	r3, r7, r1
 80059e8:	0018      	movs	r0, r3
 80059ea:	f004 fb59 	bl	800a0a0 <HAL_RCCEx_PeriphCLKConfig>
 80059ee:	1e03      	subs	r3, r0, #0
 80059f0:	d001      	beq.n	80059f6 <HAL_LPTIM_MspInit+0xda>
      Error_Handler();
 80059f2:	f7fc ff93 	bl	800291c <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80059f6:	4b1c      	ldr	r3, [pc, #112]	@ (8005a68 <HAL_LPTIM_MspInit+0x14c>)
 80059f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005a68 <HAL_LPTIM_MspInit+0x14c>)
 80059fc:	2180      	movs	r1, #128	@ 0x80
 80059fe:	05c9      	lsls	r1, r1, #23
 8005a00:	430a      	orrs	r2, r1
 8005a02:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005a04:	4b18      	ldr	r3, [pc, #96]	@ (8005a68 <HAL_LPTIM_MspInit+0x14c>)
 8005a06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a08:	2380      	movs	r3, #128	@ 0x80
 8005a0a:	05db      	lsls	r3, r3, #23
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a12:	4b15      	ldr	r3, [pc, #84]	@ (8005a68 <HAL_LPTIM_MspInit+0x14c>)
 8005a14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a16:	4b14      	ldr	r3, [pc, #80]	@ (8005a68 <HAL_LPTIM_MspInit+0x14c>)
 8005a18:	2101      	movs	r1, #1
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a1e:	4b12      	ldr	r3, [pc, #72]	@ (8005a68 <HAL_LPTIM_MspInit+0x14c>)
 8005a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a22:	2201      	movs	r2, #1
 8005a24:	4013      	ands	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005a2a:	2144      	movs	r1, #68	@ 0x44
 8005a2c:	187b      	adds	r3, r7, r1
 8005a2e:	2280      	movs	r2, #128	@ 0x80
 8005a30:	0052      	lsls	r2, r2, #1
 8005a32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a34:	187b      	adds	r3, r7, r1
 8005a36:	2202      	movs	r2, #2
 8005a38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a3a:	187b      	adds	r3, r7, r1
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a40:	187b      	adds	r3, r7, r1
 8005a42:	2200      	movs	r2, #0
 8005a44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM2;
 8005a46:	187b      	adds	r3, r7, r1
 8005a48:	2205      	movs	r2, #5
 8005a4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a4c:	187a      	adds	r2, r7, r1
 8005a4e:	23a0      	movs	r3, #160	@ 0xa0
 8005a50:	05db      	lsls	r3, r3, #23
 8005a52:	0011      	movs	r1, r2
 8005a54:	0018      	movs	r0, r3
 8005a56:	f003 f83d 	bl	8008ad4 <HAL_GPIO_Init>
}
 8005a5a:	46c0      	nop			@ (mov r8, r8)
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	b017      	add	sp, #92	@ 0x5c
 8005a60:	bd90      	pop	{r4, r7, pc}
 8005a62:	46c0      	nop			@ (mov r8, r8)
 8005a64:	40007c00 	.word	0x40007c00
 8005a68:	40021000 	.word	0x40021000
 8005a6c:	50000400 	.word	0x50000400
 8005a70:	40009400 	.word	0x40009400

08005a74 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005a74:	b590      	push	{r4, r7, lr}
 8005a76:	b099      	sub	sp, #100	@ 0x64
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a7c:	234c      	movs	r3, #76	@ 0x4c
 8005a7e:	18fb      	adds	r3, r7, r3
 8005a80:	0018      	movs	r0, r3
 8005a82:	2314      	movs	r3, #20
 8005a84:	001a      	movs	r2, r3
 8005a86:	2100      	movs	r1, #0
 8005a88:	f008 fb1a 	bl	800e0c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005a8c:	2424      	movs	r4, #36	@ 0x24
 8005a8e:	193b      	adds	r3, r7, r4
 8005a90:	0018      	movs	r0, r3
 8005a92:	2328      	movs	r3, #40	@ 0x28
 8005a94:	001a      	movs	r2, r3
 8005a96:	2100      	movs	r1, #0
 8005a98:	f008 fb12 	bl	800e0c0 <memset>
  if(htim_base->Instance==TIM1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a68      	ldr	r2, [pc, #416]	@ (8005c44 <HAL_TIM_Base_MspInit+0x1d0>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d11d      	bne.n	8005ae2 <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8005aa6:	193b      	adds	r3, r7, r4
 8005aa8:	2280      	movs	r2, #128	@ 0x80
 8005aaa:	0392      	lsls	r2, r2, #14
 8005aac:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8005aae:	193b      	adds	r3, r7, r4
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005ab4:	193b      	adds	r3, r7, r4
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	f004 faf2 	bl	800a0a0 <HAL_RCCEx_PeriphCLKConfig>
 8005abc:	1e03      	subs	r3, r0, #0
 8005abe:	d001      	beq.n	8005ac4 <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 8005ac0:	f7fc ff2c 	bl	800291c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005ac4:	4b60      	ldr	r3, [pc, #384]	@ (8005c48 <HAL_TIM_Base_MspInit+0x1d4>)
 8005ac6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ac8:	4b5f      	ldr	r3, [pc, #380]	@ (8005c48 <HAL_TIM_Base_MspInit+0x1d4>)
 8005aca:	2180      	movs	r1, #128	@ 0x80
 8005acc:	0109      	lsls	r1, r1, #4
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	641a      	str	r2, [r3, #64]	@ 0x40
 8005ad2:	4b5d      	ldr	r3, [pc, #372]	@ (8005c48 <HAL_TIM_Base_MspInit+0x1d4>)
 8005ad4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ad6:	2380      	movs	r3, #128	@ 0x80
 8005ad8:	011b      	lsls	r3, r3, #4
 8005ada:	4013      	ands	r3, r2
 8005adc:	623b      	str	r3, [r7, #32]
 8005ade:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }

}
 8005ae0:	e0ab      	b.n	8005c3a <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM2)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	2380      	movs	r3, #128	@ 0x80
 8005ae8:	05db      	lsls	r3, r3, #23
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d138      	bne.n	8005b60 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005aee:	4b56      	ldr	r3, [pc, #344]	@ (8005c48 <HAL_TIM_Base_MspInit+0x1d4>)
 8005af0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005af2:	4b55      	ldr	r3, [pc, #340]	@ (8005c48 <HAL_TIM_Base_MspInit+0x1d4>)
 8005af4:	2101      	movs	r1, #1
 8005af6:	430a      	orrs	r2, r1
 8005af8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005afa:	4b53      	ldr	r3, [pc, #332]	@ (8005c48 <HAL_TIM_Base_MspInit+0x1d4>)
 8005afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005afe:	2201      	movs	r2, #1
 8005b00:	4013      	ands	r3, r2
 8005b02:	61fb      	str	r3, [r7, #28]
 8005b04:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b06:	4b50      	ldr	r3, [pc, #320]	@ (8005c48 <HAL_TIM_Base_MspInit+0x1d4>)
 8005b08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b0a:	4b4f      	ldr	r3, [pc, #316]	@ (8005c48 <HAL_TIM_Base_MspInit+0x1d4>)
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	635a      	str	r2, [r3, #52]	@ 0x34
 8005b12:	4b4d      	ldr	r3, [pc, #308]	@ (8005c48 <HAL_TIM_Base_MspInit+0x1d4>)
 8005b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b16:	2201      	movs	r2, #1
 8005b18:	4013      	ands	r3, r2
 8005b1a:	61bb      	str	r3, [r7, #24]
 8005b1c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 8005b1e:	214c      	movs	r1, #76	@ 0x4c
 8005b20:	187b      	adds	r3, r7, r1
 8005b22:	2280      	movs	r2, #128	@ 0x80
 8005b24:	0212      	lsls	r2, r2, #8
 8005b26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b28:	187b      	adds	r3, r7, r1
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP; //even though we do not 'technically' need a pullup as a push-pull O/P will be driving the I/P cap pin, I think it is better to ensure the I/P cap input properly idles
 8005b2e:	187b      	adds	r3, r7, r1
 8005b30:	2201      	movs	r2, #1
 8005b32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b34:	187b      	adds	r3, r7, r1
 8005b36:	2200      	movs	r2, #0
 8005b38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8005b3a:	187b      	adds	r3, r7, r1
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 8005b40:	187a      	adds	r2, r7, r1
 8005b42:	23a0      	movs	r3, #160	@ 0xa0
 8005b44:	05db      	lsls	r3, r3, #23
 8005b46:	0011      	movs	r1, r2
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f002 ffc3 	bl	8008ad4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 2);
 8005b4e:	2202      	movs	r2, #2
 8005b50:	2102      	movs	r1, #2
 8005b52:	200f      	movs	r0, #15
 8005b54:	f002 fab8 	bl	80080c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005b58:	200f      	movs	r0, #15
 8005b5a:	f002 faca 	bl	80080f2 <HAL_NVIC_EnableIRQ>
}
 8005b5e:	e06c      	b.n	8005c3a <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM3)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a39      	ldr	r2, [pc, #228]	@ (8005c4c <HAL_TIM_Base_MspInit+0x1d8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d114      	bne.n	8005b94 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005b6a:	4b37      	ldr	r3, [pc, #220]	@ (8005c48 <HAL_TIM_Base_MspInit+0x1d4>)
 8005b6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b6e:	4b36      	ldr	r3, [pc, #216]	@ (8005c48 <HAL_TIM_Base_MspInit+0x1d4>)
 8005b70:	2102      	movs	r1, #2
 8005b72:	430a      	orrs	r2, r1
 8005b74:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005b76:	4b34      	ldr	r3, [pc, #208]	@ (8005c48 <HAL_TIM_Base_MspInit+0x1d4>)
 8005b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005b82:	2200      	movs	r2, #0
 8005b84:	2100      	movs	r1, #0
 8005b86:	2010      	movs	r0, #16
 8005b88:	f002 fa9e 	bl	80080c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005b8c:	2010      	movs	r0, #16
 8005b8e:	f002 fab0 	bl	80080f2 <HAL_NVIC_EnableIRQ>
}
 8005b92:	e052      	b.n	8005c3a <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM16)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a2d      	ldr	r2, [pc, #180]	@ (8005c50 <HAL_TIM_Base_MspInit+0x1dc>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d116      	bne.n	8005bcc <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8005c48 <HAL_TIM_Base_MspInit+0x1d4>)
 8005ba0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ba2:	4b29      	ldr	r3, [pc, #164]	@ (8005c48 <HAL_TIM_Base_MspInit+0x1d4>)
 8005ba4:	2180      	movs	r1, #128	@ 0x80
 8005ba6:	0289      	lsls	r1, r1, #10
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	641a      	str	r2, [r3, #64]	@ 0x40
 8005bac:	4b26      	ldr	r3, [pc, #152]	@ (8005c48 <HAL_TIM_Base_MspInit+0x1d4>)
 8005bae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bb0:	2380      	movs	r3, #128	@ 0x80
 8005bb2:	029b      	lsls	r3, r3, #10
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	2015      	movs	r0, #21
 8005bc0:	f002 fa82 	bl	80080c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005bc4:	2015      	movs	r0, #21
 8005bc6:	f002 fa94 	bl	80080f2 <HAL_NVIC_EnableIRQ>
}
 8005bca:	e036      	b.n	8005c3a <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM17)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a20      	ldr	r2, [pc, #128]	@ (8005c54 <HAL_TIM_Base_MspInit+0x1e0>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d116      	bne.n	8005c04 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8005c48 <HAL_TIM_Base_MspInit+0x1d4>)
 8005bd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bda:	4b1b      	ldr	r3, [pc, #108]	@ (8005c48 <HAL_TIM_Base_MspInit+0x1d4>)
 8005bdc:	2180      	movs	r1, #128	@ 0x80
 8005bde:	02c9      	lsls	r1, r1, #11
 8005be0:	430a      	orrs	r2, r1
 8005be2:	641a      	str	r2, [r3, #64]	@ 0x40
 8005be4:	4b18      	ldr	r3, [pc, #96]	@ (8005c48 <HAL_TIM_Base_MspInit+0x1d4>)
 8005be6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005be8:	2380      	movs	r3, #128	@ 0x80
 8005bea:	02db      	lsls	r3, r3, #11
 8005bec:	4013      	ands	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 8005bf2:	2203      	movs	r2, #3
 8005bf4:	2103      	movs	r1, #3
 8005bf6:	2016      	movs	r0, #22
 8005bf8:	f002 fa66 	bl	80080c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8005bfc:	2016      	movs	r0, #22
 8005bfe:	f002 fa78 	bl	80080f2 <HAL_NVIC_EnableIRQ>
}
 8005c02:	e01a      	b.n	8005c3a <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM14)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a13      	ldr	r2, [pc, #76]	@ (8005c58 <HAL_TIM_Base_MspInit+0x1e4>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d115      	bne.n	8005c3a <HAL_TIM_Base_MspInit+0x1c6>
      __HAL_RCC_TIM14_CLK_ENABLE();
 8005c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c48 <HAL_TIM_Base_MspInit+0x1d4>)
 8005c10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c12:	4b0d      	ldr	r3, [pc, #52]	@ (8005c48 <HAL_TIM_Base_MspInit+0x1d4>)
 8005c14:	2180      	movs	r1, #128	@ 0x80
 8005c16:	0209      	lsls	r1, r1, #8
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c48 <HAL_TIM_Base_MspInit+0x1d4>)
 8005c1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c20:	2380      	movs	r3, #128	@ 0x80
 8005c22:	021b      	lsls	r3, r3, #8
 8005c24:	4013      	ands	r3, r2
 8005c26:	60bb      	str	r3, [r7, #8]
 8005c28:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8005c2a:	2203      	movs	r2, #3
 8005c2c:	2103      	movs	r1, #3
 8005c2e:	2013      	movs	r0, #19
 8005c30:	f002 fa4a 	bl	80080c8 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8005c34:	2013      	movs	r0, #19
 8005c36:	f002 fa5c 	bl	80080f2 <HAL_NVIC_EnableIRQ>
}
 8005c3a:	46c0      	nop			@ (mov r8, r8)
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	b019      	add	sp, #100	@ 0x64
 8005c40:	bd90      	pop	{r4, r7, pc}
 8005c42:	46c0      	nop			@ (mov r8, r8)
 8005c44:	40012c00 	.word	0x40012c00
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	40000400 	.word	0x40000400
 8005c50:	40014400 	.word	0x40014400
 8005c54:	40014800 	.word	0x40014800
 8005c58:	40002000 	.word	0x40002000

08005c5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005c5c:	b590      	push	{r4, r7, lr}
 8005c5e:	b08b      	sub	sp, #44	@ 0x2c
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c64:	2414      	movs	r4, #20
 8005c66:	193b      	adds	r3, r7, r4
 8005c68:	0018      	movs	r0, r3
 8005c6a:	2314      	movs	r3, #20
 8005c6c:	001a      	movs	r2, r3
 8005c6e:	2100      	movs	r1, #0
 8005c70:	f008 fa26 	bl	800e0c0 <memset>
  if(htim->Instance==TIM1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a25      	ldr	r2, [pc, #148]	@ (8005d10 <HAL_TIM_MspPostInit+0xb4>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d144      	bne.n	8005d08 <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c7e:	4b25      	ldr	r3, [pc, #148]	@ (8005d14 <HAL_TIM_MspPostInit+0xb8>)
 8005c80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c82:	4b24      	ldr	r3, [pc, #144]	@ (8005d14 <HAL_TIM_MspPostInit+0xb8>)
 8005c84:	2101      	movs	r1, #1
 8005c86:	430a      	orrs	r2, r1
 8005c88:	635a      	str	r2, [r3, #52]	@ 0x34
 8005c8a:	4b22      	ldr	r3, [pc, #136]	@ (8005d14 <HAL_TIM_MspPostInit+0xb8>)
 8005c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c8e:	2201      	movs	r2, #1
 8005c90:	4013      	ands	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c96:	4b1f      	ldr	r3, [pc, #124]	@ (8005d14 <HAL_TIM_MspPostInit+0xb8>)
 8005c98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8005d14 <HAL_TIM_MspPostInit+0xb8>)
 8005c9c:	2102      	movs	r1, #2
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	635a      	str	r2, [r3, #52]	@ 0x34
 8005ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8005d14 <HAL_TIM_MspPostInit+0xb8>)
 8005ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	4013      	ands	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11 [PA9]     ------> TIM1_CH4
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
 8005cae:	193b      	adds	r3, r7, r4
 8005cb0:	2280      	movs	r2, #128	@ 0x80
 8005cb2:	0112      	lsls	r2, r2, #4
 8005cb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cb6:	193b      	adds	r3, r7, r4
 8005cb8:	2202      	movs	r2, #2
 8005cba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cbc:	193b      	adds	r3, r7, r4
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cc2:	193b      	adds	r3, r7, r4
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005cc8:	193b      	adds	r3, r7, r4
 8005cca:	2202      	movs	r2, #2
 8005ccc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8005cce:	193a      	adds	r2, r7, r4
 8005cd0:	23a0      	movs	r3, #160	@ 0xa0
 8005cd2:	05db      	lsls	r3, r3, #23
 8005cd4:	0011      	movs	r1, r2
 8005cd6:	0018      	movs	r0, r3
 8005cd8:	f002 fefc 	bl	8008ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAIN_OSCILLATOR_Pin;
 8005cdc:	0021      	movs	r1, r4
 8005cde:	187b      	adds	r3, r7, r1
 8005ce0:	2208      	movs	r2, #8
 8005ce2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ce4:	187b      	adds	r3, r7, r1
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cea:	187b      	adds	r3, r7, r1
 8005cec:	2200      	movs	r2, #0
 8005cee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cf0:	187b      	adds	r3, r7, r1
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005cf6:	187b      	adds	r3, r7, r1
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8005cfc:	187b      	adds	r3, r7, r1
 8005cfe:	4a06      	ldr	r2, [pc, #24]	@ (8005d18 <HAL_TIM_MspPostInit+0xbc>)
 8005d00:	0019      	movs	r1, r3
 8005d02:	0010      	movs	r0, r2
 8005d04:	f002 fee6 	bl	8008ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005d08:	46c0      	nop			@ (mov r8, r8)
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	b00b      	add	sp, #44	@ 0x2c
 8005d0e:	bd90      	pop	{r4, r7, pc}
 8005d10:	40012c00 	.word	0x40012c00
 8005d14:	40021000 	.word	0x40021000
 8005d18:	50000400 	.word	0x50000400

08005d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005d1c:	b590      	push	{r4, r7, lr}
 8005d1e:	b08b      	sub	sp, #44	@ 0x2c
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d24:	2414      	movs	r4, #20
 8005d26:	193b      	adds	r3, r7, r4
 8005d28:	0018      	movs	r0, r3
 8005d2a:	2314      	movs	r3, #20
 8005d2c:	001a      	movs	r2, r3
 8005d2e:	2100      	movs	r1, #0
 8005d30:	f008 f9c6 	bl	800e0c0 <memset>
  if(huart->Instance==USART2)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a4a      	ldr	r2, [pc, #296]	@ (8005e64 <HAL_UART_MspInit+0x148>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d000      	beq.n	8005d40 <HAL_UART_MspInit+0x24>
 8005d3e:	e08d      	b.n	8005e5c <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005d40:	4b49      	ldr	r3, [pc, #292]	@ (8005e68 <HAL_UART_MspInit+0x14c>)
 8005d42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d44:	4b48      	ldr	r3, [pc, #288]	@ (8005e68 <HAL_UART_MspInit+0x14c>)
 8005d46:	2180      	movs	r1, #128	@ 0x80
 8005d48:	0289      	lsls	r1, r1, #10
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005d4e:	4b46      	ldr	r3, [pc, #280]	@ (8005e68 <HAL_UART_MspInit+0x14c>)
 8005d50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d52:	2380      	movs	r3, #128	@ 0x80
 8005d54:	029b      	lsls	r3, r3, #10
 8005d56:	4013      	ands	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]
 8005d5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d5c:	4b42      	ldr	r3, [pc, #264]	@ (8005e68 <HAL_UART_MspInit+0x14c>)
 8005d5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d60:	4b41      	ldr	r3, [pc, #260]	@ (8005e68 <HAL_UART_MspInit+0x14c>)
 8005d62:	2101      	movs	r1, #1
 8005d64:	430a      	orrs	r2, r1
 8005d66:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d68:	4b3f      	ldr	r3, [pc, #252]	@ (8005e68 <HAL_UART_MspInit+0x14c>)
 8005d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	4013      	ands	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8005d74:	0021      	movs	r1, r4
 8005d76:	187b      	adds	r3, r7, r1
 8005d78:	220c      	movs	r2, #12
 8005d7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d7c:	187b      	adds	r3, r7, r1
 8005d7e:	2202      	movs	r2, #2
 8005d80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d82:	187b      	adds	r3, r7, r1
 8005d84:	2201      	movs	r2, #1
 8005d86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d88:	187b      	adds	r3, r7, r1
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005d8e:	187b      	adds	r3, r7, r1
 8005d90:	2201      	movs	r2, #1
 8005d92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d94:	187a      	adds	r2, r7, r1
 8005d96:	23a0      	movs	r3, #160	@ 0xa0
 8005d98:	05db      	lsls	r3, r3, #23
 8005d9a:	0011      	movs	r1, r2
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	f002 fe99 	bl	8008ad4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8005da2:	4b32      	ldr	r3, [pc, #200]	@ (8005e6c <HAL_UART_MspInit+0x150>)
 8005da4:	4a32      	ldr	r2, [pc, #200]	@ (8005e70 <HAL_UART_MspInit+0x154>)
 8005da6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005da8:	4b30      	ldr	r3, [pc, #192]	@ (8005e6c <HAL_UART_MspInit+0x150>)
 8005daa:	2234      	movs	r2, #52	@ 0x34
 8005dac:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005dae:	4b2f      	ldr	r3, [pc, #188]	@ (8005e6c <HAL_UART_MspInit+0x150>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005db4:	4b2d      	ldr	r3, [pc, #180]	@ (8005e6c <HAL_UART_MspInit+0x150>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005dba:	4b2c      	ldr	r3, [pc, #176]	@ (8005e6c <HAL_UART_MspInit+0x150>)
 8005dbc:	2280      	movs	r2, #128	@ 0x80
 8005dbe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8005e6c <HAL_UART_MspInit+0x150>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005dc6:	4b29      	ldr	r3, [pc, #164]	@ (8005e6c <HAL_UART_MspInit+0x150>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005dcc:	4b27      	ldr	r3, [pc, #156]	@ (8005e6c <HAL_UART_MspInit+0x150>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005dd2:	4b26      	ldr	r3, [pc, #152]	@ (8005e6c <HAL_UART_MspInit+0x150>)
 8005dd4:	2280      	movs	r2, #128	@ 0x80
 8005dd6:	0152      	lsls	r2, r2, #5
 8005dd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005dda:	4b24      	ldr	r3, [pc, #144]	@ (8005e6c <HAL_UART_MspInit+0x150>)
 8005ddc:	0018      	movs	r0, r3
 8005dde:	f002 f9b5 	bl	800814c <HAL_DMA_Init>
 8005de2:	1e03      	subs	r3, r0, #0
 8005de4:	d001      	beq.n	8005dea <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8005de6:	f7fc fd99 	bl	800291c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2180      	movs	r1, #128	@ 0x80
 8005dee:	4a1f      	ldr	r2, [pc, #124]	@ (8005e6c <HAL_UART_MspInit+0x150>)
 8005df0:	505a      	str	r2, [r3, r1]
 8005df2:	4b1e      	ldr	r3, [pc, #120]	@ (8005e6c <HAL_UART_MspInit+0x150>)
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8005df8:	4b1e      	ldr	r3, [pc, #120]	@ (8005e74 <HAL_UART_MspInit+0x158>)
 8005dfa:	4a1f      	ldr	r2, [pc, #124]	@ (8005e78 <HAL_UART_MspInit+0x15c>)
 8005dfc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8005e74 <HAL_UART_MspInit+0x158>)
 8005e00:	2235      	movs	r2, #53	@ 0x35
 8005e02:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005e04:	4b1b      	ldr	r3, [pc, #108]	@ (8005e74 <HAL_UART_MspInit+0x158>)
 8005e06:	2210      	movs	r2, #16
 8005e08:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8005e74 <HAL_UART_MspInit+0x158>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005e10:	4b18      	ldr	r3, [pc, #96]	@ (8005e74 <HAL_UART_MspInit+0x158>)
 8005e12:	2280      	movs	r2, #128	@ 0x80
 8005e14:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e16:	4b17      	ldr	r3, [pc, #92]	@ (8005e74 <HAL_UART_MspInit+0x158>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e1c:	4b15      	ldr	r3, [pc, #84]	@ (8005e74 <HAL_UART_MspInit+0x158>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005e22:	4b14      	ldr	r3, [pc, #80]	@ (8005e74 <HAL_UART_MspInit+0x158>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005e28:	4b12      	ldr	r3, [pc, #72]	@ (8005e74 <HAL_UART_MspInit+0x158>)
 8005e2a:	2280      	movs	r2, #128	@ 0x80
 8005e2c:	0152      	lsls	r2, r2, #5
 8005e2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005e30:	4b10      	ldr	r3, [pc, #64]	@ (8005e74 <HAL_UART_MspInit+0x158>)
 8005e32:	0018      	movs	r0, r3
 8005e34:	f002 f98a 	bl	800814c <HAL_DMA_Init>
 8005e38:	1e03      	subs	r3, r0, #0
 8005e3a:	d001      	beq.n	8005e40 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8005e3c:	f7fc fd6e 	bl	800291c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a0c      	ldr	r2, [pc, #48]	@ (8005e74 <HAL_UART_MspInit+0x158>)
 8005e44:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005e46:	4b0b      	ldr	r3, [pc, #44]	@ (8005e74 <HAL_UART_MspInit+0x158>)
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	2101      	movs	r1, #1
 8005e50:	201c      	movs	r0, #28
 8005e52:	f002 f939 	bl	80080c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005e56:	201c      	movs	r0, #28
 8005e58:	f002 f94b 	bl	80080f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8005e5c:	46c0      	nop			@ (mov r8, r8)
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	b00b      	add	sp, #44	@ 0x2c
 8005e62:	bd90      	pop	{r4, r7, pc}
 8005e64:	40004400 	.word	0x40004400
 8005e68:	40021000 	.word	0x40021000
 8005e6c:	20000bcc 	.word	0x20000bcc
 8005e70:	4002001c 	.word	0x4002001c
 8005e74:	20000c28 	.word	0x20000c28
 8005e78:	40020030 	.word	0x40020030

08005e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005e80:	46c0      	nop			@ (mov r8, r8)
 8005e82:	e7fd      	b.n	8005e80 <NMI_Handler+0x4>

08005e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e88:	46c0      	nop			@ (mov r8, r8)
 8005e8a:	e7fd      	b.n	8005e88 <HardFault_Handler+0x4>

08005e8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005e90:	46c0      	nop			@ (mov r8, r8)
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e9a:	46c0      	nop			@ (mov r8, r8)
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ea4:	f000 fdfc 	bl	8006aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ea8:	46c0      	nop			@ (mov r8, r8)
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(CLK_IN_Pin);
 8005eb2:	2080      	movs	r0, #128	@ 0x80
 8005eb4:	f002 ffac 	bl	8008e10 <HAL_GPIO_EXTI_IRQHandler>
	//HAL_GPIO_EXTI_IRQHandler(SW_IN_Pin);

  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005eb8:	46c0      	nop			@ (mov r8, r8)
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005ec4:	4b03      	ldr	r3, [pc, #12]	@ (8005ed4 <DMA1_Channel1_IRQHandler+0x14>)
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	f002 fb1c 	bl	8008504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005ecc:	46c0      	nop			@ (mov r8, r8)
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	46c0      	nop			@ (mov r8, r8)
 8005ed4:	2000063c 	.word	0x2000063c

08005ed8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005edc:	4b05      	ldr	r3, [pc, #20]	@ (8005ef4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8005ede:	0018      	movs	r0, r3
 8005ee0:	f002 fb10 	bl	8008504 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005ee4:	4b04      	ldr	r3, [pc, #16]	@ (8005ef8 <DMA1_Channel2_3_IRQHandler+0x20>)
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	f002 fb0c 	bl	8008504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005eec:	46c0      	nop			@ (mov r8, r8)
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	46c0      	nop			@ (mov r8, r8)
 8005ef4:	20000bcc 	.word	0x20000bcc
 8005ef8:	20000c28 	.word	0x20000c28

08005efc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005f00:	4b03      	ldr	r3, [pc, #12]	@ (8005f10 <TIM2_IRQHandler+0x14>)
 8005f02:	0018      	movs	r0, r3
 8005f04:	f005 f896 	bl	800b034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005f08:	46c0      	nop			@ (mov r8, r8)
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	46c0      	nop			@ (mov r8, r8)
 8005f10:	200008cc 	.word	0x200008cc

08005f14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005f18:	4b03      	ldr	r3, [pc, #12]	@ (8005f28 <TIM3_IRQHandler+0x14>)
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	f005 f88a 	bl	800b034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005f20:	46c0      	nop			@ (mov r8, r8)
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	46c0      	nop			@ (mov r8, r8)
 8005f28:	20000988 	.word	0x20000988

08005f2c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005f30:	4b03      	ldr	r3, [pc, #12]	@ (8005f40 <TIM16_IRQHandler+0x14>)
 8005f32:	0018      	movs	r0, r3
 8005f34:	f005 f87e 	bl	800b034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8005f38:	46c0      	nop			@ (mov r8, r8)
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	46c0      	nop			@ (mov r8, r8)
 8005f40:	20000810 	.word	0x20000810

08005f44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005f48:	4b03      	ldr	r3, [pc, #12]	@ (8005f58 <USART2_IRQHandler+0x14>)
 8005f4a:	0018      	movs	r0, r3
 8005f4c:	f006 fdf4 	bl	800cb38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005f50:	46c0      	nop			@ (mov r8, r8)
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	46c0      	nop			@ (mov r8, r8)
 8005f58:	20000b00 	.word	0x20000b00

08005f5c <LPTIM1_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void LPTIM1_IRQHandler(void)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
  HAL_LPTIM_IRQHandler(&hlptim1);
 8005f60:	4b03      	ldr	r3, [pc, #12]	@ (8005f70 <LPTIM1_IRQHandler+0x14>)
 8005f62:	0018      	movs	r0, r3
 8005f64:	f003 f8c2 	bl	80090ec <HAL_LPTIM_IRQHandler>
}
 8005f68:	46c0      	nop			@ (mov r8, r8)
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	46c0      	nop			@ (mov r8, r8)
 8005f70:	20000c84 	.word	0x20000c84

08005f74 <TIM17_IRQHandler>:


void TIM17_IRQHandler(void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005f78:	4b03      	ldr	r3, [pc, #12]	@ (8005f88 <TIM17_IRQHandler+0x14>)
 8005f7a:	0018      	movs	r0, r3
 8005f7c:	f005 f85a 	bl	800b034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8005f80:	46c0      	nop			@ (mov r8, r8)
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	46c0      	nop			@ (mov r8, r8)
 8005f88:	20000754 	.word	0x20000754

08005f8c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005f90:	4b03      	ldr	r3, [pc, #12]	@ (8005fa0 <TIM14_IRQHandler+0x14>)
 8005f92:	0018      	movs	r0, r3
 8005f94:	f005 f84e 	bl	800b034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8005f98:	46c0      	nop			@ (mov r8, r8)
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	46c0      	nop			@ (mov r8, r8)
 8005fa0:	20000698 	.word	0x20000698

08005fa4 <Adjust_TIM16_Prescaler>:
#include "symmetry_adjustment.h"


uint8_t Adjust_TIM16_Prescaler(struct Params* params_ptr){
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]

    if(params_ptr->prescaler_adjust == MULTIPLY_BY_TWO){
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	5c9b      	ldrb	r3, [r3, r2]
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d107      	bne.n	8005fc8 <Adjust_TIM16_Prescaler+0x24>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler << 1;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	8b5b      	ldrh	r3, [r3, #26]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	18db      	adds	r3, r3, r3
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	839a      	strh	r2, [r3, #28]
 8005fc6:	e00a      	b.n	8005fde <Adjust_TIM16_Prescaler+0x3a>
    }
    else if(params_ptr->prescaler_adjust == DO_NOTHING){
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	5c9b      	ldrb	r3, [r3, r2]
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d104      	bne.n	8005fde <Adjust_TIM16_Prescaler+0x3a>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	8b5b      	ldrh	r3, [r3, #26]
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	839a      	strh	r2, [r3, #28]
    }
    return 1;
 8005fde:	2301      	movs	r3, #1
}
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	b002      	add	sp, #8
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>:

uint8_t Process_TIM16_Final_Start_Value_and_Final_Prescaler(struct Params* params_ptr){
 8005fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]

    #if SYMMETRY_ON_OR_OFF == ON

	enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005ff0:	2317      	movs	r3, #23
 8005ff2:	18fb      	adds	r3, r7, r3
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 8005ff8:	2316      	movs	r3, #22
 8005ffa:	18fb      	adds	r3, r7, r3
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	701a      	strb	r2, [r3, #0]

			uint8_t pot_rotation_corrected = 0;
 8006000:	2315      	movs	r3, #21
 8006002:	18fb      	adds	r3, r7, r3
 8006004:	2200      	movs	r2, #0
 8006006:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Status symmetry_status = CW;
 8006008:	2114      	movs	r1, #20
 800600a:	187b      	adds	r3, r7, r1
 800600c:	2200      	movs	r2, #0
 800600e:	701a      	strb	r2, [r3, #0]

			//DETERMINE IF CW OR CCW SYMMETRY POT ROTATION
			if(params_ptr->symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	899b      	ldrh	r3, [r3, #12]
 8006014:	b29b      	uxth	r3, r3
 8006016:	2b7f      	cmp	r3, #127	@ 0x7f
 8006018:	d803      	bhi.n	8006022 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3a>
				symmetry_status = CW;
 800601a:	187b      	adds	r3, r7, r1
 800601c:	2200      	movs	r2, #0
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	e003      	b.n	800602a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x42>
			}
			else{ //adc is 128-255
				symmetry_status = CCW;
 8006022:	2314      	movs	r3, #20
 8006024:	18fb      	adds	r3, r7, r3
 8006026:	2201      	movs	r2, #1
 8006028:	701a      	strb	r2, [r3, #0]
			}

			//DETERMINE WHETHER TO SHORTEN OR LENGTHEN BASED ON CURRENT INDEX AND SYMMETRY POT POSITION
			if((params_ptr->waveshape == SINE_MODE) || (params_ptr->waveshape == TRIANGLE_MODE)){
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	799b      	ldrb	r3, [r3, #6]
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b01      	cmp	r3, #1
 8006032:	d004      	beq.n	800603e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x56>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	799b      	ldrb	r3, [r3, #6]
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d146      	bne.n	80060cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe4>

				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	7c1b      	ldrb	r3, [r3, #16]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d104      	bne.n	8006052 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6a>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	7c5b      	ldrb	r3, [r3, #17]
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d009      	beq.n	8006066 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7e>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	7c1b      	ldrb	r3, [r3, #16]
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b01      	cmp	r3, #1
 800605a:	d113      	bne.n	8006084 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	7c5b      	ldrb	r3, [r3, #17]
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b01      	cmp	r3, #1
 8006064:	d10e      	bne.n	8006084 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>

					if(symmetry_status == CW){
 8006066:	2314      	movs	r3, #20
 8006068:	18fb      	adds	r3, r7, r3
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d104      	bne.n	800607a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x92>

						symmetry_type_for_halfcycle = LENGTHEN;
 8006070:	2316      	movs	r3, #22
 8006072:	18fb      	adds	r3, r7, r3
 8006074:	2201      	movs	r2, #1
 8006076:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 8006078:	e027      	b.n	80060ca <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 800607a:	2316      	movs	r3, #22
 800607c:	18fb      	adds	r3, r7, r3
 800607e:	2200      	movs	r2, #0
 8006080:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 8006082:	e022      	b.n	80060ca <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
				}
				else if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT)){
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	7c1b      	ldrb	r3, [r3, #16]
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d104      	bne.n	8006098 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xb0>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	7c5b      	ldrb	r3, [r3, #17]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b01      	cmp	r3, #1
 8006096:	d009      	beq.n	80060ac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xc4>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	7c1b      	ldrb	r3, [r3, #16]
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d13c      	bne.n	800611c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	7c5b      	ldrb	r3, [r3, #17]
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d137      	bne.n	800611c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>

					if(symmetry_status == CW){
 80060ac:	2314      	movs	r3, #20
 80060ae:	18fb      	adds	r3, r7, r3
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d104      	bne.n	80060c0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd8>

						symmetry_type_for_halfcycle = SHORTEN;
 80060b6:	2316      	movs	r3, #22
 80060b8:	18fb      	adds	r3, r7, r3
 80060ba:	2200      	movs	r2, #0
 80060bc:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 80060be:	e02d      	b.n	800611c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 80060c0:	2316      	movs	r3, #22
 80060c2:	18fb      	adds	r3, r7, r3
 80060c4:	2201      	movs	r2, #1
 80060c6:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 80060c8:	e028      	b.n	800611c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 80060ca:	e027      	b.n	800611c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
				}
			}
			else if(params_ptr->waveshape == SQUARE_MODE){
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	799b      	ldrb	r3, [r3, #6]
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d123      	bne.n	800611e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>

				if(params_ptr->halfcycle == FIRST_HALFCYCLE){
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	7c1b      	ldrb	r3, [r3, #16]
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10e      	bne.n	80060fe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x116>

					if(symmetry_status == CW){
 80060e0:	2314      	movs	r3, #20
 80060e2:	18fb      	adds	r3, r7, r3
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d104      	bne.n	80060f4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x10c>

						symmetry_type_for_halfcycle = LENGTHEN;
 80060ea:	2316      	movs	r3, #22
 80060ec:	18fb      	adds	r3, r7, r3
 80060ee:	2201      	movs	r2, #1
 80060f0:	701a      	strb	r2, [r3, #0]
 80060f2:	e014      	b.n	800611e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 80060f4:	2316      	movs	r3, #22
 80060f6:	18fb      	adds	r3, r7, r3
 80060f8:	2200      	movs	r2, #0
 80060fa:	701a      	strb	r2, [r3, #0]
 80060fc:	e00f      	b.n	800611e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
				}
				else{

					if(symmetry_status == CW){
 80060fe:	2314      	movs	r3, #20
 8006100:	18fb      	adds	r3, r7, r3
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d104      	bne.n	8006112 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x12a>

						symmetry_type_for_halfcycle = SHORTEN;
 8006108:	2316      	movs	r3, #22
 800610a:	18fb      	adds	r3, r7, r3
 800610c:	2200      	movs	r2, #0
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	e005      	b.n	800611e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 8006112:	2316      	movs	r3, #22
 8006114:	18fb      	adds	r3, r7, r3
 8006116:	2201      	movs	r2, #1
 8006118:	701a      	strb	r2, [r3, #0]
 800611a:	e000      	b.n	800611e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 800611c:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			if(symmetry_status == CW){
 800611e:	2314      	movs	r3, #20
 8006120:	18fb      	adds	r3, r7, r3
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d109      	bne.n	800613c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x154>

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - params_ptr->symmetry;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	899b      	ldrh	r3, [r3, #12]
 800612c:	b29b      	uxth	r3, r3
 800612e:	b2da      	uxtb	r2, r3
 8006130:	2315      	movs	r3, #21
 8006132:	18fb      	adds	r3, r7, r3
 8006134:	217f      	movs	r1, #127	@ 0x7f
 8006136:	1a8a      	subs	r2, r1, r2
 8006138:	701a      	strb	r2, [r3, #0]
 800613a:	e007      	b.n	800614c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x164>
			}
			else{ //CCW

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	899b      	ldrh	r3, [r3, #12]
 8006140:	b29b      	uxth	r3, r3
 8006142:	b2da      	uxtb	r2, r3
 8006144:	2315      	movs	r3, #21
 8006146:	18fb      	adds	r3, r7, r3
 8006148:	3a80      	subs	r2, #128	@ 0x80
 800614a:	701a      	strb	r2, [r3, #0]
			}

			//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - params_ptr->raw_start_value;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	8a5b      	ldrh	r3, [r3, #18]
 8006150:	b29a      	uxth	r2, r3
 8006152:	200e      	movs	r0, #14
 8006154:	183b      	adds	r3, r7, r0
 8006156:	2180      	movs	r1, #128	@ 0x80
 8006158:	0049      	lsls	r1, r1, #1
 800615a:	1a8a      	subs	r2, r1, r2
 800615c:	801a      	strh	r2, [r3, #0]

			//uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = (two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected);
			//COMMENT LINE BELOW IN AND LINE ABOVE OUT TO EXPERIMENT WITH MORE EXTREME SYMMETRY ADJUSTMENT
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = ((two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected) * 12) >> 3; //x(12/8) - 12/8 is the absolute maximum we can get away with
 800615e:	0001      	movs	r1, r0
 8006160:	187b      	adds	r3, r7, r1
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	2215      	movs	r2, #21
 8006166:	18ba      	adds	r2, r7, r2
 8006168:	7812      	ldrb	r2, [r2, #0]
 800616a:	435a      	muls	r2, r3
 800616c:	0013      	movs	r3, r2
 800616e:	005b      	lsls	r3, r3, #1
 8006170:	189b      	adds	r3, r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	10da      	asrs	r2, r3, #3
 8006176:	240c      	movs	r4, #12
 8006178:	193b      	adds	r3, r7, r4
 800617a:	801a      	strh	r2, [r3, #0]

			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 800617c:	250a      	movs	r5, #10
 800617e:	197b      	adds	r3, r7, r5
 8006180:	193a      	adds	r2, r7, r4
 8006182:	8812      	ldrh	r2, [r2, #0]
 8006184:	0a12      	lsrs	r2, r2, #8
 8006186:	801a      	strh	r2, [r3, #0]


			//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8006188:	2312      	movs	r3, #18
 800618a:	18fb      	adds	r3, r7, r3
 800618c:	0008      	movs	r0, r1
 800618e:	1879      	adds	r1, r7, r1
 8006190:	197a      	adds	r2, r7, r5
 8006192:	8809      	ldrh	r1, [r1, #0]
 8006194:	8812      	ldrh	r2, [r2, #0]
 8006196:	1a8a      	subs	r2, r1, r2
 8006198:	801a      	strh	r2, [r3, #0]

			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 800619a:	2610      	movs	r6, #16
 800619c:	19bb      	adds	r3, r7, r6
 800619e:	1839      	adds	r1, r7, r0
 80061a0:	197a      	adds	r2, r7, r5
 80061a2:	8809      	ldrh	r1, [r1, #0]
 80061a4:	8812      	ldrh	r2, [r2, #0]
 80061a6:	188a      	adds	r2, r1, r2
 80061a8:	801a      	strh	r2, [r3, #0]


			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 80061aa:	19bb      	adds	r3, r7, r6
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	2bff      	cmp	r3, #255	@ 0xff
 80061b0:	d90f      	bls.n	80061d2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 80061b2:	19bb      	adds	r3, r7, r6
 80061b4:	881a      	ldrh	r2, [r3, #0]
 80061b6:	2380      	movs	r3, #128	@ 0x80
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d000      	beq.n	80061c0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1d8>
 80061be:	e0b0      	b.n	8006322 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>
 80061c0:	193b      	adds	r3, r7, r4
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	2108      	movs	r1, #8
 80061c6:	0018      	movs	r0, r3
 80061c8:	f000 fb80 	bl	80068cc <unsigned_bitwise_modulo>
 80061cc:	1e03      	subs	r3, r0, #0
 80061ce:	d000      	beq.n	80061d2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 80061d0:	e0a7      	b.n	8006322 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80061d2:	230c      	movs	r3, #12
 80061d4:	18fb      	adds	r3, r7, r3
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	2108      	movs	r1, #8
 80061da:	0018      	movs	r0, r3
 80061dc:	f000 fb76 	bl	80068cc <unsigned_bitwise_modulo>
 80061e0:	0003      	movs	r3, r0
 80061e2:	2b80      	cmp	r3, #128	@ 0x80
 80061e4:	d117      	bne.n	8006216 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x22e>
					//remainder is 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in 0.5

					//manipulated_period_shorten should oscillate over the halfperiod between manipulated_period_shorten and manipulated_period_shorten - 1; //DONE
					//manipulated_period_lengthen should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1; //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 80061e6:	2316      	movs	r3, #22
 80061e8:	18fb      	adds	r3, r7, r3
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d104      	bne.n	80061fa <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x212>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_DOWNWARDS;
 80061f0:	2317      	movs	r3, #23
 80061f2:	18fb      	adds	r3, r7, r3
 80061f4:	2202      	movs	r2, #2
 80061f6:	701a      	strb	r2, [r3, #0]
 80061f8:	e008      	b.n	800620c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80061fa:	2316      	movs	r3, #22
 80061fc:	18fb      	adds	r3, r7, r3
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d103      	bne.n	800620c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8006204:	2317      	movs	r3, #23
 8006206:	18fb      	adds	r3, r7, r3
 8006208:	2201      	movs	r2, #1
 800620a:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2220      	movs	r2, #32
 8006210:	2100      	movs	r1, #0
 8006212:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8006214:	e21f      	b.n	8006656 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8006216:	230c      	movs	r3, #12
 8006218:	18fb      	adds	r3, r7, r3
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	2108      	movs	r1, #8
 800621e:	0018      	movs	r0, r3
 8006220:	f000 fb54 	bl	80068cc <unsigned_bitwise_modulo>
 8006224:	1e03      	subs	r3, r0, #0
 8006226:	d121      	bne.n	800626c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x284>

					//remainder is zero, which means both shortened and lengthened manipulated periods have no no remainder

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 8006228:	2212      	movs	r2, #18
 800622a:	18bb      	adds	r3, r7, r2
 800622c:	18ba      	adds	r2, r7, r2
 800622e:	8812      	ldrh	r2, [r2, #0]
 8006230:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8006232:	2210      	movs	r2, #16
 8006234:	18bb      	adds	r3, r7, r2
 8006236:	18ba      	adds	r2, r7, r2
 8006238:	8812      	ldrh	r2, [r2, #0]
 800623a:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 800623c:	2316      	movs	r3, #22
 800623e:	18fb      	adds	r3, r7, r3
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d104      	bne.n	8006250 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x268>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006246:	2317      	movs	r3, #23
 8006248:	18fb      	adds	r3, r7, r3
 800624a:	2200      	movs	r2, #0
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	e008      	b.n	8006262 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8006250:	2316      	movs	r3, #22
 8006252:	18fb      	adds	r3, r7, r3
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d103      	bne.n	8006262 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800625a:	2317      	movs	r3, #23
 800625c:	18fb      	adds	r3, r7, r3
 800625e:	2200      	movs	r2, #0
 8006260:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2220      	movs	r2, #32
 8006266:	2100      	movs	r1, #0
 8006268:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 800626a:	e1f4      	b.n	8006656 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 800626c:	230c      	movs	r3, #12
 800626e:	18fb      	adds	r3, r7, r3
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	2108      	movs	r1, #8
 8006274:	0018      	movs	r0, r3
 8006276:	f000 fb29 	bl	80068cc <unsigned_bitwise_modulo>
 800627a:	0003      	movs	r3, r0
 800627c:	2b7f      	cmp	r3, #127	@ 0x7f
 800627e:	d821      	bhi.n	80062c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2dc>

					//remainder is less than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in less than 0.5

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 8006280:	2212      	movs	r2, #18
 8006282:	18bb      	adds	r3, r7, r2
 8006284:	18ba      	adds	r2, r7, r2
 8006286:	8812      	ldrh	r2, [r2, #0]
 8006288:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 800628a:	2210      	movs	r2, #16
 800628c:	18bb      	adds	r3, r7, r2
 800628e:	18ba      	adds	r2, r7, r2
 8006290:	8812      	ldrh	r2, [r2, #0]
 8006292:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8006294:	2316      	movs	r3, #22
 8006296:	18fb      	adds	r3, r7, r3
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d104      	bne.n	80062a8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2c0>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800629e:	2317      	movs	r3, #23
 80062a0:	18fb      	adds	r3, r7, r3
 80062a2:	2200      	movs	r2, #0
 80062a4:	701a      	strb	r2, [r3, #0]
 80062a6:	e008      	b.n	80062ba <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80062a8:	2316      	movs	r3, #22
 80062aa:	18fb      	adds	r3, r7, r3
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d103      	bne.n	80062ba <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80062b2:	2317      	movs	r3, #23
 80062b4:	18fb      	adds	r3, r7, r3
 80062b6:	2200      	movs	r2, #0
 80062b8:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2220      	movs	r2, #32
 80062be:	2100      	movs	r1, #0
 80062c0:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80062c2:	e1c8      	b.n	8006656 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 80062c4:	230c      	movs	r3, #12
 80062c6:	18fb      	adds	r3, r7, r3
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	2108      	movs	r1, #8
 80062cc:	0018      	movs	r0, r3
 80062ce:	f000 fafd 	bl	80068cc <unsigned_bitwise_modulo>
 80062d2:	0003      	movs	r3, r0
 80062d4:	2b80      	cmp	r3, #128	@ 0x80
 80062d6:	d800      	bhi.n	80062da <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2f2>
 80062d8:	e1bd      	b.n	8006656 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>

					//remainder is greater than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in more than 0.5

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 80062da:	2212      	movs	r2, #18
 80062dc:	18bb      	adds	r3, r7, r2
 80062de:	18ba      	adds	r2, r7, r2
 80062e0:	8812      	ldrh	r2, [r2, #0]
 80062e2:	3a01      	subs	r2, #1
 80062e4:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 80062e6:	2210      	movs	r2, #16
 80062e8:	18bb      	adds	r3, r7, r2
 80062ea:	18ba      	adds	r2, r7, r2
 80062ec:	8812      	ldrh	r2, [r2, #0]
 80062ee:	3201      	adds	r2, #1
 80062f0:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 80062f2:	2316      	movs	r3, #22
 80062f4:	18fb      	adds	r3, r7, r3
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d104      	bne.n	8006306 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x31e>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80062fc:	2317      	movs	r3, #23
 80062fe:	18fb      	adds	r3, r7, r3
 8006300:	2200      	movs	r2, #0
 8006302:	701a      	strb	r2, [r3, #0]
 8006304:	e008      	b.n	8006318 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8006306:	2316      	movs	r3, #22
 8006308:	18fb      	adds	r3, r7, r3
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d103      	bne.n	8006318 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006310:	2317      	movs	r3, #23
 8006312:	18fb      	adds	r3, r7, r3
 8006314:	2200      	movs	r2, #0
 8006316:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2220      	movs	r2, #32
 800631c:	2100      	movs	r1, #0
 800631e:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8006320:	e199      	b.n	8006656 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
			}

			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 8006322:	2110      	movs	r1, #16
 8006324:	187b      	adds	r3, r7, r1
 8006326:	881a      	ldrh	r2, [r3, #0]
 8006328:	2380      	movs	r3, #128	@ 0x80
 800632a:	005b      	lsls	r3, r3, #1
 800632c:	429a      	cmp	r2, r3
 800632e:	d810      	bhi.n	8006352 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 8006330:	187b      	adds	r3, r7, r1
 8006332:	881a      	ldrh	r2, [r3, #0]
 8006334:	2380      	movs	r3, #128	@ 0x80
 8006336:	005b      	lsls	r3, r3, #1
 8006338:	429a      	cmp	r2, r3
 800633a:	d000      	beq.n	800633e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x356>
 800633c:	e18c      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 800633e:	230c      	movs	r3, #12
 8006340:	18fb      	adds	r3, r7, r3
 8006342:	881b      	ldrh	r3, [r3, #0]
 8006344:	2108      	movs	r1, #8
 8006346:	0018      	movs	r0, r3
 8006348:	f000 fac0 	bl	80068cc <unsigned_bitwise_modulo>
 800634c:	1e03      	subs	r3, r0, #0
 800634e:	d100      	bne.n	8006352 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 8006350:	e182      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8006352:	230c      	movs	r3, #12
 8006354:	18fb      	adds	r3, r7, r3
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	2108      	movs	r1, #8
 800635a:	0018      	movs	r0, r3
 800635c:	f000 fab6 	bl	80068cc <unsigned_bitwise_modulo>
 8006360:	0003      	movs	r3, r0
 8006362:	2b80      	cmp	r3, #128	@ 0x80
 8006364:	d159      	bne.n	800641a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x432>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8006366:	2212      	movs	r2, #18
 8006368:	18bb      	adds	r3, r7, r2
 800636a:	18ba      	adds	r2, r7, r2
 800636c:	8812      	ldrh	r2, [r2, #0]
 800636e:	3a01      	subs	r2, #1
 8006370:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8006372:	2110      	movs	r1, #16
 8006374:	187b      	adds	r3, r7, r1
 8006376:	187a      	adds	r2, r7, r1
 8006378:	8812      	ldrh	r2, [r2, #0]
 800637a:	3201      	adds	r2, #1
 800637c:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 800637e:	000c      	movs	r4, r1
 8006380:	187b      	adds	r3, r7, r1
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	2101      	movs	r1, #1
 8006386:	0018      	movs	r0, r3
 8006388:	f000 faa0 	bl	80068cc <unsigned_bitwise_modulo>
 800638c:	1e03      	subs	r3, r0, #0
 800638e:	d121      	bne.n	80063d4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ec>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8006390:	193b      	adds	r3, r7, r4
 8006392:	193a      	adds	r2, r7, r4
 8006394:	8812      	ldrh	r2, [r2, #0]
 8006396:	0852      	lsrs	r2, r2, #1
 8006398:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 800639a:	2316      	movs	r3, #22
 800639c:	18fb      	adds	r3, r7, r3
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d108      	bne.n	80063b6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ce>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80063a4:	2317      	movs	r3, #23
 80063a6:	18fb      	adds	r3, r7, r3
 80063a8:	2200      	movs	r2, #0
 80063aa:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2220      	movs	r2, #32
 80063b0:	2100      	movs	r1, #0
 80063b2:	5499      	strb	r1, [r3, r2]
 80063b4:	e150      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80063b6:	2316      	movs	r3, #22
 80063b8:	18fb      	adds	r3, r7, r3
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d000      	beq.n	80063c2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3da>
 80063c0:	e14a      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80063c2:	2317      	movs	r3, #23
 80063c4:	18fb      	adds	r3, r7, r3
 80063c6:	2200      	movs	r2, #0
 80063c8:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2220      	movs	r2, #32
 80063ce:	2101      	movs	r1, #1
 80063d0:	5499      	strb	r1, [r3, r2]
 80063d2:	e141      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80063d4:	2210      	movs	r2, #16
 80063d6:	18bb      	adds	r3, r7, r2
 80063d8:	18ba      	adds	r2, r7, r2
 80063da:	8812      	ldrh	r2, [r2, #0]
 80063dc:	0852      	lsrs	r2, r2, #1
 80063de:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80063e0:	2316      	movs	r3, #22
 80063e2:	18fb      	adds	r3, r7, r3
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d108      	bne.n	80063fc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x414>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80063ea:	2317      	movs	r3, #23
 80063ec:	18fb      	adds	r3, r7, r3
 80063ee:	2200      	movs	r2, #0
 80063f0:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2220      	movs	r2, #32
 80063f6:	2100      	movs	r1, #0
 80063f8:	5499      	strb	r1, [r3, r2]
 80063fa:	e12d      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80063fc:	2316      	movs	r3, #22
 80063fe:	18fb      	adds	r3, r7, r3
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d000      	beq.n	8006408 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x420>
 8006406:	e127      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8006408:	2317      	movs	r3, #23
 800640a:	18fb      	adds	r3, r7, r3
 800640c:	2201      	movs	r2, #1
 800640e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	2101      	movs	r1, #1
 8006416:	5499      	strb	r1, [r3, r2]
 8006418:	e11e      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 800641a:	230c      	movs	r3, #12
 800641c:	18fb      	adds	r3, r7, r3
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	2108      	movs	r1, #8
 8006422:	0018      	movs	r0, r3
 8006424:	f000 fa52 	bl	80068cc <unsigned_bitwise_modulo>
 8006428:	1e03      	subs	r3, r0, #0
 800642a:	d152      	bne.n	80064d2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4ea>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 800642c:	2212      	movs	r2, #18
 800642e:	18bb      	adds	r3, r7, r2
 8006430:	18ba      	adds	r2, r7, r2
 8006432:	8812      	ldrh	r2, [r2, #0]
 8006434:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8006436:	2410      	movs	r4, #16
 8006438:	193b      	adds	r3, r7, r4
 800643a:	881b      	ldrh	r3, [r3, #0]
 800643c:	2101      	movs	r1, #1
 800643e:	0018      	movs	r0, r3
 8006440:	f000 fa44 	bl	80068cc <unsigned_bitwise_modulo>
 8006444:	1e03      	subs	r3, r0, #0
 8006446:	d121      	bne.n	800648c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4a4>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8006448:	193b      	adds	r3, r7, r4
 800644a:	193a      	adds	r2, r7, r4
 800644c:	8812      	ldrh	r2, [r2, #0]
 800644e:	0852      	lsrs	r2, r2, #1
 8006450:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8006452:	2316      	movs	r3, #22
 8006454:	18fb      	adds	r3, r7, r3
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d108      	bne.n	800646e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x486>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800645c:	2317      	movs	r3, #23
 800645e:	18fb      	adds	r3, r7, r3
 8006460:	2200      	movs	r2, #0
 8006462:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2220      	movs	r2, #32
 8006468:	2100      	movs	r1, #0
 800646a:	5499      	strb	r1, [r3, r2]
 800646c:	e0f4      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800646e:	2316      	movs	r3, #22
 8006470:	18fb      	adds	r3, r7, r3
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d000      	beq.n	800647a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x492>
 8006478:	e0ee      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800647a:	2317      	movs	r3, #23
 800647c:	18fb      	adds	r3, r7, r3
 800647e:	2200      	movs	r2, #0
 8006480:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2220      	movs	r2, #32
 8006486:	2101      	movs	r1, #1
 8006488:	5499      	strb	r1, [r3, r2]
 800648a:	e0e5      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 800648c:	2210      	movs	r2, #16
 800648e:	18bb      	adds	r3, r7, r2
 8006490:	18ba      	adds	r2, r7, r2
 8006492:	8812      	ldrh	r2, [r2, #0]
 8006494:	0852      	lsrs	r2, r2, #1
 8006496:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8006498:	2316      	movs	r3, #22
 800649a:	18fb      	adds	r3, r7, r3
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d108      	bne.n	80064b4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4cc>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80064a2:	2317      	movs	r3, #23
 80064a4:	18fb      	adds	r3, r7, r3
 80064a6:	2200      	movs	r2, #0
 80064a8:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	2100      	movs	r1, #0
 80064b0:	5499      	strb	r1, [r3, r2]
 80064b2:	e0d1      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80064b4:	2316      	movs	r3, #22
 80064b6:	18fb      	adds	r3, r7, r3
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d000      	beq.n	80064c0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4d8>
 80064be:	e0cb      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80064c0:	2317      	movs	r3, #23
 80064c2:	18fb      	adds	r3, r7, r3
 80064c4:	2201      	movs	r2, #1
 80064c6:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2220      	movs	r2, #32
 80064cc:	2101      	movs	r1, #1
 80064ce:	5499      	strb	r1, [r3, r2]
 80064d0:	e0c2      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 80064d2:	230c      	movs	r3, #12
 80064d4:	18fb      	adds	r3, r7, r3
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	2108      	movs	r1, #8
 80064da:	0018      	movs	r0, r3
 80064dc:	f000 f9f6 	bl	80068cc <unsigned_bitwise_modulo>
 80064e0:	0003      	movs	r3, r0
 80064e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80064e4:	d856      	bhi.n	8006594 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x5ac>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 80064e6:	2212      	movs	r2, #18
 80064e8:	18bb      	adds	r3, r7, r2
 80064ea:	18ba      	adds	r2, r7, r2
 80064ec:	8812      	ldrh	r2, [r2, #0]
 80064ee:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 80064f0:	2410      	movs	r4, #16
 80064f2:	193b      	adds	r3, r7, r4
 80064f4:	193a      	adds	r2, r7, r4
 80064f6:	8812      	ldrh	r2, [r2, #0]
 80064f8:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80064fa:	193b      	adds	r3, r7, r4
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	2101      	movs	r1, #1
 8006500:	0018      	movs	r0, r3
 8006502:	f000 f9e3 	bl	80068cc <unsigned_bitwise_modulo>
 8006506:	1e03      	subs	r3, r0, #0
 8006508:	d121      	bne.n	800654e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x566>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 800650a:	193b      	adds	r3, r7, r4
 800650c:	193a      	adds	r2, r7, r4
 800650e:	8812      	ldrh	r2, [r2, #0]
 8006510:	0852      	lsrs	r2, r2, #1
 8006512:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8006514:	2316      	movs	r3, #22
 8006516:	18fb      	adds	r3, r7, r3
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d108      	bne.n	8006530 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x548>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800651e:	2317      	movs	r3, #23
 8006520:	18fb      	adds	r3, r7, r3
 8006522:	2200      	movs	r2, #0
 8006524:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	2100      	movs	r1, #0
 800652c:	5499      	strb	r1, [r3, r2]
 800652e:	e093      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8006530:	2316      	movs	r3, #22
 8006532:	18fb      	adds	r3, r7, r3
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d000      	beq.n	800653c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x554>
 800653a:	e08d      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800653c:	2317      	movs	r3, #23
 800653e:	18fb      	adds	r3, r7, r3
 8006540:	2200      	movs	r2, #0
 8006542:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2220      	movs	r2, #32
 8006548:	2101      	movs	r1, #1
 800654a:	5499      	strb	r1, [r3, r2]
 800654c:	e084      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 800654e:	2210      	movs	r2, #16
 8006550:	18bb      	adds	r3, r7, r2
 8006552:	18ba      	adds	r2, r7, r2
 8006554:	8812      	ldrh	r2, [r2, #0]
 8006556:	0852      	lsrs	r2, r2, #1
 8006558:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 800655a:	2316      	movs	r3, #22
 800655c:	18fb      	adds	r3, r7, r3
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d108      	bne.n	8006576 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x58e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006564:	2317      	movs	r3, #23
 8006566:	18fb      	adds	r3, r7, r3
 8006568:	2200      	movs	r2, #0
 800656a:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2220      	movs	r2, #32
 8006570:	2100      	movs	r1, #0
 8006572:	5499      	strb	r1, [r3, r2]
 8006574:	e070      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8006576:	2316      	movs	r3, #22
 8006578:	18fb      	adds	r3, r7, r3
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d000      	beq.n	8006582 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x59a>
 8006580:	e06a      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8006582:	2317      	movs	r3, #23
 8006584:	18fb      	adds	r3, r7, r3
 8006586:	2201      	movs	r2, #1
 8006588:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2220      	movs	r2, #32
 800658e:	2101      	movs	r1, #1
 8006590:	5499      	strb	r1, [r3, r2]
 8006592:	e061      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8006594:	230c      	movs	r3, #12
 8006596:	18fb      	adds	r3, r7, r3
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	2108      	movs	r1, #8
 800659c:	0018      	movs	r0, r3
 800659e:	f000 f995 	bl	80068cc <unsigned_bitwise_modulo>
 80065a2:	0003      	movs	r3, r0
 80065a4:	2b80      	cmp	r3, #128	@ 0x80
 80065a6:	d957      	bls.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 80065a8:	2212      	movs	r2, #18
 80065aa:	18bb      	adds	r3, r7, r2
 80065ac:	18ba      	adds	r2, r7, r2
 80065ae:	8812      	ldrh	r2, [r2, #0]
 80065b0:	3a01      	subs	r2, #1
 80065b2:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 80065b4:	2410      	movs	r4, #16
 80065b6:	193b      	adds	r3, r7, r4
 80065b8:	193a      	adds	r2, r7, r4
 80065ba:	8812      	ldrh	r2, [r2, #0]
 80065bc:	3201      	adds	r2, #1
 80065be:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80065c0:	193b      	adds	r3, r7, r4
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	2101      	movs	r1, #1
 80065c6:	0018      	movs	r0, r3
 80065c8:	f000 f980 	bl	80068cc <unsigned_bitwise_modulo>
 80065cc:	1e03      	subs	r3, r0, #0
 80065ce:	d120      	bne.n	8006612 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x62a>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80065d0:	193b      	adds	r3, r7, r4
 80065d2:	193a      	adds	r2, r7, r4
 80065d4:	8812      	ldrh	r2, [r2, #0]
 80065d6:	0852      	lsrs	r2, r2, #1
 80065d8:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80065da:	2316      	movs	r3, #22
 80065dc:	18fb      	adds	r3, r7, r3
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d108      	bne.n	80065f6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x60e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80065e4:	2317      	movs	r3, #23
 80065e6:	18fb      	adds	r3, r7, r3
 80065e8:	2200      	movs	r2, #0
 80065ea:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2220      	movs	r2, #32
 80065f0:	2100      	movs	r1, #0
 80065f2:	5499      	strb	r1, [r3, r2]
 80065f4:	e030      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80065f6:	2316      	movs	r3, #22
 80065f8:	18fb      	adds	r3, r7, r3
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d12b      	bne.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006600:	2317      	movs	r3, #23
 8006602:	18fb      	adds	r3, r7, r3
 8006604:	2200      	movs	r2, #0
 8006606:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2220      	movs	r2, #32
 800660c:	2101      	movs	r1, #1
 800660e:	5499      	strb	r1, [r3, r2]
 8006610:	e022      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8006612:	2210      	movs	r2, #16
 8006614:	18bb      	adds	r3, r7, r2
 8006616:	18ba      	adds	r2, r7, r2
 8006618:	8812      	ldrh	r2, [r2, #0]
 800661a:	0852      	lsrs	r2, r2, #1
 800661c:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 800661e:	2316      	movs	r3, #22
 8006620:	18fb      	adds	r3, r7, r3
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d108      	bne.n	800663a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x652>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006628:	2317      	movs	r3, #23
 800662a:	18fb      	adds	r3, r7, r3
 800662c:	2200      	movs	r2, #0
 800662e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2220      	movs	r2, #32
 8006634:	2100      	movs	r1, #0
 8006636:	5499      	strb	r1, [r3, r2]
 8006638:	e00e      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800663a:	2316      	movs	r3, #22
 800663c:	18fb      	adds	r3, r7, r3
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d109      	bne.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8006644:	2317      	movs	r3, #23
 8006646:	18fb      	adds	r3, r7, r3
 8006648:	2201      	movs	r2, #1
 800664a:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	2101      	movs	r1, #1
 8006652:	5499      	strb	r1, [r3, r2]
 8006654:	e000      	b.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8006656:	46c0      	nop			@ (mov r8, r8)
			}

	        //DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	        //NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	        //ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8006658:	2316      	movs	r3, #22
 800665a:	18fb      	adds	r3, r7, r3
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d152      	bne.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x720>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8006662:	2317      	movs	r3, #23
 8006664:	18fb      	adds	r3, r7, r3
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d109      	bne.n	8006680 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x698>

	                params_ptr->final_start_value = 256 - manipulated_period_shorten;
 800666c:	2312      	movs	r3, #18
 800666e:	18fb      	adds	r3, r7, r3
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	2280      	movs	r2, #128	@ 0x80
 8006674:	0052      	lsls	r2, r2, #1
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	b29a      	uxth	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	829a      	strh	r2, [r3, #20]
 800667e:	e099      	b.n	80067b4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8006680:	2317      	movs	r3, #23
 8006682:	18fb      	adds	r3, r7, r3
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d11b      	bne.n	80066c2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6da>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	89db      	ldrh	r3, [r3, #14]
 800668e:	b29b      	uxth	r3, r3
 8006690:	2101      	movs	r1, #1
 8006692:	0018      	movs	r0, r3
 8006694:	f000 f91a 	bl	80068cc <unsigned_bitwise_modulo>
 8006698:	1e03      	subs	r3, r0, #0
 800669a:	d109      	bne.n	80066b0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6c8>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 800669c:	2312      	movs	r3, #18
 800669e:	18fb      	adds	r3, r7, r3
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	2280      	movs	r2, #128	@ 0x80
 80066a4:	0052      	lsls	r2, r2, #1
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	829a      	strh	r2, [r3, #20]
 80066ae:	e081      	b.n	80067b4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten - 1;
 80066b0:	2312      	movs	r3, #18
 80066b2:	18fb      	adds	r3, r7, r3
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	22ff      	movs	r2, #255	@ 0xff
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	829a      	strh	r2, [r3, #20]
 80066c0:	e078      	b.n	80067b4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 80066c2:	2317      	movs	r3, #23
 80066c4:	18fb      	adds	r3, r7, r3
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d000      	beq.n	80066ce <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6e6>
 80066cc:	e072      	b.n	80067b4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	89db      	ldrh	r3, [r3, #14]
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	2101      	movs	r1, #1
 80066d6:	0018      	movs	r0, r3
 80066d8:	f000 f8f8 	bl	80068cc <unsigned_bitwise_modulo>
 80066dc:	1e03      	subs	r3, r0, #0
 80066de:	d109      	bne.n	80066f4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x70c>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 80066e0:	2312      	movs	r3, #18
 80066e2:	18fb      	adds	r3, r7, r3
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	2280      	movs	r2, #128	@ 0x80
 80066e8:	0052      	lsls	r2, r2, #1
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	829a      	strh	r2, [r3, #20]
 80066f2:	e05f      	b.n	80067b4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten + 1;
 80066f4:	2312      	movs	r3, #18
 80066f6:	18fb      	adds	r3, r7, r3
 80066f8:	881b      	ldrh	r3, [r3, #0]
 80066fa:	2202      	movs	r2, #2
 80066fc:	32ff      	adds	r2, #255	@ 0xff
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	b29a      	uxth	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	829a      	strh	r2, [r3, #20]
 8006706:	e055      	b.n	80067b4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	        }
	        else if(symmetry_type_for_halfcycle == LENGTHEN){
 8006708:	2316      	movs	r3, #22
 800670a:	18fb      	adds	r3, r7, r3
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d150      	bne.n	80067b4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8006712:	2317      	movs	r3, #23
 8006714:	18fb      	adds	r3, r7, r3
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d109      	bne.n	8006730 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x748>

	                params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 800671c:	2310      	movs	r3, #16
 800671e:	18fb      	adds	r3, r7, r3
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	2280      	movs	r2, #128	@ 0x80
 8006724:	0052      	lsls	r2, r2, #1
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	b29a      	uxth	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	829a      	strh	r2, [r3, #20]
 800672e:	e041      	b.n	80067b4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8006730:	2317      	movs	r3, #23
 8006732:	18fb      	adds	r3, r7, r3
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d11b      	bne.n	8006772 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x78a>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	89db      	ldrh	r3, [r3, #14]
 800673e:	b29b      	uxth	r3, r3
 8006740:	2101      	movs	r1, #1
 8006742:	0018      	movs	r0, r3
 8006744:	f000 f8c2 	bl	80068cc <unsigned_bitwise_modulo>
 8006748:	1e03      	subs	r3, r0, #0
 800674a:	d109      	bne.n	8006760 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x778>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 800674c:	2310      	movs	r3, #16
 800674e:	18fb      	adds	r3, r7, r3
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	2280      	movs	r2, #128	@ 0x80
 8006754:	0052      	lsls	r2, r2, #1
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	b29a      	uxth	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	829a      	strh	r2, [r3, #20]
 800675e:	e029      	b.n	80067b4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 8006760:	2310      	movs	r3, #16
 8006762:	18fb      	adds	r3, r7, r3
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	22ff      	movs	r2, #255	@ 0xff
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	b29a      	uxth	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	829a      	strh	r2, [r3, #20]
 8006770:	e020      	b.n	80067b4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8006772:	2317      	movs	r3, #23
 8006774:	18fb      	adds	r3, r7, r3
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	2b02      	cmp	r3, #2
 800677a:	d11b      	bne.n	80067b4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	89db      	ldrh	r3, [r3, #14]
 8006780:	b29b      	uxth	r3, r3
 8006782:	2101      	movs	r1, #1
 8006784:	0018      	movs	r0, r3
 8006786:	f000 f8a1 	bl	80068cc <unsigned_bitwise_modulo>
 800678a:	1e03      	subs	r3, r0, #0
 800678c:	d109      	bne.n	80067a2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7ba>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 800678e:	2310      	movs	r3, #16
 8006790:	18fb      	adds	r3, r7, r3
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	2280      	movs	r2, #128	@ 0x80
 8006796:	0052      	lsls	r2, r2, #1
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	b29a      	uxth	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	829a      	strh	r2, [r3, #20]
 80067a0:	e008      	b.n	80067b4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen + 1;
 80067a2:	2310      	movs	r3, #16
 80067a4:	18fb      	adds	r3, r7, r3
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	2202      	movs	r2, #2
 80067aa:	32ff      	adds	r2, #255	@ 0xff
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	829a      	strh	r2, [r3, #20]
	                }
	            }
	        }

	        Adjust_TIM16_Prescaler(params_ptr);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	0018      	movs	r0, r3
 80067b8:	f7ff fbf4 	bl	8005fa4 <Adjust_TIM16_Prescaler>
		params_ptr->final_start_value = params_ptr->raw_start_value;
		params_ptr->prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(params_ptr);
    #endif

    params_ptr->final_period = 256 - params_ptr->final_start_value;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	8a9b      	ldrh	r3, [r3, #20]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	2280      	movs	r2, #128	@ 0x80
 80067c4:	0052      	lsls	r2, r2, #1
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	82da      	strh	r2, [r3, #22]
    params_ptr->final_ARR = params_ptr->final_period - 1;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	8adb      	ldrh	r3, [r3, #22]
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	3b01      	subs	r3, #1
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	831a      	strh	r2, [r3, #24]
    params_ptr->final_prescaler_minus_one = params_ptr->final_prescaler - 1;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	8b9b      	ldrh	r3, [r3, #28]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	83da      	strh	r2, [r3, #30]

    return 1;
 80067ea:	2301      	movs	r3, #1
}
 80067ec:	0018      	movs	r0, r3
 80067ee:	46bd      	mov	sp, r7
 80067f0:	b007      	add	sp, #28
 80067f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80067f8:	46c0      	nop			@ (mov r8, r8)
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <Start_OC_TIM>:
//INCLUDES
#include "timers.h"

//FUNCTION DEFINITIONS
uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 80067fe:	b5b0      	push	{r4, r5, r7, lr}
 8006800:	b084      	sub	sp, #16
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 8006808:	250f      	movs	r5, #15
 800680a:	197c      	adds	r4, r7, r5
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	0011      	movs	r1, r2
 8006812:	0018      	movs	r0, r3
 8006814:	f003 ff32 	bl	800a67c <HAL_TIM_OC_Start_IT>
 8006818:	0003      	movs	r3, r0
 800681a:	7023      	strb	r3, [r4, #0]
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 800681c:	197b      	adds	r3, r7, r5
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <Start_OC_TIM+0x2a>

		Error_Handler();
 8006824:	f7fc f87a 	bl	800291c <Error_Handler>
	}

	return ok;
 8006828:	230f      	movs	r3, #15
 800682a:	18fb      	adds	r3, r7, r3
 800682c:	781b      	ldrb	r3, [r3, #0]
}
 800682e:	0018      	movs	r0, r3
 8006830:	46bd      	mov	sp, r7
 8006832:	b004      	add	sp, #16
 8006834:	bdb0      	pop	{r4, r5, r7, pc}

08006836 <Stop_OC_TIM>:

uint8_t Stop_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8006836:	b5b0      	push	{r4, r5, r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Stop_IT(TIM, OC_TIM_channel);
 8006840:	250f      	movs	r5, #15
 8006842:	197c      	adds	r4, r7, r5
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	0011      	movs	r1, r2
 800684a:	0018      	movs	r0, r3
 800684c:	f004 f83a 	bl	800a8c4 <HAL_TIM_OC_Stop_IT>
 8006850:	0003      	movs	r3, r0
 8006852:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8006854:	197b      	adds	r3, r7, r5
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <Stop_OC_TIM+0x2a>

		Error_Handler();
 800685c:	f7fc f85e 	bl	800291c <Error_Handler>
	}

	return ok;
 8006860:	230f      	movs	r3, #15
 8006862:	18fb      	adds	r3, r7, r3
 8006864:	781b      	ldrb	r3, [r3, #0]
}
 8006866:	0018      	movs	r0, r3
 8006868:	46bd      	mov	sp, r7
 800686a:	b004      	add	sp, #16
 800686c:	bdb0      	pop	{r4, r5, r7, pc}

0800686e <isPrime>:
#include "utility.h"

enum Validate isPrime(uint16_t x){
 800686e:	b580      	push	{r7, lr}
 8006870:	b084      	sub	sp, #16
 8006872:	af00      	add	r7, sp, #0
 8006874:	0002      	movs	r2, r0
 8006876:	1dbb      	adds	r3, r7, #6
 8006878:	801a      	strh	r2, [r3, #0]
    for (uint16_t d = 2; d * d <= x; d++) {
 800687a:	230e      	movs	r3, #14
 800687c:	18fb      	adds	r3, r7, r3
 800687e:	2202      	movs	r2, #2
 8006880:	801a      	strh	r2, [r3, #0]
 8006882:	e014      	b.n	80068ae <isPrime+0x40>
        if (x % d == 0)
 8006884:	1dba      	adds	r2, r7, #6
 8006886:	230e      	movs	r3, #14
 8006888:	18fb      	adds	r3, r7, r3
 800688a:	8812      	ldrh	r2, [r2, #0]
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	0019      	movs	r1, r3
 8006890:	0010      	movs	r0, r2
 8006892:	f7f9 fcbf 	bl	8000214 <__aeabi_uidivmod>
 8006896:	000b      	movs	r3, r1
 8006898:	b29b      	uxth	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <isPrime+0x34>
            return NO;
 800689e:	2300      	movs	r3, #0
 80068a0:	e010      	b.n	80068c4 <isPrime+0x56>
    for (uint16_t d = 2; d * d <= x; d++) {
 80068a2:	210e      	movs	r1, #14
 80068a4:	187b      	adds	r3, r7, r1
 80068a6:	881a      	ldrh	r2, [r3, #0]
 80068a8:	187b      	adds	r3, r7, r1
 80068aa:	3201      	adds	r2, #1
 80068ac:	801a      	strh	r2, [r3, #0]
 80068ae:	220e      	movs	r2, #14
 80068b0:	18bb      	adds	r3, r7, r2
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	18ba      	adds	r2, r7, r2
 80068b6:	8812      	ldrh	r2, [r2, #0]
 80068b8:	435a      	muls	r2, r3
 80068ba:	1dbb      	adds	r3, r7, #6
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	429a      	cmp	r2, r3
 80068c0:	dde0      	ble.n	8006884 <isPrime+0x16>
    }
    return YES;
 80068c2:	2301      	movs	r3, #1
}
 80068c4:	0018      	movs	r0, r3
 80068c6:	46bd      	mov	sp, r7
 80068c8:	b004      	add	sp, #16
 80068ca:	bd80      	pop	{r7, pc}

080068cc <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	000a      	movs	r2, r1
 80068d6:	1cfb      	adds	r3, r7, #3
 80068d8:	701a      	strb	r2, [r3, #0]

    return dividend & ((1 << base_2_exponent) - 1);
 80068da:	1cfb      	adds	r3, r7, #3
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2201      	movs	r2, #1
 80068e0:	409a      	lsls	r2, r3
 80068e2:	0013      	movs	r3, r2
 80068e4:	3b01      	subs	r3, #1
 80068e6:	001a      	movs	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4013      	ands	r3, r2
}
 80068ec:	0018      	movs	r0, r3
 80068ee:	46bd      	mov	sp, r7
 80068f0:	b002      	add	sp, #8
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <Global_Interrupt_Enable>:

uint8_t Global_Interrupt_Enable(void){
 80068f4:	b580      	push	{r7, lr}
 80068f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80068f8:	b662      	cpsie	i
}
 80068fa:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
	return 1;
 80068fc:	2301      	movs	r3, #1
}
 80068fe:	0018      	movs	r0, r3
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <Get_Status_Bit>:

	__disable_irq();
	return 1;
}

enum Validate Get_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	000a      	movs	r2, r1
 800690e:	1cbb      	adds	r3, r7, #2
 8006910:	801a      	strh	r2, [r3, #0]

    if(*bits & bit){
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	1cba      	adds	r2, r7, #2
 8006918:	8812      	ldrh	r2, [r2, #0]
 800691a:	4013      	ands	r3, r2
 800691c:	d001      	beq.n	8006922 <Get_Status_Bit+0x1e>

        return (enum Validate) YES;
 800691e:	2301      	movs	r3, #1
 8006920:	e000      	b.n	8006924 <Get_Status_Bit+0x20>
    }

    else{

        return (enum Validate) NO;
 8006922:	2300      	movs	r3, #0
    }
}
 8006924:	0018      	movs	r0, r3
 8006926:	46bd      	mov	sp, r7
 8006928:	b002      	add	sp, #8
 800692a:	bd80      	pop	{r7, pc}

0800692c <Set_Status_Bit>:

void Set_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	000a      	movs	r2, r1
 8006936:	1cbb      	adds	r3, r7, #2
 8006938:	801a      	strh	r2, [r3, #0]

	*bits |= bit;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	1cbb      	adds	r3, r7, #2
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	431a      	orrs	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	601a      	str	r2, [r3, #0]
}
 8006948:	46c0      	nop			@ (mov r8, r8)
 800694a:	46bd      	mov	sp, r7
 800694c:	b002      	add	sp, #8
 800694e:	bd80      	pop	{r7, pc}

08006950 <Clear_Status_Bit>:

void Clear_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	000a      	movs	r2, r1
 800695a:	1cbb      	adds	r3, r7, #2
 800695c:	801a      	strh	r2, [r3, #0]

	*bits &= ~bit;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	1cba      	adds	r2, r7, #2
 8006964:	8812      	ldrh	r2, [r2, #0]
 8006966:	43d2      	mvns	r2, r2
 8006968:	401a      	ands	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	601a      	str	r2, [r3, #0]
}
 800696e:	46c0      	nop			@ (mov r8, r8)
 8006970:	46bd      	mov	sp, r7
 8006972:	b002      	add	sp, #8
 8006974:	bd80      	pop	{r7, pc}
	...

08006978 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006978:	480d      	ldr	r0, [pc, #52]	@ (80069b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800697a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800697c:	f7ff ff3a 	bl	80067f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006980:	480c      	ldr	r0, [pc, #48]	@ (80069b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8006982:	490d      	ldr	r1, [pc, #52]	@ (80069b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006984:	4a0d      	ldr	r2, [pc, #52]	@ (80069bc <LoopForever+0xe>)
  movs r3, #0
 8006986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006988:	e002      	b.n	8006990 <LoopCopyDataInit>

0800698a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800698a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800698c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800698e:	3304      	adds	r3, #4

08006990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006994:	d3f9      	bcc.n	800698a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006996:	4a0a      	ldr	r2, [pc, #40]	@ (80069c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006998:	4c0a      	ldr	r4, [pc, #40]	@ (80069c4 <LoopForever+0x16>)
  movs r3, #0
 800699a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800699c:	e001      	b.n	80069a2 <LoopFillZerobss>

0800699e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800699e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80069a0:	3204      	adds	r2, #4

080069a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80069a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80069a4:	d3fb      	bcc.n	800699e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80069a6:	f007 fb93 	bl	800e0d0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80069aa:	f7fe faaf 	bl	8004f0c <main>

080069ae <LoopForever>:

LoopForever:
  b LoopForever
 80069ae:	e7fe      	b.n	80069ae <LoopForever>
  ldr   r0, =_estack
 80069b0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80069b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80069b8:	200004e0 	.word	0x200004e0
  ldr r2, =_sidata
 80069bc:	0800ebe8 	.word	0x0800ebe8
  ldr r2, =_sbss
 80069c0:	200004e0 	.word	0x200004e0
  ldr r4, =_ebss
 80069c4:	20000dcc 	.word	0x20000dcc

080069c8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80069c8:	e7fe      	b.n	80069c8 <ADC1_IRQHandler>
	...

080069cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80069d2:	1dfb      	adds	r3, r7, #7
 80069d4:	2200      	movs	r2, #0
 80069d6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80069d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006a08 <HAL_Init+0x3c>)
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006a08 <HAL_Init+0x3c>)
 80069de:	2180      	movs	r1, #128	@ 0x80
 80069e0:	0049      	lsls	r1, r1, #1
 80069e2:	430a      	orrs	r2, r1
 80069e4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80069e6:	2000      	movs	r0, #0
 80069e8:	f000 f810 	bl	8006a0c <HAL_InitTick>
 80069ec:	1e03      	subs	r3, r0, #0
 80069ee:	d003      	beq.n	80069f8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80069f0:	1dfb      	adds	r3, r7, #7
 80069f2:	2201      	movs	r2, #1
 80069f4:	701a      	strb	r2, [r3, #0]
 80069f6:	e001      	b.n	80069fc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80069f8:	f7fe fef8 	bl	80057ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80069fc:	1dfb      	adds	r3, r7, #7
 80069fe:	781b      	ldrb	r3, [r3, #0]
}
 8006a00:	0018      	movs	r0, r3
 8006a02:	46bd      	mov	sp, r7
 8006a04:	b002      	add	sp, #8
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	40022000 	.word	0x40022000

08006a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a0c:	b590      	push	{r4, r7, lr}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006a14:	230f      	movs	r3, #15
 8006a16:	18fb      	adds	r3, r7, r3
 8006a18:	2200      	movs	r2, #0
 8006a1a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8006a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8006a94 <HAL_InitTick+0x88>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d02b      	beq.n	8006a7c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8006a24:	4b1c      	ldr	r3, [pc, #112]	@ (8006a98 <HAL_InitTick+0x8c>)
 8006a26:	681c      	ldr	r4, [r3, #0]
 8006a28:	4b1a      	ldr	r3, [pc, #104]	@ (8006a94 <HAL_InitTick+0x88>)
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	0019      	movs	r1, r3
 8006a2e:	23fa      	movs	r3, #250	@ 0xfa
 8006a30:	0098      	lsls	r0, r3, #2
 8006a32:	f7f9 fb69 	bl	8000108 <__udivsi3>
 8006a36:	0003      	movs	r3, r0
 8006a38:	0019      	movs	r1, r3
 8006a3a:	0020      	movs	r0, r4
 8006a3c:	f7f9 fb64 	bl	8000108 <__udivsi3>
 8006a40:	0003      	movs	r3, r0
 8006a42:	0018      	movs	r0, r3
 8006a44:	f001 fb75 	bl	8008132 <HAL_SYSTICK_Config>
 8006a48:	1e03      	subs	r3, r0, #0
 8006a4a:	d112      	bne.n	8006a72 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b03      	cmp	r3, #3
 8006a50:	d80a      	bhi.n	8006a68 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006a52:	6879      	ldr	r1, [r7, #4]
 8006a54:	2301      	movs	r3, #1
 8006a56:	425b      	negs	r3, r3
 8006a58:	2200      	movs	r2, #0
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f001 fb34 	bl	80080c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006a60:	4b0e      	ldr	r3, [pc, #56]	@ (8006a9c <HAL_InitTick+0x90>)
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	e00d      	b.n	8006a84 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8006a68:	230f      	movs	r3, #15
 8006a6a:	18fb      	adds	r3, r7, r3
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	701a      	strb	r2, [r3, #0]
 8006a70:	e008      	b.n	8006a84 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006a72:	230f      	movs	r3, #15
 8006a74:	18fb      	adds	r3, r7, r3
 8006a76:	2201      	movs	r2, #1
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	e003      	b.n	8006a84 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006a7c:	230f      	movs	r3, #15
 8006a7e:	18fb      	adds	r3, r7, r3
 8006a80:	2201      	movs	r2, #1
 8006a82:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8006a84:	230f      	movs	r3, #15
 8006a86:	18fb      	adds	r3, r7, r3
 8006a88:	781b      	ldrb	r3, [r3, #0]
}
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	b005      	add	sp, #20
 8006a90:	bd90      	pop	{r4, r7, pc}
 8006a92:	46c0      	nop			@ (mov r8, r8)
 8006a94:	20000454 	.word	0x20000454
 8006a98:	2000044c 	.word	0x2000044c
 8006a9c:	20000450 	.word	0x20000450

08006aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006aa4:	4b05      	ldr	r3, [pc, #20]	@ (8006abc <HAL_IncTick+0x1c>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	001a      	movs	r2, r3
 8006aaa:	4b05      	ldr	r3, [pc, #20]	@ (8006ac0 <HAL_IncTick+0x20>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	18d2      	adds	r2, r2, r3
 8006ab0:	4b03      	ldr	r3, [pc, #12]	@ (8006ac0 <HAL_IncTick+0x20>)
 8006ab2:	601a      	str	r2, [r3, #0]
}
 8006ab4:	46c0      	nop			@ (mov r8, r8)
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	46c0      	nop			@ (mov r8, r8)
 8006abc:	20000454 	.word	0x20000454
 8006ac0:	20000dac 	.word	0x20000dac

08006ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8006ac8:	4b02      	ldr	r3, [pc, #8]	@ (8006ad4 <HAL_GetTick+0x10>)
 8006aca:	681b      	ldr	r3, [r3, #0]
}
 8006acc:	0018      	movs	r0, r3
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	46c0      	nop			@ (mov r8, r8)
 8006ad4:	20000dac 	.word	0x20000dac

08006ad8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a05      	ldr	r2, [pc, #20]	@ (8006afc <LL_ADC_SetCommonPathInternalCh+0x24>)
 8006ae8:	401a      	ands	r2, r3
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	431a      	orrs	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	601a      	str	r2, [r3, #0]
}
 8006af2:	46c0      	nop			@ (mov r8, r8)
 8006af4:	46bd      	mov	sp, r7
 8006af6:	b002      	add	sp, #8
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	46c0      	nop			@ (mov r8, r8)
 8006afc:	fe3fffff 	.word	0xfe3fffff

08006b00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	23e0      	movs	r3, #224	@ 0xe0
 8006b0e:	045b      	lsls	r3, r3, #17
 8006b10:	4013      	ands	r3, r2
}
 8006b12:	0018      	movs	r0, r3
 8006b14:	46bd      	mov	sp, r7
 8006b16:	b002      	add	sp, #8
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b084      	sub	sp, #16
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	2104      	movs	r1, #4
 8006b2e:	400a      	ands	r2, r1
 8006b30:	2107      	movs	r1, #7
 8006b32:	4091      	lsls	r1, r2
 8006b34:	000a      	movs	r2, r1
 8006b36:	43d2      	mvns	r2, r2
 8006b38:	401a      	ands	r2, r3
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2104      	movs	r1, #4
 8006b3e:	400b      	ands	r3, r1
 8006b40:	6879      	ldr	r1, [r7, #4]
 8006b42:	4099      	lsls	r1, r3
 8006b44:	000b      	movs	r3, r1
 8006b46:	431a      	orrs	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8006b4c:	46c0      	nop			@ (mov r8, r8)
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	b004      	add	sp, #16
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	2104      	movs	r1, #4
 8006b66:	400a      	ands	r2, r1
 8006b68:	2107      	movs	r1, #7
 8006b6a:	4091      	lsls	r1, r2
 8006b6c:	000a      	movs	r2, r1
 8006b6e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2104      	movs	r1, #4
 8006b74:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8006b76:	40da      	lsrs	r2, r3
 8006b78:	0013      	movs	r3, r2
}
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	b002      	add	sp, #8
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b082      	sub	sp, #8
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68da      	ldr	r2, [r3, #12]
 8006b8e:	23c0      	movs	r3, #192	@ 0xc0
 8006b90:	011b      	lsls	r3, r3, #4
 8006b92:	4013      	ands	r3, r2
 8006b94:	d101      	bne.n	8006b9a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006b96:	2301      	movs	r3, #1
 8006b98:	e000      	b.n	8006b9c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	0018      	movs	r0, r3
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	b002      	add	sp, #8
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	211f      	movs	r1, #31
 8006bb8:	400a      	ands	r2, r1
 8006bba:	210f      	movs	r1, #15
 8006bbc:	4091      	lsls	r1, r2
 8006bbe:	000a      	movs	r2, r1
 8006bc0:	43d2      	mvns	r2, r2
 8006bc2:	401a      	ands	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	0e9b      	lsrs	r3, r3, #26
 8006bc8:	210f      	movs	r1, #15
 8006bca:	4019      	ands	r1, r3
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	201f      	movs	r0, #31
 8006bd0:	4003      	ands	r3, r0
 8006bd2:	4099      	lsls	r1, r3
 8006bd4:	000b      	movs	r3, r1
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006bdc:	46c0      	nop			@ (mov r8, r8)
 8006bde:	46bd      	mov	sp, r7
 8006be0:	b004      	add	sp, #16
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	035b      	lsls	r3, r3, #13
 8006bf6:	0b5b      	lsrs	r3, r3, #13
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006bfe:	46c0      	nop			@ (mov r8, r8)
 8006c00:	46bd      	mov	sp, r7
 8006c02:	b002      	add	sp, #8
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b082      	sub	sp, #8
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	0352      	lsls	r2, r2, #13
 8006c18:	0b52      	lsrs	r2, r2, #13
 8006c1a:	43d2      	mvns	r2, r2
 8006c1c:	401a      	ands	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006c22:	46c0      	nop			@ (mov r8, r8)
 8006c24:	46bd      	mov	sp, r7
 8006c26:	b002      	add	sp, #8
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	0212      	lsls	r2, r2, #8
 8006c40:	43d2      	mvns	r2, r2
 8006c42:	401a      	ands	r2, r3
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	021b      	lsls	r3, r3, #8
 8006c48:	6879      	ldr	r1, [r7, #4]
 8006c4a:	400b      	ands	r3, r1
 8006c4c:	4904      	ldr	r1, [pc, #16]	@ (8006c60 <LL_ADC_SetChannelSamplingTime+0x34>)
 8006c4e:	400b      	ands	r3, r1
 8006c50:	431a      	orrs	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8006c56:	46c0      	nop			@ (mov r8, r8)
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	b004      	add	sp, #16
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	46c0      	nop			@ (mov r8, r8)
 8006c60:	07ffff00 	.word	0x07ffff00

08006c64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	4a05      	ldr	r2, [pc, #20]	@ (8006c88 <LL_ADC_EnableInternalRegulator+0x24>)
 8006c72:	4013      	ands	r3, r2
 8006c74:	2280      	movs	r2, #128	@ 0x80
 8006c76:	0552      	lsls	r2, r2, #21
 8006c78:	431a      	orrs	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006c7e:	46c0      	nop			@ (mov r8, r8)
 8006c80:	46bd      	mov	sp, r7
 8006c82:	b002      	add	sp, #8
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	46c0      	nop			@ (mov r8, r8)
 8006c88:	6fffffe8 	.word	0x6fffffe8

08006c8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689a      	ldr	r2, [r3, #8]
 8006c98:	2380      	movs	r3, #128	@ 0x80
 8006c9a:	055b      	lsls	r3, r3, #21
 8006c9c:	401a      	ands	r2, r3
 8006c9e:	2380      	movs	r3, #128	@ 0x80
 8006ca0:	055b      	lsls	r3, r3, #21
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d101      	bne.n	8006caa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e000      	b.n	8006cac <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	0018      	movs	r0, r3
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	b002      	add	sp, #8
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	4a04      	ldr	r2, [pc, #16]	@ (8006cd4 <LL_ADC_Enable+0x20>)
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006ccc:	46c0      	nop			@ (mov r8, r8)
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	b002      	add	sp, #8
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	7fffffe8 	.word	0x7fffffe8

08006cd8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	4a04      	ldr	r2, [pc, #16]	@ (8006cf8 <LL_ADC_Disable+0x20>)
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	2202      	movs	r2, #2
 8006cea:	431a      	orrs	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006cf0:	46c0      	nop			@ (mov r8, r8)
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	b002      	add	sp, #8
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	7fffffe8 	.word	0x7fffffe8

08006cfc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d101      	bne.n	8006d14 <LL_ADC_IsEnabled+0x18>
 8006d10:	2301      	movs	r3, #1
 8006d12:	e000      	b.n	8006d16 <LL_ADC_IsEnabled+0x1a>
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	0018      	movs	r0, r3
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	b002      	add	sp, #8
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b082      	sub	sp, #8
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d101      	bne.n	8006d36 <LL_ADC_IsDisableOngoing+0x18>
 8006d32:	2301      	movs	r3, #1
 8006d34:	e000      	b.n	8006d38 <LL_ADC_IsDisableOngoing+0x1a>
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	0018      	movs	r0, r3
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	b002      	add	sp, #8
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	4a04      	ldr	r2, [pc, #16]	@ (8006d60 <LL_ADC_REG_StartConversion+0x20>)
 8006d4e:	4013      	ands	r3, r2
 8006d50:	2204      	movs	r2, #4
 8006d52:	431a      	orrs	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006d58:	46c0      	nop			@ (mov r8, r8)
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	b002      	add	sp, #8
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	7fffffe8 	.word	0x7fffffe8

08006d64 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	4a04      	ldr	r2, [pc, #16]	@ (8006d84 <LL_ADC_REG_StopConversion+0x20>)
 8006d72:	4013      	ands	r3, r2
 8006d74:	2210      	movs	r2, #16
 8006d76:	431a      	orrs	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006d7c:	46c0      	nop			@ (mov r8, r8)
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	b002      	add	sp, #8
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	7fffffe8 	.word	0x7fffffe8

08006d88 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	2204      	movs	r2, #4
 8006d96:	4013      	ands	r3, r2
 8006d98:	2b04      	cmp	r3, #4
 8006d9a:	d101      	bne.n	8006da0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e000      	b.n	8006da2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	0018      	movs	r0, r3
 8006da4:	46bd      	mov	sp, r7
 8006da6:	b002      	add	sp, #8
 8006da8:	bd80      	pop	{r7, pc}
	...

08006dac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b088      	sub	sp, #32
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006db4:	231f      	movs	r3, #31
 8006db6:	18fb      	adds	r3, r7, r3
 8006db8:	2200      	movs	r2, #0
 8006dba:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e19f      	b.n	8007112 <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d12a      	bne.n	8006e30 <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4acf      	ldr	r2, [pc, #828]	@ (800711c <HAL_ADC_Init+0x370>)
 8006dde:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4acf      	ldr	r2, [pc, #828]	@ (8007120 <HAL_ADC_Init+0x374>)
 8006de4:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4ace      	ldr	r2, [pc, #824]	@ (8007124 <HAL_ADC_Init+0x378>)
 8006dea:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4ace      	ldr	r2, [pc, #824]	@ (8007128 <HAL_ADC_Init+0x37c>)
 8006df0:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4acd      	ldr	r2, [pc, #820]	@ (800712c <HAL_ADC_Init+0x380>)
 8006df6:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4acd      	ldr	r2, [pc, #820]	@ (8007130 <HAL_ADC_Init+0x384>)
 8006dfc:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4acc      	ldr	r2, [pc, #816]	@ (8007134 <HAL_ADC_Init+0x388>)
 8006e02:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (hadc->MspInitCallback == NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2280      	movs	r2, #128	@ 0x80
 8006e08:	589b      	ldr	r3, [r3, r2]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d103      	bne.n	8006e16 <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2180      	movs	r1, #128	@ 0x80
 8006e12:	4ac9      	ldr	r2, [pc, #804]	@ (8007138 <HAL_ADC_Init+0x38c>)
 8006e14:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2280      	movs	r2, #128	@ 0x80
 8006e1a:	589b      	ldr	r3, [r3, r2]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	0010      	movs	r0, r2
 8006e20:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2254      	movs	r2, #84	@ 0x54
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	0018      	movs	r0, r3
 8006e36:	f7ff ff29 	bl	8006c8c <LL_ADC_IsInternalRegulatorEnabled>
 8006e3a:	1e03      	subs	r3, r0, #0
 8006e3c:	d115      	bne.n	8006e6a <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	0018      	movs	r0, r3
 8006e44:	f7ff ff0e 	bl	8006c64 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006e48:	4bbc      	ldr	r3, [pc, #752]	@ (800713c <HAL_ADC_Init+0x390>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	49bc      	ldr	r1, [pc, #752]	@ (8007140 <HAL_ADC_Init+0x394>)
 8006e4e:	0018      	movs	r0, r3
 8006e50:	f7f9 f95a 	bl	8000108 <__udivsi3>
 8006e54:	0003      	movs	r3, r0
 8006e56:	3301      	adds	r3, #1
 8006e58:	005b      	lsls	r3, r3, #1
 8006e5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006e5c:	e002      	b.n	8006e64 <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1f9      	bne.n	8006e5e <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	0018      	movs	r0, r3
 8006e70:	f7ff ff0c 	bl	8006c8c <LL_ADC_IsInternalRegulatorEnabled>
 8006e74:	1e03      	subs	r3, r0, #0
 8006e76:	d10f      	bne.n	8006e98 <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e7c:	2210      	movs	r2, #16
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e88:	2201      	movs	r2, #1
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006e90:	231f      	movs	r3, #31
 8006e92:	18fb      	adds	r3, r7, r3
 8006e94:	2201      	movs	r2, #1
 8006e96:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	f7ff ff73 	bl	8006d88 <LL_ADC_REG_IsConversionOngoing>
 8006ea2:	0003      	movs	r3, r0
 8006ea4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eaa:	2210      	movs	r2, #16
 8006eac:	4013      	ands	r3, r2
 8006eae:	d000      	beq.n	8006eb2 <HAL_ADC_Init+0x106>
 8006eb0:	e122      	b.n	80070f8 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d000      	beq.n	8006eba <HAL_ADC_Init+0x10e>
 8006eb8:	e11e      	b.n	80070f8 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ebe:	4aa1      	ldr	r2, [pc, #644]	@ (8007144 <HAL_ADC_Init+0x398>)
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	0018      	movs	r0, r3
 8006ed0:	f7ff ff14 	bl	8006cfc <LL_ADC_IsEnabled>
 8006ed4:	1e03      	subs	r3, r0, #0
 8006ed6:	d000      	beq.n	8006eda <HAL_ADC_Init+0x12e>
 8006ed8:	e0ad      	b.n	8007036 <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	7e1b      	ldrb	r3, [r3, #24]
 8006ee2:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006ee4:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	7e5b      	ldrb	r3, [r3, #25]
 8006eea:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006eec:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	7e9b      	ldrb	r3, [r3, #26]
 8006ef2:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006ef4:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d002      	beq.n	8006f04 <HAL_ADC_Init+0x158>
 8006efe:	2380      	movs	r3, #128	@ 0x80
 8006f00:	015b      	lsls	r3, r3, #5
 8006f02:	e000      	b.n	8006f06 <HAL_ADC_Init+0x15a>
 8006f04:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006f06:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006f0c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	da04      	bge.n	8006f20 <HAL_ADC_Init+0x174>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	085b      	lsrs	r3, r3, #1
 8006f1e:	e001      	b.n	8006f24 <HAL_ADC_Init+0x178>
 8006f20:	2380      	movs	r3, #128	@ 0x80
 8006f22:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8006f24:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	212c      	movs	r1, #44	@ 0x2c
 8006f2a:	5c5b      	ldrb	r3, [r3, r1]
 8006f2c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006f2e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	5c9b      	ldrb	r3, [r3, r2]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d115      	bne.n	8006f6c <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	7e9b      	ldrb	r3, [r3, #26]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d105      	bne.n	8006f54 <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	2280      	movs	r2, #128	@ 0x80
 8006f4c:	0252      	lsls	r2, r2, #9
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	61bb      	str	r3, [r7, #24]
 8006f52:	e00b      	b.n	8006f6c <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f58:	2220      	movs	r2, #32
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f64:	2201      	movs	r2, #1
 8006f66:	431a      	orrs	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00a      	beq.n	8006f8a <HAL_ADC_Init+0x1de>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f78:	23e0      	movs	r3, #224	@ 0xe0
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8006f82:	4313      	orrs	r3, r2
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	4a6d      	ldr	r2, [pc, #436]	@ (8007148 <HAL_ADC_Init+0x39c>)
 8006f92:	4013      	ands	r3, r2
 8006f94:	0019      	movs	r1, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	0f9b      	lsrs	r3, r3, #30
 8006fa6:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006fac:	4313      	orrs	r3, r2
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	223c      	movs	r2, #60	@ 0x3c
 8006fb8:	5c9b      	ldrb	r3, [r3, r2]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d111      	bne.n	8006fe2 <HAL_ADC_Init+0x236>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	0f9b      	lsrs	r3, r3, #30
 8006fc4:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006fca:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8006fd0:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8006fd6:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	2201      	movs	r2, #1
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	4a58      	ldr	r2, [pc, #352]	@ (800714c <HAL_ADC_Init+0x3a0>)
 8006fea:	4013      	ands	r3, r2
 8006fec:	0019      	movs	r1, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	23c0      	movs	r3, #192	@ 0xc0
 8006ffe:	061b      	lsls	r3, r3, #24
 8007000:	429a      	cmp	r2, r3
 8007002:	d018      	beq.n	8007036 <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8007008:	2380      	movs	r3, #128	@ 0x80
 800700a:	05db      	lsls	r3, r3, #23
 800700c:	429a      	cmp	r2, r3
 800700e:	d012      	beq.n	8007036 <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8007014:	2380      	movs	r3, #128	@ 0x80
 8007016:	061b      	lsls	r3, r3, #24
 8007018:	429a      	cmp	r2, r3
 800701a:	d00c      	beq.n	8007036 <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800701c:	4b4c      	ldr	r3, [pc, #304]	@ (8007150 <HAL_ADC_Init+0x3a4>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a4c      	ldr	r2, [pc, #304]	@ (8007154 <HAL_ADC_Init+0x3a8>)
 8007022:	4013      	ands	r3, r2
 8007024:	0019      	movs	r1, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685a      	ldr	r2, [r3, #4]
 800702a:	23f0      	movs	r3, #240	@ 0xf0
 800702c:	039b      	lsls	r3, r3, #14
 800702e:	401a      	ands	r2, r3
 8007030:	4b47      	ldr	r3, [pc, #284]	@ (8007150 <HAL_ADC_Init+0x3a4>)
 8007032:	430a      	orrs	r2, r1
 8007034:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6818      	ldr	r0, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800703e:	001a      	movs	r2, r3
 8007040:	2100      	movs	r1, #0
 8007042:	f7ff fd6a 	bl	8006b1a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6818      	ldr	r0, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704e:	4942      	ldr	r1, [pc, #264]	@ (8007158 <HAL_ADC_Init+0x3ac>)
 8007050:	001a      	movs	r2, r3
 8007052:	f7ff fd62 	bl	8006b1a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d109      	bne.n	8007072 <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2110      	movs	r1, #16
 800706a:	4249      	negs	r1, r1
 800706c:	430a      	orrs	r2, r1
 800706e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007070:	e018      	b.n	80070a4 <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	691a      	ldr	r2, [r3, #16]
 8007076:	2380      	movs	r3, #128	@ 0x80
 8007078:	039b      	lsls	r3, r3, #14
 800707a:	429a      	cmp	r2, r3
 800707c:	d112      	bne.n	80070a4 <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	3b01      	subs	r3, #1
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	221c      	movs	r2, #28
 800708e:	4013      	ands	r3, r2
 8007090:	2210      	movs	r2, #16
 8007092:	4252      	negs	r2, r2
 8007094:	409a      	lsls	r2, r3
 8007096:	0011      	movs	r1, r2
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2100      	movs	r1, #0
 80070aa:	0018      	movs	r0, r3
 80070ac:	f7ff fd52 	bl	8006b54 <LL_ADC_GetSamplingTimeCommonChannels>
 80070b0:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d10b      	bne.n	80070d2 <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070c4:	2203      	movs	r2, #3
 80070c6:	4393      	bics	r3, r2
 80070c8:	2201      	movs	r2, #1
 80070ca:	431a      	orrs	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80070d0:	e01c      	b.n	800710c <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070d6:	2212      	movs	r2, #18
 80070d8:	4393      	bics	r3, r2
 80070da:	2210      	movs	r2, #16
 80070dc:	431a      	orrs	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070e6:	2201      	movs	r2, #1
 80070e8:	431a      	orrs	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80070ee:	231f      	movs	r3, #31
 80070f0:	18fb      	adds	r3, r7, r3
 80070f2:	2201      	movs	r2, #1
 80070f4:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80070f6:	e009      	b.n	800710c <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070fc:	2210      	movs	r2, #16
 80070fe:	431a      	orrs	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8007104:	231f      	movs	r3, #31
 8007106:	18fb      	adds	r3, r7, r3
 8007108:	2201      	movs	r2, #1
 800710a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800710c:	231f      	movs	r3, #31
 800710e:	18fb      	adds	r3, r7, r3
 8007110:	781b      	ldrb	r3, [r3, #0]
}
 8007112:	0018      	movs	r0, r3
 8007114:	46bd      	mov	sp, r7
 8007116:	b008      	add	sp, #32
 8007118:	bd80      	pop	{r7, pc}
 800711a:	46c0      	nop			@ (mov r8, r8)
 800711c:	08007475 	.word	0x08007475
 8007120:	08007485 	.word	0x08007485
 8007124:	08007495 	.word	0x08007495
 8007128:	080074a5 	.word	0x080074a5
 800712c:	08007efd 	.word	0x08007efd
 8007130:	08007f0d 	.word	0x08007f0d
 8007134:	08007f1d 	.word	0x08007f1d
 8007138:	08005835 	.word	0x08005835
 800713c:	2000044c 	.word	0x2000044c
 8007140:	00030d40 	.word	0x00030d40
 8007144:	fffffefd 	.word	0xfffffefd
 8007148:	ffde0201 	.word	0xffde0201
 800714c:	1ffffc02 	.word	0x1ffffc02
 8007150:	40012708 	.word	0x40012708
 8007154:	ffc3ffff 	.word	0xffc3ffff
 8007158:	07ffff04 	.word	0x07ffff04

0800715c <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	607a      	str	r2, [r7, #4]
 8007166:	230b      	movs	r3, #11
 8007168:	18fb      	adds	r3, r7, r3
 800716a:	1c0a      	adds	r2, r1, #0
 800716c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800716e:	2317      	movs	r3, #23
 8007170:	18fb      	adds	r3, r7, r3
 8007172:	2200      	movs	r2, #0
 8007174:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d107      	bne.n	800718c <HAL_ADC_RegisterCallback+0x30>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007180:	2210      	movs	r2, #16
 8007182:	431a      	orrs	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	65da      	str	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e06d      	b.n	8007268 <HAL_ADC_RegisterCallback+0x10c>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007190:	2201      	movs	r2, #1
 8007192:	4013      	ands	r3, r2
 8007194:	d03a      	beq.n	800720c <HAL_ADC_RegisterCallback+0xb0>
  {
    switch (CallbackID)
 8007196:	230b      	movs	r3, #11
 8007198:	18fb      	adds	r3, r7, r3
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	2b0a      	cmp	r3, #10
 800719e:	d82a      	bhi.n	80071f6 <HAL_ADC_RegisterCallback+0x9a>
 80071a0:	009a      	lsls	r2, r3, #2
 80071a2:	4b33      	ldr	r3, [pc, #204]	@ (8007270 <HAL_ADC_RegisterCallback+0x114>)
 80071a4:	18d3      	adds	r3, r2, r3
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	469f      	mov	pc, r3
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80071b0:	e057      	b.n	8007262 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80071b8:	e053      	b.n	8007262 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80071c0:	e04f      	b.n	8007262 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80071c8:	e04b      	b.n	8007262 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80071d0:	e047      	b.n	8007262 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80071d8:	e043      	b.n	8007262 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80071e0:	e03f      	b.n	8007262 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2180      	movs	r1, #128	@ 0x80
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	505a      	str	r2, [r3, r1]
        break;
 80071ea:	e03a      	b.n	8007262 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2184      	movs	r1, #132	@ 0x84
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	505a      	str	r2, [r3, r1]
        break;
 80071f4:	e035      	b.n	8007262 <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071fa:	2210      	movs	r2, #16
 80071fc:	431a      	orrs	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 8007202:	2317      	movs	r3, #23
 8007204:	18fb      	adds	r3, r7, r3
 8007206:	2201      	movs	r2, #1
 8007208:	701a      	strb	r2, [r3, #0]
        break;
 800720a:	e02a      	b.n	8007262 <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007210:	2b00      	cmp	r3, #0
 8007212:	d11c      	bne.n	800724e <HAL_ADC_RegisterCallback+0xf2>
  {
    switch (CallbackID)
 8007214:	230b      	movs	r3, #11
 8007216:	18fb      	adds	r3, r7, r3
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	2b09      	cmp	r3, #9
 800721c:	d002      	beq.n	8007224 <HAL_ADC_RegisterCallback+0xc8>
 800721e:	2b0a      	cmp	r3, #10
 8007220:	d005      	beq.n	800722e <HAL_ADC_RegisterCallback+0xd2>
 8007222:	e009      	b.n	8007238 <HAL_ADC_RegisterCallback+0xdc>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2180      	movs	r1, #128	@ 0x80
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	505a      	str	r2, [r3, r1]
        break;
 800722c:	e019      	b.n	8007262 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2184      	movs	r1, #132	@ 0x84
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	505a      	str	r2, [r3, r1]
        break;
 8007236:	e014      	b.n	8007262 <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800723c:	2210      	movs	r2, #16
 800723e:	431a      	orrs	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 8007244:	2317      	movs	r3, #23
 8007246:	18fb      	adds	r3, r7, r3
 8007248:	2201      	movs	r2, #1
 800724a:	701a      	strb	r2, [r3, #0]
        break;
 800724c:	e009      	b.n	8007262 <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007252:	2210      	movs	r2, #16
 8007254:	431a      	orrs	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Return error status */
    status =  HAL_ERROR;
 800725a:	2317      	movs	r3, #23
 800725c:	18fb      	adds	r3, r7, r3
 800725e:	2201      	movs	r2, #1
 8007260:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007262:	2317      	movs	r3, #23
 8007264:	18fb      	adds	r3, r7, r3
 8007266:	781b      	ldrb	r3, [r3, #0]
}
 8007268:	0018      	movs	r0, r3
 800726a:	46bd      	mov	sp, r7
 800726c:	b006      	add	sp, #24
 800726e:	bd80      	pop	{r7, pc}
 8007270:	0800e9ec 	.word	0x0800e9ec

08007274 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007274:	b5b0      	push	{r4, r5, r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	0018      	movs	r0, r3
 8007286:	f7ff fd7f 	bl	8006d88 <LL_ADC_REG_IsConversionOngoing>
 800728a:	1e03      	subs	r3, r0, #0
 800728c:	d16c      	bne.n	8007368 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2254      	movs	r2, #84	@ 0x54
 8007292:	5c9b      	ldrb	r3, [r3, r2]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d101      	bne.n	800729c <HAL_ADC_Start_DMA+0x28>
 8007298:	2302      	movs	r3, #2
 800729a:	e06c      	b.n	8007376 <HAL_ADC_Start_DMA+0x102>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2254      	movs	r2, #84	@ 0x54
 80072a0:	2101      	movs	r1, #1
 80072a2:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	2201      	movs	r2, #1
 80072ac:	4013      	ands	r3, r2
 80072ae:	d113      	bne.n	80072d8 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	0018      	movs	r0, r3
 80072b6:	f7ff fd21 	bl	8006cfc <LL_ADC_IsEnabled>
 80072ba:	1e03      	subs	r3, r0, #0
 80072bc:	d004      	beq.n	80072c8 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	0018      	movs	r0, r3
 80072c4:	f7ff fd08 	bl	8006cd8 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68da      	ldr	r2, [r3, #12]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2101      	movs	r1, #1
 80072d4:	430a      	orrs	r2, r1
 80072d6:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80072d8:	2517      	movs	r5, #23
 80072da:	197c      	adds	r4, r7, r5
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	0018      	movs	r0, r3
 80072e0:	f000 fb02 	bl	80078e8 <ADC_Enable>
 80072e4:	0003      	movs	r3, r0
 80072e6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80072e8:	002c      	movs	r4, r5
 80072ea:	193b      	adds	r3, r7, r4
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d13e      	bne.n	8007370 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072f6:	4a22      	ldr	r2, [pc, #136]	@ (8007380 <HAL_ADC_Start_DMA+0x10c>)
 80072f8:	4013      	ands	r3, r2
 80072fa:	2280      	movs	r2, #128	@ 0x80
 80072fc:	0052      	lsls	r2, r2, #1
 80072fe:	431a      	orrs	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800730e:	4a1d      	ldr	r2, [pc, #116]	@ (8007384 <HAL_ADC_Start_DMA+0x110>)
 8007310:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007316:	4a1c      	ldr	r2, [pc, #112]	@ (8007388 <HAL_ADC_Start_DMA+0x114>)
 8007318:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800731e:	4a1b      	ldr	r2, [pc, #108]	@ (800738c <HAL_ADC_Start_DMA+0x118>)
 8007320:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	221c      	movs	r2, #28
 8007328:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2254      	movs	r2, #84	@ 0x54
 800732e:	2100      	movs	r1, #0
 8007330:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2110      	movs	r1, #16
 800733e:	430a      	orrs	r2, r1
 8007340:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3340      	adds	r3, #64	@ 0x40
 800734c:	0019      	movs	r1, r3
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	193c      	adds	r4, r7, r4
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f000 ff84 	bl	8008260 <HAL_DMA_Start_IT>
 8007358:	0003      	movs	r3, r0
 800735a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	0018      	movs	r0, r3
 8007362:	f7ff fced 	bl	8006d40 <LL_ADC_REG_StartConversion>
 8007366:	e003      	b.n	8007370 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007368:	2317      	movs	r3, #23
 800736a:	18fb      	adds	r3, r7, r3
 800736c:	2202      	movs	r2, #2
 800736e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8007370:	2317      	movs	r3, #23
 8007372:	18fb      	adds	r3, r7, r3
 8007374:	781b      	ldrb	r3, [r3, #0]
}
 8007376:	0018      	movs	r0, r3
 8007378:	46bd      	mov	sp, r7
 800737a:	b006      	add	sp, #24
 800737c:	bdb0      	pop	{r4, r5, r7, pc}
 800737e:	46c0      	nop			@ (mov r8, r8)
 8007380:	fffff0fe 	.word	0xfffff0fe
 8007384:	08007ab1 	.word	0x08007ab1
 8007388:	08007b7d 	.word	0x08007b7d
 800738c:	08007b9d 	.word	0x08007b9d

08007390 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8007390:	b5b0      	push	{r4, r5, r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2254      	movs	r2, #84	@ 0x54
 800739c:	5c9b      	ldrb	r3, [r3, r2]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d101      	bne.n	80073a6 <HAL_ADC_Stop_DMA+0x16>
 80073a2:	2302      	movs	r3, #2
 80073a4:	e05f      	b.n	8007466 <HAL_ADC_Stop_DMA+0xd6>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2254      	movs	r2, #84	@ 0x54
 80073aa:	2101      	movs	r1, #1
 80073ac:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80073ae:	250f      	movs	r5, #15
 80073b0:	197c      	adds	r4, r7, r5
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	0018      	movs	r0, r3
 80073b6:	f000 fa55 	bl	8007864 <ADC_ConversionStop>
 80073ba:	0003      	movs	r3, r0
 80073bc:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80073be:	0029      	movs	r1, r5
 80073c0:	187b      	adds	r3, r7, r1
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d147      	bne.n	8007458 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073cc:	2225      	movs	r2, #37	@ 0x25
 80073ce:	5c9b      	ldrb	r3, [r3, r2]
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d112      	bne.n	80073fc <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073da:	000d      	movs	r5, r1
 80073dc:	187c      	adds	r4, r7, r1
 80073de:	0018      	movs	r0, r3
 80073e0:	f000 ffc4 	bl	800836c <HAL_DMA_Abort>
 80073e4:	0003      	movs	r3, r0
 80073e6:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80073e8:	197b      	adds	r3, r7, r5
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d005      	beq.n	80073fc <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073f4:	2240      	movs	r2, #64	@ 0x40
 80073f6:	431a      	orrs	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2110      	movs	r1, #16
 8007408:	438a      	bics	r2, r1
 800740a:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800740c:	220f      	movs	r2, #15
 800740e:	18bb      	adds	r3, r7, r2
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d107      	bne.n	8007426 <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8007416:	18bc      	adds	r4, r7, r2
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	0018      	movs	r0, r3
 800741c:	f000 faea 	bl	80079f4 <ADC_Disable>
 8007420:	0003      	movs	r3, r0
 8007422:	7023      	strb	r3, [r4, #0]
 8007424:	e003      	b.n	800742e <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	0018      	movs	r0, r3
 800742a:	f000 fae3 	bl	80079f4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800742e:	230f      	movs	r3, #15
 8007430:	18fb      	adds	r3, r7, r3
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d107      	bne.n	8007448 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800743c:	4a0c      	ldr	r2, [pc, #48]	@ (8007470 <HAL_ADC_Stop_DMA+0xe0>)
 800743e:	4013      	ands	r3, r2
 8007440:	2201      	movs	r2, #1
 8007442:	431a      	orrs	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68da      	ldr	r2, [r3, #12]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2101      	movs	r1, #1
 8007454:	438a      	bics	r2, r1
 8007456:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2254      	movs	r2, #84	@ 0x54
 800745c:	2100      	movs	r1, #0
 800745e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8007460:	230f      	movs	r3, #15
 8007462:	18fb      	adds	r3, r7, r3
 8007464:	781b      	ldrb	r3, [r3, #0]
}
 8007466:	0018      	movs	r0, r3
 8007468:	46bd      	mov	sp, r7
 800746a:	b004      	add	sp, #16
 800746c:	bdb0      	pop	{r4, r5, r7, pc}
 800746e:	46c0      	nop			@ (mov r8, r8)
 8007470:	fffffefe 	.word	0xfffffefe

08007474 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800747c:	46c0      	nop			@ (mov r8, r8)
 800747e:	46bd      	mov	sp, r7
 8007480:	b002      	add	sp, #8
 8007482:	bd80      	pop	{r7, pc}

08007484 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800748c:	46c0      	nop			@ (mov r8, r8)
 800748e:	46bd      	mov	sp, r7
 8007490:	b002      	add	sp, #8
 8007492:	bd80      	pop	{r7, pc}

08007494 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800749c:	46c0      	nop			@ (mov r8, r8)
 800749e:	46bd      	mov	sp, r7
 80074a0:	b002      	add	sp, #8
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80074ac:	46c0      	nop			@ (mov r8, r8)
 80074ae:	46bd      	mov	sp, r7
 80074b0:	b002      	add	sp, #8
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80074be:	2317      	movs	r3, #23
 80074c0:	18fb      	adds	r3, r7, r3
 80074c2:	2200      	movs	r2, #0
 80074c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2254      	movs	r2, #84	@ 0x54
 80074ce:	5c9b      	ldrb	r3, [r3, r2]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d101      	bne.n	80074d8 <HAL_ADC_ConfigChannel+0x24>
 80074d4:	2302      	movs	r3, #2
 80074d6:	e1c0      	b.n	800785a <HAL_ADC_ConfigChannel+0x3a6>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2254      	movs	r2, #84	@ 0x54
 80074dc:	2101      	movs	r1, #1
 80074de:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	0018      	movs	r0, r3
 80074e6:	f7ff fc4f 	bl	8006d88 <LL_ADC_REG_IsConversionOngoing>
 80074ea:	1e03      	subs	r3, r0, #0
 80074ec:	d000      	beq.n	80074f0 <HAL_ADC_ConfigChannel+0x3c>
 80074ee:	e1a3      	b.n	8007838 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d100      	bne.n	80074fa <HAL_ADC_ConfigChannel+0x46>
 80074f8:	e143      	b.n	8007782 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	691a      	ldr	r2, [r3, #16]
 80074fe:	2380      	movs	r3, #128	@ 0x80
 8007500:	061b      	lsls	r3, r3, #24
 8007502:	429a      	cmp	r2, r3
 8007504:	d004      	beq.n	8007510 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800750a:	4ac1      	ldr	r2, [pc, #772]	@ (8007810 <HAL_ADC_ConfigChannel+0x35c>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d108      	bne.n	8007522 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	0019      	movs	r1, r3
 800751a:	0010      	movs	r0, r2
 800751c:	f7ff fb62 	bl	8006be4 <LL_ADC_REG_SetSequencerChAdd>
 8007520:	e0c9      	b.n	80076b6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	211f      	movs	r1, #31
 800752c:	400b      	ands	r3, r1
 800752e:	210f      	movs	r1, #15
 8007530:	4099      	lsls	r1, r3
 8007532:	000b      	movs	r3, r1
 8007534:	43db      	mvns	r3, r3
 8007536:	4013      	ands	r3, r2
 8007538:	0019      	movs	r1, r3
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	035b      	lsls	r3, r3, #13
 8007540:	0b5b      	lsrs	r3, r3, #13
 8007542:	d105      	bne.n	8007550 <HAL_ADC_ConfigChannel+0x9c>
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	0e9b      	lsrs	r3, r3, #26
 800754a:	221f      	movs	r2, #31
 800754c:	4013      	ands	r3, r2
 800754e:	e098      	b.n	8007682 <HAL_ADC_ConfigChannel+0x1ce>
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2201      	movs	r2, #1
 8007556:	4013      	ands	r3, r2
 8007558:	d000      	beq.n	800755c <HAL_ADC_ConfigChannel+0xa8>
 800755a:	e091      	b.n	8007680 <HAL_ADC_ConfigChannel+0x1cc>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2202      	movs	r2, #2
 8007562:	4013      	ands	r3, r2
 8007564:	d000      	beq.n	8007568 <HAL_ADC_ConfigChannel+0xb4>
 8007566:	e089      	b.n	800767c <HAL_ADC_ConfigChannel+0x1c8>
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2204      	movs	r2, #4
 800756e:	4013      	ands	r3, r2
 8007570:	d000      	beq.n	8007574 <HAL_ADC_ConfigChannel+0xc0>
 8007572:	e081      	b.n	8007678 <HAL_ADC_ConfigChannel+0x1c4>
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2208      	movs	r2, #8
 800757a:	4013      	ands	r3, r2
 800757c:	d000      	beq.n	8007580 <HAL_ADC_ConfigChannel+0xcc>
 800757e:	e079      	b.n	8007674 <HAL_ADC_ConfigChannel+0x1c0>
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2210      	movs	r2, #16
 8007586:	4013      	ands	r3, r2
 8007588:	d000      	beq.n	800758c <HAL_ADC_ConfigChannel+0xd8>
 800758a:	e071      	b.n	8007670 <HAL_ADC_ConfigChannel+0x1bc>
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2220      	movs	r2, #32
 8007592:	4013      	ands	r3, r2
 8007594:	d000      	beq.n	8007598 <HAL_ADC_ConfigChannel+0xe4>
 8007596:	e069      	b.n	800766c <HAL_ADC_ConfigChannel+0x1b8>
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2240      	movs	r2, #64	@ 0x40
 800759e:	4013      	ands	r3, r2
 80075a0:	d000      	beq.n	80075a4 <HAL_ADC_ConfigChannel+0xf0>
 80075a2:	e061      	b.n	8007668 <HAL_ADC_ConfigChannel+0x1b4>
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2280      	movs	r2, #128	@ 0x80
 80075aa:	4013      	ands	r3, r2
 80075ac:	d000      	beq.n	80075b0 <HAL_ADC_ConfigChannel+0xfc>
 80075ae:	e059      	b.n	8007664 <HAL_ADC_ConfigChannel+0x1b0>
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	2380      	movs	r3, #128	@ 0x80
 80075b6:	005b      	lsls	r3, r3, #1
 80075b8:	4013      	ands	r3, r2
 80075ba:	d151      	bne.n	8007660 <HAL_ADC_ConfigChannel+0x1ac>
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	2380      	movs	r3, #128	@ 0x80
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4013      	ands	r3, r2
 80075c6:	d149      	bne.n	800765c <HAL_ADC_ConfigChannel+0x1a8>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	2380      	movs	r3, #128	@ 0x80
 80075ce:	00db      	lsls	r3, r3, #3
 80075d0:	4013      	ands	r3, r2
 80075d2:	d141      	bne.n	8007658 <HAL_ADC_ConfigChannel+0x1a4>
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	2380      	movs	r3, #128	@ 0x80
 80075da:	011b      	lsls	r3, r3, #4
 80075dc:	4013      	ands	r3, r2
 80075de:	d139      	bne.n	8007654 <HAL_ADC_ConfigChannel+0x1a0>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	2380      	movs	r3, #128	@ 0x80
 80075e6:	015b      	lsls	r3, r3, #5
 80075e8:	4013      	ands	r3, r2
 80075ea:	d131      	bne.n	8007650 <HAL_ADC_ConfigChannel+0x19c>
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	2380      	movs	r3, #128	@ 0x80
 80075f2:	019b      	lsls	r3, r3, #6
 80075f4:	4013      	ands	r3, r2
 80075f6:	d129      	bne.n	800764c <HAL_ADC_ConfigChannel+0x198>
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	2380      	movs	r3, #128	@ 0x80
 80075fe:	01db      	lsls	r3, r3, #7
 8007600:	4013      	ands	r3, r2
 8007602:	d121      	bne.n	8007648 <HAL_ADC_ConfigChannel+0x194>
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	2380      	movs	r3, #128	@ 0x80
 800760a:	021b      	lsls	r3, r3, #8
 800760c:	4013      	ands	r3, r2
 800760e:	d119      	bne.n	8007644 <HAL_ADC_ConfigChannel+0x190>
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	2380      	movs	r3, #128	@ 0x80
 8007616:	025b      	lsls	r3, r3, #9
 8007618:	4013      	ands	r3, r2
 800761a:	d111      	bne.n	8007640 <HAL_ADC_ConfigChannel+0x18c>
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	2380      	movs	r3, #128	@ 0x80
 8007622:	029b      	lsls	r3, r3, #10
 8007624:	4013      	ands	r3, r2
 8007626:	d109      	bne.n	800763c <HAL_ADC_ConfigChannel+0x188>
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	2380      	movs	r3, #128	@ 0x80
 800762e:	02db      	lsls	r3, r3, #11
 8007630:	4013      	ands	r3, r2
 8007632:	d001      	beq.n	8007638 <HAL_ADC_ConfigChannel+0x184>
 8007634:	2312      	movs	r3, #18
 8007636:	e024      	b.n	8007682 <HAL_ADC_ConfigChannel+0x1ce>
 8007638:	2300      	movs	r3, #0
 800763a:	e022      	b.n	8007682 <HAL_ADC_ConfigChannel+0x1ce>
 800763c:	2311      	movs	r3, #17
 800763e:	e020      	b.n	8007682 <HAL_ADC_ConfigChannel+0x1ce>
 8007640:	2310      	movs	r3, #16
 8007642:	e01e      	b.n	8007682 <HAL_ADC_ConfigChannel+0x1ce>
 8007644:	230f      	movs	r3, #15
 8007646:	e01c      	b.n	8007682 <HAL_ADC_ConfigChannel+0x1ce>
 8007648:	230e      	movs	r3, #14
 800764a:	e01a      	b.n	8007682 <HAL_ADC_ConfigChannel+0x1ce>
 800764c:	230d      	movs	r3, #13
 800764e:	e018      	b.n	8007682 <HAL_ADC_ConfigChannel+0x1ce>
 8007650:	230c      	movs	r3, #12
 8007652:	e016      	b.n	8007682 <HAL_ADC_ConfigChannel+0x1ce>
 8007654:	230b      	movs	r3, #11
 8007656:	e014      	b.n	8007682 <HAL_ADC_ConfigChannel+0x1ce>
 8007658:	230a      	movs	r3, #10
 800765a:	e012      	b.n	8007682 <HAL_ADC_ConfigChannel+0x1ce>
 800765c:	2309      	movs	r3, #9
 800765e:	e010      	b.n	8007682 <HAL_ADC_ConfigChannel+0x1ce>
 8007660:	2308      	movs	r3, #8
 8007662:	e00e      	b.n	8007682 <HAL_ADC_ConfigChannel+0x1ce>
 8007664:	2307      	movs	r3, #7
 8007666:	e00c      	b.n	8007682 <HAL_ADC_ConfigChannel+0x1ce>
 8007668:	2306      	movs	r3, #6
 800766a:	e00a      	b.n	8007682 <HAL_ADC_ConfigChannel+0x1ce>
 800766c:	2305      	movs	r3, #5
 800766e:	e008      	b.n	8007682 <HAL_ADC_ConfigChannel+0x1ce>
 8007670:	2304      	movs	r3, #4
 8007672:	e006      	b.n	8007682 <HAL_ADC_ConfigChannel+0x1ce>
 8007674:	2303      	movs	r3, #3
 8007676:	e004      	b.n	8007682 <HAL_ADC_ConfigChannel+0x1ce>
 8007678:	2302      	movs	r3, #2
 800767a:	e002      	b.n	8007682 <HAL_ADC_ConfigChannel+0x1ce>
 800767c:	2301      	movs	r3, #1
 800767e:	e000      	b.n	8007682 <HAL_ADC_ConfigChannel+0x1ce>
 8007680:	2300      	movs	r3, #0
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	6852      	ldr	r2, [r2, #4]
 8007686:	201f      	movs	r0, #31
 8007688:	4002      	ands	r2, r0
 800768a:	4093      	lsls	r3, r2
 800768c:	000a      	movs	r2, r1
 800768e:	431a      	orrs	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	089b      	lsrs	r3, r3, #2
 800769a:	1c5a      	adds	r2, r3, #1
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	69db      	ldr	r3, [r3, #28]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d808      	bhi.n	80076b6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	6859      	ldr	r1, [r3, #4]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	001a      	movs	r2, r3
 80076b2:	f7ff fa77 	bl	8006ba4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6818      	ldr	r0, [r3, #0]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	6819      	ldr	r1, [r3, #0]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	001a      	movs	r2, r3
 80076c4:	f7ff fab2 	bl	8006c2c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	db00      	blt.n	80076d2 <HAL_ADC_ConfigChannel+0x21e>
 80076d0:	e0bc      	b.n	800784c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80076d2:	4b50      	ldr	r3, [pc, #320]	@ (8007814 <HAL_ADC_ConfigChannel+0x360>)
 80076d4:	0018      	movs	r0, r3
 80076d6:	f7ff fa13 	bl	8006b00 <LL_ADC_GetCommonPathInternalCh>
 80076da:	0003      	movs	r3, r0
 80076dc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a4d      	ldr	r2, [pc, #308]	@ (8007818 <HAL_ADC_ConfigChannel+0x364>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d122      	bne.n	800772e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	2380      	movs	r3, #128	@ 0x80
 80076ec:	041b      	lsls	r3, r3, #16
 80076ee:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80076f0:	d11d      	bne.n	800772e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	2280      	movs	r2, #128	@ 0x80
 80076f6:	0412      	lsls	r2, r2, #16
 80076f8:	4313      	orrs	r3, r2
 80076fa:	4a46      	ldr	r2, [pc, #280]	@ (8007814 <HAL_ADC_ConfigChannel+0x360>)
 80076fc:	0019      	movs	r1, r3
 80076fe:	0010      	movs	r0, r2
 8007700:	f7ff f9ea 	bl	8006ad8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007704:	4b45      	ldr	r3, [pc, #276]	@ (800781c <HAL_ADC_ConfigChannel+0x368>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4945      	ldr	r1, [pc, #276]	@ (8007820 <HAL_ADC_ConfigChannel+0x36c>)
 800770a:	0018      	movs	r0, r3
 800770c:	f7f8 fcfc 	bl	8000108 <__udivsi3>
 8007710:	0003      	movs	r3, r0
 8007712:	1c5a      	adds	r2, r3, #1
 8007714:	0013      	movs	r3, r2
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	189b      	adds	r3, r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800771e:	e002      	b.n	8007726 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	3b01      	subs	r3, #1
 8007724:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1f9      	bne.n	8007720 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800772c:	e08e      	b.n	800784c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a3c      	ldr	r2, [pc, #240]	@ (8007824 <HAL_ADC_ConfigChannel+0x370>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d10e      	bne.n	8007756 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	2380      	movs	r3, #128	@ 0x80
 800773c:	045b      	lsls	r3, r3, #17
 800773e:	4013      	ands	r3, r2
 8007740:	d109      	bne.n	8007756 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	2280      	movs	r2, #128	@ 0x80
 8007746:	0452      	lsls	r2, r2, #17
 8007748:	4313      	orrs	r3, r2
 800774a:	4a32      	ldr	r2, [pc, #200]	@ (8007814 <HAL_ADC_ConfigChannel+0x360>)
 800774c:	0019      	movs	r1, r3
 800774e:	0010      	movs	r0, r2
 8007750:	f7ff f9c2 	bl	8006ad8 <LL_ADC_SetCommonPathInternalCh>
 8007754:	e07a      	b.n	800784c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a33      	ldr	r2, [pc, #204]	@ (8007828 <HAL_ADC_ConfigChannel+0x374>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d000      	beq.n	8007762 <HAL_ADC_ConfigChannel+0x2ae>
 8007760:	e074      	b.n	800784c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	2380      	movs	r3, #128	@ 0x80
 8007766:	03db      	lsls	r3, r3, #15
 8007768:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800776a:	d000      	beq.n	800776e <HAL_ADC_ConfigChannel+0x2ba>
 800776c:	e06e      	b.n	800784c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	2280      	movs	r2, #128	@ 0x80
 8007772:	03d2      	lsls	r2, r2, #15
 8007774:	4313      	orrs	r3, r2
 8007776:	4a27      	ldr	r2, [pc, #156]	@ (8007814 <HAL_ADC_ConfigChannel+0x360>)
 8007778:	0019      	movs	r1, r3
 800777a:	0010      	movs	r0, r2
 800777c:	f7ff f9ac 	bl	8006ad8 <LL_ADC_SetCommonPathInternalCh>
 8007780:	e064      	b.n	800784c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	691a      	ldr	r2, [r3, #16]
 8007786:	2380      	movs	r3, #128	@ 0x80
 8007788:	061b      	lsls	r3, r3, #24
 800778a:	429a      	cmp	r2, r3
 800778c:	d004      	beq.n	8007798 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007792:	4a1f      	ldr	r2, [pc, #124]	@ (8007810 <HAL_ADC_ConfigChannel+0x35c>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d107      	bne.n	80077a8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	0019      	movs	r1, r3
 80077a2:	0010      	movs	r0, r2
 80077a4:	f7ff fa2f 	bl	8006c06 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	da4d      	bge.n	800784c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80077b0:	4b18      	ldr	r3, [pc, #96]	@ (8007814 <HAL_ADC_ConfigChannel+0x360>)
 80077b2:	0018      	movs	r0, r3
 80077b4:	f7ff f9a4 	bl	8006b00 <LL_ADC_GetCommonPathInternalCh>
 80077b8:	0003      	movs	r3, r0
 80077ba:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a15      	ldr	r2, [pc, #84]	@ (8007818 <HAL_ADC_ConfigChannel+0x364>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d108      	bne.n	80077d8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	4a18      	ldr	r2, [pc, #96]	@ (800782c <HAL_ADC_ConfigChannel+0x378>)
 80077ca:	4013      	ands	r3, r2
 80077cc:	4a11      	ldr	r2, [pc, #68]	@ (8007814 <HAL_ADC_ConfigChannel+0x360>)
 80077ce:	0019      	movs	r1, r3
 80077d0:	0010      	movs	r0, r2
 80077d2:	f7ff f981 	bl	8006ad8 <LL_ADC_SetCommonPathInternalCh>
 80077d6:	e039      	b.n	800784c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a11      	ldr	r2, [pc, #68]	@ (8007824 <HAL_ADC_ConfigChannel+0x370>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d108      	bne.n	80077f4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	4a12      	ldr	r2, [pc, #72]	@ (8007830 <HAL_ADC_ConfigChannel+0x37c>)
 80077e6:	4013      	ands	r3, r2
 80077e8:	4a0a      	ldr	r2, [pc, #40]	@ (8007814 <HAL_ADC_ConfigChannel+0x360>)
 80077ea:	0019      	movs	r1, r3
 80077ec:	0010      	movs	r0, r2
 80077ee:	f7ff f973 	bl	8006ad8 <LL_ADC_SetCommonPathInternalCh>
 80077f2:	e02b      	b.n	800784c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a0b      	ldr	r2, [pc, #44]	@ (8007828 <HAL_ADC_ConfigChannel+0x374>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d126      	bne.n	800784c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	4a0c      	ldr	r2, [pc, #48]	@ (8007834 <HAL_ADC_ConfigChannel+0x380>)
 8007802:	4013      	ands	r3, r2
 8007804:	4a03      	ldr	r2, [pc, #12]	@ (8007814 <HAL_ADC_ConfigChannel+0x360>)
 8007806:	0019      	movs	r1, r3
 8007808:	0010      	movs	r0, r2
 800780a:	f7ff f965 	bl	8006ad8 <LL_ADC_SetCommonPathInternalCh>
 800780e:	e01d      	b.n	800784c <HAL_ADC_ConfigChannel+0x398>
 8007810:	80000004 	.word	0x80000004
 8007814:	40012708 	.word	0x40012708
 8007818:	b0001000 	.word	0xb0001000
 800781c:	2000044c 	.word	0x2000044c
 8007820:	00030d40 	.word	0x00030d40
 8007824:	b8004000 	.word	0xb8004000
 8007828:	b4002000 	.word	0xb4002000
 800782c:	ff7fffff 	.word	0xff7fffff
 8007830:	feffffff 	.word	0xfeffffff
 8007834:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800783c:	2220      	movs	r2, #32
 800783e:	431a      	orrs	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8007844:	2317      	movs	r3, #23
 8007846:	18fb      	adds	r3, r7, r3
 8007848:	2201      	movs	r2, #1
 800784a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2254      	movs	r2, #84	@ 0x54
 8007850:	2100      	movs	r1, #0
 8007852:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8007854:	2317      	movs	r3, #23
 8007856:	18fb      	adds	r3, r7, r3
 8007858:	781b      	ldrb	r3, [r3, #0]
}
 800785a:	0018      	movs	r0, r3
 800785c:	46bd      	mov	sp, r7
 800785e:	b006      	add	sp, #24
 8007860:	bd80      	pop	{r7, pc}
 8007862:	46c0      	nop			@ (mov r8, r8)

08007864 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	0018      	movs	r0, r3
 8007872:	f7ff fa89 	bl	8006d88 <LL_ADC_REG_IsConversionOngoing>
 8007876:	1e03      	subs	r3, r0, #0
 8007878:	d031      	beq.n	80078de <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	0018      	movs	r0, r3
 8007880:	f7ff fa4d 	bl	8006d1e <LL_ADC_IsDisableOngoing>
 8007884:	1e03      	subs	r3, r0, #0
 8007886:	d104      	bne.n	8007892 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	0018      	movs	r0, r3
 800788e:	f7ff fa69 	bl	8006d64 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007892:	f7ff f917 	bl	8006ac4 <HAL_GetTick>
 8007896:	0003      	movs	r3, r0
 8007898:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800789a:	e01a      	b.n	80078d2 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800789c:	f7ff f912 	bl	8006ac4 <HAL_GetTick>
 80078a0:	0002      	movs	r2, r0
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d913      	bls.n	80078d2 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	2204      	movs	r2, #4
 80078b2:	4013      	ands	r3, r2
 80078b4:	d00d      	beq.n	80078d2 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ba:	2210      	movs	r2, #16
 80078bc:	431a      	orrs	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078c6:	2201      	movs	r2, #1
 80078c8:	431a      	orrs	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e006      	b.n	80078e0 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	2204      	movs	r2, #4
 80078da:	4013      	ands	r3, r2
 80078dc:	d1de      	bne.n	800789c <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	0018      	movs	r0, r3
 80078e2:	46bd      	mov	sp, r7
 80078e4:	b004      	add	sp, #16
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80078f0:	2300      	movs	r3, #0
 80078f2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	0018      	movs	r0, r3
 80078fa:	f7ff f9ff 	bl	8006cfc <LL_ADC_IsEnabled>
 80078fe:	1e03      	subs	r3, r0, #0
 8007900:	d000      	beq.n	8007904 <ADC_Enable+0x1c>
 8007902:	e069      	b.n	80079d8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	4a36      	ldr	r2, [pc, #216]	@ (80079e4 <ADC_Enable+0xfc>)
 800790c:	4013      	ands	r3, r2
 800790e:	d00d      	beq.n	800792c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007914:	2210      	movs	r2, #16
 8007916:	431a      	orrs	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007920:	2201      	movs	r2, #1
 8007922:	431a      	orrs	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e056      	b.n	80079da <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	0018      	movs	r0, r3
 8007932:	f7ff f9bf 	bl	8006cb4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8007936:	4b2c      	ldr	r3, [pc, #176]	@ (80079e8 <ADC_Enable+0x100>)
 8007938:	0018      	movs	r0, r3
 800793a:	f7ff f8e1 	bl	8006b00 <LL_ADC_GetCommonPathInternalCh>
 800793e:	0002      	movs	r2, r0
 8007940:	2380      	movs	r3, #128	@ 0x80
 8007942:	041b      	lsls	r3, r3, #16
 8007944:	4013      	ands	r3, r2
 8007946:	d00f      	beq.n	8007968 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007948:	4b28      	ldr	r3, [pc, #160]	@ (80079ec <ADC_Enable+0x104>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4928      	ldr	r1, [pc, #160]	@ (80079f0 <ADC_Enable+0x108>)
 800794e:	0018      	movs	r0, r3
 8007950:	f7f8 fbda 	bl	8000108 <__udivsi3>
 8007954:	0003      	movs	r3, r0
 8007956:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8007958:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800795a:	e002      	b.n	8007962 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	3b01      	subs	r3, #1
 8007960:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1f9      	bne.n	800795c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	7e5b      	ldrb	r3, [r3, #25]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d033      	beq.n	80079d8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8007970:	f7ff f8a8 	bl	8006ac4 <HAL_GetTick>
 8007974:	0003      	movs	r3, r0
 8007976:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007978:	e027      	b.n	80079ca <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	0018      	movs	r0, r3
 8007980:	f7ff f9bc 	bl	8006cfc <LL_ADC_IsEnabled>
 8007984:	1e03      	subs	r3, r0, #0
 8007986:	d104      	bne.n	8007992 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	0018      	movs	r0, r3
 800798e:	f7ff f991 	bl	8006cb4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007992:	f7ff f897 	bl	8006ac4 <HAL_GetTick>
 8007996:	0002      	movs	r2, r0
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d914      	bls.n	80079ca <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2201      	movs	r2, #1
 80079a8:	4013      	ands	r3, r2
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d00d      	beq.n	80079ca <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079b2:	2210      	movs	r2, #16
 80079b4:	431a      	orrs	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079be:	2201      	movs	r2, #1
 80079c0:	431a      	orrs	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e007      	b.n	80079da <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2201      	movs	r2, #1
 80079d2:	4013      	ands	r3, r2
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d1d0      	bne.n	800797a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	0018      	movs	r0, r3
 80079dc:	46bd      	mov	sp, r7
 80079de:	b004      	add	sp, #16
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	46c0      	nop			@ (mov r8, r8)
 80079e4:	80000017 	.word	0x80000017
 80079e8:	40012708 	.word	0x40012708
 80079ec:	2000044c 	.word	0x2000044c
 80079f0:	00030d40 	.word	0x00030d40

080079f4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	0018      	movs	r0, r3
 8007a02:	f7ff f98c 	bl	8006d1e <LL_ADC_IsDisableOngoing>
 8007a06:	0003      	movs	r3, r0
 8007a08:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	0018      	movs	r0, r3
 8007a10:	f7ff f974 	bl	8006cfc <LL_ADC_IsEnabled>
 8007a14:	1e03      	subs	r3, r0, #0
 8007a16:	d046      	beq.n	8007aa6 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d143      	bne.n	8007aa6 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	2205      	movs	r2, #5
 8007a26:	4013      	ands	r3, r2
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d10d      	bne.n	8007a48 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	0018      	movs	r0, r3
 8007a32:	f7ff f951 	bl	8006cd8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2203      	movs	r2, #3
 8007a3c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007a3e:	f7ff f841 	bl	8006ac4 <HAL_GetTick>
 8007a42:	0003      	movs	r3, r0
 8007a44:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007a46:	e028      	b.n	8007a9a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a4c:	2210      	movs	r2, #16
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a58:	2201      	movs	r2, #1
 8007a5a:	431a      	orrs	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e021      	b.n	8007aa8 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007a64:	f7ff f82e 	bl	8006ac4 <HAL_GetTick>
 8007a68:	0002      	movs	r2, r0
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d913      	bls.n	8007a9a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	d00d      	beq.n	8007a9a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a82:	2210      	movs	r2, #16
 8007a84:	431a      	orrs	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a8e:	2201      	movs	r2, #1
 8007a90:	431a      	orrs	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e006      	b.n	8007aa8 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	d1de      	bne.n	8007a64 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	b004      	add	sp, #16
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007abc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ac2:	2250      	movs	r2, #80	@ 0x50
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	d142      	bne.n	8007b4e <ADC_DMAConvCplt+0x9e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007acc:	2280      	movs	r2, #128	@ 0x80
 8007ace:	0092      	lsls	r2, r2, #2
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	0018      	movs	r0, r3
 8007adc:	f7ff f851 	bl	8006b82 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007ae0:	1e03      	subs	r3, r0, #0
 8007ae2:	d02e      	beq.n	8007b42 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	7e9b      	ldrb	r3, [r3, #26]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d12a      	bne.n	8007b42 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2208      	movs	r2, #8
 8007af4:	4013      	ands	r3, r2
 8007af6:	2b08      	cmp	r3, #8
 8007af8:	d123      	bne.n	8007b42 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	0018      	movs	r0, r3
 8007b00:	f7ff f942 	bl	8006d88 <LL_ADC_REG_IsConversionOngoing>
 8007b04:	1e03      	subs	r3, r0, #0
 8007b06:	d110      	bne.n	8007b2a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	210c      	movs	r1, #12
 8007b14:	438a      	bics	r2, r1
 8007b16:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b1c:	4a16      	ldr	r2, [pc, #88]	@ (8007b78 <ADC_DMAConvCplt+0xc8>)
 8007b1e:	4013      	ands	r3, r2
 8007b20:	2201      	movs	r2, #1
 8007b22:	431a      	orrs	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	659a      	str	r2, [r3, #88]	@ 0x58
 8007b28:	e00b      	b.n	8007b42 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b2e:	2220      	movs	r2, #32
 8007b30:	431a      	orrs	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	0010      	movs	r0, r2
 8007b4a:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007b4c:	e010      	b.n	8007b70 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b52:	2210      	movs	r2, #16
 8007b54:	4013      	ands	r3, r2
 8007b56:	d005      	beq.n	8007b64 <ADC_DMAConvCplt+0xb4>
      hadc->ErrorCallback(hadc);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	0010      	movs	r0, r2
 8007b60:	4798      	blx	r3
}
 8007b62:	e005      	b.n	8007b70 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	0010      	movs	r0, r2
 8007b6e:	4798      	blx	r3
}
 8007b70:	46c0      	nop			@ (mov r8, r8)
 8007b72:	46bd      	mov	sp, r7
 8007b74:	b004      	add	sp, #16
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	fffffefe 	.word	0xfffffefe

08007b7c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b88:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	0010      	movs	r0, r2
 8007b92:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007b94:	46c0      	nop			@ (mov r8, r8)
 8007b96:	46bd      	mov	sp, r7
 8007b98:	b004      	add	sp, #16
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bae:	2240      	movs	r2, #64	@ 0x40
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bba:	2204      	movs	r2, #4
 8007bbc:	431a      	orrs	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	0010      	movs	r0, r2
 8007bca:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007bcc:	46c0      	nop			@ (mov r8, r8)
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	b004      	add	sp, #16
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <LL_ADC_GetCommonClock>:
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	23f0      	movs	r3, #240	@ 0xf0
 8007be2:	039b      	lsls	r3, r3, #14
 8007be4:	4013      	ands	r3, r2
}
 8007be6:	0018      	movs	r0, r3
 8007be8:	46bd      	mov	sp, r7
 8007bea:	b002      	add	sp, #8
 8007bec:	bd80      	pop	{r7, pc}

08007bee <LL_ADC_GetClock>:
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b082      	sub	sp, #8
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	0f9b      	lsrs	r3, r3, #30
 8007bfc:	079b      	lsls	r3, r3, #30
}
 8007bfe:	0018      	movs	r0, r3
 8007c00:	46bd      	mov	sp, r7
 8007c02:	b002      	add	sp, #8
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <LL_ADC_SetCalibrationFactor>:
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	22b4      	movs	r2, #180	@ 0xb4
 8007c14:	589b      	ldr	r3, [r3, r2]
 8007c16:	227f      	movs	r2, #127	@ 0x7f
 8007c18:	4393      	bics	r3, r2
 8007c1a:	001a      	movs	r2, r3
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	21b4      	movs	r1, #180	@ 0xb4
 8007c24:	505a      	str	r2, [r3, r1]
}
 8007c26:	46c0      	nop			@ (mov r8, r8)
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	b002      	add	sp, #8
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <LL_ADC_GetCalibrationFactor>:
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b082      	sub	sp, #8
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	22b4      	movs	r2, #180	@ 0xb4
 8007c3a:	589b      	ldr	r3, [r3, r2]
 8007c3c:	227f      	movs	r2, #127	@ 0x7f
 8007c3e:	4013      	ands	r3, r2
}
 8007c40:	0018      	movs	r0, r3
 8007c42:	46bd      	mov	sp, r7
 8007c44:	b002      	add	sp, #8
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <LL_ADC_Enable>:
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	4a04      	ldr	r2, [pc, #16]	@ (8007c68 <LL_ADC_Enable+0x20>)
 8007c56:	4013      	ands	r3, r2
 8007c58:	2201      	movs	r2, #1
 8007c5a:	431a      	orrs	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	609a      	str	r2, [r3, #8]
}
 8007c60:	46c0      	nop			@ (mov r8, r8)
 8007c62:	46bd      	mov	sp, r7
 8007c64:	b002      	add	sp, #8
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	7fffffe8 	.word	0x7fffffe8

08007c6c <LL_ADC_Disable>:
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	4a04      	ldr	r2, [pc, #16]	@ (8007c8c <LL_ADC_Disable+0x20>)
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	2202      	movs	r2, #2
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	609a      	str	r2, [r3, #8]
}
 8007c84:	46c0      	nop			@ (mov r8, r8)
 8007c86:	46bd      	mov	sp, r7
 8007c88:	b002      	add	sp, #8
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	7fffffe8 	.word	0x7fffffe8

08007c90 <LL_ADC_IsEnabled>:
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d101      	bne.n	8007ca8 <LL_ADC_IsEnabled+0x18>
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e000      	b.n	8007caa <LL_ADC_IsEnabled+0x1a>
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	0018      	movs	r0, r3
 8007cac:	46bd      	mov	sp, r7
 8007cae:	b002      	add	sp, #8
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <LL_ADC_StartCalibration>:
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	4a05      	ldr	r2, [pc, #20]	@ (8007cd8 <LL_ADC_StartCalibration+0x24>)
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	2280      	movs	r2, #128	@ 0x80
 8007cc6:	0612      	lsls	r2, r2, #24
 8007cc8:	431a      	orrs	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	609a      	str	r2, [r3, #8]
}
 8007cce:	46c0      	nop			@ (mov r8, r8)
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	b002      	add	sp, #8
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	46c0      	nop			@ (mov r8, r8)
 8007cd8:	7fffffe8 	.word	0x7fffffe8

08007cdc <LL_ADC_IsCalibrationOnGoing>:
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	0fdb      	lsrs	r3, r3, #31
 8007cea:	07da      	lsls	r2, r3, #31
 8007cec:	2380      	movs	r3, #128	@ 0x80
 8007cee:	061b      	lsls	r3, r3, #24
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d101      	bne.n	8007cf8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e000      	b.n	8007cfa <LL_ADC_IsCalibrationOnGoing+0x1e>
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	0018      	movs	r0, r3
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	b002      	add	sp, #8
 8007d00:	bd80      	pop	{r7, pc}
	...

08007d04 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8007d04:	b590      	push	{r4, r7, lr}
 8007d06:	b08b      	sub	sp, #44	@ 0x2c
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2254      	movs	r2, #84	@ 0x54
 8007d18:	5c9b      	ldrb	r3, [r3, r2]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d101      	bne.n	8007d22 <HAL_ADCEx_Calibration_Start+0x1e>
 8007d1e:	2302      	movs	r3, #2
 8007d20:	e0dd      	b.n	8007ede <HAL_ADCEx_Calibration_Start+0x1da>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2254      	movs	r2, #84	@ 0x54
 8007d26:	2101      	movs	r1, #1
 8007d28:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007d2a:	231f      	movs	r3, #31
 8007d2c:	18fc      	adds	r4, r7, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	0018      	movs	r0, r3
 8007d32:	f7ff fe5f 	bl	80079f4 <ADC_Disable>
 8007d36:	0003      	movs	r3, r0
 8007d38:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	0018      	movs	r0, r3
 8007d40:	f7ff ffa6 	bl	8007c90 <LL_ADC_IsEnabled>
 8007d44:	1e03      	subs	r3, r0, #0
 8007d46:	d000      	beq.n	8007d4a <HAL_ADCEx_Calibration_Start+0x46>
 8007d48:	e0bc      	b.n	8007ec4 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d4e:	4a66      	ldr	r2, [pc, #408]	@ (8007ee8 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8007d50:	4013      	ands	r3, r2
 8007d52:	2202      	movs	r2, #2
 8007d54:	431a      	orrs	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	4a62      	ldr	r2, [pc, #392]	@ (8007eec <HAL_ADCEx_Calibration_Start+0x1e8>)
 8007d62:	4013      	ands	r3, r2
 8007d64:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68da      	ldr	r2, [r3, #12]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	495f      	ldr	r1, [pc, #380]	@ (8007ef0 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8007d72:	400a      	ands	r2, r1
 8007d74:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8007d76:	2300      	movs	r3, #0
 8007d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d7a:	e02d      	b.n	8007dd8 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	0018      	movs	r0, r3
 8007d82:	f7ff ff97 	bl	8007cb4 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007d86:	e014      	b.n	8007db2 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	4a58      	ldr	r2, [pc, #352]	@ (8007ef4 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d90d      	bls.n	8007db2 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d9a:	2212      	movs	r2, #18
 8007d9c:	4393      	bics	r3, r2
 8007d9e:	2210      	movs	r2, #16
 8007da0:	431a      	orrs	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2254      	movs	r2, #84	@ 0x54
 8007daa:	2100      	movs	r1, #0
 8007dac:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e095      	b.n	8007ede <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	0018      	movs	r0, r3
 8007db8:	f7ff ff90 	bl	8007cdc <LL_ADC_IsCalibrationOnGoing>
 8007dbc:	1e03      	subs	r3, r0, #0
 8007dbe:	d1e3      	bne.n	8007d88 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	0018      	movs	r0, r3
 8007dc6:	f7ff ff32 	bl	8007c2e <LL_ADC_GetCalibrationFactor>
 8007dca:	0002      	movs	r2, r0
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	189b      	adds	r3, r3, r2
 8007dd0:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dda:	2b07      	cmp	r3, #7
 8007ddc:	d9ce      	bls.n	8007d7c <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8007dde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007de0:	6a38      	ldr	r0, [r7, #32]
 8007de2:	f7f8 f991 	bl	8000108 <__udivsi3>
 8007de6:	0003      	movs	r3, r0
 8007de8:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	0018      	movs	r0, r3
 8007df0:	f7ff ff2a 	bl	8007c48 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	0018      	movs	r0, r3
 8007dfa:	f7ff fef8 	bl	8007bee <LL_ADC_GetClock>
 8007dfe:	1e03      	subs	r3, r0, #0
 8007e00:	d11b      	bne.n	8007e3a <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007e02:	4b3d      	ldr	r3, [pc, #244]	@ (8007ef8 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8007e04:	0018      	movs	r0, r3
 8007e06:	f7ff fee5 	bl	8007bd4 <LL_ADC_GetCommonClock>
 8007e0a:	0003      	movs	r3, r0
 8007e0c:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	23e0      	movs	r3, #224	@ 0xe0
 8007e12:	035b      	lsls	r3, r3, #13
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d310      	bcc.n	8007e3a <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	0c9b      	lsrs	r3, r3, #18
 8007e1c:	3b03      	subs	r3, #3
 8007e1e:	2201      	movs	r2, #1
 8007e20:	409a      	lsls	r2, r3
 8007e22:	0013      	movs	r3, r2
 8007e24:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	085b      	lsrs	r3, r3, #1
 8007e2a:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8007e2c:	e002      	b.n	8007e34 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	3b01      	subs	r3, #1
 8007e32:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1f9      	bne.n	8007e2e <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	6a3a      	ldr	r2, [r7, #32]
 8007e40:	0011      	movs	r1, r2
 8007e42:	0018      	movs	r0, r3
 8007e44:	f7ff fedf 	bl	8007c06 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	0018      	movs	r0, r3
 8007e4e:	f7ff ff0d 	bl	8007c6c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007e52:	f7fe fe37 	bl	8006ac4 <HAL_GetTick>
 8007e56:	0003      	movs	r3, r0
 8007e58:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007e5a:	e01b      	b.n	8007e94 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007e5c:	f7fe fe32 	bl	8006ac4 <HAL_GetTick>
 8007e60:	0002      	movs	r2, r0
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d914      	bls.n	8007e94 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	0018      	movs	r0, r3
 8007e70:	f7ff ff0e 	bl	8007c90 <LL_ADC_IsEnabled>
 8007e74:	1e03      	subs	r3, r0, #0
 8007e76:	d00d      	beq.n	8007e94 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e7c:	2210      	movs	r2, #16
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e88:	2201      	movs	r2, #1
 8007e8a:	431a      	orrs	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e024      	b.n	8007ede <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	0018      	movs	r0, r3
 8007e9a:	f7ff fef9 	bl	8007c90 <LL_ADC_IsEnabled>
 8007e9e:	1e03      	subs	r3, r0, #0
 8007ea0:	d1dc      	bne.n	8007e5c <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68d9      	ldr	r1, [r3, #12]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	69ba      	ldr	r2, [r7, #24]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eb6:	2203      	movs	r2, #3
 8007eb8:	4393      	bics	r3, r2
 8007eba:	2201      	movs	r2, #1
 8007ebc:	431a      	orrs	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	659a      	str	r2, [r3, #88]	@ 0x58
 8007ec2:	e005      	b.n	8007ed0 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ec8:	2210      	movs	r2, #16
 8007eca:	431a      	orrs	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2254      	movs	r2, #84	@ 0x54
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8007ed8:	231f      	movs	r3, #31
 8007eda:	18fb      	adds	r3, r7, r3
 8007edc:	781b      	ldrb	r3, [r3, #0]
}
 8007ede:	0018      	movs	r0, r3
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	b00b      	add	sp, #44	@ 0x2c
 8007ee4:	bd90      	pop	{r4, r7, pc}
 8007ee6:	46c0      	nop			@ (mov r8, r8)
 8007ee8:	fffffefd 	.word	0xfffffefd
 8007eec:	00008003 	.word	0x00008003
 8007ef0:	ffff7ffc 	.word	0xffff7ffc
 8007ef4:	0002f1ff 	.word	0x0002f1ff
 8007ef8:	40012708 	.word	0x40012708

08007efc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007f04:	46c0      	nop			@ (mov r8, r8)
 8007f06:	46bd      	mov	sp, r7
 8007f08:	b002      	add	sp, #8
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007f14:	46c0      	nop			@ (mov r8, r8)
 8007f16:	46bd      	mov	sp, r7
 8007f18:	b002      	add	sp, #8
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007f24:	46c0      	nop			@ (mov r8, r8)
 8007f26:	46bd      	mov	sp, r7
 8007f28:	b002      	add	sp, #8
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	0002      	movs	r2, r0
 8007f34:	1dfb      	adds	r3, r7, #7
 8007f36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007f38:	1dfb      	adds	r3, r7, #7
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f3e:	d809      	bhi.n	8007f54 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f40:	1dfb      	adds	r3, r7, #7
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	001a      	movs	r2, r3
 8007f46:	231f      	movs	r3, #31
 8007f48:	401a      	ands	r2, r3
 8007f4a:	4b04      	ldr	r3, [pc, #16]	@ (8007f5c <__NVIC_EnableIRQ+0x30>)
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	4091      	lsls	r1, r2
 8007f50:	000a      	movs	r2, r1
 8007f52:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8007f54:	46c0      	nop			@ (mov r8, r8)
 8007f56:	46bd      	mov	sp, r7
 8007f58:	b002      	add	sp, #8
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	e000e100 	.word	0xe000e100

08007f60 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	0002      	movs	r2, r0
 8007f68:	1dfb      	adds	r3, r7, #7
 8007f6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007f6c:	1dfb      	adds	r3, r7, #7
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f72:	d810      	bhi.n	8007f96 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f74:	1dfb      	adds	r3, r7, #7
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	001a      	movs	r2, r3
 8007f7a:	231f      	movs	r3, #31
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	4908      	ldr	r1, [pc, #32]	@ (8007fa0 <__NVIC_DisableIRQ+0x40>)
 8007f80:	2201      	movs	r2, #1
 8007f82:	409a      	lsls	r2, r3
 8007f84:	0013      	movs	r3, r2
 8007f86:	2280      	movs	r2, #128	@ 0x80
 8007f88:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007f8a:	f3bf 8f4f 	dsb	sy
}
 8007f8e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8007f90:	f3bf 8f6f 	isb	sy
}
 8007f94:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8007f96:	46c0      	nop			@ (mov r8, r8)
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	b002      	add	sp, #8
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	46c0      	nop			@ (mov r8, r8)
 8007fa0:	e000e100 	.word	0xe000e100

08007fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007fa4:	b590      	push	{r4, r7, lr}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	0002      	movs	r2, r0
 8007fac:	6039      	str	r1, [r7, #0]
 8007fae:	1dfb      	adds	r3, r7, #7
 8007fb0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007fb2:	1dfb      	adds	r3, r7, #7
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	2b7f      	cmp	r3, #127	@ 0x7f
 8007fb8:	d828      	bhi.n	800800c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007fba:	4a2f      	ldr	r2, [pc, #188]	@ (8008078 <__NVIC_SetPriority+0xd4>)
 8007fbc:	1dfb      	adds	r3, r7, #7
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	b25b      	sxtb	r3, r3
 8007fc2:	089b      	lsrs	r3, r3, #2
 8007fc4:	33c0      	adds	r3, #192	@ 0xc0
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	589b      	ldr	r3, [r3, r2]
 8007fca:	1dfa      	adds	r2, r7, #7
 8007fcc:	7812      	ldrb	r2, [r2, #0]
 8007fce:	0011      	movs	r1, r2
 8007fd0:	2203      	movs	r2, #3
 8007fd2:	400a      	ands	r2, r1
 8007fd4:	00d2      	lsls	r2, r2, #3
 8007fd6:	21ff      	movs	r1, #255	@ 0xff
 8007fd8:	4091      	lsls	r1, r2
 8007fda:	000a      	movs	r2, r1
 8007fdc:	43d2      	mvns	r2, r2
 8007fde:	401a      	ands	r2, r3
 8007fe0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	019b      	lsls	r3, r3, #6
 8007fe6:	22ff      	movs	r2, #255	@ 0xff
 8007fe8:	401a      	ands	r2, r3
 8007fea:	1dfb      	adds	r3, r7, #7
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	0018      	movs	r0, r3
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	4003      	ands	r3, r0
 8007ff4:	00db      	lsls	r3, r3, #3
 8007ff6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007ff8:	481f      	ldr	r0, [pc, #124]	@ (8008078 <__NVIC_SetPriority+0xd4>)
 8007ffa:	1dfb      	adds	r3, r7, #7
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	b25b      	sxtb	r3, r3
 8008000:	089b      	lsrs	r3, r3, #2
 8008002:	430a      	orrs	r2, r1
 8008004:	33c0      	adds	r3, #192	@ 0xc0
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800800a:	e031      	b.n	8008070 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800800c:	4a1b      	ldr	r2, [pc, #108]	@ (800807c <__NVIC_SetPriority+0xd8>)
 800800e:	1dfb      	adds	r3, r7, #7
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	0019      	movs	r1, r3
 8008014:	230f      	movs	r3, #15
 8008016:	400b      	ands	r3, r1
 8008018:	3b08      	subs	r3, #8
 800801a:	089b      	lsrs	r3, r3, #2
 800801c:	3306      	adds	r3, #6
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	18d3      	adds	r3, r2, r3
 8008022:	3304      	adds	r3, #4
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	1dfa      	adds	r2, r7, #7
 8008028:	7812      	ldrb	r2, [r2, #0]
 800802a:	0011      	movs	r1, r2
 800802c:	2203      	movs	r2, #3
 800802e:	400a      	ands	r2, r1
 8008030:	00d2      	lsls	r2, r2, #3
 8008032:	21ff      	movs	r1, #255	@ 0xff
 8008034:	4091      	lsls	r1, r2
 8008036:	000a      	movs	r2, r1
 8008038:	43d2      	mvns	r2, r2
 800803a:	401a      	ands	r2, r3
 800803c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	019b      	lsls	r3, r3, #6
 8008042:	22ff      	movs	r2, #255	@ 0xff
 8008044:	401a      	ands	r2, r3
 8008046:	1dfb      	adds	r3, r7, #7
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	0018      	movs	r0, r3
 800804c:	2303      	movs	r3, #3
 800804e:	4003      	ands	r3, r0
 8008050:	00db      	lsls	r3, r3, #3
 8008052:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008054:	4809      	ldr	r0, [pc, #36]	@ (800807c <__NVIC_SetPriority+0xd8>)
 8008056:	1dfb      	adds	r3, r7, #7
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	001c      	movs	r4, r3
 800805c:	230f      	movs	r3, #15
 800805e:	4023      	ands	r3, r4
 8008060:	3b08      	subs	r3, #8
 8008062:	089b      	lsrs	r3, r3, #2
 8008064:	430a      	orrs	r2, r1
 8008066:	3306      	adds	r3, #6
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	18c3      	adds	r3, r0, r3
 800806c:	3304      	adds	r3, #4
 800806e:	601a      	str	r2, [r3, #0]
}
 8008070:	46c0      	nop			@ (mov r8, r8)
 8008072:	46bd      	mov	sp, r7
 8008074:	b003      	add	sp, #12
 8008076:	bd90      	pop	{r4, r7, pc}
 8008078:	e000e100 	.word	0xe000e100
 800807c:	e000ed00 	.word	0xe000ed00

08008080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	1e5a      	subs	r2, r3, #1
 800808c:	2380      	movs	r3, #128	@ 0x80
 800808e:	045b      	lsls	r3, r3, #17
 8008090:	429a      	cmp	r2, r3
 8008092:	d301      	bcc.n	8008098 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008094:	2301      	movs	r3, #1
 8008096:	e010      	b.n	80080ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008098:	4b0a      	ldr	r3, [pc, #40]	@ (80080c4 <SysTick_Config+0x44>)
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	3a01      	subs	r2, #1
 800809e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80080a0:	2301      	movs	r3, #1
 80080a2:	425b      	negs	r3, r3
 80080a4:	2103      	movs	r1, #3
 80080a6:	0018      	movs	r0, r3
 80080a8:	f7ff ff7c 	bl	8007fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80080ac:	4b05      	ldr	r3, [pc, #20]	@ (80080c4 <SysTick_Config+0x44>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80080b2:	4b04      	ldr	r3, [pc, #16]	@ (80080c4 <SysTick_Config+0x44>)
 80080b4:	2207      	movs	r2, #7
 80080b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	0018      	movs	r0, r3
 80080bc:	46bd      	mov	sp, r7
 80080be:	b002      	add	sp, #8
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	46c0      	nop			@ (mov r8, r8)
 80080c4:	e000e010 	.word	0xe000e010

080080c8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60b9      	str	r1, [r7, #8]
 80080d0:	607a      	str	r2, [r7, #4]
 80080d2:	210f      	movs	r1, #15
 80080d4:	187b      	adds	r3, r7, r1
 80080d6:	1c02      	adds	r2, r0, #0
 80080d8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	187b      	adds	r3, r7, r1
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	b25b      	sxtb	r3, r3
 80080e2:	0011      	movs	r1, r2
 80080e4:	0018      	movs	r0, r3
 80080e6:	f7ff ff5d 	bl	8007fa4 <__NVIC_SetPriority>
}
 80080ea:	46c0      	nop			@ (mov r8, r8)
 80080ec:	46bd      	mov	sp, r7
 80080ee:	b004      	add	sp, #16
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b082      	sub	sp, #8
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	0002      	movs	r2, r0
 80080fa:	1dfb      	adds	r3, r7, #7
 80080fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80080fe:	1dfb      	adds	r3, r7, #7
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	b25b      	sxtb	r3, r3
 8008104:	0018      	movs	r0, r3
 8008106:	f7ff ff11 	bl	8007f2c <__NVIC_EnableIRQ>
}
 800810a:	46c0      	nop			@ (mov r8, r8)
 800810c:	46bd      	mov	sp, r7
 800810e:	b002      	add	sp, #8
 8008110:	bd80      	pop	{r7, pc}

08008112 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	0002      	movs	r2, r0
 800811a:	1dfb      	adds	r3, r7, #7
 800811c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800811e:	1dfb      	adds	r3, r7, #7
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	b25b      	sxtb	r3, r3
 8008124:	0018      	movs	r0, r3
 8008126:	f7ff ff1b 	bl	8007f60 <__NVIC_DisableIRQ>
}
 800812a:	46c0      	nop			@ (mov r8, r8)
 800812c:	46bd      	mov	sp, r7
 800812e:	b002      	add	sp, #8
 8008130:	bd80      	pop	{r7, pc}

08008132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b082      	sub	sp, #8
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	0018      	movs	r0, r3
 800813e:	f7ff ff9f 	bl	8008080 <SysTick_Config>
 8008142:	0003      	movs	r3, r0
}
 8008144:	0018      	movs	r0, r3
 8008146:	46bd      	mov	sp, r7
 8008148:	b002      	add	sp, #8
 800814a:	bd80      	pop	{r7, pc}

0800814c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e077      	b.n	800824e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a3d      	ldr	r2, [pc, #244]	@ (8008258 <HAL_DMA_Init+0x10c>)
 8008164:	4694      	mov	ip, r2
 8008166:	4463      	add	r3, ip
 8008168:	2114      	movs	r1, #20
 800816a:	0018      	movs	r0, r3
 800816c:	f7f7 ffcc 	bl	8000108 <__udivsi3>
 8008170:	0003      	movs	r3, r0
 8008172:	009a      	lsls	r2, r3, #2
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2225      	movs	r2, #37	@ 0x25
 800817c:	2102      	movs	r1, #2
 800817e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4934      	ldr	r1, [pc, #208]	@ (800825c <HAL_DMA_Init+0x110>)
 800818c:	400a      	ands	r2, r1
 800818e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6819      	ldr	r1, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	689a      	ldr	r2, [r3, #8]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	431a      	orrs	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	431a      	orrs	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	431a      	orrs	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	431a      	orrs	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	431a      	orrs	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a1b      	ldr	r3, [r3, #32]
 80081bc:	431a      	orrs	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	0018      	movs	r0, r3
 80081ca:	f000 fa8d 	bl	80086e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	689a      	ldr	r2, [r3, #8]
 80081d2:	2380      	movs	r3, #128	@ 0x80
 80081d4:	01db      	lsls	r3, r3, #7
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d102      	bne.n	80081e0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685a      	ldr	r2, [r3, #4]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081e8:	213f      	movs	r1, #63	@ 0x3f
 80081ea:	400a      	ands	r2, r1
 80081ec:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80081f6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d011      	beq.n	8008224 <HAL_DMA_Init+0xd8>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	2b04      	cmp	r3, #4
 8008206:	d80d      	bhi.n	8008224 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	0018      	movs	r0, r3
 800820c:	f000 fa98 	bl	8008740 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008214:	2200      	movs	r2, #0
 8008216:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008220:	605a      	str	r2, [r3, #4]
 8008222:	e008      	b.n	8008236 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2225      	movs	r2, #37	@ 0x25
 8008240:	2101      	movs	r1, #1
 8008242:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2224      	movs	r2, #36	@ 0x24
 8008248:	2100      	movs	r1, #0
 800824a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	0018      	movs	r0, r3
 8008250:	46bd      	mov	sp, r7
 8008252:	b002      	add	sp, #8
 8008254:	bd80      	pop	{r7, pc}
 8008256:	46c0      	nop			@ (mov r8, r8)
 8008258:	bffdfff8 	.word	0xbffdfff8
 800825c:	ffff800f 	.word	0xffff800f

08008260 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
 800826c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800826e:	2317      	movs	r3, #23
 8008270:	18fb      	adds	r3, r7, r3
 8008272:	2200      	movs	r2, #0
 8008274:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2224      	movs	r2, #36	@ 0x24
 800827a:	5c9b      	ldrb	r3, [r3, r2]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d101      	bne.n	8008284 <HAL_DMA_Start_IT+0x24>
 8008280:	2302      	movs	r3, #2
 8008282:	e06f      	b.n	8008364 <HAL_DMA_Start_IT+0x104>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2224      	movs	r2, #36	@ 0x24
 8008288:	2101      	movs	r1, #1
 800828a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2225      	movs	r2, #37	@ 0x25
 8008290:	5c9b      	ldrb	r3, [r3, r2]
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b01      	cmp	r3, #1
 8008296:	d157      	bne.n	8008348 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2225      	movs	r2, #37	@ 0x25
 800829c:	2102      	movs	r1, #2
 800829e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2101      	movs	r1, #1
 80082b2:	438a      	bics	r2, r1
 80082b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	68b9      	ldr	r1, [r7, #8]
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f000 f9d3 	bl	8008668 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d008      	beq.n	80082dc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	210e      	movs	r1, #14
 80082d6:	430a      	orrs	r2, r1
 80082d8:	601a      	str	r2, [r3, #0]
 80082da:	e00f      	b.n	80082fc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2104      	movs	r1, #4
 80082e8:	438a      	bics	r2, r1
 80082ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	210a      	movs	r1, #10
 80082f8:	430a      	orrs	r2, r1
 80082fa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	2380      	movs	r3, #128	@ 0x80
 8008304:	025b      	lsls	r3, r3, #9
 8008306:	4013      	ands	r3, r2
 8008308:	d008      	beq.n	800831c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008314:	2180      	movs	r1, #128	@ 0x80
 8008316:	0049      	lsls	r1, r1, #1
 8008318:	430a      	orrs	r2, r1
 800831a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008320:	2b00      	cmp	r3, #0
 8008322:	d008      	beq.n	8008336 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800832e:	2180      	movs	r1, #128	@ 0x80
 8008330:	0049      	lsls	r1, r1, #1
 8008332:	430a      	orrs	r2, r1
 8008334:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2101      	movs	r1, #1
 8008342:	430a      	orrs	r2, r1
 8008344:	601a      	str	r2, [r3, #0]
 8008346:	e00a      	b.n	800835e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2280      	movs	r2, #128	@ 0x80
 800834c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2224      	movs	r2, #36	@ 0x24
 8008352:	2100      	movs	r1, #0
 8008354:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8008356:	2317      	movs	r3, #23
 8008358:	18fb      	adds	r3, r7, r3
 800835a:	2201      	movs	r2, #1
 800835c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800835e:	2317      	movs	r3, #23
 8008360:	18fb      	adds	r3, r7, r3
 8008362:	781b      	ldrb	r3, [r3, #0]
}
 8008364:	0018      	movs	r0, r3
 8008366:	46bd      	mov	sp, r7
 8008368:	b006      	add	sp, #24
 800836a:	bd80      	pop	{r7, pc}

0800836c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e050      	b.n	8008420 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2225      	movs	r2, #37	@ 0x25
 8008382:	5c9b      	ldrb	r3, [r3, r2]
 8008384:	b2db      	uxtb	r3, r3
 8008386:	2b02      	cmp	r3, #2
 8008388:	d008      	beq.n	800839c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2204      	movs	r2, #4
 800838e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2224      	movs	r2, #36	@ 0x24
 8008394:	2100      	movs	r1, #0
 8008396:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e041      	b.n	8008420 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	210e      	movs	r1, #14
 80083a8:	438a      	bics	r2, r1
 80083aa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083b6:	491c      	ldr	r1, [pc, #112]	@ (8008428 <HAL_DMA_Abort+0xbc>)
 80083b8:	400a      	ands	r2, r1
 80083ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2101      	movs	r1, #1
 80083c8:	438a      	bics	r2, r1
 80083ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80083cc:	4b17      	ldr	r3, [pc, #92]	@ (800842c <HAL_DMA_Abort+0xc0>)
 80083ce:	6859      	ldr	r1, [r3, #4]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d4:	221c      	movs	r2, #28
 80083d6:	4013      	ands	r3, r2
 80083d8:	2201      	movs	r2, #1
 80083da:	409a      	lsls	r2, r3
 80083dc:	4b13      	ldr	r3, [pc, #76]	@ (800842c <HAL_DMA_Abort+0xc0>)
 80083de:	430a      	orrs	r2, r1
 80083e0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80083ea:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d00c      	beq.n	800840e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083fe:	490a      	ldr	r1, [pc, #40]	@ (8008428 <HAL_DMA_Abort+0xbc>)
 8008400:	400a      	ands	r2, r1
 8008402:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800840c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2225      	movs	r2, #37	@ 0x25
 8008412:	2101      	movs	r1, #1
 8008414:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2224      	movs	r2, #36	@ 0x24
 800841a:	2100      	movs	r1, #0
 800841c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	0018      	movs	r0, r3
 8008422:	46bd      	mov	sp, r7
 8008424:	b002      	add	sp, #8
 8008426:	bd80      	pop	{r7, pc}
 8008428:	fffffeff 	.word	0xfffffeff
 800842c:	40020000 	.word	0x40020000

08008430 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008438:	210f      	movs	r1, #15
 800843a:	187b      	adds	r3, r7, r1
 800843c:	2200      	movs	r2, #0
 800843e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2225      	movs	r2, #37	@ 0x25
 8008444:	5c9b      	ldrb	r3, [r3, r2]
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b02      	cmp	r3, #2
 800844a:	d006      	beq.n	800845a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2204      	movs	r2, #4
 8008450:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8008452:	187b      	adds	r3, r7, r1
 8008454:	2201      	movs	r2, #1
 8008456:	701a      	strb	r2, [r3, #0]
 8008458:	e049      	b.n	80084ee <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	210e      	movs	r1, #14
 8008466:	438a      	bics	r2, r1
 8008468:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2101      	movs	r1, #1
 8008476:	438a      	bics	r2, r1
 8008478:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008484:	491d      	ldr	r1, [pc, #116]	@ (80084fc <HAL_DMA_Abort_IT+0xcc>)
 8008486:	400a      	ands	r2, r1
 8008488:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800848a:	4b1d      	ldr	r3, [pc, #116]	@ (8008500 <HAL_DMA_Abort_IT+0xd0>)
 800848c:	6859      	ldr	r1, [r3, #4]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008492:	221c      	movs	r2, #28
 8008494:	4013      	ands	r3, r2
 8008496:	2201      	movs	r2, #1
 8008498:	409a      	lsls	r2, r3
 800849a:	4b19      	ldr	r3, [pc, #100]	@ (8008500 <HAL_DMA_Abort_IT+0xd0>)
 800849c:	430a      	orrs	r2, r1
 800849e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80084a8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00c      	beq.n	80084cc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084bc:	490f      	ldr	r1, [pc, #60]	@ (80084fc <HAL_DMA_Abort_IT+0xcc>)
 80084be:	400a      	ands	r2, r1
 80084c0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80084ca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2225      	movs	r2, #37	@ 0x25
 80084d0:	2101      	movs	r1, #1
 80084d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2224      	movs	r2, #36	@ 0x24
 80084d8:	2100      	movs	r1, #0
 80084da:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d004      	beq.n	80084ee <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	0010      	movs	r0, r2
 80084ec:	4798      	blx	r3
    }
  }
  return status;
 80084ee:	230f      	movs	r3, #15
 80084f0:	18fb      	adds	r3, r7, r3
 80084f2:	781b      	ldrb	r3, [r3, #0]
}
 80084f4:	0018      	movs	r0, r3
 80084f6:	46bd      	mov	sp, r7
 80084f8:	b004      	add	sp, #16
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	fffffeff 	.word	0xfffffeff
 8008500:	40020000 	.word	0x40020000

08008504 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800850c:	4b55      	ldr	r3, [pc, #340]	@ (8008664 <HAL_DMA_IRQHandler+0x160>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800851e:	221c      	movs	r2, #28
 8008520:	4013      	ands	r3, r2
 8008522:	2204      	movs	r2, #4
 8008524:	409a      	lsls	r2, r3
 8008526:	0013      	movs	r3, r2
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	4013      	ands	r3, r2
 800852c:	d027      	beq.n	800857e <HAL_DMA_IRQHandler+0x7a>
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	2204      	movs	r2, #4
 8008532:	4013      	ands	r3, r2
 8008534:	d023      	beq.n	800857e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2220      	movs	r2, #32
 800853e:	4013      	ands	r3, r2
 8008540:	d107      	bne.n	8008552 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2104      	movs	r1, #4
 800854e:	438a      	bics	r2, r1
 8008550:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8008552:	4b44      	ldr	r3, [pc, #272]	@ (8008664 <HAL_DMA_IRQHandler+0x160>)
 8008554:	6859      	ldr	r1, [r3, #4]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800855a:	221c      	movs	r2, #28
 800855c:	4013      	ands	r3, r2
 800855e:	2204      	movs	r2, #4
 8008560:	409a      	lsls	r2, r3
 8008562:	4b40      	ldr	r3, [pc, #256]	@ (8008664 <HAL_DMA_IRQHandler+0x160>)
 8008564:	430a      	orrs	r2, r1
 8008566:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800856c:	2b00      	cmp	r3, #0
 800856e:	d100      	bne.n	8008572 <HAL_DMA_IRQHandler+0x6e>
 8008570:	e073      	b.n	800865a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	0010      	movs	r0, r2
 800857a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800857c:	e06d      	b.n	800865a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008582:	221c      	movs	r2, #28
 8008584:	4013      	ands	r3, r2
 8008586:	2202      	movs	r2, #2
 8008588:	409a      	lsls	r2, r3
 800858a:	0013      	movs	r3, r2
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	4013      	ands	r3, r2
 8008590:	d02e      	beq.n	80085f0 <HAL_DMA_IRQHandler+0xec>
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	2202      	movs	r2, #2
 8008596:	4013      	ands	r3, r2
 8008598:	d02a      	beq.n	80085f0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2220      	movs	r2, #32
 80085a2:	4013      	ands	r3, r2
 80085a4:	d10b      	bne.n	80085be <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	210a      	movs	r1, #10
 80085b2:	438a      	bics	r2, r1
 80085b4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2225      	movs	r2, #37	@ 0x25
 80085ba:	2101      	movs	r1, #1
 80085bc:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80085be:	4b29      	ldr	r3, [pc, #164]	@ (8008664 <HAL_DMA_IRQHandler+0x160>)
 80085c0:	6859      	ldr	r1, [r3, #4]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085c6:	221c      	movs	r2, #28
 80085c8:	4013      	ands	r3, r2
 80085ca:	2202      	movs	r2, #2
 80085cc:	409a      	lsls	r2, r3
 80085ce:	4b25      	ldr	r3, [pc, #148]	@ (8008664 <HAL_DMA_IRQHandler+0x160>)
 80085d0:	430a      	orrs	r2, r1
 80085d2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2224      	movs	r2, #36	@ 0x24
 80085d8:	2100      	movs	r1, #0
 80085da:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d03a      	beq.n	800865a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	0010      	movs	r0, r2
 80085ec:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80085ee:	e034      	b.n	800865a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f4:	221c      	movs	r2, #28
 80085f6:	4013      	ands	r3, r2
 80085f8:	2208      	movs	r2, #8
 80085fa:	409a      	lsls	r2, r3
 80085fc:	0013      	movs	r3, r2
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	4013      	ands	r3, r2
 8008602:	d02b      	beq.n	800865c <HAL_DMA_IRQHandler+0x158>
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	2208      	movs	r2, #8
 8008608:	4013      	ands	r3, r2
 800860a:	d027      	beq.n	800865c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	210e      	movs	r1, #14
 8008618:	438a      	bics	r2, r1
 800861a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800861c:	4b11      	ldr	r3, [pc, #68]	@ (8008664 <HAL_DMA_IRQHandler+0x160>)
 800861e:	6859      	ldr	r1, [r3, #4]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008624:	221c      	movs	r2, #28
 8008626:	4013      	ands	r3, r2
 8008628:	2201      	movs	r2, #1
 800862a:	409a      	lsls	r2, r3
 800862c:	4b0d      	ldr	r3, [pc, #52]	@ (8008664 <HAL_DMA_IRQHandler+0x160>)
 800862e:	430a      	orrs	r2, r1
 8008630:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2225      	movs	r2, #37	@ 0x25
 800863c:	2101      	movs	r1, #1
 800863e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2224      	movs	r2, #36	@ 0x24
 8008644:	2100      	movs	r1, #0
 8008646:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800864c:	2b00      	cmp	r3, #0
 800864e:	d005      	beq.n	800865c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	0010      	movs	r0, r2
 8008658:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800865a:	46c0      	nop			@ (mov r8, r8)
 800865c:	46c0      	nop			@ (mov r8, r8)
}
 800865e:	46bd      	mov	sp, r7
 8008660:	b004      	add	sp, #16
 8008662:	bd80      	pop	{r7, pc}
 8008664:	40020000 	.word	0x40020000

08008668 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
 8008674:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800867e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008684:	2b00      	cmp	r3, #0
 8008686:	d004      	beq.n	8008692 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008690:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8008692:	4b14      	ldr	r3, [pc, #80]	@ (80086e4 <DMA_SetConfig+0x7c>)
 8008694:	6859      	ldr	r1, [r3, #4]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800869a:	221c      	movs	r2, #28
 800869c:	4013      	ands	r3, r2
 800869e:	2201      	movs	r2, #1
 80086a0:	409a      	lsls	r2, r3
 80086a2:	4b10      	ldr	r3, [pc, #64]	@ (80086e4 <DMA_SetConfig+0x7c>)
 80086a4:	430a      	orrs	r2, r1
 80086a6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	2b10      	cmp	r3, #16
 80086b6:	d108      	bne.n	80086ca <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80086c8:	e007      	b.n	80086da <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	60da      	str	r2, [r3, #12]
}
 80086da:	46c0      	nop			@ (mov r8, r8)
 80086dc:	46bd      	mov	sp, r7
 80086de:	b004      	add	sp, #16
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	46c0      	nop			@ (mov r8, r8)
 80086e4:	40020000 	.word	0x40020000

080086e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f4:	089b      	lsrs	r3, r3, #2
 80086f6:	4a10      	ldr	r2, [pc, #64]	@ (8008738 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80086f8:	4694      	mov	ip, r2
 80086fa:	4463      	add	r3, ip
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	001a      	movs	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	001a      	movs	r2, r3
 800870a:	23ff      	movs	r3, #255	@ 0xff
 800870c:	4013      	ands	r3, r2
 800870e:	3b08      	subs	r3, #8
 8008710:	2114      	movs	r1, #20
 8008712:	0018      	movs	r0, r3
 8008714:	f7f7 fcf8 	bl	8000108 <__udivsi3>
 8008718:	0003      	movs	r3, r0
 800871a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a07      	ldr	r2, [pc, #28]	@ (800873c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8008720:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	221f      	movs	r2, #31
 8008726:	4013      	ands	r3, r2
 8008728:	2201      	movs	r2, #1
 800872a:	409a      	lsls	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8008730:	46c0      	nop			@ (mov r8, r8)
 8008732:	46bd      	mov	sp, r7
 8008734:	b004      	add	sp, #16
 8008736:	bd80      	pop	{r7, pc}
 8008738:	10008200 	.word	0x10008200
 800873c:	40020880 	.word	0x40020880

08008740 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	223f      	movs	r2, #63	@ 0x3f
 800874e:	4013      	ands	r3, r2
 8008750:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	4a0a      	ldr	r2, [pc, #40]	@ (8008780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008756:	4694      	mov	ip, r2
 8008758:	4463      	add	r3, ip
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	001a      	movs	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a07      	ldr	r2, [pc, #28]	@ (8008784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008766:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	3b01      	subs	r3, #1
 800876c:	2203      	movs	r2, #3
 800876e:	4013      	ands	r3, r2
 8008770:	2201      	movs	r2, #1
 8008772:	409a      	lsls	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8008778:	46c0      	nop			@ (mov r8, r8)
 800877a:	46bd      	mov	sp, r7
 800877c:	b004      	add	sp, #16
 800877e:	bd80      	pop	{r7, pc}
 8008780:	1000823f 	.word	0x1000823f
 8008784:	40020940 	.word	0x40020940

08008788 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008788:	b5b0      	push	{r4, r5, r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	603a      	str	r2, [r7, #0]
 8008794:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008796:	4b21      	ldr	r3, [pc, #132]	@ (800881c <HAL_FLASH_Program+0x94>)
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d101      	bne.n	80087a2 <HAL_FLASH_Program+0x1a>
 800879e:	2302      	movs	r3, #2
 80087a0:	e038      	b.n	8008814 <HAL_FLASH_Program+0x8c>
 80087a2:	4b1e      	ldr	r3, [pc, #120]	@ (800881c <HAL_FLASH_Program+0x94>)
 80087a4:	2201      	movs	r2, #1
 80087a6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80087a8:	4b1c      	ldr	r3, [pc, #112]	@ (800881c <HAL_FLASH_Program+0x94>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80087ae:	2517      	movs	r5, #23
 80087b0:	197c      	adds	r4, r7, r5
 80087b2:	23fa      	movs	r3, #250	@ 0xfa
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	0018      	movs	r0, r3
 80087b8:	f000 f87a 	bl	80088b0 <FLASH_WaitForLastOperation>
 80087bc:	0003      	movs	r3, r0
 80087be:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80087c0:	197b      	adds	r3, r7, r5
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d11f      	bne.n	8008808 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d106      	bne.n	80087dc <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	68b9      	ldr	r1, [r7, #8]
 80087d4:	0008      	movs	r0, r1
 80087d6:	f000 f8b9 	bl	800894c <FLASH_Program_DoubleWord>
 80087da:	e005      	b.n	80087e8 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80087dc:	683a      	ldr	r2, [r7, #0]
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	0011      	movs	r1, r2
 80087e2:	0018      	movs	r0, r3
 80087e4:	f005 fcb0 	bl	800e148 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80087e8:	2317      	movs	r3, #23
 80087ea:	18fc      	adds	r4, r7, r3
 80087ec:	23fa      	movs	r3, #250	@ 0xfa
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	0018      	movs	r0, r3
 80087f2:	f000 f85d 	bl	80088b0 <FLASH_WaitForLastOperation>
 80087f6:	0003      	movs	r3, r0
 80087f8:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80087fa:	4b09      	ldr	r3, [pc, #36]	@ (8008820 <HAL_FLASH_Program+0x98>)
 80087fc:	695a      	ldr	r2, [r3, #20]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	43d9      	mvns	r1, r3
 8008802:	4b07      	ldr	r3, [pc, #28]	@ (8008820 <HAL_FLASH_Program+0x98>)
 8008804:	400a      	ands	r2, r1
 8008806:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008808:	4b04      	ldr	r3, [pc, #16]	@ (800881c <HAL_FLASH_Program+0x94>)
 800880a:	2200      	movs	r2, #0
 800880c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800880e:	2317      	movs	r3, #23
 8008810:	18fb      	adds	r3, r7, r3
 8008812:	781b      	ldrb	r3, [r3, #0]
}
 8008814:	0018      	movs	r0, r3
 8008816:	46bd      	mov	sp, r7
 8008818:	b006      	add	sp, #24
 800881a:	bdb0      	pop	{r4, r5, r7, pc}
 800881c:	20000db0 	.word	0x20000db0
 8008820:	40022000 	.word	0x40022000

08008824 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800882a:	1dfb      	adds	r3, r7, #7
 800882c:	2200      	movs	r2, #0
 800882e:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8008830:	4b0b      	ldr	r3, [pc, #44]	@ (8008860 <HAL_FLASH_Unlock+0x3c>)
 8008832:	695b      	ldr	r3, [r3, #20]
 8008834:	2b00      	cmp	r3, #0
 8008836:	da0c      	bge.n	8008852 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008838:	4b09      	ldr	r3, [pc, #36]	@ (8008860 <HAL_FLASH_Unlock+0x3c>)
 800883a:	4a0a      	ldr	r2, [pc, #40]	@ (8008864 <HAL_FLASH_Unlock+0x40>)
 800883c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800883e:	4b08      	ldr	r3, [pc, #32]	@ (8008860 <HAL_FLASH_Unlock+0x3c>)
 8008840:	4a09      	ldr	r2, [pc, #36]	@ (8008868 <HAL_FLASH_Unlock+0x44>)
 8008842:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8008844:	4b06      	ldr	r3, [pc, #24]	@ (8008860 <HAL_FLASH_Unlock+0x3c>)
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	2b00      	cmp	r3, #0
 800884a:	da02      	bge.n	8008852 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 800884c:	1dfb      	adds	r3, r7, #7
 800884e:	2201      	movs	r2, #1
 8008850:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8008852:	1dfb      	adds	r3, r7, #7
 8008854:	781b      	ldrb	r3, [r3, #0]
}
 8008856:	0018      	movs	r0, r3
 8008858:	46bd      	mov	sp, r7
 800885a:	b002      	add	sp, #8
 800885c:	bd80      	pop	{r7, pc}
 800885e:	46c0      	nop			@ (mov r8, r8)
 8008860:	40022000 	.word	0x40022000
 8008864:	45670123 	.word	0x45670123
 8008868:	cdef89ab 	.word	0xcdef89ab

0800886c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8008872:	1dfb      	adds	r3, r7, #7
 8008874:	2201      	movs	r2, #1
 8008876:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008878:	23fa      	movs	r3, #250	@ 0xfa
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	0018      	movs	r0, r3
 800887e:	f000 f817 	bl	80088b0 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8008882:	4b0a      	ldr	r3, [pc, #40]	@ (80088ac <HAL_FLASH_Lock+0x40>)
 8008884:	695a      	ldr	r2, [r3, #20]
 8008886:	4b09      	ldr	r3, [pc, #36]	@ (80088ac <HAL_FLASH_Lock+0x40>)
 8008888:	2180      	movs	r1, #128	@ 0x80
 800888a:	0609      	lsls	r1, r1, #24
 800888c:	430a      	orrs	r2, r1
 800888e:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8008890:	4b06      	ldr	r3, [pc, #24]	@ (80088ac <HAL_FLASH_Lock+0x40>)
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	2b00      	cmp	r3, #0
 8008896:	da02      	bge.n	800889e <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8008898:	1dfb      	adds	r3, r7, #7
 800889a:	2200      	movs	r2, #0
 800889c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800889e:	1dfb      	adds	r3, r7, #7
 80088a0:	781b      	ldrb	r3, [r3, #0]
}
 80088a2:	0018      	movs	r0, r3
 80088a4:	46bd      	mov	sp, r7
 80088a6:	b002      	add	sp, #8
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	46c0      	nop			@ (mov r8, r8)
 80088ac:	40022000 	.word	0x40022000

080088b0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80088b8:	f7fe f904 	bl	8006ac4 <HAL_GetTick>
 80088bc:	0003      	movs	r3, r0
 80088be:	60fb      	str	r3, [r7, #12]
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 80088c0:	2380      	movs	r3, #128	@ 0x80
 80088c2:	025b      	lsls	r3, r3, #9
 80088c4:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 80088c6:	e00c      	b.n	80088e2 <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	3301      	adds	r3, #1
 80088cc:	d009      	beq.n	80088e2 <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80088ce:	f7fe f8f9 	bl	8006ac4 <HAL_GetTick>
 80088d2:	0002      	movs	r2, r0
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d801      	bhi.n	80088e2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80088de:	2303      	movs	r3, #3
 80088e0:	e028      	b.n	8008934 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 80088e2:	4b16      	ldr	r3, [pc, #88]	@ (800893c <FLASH_WaitForLastOperation+0x8c>)
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	4013      	ands	r3, r2
 80088ea:	d1ed      	bne.n	80088c8 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80088ec:	4b13      	ldr	r3, [pc, #76]	@ (800893c <FLASH_WaitForLastOperation+0x8c>)
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	4a13      	ldr	r2, [pc, #76]	@ (8008940 <FLASH_WaitForLastOperation+0x90>)
 80088f2:	4013      	ands	r3, r2
 80088f4:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 80088f6:	4b11      	ldr	r3, [pc, #68]	@ (800893c <FLASH_WaitForLastOperation+0x8c>)
 80088f8:	4a12      	ldr	r2, [pc, #72]	@ (8008944 <FLASH_WaitForLastOperation+0x94>)
 80088fa:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d011      	beq.n	8008926 <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8008902:	4b11      	ldr	r3, [pc, #68]	@ (8008948 <FLASH_WaitForLastOperation+0x98>)
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e013      	b.n	8008934 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	3301      	adds	r3, #1
 8008910:	d009      	beq.n	8008926 <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8008912:	f7fe f8d7 	bl	8006ac4 <HAL_GetTick>
 8008916:	0002      	movs	r2, r0
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	429a      	cmp	r2, r3
 8008920:	d801      	bhi.n	8008926 <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e006      	b.n	8008934 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8008926:	4b05      	ldr	r3, [pc, #20]	@ (800893c <FLASH_WaitForLastOperation+0x8c>)
 8008928:	691a      	ldr	r2, [r3, #16]
 800892a:	2380      	movs	r3, #128	@ 0x80
 800892c:	02db      	lsls	r3, r3, #11
 800892e:	4013      	ands	r3, r2
 8008930:	d1ec      	bne.n	800890c <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	0018      	movs	r0, r3
 8008936:	46bd      	mov	sp, r7
 8008938:	b004      	add	sp, #16
 800893a:	bd80      	pop	{r7, pc}
 800893c:	40022000 	.word	0x40022000
 8008940:	0000c3fa 	.word	0x0000c3fa
 8008944:	0000c3fb 	.word	0x0000c3fb
 8008948:	20000db0 	.word	0x20000db0

0800894c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800894c:	b5b0      	push	{r4, r5, r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	603a      	str	r2, [r7, #0]
 8008956:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008958:	4b0b      	ldr	r3, [pc, #44]	@ (8008988 <FLASH_Program_DoubleWord+0x3c>)
 800895a:	695a      	ldr	r2, [r3, #20]
 800895c:	4b0a      	ldr	r3, [pc, #40]	@ (8008988 <FLASH_Program_DoubleWord+0x3c>)
 800895e:	2101      	movs	r1, #1
 8008960:	430a      	orrs	r2, r1
 8008962:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	683a      	ldr	r2, [r7, #0]
 8008968:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800896a:	f3bf 8f6f 	isb	sy
}
 800896e:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	001c      	movs	r4, r3
 8008974:	2300      	movs	r3, #0
 8008976:	001d      	movs	r5, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3304      	adds	r3, #4
 800897c:	0022      	movs	r2, r4
 800897e:	601a      	str	r2, [r3, #0]
}
 8008980:	46c0      	nop			@ (mov r8, r8)
 8008982:	46bd      	mov	sp, r7
 8008984:	b004      	add	sp, #16
 8008986:	bdb0      	pop	{r4, r5, r7, pc}
 8008988:	40022000 	.word	0x40022000

0800898c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800898c:	b5b0      	push	{r4, r5, r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008996:	4b35      	ldr	r3, [pc, #212]	@ (8008a6c <HAL_FLASHEx_Erase+0xe0>)
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	2b01      	cmp	r3, #1
 800899c:	d101      	bne.n	80089a2 <HAL_FLASHEx_Erase+0x16>
 800899e:	2302      	movs	r3, #2
 80089a0:	e05f      	b.n	8008a62 <HAL_FLASHEx_Erase+0xd6>
 80089a2:	4b32      	ldr	r3, [pc, #200]	@ (8008a6c <HAL_FLASHEx_Erase+0xe0>)
 80089a4:	2201      	movs	r2, #1
 80089a6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80089a8:	4b30      	ldr	r3, [pc, #192]	@ (8008a6c <HAL_FLASHEx_Erase+0xe0>)
 80089aa:	2200      	movs	r2, #0
 80089ac:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80089ae:	250f      	movs	r5, #15
 80089b0:	197c      	adds	r4, r7, r5
 80089b2:	23fa      	movs	r3, #250	@ 0xfa
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	0018      	movs	r0, r3
 80089b8:	f7ff ff7a 	bl	80088b0 <FLASH_WaitForLastOperation>
 80089bc:	0003      	movs	r3, r0
 80089be:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80089c0:	002c      	movs	r4, r5
 80089c2:	193b      	adds	r3, r7, r4
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d145      	bne.n	8008a56 <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2204      	movs	r2, #4
 80089ce:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b04      	cmp	r3, #4
 80089d6:	d10d      	bne.n	80089f4 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	0018      	movs	r0, r3
 80089de:	f000 f849 	bl	8008a74 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80089e2:	193c      	adds	r4, r7, r4
 80089e4:	23fa      	movs	r3, #250	@ 0xfa
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	0018      	movs	r0, r3
 80089ea:	f7ff ff61 	bl	80088b0 <FLASH_WaitForLastOperation>
 80089ee:	0003      	movs	r3, r0
 80089f0:	7023      	strb	r3, [r4, #0]
 80089f2:	e030      	b.n	8008a56 <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	2201      	movs	r2, #1
 80089f8:	4252      	negs	r2, r2
 80089fa:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	60bb      	str	r3, [r7, #8]
 8008a02:	e01a      	b.n	8008a3a <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	0011      	movs	r1, r2
 8008a0c:	0018      	movs	r0, r3
 8008a0e:	f000 f845 	bl	8008a9c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008a12:	250f      	movs	r5, #15
 8008a14:	197c      	adds	r4, r7, r5
 8008a16:	23fa      	movs	r3, #250	@ 0xfa
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	0018      	movs	r0, r3
 8008a1c:	f7ff ff48 	bl	80088b0 <FLASH_WaitForLastOperation>
 8008a20:	0003      	movs	r3, r0
 8008a22:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8008a24:	197b      	adds	r3, r7, r5
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d003      	beq.n	8008a34 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	601a      	str	r2, [r3, #0]
          break;
 8008a32:	e00a      	b.n	8008a4a <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	3301      	adds	r3, #1
 8008a38:	60bb      	str	r3, [r7, #8]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	689a      	ldr	r2, [r3, #8]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	18d3      	adds	r3, r2, r3
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d3dc      	bcc.n	8008a04 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8008a4a:	4b09      	ldr	r3, [pc, #36]	@ (8008a70 <HAL_FLASHEx_Erase+0xe4>)
 8008a4c:	695a      	ldr	r2, [r3, #20]
 8008a4e:	4b08      	ldr	r3, [pc, #32]	@ (8008a70 <HAL_FLASHEx_Erase+0xe4>)
 8008a50:	2102      	movs	r1, #2
 8008a52:	438a      	bics	r2, r1
 8008a54:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008a56:	4b05      	ldr	r3, [pc, #20]	@ (8008a6c <HAL_FLASHEx_Erase+0xe0>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8008a5c:	230f      	movs	r3, #15
 8008a5e:	18fb      	adds	r3, r7, r3
 8008a60:	781b      	ldrb	r3, [r3, #0]
}
 8008a62:	0018      	movs	r0, r3
 8008a64:	46bd      	mov	sp, r7
 8008a66:	b004      	add	sp, #16
 8008a68:	bdb0      	pop	{r4, r5, r7, pc}
 8008a6a:	46c0      	nop			@ (mov r8, r8)
 8008a6c:	20000db0 	.word	0x20000db0
 8008a70:	40022000 	.word	0x40022000

08008a74 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8008a7c:	4b06      	ldr	r3, [pc, #24]	@ (8008a98 <FLASH_MassErase+0x24>)
 8008a7e:	695a      	ldr	r2, [r3, #20]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	431a      	orrs	r2, r3
 8008a84:	4b04      	ldr	r3, [pc, #16]	@ (8008a98 <FLASH_MassErase+0x24>)
 8008a86:	2180      	movs	r1, #128	@ 0x80
 8008a88:	0249      	lsls	r1, r1, #9
 8008a8a:	430a      	orrs	r2, r1
 8008a8c:	615a      	str	r2, [r3, #20]
}
 8008a8e:	46c0      	nop			@ (mov r8, r8)
 8008a90:	46bd      	mov	sp, r7
 8008a92:	b002      	add	sp, #8
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	46c0      	nop			@ (mov r8, r8)
 8008a98:	40022000 	.word	0x40022000

08008a9c <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8008aa6:	4b08      	ldr	r3, [pc, #32]	@ (8008ac8 <FLASH_PageErase+0x2c>)
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	4a08      	ldr	r2, [pc, #32]	@ (8008acc <FLASH_PageErase+0x30>)
 8008aac:	4013      	ands	r3, r2
 8008aae:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	00da      	lsls	r2, r3, #3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	431a      	orrs	r2, r3
 8008ab8:	4b03      	ldr	r3, [pc, #12]	@ (8008ac8 <FLASH_PageErase+0x2c>)
 8008aba:	4905      	ldr	r1, [pc, #20]	@ (8008ad0 <FLASH_PageErase+0x34>)
 8008abc:	430a      	orrs	r2, r1
 8008abe:	615a      	str	r2, [r3, #20]
}
 8008ac0:	46c0      	nop			@ (mov r8, r8)
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	b004      	add	sp, #16
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	40022000 	.word	0x40022000
 8008acc:	ffffe007 	.word	0xffffe007
 8008ad0:	00010002 	.word	0x00010002

08008ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008ae2:	e147      	b.n	8008d74 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2101      	movs	r1, #1
 8008aea:	697a      	ldr	r2, [r7, #20]
 8008aec:	4091      	lsls	r1, r2
 8008aee:	000a      	movs	r2, r1
 8008af0:	4013      	ands	r3, r2
 8008af2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d100      	bne.n	8008afc <HAL_GPIO_Init+0x28>
 8008afa:	e138      	b.n	8008d6e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	2203      	movs	r2, #3
 8008b02:	4013      	ands	r3, r2
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d005      	beq.n	8008b14 <HAL_GPIO_Init+0x40>
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	2203      	movs	r2, #3
 8008b0e:	4013      	ands	r3, r2
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d130      	bne.n	8008b76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	005b      	lsls	r3, r3, #1
 8008b1e:	2203      	movs	r2, #3
 8008b20:	409a      	lsls	r2, r3
 8008b22:	0013      	movs	r3, r2
 8008b24:	43da      	mvns	r2, r3
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	4013      	ands	r3, r2
 8008b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	68da      	ldr	r2, [r3, #12]
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	005b      	lsls	r3, r3, #1
 8008b34:	409a      	lsls	r2, r3
 8008b36:	0013      	movs	r3, r2
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	409a      	lsls	r2, r3
 8008b50:	0013      	movs	r3, r2
 8008b52:	43da      	mvns	r2, r3
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	4013      	ands	r3, r2
 8008b58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	091b      	lsrs	r3, r3, #4
 8008b60:	2201      	movs	r2, #1
 8008b62:	401a      	ands	r2, r3
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	409a      	lsls	r2, r3
 8008b68:	0013      	movs	r3, r2
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	2203      	movs	r2, #3
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	2b03      	cmp	r3, #3
 8008b80:	d017      	beq.n	8008bb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	2203      	movs	r2, #3
 8008b8e:	409a      	lsls	r2, r3
 8008b90:	0013      	movs	r3, r2
 8008b92:	43da      	mvns	r2, r3
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	4013      	ands	r3, r2
 8008b98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	689a      	ldr	r2, [r3, #8]
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	005b      	lsls	r3, r3, #1
 8008ba2:	409a      	lsls	r2, r3
 8008ba4:	0013      	movs	r3, r2
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	2203      	movs	r2, #3
 8008bb8:	4013      	ands	r3, r2
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d123      	bne.n	8008c06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	08da      	lsrs	r2, r3, #3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	3208      	adds	r2, #8
 8008bc6:	0092      	lsls	r2, r2, #2
 8008bc8:	58d3      	ldr	r3, [r2, r3]
 8008bca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	2207      	movs	r2, #7
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	220f      	movs	r2, #15
 8008bd6:	409a      	lsls	r2, r3
 8008bd8:	0013      	movs	r3, r2
 8008bda:	43da      	mvns	r2, r3
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	4013      	ands	r3, r2
 8008be0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	691a      	ldr	r2, [r3, #16]
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	2107      	movs	r1, #7
 8008bea:	400b      	ands	r3, r1
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	409a      	lsls	r2, r3
 8008bf0:	0013      	movs	r3, r2
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	08da      	lsrs	r2, r3, #3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	3208      	adds	r2, #8
 8008c00:	0092      	lsls	r2, r2, #2
 8008c02:	6939      	ldr	r1, [r7, #16]
 8008c04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	005b      	lsls	r3, r3, #1
 8008c10:	2203      	movs	r2, #3
 8008c12:	409a      	lsls	r2, r3
 8008c14:	0013      	movs	r3, r2
 8008c16:	43da      	mvns	r2, r3
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	2203      	movs	r2, #3
 8008c24:	401a      	ands	r2, r3
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	005b      	lsls	r3, r3, #1
 8008c2a:	409a      	lsls	r2, r3
 8008c2c:	0013      	movs	r3, r2
 8008c2e:	693a      	ldr	r2, [r7, #16]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	685a      	ldr	r2, [r3, #4]
 8008c3e:	23c0      	movs	r3, #192	@ 0xc0
 8008c40:	029b      	lsls	r3, r3, #10
 8008c42:	4013      	ands	r3, r2
 8008c44:	d100      	bne.n	8008c48 <HAL_GPIO_Init+0x174>
 8008c46:	e092      	b.n	8008d6e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8008c48:	4a50      	ldr	r2, [pc, #320]	@ (8008d8c <HAL_GPIO_Init+0x2b8>)
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	089b      	lsrs	r3, r3, #2
 8008c4e:	3318      	adds	r3, #24
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	589b      	ldr	r3, [r3, r2]
 8008c54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	2203      	movs	r2, #3
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	00db      	lsls	r3, r3, #3
 8008c5e:	220f      	movs	r2, #15
 8008c60:	409a      	lsls	r2, r3
 8008c62:	0013      	movs	r3, r2
 8008c64:	43da      	mvns	r2, r3
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	4013      	ands	r3, r2
 8008c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	23a0      	movs	r3, #160	@ 0xa0
 8008c70:	05db      	lsls	r3, r3, #23
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d013      	beq.n	8008c9e <HAL_GPIO_Init+0x1ca>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a45      	ldr	r2, [pc, #276]	@ (8008d90 <HAL_GPIO_Init+0x2bc>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d00d      	beq.n	8008c9a <HAL_GPIO_Init+0x1c6>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a44      	ldr	r2, [pc, #272]	@ (8008d94 <HAL_GPIO_Init+0x2c0>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d007      	beq.n	8008c96 <HAL_GPIO_Init+0x1c2>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a43      	ldr	r2, [pc, #268]	@ (8008d98 <HAL_GPIO_Init+0x2c4>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d101      	bne.n	8008c92 <HAL_GPIO_Init+0x1be>
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e006      	b.n	8008ca0 <HAL_GPIO_Init+0x1cc>
 8008c92:	2305      	movs	r3, #5
 8008c94:	e004      	b.n	8008ca0 <HAL_GPIO_Init+0x1cc>
 8008c96:	2302      	movs	r3, #2
 8008c98:	e002      	b.n	8008ca0 <HAL_GPIO_Init+0x1cc>
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e000      	b.n	8008ca0 <HAL_GPIO_Init+0x1cc>
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	697a      	ldr	r2, [r7, #20]
 8008ca2:	2103      	movs	r1, #3
 8008ca4:	400a      	ands	r2, r1
 8008ca6:	00d2      	lsls	r2, r2, #3
 8008ca8:	4093      	lsls	r3, r2
 8008caa:	693a      	ldr	r2, [r7, #16]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8008cb0:	4936      	ldr	r1, [pc, #216]	@ (8008d8c <HAL_GPIO_Init+0x2b8>)
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	089b      	lsrs	r3, r3, #2
 8008cb6:	3318      	adds	r3, #24
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008cbe:	4b33      	ldr	r3, [pc, #204]	@ (8008d8c <HAL_GPIO_Init+0x2b8>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	43da      	mvns	r2, r3
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	4013      	ands	r3, r2
 8008ccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	685a      	ldr	r2, [r3, #4]
 8008cd2:	2380      	movs	r3, #128	@ 0x80
 8008cd4:	035b      	lsls	r3, r3, #13
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	d003      	beq.n	8008ce2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008ce2:	4b2a      	ldr	r3, [pc, #168]	@ (8008d8c <HAL_GPIO_Init+0x2b8>)
 8008ce4:	693a      	ldr	r2, [r7, #16]
 8008ce6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008ce8:	4b28      	ldr	r3, [pc, #160]	@ (8008d8c <HAL_GPIO_Init+0x2b8>)
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	43da      	mvns	r2, r3
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	4013      	ands	r3, r2
 8008cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	2380      	movs	r3, #128	@ 0x80
 8008cfe:	039b      	lsls	r3, r3, #14
 8008d00:	4013      	ands	r3, r2
 8008d02:	d003      	beq.n	8008d0c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8008d04:	693a      	ldr	r2, [r7, #16]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8008d8c <HAL_GPIO_Init+0x2b8>)
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008d12:	4a1e      	ldr	r2, [pc, #120]	@ (8008d8c <HAL_GPIO_Init+0x2b8>)
 8008d14:	2384      	movs	r3, #132	@ 0x84
 8008d16:	58d3      	ldr	r3, [r2, r3]
 8008d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	43da      	mvns	r2, r3
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	4013      	ands	r3, r2
 8008d22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	685a      	ldr	r2, [r3, #4]
 8008d28:	2380      	movs	r3, #128	@ 0x80
 8008d2a:	029b      	lsls	r3, r3, #10
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	d003      	beq.n	8008d38 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8008d30:	693a      	ldr	r2, [r7, #16]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008d38:	4914      	ldr	r1, [pc, #80]	@ (8008d8c <HAL_GPIO_Init+0x2b8>)
 8008d3a:	2284      	movs	r2, #132	@ 0x84
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8008d40:	4a12      	ldr	r2, [pc, #72]	@ (8008d8c <HAL_GPIO_Init+0x2b8>)
 8008d42:	2380      	movs	r3, #128	@ 0x80
 8008d44:	58d3      	ldr	r3, [r2, r3]
 8008d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	43da      	mvns	r2, r3
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	4013      	ands	r3, r2
 8008d50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	685a      	ldr	r2, [r3, #4]
 8008d56:	2380      	movs	r3, #128	@ 0x80
 8008d58:	025b      	lsls	r3, r3, #9
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	d003      	beq.n	8008d66 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008d66:	4909      	ldr	r1, [pc, #36]	@ (8008d8c <HAL_GPIO_Init+0x2b8>)
 8008d68:	2280      	movs	r2, #128	@ 0x80
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	3301      	adds	r3, #1
 8008d72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	40da      	lsrs	r2, r3
 8008d7c:	1e13      	subs	r3, r2, #0
 8008d7e:	d000      	beq.n	8008d82 <HAL_GPIO_Init+0x2ae>
 8008d80:	e6b0      	b.n	8008ae4 <HAL_GPIO_Init+0x10>
  }
}
 8008d82:	46c0      	nop			@ (mov r8, r8)
 8008d84:	46c0      	nop			@ (mov r8, r8)
 8008d86:	46bd      	mov	sp, r7
 8008d88:	b006      	add	sp, #24
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	40021800 	.word	0x40021800
 8008d90:	50000400 	.word	0x50000400
 8008d94:	50000800 	.word	0x50000800
 8008d98:	50000c00 	.word	0x50000c00

08008d9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	000a      	movs	r2, r1
 8008da6:	1cbb      	adds	r3, r7, #2
 8008da8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	1cba      	adds	r2, r7, #2
 8008db0:	8812      	ldrh	r2, [r2, #0]
 8008db2:	4013      	ands	r3, r2
 8008db4:	d004      	beq.n	8008dc0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8008db6:	230f      	movs	r3, #15
 8008db8:	18fb      	adds	r3, r7, r3
 8008dba:	2201      	movs	r2, #1
 8008dbc:	701a      	strb	r2, [r3, #0]
 8008dbe:	e003      	b.n	8008dc8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008dc0:	230f      	movs	r3, #15
 8008dc2:	18fb      	adds	r3, r7, r3
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8008dc8:	230f      	movs	r3, #15
 8008dca:	18fb      	adds	r3, r7, r3
 8008dcc:	781b      	ldrb	r3, [r3, #0]
}
 8008dce:	0018      	movs	r0, r3
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	b004      	add	sp, #16
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b082      	sub	sp, #8
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	0008      	movs	r0, r1
 8008de0:	0011      	movs	r1, r2
 8008de2:	1cbb      	adds	r3, r7, #2
 8008de4:	1c02      	adds	r2, r0, #0
 8008de6:	801a      	strh	r2, [r3, #0]
 8008de8:	1c7b      	adds	r3, r7, #1
 8008dea:	1c0a      	adds	r2, r1, #0
 8008dec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008dee:	1c7b      	adds	r3, r7, #1
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d004      	beq.n	8008e00 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008df6:	1cbb      	adds	r3, r7, #2
 8008df8:	881a      	ldrh	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008dfe:	e003      	b.n	8008e08 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008e00:	1cbb      	adds	r3, r7, #2
 8008e02:	881a      	ldrh	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008e08:	46c0      	nop			@ (mov r8, r8)
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	b002      	add	sp, #8
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	0002      	movs	r2, r0
 8008e18:	1dbb      	adds	r3, r7, #6
 8008e1a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8008e1c:	4b10      	ldr	r3, [pc, #64]	@ (8008e60 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	1dba      	adds	r2, r7, #6
 8008e22:	8812      	ldrh	r2, [r2, #0]
 8008e24:	4013      	ands	r3, r2
 8008e26:	d008      	beq.n	8008e3a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8008e28:	4b0d      	ldr	r3, [pc, #52]	@ (8008e60 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008e2a:	1dba      	adds	r2, r7, #6
 8008e2c:	8812      	ldrh	r2, [r2, #0]
 8008e2e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8008e30:	1dbb      	adds	r3, r7, #6
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	0018      	movs	r0, r3
 8008e36:	f7fb f923 	bl	8004080 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8008e3a:	4b09      	ldr	r3, [pc, #36]	@ (8008e60 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	1dba      	adds	r2, r7, #6
 8008e40:	8812      	ldrh	r2, [r2, #0]
 8008e42:	4013      	ands	r3, r2
 8008e44:	d008      	beq.n	8008e58 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8008e46:	4b06      	ldr	r3, [pc, #24]	@ (8008e60 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008e48:	1dba      	adds	r2, r7, #6
 8008e4a:	8812      	ldrh	r2, [r2, #0]
 8008e4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8008e4e:	1dbb      	adds	r3, r7, #6
 8008e50:	881b      	ldrh	r3, [r3, #0]
 8008e52:	0018      	movs	r0, r3
 8008e54:	f7fb f8ea 	bl	800402c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8008e58:	46c0      	nop			@ (mov r8, r8)
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	b002      	add	sp, #8
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	40021800 	.word	0x40021800

08008e64 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e097      	b.n	8008fa6 <HAL_LPTIM_Init+0x142>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2236      	movs	r2, #54	@ 0x36
 8008e7a:	5c9b      	ldrb	r3, [r3, r2]
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d113      	bne.n	8008eaa <HAL_LPTIM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2235      	movs	r2, #53	@ 0x35
 8008e86:	2100      	movs	r1, #0
 8008e88:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    LPTIM_ResetCallback(hlptim);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	0018      	movs	r0, r3
 8008e8e:	f000 fa8f 	bl	80093b0 <LPTIM_ResetCallback>

    if (hlptim->MspInitCallback == NULL)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d102      	bne.n	8008ea0 <HAL_LPTIM_Init+0x3c>
    {
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a44      	ldr	r2, [pc, #272]	@ (8008fb0 <HAL_LPTIM_Init+0x14c>)
 8008e9e:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	0010      	movs	r0, r2
 8008ea8:	4798      	blx	r3
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2236      	movs	r2, #54	@ 0x36
 8008eae:	2102      	movs	r1, #2
 8008eb0:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d005      	beq.n	8008ece <HAL_LPTIM_Init+0x6a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ec6:	2380      	movs	r3, #128	@ 0x80
 8008ec8:	041b      	lsls	r3, r3, #16
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d103      	bne.n	8008ed6 <HAL_LPTIM_Init+0x72>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	221e      	movs	r2, #30
 8008ed2:	4393      	bics	r3, r2
 8008ed4:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	695b      	ldr	r3, [r3, #20]
 8008eda:	4a36      	ldr	r2, [pc, #216]	@ (8008fb4 <HAL_LPTIM_Init+0x150>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d003      	beq.n	8008ee8 <HAL_LPTIM_Init+0x84>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4a35      	ldr	r2, [pc, #212]	@ (8008fb8 <HAL_LPTIM_Init+0x154>)
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	4a34      	ldr	r2, [pc, #208]	@ (8008fbc <HAL_LPTIM_Init+0x158>)
 8008eec:	4013      	ands	r3, r2
 8008eee:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008ef8:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8008efe:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8008f04:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8008f0a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d107      	bne.n	8008f2a <HAL_LPTIM_Init+0xc6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008f22:	4313      	orrs	r3, r2
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d005      	beq.n	8008f3e <HAL_LPTIM_Init+0xda>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f36:	2380      	movs	r3, #128	@ 0x80
 8008f38:	041b      	lsls	r3, r3, #16
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d107      	bne.n	8008f4e <HAL_LPTIM_Init+0xea>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008f46:	4313      	orrs	r3, r2
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	4a18      	ldr	r2, [pc, #96]	@ (8008fb4 <HAL_LPTIM_Init+0x150>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d00a      	beq.n	8008f6e <HAL_LPTIM_Init+0x10a>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008f60:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8008f66:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a11      	ldr	r2, [pc, #68]	@ (8008fc0 <HAL_LPTIM_Init+0x15c>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d108      	bne.n	8008f92 <HAL_LPTIM_Init+0x12e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	625a      	str	r2, [r3, #36]	@ 0x24
 8008f90:	e004      	b.n	8008f9c <HAL_LPTIM_Init+0x138>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008f9a:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2236      	movs	r2, #54	@ 0x36
 8008fa0:	2101      	movs	r1, #1
 8008fa2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	0018      	movs	r0, r3
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	b004      	add	sp, #16
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	46c0      	nop			@ (mov r8, r8)
 8008fb0:	0800591d 	.word	0x0800591d
 8008fb4:	0000ffff 	.word	0x0000ffff
 8008fb8:	ffff1f3f 	.word	0xffff1f3f
 8008fbc:	ff19f1fe 	.word	0xff19f1fe
 8008fc0:	40007c00 	.word	0x40007c00

08008fc4 <HAL_LPTIM_SetOnce_Start_IT>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_SetOnce_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2236      	movs	r2, #54	@ 0x36
 8008fd4:	2102      	movs	r1, #2
 8008fd6:	5499      	strb	r1, [r3, r2]

  /* Set WAVE bit to enable the set once mode */
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68da      	ldr	r2, [r3, #12]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2180      	movs	r1, #128	@ 0x80
 8008fe4:	0349      	lsls	r1, r1, #13
 8008fe6:	430a      	orrs	r2, r1
 8008fe8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	691a      	ldr	r2, [r3, #16]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2101      	movs	r1, #1
 8008ff6:	430a      	orrs	r2, r1
 8008ff8:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2210      	movs	r2, #16
 8009000:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2110      	movs	r1, #16
 800900e:	0018      	movs	r0, r3
 8009010:	f000 f9fa 	bl	8009408 <LPTIM_WaitForFlag>
 8009014:	0003      	movs	r3, r0
 8009016:	2b03      	cmp	r3, #3
 8009018:	d101      	bne.n	800901e <HAL_LPTIM_SetOnce_Start_IT+0x5a>
  {
    return HAL_TIMEOUT;
 800901a:	2303      	movs	r3, #3
 800901c:	e060      	b.n	80090e0 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2208      	movs	r2, #8
 8009024:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2108      	movs	r1, #8
 8009032:	0018      	movs	r0, r3
 8009034:	f000 f9e8 	bl	8009408 <LPTIM_WaitForFlag>
 8009038:	0003      	movs	r3, r0
 800903a:	2b03      	cmp	r3, #3
 800903c:	d101      	bne.n	8009042 <HAL_LPTIM_SetOnce_Start_IT+0x7e>
  {
    return HAL_TIMEOUT;
 800903e:	2303      	movs	r3, #3
 8009040:	e04e      	b.n	80090e0 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	0018      	movs	r0, r3
 8009046:	f000 fa17 	bl	8009478 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	0018      	movs	r0, r3
 800904e:	f000 f9a3 	bl	8009398 <HAL_LPTIM_GetState>
 8009052:	0003      	movs	r3, r0
 8009054:	2b03      	cmp	r3, #3
 8009056:	d101      	bne.n	800905c <HAL_LPTIM_SetOnce_Start_IT+0x98>
  {
    return HAL_TIMEOUT;
 8009058:	2303      	movs	r3, #3
 800905a:	e041      	b.n	80090e0 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	689a      	ldr	r2, [r3, #8]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2110      	movs	r1, #16
 8009068:	430a      	orrs	r2, r1
 800906a:	609a      	str	r2, [r3, #8]

  /* Enable Compare write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	689a      	ldr	r2, [r3, #8]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2108      	movs	r1, #8
 8009078:	430a      	orrs	r2, r1
 800907a:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	689a      	ldr	r2, [r3, #8]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2102      	movs	r1, #2
 8009088:	430a      	orrs	r2, r1
 800908a:	609a      	str	r2, [r3, #8]

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	689a      	ldr	r2, [r3, #8]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2101      	movs	r1, #1
 8009098:	430a      	orrs	r2, r1
 800909a:	609a      	str	r2, [r3, #8]

  /* If external trigger source is used, then enable external trigger interrupt */
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	695b      	ldr	r3, [r3, #20]
 80090a0:	4a11      	ldr	r2, [pc, #68]	@ (80090e8 <HAL_LPTIM_SetOnce_Start_IT+0x124>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d007      	beq.n	80090b6 <HAL_LPTIM_SetOnce_Start_IT+0xf2>
  {
    /* Enable external trigger interrupt */
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	689a      	ldr	r2, [r3, #8]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2104      	movs	r1, #4
 80090b2:	430a      	orrs	r2, r1
 80090b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	691a      	ldr	r2, [r3, #16]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2101      	movs	r1, #1
 80090c2:	430a      	orrs	r2, r1
 80090c4:	611a      	str	r2, [r3, #16]

  /* Start timer in single (one shot) mode */
  __HAL_LPTIM_START_SINGLE(hlptim);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	691a      	ldr	r2, [r3, #16]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2102      	movs	r1, #2
 80090d2:	430a      	orrs	r2, r1
 80090d4:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2236      	movs	r2, #54	@ 0x36
 80090da:	2101      	movs	r1, #1
 80090dc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	0018      	movs	r0, r3
 80090e2:	46bd      	mov	sp, r7
 80090e4:	b004      	add	sp, #16
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	0000ffff 	.word	0x0000ffff

080090ec <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2201      	movs	r2, #1
 80090fc:	4013      	ands	r3, r2
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d10f      	bne.n	8009122 <HAL_LPTIM_IRQHandler+0x36>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	2201      	movs	r2, #1
 800910a:	4013      	ands	r3, r2
 800910c:	2b01      	cmp	r3, #1
 800910e:	d108      	bne.n	8009122 <HAL_LPTIM_IRQHandler+0x36>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2201      	movs	r2, #1
 8009116:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	0010      	movs	r0, r2
 8009120:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2202      	movs	r2, #2
 800912a:	4013      	ands	r3, r2
 800912c:	2b02      	cmp	r3, #2
 800912e:	d10f      	bne.n	8009150 <HAL_LPTIM_IRQHandler+0x64>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	2202      	movs	r2, #2
 8009138:	4013      	ands	r3, r2
 800913a:	2b02      	cmp	r3, #2
 800913c:	d108      	bne.n	8009150 <HAL_LPTIM_IRQHandler+0x64>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2202      	movs	r2, #2
 8009144:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	0010      	movs	r0, r2
 800914e:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2204      	movs	r2, #4
 8009158:	4013      	ands	r3, r2
 800915a:	2b04      	cmp	r3, #4
 800915c:	d10f      	bne.n	800917e <HAL_LPTIM_IRQHandler+0x92>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	2204      	movs	r2, #4
 8009166:	4013      	ands	r3, r2
 8009168:	2b04      	cmp	r3, #4
 800916a:	d108      	bne.n	800917e <HAL_LPTIM_IRQHandler+0x92>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2204      	movs	r2, #4
 8009172:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	0010      	movs	r0, r2
 800917c:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2208      	movs	r2, #8
 8009186:	4013      	ands	r3, r2
 8009188:	2b08      	cmp	r3, #8
 800918a:	d10f      	bne.n	80091ac <HAL_LPTIM_IRQHandler+0xc0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	2208      	movs	r2, #8
 8009194:	4013      	ands	r3, r2
 8009196:	2b08      	cmp	r3, #8
 8009198:	d108      	bne.n	80091ac <HAL_LPTIM_IRQHandler+0xc0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2208      	movs	r2, #8
 80091a0:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	0010      	movs	r0, r2
 80091aa:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2210      	movs	r2, #16
 80091b4:	4013      	ands	r3, r2
 80091b6:	2b10      	cmp	r3, #16
 80091b8:	d10f      	bne.n	80091da <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	2210      	movs	r2, #16
 80091c2:	4013      	ands	r3, r2
 80091c4:	2b10      	cmp	r3, #16
 80091c6:	d108      	bne.n	80091da <HAL_LPTIM_IRQHandler+0xee>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2210      	movs	r2, #16
 80091ce:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	0010      	movs	r0, r2
 80091d8:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2220      	movs	r2, #32
 80091e2:	4013      	ands	r3, r2
 80091e4:	2b20      	cmp	r3, #32
 80091e6:	d10f      	bne.n	8009208 <HAL_LPTIM_IRQHandler+0x11c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	2220      	movs	r2, #32
 80091f0:	4013      	ands	r3, r2
 80091f2:	2b20      	cmp	r3, #32
 80091f4:	d108      	bne.n	8009208 <HAL_LPTIM_IRQHandler+0x11c>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2220      	movs	r2, #32
 80091fc:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	0010      	movs	r0, r2
 8009206:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2240      	movs	r2, #64	@ 0x40
 8009210:	4013      	ands	r3, r2
 8009212:	2b40      	cmp	r3, #64	@ 0x40
 8009214:	d10f      	bne.n	8009236 <HAL_LPTIM_IRQHandler+0x14a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	2240      	movs	r2, #64	@ 0x40
 800921e:	4013      	ands	r3, r2
 8009220:	2b40      	cmp	r3, #64	@ 0x40
 8009222:	d108      	bne.n	8009236 <HAL_LPTIM_IRQHandler+0x14a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2240      	movs	r2, #64	@ 0x40
 800922a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	0010      	movs	r0, r2
 8009234:	4798      	blx	r3
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8009236:	46c0      	nop			@ (mov r8, r8)
 8009238:	46bd      	mov	sp, r7
 800923a:	b002      	add	sp, #8
 800923c:	bd80      	pop	{r7, pc}

0800923e <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b082      	sub	sp, #8
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8009246:	46c0      	nop			@ (mov r8, r8)
 8009248:	46bd      	mov	sp, r7
 800924a:	b002      	add	sp, #8
 800924c:	bd80      	pop	{r7, pc}

0800924e <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b082      	sub	sp, #8
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8009256:	46c0      	nop			@ (mov r8, r8)
 8009258:	46bd      	mov	sp, r7
 800925a:	b002      	add	sp, #8
 800925c:	bd80      	pop	{r7, pc}

0800925e <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b082      	sub	sp, #8
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8009266:	46c0      	nop			@ (mov r8, r8)
 8009268:	46bd      	mov	sp, r7
 800926a:	b002      	add	sp, #8
 800926c:	bd80      	pop	{r7, pc}

0800926e <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b082      	sub	sp, #8
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8009276:	46c0      	nop			@ (mov r8, r8)
 8009278:	46bd      	mov	sp, r7
 800927a:	b002      	add	sp, #8
 800927c:	bd80      	pop	{r7, pc}

0800927e <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b082      	sub	sp, #8
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8009286:	46c0      	nop			@ (mov r8, r8)
 8009288:	46bd      	mov	sp, r7
 800928a:	b002      	add	sp, #8
 800928c:	bd80      	pop	{r7, pc}

0800928e <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b082      	sub	sp, #8
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8009296:	46c0      	nop			@ (mov r8, r8)
 8009298:	46bd      	mov	sp, r7
 800929a:	b002      	add	sp, #8
 800929c:	bd80      	pop	{r7, pc}

0800929e <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b082      	sub	sp, #8
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80092a6:	46c0      	nop			@ (mov r8, r8)
 80092a8:	46bd      	mov	sp, r7
 80092aa:	b002      	add	sp, #8
 80092ac:	bd80      	pop	{r7, pc}
	...

080092b0 <HAL_LPTIM_RegisterCallback>:
  * @retval status
  */
HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef        *hlptim,
                                             HAL_LPTIM_CallbackIDTypeDef CallbackID,
                                             pLPTIM_CallbackTypeDef      pCallback)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b086      	sub	sp, #24
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	607a      	str	r2, [r7, #4]
 80092ba:	230b      	movs	r3, #11
 80092bc:	18fb      	adds	r3, r7, r3
 80092be:	1c0a      	adds	r2, r1, #0
 80092c0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092c2:	2317      	movs	r3, #23
 80092c4:	18fb      	adds	r3, r7, r3
 80092c6:	2200      	movs	r2, #0
 80092c8:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d101      	bne.n	80092d4 <HAL_LPTIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e05a      	b.n	800938a <HAL_LPTIM_RegisterCallback+0xda>
  }

  if (hlptim->State == HAL_LPTIM_STATE_READY)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2236      	movs	r2, #54	@ 0x36
 80092d8:	5c9b      	ldrb	r3, [r3, r2]
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d132      	bne.n	8009346 <HAL_LPTIM_RegisterCallback+0x96>
  {
    switch (CallbackID)
 80092e0:	230b      	movs	r3, #11
 80092e2:	18fb      	adds	r3, r7, r3
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	2b08      	cmp	r3, #8
 80092e8:	d828      	bhi.n	800933c <HAL_LPTIM_RegisterCallback+0x8c>
 80092ea:	009a      	lsls	r2, r3, #2
 80092ec:	4b29      	ldr	r3, [pc, #164]	@ (8009394 <HAL_LPTIM_RegisterCallback+0xe4>)
 80092ee:	18d3      	adds	r3, r2, r3
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	469f      	mov	pc, r3
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80092fa:	e043      	b.n	8009384 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8009302:	e03f      	b.n	8009384 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_MATCH_CB_ID :
        hlptim->CompareMatchCallback = pCallback;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 800930a:	e03b      	b.n	8009384 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_MATCH_CB_ID :
        hlptim->AutoReloadMatchCallback = pCallback;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 8009312:	e037      	b.n	8009384 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_TRIGGER_CB_ID :
        hlptim->TriggerCallback = pCallback;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 800931a:	e033      	b.n	8009384 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_WRITE_CB_ID :
        hlptim->CompareWriteCallback = pCallback;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009322:	e02f      	b.n	8009384 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_WRITE_CB_ID :
        hlptim->AutoReloadWriteCallback = pCallback;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800932a:	e02b      	b.n	8009384 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_UP_CB_ID :
        hlptim->DirectionUpCallback = pCallback;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009332:	e027      	b.n	8009384 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
        hlptim->DirectionDownCallback = pCallback;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800933a:	e023      	b.n	8009384 <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 800933c:	2317      	movs	r3, #23
 800933e:	18fb      	adds	r3, r7, r3
 8009340:	2201      	movs	r2, #1
 8009342:	701a      	strb	r2, [r3, #0]
        break;
 8009344:	e01e      	b.n	8009384 <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2236      	movs	r2, #54	@ 0x36
 800934a:	5c9b      	ldrb	r3, [r3, r2]
 800934c:	b2db      	uxtb	r3, r3
 800934e:	2b00      	cmp	r3, #0
 8009350:	d114      	bne.n	800937c <HAL_LPTIM_RegisterCallback+0xcc>
  {
    switch (CallbackID)
 8009352:	230b      	movs	r3, #11
 8009354:	18fb      	adds	r3, r7, r3
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d002      	beq.n	8009362 <HAL_LPTIM_RegisterCallback+0xb2>
 800935c:	2b01      	cmp	r3, #1
 800935e:	d004      	beq.n	800936a <HAL_LPTIM_RegisterCallback+0xba>
 8009360:	e007      	b.n	8009372 <HAL_LPTIM_RegisterCallback+0xc2>
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8009368:	e00c      	b.n	8009384 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8009370:	e008      	b.n	8009384 <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8009372:	2317      	movs	r3, #23
 8009374:	18fb      	adds	r3, r7, r3
 8009376:	2201      	movs	r2, #1
 8009378:	701a      	strb	r2, [r3, #0]
        break;
 800937a:	e003      	b.n	8009384 <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800937c:	2317      	movs	r3, #23
 800937e:	18fb      	adds	r3, r7, r3
 8009380:	2201      	movs	r2, #1
 8009382:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8009384:	2317      	movs	r3, #23
 8009386:	18fb      	adds	r3, r7, r3
 8009388:	781b      	ldrb	r3, [r3, #0]
}
 800938a:	0018      	movs	r0, r3
 800938c:	46bd      	mov	sp, r7
 800938e:	b006      	add	sp, #24
 8009390:	bd80      	pop	{r7, pc}
 8009392:	46c0      	nop			@ (mov r8, r8)
 8009394:	0800ea18 	.word	0x0800ea18

08009398 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2236      	movs	r2, #54	@ 0x36
 80093a4:	5c9b      	ldrb	r3, [r3, r2]
 80093a6:	b2db      	uxtb	r3, r3
}
 80093a8:	0018      	movs	r0, r3
 80093aa:	46bd      	mov	sp, r7
 80093ac:	b002      	add	sp, #8
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <LPTIM_ResetCallback>:
  * @param  lptim pointer to a LPTIM_HandleTypeDef structure that contains
  *                the configuration information for LPTIM module.
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a0c      	ldr	r2, [pc, #48]	@ (80093ec <LPTIM_ResetCallback+0x3c>)
 80093bc:	641a      	str	r2, [r3, #64]	@ 0x40
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a0b      	ldr	r2, [pc, #44]	@ (80093f0 <LPTIM_ResetCallback+0x40>)
 80093c2:	645a      	str	r2, [r3, #68]	@ 0x44
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a0b      	ldr	r2, [pc, #44]	@ (80093f4 <LPTIM_ResetCallback+0x44>)
 80093c8:	649a      	str	r2, [r3, #72]	@ 0x48
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a0a      	ldr	r2, [pc, #40]	@ (80093f8 <LPTIM_ResetCallback+0x48>)
 80093ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a0a      	ldr	r2, [pc, #40]	@ (80093fc <LPTIM_ResetCallback+0x4c>)
 80093d4:	651a      	str	r2, [r3, #80]	@ 0x50
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a09      	ldr	r2, [pc, #36]	@ (8009400 <LPTIM_ResetCallback+0x50>)
 80093da:	655a      	str	r2, [r3, #84]	@ 0x54
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a09      	ldr	r2, [pc, #36]	@ (8009404 <LPTIM_ResetCallback+0x54>)
 80093e0:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80093e2:	46c0      	nop			@ (mov r8, r8)
 80093e4:	46bd      	mov	sp, r7
 80093e6:	b002      	add	sp, #8
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	46c0      	nop			@ (mov r8, r8)
 80093ec:	0800923f 	.word	0x0800923f
 80093f0:	0800924f 	.word	0x0800924f
 80093f4:	0800925f 	.word	0x0800925f
 80093f8:	0800926f 	.word	0x0800926f
 80093fc:	0800927f 	.word	0x0800927f
 8009400:	0800928f 	.word	0x0800928f
 8009404:	0800929f 	.word	0x0800929f

08009408 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8009412:	230f      	movs	r3, #15
 8009414:	18fb      	adds	r3, r7, r3
 8009416:	2200      	movs	r2, #0
 8009418:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800941a:	4b15      	ldr	r3, [pc, #84]	@ (8009470 <LPTIM_WaitForFlag+0x68>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4915      	ldr	r1, [pc, #84]	@ (8009474 <LPTIM_WaitForFlag+0x6c>)
 8009420:	0018      	movs	r0, r3
 8009422:	f7f6 fe71 	bl	8000108 <__udivsi3>
 8009426:	0003      	movs	r3, r0
 8009428:	001a      	movs	r2, r3
 800942a:	0013      	movs	r3, r2
 800942c:	015b      	lsls	r3, r3, #5
 800942e:	1a9b      	subs	r3, r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	189b      	adds	r3, r3, r2
 8009434:	00db      	lsls	r3, r3, #3
 8009436:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	3b01      	subs	r3, #1
 800943c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d103      	bne.n	800944c <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8009444:	230f      	movs	r3, #15
 8009446:	18fb      	adds	r3, r7, r3
 8009448:	2203      	movs	r2, #3
 800944a:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	683a      	ldr	r2, [r7, #0]
 8009454:	4013      	ands	r3, r2
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	429a      	cmp	r2, r3
 800945a:	d002      	beq.n	8009462 <LPTIM_WaitForFlag+0x5a>
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1ea      	bne.n	8009438 <LPTIM_WaitForFlag+0x30>

  return result;
 8009462:	230f      	movs	r3, #15
 8009464:	18fb      	adds	r3, r7, r3
 8009466:	781b      	ldrb	r3, [r3, #0]
}
 8009468:	0018      	movs	r0, r3
 800946a:	46bd      	mov	sp, r7
 800946c:	b004      	add	sp, #16
 800946e:	bd80      	pop	{r7, pc}
 8009470:	2000044c 	.word	0x2000044c
 8009474:	00004e20 	.word	0x00004e20

08009478 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b08c      	sub	sp, #48	@ 0x30
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8009480:	2300      	movs	r3, #0
 8009482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009484:	f3ef 8310 	mrs	r3, PRIMASK
 8009488:	60fb      	str	r3, [r7, #12]
  return(result);
 800948a:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800948c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800948e:	2301      	movs	r3, #1
 8009490:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	f383 8810 	msr	PRIMASK, r3
}
 8009498:	46c0      	nop			@ (mov r8, r8)
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a72      	ldr	r2, [pc, #456]	@ (8009668 <LPTIM_Disable+0x1f0>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d003      	beq.n	80094ac <LPTIM_Disable+0x34>
 80094a4:	4a71      	ldr	r2, [pc, #452]	@ (800966c <LPTIM_Disable+0x1f4>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d007      	beq.n	80094ba <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 80094aa:	e00d      	b.n	80094c8 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80094ac:	4b70      	ldr	r3, [pc, #448]	@ (8009670 <LPTIM_Disable+0x1f8>)
 80094ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80094b0:	23c0      	movs	r3, #192	@ 0xc0
 80094b2:	031b      	lsls	r3, r3, #12
 80094b4:	4013      	ands	r3, r2
 80094b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80094b8:	e006      	b.n	80094c8 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80094ba:	4b6d      	ldr	r3, [pc, #436]	@ (8009670 <LPTIM_Disable+0x1f8>)
 80094bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80094be:	23c0      	movs	r3, #192	@ 0xc0
 80094c0:	039b      	lsls	r3, r3, #14
 80094c2:	4013      	ands	r3, r2
 80094c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80094c6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ee:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a5c      	ldr	r2, [pc, #368]	@ (8009668 <LPTIM_Disable+0x1f0>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d003      	beq.n	8009502 <LPTIM_Disable+0x8a>
 80094fa:	4a5c      	ldr	r2, [pc, #368]	@ (800966c <LPTIM_Disable+0x1f4>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d00e      	beq.n	800951e <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8009500:	e01b      	b.n	800953a <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8009502:	4b5b      	ldr	r3, [pc, #364]	@ (8009670 <LPTIM_Disable+0x1f8>)
 8009504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009506:	4b5a      	ldr	r3, [pc, #360]	@ (8009670 <LPTIM_Disable+0x1f8>)
 8009508:	2180      	movs	r1, #128	@ 0x80
 800950a:	0609      	lsls	r1, r1, #24
 800950c:	430a      	orrs	r2, r1
 800950e:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8009510:	4b57      	ldr	r3, [pc, #348]	@ (8009670 <LPTIM_Disable+0x1f8>)
 8009512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009514:	4b56      	ldr	r3, [pc, #344]	@ (8009670 <LPTIM_Disable+0x1f8>)
 8009516:	0052      	lsls	r2, r2, #1
 8009518:	0852      	lsrs	r2, r2, #1
 800951a:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 800951c:	e00d      	b.n	800953a <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 800951e:	4b54      	ldr	r3, [pc, #336]	@ (8009670 <LPTIM_Disable+0x1f8>)
 8009520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009522:	4b53      	ldr	r3, [pc, #332]	@ (8009670 <LPTIM_Disable+0x1f8>)
 8009524:	2180      	movs	r1, #128	@ 0x80
 8009526:	05c9      	lsls	r1, r1, #23
 8009528:	430a      	orrs	r2, r1
 800952a:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 800952c:	4b50      	ldr	r3, [pc, #320]	@ (8009670 <LPTIM_Disable+0x1f8>)
 800952e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009530:	4b4f      	ldr	r3, [pc, #316]	@ (8009670 <LPTIM_Disable+0x1f8>)
 8009532:	4950      	ldr	r1, [pc, #320]	@ (8009674 <LPTIM_Disable+0x1fc>)
 8009534:	400a      	ands	r2, r1
 8009536:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 8009538:	46c0      	nop			@ (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d103      	bne.n	8009548 <LPTIM_Disable+0xd0>
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d100      	bne.n	8009548 <LPTIM_Disable+0xd0>
 8009546:	e071      	b.n	800962c <LPTIM_Disable+0x1b4>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a46      	ldr	r2, [pc, #280]	@ (8009668 <LPTIM_Disable+0x1f0>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d003      	beq.n	800955a <LPTIM_Disable+0xe2>
 8009552:	4a46      	ldr	r2, [pc, #280]	@ (800966c <LPTIM_Disable+0x1f4>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d007      	beq.n	8009568 <LPTIM_Disable+0xf0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8009558:	e00d      	b.n	8009576 <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 800955a:	4b45      	ldr	r3, [pc, #276]	@ (8009670 <LPTIM_Disable+0x1f8>)
 800955c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800955e:	4b44      	ldr	r3, [pc, #272]	@ (8009670 <LPTIM_Disable+0x1f8>)
 8009560:	4945      	ldr	r1, [pc, #276]	@ (8009678 <LPTIM_Disable+0x200>)
 8009562:	400a      	ands	r2, r1
 8009564:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009566:	e006      	b.n	8009576 <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8009568:	4b41      	ldr	r3, [pc, #260]	@ (8009670 <LPTIM_Disable+0x1f8>)
 800956a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800956c:	4b40      	ldr	r3, [pc, #256]	@ (8009670 <LPTIM_Disable+0x1f8>)
 800956e:	4943      	ldr	r1, [pc, #268]	@ (800967c <LPTIM_Disable+0x204>)
 8009570:	400a      	ands	r2, r1
 8009572:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009574:	46c0      	nop			@ (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d01b      	beq.n	80095b4 <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	691a      	ldr	r2, [r3, #16]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2101      	movs	r1, #1
 8009588:	430a      	orrs	r2, r1
 800958a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	69fa      	ldr	r2, [r7, #28]
 8009592:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2108      	movs	r1, #8
 8009598:	0018      	movs	r0, r3
 800959a:	f7ff ff35 	bl	8009408 <LPTIM_WaitForFlag>
 800959e:	0003      	movs	r3, r0
 80095a0:	2b03      	cmp	r3, #3
 80095a2:	d103      	bne.n	80095ac <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2236      	movs	r2, #54	@ 0x36
 80095a8:	2103      	movs	r1, #3
 80095aa:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2208      	movs	r2, #8
 80095b2:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d01b      	beq.n	80095f2 <LPTIM_Disable+0x17a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	691a      	ldr	r2, [r3, #16]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2101      	movs	r1, #1
 80095c6:	430a      	orrs	r2, r1
 80095c8:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	69ba      	ldr	r2, [r7, #24]
 80095d0:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2110      	movs	r1, #16
 80095d6:	0018      	movs	r0, r3
 80095d8:	f7ff ff16 	bl	8009408 <LPTIM_WaitForFlag>
 80095dc:	0003      	movs	r3, r0
 80095de:	2b03      	cmp	r3, #3
 80095e0:	d103      	bne.n	80095ea <LPTIM_Disable+0x172>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2236      	movs	r2, #54	@ 0x36
 80095e6:	2103      	movs	r1, #3
 80095e8:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2210      	movs	r2, #16
 80095f0:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a1c      	ldr	r2, [pc, #112]	@ (8009668 <LPTIM_Disable+0x1f0>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d003      	beq.n	8009604 <LPTIM_Disable+0x18c>
 80095fc:	4a1b      	ldr	r2, [pc, #108]	@ (800966c <LPTIM_Disable+0x1f4>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d00a      	beq.n	8009618 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8009602:	e013      	b.n	800962c <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8009604:	4b1a      	ldr	r3, [pc, #104]	@ (8009670 <LPTIM_Disable+0x1f8>)
 8009606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009608:	4a1b      	ldr	r2, [pc, #108]	@ (8009678 <LPTIM_Disable+0x200>)
 800960a:	4013      	ands	r3, r2
 800960c:	0019      	movs	r1, r3
 800960e:	4b18      	ldr	r3, [pc, #96]	@ (8009670 <LPTIM_Disable+0x1f8>)
 8009610:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009612:	430a      	orrs	r2, r1
 8009614:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009616:	e009      	b.n	800962c <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8009618:	4b15      	ldr	r3, [pc, #84]	@ (8009670 <LPTIM_Disable+0x1f8>)
 800961a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800961c:	4a17      	ldr	r2, [pc, #92]	@ (800967c <LPTIM_Disable+0x204>)
 800961e:	4013      	ands	r3, r2
 8009620:	0019      	movs	r1, r3
 8009622:	4b13      	ldr	r3, [pc, #76]	@ (8009670 <LPTIM_Disable+0x1f8>)
 8009624:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009626:	430a      	orrs	r2, r1
 8009628:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800962a:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	691a      	ldr	r2, [r3, #16]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2101      	movs	r1, #1
 8009638:	438a      	bics	r2, r1
 800963a:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009642:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	6a3a      	ldr	r2, [r7, #32]
 800964a:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	697a      	ldr	r2, [r7, #20]
 8009652:	625a      	str	r2, [r3, #36]	@ 0x24
 8009654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009656:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	f383 8810 	msr	PRIMASK, r3
}
 800965e:	46c0      	nop			@ (mov r8, r8)

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009660:	46c0      	nop			@ (mov r8, r8)
 8009662:	46bd      	mov	sp, r7
 8009664:	b00c      	add	sp, #48	@ 0x30
 8009666:	bd80      	pop	{r7, pc}
 8009668:	40007c00 	.word	0x40007c00
 800966c:	40009400 	.word	0x40009400
 8009670:	40021000 	.word	0x40021000
 8009674:	bfffffff 	.word	0xbfffffff
 8009678:	fff3ffff 	.word	0xfff3ffff
 800967c:	ffcfffff 	.word	0xffcfffff

08009680 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8009688:	4b19      	ldr	r3, [pc, #100]	@ (80096f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a19      	ldr	r2, [pc, #100]	@ (80096f4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800968e:	4013      	ands	r3, r2
 8009690:	0019      	movs	r1, r3
 8009692:	4b17      	ldr	r3, [pc, #92]	@ (80096f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	430a      	orrs	r2, r1
 8009698:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	2380      	movs	r3, #128	@ 0x80
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d11f      	bne.n	80096e4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80096a4:	4b14      	ldr	r3, [pc, #80]	@ (80096f8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	0013      	movs	r3, r2
 80096aa:	005b      	lsls	r3, r3, #1
 80096ac:	189b      	adds	r3, r3, r2
 80096ae:	005b      	lsls	r3, r3, #1
 80096b0:	4912      	ldr	r1, [pc, #72]	@ (80096fc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80096b2:	0018      	movs	r0, r3
 80096b4:	f7f6 fd28 	bl	8000108 <__udivsi3>
 80096b8:	0003      	movs	r3, r0
 80096ba:	3301      	adds	r3, #1
 80096bc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80096be:	e008      	b.n	80096d2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d003      	beq.n	80096ce <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	3b01      	subs	r3, #1
 80096ca:	60fb      	str	r3, [r7, #12]
 80096cc:	e001      	b.n	80096d2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80096ce:	2303      	movs	r3, #3
 80096d0:	e009      	b.n	80096e6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80096d2:	4b07      	ldr	r3, [pc, #28]	@ (80096f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80096d4:	695a      	ldr	r2, [r3, #20]
 80096d6:	2380      	movs	r3, #128	@ 0x80
 80096d8:	00db      	lsls	r3, r3, #3
 80096da:	401a      	ands	r2, r3
 80096dc:	2380      	movs	r3, #128	@ 0x80
 80096de:	00db      	lsls	r3, r3, #3
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d0ed      	beq.n	80096c0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	0018      	movs	r0, r3
 80096e8:	46bd      	mov	sp, r7
 80096ea:	b004      	add	sp, #16
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	46c0      	nop			@ (mov r8, r8)
 80096f0:	40007000 	.word	0x40007000
 80096f4:	fffff9ff 	.word	0xfffff9ff
 80096f8:	2000044c 	.word	0x2000044c
 80096fc:	000f4240 	.word	0x000f4240

08009700 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009704:	4b03      	ldr	r3, [pc, #12]	@ (8009714 <LL_RCC_GetAPB1Prescaler+0x14>)
 8009706:	689a      	ldr	r2, [r3, #8]
 8009708:	23e0      	movs	r3, #224	@ 0xe0
 800970a:	01db      	lsls	r3, r3, #7
 800970c:	4013      	ands	r3, r2
}
 800970e:	0018      	movs	r0, r3
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	40021000 	.word	0x40021000

08009718 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b088      	sub	sp, #32
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d101      	bne.n	800972a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e2fe      	b.n	8009d28 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2201      	movs	r2, #1
 8009730:	4013      	ands	r3, r2
 8009732:	d100      	bne.n	8009736 <HAL_RCC_OscConfig+0x1e>
 8009734:	e07c      	b.n	8009830 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009736:	4bc3      	ldr	r3, [pc, #780]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	2238      	movs	r2, #56	@ 0x38
 800973c:	4013      	ands	r3, r2
 800973e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009740:	4bc0      	ldr	r3, [pc, #768]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	2203      	movs	r2, #3
 8009746:	4013      	ands	r3, r2
 8009748:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	2b10      	cmp	r3, #16
 800974e:	d102      	bne.n	8009756 <HAL_RCC_OscConfig+0x3e>
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	2b03      	cmp	r3, #3
 8009754:	d002      	beq.n	800975c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	2b08      	cmp	r3, #8
 800975a:	d10b      	bne.n	8009774 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800975c:	4bb9      	ldr	r3, [pc, #740]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	2380      	movs	r3, #128	@ 0x80
 8009762:	029b      	lsls	r3, r3, #10
 8009764:	4013      	ands	r3, r2
 8009766:	d062      	beq.n	800982e <HAL_RCC_OscConfig+0x116>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d15e      	bne.n	800982e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e2d9      	b.n	8009d28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685a      	ldr	r2, [r3, #4]
 8009778:	2380      	movs	r3, #128	@ 0x80
 800977a:	025b      	lsls	r3, r3, #9
 800977c:	429a      	cmp	r2, r3
 800977e:	d107      	bne.n	8009790 <HAL_RCC_OscConfig+0x78>
 8009780:	4bb0      	ldr	r3, [pc, #704]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	4baf      	ldr	r3, [pc, #700]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 8009786:	2180      	movs	r1, #128	@ 0x80
 8009788:	0249      	lsls	r1, r1, #9
 800978a:	430a      	orrs	r2, r1
 800978c:	601a      	str	r2, [r3, #0]
 800978e:	e020      	b.n	80097d2 <HAL_RCC_OscConfig+0xba>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685a      	ldr	r2, [r3, #4]
 8009794:	23a0      	movs	r3, #160	@ 0xa0
 8009796:	02db      	lsls	r3, r3, #11
 8009798:	429a      	cmp	r2, r3
 800979a:	d10e      	bne.n	80097ba <HAL_RCC_OscConfig+0xa2>
 800979c:	4ba9      	ldr	r3, [pc, #676]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	4ba8      	ldr	r3, [pc, #672]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 80097a2:	2180      	movs	r1, #128	@ 0x80
 80097a4:	02c9      	lsls	r1, r1, #11
 80097a6:	430a      	orrs	r2, r1
 80097a8:	601a      	str	r2, [r3, #0]
 80097aa:	4ba6      	ldr	r3, [pc, #664]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	4ba5      	ldr	r3, [pc, #660]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 80097b0:	2180      	movs	r1, #128	@ 0x80
 80097b2:	0249      	lsls	r1, r1, #9
 80097b4:	430a      	orrs	r2, r1
 80097b6:	601a      	str	r2, [r3, #0]
 80097b8:	e00b      	b.n	80097d2 <HAL_RCC_OscConfig+0xba>
 80097ba:	4ba2      	ldr	r3, [pc, #648]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	4ba1      	ldr	r3, [pc, #644]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 80097c0:	49a1      	ldr	r1, [pc, #644]	@ (8009a48 <HAL_RCC_OscConfig+0x330>)
 80097c2:	400a      	ands	r2, r1
 80097c4:	601a      	str	r2, [r3, #0]
 80097c6:	4b9f      	ldr	r3, [pc, #636]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	4b9e      	ldr	r3, [pc, #632]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 80097cc:	499f      	ldr	r1, [pc, #636]	@ (8009a4c <HAL_RCC_OscConfig+0x334>)
 80097ce:	400a      	ands	r2, r1
 80097d0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d014      	beq.n	8009804 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097da:	f7fd f973 	bl	8006ac4 <HAL_GetTick>
 80097de:	0003      	movs	r3, r0
 80097e0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80097e2:	e008      	b.n	80097f6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097e4:	f7fd f96e 	bl	8006ac4 <HAL_GetTick>
 80097e8:	0002      	movs	r2, r0
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	1ad3      	subs	r3, r2, r3
 80097ee:	2b64      	cmp	r3, #100	@ 0x64
 80097f0:	d901      	bls.n	80097f6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80097f2:	2303      	movs	r3, #3
 80097f4:	e298      	b.n	8009d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80097f6:	4b93      	ldr	r3, [pc, #588]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	2380      	movs	r3, #128	@ 0x80
 80097fc:	029b      	lsls	r3, r3, #10
 80097fe:	4013      	ands	r3, r2
 8009800:	d0f0      	beq.n	80097e4 <HAL_RCC_OscConfig+0xcc>
 8009802:	e015      	b.n	8009830 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009804:	f7fd f95e 	bl	8006ac4 <HAL_GetTick>
 8009808:	0003      	movs	r3, r0
 800980a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800980c:	e008      	b.n	8009820 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800980e:	f7fd f959 	bl	8006ac4 <HAL_GetTick>
 8009812:	0002      	movs	r2, r0
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	2b64      	cmp	r3, #100	@ 0x64
 800981a:	d901      	bls.n	8009820 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800981c:	2303      	movs	r3, #3
 800981e:	e283      	b.n	8009d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009820:	4b88      	ldr	r3, [pc, #544]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	2380      	movs	r3, #128	@ 0x80
 8009826:	029b      	lsls	r3, r3, #10
 8009828:	4013      	ands	r3, r2
 800982a:	d1f0      	bne.n	800980e <HAL_RCC_OscConfig+0xf6>
 800982c:	e000      	b.n	8009830 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800982e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2202      	movs	r2, #2
 8009836:	4013      	ands	r3, r2
 8009838:	d100      	bne.n	800983c <HAL_RCC_OscConfig+0x124>
 800983a:	e099      	b.n	8009970 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800983c:	4b81      	ldr	r3, [pc, #516]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	2238      	movs	r2, #56	@ 0x38
 8009842:	4013      	ands	r3, r2
 8009844:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009846:	4b7f      	ldr	r3, [pc, #508]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	2203      	movs	r2, #3
 800984c:	4013      	ands	r3, r2
 800984e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	2b10      	cmp	r3, #16
 8009854:	d102      	bne.n	800985c <HAL_RCC_OscConfig+0x144>
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	2b02      	cmp	r3, #2
 800985a:	d002      	beq.n	8009862 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d135      	bne.n	80098ce <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009862:	4b78      	ldr	r3, [pc, #480]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	2380      	movs	r3, #128	@ 0x80
 8009868:	00db      	lsls	r3, r3, #3
 800986a:	4013      	ands	r3, r2
 800986c:	d005      	beq.n	800987a <HAL_RCC_OscConfig+0x162>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d101      	bne.n	800987a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e256      	b.n	8009d28 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800987a:	4b72      	ldr	r3, [pc, #456]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	4a74      	ldr	r2, [pc, #464]	@ (8009a50 <HAL_RCC_OscConfig+0x338>)
 8009880:	4013      	ands	r3, r2
 8009882:	0019      	movs	r1, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	695b      	ldr	r3, [r3, #20]
 8009888:	021a      	lsls	r2, r3, #8
 800988a:	4b6e      	ldr	r3, [pc, #440]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 800988c:	430a      	orrs	r2, r1
 800988e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d112      	bne.n	80098bc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009896:	4b6b      	ldr	r3, [pc, #428]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a6e      	ldr	r2, [pc, #440]	@ (8009a54 <HAL_RCC_OscConfig+0x33c>)
 800989c:	4013      	ands	r3, r2
 800989e:	0019      	movs	r1, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	691a      	ldr	r2, [r3, #16]
 80098a4:	4b67      	ldr	r3, [pc, #412]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 80098a6:	430a      	orrs	r2, r1
 80098a8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80098aa:	4b66      	ldr	r3, [pc, #408]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	0adb      	lsrs	r3, r3, #11
 80098b0:	2207      	movs	r2, #7
 80098b2:	4013      	ands	r3, r2
 80098b4:	4a68      	ldr	r2, [pc, #416]	@ (8009a58 <HAL_RCC_OscConfig+0x340>)
 80098b6:	40da      	lsrs	r2, r3
 80098b8:	4b68      	ldr	r3, [pc, #416]	@ (8009a5c <HAL_RCC_OscConfig+0x344>)
 80098ba:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80098bc:	4b68      	ldr	r3, [pc, #416]	@ (8009a60 <HAL_RCC_OscConfig+0x348>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	0018      	movs	r0, r3
 80098c2:	f7fd f8a3 	bl	8006a0c <HAL_InitTick>
 80098c6:	1e03      	subs	r3, r0, #0
 80098c8:	d051      	beq.n	800996e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e22c      	b.n	8009d28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d030      	beq.n	8009938 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80098d6:	4b5b      	ldr	r3, [pc, #364]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a5e      	ldr	r2, [pc, #376]	@ (8009a54 <HAL_RCC_OscConfig+0x33c>)
 80098dc:	4013      	ands	r3, r2
 80098de:	0019      	movs	r1, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	691a      	ldr	r2, [r3, #16]
 80098e4:	4b57      	ldr	r3, [pc, #348]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 80098e6:	430a      	orrs	r2, r1
 80098e8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80098ea:	4b56      	ldr	r3, [pc, #344]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	4b55      	ldr	r3, [pc, #340]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 80098f0:	2180      	movs	r1, #128	@ 0x80
 80098f2:	0049      	lsls	r1, r1, #1
 80098f4:	430a      	orrs	r2, r1
 80098f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098f8:	f7fd f8e4 	bl	8006ac4 <HAL_GetTick>
 80098fc:	0003      	movs	r3, r0
 80098fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009900:	e008      	b.n	8009914 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009902:	f7fd f8df 	bl	8006ac4 <HAL_GetTick>
 8009906:	0002      	movs	r2, r0
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	2b02      	cmp	r3, #2
 800990e:	d901      	bls.n	8009914 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009910:	2303      	movs	r3, #3
 8009912:	e209      	b.n	8009d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009914:	4b4b      	ldr	r3, [pc, #300]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	2380      	movs	r3, #128	@ 0x80
 800991a:	00db      	lsls	r3, r3, #3
 800991c:	4013      	ands	r3, r2
 800991e:	d0f0      	beq.n	8009902 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009920:	4b48      	ldr	r3, [pc, #288]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	4a4a      	ldr	r2, [pc, #296]	@ (8009a50 <HAL_RCC_OscConfig+0x338>)
 8009926:	4013      	ands	r3, r2
 8009928:	0019      	movs	r1, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	695b      	ldr	r3, [r3, #20]
 800992e:	021a      	lsls	r2, r3, #8
 8009930:	4b44      	ldr	r3, [pc, #272]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 8009932:	430a      	orrs	r2, r1
 8009934:	605a      	str	r2, [r3, #4]
 8009936:	e01b      	b.n	8009970 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8009938:	4b42      	ldr	r3, [pc, #264]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	4b41      	ldr	r3, [pc, #260]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 800993e:	4949      	ldr	r1, [pc, #292]	@ (8009a64 <HAL_RCC_OscConfig+0x34c>)
 8009940:	400a      	ands	r2, r1
 8009942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009944:	f7fd f8be 	bl	8006ac4 <HAL_GetTick>
 8009948:	0003      	movs	r3, r0
 800994a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800994c:	e008      	b.n	8009960 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800994e:	f7fd f8b9 	bl	8006ac4 <HAL_GetTick>
 8009952:	0002      	movs	r2, r0
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	2b02      	cmp	r3, #2
 800995a:	d901      	bls.n	8009960 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800995c:	2303      	movs	r3, #3
 800995e:	e1e3      	b.n	8009d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009960:	4b38      	ldr	r3, [pc, #224]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	2380      	movs	r3, #128	@ 0x80
 8009966:	00db      	lsls	r3, r3, #3
 8009968:	4013      	ands	r3, r2
 800996a:	d1f0      	bne.n	800994e <HAL_RCC_OscConfig+0x236>
 800996c:	e000      	b.n	8009970 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800996e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	2208      	movs	r2, #8
 8009976:	4013      	ands	r3, r2
 8009978:	d047      	beq.n	8009a0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800997a:	4b32      	ldr	r3, [pc, #200]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	2238      	movs	r2, #56	@ 0x38
 8009980:	4013      	ands	r3, r2
 8009982:	2b18      	cmp	r3, #24
 8009984:	d10a      	bne.n	800999c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8009986:	4b2f      	ldr	r3, [pc, #188]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 8009988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800998a:	2202      	movs	r2, #2
 800998c:	4013      	ands	r3, r2
 800998e:	d03c      	beq.n	8009a0a <HAL_RCC_OscConfig+0x2f2>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d138      	bne.n	8009a0a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e1c5      	b.n	8009d28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	699b      	ldr	r3, [r3, #24]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d019      	beq.n	80099d8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80099a4:	4b27      	ldr	r3, [pc, #156]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 80099a6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80099a8:	4b26      	ldr	r3, [pc, #152]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 80099aa:	2101      	movs	r1, #1
 80099ac:	430a      	orrs	r2, r1
 80099ae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099b0:	f7fd f888 	bl	8006ac4 <HAL_GetTick>
 80099b4:	0003      	movs	r3, r0
 80099b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80099b8:	e008      	b.n	80099cc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80099ba:	f7fd f883 	bl	8006ac4 <HAL_GetTick>
 80099be:	0002      	movs	r2, r0
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	1ad3      	subs	r3, r2, r3
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d901      	bls.n	80099cc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80099c8:	2303      	movs	r3, #3
 80099ca:	e1ad      	b.n	8009d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80099cc:	4b1d      	ldr	r3, [pc, #116]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 80099ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099d0:	2202      	movs	r2, #2
 80099d2:	4013      	ands	r3, r2
 80099d4:	d0f1      	beq.n	80099ba <HAL_RCC_OscConfig+0x2a2>
 80099d6:	e018      	b.n	8009a0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80099d8:	4b1a      	ldr	r3, [pc, #104]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 80099da:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80099dc:	4b19      	ldr	r3, [pc, #100]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 80099de:	2101      	movs	r1, #1
 80099e0:	438a      	bics	r2, r1
 80099e2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099e4:	f7fd f86e 	bl	8006ac4 <HAL_GetTick>
 80099e8:	0003      	movs	r3, r0
 80099ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80099ec:	e008      	b.n	8009a00 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80099ee:	f7fd f869 	bl	8006ac4 <HAL_GetTick>
 80099f2:	0002      	movs	r2, r0
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d901      	bls.n	8009a00 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80099fc:	2303      	movs	r3, #3
 80099fe:	e193      	b.n	8009d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009a00:	4b10      	ldr	r3, [pc, #64]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 8009a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a04:	2202      	movs	r2, #2
 8009a06:	4013      	ands	r3, r2
 8009a08:	d1f1      	bne.n	80099ee <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2204      	movs	r2, #4
 8009a10:	4013      	ands	r3, r2
 8009a12:	d100      	bne.n	8009a16 <HAL_RCC_OscConfig+0x2fe>
 8009a14:	e0c6      	b.n	8009ba4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a16:	231f      	movs	r3, #31
 8009a18:	18fb      	adds	r3, r7, r3
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009a1e:	4b09      	ldr	r3, [pc, #36]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	2238      	movs	r2, #56	@ 0x38
 8009a24:	4013      	ands	r3, r2
 8009a26:	2b20      	cmp	r3, #32
 8009a28:	d11e      	bne.n	8009a68 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8009a2a:	4b06      	ldr	r3, [pc, #24]	@ (8009a44 <HAL_RCC_OscConfig+0x32c>)
 8009a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a2e:	2202      	movs	r2, #2
 8009a30:	4013      	ands	r3, r2
 8009a32:	d100      	bne.n	8009a36 <HAL_RCC_OscConfig+0x31e>
 8009a34:	e0b6      	b.n	8009ba4 <HAL_RCC_OscConfig+0x48c>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d000      	beq.n	8009a40 <HAL_RCC_OscConfig+0x328>
 8009a3e:	e0b1      	b.n	8009ba4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	e171      	b.n	8009d28 <HAL_RCC_OscConfig+0x610>
 8009a44:	40021000 	.word	0x40021000
 8009a48:	fffeffff 	.word	0xfffeffff
 8009a4c:	fffbffff 	.word	0xfffbffff
 8009a50:	ffff80ff 	.word	0xffff80ff
 8009a54:	ffffc7ff 	.word	0xffffc7ff
 8009a58:	00f42400 	.word	0x00f42400
 8009a5c:	2000044c 	.word	0x2000044c
 8009a60:	20000450 	.word	0x20000450
 8009a64:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009a68:	4bb1      	ldr	r3, [pc, #708]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009a6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a6c:	2380      	movs	r3, #128	@ 0x80
 8009a6e:	055b      	lsls	r3, r3, #21
 8009a70:	4013      	ands	r3, r2
 8009a72:	d101      	bne.n	8009a78 <HAL_RCC_OscConfig+0x360>
 8009a74:	2301      	movs	r3, #1
 8009a76:	e000      	b.n	8009a7a <HAL_RCC_OscConfig+0x362>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d011      	beq.n	8009aa2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009a7e:	4bac      	ldr	r3, [pc, #688]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009a80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a82:	4bab      	ldr	r3, [pc, #684]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009a84:	2180      	movs	r1, #128	@ 0x80
 8009a86:	0549      	lsls	r1, r1, #21
 8009a88:	430a      	orrs	r2, r1
 8009a8a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009a8c:	4ba8      	ldr	r3, [pc, #672]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009a8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a90:	2380      	movs	r3, #128	@ 0x80
 8009a92:	055b      	lsls	r3, r3, #21
 8009a94:	4013      	ands	r3, r2
 8009a96:	60fb      	str	r3, [r7, #12]
 8009a98:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8009a9a:	231f      	movs	r3, #31
 8009a9c:	18fb      	adds	r3, r7, r3
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009aa2:	4ba4      	ldr	r3, [pc, #656]	@ (8009d34 <HAL_RCC_OscConfig+0x61c>)
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	2380      	movs	r3, #128	@ 0x80
 8009aa8:	005b      	lsls	r3, r3, #1
 8009aaa:	4013      	ands	r3, r2
 8009aac:	d11a      	bne.n	8009ae4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009aae:	4ba1      	ldr	r3, [pc, #644]	@ (8009d34 <HAL_RCC_OscConfig+0x61c>)
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	4ba0      	ldr	r3, [pc, #640]	@ (8009d34 <HAL_RCC_OscConfig+0x61c>)
 8009ab4:	2180      	movs	r1, #128	@ 0x80
 8009ab6:	0049      	lsls	r1, r1, #1
 8009ab8:	430a      	orrs	r2, r1
 8009aba:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8009abc:	f7fd f802 	bl	8006ac4 <HAL_GetTick>
 8009ac0:	0003      	movs	r3, r0
 8009ac2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ac4:	e008      	b.n	8009ad8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ac6:	f7fc fffd 	bl	8006ac4 <HAL_GetTick>
 8009aca:	0002      	movs	r2, r0
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	2b02      	cmp	r3, #2
 8009ad2:	d901      	bls.n	8009ad8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8009ad4:	2303      	movs	r3, #3
 8009ad6:	e127      	b.n	8009d28 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ad8:	4b96      	ldr	r3, [pc, #600]	@ (8009d34 <HAL_RCC_OscConfig+0x61c>)
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	2380      	movs	r3, #128	@ 0x80
 8009ade:	005b      	lsls	r3, r3, #1
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	d0f0      	beq.n	8009ac6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d106      	bne.n	8009afa <HAL_RCC_OscConfig+0x3e2>
 8009aec:	4b90      	ldr	r3, [pc, #576]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009aee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009af0:	4b8f      	ldr	r3, [pc, #572]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009af2:	2101      	movs	r1, #1
 8009af4:	430a      	orrs	r2, r1
 8009af6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009af8:	e01c      	b.n	8009b34 <HAL_RCC_OscConfig+0x41c>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	2b05      	cmp	r3, #5
 8009b00:	d10c      	bne.n	8009b1c <HAL_RCC_OscConfig+0x404>
 8009b02:	4b8b      	ldr	r3, [pc, #556]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009b04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b06:	4b8a      	ldr	r3, [pc, #552]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009b08:	2104      	movs	r1, #4
 8009b0a:	430a      	orrs	r2, r1
 8009b0c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009b0e:	4b88      	ldr	r3, [pc, #544]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009b10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b12:	4b87      	ldr	r3, [pc, #540]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009b14:	2101      	movs	r1, #1
 8009b16:	430a      	orrs	r2, r1
 8009b18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009b1a:	e00b      	b.n	8009b34 <HAL_RCC_OscConfig+0x41c>
 8009b1c:	4b84      	ldr	r3, [pc, #528]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009b1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b20:	4b83      	ldr	r3, [pc, #524]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009b22:	2101      	movs	r1, #1
 8009b24:	438a      	bics	r2, r1
 8009b26:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009b28:	4b81      	ldr	r3, [pc, #516]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009b2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b2c:	4b80      	ldr	r3, [pc, #512]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009b2e:	2104      	movs	r1, #4
 8009b30:	438a      	bics	r2, r1
 8009b32:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d014      	beq.n	8009b66 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b3c:	f7fc ffc2 	bl	8006ac4 <HAL_GetTick>
 8009b40:	0003      	movs	r3, r0
 8009b42:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b44:	e009      	b.n	8009b5a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b46:	f7fc ffbd 	bl	8006ac4 <HAL_GetTick>
 8009b4a:	0002      	movs	r2, r0
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	4a79      	ldr	r2, [pc, #484]	@ (8009d38 <HAL_RCC_OscConfig+0x620>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d901      	bls.n	8009b5a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8009b56:	2303      	movs	r3, #3
 8009b58:	e0e6      	b.n	8009d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b5a:	4b75      	ldr	r3, [pc, #468]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b5e:	2202      	movs	r2, #2
 8009b60:	4013      	ands	r3, r2
 8009b62:	d0f0      	beq.n	8009b46 <HAL_RCC_OscConfig+0x42e>
 8009b64:	e013      	b.n	8009b8e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b66:	f7fc ffad 	bl	8006ac4 <HAL_GetTick>
 8009b6a:	0003      	movs	r3, r0
 8009b6c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009b6e:	e009      	b.n	8009b84 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b70:	f7fc ffa8 	bl	8006ac4 <HAL_GetTick>
 8009b74:	0002      	movs	r2, r0
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	4a6f      	ldr	r2, [pc, #444]	@ (8009d38 <HAL_RCC_OscConfig+0x620>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d901      	bls.n	8009b84 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8009b80:	2303      	movs	r3, #3
 8009b82:	e0d1      	b.n	8009d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009b84:	4b6a      	ldr	r3, [pc, #424]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b88:	2202      	movs	r2, #2
 8009b8a:	4013      	ands	r3, r2
 8009b8c:	d1f0      	bne.n	8009b70 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8009b8e:	231f      	movs	r3, #31
 8009b90:	18fb      	adds	r3, r7, r3
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d105      	bne.n	8009ba4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8009b98:	4b65      	ldr	r3, [pc, #404]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009b9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b9c:	4b64      	ldr	r3, [pc, #400]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009b9e:	4967      	ldr	r1, [pc, #412]	@ (8009d3c <HAL_RCC_OscConfig+0x624>)
 8009ba0:	400a      	ands	r2, r1
 8009ba2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	69db      	ldr	r3, [r3, #28]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d100      	bne.n	8009bae <HAL_RCC_OscConfig+0x496>
 8009bac:	e0bb      	b.n	8009d26 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009bae:	4b60      	ldr	r3, [pc, #384]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	2238      	movs	r2, #56	@ 0x38
 8009bb4:	4013      	ands	r3, r2
 8009bb6:	2b10      	cmp	r3, #16
 8009bb8:	d100      	bne.n	8009bbc <HAL_RCC_OscConfig+0x4a4>
 8009bba:	e07b      	b.n	8009cb4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	69db      	ldr	r3, [r3, #28]
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	d156      	bne.n	8009c72 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009bc4:	4b5a      	ldr	r3, [pc, #360]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	4b59      	ldr	r3, [pc, #356]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009bca:	495d      	ldr	r1, [pc, #372]	@ (8009d40 <HAL_RCC_OscConfig+0x628>)
 8009bcc:	400a      	ands	r2, r1
 8009bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bd0:	f7fc ff78 	bl	8006ac4 <HAL_GetTick>
 8009bd4:	0003      	movs	r3, r0
 8009bd6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009bd8:	e008      	b.n	8009bec <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bda:	f7fc ff73 	bl	8006ac4 <HAL_GetTick>
 8009bde:	0002      	movs	r2, r0
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	1ad3      	subs	r3, r2, r3
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	d901      	bls.n	8009bec <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8009be8:	2303      	movs	r3, #3
 8009bea:	e09d      	b.n	8009d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009bec:	4b50      	ldr	r3, [pc, #320]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	2380      	movs	r3, #128	@ 0x80
 8009bf2:	049b      	lsls	r3, r3, #18
 8009bf4:	4013      	ands	r3, r2
 8009bf6:	d1f0      	bne.n	8009bda <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009bf8:	4b4d      	ldr	r3, [pc, #308]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	4a51      	ldr	r2, [pc, #324]	@ (8009d44 <HAL_RCC_OscConfig+0x62c>)
 8009bfe:	4013      	ands	r3, r2
 8009c00:	0019      	movs	r1, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a1a      	ldr	r2, [r3, #32]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c0a:	431a      	orrs	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c10:	021b      	lsls	r3, r3, #8
 8009c12:	431a      	orrs	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c18:	431a      	orrs	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c1e:	431a      	orrs	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c24:	431a      	orrs	r2, r3
 8009c26:	4b42      	ldr	r3, [pc, #264]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009c28:	430a      	orrs	r2, r1
 8009c2a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c2c:	4b40      	ldr	r3, [pc, #256]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	4b3f      	ldr	r3, [pc, #252]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009c32:	2180      	movs	r1, #128	@ 0x80
 8009c34:	0449      	lsls	r1, r1, #17
 8009c36:	430a      	orrs	r2, r1
 8009c38:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8009c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009c3c:	68da      	ldr	r2, [r3, #12]
 8009c3e:	4b3c      	ldr	r3, [pc, #240]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009c40:	2180      	movs	r1, #128	@ 0x80
 8009c42:	0549      	lsls	r1, r1, #21
 8009c44:	430a      	orrs	r2, r1
 8009c46:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c48:	f7fc ff3c 	bl	8006ac4 <HAL_GetTick>
 8009c4c:	0003      	movs	r3, r0
 8009c4e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c50:	e008      	b.n	8009c64 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c52:	f7fc ff37 	bl	8006ac4 <HAL_GetTick>
 8009c56:	0002      	movs	r2, r0
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d901      	bls.n	8009c64 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8009c60:	2303      	movs	r3, #3
 8009c62:	e061      	b.n	8009d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c64:	4b32      	ldr	r3, [pc, #200]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	2380      	movs	r3, #128	@ 0x80
 8009c6a:	049b      	lsls	r3, r3, #18
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	d0f0      	beq.n	8009c52 <HAL_RCC_OscConfig+0x53a>
 8009c70:	e059      	b.n	8009d26 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c72:	4b2f      	ldr	r3, [pc, #188]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	4b2e      	ldr	r3, [pc, #184]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009c78:	4931      	ldr	r1, [pc, #196]	@ (8009d40 <HAL_RCC_OscConfig+0x628>)
 8009c7a:	400a      	ands	r2, r1
 8009c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c7e:	f7fc ff21 	bl	8006ac4 <HAL_GetTick>
 8009c82:	0003      	movs	r3, r0
 8009c84:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c86:	e008      	b.n	8009c9a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c88:	f7fc ff1c 	bl	8006ac4 <HAL_GetTick>
 8009c8c:	0002      	movs	r2, r0
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	2b02      	cmp	r3, #2
 8009c94:	d901      	bls.n	8009c9a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8009c96:	2303      	movs	r3, #3
 8009c98:	e046      	b.n	8009d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c9a:	4b25      	ldr	r3, [pc, #148]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	2380      	movs	r3, #128	@ 0x80
 8009ca0:	049b      	lsls	r3, r3, #18
 8009ca2:	4013      	ands	r3, r2
 8009ca4:	d1f0      	bne.n	8009c88 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8009ca6:	4b22      	ldr	r3, [pc, #136]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009ca8:	68da      	ldr	r2, [r3, #12]
 8009caa:	4b21      	ldr	r3, [pc, #132]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009cac:	4926      	ldr	r1, [pc, #152]	@ (8009d48 <HAL_RCC_OscConfig+0x630>)
 8009cae:	400a      	ands	r2, r1
 8009cb0:	60da      	str	r2, [r3, #12]
 8009cb2:	e038      	b.n	8009d26 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	69db      	ldr	r3, [r3, #28]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d101      	bne.n	8009cc0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e033      	b.n	8009d28 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8009cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8009d30 <HAL_RCC_OscConfig+0x618>)
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	2203      	movs	r2, #3
 8009cca:	401a      	ands	r2, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6a1b      	ldr	r3, [r3, #32]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d126      	bne.n	8009d22 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	2270      	movs	r2, #112	@ 0x70
 8009cd8:	401a      	ands	r2, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d11f      	bne.n	8009d22 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009ce2:	697a      	ldr	r2, [r7, #20]
 8009ce4:	23fe      	movs	r3, #254	@ 0xfe
 8009ce6:	01db      	lsls	r3, r3, #7
 8009ce8:	401a      	ands	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cee:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d116      	bne.n	8009d22 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009cf4:	697a      	ldr	r2, [r7, #20]
 8009cf6:	23f8      	movs	r3, #248	@ 0xf8
 8009cf8:	039b      	lsls	r3, r3, #14
 8009cfa:	401a      	ands	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d10e      	bne.n	8009d22 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	23e0      	movs	r3, #224	@ 0xe0
 8009d08:	051b      	lsls	r3, r3, #20
 8009d0a:	401a      	ands	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d106      	bne.n	8009d22 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	0f5b      	lsrs	r3, r3, #29
 8009d18:	075a      	lsls	r2, r3, #29
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d001      	beq.n	8009d26 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e000      	b.n	8009d28 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	0018      	movs	r0, r3
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	b008      	add	sp, #32
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	40021000 	.word	0x40021000
 8009d34:	40007000 	.word	0x40007000
 8009d38:	00001388 	.word	0x00001388
 8009d3c:	efffffff 	.word	0xefffffff
 8009d40:	feffffff 	.word	0xfeffffff
 8009d44:	11c1808c 	.word	0x11c1808c
 8009d48:	eefefffc 	.word	0xeefefffc

08009d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d101      	bne.n	8009d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e0e9      	b.n	8009f34 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009d60:	4b76      	ldr	r3, [pc, #472]	@ (8009f3c <HAL_RCC_ClockConfig+0x1f0>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2207      	movs	r2, #7
 8009d66:	4013      	ands	r3, r2
 8009d68:	683a      	ldr	r2, [r7, #0]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d91e      	bls.n	8009dac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d6e:	4b73      	ldr	r3, [pc, #460]	@ (8009f3c <HAL_RCC_ClockConfig+0x1f0>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2207      	movs	r2, #7
 8009d74:	4393      	bics	r3, r2
 8009d76:	0019      	movs	r1, r3
 8009d78:	4b70      	ldr	r3, [pc, #448]	@ (8009f3c <HAL_RCC_ClockConfig+0x1f0>)
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	430a      	orrs	r2, r1
 8009d7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009d80:	f7fc fea0 	bl	8006ac4 <HAL_GetTick>
 8009d84:	0003      	movs	r3, r0
 8009d86:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009d88:	e009      	b.n	8009d9e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d8a:	f7fc fe9b 	bl	8006ac4 <HAL_GetTick>
 8009d8e:	0002      	movs	r2, r0
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	1ad3      	subs	r3, r2, r3
 8009d94:	4a6a      	ldr	r2, [pc, #424]	@ (8009f40 <HAL_RCC_ClockConfig+0x1f4>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d901      	bls.n	8009d9e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	e0ca      	b.n	8009f34 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009d9e:	4b67      	ldr	r3, [pc, #412]	@ (8009f3c <HAL_RCC_ClockConfig+0x1f0>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2207      	movs	r2, #7
 8009da4:	4013      	ands	r3, r2
 8009da6:	683a      	ldr	r2, [r7, #0]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d1ee      	bne.n	8009d8a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2202      	movs	r2, #2
 8009db2:	4013      	ands	r3, r2
 8009db4:	d015      	beq.n	8009de2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2204      	movs	r2, #4
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	d006      	beq.n	8009dce <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8009dc0:	4b60      	ldr	r3, [pc, #384]	@ (8009f44 <HAL_RCC_ClockConfig+0x1f8>)
 8009dc2:	689a      	ldr	r2, [r3, #8]
 8009dc4:	4b5f      	ldr	r3, [pc, #380]	@ (8009f44 <HAL_RCC_ClockConfig+0x1f8>)
 8009dc6:	21e0      	movs	r1, #224	@ 0xe0
 8009dc8:	01c9      	lsls	r1, r1, #7
 8009dca:	430a      	orrs	r2, r1
 8009dcc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009dce:	4b5d      	ldr	r3, [pc, #372]	@ (8009f44 <HAL_RCC_ClockConfig+0x1f8>)
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	4a5d      	ldr	r2, [pc, #372]	@ (8009f48 <HAL_RCC_ClockConfig+0x1fc>)
 8009dd4:	4013      	ands	r3, r2
 8009dd6:	0019      	movs	r1, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	689a      	ldr	r2, [r3, #8]
 8009ddc:	4b59      	ldr	r3, [pc, #356]	@ (8009f44 <HAL_RCC_ClockConfig+0x1f8>)
 8009dde:	430a      	orrs	r2, r1
 8009de0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2201      	movs	r2, #1
 8009de8:	4013      	ands	r3, r2
 8009dea:	d057      	beq.n	8009e9c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d107      	bne.n	8009e04 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009df4:	4b53      	ldr	r3, [pc, #332]	@ (8009f44 <HAL_RCC_ClockConfig+0x1f8>)
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	2380      	movs	r3, #128	@ 0x80
 8009dfa:	029b      	lsls	r3, r3, #10
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	d12b      	bne.n	8009e58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009e00:	2301      	movs	r3, #1
 8009e02:	e097      	b.n	8009f34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	d107      	bne.n	8009e1c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009e0c:	4b4d      	ldr	r3, [pc, #308]	@ (8009f44 <HAL_RCC_ClockConfig+0x1f8>)
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	2380      	movs	r3, #128	@ 0x80
 8009e12:	049b      	lsls	r3, r3, #18
 8009e14:	4013      	ands	r3, r2
 8009e16:	d11f      	bne.n	8009e58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e08b      	b.n	8009f34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d107      	bne.n	8009e34 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009e24:	4b47      	ldr	r3, [pc, #284]	@ (8009f44 <HAL_RCC_ClockConfig+0x1f8>)
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	2380      	movs	r3, #128	@ 0x80
 8009e2a:	00db      	lsls	r3, r3, #3
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	d113      	bne.n	8009e58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	e07f      	b.n	8009f34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	2b03      	cmp	r3, #3
 8009e3a:	d106      	bne.n	8009e4a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009e3c:	4b41      	ldr	r3, [pc, #260]	@ (8009f44 <HAL_RCC_ClockConfig+0x1f8>)
 8009e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e40:	2202      	movs	r2, #2
 8009e42:	4013      	ands	r3, r2
 8009e44:	d108      	bne.n	8009e58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e074      	b.n	8009f34 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e4a:	4b3e      	ldr	r3, [pc, #248]	@ (8009f44 <HAL_RCC_ClockConfig+0x1f8>)
 8009e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e4e:	2202      	movs	r2, #2
 8009e50:	4013      	ands	r3, r2
 8009e52:	d101      	bne.n	8009e58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	e06d      	b.n	8009f34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009e58:	4b3a      	ldr	r3, [pc, #232]	@ (8009f44 <HAL_RCC_ClockConfig+0x1f8>)
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	2207      	movs	r2, #7
 8009e5e:	4393      	bics	r3, r2
 8009e60:	0019      	movs	r1, r3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	685a      	ldr	r2, [r3, #4]
 8009e66:	4b37      	ldr	r3, [pc, #220]	@ (8009f44 <HAL_RCC_ClockConfig+0x1f8>)
 8009e68:	430a      	orrs	r2, r1
 8009e6a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e6c:	f7fc fe2a 	bl	8006ac4 <HAL_GetTick>
 8009e70:	0003      	movs	r3, r0
 8009e72:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e74:	e009      	b.n	8009e8a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e76:	f7fc fe25 	bl	8006ac4 <HAL_GetTick>
 8009e7a:	0002      	movs	r2, r0
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	1ad3      	subs	r3, r2, r3
 8009e80:	4a2f      	ldr	r2, [pc, #188]	@ (8009f40 <HAL_RCC_ClockConfig+0x1f4>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d901      	bls.n	8009e8a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8009e86:	2303      	movs	r3, #3
 8009e88:	e054      	b.n	8009f34 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e8a:	4b2e      	ldr	r3, [pc, #184]	@ (8009f44 <HAL_RCC_ClockConfig+0x1f8>)
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	2238      	movs	r2, #56	@ 0x38
 8009e90:	401a      	ands	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	00db      	lsls	r3, r3, #3
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d1ec      	bne.n	8009e76 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009e9c:	4b27      	ldr	r3, [pc, #156]	@ (8009f3c <HAL_RCC_ClockConfig+0x1f0>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2207      	movs	r2, #7
 8009ea2:	4013      	ands	r3, r2
 8009ea4:	683a      	ldr	r2, [r7, #0]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d21e      	bcs.n	8009ee8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009eaa:	4b24      	ldr	r3, [pc, #144]	@ (8009f3c <HAL_RCC_ClockConfig+0x1f0>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2207      	movs	r2, #7
 8009eb0:	4393      	bics	r3, r2
 8009eb2:	0019      	movs	r1, r3
 8009eb4:	4b21      	ldr	r3, [pc, #132]	@ (8009f3c <HAL_RCC_ClockConfig+0x1f0>)
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	430a      	orrs	r2, r1
 8009eba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009ebc:	f7fc fe02 	bl	8006ac4 <HAL_GetTick>
 8009ec0:	0003      	movs	r3, r0
 8009ec2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009ec4:	e009      	b.n	8009eda <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ec6:	f7fc fdfd 	bl	8006ac4 <HAL_GetTick>
 8009eca:	0002      	movs	r2, r0
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	1ad3      	subs	r3, r2, r3
 8009ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8009f40 <HAL_RCC_ClockConfig+0x1f4>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d901      	bls.n	8009eda <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	e02c      	b.n	8009f34 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009eda:	4b18      	ldr	r3, [pc, #96]	@ (8009f3c <HAL_RCC_ClockConfig+0x1f0>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2207      	movs	r2, #7
 8009ee0:	4013      	ands	r3, r2
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d1ee      	bne.n	8009ec6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2204      	movs	r2, #4
 8009eee:	4013      	ands	r3, r2
 8009ef0:	d009      	beq.n	8009f06 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8009ef2:	4b14      	ldr	r3, [pc, #80]	@ (8009f44 <HAL_RCC_ClockConfig+0x1f8>)
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	4a15      	ldr	r2, [pc, #84]	@ (8009f4c <HAL_RCC_ClockConfig+0x200>)
 8009ef8:	4013      	ands	r3, r2
 8009efa:	0019      	movs	r1, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	68da      	ldr	r2, [r3, #12]
 8009f00:	4b10      	ldr	r3, [pc, #64]	@ (8009f44 <HAL_RCC_ClockConfig+0x1f8>)
 8009f02:	430a      	orrs	r2, r1
 8009f04:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8009f06:	f000 f829 	bl	8009f5c <HAL_RCC_GetSysClockFreq>
 8009f0a:	0001      	movs	r1, r0
 8009f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8009f44 <HAL_RCC_ClockConfig+0x1f8>)
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	0a1b      	lsrs	r3, r3, #8
 8009f12:	220f      	movs	r2, #15
 8009f14:	401a      	ands	r2, r3
 8009f16:	4b0e      	ldr	r3, [pc, #56]	@ (8009f50 <HAL_RCC_ClockConfig+0x204>)
 8009f18:	0092      	lsls	r2, r2, #2
 8009f1a:	58d3      	ldr	r3, [r2, r3]
 8009f1c:	221f      	movs	r2, #31
 8009f1e:	4013      	ands	r3, r2
 8009f20:	000a      	movs	r2, r1
 8009f22:	40da      	lsrs	r2, r3
 8009f24:	4b0b      	ldr	r3, [pc, #44]	@ (8009f54 <HAL_RCC_ClockConfig+0x208>)
 8009f26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009f28:	4b0b      	ldr	r3, [pc, #44]	@ (8009f58 <HAL_RCC_ClockConfig+0x20c>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	0018      	movs	r0, r3
 8009f2e:	f7fc fd6d 	bl	8006a0c <HAL_InitTick>
 8009f32:	0003      	movs	r3, r0
}
 8009f34:	0018      	movs	r0, r3
 8009f36:	46bd      	mov	sp, r7
 8009f38:	b004      	add	sp, #16
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	40022000 	.word	0x40022000
 8009f40:	00001388 	.word	0x00001388
 8009f44:	40021000 	.word	0x40021000
 8009f48:	fffff0ff 	.word	0xfffff0ff
 8009f4c:	ffff8fff 	.word	0xffff8fff
 8009f50:	0800e98c 	.word	0x0800e98c
 8009f54:	2000044c 	.word	0x2000044c
 8009f58:	20000450 	.word	0x20000450

08009f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009f62:	4b3c      	ldr	r3, [pc, #240]	@ (800a054 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	2238      	movs	r2, #56	@ 0x38
 8009f68:	4013      	ands	r3, r2
 8009f6a:	d10f      	bne.n	8009f8c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009f6c:	4b39      	ldr	r3, [pc, #228]	@ (800a054 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	0adb      	lsrs	r3, r3, #11
 8009f72:	2207      	movs	r2, #7
 8009f74:	4013      	ands	r3, r2
 8009f76:	2201      	movs	r2, #1
 8009f78:	409a      	lsls	r2, r3
 8009f7a:	0013      	movs	r3, r2
 8009f7c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8009f7e:	6839      	ldr	r1, [r7, #0]
 8009f80:	4835      	ldr	r0, [pc, #212]	@ (800a058 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009f82:	f7f6 f8c1 	bl	8000108 <__udivsi3>
 8009f86:	0003      	movs	r3, r0
 8009f88:	613b      	str	r3, [r7, #16]
 8009f8a:	e05d      	b.n	800a048 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009f8c:	4b31      	ldr	r3, [pc, #196]	@ (800a054 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	2238      	movs	r2, #56	@ 0x38
 8009f92:	4013      	ands	r3, r2
 8009f94:	2b08      	cmp	r3, #8
 8009f96:	d102      	bne.n	8009f9e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009f98:	4b30      	ldr	r3, [pc, #192]	@ (800a05c <HAL_RCC_GetSysClockFreq+0x100>)
 8009f9a:	613b      	str	r3, [r7, #16]
 8009f9c:	e054      	b.n	800a048 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009f9e:	4b2d      	ldr	r3, [pc, #180]	@ (800a054 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	2238      	movs	r2, #56	@ 0x38
 8009fa4:	4013      	ands	r3, r2
 8009fa6:	2b10      	cmp	r3, #16
 8009fa8:	d138      	bne.n	800a01c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8009faa:	4b2a      	ldr	r3, [pc, #168]	@ (800a054 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	2203      	movs	r2, #3
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009fb4:	4b27      	ldr	r3, [pc, #156]	@ (800a054 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	091b      	lsrs	r3, r3, #4
 8009fba:	2207      	movs	r2, #7
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2b03      	cmp	r3, #3
 8009fc6:	d10d      	bne.n	8009fe4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009fc8:	68b9      	ldr	r1, [r7, #8]
 8009fca:	4824      	ldr	r0, [pc, #144]	@ (800a05c <HAL_RCC_GetSysClockFreq+0x100>)
 8009fcc:	f7f6 f89c 	bl	8000108 <__udivsi3>
 8009fd0:	0003      	movs	r3, r0
 8009fd2:	0019      	movs	r1, r3
 8009fd4:	4b1f      	ldr	r3, [pc, #124]	@ (800a054 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	0a1b      	lsrs	r3, r3, #8
 8009fda:	227f      	movs	r2, #127	@ 0x7f
 8009fdc:	4013      	ands	r3, r2
 8009fde:	434b      	muls	r3, r1
 8009fe0:	617b      	str	r3, [r7, #20]
        break;
 8009fe2:	e00d      	b.n	800a000 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8009fe4:	68b9      	ldr	r1, [r7, #8]
 8009fe6:	481c      	ldr	r0, [pc, #112]	@ (800a058 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009fe8:	f7f6 f88e 	bl	8000108 <__udivsi3>
 8009fec:	0003      	movs	r3, r0
 8009fee:	0019      	movs	r1, r3
 8009ff0:	4b18      	ldr	r3, [pc, #96]	@ (800a054 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	0a1b      	lsrs	r3, r3, #8
 8009ff6:	227f      	movs	r2, #127	@ 0x7f
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	434b      	muls	r3, r1
 8009ffc:	617b      	str	r3, [r7, #20]
        break;
 8009ffe:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800a000:	4b14      	ldr	r3, [pc, #80]	@ (800a054 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	0f5b      	lsrs	r3, r3, #29
 800a006:	2207      	movs	r2, #7
 800a008:	4013      	ands	r3, r2
 800a00a:	3301      	adds	r3, #1
 800a00c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800a00e:	6879      	ldr	r1, [r7, #4]
 800a010:	6978      	ldr	r0, [r7, #20]
 800a012:	f7f6 f879 	bl	8000108 <__udivsi3>
 800a016:	0003      	movs	r3, r0
 800a018:	613b      	str	r3, [r7, #16]
 800a01a:	e015      	b.n	800a048 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a01c:	4b0d      	ldr	r3, [pc, #52]	@ (800a054 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	2238      	movs	r2, #56	@ 0x38
 800a022:	4013      	ands	r3, r2
 800a024:	2b20      	cmp	r3, #32
 800a026:	d103      	bne.n	800a030 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800a028:	2380      	movs	r3, #128	@ 0x80
 800a02a:	021b      	lsls	r3, r3, #8
 800a02c:	613b      	str	r3, [r7, #16]
 800a02e:	e00b      	b.n	800a048 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a030:	4b08      	ldr	r3, [pc, #32]	@ (800a054 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	2238      	movs	r2, #56	@ 0x38
 800a036:	4013      	ands	r3, r2
 800a038:	2b18      	cmp	r3, #24
 800a03a:	d103      	bne.n	800a044 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800a03c:	23fa      	movs	r3, #250	@ 0xfa
 800a03e:	01db      	lsls	r3, r3, #7
 800a040:	613b      	str	r3, [r7, #16]
 800a042:	e001      	b.n	800a048 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800a044:	2300      	movs	r3, #0
 800a046:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a048:	693b      	ldr	r3, [r7, #16]
}
 800a04a:	0018      	movs	r0, r3
 800a04c:	46bd      	mov	sp, r7
 800a04e:	b006      	add	sp, #24
 800a050:	bd80      	pop	{r7, pc}
 800a052:	46c0      	nop			@ (mov r8, r8)
 800a054:	40021000 	.word	0x40021000
 800a058:	00f42400 	.word	0x00f42400
 800a05c:	007a1200 	.word	0x007a1200

0800a060 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a064:	4b02      	ldr	r3, [pc, #8]	@ (800a070 <HAL_RCC_GetHCLKFreq+0x10>)
 800a066:	681b      	ldr	r3, [r3, #0]
}
 800a068:	0018      	movs	r0, r3
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	46c0      	nop			@ (mov r8, r8)
 800a070:	2000044c 	.word	0x2000044c

0800a074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a074:	b5b0      	push	{r4, r5, r7, lr}
 800a076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a078:	f7ff fff2 	bl	800a060 <HAL_RCC_GetHCLKFreq>
 800a07c:	0004      	movs	r4, r0
 800a07e:	f7ff fb3f 	bl	8009700 <LL_RCC_GetAPB1Prescaler>
 800a082:	0003      	movs	r3, r0
 800a084:	0b1a      	lsrs	r2, r3, #12
 800a086:	4b05      	ldr	r3, [pc, #20]	@ (800a09c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a088:	0092      	lsls	r2, r2, #2
 800a08a:	58d3      	ldr	r3, [r2, r3]
 800a08c:	221f      	movs	r2, #31
 800a08e:	4013      	ands	r3, r2
 800a090:	40dc      	lsrs	r4, r3
 800a092:	0023      	movs	r3, r4
}
 800a094:	0018      	movs	r0, r3
 800a096:	46bd      	mov	sp, r7
 800a098:	bdb0      	pop	{r4, r5, r7, pc}
 800a09a:	46c0      	nop			@ (mov r8, r8)
 800a09c:	0800e9cc 	.word	0x0800e9cc

0800a0a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800a0a8:	2313      	movs	r3, #19
 800a0aa:	18fb      	adds	r3, r7, r3
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a0b0:	2312      	movs	r3, #18
 800a0b2:	18fb      	adds	r3, r7, r3
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	2380      	movs	r3, #128	@ 0x80
 800a0be:	029b      	lsls	r3, r3, #10
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	d100      	bne.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800a0c4:	e0a3      	b.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a0c6:	2011      	movs	r0, #17
 800a0c8:	183b      	adds	r3, r7, r0
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a0ce:	4ba5      	ldr	r3, [pc, #660]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a0d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0d2:	2380      	movs	r3, #128	@ 0x80
 800a0d4:	055b      	lsls	r3, r3, #21
 800a0d6:	4013      	ands	r3, r2
 800a0d8:	d110      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a0da:	4ba2      	ldr	r3, [pc, #648]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a0dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0de:	4ba1      	ldr	r3, [pc, #644]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a0e0:	2180      	movs	r1, #128	@ 0x80
 800a0e2:	0549      	lsls	r1, r1, #21
 800a0e4:	430a      	orrs	r2, r1
 800a0e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a0e8:	4b9e      	ldr	r3, [pc, #632]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a0ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0ec:	2380      	movs	r3, #128	@ 0x80
 800a0ee:	055b      	lsls	r3, r3, #21
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	60bb      	str	r3, [r7, #8]
 800a0f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a0f6:	183b      	adds	r3, r7, r0
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a0fc:	4b9a      	ldr	r3, [pc, #616]	@ (800a368 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	4b99      	ldr	r3, [pc, #612]	@ (800a368 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800a102:	2180      	movs	r1, #128	@ 0x80
 800a104:	0049      	lsls	r1, r1, #1
 800a106:	430a      	orrs	r2, r1
 800a108:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a10a:	f7fc fcdb 	bl	8006ac4 <HAL_GetTick>
 800a10e:	0003      	movs	r3, r0
 800a110:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a112:	e00b      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a114:	f7fc fcd6 	bl	8006ac4 <HAL_GetTick>
 800a118:	0002      	movs	r2, r0
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	1ad3      	subs	r3, r2, r3
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d904      	bls.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800a122:	2313      	movs	r3, #19
 800a124:	18fb      	adds	r3, r7, r3
 800a126:	2203      	movs	r2, #3
 800a128:	701a      	strb	r2, [r3, #0]
        break;
 800a12a:	e005      	b.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a12c:	4b8e      	ldr	r3, [pc, #568]	@ (800a368 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	2380      	movs	r3, #128	@ 0x80
 800a132:	005b      	lsls	r3, r3, #1
 800a134:	4013      	ands	r3, r2
 800a136:	d0ed      	beq.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800a138:	2313      	movs	r3, #19
 800a13a:	18fb      	adds	r3, r7, r3
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d154      	bne.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a142:	4b88      	ldr	r3, [pc, #544]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a144:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a146:	23c0      	movs	r3, #192	@ 0xc0
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	4013      	ands	r3, r2
 800a14c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d019      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a158:	697a      	ldr	r2, [r7, #20]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d014      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a15e:	4b81      	ldr	r3, [pc, #516]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a162:	4a82      	ldr	r2, [pc, #520]	@ (800a36c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a164:	4013      	ands	r3, r2
 800a166:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a168:	4b7e      	ldr	r3, [pc, #504]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a16a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a16c:	4b7d      	ldr	r3, [pc, #500]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a16e:	2180      	movs	r1, #128	@ 0x80
 800a170:	0249      	lsls	r1, r1, #9
 800a172:	430a      	orrs	r2, r1
 800a174:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a176:	4b7b      	ldr	r3, [pc, #492]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a178:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a17a:	4b7a      	ldr	r3, [pc, #488]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a17c:	497c      	ldr	r1, [pc, #496]	@ (800a370 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800a17e:	400a      	ands	r2, r1
 800a180:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a182:	4b78      	ldr	r3, [pc, #480]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a184:	697a      	ldr	r2, [r7, #20]
 800a186:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	2201      	movs	r2, #1
 800a18c:	4013      	ands	r3, r2
 800a18e:	d016      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a190:	f7fc fc98 	bl	8006ac4 <HAL_GetTick>
 800a194:	0003      	movs	r3, r0
 800a196:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a198:	e00c      	b.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a19a:	f7fc fc93 	bl	8006ac4 <HAL_GetTick>
 800a19e:	0002      	movs	r2, r0
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	1ad3      	subs	r3, r2, r3
 800a1a4:	4a73      	ldr	r2, [pc, #460]	@ (800a374 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d904      	bls.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800a1aa:	2313      	movs	r3, #19
 800a1ac:	18fb      	adds	r3, r7, r3
 800a1ae:	2203      	movs	r2, #3
 800a1b0:	701a      	strb	r2, [r3, #0]
            break;
 800a1b2:	e004      	b.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1b4:	4b6b      	ldr	r3, [pc, #428]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1b8:	2202      	movs	r2, #2
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	d0ed      	beq.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800a1be:	2313      	movs	r3, #19
 800a1c0:	18fb      	adds	r3, r7, r3
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d10a      	bne.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a1c8:	4b66      	ldr	r3, [pc, #408]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1cc:	4a67      	ldr	r2, [pc, #412]	@ (800a36c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a1ce:	4013      	ands	r3, r2
 800a1d0:	0019      	movs	r1, r3
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a1d6:	4b63      	ldr	r3, [pc, #396]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1d8:	430a      	orrs	r2, r1
 800a1da:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a1dc:	e00c      	b.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a1de:	2312      	movs	r3, #18
 800a1e0:	18fb      	adds	r3, r7, r3
 800a1e2:	2213      	movs	r2, #19
 800a1e4:	18ba      	adds	r2, r7, r2
 800a1e6:	7812      	ldrb	r2, [r2, #0]
 800a1e8:	701a      	strb	r2, [r3, #0]
 800a1ea:	e005      	b.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ec:	2312      	movs	r3, #18
 800a1ee:	18fb      	adds	r3, r7, r3
 800a1f0:	2213      	movs	r2, #19
 800a1f2:	18ba      	adds	r2, r7, r2
 800a1f4:	7812      	ldrb	r2, [r2, #0]
 800a1f6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a1f8:	2311      	movs	r3, #17
 800a1fa:	18fb      	adds	r3, r7, r3
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d105      	bne.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a202:	4b58      	ldr	r3, [pc, #352]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a204:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a206:	4b57      	ldr	r3, [pc, #348]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a208:	495b      	ldr	r1, [pc, #364]	@ (800a378 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a20a:	400a      	ands	r2, r1
 800a20c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2201      	movs	r2, #1
 800a214:	4013      	ands	r3, r2
 800a216:	d009      	beq.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a218:	4b52      	ldr	r3, [pc, #328]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a21a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a21c:	2203      	movs	r2, #3
 800a21e:	4393      	bics	r3, r2
 800a220:	0019      	movs	r1, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	685a      	ldr	r2, [r3, #4]
 800a226:	4b4f      	ldr	r3, [pc, #316]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a228:	430a      	orrs	r2, r1
 800a22a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2210      	movs	r2, #16
 800a232:	4013      	ands	r3, r2
 800a234:	d009      	beq.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a236:	4b4b      	ldr	r3, [pc, #300]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a23a:	4a50      	ldr	r2, [pc, #320]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800a23c:	4013      	ands	r3, r2
 800a23e:	0019      	movs	r1, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	689a      	ldr	r2, [r3, #8]
 800a244:	4b47      	ldr	r3, [pc, #284]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a246:	430a      	orrs	r2, r1
 800a248:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	2380      	movs	r3, #128	@ 0x80
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	4013      	ands	r3, r2
 800a254:	d009      	beq.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a256:	4b43      	ldr	r3, [pc, #268]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a25a:	4a49      	ldr	r2, [pc, #292]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800a25c:	4013      	ands	r3, r2
 800a25e:	0019      	movs	r1, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	695a      	ldr	r2, [r3, #20]
 800a264:	4b3f      	ldr	r3, [pc, #252]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a266:	430a      	orrs	r2, r1
 800a268:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	2380      	movs	r3, #128	@ 0x80
 800a270:	00db      	lsls	r3, r3, #3
 800a272:	4013      	ands	r3, r2
 800a274:	d009      	beq.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a276:	4b3b      	ldr	r3, [pc, #236]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a27a:	4a42      	ldr	r2, [pc, #264]	@ (800a384 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a27c:	4013      	ands	r3, r2
 800a27e:	0019      	movs	r1, r3
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	699a      	ldr	r2, [r3, #24]
 800a284:	4b37      	ldr	r3, [pc, #220]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a286:	430a      	orrs	r2, r1
 800a288:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2220      	movs	r2, #32
 800a290:	4013      	ands	r3, r2
 800a292:	d009      	beq.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a294:	4b33      	ldr	r3, [pc, #204]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a298:	4a3b      	ldr	r2, [pc, #236]	@ (800a388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a29a:	4013      	ands	r3, r2
 800a29c:	0019      	movs	r1, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	68da      	ldr	r2, [r3, #12]
 800a2a2:	4b30      	ldr	r3, [pc, #192]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2a4:	430a      	orrs	r2, r1
 800a2a6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	2380      	movs	r3, #128	@ 0x80
 800a2ae:	01db      	lsls	r3, r3, #7
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	d015      	beq.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a2b4:	4b2b      	ldr	r3, [pc, #172]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	0899      	lsrs	r1, r3, #2
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	69da      	ldr	r2, [r3, #28]
 800a2c0:	4b28      	ldr	r3, [pc, #160]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2c2:	430a      	orrs	r2, r1
 800a2c4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	69da      	ldr	r2, [r3, #28]
 800a2ca:	2380      	movs	r3, #128	@ 0x80
 800a2cc:	05db      	lsls	r3, r3, #23
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d106      	bne.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a2d2:	4b24      	ldr	r3, [pc, #144]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2d4:	68da      	ldr	r2, [r3, #12]
 800a2d6:	4b23      	ldr	r3, [pc, #140]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2d8:	2180      	movs	r1, #128	@ 0x80
 800a2da:	0249      	lsls	r1, r1, #9
 800a2dc:	430a      	orrs	r2, r1
 800a2de:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	2380      	movs	r3, #128	@ 0x80
 800a2e6:	039b      	lsls	r3, r3, #14
 800a2e8:	4013      	ands	r3, r2
 800a2ea:	d016      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a2ec:	4b1d      	ldr	r3, [pc, #116]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2f0:	4a26      	ldr	r2, [pc, #152]	@ (800a38c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800a2f2:	4013      	ands	r3, r2
 800a2f4:	0019      	movs	r1, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a1a      	ldr	r2, [r3, #32]
 800a2fa:	4b1a      	ldr	r3, [pc, #104]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2fc:	430a      	orrs	r2, r1
 800a2fe:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6a1a      	ldr	r2, [r3, #32]
 800a304:	2380      	movs	r3, #128	@ 0x80
 800a306:	03db      	lsls	r3, r3, #15
 800a308:	429a      	cmp	r2, r3
 800a30a:	d106      	bne.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a30c:	4b15      	ldr	r3, [pc, #84]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a30e:	68da      	ldr	r2, [r3, #12]
 800a310:	4b14      	ldr	r3, [pc, #80]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a312:	2180      	movs	r1, #128	@ 0x80
 800a314:	0449      	lsls	r1, r1, #17
 800a316:	430a      	orrs	r2, r1
 800a318:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	2380      	movs	r3, #128	@ 0x80
 800a320:	011b      	lsls	r3, r3, #4
 800a322:	4013      	ands	r3, r2
 800a324:	d016      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800a326:	4b0f      	ldr	r3, [pc, #60]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a32a:	4a19      	ldr	r2, [pc, #100]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a32c:	4013      	ands	r3, r2
 800a32e:	0019      	movs	r1, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	691a      	ldr	r2, [r3, #16]
 800a334:	4b0b      	ldr	r3, [pc, #44]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a336:	430a      	orrs	r2, r1
 800a338:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	691a      	ldr	r2, [r3, #16]
 800a33e:	2380      	movs	r3, #128	@ 0x80
 800a340:	01db      	lsls	r3, r3, #7
 800a342:	429a      	cmp	r2, r3
 800a344:	d106      	bne.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a346:	4b07      	ldr	r3, [pc, #28]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a348:	68da      	ldr	r2, [r3, #12]
 800a34a:	4b06      	ldr	r3, [pc, #24]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a34c:	2180      	movs	r1, #128	@ 0x80
 800a34e:	0249      	lsls	r1, r1, #9
 800a350:	430a      	orrs	r2, r1
 800a352:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800a354:	2312      	movs	r3, #18
 800a356:	18fb      	adds	r3, r7, r3
 800a358:	781b      	ldrb	r3, [r3, #0]
}
 800a35a:	0018      	movs	r0, r3
 800a35c:	46bd      	mov	sp, r7
 800a35e:	b006      	add	sp, #24
 800a360:	bd80      	pop	{r7, pc}
 800a362:	46c0      	nop			@ (mov r8, r8)
 800a364:	40021000 	.word	0x40021000
 800a368:	40007000 	.word	0x40007000
 800a36c:	fffffcff 	.word	0xfffffcff
 800a370:	fffeffff 	.word	0xfffeffff
 800a374:	00001388 	.word	0x00001388
 800a378:	efffffff 	.word	0xefffffff
 800a37c:	fffff3ff 	.word	0xfffff3ff
 800a380:	fff3ffff 	.word	0xfff3ffff
 800a384:	ffcfffff 	.word	0xffcfffff
 800a388:	ffffcfff 	.word	0xffffcfff
 800a38c:	ffbfffff 	.word	0xffbfffff
 800a390:	ffff3fff 	.word	0xffff3fff

0800a394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d101      	bne.n	800a3a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e056      	b.n	800a454 <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	223d      	movs	r2, #61	@ 0x3d
 800a3aa:	5c9b      	ldrb	r3, [r3, r2]
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d113      	bne.n	800a3da <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	223c      	movs	r2, #60	@ 0x3c
 800a3b6:	2100      	movs	r1, #0
 800a3b8:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	0018      	movs	r0, r3
 800a3be:	f002 f8c5 	bl	800c54c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d102      	bne.n	800a3d0 <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4a23      	ldr	r2, [pc, #140]	@ (800a45c <HAL_TIM_Base_Init+0xc8>)
 800a3ce:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	0010      	movs	r0, r2
 800a3d8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	223d      	movs	r2, #61	@ 0x3d
 800a3de:	2102      	movs	r1, #2
 800a3e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	3304      	adds	r3, #4
 800a3ea:	0019      	movs	r1, r3
 800a3ec:	0010      	movs	r0, r2
 800a3ee:	f001 fbaf 	bl	800bb50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2248      	movs	r2, #72	@ 0x48
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	223e      	movs	r2, #62	@ 0x3e
 800a3fe:	2101      	movs	r1, #1
 800a400:	5499      	strb	r1, [r3, r2]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	223f      	movs	r2, #63	@ 0x3f
 800a406:	2101      	movs	r1, #1
 800a408:	5499      	strb	r1, [r3, r2]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2240      	movs	r2, #64	@ 0x40
 800a40e:	2101      	movs	r1, #1
 800a410:	5499      	strb	r1, [r3, r2]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2241      	movs	r2, #65	@ 0x41
 800a416:	2101      	movs	r1, #1
 800a418:	5499      	strb	r1, [r3, r2]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2242      	movs	r2, #66	@ 0x42
 800a41e:	2101      	movs	r1, #1
 800a420:	5499      	strb	r1, [r3, r2]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2243      	movs	r2, #67	@ 0x43
 800a426:	2101      	movs	r1, #1
 800a428:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2244      	movs	r2, #68	@ 0x44
 800a42e:	2101      	movs	r1, #1
 800a430:	5499      	strb	r1, [r3, r2]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2245      	movs	r2, #69	@ 0x45
 800a436:	2101      	movs	r1, #1
 800a438:	5499      	strb	r1, [r3, r2]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2246      	movs	r2, #70	@ 0x46
 800a43e:	2101      	movs	r1, #1
 800a440:	5499      	strb	r1, [r3, r2]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2247      	movs	r2, #71	@ 0x47
 800a446:	2101      	movs	r1, #1
 800a448:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	223d      	movs	r2, #61	@ 0x3d
 800a44e:	2101      	movs	r1, #1
 800a450:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	0018      	movs	r0, r3
 800a456:	46bd      	mov	sp, r7
 800a458:	b002      	add	sp, #8
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	08005a75 	.word	0x08005a75

0800a460 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	223d      	movs	r2, #61	@ 0x3d
 800a46c:	5c9b      	ldrb	r3, [r3, r2]
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	2b01      	cmp	r3, #1
 800a472:	d001      	beq.n	800a478 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	e035      	b.n	800a4e4 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	223d      	movs	r2, #61	@ 0x3d
 800a47c:	2102      	movs	r1, #2
 800a47e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a19      	ldr	r2, [pc, #100]	@ (800a4ec <HAL_TIM_Base_Start+0x8c>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d00a      	beq.n	800a4a0 <HAL_TIM_Base_Start+0x40>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	2380      	movs	r3, #128	@ 0x80
 800a490:	05db      	lsls	r3, r3, #23
 800a492:	429a      	cmp	r2, r3
 800a494:	d004      	beq.n	800a4a0 <HAL_TIM_Base_Start+0x40>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a15      	ldr	r2, [pc, #84]	@ (800a4f0 <HAL_TIM_Base_Start+0x90>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d116      	bne.n	800a4ce <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	4a13      	ldr	r2, [pc, #76]	@ (800a4f4 <HAL_TIM_Base_Start+0x94>)
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2b06      	cmp	r3, #6
 800a4b0:	d016      	beq.n	800a4e0 <HAL_TIM_Base_Start+0x80>
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	2380      	movs	r3, #128	@ 0x80
 800a4b6:	025b      	lsls	r3, r3, #9
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d011      	beq.n	800a4e0 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2101      	movs	r1, #1
 800a4c8:	430a      	orrs	r2, r1
 800a4ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4cc:	e008      	b.n	800a4e0 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	2101      	movs	r1, #1
 800a4da:	430a      	orrs	r2, r1
 800a4dc:	601a      	str	r2, [r3, #0]
 800a4de:	e000      	b.n	800a4e2 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4e0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	0018      	movs	r0, r3
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	b004      	add	sp, #16
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	40012c00 	.word	0x40012c00
 800a4f0:	40000400 	.word	0x40000400
 800a4f4:	00010007 	.word	0x00010007

0800a4f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	223d      	movs	r2, #61	@ 0x3d
 800a504:	5c9b      	ldrb	r3, [r3, r2]
 800a506:	b2db      	uxtb	r3, r3
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d001      	beq.n	800a510 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	e03d      	b.n	800a58c <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	223d      	movs	r2, #61	@ 0x3d
 800a514:	2102      	movs	r1, #2
 800a516:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68da      	ldr	r2, [r3, #12]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2101      	movs	r1, #1
 800a524:	430a      	orrs	r2, r1
 800a526:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a19      	ldr	r2, [pc, #100]	@ (800a594 <HAL_TIM_Base_Start_IT+0x9c>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d00a      	beq.n	800a548 <HAL_TIM_Base_Start_IT+0x50>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	2380      	movs	r3, #128	@ 0x80
 800a538:	05db      	lsls	r3, r3, #23
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d004      	beq.n	800a548 <HAL_TIM_Base_Start_IT+0x50>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a15      	ldr	r2, [pc, #84]	@ (800a598 <HAL_TIM_Base_Start_IT+0xa0>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d116      	bne.n	800a576 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	4a13      	ldr	r2, [pc, #76]	@ (800a59c <HAL_TIM_Base_Start_IT+0xa4>)
 800a550:	4013      	ands	r3, r2
 800a552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2b06      	cmp	r3, #6
 800a558:	d016      	beq.n	800a588 <HAL_TIM_Base_Start_IT+0x90>
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	2380      	movs	r3, #128	@ 0x80
 800a55e:	025b      	lsls	r3, r3, #9
 800a560:	429a      	cmp	r2, r3
 800a562:	d011      	beq.n	800a588 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2101      	movs	r1, #1
 800a570:	430a      	orrs	r2, r1
 800a572:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a574:	e008      	b.n	800a588 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2101      	movs	r1, #1
 800a582:	430a      	orrs	r2, r1
 800a584:	601a      	str	r2, [r3, #0]
 800a586:	e000      	b.n	800a58a <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a588:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	0018      	movs	r0, r3
 800a58e:	46bd      	mov	sp, r7
 800a590:	b004      	add	sp, #16
 800a592:	bd80      	pop	{r7, pc}
 800a594:	40012c00 	.word	0x40012c00
 800a598:	40000400 	.word	0x40000400
 800a59c:	00010007 	.word	0x00010007

0800a5a0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d101      	bne.n	800a5b2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e056      	b.n	800a660 <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	223d      	movs	r2, #61	@ 0x3d
 800a5b6:	5c9b      	ldrb	r3, [r3, r2]
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d113      	bne.n	800a5e6 <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	223c      	movs	r2, #60	@ 0x3c
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	0018      	movs	r0, r3
 800a5ca:	f001 ffbf 	bl	800c54c <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d102      	bne.n	800a5dc <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	4a23      	ldr	r2, [pc, #140]	@ (800a668 <HAL_TIM_OC_Init+0xc8>)
 800a5da:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	0010      	movs	r0, r2
 800a5e4:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	223d      	movs	r2, #61	@ 0x3d
 800a5ea:	2102      	movs	r1, #2
 800a5ec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	3304      	adds	r3, #4
 800a5f6:	0019      	movs	r1, r3
 800a5f8:	0010      	movs	r0, r2
 800a5fa:	f001 faa9 	bl	800bb50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2248      	movs	r2, #72	@ 0x48
 800a602:	2101      	movs	r1, #1
 800a604:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	223e      	movs	r2, #62	@ 0x3e
 800a60a:	2101      	movs	r1, #1
 800a60c:	5499      	strb	r1, [r3, r2]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	223f      	movs	r2, #63	@ 0x3f
 800a612:	2101      	movs	r1, #1
 800a614:	5499      	strb	r1, [r3, r2]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2240      	movs	r2, #64	@ 0x40
 800a61a:	2101      	movs	r1, #1
 800a61c:	5499      	strb	r1, [r3, r2]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2241      	movs	r2, #65	@ 0x41
 800a622:	2101      	movs	r1, #1
 800a624:	5499      	strb	r1, [r3, r2]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2242      	movs	r2, #66	@ 0x42
 800a62a:	2101      	movs	r1, #1
 800a62c:	5499      	strb	r1, [r3, r2]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2243      	movs	r2, #67	@ 0x43
 800a632:	2101      	movs	r1, #1
 800a634:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2244      	movs	r2, #68	@ 0x44
 800a63a:	2101      	movs	r1, #1
 800a63c:	5499      	strb	r1, [r3, r2]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2245      	movs	r2, #69	@ 0x45
 800a642:	2101      	movs	r1, #1
 800a644:	5499      	strb	r1, [r3, r2]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2246      	movs	r2, #70	@ 0x46
 800a64a:	2101      	movs	r1, #1
 800a64c:	5499      	strb	r1, [r3, r2]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2247      	movs	r2, #71	@ 0x47
 800a652:	2101      	movs	r1, #1
 800a654:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	223d      	movs	r2, #61	@ 0x3d
 800a65a:	2101      	movs	r1, #1
 800a65c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a65e:	2300      	movs	r3, #0
}
 800a660:	0018      	movs	r0, r3
 800a662:	46bd      	mov	sp, r7
 800a664:	b002      	add	sp, #8
 800a666:	bd80      	pop	{r7, pc}
 800a668:	0800a66d 	.word	0x0800a66d

0800a66c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a674:	46c0      	nop			@ (mov r8, r8)
 800a676:	46bd      	mov	sp, r7
 800a678:	b002      	add	sp, #8
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a686:	230f      	movs	r3, #15
 800a688:	18fb      	adds	r3, r7, r3
 800a68a:	2200      	movs	r2, #0
 800a68c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d108      	bne.n	800a6a6 <HAL_TIM_OC_Start_IT+0x2a>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	223e      	movs	r2, #62	@ 0x3e
 800a698:	5c9b      	ldrb	r3, [r3, r2]
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	3b01      	subs	r3, #1
 800a69e:	1e5a      	subs	r2, r3, #1
 800a6a0:	4193      	sbcs	r3, r2
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	e037      	b.n	800a716 <HAL_TIM_OC_Start_IT+0x9a>
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	2b04      	cmp	r3, #4
 800a6aa:	d108      	bne.n	800a6be <HAL_TIM_OC_Start_IT+0x42>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	223f      	movs	r2, #63	@ 0x3f
 800a6b0:	5c9b      	ldrb	r3, [r3, r2]
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	1e5a      	subs	r2, r3, #1
 800a6b8:	4193      	sbcs	r3, r2
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	e02b      	b.n	800a716 <HAL_TIM_OC_Start_IT+0x9a>
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	2b08      	cmp	r3, #8
 800a6c2:	d108      	bne.n	800a6d6 <HAL_TIM_OC_Start_IT+0x5a>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2240      	movs	r2, #64	@ 0x40
 800a6c8:	5c9b      	ldrb	r3, [r3, r2]
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	1e5a      	subs	r2, r3, #1
 800a6d0:	4193      	sbcs	r3, r2
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	e01f      	b.n	800a716 <HAL_TIM_OC_Start_IT+0x9a>
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	2b0c      	cmp	r3, #12
 800a6da:	d108      	bne.n	800a6ee <HAL_TIM_OC_Start_IT+0x72>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2241      	movs	r2, #65	@ 0x41
 800a6e0:	5c9b      	ldrb	r3, [r3, r2]
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	1e5a      	subs	r2, r3, #1
 800a6e8:	4193      	sbcs	r3, r2
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	e013      	b.n	800a716 <HAL_TIM_OC_Start_IT+0x9a>
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	2b10      	cmp	r3, #16
 800a6f2:	d108      	bne.n	800a706 <HAL_TIM_OC_Start_IT+0x8a>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2242      	movs	r2, #66	@ 0x42
 800a6f8:	5c9b      	ldrb	r3, [r3, r2]
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	3b01      	subs	r3, #1
 800a6fe:	1e5a      	subs	r2, r3, #1
 800a700:	4193      	sbcs	r3, r2
 800a702:	b2db      	uxtb	r3, r3
 800a704:	e007      	b.n	800a716 <HAL_TIM_OC_Start_IT+0x9a>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2243      	movs	r2, #67	@ 0x43
 800a70a:	5c9b      	ldrb	r3, [r3, r2]
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	3b01      	subs	r3, #1
 800a710:	1e5a      	subs	r2, r3, #1
 800a712:	4193      	sbcs	r3, r2
 800a714:	b2db      	uxtb	r3, r3
 800a716:	2b00      	cmp	r3, #0
 800a718:	d001      	beq.n	800a71e <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e0c4      	b.n	800a8a8 <HAL_TIM_OC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d104      	bne.n	800a72e <HAL_TIM_OC_Start_IT+0xb2>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	223e      	movs	r2, #62	@ 0x3e
 800a728:	2102      	movs	r1, #2
 800a72a:	5499      	strb	r1, [r3, r2]
 800a72c:	e023      	b.n	800a776 <HAL_TIM_OC_Start_IT+0xfa>
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	2b04      	cmp	r3, #4
 800a732:	d104      	bne.n	800a73e <HAL_TIM_OC_Start_IT+0xc2>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	223f      	movs	r2, #63	@ 0x3f
 800a738:	2102      	movs	r1, #2
 800a73a:	5499      	strb	r1, [r3, r2]
 800a73c:	e01b      	b.n	800a776 <HAL_TIM_OC_Start_IT+0xfa>
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	2b08      	cmp	r3, #8
 800a742:	d104      	bne.n	800a74e <HAL_TIM_OC_Start_IT+0xd2>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2240      	movs	r2, #64	@ 0x40
 800a748:	2102      	movs	r1, #2
 800a74a:	5499      	strb	r1, [r3, r2]
 800a74c:	e013      	b.n	800a776 <HAL_TIM_OC_Start_IT+0xfa>
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	2b0c      	cmp	r3, #12
 800a752:	d104      	bne.n	800a75e <HAL_TIM_OC_Start_IT+0xe2>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2241      	movs	r2, #65	@ 0x41
 800a758:	2102      	movs	r1, #2
 800a75a:	5499      	strb	r1, [r3, r2]
 800a75c:	e00b      	b.n	800a776 <HAL_TIM_OC_Start_IT+0xfa>
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	2b10      	cmp	r3, #16
 800a762:	d104      	bne.n	800a76e <HAL_TIM_OC_Start_IT+0xf2>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2242      	movs	r2, #66	@ 0x42
 800a768:	2102      	movs	r1, #2
 800a76a:	5499      	strb	r1, [r3, r2]
 800a76c:	e003      	b.n	800a776 <HAL_TIM_OC_Start_IT+0xfa>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2243      	movs	r2, #67	@ 0x43
 800a772:	2102      	movs	r1, #2
 800a774:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	2b0c      	cmp	r3, #12
 800a77a:	d02a      	beq.n	800a7d2 <HAL_TIM_OC_Start_IT+0x156>
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	2b0c      	cmp	r3, #12
 800a780:	d830      	bhi.n	800a7e4 <HAL_TIM_OC_Start_IT+0x168>
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	2b08      	cmp	r3, #8
 800a786:	d01b      	beq.n	800a7c0 <HAL_TIM_OC_Start_IT+0x144>
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	2b08      	cmp	r3, #8
 800a78c:	d82a      	bhi.n	800a7e4 <HAL_TIM_OC_Start_IT+0x168>
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d003      	beq.n	800a79c <HAL_TIM_OC_Start_IT+0x120>
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	2b04      	cmp	r3, #4
 800a798:	d009      	beq.n	800a7ae <HAL_TIM_OC_Start_IT+0x132>
 800a79a:	e023      	b.n	800a7e4 <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	68da      	ldr	r2, [r3, #12]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2102      	movs	r1, #2
 800a7a8:	430a      	orrs	r2, r1
 800a7aa:	60da      	str	r2, [r3, #12]
      break;
 800a7ac:	e01f      	b.n	800a7ee <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	68da      	ldr	r2, [r3, #12]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2104      	movs	r1, #4
 800a7ba:	430a      	orrs	r2, r1
 800a7bc:	60da      	str	r2, [r3, #12]
      break;
 800a7be:	e016      	b.n	800a7ee <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	68da      	ldr	r2, [r3, #12]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2108      	movs	r1, #8
 800a7cc:	430a      	orrs	r2, r1
 800a7ce:	60da      	str	r2, [r3, #12]
      break;
 800a7d0:	e00d      	b.n	800a7ee <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68da      	ldr	r2, [r3, #12]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2110      	movs	r1, #16
 800a7de:	430a      	orrs	r2, r1
 800a7e0:	60da      	str	r2, [r3, #12]
      break;
 800a7e2:	e004      	b.n	800a7ee <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 800a7e4:	230f      	movs	r3, #15
 800a7e6:	18fb      	adds	r3, r7, r3
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	701a      	strb	r2, [r3, #0]
      break;
 800a7ec:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800a7ee:	230f      	movs	r3, #15
 800a7f0:	18fb      	adds	r3, r7, r3
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d154      	bne.n	800a8a2 <HAL_TIM_OC_Start_IT+0x226>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	6839      	ldr	r1, [r7, #0]
 800a7fe:	2201      	movs	r2, #1
 800a800:	0018      	movs	r0, r3
 800a802:	f001 fe7f 	bl	800c504 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a29      	ldr	r2, [pc, #164]	@ (800a8b0 <HAL_TIM_OC_Start_IT+0x234>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d009      	beq.n	800a824 <HAL_TIM_OC_Start_IT+0x1a8>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a27      	ldr	r2, [pc, #156]	@ (800a8b4 <HAL_TIM_OC_Start_IT+0x238>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d004      	beq.n	800a824 <HAL_TIM_OC_Start_IT+0x1a8>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a26      	ldr	r2, [pc, #152]	@ (800a8b8 <HAL_TIM_OC_Start_IT+0x23c>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d101      	bne.n	800a828 <HAL_TIM_OC_Start_IT+0x1ac>
 800a824:	2301      	movs	r3, #1
 800a826:	e000      	b.n	800a82a <HAL_TIM_OC_Start_IT+0x1ae>
 800a828:	2300      	movs	r3, #0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d008      	beq.n	800a840 <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2180      	movs	r1, #128	@ 0x80
 800a83a:	0209      	lsls	r1, r1, #8
 800a83c:	430a      	orrs	r2, r1
 800a83e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a1a      	ldr	r2, [pc, #104]	@ (800a8b0 <HAL_TIM_OC_Start_IT+0x234>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d00a      	beq.n	800a860 <HAL_TIM_OC_Start_IT+0x1e4>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	2380      	movs	r3, #128	@ 0x80
 800a850:	05db      	lsls	r3, r3, #23
 800a852:	429a      	cmp	r2, r3
 800a854:	d004      	beq.n	800a860 <HAL_TIM_OC_Start_IT+0x1e4>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a18      	ldr	r2, [pc, #96]	@ (800a8bc <HAL_TIM_OC_Start_IT+0x240>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d116      	bne.n	800a88e <HAL_TIM_OC_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	4a16      	ldr	r2, [pc, #88]	@ (800a8c0 <HAL_TIM_OC_Start_IT+0x244>)
 800a868:	4013      	ands	r3, r2
 800a86a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	2b06      	cmp	r3, #6
 800a870:	d016      	beq.n	800a8a0 <HAL_TIM_OC_Start_IT+0x224>
 800a872:	68ba      	ldr	r2, [r7, #8]
 800a874:	2380      	movs	r3, #128	@ 0x80
 800a876:	025b      	lsls	r3, r3, #9
 800a878:	429a      	cmp	r2, r3
 800a87a:	d011      	beq.n	800a8a0 <HAL_TIM_OC_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2101      	movs	r1, #1
 800a888:	430a      	orrs	r2, r1
 800a88a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a88c:	e008      	b.n	800a8a0 <HAL_TIM_OC_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2101      	movs	r1, #1
 800a89a:	430a      	orrs	r2, r1
 800a89c:	601a      	str	r2, [r3, #0]
 800a89e:	e000      	b.n	800a8a2 <HAL_TIM_OC_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8a0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800a8a2:	230f      	movs	r3, #15
 800a8a4:	18fb      	adds	r3, r7, r3
 800a8a6:	781b      	ldrb	r3, [r3, #0]
}
 800a8a8:	0018      	movs	r0, r3
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	b004      	add	sp, #16
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	40012c00 	.word	0x40012c00
 800a8b4:	40014400 	.word	0x40014400
 800a8b8:	40014800 	.word	0x40014800
 800a8bc:	40000400 	.word	0x40000400
 800a8c0:	00010007 	.word	0x00010007

0800a8c4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8ce:	230f      	movs	r3, #15
 800a8d0:	18fb      	adds	r3, r7, r3
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	2b0c      	cmp	r3, #12
 800a8da:	d02a      	beq.n	800a932 <HAL_TIM_OC_Stop_IT+0x6e>
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	2b0c      	cmp	r3, #12
 800a8e0:	d830      	bhi.n	800a944 <HAL_TIM_OC_Stop_IT+0x80>
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	2b08      	cmp	r3, #8
 800a8e6:	d01b      	beq.n	800a920 <HAL_TIM_OC_Stop_IT+0x5c>
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	2b08      	cmp	r3, #8
 800a8ec:	d82a      	bhi.n	800a944 <HAL_TIM_OC_Stop_IT+0x80>
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d003      	beq.n	800a8fc <HAL_TIM_OC_Stop_IT+0x38>
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	2b04      	cmp	r3, #4
 800a8f8:	d009      	beq.n	800a90e <HAL_TIM_OC_Stop_IT+0x4a>
 800a8fa:	e023      	b.n	800a944 <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68da      	ldr	r2, [r3, #12]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2102      	movs	r1, #2
 800a908:	438a      	bics	r2, r1
 800a90a:	60da      	str	r2, [r3, #12]
      break;
 800a90c:	e01f      	b.n	800a94e <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	68da      	ldr	r2, [r3, #12]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2104      	movs	r1, #4
 800a91a:	438a      	bics	r2, r1
 800a91c:	60da      	str	r2, [r3, #12]
      break;
 800a91e:	e016      	b.n	800a94e <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68da      	ldr	r2, [r3, #12]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2108      	movs	r1, #8
 800a92c:	438a      	bics	r2, r1
 800a92e:	60da      	str	r2, [r3, #12]
      break;
 800a930:	e00d      	b.n	800a94e <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	68da      	ldr	r2, [r3, #12]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2110      	movs	r1, #16
 800a93e:	438a      	bics	r2, r1
 800a940:	60da      	str	r2, [r3, #12]
      break;
 800a942:	e004      	b.n	800a94e <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 800a944:	230f      	movs	r3, #15
 800a946:	18fb      	adds	r3, r7, r3
 800a948:	2201      	movs	r2, #1
 800a94a:	701a      	strb	r2, [r3, #0]
      break;
 800a94c:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800a94e:	230f      	movs	r3, #15
 800a950:	18fb      	adds	r3, r7, r3
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d000      	beq.n	800a95a <HAL_TIM_OC_Stop_IT+0x96>
 800a958:	e06e      	b.n	800aa38 <HAL_TIM_OC_Stop_IT+0x174>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	6839      	ldr	r1, [r7, #0]
 800a960:	2200      	movs	r2, #0
 800a962:	0018      	movs	r0, r3
 800a964:	f001 fdce 	bl	800c504 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a36      	ldr	r2, [pc, #216]	@ (800aa48 <HAL_TIM_OC_Stop_IT+0x184>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d009      	beq.n	800a986 <HAL_TIM_OC_Stop_IT+0xc2>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4a35      	ldr	r2, [pc, #212]	@ (800aa4c <HAL_TIM_OC_Stop_IT+0x188>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d004      	beq.n	800a986 <HAL_TIM_OC_Stop_IT+0xc2>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a33      	ldr	r2, [pc, #204]	@ (800aa50 <HAL_TIM_OC_Stop_IT+0x18c>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d101      	bne.n	800a98a <HAL_TIM_OC_Stop_IT+0xc6>
 800a986:	2301      	movs	r3, #1
 800a988:	e000      	b.n	800a98c <HAL_TIM_OC_Stop_IT+0xc8>
 800a98a:	2300      	movs	r3, #0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d013      	beq.n	800a9b8 <HAL_TIM_OC_Stop_IT+0xf4>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	6a1b      	ldr	r3, [r3, #32]
 800a996:	4a2f      	ldr	r2, [pc, #188]	@ (800aa54 <HAL_TIM_OC_Stop_IT+0x190>)
 800a998:	4013      	ands	r3, r2
 800a99a:	d10d      	bne.n	800a9b8 <HAL_TIM_OC_Stop_IT+0xf4>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6a1b      	ldr	r3, [r3, #32]
 800a9a2:	4a2d      	ldr	r2, [pc, #180]	@ (800aa58 <HAL_TIM_OC_Stop_IT+0x194>)
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	d107      	bne.n	800a9b8 <HAL_TIM_OC_Stop_IT+0xf4>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	492a      	ldr	r1, [pc, #168]	@ (800aa5c <HAL_TIM_OC_Stop_IT+0x198>)
 800a9b4:	400a      	ands	r2, r1
 800a9b6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	6a1b      	ldr	r3, [r3, #32]
 800a9be:	4a25      	ldr	r2, [pc, #148]	@ (800aa54 <HAL_TIM_OC_Stop_IT+0x190>)
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	d10d      	bne.n	800a9e0 <HAL_TIM_OC_Stop_IT+0x11c>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	6a1b      	ldr	r3, [r3, #32]
 800a9ca:	4a23      	ldr	r2, [pc, #140]	@ (800aa58 <HAL_TIM_OC_Stop_IT+0x194>)
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	d107      	bne.n	800a9e0 <HAL_TIM_OC_Stop_IT+0x11c>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2101      	movs	r1, #1
 800a9dc:	438a      	bics	r2, r1
 800a9de:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d104      	bne.n	800a9f0 <HAL_TIM_OC_Stop_IT+0x12c>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	223e      	movs	r2, #62	@ 0x3e
 800a9ea:	2101      	movs	r1, #1
 800a9ec:	5499      	strb	r1, [r3, r2]
 800a9ee:	e023      	b.n	800aa38 <HAL_TIM_OC_Stop_IT+0x174>
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	2b04      	cmp	r3, #4
 800a9f4:	d104      	bne.n	800aa00 <HAL_TIM_OC_Stop_IT+0x13c>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	223f      	movs	r2, #63	@ 0x3f
 800a9fa:	2101      	movs	r1, #1
 800a9fc:	5499      	strb	r1, [r3, r2]
 800a9fe:	e01b      	b.n	800aa38 <HAL_TIM_OC_Stop_IT+0x174>
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	2b08      	cmp	r3, #8
 800aa04:	d104      	bne.n	800aa10 <HAL_TIM_OC_Stop_IT+0x14c>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2240      	movs	r2, #64	@ 0x40
 800aa0a:	2101      	movs	r1, #1
 800aa0c:	5499      	strb	r1, [r3, r2]
 800aa0e:	e013      	b.n	800aa38 <HAL_TIM_OC_Stop_IT+0x174>
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	2b0c      	cmp	r3, #12
 800aa14:	d104      	bne.n	800aa20 <HAL_TIM_OC_Stop_IT+0x15c>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2241      	movs	r2, #65	@ 0x41
 800aa1a:	2101      	movs	r1, #1
 800aa1c:	5499      	strb	r1, [r3, r2]
 800aa1e:	e00b      	b.n	800aa38 <HAL_TIM_OC_Stop_IT+0x174>
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	2b10      	cmp	r3, #16
 800aa24:	d104      	bne.n	800aa30 <HAL_TIM_OC_Stop_IT+0x16c>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2242      	movs	r2, #66	@ 0x42
 800aa2a:	2101      	movs	r1, #1
 800aa2c:	5499      	strb	r1, [r3, r2]
 800aa2e:	e003      	b.n	800aa38 <HAL_TIM_OC_Stop_IT+0x174>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2243      	movs	r2, #67	@ 0x43
 800aa34:	2101      	movs	r1, #1
 800aa36:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 800aa38:	230f      	movs	r3, #15
 800aa3a:	18fb      	adds	r3, r7, r3
 800aa3c:	781b      	ldrb	r3, [r3, #0]
}
 800aa3e:	0018      	movs	r0, r3
 800aa40:	46bd      	mov	sp, r7
 800aa42:	b004      	add	sp, #16
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	46c0      	nop			@ (mov r8, r8)
 800aa48:	40012c00 	.word	0x40012c00
 800aa4c:	40014400 	.word	0x40014400
 800aa50:	40014800 	.word	0x40014800
 800aa54:	00001111 	.word	0x00001111
 800aa58:	00000444 	.word	0x00000444
 800aa5c:	ffff7fff 	.word	0xffff7fff

0800aa60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d101      	bne.n	800aa72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e056      	b.n	800ab20 <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	223d      	movs	r2, #61	@ 0x3d
 800aa76:	5c9b      	ldrb	r3, [r3, r2]
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d113      	bne.n	800aaa6 <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	223c      	movs	r2, #60	@ 0x3c
 800aa82:	2100      	movs	r1, #0
 800aa84:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	0018      	movs	r0, r3
 800aa8a:	f001 fd5f 	bl	800c54c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d102      	bne.n	800aa9c <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a23      	ldr	r2, [pc, #140]	@ (800ab28 <HAL_TIM_PWM_Init+0xc8>)
 800aa9a:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	0010      	movs	r0, r2
 800aaa4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	223d      	movs	r2, #61	@ 0x3d
 800aaaa:	2102      	movs	r1, #2
 800aaac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	3304      	adds	r3, #4
 800aab6:	0019      	movs	r1, r3
 800aab8:	0010      	movs	r0, r2
 800aaba:	f001 f849 	bl	800bb50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2248      	movs	r2, #72	@ 0x48
 800aac2:	2101      	movs	r1, #1
 800aac4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	223e      	movs	r2, #62	@ 0x3e
 800aaca:	2101      	movs	r1, #1
 800aacc:	5499      	strb	r1, [r3, r2]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	223f      	movs	r2, #63	@ 0x3f
 800aad2:	2101      	movs	r1, #1
 800aad4:	5499      	strb	r1, [r3, r2]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2240      	movs	r2, #64	@ 0x40
 800aada:	2101      	movs	r1, #1
 800aadc:	5499      	strb	r1, [r3, r2]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2241      	movs	r2, #65	@ 0x41
 800aae2:	2101      	movs	r1, #1
 800aae4:	5499      	strb	r1, [r3, r2]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2242      	movs	r2, #66	@ 0x42
 800aaea:	2101      	movs	r1, #1
 800aaec:	5499      	strb	r1, [r3, r2]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2243      	movs	r2, #67	@ 0x43
 800aaf2:	2101      	movs	r1, #1
 800aaf4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2244      	movs	r2, #68	@ 0x44
 800aafa:	2101      	movs	r1, #1
 800aafc:	5499      	strb	r1, [r3, r2]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2245      	movs	r2, #69	@ 0x45
 800ab02:	2101      	movs	r1, #1
 800ab04:	5499      	strb	r1, [r3, r2]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2246      	movs	r2, #70	@ 0x46
 800ab0a:	2101      	movs	r1, #1
 800ab0c:	5499      	strb	r1, [r3, r2]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2247      	movs	r2, #71	@ 0x47
 800ab12:	2101      	movs	r1, #1
 800ab14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	223d      	movs	r2, #61	@ 0x3d
 800ab1a:	2101      	movs	r1, #1
 800ab1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ab1e:	2300      	movs	r3, #0
}
 800ab20:	0018      	movs	r0, r3
 800ab22:	46bd      	mov	sp, r7
 800ab24:	b002      	add	sp, #8
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	0800ab2d 	.word	0x0800ab2d

0800ab2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ab34:	46c0      	nop			@ (mov r8, r8)
 800ab36:	46bd      	mov	sp, r7
 800ab38:	b002      	add	sp, #8
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d108      	bne.n	800ab5e <HAL_TIM_PWM_Start+0x22>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	223e      	movs	r2, #62	@ 0x3e
 800ab50:	5c9b      	ldrb	r3, [r3, r2]
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	3b01      	subs	r3, #1
 800ab56:	1e5a      	subs	r2, r3, #1
 800ab58:	4193      	sbcs	r3, r2
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	e037      	b.n	800abce <HAL_TIM_PWM_Start+0x92>
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	2b04      	cmp	r3, #4
 800ab62:	d108      	bne.n	800ab76 <HAL_TIM_PWM_Start+0x3a>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	223f      	movs	r2, #63	@ 0x3f
 800ab68:	5c9b      	ldrb	r3, [r3, r2]
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	1e5a      	subs	r2, r3, #1
 800ab70:	4193      	sbcs	r3, r2
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	e02b      	b.n	800abce <HAL_TIM_PWM_Start+0x92>
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	2b08      	cmp	r3, #8
 800ab7a:	d108      	bne.n	800ab8e <HAL_TIM_PWM_Start+0x52>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2240      	movs	r2, #64	@ 0x40
 800ab80:	5c9b      	ldrb	r3, [r3, r2]
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	3b01      	subs	r3, #1
 800ab86:	1e5a      	subs	r2, r3, #1
 800ab88:	4193      	sbcs	r3, r2
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	e01f      	b.n	800abce <HAL_TIM_PWM_Start+0x92>
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	2b0c      	cmp	r3, #12
 800ab92:	d108      	bne.n	800aba6 <HAL_TIM_PWM_Start+0x6a>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2241      	movs	r2, #65	@ 0x41
 800ab98:	5c9b      	ldrb	r3, [r3, r2]
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	3b01      	subs	r3, #1
 800ab9e:	1e5a      	subs	r2, r3, #1
 800aba0:	4193      	sbcs	r3, r2
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	e013      	b.n	800abce <HAL_TIM_PWM_Start+0x92>
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	2b10      	cmp	r3, #16
 800abaa:	d108      	bne.n	800abbe <HAL_TIM_PWM_Start+0x82>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2242      	movs	r2, #66	@ 0x42
 800abb0:	5c9b      	ldrb	r3, [r3, r2]
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	3b01      	subs	r3, #1
 800abb6:	1e5a      	subs	r2, r3, #1
 800abb8:	4193      	sbcs	r3, r2
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	e007      	b.n	800abce <HAL_TIM_PWM_Start+0x92>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2243      	movs	r2, #67	@ 0x43
 800abc2:	5c9b      	ldrb	r3, [r3, r2]
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	3b01      	subs	r3, #1
 800abc8:	1e5a      	subs	r2, r3, #1
 800abca:	4193      	sbcs	r3, r2
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	e081      	b.n	800acda <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d104      	bne.n	800abe6 <HAL_TIM_PWM_Start+0xaa>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	223e      	movs	r2, #62	@ 0x3e
 800abe0:	2102      	movs	r1, #2
 800abe2:	5499      	strb	r1, [r3, r2]
 800abe4:	e023      	b.n	800ac2e <HAL_TIM_PWM_Start+0xf2>
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	2b04      	cmp	r3, #4
 800abea:	d104      	bne.n	800abf6 <HAL_TIM_PWM_Start+0xba>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	223f      	movs	r2, #63	@ 0x3f
 800abf0:	2102      	movs	r1, #2
 800abf2:	5499      	strb	r1, [r3, r2]
 800abf4:	e01b      	b.n	800ac2e <HAL_TIM_PWM_Start+0xf2>
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	2b08      	cmp	r3, #8
 800abfa:	d104      	bne.n	800ac06 <HAL_TIM_PWM_Start+0xca>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2240      	movs	r2, #64	@ 0x40
 800ac00:	2102      	movs	r1, #2
 800ac02:	5499      	strb	r1, [r3, r2]
 800ac04:	e013      	b.n	800ac2e <HAL_TIM_PWM_Start+0xf2>
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	2b0c      	cmp	r3, #12
 800ac0a:	d104      	bne.n	800ac16 <HAL_TIM_PWM_Start+0xda>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2241      	movs	r2, #65	@ 0x41
 800ac10:	2102      	movs	r1, #2
 800ac12:	5499      	strb	r1, [r3, r2]
 800ac14:	e00b      	b.n	800ac2e <HAL_TIM_PWM_Start+0xf2>
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	2b10      	cmp	r3, #16
 800ac1a:	d104      	bne.n	800ac26 <HAL_TIM_PWM_Start+0xea>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2242      	movs	r2, #66	@ 0x42
 800ac20:	2102      	movs	r1, #2
 800ac22:	5499      	strb	r1, [r3, r2]
 800ac24:	e003      	b.n	800ac2e <HAL_TIM_PWM_Start+0xf2>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2243      	movs	r2, #67	@ 0x43
 800ac2a:	2102      	movs	r1, #2
 800ac2c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	6839      	ldr	r1, [r7, #0]
 800ac34:	2201      	movs	r2, #1
 800ac36:	0018      	movs	r0, r3
 800ac38:	f001 fc64 	bl	800c504 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a28      	ldr	r2, [pc, #160]	@ (800ace4 <HAL_TIM_PWM_Start+0x1a8>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d009      	beq.n	800ac5a <HAL_TIM_PWM_Start+0x11e>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a27      	ldr	r2, [pc, #156]	@ (800ace8 <HAL_TIM_PWM_Start+0x1ac>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d004      	beq.n	800ac5a <HAL_TIM_PWM_Start+0x11e>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a25      	ldr	r2, [pc, #148]	@ (800acec <HAL_TIM_PWM_Start+0x1b0>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d101      	bne.n	800ac5e <HAL_TIM_PWM_Start+0x122>
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	e000      	b.n	800ac60 <HAL_TIM_PWM_Start+0x124>
 800ac5e:	2300      	movs	r3, #0
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d008      	beq.n	800ac76 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2180      	movs	r1, #128	@ 0x80
 800ac70:	0209      	lsls	r1, r1, #8
 800ac72:	430a      	orrs	r2, r1
 800ac74:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a1a      	ldr	r2, [pc, #104]	@ (800ace4 <HAL_TIM_PWM_Start+0x1a8>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d00a      	beq.n	800ac96 <HAL_TIM_PWM_Start+0x15a>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	2380      	movs	r3, #128	@ 0x80
 800ac86:	05db      	lsls	r3, r3, #23
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d004      	beq.n	800ac96 <HAL_TIM_PWM_Start+0x15a>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a17      	ldr	r2, [pc, #92]	@ (800acf0 <HAL_TIM_PWM_Start+0x1b4>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d116      	bne.n	800acc4 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	4a15      	ldr	r2, [pc, #84]	@ (800acf4 <HAL_TIM_PWM_Start+0x1b8>)
 800ac9e:	4013      	ands	r3, r2
 800aca0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2b06      	cmp	r3, #6
 800aca6:	d016      	beq.n	800acd6 <HAL_TIM_PWM_Start+0x19a>
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	2380      	movs	r3, #128	@ 0x80
 800acac:	025b      	lsls	r3, r3, #9
 800acae:	429a      	cmp	r2, r3
 800acb0:	d011      	beq.n	800acd6 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	2101      	movs	r1, #1
 800acbe:	430a      	orrs	r2, r1
 800acc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acc2:	e008      	b.n	800acd6 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2101      	movs	r1, #1
 800acd0:	430a      	orrs	r2, r1
 800acd2:	601a      	str	r2, [r3, #0]
 800acd4:	e000      	b.n	800acd8 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acd6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	0018      	movs	r0, r3
 800acdc:	46bd      	mov	sp, r7
 800acde:	b004      	add	sp, #16
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	46c0      	nop			@ (mov r8, r8)
 800ace4:	40012c00 	.word	0x40012c00
 800ace8:	40014400 	.word	0x40014400
 800acec:	40014800 	.word	0x40014800
 800acf0:	40000400 	.word	0x40000400
 800acf4:	00010007 	.word	0x00010007

0800acf8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d101      	bne.n	800ad0a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800ad06:	2301      	movs	r3, #1
 800ad08:	e056      	b.n	800adb8 <HAL_TIM_IC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	223d      	movs	r2, #61	@ 0x3d
 800ad0e:	5c9b      	ldrb	r3, [r3, r2]
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d113      	bne.n	800ad3e <HAL_TIM_IC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	223c      	movs	r2, #60	@ 0x3c
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	0018      	movs	r0, r3
 800ad22:	f001 fc13 	bl	800c54c <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d102      	bne.n	800ad34 <HAL_TIM_IC_Init+0x3c>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4a23      	ldr	r2, [pc, #140]	@ (800adc0 <HAL_TIM_IC_Init+0xc8>)
 800ad32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	0010      	movs	r0, r2
 800ad3c:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	223d      	movs	r2, #61	@ 0x3d
 800ad42:	2102      	movs	r1, #2
 800ad44:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	3304      	adds	r3, #4
 800ad4e:	0019      	movs	r1, r3
 800ad50:	0010      	movs	r0, r2
 800ad52:	f000 fefd 	bl	800bb50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2248      	movs	r2, #72	@ 0x48
 800ad5a:	2101      	movs	r1, #1
 800ad5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	223e      	movs	r2, #62	@ 0x3e
 800ad62:	2101      	movs	r1, #1
 800ad64:	5499      	strb	r1, [r3, r2]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	223f      	movs	r2, #63	@ 0x3f
 800ad6a:	2101      	movs	r1, #1
 800ad6c:	5499      	strb	r1, [r3, r2]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2240      	movs	r2, #64	@ 0x40
 800ad72:	2101      	movs	r1, #1
 800ad74:	5499      	strb	r1, [r3, r2]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2241      	movs	r2, #65	@ 0x41
 800ad7a:	2101      	movs	r1, #1
 800ad7c:	5499      	strb	r1, [r3, r2]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2242      	movs	r2, #66	@ 0x42
 800ad82:	2101      	movs	r1, #1
 800ad84:	5499      	strb	r1, [r3, r2]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2243      	movs	r2, #67	@ 0x43
 800ad8a:	2101      	movs	r1, #1
 800ad8c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2244      	movs	r2, #68	@ 0x44
 800ad92:	2101      	movs	r1, #1
 800ad94:	5499      	strb	r1, [r3, r2]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2245      	movs	r2, #69	@ 0x45
 800ad9a:	2101      	movs	r1, #1
 800ad9c:	5499      	strb	r1, [r3, r2]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2246      	movs	r2, #70	@ 0x46
 800ada2:	2101      	movs	r1, #1
 800ada4:	5499      	strb	r1, [r3, r2]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2247      	movs	r2, #71	@ 0x47
 800adaa:	2101      	movs	r1, #1
 800adac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	223d      	movs	r2, #61	@ 0x3d
 800adb2:	2101      	movs	r1, #1
 800adb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	0018      	movs	r0, r3
 800adba:	46bd      	mov	sp, r7
 800adbc:	b002      	add	sp, #8
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	0800adc5 	.word	0x0800adc5

0800adc4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800adcc:	46c0      	nop			@ (mov r8, r8)
 800adce:	46bd      	mov	sp, r7
 800add0:	b002      	add	sp, #8
 800add2:	bd80      	pop	{r7, pc}

0800add4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800adde:	230f      	movs	r3, #15
 800ade0:	18fb      	adds	r3, r7, r3
 800ade2:	2200      	movs	r2, #0
 800ade4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d104      	bne.n	800adf6 <HAL_TIM_IC_Start_IT+0x22>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	223e      	movs	r2, #62	@ 0x3e
 800adf0:	5c9b      	ldrb	r3, [r3, r2]
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	e023      	b.n	800ae3e <HAL_TIM_IC_Start_IT+0x6a>
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	2b04      	cmp	r3, #4
 800adfa:	d104      	bne.n	800ae06 <HAL_TIM_IC_Start_IT+0x32>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	223f      	movs	r2, #63	@ 0x3f
 800ae00:	5c9b      	ldrb	r3, [r3, r2]
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	e01b      	b.n	800ae3e <HAL_TIM_IC_Start_IT+0x6a>
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	2b08      	cmp	r3, #8
 800ae0a:	d104      	bne.n	800ae16 <HAL_TIM_IC_Start_IT+0x42>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2240      	movs	r2, #64	@ 0x40
 800ae10:	5c9b      	ldrb	r3, [r3, r2]
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	e013      	b.n	800ae3e <HAL_TIM_IC_Start_IT+0x6a>
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	2b0c      	cmp	r3, #12
 800ae1a:	d104      	bne.n	800ae26 <HAL_TIM_IC_Start_IT+0x52>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2241      	movs	r2, #65	@ 0x41
 800ae20:	5c9b      	ldrb	r3, [r3, r2]
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	e00b      	b.n	800ae3e <HAL_TIM_IC_Start_IT+0x6a>
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	2b10      	cmp	r3, #16
 800ae2a:	d104      	bne.n	800ae36 <HAL_TIM_IC_Start_IT+0x62>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2242      	movs	r2, #66	@ 0x42
 800ae30:	5c9b      	ldrb	r3, [r3, r2]
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	e003      	b.n	800ae3e <HAL_TIM_IC_Start_IT+0x6a>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2243      	movs	r2, #67	@ 0x43
 800ae3a:	5c9b      	ldrb	r3, [r3, r2]
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	220e      	movs	r2, #14
 800ae40:	18ba      	adds	r2, r7, r2
 800ae42:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d104      	bne.n	800ae54 <HAL_TIM_IC_Start_IT+0x80>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2244      	movs	r2, #68	@ 0x44
 800ae4e:	5c9b      	ldrb	r3, [r3, r2]
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	e013      	b.n	800ae7c <HAL_TIM_IC_Start_IT+0xa8>
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2b04      	cmp	r3, #4
 800ae58:	d104      	bne.n	800ae64 <HAL_TIM_IC_Start_IT+0x90>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2245      	movs	r2, #69	@ 0x45
 800ae5e:	5c9b      	ldrb	r3, [r3, r2]
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	e00b      	b.n	800ae7c <HAL_TIM_IC_Start_IT+0xa8>
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	2b08      	cmp	r3, #8
 800ae68:	d104      	bne.n	800ae74 <HAL_TIM_IC_Start_IT+0xa0>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2246      	movs	r2, #70	@ 0x46
 800ae6e:	5c9b      	ldrb	r3, [r3, r2]
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	e003      	b.n	800ae7c <HAL_TIM_IC_Start_IT+0xa8>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2247      	movs	r2, #71	@ 0x47
 800ae78:	5c9b      	ldrb	r3, [r3, r2]
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	210d      	movs	r1, #13
 800ae7e:	187a      	adds	r2, r7, r1
 800ae80:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae82:	230e      	movs	r3, #14
 800ae84:	18fb      	adds	r3, r7, r3
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d103      	bne.n	800ae94 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800ae8c:	187b      	adds	r3, r7, r1
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d001      	beq.n	800ae98 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 800ae94:	2301      	movs	r3, #1
 800ae96:	e0c3      	b.n	800b020 <HAL_TIM_IC_Start_IT+0x24c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d104      	bne.n	800aea8 <HAL_TIM_IC_Start_IT+0xd4>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	223e      	movs	r2, #62	@ 0x3e
 800aea2:	2102      	movs	r1, #2
 800aea4:	5499      	strb	r1, [r3, r2]
 800aea6:	e023      	b.n	800aef0 <HAL_TIM_IC_Start_IT+0x11c>
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	2b04      	cmp	r3, #4
 800aeac:	d104      	bne.n	800aeb8 <HAL_TIM_IC_Start_IT+0xe4>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	223f      	movs	r2, #63	@ 0x3f
 800aeb2:	2102      	movs	r1, #2
 800aeb4:	5499      	strb	r1, [r3, r2]
 800aeb6:	e01b      	b.n	800aef0 <HAL_TIM_IC_Start_IT+0x11c>
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	2b08      	cmp	r3, #8
 800aebc:	d104      	bne.n	800aec8 <HAL_TIM_IC_Start_IT+0xf4>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2240      	movs	r2, #64	@ 0x40
 800aec2:	2102      	movs	r1, #2
 800aec4:	5499      	strb	r1, [r3, r2]
 800aec6:	e013      	b.n	800aef0 <HAL_TIM_IC_Start_IT+0x11c>
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	2b0c      	cmp	r3, #12
 800aecc:	d104      	bne.n	800aed8 <HAL_TIM_IC_Start_IT+0x104>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2241      	movs	r2, #65	@ 0x41
 800aed2:	2102      	movs	r1, #2
 800aed4:	5499      	strb	r1, [r3, r2]
 800aed6:	e00b      	b.n	800aef0 <HAL_TIM_IC_Start_IT+0x11c>
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	2b10      	cmp	r3, #16
 800aedc:	d104      	bne.n	800aee8 <HAL_TIM_IC_Start_IT+0x114>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2242      	movs	r2, #66	@ 0x42
 800aee2:	2102      	movs	r1, #2
 800aee4:	5499      	strb	r1, [r3, r2]
 800aee6:	e003      	b.n	800aef0 <HAL_TIM_IC_Start_IT+0x11c>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2243      	movs	r2, #67	@ 0x43
 800aeec:	2102      	movs	r1, #2
 800aeee:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d104      	bne.n	800af00 <HAL_TIM_IC_Start_IT+0x12c>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2244      	movs	r2, #68	@ 0x44
 800aefa:	2102      	movs	r1, #2
 800aefc:	5499      	strb	r1, [r3, r2]
 800aefe:	e013      	b.n	800af28 <HAL_TIM_IC_Start_IT+0x154>
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	2b04      	cmp	r3, #4
 800af04:	d104      	bne.n	800af10 <HAL_TIM_IC_Start_IT+0x13c>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2245      	movs	r2, #69	@ 0x45
 800af0a:	2102      	movs	r1, #2
 800af0c:	5499      	strb	r1, [r3, r2]
 800af0e:	e00b      	b.n	800af28 <HAL_TIM_IC_Start_IT+0x154>
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	2b08      	cmp	r3, #8
 800af14:	d104      	bne.n	800af20 <HAL_TIM_IC_Start_IT+0x14c>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2246      	movs	r2, #70	@ 0x46
 800af1a:	2102      	movs	r1, #2
 800af1c:	5499      	strb	r1, [r3, r2]
 800af1e:	e003      	b.n	800af28 <HAL_TIM_IC_Start_IT+0x154>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2247      	movs	r2, #71	@ 0x47
 800af24:	2102      	movs	r1, #2
 800af26:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	2b0c      	cmp	r3, #12
 800af2c:	d02a      	beq.n	800af84 <HAL_TIM_IC_Start_IT+0x1b0>
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	2b0c      	cmp	r3, #12
 800af32:	d830      	bhi.n	800af96 <HAL_TIM_IC_Start_IT+0x1c2>
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	2b08      	cmp	r3, #8
 800af38:	d01b      	beq.n	800af72 <HAL_TIM_IC_Start_IT+0x19e>
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	2b08      	cmp	r3, #8
 800af3e:	d82a      	bhi.n	800af96 <HAL_TIM_IC_Start_IT+0x1c2>
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d003      	beq.n	800af4e <HAL_TIM_IC_Start_IT+0x17a>
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	2b04      	cmp	r3, #4
 800af4a:	d009      	beq.n	800af60 <HAL_TIM_IC_Start_IT+0x18c>
 800af4c:	e023      	b.n	800af96 <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	68da      	ldr	r2, [r3, #12]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2102      	movs	r1, #2
 800af5a:	430a      	orrs	r2, r1
 800af5c:	60da      	str	r2, [r3, #12]
      break;
 800af5e:	e01f      	b.n	800afa0 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	68da      	ldr	r2, [r3, #12]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2104      	movs	r1, #4
 800af6c:	430a      	orrs	r2, r1
 800af6e:	60da      	str	r2, [r3, #12]
      break;
 800af70:	e016      	b.n	800afa0 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	68da      	ldr	r2, [r3, #12]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2108      	movs	r1, #8
 800af7e:	430a      	orrs	r2, r1
 800af80:	60da      	str	r2, [r3, #12]
      break;
 800af82:	e00d      	b.n	800afa0 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	68da      	ldr	r2, [r3, #12]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2110      	movs	r1, #16
 800af90:	430a      	orrs	r2, r1
 800af92:	60da      	str	r2, [r3, #12]
      break;
 800af94:	e004      	b.n	800afa0 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 800af96:	230f      	movs	r3, #15
 800af98:	18fb      	adds	r3, r7, r3
 800af9a:	2201      	movs	r2, #1
 800af9c:	701a      	strb	r2, [r3, #0]
      break;
 800af9e:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800afa0:	230f      	movs	r3, #15
 800afa2:	18fb      	adds	r3, r7, r3
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d137      	bne.n	800b01a <HAL_TIM_IC_Start_IT+0x246>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	6839      	ldr	r1, [r7, #0]
 800afb0:	2201      	movs	r2, #1
 800afb2:	0018      	movs	r0, r3
 800afb4:	f001 faa6 	bl	800c504 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a1a      	ldr	r2, [pc, #104]	@ (800b028 <HAL_TIM_IC_Start_IT+0x254>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d00a      	beq.n	800afd8 <HAL_TIM_IC_Start_IT+0x204>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	2380      	movs	r3, #128	@ 0x80
 800afc8:	05db      	lsls	r3, r3, #23
 800afca:	429a      	cmp	r2, r3
 800afcc:	d004      	beq.n	800afd8 <HAL_TIM_IC_Start_IT+0x204>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a16      	ldr	r2, [pc, #88]	@ (800b02c <HAL_TIM_IC_Start_IT+0x258>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d116      	bne.n	800b006 <HAL_TIM_IC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	4a14      	ldr	r2, [pc, #80]	@ (800b030 <HAL_TIM_IC_Start_IT+0x25c>)
 800afe0:	4013      	ands	r3, r2
 800afe2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	2b06      	cmp	r3, #6
 800afe8:	d016      	beq.n	800b018 <HAL_TIM_IC_Start_IT+0x244>
 800afea:	68ba      	ldr	r2, [r7, #8]
 800afec:	2380      	movs	r3, #128	@ 0x80
 800afee:	025b      	lsls	r3, r3, #9
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d011      	beq.n	800b018 <HAL_TIM_IC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2101      	movs	r1, #1
 800b000:	430a      	orrs	r2, r1
 800b002:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b004:	e008      	b.n	800b018 <HAL_TIM_IC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2101      	movs	r1, #1
 800b012:	430a      	orrs	r2, r1
 800b014:	601a      	str	r2, [r3, #0]
 800b016:	e000      	b.n	800b01a <HAL_TIM_IC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b018:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800b01a:	230f      	movs	r3, #15
 800b01c:	18fb      	adds	r3, r7, r3
 800b01e:	781b      	ldrb	r3, [r3, #0]
}
 800b020:	0018      	movs	r0, r3
 800b022:	46bd      	mov	sp, r7
 800b024:	b004      	add	sp, #16
 800b026:	bd80      	pop	{r7, pc}
 800b028:	40012c00 	.word	0x40012c00
 800b02c:	40000400 	.word	0x40000400
 800b030:	00010007 	.word	0x00010007

0800b034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	2202      	movs	r2, #2
 800b050:	4013      	ands	r3, r2
 800b052:	d027      	beq.n	800b0a4 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2202      	movs	r2, #2
 800b058:	4013      	ands	r3, r2
 800b05a:	d023      	beq.n	800b0a4 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2203      	movs	r2, #3
 800b062:	4252      	negs	r2, r2
 800b064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2201      	movs	r2, #1
 800b06a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	699b      	ldr	r3, [r3, #24]
 800b072:	2203      	movs	r2, #3
 800b074:	4013      	ands	r3, r2
 800b076:	d006      	beq.n	800b086 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2294      	movs	r2, #148	@ 0x94
 800b07c:	589b      	ldr	r3, [r3, r2]
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	0010      	movs	r0, r2
 800b082:	4798      	blx	r3
 800b084:	e00b      	b.n	800b09e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	229c      	movs	r2, #156	@ 0x9c
 800b08a:	589b      	ldr	r3, [r3, r2]
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	0010      	movs	r0, r2
 800b090:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	22a0      	movs	r2, #160	@ 0xa0
 800b096:	589b      	ldr	r3, [r3, r2]
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	0010      	movs	r0, r2
 800b09c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	2204      	movs	r2, #4
 800b0a8:	4013      	ands	r3, r2
 800b0aa:	d028      	beq.n	800b0fe <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2204      	movs	r2, #4
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	d024      	beq.n	800b0fe <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	2205      	movs	r2, #5
 800b0ba:	4252      	negs	r2, r2
 800b0bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2202      	movs	r2, #2
 800b0c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	699a      	ldr	r2, [r3, #24]
 800b0ca:	23c0      	movs	r3, #192	@ 0xc0
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	4013      	ands	r3, r2
 800b0d0:	d006      	beq.n	800b0e0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2294      	movs	r2, #148	@ 0x94
 800b0d6:	589b      	ldr	r3, [r3, r2]
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	0010      	movs	r0, r2
 800b0dc:	4798      	blx	r3
 800b0de:	e00b      	b.n	800b0f8 <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	229c      	movs	r2, #156	@ 0x9c
 800b0e4:	589b      	ldr	r3, [r3, r2]
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	0010      	movs	r0, r2
 800b0ea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	22a0      	movs	r2, #160	@ 0xa0
 800b0f0:	589b      	ldr	r3, [r3, r2]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	0010      	movs	r0, r2
 800b0f6:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	2208      	movs	r2, #8
 800b102:	4013      	ands	r3, r2
 800b104:	d027      	beq.n	800b156 <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2208      	movs	r2, #8
 800b10a:	4013      	ands	r3, r2
 800b10c:	d023      	beq.n	800b156 <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	2209      	movs	r2, #9
 800b114:	4252      	negs	r2, r2
 800b116:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2204      	movs	r2, #4
 800b11c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	69db      	ldr	r3, [r3, #28]
 800b124:	2203      	movs	r2, #3
 800b126:	4013      	ands	r3, r2
 800b128:	d006      	beq.n	800b138 <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2294      	movs	r2, #148	@ 0x94
 800b12e:	589b      	ldr	r3, [r3, r2]
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	0010      	movs	r0, r2
 800b134:	4798      	blx	r3
 800b136:	e00b      	b.n	800b150 <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	229c      	movs	r2, #156	@ 0x9c
 800b13c:	589b      	ldr	r3, [r3, r2]
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	0010      	movs	r0, r2
 800b142:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	22a0      	movs	r2, #160	@ 0xa0
 800b148:	589b      	ldr	r3, [r3, r2]
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	0010      	movs	r0, r2
 800b14e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	2210      	movs	r2, #16
 800b15a:	4013      	ands	r3, r2
 800b15c:	d028      	beq.n	800b1b0 <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2210      	movs	r2, #16
 800b162:	4013      	ands	r3, r2
 800b164:	d024      	beq.n	800b1b0 <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	2211      	movs	r2, #17
 800b16c:	4252      	negs	r2, r2
 800b16e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2208      	movs	r2, #8
 800b174:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	69da      	ldr	r2, [r3, #28]
 800b17c:	23c0      	movs	r3, #192	@ 0xc0
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	4013      	ands	r3, r2
 800b182:	d006      	beq.n	800b192 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2294      	movs	r2, #148	@ 0x94
 800b188:	589b      	ldr	r3, [r3, r2]
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	0010      	movs	r0, r2
 800b18e:	4798      	blx	r3
 800b190:	e00b      	b.n	800b1aa <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	229c      	movs	r2, #156	@ 0x9c
 800b196:	589b      	ldr	r3, [r3, r2]
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	0010      	movs	r0, r2
 800b19c:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	22a0      	movs	r2, #160	@ 0xa0
 800b1a2:	589b      	ldr	r3, [r3, r2]
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	0010      	movs	r0, r2
 800b1a8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	4013      	ands	r3, r2
 800b1b6:	d00e      	beq.n	800b1d6 <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	4013      	ands	r3, r2
 800b1be:	d00a      	beq.n	800b1d6 <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	2202      	movs	r2, #2
 800b1c6:	4252      	negs	r2, r2
 800b1c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2284      	movs	r2, #132	@ 0x84
 800b1ce:	589b      	ldr	r3, [r3, r2]
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	0010      	movs	r0, r2
 800b1d4:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	2280      	movs	r2, #128	@ 0x80
 800b1da:	4013      	ands	r3, r2
 800b1dc:	d104      	bne.n	800b1e8 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b1de:	68ba      	ldr	r2, [r7, #8]
 800b1e0:	2380      	movs	r3, #128	@ 0x80
 800b1e2:	019b      	lsls	r3, r3, #6
 800b1e4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b1e6:	d00d      	beq.n	800b204 <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2280      	movs	r2, #128	@ 0x80
 800b1ec:	4013      	ands	r3, r2
 800b1ee:	d009      	beq.n	800b204 <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a22      	ldr	r2, [pc, #136]	@ (800b280 <HAL_TIM_IRQHandler+0x24c>)
 800b1f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	22b4      	movs	r2, #180	@ 0xb4
 800b1fc:	589b      	ldr	r3, [r3, r2]
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	0010      	movs	r0, r2
 800b202:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b204:	68ba      	ldr	r2, [r7, #8]
 800b206:	2380      	movs	r3, #128	@ 0x80
 800b208:	005b      	lsls	r3, r3, #1
 800b20a:	4013      	ands	r3, r2
 800b20c:	d00d      	beq.n	800b22a <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2280      	movs	r2, #128	@ 0x80
 800b212:	4013      	ands	r3, r2
 800b214:	d009      	beq.n	800b22a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a1a      	ldr	r2, [pc, #104]	@ (800b284 <HAL_TIM_IRQHandler+0x250>)
 800b21c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	22b8      	movs	r2, #184	@ 0xb8
 800b222:	589b      	ldr	r3, [r3, r2]
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	0010      	movs	r0, r2
 800b228:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	2240      	movs	r2, #64	@ 0x40
 800b22e:	4013      	ands	r3, r2
 800b230:	d00e      	beq.n	800b250 <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2240      	movs	r2, #64	@ 0x40
 800b236:	4013      	ands	r3, r2
 800b238:	d00a      	beq.n	800b250 <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2241      	movs	r2, #65	@ 0x41
 800b240:	4252      	negs	r2, r2
 800b242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	228c      	movs	r2, #140	@ 0x8c
 800b248:	589b      	ldr	r3, [r3, r2]
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	0010      	movs	r0, r2
 800b24e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	2220      	movs	r2, #32
 800b254:	4013      	ands	r3, r2
 800b256:	d00e      	beq.n	800b276 <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2220      	movs	r2, #32
 800b25c:	4013      	ands	r3, r2
 800b25e:	d00a      	beq.n	800b276 <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	2221      	movs	r2, #33	@ 0x21
 800b266:	4252      	negs	r2, r2
 800b268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	22ac      	movs	r2, #172	@ 0xac
 800b26e:	589b      	ldr	r3, [r3, r2]
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	0010      	movs	r0, r2
 800b274:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b276:	46c0      	nop			@ (mov r8, r8)
 800b278:	46bd      	mov	sp, r7
 800b27a:	b004      	add	sp, #16
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	46c0      	nop			@ (mov r8, r8)
 800b280:	ffffdf7f 	.word	0xffffdf7f
 800b284:	fffffeff 	.word	0xfffffeff

0800b288 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b294:	2317      	movs	r3, #23
 800b296:	18fb      	adds	r3, r7, r3
 800b298:	2200      	movs	r2, #0
 800b29a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	223c      	movs	r2, #60	@ 0x3c
 800b2a0:	5c9b      	ldrb	r3, [r3, r2]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d101      	bne.n	800b2aa <HAL_TIM_OC_ConfigChannel+0x22>
 800b2a6:	2302      	movs	r3, #2
 800b2a8:	e048      	b.n	800b33c <HAL_TIM_OC_ConfigChannel+0xb4>
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	223c      	movs	r2, #60	@ 0x3c
 800b2ae:	2101      	movs	r1, #1
 800b2b0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2b14      	cmp	r3, #20
 800b2b6:	d835      	bhi.n	800b324 <HAL_TIM_OC_ConfigChannel+0x9c>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	009a      	lsls	r2, r3, #2
 800b2bc:	4b21      	ldr	r3, [pc, #132]	@ (800b344 <HAL_TIM_OC_ConfigChannel+0xbc>)
 800b2be:	18d3      	adds	r3, r2, r3
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	68ba      	ldr	r2, [r7, #8]
 800b2ca:	0011      	movs	r1, r2
 800b2cc:	0018      	movs	r0, r3
 800b2ce:	f000 fcc3 	bl	800bc58 <TIM_OC1_SetConfig>
      break;
 800b2d2:	e02c      	b.n	800b32e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	68ba      	ldr	r2, [r7, #8]
 800b2da:	0011      	movs	r1, r2
 800b2dc:	0018      	movs	r0, r3
 800b2de:	f000 fd3b 	bl	800bd58 <TIM_OC2_SetConfig>
      break;
 800b2e2:	e024      	b.n	800b32e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	0011      	movs	r1, r2
 800b2ec:	0018      	movs	r0, r3
 800b2ee:	f000 fdb1 	bl	800be54 <TIM_OC3_SetConfig>
      break;
 800b2f2:	e01c      	b.n	800b32e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	68ba      	ldr	r2, [r7, #8]
 800b2fa:	0011      	movs	r1, r2
 800b2fc:	0018      	movs	r0, r3
 800b2fe:	f000 fe2b 	bl	800bf58 <TIM_OC4_SetConfig>
      break;
 800b302:	e014      	b.n	800b32e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	68ba      	ldr	r2, [r7, #8]
 800b30a:	0011      	movs	r1, r2
 800b30c:	0018      	movs	r0, r3
 800b30e:	f000 fe87 	bl	800c020 <TIM_OC5_SetConfig>
      break;
 800b312:	e00c      	b.n	800b32e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	68ba      	ldr	r2, [r7, #8]
 800b31a:	0011      	movs	r1, r2
 800b31c:	0018      	movs	r0, r3
 800b31e:	f000 fed9 	bl	800c0d4 <TIM_OC6_SetConfig>
      break;
 800b322:	e004      	b.n	800b32e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800b324:	2317      	movs	r3, #23
 800b326:	18fb      	adds	r3, r7, r3
 800b328:	2201      	movs	r2, #1
 800b32a:	701a      	strb	r2, [r3, #0]
      break;
 800b32c:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	223c      	movs	r2, #60	@ 0x3c
 800b332:	2100      	movs	r1, #0
 800b334:	5499      	strb	r1, [r3, r2]

  return status;
 800b336:	2317      	movs	r3, #23
 800b338:	18fb      	adds	r3, r7, r3
 800b33a:	781b      	ldrb	r3, [r3, #0]
}
 800b33c:	0018      	movs	r0, r3
 800b33e:	46bd      	mov	sp, r7
 800b340:	b006      	add	sp, #24
 800b342:	bd80      	pop	{r7, pc}
 800b344:	0800ea3c 	.word	0x0800ea3c

0800b348 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b086      	sub	sp, #24
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b354:	2317      	movs	r3, #23
 800b356:	18fb      	adds	r3, r7, r3
 800b358:	2200      	movs	r2, #0
 800b35a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	223c      	movs	r2, #60	@ 0x3c
 800b360:	5c9b      	ldrb	r3, [r3, r2]
 800b362:	2b01      	cmp	r3, #1
 800b364:	d101      	bne.n	800b36a <HAL_TIM_IC_ConfigChannel+0x22>
 800b366:	2302      	movs	r3, #2
 800b368:	e08c      	b.n	800b484 <HAL_TIM_IC_ConfigChannel+0x13c>
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	223c      	movs	r2, #60	@ 0x3c
 800b36e:	2101      	movs	r1, #1
 800b370:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d11b      	bne.n	800b3b0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800b388:	f000 ff02 	bl	800c190 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	699a      	ldr	r2, [r3, #24]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	210c      	movs	r1, #12
 800b398:	438a      	bics	r2, r1
 800b39a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	6999      	ldr	r1, [r3, #24]
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	689a      	ldr	r2, [r3, #8]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	430a      	orrs	r2, r1
 800b3ac:	619a      	str	r2, [r3, #24]
 800b3ae:	e062      	b.n	800b476 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2b04      	cmp	r3, #4
 800b3b4:	d11c      	bne.n	800b3f0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800b3c6:	f000 ff67 	bl	800c298 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	699a      	ldr	r2, [r3, #24]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	492d      	ldr	r1, [pc, #180]	@ (800b48c <HAL_TIM_IC_ConfigChannel+0x144>)
 800b3d6:	400a      	ands	r2, r1
 800b3d8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	6999      	ldr	r1, [r3, #24]
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	021a      	lsls	r2, r3, #8
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	430a      	orrs	r2, r1
 800b3ec:	619a      	str	r2, [r3, #24]
 800b3ee:	e042      	b.n	800b476 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2b08      	cmp	r3, #8
 800b3f4:	d11b      	bne.n	800b42e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800b406:	f000 ffbb 	bl	800c380 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	69da      	ldr	r2, [r3, #28]
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	210c      	movs	r1, #12
 800b416:	438a      	bics	r2, r1
 800b418:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	69d9      	ldr	r1, [r3, #28]
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	689a      	ldr	r2, [r3, #8]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	430a      	orrs	r2, r1
 800b42a:	61da      	str	r2, [r3, #28]
 800b42c:	e023      	b.n	800b476 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2b0c      	cmp	r3, #12
 800b432:	d11c      	bne.n	800b46e <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800b444:	f000 ffdc 	bl	800c400 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	69da      	ldr	r2, [r3, #28]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	490e      	ldr	r1, [pc, #56]	@ (800b48c <HAL_TIM_IC_ConfigChannel+0x144>)
 800b454:	400a      	ands	r2, r1
 800b456:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	69d9      	ldr	r1, [r3, #28]
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	021a      	lsls	r2, r3, #8
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	430a      	orrs	r2, r1
 800b46a:	61da      	str	r2, [r3, #28]
 800b46c:	e003      	b.n	800b476 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800b46e:	2317      	movs	r3, #23
 800b470:	18fb      	adds	r3, r7, r3
 800b472:	2201      	movs	r2, #1
 800b474:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	223c      	movs	r2, #60	@ 0x3c
 800b47a:	2100      	movs	r1, #0
 800b47c:	5499      	strb	r1, [r3, r2]

  return status;
 800b47e:	2317      	movs	r3, #23
 800b480:	18fb      	adds	r3, r7, r3
 800b482:	781b      	ldrb	r3, [r3, #0]
}
 800b484:	0018      	movs	r0, r3
 800b486:	46bd      	mov	sp, r7
 800b488:	b006      	add	sp, #24
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	fffff3ff 	.word	0xfffff3ff

0800b490 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b49c:	2317      	movs	r3, #23
 800b49e:	18fb      	adds	r3, r7, r3
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	223c      	movs	r2, #60	@ 0x3c
 800b4a8:	5c9b      	ldrb	r3, [r3, r2]
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d101      	bne.n	800b4b2 <HAL_TIM_PWM_ConfigChannel+0x22>
 800b4ae:	2302      	movs	r3, #2
 800b4b0:	e0e5      	b.n	800b67e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	223c      	movs	r2, #60	@ 0x3c
 800b4b6:	2101      	movs	r1, #1
 800b4b8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2b14      	cmp	r3, #20
 800b4be:	d900      	bls.n	800b4c2 <HAL_TIM_PWM_ConfigChannel+0x32>
 800b4c0:	e0d1      	b.n	800b666 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	009a      	lsls	r2, r3, #2
 800b4c6:	4b70      	ldr	r3, [pc, #448]	@ (800b688 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800b4c8:	18d3      	adds	r3, r2, r3
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	68ba      	ldr	r2, [r7, #8]
 800b4d4:	0011      	movs	r1, r2
 800b4d6:	0018      	movs	r0, r3
 800b4d8:	f000 fbbe 	bl	800bc58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	699a      	ldr	r2, [r3, #24]
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2108      	movs	r1, #8
 800b4e8:	430a      	orrs	r2, r1
 800b4ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	699a      	ldr	r2, [r3, #24]
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	2104      	movs	r1, #4
 800b4f8:	438a      	bics	r2, r1
 800b4fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	6999      	ldr	r1, [r3, #24]
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	691a      	ldr	r2, [r3, #16]
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	430a      	orrs	r2, r1
 800b50c:	619a      	str	r2, [r3, #24]
      break;
 800b50e:	e0af      	b.n	800b670 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	68ba      	ldr	r2, [r7, #8]
 800b516:	0011      	movs	r1, r2
 800b518:	0018      	movs	r0, r3
 800b51a:	f000 fc1d 	bl	800bd58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	699a      	ldr	r2, [r3, #24]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2180      	movs	r1, #128	@ 0x80
 800b52a:	0109      	lsls	r1, r1, #4
 800b52c:	430a      	orrs	r2, r1
 800b52e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	699a      	ldr	r2, [r3, #24]
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4954      	ldr	r1, [pc, #336]	@ (800b68c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800b53c:	400a      	ands	r2, r1
 800b53e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	6999      	ldr	r1, [r3, #24]
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	691b      	ldr	r3, [r3, #16]
 800b54a:	021a      	lsls	r2, r3, #8
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	430a      	orrs	r2, r1
 800b552:	619a      	str	r2, [r3, #24]
      break;
 800b554:	e08c      	b.n	800b670 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	68ba      	ldr	r2, [r7, #8]
 800b55c:	0011      	movs	r1, r2
 800b55e:	0018      	movs	r0, r3
 800b560:	f000 fc78 	bl	800be54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	69da      	ldr	r2, [r3, #28]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2108      	movs	r1, #8
 800b570:	430a      	orrs	r2, r1
 800b572:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	69da      	ldr	r2, [r3, #28]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2104      	movs	r1, #4
 800b580:	438a      	bics	r2, r1
 800b582:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	69d9      	ldr	r1, [r3, #28]
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	691a      	ldr	r2, [r3, #16]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	430a      	orrs	r2, r1
 800b594:	61da      	str	r2, [r3, #28]
      break;
 800b596:	e06b      	b.n	800b670 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	68ba      	ldr	r2, [r7, #8]
 800b59e:	0011      	movs	r1, r2
 800b5a0:	0018      	movs	r0, r3
 800b5a2:	f000 fcd9 	bl	800bf58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	69da      	ldr	r2, [r3, #28]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2180      	movs	r1, #128	@ 0x80
 800b5b2:	0109      	lsls	r1, r1, #4
 800b5b4:	430a      	orrs	r2, r1
 800b5b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	69da      	ldr	r2, [r3, #28]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	4932      	ldr	r1, [pc, #200]	@ (800b68c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800b5c4:	400a      	ands	r2, r1
 800b5c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	69d9      	ldr	r1, [r3, #28]
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	691b      	ldr	r3, [r3, #16]
 800b5d2:	021a      	lsls	r2, r3, #8
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	430a      	orrs	r2, r1
 800b5da:	61da      	str	r2, [r3, #28]
      break;
 800b5dc:	e048      	b.n	800b670 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	0011      	movs	r1, r2
 800b5e6:	0018      	movs	r0, r3
 800b5e8:	f000 fd1a 	bl	800c020 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2108      	movs	r1, #8
 800b5f8:	430a      	orrs	r2, r1
 800b5fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	2104      	movs	r1, #4
 800b608:	438a      	bics	r2, r1
 800b60a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	691a      	ldr	r2, [r3, #16]
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	430a      	orrs	r2, r1
 800b61c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b61e:	e027      	b.n	800b670 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	68ba      	ldr	r2, [r7, #8]
 800b626:	0011      	movs	r1, r2
 800b628:	0018      	movs	r0, r3
 800b62a:	f000 fd53 	bl	800c0d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	2180      	movs	r1, #128	@ 0x80
 800b63a:	0109      	lsls	r1, r1, #4
 800b63c:	430a      	orrs	r2, r1
 800b63e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4910      	ldr	r1, [pc, #64]	@ (800b68c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800b64c:	400a      	ands	r2, r1
 800b64e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	691b      	ldr	r3, [r3, #16]
 800b65a:	021a      	lsls	r2, r3, #8
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	430a      	orrs	r2, r1
 800b662:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b664:	e004      	b.n	800b670 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800b666:	2317      	movs	r3, #23
 800b668:	18fb      	adds	r3, r7, r3
 800b66a:	2201      	movs	r2, #1
 800b66c:	701a      	strb	r2, [r3, #0]
      break;
 800b66e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	223c      	movs	r2, #60	@ 0x3c
 800b674:	2100      	movs	r1, #0
 800b676:	5499      	strb	r1, [r3, r2]

  return status;
 800b678:	2317      	movs	r3, #23
 800b67a:	18fb      	adds	r3, r7, r3
 800b67c:	781b      	ldrb	r3, [r3, #0]
}
 800b67e:	0018      	movs	r0, r3
 800b680:	46bd      	mov	sp, r7
 800b682:	b006      	add	sp, #24
 800b684:	bd80      	pop	{r7, pc}
 800b686:	46c0      	nop			@ (mov r8, r8)
 800b688:	0800ea90 	.word	0x0800ea90
 800b68c:	fffffbff 	.word	0xfffffbff

0800b690 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b69a:	230f      	movs	r3, #15
 800b69c:	18fb      	adds	r3, r7, r3
 800b69e:	2200      	movs	r2, #0
 800b6a0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	223c      	movs	r2, #60	@ 0x3c
 800b6a6:	5c9b      	ldrb	r3, [r3, r2]
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d101      	bne.n	800b6b0 <HAL_TIM_ConfigClockSource+0x20>
 800b6ac:	2302      	movs	r3, #2
 800b6ae:	e0bc      	b.n	800b82a <HAL_TIM_ConfigClockSource+0x19a>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	223c      	movs	r2, #60	@ 0x3c
 800b6b4:	2101      	movs	r1, #1
 800b6b6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	223d      	movs	r2, #61	@ 0x3d
 800b6bc:	2102      	movs	r1, #2
 800b6be:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	4a5a      	ldr	r2, [pc, #360]	@ (800b834 <HAL_TIM_ConfigClockSource+0x1a4>)
 800b6cc:	4013      	ands	r3, r2
 800b6ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	4a59      	ldr	r2, [pc, #356]	@ (800b838 <HAL_TIM_ConfigClockSource+0x1a8>)
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	68ba      	ldr	r2, [r7, #8]
 800b6de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2280      	movs	r2, #128	@ 0x80
 800b6e6:	0192      	lsls	r2, r2, #6
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d040      	beq.n	800b76e <HAL_TIM_ConfigClockSource+0xde>
 800b6ec:	2280      	movs	r2, #128	@ 0x80
 800b6ee:	0192      	lsls	r2, r2, #6
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d900      	bls.n	800b6f6 <HAL_TIM_ConfigClockSource+0x66>
 800b6f4:	e088      	b.n	800b808 <HAL_TIM_ConfigClockSource+0x178>
 800b6f6:	2280      	movs	r2, #128	@ 0x80
 800b6f8:	0152      	lsls	r2, r2, #5
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d100      	bne.n	800b700 <HAL_TIM_ConfigClockSource+0x70>
 800b6fe:	e088      	b.n	800b812 <HAL_TIM_ConfigClockSource+0x182>
 800b700:	2280      	movs	r2, #128	@ 0x80
 800b702:	0152      	lsls	r2, r2, #5
 800b704:	4293      	cmp	r3, r2
 800b706:	d900      	bls.n	800b70a <HAL_TIM_ConfigClockSource+0x7a>
 800b708:	e07e      	b.n	800b808 <HAL_TIM_ConfigClockSource+0x178>
 800b70a:	2b70      	cmp	r3, #112	@ 0x70
 800b70c:	d018      	beq.n	800b740 <HAL_TIM_ConfigClockSource+0xb0>
 800b70e:	d900      	bls.n	800b712 <HAL_TIM_ConfigClockSource+0x82>
 800b710:	e07a      	b.n	800b808 <HAL_TIM_ConfigClockSource+0x178>
 800b712:	2b60      	cmp	r3, #96	@ 0x60
 800b714:	d04f      	beq.n	800b7b6 <HAL_TIM_ConfigClockSource+0x126>
 800b716:	d900      	bls.n	800b71a <HAL_TIM_ConfigClockSource+0x8a>
 800b718:	e076      	b.n	800b808 <HAL_TIM_ConfigClockSource+0x178>
 800b71a:	2b50      	cmp	r3, #80	@ 0x50
 800b71c:	d03b      	beq.n	800b796 <HAL_TIM_ConfigClockSource+0x106>
 800b71e:	d900      	bls.n	800b722 <HAL_TIM_ConfigClockSource+0x92>
 800b720:	e072      	b.n	800b808 <HAL_TIM_ConfigClockSource+0x178>
 800b722:	2b40      	cmp	r3, #64	@ 0x40
 800b724:	d057      	beq.n	800b7d6 <HAL_TIM_ConfigClockSource+0x146>
 800b726:	d900      	bls.n	800b72a <HAL_TIM_ConfigClockSource+0x9a>
 800b728:	e06e      	b.n	800b808 <HAL_TIM_ConfigClockSource+0x178>
 800b72a:	2b30      	cmp	r3, #48	@ 0x30
 800b72c:	d063      	beq.n	800b7f6 <HAL_TIM_ConfigClockSource+0x166>
 800b72e:	d86b      	bhi.n	800b808 <HAL_TIM_ConfigClockSource+0x178>
 800b730:	2b20      	cmp	r3, #32
 800b732:	d060      	beq.n	800b7f6 <HAL_TIM_ConfigClockSource+0x166>
 800b734:	d868      	bhi.n	800b808 <HAL_TIM_ConfigClockSource+0x178>
 800b736:	2b00      	cmp	r3, #0
 800b738:	d05d      	beq.n	800b7f6 <HAL_TIM_ConfigClockSource+0x166>
 800b73a:	2b10      	cmp	r3, #16
 800b73c:	d05b      	beq.n	800b7f6 <HAL_TIM_ConfigClockSource+0x166>
 800b73e:	e063      	b.n	800b808 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b750:	f000 feb8 	bl	800c4c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	2277      	movs	r2, #119	@ 0x77
 800b760:	4313      	orrs	r3, r2
 800b762:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	68ba      	ldr	r2, [r7, #8]
 800b76a:	609a      	str	r2, [r3, #8]
      break;
 800b76c:	e052      	b.n	800b814 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b77e:	f000 fea1 	bl	800c4c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	689a      	ldr	r2, [r3, #8]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2180      	movs	r1, #128	@ 0x80
 800b78e:	01c9      	lsls	r1, r1, #7
 800b790:	430a      	orrs	r2, r1
 800b792:	609a      	str	r2, [r3, #8]
      break;
 800b794:	e03e      	b.n	800b814 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7a2:	001a      	movs	r2, r3
 800b7a4:	f000 fd4a 	bl	800c23c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2150      	movs	r1, #80	@ 0x50
 800b7ae:	0018      	movs	r0, r3
 800b7b0:	f000 fe6c 	bl	800c48c <TIM_ITRx_SetConfig>
      break;
 800b7b4:	e02e      	b.n	800b814 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b7c2:	001a      	movs	r2, r3
 800b7c4:	f000 fdaa 	bl	800c31c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2160      	movs	r1, #96	@ 0x60
 800b7ce:	0018      	movs	r0, r3
 800b7d0:	f000 fe5c 	bl	800c48c <TIM_ITRx_SetConfig>
      break;
 800b7d4:	e01e      	b.n	800b814 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7e2:	001a      	movs	r2, r3
 800b7e4:	f000 fd2a 	bl	800c23c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2140      	movs	r1, #64	@ 0x40
 800b7ee:	0018      	movs	r0, r3
 800b7f0:	f000 fe4c 	bl	800c48c <TIM_ITRx_SetConfig>
      break;
 800b7f4:	e00e      	b.n	800b814 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	0019      	movs	r1, r3
 800b800:	0010      	movs	r0, r2
 800b802:	f000 fe43 	bl	800c48c <TIM_ITRx_SetConfig>
      break;
 800b806:	e005      	b.n	800b814 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800b808:	230f      	movs	r3, #15
 800b80a:	18fb      	adds	r3, r7, r3
 800b80c:	2201      	movs	r2, #1
 800b80e:	701a      	strb	r2, [r3, #0]
      break;
 800b810:	e000      	b.n	800b814 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800b812:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	223d      	movs	r2, #61	@ 0x3d
 800b818:	2101      	movs	r1, #1
 800b81a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	223c      	movs	r2, #60	@ 0x3c
 800b820:	2100      	movs	r1, #0
 800b822:	5499      	strb	r1, [r3, r2]

  return status;
 800b824:	230f      	movs	r3, #15
 800b826:	18fb      	adds	r3, r7, r3
 800b828:	781b      	ldrb	r3, [r3, #0]
}
 800b82a:	0018      	movs	r0, r3
 800b82c:	46bd      	mov	sp, r7
 800b82e:	b004      	add	sp, #16
 800b830:	bd80      	pop	{r7, pc}
 800b832:	46c0      	nop			@ (mov r8, r8)
 800b834:	ffceff88 	.word	0xffceff88
 800b838:	ffff00ff 	.word	0xffff00ff

0800b83c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800b846:	2300      	movs	r3, #0
 800b848:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	2b0c      	cmp	r3, #12
 800b84e:	d01e      	beq.n	800b88e <HAL_TIM_ReadCapturedValue+0x52>
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	2b0c      	cmp	r3, #12
 800b854:	d820      	bhi.n	800b898 <HAL_TIM_ReadCapturedValue+0x5c>
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	2b08      	cmp	r3, #8
 800b85a:	d013      	beq.n	800b884 <HAL_TIM_ReadCapturedValue+0x48>
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	2b08      	cmp	r3, #8
 800b860:	d81a      	bhi.n	800b898 <HAL_TIM_ReadCapturedValue+0x5c>
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d003      	beq.n	800b870 <HAL_TIM_ReadCapturedValue+0x34>
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	2b04      	cmp	r3, #4
 800b86c:	d005      	beq.n	800b87a <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800b86e:	e013      	b.n	800b898 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b876:	60fb      	str	r3, [r7, #12]
      break;
 800b878:	e00f      	b.n	800b89a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b880:	60fb      	str	r3, [r7, #12]
      break;
 800b882:	e00a      	b.n	800b89a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b88a:	60fb      	str	r3, [r7, #12]
      break;
 800b88c:	e005      	b.n	800b89a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b894:	60fb      	str	r3, [r7, #12]
      break;
 800b896:	e000      	b.n	800b89a <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 800b898:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 800b89a:	68fb      	ldr	r3, [r7, #12]
}
 800b89c:	0018      	movs	r0, r3
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	b004      	add	sp, #16
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b8ac:	46c0      	nop			@ (mov r8, r8)
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	b002      	add	sp, #8
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b082      	sub	sp, #8
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800b8bc:	46c0      	nop			@ (mov r8, r8)
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	b002      	add	sp, #8
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b8cc:	46c0      	nop			@ (mov r8, r8)
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	b002      	add	sp, #8
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b8dc:	46c0      	nop			@ (mov r8, r8)
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	b002      	add	sp, #8
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800b8ec:	46c0      	nop			@ (mov r8, r8)
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	b002      	add	sp, #8
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b8fc:	46c0      	nop			@ (mov r8, r8)
 800b8fe:	46bd      	mov	sp, r7
 800b900:	b002      	add	sp, #8
 800b902:	bd80      	pop	{r7, pc}

0800b904 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b90c:	46c0      	nop			@ (mov r8, r8)
 800b90e:	46bd      	mov	sp, r7
 800b910:	b002      	add	sp, #8
 800b912:	bd80      	pop	{r7, pc}

0800b914 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b91c:	46c0      	nop			@ (mov r8, r8)
 800b91e:	46bd      	mov	sp, r7
 800b920:	b002      	add	sp, #8
 800b922:	bd80      	pop	{r7, pc}

0800b924 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800b92c:	46c0      	nop			@ (mov r8, r8)
 800b92e:	46bd      	mov	sp, r7
 800b930:	b002      	add	sp, #8
 800b932:	bd80      	pop	{r7, pc}

0800b934 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b93c:	46c0      	nop			@ (mov r8, r8)
 800b93e:	46bd      	mov	sp, r7
 800b940:	b002      	add	sp, #8
 800b942:	bd80      	pop	{r7, pc}

0800b944 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b086      	sub	sp, #24
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	607a      	str	r2, [r7, #4]
 800b94e:	230b      	movs	r3, #11
 800b950:	18fb      	adds	r3, r7, r3
 800b952:	1c0a      	adds	r2, r1, #0
 800b954:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b956:	2317      	movs	r3, #23
 800b958:	18fb      	adds	r3, r7, r3
 800b95a:	2200      	movs	r2, #0
 800b95c:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d101      	bne.n	800b968 <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 800b964:	2301      	movs	r3, #1
 800b966:	e0ea      	b.n	800bb3e <HAL_TIM_RegisterCallback+0x1fa>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	223d      	movs	r2, #61	@ 0x3d
 800b96c:	5c9b      	ldrb	r3, [r3, r2]
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	2b01      	cmp	r3, #1
 800b972:	d000      	beq.n	800b976 <HAL_TIM_RegisterCallback+0x32>
 800b974:	e08e      	b.n	800ba94 <HAL_TIM_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800b976:	230b      	movs	r3, #11
 800b978:	18fb      	adds	r3, r7, r3
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	2b1b      	cmp	r3, #27
 800b97e:	d900      	bls.n	800b982 <HAL_TIM_RegisterCallback+0x3e>
 800b980:	e083      	b.n	800ba8a <HAL_TIM_RegisterCallback+0x146>
 800b982:	009a      	lsls	r2, r3, #2
 800b984:	4b70      	ldr	r3, [pc, #448]	@ (800bb48 <HAL_TIM_RegisterCallback+0x204>)
 800b986:	18d3      	adds	r3, r2, r3
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b992:	e0d1      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b99a:	e0cd      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b9a2:	e0c9      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b9aa:	e0c5      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b9b2:	e0c1      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b9ba:	e0bd      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b9c2:	e0b9      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b9ca:	e0b5      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b9d2:	e0b1      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b9da:	e0ad      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b9e2:	e0a9      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b9ea:	e0a5      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b9f2:	e0a1      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2180      	movs	r1, #128	@ 0x80
 800b9f8:	687a      	ldr	r2, [r7, #4]
 800b9fa:	505a      	str	r2, [r3, r1]
        break;
 800b9fc:	e09c      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2184      	movs	r1, #132	@ 0x84
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	505a      	str	r2, [r3, r1]
        break;
 800ba06:	e097      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2188      	movs	r1, #136	@ 0x88
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	505a      	str	r2, [r3, r1]
        break;
 800ba10:	e092      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	218c      	movs	r1, #140	@ 0x8c
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	505a      	str	r2, [r3, r1]
        break;
 800ba1a:	e08d      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2190      	movs	r1, #144	@ 0x90
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	505a      	str	r2, [r3, r1]
        break;
 800ba24:	e088      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2194      	movs	r1, #148	@ 0x94
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	505a      	str	r2, [r3, r1]
        break;
 800ba2e:	e083      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2198      	movs	r1, #152	@ 0x98
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	505a      	str	r2, [r3, r1]
        break;
 800ba38:	e07e      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	219c      	movs	r1, #156	@ 0x9c
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	505a      	str	r2, [r3, r1]
        break;
 800ba42:	e079      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	21a0      	movs	r1, #160	@ 0xa0
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	505a      	str	r2, [r3, r1]
        break;
 800ba4c:	e074      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	21a4      	movs	r1, #164	@ 0xa4
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	505a      	str	r2, [r3, r1]
        break;
 800ba56:	e06f      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	21a8      	movs	r1, #168	@ 0xa8
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	505a      	str	r2, [r3, r1]
        break;
 800ba60:	e06a      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	21ac      	movs	r1, #172	@ 0xac
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	505a      	str	r2, [r3, r1]
        break;
 800ba6a:	e065      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	21b0      	movs	r1, #176	@ 0xb0
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	505a      	str	r2, [r3, r1]
        break;
 800ba74:	e060      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	21b4      	movs	r1, #180	@ 0xb4
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	505a      	str	r2, [r3, r1]
        break;
 800ba7e:	e05b      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	21b8      	movs	r1, #184	@ 0xb8
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	505a      	str	r2, [r3, r1]
        break;
 800ba88:	e056      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800ba8a:	2317      	movs	r3, #23
 800ba8c:	18fb      	adds	r3, r7, r3
 800ba8e:	2201      	movs	r2, #1
 800ba90:	701a      	strb	r2, [r3, #0]
        break;
 800ba92:	e051      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	223d      	movs	r2, #61	@ 0x3d
 800ba98:	5c9b      	ldrb	r3, [r3, r2]
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d147      	bne.n	800bb30 <HAL_TIM_RegisterCallback+0x1ec>
  {
    switch (CallbackID)
 800baa0:	230b      	movs	r3, #11
 800baa2:	18fb      	adds	r3, r7, r3
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	2b0d      	cmp	r3, #13
 800baa8:	d83d      	bhi.n	800bb26 <HAL_TIM_RegisterCallback+0x1e2>
 800baaa:	009a      	lsls	r2, r3, #2
 800baac:	4b27      	ldr	r3, [pc, #156]	@ (800bb4c <HAL_TIM_RegisterCallback+0x208>)
 800baae:	18d3      	adds	r3, r2, r3
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800baba:	e03d      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800bac2:	e039      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800baca:	e035      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800bad2:	e031      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800bada:	e02d      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800bae2:	e029      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800baea:	e025      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800baf2:	e021      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800bafa:	e01d      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800bb02:	e019      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800bb0a:	e015      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800bb12:	e011      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800bb1a:	e00d      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2180      	movs	r1, #128	@ 0x80
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	505a      	str	r2, [r3, r1]
        break;
 800bb24:	e008      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800bb26:	2317      	movs	r3, #23
 800bb28:	18fb      	adds	r3, r7, r3
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	701a      	strb	r2, [r3, #0]
        break;
 800bb2e:	e003      	b.n	800bb38 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800bb30:	2317      	movs	r3, #23
 800bb32:	18fb      	adds	r3, r7, r3
 800bb34:	2201      	movs	r2, #1
 800bb36:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800bb38:	2317      	movs	r3, #23
 800bb3a:	18fb      	adds	r3, r7, r3
 800bb3c:	781b      	ldrb	r3, [r3, #0]
}
 800bb3e:	0018      	movs	r0, r3
 800bb40:	46bd      	mov	sp, r7
 800bb42:	b006      	add	sp, #24
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	46c0      	nop			@ (mov r8, r8)
 800bb48:	0800eae4 	.word	0x0800eae4
 800bb4c:	0800eb54 	.word	0x0800eb54

0800bb50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4a37      	ldr	r2, [pc, #220]	@ (800bc40 <TIM_Base_SetConfig+0xf0>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d008      	beq.n	800bb7a <TIM_Base_SetConfig+0x2a>
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	2380      	movs	r3, #128	@ 0x80
 800bb6c:	05db      	lsls	r3, r3, #23
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d003      	beq.n	800bb7a <TIM_Base_SetConfig+0x2a>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	4a33      	ldr	r2, [pc, #204]	@ (800bc44 <TIM_Base_SetConfig+0xf4>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d108      	bne.n	800bb8c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2270      	movs	r2, #112	@ 0x70
 800bb7e:	4393      	bics	r3, r2
 800bb80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	68fa      	ldr	r2, [r7, #12]
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	4a2c      	ldr	r2, [pc, #176]	@ (800bc40 <TIM_Base_SetConfig+0xf0>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d014      	beq.n	800bbbe <TIM_Base_SetConfig+0x6e>
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	2380      	movs	r3, #128	@ 0x80
 800bb98:	05db      	lsls	r3, r3, #23
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d00f      	beq.n	800bbbe <TIM_Base_SetConfig+0x6e>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4a28      	ldr	r2, [pc, #160]	@ (800bc44 <TIM_Base_SetConfig+0xf4>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d00b      	beq.n	800bbbe <TIM_Base_SetConfig+0x6e>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4a27      	ldr	r2, [pc, #156]	@ (800bc48 <TIM_Base_SetConfig+0xf8>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d007      	beq.n	800bbbe <TIM_Base_SetConfig+0x6e>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	4a26      	ldr	r2, [pc, #152]	@ (800bc4c <TIM_Base_SetConfig+0xfc>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d003      	beq.n	800bbbe <TIM_Base_SetConfig+0x6e>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	4a25      	ldr	r2, [pc, #148]	@ (800bc50 <TIM_Base_SetConfig+0x100>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d108      	bne.n	800bbd0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	4a24      	ldr	r2, [pc, #144]	@ (800bc54 <TIM_Base_SetConfig+0x104>)
 800bbc2:	4013      	ands	r3, r2
 800bbc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	68db      	ldr	r3, [r3, #12]
 800bbca:	68fa      	ldr	r2, [r7, #12]
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2280      	movs	r2, #128	@ 0x80
 800bbd4:	4393      	bics	r3, r2
 800bbd6:	001a      	movs	r2, r3
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	695b      	ldr	r3, [r3, #20]
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	68fa      	ldr	r2, [r7, #12]
 800bbe4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	689a      	ldr	r2, [r3, #8]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	4a11      	ldr	r2, [pc, #68]	@ (800bc40 <TIM_Base_SetConfig+0xf0>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d007      	beq.n	800bc0e <TIM_Base_SetConfig+0xbe>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	4a12      	ldr	r2, [pc, #72]	@ (800bc4c <TIM_Base_SetConfig+0xfc>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d003      	beq.n	800bc0e <TIM_Base_SetConfig+0xbe>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	4a11      	ldr	r2, [pc, #68]	@ (800bc50 <TIM_Base_SetConfig+0x100>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d103      	bne.n	800bc16 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	691a      	ldr	r2, [r3, #16]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2201      	movs	r2, #1
 800bc1a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	691b      	ldr	r3, [r3, #16]
 800bc20:	2201      	movs	r2, #1
 800bc22:	4013      	ands	r3, r2
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	d106      	bne.n	800bc36 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	4393      	bics	r3, r2
 800bc30:	001a      	movs	r2, r3
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	611a      	str	r2, [r3, #16]
  }
}
 800bc36:	46c0      	nop			@ (mov r8, r8)
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	b004      	add	sp, #16
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	46c0      	nop			@ (mov r8, r8)
 800bc40:	40012c00 	.word	0x40012c00
 800bc44:	40000400 	.word	0x40000400
 800bc48:	40002000 	.word	0x40002000
 800bc4c:	40014400 	.word	0x40014400
 800bc50:	40014800 	.word	0x40014800
 800bc54:	fffffcff 	.word	0xfffffcff

0800bc58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b086      	sub	sp, #24
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6a1b      	ldr	r3, [r3, #32]
 800bc66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6a1b      	ldr	r3, [r3, #32]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	4393      	bics	r3, r2
 800bc70:	001a      	movs	r2, r3
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	699b      	ldr	r3, [r3, #24]
 800bc80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	4a2e      	ldr	r2, [pc, #184]	@ (800bd40 <TIM_OC1_SetConfig+0xe8>)
 800bc86:	4013      	ands	r3, r2
 800bc88:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2203      	movs	r2, #3
 800bc8e:	4393      	bics	r3, r2
 800bc90:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	68fa      	ldr	r2, [r7, #12]
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	2202      	movs	r2, #2
 800bca0:	4393      	bics	r3, r2
 800bca2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	689b      	ldr	r3, [r3, #8]
 800bca8:	697a      	ldr	r2, [r7, #20]
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	4a24      	ldr	r2, [pc, #144]	@ (800bd44 <TIM_OC1_SetConfig+0xec>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d007      	beq.n	800bcc6 <TIM_OC1_SetConfig+0x6e>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	4a23      	ldr	r2, [pc, #140]	@ (800bd48 <TIM_OC1_SetConfig+0xf0>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d003      	beq.n	800bcc6 <TIM_OC1_SetConfig+0x6e>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4a22      	ldr	r2, [pc, #136]	@ (800bd4c <TIM_OC1_SetConfig+0xf4>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d10c      	bne.n	800bce0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	2208      	movs	r2, #8
 800bcca:	4393      	bics	r3, r2
 800bccc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	68db      	ldr	r3, [r3, #12]
 800bcd2:	697a      	ldr	r2, [r7, #20]
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	2204      	movs	r2, #4
 800bcdc:	4393      	bics	r3, r2
 800bcde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4a18      	ldr	r2, [pc, #96]	@ (800bd44 <TIM_OC1_SetConfig+0xec>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d007      	beq.n	800bcf8 <TIM_OC1_SetConfig+0xa0>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a17      	ldr	r2, [pc, #92]	@ (800bd48 <TIM_OC1_SetConfig+0xf0>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d003      	beq.n	800bcf8 <TIM_OC1_SetConfig+0xa0>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4a16      	ldr	r2, [pc, #88]	@ (800bd4c <TIM_OC1_SetConfig+0xf4>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d111      	bne.n	800bd1c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	4a15      	ldr	r2, [pc, #84]	@ (800bd50 <TIM_OC1_SetConfig+0xf8>)
 800bcfc:	4013      	ands	r3, r2
 800bcfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	4a14      	ldr	r2, [pc, #80]	@ (800bd54 <TIM_OC1_SetConfig+0xfc>)
 800bd04:	4013      	ands	r3, r2
 800bd06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	695b      	ldr	r3, [r3, #20]
 800bd0c:	693a      	ldr	r2, [r7, #16]
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	699b      	ldr	r3, [r3, #24]
 800bd16:	693a      	ldr	r2, [r7, #16]
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	693a      	ldr	r2, [r7, #16]
 800bd20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	68fa      	ldr	r2, [r7, #12]
 800bd26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	685a      	ldr	r2, [r3, #4]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	697a      	ldr	r2, [r7, #20]
 800bd34:	621a      	str	r2, [r3, #32]
}
 800bd36:	46c0      	nop			@ (mov r8, r8)
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	b006      	add	sp, #24
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	46c0      	nop			@ (mov r8, r8)
 800bd40:	fffeff8f 	.word	0xfffeff8f
 800bd44:	40012c00 	.word	0x40012c00
 800bd48:	40014400 	.word	0x40014400
 800bd4c:	40014800 	.word	0x40014800
 800bd50:	fffffeff 	.word	0xfffffeff
 800bd54:	fffffdff 	.word	0xfffffdff

0800bd58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b086      	sub	sp, #24
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6a1b      	ldr	r3, [r3, #32]
 800bd66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a1b      	ldr	r3, [r3, #32]
 800bd6c:	2210      	movs	r2, #16
 800bd6e:	4393      	bics	r3, r2
 800bd70:	001a      	movs	r2, r3
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	699b      	ldr	r3, [r3, #24]
 800bd80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	4a2c      	ldr	r2, [pc, #176]	@ (800be38 <TIM_OC2_SetConfig+0xe0>)
 800bd86:	4013      	ands	r3, r2
 800bd88:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	4a2b      	ldr	r2, [pc, #172]	@ (800be3c <TIM_OC2_SetConfig+0xe4>)
 800bd8e:	4013      	ands	r3, r2
 800bd90:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	021b      	lsls	r3, r3, #8
 800bd98:	68fa      	ldr	r2, [r7, #12]
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	2220      	movs	r2, #32
 800bda2:	4393      	bics	r3, r2
 800bda4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	011b      	lsls	r3, r3, #4
 800bdac:	697a      	ldr	r2, [r7, #20]
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	4a22      	ldr	r2, [pc, #136]	@ (800be40 <TIM_OC2_SetConfig+0xe8>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d10d      	bne.n	800bdd6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	2280      	movs	r2, #128	@ 0x80
 800bdbe:	4393      	bics	r3, r2
 800bdc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	68db      	ldr	r3, [r3, #12]
 800bdc6:	011b      	lsls	r3, r3, #4
 800bdc8:	697a      	ldr	r2, [r7, #20]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	2240      	movs	r2, #64	@ 0x40
 800bdd2:	4393      	bics	r3, r2
 800bdd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	4a19      	ldr	r2, [pc, #100]	@ (800be40 <TIM_OC2_SetConfig+0xe8>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d007      	beq.n	800bdee <TIM_OC2_SetConfig+0x96>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	4a18      	ldr	r2, [pc, #96]	@ (800be44 <TIM_OC2_SetConfig+0xec>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d003      	beq.n	800bdee <TIM_OC2_SetConfig+0x96>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4a17      	ldr	r2, [pc, #92]	@ (800be48 <TIM_OC2_SetConfig+0xf0>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d113      	bne.n	800be16 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	4a16      	ldr	r2, [pc, #88]	@ (800be4c <TIM_OC2_SetConfig+0xf4>)
 800bdf2:	4013      	ands	r3, r2
 800bdf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	4a15      	ldr	r2, [pc, #84]	@ (800be50 <TIM_OC2_SetConfig+0xf8>)
 800bdfa:	4013      	ands	r3, r2
 800bdfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	695b      	ldr	r3, [r3, #20]
 800be02:	009b      	lsls	r3, r3, #2
 800be04:	693a      	ldr	r2, [r7, #16]
 800be06:	4313      	orrs	r3, r2
 800be08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	699b      	ldr	r3, [r3, #24]
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	693a      	ldr	r2, [r7, #16]
 800be12:	4313      	orrs	r3, r2
 800be14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	693a      	ldr	r2, [r7, #16]
 800be1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	685a      	ldr	r2, [r3, #4]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	697a      	ldr	r2, [r7, #20]
 800be2e:	621a      	str	r2, [r3, #32]
}
 800be30:	46c0      	nop			@ (mov r8, r8)
 800be32:	46bd      	mov	sp, r7
 800be34:	b006      	add	sp, #24
 800be36:	bd80      	pop	{r7, pc}
 800be38:	feff8fff 	.word	0xfeff8fff
 800be3c:	fffffcff 	.word	0xfffffcff
 800be40:	40012c00 	.word	0x40012c00
 800be44:	40014400 	.word	0x40014400
 800be48:	40014800 	.word	0x40014800
 800be4c:	fffffbff 	.word	0xfffffbff
 800be50:	fffff7ff 	.word	0xfffff7ff

0800be54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b086      	sub	sp, #24
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6a1b      	ldr	r3, [r3, #32]
 800be62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6a1b      	ldr	r3, [r3, #32]
 800be68:	4a31      	ldr	r2, [pc, #196]	@ (800bf30 <TIM_OC3_SetConfig+0xdc>)
 800be6a:	401a      	ands	r2, r3
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	69db      	ldr	r3, [r3, #28]
 800be7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	4a2d      	ldr	r2, [pc, #180]	@ (800bf34 <TIM_OC3_SetConfig+0xe0>)
 800be80:	4013      	ands	r3, r2
 800be82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2203      	movs	r2, #3
 800be88:	4393      	bics	r3, r2
 800be8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	68fa      	ldr	r2, [r7, #12]
 800be92:	4313      	orrs	r3, r2
 800be94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	4a27      	ldr	r2, [pc, #156]	@ (800bf38 <TIM_OC3_SetConfig+0xe4>)
 800be9a:	4013      	ands	r3, r2
 800be9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	689b      	ldr	r3, [r3, #8]
 800bea2:	021b      	lsls	r3, r3, #8
 800bea4:	697a      	ldr	r2, [r7, #20]
 800bea6:	4313      	orrs	r3, r2
 800bea8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4a23      	ldr	r2, [pc, #140]	@ (800bf3c <TIM_OC3_SetConfig+0xe8>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d10d      	bne.n	800bece <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	4a22      	ldr	r2, [pc, #136]	@ (800bf40 <TIM_OC3_SetConfig+0xec>)
 800beb6:	4013      	ands	r3, r2
 800beb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	021b      	lsls	r3, r3, #8
 800bec0:	697a      	ldr	r2, [r7, #20]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	4a1e      	ldr	r2, [pc, #120]	@ (800bf44 <TIM_OC3_SetConfig+0xf0>)
 800beca:	4013      	ands	r3, r2
 800becc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4a1a      	ldr	r2, [pc, #104]	@ (800bf3c <TIM_OC3_SetConfig+0xe8>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d007      	beq.n	800bee6 <TIM_OC3_SetConfig+0x92>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	4a1b      	ldr	r2, [pc, #108]	@ (800bf48 <TIM_OC3_SetConfig+0xf4>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d003      	beq.n	800bee6 <TIM_OC3_SetConfig+0x92>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	4a1a      	ldr	r2, [pc, #104]	@ (800bf4c <TIM_OC3_SetConfig+0xf8>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d113      	bne.n	800bf0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	4a19      	ldr	r2, [pc, #100]	@ (800bf50 <TIM_OC3_SetConfig+0xfc>)
 800beea:	4013      	ands	r3, r2
 800beec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	4a18      	ldr	r2, [pc, #96]	@ (800bf54 <TIM_OC3_SetConfig+0x100>)
 800bef2:	4013      	ands	r3, r2
 800bef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	695b      	ldr	r3, [r3, #20]
 800befa:	011b      	lsls	r3, r3, #4
 800befc:	693a      	ldr	r2, [r7, #16]
 800befe:	4313      	orrs	r3, r2
 800bf00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	699b      	ldr	r3, [r3, #24]
 800bf06:	011b      	lsls	r3, r3, #4
 800bf08:	693a      	ldr	r2, [r7, #16]
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	693a      	ldr	r2, [r7, #16]
 800bf12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	68fa      	ldr	r2, [r7, #12]
 800bf18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	685a      	ldr	r2, [r3, #4]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	697a      	ldr	r2, [r7, #20]
 800bf26:	621a      	str	r2, [r3, #32]
}
 800bf28:	46c0      	nop			@ (mov r8, r8)
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	b006      	add	sp, #24
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	fffffeff 	.word	0xfffffeff
 800bf34:	fffeff8f 	.word	0xfffeff8f
 800bf38:	fffffdff 	.word	0xfffffdff
 800bf3c:	40012c00 	.word	0x40012c00
 800bf40:	fffff7ff 	.word	0xfffff7ff
 800bf44:	fffffbff 	.word	0xfffffbff
 800bf48:	40014400 	.word	0x40014400
 800bf4c:	40014800 	.word	0x40014800
 800bf50:	ffffefff 	.word	0xffffefff
 800bf54:	ffffdfff 	.word	0xffffdfff

0800bf58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b086      	sub	sp, #24
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6a1b      	ldr	r3, [r3, #32]
 800bf66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6a1b      	ldr	r3, [r3, #32]
 800bf6c:	4a24      	ldr	r2, [pc, #144]	@ (800c000 <TIM_OC4_SetConfig+0xa8>)
 800bf6e:	401a      	ands	r2, r3
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	69db      	ldr	r3, [r3, #28]
 800bf7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	4a20      	ldr	r2, [pc, #128]	@ (800c004 <TIM_OC4_SetConfig+0xac>)
 800bf84:	4013      	ands	r3, r2
 800bf86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	4a1f      	ldr	r2, [pc, #124]	@ (800c008 <TIM_OC4_SetConfig+0xb0>)
 800bf8c:	4013      	ands	r3, r2
 800bf8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	021b      	lsls	r3, r3, #8
 800bf96:	68fa      	ldr	r2, [r7, #12]
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	4a1b      	ldr	r2, [pc, #108]	@ (800c00c <TIM_OC4_SetConfig+0xb4>)
 800bfa0:	4013      	ands	r3, r2
 800bfa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	031b      	lsls	r3, r3, #12
 800bfaa:	693a      	ldr	r2, [r7, #16]
 800bfac:	4313      	orrs	r3, r2
 800bfae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	4a17      	ldr	r2, [pc, #92]	@ (800c010 <TIM_OC4_SetConfig+0xb8>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d007      	beq.n	800bfc8 <TIM_OC4_SetConfig+0x70>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	4a16      	ldr	r2, [pc, #88]	@ (800c014 <TIM_OC4_SetConfig+0xbc>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d003      	beq.n	800bfc8 <TIM_OC4_SetConfig+0x70>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	4a15      	ldr	r2, [pc, #84]	@ (800c018 <TIM_OC4_SetConfig+0xc0>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d109      	bne.n	800bfdc <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	4a14      	ldr	r2, [pc, #80]	@ (800c01c <TIM_OC4_SetConfig+0xc4>)
 800bfcc:	4013      	ands	r3, r2
 800bfce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	695b      	ldr	r3, [r3, #20]
 800bfd4:	019b      	lsls	r3, r3, #6
 800bfd6:	697a      	ldr	r2, [r7, #20]
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	697a      	ldr	r2, [r7, #20]
 800bfe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	68fa      	ldr	r2, [r7, #12]
 800bfe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	685a      	ldr	r2, [r3, #4]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	693a      	ldr	r2, [r7, #16]
 800bff4:	621a      	str	r2, [r3, #32]
}
 800bff6:	46c0      	nop			@ (mov r8, r8)
 800bff8:	46bd      	mov	sp, r7
 800bffa:	b006      	add	sp, #24
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	46c0      	nop			@ (mov r8, r8)
 800c000:	ffffefff 	.word	0xffffefff
 800c004:	feff8fff 	.word	0xfeff8fff
 800c008:	fffffcff 	.word	0xfffffcff
 800c00c:	ffffdfff 	.word	0xffffdfff
 800c010:	40012c00 	.word	0x40012c00
 800c014:	40014400 	.word	0x40014400
 800c018:	40014800 	.word	0x40014800
 800c01c:	ffffbfff 	.word	0xffffbfff

0800c020 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b086      	sub	sp, #24
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6a1b      	ldr	r3, [r3, #32]
 800c02e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a1b      	ldr	r3, [r3, #32]
 800c034:	4a21      	ldr	r2, [pc, #132]	@ (800c0bc <TIM_OC5_SetConfig+0x9c>)
 800c036:	401a      	ands	r2, r3
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	4a1d      	ldr	r2, [pc, #116]	@ (800c0c0 <TIM_OC5_SetConfig+0xa0>)
 800c04c:	4013      	ands	r3, r2
 800c04e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	68fa      	ldr	r2, [r7, #12]
 800c056:	4313      	orrs	r3, r2
 800c058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	4a19      	ldr	r2, [pc, #100]	@ (800c0c4 <TIM_OC5_SetConfig+0xa4>)
 800c05e:	4013      	ands	r3, r2
 800c060:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	689b      	ldr	r3, [r3, #8]
 800c066:	041b      	lsls	r3, r3, #16
 800c068:	693a      	ldr	r2, [r7, #16]
 800c06a:	4313      	orrs	r3, r2
 800c06c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	4a15      	ldr	r2, [pc, #84]	@ (800c0c8 <TIM_OC5_SetConfig+0xa8>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d007      	beq.n	800c086 <TIM_OC5_SetConfig+0x66>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	4a14      	ldr	r2, [pc, #80]	@ (800c0cc <TIM_OC5_SetConfig+0xac>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d003      	beq.n	800c086 <TIM_OC5_SetConfig+0x66>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4a13      	ldr	r2, [pc, #76]	@ (800c0d0 <TIM_OC5_SetConfig+0xb0>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d109      	bne.n	800c09a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	4a0c      	ldr	r2, [pc, #48]	@ (800c0bc <TIM_OC5_SetConfig+0x9c>)
 800c08a:	4013      	ands	r3, r2
 800c08c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	695b      	ldr	r3, [r3, #20]
 800c092:	021b      	lsls	r3, r3, #8
 800c094:	697a      	ldr	r2, [r7, #20]
 800c096:	4313      	orrs	r3, r2
 800c098:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	697a      	ldr	r2, [r7, #20]
 800c09e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	68fa      	ldr	r2, [r7, #12]
 800c0a4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	685a      	ldr	r2, [r3, #4]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	693a      	ldr	r2, [r7, #16]
 800c0b2:	621a      	str	r2, [r3, #32]
}
 800c0b4:	46c0      	nop			@ (mov r8, r8)
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	b006      	add	sp, #24
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	fffeffff 	.word	0xfffeffff
 800c0c0:	fffeff8f 	.word	0xfffeff8f
 800c0c4:	fffdffff 	.word	0xfffdffff
 800c0c8:	40012c00 	.word	0x40012c00
 800c0cc:	40014400 	.word	0x40014400
 800c0d0:	40014800 	.word	0x40014800

0800c0d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b086      	sub	sp, #24
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6a1b      	ldr	r3, [r3, #32]
 800c0e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6a1b      	ldr	r3, [r3, #32]
 800c0e8:	4a22      	ldr	r2, [pc, #136]	@ (800c174 <TIM_OC6_SetConfig+0xa0>)
 800c0ea:	401a      	ands	r2, r3
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	4a1e      	ldr	r2, [pc, #120]	@ (800c178 <TIM_OC6_SetConfig+0xa4>)
 800c100:	4013      	ands	r3, r2
 800c102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	021b      	lsls	r3, r3, #8
 800c10a:	68fa      	ldr	r2, [r7, #12]
 800c10c:	4313      	orrs	r3, r2
 800c10e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	4a1a      	ldr	r2, [pc, #104]	@ (800c17c <TIM_OC6_SetConfig+0xa8>)
 800c114:	4013      	ands	r3, r2
 800c116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	051b      	lsls	r3, r3, #20
 800c11e:	693a      	ldr	r2, [r7, #16]
 800c120:	4313      	orrs	r3, r2
 800c122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	4a16      	ldr	r2, [pc, #88]	@ (800c180 <TIM_OC6_SetConfig+0xac>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d007      	beq.n	800c13c <TIM_OC6_SetConfig+0x68>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	4a15      	ldr	r2, [pc, #84]	@ (800c184 <TIM_OC6_SetConfig+0xb0>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d003      	beq.n	800c13c <TIM_OC6_SetConfig+0x68>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	4a14      	ldr	r2, [pc, #80]	@ (800c188 <TIM_OC6_SetConfig+0xb4>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d109      	bne.n	800c150 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	4a13      	ldr	r2, [pc, #76]	@ (800c18c <TIM_OC6_SetConfig+0xb8>)
 800c140:	4013      	ands	r3, r2
 800c142:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	695b      	ldr	r3, [r3, #20]
 800c148:	029b      	lsls	r3, r3, #10
 800c14a:	697a      	ldr	r2, [r7, #20]
 800c14c:	4313      	orrs	r3, r2
 800c14e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	697a      	ldr	r2, [r7, #20]
 800c154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	68fa      	ldr	r2, [r7, #12]
 800c15a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	685a      	ldr	r2, [r3, #4]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	693a      	ldr	r2, [r7, #16]
 800c168:	621a      	str	r2, [r3, #32]
}
 800c16a:	46c0      	nop			@ (mov r8, r8)
 800c16c:	46bd      	mov	sp, r7
 800c16e:	b006      	add	sp, #24
 800c170:	bd80      	pop	{r7, pc}
 800c172:	46c0      	nop			@ (mov r8, r8)
 800c174:	ffefffff 	.word	0xffefffff
 800c178:	feff8fff 	.word	0xfeff8fff
 800c17c:	ffdfffff 	.word	0xffdfffff
 800c180:	40012c00 	.word	0x40012c00
 800c184:	40014400 	.word	0x40014400
 800c188:	40014800 	.word	0x40014800
 800c18c:	fffbffff 	.word	0xfffbffff

0800c190 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b086      	sub	sp, #24
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	607a      	str	r2, [r7, #4]
 800c19c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6a1b      	ldr	r3, [r3, #32]
 800c1a2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6a1b      	ldr	r3, [r3, #32]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	4393      	bics	r3, r2
 800c1ac:	001a      	movs	r2, r3
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	699b      	ldr	r3, [r3, #24]
 800c1b6:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	4a1e      	ldr	r2, [pc, #120]	@ (800c234 <TIM_TI1_SetConfig+0xa4>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d008      	beq.n	800c1d2 <TIM_TI1_SetConfig+0x42>
 800c1c0:	68fa      	ldr	r2, [r7, #12]
 800c1c2:	2380      	movs	r3, #128	@ 0x80
 800c1c4:	05db      	lsls	r3, r3, #23
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d003      	beq.n	800c1d2 <TIM_TI1_SetConfig+0x42>
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	4a1a      	ldr	r2, [pc, #104]	@ (800c238 <TIM_TI1_SetConfig+0xa8>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d101      	bne.n	800c1d6 <TIM_TI1_SetConfig+0x46>
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e000      	b.n	800c1d8 <TIM_TI1_SetConfig+0x48>
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d008      	beq.n	800c1ee <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	2203      	movs	r2, #3
 800c1e0:	4393      	bics	r3, r2
 800c1e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c1e4:	697a      	ldr	r2, [r7, #20]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	617b      	str	r3, [r7, #20]
 800c1ec:	e003      	b.n	800c1f6 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	22f0      	movs	r2, #240	@ 0xf0
 800c1fa:	4393      	bics	r3, r2
 800c1fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	011b      	lsls	r3, r3, #4
 800c202:	22ff      	movs	r2, #255	@ 0xff
 800c204:	4013      	ands	r3, r2
 800c206:	697a      	ldr	r2, [r7, #20]
 800c208:	4313      	orrs	r3, r2
 800c20a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	220a      	movs	r2, #10
 800c210:	4393      	bics	r3, r2
 800c212:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	220a      	movs	r2, #10
 800c218:	4013      	ands	r3, r2
 800c21a:	693a      	ldr	r2, [r7, #16]
 800c21c:	4313      	orrs	r3, r2
 800c21e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	697a      	ldr	r2, [r7, #20]
 800c224:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	693a      	ldr	r2, [r7, #16]
 800c22a:	621a      	str	r2, [r3, #32]
}
 800c22c:	46c0      	nop			@ (mov r8, r8)
 800c22e:	46bd      	mov	sp, r7
 800c230:	b006      	add	sp, #24
 800c232:	bd80      	pop	{r7, pc}
 800c234:	40012c00 	.word	0x40012c00
 800c238:	40000400 	.word	0x40000400

0800c23c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b086      	sub	sp, #24
 800c240:	af00      	add	r7, sp, #0
 800c242:	60f8      	str	r0, [r7, #12]
 800c244:	60b9      	str	r1, [r7, #8]
 800c246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	6a1b      	ldr	r3, [r3, #32]
 800c24c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	6a1b      	ldr	r3, [r3, #32]
 800c252:	2201      	movs	r2, #1
 800c254:	4393      	bics	r3, r2
 800c256:	001a      	movs	r2, r3
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	699b      	ldr	r3, [r3, #24]
 800c260:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	22f0      	movs	r2, #240	@ 0xf0
 800c266:	4393      	bics	r3, r2
 800c268:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	011b      	lsls	r3, r3, #4
 800c26e:	693a      	ldr	r2, [r7, #16]
 800c270:	4313      	orrs	r3, r2
 800c272:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	220a      	movs	r2, #10
 800c278:	4393      	bics	r3, r2
 800c27a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c27c:	697a      	ldr	r2, [r7, #20]
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	4313      	orrs	r3, r2
 800c282:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	693a      	ldr	r2, [r7, #16]
 800c288:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	697a      	ldr	r2, [r7, #20]
 800c28e:	621a      	str	r2, [r3, #32]
}
 800c290:	46c0      	nop			@ (mov r8, r8)
 800c292:	46bd      	mov	sp, r7
 800c294:	b006      	add	sp, #24
 800c296:	bd80      	pop	{r7, pc}

0800c298 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b086      	sub	sp, #24
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	607a      	str	r2, [r7, #4]
 800c2a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	6a1b      	ldr	r3, [r3, #32]
 800c2aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	6a1b      	ldr	r3, [r3, #32]
 800c2b0:	2210      	movs	r2, #16
 800c2b2:	4393      	bics	r3, r2
 800c2b4:	001a      	movs	r2, r3
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	699b      	ldr	r3, [r3, #24]
 800c2be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	4a14      	ldr	r2, [pc, #80]	@ (800c314 <TIM_TI2_SetConfig+0x7c>)
 800c2c4:	4013      	ands	r3, r2
 800c2c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	021b      	lsls	r3, r3, #8
 800c2cc:	693a      	ldr	r2, [r7, #16]
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	4a10      	ldr	r2, [pc, #64]	@ (800c318 <TIM_TI2_SetConfig+0x80>)
 800c2d6:	4013      	ands	r3, r2
 800c2d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	031b      	lsls	r3, r3, #12
 800c2de:	041b      	lsls	r3, r3, #16
 800c2e0:	0c1b      	lsrs	r3, r3, #16
 800c2e2:	693a      	ldr	r2, [r7, #16]
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	22a0      	movs	r2, #160	@ 0xa0
 800c2ec:	4393      	bics	r3, r2
 800c2ee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	011b      	lsls	r3, r3, #4
 800c2f4:	22a0      	movs	r2, #160	@ 0xa0
 800c2f6:	4013      	ands	r3, r2
 800c2f8:	697a      	ldr	r2, [r7, #20]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	693a      	ldr	r2, [r7, #16]
 800c302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	697a      	ldr	r2, [r7, #20]
 800c308:	621a      	str	r2, [r3, #32]
}
 800c30a:	46c0      	nop			@ (mov r8, r8)
 800c30c:	46bd      	mov	sp, r7
 800c30e:	b006      	add	sp, #24
 800c310:	bd80      	pop	{r7, pc}
 800c312:	46c0      	nop			@ (mov r8, r8)
 800c314:	fffffcff 	.word	0xfffffcff
 800c318:	ffff0fff 	.word	0xffff0fff

0800c31c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b086      	sub	sp, #24
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	6a1b      	ldr	r3, [r3, #32]
 800c32c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6a1b      	ldr	r3, [r3, #32]
 800c332:	2210      	movs	r2, #16
 800c334:	4393      	bics	r3, r2
 800c336:	001a      	movs	r2, r3
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	699b      	ldr	r3, [r3, #24]
 800c340:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	4a0d      	ldr	r2, [pc, #52]	@ (800c37c <TIM_TI2_ConfigInputStage+0x60>)
 800c346:	4013      	ands	r3, r2
 800c348:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	031b      	lsls	r3, r3, #12
 800c34e:	693a      	ldr	r2, [r7, #16]
 800c350:	4313      	orrs	r3, r2
 800c352:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	22a0      	movs	r2, #160	@ 0xa0
 800c358:	4393      	bics	r3, r2
 800c35a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	011b      	lsls	r3, r3, #4
 800c360:	697a      	ldr	r2, [r7, #20]
 800c362:	4313      	orrs	r3, r2
 800c364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	693a      	ldr	r2, [r7, #16]
 800c36a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	697a      	ldr	r2, [r7, #20]
 800c370:	621a      	str	r2, [r3, #32]
}
 800c372:	46c0      	nop			@ (mov r8, r8)
 800c374:	46bd      	mov	sp, r7
 800c376:	b006      	add	sp, #24
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	46c0      	nop			@ (mov r8, r8)
 800c37c:	ffff0fff 	.word	0xffff0fff

0800c380 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b086      	sub	sp, #24
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
 800c38c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6a1b      	ldr	r3, [r3, #32]
 800c392:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	6a1b      	ldr	r3, [r3, #32]
 800c398:	4a17      	ldr	r2, [pc, #92]	@ (800c3f8 <TIM_TI3_SetConfig+0x78>)
 800c39a:	401a      	ands	r2, r3
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	69db      	ldr	r3, [r3, #28]
 800c3a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	2203      	movs	r2, #3
 800c3aa:	4393      	bics	r3, r2
 800c3ac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800c3ae:	693a      	ldr	r2, [r7, #16]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	22f0      	movs	r2, #240	@ 0xf0
 800c3ba:	4393      	bics	r3, r2
 800c3bc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	011b      	lsls	r3, r3, #4
 800c3c2:	22ff      	movs	r2, #255	@ 0xff
 800c3c4:	4013      	ands	r3, r2
 800c3c6:	693a      	ldr	r2, [r7, #16]
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	4a0b      	ldr	r2, [pc, #44]	@ (800c3fc <TIM_TI3_SetConfig+0x7c>)
 800c3d0:	4013      	ands	r3, r2
 800c3d2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	021a      	lsls	r2, r3, #8
 800c3d8:	23a0      	movs	r3, #160	@ 0xa0
 800c3da:	011b      	lsls	r3, r3, #4
 800c3dc:	4013      	ands	r3, r2
 800c3de:	697a      	ldr	r2, [r7, #20]
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	693a      	ldr	r2, [r7, #16]
 800c3e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	697a      	ldr	r2, [r7, #20]
 800c3ee:	621a      	str	r2, [r3, #32]
}
 800c3f0:	46c0      	nop			@ (mov r8, r8)
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	b006      	add	sp, #24
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	fffffeff 	.word	0xfffffeff
 800c3fc:	fffff5ff 	.word	0xfffff5ff

0800c400 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b086      	sub	sp, #24
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	607a      	str	r2, [r7, #4]
 800c40c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	6a1b      	ldr	r3, [r3, #32]
 800c412:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6a1b      	ldr	r3, [r3, #32]
 800c418:	4a18      	ldr	r2, [pc, #96]	@ (800c47c <TIM_TI4_SetConfig+0x7c>)
 800c41a:	401a      	ands	r2, r3
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	69db      	ldr	r3, [r3, #28]
 800c424:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	4a15      	ldr	r2, [pc, #84]	@ (800c480 <TIM_TI4_SetConfig+0x80>)
 800c42a:	4013      	ands	r3, r2
 800c42c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	021b      	lsls	r3, r3, #8
 800c432:	693a      	ldr	r2, [r7, #16]
 800c434:	4313      	orrs	r3, r2
 800c436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	4a12      	ldr	r2, [pc, #72]	@ (800c484 <TIM_TI4_SetConfig+0x84>)
 800c43c:	4013      	ands	r3, r2
 800c43e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	031b      	lsls	r3, r3, #12
 800c444:	041b      	lsls	r3, r3, #16
 800c446:	0c1b      	lsrs	r3, r3, #16
 800c448:	693a      	ldr	r2, [r7, #16]
 800c44a:	4313      	orrs	r3, r2
 800c44c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	4a0d      	ldr	r2, [pc, #52]	@ (800c488 <TIM_TI4_SetConfig+0x88>)
 800c452:	4013      	ands	r3, r2
 800c454:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	031a      	lsls	r2, r3, #12
 800c45a:	23a0      	movs	r3, #160	@ 0xa0
 800c45c:	021b      	lsls	r3, r3, #8
 800c45e:	4013      	ands	r3, r2
 800c460:	697a      	ldr	r2, [r7, #20]
 800c462:	4313      	orrs	r3, r2
 800c464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	693a      	ldr	r2, [r7, #16]
 800c46a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	697a      	ldr	r2, [r7, #20]
 800c470:	621a      	str	r2, [r3, #32]
}
 800c472:	46c0      	nop			@ (mov r8, r8)
 800c474:	46bd      	mov	sp, r7
 800c476:	b006      	add	sp, #24
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	46c0      	nop			@ (mov r8, r8)
 800c47c:	ffffefff 	.word	0xffffefff
 800c480:	fffffcff 	.word	0xfffffcff
 800c484:	ffff0fff 	.word	0xffff0fff
 800c488:	ffff5fff 	.word	0xffff5fff

0800c48c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	689b      	ldr	r3, [r3, #8]
 800c49a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	4a08      	ldr	r2, [pc, #32]	@ (800c4c0 <TIM_ITRx_SetConfig+0x34>)
 800c4a0:	4013      	ands	r3, r2
 800c4a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c4a4:	683a      	ldr	r2, [r7, #0]
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	2207      	movs	r2, #7
 800c4ac:	4313      	orrs	r3, r2
 800c4ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	68fa      	ldr	r2, [r7, #12]
 800c4b4:	609a      	str	r2, [r3, #8]
}
 800c4b6:	46c0      	nop			@ (mov r8, r8)
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	b004      	add	sp, #16
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	46c0      	nop			@ (mov r8, r8)
 800c4c0:	ffcfff8f 	.word	0xffcfff8f

0800c4c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b086      	sub	sp, #24
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	60b9      	str	r1, [r7, #8]
 800c4ce:	607a      	str	r2, [r7, #4]
 800c4d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	689b      	ldr	r3, [r3, #8]
 800c4d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	4a09      	ldr	r2, [pc, #36]	@ (800c500 <TIM_ETR_SetConfig+0x3c>)
 800c4dc:	4013      	ands	r3, r2
 800c4de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	021a      	lsls	r2, r3, #8
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	431a      	orrs	r2, r3
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	697a      	ldr	r2, [r7, #20]
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	697a      	ldr	r2, [r7, #20]
 800c4f6:	609a      	str	r2, [r3, #8]
}
 800c4f8:	46c0      	nop			@ (mov r8, r8)
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	b006      	add	sp, #24
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	ffff00ff 	.word	0xffff00ff

0800c504 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b086      	sub	sp, #24
 800c508:	af00      	add	r7, sp, #0
 800c50a:	60f8      	str	r0, [r7, #12]
 800c50c:	60b9      	str	r1, [r7, #8]
 800c50e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	221f      	movs	r2, #31
 800c514:	4013      	ands	r3, r2
 800c516:	2201      	movs	r2, #1
 800c518:	409a      	lsls	r2, r3
 800c51a:	0013      	movs	r3, r2
 800c51c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	6a1b      	ldr	r3, [r3, #32]
 800c522:	697a      	ldr	r2, [r7, #20]
 800c524:	43d2      	mvns	r2, r2
 800c526:	401a      	ands	r2, r3
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	6a1a      	ldr	r2, [r3, #32]
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	211f      	movs	r1, #31
 800c534:	400b      	ands	r3, r1
 800c536:	6879      	ldr	r1, [r7, #4]
 800c538:	4099      	lsls	r1, r3
 800c53a:	000b      	movs	r3, r1
 800c53c:	431a      	orrs	r2, r3
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	621a      	str	r2, [r3, #32]
}
 800c542:	46c0      	nop			@ (mov r8, r8)
 800c544:	46bd      	mov	sp, r7
 800c546:	b006      	add	sp, #24
 800c548:	bd80      	pop	{r7, pc}
	...

0800c54c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2184      	movs	r1, #132	@ 0x84
 800c558:	4a1c      	ldr	r2, [pc, #112]	@ (800c5cc <TIM_ResetCallback+0x80>)
 800c55a:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2188      	movs	r1, #136	@ 0x88
 800c560:	4a1b      	ldr	r2, [pc, #108]	@ (800c5d0 <TIM_ResetCallback+0x84>)
 800c562:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	218c      	movs	r1, #140	@ 0x8c
 800c568:	4a1a      	ldr	r2, [pc, #104]	@ (800c5d4 <TIM_ResetCallback+0x88>)
 800c56a:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2190      	movs	r1, #144	@ 0x90
 800c570:	4a19      	ldr	r2, [pc, #100]	@ (800c5d8 <TIM_ResetCallback+0x8c>)
 800c572:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2194      	movs	r1, #148	@ 0x94
 800c578:	4a18      	ldr	r2, [pc, #96]	@ (800c5dc <TIM_ResetCallback+0x90>)
 800c57a:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2198      	movs	r1, #152	@ 0x98
 800c580:	4a17      	ldr	r2, [pc, #92]	@ (800c5e0 <TIM_ResetCallback+0x94>)
 800c582:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	219c      	movs	r1, #156	@ 0x9c
 800c588:	4a16      	ldr	r2, [pc, #88]	@ (800c5e4 <TIM_ResetCallback+0x98>)
 800c58a:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	21a0      	movs	r1, #160	@ 0xa0
 800c590:	4a15      	ldr	r2, [pc, #84]	@ (800c5e8 <TIM_ResetCallback+0x9c>)
 800c592:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	21a4      	movs	r1, #164	@ 0xa4
 800c598:	4a14      	ldr	r2, [pc, #80]	@ (800c5ec <TIM_ResetCallback+0xa0>)
 800c59a:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	21a8      	movs	r1, #168	@ 0xa8
 800c5a0:	4a13      	ldr	r2, [pc, #76]	@ (800c5f0 <TIM_ResetCallback+0xa4>)
 800c5a2:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	21ac      	movs	r1, #172	@ 0xac
 800c5a8:	4a12      	ldr	r2, [pc, #72]	@ (800c5f4 <TIM_ResetCallback+0xa8>)
 800c5aa:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	21b0      	movs	r1, #176	@ 0xb0
 800c5b0:	4a11      	ldr	r2, [pc, #68]	@ (800c5f8 <TIM_ResetCallback+0xac>)
 800c5b2:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	21b4      	movs	r1, #180	@ 0xb4
 800c5b8:	4a10      	ldr	r2, [pc, #64]	@ (800c5fc <TIM_ResetCallback+0xb0>)
 800c5ba:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	21b8      	movs	r1, #184	@ 0xb8
 800c5c0:	4a0f      	ldr	r2, [pc, #60]	@ (800c600 <TIM_ResetCallback+0xb4>)
 800c5c2:	505a      	str	r2, [r3, r1]
}
 800c5c4:	46c0      	nop			@ (mov r8, r8)
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	b002      	add	sp, #8
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	0800b8a5 	.word	0x0800b8a5
 800c5d0:	0800b8b5 	.word	0x0800b8b5
 800c5d4:	0800b915 	.word	0x0800b915
 800c5d8:	0800b925 	.word	0x0800b925
 800c5dc:	0800b8d5 	.word	0x0800b8d5
 800c5e0:	0800b8e5 	.word	0x0800b8e5
 800c5e4:	0800b8c5 	.word	0x0800b8c5
 800c5e8:	0800b8f5 	.word	0x0800b8f5
 800c5ec:	0800b905 	.word	0x0800b905
 800c5f0:	0800b935 	.word	0x0800b935
 800c5f4:	0800c80d 	.word	0x0800c80d
 800c5f8:	0800c81d 	.word	0x0800c81d
 800c5fc:	0800c82d 	.word	0x0800c82d
 800c600:	0800c83d 	.word	0x0800c83d

0800c604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	223c      	movs	r2, #60	@ 0x3c
 800c612:	5c9b      	ldrb	r3, [r3, r2]
 800c614:	2b01      	cmp	r3, #1
 800c616:	d101      	bne.n	800c61c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c618:	2302      	movs	r3, #2
 800c61a:	e050      	b.n	800c6be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	223c      	movs	r2, #60	@ 0x3c
 800c620:	2101      	movs	r1, #1
 800c622:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	223d      	movs	r2, #61	@ 0x3d
 800c628:	2102      	movs	r1, #2
 800c62a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4a21      	ldr	r2, [pc, #132]	@ (800c6c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d108      	bne.n	800c658 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	4a20      	ldr	r2, [pc, #128]	@ (800c6cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c64a:	4013      	ands	r3, r2
 800c64c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	68fa      	ldr	r2, [r7, #12]
 800c654:	4313      	orrs	r3, r2
 800c656:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2270      	movs	r2, #112	@ 0x70
 800c65c:	4393      	bics	r3, r2
 800c65e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	68fa      	ldr	r2, [r7, #12]
 800c666:	4313      	orrs	r3, r2
 800c668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	68fa      	ldr	r2, [r7, #12]
 800c670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	4a14      	ldr	r2, [pc, #80]	@ (800c6c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d00a      	beq.n	800c692 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	2380      	movs	r3, #128	@ 0x80
 800c682:	05db      	lsls	r3, r3, #23
 800c684:	429a      	cmp	r2, r3
 800c686:	d004      	beq.n	800c692 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a10      	ldr	r2, [pc, #64]	@ (800c6d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d10c      	bne.n	800c6ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	2280      	movs	r2, #128	@ 0x80
 800c696:	4393      	bics	r3, r2
 800c698:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	68ba      	ldr	r2, [r7, #8]
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	68ba      	ldr	r2, [r7, #8]
 800c6aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	223d      	movs	r2, #61	@ 0x3d
 800c6b0:	2101      	movs	r1, #1
 800c6b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	223c      	movs	r2, #60	@ 0x3c
 800c6b8:	2100      	movs	r1, #0
 800c6ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c6bc:	2300      	movs	r3, #0
}
 800c6be:	0018      	movs	r0, r3
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	b004      	add	sp, #16
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	46c0      	nop			@ (mov r8, r8)
 800c6c8:	40012c00 	.word	0x40012c00
 800c6cc:	ff0fffff 	.word	0xff0fffff
 800c6d0:	40000400 	.word	0x40000400

0800c6d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	223c      	movs	r2, #60	@ 0x3c
 800c6e6:	5c9b      	ldrb	r3, [r3, r2]
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	d101      	bne.n	800c6f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c6ec:	2302      	movs	r3, #2
 800c6ee:	e06f      	b.n	800c7d0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	223c      	movs	r2, #60	@ 0x3c
 800c6f4:	2101      	movs	r1, #1
 800c6f6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	22ff      	movs	r2, #255	@ 0xff
 800c6fc:	4393      	bics	r3, r2
 800c6fe:	001a      	movs	r2, r3
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	68db      	ldr	r3, [r3, #12]
 800c704:	4313      	orrs	r3, r2
 800c706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	4a33      	ldr	r2, [pc, #204]	@ (800c7d8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800c70c:	401a      	ands	r2, r3
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	689b      	ldr	r3, [r3, #8]
 800c712:	4313      	orrs	r3, r2
 800c714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	4a30      	ldr	r2, [pc, #192]	@ (800c7dc <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800c71a:	401a      	ands	r2, r3
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	4313      	orrs	r3, r2
 800c722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	4a2e      	ldr	r2, [pc, #184]	@ (800c7e0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800c728:	401a      	ands	r2, r3
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4313      	orrs	r3, r2
 800c730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	4a2b      	ldr	r2, [pc, #172]	@ (800c7e4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800c736:	401a      	ands	r2, r3
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	691b      	ldr	r3, [r3, #16]
 800c73c:	4313      	orrs	r3, r2
 800c73e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	4a29      	ldr	r2, [pc, #164]	@ (800c7e8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800c744:	401a      	ands	r2, r3
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	695b      	ldr	r3, [r3, #20]
 800c74a:	4313      	orrs	r3, r2
 800c74c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	4a26      	ldr	r2, [pc, #152]	@ (800c7ec <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800c752:	401a      	ands	r2, r3
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c758:	4313      	orrs	r3, r2
 800c75a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	4a24      	ldr	r2, [pc, #144]	@ (800c7f0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c760:	401a      	ands	r2, r3
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	699b      	ldr	r3, [r3, #24]
 800c766:	041b      	lsls	r3, r3, #16
 800c768:	4313      	orrs	r3, r2
 800c76a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	4a21      	ldr	r2, [pc, #132]	@ (800c7f4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800c770:	401a      	ands	r2, r3
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	69db      	ldr	r3, [r3, #28]
 800c776:	4313      	orrs	r3, r2
 800c778:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a1e      	ldr	r2, [pc, #120]	@ (800c7f8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d11c      	bne.n	800c7be <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	4a1d      	ldr	r2, [pc, #116]	@ (800c7fc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800c788:	401a      	ands	r2, r3
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c78e:	051b      	lsls	r3, r3, #20
 800c790:	4313      	orrs	r3, r2
 800c792:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	4a1a      	ldr	r2, [pc, #104]	@ (800c800 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800c798:	401a      	ands	r2, r3
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	6a1b      	ldr	r3, [r3, #32]
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	4a17      	ldr	r2, [pc, #92]	@ (800c804 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800c7a6:	401a      	ands	r2, r3
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	4a15      	ldr	r2, [pc, #84]	@ (800c808 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800c7b4:	401a      	ands	r2, r3
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	223c      	movs	r2, #60	@ 0x3c
 800c7ca:	2100      	movs	r1, #0
 800c7cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c7ce:	2300      	movs	r3, #0
}
 800c7d0:	0018      	movs	r0, r3
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	b004      	add	sp, #16
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	fffffcff 	.word	0xfffffcff
 800c7dc:	fffffbff 	.word	0xfffffbff
 800c7e0:	fffff7ff 	.word	0xfffff7ff
 800c7e4:	ffffefff 	.word	0xffffefff
 800c7e8:	ffffdfff 	.word	0xffffdfff
 800c7ec:	ffffbfff 	.word	0xffffbfff
 800c7f0:	fff0ffff 	.word	0xfff0ffff
 800c7f4:	efffffff 	.word	0xefffffff
 800c7f8:	40012c00 	.word	0x40012c00
 800c7fc:	ff0fffff 	.word	0xff0fffff
 800c800:	feffffff 	.word	0xfeffffff
 800c804:	fdffffff 	.word	0xfdffffff
 800c808:	dfffffff 	.word	0xdfffffff

0800c80c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c814:	46c0      	nop			@ (mov r8, r8)
 800c816:	46bd      	mov	sp, r7
 800c818:	b002      	add	sp, #8
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b082      	sub	sp, #8
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800c824:	46c0      	nop			@ (mov r8, r8)
 800c826:	46bd      	mov	sp, r7
 800c828:	b002      	add	sp, #8
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c834:	46c0      	nop			@ (mov r8, r8)
 800c836:	46bd      	mov	sp, r7
 800c838:	b002      	add	sp, #8
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c844:	46c0      	nop			@ (mov r8, r8)
 800c846:	46bd      	mov	sp, r7
 800c848:	b002      	add	sp, #8
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d101      	bne.n	800c85e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c85a:	2301      	movs	r3, #1
 800c85c:	e055      	b.n	800c90a <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2288      	movs	r2, #136	@ 0x88
 800c862:	589b      	ldr	r3, [r3, r2]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d116      	bne.n	800c896 <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2284      	movs	r2, #132	@ 0x84
 800c86c:	2100      	movs	r1, #0
 800c86e:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	0018      	movs	r0, r3
 800c874:	f000 fce0 	bl	800d238 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	22c4      	movs	r2, #196	@ 0xc4
 800c87c:	589b      	ldr	r3, [r3, r2]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d103      	bne.n	800c88a <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	21c4      	movs	r1, #196	@ 0xc4
 800c886:	4a23      	ldr	r2, [pc, #140]	@ (800c914 <HAL_UART_Init+0xc8>)
 800c888:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	22c4      	movs	r2, #196	@ 0xc4
 800c88e:	589b      	ldr	r3, [r3, r2]
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	0010      	movs	r0, r2
 800c894:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2288      	movs	r2, #136	@ 0x88
 800c89a:	2124      	movs	r1, #36	@ 0x24
 800c89c:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	2101      	movs	r1, #1
 800c8aa:	438a      	bics	r2, r1
 800c8ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d003      	beq.n	800c8be <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	0018      	movs	r0, r3
 800c8ba:	f000 ff85 	bl	800d7c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	0018      	movs	r0, r3
 800c8c2:	f000 fd09 	bl	800d2d8 <UART_SetConfig>
 800c8c6:	0003      	movs	r3, r0
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d101      	bne.n	800c8d0 <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	e01c      	b.n	800c90a <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	685a      	ldr	r2, [r3, #4]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	490f      	ldr	r1, [pc, #60]	@ (800c918 <HAL_UART_Init+0xcc>)
 800c8dc:	400a      	ands	r2, r1
 800c8de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	689a      	ldr	r2, [r3, #8]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	212a      	movs	r1, #42	@ 0x2a
 800c8ec:	438a      	bics	r2, r1
 800c8ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	2101      	movs	r1, #1
 800c8fc:	430a      	orrs	r2, r1
 800c8fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	0018      	movs	r0, r3
 800c904:	f001 f814 	bl	800d930 <UART_CheckIdleState>
 800c908:	0003      	movs	r3, r0
}
 800c90a:	0018      	movs	r0, r3
 800c90c:	46bd      	mov	sp, r7
 800c90e:	b002      	add	sp, #8
 800c910:	bd80      	pop	{r7, pc}
 800c912:	46c0      	nop			@ (mov r8, r8)
 800c914:	08005d1d 	.word	0x08005d1d
 800c918:	ffffb7ff 	.word	0xffffb7ff

0800c91c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b086      	sub	sp, #24
 800c920:	af00      	add	r7, sp, #0
 800c922:	60f8      	str	r0, [r7, #12]
 800c924:	607a      	str	r2, [r7, #4]
 800c926:	230b      	movs	r3, #11
 800c928:	18fb      	adds	r3, r7, r3
 800c92a:	1c0a      	adds	r2, r1, #0
 800c92c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c92e:	2317      	movs	r3, #23
 800c930:	18fb      	adds	r3, r7, r3
 800c932:	2200      	movs	r2, #0
 800c934:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d109      	bne.n	800c950 <HAL_UART_RegisterCallback+0x34>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2290      	movs	r2, #144	@ 0x90
 800c940:	589b      	ldr	r3, [r3, r2]
 800c942:	2240      	movs	r2, #64	@ 0x40
 800c944:	431a      	orrs	r2, r3
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2190      	movs	r1, #144	@ 0x90
 800c94a:	505a      	str	r2, [r3, r1]

    return HAL_ERROR;
 800c94c:	2301      	movs	r3, #1
 800c94e:	e08f      	b.n	800ca70 <HAL_UART_RegisterCallback+0x154>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2288      	movs	r2, #136	@ 0x88
 800c954:	589b      	ldr	r3, [r3, r2]
 800c956:	2b20      	cmp	r3, #32
 800c958:	d157      	bne.n	800ca0a <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800c95a:	230b      	movs	r3, #11
 800c95c:	18fb      	adds	r3, r7, r3
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	2b0c      	cmp	r3, #12
 800c962:	d845      	bhi.n	800c9f0 <HAL_UART_RegisterCallback+0xd4>
 800c964:	009a      	lsls	r2, r3, #2
 800c966:	4b44      	ldr	r3, [pc, #272]	@ (800ca78 <HAL_UART_RegisterCallback+0x15c>)
 800c968:	18d3      	adds	r3, r2, r3
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	469f      	mov	pc, r3
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2194      	movs	r1, #148	@ 0x94
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	505a      	str	r2, [r3, r1]
        break;
 800c976:	e078      	b.n	800ca6a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2198      	movs	r1, #152	@ 0x98
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	505a      	str	r2, [r3, r1]
        break;
 800c980:	e073      	b.n	800ca6a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	219c      	movs	r1, #156	@ 0x9c
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	505a      	str	r2, [r3, r1]
        break;
 800c98a:	e06e      	b.n	800ca6a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	21a0      	movs	r1, #160	@ 0xa0
 800c990:	687a      	ldr	r2, [r7, #4]
 800c992:	505a      	str	r2, [r3, r1]
        break;
 800c994:	e069      	b.n	800ca6a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	21a4      	movs	r1, #164	@ 0xa4
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	505a      	str	r2, [r3, r1]
        break;
 800c99e:	e064      	b.n	800ca6a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	21a8      	movs	r1, #168	@ 0xa8
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	505a      	str	r2, [r3, r1]
        break;
 800c9a8:	e05f      	b.n	800ca6a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	21ac      	movs	r1, #172	@ 0xac
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	505a      	str	r2, [r3, r1]
        break;
 800c9b2:	e05a      	b.n	800ca6a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	21b0      	movs	r1, #176	@ 0xb0
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	505a      	str	r2, [r3, r1]
        break;
 800c9bc:	e055      	b.n	800ca6a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	21b4      	movs	r1, #180	@ 0xb4
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	505a      	str	r2, [r3, r1]
        break;
 800c9c6:	e050      	b.n	800ca6a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	21b8      	movs	r1, #184	@ 0xb8
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	505a      	str	r2, [r3, r1]
        break;
 800c9d0:	e04b      	b.n	800ca6a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	21bc      	movs	r1, #188	@ 0xbc
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	505a      	str	r2, [r3, r1]
        break;
 800c9da:	e046      	b.n	800ca6a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	21c4      	movs	r1, #196	@ 0xc4
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	505a      	str	r2, [r3, r1]
        break;
 800c9e4:	e041      	b.n	800ca6a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	21c8      	movs	r1, #200	@ 0xc8
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	505a      	str	r2, [r3, r1]
        break;
 800c9ee:	e03c      	b.n	800ca6a <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2290      	movs	r2, #144	@ 0x90
 800c9f4:	589b      	ldr	r3, [r3, r2]
 800c9f6:	2240      	movs	r2, #64	@ 0x40
 800c9f8:	431a      	orrs	r2, r3
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2190      	movs	r1, #144	@ 0x90
 800c9fe:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800ca00:	2317      	movs	r3, #23
 800ca02:	18fb      	adds	r3, r7, r3
 800ca04:	2201      	movs	r2, #1
 800ca06:	701a      	strb	r2, [r3, #0]
        break;
 800ca08:	e02f      	b.n	800ca6a <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2288      	movs	r2, #136	@ 0x88
 800ca0e:	589b      	ldr	r3, [r3, r2]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d11e      	bne.n	800ca52 <HAL_UART_RegisterCallback+0x136>
  {
    switch (CallbackID)
 800ca14:	230b      	movs	r3, #11
 800ca16:	18fb      	adds	r3, r7, r3
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	2b0b      	cmp	r3, #11
 800ca1c:	d002      	beq.n	800ca24 <HAL_UART_RegisterCallback+0x108>
 800ca1e:	2b0c      	cmp	r3, #12
 800ca20:	d005      	beq.n	800ca2e <HAL_UART_RegisterCallback+0x112>
 800ca22:	e009      	b.n	800ca38 <HAL_UART_RegisterCallback+0x11c>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	21c4      	movs	r1, #196	@ 0xc4
 800ca28:	687a      	ldr	r2, [r7, #4]
 800ca2a:	505a      	str	r2, [r3, r1]
        break;
 800ca2c:	e01d      	b.n	800ca6a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	21c8      	movs	r1, #200	@ 0xc8
 800ca32:	687a      	ldr	r2, [r7, #4]
 800ca34:	505a      	str	r2, [r3, r1]
        break;
 800ca36:	e018      	b.n	800ca6a <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2290      	movs	r2, #144	@ 0x90
 800ca3c:	589b      	ldr	r3, [r3, r2]
 800ca3e:	2240      	movs	r2, #64	@ 0x40
 800ca40:	431a      	orrs	r2, r3
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2190      	movs	r1, #144	@ 0x90
 800ca46:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800ca48:	2317      	movs	r3, #23
 800ca4a:	18fb      	adds	r3, r7, r3
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	701a      	strb	r2, [r3, #0]
        break;
 800ca50:	e00b      	b.n	800ca6a <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2290      	movs	r2, #144	@ 0x90
 800ca56:	589b      	ldr	r3, [r3, r2]
 800ca58:	2240      	movs	r2, #64	@ 0x40
 800ca5a:	431a      	orrs	r2, r3
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2190      	movs	r1, #144	@ 0x90
 800ca60:	505a      	str	r2, [r3, r1]

    status =  HAL_ERROR;
 800ca62:	2317      	movs	r3, #23
 800ca64:	18fb      	adds	r3, r7, r3
 800ca66:	2201      	movs	r2, #1
 800ca68:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800ca6a:	2317      	movs	r3, #23
 800ca6c:	18fb      	adds	r3, r7, r3
 800ca6e:	781b      	ldrb	r3, [r3, #0]
}
 800ca70:	0018      	movs	r0, r3
 800ca72:	46bd      	mov	sp, r7
 800ca74:	b006      	add	sp, #24
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	0800eba4 	.word	0x0800eba4

0800ca7c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b088      	sub	sp, #32
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	60b9      	str	r1, [r7, #8]
 800ca86:	1dbb      	adds	r3, r7, #6
 800ca88:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	228c      	movs	r2, #140	@ 0x8c
 800ca8e:	589b      	ldr	r3, [r3, r2]
 800ca90:	2b20      	cmp	r3, #32
 800ca92:	d14a      	bne.n	800cb2a <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d003      	beq.n	800caa2 <HAL_UART_Receive_DMA+0x26>
 800ca9a:	1dbb      	adds	r3, r7, #6
 800ca9c:	881b      	ldrh	r3, [r3, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d101      	bne.n	800caa6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800caa2:	2301      	movs	r3, #1
 800caa4:	e042      	b.n	800cb2c <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	689a      	ldr	r2, [r3, #8]
 800caaa:	2380      	movs	r3, #128	@ 0x80
 800caac:	015b      	lsls	r3, r3, #5
 800caae:	429a      	cmp	r2, r3
 800cab0:	d109      	bne.n	800cac6 <HAL_UART_Receive_DMA+0x4a>
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	691b      	ldr	r3, [r3, #16]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d105      	bne.n	800cac6 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	2201      	movs	r2, #1
 800cabe:	4013      	ands	r3, r2
 800cac0:	d001      	beq.n	800cac6 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800cac2:	2301      	movs	r3, #1
 800cac4:	e032      	b.n	800cb2c <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2200      	movs	r2, #0
 800caca:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a18      	ldr	r2, [pc, #96]	@ (800cb34 <HAL_UART_Receive_DMA+0xb8>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d020      	beq.n	800cb18 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	685a      	ldr	r2, [r3, #4]
 800cadc:	2380      	movs	r3, #128	@ 0x80
 800cade:	041b      	lsls	r3, r3, #16
 800cae0:	4013      	ands	r3, r2
 800cae2:	d019      	beq.n	800cb18 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cae4:	f3ef 8310 	mrs	r3, PRIMASK
 800cae8:	613b      	str	r3, [r7, #16]
  return(result);
 800caea:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800caec:	61fb      	str	r3, [r7, #28]
 800caee:	2301      	movs	r3, #1
 800caf0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	f383 8810 	msr	PRIMASK, r3
}
 800caf8:	46c0      	nop			@ (mov r8, r8)
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	2180      	movs	r1, #128	@ 0x80
 800cb06:	04c9      	lsls	r1, r1, #19
 800cb08:	430a      	orrs	r2, r1
 800cb0a:	601a      	str	r2, [r3, #0]
 800cb0c:	69fb      	ldr	r3, [r7, #28]
 800cb0e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	f383 8810 	msr	PRIMASK, r3
}
 800cb16:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cb18:	1dbb      	adds	r3, r7, #6
 800cb1a:	881a      	ldrh	r2, [r3, #0]
 800cb1c:	68b9      	ldr	r1, [r7, #8]
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	0018      	movs	r0, r3
 800cb22:	f001 f81f 	bl	800db64 <UART_Start_Receive_DMA>
 800cb26:	0003      	movs	r3, r0
 800cb28:	e000      	b.n	800cb2c <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800cb2a:	2302      	movs	r3, #2
  }
}
 800cb2c:	0018      	movs	r0, r3
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	b008      	add	sp, #32
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	40008000 	.word	0x40008000

0800cb38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cb38:	b5b0      	push	{r4, r5, r7, lr}
 800cb3a:	b0aa      	sub	sp, #168	@ 0xa8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	69db      	ldr	r3, [r3, #28]
 800cb46:	22a4      	movs	r2, #164	@ 0xa4
 800cb48:	18b9      	adds	r1, r7, r2
 800cb4a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	20a0      	movs	r0, #160	@ 0xa0
 800cb54:	1839      	adds	r1, r7, r0
 800cb56:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	689b      	ldr	r3, [r3, #8]
 800cb5e:	249c      	movs	r4, #156	@ 0x9c
 800cb60:	1939      	adds	r1, r7, r4
 800cb62:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cb64:	0011      	movs	r1, r2
 800cb66:	18bb      	adds	r3, r7, r2
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4aa5      	ldr	r2, [pc, #660]	@ (800ce00 <HAL_UART_IRQHandler+0x2c8>)
 800cb6c:	4013      	ands	r3, r2
 800cb6e:	2298      	movs	r2, #152	@ 0x98
 800cb70:	18bd      	adds	r5, r7, r2
 800cb72:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800cb74:	18bb      	adds	r3, r7, r2
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d11a      	bne.n	800cbb2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cb7c:	187b      	adds	r3, r7, r1
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2220      	movs	r2, #32
 800cb82:	4013      	ands	r3, r2
 800cb84:	d015      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cb86:	183b      	adds	r3, r7, r0
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	2220      	movs	r2, #32
 800cb8c:	4013      	ands	r3, r2
 800cb8e:	d105      	bne.n	800cb9c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cb90:	193b      	adds	r3, r7, r4
 800cb92:	681a      	ldr	r2, [r3, #0]
 800cb94:	2380      	movs	r3, #128	@ 0x80
 800cb96:	055b      	lsls	r3, r3, #21
 800cb98:	4013      	ands	r3, r2
 800cb9a:	d00a      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d100      	bne.n	800cba6 <HAL_UART_IRQHandler+0x6e>
 800cba4:	e2ea      	b.n	800d17c <HAL_UART_IRQHandler+0x644>
      {
        huart->RxISR(huart);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	0010      	movs	r0, r2
 800cbae:	4798      	blx	r3
      }
      return;
 800cbb0:	e2e4      	b.n	800d17c <HAL_UART_IRQHandler+0x644>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cbb2:	2398      	movs	r3, #152	@ 0x98
 800cbb4:	18fb      	adds	r3, r7, r3
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d100      	bne.n	800cbbe <HAL_UART_IRQHandler+0x86>
 800cbbc:	e128      	b.n	800ce10 <HAL_UART_IRQHandler+0x2d8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cbbe:	239c      	movs	r3, #156	@ 0x9c
 800cbc0:	18fb      	adds	r3, r7, r3
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a8f      	ldr	r2, [pc, #572]	@ (800ce04 <HAL_UART_IRQHandler+0x2cc>)
 800cbc6:	4013      	ands	r3, r2
 800cbc8:	d106      	bne.n	800cbd8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cbca:	23a0      	movs	r3, #160	@ 0xa0
 800cbcc:	18fb      	adds	r3, r7, r3
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4a8d      	ldr	r2, [pc, #564]	@ (800ce08 <HAL_UART_IRQHandler+0x2d0>)
 800cbd2:	4013      	ands	r3, r2
 800cbd4:	d100      	bne.n	800cbd8 <HAL_UART_IRQHandler+0xa0>
 800cbd6:	e11b      	b.n	800ce10 <HAL_UART_IRQHandler+0x2d8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cbd8:	23a4      	movs	r3, #164	@ 0xa4
 800cbda:	18fb      	adds	r3, r7, r3
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	2201      	movs	r2, #1
 800cbe0:	4013      	ands	r3, r2
 800cbe2:	d012      	beq.n	800cc0a <HAL_UART_IRQHandler+0xd2>
 800cbe4:	23a0      	movs	r3, #160	@ 0xa0
 800cbe6:	18fb      	adds	r3, r7, r3
 800cbe8:	681a      	ldr	r2, [r3, #0]
 800cbea:	2380      	movs	r3, #128	@ 0x80
 800cbec:	005b      	lsls	r3, r3, #1
 800cbee:	4013      	ands	r3, r2
 800cbf0:	d00b      	beq.n	800cc0a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2290      	movs	r2, #144	@ 0x90
 800cbfe:	589b      	ldr	r3, [r3, r2]
 800cc00:	2201      	movs	r2, #1
 800cc02:	431a      	orrs	r2, r3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2190      	movs	r1, #144	@ 0x90
 800cc08:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc0a:	23a4      	movs	r3, #164	@ 0xa4
 800cc0c:	18fb      	adds	r3, r7, r3
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2202      	movs	r2, #2
 800cc12:	4013      	ands	r3, r2
 800cc14:	d011      	beq.n	800cc3a <HAL_UART_IRQHandler+0x102>
 800cc16:	239c      	movs	r3, #156	@ 0x9c
 800cc18:	18fb      	adds	r3, r7, r3
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	4013      	ands	r3, r2
 800cc20:	d00b      	beq.n	800cc3a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	2202      	movs	r2, #2
 800cc28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2290      	movs	r2, #144	@ 0x90
 800cc2e:	589b      	ldr	r3, [r3, r2]
 800cc30:	2204      	movs	r2, #4
 800cc32:	431a      	orrs	r2, r3
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2190      	movs	r1, #144	@ 0x90
 800cc38:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc3a:	23a4      	movs	r3, #164	@ 0xa4
 800cc3c:	18fb      	adds	r3, r7, r3
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	2204      	movs	r2, #4
 800cc42:	4013      	ands	r3, r2
 800cc44:	d011      	beq.n	800cc6a <HAL_UART_IRQHandler+0x132>
 800cc46:	239c      	movs	r3, #156	@ 0x9c
 800cc48:	18fb      	adds	r3, r7, r3
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	4013      	ands	r3, r2
 800cc50:	d00b      	beq.n	800cc6a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	2204      	movs	r2, #4
 800cc58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2290      	movs	r2, #144	@ 0x90
 800cc5e:	589b      	ldr	r3, [r3, r2]
 800cc60:	2202      	movs	r2, #2
 800cc62:	431a      	orrs	r2, r3
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2190      	movs	r1, #144	@ 0x90
 800cc68:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cc6a:	23a4      	movs	r3, #164	@ 0xa4
 800cc6c:	18fb      	adds	r3, r7, r3
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2208      	movs	r2, #8
 800cc72:	4013      	ands	r3, r2
 800cc74:	d017      	beq.n	800cca6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cc76:	23a0      	movs	r3, #160	@ 0xa0
 800cc78:	18fb      	adds	r3, r7, r3
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2220      	movs	r2, #32
 800cc7e:	4013      	ands	r3, r2
 800cc80:	d105      	bne.n	800cc8e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cc82:	239c      	movs	r3, #156	@ 0x9c
 800cc84:	18fb      	adds	r3, r7, r3
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a5e      	ldr	r2, [pc, #376]	@ (800ce04 <HAL_UART_IRQHandler+0x2cc>)
 800cc8a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cc8c:	d00b      	beq.n	800cca6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	2208      	movs	r2, #8
 800cc94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2290      	movs	r2, #144	@ 0x90
 800cc9a:	589b      	ldr	r3, [r3, r2]
 800cc9c:	2208      	movs	r2, #8
 800cc9e:	431a      	orrs	r2, r3
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2190      	movs	r1, #144	@ 0x90
 800cca4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cca6:	23a4      	movs	r3, #164	@ 0xa4
 800cca8:	18fb      	adds	r3, r7, r3
 800ccaa:	681a      	ldr	r2, [r3, #0]
 800ccac:	2380      	movs	r3, #128	@ 0x80
 800ccae:	011b      	lsls	r3, r3, #4
 800ccb0:	4013      	ands	r3, r2
 800ccb2:	d013      	beq.n	800ccdc <HAL_UART_IRQHandler+0x1a4>
 800ccb4:	23a0      	movs	r3, #160	@ 0xa0
 800ccb6:	18fb      	adds	r3, r7, r3
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	2380      	movs	r3, #128	@ 0x80
 800ccbc:	04db      	lsls	r3, r3, #19
 800ccbe:	4013      	ands	r3, r2
 800ccc0:	d00c      	beq.n	800ccdc <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2280      	movs	r2, #128	@ 0x80
 800ccc8:	0112      	lsls	r2, r2, #4
 800ccca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2290      	movs	r2, #144	@ 0x90
 800ccd0:	589b      	ldr	r3, [r3, r2]
 800ccd2:	2220      	movs	r2, #32
 800ccd4:	431a      	orrs	r2, r3
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2190      	movs	r1, #144	@ 0x90
 800ccda:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2290      	movs	r2, #144	@ 0x90
 800cce0:	589b      	ldr	r3, [r3, r2]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d100      	bne.n	800cce8 <HAL_UART_IRQHandler+0x1b0>
 800cce6:	e24b      	b.n	800d180 <HAL_UART_IRQHandler+0x648>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cce8:	23a4      	movs	r3, #164	@ 0xa4
 800ccea:	18fb      	adds	r3, r7, r3
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2220      	movs	r2, #32
 800ccf0:	4013      	ands	r3, r2
 800ccf2:	d015      	beq.n	800cd20 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ccf4:	23a0      	movs	r3, #160	@ 0xa0
 800ccf6:	18fb      	adds	r3, r7, r3
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2220      	movs	r2, #32
 800ccfc:	4013      	ands	r3, r2
 800ccfe:	d106      	bne.n	800cd0e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cd00:	239c      	movs	r3, #156	@ 0x9c
 800cd02:	18fb      	adds	r3, r7, r3
 800cd04:	681a      	ldr	r2, [r3, #0]
 800cd06:	2380      	movs	r3, #128	@ 0x80
 800cd08:	055b      	lsls	r3, r3, #21
 800cd0a:	4013      	ands	r3, r2
 800cd0c:	d008      	beq.n	800cd20 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d004      	beq.n	800cd20 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd1a:	687a      	ldr	r2, [r7, #4]
 800cd1c:	0010      	movs	r0, r2
 800cd1e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2290      	movs	r2, #144	@ 0x90
 800cd24:	589b      	ldr	r3, [r3, r2]
 800cd26:	2194      	movs	r1, #148	@ 0x94
 800cd28:	187a      	adds	r2, r7, r1
 800cd2a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	689b      	ldr	r3, [r3, #8]
 800cd32:	2240      	movs	r2, #64	@ 0x40
 800cd34:	4013      	ands	r3, r2
 800cd36:	2b40      	cmp	r3, #64	@ 0x40
 800cd38:	d004      	beq.n	800cd44 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cd3a:	187b      	adds	r3, r7, r1
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	2228      	movs	r2, #40	@ 0x28
 800cd40:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd42:	d050      	beq.n	800cde6 <HAL_UART_IRQHandler+0x2ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	0018      	movs	r0, r3
 800cd48:	f000 fff2 	bl	800dd30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	689b      	ldr	r3, [r3, #8]
 800cd52:	2240      	movs	r2, #64	@ 0x40
 800cd54:	4013      	ands	r3, r2
 800cd56:	2b40      	cmp	r3, #64	@ 0x40
 800cd58:	d13e      	bne.n	800cdd8 <HAL_UART_IRQHandler+0x2a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd5a:	f3ef 8310 	mrs	r3, PRIMASK
 800cd5e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800cd60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd62:	2090      	movs	r0, #144	@ 0x90
 800cd64:	183a      	adds	r2, r7, r0
 800cd66:	6013      	str	r3, [r2, #0]
 800cd68:	2301      	movs	r3, #1
 800cd6a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd6e:	f383 8810 	msr	PRIMASK, r3
}
 800cd72:	46c0      	nop			@ (mov r8, r8)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	689a      	ldr	r2, [r3, #8]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	2140      	movs	r1, #64	@ 0x40
 800cd80:	438a      	bics	r2, r1
 800cd82:	609a      	str	r2, [r3, #8]
 800cd84:	183b      	adds	r3, r7, r0
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cd8c:	f383 8810 	msr	PRIMASK, r3
}
 800cd90:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2280      	movs	r2, #128	@ 0x80
 800cd96:	589b      	ldr	r3, [r3, r2]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d016      	beq.n	800cdca <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2280      	movs	r2, #128	@ 0x80
 800cda0:	589b      	ldr	r3, [r3, r2]
 800cda2:	4a1a      	ldr	r2, [pc, #104]	@ (800ce0c <HAL_UART_IRQHandler+0x2d4>)
 800cda4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2280      	movs	r2, #128	@ 0x80
 800cdaa:	589b      	ldr	r3, [r3, r2]
 800cdac:	0018      	movs	r0, r3
 800cdae:	f7fb fb3f 	bl	8008430 <HAL_DMA_Abort_IT>
 800cdb2:	1e03      	subs	r3, r0, #0
 800cdb4:	d022      	beq.n	800cdfc <HAL_UART_IRQHandler+0x2c4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2280      	movs	r2, #128	@ 0x80
 800cdba:	589b      	ldr	r3, [r3, r2]
 800cdbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	2180      	movs	r1, #128	@ 0x80
 800cdc2:	5852      	ldr	r2, [r2, r1]
 800cdc4:	0010      	movs	r0, r2
 800cdc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdc8:	e018      	b.n	800cdfc <HAL_UART_IRQHandler+0x2c4>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	22a4      	movs	r2, #164	@ 0xa4
 800cdce:	589b      	ldr	r3, [r3, r2]
 800cdd0:	687a      	ldr	r2, [r7, #4]
 800cdd2:	0010      	movs	r0, r2
 800cdd4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdd6:	e011      	b.n	800cdfc <HAL_UART_IRQHandler+0x2c4>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	22a4      	movs	r2, #164	@ 0xa4
 800cddc:	589b      	ldr	r3, [r3, r2]
 800cdde:	687a      	ldr	r2, [r7, #4]
 800cde0:	0010      	movs	r0, r2
 800cde2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cde4:	e00a      	b.n	800cdfc <HAL_UART_IRQHandler+0x2c4>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	22a4      	movs	r2, #164	@ 0xa4
 800cdea:	589b      	ldr	r3, [r3, r2]
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	0010      	movs	r0, r2
 800cdf0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2290      	movs	r2, #144	@ 0x90
 800cdf6:	2100      	movs	r1, #0
 800cdf8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800cdfa:	e1c1      	b.n	800d180 <HAL_UART_IRQHandler+0x648>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdfc:	46c0      	nop			@ (mov r8, r8)
    return;
 800cdfe:	e1bf      	b.n	800d180 <HAL_UART_IRQHandler+0x648>
 800ce00:	0000080f 	.word	0x0000080f
 800ce04:	10000001 	.word	0x10000001
 800ce08:	04000120 	.word	0x04000120
 800ce0c:	0800e003 	.word	0x0800e003

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d000      	beq.n	800ce1a <HAL_UART_IRQHandler+0x2e2>
 800ce18:	e140      	b.n	800d09c <HAL_UART_IRQHandler+0x564>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ce1a:	23a4      	movs	r3, #164	@ 0xa4
 800ce1c:	18fb      	adds	r3, r7, r3
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2210      	movs	r2, #16
 800ce22:	4013      	ands	r3, r2
 800ce24:	d100      	bne.n	800ce28 <HAL_UART_IRQHandler+0x2f0>
 800ce26:	e139      	b.n	800d09c <HAL_UART_IRQHandler+0x564>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ce28:	23a0      	movs	r3, #160	@ 0xa0
 800ce2a:	18fb      	adds	r3, r7, r3
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	2210      	movs	r2, #16
 800ce30:	4013      	ands	r3, r2
 800ce32:	d100      	bne.n	800ce36 <HAL_UART_IRQHandler+0x2fe>
 800ce34:	e132      	b.n	800d09c <HAL_UART_IRQHandler+0x564>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	2210      	movs	r2, #16
 800ce3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	689b      	ldr	r3, [r3, #8]
 800ce44:	2240      	movs	r2, #64	@ 0x40
 800ce46:	4013      	ands	r3, r2
 800ce48:	2b40      	cmp	r3, #64	@ 0x40
 800ce4a:	d000      	beq.n	800ce4e <HAL_UART_IRQHandler+0x316>
 800ce4c:	e0a5      	b.n	800cf9a <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2280      	movs	r2, #128	@ 0x80
 800ce52:	589b      	ldr	r3, [r3, r2]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	685a      	ldr	r2, [r3, #4]
 800ce58:	217e      	movs	r1, #126	@ 0x7e
 800ce5a:	187b      	adds	r3, r7, r1
 800ce5c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800ce5e:	187b      	adds	r3, r7, r1
 800ce60:	881b      	ldrh	r3, [r3, #0]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d100      	bne.n	800ce68 <HAL_UART_IRQHandler+0x330>
 800ce66:	e18d      	b.n	800d184 <HAL_UART_IRQHandler+0x64c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	225c      	movs	r2, #92	@ 0x5c
 800ce6c:	5a9b      	ldrh	r3, [r3, r2]
 800ce6e:	187a      	adds	r2, r7, r1
 800ce70:	8812      	ldrh	r2, [r2, #0]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d300      	bcc.n	800ce78 <HAL_UART_IRQHandler+0x340>
 800ce76:	e185      	b.n	800d184 <HAL_UART_IRQHandler+0x64c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	187a      	adds	r2, r7, r1
 800ce7c:	215e      	movs	r1, #94	@ 0x5e
 800ce7e:	8812      	ldrh	r2, [r2, #0]
 800ce80:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2280      	movs	r2, #128	@ 0x80
 800ce86:	589b      	ldr	r3, [r3, r2]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	2220      	movs	r2, #32
 800ce8e:	4013      	ands	r3, r2
 800ce90:	d170      	bne.n	800cf74 <HAL_UART_IRQHandler+0x43c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce92:	f3ef 8310 	mrs	r3, PRIMASK
 800ce96:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800ce98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce9a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cea2:	f383 8810 	msr	PRIMASK, r3
}
 800cea6:	46c0      	nop			@ (mov r8, r8)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	49b8      	ldr	r1, [pc, #736]	@ (800d194 <HAL_UART_IRQHandler+0x65c>)
 800ceb4:	400a      	ands	r2, r1
 800ceb6:	601a      	str	r2, [r3, #0]
 800ceb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ceba:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cebe:	f383 8810 	msr	PRIMASK, r3
}
 800cec2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cec4:	f3ef 8310 	mrs	r3, PRIMASK
 800cec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800ceca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cecc:	677b      	str	r3, [r7, #116]	@ 0x74
 800cece:	2301      	movs	r3, #1
 800ced0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ced2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ced4:	f383 8810 	msr	PRIMASK, r3
}
 800ced8:	46c0      	nop			@ (mov r8, r8)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	689a      	ldr	r2, [r3, #8]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2101      	movs	r1, #1
 800cee6:	438a      	bics	r2, r1
 800cee8:	609a      	str	r2, [r3, #8]
 800ceea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ceec:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ceee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cef0:	f383 8810 	msr	PRIMASK, r3
}
 800cef4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cef6:	f3ef 8310 	mrs	r3, PRIMASK
 800cefa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800cefc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cefe:	673b      	str	r3, [r7, #112]	@ 0x70
 800cf00:	2301      	movs	r3, #1
 800cf02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf06:	f383 8810 	msr	PRIMASK, r3
}
 800cf0a:	46c0      	nop			@ (mov r8, r8)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	689a      	ldr	r2, [r3, #8]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2140      	movs	r1, #64	@ 0x40
 800cf18:	438a      	bics	r2, r1
 800cf1a:	609a      	str	r2, [r3, #8]
 800cf1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf1e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf22:	f383 8810 	msr	PRIMASK, r3
}
 800cf26:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	228c      	movs	r2, #140	@ 0x8c
 800cf2c:	2120      	movs	r1, #32
 800cf2e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf36:	f3ef 8310 	mrs	r3, PRIMASK
 800cf3a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800cf3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cf40:	2301      	movs	r3, #1
 800cf42:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cf46:	f383 8810 	msr	PRIMASK, r3
}
 800cf4a:	46c0      	nop			@ (mov r8, r8)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	2110      	movs	r1, #16
 800cf58:	438a      	bics	r2, r1
 800cf5a:	601a      	str	r2, [r3, #0]
 800cf5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf62:	f383 8810 	msr	PRIMASK, r3
}
 800cf66:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2280      	movs	r2, #128	@ 0x80
 800cf6c:	589b      	ldr	r3, [r3, r2]
 800cf6e:	0018      	movs	r0, r3
 800cf70:	f7fb f9fc 	bl	800836c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2202      	movs	r2, #2
 800cf78:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	22c0      	movs	r2, #192	@ 0xc0
 800cf7e:	589b      	ldr	r3, [r3, r2]
 800cf80:	687a      	ldr	r2, [r7, #4]
 800cf82:	215c      	movs	r1, #92	@ 0x5c
 800cf84:	5a51      	ldrh	r1, [r2, r1]
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	205e      	movs	r0, #94	@ 0x5e
 800cf8a:	5a12      	ldrh	r2, [r2, r0]
 800cf8c:	b292      	uxth	r2, r2
 800cf8e:	1a8a      	subs	r2, r1, r2
 800cf90:	b291      	uxth	r1, r2
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	0010      	movs	r0, r2
 800cf96:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cf98:	e0f4      	b.n	800d184 <HAL_UART_IRQHandler+0x64c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	225c      	movs	r2, #92	@ 0x5c
 800cf9e:	5a99      	ldrh	r1, [r3, r2]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	225e      	movs	r2, #94	@ 0x5e
 800cfa4:	5a9b      	ldrh	r3, [r3, r2]
 800cfa6:	b29a      	uxth	r2, r3
 800cfa8:	208e      	movs	r0, #142	@ 0x8e
 800cfaa:	183b      	adds	r3, r7, r0
 800cfac:	1a8a      	subs	r2, r1, r2
 800cfae:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	225e      	movs	r2, #94	@ 0x5e
 800cfb4:	5a9b      	ldrh	r3, [r3, r2]
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d100      	bne.n	800cfbe <HAL_UART_IRQHandler+0x486>
 800cfbc:	e0e4      	b.n	800d188 <HAL_UART_IRQHandler+0x650>
          && (nb_rx_data > 0U))
 800cfbe:	183b      	adds	r3, r7, r0
 800cfc0:	881b      	ldrh	r3, [r3, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d100      	bne.n	800cfc8 <HAL_UART_IRQHandler+0x490>
 800cfc6:	e0df      	b.n	800d188 <HAL_UART_IRQHandler+0x650>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfc8:	f3ef 8310 	mrs	r3, PRIMASK
 800cfcc:	60fb      	str	r3, [r7, #12]
  return(result);
 800cfce:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cfd0:	2488      	movs	r4, #136	@ 0x88
 800cfd2:	193a      	adds	r2, r7, r4
 800cfd4:	6013      	str	r3, [r2, #0]
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	f383 8810 	msr	PRIMASK, r3
}
 800cfe0:	46c0      	nop			@ (mov r8, r8)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	496a      	ldr	r1, [pc, #424]	@ (800d198 <HAL_UART_IRQHandler+0x660>)
 800cfee:	400a      	ands	r2, r1
 800cff0:	601a      	str	r2, [r3, #0]
 800cff2:	193b      	adds	r3, r7, r4
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	f383 8810 	msr	PRIMASK, r3
}
 800cffe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d000:	f3ef 8310 	mrs	r3, PRIMASK
 800d004:	61bb      	str	r3, [r7, #24]
  return(result);
 800d006:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d008:	2484      	movs	r4, #132	@ 0x84
 800d00a:	193a      	adds	r2, r7, r4
 800d00c:	6013      	str	r3, [r2, #0]
 800d00e:	2301      	movs	r3, #1
 800d010:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d012:	69fb      	ldr	r3, [r7, #28]
 800d014:	f383 8810 	msr	PRIMASK, r3
}
 800d018:	46c0      	nop			@ (mov r8, r8)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	689a      	ldr	r2, [r3, #8]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	495d      	ldr	r1, [pc, #372]	@ (800d19c <HAL_UART_IRQHandler+0x664>)
 800d026:	400a      	ands	r2, r1
 800d028:	609a      	str	r2, [r3, #8]
 800d02a:	193b      	adds	r3, r7, r4
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d030:	6a3b      	ldr	r3, [r7, #32]
 800d032:	f383 8810 	msr	PRIMASK, r3
}
 800d036:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	228c      	movs	r2, #140	@ 0x8c
 800d03c:	2120      	movs	r1, #32
 800d03e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2200      	movs	r2, #0
 800d044:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2200      	movs	r2, #0
 800d04a:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d04c:	f3ef 8310 	mrs	r3, PRIMASK
 800d050:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d054:	2480      	movs	r4, #128	@ 0x80
 800d056:	193a      	adds	r2, r7, r4
 800d058:	6013      	str	r3, [r2, #0]
 800d05a:	2301      	movs	r3, #1
 800d05c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d05e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d060:	f383 8810 	msr	PRIMASK, r3
}
 800d064:	46c0      	nop			@ (mov r8, r8)
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	2110      	movs	r1, #16
 800d072:	438a      	bics	r2, r1
 800d074:	601a      	str	r2, [r3, #0]
 800d076:	193b      	adds	r3, r7, r4
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d07e:	f383 8810 	msr	PRIMASK, r3
}
 800d082:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2202      	movs	r2, #2
 800d088:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	22c0      	movs	r2, #192	@ 0xc0
 800d08e:	589b      	ldr	r3, [r3, r2]
 800d090:	183a      	adds	r2, r7, r0
 800d092:	8811      	ldrh	r1, [r2, #0]
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	0010      	movs	r0, r2
 800d098:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d09a:	e075      	b.n	800d188 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d09c:	23a4      	movs	r3, #164	@ 0xa4
 800d09e:	18fb      	adds	r3, r7, r3
 800d0a0:	681a      	ldr	r2, [r3, #0]
 800d0a2:	2380      	movs	r3, #128	@ 0x80
 800d0a4:	035b      	lsls	r3, r3, #13
 800d0a6:	4013      	ands	r3, r2
 800d0a8:	d012      	beq.n	800d0d0 <HAL_UART_IRQHandler+0x598>
 800d0aa:	239c      	movs	r3, #156	@ 0x9c
 800d0ac:	18fb      	adds	r3, r7, r3
 800d0ae:	681a      	ldr	r2, [r3, #0]
 800d0b0:	2380      	movs	r3, #128	@ 0x80
 800d0b2:	03db      	lsls	r3, r3, #15
 800d0b4:	4013      	ands	r3, r2
 800d0b6:	d00b      	beq.n	800d0d0 <HAL_UART_IRQHandler+0x598>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	2280      	movs	r2, #128	@ 0x80
 800d0be:	0352      	lsls	r2, r2, #13
 800d0c0:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	22b4      	movs	r2, #180	@ 0xb4
 800d0c6:	589b      	ldr	r3, [r3, r2]
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	0010      	movs	r0, r2
 800d0cc:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d0ce:	e05e      	b.n	800d18e <HAL_UART_IRQHandler+0x656>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d0d0:	23a4      	movs	r3, #164	@ 0xa4
 800d0d2:	18fb      	adds	r3, r7, r3
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	2280      	movs	r2, #128	@ 0x80
 800d0d8:	4013      	ands	r3, r2
 800d0da:	d016      	beq.n	800d10a <HAL_UART_IRQHandler+0x5d2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d0dc:	23a0      	movs	r3, #160	@ 0xa0
 800d0de:	18fb      	adds	r3, r7, r3
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2280      	movs	r2, #128	@ 0x80
 800d0e4:	4013      	ands	r3, r2
 800d0e6:	d106      	bne.n	800d0f6 <HAL_UART_IRQHandler+0x5be>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d0e8:	239c      	movs	r3, #156	@ 0x9c
 800d0ea:	18fb      	adds	r3, r7, r3
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	2380      	movs	r3, #128	@ 0x80
 800d0f0:	041b      	lsls	r3, r3, #16
 800d0f2:	4013      	ands	r3, r2
 800d0f4:	d009      	beq.n	800d10a <HAL_UART_IRQHandler+0x5d2>
  {
    if (huart->TxISR != NULL)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d046      	beq.n	800d18c <HAL_UART_IRQHandler+0x654>
    {
      huart->TxISR(huart);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	0010      	movs	r0, r2
 800d106:	4798      	blx	r3
    }
    return;
 800d108:	e040      	b.n	800d18c <HAL_UART_IRQHandler+0x654>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d10a:	23a4      	movs	r3, #164	@ 0xa4
 800d10c:	18fb      	adds	r3, r7, r3
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	2240      	movs	r2, #64	@ 0x40
 800d112:	4013      	ands	r3, r2
 800d114:	d00a      	beq.n	800d12c <HAL_UART_IRQHandler+0x5f4>
 800d116:	23a0      	movs	r3, #160	@ 0xa0
 800d118:	18fb      	adds	r3, r7, r3
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	2240      	movs	r2, #64	@ 0x40
 800d11e:	4013      	ands	r3, r2
 800d120:	d004      	beq.n	800d12c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	0018      	movs	r0, r3
 800d126:	f000 ff85 	bl	800e034 <UART_EndTransmit_IT>
    return;
 800d12a:	e030      	b.n	800d18e <HAL_UART_IRQHandler+0x656>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d12c:	23a4      	movs	r3, #164	@ 0xa4
 800d12e:	18fb      	adds	r3, r7, r3
 800d130:	681a      	ldr	r2, [r3, #0]
 800d132:	2380      	movs	r3, #128	@ 0x80
 800d134:	041b      	lsls	r3, r3, #16
 800d136:	4013      	ands	r3, r2
 800d138:	d00d      	beq.n	800d156 <HAL_UART_IRQHandler+0x61e>
 800d13a:	23a0      	movs	r3, #160	@ 0xa0
 800d13c:	18fb      	adds	r3, r7, r3
 800d13e:	681a      	ldr	r2, [r3, #0]
 800d140:	2380      	movs	r3, #128	@ 0x80
 800d142:	05db      	lsls	r3, r3, #23
 800d144:	4013      	ands	r3, r2
 800d146:	d006      	beq.n	800d156 <HAL_UART_IRQHandler+0x61e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	22bc      	movs	r2, #188	@ 0xbc
 800d14c:	589b      	ldr	r3, [r3, r2]
 800d14e:	687a      	ldr	r2, [r7, #4]
 800d150:	0010      	movs	r0, r2
 800d152:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d154:	e01b      	b.n	800d18e <HAL_UART_IRQHandler+0x656>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d156:	23a4      	movs	r3, #164	@ 0xa4
 800d158:	18fb      	adds	r3, r7, r3
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	2380      	movs	r3, #128	@ 0x80
 800d15e:	045b      	lsls	r3, r3, #17
 800d160:	4013      	ands	r3, r2
 800d162:	d014      	beq.n	800d18e <HAL_UART_IRQHandler+0x656>
 800d164:	23a0      	movs	r3, #160	@ 0xa0
 800d166:	18fb      	adds	r3, r7, r3
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	da0f      	bge.n	800d18e <HAL_UART_IRQHandler+0x656>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	22b8      	movs	r2, #184	@ 0xb8
 800d172:	589b      	ldr	r3, [r3, r2]
 800d174:	687a      	ldr	r2, [r7, #4]
 800d176:	0010      	movs	r0, r2
 800d178:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d17a:	e008      	b.n	800d18e <HAL_UART_IRQHandler+0x656>
      return;
 800d17c:	46c0      	nop			@ (mov r8, r8)
 800d17e:	e006      	b.n	800d18e <HAL_UART_IRQHandler+0x656>
    return;
 800d180:	46c0      	nop			@ (mov r8, r8)
 800d182:	e004      	b.n	800d18e <HAL_UART_IRQHandler+0x656>
      return;
 800d184:	46c0      	nop			@ (mov r8, r8)
 800d186:	e002      	b.n	800d18e <HAL_UART_IRQHandler+0x656>
      return;
 800d188:	46c0      	nop			@ (mov r8, r8)
 800d18a:	e000      	b.n	800d18e <HAL_UART_IRQHandler+0x656>
    return;
 800d18c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800d18e:	46bd      	mov	sp, r7
 800d190:	b02a      	add	sp, #168	@ 0xa8
 800d192:	bdb0      	pop	{r4, r5, r7, pc}
 800d194:	fffffeff 	.word	0xfffffeff
 800d198:	fffffedf 	.word	0xfffffedf
 800d19c:	effffffe 	.word	0xeffffffe

0800d1a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b082      	sub	sp, #8
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d1a8:	46c0      	nop			@ (mov r8, r8)
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	b002      	add	sp, #8
 800d1ae:	bd80      	pop	{r7, pc}

0800d1b0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d1b8:	46c0      	nop			@ (mov r8, r8)
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	b002      	add	sp, #8
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d1c8:	46c0      	nop			@ (mov r8, r8)
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	b002      	add	sp, #8
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d1d8:	46c0      	nop			@ (mov r8, r8)
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	b002      	add	sp, #8
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d1e8:	46c0      	nop			@ (mov r8, r8)
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	b002      	add	sp, #8
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800d1f8:	46c0      	nop			@ (mov r8, r8)
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	b002      	add	sp, #8
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800d208:	46c0      	nop			@ (mov r8, r8)
 800d20a:	46bd      	mov	sp, r7
 800d20c:	b002      	add	sp, #8
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800d218:	46c0      	nop			@ (mov r8, r8)
 800d21a:	46bd      	mov	sp, r7
 800d21c:	b002      	add	sp, #8
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	000a      	movs	r2, r1
 800d22a:	1cbb      	adds	r3, r7, #2
 800d22c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d22e:	46c0      	nop			@ (mov r8, r8)
 800d230:	46bd      	mov	sp, r7
 800d232:	b002      	add	sp, #8
 800d234:	bd80      	pop	{r7, pc}
	...

0800d238 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2194      	movs	r1, #148	@ 0x94
 800d244:	4a18      	ldr	r2, [pc, #96]	@ (800d2a8 <UART_InitCallbacksToDefault+0x70>)
 800d246:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2198      	movs	r1, #152	@ 0x98
 800d24c:	4a17      	ldr	r2, [pc, #92]	@ (800d2ac <UART_InitCallbacksToDefault+0x74>)
 800d24e:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	219c      	movs	r1, #156	@ 0x9c
 800d254:	4a16      	ldr	r2, [pc, #88]	@ (800d2b0 <UART_InitCallbacksToDefault+0x78>)
 800d256:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	21a0      	movs	r1, #160	@ 0xa0
 800d25c:	4a15      	ldr	r2, [pc, #84]	@ (800d2b4 <UART_InitCallbacksToDefault+0x7c>)
 800d25e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	21a4      	movs	r1, #164	@ 0xa4
 800d264:	4a14      	ldr	r2, [pc, #80]	@ (800d2b8 <UART_InitCallbacksToDefault+0x80>)
 800d266:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	21a8      	movs	r1, #168	@ 0xa8
 800d26c:	4a13      	ldr	r2, [pc, #76]	@ (800d2bc <UART_InitCallbacksToDefault+0x84>)
 800d26e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	21ac      	movs	r1, #172	@ 0xac
 800d274:	4a12      	ldr	r2, [pc, #72]	@ (800d2c0 <UART_InitCallbacksToDefault+0x88>)
 800d276:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	21b0      	movs	r1, #176	@ 0xb0
 800d27c:	4a11      	ldr	r2, [pc, #68]	@ (800d2c4 <UART_InitCallbacksToDefault+0x8c>)
 800d27e:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	21b4      	movs	r1, #180	@ 0xb4
 800d284:	4a10      	ldr	r2, [pc, #64]	@ (800d2c8 <UART_InitCallbacksToDefault+0x90>)
 800d286:	505a      	str	r2, [r3, r1]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	21b8      	movs	r1, #184	@ 0xb8
 800d28c:	4a0f      	ldr	r2, [pc, #60]	@ (800d2cc <UART_InitCallbacksToDefault+0x94>)
 800d28e:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	21bc      	movs	r1, #188	@ 0xbc
 800d294:	4a0e      	ldr	r2, [pc, #56]	@ (800d2d0 <UART_InitCallbacksToDefault+0x98>)
 800d296:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	21c0      	movs	r1, #192	@ 0xc0
 800d29c:	4a0d      	ldr	r2, [pc, #52]	@ (800d2d4 <UART_InitCallbacksToDefault+0x9c>)
 800d29e:	505a      	str	r2, [r3, r1]

}
 800d2a0:	46c0      	nop			@ (mov r8, r8)
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	b002      	add	sp, #8
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	0800d1b1 	.word	0x0800d1b1
 800d2ac:	0800d1a1 	.word	0x0800d1a1
 800d2b0:	0800d1d1 	.word	0x0800d1d1
 800d2b4:	0800d1c1 	.word	0x0800d1c1
 800d2b8:	0800d1e1 	.word	0x0800d1e1
 800d2bc:	0800d1f1 	.word	0x0800d1f1
 800d2c0:	0800d201 	.word	0x0800d201
 800d2c4:	0800d211 	.word	0x0800d211
 800d2c8:	0800e091 	.word	0x0800e091
 800d2cc:	0800e0a1 	.word	0x0800e0a1
 800d2d0:	0800e0b1 	.word	0x0800e0b1
 800d2d4:	0800d221 	.word	0x0800d221

0800d2d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d2d8:	b5b0      	push	{r4, r5, r7, lr}
 800d2da:	b090      	sub	sp, #64	@ 0x40
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d2e0:	231a      	movs	r3, #26
 800d2e2:	2220      	movs	r2, #32
 800d2e4:	189b      	adds	r3, r3, r2
 800d2e6:	19db      	adds	r3, r3, r7
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ee:	689a      	ldr	r2, [r3, #8]
 800d2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f2:	691b      	ldr	r3, [r3, #16]
 800d2f4:	431a      	orrs	r2, r3
 800d2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f8:	695b      	ldr	r3, [r3, #20]
 800d2fa:	431a      	orrs	r2, r3
 800d2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2fe:	69db      	ldr	r3, [r3, #28]
 800d300:	4313      	orrs	r3, r2
 800d302:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4ac4      	ldr	r2, [pc, #784]	@ (800d61c <UART_SetConfig+0x344>)
 800d30c:	4013      	ands	r3, r2
 800d30e:	0019      	movs	r1, r3
 800d310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d316:	430b      	orrs	r3, r1
 800d318:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	4abf      	ldr	r2, [pc, #764]	@ (800d620 <UART_SetConfig+0x348>)
 800d322:	4013      	ands	r3, r2
 800d324:	0018      	movs	r0, r3
 800d326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d328:	68d9      	ldr	r1, [r3, #12]
 800d32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d32c:	681a      	ldr	r2, [r3, #0]
 800d32e:	0003      	movs	r3, r0
 800d330:	430b      	orrs	r3, r1
 800d332:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d336:	699b      	ldr	r3, [r3, #24]
 800d338:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	4ab9      	ldr	r2, [pc, #740]	@ (800d624 <UART_SetConfig+0x34c>)
 800d340:	4293      	cmp	r3, r2
 800d342:	d004      	beq.n	800d34e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d346:	6a1b      	ldr	r3, [r3, #32]
 800d348:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d34a:	4313      	orrs	r3, r2
 800d34c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	689b      	ldr	r3, [r3, #8]
 800d354:	4ab4      	ldr	r2, [pc, #720]	@ (800d628 <UART_SetConfig+0x350>)
 800d356:	4013      	ands	r3, r2
 800d358:	0019      	movs	r1, r3
 800d35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d360:	430b      	orrs	r3, r1
 800d362:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d36a:	220f      	movs	r2, #15
 800d36c:	4393      	bics	r3, r2
 800d36e:	0018      	movs	r0, r3
 800d370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d372:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	0003      	movs	r3, r0
 800d37a:	430b      	orrs	r3, r1
 800d37c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	4aaa      	ldr	r2, [pc, #680]	@ (800d62c <UART_SetConfig+0x354>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d131      	bne.n	800d3ec <UART_SetConfig+0x114>
 800d388:	4ba9      	ldr	r3, [pc, #676]	@ (800d630 <UART_SetConfig+0x358>)
 800d38a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d38c:	2203      	movs	r2, #3
 800d38e:	4013      	ands	r3, r2
 800d390:	2b03      	cmp	r3, #3
 800d392:	d01d      	beq.n	800d3d0 <UART_SetConfig+0xf8>
 800d394:	d823      	bhi.n	800d3de <UART_SetConfig+0x106>
 800d396:	2b02      	cmp	r3, #2
 800d398:	d00c      	beq.n	800d3b4 <UART_SetConfig+0xdc>
 800d39a:	d820      	bhi.n	800d3de <UART_SetConfig+0x106>
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d002      	beq.n	800d3a6 <UART_SetConfig+0xce>
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	d00e      	beq.n	800d3c2 <UART_SetConfig+0xea>
 800d3a4:	e01b      	b.n	800d3de <UART_SetConfig+0x106>
 800d3a6:	231b      	movs	r3, #27
 800d3a8:	2220      	movs	r2, #32
 800d3aa:	189b      	adds	r3, r3, r2
 800d3ac:	19db      	adds	r3, r3, r7
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	701a      	strb	r2, [r3, #0]
 800d3b2:	e071      	b.n	800d498 <UART_SetConfig+0x1c0>
 800d3b4:	231b      	movs	r3, #27
 800d3b6:	2220      	movs	r2, #32
 800d3b8:	189b      	adds	r3, r3, r2
 800d3ba:	19db      	adds	r3, r3, r7
 800d3bc:	2202      	movs	r2, #2
 800d3be:	701a      	strb	r2, [r3, #0]
 800d3c0:	e06a      	b.n	800d498 <UART_SetConfig+0x1c0>
 800d3c2:	231b      	movs	r3, #27
 800d3c4:	2220      	movs	r2, #32
 800d3c6:	189b      	adds	r3, r3, r2
 800d3c8:	19db      	adds	r3, r3, r7
 800d3ca:	2204      	movs	r2, #4
 800d3cc:	701a      	strb	r2, [r3, #0]
 800d3ce:	e063      	b.n	800d498 <UART_SetConfig+0x1c0>
 800d3d0:	231b      	movs	r3, #27
 800d3d2:	2220      	movs	r2, #32
 800d3d4:	189b      	adds	r3, r3, r2
 800d3d6:	19db      	adds	r3, r3, r7
 800d3d8:	2208      	movs	r2, #8
 800d3da:	701a      	strb	r2, [r3, #0]
 800d3dc:	e05c      	b.n	800d498 <UART_SetConfig+0x1c0>
 800d3de:	231b      	movs	r3, #27
 800d3e0:	2220      	movs	r2, #32
 800d3e2:	189b      	adds	r3, r3, r2
 800d3e4:	19db      	adds	r3, r3, r7
 800d3e6:	2210      	movs	r2, #16
 800d3e8:	701a      	strb	r2, [r3, #0]
 800d3ea:	e055      	b.n	800d498 <UART_SetConfig+0x1c0>
 800d3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a90      	ldr	r2, [pc, #576]	@ (800d634 <UART_SetConfig+0x35c>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d106      	bne.n	800d404 <UART_SetConfig+0x12c>
 800d3f6:	231b      	movs	r3, #27
 800d3f8:	2220      	movs	r2, #32
 800d3fa:	189b      	adds	r3, r3, r2
 800d3fc:	19db      	adds	r3, r3, r7
 800d3fe:	2200      	movs	r2, #0
 800d400:	701a      	strb	r2, [r3, #0]
 800d402:	e049      	b.n	800d498 <UART_SetConfig+0x1c0>
 800d404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4a86      	ldr	r2, [pc, #536]	@ (800d624 <UART_SetConfig+0x34c>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d13e      	bne.n	800d48c <UART_SetConfig+0x1b4>
 800d40e:	4b88      	ldr	r3, [pc, #544]	@ (800d630 <UART_SetConfig+0x358>)
 800d410:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d412:	23c0      	movs	r3, #192	@ 0xc0
 800d414:	011b      	lsls	r3, r3, #4
 800d416:	4013      	ands	r3, r2
 800d418:	22c0      	movs	r2, #192	@ 0xc0
 800d41a:	0112      	lsls	r2, r2, #4
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d027      	beq.n	800d470 <UART_SetConfig+0x198>
 800d420:	22c0      	movs	r2, #192	@ 0xc0
 800d422:	0112      	lsls	r2, r2, #4
 800d424:	4293      	cmp	r3, r2
 800d426:	d82a      	bhi.n	800d47e <UART_SetConfig+0x1a6>
 800d428:	2280      	movs	r2, #128	@ 0x80
 800d42a:	0112      	lsls	r2, r2, #4
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d011      	beq.n	800d454 <UART_SetConfig+0x17c>
 800d430:	2280      	movs	r2, #128	@ 0x80
 800d432:	0112      	lsls	r2, r2, #4
 800d434:	4293      	cmp	r3, r2
 800d436:	d822      	bhi.n	800d47e <UART_SetConfig+0x1a6>
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d004      	beq.n	800d446 <UART_SetConfig+0x16e>
 800d43c:	2280      	movs	r2, #128	@ 0x80
 800d43e:	00d2      	lsls	r2, r2, #3
 800d440:	4293      	cmp	r3, r2
 800d442:	d00e      	beq.n	800d462 <UART_SetConfig+0x18a>
 800d444:	e01b      	b.n	800d47e <UART_SetConfig+0x1a6>
 800d446:	231b      	movs	r3, #27
 800d448:	2220      	movs	r2, #32
 800d44a:	189b      	adds	r3, r3, r2
 800d44c:	19db      	adds	r3, r3, r7
 800d44e:	2200      	movs	r2, #0
 800d450:	701a      	strb	r2, [r3, #0]
 800d452:	e021      	b.n	800d498 <UART_SetConfig+0x1c0>
 800d454:	231b      	movs	r3, #27
 800d456:	2220      	movs	r2, #32
 800d458:	189b      	adds	r3, r3, r2
 800d45a:	19db      	adds	r3, r3, r7
 800d45c:	2202      	movs	r2, #2
 800d45e:	701a      	strb	r2, [r3, #0]
 800d460:	e01a      	b.n	800d498 <UART_SetConfig+0x1c0>
 800d462:	231b      	movs	r3, #27
 800d464:	2220      	movs	r2, #32
 800d466:	189b      	adds	r3, r3, r2
 800d468:	19db      	adds	r3, r3, r7
 800d46a:	2204      	movs	r2, #4
 800d46c:	701a      	strb	r2, [r3, #0]
 800d46e:	e013      	b.n	800d498 <UART_SetConfig+0x1c0>
 800d470:	231b      	movs	r3, #27
 800d472:	2220      	movs	r2, #32
 800d474:	189b      	adds	r3, r3, r2
 800d476:	19db      	adds	r3, r3, r7
 800d478:	2208      	movs	r2, #8
 800d47a:	701a      	strb	r2, [r3, #0]
 800d47c:	e00c      	b.n	800d498 <UART_SetConfig+0x1c0>
 800d47e:	231b      	movs	r3, #27
 800d480:	2220      	movs	r2, #32
 800d482:	189b      	adds	r3, r3, r2
 800d484:	19db      	adds	r3, r3, r7
 800d486:	2210      	movs	r2, #16
 800d488:	701a      	strb	r2, [r3, #0]
 800d48a:	e005      	b.n	800d498 <UART_SetConfig+0x1c0>
 800d48c:	231b      	movs	r3, #27
 800d48e:	2220      	movs	r2, #32
 800d490:	189b      	adds	r3, r3, r2
 800d492:	19db      	adds	r3, r3, r7
 800d494:	2210      	movs	r2, #16
 800d496:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	4a61      	ldr	r2, [pc, #388]	@ (800d624 <UART_SetConfig+0x34c>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d000      	beq.n	800d4a4 <UART_SetConfig+0x1cc>
 800d4a2:	e092      	b.n	800d5ca <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d4a4:	231b      	movs	r3, #27
 800d4a6:	2220      	movs	r2, #32
 800d4a8:	189b      	adds	r3, r3, r2
 800d4aa:	19db      	adds	r3, r3, r7
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	2b08      	cmp	r3, #8
 800d4b0:	d015      	beq.n	800d4de <UART_SetConfig+0x206>
 800d4b2:	dc18      	bgt.n	800d4e6 <UART_SetConfig+0x20e>
 800d4b4:	2b04      	cmp	r3, #4
 800d4b6:	d00d      	beq.n	800d4d4 <UART_SetConfig+0x1fc>
 800d4b8:	dc15      	bgt.n	800d4e6 <UART_SetConfig+0x20e>
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d002      	beq.n	800d4c4 <UART_SetConfig+0x1ec>
 800d4be:	2b02      	cmp	r3, #2
 800d4c0:	d005      	beq.n	800d4ce <UART_SetConfig+0x1f6>
 800d4c2:	e010      	b.n	800d4e6 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d4c4:	f7fc fdd6 	bl	800a074 <HAL_RCC_GetPCLK1Freq>
 800d4c8:	0003      	movs	r3, r0
 800d4ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d4cc:	e014      	b.n	800d4f8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d4ce:	4b5a      	ldr	r3, [pc, #360]	@ (800d638 <UART_SetConfig+0x360>)
 800d4d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d4d2:	e011      	b.n	800d4f8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d4d4:	f7fc fd42 	bl	8009f5c <HAL_RCC_GetSysClockFreq>
 800d4d8:	0003      	movs	r3, r0
 800d4da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d4dc:	e00c      	b.n	800d4f8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d4de:	2380      	movs	r3, #128	@ 0x80
 800d4e0:	021b      	lsls	r3, r3, #8
 800d4e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d4e4:	e008      	b.n	800d4f8 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d4ea:	231a      	movs	r3, #26
 800d4ec:	2220      	movs	r2, #32
 800d4ee:	189b      	adds	r3, r3, r2
 800d4f0:	19db      	adds	r3, r3, r7
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	701a      	strb	r2, [r3, #0]
        break;
 800d4f6:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d4f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d100      	bne.n	800d500 <UART_SetConfig+0x228>
 800d4fe:	e147      	b.n	800d790 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d502:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d504:	4b4d      	ldr	r3, [pc, #308]	@ (800d63c <UART_SetConfig+0x364>)
 800d506:	0052      	lsls	r2, r2, #1
 800d508:	5ad3      	ldrh	r3, [r2, r3]
 800d50a:	0019      	movs	r1, r3
 800d50c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d50e:	f7f2 fdfb 	bl	8000108 <__udivsi3>
 800d512:	0003      	movs	r3, r0
 800d514:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d518:	685a      	ldr	r2, [r3, #4]
 800d51a:	0013      	movs	r3, r2
 800d51c:	005b      	lsls	r3, r3, #1
 800d51e:	189b      	adds	r3, r3, r2
 800d520:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d522:	429a      	cmp	r2, r3
 800d524:	d305      	bcc.n	800d532 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d528:	685b      	ldr	r3, [r3, #4]
 800d52a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d52c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d52e:	429a      	cmp	r2, r3
 800d530:	d906      	bls.n	800d540 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800d532:	231a      	movs	r3, #26
 800d534:	2220      	movs	r2, #32
 800d536:	189b      	adds	r3, r3, r2
 800d538:	19db      	adds	r3, r3, r7
 800d53a:	2201      	movs	r2, #1
 800d53c:	701a      	strb	r2, [r3, #0]
 800d53e:	e127      	b.n	800d790 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d542:	61bb      	str	r3, [r7, #24]
 800d544:	2300      	movs	r3, #0
 800d546:	61fb      	str	r3, [r7, #28]
 800d548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d54a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d54c:	4b3b      	ldr	r3, [pc, #236]	@ (800d63c <UART_SetConfig+0x364>)
 800d54e:	0052      	lsls	r2, r2, #1
 800d550:	5ad3      	ldrh	r3, [r2, r3]
 800d552:	613b      	str	r3, [r7, #16]
 800d554:	2300      	movs	r3, #0
 800d556:	617b      	str	r3, [r7, #20]
 800d558:	693a      	ldr	r2, [r7, #16]
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	69b8      	ldr	r0, [r7, #24]
 800d55e:	69f9      	ldr	r1, [r7, #28]
 800d560:	f7f2 fe5e 	bl	8000220 <__aeabi_uldivmod>
 800d564:	0002      	movs	r2, r0
 800d566:	000b      	movs	r3, r1
 800d568:	0e11      	lsrs	r1, r2, #24
 800d56a:	021d      	lsls	r5, r3, #8
 800d56c:	430d      	orrs	r5, r1
 800d56e:	0214      	lsls	r4, r2, #8
 800d570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d572:	685b      	ldr	r3, [r3, #4]
 800d574:	085b      	lsrs	r3, r3, #1
 800d576:	60bb      	str	r3, [r7, #8]
 800d578:	2300      	movs	r3, #0
 800d57a:	60fb      	str	r3, [r7, #12]
 800d57c:	68b8      	ldr	r0, [r7, #8]
 800d57e:	68f9      	ldr	r1, [r7, #12]
 800d580:	1900      	adds	r0, r0, r4
 800d582:	4169      	adcs	r1, r5
 800d584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	603b      	str	r3, [r7, #0]
 800d58a:	2300      	movs	r3, #0
 800d58c:	607b      	str	r3, [r7, #4]
 800d58e:	683a      	ldr	r2, [r7, #0]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f7f2 fe45 	bl	8000220 <__aeabi_uldivmod>
 800d596:	0002      	movs	r2, r0
 800d598:	000b      	movs	r3, r1
 800d59a:	0013      	movs	r3, r2
 800d59c:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d59e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5a0:	23c0      	movs	r3, #192	@ 0xc0
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d309      	bcc.n	800d5bc <UART_SetConfig+0x2e4>
 800d5a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5aa:	2380      	movs	r3, #128	@ 0x80
 800d5ac:	035b      	lsls	r3, r3, #13
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	d204      	bcs.n	800d5bc <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800d5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5b8:	60da      	str	r2, [r3, #12]
 800d5ba:	e0e9      	b.n	800d790 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800d5bc:	231a      	movs	r3, #26
 800d5be:	2220      	movs	r2, #32
 800d5c0:	189b      	adds	r3, r3, r2
 800d5c2:	19db      	adds	r3, r3, r7
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	701a      	strb	r2, [r3, #0]
 800d5c8:	e0e2      	b.n	800d790 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5cc:	69da      	ldr	r2, [r3, #28]
 800d5ce:	2380      	movs	r3, #128	@ 0x80
 800d5d0:	021b      	lsls	r3, r3, #8
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d000      	beq.n	800d5d8 <UART_SetConfig+0x300>
 800d5d6:	e083      	b.n	800d6e0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800d5d8:	231b      	movs	r3, #27
 800d5da:	2220      	movs	r2, #32
 800d5dc:	189b      	adds	r3, r3, r2
 800d5de:	19db      	adds	r3, r3, r7
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	2b08      	cmp	r3, #8
 800d5e4:	d015      	beq.n	800d612 <UART_SetConfig+0x33a>
 800d5e6:	dc2b      	bgt.n	800d640 <UART_SetConfig+0x368>
 800d5e8:	2b04      	cmp	r3, #4
 800d5ea:	d00d      	beq.n	800d608 <UART_SetConfig+0x330>
 800d5ec:	dc28      	bgt.n	800d640 <UART_SetConfig+0x368>
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d002      	beq.n	800d5f8 <UART_SetConfig+0x320>
 800d5f2:	2b02      	cmp	r3, #2
 800d5f4:	d005      	beq.n	800d602 <UART_SetConfig+0x32a>
 800d5f6:	e023      	b.n	800d640 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d5f8:	f7fc fd3c 	bl	800a074 <HAL_RCC_GetPCLK1Freq>
 800d5fc:	0003      	movs	r3, r0
 800d5fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d600:	e027      	b.n	800d652 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d602:	4b0d      	ldr	r3, [pc, #52]	@ (800d638 <UART_SetConfig+0x360>)
 800d604:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d606:	e024      	b.n	800d652 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d608:	f7fc fca8 	bl	8009f5c <HAL_RCC_GetSysClockFreq>
 800d60c:	0003      	movs	r3, r0
 800d60e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d610:	e01f      	b.n	800d652 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d612:	2380      	movs	r3, #128	@ 0x80
 800d614:	021b      	lsls	r3, r3, #8
 800d616:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d618:	e01b      	b.n	800d652 <UART_SetConfig+0x37a>
 800d61a:	46c0      	nop			@ (mov r8, r8)
 800d61c:	cfff69f3 	.word	0xcfff69f3
 800d620:	ffffcfff 	.word	0xffffcfff
 800d624:	40008000 	.word	0x40008000
 800d628:	11fff4ff 	.word	0x11fff4ff
 800d62c:	40013800 	.word	0x40013800
 800d630:	40021000 	.word	0x40021000
 800d634:	40004400 	.word	0x40004400
 800d638:	00f42400 	.word	0x00f42400
 800d63c:	0800eb8c 	.word	0x0800eb8c
      default:
        pclk = 0U;
 800d640:	2300      	movs	r3, #0
 800d642:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d644:	231a      	movs	r3, #26
 800d646:	2220      	movs	r2, #32
 800d648:	189b      	adds	r3, r3, r2
 800d64a:	19db      	adds	r3, r3, r7
 800d64c:	2201      	movs	r2, #1
 800d64e:	701a      	strb	r2, [r3, #0]
        break;
 800d650:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d654:	2b00      	cmp	r3, #0
 800d656:	d100      	bne.n	800d65a <UART_SetConfig+0x382>
 800d658:	e09a      	b.n	800d790 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d65c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d65e:	4b58      	ldr	r3, [pc, #352]	@ (800d7c0 <UART_SetConfig+0x4e8>)
 800d660:	0052      	lsls	r2, r2, #1
 800d662:	5ad3      	ldrh	r3, [r2, r3]
 800d664:	0019      	movs	r1, r3
 800d666:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d668:	f7f2 fd4e 	bl	8000108 <__udivsi3>
 800d66c:	0003      	movs	r3, r0
 800d66e:	005a      	lsls	r2, r3, #1
 800d670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	085b      	lsrs	r3, r3, #1
 800d676:	18d2      	adds	r2, r2, r3
 800d678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	0019      	movs	r1, r3
 800d67e:	0010      	movs	r0, r2
 800d680:	f7f2 fd42 	bl	8000108 <__udivsi3>
 800d684:	0003      	movs	r3, r0
 800d686:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d68a:	2b0f      	cmp	r3, #15
 800d68c:	d921      	bls.n	800d6d2 <UART_SetConfig+0x3fa>
 800d68e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d690:	2380      	movs	r3, #128	@ 0x80
 800d692:	025b      	lsls	r3, r3, #9
 800d694:	429a      	cmp	r2, r3
 800d696:	d21c      	bcs.n	800d6d2 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d69a:	b29a      	uxth	r2, r3
 800d69c:	200e      	movs	r0, #14
 800d69e:	2420      	movs	r4, #32
 800d6a0:	1903      	adds	r3, r0, r4
 800d6a2:	19db      	adds	r3, r3, r7
 800d6a4:	210f      	movs	r1, #15
 800d6a6:	438a      	bics	r2, r1
 800d6a8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ac:	085b      	lsrs	r3, r3, #1
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	2207      	movs	r2, #7
 800d6b2:	4013      	ands	r3, r2
 800d6b4:	b299      	uxth	r1, r3
 800d6b6:	1903      	adds	r3, r0, r4
 800d6b8:	19db      	adds	r3, r3, r7
 800d6ba:	1902      	adds	r2, r0, r4
 800d6bc:	19d2      	adds	r2, r2, r7
 800d6be:	8812      	ldrh	r2, [r2, #0]
 800d6c0:	430a      	orrs	r2, r1
 800d6c2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800d6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	1902      	adds	r2, r0, r4
 800d6ca:	19d2      	adds	r2, r2, r7
 800d6cc:	8812      	ldrh	r2, [r2, #0]
 800d6ce:	60da      	str	r2, [r3, #12]
 800d6d0:	e05e      	b.n	800d790 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800d6d2:	231a      	movs	r3, #26
 800d6d4:	2220      	movs	r2, #32
 800d6d6:	189b      	adds	r3, r3, r2
 800d6d8:	19db      	adds	r3, r3, r7
 800d6da:	2201      	movs	r2, #1
 800d6dc:	701a      	strb	r2, [r3, #0]
 800d6de:	e057      	b.n	800d790 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d6e0:	231b      	movs	r3, #27
 800d6e2:	2220      	movs	r2, #32
 800d6e4:	189b      	adds	r3, r3, r2
 800d6e6:	19db      	adds	r3, r3, r7
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	2b08      	cmp	r3, #8
 800d6ec:	d015      	beq.n	800d71a <UART_SetConfig+0x442>
 800d6ee:	dc18      	bgt.n	800d722 <UART_SetConfig+0x44a>
 800d6f0:	2b04      	cmp	r3, #4
 800d6f2:	d00d      	beq.n	800d710 <UART_SetConfig+0x438>
 800d6f4:	dc15      	bgt.n	800d722 <UART_SetConfig+0x44a>
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d002      	beq.n	800d700 <UART_SetConfig+0x428>
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	d005      	beq.n	800d70a <UART_SetConfig+0x432>
 800d6fe:	e010      	b.n	800d722 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d700:	f7fc fcb8 	bl	800a074 <HAL_RCC_GetPCLK1Freq>
 800d704:	0003      	movs	r3, r0
 800d706:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d708:	e014      	b.n	800d734 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d70a:	4b2e      	ldr	r3, [pc, #184]	@ (800d7c4 <UART_SetConfig+0x4ec>)
 800d70c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d70e:	e011      	b.n	800d734 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d710:	f7fc fc24 	bl	8009f5c <HAL_RCC_GetSysClockFreq>
 800d714:	0003      	movs	r3, r0
 800d716:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d718:	e00c      	b.n	800d734 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d71a:	2380      	movs	r3, #128	@ 0x80
 800d71c:	021b      	lsls	r3, r3, #8
 800d71e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d720:	e008      	b.n	800d734 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800d722:	2300      	movs	r3, #0
 800d724:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d726:	231a      	movs	r3, #26
 800d728:	2220      	movs	r2, #32
 800d72a:	189b      	adds	r3, r3, r2
 800d72c:	19db      	adds	r3, r3, r7
 800d72e:	2201      	movs	r2, #1
 800d730:	701a      	strb	r2, [r3, #0]
        break;
 800d732:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800d734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d736:	2b00      	cmp	r3, #0
 800d738:	d02a      	beq.n	800d790 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d73c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d73e:	4b20      	ldr	r3, [pc, #128]	@ (800d7c0 <UART_SetConfig+0x4e8>)
 800d740:	0052      	lsls	r2, r2, #1
 800d742:	5ad3      	ldrh	r3, [r2, r3]
 800d744:	0019      	movs	r1, r3
 800d746:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d748:	f7f2 fcde 	bl	8000108 <__udivsi3>
 800d74c:	0003      	movs	r3, r0
 800d74e:	001a      	movs	r2, r3
 800d750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	085b      	lsrs	r3, r3, #1
 800d756:	18d2      	adds	r2, r2, r3
 800d758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	0019      	movs	r1, r3
 800d75e:	0010      	movs	r0, r2
 800d760:	f7f2 fcd2 	bl	8000108 <__udivsi3>
 800d764:	0003      	movs	r3, r0
 800d766:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d76a:	2b0f      	cmp	r3, #15
 800d76c:	d90a      	bls.n	800d784 <UART_SetConfig+0x4ac>
 800d76e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d770:	2380      	movs	r3, #128	@ 0x80
 800d772:	025b      	lsls	r3, r3, #9
 800d774:	429a      	cmp	r2, r3
 800d776:	d205      	bcs.n	800d784 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	60da      	str	r2, [r3, #12]
 800d782:	e005      	b.n	800d790 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800d784:	231a      	movs	r3, #26
 800d786:	2220      	movs	r2, #32
 800d788:	189b      	adds	r3, r3, r2
 800d78a:	19db      	adds	r3, r3, r7
 800d78c:	2201      	movs	r2, #1
 800d78e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d792:	226a      	movs	r2, #106	@ 0x6a
 800d794:	2101      	movs	r1, #1
 800d796:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800d798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d79a:	2268      	movs	r2, #104	@ 0x68
 800d79c:	2101      	movs	r1, #1
 800d79e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d7ac:	231a      	movs	r3, #26
 800d7ae:	2220      	movs	r2, #32
 800d7b0:	189b      	adds	r3, r3, r2
 800d7b2:	19db      	adds	r3, r3, r7
 800d7b4:	781b      	ldrb	r3, [r3, #0]
}
 800d7b6:	0018      	movs	r0, r3
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	b010      	add	sp, #64	@ 0x40
 800d7bc:	bdb0      	pop	{r4, r5, r7, pc}
 800d7be:	46c0      	nop			@ (mov r8, r8)
 800d7c0:	0800eb8c 	.word	0x0800eb8c
 800d7c4:	00f42400 	.word	0x00f42400

0800d7c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7d4:	2208      	movs	r2, #8
 800d7d6:	4013      	ands	r3, r2
 800d7d8:	d00b      	beq.n	800d7f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	4a4a      	ldr	r2, [pc, #296]	@ (800d90c <UART_AdvFeatureConfig+0x144>)
 800d7e2:	4013      	ands	r3, r2
 800d7e4:	0019      	movs	r1, r3
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	430a      	orrs	r2, r1
 800d7f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	4013      	ands	r3, r2
 800d7fa:	d00b      	beq.n	800d814 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	4a43      	ldr	r2, [pc, #268]	@ (800d910 <UART_AdvFeatureConfig+0x148>)
 800d804:	4013      	ands	r3, r2
 800d806:	0019      	movs	r1, r3
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	430a      	orrs	r2, r1
 800d812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d818:	2202      	movs	r2, #2
 800d81a:	4013      	ands	r3, r2
 800d81c:	d00b      	beq.n	800d836 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	4a3b      	ldr	r2, [pc, #236]	@ (800d914 <UART_AdvFeatureConfig+0x14c>)
 800d826:	4013      	ands	r3, r2
 800d828:	0019      	movs	r1, r3
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	430a      	orrs	r2, r1
 800d834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d83a:	2204      	movs	r2, #4
 800d83c:	4013      	ands	r3, r2
 800d83e:	d00b      	beq.n	800d858 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	4a34      	ldr	r2, [pc, #208]	@ (800d918 <UART_AdvFeatureConfig+0x150>)
 800d848:	4013      	ands	r3, r2
 800d84a:	0019      	movs	r1, r3
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	430a      	orrs	r2, r1
 800d856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d85c:	2210      	movs	r2, #16
 800d85e:	4013      	ands	r3, r2
 800d860:	d00b      	beq.n	800d87a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	4a2c      	ldr	r2, [pc, #176]	@ (800d91c <UART_AdvFeatureConfig+0x154>)
 800d86a:	4013      	ands	r3, r2
 800d86c:	0019      	movs	r1, r3
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	430a      	orrs	r2, r1
 800d878:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d87e:	2220      	movs	r2, #32
 800d880:	4013      	ands	r3, r2
 800d882:	d00b      	beq.n	800d89c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	689b      	ldr	r3, [r3, #8]
 800d88a:	4a25      	ldr	r2, [pc, #148]	@ (800d920 <UART_AdvFeatureConfig+0x158>)
 800d88c:	4013      	ands	r3, r2
 800d88e:	0019      	movs	r1, r3
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	430a      	orrs	r2, r1
 800d89a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8a0:	2240      	movs	r2, #64	@ 0x40
 800d8a2:	4013      	ands	r3, r2
 800d8a4:	d01d      	beq.n	800d8e2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	4a1d      	ldr	r2, [pc, #116]	@ (800d924 <UART_AdvFeatureConfig+0x15c>)
 800d8ae:	4013      	ands	r3, r2
 800d8b0:	0019      	movs	r1, r3
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	430a      	orrs	r2, r1
 800d8bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d8c2:	2380      	movs	r3, #128	@ 0x80
 800d8c4:	035b      	lsls	r3, r3, #13
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d10b      	bne.n	800d8e2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	4a15      	ldr	r2, [pc, #84]	@ (800d928 <UART_AdvFeatureConfig+0x160>)
 800d8d2:	4013      	ands	r3, r2
 800d8d4:	0019      	movs	r1, r3
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	430a      	orrs	r2, r1
 800d8e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8e6:	2280      	movs	r2, #128	@ 0x80
 800d8e8:	4013      	ands	r3, r2
 800d8ea:	d00b      	beq.n	800d904 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	4a0e      	ldr	r2, [pc, #56]	@ (800d92c <UART_AdvFeatureConfig+0x164>)
 800d8f4:	4013      	ands	r3, r2
 800d8f6:	0019      	movs	r1, r3
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	430a      	orrs	r2, r1
 800d902:	605a      	str	r2, [r3, #4]
  }
}
 800d904:	46c0      	nop			@ (mov r8, r8)
 800d906:	46bd      	mov	sp, r7
 800d908:	b002      	add	sp, #8
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	ffff7fff 	.word	0xffff7fff
 800d910:	fffdffff 	.word	0xfffdffff
 800d914:	fffeffff 	.word	0xfffeffff
 800d918:	fffbffff 	.word	0xfffbffff
 800d91c:	ffffefff 	.word	0xffffefff
 800d920:	ffffdfff 	.word	0xffffdfff
 800d924:	ffefffff 	.word	0xffefffff
 800d928:	ff9fffff 	.word	0xff9fffff
 800d92c:	fff7ffff 	.word	0xfff7ffff

0800d930 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b092      	sub	sp, #72	@ 0x48
 800d934:	af02      	add	r7, sp, #8
 800d936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2290      	movs	r2, #144	@ 0x90
 800d93c:	2100      	movs	r1, #0
 800d93e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d940:	f7f9 f8c0 	bl	8006ac4 <HAL_GetTick>
 800d944:	0003      	movs	r3, r0
 800d946:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	2208      	movs	r2, #8
 800d950:	4013      	ands	r3, r2
 800d952:	2b08      	cmp	r3, #8
 800d954:	d12d      	bne.n	800d9b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d958:	2280      	movs	r2, #128	@ 0x80
 800d95a:	0391      	lsls	r1, r2, #14
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	4a47      	ldr	r2, [pc, #284]	@ (800da7c <UART_CheckIdleState+0x14c>)
 800d960:	9200      	str	r2, [sp, #0]
 800d962:	2200      	movs	r2, #0
 800d964:	f000 f88e 	bl	800da84 <UART_WaitOnFlagUntilTimeout>
 800d968:	1e03      	subs	r3, r0, #0
 800d96a:	d022      	beq.n	800d9b2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d96c:	f3ef 8310 	mrs	r3, PRIMASK
 800d970:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d974:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d976:	2301      	movs	r3, #1
 800d978:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d97a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d97c:	f383 8810 	msr	PRIMASK, r3
}
 800d980:	46c0      	nop			@ (mov r8, r8)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	681a      	ldr	r2, [r3, #0]
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2180      	movs	r1, #128	@ 0x80
 800d98e:	438a      	bics	r2, r1
 800d990:	601a      	str	r2, [r3, #0]
 800d992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d998:	f383 8810 	msr	PRIMASK, r3
}
 800d99c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2288      	movs	r2, #136	@ 0x88
 800d9a2:	2120      	movs	r1, #32
 800d9a4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2284      	movs	r2, #132	@ 0x84
 800d9aa:	2100      	movs	r1, #0
 800d9ac:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d9ae:	2303      	movs	r3, #3
 800d9b0:	e060      	b.n	800da74 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	2204      	movs	r2, #4
 800d9ba:	4013      	ands	r3, r2
 800d9bc:	2b04      	cmp	r3, #4
 800d9be:	d146      	bne.n	800da4e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d9c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9c2:	2280      	movs	r2, #128	@ 0x80
 800d9c4:	03d1      	lsls	r1, r2, #15
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	4a2c      	ldr	r2, [pc, #176]	@ (800da7c <UART_CheckIdleState+0x14c>)
 800d9ca:	9200      	str	r2, [sp, #0]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	f000 f859 	bl	800da84 <UART_WaitOnFlagUntilTimeout>
 800d9d2:	1e03      	subs	r3, r0, #0
 800d9d4:	d03b      	beq.n	800da4e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9d6:	f3ef 8310 	mrs	r3, PRIMASK
 800d9da:	60fb      	str	r3, [r7, #12]
  return(result);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d9de:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	f383 8810 	msr	PRIMASK, r3
}
 800d9ea:	46c0      	nop			@ (mov r8, r8)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	4922      	ldr	r1, [pc, #136]	@ (800da80 <UART_CheckIdleState+0x150>)
 800d9f8:	400a      	ands	r2, r1
 800d9fa:	601a      	str	r2, [r3, #0]
 800d9fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	f383 8810 	msr	PRIMASK, r3
}
 800da06:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da08:	f3ef 8310 	mrs	r3, PRIMASK
 800da0c:	61bb      	str	r3, [r7, #24]
  return(result);
 800da0e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da10:	633b      	str	r3, [r7, #48]	@ 0x30
 800da12:	2301      	movs	r3, #1
 800da14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da16:	69fb      	ldr	r3, [r7, #28]
 800da18:	f383 8810 	msr	PRIMASK, r3
}
 800da1c:	46c0      	nop			@ (mov r8, r8)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	689a      	ldr	r2, [r3, #8]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2101      	movs	r1, #1
 800da2a:	438a      	bics	r2, r1
 800da2c:	609a      	str	r2, [r3, #8]
 800da2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da32:	6a3b      	ldr	r3, [r7, #32]
 800da34:	f383 8810 	msr	PRIMASK, r3
}
 800da38:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	228c      	movs	r2, #140	@ 0x8c
 800da3e:	2120      	movs	r1, #32
 800da40:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2284      	movs	r2, #132	@ 0x84
 800da46:	2100      	movs	r1, #0
 800da48:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da4a:	2303      	movs	r3, #3
 800da4c:	e012      	b.n	800da74 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2288      	movs	r2, #136	@ 0x88
 800da52:	2120      	movs	r1, #32
 800da54:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	228c      	movs	r2, #140	@ 0x8c
 800da5a:	2120      	movs	r1, #32
 800da5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2200      	movs	r2, #0
 800da62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2200      	movs	r2, #0
 800da68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2284      	movs	r2, #132	@ 0x84
 800da6e:	2100      	movs	r1, #0
 800da70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800da72:	2300      	movs	r3, #0
}
 800da74:	0018      	movs	r0, r3
 800da76:	46bd      	mov	sp, r7
 800da78:	b010      	add	sp, #64	@ 0x40
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	01ffffff 	.word	0x01ffffff
 800da80:	fffffedf 	.word	0xfffffedf

0800da84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b084      	sub	sp, #16
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60f8      	str	r0, [r7, #12]
 800da8c:	60b9      	str	r1, [r7, #8]
 800da8e:	603b      	str	r3, [r7, #0]
 800da90:	1dfb      	adds	r3, r7, #7
 800da92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da94:	e051      	b.n	800db3a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da96:	69bb      	ldr	r3, [r7, #24]
 800da98:	3301      	adds	r3, #1
 800da9a:	d04e      	beq.n	800db3a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da9c:	f7f9 f812 	bl	8006ac4 <HAL_GetTick>
 800daa0:	0002      	movs	r2, r0
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	1ad3      	subs	r3, r2, r3
 800daa6:	69ba      	ldr	r2, [r7, #24]
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d302      	bcc.n	800dab2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800daac:	69bb      	ldr	r3, [r7, #24]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d101      	bne.n	800dab6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800dab2:	2303      	movs	r3, #3
 800dab4:	e051      	b.n	800db5a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	2204      	movs	r2, #4
 800dabe:	4013      	ands	r3, r2
 800dac0:	d03b      	beq.n	800db3a <UART_WaitOnFlagUntilTimeout+0xb6>
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	2b80      	cmp	r3, #128	@ 0x80
 800dac6:	d038      	beq.n	800db3a <UART_WaitOnFlagUntilTimeout+0xb6>
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	2b40      	cmp	r3, #64	@ 0x40
 800dacc:	d035      	beq.n	800db3a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	69db      	ldr	r3, [r3, #28]
 800dad4:	2208      	movs	r2, #8
 800dad6:	4013      	ands	r3, r2
 800dad8:	2b08      	cmp	r3, #8
 800dada:	d111      	bne.n	800db00 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2208      	movs	r2, #8
 800dae2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	0018      	movs	r0, r3
 800dae8:	f000 f922 	bl	800dd30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2290      	movs	r2, #144	@ 0x90
 800daf0:	2108      	movs	r1, #8
 800daf2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2284      	movs	r2, #132	@ 0x84
 800daf8:	2100      	movs	r1, #0
 800dafa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800dafc:	2301      	movs	r3, #1
 800dafe:	e02c      	b.n	800db5a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	69da      	ldr	r2, [r3, #28]
 800db06:	2380      	movs	r3, #128	@ 0x80
 800db08:	011b      	lsls	r3, r3, #4
 800db0a:	401a      	ands	r2, r3
 800db0c:	2380      	movs	r3, #128	@ 0x80
 800db0e:	011b      	lsls	r3, r3, #4
 800db10:	429a      	cmp	r2, r3
 800db12:	d112      	bne.n	800db3a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	2280      	movs	r2, #128	@ 0x80
 800db1a:	0112      	lsls	r2, r2, #4
 800db1c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	0018      	movs	r0, r3
 800db22:	f000 f905 	bl	800dd30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2290      	movs	r2, #144	@ 0x90
 800db2a:	2120      	movs	r1, #32
 800db2c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	2284      	movs	r2, #132	@ 0x84
 800db32:	2100      	movs	r1, #0
 800db34:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800db36:	2303      	movs	r3, #3
 800db38:	e00f      	b.n	800db5a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	69db      	ldr	r3, [r3, #28]
 800db40:	68ba      	ldr	r2, [r7, #8]
 800db42:	4013      	ands	r3, r2
 800db44:	68ba      	ldr	r2, [r7, #8]
 800db46:	1ad3      	subs	r3, r2, r3
 800db48:	425a      	negs	r2, r3
 800db4a:	4153      	adcs	r3, r2
 800db4c:	b2db      	uxtb	r3, r3
 800db4e:	001a      	movs	r2, r3
 800db50:	1dfb      	adds	r3, r7, #7
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	429a      	cmp	r2, r3
 800db56:	d09e      	beq.n	800da96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800db58:	2300      	movs	r3, #0
}
 800db5a:	0018      	movs	r0, r3
 800db5c:	46bd      	mov	sp, r7
 800db5e:	b004      	add	sp, #16
 800db60:	bd80      	pop	{r7, pc}
	...

0800db64 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b090      	sub	sp, #64	@ 0x40
 800db68:	af00      	add	r7, sp, #0
 800db6a:	60f8      	str	r0, [r7, #12]
 800db6c:	60b9      	str	r1, [r7, #8]
 800db6e:	1dbb      	adds	r3, r7, #6
 800db70:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	68ba      	ldr	r2, [r7, #8]
 800db76:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	1dba      	adds	r2, r7, #6
 800db7c:	215c      	movs	r1, #92	@ 0x5c
 800db7e:	8812      	ldrh	r2, [r2, #0]
 800db80:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2290      	movs	r2, #144	@ 0x90
 800db86:	2100      	movs	r1, #0
 800db88:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	228c      	movs	r2, #140	@ 0x8c
 800db8e:	2122      	movs	r1, #34	@ 0x22
 800db90:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2280      	movs	r2, #128	@ 0x80
 800db96:	589b      	ldr	r3, [r3, r2]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d02d      	beq.n	800dbf8 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2280      	movs	r2, #128	@ 0x80
 800dba0:	589b      	ldr	r3, [r3, r2]
 800dba2:	4a40      	ldr	r2, [pc, #256]	@ (800dca4 <UART_Start_Receive_DMA+0x140>)
 800dba4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2280      	movs	r2, #128	@ 0x80
 800dbaa:	589b      	ldr	r3, [r3, r2]
 800dbac:	4a3e      	ldr	r2, [pc, #248]	@ (800dca8 <UART_Start_Receive_DMA+0x144>)
 800dbae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2280      	movs	r2, #128	@ 0x80
 800dbb4:	589b      	ldr	r3, [r3, r2]
 800dbb6:	4a3d      	ldr	r2, [pc, #244]	@ (800dcac <UART_Start_Receive_DMA+0x148>)
 800dbb8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2280      	movs	r2, #128	@ 0x80
 800dbbe:	589b      	ldr	r3, [r3, r2]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	2280      	movs	r2, #128	@ 0x80
 800dbc8:	5898      	ldr	r0, [r3, r2]
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	3324      	adds	r3, #36	@ 0x24
 800dbd0:	0019      	movs	r1, r3
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbd6:	001a      	movs	r2, r3
 800dbd8:	1dbb      	adds	r3, r7, #6
 800dbda:	881b      	ldrh	r3, [r3, #0]
 800dbdc:	f7fa fb40 	bl	8008260 <HAL_DMA_Start_IT>
 800dbe0:	1e03      	subs	r3, r0, #0
 800dbe2:	d009      	beq.n	800dbf8 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	2290      	movs	r2, #144	@ 0x90
 800dbe8:	2110      	movs	r1, #16
 800dbea:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	228c      	movs	r2, #140	@ 0x8c
 800dbf0:	2120      	movs	r1, #32
 800dbf2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	e050      	b.n	800dc9a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	691b      	ldr	r3, [r3, #16]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d019      	beq.n	800dc34 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc00:	f3ef 8310 	mrs	r3, PRIMASK
 800dc04:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800dc06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc10:	f383 8810 	msr	PRIMASK, r3
}
 800dc14:	46c0      	nop			@ (mov r8, r8)
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	2180      	movs	r1, #128	@ 0x80
 800dc22:	0049      	lsls	r1, r1, #1
 800dc24:	430a      	orrs	r2, r1
 800dc26:	601a      	str	r2, [r3, #0]
 800dc28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc2a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc2e:	f383 8810 	msr	PRIMASK, r3
}
 800dc32:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc34:	f3ef 8310 	mrs	r3, PRIMASK
 800dc38:	613b      	str	r3, [r7, #16]
  return(result);
 800dc3a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dc3e:	2301      	movs	r3, #1
 800dc40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	f383 8810 	msr	PRIMASK, r3
}
 800dc48:	46c0      	nop			@ (mov r8, r8)
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	689a      	ldr	r2, [r3, #8]
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	2101      	movs	r1, #1
 800dc56:	430a      	orrs	r2, r1
 800dc58:	609a      	str	r2, [r3, #8]
 800dc5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc5e:	69bb      	ldr	r3, [r7, #24]
 800dc60:	f383 8810 	msr	PRIMASK, r3
}
 800dc64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc66:	f3ef 8310 	mrs	r3, PRIMASK
 800dc6a:	61fb      	str	r3, [r7, #28]
  return(result);
 800dc6c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc70:	2301      	movs	r3, #1
 800dc72:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc74:	6a3b      	ldr	r3, [r7, #32]
 800dc76:	f383 8810 	msr	PRIMASK, r3
}
 800dc7a:	46c0      	nop			@ (mov r8, r8)
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	689a      	ldr	r2, [r3, #8]
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	2140      	movs	r1, #64	@ 0x40
 800dc88:	430a      	orrs	r2, r1
 800dc8a:	609a      	str	r2, [r3, #8]
 800dc8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc8e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc92:	f383 8810 	msr	PRIMASK, r3
}
 800dc96:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800dc98:	2300      	movs	r3, #0
}
 800dc9a:	0018      	movs	r0, r3
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	b010      	add	sp, #64	@ 0x40
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	46c0      	nop			@ (mov r8, r8)
 800dca4:	0800ddfd 	.word	0x0800ddfd
 800dca8:	0800df31 	.word	0x0800df31
 800dcac:	0800df79 	.word	0x0800df79

0800dcb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b08a      	sub	sp, #40	@ 0x28
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcb8:	f3ef 8310 	mrs	r3, PRIMASK
 800dcbc:	60bb      	str	r3, [r7, #8]
  return(result);
 800dcbe:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800dcc0:	627b      	str	r3, [r7, #36]	@ 0x24
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	f383 8810 	msr	PRIMASK, r3
}
 800dccc:	46c0      	nop			@ (mov r8, r8)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	681a      	ldr	r2, [r3, #0]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	21c0      	movs	r1, #192	@ 0xc0
 800dcda:	438a      	bics	r2, r1
 800dcdc:	601a      	str	r2, [r3, #0]
 800dcde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dce0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	f383 8810 	msr	PRIMASK, r3
}
 800dce8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcea:	f3ef 8310 	mrs	r3, PRIMASK
 800dcee:	617b      	str	r3, [r7, #20]
  return(result);
 800dcf0:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800dcf2:	623b      	str	r3, [r7, #32]
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcf8:	69bb      	ldr	r3, [r7, #24]
 800dcfa:	f383 8810 	msr	PRIMASK, r3
}
 800dcfe:	46c0      	nop			@ (mov r8, r8)
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	689a      	ldr	r2, [r3, #8]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4908      	ldr	r1, [pc, #32]	@ (800dd2c <UART_EndTxTransfer+0x7c>)
 800dd0c:	400a      	ands	r2, r1
 800dd0e:	609a      	str	r2, [r3, #8]
 800dd10:	6a3b      	ldr	r3, [r7, #32]
 800dd12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd14:	69fb      	ldr	r3, [r7, #28]
 800dd16:	f383 8810 	msr	PRIMASK, r3
}
 800dd1a:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2288      	movs	r2, #136	@ 0x88
 800dd20:	2120      	movs	r1, #32
 800dd22:	5099      	str	r1, [r3, r2]
}
 800dd24:	46c0      	nop			@ (mov r8, r8)
 800dd26:	46bd      	mov	sp, r7
 800dd28:	b00a      	add	sp, #40	@ 0x28
 800dd2a:	bd80      	pop	{r7, pc}
 800dd2c:	ff7fffff 	.word	0xff7fffff

0800dd30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b08e      	sub	sp, #56	@ 0x38
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd38:	f3ef 8310 	mrs	r3, PRIMASK
 800dd3c:	617b      	str	r3, [r7, #20]
  return(result);
 800dd3e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd40:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd42:	2301      	movs	r3, #1
 800dd44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd46:	69bb      	ldr	r3, [r7, #24]
 800dd48:	f383 8810 	msr	PRIMASK, r3
}
 800dd4c:	46c0      	nop			@ (mov r8, r8)
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	681a      	ldr	r2, [r3, #0]
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	4926      	ldr	r1, [pc, #152]	@ (800ddf4 <UART_EndRxTransfer+0xc4>)
 800dd5a:	400a      	ands	r2, r1
 800dd5c:	601a      	str	r2, [r3, #0]
 800dd5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd62:	69fb      	ldr	r3, [r7, #28]
 800dd64:	f383 8810 	msr	PRIMASK, r3
}
 800dd68:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd6a:	f3ef 8310 	mrs	r3, PRIMASK
 800dd6e:	623b      	str	r3, [r7, #32]
  return(result);
 800dd70:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd72:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd74:	2301      	movs	r3, #1
 800dd76:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd7a:	f383 8810 	msr	PRIMASK, r3
}
 800dd7e:	46c0      	nop			@ (mov r8, r8)
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	689a      	ldr	r2, [r3, #8]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	491b      	ldr	r1, [pc, #108]	@ (800ddf8 <UART_EndRxTransfer+0xc8>)
 800dd8c:	400a      	ands	r2, r1
 800dd8e:	609a      	str	r2, [r3, #8]
 800dd90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd92:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd96:	f383 8810 	msr	PRIMASK, r3
}
 800dd9a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	d118      	bne.n	800ddd6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dda4:	f3ef 8310 	mrs	r3, PRIMASK
 800dda8:	60bb      	str	r3, [r7, #8]
  return(result);
 800ddaa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ddae:	2301      	movs	r3, #1
 800ddb0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f383 8810 	msr	PRIMASK, r3
}
 800ddb8:	46c0      	nop			@ (mov r8, r8)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	2110      	movs	r1, #16
 800ddc6:	438a      	bics	r2, r1
 800ddc8:	601a      	str	r2, [r3, #0]
 800ddca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	f383 8810 	msr	PRIMASK, r3
}
 800ddd4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	228c      	movs	r2, #140	@ 0x8c
 800ddda:	2120      	movs	r1, #32
 800dddc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2200      	movs	r2, #0
 800dde2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2200      	movs	r2, #0
 800dde8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ddea:	46c0      	nop			@ (mov r8, r8)
 800ddec:	46bd      	mov	sp, r7
 800ddee:	b00e      	add	sp, #56	@ 0x38
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	46c0      	nop			@ (mov r8, r8)
 800ddf4:	fffffedf 	.word	0xfffffedf
 800ddf8:	effffffe 	.word	0xeffffffe

0800ddfc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b094      	sub	sp, #80	@ 0x50
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de08:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2220      	movs	r2, #32
 800de12:	4013      	ands	r3, r2
 800de14:	d16f      	bne.n	800def6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800de16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de18:	225e      	movs	r2, #94	@ 0x5e
 800de1a:	2100      	movs	r1, #0
 800de1c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de1e:	f3ef 8310 	mrs	r3, PRIMASK
 800de22:	61bb      	str	r3, [r7, #24]
  return(result);
 800de24:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de26:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de28:	2301      	movs	r3, #1
 800de2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de2c:	69fb      	ldr	r3, [r7, #28]
 800de2e:	f383 8810 	msr	PRIMASK, r3
}
 800de32:	46c0      	nop			@ (mov r8, r8)
 800de34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	681a      	ldr	r2, [r3, #0]
 800de3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	493b      	ldr	r1, [pc, #236]	@ (800df2c <UART_DMAReceiveCplt+0x130>)
 800de40:	400a      	ands	r2, r1
 800de42:	601a      	str	r2, [r3, #0]
 800de44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de46:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de48:	6a3b      	ldr	r3, [r7, #32]
 800de4a:	f383 8810 	msr	PRIMASK, r3
}
 800de4e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de50:	f3ef 8310 	mrs	r3, PRIMASK
 800de54:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800de56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de58:	647b      	str	r3, [r7, #68]	@ 0x44
 800de5a:	2301      	movs	r3, #1
 800de5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de60:	f383 8810 	msr	PRIMASK, r3
}
 800de64:	46c0      	nop			@ (mov r8, r8)
 800de66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	689a      	ldr	r2, [r3, #8]
 800de6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	2101      	movs	r1, #1
 800de72:	438a      	bics	r2, r1
 800de74:	609a      	str	r2, [r3, #8]
 800de76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de7c:	f383 8810 	msr	PRIMASK, r3
}
 800de80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de82:	f3ef 8310 	mrs	r3, PRIMASK
 800de86:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800de88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de8a:	643b      	str	r3, [r7, #64]	@ 0x40
 800de8c:	2301      	movs	r3, #1
 800de8e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de92:	f383 8810 	msr	PRIMASK, r3
}
 800de96:	46c0      	nop			@ (mov r8, r8)
 800de98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	689a      	ldr	r2, [r3, #8]
 800de9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	2140      	movs	r1, #64	@ 0x40
 800dea4:	438a      	bics	r2, r1
 800dea6:	609a      	str	r2, [r3, #8]
 800dea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800deaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800deac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deae:	f383 8810 	msr	PRIMASK, r3
}
 800deb2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800deb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800deb6:	228c      	movs	r2, #140	@ 0x8c
 800deb8:	2120      	movs	r1, #32
 800deba:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800debc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800debe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	d118      	bne.n	800def6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dec4:	f3ef 8310 	mrs	r3, PRIMASK
 800dec8:	60fb      	str	r3, [r7, #12]
  return(result);
 800deca:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800decc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dece:	2301      	movs	r3, #1
 800ded0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	f383 8810 	msr	PRIMASK, r3
}
 800ded8:	46c0      	nop			@ (mov r8, r8)
 800deda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	681a      	ldr	r2, [r3, #0]
 800dee0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	2110      	movs	r1, #16
 800dee6:	438a      	bics	r2, r1
 800dee8:	601a      	str	r2, [r3, #0]
 800deea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800deec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	f383 8810 	msr	PRIMASK, r3
}
 800def4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800def6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800def8:	2200      	movs	r2, #0
 800defa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800defc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800defe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df00:	2b01      	cmp	r3, #1
 800df02:	d109      	bne.n	800df18 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800df04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df06:	22c0      	movs	r2, #192	@ 0xc0
 800df08:	589b      	ldr	r3, [r3, r2]
 800df0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800df0c:	215c      	movs	r1, #92	@ 0x5c
 800df0e:	5a51      	ldrh	r1, [r2, r1]
 800df10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800df12:	0010      	movs	r0, r2
 800df14:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800df16:	e005      	b.n	800df24 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800df18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df1a:	22a0      	movs	r2, #160	@ 0xa0
 800df1c:	589b      	ldr	r3, [r3, r2]
 800df1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800df20:	0010      	movs	r0, r2
 800df22:	4798      	blx	r3
}
 800df24:	46c0      	nop			@ (mov r8, r8)
 800df26:	46bd      	mov	sp, r7
 800df28:	b014      	add	sp, #80	@ 0x50
 800df2a:	bd80      	pop	{r7, pc}
 800df2c:	fffffeff 	.word	0xfffffeff

0800df30 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b084      	sub	sp, #16
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df3c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2201      	movs	r2, #1
 800df42:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df48:	2b01      	cmp	r3, #1
 800df4a:	d10b      	bne.n	800df64 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	22c0      	movs	r2, #192	@ 0xc0
 800df50:	589b      	ldr	r3, [r3, r2]
 800df52:	68fa      	ldr	r2, [r7, #12]
 800df54:	215c      	movs	r1, #92	@ 0x5c
 800df56:	5a52      	ldrh	r2, [r2, r1]
 800df58:	0852      	lsrs	r2, r2, #1
 800df5a:	b291      	uxth	r1, r2
 800df5c:	68fa      	ldr	r2, [r7, #12]
 800df5e:	0010      	movs	r0, r2
 800df60:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800df62:	e005      	b.n	800df70 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	229c      	movs	r2, #156	@ 0x9c
 800df68:	589b      	ldr	r3, [r3, r2]
 800df6a:	68fa      	ldr	r2, [r7, #12]
 800df6c:	0010      	movs	r0, r2
 800df6e:	4798      	blx	r3
}
 800df70:	46c0      	nop			@ (mov r8, r8)
 800df72:	46bd      	mov	sp, r7
 800df74:	b004      	add	sp, #16
 800df76:	bd80      	pop	{r7, pc}

0800df78 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b086      	sub	sp, #24
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df84:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	2288      	movs	r2, #136	@ 0x88
 800df8a:	589b      	ldr	r3, [r3, r2]
 800df8c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	228c      	movs	r2, #140	@ 0x8c
 800df92:	589b      	ldr	r3, [r3, r2]
 800df94:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	689b      	ldr	r3, [r3, #8]
 800df9c:	2280      	movs	r2, #128	@ 0x80
 800df9e:	4013      	ands	r3, r2
 800dfa0:	2b80      	cmp	r3, #128	@ 0x80
 800dfa2:	d10a      	bne.n	800dfba <UART_DMAError+0x42>
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	2b21      	cmp	r3, #33	@ 0x21
 800dfa8:	d107      	bne.n	800dfba <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	2256      	movs	r2, #86	@ 0x56
 800dfae:	2100      	movs	r1, #0
 800dfb0:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	0018      	movs	r0, r3
 800dfb6:	f7ff fe7b 	bl	800dcb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	689b      	ldr	r3, [r3, #8]
 800dfc0:	2240      	movs	r2, #64	@ 0x40
 800dfc2:	4013      	ands	r3, r2
 800dfc4:	2b40      	cmp	r3, #64	@ 0x40
 800dfc6:	d10a      	bne.n	800dfde <UART_DMAError+0x66>
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2b22      	cmp	r3, #34	@ 0x22
 800dfcc:	d107      	bne.n	800dfde <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	225e      	movs	r2, #94	@ 0x5e
 800dfd2:	2100      	movs	r1, #0
 800dfd4:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	0018      	movs	r0, r3
 800dfda:	f7ff fea9 	bl	800dd30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	2290      	movs	r2, #144	@ 0x90
 800dfe2:	589b      	ldr	r3, [r3, r2]
 800dfe4:	2210      	movs	r2, #16
 800dfe6:	431a      	orrs	r2, r3
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	2190      	movs	r1, #144	@ 0x90
 800dfec:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	22a4      	movs	r2, #164	@ 0xa4
 800dff2:	589b      	ldr	r3, [r3, r2]
 800dff4:	697a      	ldr	r2, [r7, #20]
 800dff6:	0010      	movs	r0, r2
 800dff8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dffa:	46c0      	nop			@ (mov r8, r8)
 800dffc:	46bd      	mov	sp, r7
 800dffe:	b006      	add	sp, #24
 800e000:	bd80      	pop	{r7, pc}

0800e002 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e002:	b580      	push	{r7, lr}
 800e004:	b084      	sub	sp, #16
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e00e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	225e      	movs	r2, #94	@ 0x5e
 800e014:	2100      	movs	r1, #0
 800e016:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2256      	movs	r2, #86	@ 0x56
 800e01c:	2100      	movs	r1, #0
 800e01e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	22a4      	movs	r2, #164	@ 0xa4
 800e024:	589b      	ldr	r3, [r3, r2]
 800e026:	68fa      	ldr	r2, [r7, #12]
 800e028:	0010      	movs	r0, r2
 800e02a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e02c:	46c0      	nop			@ (mov r8, r8)
 800e02e:	46bd      	mov	sp, r7
 800e030:	b004      	add	sp, #16
 800e032:	bd80      	pop	{r7, pc}

0800e034 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b086      	sub	sp, #24
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e03c:	f3ef 8310 	mrs	r3, PRIMASK
 800e040:	60bb      	str	r3, [r7, #8]
  return(result);
 800e042:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e044:	617b      	str	r3, [r7, #20]
 800e046:	2301      	movs	r3, #1
 800e048:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f383 8810 	msr	PRIMASK, r3
}
 800e050:	46c0      	nop			@ (mov r8, r8)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	681a      	ldr	r2, [r3, #0]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2140      	movs	r1, #64	@ 0x40
 800e05e:	438a      	bics	r2, r1
 800e060:	601a      	str	r2, [r3, #0]
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	f383 8810 	msr	PRIMASK, r3
}
 800e06c:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2288      	movs	r2, #136	@ 0x88
 800e072:	2120      	movs	r1, #32
 800e074:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2200      	movs	r2, #0
 800e07a:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2298      	movs	r2, #152	@ 0x98
 800e080:	589b      	ldr	r3, [r3, r2]
 800e082:	687a      	ldr	r2, [r7, #4]
 800e084:	0010      	movs	r0, r2
 800e086:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e088:	46c0      	nop			@ (mov r8, r8)
 800e08a:	46bd      	mov	sp, r7
 800e08c:	b006      	add	sp, #24
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e098:	46c0      	nop			@ (mov r8, r8)
 800e09a:	46bd      	mov	sp, r7
 800e09c:	b002      	add	sp, #8
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e0a8:	46c0      	nop			@ (mov r8, r8)
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	b002      	add	sp, #8
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b082      	sub	sp, #8
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e0b8:	46c0      	nop			@ (mov r8, r8)
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	b002      	add	sp, #8
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <memset>:
 800e0c0:	0003      	movs	r3, r0
 800e0c2:	1882      	adds	r2, r0, r2
 800e0c4:	4293      	cmp	r3, r2
 800e0c6:	d100      	bne.n	800e0ca <memset+0xa>
 800e0c8:	4770      	bx	lr
 800e0ca:	7019      	strb	r1, [r3, #0]
 800e0cc:	3301      	adds	r3, #1
 800e0ce:	e7f9      	b.n	800e0c4 <memset+0x4>

0800e0d0 <__libc_init_array>:
 800e0d0:	b570      	push	{r4, r5, r6, lr}
 800e0d2:	2600      	movs	r6, #0
 800e0d4:	4c0c      	ldr	r4, [pc, #48]	@ (800e108 <__libc_init_array+0x38>)
 800e0d6:	4d0d      	ldr	r5, [pc, #52]	@ (800e10c <__libc_init_array+0x3c>)
 800e0d8:	1b64      	subs	r4, r4, r5
 800e0da:	10a4      	asrs	r4, r4, #2
 800e0dc:	42a6      	cmp	r6, r4
 800e0de:	d109      	bne.n	800e0f4 <__libc_init_array+0x24>
 800e0e0:	2600      	movs	r6, #0
 800e0e2:	f000 f823 	bl	800e12c <_init>
 800e0e6:	4c0a      	ldr	r4, [pc, #40]	@ (800e110 <__libc_init_array+0x40>)
 800e0e8:	4d0a      	ldr	r5, [pc, #40]	@ (800e114 <__libc_init_array+0x44>)
 800e0ea:	1b64      	subs	r4, r4, r5
 800e0ec:	10a4      	asrs	r4, r4, #2
 800e0ee:	42a6      	cmp	r6, r4
 800e0f0:	d105      	bne.n	800e0fe <__libc_init_array+0x2e>
 800e0f2:	bd70      	pop	{r4, r5, r6, pc}
 800e0f4:	00b3      	lsls	r3, r6, #2
 800e0f6:	58eb      	ldr	r3, [r5, r3]
 800e0f8:	4798      	blx	r3
 800e0fa:	3601      	adds	r6, #1
 800e0fc:	e7ee      	b.n	800e0dc <__libc_init_array+0xc>
 800e0fe:	00b3      	lsls	r3, r6, #2
 800e100:	58eb      	ldr	r3, [r5, r3]
 800e102:	4798      	blx	r3
 800e104:	3601      	adds	r6, #1
 800e106:	e7f2      	b.n	800e0ee <__libc_init_array+0x1e>
 800e108:	0800ebe0 	.word	0x0800ebe0
 800e10c:	0800ebe0 	.word	0x0800ebe0
 800e110:	0800ebe4 	.word	0x0800ebe4
 800e114:	0800ebe0 	.word	0x0800ebe0

0800e118 <memcpy>:
 800e118:	2300      	movs	r3, #0
 800e11a:	b510      	push	{r4, lr}
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d100      	bne.n	800e122 <memcpy+0xa>
 800e120:	bd10      	pop	{r4, pc}
 800e122:	5ccc      	ldrb	r4, [r1, r3]
 800e124:	54c4      	strb	r4, [r0, r3]
 800e126:	3301      	adds	r3, #1
 800e128:	e7f8      	b.n	800e11c <memcpy+0x4>
	...

0800e12c <_init>:
 800e12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e12e:	46c0      	nop			@ (mov r8, r8)
 800e130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e132:	bc08      	pop	{r3}
 800e134:	469e      	mov	lr, r3
 800e136:	4770      	bx	lr

0800e138 <_fini>:
 800e138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e13a:	46c0      	nop			@ (mov r8, r8)
 800e13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e13e:	bc08      	pop	{r3}
 800e140:	469e      	mov	lr, r3
 800e142:	4770      	bx	lr
 800e144:	0000      	movs	r0, r0
	...

0800e148 <__FLASH_Program_Fast_veneer>:
 800e148:	b401      	push	{r0}
 800e14a:	4802      	ldr	r0, [pc, #8]	@ (800e154 <__FLASH_Program_Fast_veneer+0xc>)
 800e14c:	4684      	mov	ip, r0
 800e14e:	bc01      	pop	{r0}
 800e150:	4760      	bx	ip
 800e152:	bf00      	nop
 800e154:	20000459 	.word	0x20000459

Disassembly of section .data:

20000000 <user_preset_0>:
20000000:	407f6e7f 00000000                       .n.@....

20000008 <user_preset_1>:
20000008:	40402840 00000040                       @(@@@...

20000010 <user_preset_2>:
20000010:	007f4000 00000020                       .@.. ...

20000018 <user_preset_3>:
20000018:	7f7f4040 00000064                       @@..d...

20000020 <led_blink_period>:
20000020:	0000012c                                ,...

20000024 <tap_tempo_switch_state_counter.1>:
20000024:	                                         .

20000025 <preset_save_mode_is_inactive.6>:
20000025:	                                         .

20000026 <preset.4>:
20000026:	                                         .

20000027 <first_time.3>:
20000027:	                                         .

20000028 <delay_line>:
	...
20000428:	00010000 00000200                       ........

20000430 <speed_fsm>:
20000430:	00000001                                ....

20000434 <depth_fsm>:
20000434:	00000001                                ....

20000438 <waveshape_fsm>:
20000438:	00000001                                ....

2000043c <symmetry_fsm>:
2000043c:	00000001                                ....

20000440 <phase_fsm>:
20000440:	00000001                                ....

20000444 <IP_CAP_fsm>:
20000444:	00000400                                ....

20000448 <LED_fsm>:
20000448:	00000001                                ....

2000044c <SystemCoreClock>:
2000044c:	00f42400                                .$..

20000450 <uwTickPrio>:
20000450:	00000004                                ....

20000454 <uwTickFreq>:
20000454:	00000001                                ....

20000458 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000458:	b580      	push	{r7, lr}
2000045a:	b088      	sub	sp, #32
2000045c:	af00      	add	r7, sp, #0
2000045e:	6078      	str	r0, [r7, #4]
20000460:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20000462:	231f      	movs	r3, #31
20000464:	18fb      	adds	r3, r7, r3
20000466:	2200      	movs	r2, #0
20000468:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000046a:	687b      	ldr	r3, [r7, #4]
2000046c:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
2000046e:	683b      	ldr	r3, [r7, #0]
20000470:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000472:	4b1a      	ldr	r3, [pc, #104]	@ (200004dc <FLASH_Program_Fast+0x84>)
20000474:	695a      	ldr	r2, [r3, #20]
20000476:	4b19      	ldr	r3, [pc, #100]	@ (200004dc <FLASH_Program_Fast+0x84>)
20000478:	2180      	movs	r1, #128	@ 0x80
2000047a:	02c9      	lsls	r1, r1, #11
2000047c:	430a      	orrs	r2, r1
2000047e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000480:	f3ef 8310 	mrs	r3, PRIMASK
20000484:	60fb      	str	r3, [r7, #12]
  return(result);
20000486:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000488:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000048a:	b672      	cpsid	i
}
2000048c:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000048e:	e00f      	b.n	200004b0 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000490:	697a      	ldr	r2, [r7, #20]
20000492:	69bb      	ldr	r3, [r7, #24]
20000494:	6812      	ldr	r2, [r2, #0]
20000496:	601a      	str	r2, [r3, #0]
    src += 4U;
20000498:	697b      	ldr	r3, [r7, #20]
2000049a:	3304      	adds	r3, #4
2000049c:	617b      	str	r3, [r7, #20]
    dest += 4U;
2000049e:	69bb      	ldr	r3, [r7, #24]
200004a0:	3304      	adds	r3, #4
200004a2:	61bb      	str	r3, [r7, #24]
    index++;
200004a4:	211f      	movs	r1, #31
200004a6:	187b      	adds	r3, r7, r1
200004a8:	781a      	ldrb	r2, [r3, #0]
200004aa:	187b      	adds	r3, r7, r1
200004ac:	3201      	adds	r2, #1
200004ae:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200004b0:	231f      	movs	r3, #31
200004b2:	18fb      	adds	r3, r7, r3
200004b4:	781b      	ldrb	r3, [r3, #0]
200004b6:	2b3f      	cmp	r3, #63	@ 0x3f
200004b8:	d9ea      	bls.n	20000490 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200004ba:	46c0      	nop			@ (mov r8, r8)
200004bc:	4b07      	ldr	r3, [pc, #28]	@ (200004dc <FLASH_Program_Fast+0x84>)
200004be:	691a      	ldr	r2, [r3, #16]
200004c0:	2380      	movs	r3, #128	@ 0x80
200004c2:	025b      	lsls	r3, r3, #9
200004c4:	4013      	ands	r3, r2
200004c6:	d1f9      	bne.n	200004bc <FLASH_Program_Fast+0x64>
200004c8:	693b      	ldr	r3, [r7, #16]
200004ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200004cc:	68bb      	ldr	r3, [r7, #8]
200004ce:	f383 8810 	msr	PRIMASK, r3
}
200004d2:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200004d4:	46c0      	nop			@ (mov r8, r8)
200004d6:	46bd      	mov	sp, r7
200004d8:	b008      	add	sp, #32
200004da:	bd80      	pop	{r7, pc}
200004dc:	40022000 	.word	0x40022000
