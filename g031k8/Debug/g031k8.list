
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d534  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  0800d5f0  0800d5f0  0000e5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e060  0800e060  00010458  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e060  0800e060  0000f060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e068  0800e068  00010458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e068  0800e068  0000f068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e06c  0800e06c  0000f06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000458  20000000  0800e070  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000890  20000458  0800e4c8  00010458  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ce8  0800e4c8  00010ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020f6b  00000000  00000000  00010480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000472f  00000000  00000000  000313eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  00035b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000126c  00000000  00000000  000372f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015a59  00000000  00000000  0003855c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000833f  00000000  00000000  0004dfb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000562f4  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000054a0  00000000  00000000  00056338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000054  00000000  00000000  0005b7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000458 	.word	0x20000458
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800d5d8 	.word	0x0800d5d8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000045c 	.word	0x2000045c
 8000100:	0800d5d8 	.word	0x0800d5d8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <Initialise_Preset_Arrays>:
volatile enum Validate user_presets_used_array[NUM_PRESETS] = {(enum Validate)NO};

volatile uint8_t CC_array[5] = {0};

//FUNCTION DEFINITIONS
uint8_t Initialise_Preset_Arrays(void){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]
 8000454:	e047      	b.n	80004e6 <Initialise_Preset_Arrays+0x9e>

		if(i == 0){
 8000456:	1dfb      	adds	r3, r7, #7
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d10c      	bne.n	8000478 <Initialise_Preset_Arrays+0x30>
			factory_presets_array[i] = &factory_preset_0;
 800045e:	1dfb      	adds	r3, r7, #7
 8000460:	781a      	ldrb	r2, [r3, #0]
 8000462:	4b25      	ldr	r3, [pc, #148]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 8000464:	0092      	lsls	r2, r2, #2
 8000466:	4925      	ldr	r1, [pc, #148]	@ (80004fc <Initialise_Preset_Arrays+0xb4>)
 8000468:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_0;
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	781a      	ldrb	r2, [r3, #0]
 800046e:	4b24      	ldr	r3, [pc, #144]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 8000470:	0092      	lsls	r2, r2, #2
 8000472:	4924      	ldr	r1, [pc, #144]	@ (8000504 <Initialise_Preset_Arrays+0xbc>)
 8000474:	50d1      	str	r1, [r2, r3]
 8000476:	e031      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 1){
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d10c      	bne.n	800049a <Initialise_Preset_Arrays+0x52>
			factory_presets_array[i] = &factory_preset_1;
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	781a      	ldrb	r2, [r3, #0]
 8000484:	4b1c      	ldr	r3, [pc, #112]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 8000486:	0092      	lsls	r2, r2, #2
 8000488:	491f      	ldr	r1, [pc, #124]	@ (8000508 <Initialise_Preset_Arrays+0xc0>)
 800048a:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_1;
 800048c:	1dfb      	adds	r3, r7, #7
 800048e:	781a      	ldrb	r2, [r3, #0]
 8000490:	4b1b      	ldr	r3, [pc, #108]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 8000492:	0092      	lsls	r2, r2, #2
 8000494:	491d      	ldr	r1, [pc, #116]	@ (800050c <Initialise_Preset_Arrays+0xc4>)
 8000496:	50d1      	str	r1, [r2, r3]
 8000498:	e020      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 2){
 800049a:	1dfb      	adds	r3, r7, #7
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b02      	cmp	r3, #2
 80004a0:	d10c      	bne.n	80004bc <Initialise_Preset_Arrays+0x74>
			factory_presets_array[i] = &factory_preset_2;
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	4919      	ldr	r1, [pc, #100]	@ (8000510 <Initialise_Preset_Arrays+0xc8>)
 80004ac:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_2;
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781a      	ldrb	r2, [r3, #0]
 80004b2:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 80004b4:	0092      	lsls	r2, r2, #2
 80004b6:	4917      	ldr	r1, [pc, #92]	@ (8000514 <Initialise_Preset_Arrays+0xcc>)
 80004b8:	50d1      	str	r1, [r2, r3]
 80004ba:	e00f      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 3){
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d10b      	bne.n	80004dc <Initialise_Preset_Arrays+0x94>
			factory_presets_array[i] = &factory_preset_3;
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 80004ca:	0092      	lsls	r2, r2, #2
 80004cc:	4912      	ldr	r1, [pc, #72]	@ (8000518 <Initialise_Preset_Arrays+0xd0>)
 80004ce:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_3;
 80004d0:	1dfb      	adds	r3, r7, #7
 80004d2:	781a      	ldrb	r2, [r3, #0]
 80004d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 80004d6:	0092      	lsls	r2, r2, #2
 80004d8:	4910      	ldr	r1, [pc, #64]	@ (800051c <Initialise_Preset_Arrays+0xd4>)
 80004da:	50d1      	str	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 80004dc:	1dfb      	adds	r3, r7, #7
 80004de:	781a      	ldrb	r2, [r3, #0]
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	3201      	adds	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b0f      	cmp	r3, #15
 80004ec:	d9b3      	bls.n	8000456 <Initialise_Preset_Arrays+0xe>
		}
	}

	return 1;
 80004ee:	2301      	movs	r3, #1
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000474 	.word	0x20000474
 80004fc:	0800d5f0 	.word	0x0800d5f0
 8000500:	20000484 	.word	0x20000484
 8000504:	20000000 	.word	0x20000000
 8000508:	0800d5f8 	.word	0x0800d5f8
 800050c:	20000008 	.word	0x20000008
 8000510:	0800d600 	.word	0x0800d600
 8000514:	20000010 	.word	0x20000010
 8000518:	0800d608 	.word	0x0800d608
 800051c:	20000018 	.word	0x20000018

08000520 <Update_Params_Based_On_Mode_Selected>:

uint8_t Update_Params_Based_On_Mode_Selected(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0

	if(waveshape_fsm.current_state == MANUAL_MODE){
 8000524:	4b68      	ldr	r3, [pc, #416]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	2b01      	cmp	r3, #1
 800052c:	d104      	bne.n	8000538 <Update_Params_Based_On_Mode_Selected+0x18>
		params.waveshape = params_manual.waveshape;
 800052e:	4b67      	ldr	r3, [pc, #412]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000530:	799b      	ldrb	r3, [r3, #6]
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b66      	ldr	r3, [pc, #408]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000536:	719a      	strb	r2, [r3, #6]
	}
	if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8000538:	4b66      	ldr	r3, [pc, #408]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b01      	cmp	r3, #1
 8000540:	d104      	bne.n	800054c <Update_Params_Based_On_Mode_Selected+0x2c>
		params.speed = params_manual.speed;
 8000542:	4b62      	ldr	r3, [pc, #392]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000544:	891b      	ldrh	r3, [r3, #8]
 8000546:	b29a      	uxth	r2, r3
 8000548:	4b61      	ldr	r3, [pc, #388]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800054a:	811a      	strh	r2, [r3, #8]
	}
	if(depth_fsm.current_state == MANUAL_MODE){
 800054c:	4b62      	ldr	r3, [pc, #392]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	2b01      	cmp	r3, #1
 8000554:	d104      	bne.n	8000560 <Update_Params_Based_On_Mode_Selected+0x40>
		params.depth = params_manual.depth;
 8000556:	4b5d      	ldr	r3, [pc, #372]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000558:	7a9b      	ldrb	r3, [r3, #10]
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b5c      	ldr	r3, [pc, #368]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800055e:	729a      	strb	r2, [r3, #10]
	}
	if(symmetry_fsm.current_state == MANUAL_MODE){
 8000560:	4b5e      	ldr	r3, [pc, #376]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b01      	cmp	r3, #1
 8000568:	d104      	bne.n	8000574 <Update_Params_Based_On_Mode_Selected+0x54>
		params.symmetry = params_manual.symmetry;
 800056a:	4b58      	ldr	r3, [pc, #352]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 800056c:	899b      	ldrh	r3, [r3, #12]
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b57      	ldr	r3, [pc, #348]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000572:	819a      	strh	r2, [r3, #12]
	}
	if(phase_fsm.current_state == MANUAL_MODE){
 8000574:	4b5a      	ldr	r3, [pc, #360]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b01      	cmp	r3, #1
 800057c:	d104      	bne.n	8000588 <Update_Params_Based_On_Mode_Selected+0x68>
		params.duty_delay_line_read_pointer_offset = params_manual.duty_delay_line_read_pointer_offset;
 800057e:	4b53      	ldr	r3, [pc, #332]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000580:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000582:	b29a      	uxth	r2, r3
 8000584:	4b52      	ldr	r3, [pc, #328]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000586:	845a      	strh	r2, [r3, #34]	@ 0x22
	}

	if(waveshape_fsm.current_state == PC_MODE){
 8000588:	4b4f      	ldr	r3, [pc, #316]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b03      	cmp	r3, #3
 8000590:	d10e      	bne.n	80005b0 <Update_Params_Based_On_Mode_Selected+0x90>
		Update_Waveshape_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000592:	4b54      	ldr	r3, [pc, #336]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	1e5a      	subs	r2, r3, #1
 800059a:	0013      	movs	r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	189b      	adds	r3, r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	4a51      	ldr	r2, [pc, #324]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005a4:	189b      	adds	r3, r3, r2
 80005a6:	4a4a      	ldr	r2, [pc, #296]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 f8d1 	bl	8000752 <Update_Waveshape_with_Converted_Preset_Value>
	}
	if(speed_fsm.current_state.shared_state == PC_MODE){
 80005b0:	4b48      	ldr	r3, [pc, #288]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d10e      	bne.n	80005d8 <Update_Params_Based_On_Mode_Selected+0xb8>
		Update_Speed_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005ba:	4b4a      	ldr	r3, [pc, #296]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	1e5a      	subs	r2, r3, #1
 80005c2:	0013      	movs	r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	189b      	adds	r3, r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4a47      	ldr	r2, [pc, #284]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005cc:	189b      	adds	r3, r3, r2
 80005ce:	4a40      	ldr	r2, [pc, #256]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005d0:	0011      	movs	r1, r2
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 f8e6 	bl	80007a4 <Update_Speed_with_Converted_Preset_Value>
	}
	if(depth_fsm.current_state == PC_MODE){
 80005d8:	4b3f      	ldr	r3, [pc, #252]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d10e      	bne.n	8000600 <Update_Params_Based_On_Mode_Selected+0xe0>
		Update_Depth_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005e2:	4b40      	ldr	r3, [pc, #256]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	1e5a      	subs	r2, r3, #1
 80005ea:	0013      	movs	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	189b      	adds	r3, r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	4a3d      	ldr	r2, [pc, #244]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005f4:	189b      	adds	r3, r3, r2
 80005f6:	4a36      	ldr	r2, [pc, #216]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005f8:	0011      	movs	r1, r2
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 f8e1 	bl	80007c2 <Update_Depth_with_Converted_Preset_Value>
	}
	if(symmetry_fsm.current_state == PC_MODE){
 8000600:	4b36      	ldr	r3, [pc, #216]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b03      	cmp	r3, #3
 8000608:	d10e      	bne.n	8000628 <Update_Params_Based_On_Mode_Selected+0x108>
		Update_Symmetry_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 800060a:	4b36      	ldr	r3, [pc, #216]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	1e5a      	subs	r2, r3, #1
 8000612:	0013      	movs	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	189b      	adds	r3, r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	4a33      	ldr	r2, [pc, #204]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 800061c:	189b      	adds	r3, r3, r2
 800061e:	4a2c      	ldr	r2, [pc, #176]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000620:	0011      	movs	r1, r2
 8000622:	0018      	movs	r0, r3
 8000624:	f000 f8dc 	bl	80007e0 <Update_Symmetry_with_Converted_Preset_Value>
	}
	if(phase_fsm.current_state == PC_MODE){
 8000628:	4b2d      	ldr	r3, [pc, #180]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b03      	cmp	r3, #3
 8000630:	d10e      	bne.n	8000650 <Update_Params_Based_On_Mode_Selected+0x130>
		Update_Phase_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000632:	4b2c      	ldr	r3, [pc, #176]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	0013      	movs	r3, r2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	189b      	adds	r3, r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4a29      	ldr	r2, [pc, #164]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 8000644:	189b      	adds	r3, r3, r2
 8000646:	4a22      	ldr	r2, [pc, #136]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f000 f8d7 	bl	80007fe <Update_Phase_with_Converted_Preset_Value>
	}


	if(waveshape_fsm.current_state == CC_MODE){
 8000650:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b02      	cmp	r3, #2
 8000658:	d105      	bne.n	8000666 <Update_Params_Based_On_Mode_Selected+0x146>
		Update_Waveshape_with_CC_Value(&CC_array[WAVESHAPE_ARR], &params);
 800065a:	4a1d      	ldr	r2, [pc, #116]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800065c:	4b23      	ldr	r3, [pc, #140]	@ (80006ec <Update_Params_Based_On_Mode_Selected+0x1cc>)
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fa4f 	bl	8000b04 <Update_Waveshape_with_CC_Value>
	}
	if(speed_fsm.current_state.shared_state == CC_MODE){
 8000666:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b02      	cmp	r3, #2
 800066e:	d105      	bne.n	800067c <Update_Params_Based_On_Mode_Selected+0x15c>
		Update_Speed_with_CC_Value(&CC_array[SPEED_ARR], &params);
 8000670:	4a17      	ldr	r2, [pc, #92]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000672:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <Update_Params_Based_On_Mode_Selected+0x1d0>)
 8000674:	0011      	movs	r1, r2
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fa69 	bl	8000b4e <Update_Speed_with_CC_Value>
	}
	if(depth_fsm.current_state == CC_MODE){
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b02      	cmp	r3, #2
 8000684:	d105      	bne.n	8000692 <Update_Params_Based_On_Mode_Selected+0x172>
		Update_Depth_with_CC_Value(&CC_array[DEPTH_ARR], &params);
 8000686:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000688:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <Update_Params_Based_On_Mode_Selected+0x1d4>)
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fa77 	bl	8000b80 <Update_Depth_with_CC_Value>
	}
	if(symmetry_fsm.current_state == CC_MODE){
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b02      	cmp	r3, #2
 800069a:	d105      	bne.n	80006a8 <Update_Params_Based_On_Mode_Selected+0x188>
		Update_Symmetry_with_CC_Value(&CC_array[SYMMETRY_ARR], &params);
 800069c:	4a0c      	ldr	r2, [pc, #48]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <Update_Params_Based_On_Mode_Selected+0x1d8>)
 80006a0:	0011      	movs	r1, r2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 fa7f 	bl	8000ba6 <Update_Symmetry_with_CC_Value>
	}
	if(phase_fsm.current_state == CC_MODE){
 80006a8:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	d105      	bne.n	80006be <Update_Params_Based_On_Mode_Selected+0x19e>
		Update_Phase_with_CC_Value(&CC_array[PHASE_ARR], &params);
 80006b2:	4a07      	ldr	r2, [pc, #28]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006b4:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <Update_Params_Based_On_Mode_Selected+0x1dc>)
 80006b6:	0011      	movs	r1, r2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fa8d 	bl	8000bd8 <Update_Phase_with_CC_Value>
	}

	return 1;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	0018      	movs	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	20000438 	.word	0x20000438
 80006cc:	20000c74 	.word	0x20000c74
 80006d0:	20000c50 	.word	0x20000c50
 80006d4:	20000430 	.word	0x20000430
 80006d8:	20000434 	.word	0x20000434
 80006dc:	2000043c 	.word	0x2000043c
 80006e0:	20000440 	.word	0x20000440
 80006e4:	200004bc 	.word	0x200004bc
 80006e8:	20000494 	.word	0x20000494
 80006ec:	200004c4 	.word	0x200004c4
 80006f0:	200004c5 	.word	0x200004c5
 80006f4:	200004c6 	.word	0x200004c6
 80006f8:	200004c7 	.word	0x200004c7
 80006fc:	200004c8 	.word	0x200004c8

08000700 <Convert_All_Preset_Values>:


uint8_t Convert_All_Preset_Values(volatile struct Preset* preset_ptr, volatile struct Preset_Converted* preset_converted_ptr){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]

	preset_converted_ptr->waveshape = preset_ptr->waveshape; //7-bit copy
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	701a      	strb	r2, [r3, #0]
	preset_converted_ptr->speed = (preset_ptr->speed) << 3; //convert to 10-bit
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	785b      	ldrb	r3, [r3, #1]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	b29a      	uxth	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	805a      	strh	r2, [r3, #2]
	preset_converted_ptr->depth = preset_ptr->depth; //7-bit copy
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	789b      	ldrb	r3, [r3, #2]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	711a      	strb	r2, [r3, #4]
	preset_converted_ptr->symmetry = (preset_ptr->symmetry) << 1; //convert to 8-bit
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	78db      	ldrb	r3, [r3, #3]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	18db      	adds	r3, r3, r3
 8000734:	b29a      	uxth	r2, r3
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	80da      	strh	r2, [r3, #6]
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	791b      	ldrb	r3, [r3, #4]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	b29a      	uxth	r2, r3
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	811a      	strh	r2, [r3, #8]

	return 1;
 8000748:	2301      	movs	r3, #1
}
 800074a:	0018      	movs	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	b002      	add	sp, #8
 8000750:	bd80      	pop	{r7, pc}

08000752 <Update_Waveshape_with_Converted_Preset_Value>:
	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;

	return 1;
}

uint8_t Update_Waveshape_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000752:	b580      	push	{r7, lr}
 8000754:	b084      	sub	sp, #16
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	6039      	str	r1, [r7, #0]

	uint8_t waveshape = preset_converted_ptr->waveshape;
 800075c:	210f      	movs	r1, #15
 800075e:	187b      	adds	r3, r7, r1
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	7812      	ldrb	r2, [r2, #0]
 8000764:	701a      	strb	r2, [r3, #0]

	if(waveshape <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000766:	187b      	adds	r3, r7, r1
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b2a      	cmp	r3, #42	@ 0x2a
 800076c:	d803      	bhi.n	8000776 <Update_Waveshape_with_Converted_Preset_Value+0x24>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	2200      	movs	r2, #0
 8000772:	719a      	strb	r2, [r3, #6]
 8000774:	e011      	b.n	800079a <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SINE_MODE_ADC_THRESHOLD){
 8000776:	230f      	movs	r3, #15
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b55      	cmp	r3, #85	@ 0x55
 800077e:	d803      	bhi.n	8000788 <Update_Waveshape_with_Converted_Preset_Value+0x36>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	2201      	movs	r2, #1
 8000784:	719a      	strb	r2, [r3, #6]
 8000786:	e008      	b.n	800079a <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SQUARE_MODE_ADC_THRESHOLD){
 8000788:	230f      	movs	r3, #15
 800078a:	18fb      	adds	r3, r7, r3
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b25b      	sxtb	r3, r3
 8000790:	2b00      	cmp	r3, #0
 8000792:	db02      	blt.n	800079a <Update_Waveshape_with_Converted_Preset_Value+0x48>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	2202      	movs	r2, #2
 8000798:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 800079a:	2301      	movs	r3, #1
}
 800079c:	0018      	movs	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	b004      	add	sp, #16
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <Update_Speed_with_Converted_Preset_Value>:

uint8_t Update_Speed_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]

	params_ptr->speed = preset_converted_ptr->speed;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	885b      	ldrh	r3, [r3, #2]
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	811a      	strh	r2, [r3, #8]

	return 1;
 80007b8:	2301      	movs	r3, #1
}
 80007ba:	0018      	movs	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	b002      	add	sp, #8
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <Update_Depth_with_Converted_Preset_Value>:

uint8_t Update_Depth_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	6039      	str	r1, [r7, #0]

	params_ptr->depth = preset_converted_ptr->depth;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	791b      	ldrb	r3, [r3, #4]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	729a      	strb	r2, [r3, #10]

	return 1;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	0018      	movs	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	b002      	add	sp, #8
 80007de:	bd80      	pop	{r7, pc}

080007e0 <Update_Symmetry_with_Converted_Preset_Value>:

uint8_t Update_Symmetry_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]

	params_ptr->symmetry = preset_converted_ptr->symmetry;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	88db      	ldrh	r3, [r3, #6]
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	819a      	strh	r2, [r3, #12]

	return 1;
 80007f4:	2301      	movs	r3, #1
}
 80007f6:	0018      	movs	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b002      	add	sp, #8
 80007fc:	bd80      	pop	{r7, pc}

080007fe <Update_Phase_with_Converted_Preset_Value>:

uint8_t Update_Phase_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
 8000806:	6039      	str	r1, [r7, #0]

	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	891b      	ldrh	r3, [r3, #8]
 800080c:	b29a      	uxth	r2, r3
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8000812:	2301      	movs	r3, #1
}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	b002      	add	sp, #8
 800081a:	bd80      	pop	{r7, pc}

0800081c <Read_and_Interpret_Preset_From_Flash>:
	*Doubleword_ptr = packed;

	return 1;
}

uint8_t Read_and_Interpret_Preset_From_Flash(uint32_t address_val, volatile struct Preset* preset_ptr){
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]

	uint8_t *flash = (uint8_t *)address_val;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	613b      	str	r3, [r7, #16]
	uint8_t *preset = (uint8_t *)preset_ptr;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 800082e:	2317      	movs	r3, #23
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	e020      	b.n	800087a <Read_and_Interpret_Preset_From_Flash+0x5e>

		if(*(flash + i) > 0x7F){ //127
 8000838:	2117      	movs	r1, #23
 800083a:	187b      	adds	r3, r7, r1
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	18d3      	adds	r3, r2, r3
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b25b      	sxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	da06      	bge.n	8000858 <Read_and_Interpret_Preset_From_Flash+0x3c>
			*(preset + i) = 0x7F;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	18d3      	adds	r3, r2, r3
 8000852:	227f      	movs	r2, #127	@ 0x7f
 8000854:	701a      	strb	r2, [r3, #0]
 8000856:	e00a      	b.n	800086e <Read_and_Interpret_Preset_From_Flash+0x52>
		}
		else{
			*(preset + i) = *(flash + i);
 8000858:	2117      	movs	r1, #23
 800085a:	187b      	adds	r3, r7, r1
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	18d2      	adds	r2, r2, r3
 8000862:	187b      	adds	r3, r7, r1
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	68f9      	ldr	r1, [r7, #12]
 8000868:	18cb      	adds	r3, r1, r3
 800086a:	7812      	ldrb	r2, [r2, #0]
 800086c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 800086e:	2117      	movs	r1, #23
 8000870:	187b      	adds	r3, r7, r1
 8000872:	781a      	ldrb	r2, [r3, #0]
 8000874:	187b      	adds	r3, r7, r1
 8000876:	3201      	adds	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
 800087a:	2317      	movs	r3, #23
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b04      	cmp	r3, #4
 8000882:	d9d9      	bls.n	8000838 <Read_and_Interpret_Preset_From_Flash+0x1c>
		}
	}

	return 1;
 8000884:	2301      	movs	r3, #1
}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b006      	add	sp, #24
 800088c:	bd80      	pop	{r7, pc}

0800088e <Read_and_Interpret_Misc_From_Flash>:
	*Doubleword_ptr = packed;

	return 1;
}

uint8_t Read_and_Interpret_Misc_From_Flash(uint32_t address_val, volatile enum Validate *user_presets_used_array_ptr, volatile uint32_t *statuses_ptr, volatile enum MIDI_Channel *MIDI_basic_channel_ptr, uint8_t num_presets){
 800088e:	b580      	push	{r7, lr}
 8000890:	b088      	sub	sp, #32
 8000892:	af00      	add	r7, sp, #0
 8000894:	60f8      	str	r0, [r7, #12]
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	603b      	str	r3, [r7, #0]

	uint8_t *address = (uint8_t *)address_val;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	61bb      	str	r3, [r7, #24]

	volatile uint8_t interpretted_value = 0;
 80008a0:	2316      	movs	r3, #22
 80008a2:	18fb      	adds	r3, r7, r3
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]

	//PRESETS
	for(uint8_t i = 0; i < num_presets; i++){
 80008a8:	231f      	movs	r3, #31
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
 80008b0:	e02c      	b.n	800090c <Read_and_Interpret_Misc_From_Flash+0x7e>

		interpretted_value = *(address + i);
 80008b2:	211f      	movs	r1, #31
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	18d3      	adds	r3, r2, r3
 80008bc:	781a      	ldrb	r2, [r3, #0]
 80008be:	2016      	movs	r0, #22
 80008c0:	183b      	adds	r3, r7, r0
 80008c2:	701a      	strb	r2, [r3, #0]

		if(interpretted_value == (enum Validate)YES){
 80008c4:	183b      	adds	r3, r7, r0
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d106      	bne.n	80008dc <Read_and_Interpret_Misc_From_Flash+0x4e>

			*(user_presets_used_array_ptr + i) = (enum Validate)YES;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	18d3      	adds	r3, r2, r3
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
 80008da:	e011      	b.n	8000900 <Read_and_Interpret_Misc_From_Flash+0x72>
		}
		else if((interpretted_value == 0xFF) || (interpretted_value == (enum Validate)NO)){
 80008dc:	2216      	movs	r2, #22
 80008de:	18bb      	adds	r3, r7, r2
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	2bff      	cmp	r3, #255	@ 0xff
 80008e6:	d004      	beq.n	80008f2 <Read_and_Interpret_Misc_From_Flash+0x64>
 80008e8:	18bb      	adds	r3, r7, r2
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d106      	bne.n	8000900 <Read_and_Interpret_Misc_From_Flash+0x72>

			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
 80008f2:	231f      	movs	r3, #31
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	68ba      	ldr	r2, [r7, #8]
 80008fa:	18d3      	adds	r3, r2, r3
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < num_presets; i++){
 8000900:	211f      	movs	r1, #31
 8000902:	187b      	adds	r3, r7, r1
 8000904:	781a      	ldrb	r2, [r3, #0]
 8000906:	187b      	adds	r3, r7, r1
 8000908:	3201      	adds	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
 800090c:	231f      	movs	r3, #31
 800090e:	18fa      	adds	r2, r7, r3
 8000910:	2128      	movs	r1, #40	@ 0x28
 8000912:	187b      	adds	r3, r7, r1
 8000914:	7812      	ldrb	r2, [r2, #0]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	429a      	cmp	r2, r3
 800091a:	d3ca      	bcc.n	80008b2 <Read_and_Interpret_Misc_From_Flash+0x24>
		}
	}

	//START REQUIRED BEFORE SYNC MODE
	interpretted_value = *(address + num_presets);
 800091c:	187b      	adds	r3, r7, r1
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	18d3      	adds	r3, r2, r3
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	2116      	movs	r1, #22
 8000928:	187b      	adds	r3, r7, r1
 800092a:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)NO){
 800092c:	187b      	adds	r3, r7, r1
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d105      	bne.n	8000942 <Read_and_Interpret_Misc_From_Flash+0xb4>
		Clear_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2180      	movs	r1, #128	@ 0x80
 800093a:	0018      	movs	r0, r3
 800093c:	f005 fc04 	bl	8006148 <Clear_Status_Bit>
 8000940:	e00f      	b.n	8000962 <Read_and_Interpret_Misc_From_Flash+0xd4>
	}
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 8000942:	2216      	movs	r2, #22
 8000944:	18bb      	adds	r3, r7, r2
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b01      	cmp	r3, #1
 800094c:	d004      	beq.n	8000958 <Read_and_Interpret_Misc_From_Flash+0xca>
 800094e:	18bb      	adds	r3, r7, r2
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2bff      	cmp	r3, #255	@ 0xff
 8000956:	d104      	bne.n	8000962 <Read_and_Interpret_Misc_From_Flash+0xd4>
		Set_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2180      	movs	r1, #128	@ 0x80
 800095c:	0018      	movs	r0, r3
 800095e:	f005 fbe1 	bl	8006124 <Set_Status_Bit>
	}

	//OMNI ON/OFF
	interpretted_value = *(address + num_presets + 1);
 8000962:	2328      	movs	r3, #40	@ 0x28
 8000964:	18fb      	adds	r3, r7, r3
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	18d3      	adds	r3, r2, r3
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	2116      	movs	r1, #22
 8000972:	187b      	adds	r3, r7, r1
 8000974:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)YES){
 8000976:	187b      	adds	r3, r7, r1
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	2b01      	cmp	r3, #1
 800097e:	d107      	bne.n	8000990 <Read_and_Interpret_Misc_From_Flash+0x102>
		Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI ON
 8000980:	2380      	movs	r3, #128	@ 0x80
 8000982:	00da      	lsls	r2, r3, #3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	0011      	movs	r1, r2
 8000988:	0018      	movs	r0, r3
 800098a:	f005 fbcb 	bl	8006124 <Set_Status_Bit>
 800098e:	e011      	b.n	80009b4 <Read_and_Interpret_Misc_From_Flash+0x126>
	}
	else if((interpretted_value == (enum Validate)NO) || (interpretted_value == 0xFF)){
 8000990:	2216      	movs	r2, #22
 8000992:	18bb      	adds	r3, r7, r2
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	d004      	beq.n	80009a6 <Read_and_Interpret_Misc_From_Flash+0x118>
 800099c:	18bb      	adds	r3, r7, r2
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2bff      	cmp	r3, #255	@ 0xff
 80009a4:	d106      	bne.n	80009b4 <Read_and_Interpret_Misc_From_Flash+0x126>
		Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI OFF
 80009a6:	2380      	movs	r3, #128	@ 0x80
 80009a8:	00da      	lsls	r2, r3, #3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	0011      	movs	r1, r2
 80009ae:	0018      	movs	r0, r3
 80009b0:	f005 fbca 	bl	8006148 <Clear_Status_Bit>
	}

	//BASIC CHANNEL
	interpretted_value = *(address + num_presets + 2);
 80009b4:	2328      	movs	r3, #40	@ 0x28
 80009b6:	18fb      	adds	r3, r7, r3
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	3302      	adds	r3, #2
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	18d3      	adds	r3, r2, r3
 80009c0:	781a      	ldrb	r2, [r3, #0]
 80009c2:	2116      	movs	r1, #22
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	701a      	strb	r2, [r3, #0]

	if(interpretted_value > (uint8_t)MIDI_CH_SIXTEEN){
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b0f      	cmp	r3, #15
 80009d0:	d908      	bls.n	80009e4 <Read_and_Interpret_Misc_From_Flash+0x156>

		uint8_t midi_channel_default = MIDI_BASIC_CHANNEL_DEFAULT;
 80009d2:	2117      	movs	r1, #23
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)midi_channel_default;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	187a      	adds	r2, r7, r1
 80009de:	7812      	ldrb	r2, [r2, #0]
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	e005      	b.n	80009f0 <Read_and_Interpret_Misc_From_Flash+0x162>
	}
	else{

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)interpretted_value;
 80009e4:	2316      	movs	r3, #22
 80009e6:	18fb      	adds	r3, r7, r3
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 80009f0:	2301      	movs	r3, #1
}
 80009f2:	0018      	movs	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b008      	add	sp, #32
 80009f8:	bd80      	pop	{r7, pc}

080009fa <Update_Converted_Preset_Array_with_User_or_Factory_Presets>:

uint8_t Update_Converted_Preset_Array_with_User_or_Factory_Presets(volatile struct Preset_Converted* presets_converted_array_ptr,
																	volatile enum Validate *user_presets_used_array_ptr,
																	const struct Preset **factory_presets_array_ptr,
																	volatile struct Preset **user_presets_array_ptr,
																	uint8_t size_of_factory_and_user_arrays){
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000a08:	2317      	movs	r3, #23
 8000a0a:	18fb      	adds	r3, r7, r3
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	e03c      	b.n	8000a8c <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x92>

		if(*(user_presets_used_array_ptr + i) == (enum Validate)YES){
 8000a12:	2117      	movs	r1, #23
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	68ba      	ldr	r2, [r7, #8]
 8000a1a:	18d3      	adds	r3, r2, r3
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d112      	bne.n	8000a4a <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x50>
			Convert_All_Preset_Values(*(user_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	18d3      	adds	r3, r2, r3
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	0013      	movs	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	189b      	adds	r3, r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	189b      	adds	r3, r3, r2
 8000a42:	0019      	movs	r1, r3
 8000a44:	f7ff fe5c 	bl	8000700 <Convert_All_Preset_Values>
 8000a48:	e01a      	b.n	8000a80 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
		}
		else if(*(user_presets_used_array_ptr + i) == (enum Validate)NO){
 8000a4a:	2117      	movs	r1, #23
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	18d3      	adds	r3, r2, r3
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d111      	bne.n	8000a80 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
			Convert_All_Preset_Values((struct Preset *) *(factory_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	18d3      	adds	r3, r2, r3
 8000a66:	6818      	ldr	r0, [r3, #0]
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	189b      	adds	r3, r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	001a      	movs	r2, r3
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	189b      	adds	r3, r3, r2
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	f7ff fe40 	bl	8000700 <Convert_All_Preset_Values>
	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000a80:	2117      	movs	r1, #23
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	781a      	ldrb	r2, [r3, #0]
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	3201      	adds	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
 8000a8c:	2317      	movs	r3, #23
 8000a8e:	18fa      	adds	r2, r7, r3
 8000a90:	2320      	movs	r3, #32
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	7812      	ldrb	r2, [r2, #0]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d3ba      	bcc.n	8000a12 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x18>
		}
	}

	return 1;
 8000a9c:	2301      	movs	r3, #1
}
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b006      	add	sp, #24
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <Read_and_Interpret_User_Presets_From_Flash>:

uint8_t Read_and_Interpret_User_Presets_From_Flash(void){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &user_preset_0);
 8000aac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <Read_and_Interpret_User_Presets_From_Flash+0x3c>)
 8000aae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae8 <Read_and_Interpret_User_Presets_From_Flash+0x40>)
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	0010      	movs	r0, r2
 8000ab4:	f7ff feb2 	bl	800081c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &user_preset_1);
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <Read_and_Interpret_User_Presets_From_Flash+0x44>)
 8000aba:	4a0d      	ldr	r2, [pc, #52]	@ (8000af0 <Read_and_Interpret_User_Presets_From_Flash+0x48>)
 8000abc:	0019      	movs	r1, r3
 8000abe:	0010      	movs	r0, r2
 8000ac0:	f7ff feac 	bl	800081c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &user_preset_2);
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <Read_and_Interpret_User_Presets_From_Flash+0x4c>)
 8000ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8000af8 <Read_and_Interpret_User_Presets_From_Flash+0x50>)
 8000ac8:	0019      	movs	r1, r3
 8000aca:	0010      	movs	r0, r2
 8000acc:	f7ff fea6 	bl	800081c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &user_preset_3);
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <Read_and_Interpret_User_Presets_From_Flash+0x54>)
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8000b00 <Read_and_Interpret_User_Presets_From_Flash+0x58>)
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	0010      	movs	r0, r2
 8000ad8:	f7ff fea0 	bl	800081c <Read_and_Interpret_Preset_From_Flash>

	return 1;
 8000adc:	2301      	movs	r3, #1
}
 8000ade:	0018      	movs	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	0800f800 	.word	0x0800f800
 8000aec:	20000008 	.word	0x20000008
 8000af0:	0800f808 	.word	0x0800f808
 8000af4:	20000010 	.word	0x20000010
 8000af8:	0800f810 	.word	0x0800f810
 8000afc:	20000018 	.word	0x20000018
 8000b00:	0800f818 	.word	0x0800f818

08000b04 <Update_Waveshape_with_CC_Value>:

uint8_t Update_Waveshape_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]

	if(*data <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b16:	d803      	bhi.n	8000b20 <Update_Waveshape_with_CC_Value+0x1c>
		params_ptr->waveshape = TRIANGLE_MODE;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	719a      	strb	r2, [r3, #6]
 8000b1e:	e011      	b.n	8000b44 <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SINE_MODE_ADC_THRESHOLD){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b55      	cmp	r3, #85	@ 0x55
 8000b28:	d803      	bhi.n	8000b32 <Update_Waveshape_with_CC_Value+0x2e>
		params_ptr->waveshape = SINE_MODE;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	719a      	strb	r2, [r3, #6]
 8000b30:	e008      	b.n	8000b44 <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SQUARE_MODE_ADC_THRESHOLD){
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	db02      	blt.n	8000b44 <Update_Waveshape_with_CC_Value+0x40>
		params_ptr->waveshape = SQUARE_MODE;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	2202      	movs	r2, #2
 8000b42:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 8000b44:	2301      	movs	r3, #1
}
 8000b46:	0018      	movs	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b002      	add	sp, #8
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <Update_Speed_with_CC_Value>:

uint8_t Update_Speed_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b084      	sub	sp, #16
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]

	uint16_t speed = (uint16_t)*data;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	210e      	movs	r1, #14
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	801a      	strh	r2, [r3, #0]

	speed <<= 3; //convert to 10-bit
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	187a      	adds	r2, r7, r1
 8000b68:	8812      	ldrh	r2, [r2, #0]
 8000b6a:	00d2      	lsls	r2, r2, #3
 8000b6c:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = speed;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	187a      	adds	r2, r7, r1
 8000b72:	8812      	ldrh	r2, [r2, #0]
 8000b74:	811a      	strh	r2, [r3, #8]

	return 1;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b004      	add	sp, #16
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <Update_Depth_with_CC_Value>:

uint8_t Update_Depth_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]

	uint8_t depth = (uint8_t)*data;
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	7812      	ldrb	r2, [r2, #0]
 8000b92:	701a      	strb	r2, [r3, #0]
	params_ptr->depth = depth;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	187a      	adds	r2, r7, r1
 8000b98:	7812      	ldrb	r2, [r2, #0]
 8000b9a:	729a      	strb	r2, [r3, #10]

	return 1;
 8000b9c:	2301      	movs	r3, #1
}
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b004      	add	sp, #16
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <Update_Symmetry_with_CC_Value>:

uint8_t Update_Symmetry_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b084      	sub	sp, #16
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]

	uint8_t symmetry = (uint8_t)*data;
 8000bb0:	210f      	movs	r1, #15
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	7812      	ldrb	r2, [r2, #0]
 8000bb8:	701a      	strb	r2, [r3, #0]

	symmetry <<= 1; //convert to 8-bit
 8000bba:	187a      	adds	r2, r7, r1
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	18db      	adds	r3, r3, r3
 8000bc2:	7013      	strb	r3, [r2, #0]
	params_ptr->symmetry = symmetry;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	819a      	strh	r2, [r3, #12]

	return 1;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b004      	add	sp, #16
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <Update_Phase_with_CC_Value>:

uint8_t Update_Phase_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]

	uint8_t phase = (uint8_t)*data;
 8000be2:	210f      	movs	r1, #15
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	7812      	ldrb	r2, [r2, #0]
 8000bea:	701a      	strb	r2, [r3, #0]

	phase <<= 2; //convert to 9-bit
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	187a      	adds	r2, r7, r1
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	0092      	lsls	r2, r2, #2
 8000bf4:	701a      	strb	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = phase;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8000c00:	2301      	movs	r3, #1
}
 8000c02:	0018      	movs	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b004      	add	sp, #16
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <Set_Waveshape_to_CC_Mode_and_Value>:

uint8_t Set_Waveshape_to_CC_Mode_and_Value(uint8_t *data){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000c14:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c1c:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = CC_MODE;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c20:	2202      	movs	r2, #2
 8000c22:	701a      	strb	r2, [r3, #0]

	CC_array[WAVESHAPE_ARR] = *data;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	781a      	ldrb	r2, [r3, #0]
 8000c28:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <Set_Waveshape_to_CC_Mode_and_Value+0x30>)
 8000c2a:	701a      	strb	r2, [r3, #0]

	return 1;
 8000c2c:	2301      	movs	r3, #1
}
 8000c2e:	0018      	movs	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b002      	add	sp, #8
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	20000438 	.word	0x20000438
 8000c3c:	200004c4 	.word	0x200004c4

08000c40 <Set_Speed_to_CC_Mode_and_Value>:

uint8_t Set_Speed_to_CC_Mode_and_Value(uint8_t *data){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000c50:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000c54:	2202      	movs	r2, #2
 8000c56:	701a      	strb	r2, [r3, #0]

	CC_array[SPEED_ARR] = *data;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	4b04      	ldr	r3, [pc, #16]	@ (8000c70 <Set_Speed_to_CC_Mode_and_Value+0x30>)
 8000c5e:	705a      	strb	r2, [r3, #1]

	return 1;
 8000c60:	2301      	movs	r3, #1
}
 8000c62:	0018      	movs	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	20000430 	.word	0x20000430
 8000c70:	200004c4 	.word	0x200004c4

08000c74 <Set_Depth_to_CC_Mode_and_Value>:

uint8_t Set_Depth_to_CC_Mode_and_Value(uint8_t *data){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000c84:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = CC_MODE;
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000c88:	2202      	movs	r2, #2
 8000c8a:	701a      	strb	r2, [r3, #0]

	CC_array[DEPTH_ARR] = *data;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <Set_Depth_to_CC_Mode_and_Value+0x30>)
 8000c92:	709a      	strb	r2, [r3, #2]

	return 1;
 8000c94:	2301      	movs	r3, #1
}
 8000c96:	0018      	movs	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b002      	add	sp, #8
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	20000434 	.word	0x20000434
 8000ca4:	200004c4 	.word	0x200004c4

08000ca8 <Set_Symmetry_to_CC_Mode_and_Value>:

uint8_t Set_Symmetry_to_CC_Mode_and_Value(uint8_t *data){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000cb8:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = CC_MODE;
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	701a      	strb	r2, [r3, #0]

	CC_array[SYMMETRY_ARR] = *data;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	781a      	ldrb	r2, [r3, #0]
 8000cc4:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <Set_Symmetry_to_CC_Mode_and_Value+0x30>)
 8000cc6:	70da      	strb	r2, [r3, #3]

	return 1;
 8000cc8:	2301      	movs	r3, #1
}
 8000cca:	0018      	movs	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	2000043c 	.word	0x2000043c
 8000cd8:	200004c4 	.word	0x200004c4

08000cdc <Set_Phase_to_CC_Mode_and_Value>:

uint8_t Set_Phase_to_CC_Mode_and_Value(uint8_t *data){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000cec:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = CC_MODE;
 8000cee:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	701a      	strb	r2, [r3, #0]

	CC_array[PHASE_ARR] = *data;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	4b04      	ldr	r3, [pc, #16]	@ (8000d0c <Set_Phase_to_CC_Mode_and_Value+0x30>)
 8000cfa:	711a      	strb	r2, [r3, #4]

	return 1;
 8000cfc:	2301      	movs	r3, #1
}
 8000cfe:	0018      	movs	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	20000440 	.word	0x20000440
 8000d0c:	200004c4 	.word	0x200004c4

08000d10 <Set_All_Pots_to_PC_Mode>:

uint8_t Set_All_Pots_to_PC_Mode(void){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000d14:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d1c:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = PC_MODE;
 8000d1e:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d20:	2203      	movs	r2, #3
 8000d22:	701a      	strb	r2, [r3, #0]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000d24:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d2c:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.shared_state = PC_MODE;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d30:	2203      	movs	r2, #3
 8000d32:	701a      	strb	r2, [r3, #0]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <Set_All_Pots_to_PC_Mode+0x64>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <Set_All_Pots_to_PC_Mode+0x64>)
 8000d3c:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = PC_MODE;
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <Set_All_Pots_to_PC_Mode+0x64>)
 8000d40:	2203      	movs	r2, #3
 8000d42:	701a      	strb	r2, [r3, #0]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <Set_All_Pots_to_PC_Mode+0x68>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <Set_All_Pots_to_PC_Mode+0x68>)
 8000d4c:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = PC_MODE;
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <Set_All_Pots_to_PC_Mode+0x68>)
 8000d50:	2203      	movs	r2, #3
 8000d52:	701a      	strb	r2, [r3, #0]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000d54:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <Set_All_Pots_to_PC_Mode+0x6c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <Set_All_Pots_to_PC_Mode+0x6c>)
 8000d5c:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = PC_MODE;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <Set_All_Pots_to_PC_Mode+0x6c>)
 8000d60:	2203      	movs	r2, #3
 8000d62:	701a      	strb	r2, [r3, #0]

	return 1;
 8000d64:	2301      	movs	r3, #1
}
 8000d66:	0018      	movs	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000438 	.word	0x20000438
 8000d70:	20000430 	.word	0x20000430
 8000d74:	20000434 	.word	0x20000434
 8000d78:	2000043c 	.word	0x2000043c
 8000d7c:	20000440 	.word	0x20000440

08000d80 <set_LED_to_state>:

//VARIABLE DEFINITIONS
volatile uint8_t LED_counter = 0;
volatile uint32_t led_blink_period = LED_BLINK_PERIOD;

uint8_t set_LED_to_state(volatile struct LED_FSM *LED_FSM_ptr, enum LED_States desired_state){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	000a      	movs	r2, r1
 8000d8a:	1cfb      	adds	r3, r7, #3
 8000d8c:	701a      	strb	r2, [r3, #0]

	if(desired_state == LED_CONFIRM){
 8000d8e:	1cfb      	adds	r3, r7, #3
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b07      	cmp	r3, #7
 8000d94:	d114      	bne.n	8000dc0 <set_LED_to_state+0x40>

		if(LED_fsm.current_state != LED_CONFIRM){
 8000d96:	4b1d      	ldr	r3, [pc, #116]	@ (8000e0c <set_LED_to_state+0x8c>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	2b07      	cmp	r3, #7
 8000d9e:	d026      	beq.n	8000dee <set_LED_to_state+0x6e>

			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000da0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e10 <set_LED_to_state+0x90>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2200      	movs	r2, #0
 8000da6:	625a      	str	r2, [r3, #36]	@ 0x24
			led_blink_period = LED_BLINK_PERIOD >> 1;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <set_LED_to_state+0x94>)
 8000daa:	2296      	movs	r2, #150	@ 0x96
 8000dac:	601a      	str	r2, [r3, #0]
			LED_counter = 0;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <set_LED_to_state+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, led_blink_period);
 8000db4:	4b16      	ldr	r3, [pc, #88]	@ (8000e10 <set_LED_to_state+0x90>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a16      	ldr	r2, [pc, #88]	@ (8000e14 <set_LED_to_state+0x94>)
 8000dba:	6812      	ldr	r2, [r2, #0]
 8000dbc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dbe:	e016      	b.n	8000dee <set_LED_to_state+0x6e>
		}
	}
	else{

		if(LED_FSM_ptr->current_state != desired_state){
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	1cfa      	adds	r2, r7, #3
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d00f      	beq.n	8000dee <set_LED_to_state+0x6e>

			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000dce:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <set_LED_to_state+0x90>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	@ 0x24
			led_blink_period = LED_BLINK_PERIOD;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <set_LED_to_state+0x94>)
 8000dd8:	2296      	movs	r2, #150	@ 0x96
 8000dda:	0052      	lsls	r2, r2, #1
 8000ddc:	601a      	str	r2, [r3, #0]
			LED_counter = 0;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <set_LED_to_state+0x98>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, led_blink_period);
 8000de4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <set_LED_to_state+0x90>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <set_LED_to_state+0x94>)
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}

	LED_FSM_ptr->prev_state = LED_FSM_ptr->current_state;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	705a      	strb	r2, [r3, #1]
	LED_FSM_ptr->current_state = desired_state;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	1cfa      	adds	r2, r7, #3
 8000dfc:	7812      	ldrb	r2, [r2, #0]
 8000dfe:	701a      	strb	r2, [r3, #0]

	return 1;
 8000e00:	2301      	movs	r3, #1
}
 8000e02:	0018      	movs	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b002      	add	sp, #8
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	20000448 	.word	0x20000448
 8000e10:	200005e0 	.word	0x200005e0
 8000e14:	20000020 	.word	0x20000020
 8000e18:	200004c9 	.word	0x200004c9

08000e1c <Is_Status_Byte>:
volatile uint8_t active_status_byte;
volatile uint8_t running_status_byte;
volatile struct MIDI_Data MIDI_data = {.MIDI_data_buffer = 0};

//FUNCTION DEFINITIONS
enum Validate Is_Status_Byte(volatile uint8_t *data){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000e24:	210f      	movs	r1, #15
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	7812      	ldrb	r2, [r2, #0]
 8000e2c:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	187a      	adds	r2, r7, r1
 8000e32:	7812      	ldrb	r2, [r2, #0]
 8000e34:	09d2      	lsrs	r2, r2, #7
 8000e36:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <Is_Status_Byte+0x28>

		return (enum Validate)YES;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e000      	b.n	8000e46 <Is_Status_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)NO;
 8000e44:	2300      	movs	r3, #0
	}
}
 8000e46:	0018      	movs	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b004      	add	sp, #16
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <Is_Data_Byte>:

enum Validate Is_Data_Byte(volatile uint8_t *data){
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000e56:	210f      	movs	r1, #15
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	7812      	ldrb	r2, [r2, #0]
 8000e5e:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	187a      	adds	r2, r7, r1
 8000e64:	7812      	ldrb	r2, [r2, #0]
 8000e66:	09d2      	lsrs	r2, r2, #7
 8000e68:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <Is_Data_Byte+0x28>

		return (enum Validate)NO;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <Is_Data_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)YES;
 8000e76:	2301      	movs	r3, #1
	}
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b004      	add	sp, #16
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <Is_PC_Status_Byte>:

enum Validate Is_PC_Status_Byte(volatile uint8_t *data){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_PROGRAM_CHANGE >> 4;
 8000e88:	210f      	movs	r1, #15
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	220c      	movs	r2, #12
 8000e8e:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	200e      	movs	r0, #14
 8000e98:	183b      	adds	r3, r7, r0
 8000e9a:	0912      	lsrs	r2, r2, #4
 8000e9c:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000e9e:	183a      	adds	r2, r7, r0
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	7812      	ldrb	r2, [r2, #0]
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d101      	bne.n	8000eae <Is_PC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <Is_PC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000eae:	2300      	movs	r3, #0
	}
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b004      	add	sp, #16
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <Is_CC_Status_Byte>:

enum Validate Is_CC_Status_Byte(volatile uint8_t *data){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_CONTROL_CHANGE >> 4;
 8000ec0:	210f      	movs	r1, #15
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	220b      	movs	r2, #11
 8000ec6:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	200e      	movs	r0, #14
 8000ed0:	183b      	adds	r3, r7, r0
 8000ed2:	0912      	lsrs	r2, r2, #4
 8000ed4:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000ed6:	183a      	adds	r2, r7, r0
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	7812      	ldrb	r2, [r2, #0]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d101      	bne.n	8000ee6 <Is_CC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <Is_CC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000ee6:	2300      	movs	r3, #0
	}
}
 8000ee8:	0018      	movs	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b004      	add	sp, #16
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>:

enum Validate Is_Utilised_Channel_Mode_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b77      	cmp	r3, #119	@ 0x77
 8000f00:	d91d      	bls.n	8000f3e <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4e>

		if(*first_data_byte == RESET_ALL_CONTROLLERS){ //put all pots into CC mode and set to 50%
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b79      	cmp	r3, #121	@ 0x79
 8000f0a:	d101      	bne.n	8000f10 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x20>

			return (enum Validate)YES;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e017      	b.n	8000f40 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == LOCAL_CONTROL){
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b7a      	cmp	r3, #122	@ 0x7a
 8000f18:	d101      	bne.n	8000f1e <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x2e>

			return (enum Validate)YES;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e010      	b.n	8000f40 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_ON){
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b7d      	cmp	r3, #125	@ 0x7d
 8000f26:	d101      	bne.n	8000f2c <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x3c>

			return (enum Validate)YES;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e009      	b.n	8000f40 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_OFF){
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b7c      	cmp	r3, #124	@ 0x7c
 8000f34:	d101      	bne.n	8000f3a <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4a>

			return (enum Validate)YES;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e002      	b.n	8000f40 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else{

			return (enum Validate)NO;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e000      	b.n	8000f40 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
	}
	else{

		return (enum Validate)NO;
 8000f3e:	2300      	movs	r3, #0
	}
}
 8000f40:	0018      	movs	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b002      	add	sp, #8
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <Is_Utilised_CC_First_Data_Byte>:

enum Validate Is_Utilised_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b77      	cmp	r3, #119	@ 0x77
 8000f58:	d901      	bls.n	8000f5e <Is_Utilised_CC_First_Data_Byte+0x16>

		return (enum Validate)NO;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e023      	b.n	8000fa6 <Is_Utilised_CC_First_Data_Byte+0x5e>
	}
	else{

		if(*first_data_byte == WAVESHAPE_CC){
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b14      	cmp	r3, #20
 8000f66:	d101      	bne.n	8000f6c <Is_Utilised_CC_First_Data_Byte+0x24>

			return (enum Validate)YES;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e01c      	b.n	8000fa6 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SPEED_CC){
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b15      	cmp	r3, #21
 8000f74:	d101      	bne.n	8000f7a <Is_Utilised_CC_First_Data_Byte+0x32>

			return (enum Validate)YES;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e015      	b.n	8000fa6 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == DEPTH_CC){
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b16      	cmp	r3, #22
 8000f82:	d101      	bne.n	8000f88 <Is_Utilised_CC_First_Data_Byte+0x40>

			return (enum Validate)YES;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e00e      	b.n	8000fa6 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SYMMETRY_CC){
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b17      	cmp	r3, #23
 8000f90:	d101      	bne.n	8000f96 <Is_Utilised_CC_First_Data_Byte+0x4e>

			return (enum Validate)YES;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e007      	b.n	8000fa6 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == PHASE_CC){
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b18      	cmp	r3, #24
 8000f9e:	d101      	bne.n	8000fa4 <Is_Utilised_CC_First_Data_Byte+0x5c>

			return (enum Validate)YES;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e000      	b.n	8000fa6 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else{

			return (enum Validate)NO;
 8000fa4:	2300      	movs	r3, #0
		}
	}
}
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b002      	add	sp, #8
 8000fac:	bd80      	pop	{r7, pc}

08000fae <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>:

enum Validate Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(volatile uint8_t *first_data_byte, volatile uint8_t *second_data_byte){
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]

	if(*first_data_byte == RESET_ALL_CONTROLLERS){
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b79      	cmp	r3, #121	@ 0x79
 8000fc0:	d108      	bne.n	8000fd4 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x26>

		if(*second_data_byte == 0){
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d101      	bne.n	8000fd0 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x22>

			return (enum Validate)YES;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e031      	b.n	8001034 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e02f      	b.n	8001034 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == LOCAL_CONTROL){
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b7a      	cmp	r3, #122	@ 0x7a
 8000fdc:	d10d      	bne.n	8000ffa <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x4c>

		if((*second_data_byte == 0) || (*second_data_byte == 127)){
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d004      	beq.n	8000ff2 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x44>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ff0:	d101      	bne.n	8000ff6 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x48>

			return (enum Validate)YES;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e01e      	b.n	8001034 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e01c      	b.n	8001034 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_OFF){
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b7c      	cmp	r3, #124	@ 0x7c
 8001002:	d108      	bne.n	8001016 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x68>

		if((*second_data_byte == 0)){
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x64>

			return (enum Validate)YES;
 800100e:	2301      	movs	r3, #1
 8001010:	e010      	b.n	8001034 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8001012:	2300      	movs	r3, #0
 8001014:	e00e      	b.n	8001034 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_ON){
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b7d      	cmp	r3, #125	@ 0x7d
 800101e:	d108      	bne.n	8001032 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x84>

		if((*second_data_byte == 0)){
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x80>

			return (enum Validate)YES;
 800102a:	2301      	movs	r3, #1
 800102c:	e002      	b.n	8001034 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else{

		return (enum Validate)NO; //should not even be called if first data byte is always valid
 8001032:	2300      	movs	r3, #0
	}
}
 8001034:	0018      	movs	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	b002      	add	sp, #8
 800103a:	bd80      	pop	{r7, pc}

0800103c <Is_Sysex_Start_Status_Byte>:
	}

	return 1;
}

enum Validate Is_Sysex_Start_Status_Byte(volatile uint8_t *data){
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

	if(*data == (uint8_t)SYSTEM_EXCLUSIVE_START){
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2bf0      	cmp	r3, #240	@ 0xf0
 800104c:	d101      	bne.n	8001052 <Is_Sysex_Start_Status_Byte+0x16>

		return (enum Validate)YES;
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <Is_Sysex_Start_Status_Byte+0x18>
	}
	else{

		return (enum Validate)NO;
 8001052:	2300      	movs	r3, #0
	}
}
 8001054:	0018      	movs	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	b002      	add	sp, #8
 800105a:	bd80      	pop	{r7, pc}

0800105c <Is_Channelised_Status_Byte_On_Basic_Channel>:

		return (enum Validate)NO;
	}
}

enum Validate Is_Channelised_Status_Byte_On_Basic_Channel(volatile uint8_t *data, volatile enum MIDI_Channel MIDI_basic_channel){
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	000a      	movs	r2, r1
 8001066:	1cfb      	adds	r3, r7, #3
 8001068:	701a      	strb	r2, [r3, #0]

	uint8_t ch = *data & 0x0F;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	200f      	movs	r0, #15
 8001072:	183b      	adds	r3, r7, r0
 8001074:	210f      	movs	r1, #15
 8001076:	400a      	ands	r2, r1
 8001078:	701a      	strb	r2, [r3, #0]
	uint8_t b_ch = (uint8_t)MIDI_basic_channel;
 800107a:	210e      	movs	r1, #14
 800107c:	187b      	adds	r3, r7, r1
 800107e:	1cfa      	adds	r2, r7, #3
 8001080:	7812      	ldrb	r2, [r2, #0]
 8001082:	701a      	strb	r2, [r3, #0]

	if(ch == b_ch){
 8001084:	183a      	adds	r2, r7, r0
 8001086:	187b      	adds	r3, r7, r1
 8001088:	7812      	ldrb	r2, [r2, #0]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	d101      	bne.n	8001094 <Is_Channelised_Status_Byte_On_Basic_Channel+0x38>

		return (enum Validate)YES;
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <Is_Channelised_Status_Byte_On_Basic_Channel+0x3a>
	}
	else{

		return (enum Validate)NO;
 8001094:	2300      	movs	r3, #0
	}
}
 8001096:	0018      	movs	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	b004      	add	sp, #16
 800109c:	bd80      	pop	{r7, pc}

0800109e <Is_Data_Buffer_Empty>:

enum Validate Is_Data_Buffer_Empty(volatile struct MIDI_Data *MIDI_data_struct){
 800109e:	b580      	push	{r7, lr}
 80010a0:	b084      	sub	sp, #16
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]

	uint16_t sum = 0;
 80010a6:	230e      	movs	r3, #14
 80010a8:	18fb      	adds	r3, r7, r3
 80010aa:	2200      	movs	r2, #0
 80010ac:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 80010ae:	230d      	movs	r3, #13
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	e011      	b.n	80010dc <Is_Data_Buffer_Empty+0x3e>

		sum += MIDI_data_struct->MIDI_data_buffer[i];
 80010b8:	200d      	movs	r0, #13
 80010ba:	183b      	adds	r3, r7, r0
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	5cd3      	ldrb	r3, [r2, r3]
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	0019      	movs	r1, r3
 80010c6:	220e      	movs	r2, #14
 80010c8:	18bb      	adds	r3, r7, r2
 80010ca:	18ba      	adds	r2, r7, r2
 80010cc:	8812      	ldrh	r2, [r2, #0]
 80010ce:	188a      	adds	r2, r1, r2
 80010d0:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 80010d2:	183b      	adds	r3, r7, r0
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	183b      	adds	r3, r7, r0
 80010d8:	3201      	adds	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	230d      	movs	r3, #13
 80010de:	18fb      	adds	r3, r7, r3
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b09      	cmp	r3, #9
 80010e4:	d9e8      	bls.n	80010b8 <Is_Data_Buffer_Empty+0x1a>
	}

	if(sum == 0){
 80010e6:	230e      	movs	r3, #14
 80010e8:	18fb      	adds	r3, r7, r3
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <Is_Data_Buffer_Empty+0x56>

		return (enum Validate)YES;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <Is_Data_Buffer_Empty+0x58>
	}
	else{

		return (enum Validate)NO;
 80010f4:	2300      	movs	r3, #0
	}
}
 80010f6:	0018      	movs	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b004      	add	sp, #16
 80010fc:	bd80      	pop	{r7, pc}

080010fe <Clear_Data_Buffer>:
			return 1;
		}
	}
}

uint8_t Clear_Data_Buffer(volatile struct MIDI_Data *MIDI_data_struct){
 80010fe:	b580      	push	{r7, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001106:	230f      	movs	r3, #15
 8001108:	18fb      	adds	r3, r7, r3
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
 800110e:	e00a      	b.n	8001126 <Clear_Data_Buffer+0x28>

		MIDI_data_struct->MIDI_data_buffer[i] = 0;
 8001110:	200f      	movs	r0, #15
 8001112:	183b      	adds	r3, r7, r0
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	2100      	movs	r1, #0
 800111a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 800111c:	183b      	adds	r3, r7, r0
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	183b      	adds	r3, r7, r0
 8001122:	3201      	adds	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	230f      	movs	r3, #15
 8001128:	18fb      	adds	r3, r7, r3
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b09      	cmp	r3, #9
 800112e:	d9ef      	bls.n	8001110 <Clear_Data_Buffer+0x12>
	}

	return 1;
 8001130:	2301      	movs	r3, #1
}
 8001132:	0018      	movs	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	b004      	add	sp, #16
 8001138:	bd80      	pop	{r7, pc}

0800113a <Is_Program_Change_Data_Byte_In_Range>:

enum Validate Is_Program_Change_Data_Byte_In_Range(volatile uint8_t *PC_data, uint8_t size_of_factory_or_user_array){
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	000a      	movs	r2, r1
 8001144:	1cfb      	adds	r3, r7, #3
 8001146:	701a      	strb	r2, [r3, #0]

	if(*PC_data < size_of_factory_or_user_array){
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	1cfa      	adds	r2, r7, #3
 8001150:	7812      	ldrb	r2, [r2, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	d901      	bls.n	800115a <Is_Program_Change_Data_Byte_In_Range+0x20>

		return (enum Validate)YES;
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <Is_Program_Change_Data_Byte_In_Range+0x22>
	}
	else{

		return (enum Validate)NO;
 800115a:	2300      	movs	r3, #0
	}
}
 800115c:	0018      	movs	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	b002      	add	sp, #8
 8001162:	bd80      	pop	{r7, pc}

08001164 <Is_System_Real_Time_Status_Byte>:

enum Validate Is_System_Real_Time_Status_Byte(volatile uint8_t *data){
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]

	if(*data == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2bf8      	cmp	r3, #248	@ 0xf8
 8001174:	d101      	bne.n	800117a <Is_System_Real_Time_Status_Byte+0x16>
		return (enum Validate)YES;
 8001176:	2301      	movs	r3, #1
 8001178:	e023      	b.n	80011c2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_START){
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2bfa      	cmp	r3, #250	@ 0xfa
 8001182:	d101      	bne.n	8001188 <Is_System_Real_Time_Status_Byte+0x24>
		return (enum Validate)YES;
 8001184:	2301      	movs	r3, #1
 8001186:	e01c      	b.n	80011c2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_CONTINUE){
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2bfb      	cmp	r3, #251	@ 0xfb
 8001190:	d101      	bne.n	8001196 <Is_System_Real_Time_Status_Byte+0x32>
		return (enum Validate)YES;
 8001192:	2301      	movs	r3, #1
 8001194:	e015      	b.n	80011c2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_STOP){
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2bfc      	cmp	r3, #252	@ 0xfc
 800119e:	d101      	bne.n	80011a4 <Is_System_Real_Time_Status_Byte+0x40>
		return (enum Validate)YES;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e00e      	b.n	80011c2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_ACTIVE_SENSING){
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2bfe      	cmp	r3, #254	@ 0xfe
 80011ac:	d101      	bne.n	80011b2 <Is_System_Real_Time_Status_Byte+0x4e>
		return (enum Validate)YES;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e007      	b.n	80011c2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_RESET){
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2bff      	cmp	r3, #255	@ 0xff
 80011ba:	d101      	bne.n	80011c0 <Is_System_Real_Time_Status_Byte+0x5c>
		return (enum Validate)YES;
 80011bc:	2301      	movs	r3, #1
 80011be:	e000      	b.n	80011c2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else{
		return (enum Validate)NO;
 80011c0:	2300      	movs	r3, #0
	}
}
 80011c2:	0018      	movs	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b002      	add	sp, #8
 80011c8:	bd80      	pop	{r7, pc}

080011ca <Is_OMNI_On>:

enum Validate Is_OMNI_On(volatile uint32_t *statuses_ptr){
 80011ca:	b5b0      	push	{r4, r5, r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]

	uint8_t omni_mode = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 80011d2:	250f      	movs	r5, #15
 80011d4:	197c      	adds	r4, r7, r5
 80011d6:	2380      	movs	r3, #128	@ 0x80
 80011d8:	00da      	lsls	r2, r3, #3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	0011      	movs	r1, r2
 80011de:	0018      	movs	r0, r3
 80011e0:	f004 ff8c 	bl	80060fc <Get_Status_Bit>
 80011e4:	0003      	movs	r3, r0
 80011e6:	7023      	strb	r3, [r4, #0]

	if(omni_mode == 1){
 80011e8:	197b      	adds	r3, r7, r5
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <Is_OMNI_On+0x2a>

		return (enum Validate)YES;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <Is_OMNI_On+0x2c>
	}
	else{

		return (enum Validate)NO;
 80011f4:	2300      	movs	r3, #0
	}
}
 80011f6:	0018      	movs	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b004      	add	sp, #16
 80011fc:	bdb0      	pop	{r4, r5, r7, pc}

080011fe <Reset_and_Stop_MIDI_Software_Timer>:

uint8_t Reset_and_Stop_MIDI_Software_Timer(uint32_t *midi_counter_ptr, volatile uint32_t *statuses_ptr){
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]

	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Is_Running);
 8001208:	2380      	movs	r3, #128	@ 0x80
 800120a:	005a      	lsls	r2, r3, #1
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	0011      	movs	r1, r2
 8001210:	0018      	movs	r0, r3
 8001212:	f004 ff99 	bl	8006148 <Clear_Status_Bit>
	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Has_Timed_Out);
 8001216:	2380      	movs	r3, #128	@ 0x80
 8001218:	009a      	lsls	r2, r3, #2
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	0011      	movs	r1, r2
 800121e:	0018      	movs	r0, r3
 8001220:	f004 ff92 	bl	8006148 <Clear_Status_Bit>
	*midi_counter_ptr = 0;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]

	return 1;
 800122a:	2301      	movs	r3, #1
}
 800122c:	0018      	movs	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	b002      	add	sp, #8
 8001232:	bd80      	pop	{r7, pc}

08001234 <Reset_All_Controllers>:

uint8_t Reset_All_Controllers(struct Params *params_ptr, struct Delay_Line* delay_line_ptr){
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 800123e:	4b24      	ldr	r3, [pc, #144]	@ (80012d0 <Reset_All_Controllers+0x9c>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b22      	ldr	r3, [pc, #136]	@ (80012d0 <Reset_All_Controllers+0x9c>)
 8001246:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8001248:	4b22      	ldr	r3, [pc, #136]	@ (80012d4 <Reset_All_Controllers+0xa0>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b21      	ldr	r3, [pc, #132]	@ (80012d4 <Reset_All_Controllers+0xa0>)
 8001250:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8001252:	4b21      	ldr	r3, [pc, #132]	@ (80012d8 <Reset_All_Controllers+0xa4>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	4b1f      	ldr	r3, [pc, #124]	@ (80012d8 <Reset_All_Controllers+0xa4>)
 800125a:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 800125c:	4b1f      	ldr	r3, [pc, #124]	@ (80012dc <Reset_All_Controllers+0xa8>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <Reset_All_Controllers+0xa8>)
 8001264:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 8001266:	4b1e      	ldr	r3, [pc, #120]	@ (80012e0 <Reset_All_Controllers+0xac>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <Reset_All_Controllers+0xac>)
 800126e:	705a      	strb	r2, [r3, #1]

	//Put all pots into CC mode
	waveshape_fsm.current_state = CC_MODE;
 8001270:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <Reset_All_Controllers+0x9c>)
 8001272:	2202      	movs	r2, #2
 8001274:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8001276:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <Reset_All_Controllers+0xa0>)
 8001278:	2202      	movs	r2, #2
 800127a:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = CC_MODE;
 800127c:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <Reset_All_Controllers+0xa4>)
 800127e:	2202      	movs	r2, #2
 8001280:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = CC_MODE;
 8001282:	4b16      	ldr	r3, [pc, #88]	@ (80012dc <Reset_All_Controllers+0xa8>)
 8001284:	2202      	movs	r2, #2
 8001286:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = CC_MODE;
 8001288:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <Reset_All_Controllers+0xac>)
 800128a:	2202      	movs	r2, #2
 800128c:	701a      	strb	r2, [r3, #0]

	uint8_t data = 127 >> 1;
 800128e:	230e      	movs	r3, #14
 8001290:	18fb      	adds	r3, r7, r3
 8001292:	223f      	movs	r2, #63	@ 0x3f
 8001294:	701a      	strb	r2, [r3, #0]

	for(uint8_t index = 0; index < NUM_POTS; index++){
 8001296:	230f      	movs	r3, #15
 8001298:	18fb      	adds	r3, r7, r3
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	e00c      	b.n	80012ba <Reset_All_Controllers+0x86>

		CC_array[index] = data;
 80012a0:	200f      	movs	r0, #15
 80012a2:	183b      	adds	r3, r7, r0
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	4a0f      	ldr	r2, [pc, #60]	@ (80012e4 <Reset_All_Controllers+0xb0>)
 80012a8:	210e      	movs	r1, #14
 80012aa:	1879      	adds	r1, r7, r1
 80012ac:	7809      	ldrb	r1, [r1, #0]
 80012ae:	54d1      	strb	r1, [r2, r3]
	for(uint8_t index = 0; index < NUM_POTS; index++){
 80012b0:	183b      	adds	r3, r7, r0
 80012b2:	781a      	ldrb	r2, [r3, #0]
 80012b4:	183b      	adds	r3, r7, r0
 80012b6:	3201      	adds	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
 80012ba:	230f      	movs	r3, #15
 80012bc:	18fb      	adds	r3, r7, r3
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d9ed      	bls.n	80012a0 <Reset_All_Controllers+0x6c>
	}

	return 1;
 80012c4:	2301      	movs	r3, #1
}
 80012c6:	0018      	movs	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b004      	add	sp, #16
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	46c0      	nop			@ (mov r8, r8)
 80012d0:	20000438 	.word	0x20000438
 80012d4:	20000430 	.word	0x20000430
 80012d8:	20000434 	.word	0x20000434
 80012dc:	2000043c 	.word	0x2000043c
 80012e0:	20000440 	.word	0x20000440
 80012e4:	200004c4 	.word	0x200004c4

080012e8 <Set_Local_Control>:

uint8_t Set_Local_Control(){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80012ec:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <Set_Local_Control+0x5c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <Set_Local_Control+0x5c>)
 80012f4:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 80012f6:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <Set_Local_Control+0x60>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <Set_Local_Control+0x60>)
 80012fe:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <Set_Local_Control+0x64>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <Set_Local_Control+0x64>)
 8001308:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 800130a:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <Set_Local_Control+0x68>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <Set_Local_Control+0x68>)
 8001312:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 8001314:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <Set_Local_Control+0x6c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <Set_Local_Control+0x6c>)
 800131c:	705a      	strb	r2, [r3, #1]

	//Put all pots into manual mode
	waveshape_fsm.current_state = MANUAL_MODE;
 800131e:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <Set_Local_Control+0x5c>)
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = MANUAL_MODE;
 8001324:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <Set_Local_Control+0x60>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = MANUAL_MODE;
 800132a:	4b08      	ldr	r3, [pc, #32]	@ (800134c <Set_Local_Control+0x64>)
 800132c:	2201      	movs	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = MANUAL_MODE;
 8001330:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <Set_Local_Control+0x68>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = MANUAL_MODE;
 8001336:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <Set_Local_Control+0x6c>)
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]

	return 1;
 800133c:	2301      	movs	r3, #1
}
 800133e:	0018      	movs	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000438 	.word	0x20000438
 8001348:	20000430 	.word	0x20000430
 800134c:	20000434 	.word	0x20000434
 8001350:	2000043c 	.word	0x2000043c
 8001354:	20000440 	.word	0x20000440

08001358 <Set_OMNI_Off>:

uint8_t Set_OMNI_Off(volatile uint32_t *statuses_ptr){
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

	//Clear status bit
	Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001360:	2380      	movs	r3, #128	@ 0x80
 8001362:	00da      	lsls	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	0011      	movs	r1, r2
 8001368:	0018      	movs	r0, r3
 800136a:	f004 feed 	bl	8006148 <Clear_Status_Bit>

	return 1;
 800136e:	2301      	movs	r3, #1
}
 8001370:	0018      	movs	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	b002      	add	sp, #8
 8001376:	bd80      	pop	{r7, pc}

08001378 <Set_OMNI_On>:

uint8_t Set_OMNI_On(volatile uint32_t *statuses_ptr){
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

	//Set status bit
	Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001380:	2380      	movs	r3, #128	@ 0x80
 8001382:	00da      	lsls	r2, r3, #3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	0011      	movs	r1, r2
 8001388:	0018      	movs	r0, r3
 800138a:	f004 fecb 	bl	8006124 <Set_Status_Bit>

	return 1;
 800138e:	2301      	movs	r3, #1
}
 8001390:	0018      	movs	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	b002      	add	sp, #8
 8001396:	bd80      	pop	{r7, pc}

08001398 <Start_UART_Receive>:
//VARIABLE DEFINITIONS
volatile uint8_t rx_buffer[1] = {0};
volatile enum Validate UART_DMA_TX_is_complete = YES;

//FUNCTION DEFINITIONS
uint8_t Start_UART_Receive(void){
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0

	//START UART RECEIVE
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 800139c:	4904      	ldr	r1, [pc, #16]	@ (80013b0 <Start_UART_Receive+0x18>)
 800139e:	4b05      	ldr	r3, [pc, #20]	@ (80013b4 <Start_UART_Receive+0x1c>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	0018      	movs	r0, r3
 80013a4:	f00a fdc0 	bl	800bf28 <HAL_UART_Receive_DMA>

	return 1;
 80013a8:	2301      	movs	r3, #1
}
 80013aa:	0018      	movs	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200004dc 	.word	0x200004dc
 80013b4:	20000a48 	.word	0x20000a48

080013b8 <Pot_Check>:
volatile uint8_t symmetry_pot_adc_measurement_num = 0;
volatile uint8_t phase_pot_adc_measurement_num = 0;
volatile uint8_t pots_counter = 0;

//FUNCTION DEFINITIONS
uint8_t Pot_Check(volatile uint16_t* ADCResults_arr, enum Pot_Type pot_type){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	@ 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	000a      	movs	r2, r1
 80013c2:	1cfb      	adds	r3, r7, #3
 80013c4:	701a      	strb	r2, [r3, #0]
	static uint16_t second_symmetry_measurement;

	static uint16_t first_phase_measurement;
	static uint16_t second_phase_measurement;

	uint16_t *first_measurement_ptr = NULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t *second_measurement_ptr = NULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
	volatile uint8_t *measurement_num_ptr = NULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
	void *measurement_ptr = NULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
	uint8_t tolerance = 0;
 80013d6:	2117      	movs	r1, #23
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]
	volatile struct Normal_FSM* normal_fsm_ptr = NULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]

	if(pot_type == WAVESHAPE_POT){
 80013e6:	1cfb      	adds	r3, r7, #3
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10d      	bne.n	800140a <Pot_Check+0x52>

		first_measurement_ptr = &first_waveshape_measurement;
 80013ee:	4b6d      	ldr	r3, [pc, #436]	@ (80015a4 <Pot_Check+0x1ec>)
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_waveshape_measurement;
 80013f2:	4b6d      	ldr	r3, [pc, #436]	@ (80015a8 <Pot_Check+0x1f0>)
 80013f4:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &waveshape_pot_adc_measurement_num;
 80013f6:	4b6d      	ldr	r3, [pc, #436]	@ (80015ac <Pot_Check+0x1f4>)
 80013f8:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + WAVESHAPE_ADC_RESULT_INDEX);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	61bb      	str	r3, [r7, #24]
		tolerance = WAVESHAPE_TOLERANCE;
 80013fe:	187b      	adds	r3, r7, r1
 8001400:	2246      	movs	r2, #70	@ 0x46
 8001402:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &waveshape_fsm;
 8001404:	4b6a      	ldr	r3, [pc, #424]	@ (80015b0 <Pot_Check+0x1f8>)
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	e04e      	b.n	80014a8 <Pot_Check+0xf0>
	}
	else if(pot_type == SPEED_POT){
 800140a:	1cfb      	adds	r3, r7, #3
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d10f      	bne.n	8001432 <Pot_Check+0x7a>

		first_measurement_ptr = &first_speed_measurement;
 8001412:	4b68      	ldr	r3, [pc, #416]	@ (80015b4 <Pot_Check+0x1fc>)
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_speed_measurement;
 8001416:	4b68      	ldr	r3, [pc, #416]	@ (80015b8 <Pot_Check+0x200>)
 8001418:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &speed_pot_adc_measurement_num;
 800141a:	4b68      	ldr	r3, [pc, #416]	@ (80015bc <Pot_Check+0x204>)
 800141c:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SPEED_ADC_RESULT_INDEX);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3302      	adds	r3, #2
 8001422:	61bb      	str	r3, [r7, #24]
		tolerance = SPEED_TOLERANCE;
 8001424:	2317      	movs	r3, #23
 8001426:	18fb      	adds	r3, r7, r3
 8001428:	2246      	movs	r2, #70	@ 0x46
 800142a:	701a      	strb	r2, [r3, #0]
		speed_fsm_ptr = &speed_fsm;
 800142c:	4b64      	ldr	r3, [pc, #400]	@ (80015c0 <Pot_Check+0x208>)
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	e03a      	b.n	80014a8 <Pot_Check+0xf0>
	}
	else if(pot_type == DEPTH_POT){
 8001432:	1cfb      	adds	r3, r7, #3
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d10f      	bne.n	800145a <Pot_Check+0xa2>

		first_measurement_ptr = &first_depth_measurement;
 800143a:	4b62      	ldr	r3, [pc, #392]	@ (80015c4 <Pot_Check+0x20c>)
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_depth_measurement;
 800143e:	4b62      	ldr	r3, [pc, #392]	@ (80015c8 <Pot_Check+0x210>)
 8001440:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &depth_pot_adc_measurement_num;
 8001442:	4b62      	ldr	r3, [pc, #392]	@ (80015cc <Pot_Check+0x214>)
 8001444:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DEPTH_ADC_RESULT_INDEX);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3304      	adds	r3, #4
 800144a:	61bb      	str	r3, [r7, #24]
		tolerance = DEPTH_TOLERANCE;
 800144c:	2317      	movs	r3, #23
 800144e:	18fb      	adds	r3, r7, r3
 8001450:	2246      	movs	r2, #70	@ 0x46
 8001452:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &depth_fsm;
 8001454:	4b5e      	ldr	r3, [pc, #376]	@ (80015d0 <Pot_Check+0x218>)
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	e026      	b.n	80014a8 <Pot_Check+0xf0>
	}
	else if(pot_type == SYMMETRY_POT){
 800145a:	1cfb      	adds	r3, r7, #3
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b03      	cmp	r3, #3
 8001460:	d10f      	bne.n	8001482 <Pot_Check+0xca>

		first_measurement_ptr = &first_symmetry_measurement;
 8001462:	4b5c      	ldr	r3, [pc, #368]	@ (80015d4 <Pot_Check+0x21c>)
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_symmetry_measurement;
 8001466:	4b5c      	ldr	r3, [pc, #368]	@ (80015d8 <Pot_Check+0x220>)
 8001468:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &symmetry_pot_adc_measurement_num;
 800146a:	4b5c      	ldr	r3, [pc, #368]	@ (80015dc <Pot_Check+0x224>)
 800146c:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SYMMETRY_ADC_RESULT_INDEX);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3306      	adds	r3, #6
 8001472:	61bb      	str	r3, [r7, #24]
		tolerance = SYMMETRY_TOLERANCE;
 8001474:	2317      	movs	r3, #23
 8001476:	18fb      	adds	r3, r7, r3
 8001478:	2246      	movs	r2, #70	@ 0x46
 800147a:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &symmetry_fsm;
 800147c:	4b58      	ldr	r3, [pc, #352]	@ (80015e0 <Pot_Check+0x228>)
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	e012      	b.n	80014a8 <Pot_Check+0xf0>
	}
	else if(pot_type == PHASE_POT){
 8001482:	1cfb      	adds	r3, r7, #3
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b04      	cmp	r3, #4
 8001488:	d10e      	bne.n	80014a8 <Pot_Check+0xf0>

		first_measurement_ptr = &first_phase_measurement;
 800148a:	4b56      	ldr	r3, [pc, #344]	@ (80015e4 <Pot_Check+0x22c>)
 800148c:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_phase_measurement;
 800148e:	4b56      	ldr	r3, [pc, #344]	@ (80015e8 <Pot_Check+0x230>)
 8001490:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &phase_pot_adc_measurement_num;
 8001492:	4b56      	ldr	r3, [pc, #344]	@ (80015ec <Pot_Check+0x234>)
 8001494:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3308      	adds	r3, #8
 800149a:	61bb      	str	r3, [r7, #24]
		tolerance = PHASE_TOLERANCE;
 800149c:	2317      	movs	r3, #23
 800149e:	18fb      	adds	r3, r7, r3
 80014a0:	2246      	movs	r2, #70	@ 0x46
 80014a2:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &phase_fsm;
 80014a4:	4b52      	ldr	r3, [pc, #328]	@ (80015f0 <Pot_Check+0x238>)
 80014a6:	613b      	str	r3, [r7, #16]
	}

	if(*measurement_num_ptr == 0){
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10b      	bne.n	80014ca <Pot_Check+0x112>

		*first_measurement_ptr = *((uint16_t*)measurement_ptr);
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	881a      	ldrh	r2, [r3, #0]
 80014b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b8:	801a      	strh	r2, [r3, #0]

			(*measurement_num_ptr)++;
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	3301      	adds	r3, #1
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	701a      	strb	r2, [r3, #0]
 80014c8:	e066      	b.n	8001598 <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 1){
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d10b      	bne.n	80014ec <Pot_Check+0x134>

		*second_measurement_ptr = *((uint16_t*)measurement_ptr);
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	881a      	ldrh	r2, [r3, #0]
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	801a      	strh	r2, [r3, #0]

		(*measurement_num_ptr)++;
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	3301      	adds	r3, #1
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	701a      	strb	r2, [r3, #0]
 80014ea:	e055      	b.n	8001598 <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 2){
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d150      	bne.n	8001598 <Pot_Check+0x1e0>

		*measurement_num_ptr = 0;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]

		uint16_t diff = 0;
 80014fc:	200a      	movs	r0, #10
 80014fe:	183b      	adds	r3, r7, r0
 8001500:	2200      	movs	r2, #0
 8001502:	801a      	strh	r2, [r3, #0]

		if(*first_measurement_ptr > *second_measurement_ptr){
 8001504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001506:	881a      	ldrh	r2, [r3, #0]
 8001508:	6a3b      	ldr	r3, [r7, #32]
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d907      	bls.n	8001520 <Pot_Check+0x168>

			diff = *first_measurement_ptr - *second_measurement_ptr;
 8001510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001512:	8819      	ldrh	r1, [r3, #0]
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	881a      	ldrh	r2, [r3, #0]
 8001518:	183b      	adds	r3, r7, r0
 800151a:	1a8a      	subs	r2, r1, r2
 800151c:	801a      	strh	r2, [r3, #0]
 800151e:	e00d      	b.n	800153c <Pot_Check+0x184>

		}
		else if(*second_measurement_ptr > *first_measurement_ptr){
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	881a      	ldrh	r2, [r3, #0]
 8001524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d907      	bls.n	800153c <Pot_Check+0x184>

			diff = *second_measurement_ptr - *first_measurement_ptr;
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	8819      	ldrh	r1, [r3, #0]
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	881a      	ldrh	r2, [r3, #0]
 8001534:	230a      	movs	r3, #10
 8001536:	18fb      	adds	r3, r7, r3
 8001538:	1a8a      	subs	r2, r1, r2
 800153a:	801a      	strh	r2, [r3, #0]
		/*else{

			diff = 0
		}*/

		if(diff > tolerance){
 800153c:	2317      	movs	r3, #23
 800153e:	18fb      	adds	r3, r7, r3
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b29b      	uxth	r3, r3
 8001544:	220a      	movs	r2, #10
 8001546:	18ba      	adds	r2, r7, r2
 8001548:	8812      	ldrh	r2, [r2, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d924      	bls.n	8001598 <Pot_Check+0x1e0>

			if(normal_fsm_ptr != NULL){
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d008      	beq.n	8001566 <Pot_Check+0x1ae>

				normal_fsm_ptr->prev_state = normal_fsm_ptr->current_state;
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	705a      	strb	r2, [r3, #1]
				normal_fsm_ptr->current_state = MANUAL_MODE;
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
 8001564:	e018      	b.n	8001598 <Pot_Check+0x1e0>

			}
			else if(speed_fsm_ptr != NULL){
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d015      	beq.n	8001598 <Pot_Check+0x1e0>

				speed_fsm_ptr->prev_state = speed_fsm_ptr->current_state;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	7812      	ldrb	r2, [r2, #0]
 8001572:	705a      	strb	r2, [r3, #1]
				speed_fsm_ptr->current_state.shared_state = MANUAL_MODE;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 800157a:	4b1e      	ldr	r3, [pc, #120]	@ (80015f4 <Pot_Check+0x23c>)
 800157c:	2120      	movs	r1, #32
 800157e:	0018      	movs	r0, r3
 8001580:	f004 fde2 	bl	8006148 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001584:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <Pot_Check+0x23c>)
 8001586:	2140      	movs	r1, #64	@ 0x40
 8001588:	0018      	movs	r0, r3
 800158a:	f004 fddd 	bl	8006148 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, First_Sync_Complete);
 800158e:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <Pot_Check+0x23c>)
 8001590:	2108      	movs	r1, #8
 8001592:	0018      	movs	r0, r3
 8001594:	f004 fdd8 	bl	8006148 <Clear_Status_Bit>
			}
		}
	}

	return 1;
 8001598:	2301      	movs	r3, #1
}
 800159a:	0018      	movs	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	b00a      	add	sp, #40	@ 0x28
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			@ (mov r8, r8)
 80015a4:	200004e4 	.word	0x200004e4
 80015a8:	200004e6 	.word	0x200004e6
 80015ac:	200004dd 	.word	0x200004dd
 80015b0:	20000438 	.word	0x20000438
 80015b4:	200004e8 	.word	0x200004e8
 80015b8:	200004ea 	.word	0x200004ea
 80015bc:	200004de 	.word	0x200004de
 80015c0:	20000430 	.word	0x20000430
 80015c4:	200004ec 	.word	0x200004ec
 80015c8:	200004ee 	.word	0x200004ee
 80015cc:	200004df 	.word	0x200004df
 80015d0:	20000434 	.word	0x20000434
 80015d4:	200004f0 	.word	0x200004f0
 80015d8:	200004f2 	.word	0x200004f2
 80015dc:	200004e0 	.word	0x200004e0
 80015e0:	2000043c 	.word	0x2000043c
 80015e4:	200004f4 	.word	0x200004f4
 80015e8:	200004f6 	.word	0x200004f6
 80015ec:	200004e1 	.word	0x200004e1
 80015f0:	20000440 	.word	0x20000440
 80015f4:	20000c38 	.word	0x20000c38

080015f8 <Check_Tap_Tempo_Switch_State>:

uint8_t Check_Tap_Tempo_Switch_State(volatile struct Tap_Tempo_Switch_States *tap_tempo_switch_states_ptr){
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

	static uint8_t extend_rising_edge = 0;
	static uint8_t tap_tempo_switch_state_counter = TAP_TEMPO_SWITCH_CONFIDENCE_COUNT;

	uint8_t switch_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8001600:	250f      	movs	r5, #15
 8001602:	197c      	adds	r4, r7, r5
 8001604:	2380      	movs	r3, #128	@ 0x80
 8001606:	00da      	lsls	r2, r3, #3
 8001608:	23a0      	movs	r3, #160	@ 0xa0
 800160a:	05db      	lsls	r3, r3, #23
 800160c:	0011      	movs	r1, r2
 800160e:	0018      	movs	r0, r3
 8001610:	f006 fe1a 	bl	8008248 <HAL_GPIO_ReadPin>
 8001614:	0003      	movs	r3, r0
 8001616:	7023      	strb	r3, [r4, #0]

	if(switch_state == 0){
 8001618:	197b      	adds	r3, r7, r5
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10a      	bne.n	8001636 <Check_Tap_Tempo_Switch_State+0x3e>

		if(tap_tempo_switch_state_counter != 0){
 8001620:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <Check_Tap_Tempo_Switch_State+0x98>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d01e      	beq.n	8001666 <Check_Tap_Tempo_Switch_State+0x6e>

			tap_tempo_switch_state_counter--;
 8001628:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <Check_Tap_Tempo_Switch_State+0x98>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	3b01      	subs	r3, #1
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <Check_Tap_Tempo_Switch_State+0x98>)
 8001632:	701a      	strb	r2, [r3, #0]
 8001634:	e017      	b.n	8001666 <Check_Tap_Tempo_Switch_State+0x6e>
		}
	}
	else{

		if(tap_tempo_switch_state_counter != TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 8001636:	4b16      	ldr	r3, [pc, #88]	@ (8001690 <Check_Tap_Tempo_Switch_State+0x98>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b0e      	cmp	r3, #14
 800163c:	d013      	beq.n	8001666 <Check_Tap_Tempo_Switch_State+0x6e>

			if(extend_rising_edge == COUNT_TO_DELAY_RISING_TAP_TEMPO_EDGE){
 800163e:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b04      	cmp	r3, #4
 8001644:	d109      	bne.n	800165a <Check_Tap_Tempo_Switch_State+0x62>

				tap_tempo_switch_state_counter++;
 8001646:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <Check_Tap_Tempo_Switch_State+0x98>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	3301      	adds	r3, #1
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <Check_Tap_Tempo_Switch_State+0x98>)
 8001650:	701a      	strb	r2, [r3, #0]
				extend_rising_edge = 0;
 8001652:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
 8001658:	e005      	b.n	8001666 <Check_Tap_Tempo_Switch_State+0x6e>
			}
			else{
				extend_rising_edge++;
 800165a:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <Check_Tap_Tempo_Switch_State+0x9c>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001664:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(tap_tempo_switch_state_counter == 0){
 8001666:	4b0a      	ldr	r3, [pc, #40]	@ (8001690 <Check_Tap_Tempo_Switch_State+0x98>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d103      	bne.n	8001676 <Check_Tap_Tempo_Switch_State+0x7e>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]
 8001674:	e006      	b.n	8001684 <Check_Tap_Tempo_Switch_State+0x8c>
	}
	else if(tap_tempo_switch_state_counter == TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 8001676:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <Check_Tap_Tempo_Switch_State+0x98>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b0e      	cmp	r3, #14
 800167c:	d102      	bne.n	8001684 <Check_Tap_Tempo_Switch_State+0x8c>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = NOT_DEPRESSED;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8001684:	2301      	movs	r3, #1
}
 8001686:	0018      	movs	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	b004      	add	sp, #16
 800168c:	bdb0      	pop	{r4, r5, r7, pc}
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	20000024 	.word	0x20000024
 8001694:	200004f8 	.word	0x200004f8

08001698 <SystemClock_Config>:

LPTIM_HandleTypeDef hlptim1;

//FUNCTIONS
void SystemClock_Config(void)
{
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b093      	sub	sp, #76	@ 0x4c
 800169c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169e:	2410      	movs	r4, #16
 80016a0:	193b      	adds	r3, r7, r4
 80016a2:	0018      	movs	r0, r3
 80016a4:	2338      	movs	r3, #56	@ 0x38
 80016a6:	001a      	movs	r2, r3
 80016a8:	2100      	movs	r1, #0
 80016aa:	f00b ff5f 	bl	800d56c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ae:	003b      	movs	r3, r7
 80016b0:	0018      	movs	r0, r3
 80016b2:	2310      	movs	r3, #16
 80016b4:	001a      	movs	r2, r3
 80016b6:	2100      	movs	r1, #0
 80016b8:	f00b ff58 	bl	800d56c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016bc:	2380      	movs	r3, #128	@ 0x80
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	0018      	movs	r0, r3
 80016c2:	f007 fa33 	bl	8008b2c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016c6:	193b      	adds	r3, r7, r4
 80016c8:	2202      	movs	r2, #2
 80016ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016cc:	193b      	adds	r3, r7, r4
 80016ce:	2280      	movs	r2, #128	@ 0x80
 80016d0:	0052      	lsls	r2, r2, #1
 80016d2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80016d4:	0021      	movs	r1, r4
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016dc:	187b      	adds	r3, r7, r1
 80016de:	2240      	movs	r2, #64	@ 0x40
 80016e0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e2:	187b      	adds	r3, r7, r1
 80016e4:	2202      	movs	r2, #2
 80016e6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	2202      	movs	r2, #2
 80016ec:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80016ee:	187b      	adds	r3, r7, r1
 80016f0:	2200      	movs	r2, #0
 80016f2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	2208      	movs	r2, #8
 80016f8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016fa:	187b      	adds	r3, r7, r1
 80016fc:	2280      	movs	r2, #128	@ 0x80
 80016fe:	0292      	lsls	r2, r2, #10
 8001700:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001702:	187b      	adds	r3, r7, r1
 8001704:	22c0      	movs	r2, #192	@ 0xc0
 8001706:	04d2      	lsls	r2, r2, #19
 8001708:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800170a:	187b      	adds	r3, r7, r1
 800170c:	2280      	movs	r2, #128	@ 0x80
 800170e:	0592      	lsls	r2, r2, #22
 8001710:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001712:	187b      	adds	r3, r7, r1
 8001714:	0018      	movs	r0, r3
 8001716:	f007 fa55 	bl	8008bc4 <HAL_RCC_OscConfig>
 800171a:	1e03      	subs	r3, r0, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800171e:	f000 fdb9 	bl	8002294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001722:	003b      	movs	r3, r7
 8001724:	2207      	movs	r2, #7
 8001726:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001728:	003b      	movs	r3, r7
 800172a:	2202      	movs	r2, #2
 800172c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800172e:	003b      	movs	r3, r7
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001734:	003b      	movs	r3, r7
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800173a:	003b      	movs	r3, r7
 800173c:	2102      	movs	r1, #2
 800173e:	0018      	movs	r0, r3
 8001740:	f007 fd5a 	bl	80091f8 <HAL_RCC_ClockConfig>
 8001744:	1e03      	subs	r3, r0, #0
 8001746:	d001      	beq.n	800174c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001748:	f000 fda4 	bl	8002294 <Error_Handler>
  }
}
 800174c:	46c0      	nop			@ (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b013      	add	sp, #76	@ 0x4c
 8001752:	bd90      	pop	{r4, r7, pc}

08001754 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	0018      	movs	r0, r3
 800175e:	230c      	movs	r3, #12
 8001760:	001a      	movs	r2, r3
 8001762:	2100      	movs	r1, #0
 8001764:	f00b ff02 	bl	800d56c <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001768:	4b54      	ldr	r3, [pc, #336]	@ (80018bc <MX_ADC1_Init+0x168>)
 800176a:	4a55      	ldr	r2, [pc, #340]	@ (80018c0 <MX_ADC1_Init+0x16c>)
 800176c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800176e:	4b53      	ldr	r3, [pc, #332]	@ (80018bc <MX_ADC1_Init+0x168>)
 8001770:	2280      	movs	r2, #128	@ 0x80
 8001772:	05d2      	lsls	r2, r2, #23
 8001774:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001776:	4b51      	ldr	r3, [pc, #324]	@ (80018bc <MX_ADC1_Init+0x168>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800177c:	4b4f      	ldr	r3, [pc, #316]	@ (80018bc <MX_ADC1_Init+0x168>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001782:	4b4e      	ldr	r3, [pc, #312]	@ (80018bc <MX_ADC1_Init+0x168>)
 8001784:	2280      	movs	r2, #128	@ 0x80
 8001786:	0392      	lsls	r2, r2, #14
 8001788:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800178a:	4b4c      	ldr	r3, [pc, #304]	@ (80018bc <MX_ADC1_Init+0x168>)
 800178c:	2208      	movs	r2, #8
 800178e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001790:	4b4a      	ldr	r3, [pc, #296]	@ (80018bc <MX_ADC1_Init+0x168>)
 8001792:	2200      	movs	r2, #0
 8001794:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001796:	4b49      	ldr	r3, [pc, #292]	@ (80018bc <MX_ADC1_Init+0x168>)
 8001798:	2200      	movs	r2, #0
 800179a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800179c:	4b47      	ldr	r3, [pc, #284]	@ (80018bc <MX_ADC1_Init+0x168>)
 800179e:	2200      	movs	r2, #0
 80017a0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 80017a2:	4b46      	ldr	r3, [pc, #280]	@ (80018bc <MX_ADC1_Init+0x168>)
 80017a4:	2205      	movs	r2, #5
 80017a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017a8:	4b44      	ldr	r3, [pc, #272]	@ (80018bc <MX_ADC1_Init+0x168>)
 80017aa:	2220      	movs	r2, #32
 80017ac:	2100      	movs	r1, #0
 80017ae:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017b0:	4b42      	ldr	r3, [pc, #264]	@ (80018bc <MX_ADC1_Init+0x168>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017b6:	4b41      	ldr	r3, [pc, #260]	@ (80018bc <MX_ADC1_Init+0x168>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017bc:	4b3f      	ldr	r3, [pc, #252]	@ (80018bc <MX_ADC1_Init+0x168>)
 80017be:	222c      	movs	r2, #44	@ 0x2c
 80017c0:	2100      	movs	r1, #0
 80017c2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017c4:	4b3d      	ldr	r3, [pc, #244]	@ (80018bc <MX_ADC1_Init+0x168>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80017ca:	4b3c      	ldr	r3, [pc, #240]	@ (80018bc <MX_ADC1_Init+0x168>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80017d0:	4b3a      	ldr	r3, [pc, #232]	@ (80018bc <MX_ADC1_Init+0x168>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80017d6:	4b39      	ldr	r3, [pc, #228]	@ (80018bc <MX_ADC1_Init+0x168>)
 80017d8:	223c      	movs	r2, #60	@ 0x3c
 80017da:	2100      	movs	r1, #0
 80017dc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80017de:	4b37      	ldr	r3, [pc, #220]	@ (80018bc <MX_ADC1_Init+0x168>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017e4:	4b35      	ldr	r3, [pc, #212]	@ (80018bc <MX_ADC1_Init+0x168>)
 80017e6:	0018      	movs	r0, r3
 80017e8:	f004 fedc 	bl	80065a4 <HAL_ADC_Init>
 80017ec:	1e03      	subs	r3, r0, #0
 80017ee:	d001      	beq.n	80017f4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80017f0:	f000 fd50 	bl	8002294 <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	2200      	movs	r2, #0
 80017fe:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001806:	1d3a      	adds	r2, r7, #4
 8001808:	4b2c      	ldr	r3, [pc, #176]	@ (80018bc <MX_ADC1_Init+0x168>)
 800180a:	0011      	movs	r1, r2
 800180c:	0018      	movs	r0, r3
 800180e:	f005 fa4d 	bl	8006cac <HAL_ADC_ConfigChannel>
 8001812:	1e03      	subs	r3, r0, #0
 8001814:	d001      	beq.n	800181a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001816:	f000 fd3d 	bl	8002294 <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	4a29      	ldr	r2, [pc, #164]	@ (80018c4 <MX_ADC1_Init+0x170>)
 800181e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	2204      	movs	r2, #4
 8001824:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800182c:	1d3a      	adds	r2, r7, #4
 800182e:	4b23      	ldr	r3, [pc, #140]	@ (80018bc <MX_ADC1_Init+0x168>)
 8001830:	0011      	movs	r1, r2
 8001832:	0018      	movs	r0, r3
 8001834:	f005 fa3a 	bl	8006cac <HAL_ADC_ConfigChannel>
 8001838:	1e03      	subs	r3, r0, #0
 800183a:	d001      	beq.n	8001840 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 800183c:	f000 fd2a 	bl	8002294 <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	4a21      	ldr	r2, [pc, #132]	@ (80018c8 <MX_ADC1_Init+0x174>)
 8001844:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	2208      	movs	r2, #8
 800184a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001852:	1d3a      	adds	r2, r7, #4
 8001854:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <MX_ADC1_Init+0x168>)
 8001856:	0011      	movs	r1, r2
 8001858:	0018      	movs	r0, r3
 800185a:	f005 fa27 	bl	8006cac <HAL_ADC_ConfigChannel>
 800185e:	1e03      	subs	r3, r0, #0
 8001860:	d001      	beq.n	8001866 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001862:	f000 fd17 	bl	8002294 <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	4a18      	ldr	r2, [pc, #96]	@ (80018cc <MX_ADC1_Init+0x178>)
 800186a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	220c      	movs	r2, #12
 8001870:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001878:	1d3a      	adds	r2, r7, #4
 800187a:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <MX_ADC1_Init+0x168>)
 800187c:	0011      	movs	r1, r2
 800187e:	0018      	movs	r0, r3
 8001880:	f005 fa14 	bl	8006cac <HAL_ADC_ConfigChannel>
 8001884:	1e03      	subs	r3, r0, #0
 8001886:	d001      	beq.n	800188c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001888:	f000 fd04 	bl	8002294 <Error_Handler>
  }

  /** Configure Channel 6
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	4a10      	ldr	r2, [pc, #64]	@ (80018d0 <MX_ADC1_Init+0x17c>)
 8001890:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2210      	movs	r2, #16
 8001896:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800189e:	1d3a      	adds	r2, r7, #4
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <MX_ADC1_Init+0x168>)
 80018a2:	0011      	movs	r1, r2
 80018a4:	0018      	movs	r0, r3
 80018a6:	f005 fa01 	bl	8006cac <HAL_ADC_ConfigChannel>
 80018aa:	1e03      	subs	r3, r0, #0
 80018ac:	d001      	beq.n	80018b2 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 80018ae:	f000 fcf1 	bl	8002294 <Error_Handler>
  }
}
 80018b2:	46c0      	nop			@ (mov r8, r8)
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b004      	add	sp, #16
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			@ (mov r8, r8)
 80018bc:	200004fc 	.word	0x200004fc
 80018c0:	40012400 	.word	0x40012400
 80018c4:	04000002 	.word	0x04000002
 80018c8:	10000010 	.word	0x10000010
 80018cc:	14000020 	.word	0x14000020
 80018d0:	18000040 	.word	0x18000040

080018d4 <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b094      	sub	sp, #80	@ 0x50
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018da:	2334      	movs	r3, #52	@ 0x34
 80018dc:	18fb      	adds	r3, r7, r3
 80018de:	0018      	movs	r0, r3
 80018e0:	231c      	movs	r3, #28
 80018e2:	001a      	movs	r2, r3
 80018e4:	2100      	movs	r1, #0
 80018e6:	f00b fe41 	bl	800d56c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ea:	003b      	movs	r3, r7
 80018ec:	0018      	movs	r0, r3
 80018ee:	2334      	movs	r3, #52	@ 0x34
 80018f0:	001a      	movs	r2, r3
 80018f2:	2100      	movs	r1, #0
 80018f4:	f00b fe3a 	bl	800d56c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80018f8:	4b3a      	ldr	r3, [pc, #232]	@ (80019e4 <MX_TIM16_Init+0x110>)
 80018fa:	4a3b      	ldr	r2, [pc, #236]	@ (80019e8 <MX_TIM16_Init+0x114>)
 80018fc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80018fe:	4b39      	ldr	r3, [pc, #228]	@ (80019e4 <MX_TIM16_Init+0x110>)
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001904:	4b37      	ldr	r3, [pc, #220]	@ (80019e4 <MX_TIM16_Init+0x110>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 800190a:	4b36      	ldr	r3, [pc, #216]	@ (80019e4 <MX_TIM16_Init+0x110>)
 800190c:	22ff      	movs	r2, #255	@ 0xff
 800190e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001910:	4b34      	ldr	r3, [pc, #208]	@ (80019e4 <MX_TIM16_Init+0x110>)
 8001912:	2280      	movs	r2, #128	@ 0x80
 8001914:	0092      	lsls	r2, r2, #2
 8001916:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001918:	4b32      	ldr	r3, [pc, #200]	@ (80019e4 <MX_TIM16_Init+0x110>)
 800191a:	2200      	movs	r2, #0
 800191c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800191e:	4b31      	ldr	r3, [pc, #196]	@ (80019e4 <MX_TIM16_Init+0x110>)
 8001920:	2280      	movs	r2, #128	@ 0x80
 8001922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001924:	4b2f      	ldr	r3, [pc, #188]	@ (80019e4 <MX_TIM16_Init+0x110>)
 8001926:	0018      	movs	r0, r3
 8001928:	f007 ff8a 	bl	8009840 <HAL_TIM_Base_Init>
 800192c:	1e03      	subs	r3, r0, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8001930:	f000 fcb0 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001934:	4b2b      	ldr	r3, [pc, #172]	@ (80019e4 <MX_TIM16_Init+0x110>)
 8001936:	0018      	movs	r0, r3
 8001938:	f008 f888 	bl	8009a4c <HAL_TIM_OC_Init>
 800193c:	1e03      	subs	r3, r0, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8001940:	f000 fca8 	bl	8002294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001944:	2134      	movs	r1, #52	@ 0x34
 8001946:	187b      	adds	r3, r7, r1
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 800194c:	187b      	adds	r3, r7, r1
 800194e:	22ff      	movs	r2, #255	@ 0xff
 8001950:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001952:	187b      	adds	r3, r7, r1
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001958:	187b      	adds	r3, r7, r1
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800195e:	187b      	adds	r3, r7, r1
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001964:	187b      	adds	r3, r7, r1
 8001966:	2200      	movs	r2, #0
 8001968:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800196a:	187b      	adds	r3, r7, r1
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001970:	1879      	adds	r1, r7, r1
 8001972:	4b1c      	ldr	r3, [pc, #112]	@ (80019e4 <MX_TIM16_Init+0x110>)
 8001974:	2200      	movs	r2, #0
 8001976:	0018      	movs	r0, r3
 8001978:	f008 fedc 	bl	800a734 <HAL_TIM_OC_ConfigChannel>
 800197c:	1e03      	subs	r3, r0, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8001980:	f000 fc88 	bl	8002294 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8001984:	4b17      	ldr	r3, [pc, #92]	@ (80019e4 <MX_TIM16_Init+0x110>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699a      	ldr	r2, [r3, #24]
 800198a:	4b16      	ldr	r3, [pc, #88]	@ (80019e4 <MX_TIM16_Init+0x110>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2108      	movs	r1, #8
 8001990:	438a      	bics	r2, r1
 8001992:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001994:	003b      	movs	r3, r7
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800199a:	003b      	movs	r3, r7
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019a0:	003b      	movs	r3, r7
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019a6:	003b      	movs	r3, r7
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ac:	003b      	movs	r3, r7
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019b2:	003b      	movs	r3, r7
 80019b4:	2280      	movs	r2, #128	@ 0x80
 80019b6:	0192      	lsls	r2, r2, #6
 80019b8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019ba:	003b      	movs	r3, r7
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019c0:	003b      	movs	r3, r7
 80019c2:	2200      	movs	r2, #0
 80019c4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80019c6:	003a      	movs	r2, r7
 80019c8:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <MX_TIM16_Init+0x110>)
 80019ca:	0011      	movs	r1, r2
 80019cc:	0018      	movs	r0, r3
 80019ce:	f00a f8d7 	bl	800bb80 <HAL_TIMEx_ConfigBreakDeadTime>
 80019d2:	1e03      	subs	r3, r0, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 80019d6:	f000 fc5d 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	46bd      	mov	sp, r7
 80019de:	b014      	add	sp, #80	@ 0x50
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			@ (mov r8, r8)
 80019e4:	20000758 	.word	0x20000758
 80019e8:	40014400 	.word	0x40014400

080019ec <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08c      	sub	sp, #48	@ 0x30
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f2:	2320      	movs	r3, #32
 80019f4:	18fb      	adds	r3, r7, r3
 80019f6:	0018      	movs	r0, r3
 80019f8:	2310      	movs	r3, #16
 80019fa:	001a      	movs	r2, r3
 80019fc:	2100      	movs	r1, #0
 80019fe:	f00b fdb5 	bl	800d56c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a02:	2314      	movs	r3, #20
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	0018      	movs	r0, r3
 8001a08:	230c      	movs	r3, #12
 8001a0a:	001a      	movs	r2, r3
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	f00b fdad 	bl	800d56c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	0018      	movs	r0, r3
 8001a16:	2310      	movs	r3, #16
 8001a18:	001a      	movs	r2, r3
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	f00b fda6 	bl	800d56c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a20:	4b2e      	ldr	r3, [pc, #184]	@ (8001adc <MX_TIM2_Init+0xf0>)
 8001a22:	2280      	movs	r2, #128	@ 0x80
 8001a24:	05d2      	lsls	r2, r2, #23
 8001a26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 8001a28:	4b2c      	ldr	r3, [pc, #176]	@ (8001adc <MX_TIM2_Init+0xf0>)
 8001a2a:	223f      	movs	r2, #63	@ 0x3f
 8001a2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001adc <MX_TIM2_Init+0xf0>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2097152 - 1;
 8001a34:	4b29      	ldr	r3, [pc, #164]	@ (8001adc <MX_TIM2_Init+0xf0>)
 8001a36:	4a2a      	ldr	r2, [pc, #168]	@ (8001ae0 <MX_TIM2_Init+0xf4>)
 8001a38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001a3a:	4b28      	ldr	r3, [pc, #160]	@ (8001adc <MX_TIM2_Init+0xf0>)
 8001a3c:	2280      	movs	r2, #128	@ 0x80
 8001a3e:	0092      	lsls	r2, r2, #2
 8001a40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a42:	4b26      	ldr	r3, [pc, #152]	@ (8001adc <MX_TIM2_Init+0xf0>)
 8001a44:	2280      	movs	r2, #128	@ 0x80
 8001a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a48:	4b24      	ldr	r3, [pc, #144]	@ (8001adc <MX_TIM2_Init+0xf0>)
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f007 fef8 	bl	8009840 <HAL_TIM_Base_Init>
 8001a50:	1e03      	subs	r3, r0, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001a54:	f000 fc1e 	bl	8002294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a58:	2120      	movs	r1, #32
 8001a5a:	187b      	adds	r3, r7, r1
 8001a5c:	2280      	movs	r2, #128	@ 0x80
 8001a5e:	0152      	lsls	r2, r2, #5
 8001a60:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a62:	187a      	adds	r2, r7, r1
 8001a64:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <MX_TIM2_Init+0xf0>)
 8001a66:	0011      	movs	r1, r2
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f009 f867 	bl	800ab3c <HAL_TIM_ConfigClockSource>
 8001a6e:	1e03      	subs	r3, r0, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001a72:	f000 fc0f 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001a76:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <MX_TIM2_Init+0xf0>)
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f008 fb93 	bl	800a1a4 <HAL_TIM_IC_Init>
 8001a7e:	1e03      	subs	r3, r0, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001a82:	f000 fc07 	bl	8002294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a86:	2114      	movs	r1, #20
 8001a88:	187b      	adds	r3, r7, r1
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8e:	187b      	adds	r3, r7, r1
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a94:	187a      	adds	r2, r7, r1
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <MX_TIM2_Init+0xf0>)
 8001a98:	0011      	movs	r1, r2
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f00a f808 	bl	800bab0 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa0:	1e03      	subs	r3, r0, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001aa4:	f000 fbf6 	bl	8002294 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2202      	movs	r2, #2
 8001aac:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	220f      	movs	r2, #15
 8001abe:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ac0:	1d39      	adds	r1, r7, #4
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <MX_TIM2_Init+0xf0>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f008 fe94 	bl	800a7f4 <HAL_TIM_IC_ConfigChannel>
 8001acc:	1e03      	subs	r3, r0, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001ad0:	f000 fbe0 	bl	8002294 <Error_Handler>

  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ad4:	46c0      	nop			@ (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b00c      	add	sp, #48	@ 0x30
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000814 	.word	0x20000814
 8001ae0:	001fffff 	.word	0x001fffff

08001ae4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08e      	sub	sp, #56	@ 0x38
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	2328      	movs	r3, #40	@ 0x28
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	0018      	movs	r0, r3
 8001af0:	2310      	movs	r3, #16
 8001af2:	001a      	movs	r2, r3
 8001af4:	2100      	movs	r1, #0
 8001af6:	f00b fd39 	bl	800d56c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afa:	231c      	movs	r3, #28
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	0018      	movs	r0, r3
 8001b00:	230c      	movs	r3, #12
 8001b02:	001a      	movs	r2, r3
 8001b04:	2100      	movs	r1, #0
 8001b06:	f00b fd31 	bl	800d56c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b0a:	003b      	movs	r3, r7
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	231c      	movs	r3, #28
 8001b10:	001a      	movs	r2, r3
 8001b12:	2100      	movs	r1, #0
 8001b14:	f00b fd2a 	bl	800d56c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b18:	4b32      	ldr	r3, [pc, #200]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001b1a:	4a33      	ldr	r2, [pc, #204]	@ (8001be8 <MX_TIM3_Init+0x104>)
 8001b1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 8001b1e:	4b31      	ldr	r3, [pc, #196]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001b20:	4a32      	ldr	r2, [pc, #200]	@ (8001bec <MX_TIM3_Init+0x108>)
 8001b22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b24:	4b2f      	ldr	r3, [pc, #188]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8001b2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001b2c:	4a30      	ldr	r2, [pc, #192]	@ (8001bf0 <MX_TIM3_Init+0x10c>)
 8001b2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001b30:	4b2c      	ldr	r3, [pc, #176]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001b32:	2280      	movs	r2, #128	@ 0x80
 8001b34:	0092      	lsls	r2, r2, #2
 8001b36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b38:	4b2a      	ldr	r3, [pc, #168]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001b3a:	2280      	movs	r2, #128	@ 0x80
 8001b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b3e:	4b29      	ldr	r3, [pc, #164]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001b40:	0018      	movs	r0, r3
 8001b42:	f007 fe7d 	bl	8009840 <HAL_TIM_Base_Init>
 8001b46:	1e03      	subs	r3, r0, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001b4a:	f000 fba3 	bl	8002294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4e:	2128      	movs	r1, #40	@ 0x28
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	2280      	movs	r2, #128	@ 0x80
 8001b54:	0152      	lsls	r2, r2, #5
 8001b56:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b58:	187a      	adds	r2, r7, r1
 8001b5a:	4b22      	ldr	r3, [pc, #136]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001b5c:	0011      	movs	r1, r2
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f008 ffec 	bl	800ab3c <HAL_TIM_ConfigClockSource>
 8001b64:	1e03      	subs	r3, r0, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001b68:	f000 fb94 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f007 ff6c 	bl	8009a4c <HAL_TIM_OC_Init>
 8001b74:	1e03      	subs	r3, r0, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001b78:	f000 fb8c 	bl	8002294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7c:	211c      	movs	r1, #28
 8001b7e:	187b      	adds	r3, r7, r1
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b84:	187b      	adds	r3, r7, r1
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b8a:	187a      	adds	r2, r7, r1
 8001b8c:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001b8e:	0011      	movs	r1, r2
 8001b90:	0018      	movs	r0, r3
 8001b92:	f009 ff8d 	bl	800bab0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b96:	1e03      	subs	r3, r0, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001b9a:	f000 fb7b 	bl	8002294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b9e:	003b      	movs	r3, r7
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001ba4:	003b      	movs	r3, r7
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001baa:	003b      	movs	r3, r7
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bb0:	003b      	movs	r3, r7
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb6:	0039      	movs	r1, r7
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f008 fdb9 	bl	800a734 <HAL_TIM_OC_ConfigChannel>
 8001bc2:	1e03      	subs	r3, r0, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001bc6:	f000 fb65 	bl	8002294 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001bca:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	699a      	ldr	r2, [r3, #24]
 8001bd0:	4b04      	ldr	r3, [pc, #16]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2108      	movs	r1, #8
 8001bd6:	438a      	bics	r2, r1
 8001bd8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bda:	46c0      	nop			@ (mov r8, r8)
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b00e      	add	sp, #56	@ 0x38
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	200008d0 	.word	0x200008d0
 8001be8:	40000400 	.word	0x40000400
 8001bec:	00007fff 	.word	0x00007fff
 8001bf0:	00000fff 	.word	0x00000fff

08001bf4 <MX_TIM1_Init>:

void MX_TIM1_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	@ 0x70
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bfa:	2360      	movs	r3, #96	@ 0x60
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	0018      	movs	r0, r3
 8001c00:	2310      	movs	r3, #16
 8001c02:	001a      	movs	r2, r3
 8001c04:	2100      	movs	r1, #0
 8001c06:	f00b fcb1 	bl	800d56c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0a:	2354      	movs	r3, #84	@ 0x54
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	0018      	movs	r0, r3
 8001c10:	230c      	movs	r3, #12
 8001c12:	001a      	movs	r2, r3
 8001c14:	2100      	movs	r1, #0
 8001c16:	f00b fca9 	bl	800d56c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c1a:	2338      	movs	r3, #56	@ 0x38
 8001c1c:	18fb      	adds	r3, r7, r3
 8001c1e:	0018      	movs	r0, r3
 8001c20:	231c      	movs	r3, #28
 8001c22:	001a      	movs	r2, r3
 8001c24:	2100      	movs	r1, #0
 8001c26:	f00b fca1 	bl	800d56c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	2334      	movs	r3, #52	@ 0x34
 8001c30:	001a      	movs	r2, r3
 8001c32:	2100      	movs	r1, #0
 8001c34:	f00b fc9a 	bl	800d56c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c38:	4b5f      	ldr	r3, [pc, #380]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001c3a:	4a60      	ldr	r2, [pc, #384]	@ (8001dbc <MX_TIM1_Init+0x1c8>)
 8001c3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c3e:	4b5e      	ldr	r3, [pc, #376]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c44:	4b5c      	ldr	r3, [pc, #368]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024 - 1;
 8001c4a:	4b5b      	ldr	r3, [pc, #364]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001c4c:	4a5c      	ldr	r2, [pc, #368]	@ (8001dc0 <MX_TIM1_Init+0x1cc>)
 8001c4e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001c50:	4b59      	ldr	r3, [pc, #356]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001c52:	2280      	movs	r2, #128	@ 0x80
 8001c54:	0052      	lsls	r2, r2, #1
 8001c56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c58:	4b57      	ldr	r3, [pc, #348]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c5e:	4b56      	ldr	r3, [pc, #344]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001c60:	2280      	movs	r2, #128	@ 0x80
 8001c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c64:	4b54      	ldr	r3, [pc, #336]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001c66:	0018      	movs	r0, r3
 8001c68:	f007 fdea 	bl	8009840 <HAL_TIM_Base_Init>
 8001c6c:	1e03      	subs	r3, r0, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001c70:	f000 fb10 	bl	8002294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c74:	2160      	movs	r1, #96	@ 0x60
 8001c76:	187b      	adds	r3, r7, r1
 8001c78:	2280      	movs	r2, #128	@ 0x80
 8001c7a:	0152      	lsls	r2, r2, #5
 8001c7c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c7e:	187a      	adds	r2, r7, r1
 8001c80:	4b4d      	ldr	r3, [pc, #308]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001c82:	0011      	movs	r1, r2
 8001c84:	0018      	movs	r0, r3
 8001c86:	f008 ff59 	bl	800ab3c <HAL_TIM_ConfigClockSource>
 8001c8a:	1e03      	subs	r3, r0, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001c8e:	f000 fb01 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c92:	4b49      	ldr	r3, [pc, #292]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001c94:	0018      	movs	r0, r3
 8001c96:	f008 f939 	bl	8009f0c <HAL_TIM_PWM_Init>
 8001c9a:	1e03      	subs	r3, r0, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8001c9e:	f000 faf9 	bl	8002294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca2:	2154      	movs	r1, #84	@ 0x54
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001caa:	187b      	adds	r3, r7, r1
 8001cac:	2200      	movs	r2, #0
 8001cae:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cb6:	187a      	adds	r2, r7, r1
 8001cb8:	4b3f      	ldr	r3, [pc, #252]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001cba:	0011      	movs	r1, r2
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f009 fef7 	bl	800bab0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc2:	1e03      	subs	r3, r0, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001cc6:	f000 fae5 	bl	8002294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cca:	2138      	movs	r1, #56	@ 0x38
 8001ccc:	187b      	adds	r3, r7, r1
 8001cce:	2260      	movs	r2, #96	@ 0x60
 8001cd0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001cd2:	187b      	adds	r3, r7, r1
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd8:	187b      	adds	r3, r7, r1
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cde:	187b      	adds	r3, r7, r1
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce4:	187b      	adds	r3, r7, r1
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	2200      	movs	r2, #0
 8001cee:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cf0:	187b      	adds	r3, r7, r1
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cf6:	1879      	adds	r1, r7, r1
 8001cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f008 fe1d 	bl	800a93c <HAL_TIM_PWM_ConfigChannel>
 8001d02:	1e03      	subs	r3, r0, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001d06:	f000 fac5 	bl	8002294 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8001d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	699a      	ldr	r2, [r3, #24]
 8001d10:	4b29      	ldr	r3, [pc, #164]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	492b      	ldr	r1, [pc, #172]	@ (8001dc4 <MX_TIM1_Init+0x1d0>)
 8001d16:	400a      	ands	r2, r1
 8001d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d1a:	2338      	movs	r3, #56	@ 0x38
 8001d1c:	18f9      	adds	r1, r7, r3
 8001d1e:	4b26      	ldr	r3, [pc, #152]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001d20:	220c      	movs	r2, #12
 8001d22:	0018      	movs	r0, r3
 8001d24:	f008 fe0a 	bl	800a93c <HAL_TIM_PWM_ConfigChannel>
 8001d28:	1e03      	subs	r3, r0, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001d2c:	f000 fab2 	bl	8002294 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8001d30:	4b21      	ldr	r3, [pc, #132]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	69da      	ldr	r2, [r3, #28]
 8001d36:	4b20      	ldr	r3, [pc, #128]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4922      	ldr	r1, [pc, #136]	@ (8001dc4 <MX_TIM1_Init+0x1d0>)
 8001d3c:	400a      	ands	r2, r1
 8001d3e:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2200      	movs	r2, #0
 8001d4a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d4c:	1d3b      	adds	r3, r7, #4
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	2200      	movs	r2, #0
 8001d56:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	2280      	movs	r2, #128	@ 0x80
 8001d62:	0192      	lsls	r2, r2, #6
 8001d64:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	2200      	movs	r2, #0
 8001d76:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	2280      	movs	r2, #128	@ 0x80
 8001d7c:	0492      	lsls	r2, r2, #18
 8001d7e:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	2200      	movs	r2, #0
 8001d84:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	2200      	movs	r2, #0
 8001d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	2200      	movs	r2, #0
 8001d90:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d92:	1d3a      	adds	r2, r7, #4
 8001d94:	4b08      	ldr	r3, [pc, #32]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001d96:	0011      	movs	r1, r2
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f009 fef1 	bl	800bb80 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d9e:	1e03      	subs	r3, r0, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM1_Init+0x1b2>
  {
    Error_Handler();
 8001da2:	f000 fa77 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001da6:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001da8:	0018      	movs	r0, r3
 8001daa:	f003 fb53 	bl	8005454 <HAL_TIM_MspPostInit>

}
 8001dae:	46c0      	nop			@ (mov r8, r8)
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b01c      	add	sp, #112	@ 0x70
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			@ (mov r8, r8)
 8001db8:	2000098c 	.word	0x2000098c
 8001dbc:	40012c00 	.word	0x40012c00
 8001dc0:	000003ff 	.word	0x000003ff
 8001dc4:	fffff7ff 	.word	0xfffff7ff

08001dc8 <MX_TIM17_Init>:

void MX_TIM17_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b094      	sub	sp, #80	@ 0x50
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dce:	2334      	movs	r3, #52	@ 0x34
 8001dd0:	18fb      	adds	r3, r7, r3
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	231c      	movs	r3, #28
 8001dd6:	001a      	movs	r2, r3
 8001dd8:	2100      	movs	r1, #0
 8001dda:	f00b fbc7 	bl	800d56c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dde:	003b      	movs	r3, r7
 8001de0:	0018      	movs	r0, r3
 8001de2:	2334      	movs	r3, #52	@ 0x34
 8001de4:	001a      	movs	r2, r3
 8001de6:	2100      	movs	r1, #0
 8001de8:	f00b fbc0 	bl	800d56c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001dec:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001dee:	4a3b      	ldr	r2, [pc, #236]	@ (8001edc <MX_TIM17_Init+0x114>)
 8001df0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 8001df2:	4b39      	ldr	r3, [pc, #228]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001df4:	4a3a      	ldr	r2, [pc, #232]	@ (8001ee0 <MX_TIM17_Init+0x118>)
 8001df6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df8:	4b37      	ldr	r3, [pc, #220]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024 - 1;
 8001dfe:	4b36      	ldr	r3, [pc, #216]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001e00:	4a38      	ldr	r2, [pc, #224]	@ (8001ee4 <MX_TIM17_Init+0x11c>)
 8001e02:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001e04:	4b34      	ldr	r3, [pc, #208]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001e06:	2280      	movs	r2, #128	@ 0x80
 8001e08:	0092      	lsls	r2, r2, #2
 8001e0a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001e0c:	4b32      	ldr	r3, [pc, #200]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e12:	4b31      	ldr	r3, [pc, #196]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001e14:	2280      	movs	r2, #128	@ 0x80
 8001e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001e18:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f007 fd10 	bl	8009840 <HAL_TIM_Base_Init>
 8001e20:	1e03      	subs	r3, r0, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001e24:	f000 fa36 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001e28:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f007 fe0e 	bl	8009a4c <HAL_TIM_OC_Init>
 8001e30:	1e03      	subs	r3, r0, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8001e34:	f000 fa2e 	bl	8002294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001e38:	2134      	movs	r1, #52	@ 0x34
 8001e3a:	187b      	adds	r3, r7, r1
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 512 - 1;
 8001e40:	187b      	adds	r3, r7, r1
 8001e42:	4a29      	ldr	r2, [pc, #164]	@ (8001ee8 <MX_TIM17_Init+0x120>)
 8001e44:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e46:	187b      	adds	r3, r7, r1
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e4c:	187b      	adds	r3, r7, r1
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e52:	187b      	adds	r3, r7, r1
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e58:	187b      	adds	r3, r7, r1
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e5e:	187b      	adds	r3, r7, r1
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e64:	1879      	adds	r1, r7, r1
 8001e66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f008 fc62 	bl	800a734 <HAL_TIM_OC_ConfigChannel>
 8001e70:	1e03      	subs	r3, r0, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 8001e74:	f000 fa0e 	bl	8002294 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8001e78:	4b17      	ldr	r3, [pc, #92]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699a      	ldr	r2, [r3, #24]
 8001e7e:	4b16      	ldr	r3, [pc, #88]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2108      	movs	r1, #8
 8001e84:	430a      	orrs	r2, r1
 8001e86:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e88:	003b      	movs	r3, r7
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e8e:	003b      	movs	r3, r7
 8001e90:	2200      	movs	r2, #0
 8001e92:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e94:	003b      	movs	r3, r7
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e9a:	003b      	movs	r3, r7
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ea0:	003b      	movs	r3, r7
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ea6:	003b      	movs	r3, r7
 8001ea8:	2280      	movs	r2, #128	@ 0x80
 8001eaa:	0192      	lsls	r2, r2, #6
 8001eac:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001eae:	003b      	movs	r3, r7
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001eb4:	003b      	movs	r3, r7
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001eba:	003a      	movs	r2, r7
 8001ebc:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001ebe:	0011      	movs	r1, r2
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f009 fe5d 	bl	800bb80 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ec6:	1e03      	subs	r3, r0, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 8001eca:	f000 f9e3 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001ece:	46c0      	nop			@ (mov r8, r8)
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b014      	add	sp, #80	@ 0x50
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	2000069c 	.word	0x2000069c
 8001edc:	40014800 	.word	0x40014800
 8001ee0:	00007fff 	.word	0x00007fff
 8001ee4:	000003ff 	.word	0x000003ff
 8001ee8:	000001ff 	.word	0x000001ff

08001eec <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPTIM1_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001ef0:	4b17      	ldr	r3, [pc, #92]	@ (8001f50 <MX_LPTIM1_Init+0x64>)
 8001ef2:	4a18      	ldr	r2, [pc, #96]	@ (8001f54 <MX_LPTIM1_Init+0x68>)
 8001ef4:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001ef6:	4b16      	ldr	r3, [pc, #88]	@ (8001f50 <MX_LPTIM1_Init+0x64>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8001efc:	4b14      	ldr	r3, [pc, #80]	@ (8001f50 <MX_LPTIM1_Init+0x64>)
 8001efe:	22e0      	movs	r2, #224	@ 0xe0
 8001f00:	0112      	lsls	r2, r2, #4
 8001f02:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001f04:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f06:	4a14      	ldr	r2, [pc, #80]	@ (8001f58 <MX_LPTIM1_Init+0x6c>)
 8001f08:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001f0a:	4b11      	ldr	r3, [pc, #68]	@ (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8001f10:	4b0f      	ldr	r3, [pc, #60]	@ (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f12:	2280      	movs	r2, #128	@ 0x80
 8001f14:	03d2      	lsls	r2, r2, #15
 8001f16:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001f18:	4b0d      	ldr	r3, [pc, #52]	@ (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001f24:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001f2a:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f006 f9ef 	bl	8008310 <HAL_LPTIM_Init>
 8001f32:	1e03      	subs	r3, r0, #0
 8001f34:	d001      	beq.n	8001f3a <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8001f36:	f000 f9ad 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

  HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 2);
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	2102      	movs	r1, #2
 8001f3e:	2011      	movs	r0, #17
 8001f40:	f005 fcbe 	bl	80078c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001f44:	2011      	movs	r0, #17
 8001f46:	f005 fcd0 	bl	80078ea <HAL_NVIC_EnableIRQ>
}
 8001f4a:	46c0      	nop			@ (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000bcc 	.word	0x20000bcc
 8001f54:	40007c00 	.word	0x40007c00
 8001f58:	0000ffff 	.word	0x0000ffff

08001f5c <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	0018      	movs	r0, r3
 8001f66:	231c      	movs	r3, #28
 8001f68:	001a      	movs	r2, r3
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	f00b fafe 	bl	800d56c <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001f70:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff0 <MX_TIM14_Init+0x94>)
 8001f72:	4a20      	ldr	r2, [pc, #128]	@ (8001ff4 <MX_TIM14_Init+0x98>)
 8001f74:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (512 * 64) - 1;
 8001f76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff0 <MX_TIM14_Init+0x94>)
 8001f78:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff8 <MX_TIM14_Init+0x9c>)
 8001f7a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff0 <MX_TIM14_Init+0x94>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = led_blink_period;
 8001f82:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <MX_TIM14_Init+0xa0>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff0 <MX_TIM14_Init+0x94>)
 8001f88:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001f8a:	4b19      	ldr	r3, [pc, #100]	@ (8001ff0 <MX_TIM14_Init+0x94>)
 8001f8c:	2280      	movs	r2, #128	@ 0x80
 8001f8e:	0092      	lsls	r2, r2, #2
 8001f90:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f92:	4b17      	ldr	r3, [pc, #92]	@ (8001ff0 <MX_TIM14_Init+0x94>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001f98:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <MX_TIM14_Init+0x94>)
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f007 fc50 	bl	8009840 <HAL_TIM_Base_Init>
 8001fa0:	1e03      	subs	r3, r0, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8001fa4:	f000 f976 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8001fa8:	4b11      	ldr	r3, [pc, #68]	@ (8001ff0 <MX_TIM14_Init+0x94>)
 8001faa:	0018      	movs	r0, r3
 8001fac:	f007 fd4e 	bl	8009a4c <HAL_TIM_OC_Init>
 8001fb0:	1e03      	subs	r3, r0, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8001fb4:	f000 f96e 	bl	8002294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = led_blink_period - 1;
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001ffc <MX_TIM14_Init+0xa0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	1e5a      	subs	r2, r3, #1
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fd4:	1d39      	adds	r1, r7, #4
 8001fd6:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <MX_TIM14_Init+0x94>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f008 fbaa 	bl	800a734 <HAL_TIM_OC_ConfigChannel>
 8001fe0:	1e03      	subs	r3, r0, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM14_Init+0x8c>
  {
    Error_Handler();
 8001fe4:	f000 f956 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001fe8:	46c0      	nop			@ (mov r8, r8)
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b008      	add	sp, #32
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	200005e0 	.word	0x200005e0
 8001ff4:	40002000 	.word	0x40002000
 8001ff8:	00007fff 	.word	0x00007fff
 8001ffc:	20000020 	.word	0x20000020

08002000 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8002004:	4b15      	ldr	r3, [pc, #84]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002006:	4a16      	ldr	r2, [pc, #88]	@ (8002060 <MX_USART2_UART_Init+0x60>)
 8002008:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 800200a:	4b14      	ldr	r3, [pc, #80]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 800200c:	4a15      	ldr	r2, [pc, #84]	@ (8002064 <MX_USART2_UART_Init+0x64>)
 800200e:	605a      	str	r2, [r3, #4]
  //huart2.Init.BaudRate = 57600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002010:	4b12      	ldr	r3, [pc, #72]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002016:	4b11      	ldr	r3, [pc, #68]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002018:	2200      	movs	r2, #0
 800201a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800201c:	4b0f      	ldr	r3, [pc, #60]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002022:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002024:	220c      	movs	r2, #12
 8002026:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002028:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800202e:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002030:	2200      	movs	r2, #0
 8002032:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002034:	4b09      	ldr	r3, [pc, #36]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002036:	2200      	movs	r2, #0
 8002038:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800203a:	4b08      	ldr	r3, [pc, #32]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 800203c:	2200      	movs	r2, #0
 800203e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002040:	4b06      	ldr	r3, [pc, #24]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002042:	2200      	movs	r2, #0
 8002044:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002046:	4b05      	ldr	r3, [pc, #20]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002048:	0018      	movs	r0, r3
 800204a:	f009 fe55 	bl	800bcf8 <HAL_UART_Init>
 800204e:	1e03      	subs	r3, r0, #0
 8002050:	d001      	beq.n	8002056 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8002052:	f000 f91f 	bl	8002294 <Error_Handler>
  }
}
 8002056:	46c0      	nop			@ (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000a48 	.word	0x20000a48
 8002060:	40004400 	.word	0x40004400
 8002064:	00007a12 	.word	0x00007a12

08002068 <MX_DMA_Init>:
    Error_Handler();
  }
}

void MX_DMA_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800206e:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <MX_DMA_Init+0x48>)
 8002070:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002072:	4b0f      	ldr	r3, [pc, #60]	@ (80020b0 <MX_DMA_Init+0x48>)
 8002074:	2101      	movs	r1, #1
 8002076:	430a      	orrs	r2, r1
 8002078:	639a      	str	r2, [r3, #56]	@ 0x38
 800207a:	4b0d      	ldr	r3, [pc, #52]	@ (80020b0 <MX_DMA_Init+0x48>)
 800207c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800207e:	2201      	movs	r2, #1
 8002080:	4013      	ands	r3, r2
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */ // - ADC
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	2009      	movs	r0, #9
 800208c:	f005 fc18 	bl	80078c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002090:	2009      	movs	r0, #9
 8002092:	f005 fc2a 	bl	80078ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */ // - UART RX is ch2, TX is ch3
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 2);
 8002096:	2202      	movs	r2, #2
 8002098:	2102      	movs	r1, #2
 800209a:	200a      	movs	r0, #10
 800209c:	f005 fc10 	bl	80078c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80020a0:	200a      	movs	r0, #10
 80020a2:	f005 fc22 	bl	80078ea <HAL_NVIC_EnableIRQ>

}
 80020a6:	46c0      	nop			@ (mov r8, r8)
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b002      	add	sp, #8
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			@ (mov r8, r8)
 80020b0:	40021000 	.word	0x40021000

080020b4 <MX_GPIO_Init>:


void MX_GPIO_Init(void)
{
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b08b      	sub	sp, #44	@ 0x2c
 80020b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ba:	2414      	movs	r4, #20
 80020bc:	193b      	adds	r3, r7, r4
 80020be:	0018      	movs	r0, r3
 80020c0:	2314      	movs	r3, #20
 80020c2:	001a      	movs	r2, r3
 80020c4:	2100      	movs	r1, #0
 80020c6:	f00b fa51 	bl	800d56c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ca:	4b6e      	ldr	r3, [pc, #440]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 80020cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 80020d0:	2104      	movs	r1, #4
 80020d2:	430a      	orrs	r2, r1
 80020d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80020d6:	4b6b      	ldr	r3, [pc, #428]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 80020d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020da:	2204      	movs	r2, #4
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020e2:	4b68      	ldr	r3, [pc, #416]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 80020e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020e6:	4b67      	ldr	r3, [pc, #412]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 80020e8:	2120      	movs	r1, #32
 80020ea:	430a      	orrs	r2, r1
 80020ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80020ee:	4b65      	ldr	r3, [pc, #404]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 80020f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020f2:	2220      	movs	r2, #32
 80020f4:	4013      	ands	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	4b62      	ldr	r3, [pc, #392]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 80020fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020fe:	4b61      	ldr	r3, [pc, #388]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 8002100:	2101      	movs	r1, #1
 8002102:	430a      	orrs	r2, r1
 8002104:	635a      	str	r2, [r3, #52]	@ 0x34
 8002106:	4b5f      	ldr	r3, [pc, #380]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 8002108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800210a:	2201      	movs	r2, #1
 800210c:	4013      	ands	r3, r2
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002112:	4b5c      	ldr	r3, [pc, #368]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 8002114:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002116:	4b5b      	ldr	r3, [pc, #364]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 8002118:	2102      	movs	r1, #2
 800211a:	430a      	orrs	r2, r1
 800211c:	635a      	str	r2, [r3, #52]	@ 0x34
 800211e:	4b59      	ldr	r3, [pc, #356]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 8002120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002122:	2202      	movs	r2, #2
 8002124:	4013      	ands	r3, r2
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  /*HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, GPIO_PIN_RESET);*/

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800212a:	4b57      	ldr	r3, [pc, #348]	@ (8002288 <MX_GPIO_Init+0x1d4>)
 800212c:	2200      	movs	r2, #0
 800212e:	2140      	movs	r1, #64	@ 0x40
 8002130:	0018      	movs	r0, r3
 8002132:	f006 f8a6 	bl	8008282 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8002136:	193b      	adds	r3, r7, r4
 8002138:	2204      	movs	r2, #4
 800213a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800213c:	193b      	adds	r3, r7, r4
 800213e:	2288      	movs	r2, #136	@ 0x88
 8002140:	0352      	lsls	r2, r2, #13
 8002142:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	193b      	adds	r3, r7, r4
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 800214a:	193b      	adds	r3, r7, r4
 800214c:	4a4f      	ldr	r2, [pc, #316]	@ (800228c <MX_GPIO_Init+0x1d8>)
 800214e:	0019      	movs	r1, r3
 8002150:	0010      	movs	r0, r2
 8002152:	f005 ff15 	bl	8007f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_OUT_Pin */
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 8002156:	0021      	movs	r1, r4
 8002158:	193b      	adds	r3, r7, r4
 800215a:	2280      	movs	r2, #128	@ 0x80
 800215c:	0092      	lsls	r2, r2, #2
 800215e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002160:	000c      	movs	r4, r1
 8002162:	193b      	adds	r3, r7, r4
 8002164:	2201      	movs	r2, #1
 8002166:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	193b      	adds	r3, r7, r4
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	193b      	adds	r3, r7, r4
 8002170:	2200      	movs	r2, #0
 8002172:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 8002174:	193a      	adds	r2, r7, r4
 8002176:	23a0      	movs	r3, #160	@ 0xa0
 8002178:	05db      	lsls	r3, r3, #23
 800217a:	0011      	movs	r1, r2
 800217c:	0018      	movs	r0, r3
 800217e:	f005 feff 	bl	8007f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002182:	193b      	adds	r3, r7, r4
 8002184:	2240      	movs	r2, #64	@ 0x40
 8002186:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002188:	193b      	adds	r3, r7, r4
 800218a:	2201      	movs	r2, #1
 800218c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	193b      	adds	r3, r7, r4
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	193b      	adds	r3, r7, r4
 8002196:	2200      	movs	r2, #0
 8002198:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800219a:	193b      	adds	r3, r7, r4
 800219c:	4a3a      	ldr	r2, [pc, #232]	@ (8002288 <MX_GPIO_Init+0x1d4>)
 800219e:	0019      	movs	r1, r3
 80021a0:	0010      	movs	r0, r2
 80021a2:	f005 feed 	bl	8007f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_IN_Pin */
  GPIO_InitStruct.Pin = SW_IN_Pin;
 80021a6:	193b      	adds	r3, r7, r4
 80021a8:	2280      	movs	r2, #128	@ 0x80
 80021aa:	00d2      	lsls	r2, r2, #3
 80021ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ae:	193b      	adds	r3, r7, r4
 80021b0:	2200      	movs	r2, #0
 80021b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021b4:	193b      	adds	r3, r7, r4
 80021b6:	2201      	movs	r2, #1
 80021b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 80021ba:	193a      	adds	r2, r7, r4
 80021bc:	23a0      	movs	r3, #160	@ 0xa0
 80021be:	05db      	lsls	r3, r3, #23
 80021c0:	0011      	movs	r1, r2
 80021c2:	0018      	movs	r0, r3
 80021c4:	f005 fedc 	bl	8007f80 <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_Pin;
 80021c8:	193b      	adds	r3, r7, r4
 80021ca:	2240      	movs	r2, #64	@ 0x40
 80021cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ce:	193b      	adds	r3, r7, r4
 80021d0:	2201      	movs	r2, #1
 80021d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	193b      	adds	r3, r7, r4
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	193b      	adds	r3, r7, r4
 80021dc:	2200      	movs	r2, #0
 80021de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 80021e0:	193b      	adds	r3, r7, r4
 80021e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002290 <MX_GPIO_Init+0x1dc>)
 80021e4:	0019      	movs	r1, r3
 80021e6:	0010      	movs	r0, r2
 80021e8:	f005 feca 	bl	8007f80 <HAL_GPIO_Init>

  //Configure CLK IN Pin - i.e. dedicated clock inputs to use this pin rather than the Tap-tempo switch debouncing SW IN pin
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80021ec:	0021      	movs	r1, r4
 80021ee:	187b      	adds	r3, r7, r1
 80021f0:	2280      	movs	r2, #128	@ 0x80
 80021f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80021f4:	187b      	adds	r3, r7, r1
 80021f6:	22c4      	movs	r2, #196	@ 0xc4
 80021f8:	0392      	lsls	r2, r2, #14
 80021fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; //seems to improve stuff for CLK IN??
 80021fc:	000c      	movs	r4, r1
 80021fe:	193b      	adds	r3, r7, r4
 8002200:	2202      	movs	r2, #2
 8002202:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	193b      	adds	r3, r7, r4
 8002206:	2200      	movs	r2, #0
 8002208:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 800220a:	193b      	adds	r3, r7, r4
 800220c:	4a20      	ldr	r2, [pc, #128]	@ (8002290 <MX_GPIO_Init+0x1dc>)
 800220e:	0019      	movs	r1, r3
 8002210:	0010      	movs	r0, r2
 8002212:	f005 feb5 	bl	8007f80 <HAL_GPIO_Init>

  //Configure hacked on pot high leg -> i.e. it is to be set high
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 8002216:	0021      	movs	r1, r4
 8002218:	187b      	adds	r3, r7, r1
 800221a:	2280      	movs	r2, #128	@ 0x80
 800221c:	0152      	lsls	r2, r2, #5
 800221e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002220:	000c      	movs	r4, r1
 8002222:	193b      	adds	r3, r7, r4
 8002224:	2201      	movs	r2, #1
 8002226:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	193b      	adds	r3, r7, r4
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222e:	193b      	adds	r3, r7, r4
 8002230:	2200      	movs	r2, #0
 8002232:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 8002234:	193a      	adds	r2, r7, r4
 8002236:	23a0      	movs	r3, #160	@ 0xa0
 8002238:	05db      	lsls	r3, r3, #23
 800223a:	0011      	movs	r1, r2
 800223c:	0018      	movs	r0, r3
 800223e:	f005 fe9f 	bl	8007f80 <HAL_GPIO_Init>

  //Configure hacked on pot low leg -> i.e. it is to be set low
  GPIO_InitStruct.Pin = HACK_POT_LOW_Pin;
 8002242:	0021      	movs	r1, r4
 8002244:	187b      	adds	r3, r7, r1
 8002246:	2280      	movs	r2, #128	@ 0x80
 8002248:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224a:	187b      	adds	r3, r7, r1
 800224c:	2201      	movs	r2, #1
 800224e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	187b      	adds	r3, r7, r1
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	187b      	adds	r3, r7, r1
 8002258:	2200      	movs	r2, #0
 800225a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_LOW_GPIO_Port, &GPIO_InitStruct);
 800225c:	187a      	adds	r2, r7, r1
 800225e:	23a0      	movs	r3, #160	@ 0xa0
 8002260:	05db      	lsls	r3, r3, #23
 8002262:	0011      	movs	r1, r2
 8002264:	0018      	movs	r0, r3
 8002266:	f005 fe8b 	bl	8007f80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 2);
 800226a:	2202      	movs	r2, #2
 800226c:	2102      	movs	r1, #2
 800226e:	2007      	movs	r0, #7
 8002270:	f005 fb26 	bl	80078c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002274:	2007      	movs	r0, #7
 8002276:	f005 fb38 	bl	80078ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	46bd      	mov	sp, r7
 800227e:	b00b      	add	sp, #44	@ 0x2c
 8002280:	bd90      	pop	{r4, r7, pc}
 8002282:	46c0      	nop			@ (mov r8, r8)
 8002284:	40021000 	.word	0x40021000
 8002288:	50000800 	.word	0x50000800
 800228c:	50001400 	.word	0x50001400
 8002290:	50000400 	.word	0x50000400

08002294 <Error_Handler>:

void Error_Handler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002298:	b672      	cpsid	i
}
 800229a:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800229c:	46c0      	nop			@ (mov r8, r8)
 800229e:	e7fd      	b.n	800229c <Error_Handler+0x8>

080022a0 <System_Init>:
  {

  }
}

void System_Init(void){
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80022a4:	f003 ff8e 	bl	80061c4 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80022a8:	f7ff f9f6 	bl	8001698 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80022ac:	f7ff ff02 	bl	80020b4 <MX_GPIO_Init>
	MX_DMA_Init();
 80022b0:	f7ff feda 	bl	8002068 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80022b4:	f7ff fea4 	bl	8002000 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80022b8:	f7ff fa4c 	bl	8001754 <MX_ADC1_Init>
	MX_TIM16_Init(); //Frequency Gen.
 80022bc:	f7ff fb0a 	bl	80018d4 <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement is TIM2_ch1
 80022c0:	f7ff fb94 	bl	80019ec <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse is TIM3_ch1
 80022c4:	f7ff fc0e 	bl	8001ae4 <MX_TIM3_Init>
	MX_TIM1_Init(); //PWM Gen. Main/Secondary Oscillator on ch2/ch4
 80022c8:	f7ff fc94 	bl	8001bf4 <MX_TIM1_Init>
	MX_TIM17_Init();
 80022cc:	f7ff fd7c 	bl	8001dc8 <MX_TIM17_Init>
	MX_TIM14_Init();
 80022d0:	f7ff fe44 	bl	8001f5c <MX_TIM14_Init>
	//MX_IWDG_Init(); fucks up stuff - to be config'd
	MX_LPTIM1_Init(); //Tap Tempo checking/debouncing timer
 80022d4:	f7ff fe0a 	bl	8001eec <MX_LPTIM1_Init>

	//Calibrate ADC - DO NOT MOVE TO BEFORE OTHER CONFIG ABOVE
	HAL_ADCEx_Calibration_Start(&hadc1);
 80022d8:	4b21      	ldr	r3, [pc, #132]	@ (8002360 <System_Init+0xc0>)
 80022da:	0018      	movs	r0, r3
 80022dc:	f005 f90e 	bl	80074fc <HAL_ADCEx_Calibration_Start>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM16_callback);
 80022e0:	4a20      	ldr	r2, [pc, #128]	@ (8002364 <System_Init+0xc4>)
 80022e2:	4b21      	ldr	r3, [pc, #132]	@ (8002368 <System_Init+0xc8>)
 80022e4:	210e      	movs	r1, #14
 80022e6:	0018      	movs	r0, r3
 80022e8:	f008 fd82 	bl	800adf0 <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 80022ec:	4a1f      	ldr	r2, [pc, #124]	@ (800236c <System_Init+0xcc>)
 80022ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002360 <System_Init+0xc0>)
 80022f0:	2100      	movs	r1, #0
 80022f2:	0018      	movs	r0, r3
 80022f4:	f004 fb2e 	bl	8006954 <HAL_ADC_RegisterCallback>

	//Set custom callback function for I/P capture input falling edge event
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, &TIM2_ch1_IP_capture_callback);
 80022f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002370 <System_Init+0xd0>)
 80022fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002374 <System_Init+0xd4>)
 80022fc:	2112      	movs	r1, #18
 80022fe:	0018      	movs	r0, r3
 8002300:	f008 fd76 	bl	800adf0 <HAL_TIM_RegisterCallback>

	//Set custom callback function for I/P capture timer overflow (Update event/overflow)
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM2_ch1_overflow_callback);
 8002304:	4a1c      	ldr	r2, [pc, #112]	@ (8002378 <System_Init+0xd8>)
 8002306:	4b1b      	ldr	r3, [pc, #108]	@ (8002374 <System_Init+0xd4>)
 8002308:	210e      	movs	r1, #14
 800230a:	0018      	movs	r0, r3
 800230c:	f008 fd70 	bl	800adf0 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM3_ch1 (Measurement Re-Elapse) (CCR match)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM3_ch1_IP_capture_measurement_reelapse_callback);
 8002310:	4a1a      	ldr	r2, [pc, #104]	@ (800237c <System_Init+0xdc>)
 8002312:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <System_Init+0xe0>)
 8002314:	2114      	movs	r1, #20
 8002316:	0018      	movs	r0, r3
 8002318:	f008 fd6a 	bl	800adf0 <HAL_TIM_RegisterCallback>

	//Set custom callback function for DMA TX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID, &UART2_TX_transfer_complete_callback);
 800231c:	4a19      	ldr	r2, [pc, #100]	@ (8002384 <System_Init+0xe4>)
 800231e:	4b1a      	ldr	r3, [pc, #104]	@ (8002388 <System_Init+0xe8>)
 8002320:	2101      	movs	r1, #1
 8002322:	0018      	movs	r0, r3
 8002324:	f009 fd50 	bl	800bdc8 <HAL_UART_RegisterCallback>

	//Set custom callback function for DMA RX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, &UART2_RX_transfer_complete_callback);
 8002328:	4a18      	ldr	r2, [pc, #96]	@ (800238c <System_Init+0xec>)
 800232a:	4b17      	ldr	r3, [pc, #92]	@ (8002388 <System_Init+0xe8>)
 800232c:	2103      	movs	r1, #3
 800232e:	0018      	movs	r0, r3
 8002330:	f009 fd4a 	bl	800bdc8 <HAL_UART_RegisterCallback>

	//Set custom callback for LPTIM1 (Tap Tempo SW state check)
	HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, &LPTIM1_callback);
 8002334:	4a16      	ldr	r2, [pc, #88]	@ (8002390 <System_Init+0xf0>)
 8002336:	4b17      	ldr	r3, [pc, #92]	@ (8002394 <System_Init+0xf4>)
 8002338:	2102      	movs	r1, #2
 800233a:	0018      	movs	r0, r3
 800233c:	f006 fa0e 	bl	800875c <HAL_LPTIM_RegisterCallback>

	//Set custom callback function for TIM17
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback);
 8002340:	4a15      	ldr	r2, [pc, #84]	@ (8002398 <System_Init+0xf8>)
 8002342:	4b16      	ldr	r3, [pc, #88]	@ (800239c <System_Init+0xfc>)
 8002344:	2114      	movs	r1, #20
 8002346:	0018      	movs	r0, r3
 8002348:	f008 fd52 	bl	800adf0 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM14
	HAL_TIM_RegisterCallback(&htim14, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM14_callback);
 800234c:	4a14      	ldr	r2, [pc, #80]	@ (80023a0 <System_Init+0x100>)
 800234e:	4b15      	ldr	r3, [pc, #84]	@ (80023a4 <System_Init+0x104>)
 8002350:	2114      	movs	r1, #20
 8002352:	0018      	movs	r0, r3
 8002354:	f008 fd4c 	bl	800adf0 <HAL_TIM_RegisterCallback>
}
 8002358:	46c0      	nop			@ (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	46c0      	nop			@ (mov r8, r8)
 8002360:	200004fc 	.word	0x200004fc
 8002364:	080023a9 	.word	0x080023a9
 8002368:	20000758 	.word	0x20000758
 800236c:	080023fd 	.word	0x080023fd
 8002370:	08002491 	.word	0x08002491
 8002374:	20000814 	.word	0x20000814
 8002378:	080025ad 	.word	0x080025ad
 800237c:	080026b9 	.word	0x080026b9
 8002380:	200008d0 	.word	0x200008d0
 8002384:	080027f5 	.word	0x080027f5
 8002388:	20000a48 	.word	0x20000a48
 800238c:	08002805 	.word	0x08002805
 8002390:	08003be5 	.word	0x08003be5
 8002394:	20000bcc 	.word	0x20000bcc
 8002398:	08004001 	.word	0x08004001
 800239c:	2000069c 	.word	0x2000069c
 80023a0:	08004011 	.word	0x08004011
 80023a4:	200005e0 	.word	0x200005e0

080023a8 <TIM16_callback>:
#include "custom_callbacks.h"

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Set_Oscillator_Values(&params);
 80023b0:	4b0d      	ldr	r3, [pc, #52]	@ (80023e8 <TIM16_callback+0x40>)
 80023b2:	0018      	movs	r0, r3
 80023b4:	f002 fae6 	bl	8004984 <Set_Oscillator_Values>
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 80023b8:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <TIM16_callback+0x40>)
 80023ba:	2100      	movs	r1, #0
 80023bc:	0018      	movs	r0, r3
 80023be:	f002 fb0d 	bl	80049dc <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80023c2:	4a0a      	ldr	r2, [pc, #40]	@ (80023ec <TIM16_callback+0x44>)
 80023c4:	4b08      	ldr	r3, [pc, #32]	@ (80023e8 <TIM16_callback+0x40>)
 80023c6:	0011      	movs	r1, r2
 80023c8:	0018      	movs	r0, r3
 80023ca:	f002 fbfd 	bl	8004bc8 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 80023ce:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <TIM16_callback+0x48>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	001a      	movs	r2, r3
 80023d4:	4907      	ldr	r1, [pc, #28]	@ (80023f4 <TIM16_callback+0x4c>)
 80023d6:	4b08      	ldr	r3, [pc, #32]	@ (80023f8 <TIM16_callback+0x50>)
 80023d8:	0018      	movs	r0, r3
 80023da:	f004 fb47 	bl	8006a6c <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b002      	add	sp, #8
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	46c0      	nop			@ (mov r8, r8)
 80023e8:	20000c50 	.word	0x20000c50
 80023ec:	20000028 	.word	0x20000028
 80023f0:	0800de10 	.word	0x0800de10
 80023f4:	20000c44 	.word	0x20000c44
 80023f8:	200004fc 	.word	0x200004fc

080023fc <ADC_DMA_conversion_complete_callback>:

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 80023fc:	b5b0      	push	{r4, r5, r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	0018      	movs	r0, r3
 8002408:	f004 fbbe 	bl	8006b88 <HAL_ADC_Stop_DMA>
	Process_ADC_Conversion_Values(&params_manual, ADCResultsDMA);
 800240c:	4a1b      	ldr	r2, [pc, #108]	@ (800247c <ADC_DMA_conversion_complete_callback+0x80>)
 800240e:	4b1c      	ldr	r3, [pc, #112]	@ (8002480 <ADC_DMA_conversion_complete_callback+0x84>)
 8002410:	0011      	movs	r1, r2
 8002412:	0018      	movs	r0, r3
 8002414:	f002 fc6e 	bl	8004cf4 <Process_ADC_Conversion_Values>

	//copies into running params based on mode
	Update_Params_Based_On_Mode_Selected();
 8002418:	f7fe f882 	bl	8000520 <Update_Params_Based_On_Mode_Selected>

	enum Validate first_sync_complete = Get_Status_Bit(&statuses, First_Sync_Complete);
 800241c:	250f      	movs	r5, #15
 800241e:	197c      	adds	r4, r7, r5
 8002420:	4b18      	ldr	r3, [pc, #96]	@ (8002484 <ADC_DMA_conversion_complete_callback+0x88>)
 8002422:	2108      	movs	r1, #8
 8002424:	0018      	movs	r0, r3
 8002426:	f003 fe69 	bl	80060fc <Get_Status_Bit>
 800242a:	0003      	movs	r3, r0
 800242c:	7023      	strb	r3, [r4, #0]

	//overwrites raw speed values if a sync has completed
	if(first_sync_complete == YES){
 800242e:	197b      	adds	r3, r7, r5
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d10a      	bne.n	800244c <ADC_DMA_conversion_complete_callback+0x50>

		params.raw_start_value = params_working.raw_start_value;
 8002436:	4b14      	ldr	r3, [pc, #80]	@ (8002488 <ADC_DMA_conversion_complete_callback+0x8c>)
 8002438:	8a5b      	ldrh	r3, [r3, #18]
 800243a:	b29a      	uxth	r2, r3
 800243c:	4b13      	ldr	r3, [pc, #76]	@ (800248c <ADC_DMA_conversion_complete_callback+0x90>)
 800243e:	825a      	strh	r2, [r3, #18]
		params.raw_prescaler = params_working.raw_prescaler;
 8002440:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <ADC_DMA_conversion_complete_callback+0x8c>)
 8002442:	8b5b      	ldrh	r3, [r3, #26]
 8002444:	b29a      	uxth	r2, r3
 8002446:	4b11      	ldr	r3, [pc, #68]	@ (800248c <ADC_DMA_conversion_complete_callback+0x90>)
 8002448:	835a      	strh	r2, [r3, #26]
 800244a:	e003      	b.n	8002454 <ADC_DMA_conversion_complete_callback+0x58>
	}
	else{

		Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(&params);
 800244c:	4b0f      	ldr	r3, [pc, #60]	@ (800248c <ADC_DMA_conversion_complete_callback+0x90>)
 800244e:	0018      	movs	r0, r3
 8002450:	f002 fa62 	bl	8004918 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	}

	Process_TIM16_Final_Start_Value_and_Final_Prescaler(&params);
 8002454:	4b0d      	ldr	r3, [pc, #52]	@ (800248c <ADC_DMA_conversion_complete_callback+0x90>)
 8002456:	0018      	movs	r0, r3
 8002458:	f003 f9c2 	bl	80057e0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//after initial conversion is complete, set the conversion complete flag - leave this after raw/final value processing rather than actually when ADC values are converted for startup routine reasons.
	if(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){
 800245c:	4b09      	ldr	r3, [pc, #36]	@ (8002484 <ADC_DMA_conversion_complete_callback+0x88>)
 800245e:	2110      	movs	r1, #16
 8002460:	0018      	movs	r0, r3
 8002462:	f003 fe4b 	bl	80060fc <Get_Status_Bit>
 8002466:	1e03      	subs	r3, r0, #0
 8002468:	d104      	bne.n	8002474 <ADC_DMA_conversion_complete_callback+0x78>
		Set_Status_Bit(&statuses, Initial_ADC_Conversion_Complete);
 800246a:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <ADC_DMA_conversion_complete_callback+0x88>)
 800246c:	2110      	movs	r1, #16
 800246e:	0018      	movs	r0, r3
 8002470:	f003 fe58 	bl	8006124 <Set_Status_Bit>
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002474:	46c0      	nop			@ (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b004      	add	sp, #16
 800247a:	bdb0      	pop	{r4, r5, r7, pc}
 800247c:	20000c44 	.word	0x20000c44
 8002480:	20000c74 	.word	0x20000c74
 8002484:	20000c38 	.word	0x20000c38
 8002488:	20000cbc 	.word	0x20000cbc
 800248c:	20000c50 	.word	0x20000c50

08002490 <TIM2_ch1_IP_capture_callback>:

void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2100      	movs	r1, #0
 800249c:	0018      	movs	r0, r3
 800249e:	f008 fc23 	bl	800ace8 <HAL_TIM_ReadCapturedValue>
 80024a2:	0002      	movs	r2, r0
 80024a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002590 <TIM2_ch1_IP_capture_callback+0x100>)
 80024a6:	601a      	str	r2, [r3, #0]

	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 80024a8:	4b39      	ldr	r3, [pc, #228]	@ (8002590 <TIM2_ch1_IP_capture_callback+0x100>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	0a5b      	lsrs	r3, r3, #9
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	4b38      	ldr	r3, [pc, #224]	@ (8002594 <TIM2_ch1_IP_capture_callback+0x104>)
 80024b2:	801a      	strh	r2, [r3, #0]

	//since the input capture measurement is z, and this is 512x the interrupt period, we just use the interrupt
	//period = z/512 as the 'elapse period value' if we also set the elapse timer prescaler to 512x less than the
	//input capture measurement timer

	if(IP_CAP_fsm.current_state == IDLE){
 80024b4:	4b38      	ldr	r3, [pc, #224]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d108      	bne.n	80024d0 <TIM2_ch1_IP_capture_callback+0x40>

		Begin_Input_Capture_Measurement();
 80024be:	f002 f939 	bl	8004734 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 80024c2:	4b35      	ldr	r3, [pc, #212]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = IDLE;
 80024c8:	4b33      	ldr	r3, [pc, #204]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	705a      	strb	r2, [r3, #1]
		//BEGIN PROCESSING
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80024ce:	e05b      	b.n	8002588 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){ //second edge
 80024d0:	4b31      	ldr	r3, [pc, #196]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d124      	bne.n	8002524 <TIM2_ch1_IP_capture_callback+0x94>
		if(interrupt_period >= HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is >= than 129
 80024da:	4b2e      	ldr	r3, [pc, #184]	@ (8002594 <TIM2_ch1_IP_capture_callback+0x104>)
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b80      	cmp	r3, #128	@ 0x80
 80024e2:	d951      	bls.n	8002588 <TIM2_ch1_IP_capture_callback+0xf8>
				Start_Measurement_Reelapse_Timer();
 80024e4:	f002 f908 	bl	80046f8 <Start_Measurement_Reelapse_Timer>
			IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 80024e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 80024ea:	2202      	movs	r2, #2
 80024ec:	701a      	strb	r2, [r3, #0]
			IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 80024ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	705a      	strb	r2, [r3, #1]
			Copy_Params_Structs(&params, &params_to_be_loaded);
 80024f4:	4a29      	ldr	r2, [pc, #164]	@ (800259c <TIM2_ch1_IP_capture_callback+0x10c>)
 80024f6:	4b2a      	ldr	r3, [pc, #168]	@ (80025a0 <TIM2_ch1_IP_capture_callback+0x110>)
 80024f8:	0011      	movs	r1, r2
 80024fa:	0018      	movs	r0, r3
 80024fc:	f002 f8ea 	bl	80046d4 <Copy_Params_Structs>
			if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8002500:	4b28      	ldr	r3, [pc, #160]	@ (80025a4 <TIM2_ch1_IP_capture_callback+0x114>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b05      	cmp	r3, #5
 8002508:	d004      	beq.n	8002514 <TIM2_ch1_IP_capture_callback+0x84>
 800250a:	4b26      	ldr	r3, [pc, #152]	@ (80025a4 <TIM2_ch1_IP_capture_callback+0x114>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b07      	cmp	r3, #7
 8002512:	d101      	bne.n	8002518 <TIM2_ch1_IP_capture_callback+0x88>
				Advance_Pending_States();
 8002514:	f002 fd3a 	bl	8004f8c <Advance_Pending_States>
			Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 8002518:	4b23      	ldr	r3, [pc, #140]	@ (80025a8 <TIM2_ch1_IP_capture_callback+0x118>)
 800251a:	2104      	movs	r1, #4
 800251c:	0018      	movs	r0, r3
 800251e:	f003 fe01 	bl	8006124 <Set_Status_Bit>
}
 8002522:	e031      	b.n	8002588 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){ //first edge
 8002524:	4b1c      	ldr	r3, [pc, #112]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d108      	bne.n	8002540 <TIM2_ch1_IP_capture_callback+0xb0>
		Begin_Input_Capture_Measurement();
 800252e:	f002 f901 	bl	8004734 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002532:	4b19      	ldr	r3, [pc, #100]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 8002534:	2203      	movs	r2, #3
 8002536:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8002538:	4b17      	ldr	r3, [pc, #92]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 800253a:	2202      	movs	r2, #2
 800253c:	705a      	strb	r2, [r3, #1]
}
 800253e:	e023      	b.n	8002588 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){ //second edge
 8002540:	4b15      	ldr	r3, [pc, #84]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b03      	cmp	r3, #3
 8002548:	d11e      	bne.n	8002588 <TIM2_ch1_IP_capture_callback+0xf8>
			Start_Measurement_Reelapse_Timer();
 800254a:	f002 f8d5 	bl	80046f8 <Start_Measurement_Reelapse_Timer>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 800254e:	4b12      	ldr	r3, [pc, #72]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 8002550:	2202      	movs	r2, #2
 8002552:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002554:	4b10      	ldr	r3, [pc, #64]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 8002556:	2203      	movs	r2, #3
 8002558:	705a      	strb	r2, [r3, #1]
		Copy_Params_Structs(&params, &params_to_be_loaded);
 800255a:	4a10      	ldr	r2, [pc, #64]	@ (800259c <TIM2_ch1_IP_capture_callback+0x10c>)
 800255c:	4b10      	ldr	r3, [pc, #64]	@ (80025a0 <TIM2_ch1_IP_capture_callback+0x110>)
 800255e:	0011      	movs	r1, r2
 8002560:	0018      	movs	r0, r3
 8002562:	f002 f8b7 	bl	80046d4 <Copy_Params_Structs>
		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8002566:	4b0f      	ldr	r3, [pc, #60]	@ (80025a4 <TIM2_ch1_IP_capture_callback+0x114>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b05      	cmp	r3, #5
 800256e:	d004      	beq.n	800257a <TIM2_ch1_IP_capture_callback+0xea>
 8002570:	4b0c      	ldr	r3, [pc, #48]	@ (80025a4 <TIM2_ch1_IP_capture_callback+0x114>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b07      	cmp	r3, #7
 8002578:	d101      	bne.n	800257e <TIM2_ch1_IP_capture_callback+0xee>
			Advance_Pending_States();
 800257a:	f002 fd07 	bl	8004f8c <Advance_Pending_States>
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 800257e:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <TIM2_ch1_IP_capture_callback+0x118>)
 8002580:	2104      	movs	r1, #4
 8002582:	0018      	movs	r0, r3
 8002584:	f003 fdce 	bl	8006124 <Set_Status_Bit>
}
 8002588:	46c0      	nop			@ (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	b002      	add	sp, #8
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20000c30 	.word	0x20000c30
 8002594:	20000c34 	.word	0x20000c34
 8002598:	20000444 	.word	0x20000444
 800259c:	20000c98 	.word	0x20000c98
 80025a0:	20000c50 	.word	0x20000c50
 80025a4:	20000430 	.word	0x20000430
 80025a8:	20000c38 	.word	0x20000c38

080025ac <TIM2_ch1_overflow_callback>:


void TIM2_ch1_overflow_callback(TIM_HandleTypeDef *htim){
 80025ac:	b590      	push	{r4, r7, lr}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

	union Speed_FSM_States previous = speed_fsm.prev_state;
 80025b4:	240c      	movs	r4, #12
 80025b6:	193b      	adds	r3, r7, r4
 80025b8:	4a3a      	ldr	r2, [pc, #232]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 80025ba:	7852      	ldrb	r2, [r2, #1]
 80025bc:	701a      	strb	r2, [r3, #0]

	if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){
 80025be:	4b3a      	ldr	r3, [pc, #232]	@ (80026a8 <TIM2_ch1_overflow_callback+0xfc>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d131      	bne.n	800262c <TIM2_ch1_overflow_callback+0x80>

		IP_CAP_fsm.current_state = IDLE;
 80025c8:	4b37      	ldr	r3, [pc, #220]	@ (80026a8 <TIM2_ch1_overflow_callback+0xfc>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 80025ce:	4b36      	ldr	r3, [pc, #216]	@ (80026a8 <TIM2_ch1_overflow_callback+0xfc>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	705a      	strb	r2, [r3, #1]

		MIDI_CLK_fsm = NOT_COMPILING;
 80025d4:	4b35      	ldr	r3, [pc, #212]	@ (80026ac <TIM2_ch1_overflow_callback+0x100>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 80025da:	4b35      	ldr	r3, [pc, #212]	@ (80026b0 <TIM2_ch1_overflow_callback+0x104>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80025e0:	2380      	movs	r3, #128	@ 0x80
 80025e2:	0099      	lsls	r1, r3, #2
 80025e4:	23a0      	movs	r3, #160	@ 0xa0
 80025e6:	05db      	lsls	r3, r3, #23
 80025e8:	2201      	movs	r2, #1
 80025ea:	0018      	movs	r0, r3
 80025ec:	f005 fe49 	bl	8008282 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80025f0:	4b30      	ldr	r3, [pc, #192]	@ (80026b4 <TIM2_ch1_overflow_callback+0x108>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	2140      	movs	r1, #64	@ 0x40
 80025f6:	0018      	movs	r0, r3
 80025f8:	f005 fe43 	bl	8008282 <HAL_GPIO_WritePin>

		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80025fc:	4b29      	ldr	r3, [pc, #164]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b04      	cmp	r3, #4
 8002604:	d049      	beq.n	800269a <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 8002606:	4b27      	ldr	r3, [pc, #156]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b06      	cmp	r3, #6
 800260e:	d044      	beq.n	800269a <TIM2_ch1_overflow_callback+0xee>
 8002610:	4b24      	ldr	r3, [pc, #144]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002616:	2b08      	cmp	r3, #8
 8002618:	d03f      	beq.n	800269a <TIM2_ch1_overflow_callback+0xee>

			speed_fsm.prev_state = speed_fsm.current_state;
 800261a:	4b22      	ldr	r3, [pc, #136]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 800261c:	4a21      	ldr	r2, [pc, #132]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 800261e:	7812      	ldrb	r2, [r2, #0]
 8002620:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002622:	4b20      	ldr	r3, [pc, #128]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 8002624:	193a      	adds	r2, r7, r4
 8002626:	7812      	ldrb	r2, [r2, #0]
 8002628:	701a      	strb	r2, [r3, #0]

			speed_fsm.prev_state = speed_fsm.current_state;
			speed_fsm.current_state = previous;
		}
	}
}
 800262a:	e036      	b.n	800269a <TIM2_ch1_overflow_callback+0xee>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 800262c:	4b1e      	ldr	r3, [pc, #120]	@ (80026a8 <TIM2_ch1_overflow_callback+0xfc>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b03      	cmp	r3, #3
 8002634:	d131      	bne.n	800269a <TIM2_ch1_overflow_callback+0xee>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8002636:	4b1c      	ldr	r3, [pc, #112]	@ (80026a8 <TIM2_ch1_overflow_callback+0xfc>)
 8002638:	2202      	movs	r2, #2
 800263a:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 800263c:	4b1a      	ldr	r3, [pc, #104]	@ (80026a8 <TIM2_ch1_overflow_callback+0xfc>)
 800263e:	2203      	movs	r2, #3
 8002640:	705a      	strb	r2, [r3, #1]
		MIDI_CLK_fsm = NOT_COMPILING;
 8002642:	4b1a      	ldr	r3, [pc, #104]	@ (80026ac <TIM2_ch1_overflow_callback+0x100>)
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 8002648:	4b19      	ldr	r3, [pc, #100]	@ (80026b0 <TIM2_ch1_overflow_callback+0x104>)
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 800264e:	2380      	movs	r3, #128	@ 0x80
 8002650:	0099      	lsls	r1, r3, #2
 8002652:	23a0      	movs	r3, #160	@ 0xa0
 8002654:	05db      	lsls	r3, r3, #23
 8002656:	2201      	movs	r2, #1
 8002658:	0018      	movs	r0, r3
 800265a:	f005 fe12 	bl	8008282 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800265e:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <TIM2_ch1_overflow_callback+0x108>)
 8002660:	2200      	movs	r2, #0
 8002662:	2140      	movs	r1, #64	@ 0x40
 8002664:	0018      	movs	r0, r3
 8002666:	f005 fe0c 	bl	8008282 <HAL_GPIO_WritePin>
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 800266a:	4b0e      	ldr	r3, [pc, #56]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b04      	cmp	r3, #4
 8002672:	d012      	beq.n	800269a <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 8002674:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b06      	cmp	r3, #6
 800267c:	d00d      	beq.n	800269a <TIM2_ch1_overflow_callback+0xee>
 800267e:	4b09      	ldr	r3, [pc, #36]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002684:	2b08      	cmp	r3, #8
 8002686:	d008      	beq.n	800269a <TIM2_ch1_overflow_callback+0xee>
			speed_fsm.prev_state = speed_fsm.current_state;
 8002688:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 800268a:	4a06      	ldr	r2, [pc, #24]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 800268c:	7812      	ldrb	r2, [r2, #0]
 800268e:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002690:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 8002692:	220c      	movs	r2, #12
 8002694:	18ba      	adds	r2, r7, r2
 8002696:	7812      	ldrb	r2, [r2, #0]
 8002698:	701a      	strb	r2, [r3, #0]
}
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	46bd      	mov	sp, r7
 800269e:	b005      	add	sp, #20
 80026a0:	bd90      	pop	{r4, r7, pc}
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	20000430 	.word	0x20000430
 80026a8:	20000444 	.word	0x20000444
 80026ac:	20000ce0 	.word	0x20000ce0
 80026b0:	20000c36 	.word	0x20000c36
 80026b4:	50000800 	.word	0x50000800

080026b8 <TIM3_ch1_IP_capture_measurement_reelapse_callback>:

void TIM3_ch1_IP_capture_measurement_reelapse_callback(TIM_HandleTypeDef *htim){
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 80026c0:	4b41      	ldr	r3, [pc, #260]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b0b      	cmp	r3, #11
 80026c8:	d01c      	beq.n	8002704 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 80026ca:	4b3f      	ldr	r3, [pc, #252]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b0c      	cmp	r3, #12
 80026d2:	d017      	beq.n	8002704 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 80026d4:	4b3c      	ldr	r3, [pc, #240]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b0d      	cmp	r3, #13
 80026dc:	d012      	beq.n	8002704 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 80026de:	4b3a      	ldr	r3, [pc, #232]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b10      	cmp	r3, #16
 80026e6:	d00d      	beq.n	8002704 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 80026e8:	4b37      	ldr	r3, [pc, #220]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b11      	cmp	r3, #17
 80026f0:	d008      	beq.n	8002704 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 80026f2:	4b35      	ldr	r3, [pc, #212]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 80026f8:	2b12      	cmp	r3, #18
 80026fa:	d003      	beq.n	8002704 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>

		// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
		Set_Oscillator_Values(&params_to_be_loaded);
 80026fc:	4b33      	ldr	r3, [pc, #204]	@ (80027cc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 80026fe:	0018      	movs	r0, r3
 8002700:	f002 f940 	bl	8004984 <Set_Oscillator_Values>
	}

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8002704:	4b32      	ldr	r3, [pc, #200]	@ (80027d0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x118>)
 8002706:	2100      	movs	r1, #0
 8002708:	0018      	movs	r0, r3
 800270a:	f003 fc90 	bl	800602e <Stop_OC_TIM>

	if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){
 800270e:	4b31      	ldr	r3, [pc, #196]	@ (80027d4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d106      	bne.n	8002726 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x6e>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = IDLE;
 8002718:	4b2e      	ldr	r3, [pc, #184]	@ (80027d4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 800271e:	4b2d      	ldr	r3, [pc, #180]	@ (80027d4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002720:	2202      	movs	r2, #2
 8002722:	705a      	strb	r2, [r3, #1]
 8002724:	e00a      	b.n	800273c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>
	}
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8002726:	4b2b      	ldr	r3, [pc, #172]	@ (80027d4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b03      	cmp	r3, #3
 800272e:	d105      	bne.n	800273c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8002730:	4b28      	ldr	r3, [pc, #160]	@ (80027d4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002732:	2201      	movs	r2, #1
 8002734:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002736:	4b27      	ldr	r3, [pc, #156]	@ (80027d4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002738:	2203      	movs	r2, #3
 800273a:	705a      	strb	r2, [r3, #1]
	}

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 800273c:	4b22      	ldr	r3, [pc, #136]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b0b      	cmp	r3, #11
 8002744:	d03c      	beq.n	80027c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 8002746:	4b20      	ldr	r3, [pc, #128]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b0c      	cmp	r3, #12
 800274e:	d037      	beq.n	80027c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8002750:	4b1d      	ldr	r3, [pc, #116]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b0d      	cmp	r3, #13
 8002758:	d032      	beq.n	80027c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 800275a:	4b1b      	ldr	r3, [pc, #108]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b10      	cmp	r3, #16
 8002762:	d02d      	beq.n	80027c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 8002764:	4b18      	ldr	r3, [pc, #96]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b11      	cmp	r3, #17
 800276c:	d028      	beq.n	80027c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 800276e:	4b16      	ldr	r3, [pc, #88]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002774:	2b12      	cmp	r3, #18
 8002776:	d023      	beq.n	80027c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>

		Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002778:	4a17      	ldr	r2, [pc, #92]	@ (80027d8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x120>)
 800277a:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 800277c:	0011      	movs	r1, r2
 800277e:	0018      	movs	r0, r3
 8002780:	f001 ffa8 	bl	80046d4 <Copy_Params_Structs>
		Copy_Params_Structs(&params_to_be_loaded, &params);
 8002784:	4a15      	ldr	r2, [pc, #84]	@ (80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002786:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002788:	0011      	movs	r1, r2
 800278a:	0018      	movs	r0, r3
 800278c:	f001 ffa2 	bl	80046d4 <Copy_Params_Structs>

		Set_Status_Bit(&statuses, First_Sync_Complete);
 8002790:	4b13      	ldr	r3, [pc, #76]	@ (80027e0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x128>)
 8002792:	2108      	movs	r1, #8
 8002794:	0018      	movs	r0, r3
 8002796:	f003 fcc5 	bl	8006124 <Set_Status_Bit>

		Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 800279a:	4b10      	ldr	r3, [pc, #64]	@ (80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 800279c:	2100      	movs	r1, #0
 800279e:	0018      	movs	r0, r3
 80027a0:	f002 f91c 	bl	80049dc <Calculate_Next_Main_Oscillator_Values>
		Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80027a4:	4a0f      	ldr	r2, [pc, #60]	@ (80027e4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x12c>)
 80027a6:	4b0d      	ldr	r3, [pc, #52]	@ (80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 80027a8:	0011      	movs	r1, r2
 80027aa:	0018      	movs	r0, r3
 80027ac:	f002 fa0c 	bl	8004bc8 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 80027b0:	4b0d      	ldr	r3, [pc, #52]	@ (80027e8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x130>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	001a      	movs	r2, r3
 80027b6:	490d      	ldr	r1, [pc, #52]	@ (80027ec <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x134>)
 80027b8:	4b0d      	ldr	r3, [pc, #52]	@ (80027f0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x138>)
 80027ba:	0018      	movs	r0, r3
 80027bc:	f004 f956 	bl	8006a6c <HAL_ADC_Start_DMA>

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80027c0:	46c0      	nop			@ (mov r8, r8)
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b002      	add	sp, #8
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000430 	.word	0x20000430
 80027cc:	20000c98 	.word	0x20000c98
 80027d0:	200008d0 	.word	0x200008d0
 80027d4:	20000444 	.word	0x20000444
 80027d8:	20000cbc 	.word	0x20000cbc
 80027dc:	20000c50 	.word	0x20000c50
 80027e0:	20000c38 	.word	0x20000c38
 80027e4:	20000028 	.word	0x20000028
 80027e8:	0800de10 	.word	0x0800de10
 80027ec:	20000c44 	.word	0x20000c44
 80027f0:	200004fc 	.word	0x200004fc

080027f4 <UART2_TX_transfer_complete_callback>:

void UART2_TX_transfer_complete_callback(UART_HandleTypeDef *huart){
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

	//UART_DMA_TX_is_complete = YES;
}
 80027fc:	46c0      	nop			@ (mov r8, r8)
 80027fe:	46bd      	mov	sp, r7
 8002800:	b002      	add	sp, #8
 8002802:	bd80      	pop	{r7, pc}

08002804 <UART2_RX_transfer_complete_callback>:

void UART2_RX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

	if(Is_System_Real_Time_Status_Byte(rx_buffer) == YES){
 800280c:	4bbe      	ldr	r3, [pc, #760]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 800280e:	0018      	movs	r0, r3
 8002810:	f7fe fca8 	bl	8001164 <Is_System_Real_Time_Status_Byte>
 8002814:	0003      	movs	r3, r0
 8002816:	2b01      	cmp	r3, #1
 8002818:	d001      	beq.n	800281e <UART2_RX_transfer_complete_callback+0x1a>
 800281a:	f000 fc0c 	bl	8003036 <UART2_RX_transfer_complete_callback+0x832>

		if(Get_Status_Bit(&statuses, Start_Required_Before_Sync_Mode) == YES){
 800281e:	4bbb      	ldr	r3, [pc, #748]	@ (8002b0c <UART2_RX_transfer_complete_callback+0x308>)
 8002820:	2180      	movs	r1, #128	@ 0x80
 8002822:	0018      	movs	r0, r3
 8002824:	f003 fc6a 	bl	80060fc <Get_Status_Bit>
 8002828:	0003      	movs	r3, r0
 800282a:	2b01      	cmp	r3, #1
 800282c:	d001      	beq.n	8002832 <UART2_RX_transfer_complete_callback+0x2e>
 800282e:	f001 f895 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

			if((MIDI_CLK_fsm == NOT_COMPILING) && (IP_CAP_fsm.current_state == IDLE)
 8002832:	4bb7      	ldr	r3, [pc, #732]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x30c>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d159      	bne.n	80028f0 <UART2_RX_transfer_complete_callback+0xec>
 800283c:	4bb5      	ldr	r3, [pc, #724]	@ (8002b14 <UART2_RX_transfer_complete_callback+0x310>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d154      	bne.n	80028f0 <UART2_RX_transfer_complete_callback+0xec>
					&& ((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002846:	4bb4      	ldr	r3, [pc, #720]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b04      	cmp	r3, #4
 800284e:	d013      	beq.n	8002878 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == MANUAL_MODE)
 8002850:	4bb1      	ldr	r3, [pc, #708]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b01      	cmp	r3, #1
 8002858:	d00e      	beq.n	8002878 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE)
 800285a:	4baf      	ldr	r3, [pc, #700]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b06      	cmp	r3, #6
 8002862:	d009      	beq.n	8002878 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == PC_MODE)
 8002864:	4bac      	ldr	r3, [pc, #688]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b03      	cmp	r3, #3
 800286c:	d004      	beq.n	8002878 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == CC_MODE))){
 800286e:	4baa      	ldr	r3, [pc, #680]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d13b      	bne.n	80028f0 <UART2_RX_transfer_complete_callback+0xec>

				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002878:	4ba3      	ldr	r3, [pc, #652]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2bfa      	cmp	r3, #250	@ 0xfa
 8002880:	d10b      	bne.n	800289a <UART2_RX_transfer_complete_callback+0x96>

					speed_fsm.prev_state = speed_fsm.current_state;
 8002882:	4ba5      	ldr	r3, [pc, #660]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002884:	4aa4      	ldr	r2, [pc, #656]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002886:	7812      	ldrb	r2, [r2, #0]
 8002888:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A0_MODE;
 800288a:	4ba3      	ldr	r3, [pc, #652]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 800288c:	2209      	movs	r2, #9
 800288e:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 8002890:	4ba2      	ldr	r3, [pc, #648]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002896:	f001 f85e 	bl	8003956 <UART2_RX_transfer_complete_callback+0x1152>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800289a:	4b9b      	ldr	r3, [pc, #620]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2bf8      	cmp	r3, #248	@ 0xf8
 80028a2:	d001      	beq.n	80028a8 <UART2_RX_transfer_complete_callback+0xa4>
 80028a4:	f001 f857 	bl	8003956 <UART2_RX_transfer_complete_callback+0x1152>

					speed_fsm.prev_state = speed_fsm.current_state;
 80028a8:	4b9b      	ldr	r3, [pc, #620]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 80028aa:	4a9b      	ldr	r2, [pc, #620]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 80028ac:	7812      	ldrb	r2, [r2, #0]
 80028ae:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B0_MODE;
 80028b0:	4b99      	ldr	r3, [pc, #612]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 80028b2:	220b      	movs	r2, #11
 80028b4:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 80028b6:	4b99      	ldr	r3, [pc, #612]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80028bc:	2380      	movs	r3, #128	@ 0x80
 80028be:	0099      	lsls	r1, r3, #2
 80028c0:	23a0      	movs	r3, #160	@ 0xa0
 80028c2:	05db      	lsls	r3, r3, #23
 80028c4:	2200      	movs	r2, #0
 80028c6:	0018      	movs	r0, r3
 80028c8:	f005 fcdb 	bl	8008282 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80028cc:	4b94      	ldr	r3, [pc, #592]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	2140      	movs	r1, #64	@ 0x40
 80028d2:	0018      	movs	r0, r3
 80028d4:	f005 fcd5 	bl	8008282 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 80028d8:	4b8d      	ldr	r3, [pc, #564]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x30c>)
 80028da:	2201      	movs	r2, #1
 80028dc:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80028de:	4b8f      	ldr	r3, [pc, #572]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	3301      	adds	r3, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	4b8c      	ldr	r3, [pc, #560]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 80028ea:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80028ec:	f001 f833 	bl	8003956 <UART2_RX_transfer_complete_callback+0x1152>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A0_MODE){
 80028f0:	4b89      	ldr	r3, [pc, #548]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b09      	cmp	r3, #9
 80028f8:	d123      	bne.n	8002942 <UART2_RX_transfer_complete_callback+0x13e>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80028fa:	4b83      	ldr	r3, [pc, #524]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2bf8      	cmp	r3, #248	@ 0xf8
 8002902:	d001      	beq.n	8002908 <UART2_RX_transfer_complete_callback+0x104>
 8002904:	f001 f82a 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002908:	2380      	movs	r3, #128	@ 0x80
 800290a:	0099      	lsls	r1, r3, #2
 800290c:	23a0      	movs	r3, #160	@ 0xa0
 800290e:	05db      	lsls	r3, r3, #23
 8002910:	2200      	movs	r2, #0
 8002912:	0018      	movs	r0, r3
 8002914:	f005 fcb5 	bl	8008282 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002918:	4b81      	ldr	r3, [pc, #516]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 800291a:	2201      	movs	r2, #1
 800291c:	2140      	movs	r1, #64	@ 0x40
 800291e:	0018      	movs	r0, r3
 8002920:	f005 fcaf 	bl	8008282 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002924:	4b7a      	ldr	r3, [pc, #488]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x30c>)
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 800292a:	4b7c      	ldr	r3, [pc, #496]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	3301      	adds	r3, #1
 8002932:	b2da      	uxtb	r2, r3
 8002934:	4b79      	ldr	r3, [pc, #484]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002936:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8002938:	4b77      	ldr	r3, [pc, #476]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 800293a:	220a      	movs	r2, #10
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	f001 f80d 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A1_MODE){
 8002942:	4b75      	ldr	r3, [pc, #468]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b0a      	cmp	r3, #10
 800294a:	d145      	bne.n	80029d8 <UART2_RX_transfer_complete_callback+0x1d4>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800294c:	4b6e      	ldr	r3, [pc, #440]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2bf8      	cmp	r3, #248	@ 0xf8
 8002954:	d001      	beq.n	800295a <UART2_RX_transfer_complete_callback+0x156>
 8002956:	f001 f801 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 800295a:	4b6d      	ldr	r3, [pc, #436]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x30c>)
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002960:	4b6e      	ldr	r3, [pc, #440]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	3301      	adds	r3, #1
 8002968:	b2da      	uxtb	r2, r3
 800296a:	4b6c      	ldr	r3, [pc, #432]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 800296c:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 800296e:	4b6b      	ldr	r3, [pc, #428]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b0b      	cmp	r3, #11
 8002976:	d80f      	bhi.n	8002998 <UART2_RX_transfer_complete_callback+0x194>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002978:	2380      	movs	r3, #128	@ 0x80
 800297a:	0099      	lsls	r1, r3, #2
 800297c:	23a0      	movs	r3, #160	@ 0xa0
 800297e:	05db      	lsls	r3, r3, #23
 8002980:	2200      	movs	r2, #0
 8002982:	0018      	movs	r0, r3
 8002984:	f005 fc7d 	bl	8008282 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002988:	4b65      	ldr	r3, [pc, #404]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 800298a:	2201      	movs	r2, #1
 800298c:	2140      	movs	r1, #64	@ 0x40
 800298e:	0018      	movs	r0, r3
 8002990:	f005 fc77 	bl	8008282 <HAL_GPIO_WritePin>
 8002994:	f000 ffe2 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002998:	4b60      	ldr	r3, [pc, #384]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b18      	cmp	r3, #24
 80029a0:	d80f      	bhi.n	80029c2 <UART2_RX_transfer_complete_callback+0x1be>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80029a2:	2380      	movs	r3, #128	@ 0x80
 80029a4:	0099      	lsls	r1, r3, #2
 80029a6:	23a0      	movs	r3, #160	@ 0xa0
 80029a8:	05db      	lsls	r3, r3, #23
 80029aa:	2201      	movs	r2, #1
 80029ac:	0018      	movs	r0, r3
 80029ae:	f005 fc68 	bl	8008282 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80029b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	2140      	movs	r1, #64	@ 0x40
 80029b8:	0018      	movs	r0, r3
 80029ba:	f005 fc62 	bl	8008282 <HAL_GPIO_WritePin>
 80029be:	f000 ffcd 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 80029c2:	4b55      	ldr	r3, [pc, #340]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 80029c4:	220a      	movs	r2, #10
 80029c6:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 80029c8:	4b53      	ldr	r3, [pc, #332]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 80029ca:	2208      	movs	r2, #8
 80029cc:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 80029ce:	4b53      	ldr	r3, [pc, #332]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	701a      	strb	r2, [r3, #0]
 80029d4:	f000 ffc2 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE){
 80029d8:	4b4f      	ldr	r3, [pc, #316]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b0b      	cmp	r3, #11
 80029e0:	d142      	bne.n	8002a68 <UART2_RX_transfer_complete_callback+0x264>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80029e2:	4b49      	ldr	r3, [pc, #292]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2bf8      	cmp	r3, #248	@ 0xf8
 80029ea:	d001      	beq.n	80029f0 <UART2_RX_transfer_complete_callback+0x1ec>
 80029ec:	f000 ffb6 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 80029f0:	4b47      	ldr	r3, [pc, #284]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x30c>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80029f6:	4b49      	ldr	r3, [pc, #292]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	3301      	adds	r3, #1
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	4b46      	ldr	r3, [pc, #280]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002a02:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002a04:	4b45      	ldr	r3, [pc, #276]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b0b      	cmp	r3, #11
 8002a0c:	d80f      	bhi.n	8002a2e <UART2_RX_transfer_complete_callback+0x22a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002a0e:	2380      	movs	r3, #128	@ 0x80
 8002a10:	0099      	lsls	r1, r3, #2
 8002a12:	23a0      	movs	r3, #160	@ 0xa0
 8002a14:	05db      	lsls	r3, r3, #23
 8002a16:	2200      	movs	r2, #0
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f005 fc32 	bl	8008282 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002a1e:	4b40      	ldr	r3, [pc, #256]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	2140      	movs	r1, #64	@ 0x40
 8002a24:	0018      	movs	r0, r3
 8002a26:	f005 fc2c 	bl	8008282 <HAL_GPIO_WritePin>
 8002a2a:	f000 ff97 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002a2e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b18      	cmp	r3, #24
 8002a36:	d80f      	bhi.n	8002a58 <UART2_RX_transfer_complete_callback+0x254>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002a38:	2380      	movs	r3, #128	@ 0x80
 8002a3a:	0099      	lsls	r1, r3, #2
 8002a3c:	23a0      	movs	r3, #160	@ 0xa0
 8002a3e:	05db      	lsls	r3, r3, #23
 8002a40:	2201      	movs	r2, #1
 8002a42:	0018      	movs	r0, r3
 8002a44:	f005 fc1d 	bl	8008282 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002a48:	4b35      	ldr	r3, [pc, #212]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2140      	movs	r1, #64	@ 0x40
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f005 fc17 	bl	8008282 <HAL_GPIO_WritePin>
 8002a54:	f000 ff82 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002a58:	4b30      	ldr	r3, [pc, #192]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B1_MODE;
 8002a5e:	4b2e      	ldr	r3, [pc, #184]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002a60:	220c      	movs	r2, #12
 8002a62:	701a      	strb	r2, [r3, #0]
 8002a64:	f000 ff7a 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE){
 8002a68:	4b2b      	ldr	r3, [pc, #172]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	d158      	bne.n	8002b24 <UART2_RX_transfer_complete_callback+0x320>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002a72:	4b25      	ldr	r3, [pc, #148]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2bf8      	cmp	r3, #248	@ 0xf8
 8002a7a:	d138      	bne.n	8002aee <UART2_RX_transfer_complete_callback+0x2ea>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002a7c:	4b24      	ldr	r3, [pc, #144]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x30c>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002a82:	4b26      	ldr	r3, [pc, #152]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	3301      	adds	r3, #1
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	4b23      	ldr	r3, [pc, #140]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002a8e:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002a90:	4b22      	ldr	r3, [pc, #136]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b0b      	cmp	r3, #11
 8002a98:	d80f      	bhi.n	8002aba <UART2_RX_transfer_complete_callback+0x2b6>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	0099      	lsls	r1, r3, #2
 8002a9e:	23a0      	movs	r3, #160	@ 0xa0
 8002aa0:	05db      	lsls	r3, r3, #23
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f005 fbec 	bl	8008282 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	2140      	movs	r1, #64	@ 0x40
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f005 fbe6 	bl	8008282 <HAL_GPIO_WritePin>
 8002ab6:	f000 ff51 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002aba:	4b18      	ldr	r3, [pc, #96]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b18      	cmp	r3, #24
 8002ac2:	d80f      	bhi.n	8002ae4 <UART2_RX_transfer_complete_callback+0x2e0>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002ac4:	2380      	movs	r3, #128	@ 0x80
 8002ac6:	0099      	lsls	r1, r3, #2
 8002ac8:	23a0      	movs	r3, #160	@ 0xa0
 8002aca:	05db      	lsls	r3, r3, #23
 8002acc:	2201      	movs	r2, #1
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f005 fbd7 	bl	8008282 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002ad4:	4b12      	ldr	r3, [pc, #72]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2140      	movs	r1, #64	@ 0x40
 8002ada:	0018      	movs	r0, r3
 8002adc:	f005 fbd1 	bl	8008282 <HAL_GPIO_WritePin>
 8002ae0:	f000 ff3c 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	701a      	strb	r2, [r3, #0]
 8002aea:	f000 ff37 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002aee:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2bfa      	cmp	r3, #250	@ 0xfa
 8002af6:	d001      	beq.n	8002afc <UART2_RX_transfer_complete_callback+0x2f8>
 8002af8:	f000 ff30 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002afc:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002afe:	220d      	movs	r2, #13
 8002b00:	701a      	strb	r2, [r3, #0]
 8002b02:	f000 ff2b 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
 8002b06:	46c0      	nop			@ (mov r8, r8)
 8002b08:	200004dc 	.word	0x200004dc
 8002b0c:	20000c38 	.word	0x20000c38
 8002b10:	20000ce0 	.word	0x20000ce0
 8002b14:	20000444 	.word	0x20000444
 8002b18:	20000430 	.word	0x20000430
 8002b1c:	20000c36 	.word	0x20000c36
 8002b20:	50000800 	.word	0x50000800
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE){
 8002b24:	4bdc      	ldr	r3, [pc, #880]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b0d      	cmp	r3, #13
 8002b2c:	d160      	bne.n	8002bf0 <UART2_RX_transfer_complete_callback+0x3ec>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002b2e:	4bdb      	ldr	r3, [pc, #876]	@ (8002e9c <UART2_RX_transfer_complete_callback+0x698>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2bf8      	cmp	r3, #248	@ 0xf8
 8002b36:	d001      	beq.n	8002b3c <UART2_RX_transfer_complete_callback+0x338>
 8002b38:	f000 ff10 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8002b3c:	4bd8      	ldr	r3, [pc, #864]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x69c>)
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f001 ff20 	bl	8004984 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002b44:	2380      	movs	r3, #128	@ 0x80
 8002b46:	0099      	lsls	r1, r3, #2
 8002b48:	23a0      	movs	r3, #160	@ 0xa0
 8002b4a:	05db      	lsls	r3, r3, #23
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f005 fb97 	bl	8008282 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002b54:	4bd3      	ldr	r3, [pc, #844]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	2140      	movs	r1, #64	@ 0x40
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f005 fb91 	bl	8008282 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002b60:	2380      	movs	r3, #128	@ 0x80
 8002b62:	0099      	lsls	r1, r3, #2
 8002b64:	23a0      	movs	r3, #160	@ 0xa0
 8002b66:	05db      	lsls	r3, r3, #23
 8002b68:	2200      	movs	r2, #0
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f005 fb89 	bl	8008282 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002b70:	4bcc      	ldr	r3, [pc, #816]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	2140      	movs	r1, #64	@ 0x40
 8002b76:	0018      	movs	r0, r3
 8002b78:	f005 fb83 	bl	8008282 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002b7c:	4bca      	ldr	r3, [pc, #808]	@ (8002ea8 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 1;
 8002b82:	4bca      	ldr	r3, [pc, #808]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	701a      	strb	r2, [r3, #0]

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002b88:	4bc3      	ldr	r3, [pc, #780]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002b8a:	220d      	movs	r2, #13
 8002b8c:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002b8e:	4bc2      	ldr	r3, [pc, #776]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002b90:	2208      	movs	r2, #8
 8002b92:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8002b94:	4bc6      	ldr	r3, [pc, #792]	@ (8002eb0 <UART2_RX_transfer_complete_callback+0x6ac>)
 8002b96:	2100      	movs	r1, #0
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f003 fa48 	bl	800602e <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8002b9e:	4bc5      	ldr	r3, [pc, #788]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6b0>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002ba4:	4ac4      	ldr	r2, [pc, #784]	@ (8002eb8 <UART2_RX_transfer_complete_callback+0x6b4>)
 8002ba6:	4bbe      	ldr	r3, [pc, #760]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x69c>)
 8002ba8:	0011      	movs	r1, r2
 8002baa:	0018      	movs	r0, r3
 8002bac:	f001 fd92 	bl	80046d4 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8002bb0:	4ac2      	ldr	r2, [pc, #776]	@ (8002ebc <UART2_RX_transfer_complete_callback+0x6b8>)
 8002bb2:	4bbb      	ldr	r3, [pc, #748]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x69c>)
 8002bb4:	0011      	movs	r1, r2
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f001 fd8c 	bl	80046d4 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8002bbc:	4bc0      	ldr	r3, [pc, #768]	@ (8002ec0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002bbe:	2108      	movs	r1, #8
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f003 faaf 	bl	8006124 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002bc6:	4bbd      	ldr	r3, [pc, #756]	@ (8002ebc <UART2_RX_transfer_complete_callback+0x6b8>)
 8002bc8:	2100      	movs	r1, #0
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f001 ff06 	bl	80049dc <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002bd0:	4abc      	ldr	r2, [pc, #752]	@ (8002ec4 <UART2_RX_transfer_complete_callback+0x6c0>)
 8002bd2:	4bba      	ldr	r3, [pc, #744]	@ (8002ebc <UART2_RX_transfer_complete_callback+0x6b8>)
 8002bd4:	0011      	movs	r1, r2
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f001 fff6 	bl	8004bc8 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002bdc:	4bba      	ldr	r3, [pc, #744]	@ (8002ec8 <UART2_RX_transfer_complete_callback+0x6c4>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	001a      	movs	r2, r3
 8002be2:	49ba      	ldr	r1, [pc, #744]	@ (8002ecc <UART2_RX_transfer_complete_callback+0x6c8>)
 8002be4:	4bba      	ldr	r3, [pc, #744]	@ (8002ed0 <UART2_RX_transfer_complete_callback+0x6cc>)
 8002be6:	0018      	movs	r0, r3
 8002be8:	f003 ff40 	bl	8006a6c <HAL_ADC_Start_DMA>
 8002bec:	f000 feb6 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == NO)){
 8002bf0:	4ba9      	ldr	r3, [pc, #676]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d146      	bne.n	8002c88 <UART2_RX_transfer_complete_callback+0x484>
 8002bfa:	4bb1      	ldr	r3, [pc, #708]	@ (8002ec0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002bfc:	2120      	movs	r1, #32
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f003 fa7c 	bl	80060fc <Get_Status_Bit>
 8002c04:	1e03      	subs	r3, r0, #0
 8002c06:	d13f      	bne.n	8002c88 <UART2_RX_transfer_complete_callback+0x484>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c08:	4ba4      	ldr	r3, [pc, #656]	@ (8002e9c <UART2_RX_transfer_complete_callback+0x698>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2bf8      	cmp	r3, #248	@ 0xf8
 8002c10:	d001      	beq.n	8002c16 <UART2_RX_transfer_complete_callback+0x412>
 8002c12:	f000 fea3 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002c16:	4ba4      	ldr	r3, [pc, #656]	@ (8002ea8 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002c1c:	4ba3      	ldr	r3, [pc, #652]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	3301      	adds	r3, #1
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4ba1      	ldr	r3, [pc, #644]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c28:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002c2a:	4ba0      	ldr	r3, [pc, #640]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b0b      	cmp	r3, #11
 8002c32:	d80f      	bhi.n	8002c54 <UART2_RX_transfer_complete_callback+0x450>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002c34:	2380      	movs	r3, #128	@ 0x80
 8002c36:	0099      	lsls	r1, r3, #2
 8002c38:	23a0      	movs	r3, #160	@ 0xa0
 8002c3a:	05db      	lsls	r3, r3, #23
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f005 fb1f 	bl	8008282 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002c44:	4b97      	ldr	r3, [pc, #604]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	2140      	movs	r1, #64	@ 0x40
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f005 fb19 	bl	8008282 <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c50:	f000 fe84 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002c54:	4b95      	ldr	r3, [pc, #596]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b18      	cmp	r3, #24
 8002c5c:	d80f      	bhi.n	8002c7e <UART2_RX_transfer_complete_callback+0x47a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002c5e:	2380      	movs	r3, #128	@ 0x80
 8002c60:	0099      	lsls	r1, r3, #2
 8002c62:	23a0      	movs	r3, #160	@ 0xa0
 8002c64:	05db      	lsls	r3, r3, #23
 8002c66:	2201      	movs	r2, #1
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f005 fb0a 	bl	8008282 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002c6e:	4b8d      	ldr	r3, [pc, #564]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	2140      	movs	r1, #64	@ 0x40
 8002c74:	0018      	movs	r0, r3
 8002c76:	f005 fb04 	bl	8008282 <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c7a:	f000 fe6f 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002c7e:	4b8b      	ldr	r3, [pc, #556]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c84:	f000 fe6a 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8002c88:	4b83      	ldr	r3, [pc, #524]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d14c      	bne.n	8002d2c <UART2_RX_transfer_complete_callback+0x528>
 8002c92:	4b88      	ldr	r3, [pc, #544]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6b0>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d147      	bne.n	8002d2c <UART2_RX_transfer_complete_callback+0x528>
 8002c9c:	4b88      	ldr	r3, [pc, #544]	@ (8002ec0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c9e:	2120      	movs	r1, #32
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f003 fa2b 	bl	80060fc <Get_Status_Bit>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d13f      	bne.n	8002d2c <UART2_RX_transfer_complete_callback+0x528>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002cac:	4b7b      	ldr	r3, [pc, #492]	@ (8002e9c <UART2_RX_transfer_complete_callback+0x698>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2bf8      	cmp	r3, #248	@ 0xf8
 8002cb4:	d11e      	bne.n	8002cf4 <UART2_RX_transfer_complete_callback+0x4f0>

					MIDI_CLK_tag = 0; //just in case
 8002cb6:	4b7d      	ldr	r3, [pc, #500]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002cbc:	4b7b      	ldr	r3, [pc, #492]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4b79      	ldr	r3, [pc, #484]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cc8:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_fsm = COMPILING;
 8002cca:	4b77      	ldr	r3, [pc, #476]	@ (8002ea8 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B0_MODE;
 8002cd0:	4b71      	ldr	r3, [pc, #452]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002cd2:	2210      	movs	r2, #16
 8002cd4:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002cd6:	4b70      	ldr	r3, [pc, #448]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002cd8:	2208      	movs	r2, #8
 8002cda:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002cdc:	4b78      	ldr	r3, [pc, #480]	@ (8002ec0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002cde:	2120      	movs	r1, #32
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f003 fa31 	bl	8006148 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002ce6:	4b76      	ldr	r3, [pc, #472]	@ (8002ec0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002ce8:	2140      	movs	r1, #64	@ 0x40
 8002cea:	0018      	movs	r0, r3
 8002cec:	f003 fa2c 	bl	8006148 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002cf0:	f000 fe33 	bl	800395a <UART2_RX_transfer_complete_callback+0x1156>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002cf4:	4b69      	ldr	r3, [pc, #420]	@ (8002e9c <UART2_RX_transfer_complete_callback+0x698>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2bfa      	cmp	r3, #250	@ 0xfa
 8002cfc:	d001      	beq.n	8002d02 <UART2_RX_transfer_complete_callback+0x4fe>
 8002cfe:	f000 fe2c 	bl	800395a <UART2_RX_transfer_complete_callback+0x1156>

					MIDI_CLK_tag = 0; //just in case
 8002d02:	4b6a      	ldr	r3, [pc, #424]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A0_MODE;
 8002d08:	4b63      	ldr	r3, [pc, #396]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002d0a:	220e      	movs	r2, #14
 8002d0c:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002d0e:	4b62      	ldr	r3, [pc, #392]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002d10:	2208      	movs	r2, #8
 8002d12:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002d14:	4b6a      	ldr	r3, [pc, #424]	@ (8002ec0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002d16:	2120      	movs	r1, #32
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f003 fa15 	bl	8006148 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002d1e:	4b68      	ldr	r3, [pc, #416]	@ (8002ec0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002d20:	2140      	movs	r1, #64	@ 0x40
 8002d22:	0018      	movs	r0, r3
 8002d24:	f003 fa10 	bl	8006148 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d28:	f000 fe17 	bl	800395a <UART2_RX_transfer_complete_callback+0x1156>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A0_MODE){
 8002d2c:	4b5a      	ldr	r3, [pc, #360]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b0e      	cmp	r3, #14
 8002d34:	d123      	bne.n	8002d7e <UART2_RX_transfer_complete_callback+0x57a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d36:	4b59      	ldr	r3, [pc, #356]	@ (8002e9c <UART2_RX_transfer_complete_callback+0x698>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2bf8      	cmp	r3, #248	@ 0xf8
 8002d3e:	d001      	beq.n	8002d44 <UART2_RX_transfer_complete_callback+0x540>
 8002d40:	f000 fe0c 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002d44:	2380      	movs	r3, #128	@ 0x80
 8002d46:	0099      	lsls	r1, r3, #2
 8002d48:	23a0      	movs	r3, #160	@ 0xa0
 8002d4a:	05db      	lsls	r3, r3, #23
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f005 fa97 	bl	8008282 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002d54:	4b53      	ldr	r3, [pc, #332]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	2140      	movs	r1, #64	@ 0x40
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f005 fa91 	bl	8008282 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002d60:	4b51      	ldr	r3, [pc, #324]	@ (8002ea8 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002d66:	4b51      	ldr	r3, [pc, #324]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	4b4e      	ldr	r3, [pc, #312]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d72:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002d74:	4b48      	ldr	r3, [pc, #288]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002d76:	220f      	movs	r2, #15
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	f000 fdef 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A1_MODE){
 8002d7e:	4b46      	ldr	r3, [pc, #280]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b0f      	cmp	r3, #15
 8002d86:	d142      	bne.n	8002e0e <UART2_RX_transfer_complete_callback+0x60a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d88:	4b44      	ldr	r3, [pc, #272]	@ (8002e9c <UART2_RX_transfer_complete_callback+0x698>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2bf8      	cmp	r3, #248	@ 0xf8
 8002d90:	d001      	beq.n	8002d96 <UART2_RX_transfer_complete_callback+0x592>
 8002d92:	f000 fde3 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_tag++;
 8002d96:	4b45      	ldr	r3, [pc, #276]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	4b42      	ldr	r3, [pc, #264]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002da2:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002da4:	4b41      	ldr	r3, [pc, #260]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b0b      	cmp	r3, #11
 8002dac:	d80f      	bhi.n	8002dce <UART2_RX_transfer_complete_callback+0x5ca>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002dae:	2380      	movs	r3, #128	@ 0x80
 8002db0:	0099      	lsls	r1, r3, #2
 8002db2:	23a0      	movs	r3, #160	@ 0xa0
 8002db4:	05db      	lsls	r3, r3, #23
 8002db6:	2200      	movs	r2, #0
 8002db8:	0018      	movs	r0, r3
 8002dba:	f005 fa62 	bl	8008282 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002dbe:	4b39      	ldr	r3, [pc, #228]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	2140      	movs	r1, #64	@ 0x40
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f005 fa5c 	bl	8008282 <HAL_GPIO_WritePin>
 8002dca:	f000 fdc7 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002dce:	4b37      	ldr	r3, [pc, #220]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b18      	cmp	r3, #24
 8002dd6:	d80f      	bhi.n	8002df8 <UART2_RX_transfer_complete_callback+0x5f4>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002dd8:	2380      	movs	r3, #128	@ 0x80
 8002dda:	0099      	lsls	r1, r3, #2
 8002ddc:	23a0      	movs	r3, #160	@ 0xa0
 8002dde:	05db      	lsls	r3, r3, #23
 8002de0:	2201      	movs	r2, #1
 8002de2:	0018      	movs	r0, r3
 8002de4:	f005 fa4d 	bl	8008282 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002de8:	4b2e      	ldr	r3, [pc, #184]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	2140      	movs	r1, #64	@ 0x40
 8002dee:	0018      	movs	r0, r3
 8002df0:	f005 fa47 	bl	8008282 <HAL_GPIO_WritePin>
 8002df4:	f000 fdb2 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002df8:	4b27      	ldr	r3, [pc, #156]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002dfa:	220f      	movs	r2, #15
 8002dfc:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002dfe:	4b26      	ldr	r3, [pc, #152]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002e00:	2208      	movs	r2, #8
 8002e02:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8002e04:	4b29      	ldr	r3, [pc, #164]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	f000 fda7 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE){
 8002e0e:	4b22      	ldr	r3, [pc, #136]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b10      	cmp	r3, #16
 8002e16:	d15d      	bne.n	8002ed4 <UART2_RX_transfer_complete_callback+0x6d0>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002e18:	4b20      	ldr	r3, [pc, #128]	@ (8002e9c <UART2_RX_transfer_complete_callback+0x698>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2bf8      	cmp	r3, #248	@ 0xf8
 8002e20:	d001      	beq.n	8002e26 <UART2_RX_transfer_complete_callback+0x622>
 8002e22:	f000 fd9b 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					//when sftwre timer times out the midi clk tag is reset to 0
					MIDI_CLK_tag++;
 8002e26:	4b21      	ldr	r3, [pc, #132]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	4b1e      	ldr	r3, [pc, #120]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e32:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002e34:	4b1d      	ldr	r3, [pc, #116]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b0b      	cmp	r3, #11
 8002e3c:	d80f      	bhi.n	8002e5e <UART2_RX_transfer_complete_callback+0x65a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002e3e:	2380      	movs	r3, #128	@ 0x80
 8002e40:	0099      	lsls	r1, r3, #2
 8002e42:	23a0      	movs	r3, #160	@ 0xa0
 8002e44:	05db      	lsls	r3, r3, #23
 8002e46:	2200      	movs	r2, #0
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f005 fa1a 	bl	8008282 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002e4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	2140      	movs	r1, #64	@ 0x40
 8002e54:	0018      	movs	r0, r3
 8002e56:	f005 fa14 	bl	8008282 <HAL_GPIO_WritePin>
 8002e5a:	f000 fd7f 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002e5e:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b18      	cmp	r3, #24
 8002e66:	d80f      	bhi.n	8002e88 <UART2_RX_transfer_complete_callback+0x684>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002e68:	2380      	movs	r3, #128	@ 0x80
 8002e6a:	0099      	lsls	r1, r3, #2
 8002e6c:	23a0      	movs	r3, #160	@ 0xa0
 8002e6e:	05db      	lsls	r3, r3, #23
 8002e70:	2201      	movs	r2, #1
 8002e72:	0018      	movs	r0, r3
 8002e74:	f005 fa05 	bl	8008282 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002e78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2140      	movs	r1, #64	@ 0x40
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f005 f9ff 	bl	8008282 <HAL_GPIO_WritePin>
 8002e84:	f000 fd6a 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B1_MODE;
 8002e88:	4b03      	ldr	r3, [pc, #12]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002e8a:	2211      	movs	r2, #17
 8002e8c:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						MIDI_CLK_tag = 1;
 8002e8e:	4b07      	ldr	r3, [pc, #28]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	701a      	strb	r2, [r3, #0]
 8002e94:	f000 fd62 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
 8002e98:	20000430 	.word	0x20000430
 8002e9c:	200004dc 	.word	0x200004dc
 8002ea0:	20000c98 	.word	0x20000c98
 8002ea4:	50000800 	.word	0x50000800
 8002ea8:	20000ce0 	.word	0x20000ce0
 8002eac:	20000c36 	.word	0x20000c36
 8002eb0:	200008d0 	.word	0x200008d0
 8002eb4:	20000444 	.word	0x20000444
 8002eb8:	20000cbc 	.word	0x20000cbc
 8002ebc:	20000c50 	.word	0x20000c50
 8002ec0:	20000c38 	.word	0x20000c38
 8002ec4:	20000028 	.word	0x20000028
 8002ec8:	0800de10 	.word	0x0800de10
 8002ecc:	20000c44 	.word	0x20000c44
 8002ed0:	200004fc 	.word	0x200004fc
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE){
 8002ed4:	4bed      	ldr	r3, [pc, #948]	@ (800328c <UART2_RX_transfer_complete_callback+0xa88>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b11      	cmp	r3, #17
 8002edc:	d146      	bne.n	8002f6c <UART2_RX_transfer_complete_callback+0x768>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002ede:	4bec      	ldr	r3, [pc, #944]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2bf8      	cmp	r3, #248	@ 0xf8
 8002ee6:	d135      	bne.n	8002f54 <UART2_RX_transfer_complete_callback+0x750>

					MIDI_CLK_tag++;
 8002ee8:	4bea      	ldr	r3, [pc, #936]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa90>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	3301      	adds	r3, #1
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	4be8      	ldr	r3, [pc, #928]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa90>)
 8002ef4:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002ef6:	4be7      	ldr	r3, [pc, #924]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa90>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b0b      	cmp	r3, #11
 8002efe:	d80f      	bhi.n	8002f20 <UART2_RX_transfer_complete_callback+0x71c>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002f00:	2380      	movs	r3, #128	@ 0x80
 8002f02:	0099      	lsls	r1, r3, #2
 8002f04:	23a0      	movs	r3, #160	@ 0xa0
 8002f06:	05db      	lsls	r3, r3, #23
 8002f08:	2200      	movs	r2, #0
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f005 f9b9 	bl	8008282 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002f10:	4be1      	ldr	r3, [pc, #900]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa94>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	2140      	movs	r1, #64	@ 0x40
 8002f16:	0018      	movs	r0, r3
 8002f18:	f005 f9b3 	bl	8008282 <HAL_GPIO_WritePin>
 8002f1c:	f000 fd1e 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002f20:	4bdc      	ldr	r3, [pc, #880]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa90>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b18      	cmp	r3, #24
 8002f28:	d80f      	bhi.n	8002f4a <UART2_RX_transfer_complete_callback+0x746>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002f2a:	2380      	movs	r3, #128	@ 0x80
 8002f2c:	0099      	lsls	r1, r3, #2
 8002f2e:	23a0      	movs	r3, #160	@ 0xa0
 8002f30:	05db      	lsls	r3, r3, #23
 8002f32:	2201      	movs	r2, #1
 8002f34:	0018      	movs	r0, r3
 8002f36:	f005 f9a4 	bl	8008282 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002f3a:	4bd7      	ldr	r3, [pc, #860]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa94>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2140      	movs	r1, #64	@ 0x40
 8002f40:	0018      	movs	r0, r3
 8002f42:	f005 f99e 	bl	8008282 <HAL_GPIO_WritePin>
 8002f46:	f000 fd09 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002f4a:	4bd2      	ldr	r3, [pc, #840]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa90>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	701a      	strb	r2, [r3, #0]
 8002f50:	f000 fd04 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002f54:	4bce      	ldr	r3, [pc, #824]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2bfa      	cmp	r3, #250	@ 0xfa
 8002f5c:	d001      	beq.n	8002f62 <UART2_RX_transfer_complete_callback+0x75e>
 8002f5e:	f000 fcfd 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 8002f62:	4bca      	ldr	r3, [pc, #808]	@ (800328c <UART2_RX_transfer_complete_callback+0xa88>)
 8002f64:	2212      	movs	r2, #18
 8002f66:	701a      	strb	r2, [r3, #0]
 8002f68:	f000 fcf8 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE){
 8002f6c:	4bc7      	ldr	r3, [pc, #796]	@ (800328c <UART2_RX_transfer_complete_callback+0xa88>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b12      	cmp	r3, #18
 8002f74:	d001      	beq.n	8002f7a <UART2_RX_transfer_complete_callback+0x776>
 8002f76:	f000 fcf1 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002f7a:	4bc5      	ldr	r3, [pc, #788]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2bf8      	cmp	r3, #248	@ 0xf8
 8002f82:	d001      	beq.n	8002f88 <UART2_RX_transfer_complete_callback+0x784>
 8002f84:	f000 fcea 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8002f88:	4bc4      	ldr	r3, [pc, #784]	@ (800329c <UART2_RX_transfer_complete_callback+0xa98>)
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f001 fcfa 	bl	8004984 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002f90:	2380      	movs	r3, #128	@ 0x80
 8002f92:	0099      	lsls	r1, r3, #2
 8002f94:	23a0      	movs	r3, #160	@ 0xa0
 8002f96:	05db      	lsls	r3, r3, #23
 8002f98:	2201      	movs	r2, #1
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f005 f971 	bl	8008282 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002fa0:	4bbd      	ldr	r3, [pc, #756]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa94>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2140      	movs	r1, #64	@ 0x40
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f005 f96b 	bl	8008282 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002fac:	2380      	movs	r3, #128	@ 0x80
 8002fae:	0099      	lsls	r1, r3, #2
 8002fb0:	23a0      	movs	r3, #160	@ 0xa0
 8002fb2:	05db      	lsls	r3, r3, #23
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f005 f963 	bl	8008282 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002fbc:	4bb6      	ldr	r3, [pc, #728]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa94>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	2140      	movs	r1, #64	@ 0x40
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f005 f95d 	bl	8008282 <HAL_GPIO_WritePin>

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 8002fc8:	4bb0      	ldr	r3, [pc, #704]	@ (800328c <UART2_RX_transfer_complete_callback+0xa88>)
 8002fca:	2212      	movs	r2, #18
 8002fcc:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002fce:	4baf      	ldr	r3, [pc, #700]	@ (800328c <UART2_RX_transfer_complete_callback+0xa88>)
 8002fd0:	2208      	movs	r2, #8
 8002fd2:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 1;
 8002fd4:	4baf      	ldr	r3, [pc, #700]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa90>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8002fda:	4bb1      	ldr	r3, [pc, #708]	@ (80032a0 <UART2_RX_transfer_complete_callback+0xa9c>)
 8002fdc:	2100      	movs	r1, #0
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f003 f825 	bl	800602e <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8002fe4:	4baf      	ldr	r3, [pc, #700]	@ (80032a4 <UART2_RX_transfer_complete_callback+0xaa0>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002fea:	4aaf      	ldr	r2, [pc, #700]	@ (80032a8 <UART2_RX_transfer_complete_callback+0xaa4>)
 8002fec:	4bab      	ldr	r3, [pc, #684]	@ (800329c <UART2_RX_transfer_complete_callback+0xa98>)
 8002fee:	0011      	movs	r1, r2
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f001 fb6f 	bl	80046d4 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8002ff6:	4aad      	ldr	r2, [pc, #692]	@ (80032ac <UART2_RX_transfer_complete_callback+0xaa8>)
 8002ff8:	4ba8      	ldr	r3, [pc, #672]	@ (800329c <UART2_RX_transfer_complete_callback+0xa98>)
 8002ffa:	0011      	movs	r1, r2
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f001 fb69 	bl	80046d4 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8003002:	4bab      	ldr	r3, [pc, #684]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 8003004:	2108      	movs	r1, #8
 8003006:	0018      	movs	r0, r3
 8003008:	f003 f88c 	bl	8006124 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 800300c:	4ba7      	ldr	r3, [pc, #668]	@ (80032ac <UART2_RX_transfer_complete_callback+0xaa8>)
 800300e:	2100      	movs	r1, #0
 8003010:	0018      	movs	r0, r3
 8003012:	f001 fce3 	bl	80049dc <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8003016:	4aa7      	ldr	r2, [pc, #668]	@ (80032b4 <UART2_RX_transfer_complete_callback+0xab0>)
 8003018:	4ba4      	ldr	r3, [pc, #656]	@ (80032ac <UART2_RX_transfer_complete_callback+0xaa8>)
 800301a:	0011      	movs	r1, r2
 800301c:	0018      	movs	r0, r3
 800301e:	f001 fdd3 	bl	8004bc8 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8003022:	4ba5      	ldr	r3, [pc, #660]	@ (80032b8 <UART2_RX_transfer_complete_callback+0xab4>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	001a      	movs	r2, r3
 8003028:	49a4      	ldr	r1, [pc, #656]	@ (80032bc <UART2_RX_transfer_complete_callback+0xab8>)
 800302a:	4ba5      	ldr	r3, [pc, #660]	@ (80032c0 <UART2_RX_transfer_complete_callback+0xabc>)
 800302c:	0018      	movs	r0, r3
 800302e:	f003 fd1d 	bl	8006a6c <HAL_ADC_Start_DMA>
 8003032:	f000 fc93 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
		}
	}
	//not a realtime status byte
	else{

		if(active_status_byte == 0){
 8003036:	4ba3      	ldr	r3, [pc, #652]	@ (80032c4 <UART2_RX_transfer_complete_callback+0xac0>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d000      	beq.n	8003042 <UART2_RX_transfer_complete_callback+0x83e>
 8003040:	e29e      	b.n	8003580 <UART2_RX_transfer_complete_callback+0xd7c>

			if(running_status_byte == 0){
 8003042:	4ba1      	ldr	r3, [pc, #644]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d000      	beq.n	800304e <UART2_RX_transfer_complete_callback+0x84a>
 800304c:	e0a3      	b.n	8003196 <UART2_RX_transfer_complete_callback+0x992>

				if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800304e:	4b9f      	ldr	r3, [pc, #636]	@ (80032cc <UART2_RX_transfer_complete_callback+0xac8>)
 8003050:	0018      	movs	r0, r3
 8003052:	f7fe f824 	bl	800109e <Is_Data_Buffer_Empty>
 8003056:	0003      	movs	r3, r0
 8003058:	2b01      	cmp	r3, #1
 800305a:	d001      	beq.n	8003060 <UART2_RX_transfer_complete_callback+0x85c>
 800305c:	f000 fc7e 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					if(Is_Status_Byte(rx_buffer) == YES){
 8003060:	4b8b      	ldr	r3, [pc, #556]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003062:	0018      	movs	r0, r3
 8003064:	f7fd feda 	bl	8000e1c <Is_Status_Byte>
 8003068:	0003      	movs	r3, r0
 800306a:	2b01      	cmp	r3, #1
 800306c:	d001      	beq.n	8003072 <UART2_RX_transfer_complete_callback+0x86e>
 800306e:	f000 fc75 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003072:	4b87      	ldr	r3, [pc, #540]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003074:	0018      	movs	r0, r3
 8003076:	f7fd ff03 	bl	8000e80 <Is_PC_Status_Byte>
 800307a:	0003      	movs	r3, r0
 800307c:	2b01      	cmp	r3, #1
 800307e:	d134      	bne.n	80030ea <UART2_RX_transfer_complete_callback+0x8e6>

							running_status_byte = (uint8_t)*rx_buffer;
 8003080:	4b83      	ldr	r3, [pc, #524]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	b2da      	uxtb	r2, r3
 8003086:	4b90      	ldr	r3, [pc, #576]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 8003088:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 800308a:	4b91      	ldr	r3, [pc, #580]	@ (80032d0 <UART2_RX_transfer_complete_callback+0xacc>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	b2da      	uxtb	r2, r3
 8003090:	4b7f      	ldr	r3, [pc, #508]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003092:	0011      	movs	r1, r2
 8003094:	0018      	movs	r0, r3
 8003096:	f7fd ffe1 	bl	800105c <Is_Channelised_Status_Byte_On_Basic_Channel>
 800309a:	0003      	movs	r3, r0
 800309c:	2b01      	cmp	r3, #1
 800309e:	d10d      	bne.n	80030bc <UART2_RX_transfer_complete_callback+0x8b8>

								active_status_byte = (uint8_t)*rx_buffer;
 80030a0:	4b7b      	ldr	r3, [pc, #492]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	4b87      	ldr	r3, [pc, #540]	@ (80032c4 <UART2_RX_transfer_complete_callback+0xac0>)
 80030a8:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80030aa:	2380      	movs	r3, #128	@ 0x80
 80030ac:	005a      	lsls	r2, r3, #1
 80030ae:	4b80      	ldr	r3, [pc, #512]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 80030b0:	0011      	movs	r1, r2
 80030b2:	0018      	movs	r0, r3
 80030b4:	f003 f836 	bl	8006124 <Set_Status_Bit>
 80030b8:	f000 fc50 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 80030bc:	4b7c      	ldr	r3, [pc, #496]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 80030be:	0018      	movs	r0, r3
 80030c0:	f7fe f883 	bl	80011ca <Is_OMNI_On>
 80030c4:	0003      	movs	r3, r0
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d001      	beq.n	80030ce <UART2_RX_transfer_complete_callback+0x8ca>
 80030ca:	f000 fc47 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 80030ce:	4b70      	ldr	r3, [pc, #448]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	4b7b      	ldr	r3, [pc, #492]	@ (80032c4 <UART2_RX_transfer_complete_callback+0xac0>)
 80030d6:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80030d8:	2380      	movs	r3, #128	@ 0x80
 80030da:	005a      	lsls	r2, r3, #1
 80030dc:	4b74      	ldr	r3, [pc, #464]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 80030de:	0011      	movs	r1, r2
 80030e0:	0018      	movs	r0, r3
 80030e2:	f003 f81f 	bl	8006124 <Set_Status_Bit>
 80030e6:	f000 fc39 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80030ea:	4b69      	ldr	r3, [pc, #420]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 80030ec:	0018      	movs	r0, r3
 80030ee:	f7fd fee3 	bl	8000eb8 <Is_CC_Status_Byte>
 80030f2:	0003      	movs	r3, r0
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d134      	bne.n	8003162 <UART2_RX_transfer_complete_callback+0x95e>

							running_status_byte = (uint8_t)*rx_buffer;
 80030f8:	4b65      	ldr	r3, [pc, #404]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	4b72      	ldr	r3, [pc, #456]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 8003100:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003102:	4b73      	ldr	r3, [pc, #460]	@ (80032d0 <UART2_RX_transfer_complete_callback+0xacc>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	b2da      	uxtb	r2, r3
 8003108:	4b61      	ldr	r3, [pc, #388]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 800310a:	0011      	movs	r1, r2
 800310c:	0018      	movs	r0, r3
 800310e:	f7fd ffa5 	bl	800105c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003112:	0003      	movs	r3, r0
 8003114:	2b01      	cmp	r3, #1
 8003116:	d10d      	bne.n	8003134 <UART2_RX_transfer_complete_callback+0x930>

								active_status_byte = (uint8_t)*rx_buffer;
 8003118:	4b5d      	ldr	r3, [pc, #372]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	4b69      	ldr	r3, [pc, #420]	@ (80032c4 <UART2_RX_transfer_complete_callback+0xac0>)
 8003120:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003122:	2380      	movs	r3, #128	@ 0x80
 8003124:	005a      	lsls	r2, r3, #1
 8003126:	4b62      	ldr	r3, [pc, #392]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 8003128:	0011      	movs	r1, r2
 800312a:	0018      	movs	r0, r3
 800312c:	f002 fffa 	bl	8006124 <Set_Status_Bit>
 8003130:	f000 fc14 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 8003134:	4b5e      	ldr	r3, [pc, #376]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 8003136:	0018      	movs	r0, r3
 8003138:	f7fe f847 	bl	80011ca <Is_OMNI_On>
 800313c:	0003      	movs	r3, r0
 800313e:	2b01      	cmp	r3, #1
 8003140:	d001      	beq.n	8003146 <UART2_RX_transfer_complete_callback+0x942>
 8003142:	f000 fc0b 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 8003146:	4b52      	ldr	r3, [pc, #328]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	4b5d      	ldr	r3, [pc, #372]	@ (80032c4 <UART2_RX_transfer_complete_callback+0xac0>)
 800314e:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003150:	2380      	movs	r3, #128	@ 0x80
 8003152:	005a      	lsls	r2, r3, #1
 8003154:	4b56      	ldr	r3, [pc, #344]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 8003156:	0011      	movs	r1, r2
 8003158:	0018      	movs	r0, r3
 800315a:	f002 ffe3 	bl	8006124 <Set_Status_Bit>
 800315e:	f000 fbfd 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003162:	4b4b      	ldr	r3, [pc, #300]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003164:	0018      	movs	r0, r3
 8003166:	f7fd ff69 	bl	800103c <Is_Sysex_Start_Status_Byte>
 800316a:	0003      	movs	r3, r0
 800316c:	2b01      	cmp	r3, #1
 800316e:	d001      	beq.n	8003174 <UART2_RX_transfer_complete_callback+0x970>
 8003170:	f000 fbf4 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

							active_status_byte = (uint8_t)*rx_buffer;
 8003174:	4b46      	ldr	r3, [pc, #280]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	b2da      	uxtb	r2, r3
 800317a:	4b52      	ldr	r3, [pc, #328]	@ (80032c4 <UART2_RX_transfer_complete_callback+0xac0>)
 800317c:	701a      	strb	r2, [r3, #0]
							running_status_byte = 0;
 800317e:	4b52      	ldr	r3, [pc, #328]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003184:	2380      	movs	r3, #128	@ 0x80
 8003186:	005a      	lsls	r2, r3, #1
 8003188:	4b49      	ldr	r3, [pc, #292]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 800318a:	0011      	movs	r1, r2
 800318c:	0018      	movs	r0, r3
 800318e:	f002 ffc9 	bl	8006124 <Set_Status_Bit>
 8003192:	f000 fbe3 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

						}
					}
				}
			}
			else if(running_status_byte != 0){
 8003196:	4b4c      	ldr	r3, [pc, #304]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <UART2_RX_transfer_complete_callback+0x9a0>
 80031a0:	f000 fbdc 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

				if(Is_Data_Byte(rx_buffer) == YES){
 80031a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031a6:	0018      	movs	r0, r3
 80031a8:	f7fd fe51 	bl	8000e4e <Is_Data_Byte>
 80031ac:	0003      	movs	r3, r0
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d000      	beq.n	80031b4 <UART2_RX_transfer_complete_callback+0x9b0>
 80031b2:	e151      	b.n	8003458 <UART2_RX_transfer_complete_callback+0xc54>

					Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80031b4:	2380      	movs	r3, #128	@ 0x80
 80031b6:	005a      	lsls	r2, r3, #1
 80031b8:	4b3d      	ldr	r3, [pc, #244]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 80031ba:	0011      	movs	r1, r2
 80031bc:	0018      	movs	r0, r3
 80031be:	f002 ffb1 	bl	8006124 <Set_Status_Bit>

					if(Is_PC_Status_Byte(&running_status_byte) == YES){
 80031c2:	4b41      	ldr	r3, [pc, #260]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 80031c4:	0018      	movs	r0, r3
 80031c6:	f7fd fe5b 	bl	8000e80 <Is_PC_Status_Byte>
 80031ca:	0003      	movs	r3, r0
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d143      	bne.n	8003258 <UART2_RX_transfer_complete_callback+0xa54>

						if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 80031d0:	4b3f      	ldr	r3, [pc, #252]	@ (80032d0 <UART2_RX_transfer_complete_callback+0xacc>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4b3c      	ldr	r3, [pc, #240]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 80031d8:	0011      	movs	r1, r2
 80031da:	0018      	movs	r0, r3
 80031dc:	f7fd ff3e 	bl	800105c <Is_Channelised_Status_Byte_On_Basic_Channel>
 80031e0:	0003      	movs	r3, r0
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d008      	beq.n	80031f8 <UART2_RX_transfer_complete_callback+0x9f4>
																|| (Is_OMNI_On(&statuses) == YES)){
 80031e6:	4b32      	ldr	r3, [pc, #200]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 80031e8:	0018      	movs	r0, r3
 80031ea:	f7fd ffee 	bl	80011ca <Is_OMNI_On>
 80031ee:	0003      	movs	r3, r0
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d001      	beq.n	80031f8 <UART2_RX_transfer_complete_callback+0x9f4>
 80031f4:	f000 fbb2 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

							if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80031f8:	4b34      	ldr	r3, [pc, #208]	@ (80032cc <UART2_RX_transfer_complete_callback+0xac8>)
 80031fa:	0018      	movs	r0, r3
 80031fc:	f7fd ff4f 	bl	800109e <Is_Data_Buffer_Empty>
 8003200:	0003      	movs	r3, r0
 8003202:	2b01      	cmp	r3, #1
 8003204:	d001      	beq.n	800320a <UART2_RX_transfer_complete_callback+0xa06>
 8003206:	f000 fba9 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

								//first data byte received
								if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 800320a:	4b21      	ldr	r3, [pc, #132]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 800320c:	2104      	movs	r1, #4
 800320e:	0018      	movs	r0, r3
 8003210:	f7fd ff93 	bl	800113a <Is_Program_Change_Data_Byte_In_Range>
 8003214:	0003      	movs	r3, r0
 8003216:	2b01      	cmp	r3, #1
 8003218:	d10f      	bne.n	800323a <UART2_RX_transfer_complete_callback+0xa36>

									Set_All_Pots_to_PC_Mode();
 800321a:	f7fd fd79 	bl	8000d10 <Set_All_Pots_to_PC_Mode>
									preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 800321e:	4b1c      	ldr	r3, [pc, #112]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	3301      	adds	r3, #1
 8003226:	b2da      	uxtb	r2, r3
 8003228:	4b2a      	ldr	r3, [pc, #168]	@ (80032d4 <UART2_RX_transfer_complete_callback+0xad0>)
 800322a:	701a      	strb	r2, [r3, #0]
									Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 800322c:	f7fd f978 	bl	8000520 <Update_Params_Based_On_Mode_Selected>
									Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003230:	4b1f      	ldr	r3, [pc, #124]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 8003232:	2108      	movs	r1, #8
 8003234:	0018      	movs	r0, r3
 8003236:	f002 ff87 	bl	8006148 <Clear_Status_Bit>
								}

								//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
								Clear_Data_Buffer(&MIDI_data);
 800323a:	4b24      	ldr	r3, [pc, #144]	@ (80032cc <UART2_RX_transfer_complete_callback+0xac8>)
 800323c:	0018      	movs	r0, r3
 800323e:	f7fd ff5e 	bl	80010fe <Clear_Data_Buffer>
								active_status_byte = 0;
 8003242:	4b20      	ldr	r3, [pc, #128]	@ (80032c4 <UART2_RX_transfer_complete_callback+0xac0>)
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]

								//not really required
								Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003248:	4a19      	ldr	r2, [pc, #100]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 800324a:	4b23      	ldr	r3, [pc, #140]	@ (80032d8 <UART2_RX_transfer_complete_callback+0xad4>)
 800324c:	0011      	movs	r1, r2
 800324e:	0018      	movs	r0, r3
 8003250:	f7fd ffd5 	bl	80011fe <Reset_and_Stop_MIDI_Software_Timer>
 8003254:	f000 fb82 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(&running_status_byte) == YES){
 8003258:	4b1b      	ldr	r3, [pc, #108]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 800325a:	0018      	movs	r0, r3
 800325c:	f7fd fe2c 	bl	8000eb8 <Is_CC_Status_Byte>
 8003260:	0003      	movs	r3, r0
 8003262:	2b01      	cmp	r3, #1
 8003264:	d001      	beq.n	800326a <UART2_RX_transfer_complete_callback+0xa66>
 8003266:	f000 fb79 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800326a:	4b18      	ldr	r3, [pc, #96]	@ (80032cc <UART2_RX_transfer_complete_callback+0xac8>)
 800326c:	0018      	movs	r0, r3
 800326e:	f7fd ff16 	bl	800109e <Is_Data_Buffer_Empty>
 8003272:	0003      	movs	r3, r0
 8003274:	2b01      	cmp	r3, #1
 8003276:	d131      	bne.n	80032dc <UART2_RX_transfer_complete_callback+0xad8>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8003278:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4b13      	ldr	r3, [pc, #76]	@ (80032cc <UART2_RX_transfer_complete_callback+0xac8>)
 8003280:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 8003282:	4b15      	ldr	r3, [pc, #84]	@ (80032d8 <UART2_RX_transfer_complete_callback+0xad4>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	e368      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
 800328a:	46c0      	nop			@ (mov r8, r8)
 800328c:	20000430 	.word	0x20000430
 8003290:	200004dc 	.word	0x200004dc
 8003294:	20000c36 	.word	0x20000c36
 8003298:	50000800 	.word	0x50000800
 800329c:	20000c98 	.word	0x20000c98
 80032a0:	200008d0 	.word	0x200008d0
 80032a4:	20000444 	.word	0x20000444
 80032a8:	20000cbc 	.word	0x20000cbc
 80032ac:	20000c50 	.word	0x20000c50
 80032b0:	20000c38 	.word	0x20000c38
 80032b4:	20000028 	.word	0x20000028
 80032b8:	0800de10 	.word	0x0800de10
 80032bc:	20000c44 	.word	0x20000c44
 80032c0:	200004fc 	.word	0x200004fc
 80032c4:	200004cb 	.word	0x200004cb
 80032c8:	200004cc 	.word	0x200004cc
 80032cc:	200004d0 	.word	0x200004d0
 80032d0:	200004ca 	.word	0x200004ca
 80032d4:	200004bc 	.word	0x200004bc
 80032d8:	20000c40 	.word	0x20000c40

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 80032dc:	4bd6      	ldr	r3, [pc, #856]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	4bd6      	ldr	r3, [pc, #856]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 80032e4:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80032e6:	4ad6      	ldr	r2, [pc, #856]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 80032e8:	4bd6      	ldr	r3, [pc, #856]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe40>)
 80032ea:	0011      	movs	r1, r2
 80032ec:	0018      	movs	r0, r3
 80032ee:	f7fd ff86 	bl	80011fe <Reset_and_Stop_MIDI_Software_Timer>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80032f2:	4bd2      	ldr	r3, [pc, #840]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7fd fdfb 	bl	8000ef0 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 80032fa:	0003      	movs	r3, r0
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d14c      	bne.n	800339a <UART2_RX_transfer_complete_callback+0xb96>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES){
 8003300:	4bd1      	ldr	r3, [pc, #836]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe44>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	b2da      	uxtb	r2, r3
 8003306:	4bd1      	ldr	r3, [pc, #836]	@ (800364c <UART2_RX_transfer_complete_callback+0xe48>)
 8003308:	0011      	movs	r1, r2
 800330a:	0018      	movs	r0, r3
 800330c:	f7fd fea6 	bl	800105c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003310:	0003      	movs	r3, r0
 8003312:	2b01      	cmp	r3, #1
 8003314:	d139      	bne.n	800338a <UART2_RX_transfer_complete_callback+0xb86>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 8003316:	4ace      	ldr	r2, [pc, #824]	@ (8003650 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003318:	4bc8      	ldr	r3, [pc, #800]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 800331a:	0011      	movs	r1, r2
 800331c:	0018      	movs	r0, r3
 800331e:	f7fd fe46 	bl	8000fae <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 8003322:	0003      	movs	r3, r0
 8003324:	2b01      	cmp	r3, #1
 8003326:	d130      	bne.n	800338a <UART2_RX_transfer_complete_callback+0xb86>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 8003328:	4bc4      	ldr	r3, [pc, #784]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 800332a:	785b      	ldrb	r3, [r3, #1]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b79      	cmp	r3, #121	@ 0x79
 8003330:	d10b      	bne.n	800334a <UART2_RX_transfer_complete_callback+0xb46>

											Reset_All_Controllers(&params, &delay_line);
 8003332:	4ac8      	ldr	r2, [pc, #800]	@ (8003654 <UART2_RX_transfer_complete_callback+0xe50>)
 8003334:	4bc8      	ldr	r3, [pc, #800]	@ (8003658 <UART2_RX_transfer_complete_callback+0xe54>)
 8003336:	0011      	movs	r1, r2
 8003338:	0018      	movs	r0, r3
 800333a:	f7fd ff7b 	bl	8001234 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 800333e:	4bc0      	ldr	r3, [pc, #768]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003340:	2108      	movs	r1, #8
 8003342:	0018      	movs	r0, r3
 8003344:	f002 ff00 	bl	8006148 <Clear_Status_Bit>
 8003348:	e01f      	b.n	800338a <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 800334a:	4bbc      	ldr	r3, [pc, #752]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 800334c:	785b      	ldrb	r3, [r3, #1]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b7a      	cmp	r3, #122	@ 0x7a
 8003352:	d107      	bne.n	8003364 <UART2_RX_transfer_complete_callback+0xb60>

											Set_Local_Control();
 8003354:	f7fd ffc8 	bl	80012e8 <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003358:	4bb9      	ldr	r3, [pc, #740]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 800335a:	2108      	movs	r1, #8
 800335c:	0018      	movs	r0, r3
 800335e:	f002 fef3 	bl	8006148 <Clear_Status_Bit>
 8003362:	e012      	b.n	800338a <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 8003364:	4bb5      	ldr	r3, [pc, #724]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 8003366:	785b      	ldrb	r3, [r3, #1]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b7c      	cmp	r3, #124	@ 0x7c
 800336c:	d104      	bne.n	8003378 <UART2_RX_transfer_complete_callback+0xb74>

											Set_OMNI_Off(&statuses);
 800336e:	4bb4      	ldr	r3, [pc, #720]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003370:	0018      	movs	r0, r3
 8003372:	f7fd fff1 	bl	8001358 <Set_OMNI_Off>
 8003376:	e008      	b.n	800338a <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003378:	4bb0      	ldr	r3, [pc, #704]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 800337a:	785b      	ldrb	r3, [r3, #1]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b7d      	cmp	r3, #125	@ 0x7d
 8003380:	d103      	bne.n	800338a <UART2_RX_transfer_complete_callback+0xb86>

											Set_OMNI_On(&statuses);
 8003382:	4baf      	ldr	r3, [pc, #700]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003384:	0018      	movs	r0, r3
 8003386:	f7fd fff7 	bl	8001378 <Set_OMNI_On>
										}
									}
								}

								//not required
								active_status_byte = 0;
 800338a:	4bb4      	ldr	r3, [pc, #720]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003390:	4baa      	ldr	r3, [pc, #680]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 8003392:	0018      	movs	r0, r3
 8003394:	f7fd feb3 	bl	80010fe <Clear_Data_Buffer>
 8003398:	e2e0      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 800339a:	4ba8      	ldr	r3, [pc, #672]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 800339c:	0018      	movs	r0, r3
 800339e:	f7fd fdd3 	bl	8000f48 <Is_Utilised_CC_First_Data_Byte>
 80033a2:	0003      	movs	r3, r0
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d14f      	bne.n	8003448 <UART2_RX_transfer_complete_callback+0xc44>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 80033a8:	4ba7      	ldr	r3, [pc, #668]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe44>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	4ba7      	ldr	r3, [pc, #668]	@ (800364c <UART2_RX_transfer_complete_callback+0xe48>)
 80033b0:	0011      	movs	r1, r2
 80033b2:	0018      	movs	r0, r3
 80033b4:	f7fd fe52 	bl	800105c <Is_Channelised_Status_Byte_On_Basic_Channel>
 80033b8:	0003      	movs	r3, r0
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d006      	beq.n	80033cc <UART2_RX_transfer_complete_callback+0xbc8>
										|| (Is_OMNI_On(&statuses) == YES)){
 80033be:	4ba0      	ldr	r3, [pc, #640]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 80033c0:	0018      	movs	r0, r3
 80033c2:	f7fd ff02 	bl	80011ca <Is_OMNI_On>
 80033c6:	0003      	movs	r3, r0
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d135      	bne.n	8003438 <UART2_RX_transfer_complete_callback+0xc34>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 80033cc:	4b9b      	ldr	r3, [pc, #620]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b14      	cmp	r3, #20
 80033d4:	d104      	bne.n	80033e0 <UART2_RX_transfer_complete_callback+0xbdc>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80033d6:	4b9e      	ldr	r3, [pc, #632]	@ (8003650 <UART2_RX_transfer_complete_callback+0xe4c>)
 80033d8:	0018      	movs	r0, r3
 80033da:	f7fd fc17 	bl	8000c0c <Set_Waveshape_to_CC_Mode_and_Value>
 80033de:	e02b      	b.n	8003438 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 80033e0:	4b96      	ldr	r3, [pc, #600]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b15      	cmp	r3, #21
 80033e8:	d109      	bne.n	80033fe <UART2_RX_transfer_complete_callback+0xbfa>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80033ea:	4b99      	ldr	r3, [pc, #612]	@ (8003650 <UART2_RX_transfer_complete_callback+0xe4c>)
 80033ec:	0018      	movs	r0, r3
 80033ee:	f7fd fc27 	bl	8000c40 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80033f2:	4b93      	ldr	r3, [pc, #588]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 80033f4:	2108      	movs	r1, #8
 80033f6:	0018      	movs	r0, r3
 80033f8:	f002 fea6 	bl	8006148 <Clear_Status_Bit>
 80033fc:	e01c      	b.n	8003438 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 80033fe:	4b8f      	ldr	r3, [pc, #572]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b16      	cmp	r3, #22
 8003406:	d104      	bne.n	8003412 <UART2_RX_transfer_complete_callback+0xc0e>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003408:	4b91      	ldr	r3, [pc, #580]	@ (8003650 <UART2_RX_transfer_complete_callback+0xe4c>)
 800340a:	0018      	movs	r0, r3
 800340c:	f7fd fc32 	bl	8000c74 <Set_Depth_to_CC_Mode_and_Value>
 8003410:	e012      	b.n	8003438 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8003412:	4b8a      	ldr	r3, [pc, #552]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b17      	cmp	r3, #23
 800341a:	d104      	bne.n	8003426 <UART2_RX_transfer_complete_callback+0xc22>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 800341c:	4b8c      	ldr	r3, [pc, #560]	@ (8003650 <UART2_RX_transfer_complete_callback+0xe4c>)
 800341e:	0018      	movs	r0, r3
 8003420:	f7fd fc42 	bl	8000ca8 <Set_Symmetry_to_CC_Mode_and_Value>
 8003424:	e008      	b.n	8003438 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 8003426:	4b85      	ldr	r3, [pc, #532]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b18      	cmp	r3, #24
 800342e:	d103      	bne.n	8003438 <UART2_RX_transfer_complete_callback+0xc34>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003430:	4b87      	ldr	r3, [pc, #540]	@ (8003650 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003432:	0018      	movs	r0, r3
 8003434:	f7fd fc52 	bl	8000cdc <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 8003438:	4b88      	ldr	r3, [pc, #544]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 800343a:	2200      	movs	r2, #0
 800343c:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 800343e:	4b7f      	ldr	r3, [pc, #508]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 8003440:	0018      	movs	r0, r3
 8003442:	f7fd fe5c 	bl	80010fe <Clear_Data_Buffer>
 8003446:	e289      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 8003448:	4b84      	ldr	r3, [pc, #528]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 800344e:	4b7b      	ldr	r3, [pc, #492]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 8003450:	0018      	movs	r0, r3
 8003452:	f7fd fe54 	bl	80010fe <Clear_Data_Buffer>
 8003456:	e281      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					//don't need to check Sysex with running status, as not supported by MIDI
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8003458:	4b78      	ldr	r3, [pc, #480]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 800345a:	0018      	movs	r0, r3
 800345c:	f7fd fe4f 	bl	80010fe <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003460:	4a77      	ldr	r2, [pc, #476]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003462:	4b78      	ldr	r3, [pc, #480]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe40>)
 8003464:	0011      	movs	r1, r2
 8003466:	0018      	movs	r0, r3
 8003468:	f7fd fec9 	bl	80011fe <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 800346c:	4b72      	ldr	r3, [pc, #456]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 800346e:	0018      	movs	r0, r3
 8003470:	f7fd fd06 	bl	8000e80 <Is_PC_Status_Byte>
 8003474:	0003      	movs	r3, r0
 8003476:	2b01      	cmp	r3, #1
 8003478:	d131      	bne.n	80034de <UART2_RX_transfer_complete_callback+0xcda>

						running_status_byte = (uint8_t)*rx_buffer;
 800347a:	4b6f      	ldr	r3, [pc, #444]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	b2da      	uxtb	r2, r3
 8003480:	4b72      	ldr	r3, [pc, #456]	@ (800364c <UART2_RX_transfer_complete_callback+0xe48>)
 8003482:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003484:	4b70      	ldr	r3, [pc, #448]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe44>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	b2da      	uxtb	r2, r3
 800348a:	4b6b      	ldr	r3, [pc, #428]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 800348c:	0011      	movs	r1, r2
 800348e:	0018      	movs	r0, r3
 8003490:	f7fd fde4 	bl	800105c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003494:	0003      	movs	r3, r0
 8003496:	2b01      	cmp	r3, #1
 8003498:	d10c      	bne.n	80034b4 <UART2_RX_transfer_complete_callback+0xcb0>

							active_status_byte = (uint8_t)*rx_buffer;
 800349a:	4b67      	ldr	r3, [pc, #412]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	4b6e      	ldr	r3, [pc, #440]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 80034a2:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80034a4:	2380      	movs	r3, #128	@ 0x80
 80034a6:	005a      	lsls	r2, r3, #1
 80034a8:	4b65      	ldr	r3, [pc, #404]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 80034aa:	0011      	movs	r1, r2
 80034ac:	0018      	movs	r0, r3
 80034ae:	f002 fe39 	bl	8006124 <Set_Status_Bit>
 80034b2:	e253      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 80034b4:	4b62      	ldr	r3, [pc, #392]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 80034b6:	0018      	movs	r0, r3
 80034b8:	f7fd fe87 	bl	80011ca <Is_OMNI_On>
 80034bc:	0003      	movs	r3, r0
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d000      	beq.n	80034c4 <UART2_RX_transfer_complete_callback+0xcc0>
 80034c2:	e24b      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 80034c4:	4b5c      	ldr	r3, [pc, #368]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	4b64      	ldr	r3, [pc, #400]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 80034cc:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80034ce:	2380      	movs	r3, #128	@ 0x80
 80034d0:	005a      	lsls	r2, r3, #1
 80034d2:	4b5b      	ldr	r3, [pc, #364]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 80034d4:	0011      	movs	r1, r2
 80034d6:	0018      	movs	r0, r3
 80034d8:	f002 fe24 	bl	8006124 <Set_Status_Bit>
 80034dc:	e23e      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80034de:	4b56      	ldr	r3, [pc, #344]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 80034e0:	0018      	movs	r0, r3
 80034e2:	f7fd fce9 	bl	8000eb8 <Is_CC_Status_Byte>
 80034e6:	0003      	movs	r3, r0
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d131      	bne.n	8003550 <UART2_RX_transfer_complete_callback+0xd4c>

						running_status_byte = (uint8_t)*rx_buffer;
 80034ec:	4b52      	ldr	r3, [pc, #328]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	4b56      	ldr	r3, [pc, #344]	@ (800364c <UART2_RX_transfer_complete_callback+0xe48>)
 80034f4:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80034f6:	4b54      	ldr	r3, [pc, #336]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe44>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	4b4e      	ldr	r3, [pc, #312]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 80034fe:	0011      	movs	r1, r2
 8003500:	0018      	movs	r0, r3
 8003502:	f7fd fdab 	bl	800105c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003506:	0003      	movs	r3, r0
 8003508:	2b01      	cmp	r3, #1
 800350a:	d10c      	bne.n	8003526 <UART2_RX_transfer_complete_callback+0xd22>

							active_status_byte = (uint8_t)*rx_buffer;
 800350c:	4b4a      	ldr	r3, [pc, #296]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	b2da      	uxtb	r2, r3
 8003512:	4b52      	ldr	r3, [pc, #328]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 8003514:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003516:	2380      	movs	r3, #128	@ 0x80
 8003518:	005a      	lsls	r2, r3, #1
 800351a:	4b49      	ldr	r3, [pc, #292]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 800351c:	0011      	movs	r1, r2
 800351e:	0018      	movs	r0, r3
 8003520:	f002 fe00 	bl	8006124 <Set_Status_Bit>
 8003524:	e21a      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003526:	4b46      	ldr	r3, [pc, #280]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003528:	0018      	movs	r0, r3
 800352a:	f7fd fe4e 	bl	80011ca <Is_OMNI_On>
 800352e:	0003      	movs	r3, r0
 8003530:	2b01      	cmp	r3, #1
 8003532:	d000      	beq.n	8003536 <UART2_RX_transfer_complete_callback+0xd32>
 8003534:	e212      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003536:	4b40      	ldr	r3, [pc, #256]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	b2da      	uxtb	r2, r3
 800353c:	4b47      	ldr	r3, [pc, #284]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 800353e:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003540:	2380      	movs	r3, #128	@ 0x80
 8003542:	005a      	lsls	r2, r3, #1
 8003544:	4b3e      	ldr	r3, [pc, #248]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003546:	0011      	movs	r1, r2
 8003548:	0018      	movs	r0, r3
 800354a:	f002 fdeb 	bl	8006124 <Set_Status_Bit>
 800354e:	e205      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003550:	4b39      	ldr	r3, [pc, #228]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 8003552:	0018      	movs	r0, r3
 8003554:	f7fd fd72 	bl	800103c <Is_Sysex_Start_Status_Byte>
 8003558:	0003      	movs	r3, r0
 800355a:	2b01      	cmp	r3, #1
 800355c:	d000      	beq.n	8003560 <UART2_RX_transfer_complete_callback+0xd5c>
 800355e:	e1fd      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8003560:	4b35      	ldr	r3, [pc, #212]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	b2da      	uxtb	r2, r3
 8003566:	4b3d      	ldr	r3, [pc, #244]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 8003568:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 800356a:	4b38      	ldr	r3, [pc, #224]	@ (800364c <UART2_RX_transfer_complete_callback+0xe48>)
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003570:	2380      	movs	r3, #128	@ 0x80
 8003572:	005a      	lsls	r2, r3, #1
 8003574:	4b32      	ldr	r3, [pc, #200]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003576:	0011      	movs	r1, r2
 8003578:	0018      	movs	r0, r3
 800357a:	f002 fdd3 	bl	8006124 <Set_Status_Bit>
 800357e:	e1ed      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
			}
		}
		else if(active_status_byte != 0){ //CC/PC only called if on basic channel or omni ON
 8003580:	4b36      	ldr	r3, [pc, #216]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d100      	bne.n	800358c <UART2_RX_transfer_complete_callback+0xd88>
 800358a:	e1e7      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

			if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out) == YES){
 800358c:	2380      	movs	r3, #128	@ 0x80
 800358e:	009a      	lsls	r2, r3, #2
 8003590:	4b2b      	ldr	r3, [pc, #172]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003592:	0011      	movs	r1, r2
 8003594:	0018      	movs	r0, r3
 8003596:	f002 fdb1 	bl	80060fc <Get_Status_Bit>
 800359a:	0003      	movs	r3, r0
 800359c:	2b01      	cmp	r3, #1
 800359e:	d10d      	bne.n	80035bc <UART2_RX_transfer_complete_callback+0xdb8>

				active_status_byte = 0;
 80035a0:	4b2e      	ldr	r3, [pc, #184]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 80035a6:	4b25      	ldr	r3, [pc, #148]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 80035a8:	0018      	movs	r0, r3
 80035aa:	f7fd fda8 	bl	80010fe <Clear_Data_Buffer>
				//running status is kept

				Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80035ae:	4a24      	ldr	r2, [pc, #144]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 80035b0:	4b24      	ldr	r3, [pc, #144]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe40>)
 80035b2:	0011      	movs	r1, r2
 80035b4:	0018      	movs	r0, r3
 80035b6:	f7fd fe22 	bl	80011fe <Reset_and_Stop_MIDI_Software_Timer>
 80035ba:	e1cf      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
				//In this condition, the data bytes haven't been received in enough time, so any subsequent data bytes
				//sent after this are simply ignored
			}
			else{ //not timed out

				if(Is_Data_Byte(rx_buffer) == YES){
 80035bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 80035be:	0018      	movs	r0, r3
 80035c0:	f7fd fc45 	bl	8000e4e <Is_Data_Byte>
 80035c4:	0003      	movs	r3, r0
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d000      	beq.n	80035cc <UART2_RX_transfer_complete_callback+0xdc8>
 80035ca:	e133      	b.n	8003834 <UART2_RX_transfer_complete_callback+0x1030>

					if(Is_PC_Status_Byte(&active_status_byte) == YES){
 80035cc:	4b23      	ldr	r3, [pc, #140]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 80035ce:	0018      	movs	r0, r3
 80035d0:	f7fd fc56 	bl	8000e80 <Is_PC_Status_Byte>
 80035d4:	0003      	movs	r3, r0
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d144      	bne.n	8003664 <UART2_RX_transfer_complete_callback+0xe60>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80035da:	4b18      	ldr	r3, [pc, #96]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 80035dc:	0018      	movs	r0, r3
 80035de:	f7fd fd5e 	bl	800109e <Is_Data_Buffer_Empty>
 80035e2:	0003      	movs	r3, r0
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d000      	beq.n	80035ea <UART2_RX_transfer_complete_callback+0xde6>
 80035e8:	e1b8      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

							//first data byte received
							if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 80035ea:	4b13      	ldr	r3, [pc, #76]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 80035ec:	2104      	movs	r1, #4
 80035ee:	0018      	movs	r0, r3
 80035f0:	f7fd fda3 	bl	800113a <Is_Program_Change_Data_Byte_In_Range>
 80035f4:	0003      	movs	r3, r0
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d10f      	bne.n	800361a <UART2_RX_transfer_complete_callback+0xe16>

								Set_All_Pots_to_PC_Mode();
 80035fa:	f7fd fb89 	bl	8000d10 <Set_All_Pots_to_PC_Mode>
								preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 80035fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	3301      	adds	r3, #1
 8003606:	b2da      	uxtb	r2, r3
 8003608:	4b15      	ldr	r3, [pc, #84]	@ (8003660 <UART2_RX_transfer_complete_callback+0xe5c>)
 800360a:	701a      	strb	r2, [r3, #0]
								Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 800360c:	f7fc ff88 	bl	8000520 <Update_Params_Based_On_Mode_Selected>
								Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003610:	4b0b      	ldr	r3, [pc, #44]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003612:	2108      	movs	r1, #8
 8003614:	0018      	movs	r0, r3
 8003616:	f002 fd97 	bl	8006148 <Clear_Status_Bit>
							}

							//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
							Clear_Data_Buffer(&MIDI_data);
 800361a:	4b08      	ldr	r3, [pc, #32]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 800361c:	0018      	movs	r0, r3
 800361e:	f7fd fd6e 	bl	80010fe <Clear_Data_Buffer>
							active_status_byte = 0;
 8003622:	4b0e      	ldr	r3, [pc, #56]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]

							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003628:	4a05      	ldr	r2, [pc, #20]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 800362a:	4b06      	ldr	r3, [pc, #24]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe40>)
 800362c:	0011      	movs	r1, r2
 800362e:	0018      	movs	r0, r3
 8003630:	f7fd fde5 	bl	80011fe <Reset_and_Stop_MIDI_Software_Timer>
 8003634:	e192      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
 8003636:	46c0      	nop			@ (mov r8, r8)
 8003638:	200004dc 	.word	0x200004dc
 800363c:	200004d0 	.word	0x200004d0
 8003640:	20000c38 	.word	0x20000c38
 8003644:	20000c40 	.word	0x20000c40
 8003648:	200004ca 	.word	0x200004ca
 800364c:	200004cc 	.word	0x200004cc
 8003650:	200004d1 	.word	0x200004d1
 8003654:	20000028 	.word	0x20000028
 8003658:	20000c50 	.word	0x20000c50
 800365c:	200004cb 	.word	0x200004cb
 8003660:	200004bc 	.word	0x200004bc

						}
					}
					else if(Is_CC_Status_Byte(&active_status_byte) == YES){
 8003664:	4bc4      	ldr	r3, [pc, #784]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 8003666:	0018      	movs	r0, r3
 8003668:	f7fd fc26 	bl	8000eb8 <Is_CC_Status_Byte>
 800366c:	0003      	movs	r3, r0
 800366e:	2b01      	cmp	r3, #1
 8003670:	d000      	beq.n	8003674 <UART2_RX_transfer_complete_callback+0xe70>
 8003672:	e0d2      	b.n	800381a <UART2_RX_transfer_complete_callback+0x1016>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003674:	4bc1      	ldr	r3, [pc, #772]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 8003676:	0018      	movs	r0, r3
 8003678:	f7fd fd11 	bl	800109e <Is_Data_Buffer_Empty>
 800367c:	0003      	movs	r3, r0
 800367e:	2b01      	cmp	r3, #1
 8003680:	d108      	bne.n	8003694 <UART2_RX_transfer_complete_callback+0xe90>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8003682:	4bbf      	ldr	r3, [pc, #764]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	4bbc      	ldr	r3, [pc, #752]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 800368a:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 800368c:	4bbd      	ldr	r3, [pc, #756]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1180>)
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	e163      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 8003694:	4bba      	ldr	r3, [pc, #744]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	b2da      	uxtb	r2, r3
 800369a:	4bb8      	ldr	r3, [pc, #736]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 800369c:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 800369e:	4aba      	ldr	r2, [pc, #744]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 80036a0:	4bb8      	ldr	r3, [pc, #736]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1180>)
 80036a2:	0011      	movs	r1, r2
 80036a4:	0018      	movs	r0, r3
 80036a6:	f7fd fdaa 	bl	80011fe <Reset_and_Stop_MIDI_Software_Timer>
							Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80036aa:	4bb7      	ldr	r3, [pc, #732]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 80036ac:	2108      	movs	r1, #8
 80036ae:	0018      	movs	r0, r3
 80036b0:	f002 fd4a 	bl	8006148 <Clear_Status_Bit>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80036b4:	4bb1      	ldr	r3, [pc, #708]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 80036b6:	0018      	movs	r0, r3
 80036b8:	f7fd fc1a 	bl	8000ef0 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 80036bc:	0003      	movs	r3, r0
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d14c      	bne.n	800375c <UART2_RX_transfer_complete_callback+0xf58>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES){
 80036c2:	4bb2      	ldr	r3, [pc, #712]	@ (800398c <UART2_RX_transfer_complete_callback+0x1188>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	4bab      	ldr	r3, [pc, #684]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 80036ca:	0011      	movs	r1, r2
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7fd fcc5 	bl	800105c <Is_Channelised_Status_Byte_On_Basic_Channel>
 80036d2:	0003      	movs	r3, r0
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d139      	bne.n	800374c <UART2_RX_transfer_complete_callback+0xf48>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 80036d8:	4aad      	ldr	r2, [pc, #692]	@ (8003990 <UART2_RX_transfer_complete_callback+0x118c>)
 80036da:	4ba8      	ldr	r3, [pc, #672]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 80036dc:	0011      	movs	r1, r2
 80036de:	0018      	movs	r0, r3
 80036e0:	f7fd fc65 	bl	8000fae <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 80036e4:	0003      	movs	r3, r0
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d130      	bne.n	800374c <UART2_RX_transfer_complete_callback+0xf48>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 80036ea:	4ba4      	ldr	r3, [pc, #656]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 80036ec:	785b      	ldrb	r3, [r3, #1]
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b79      	cmp	r3, #121	@ 0x79
 80036f2:	d10b      	bne.n	800370c <UART2_RX_transfer_complete_callback+0xf08>

											Reset_All_Controllers(&params, &delay_line);
 80036f4:	4aa7      	ldr	r2, [pc, #668]	@ (8003994 <UART2_RX_transfer_complete_callback+0x1190>)
 80036f6:	4ba8      	ldr	r3, [pc, #672]	@ (8003998 <UART2_RX_transfer_complete_callback+0x1194>)
 80036f8:	0011      	movs	r1, r2
 80036fa:	0018      	movs	r0, r3
 80036fc:	f7fd fd9a 	bl	8001234 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003700:	4ba1      	ldr	r3, [pc, #644]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 8003702:	2108      	movs	r1, #8
 8003704:	0018      	movs	r0, r3
 8003706:	f002 fd1f 	bl	8006148 <Clear_Status_Bit>
 800370a:	e01f      	b.n	800374c <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 800370c:	4b9b      	ldr	r3, [pc, #620]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 800370e:	785b      	ldrb	r3, [r3, #1]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b7a      	cmp	r3, #122	@ 0x7a
 8003714:	d107      	bne.n	8003726 <UART2_RX_transfer_complete_callback+0xf22>

											Set_Local_Control();
 8003716:	f7fd fde7 	bl	80012e8 <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 800371a:	4b9b      	ldr	r3, [pc, #620]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 800371c:	2108      	movs	r1, #8
 800371e:	0018      	movs	r0, r3
 8003720:	f002 fd12 	bl	8006148 <Clear_Status_Bit>
 8003724:	e012      	b.n	800374c <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 8003726:	4b95      	ldr	r3, [pc, #596]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 8003728:	785b      	ldrb	r3, [r3, #1]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b7c      	cmp	r3, #124	@ 0x7c
 800372e:	d104      	bne.n	800373a <UART2_RX_transfer_complete_callback+0xf36>

											Set_OMNI_Off(&statuses);
 8003730:	4b95      	ldr	r3, [pc, #596]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 8003732:	0018      	movs	r0, r3
 8003734:	f7fd fe10 	bl	8001358 <Set_OMNI_Off>
 8003738:	e008      	b.n	800374c <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 800373a:	4b90      	ldr	r3, [pc, #576]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 800373c:	785b      	ldrb	r3, [r3, #1]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b7d      	cmp	r3, #125	@ 0x7d
 8003742:	d103      	bne.n	800374c <UART2_RX_transfer_complete_callback+0xf48>

											Set_OMNI_On(&statuses);
 8003744:	4b90      	ldr	r3, [pc, #576]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 8003746:	0018      	movs	r0, r3
 8003748:	f7fd fe16 	bl	8001378 <Set_OMNI_On>
										}
									}
								}

								active_status_byte = 0;
 800374c:	4b8a      	ldr	r3, [pc, #552]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 800374e:	2200      	movs	r2, #0
 8003750:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003752:	4b8a      	ldr	r3, [pc, #552]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 8003754:	0018      	movs	r0, r3
 8003756:	f7fd fcd2 	bl	80010fe <Clear_Data_Buffer>
 800375a:	e0ff      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 800375c:	4b87      	ldr	r3, [pc, #540]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 800375e:	0018      	movs	r0, r3
 8003760:	f7fd fbf2 	bl	8000f48 <Is_Utilised_CC_First_Data_Byte>
 8003764:	0003      	movs	r3, r0
 8003766:	2b01      	cmp	r3, #1
 8003768:	d14f      	bne.n	800380a <UART2_RX_transfer_complete_callback+0x1006>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES)
 800376a:	4b88      	ldr	r3, [pc, #544]	@ (800398c <UART2_RX_transfer_complete_callback+0x1188>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	b2da      	uxtb	r2, r3
 8003770:	4b81      	ldr	r3, [pc, #516]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 8003772:	0011      	movs	r1, r2
 8003774:	0018      	movs	r0, r3
 8003776:	f7fd fc71 	bl	800105c <Is_Channelised_Status_Byte_On_Basic_Channel>
 800377a:	0003      	movs	r3, r0
 800377c:	2b01      	cmp	r3, #1
 800377e:	d006      	beq.n	800378e <UART2_RX_transfer_complete_callback+0xf8a>
										|| (Is_OMNI_On(&statuses) == YES)){
 8003780:	4b81      	ldr	r3, [pc, #516]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 8003782:	0018      	movs	r0, r3
 8003784:	f7fd fd21 	bl	80011ca <Is_OMNI_On>
 8003788:	0003      	movs	r3, r0
 800378a:	2b01      	cmp	r3, #1
 800378c:	d135      	bne.n	80037fa <UART2_RX_transfer_complete_callback+0xff6>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 800378e:	4b7b      	ldr	r3, [pc, #492]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b14      	cmp	r3, #20
 8003796:	d104      	bne.n	80037a2 <UART2_RX_transfer_complete_callback+0xf9e>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003798:	4b7d      	ldr	r3, [pc, #500]	@ (8003990 <UART2_RX_transfer_complete_callback+0x118c>)
 800379a:	0018      	movs	r0, r3
 800379c:	f7fd fa36 	bl	8000c0c <Set_Waveshape_to_CC_Mode_and_Value>
 80037a0:	e02b      	b.n	80037fa <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 80037a2:	4b76      	ldr	r3, [pc, #472]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b15      	cmp	r3, #21
 80037aa:	d109      	bne.n	80037c0 <UART2_RX_transfer_complete_callback+0xfbc>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80037ac:	4b78      	ldr	r3, [pc, #480]	@ (8003990 <UART2_RX_transfer_complete_callback+0x118c>)
 80037ae:	0018      	movs	r0, r3
 80037b0:	f7fd fa46 	bl	8000c40 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80037b4:	4b74      	ldr	r3, [pc, #464]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 80037b6:	2108      	movs	r1, #8
 80037b8:	0018      	movs	r0, r3
 80037ba:	f002 fcc5 	bl	8006148 <Clear_Status_Bit>
 80037be:	e01c      	b.n	80037fa <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 80037c0:	4b6e      	ldr	r3, [pc, #440]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b16      	cmp	r3, #22
 80037c8:	d104      	bne.n	80037d4 <UART2_RX_transfer_complete_callback+0xfd0>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80037ca:	4b71      	ldr	r3, [pc, #452]	@ (8003990 <UART2_RX_transfer_complete_callback+0x118c>)
 80037cc:	0018      	movs	r0, r3
 80037ce:	f7fd fa51 	bl	8000c74 <Set_Depth_to_CC_Mode_and_Value>
 80037d2:	e012      	b.n	80037fa <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 80037d4:	4b69      	ldr	r3, [pc, #420]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b17      	cmp	r3, #23
 80037dc:	d104      	bne.n	80037e8 <UART2_RX_transfer_complete_callback+0xfe4>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80037de:	4b6c      	ldr	r3, [pc, #432]	@ (8003990 <UART2_RX_transfer_complete_callback+0x118c>)
 80037e0:	0018      	movs	r0, r3
 80037e2:	f7fd fa61 	bl	8000ca8 <Set_Symmetry_to_CC_Mode_and_Value>
 80037e6:	e008      	b.n	80037fa <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 80037e8:	4b64      	ldr	r3, [pc, #400]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b18      	cmp	r3, #24
 80037f0:	d103      	bne.n	80037fa <UART2_RX_transfer_complete_callback+0xff6>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80037f2:	4b67      	ldr	r3, [pc, #412]	@ (8003990 <UART2_RX_transfer_complete_callback+0x118c>)
 80037f4:	0018      	movs	r0, r3
 80037f6:	f7fd fa71 	bl	8000cdc <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 80037fa:	4b5f      	ldr	r3, [pc, #380]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003800:	4b5e      	ldr	r3, [pc, #376]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 8003802:	0018      	movs	r0, r3
 8003804:	f7fd fc7b 	bl	80010fe <Clear_Data_Buffer>
 8003808:	e0a8      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 800380a:	4b5b      	ldr	r3, [pc, #364]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003810:	4b5a      	ldr	r3, [pc, #360]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 8003812:	0018      	movs	r0, r3
 8003814:	f7fd fc73 	bl	80010fe <Clear_Data_Buffer>
 8003818:	e0a0      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(&active_status_byte) == YES){
 800381a:	4b57      	ldr	r3, [pc, #348]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 800381c:	0018      	movs	r0, r3
 800381e:	f7fd fc0d 	bl	800103c <Is_Sysex_Start_Status_Byte>
 8003822:	0003      	movs	r3, r0
 8003824:	2b01      	cmp	r3, #1
 8003826:	d000      	beq.n	800382a <UART2_RX_transfer_complete_callback+0x1026>
 8003828:	e098      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						//@TODO

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800382a:	4b54      	ldr	r3, [pc, #336]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 800382c:	0018      	movs	r0, r3
 800382e:	f7fd fc36 	bl	800109e <Is_Data_Buffer_Empty>
 8003832:	e093      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8003834:	4b51      	ldr	r3, [pc, #324]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 8003836:	0018      	movs	r0, r3
 8003838:	f7fd fc61 	bl	80010fe <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 800383c:	4a52      	ldr	r2, [pc, #328]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 800383e:	4b51      	ldr	r3, [pc, #324]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1180>)
 8003840:	0011      	movs	r1, r2
 8003842:	0018      	movs	r0, r3
 8003844:	f7fd fcdb 	bl	80011fe <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003848:	4b4d      	ldr	r3, [pc, #308]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 800384a:	0018      	movs	r0, r3
 800384c:	f7fd fb18 	bl	8000e80 <Is_PC_Status_Byte>
 8003850:	0003      	movs	r3, r0
 8003852:	2b01      	cmp	r3, #1
 8003854:	d130      	bne.n	80038b8 <UART2_RX_transfer_complete_callback+0x10b4>

						running_status_byte = (uint8_t)*rx_buffer;
 8003856:	4b4a      	ldr	r3, [pc, #296]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	4b4f      	ldr	r3, [pc, #316]	@ (800399c <UART2_RX_transfer_complete_callback+0x1198>)
 800385e:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003860:	4b4a      	ldr	r3, [pc, #296]	@ (800398c <UART2_RX_transfer_complete_callback+0x1188>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b46      	ldr	r3, [pc, #280]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003868:	0011      	movs	r1, r2
 800386a:	0018      	movs	r0, r3
 800386c:	f7fd fbf6 	bl	800105c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003870:	0003      	movs	r3, r0
 8003872:	2b01      	cmp	r3, #1
 8003874:	d10c      	bne.n	8003890 <UART2_RX_transfer_complete_callback+0x108c>

							active_status_byte = (uint8_t)*rx_buffer;
 8003876:	4b42      	ldr	r3, [pc, #264]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	b2da      	uxtb	r2, r3
 800387c:	4b3e      	ldr	r3, [pc, #248]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 800387e:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003880:	2380      	movs	r3, #128	@ 0x80
 8003882:	005a      	lsls	r2, r3, #1
 8003884:	4b40      	ldr	r3, [pc, #256]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 8003886:	0011      	movs	r1, r2
 8003888:	0018      	movs	r0, r3
 800388a:	f002 fc4b 	bl	8006124 <Set_Status_Bit>
 800388e:	e065      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003890:	4b3d      	ldr	r3, [pc, #244]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 8003892:	0018      	movs	r0, r3
 8003894:	f7fd fc99 	bl	80011ca <Is_OMNI_On>
 8003898:	0003      	movs	r3, r0
 800389a:	2b01      	cmp	r3, #1
 800389c:	d15e      	bne.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 800389e:	4b38      	ldr	r3, [pc, #224]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	4b34      	ldr	r3, [pc, #208]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 80038a6:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80038a8:	2380      	movs	r3, #128	@ 0x80
 80038aa:	005a      	lsls	r2, r3, #1
 80038ac:	4b36      	ldr	r3, [pc, #216]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 80038ae:	0011      	movs	r1, r2
 80038b0:	0018      	movs	r0, r3
 80038b2:	f002 fc37 	bl	8006124 <Set_Status_Bit>
 80038b6:	e051      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80038b8:	4b31      	ldr	r3, [pc, #196]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 80038ba:	0018      	movs	r0, r3
 80038bc:	f7fd fafc 	bl	8000eb8 <Is_CC_Status_Byte>
 80038c0:	0003      	movs	r3, r0
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d130      	bne.n	8003928 <UART2_RX_transfer_complete_callback+0x1124>

						running_status_byte = (uint8_t)*rx_buffer;
 80038c6:	4b2e      	ldr	r3, [pc, #184]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	4b33      	ldr	r3, [pc, #204]	@ (800399c <UART2_RX_transfer_complete_callback+0x1198>)
 80038ce:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80038d0:	4b2e      	ldr	r3, [pc, #184]	@ (800398c <UART2_RX_transfer_complete_callback+0x1188>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 80038d8:	0011      	movs	r1, r2
 80038da:	0018      	movs	r0, r3
 80038dc:	f7fd fbbe 	bl	800105c <Is_Channelised_Status_Byte_On_Basic_Channel>
 80038e0:	0003      	movs	r3, r0
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d10c      	bne.n	8003900 <UART2_RX_transfer_complete_callback+0x10fc>

							active_status_byte = (uint8_t)*rx_buffer;
 80038e6:	4b26      	ldr	r3, [pc, #152]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	4b22      	ldr	r3, [pc, #136]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 80038ee:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80038f0:	2380      	movs	r3, #128	@ 0x80
 80038f2:	005a      	lsls	r2, r3, #1
 80038f4:	4b24      	ldr	r3, [pc, #144]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 80038f6:	0011      	movs	r1, r2
 80038f8:	0018      	movs	r0, r3
 80038fa:	f002 fc13 	bl	8006124 <Set_Status_Bit>
 80038fe:	e02d      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003900:	4b21      	ldr	r3, [pc, #132]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 8003902:	0018      	movs	r0, r3
 8003904:	f7fd fc61 	bl	80011ca <Is_OMNI_On>
 8003908:	0003      	movs	r3, r0
 800390a:	2b01      	cmp	r3, #1
 800390c:	d126      	bne.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 800390e:	4b1c      	ldr	r3, [pc, #112]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	b2da      	uxtb	r2, r3
 8003914:	4b18      	ldr	r3, [pc, #96]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 8003916:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003918:	2380      	movs	r3, #128	@ 0x80
 800391a:	005a      	lsls	r2, r3, #1
 800391c:	4b1a      	ldr	r3, [pc, #104]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 800391e:	0011      	movs	r1, r2
 8003920:	0018      	movs	r0, r3
 8003922:	f002 fbff 	bl	8006124 <Set_Status_Bit>
 8003926:	e019      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003928:	4b15      	ldr	r3, [pc, #84]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 800392a:	0018      	movs	r0, r3
 800392c:	f7fd fb86 	bl	800103c <Is_Sysex_Start_Status_Byte>
 8003930:	0003      	movs	r3, r0
 8003932:	2b01      	cmp	r3, #1
 8003934:	d112      	bne.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8003936:	4b12      	ldr	r3, [pc, #72]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	4b0e      	ldr	r3, [pc, #56]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 800393e:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003940:	4b16      	ldr	r3, [pc, #88]	@ (800399c <UART2_RX_transfer_complete_callback+0x1198>)
 8003942:	2200      	movs	r2, #0
 8003944:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003946:	2380      	movs	r3, #128	@ 0x80
 8003948:	005a      	lsls	r2, r3, #1
 800394a:	4b0f      	ldr	r3, [pc, #60]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 800394c:	0011      	movs	r1, r2
 800394e:	0018      	movs	r0, r3
 8003950:	f002 fbe8 	bl	8006124 <Set_Status_Bit>
 8003954:	e002      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8003956:	46c0      	nop			@ (mov r8, r8)
 8003958:	e000      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800395a:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}

	*rx_buffer = 0;
 800395c:	4b08      	ldr	r3, [pc, #32]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 800395e:	2200      	movs	r2, #0
 8003960:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8003962:	4907      	ldr	r1, [pc, #28]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003964:	4b0e      	ldr	r3, [pc, #56]	@ (80039a0 <UART2_RX_transfer_complete_callback+0x119c>)
 8003966:	2201      	movs	r2, #1
 8003968:	0018      	movs	r0, r3
 800396a:	f008 fadd 	bl	800bf28 <HAL_UART_Receive_DMA>
}
 800396e:	46c0      	nop			@ (mov r8, r8)
 8003970:	46bd      	mov	sp, r7
 8003972:	b002      	add	sp, #8
 8003974:	bd80      	pop	{r7, pc}
 8003976:	46c0      	nop			@ (mov r8, r8)
 8003978:	200004cb 	.word	0x200004cb
 800397c:	200004d0 	.word	0x200004d0
 8003980:	200004dc 	.word	0x200004dc
 8003984:	20000c40 	.word	0x20000c40
 8003988:	20000c38 	.word	0x20000c38
 800398c:	200004ca 	.word	0x200004ca
 8003990:	200004d1 	.word	0x200004d1
 8003994:	20000028 	.word	0x20000028
 8003998:	20000c50 	.word	0x20000c50
 800399c:	200004cc 	.word	0x200004cc
 80039a0:	20000a48 	.word	0x20000a48

080039a4 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	0002      	movs	r2, r0
 80039ac:	1dbb      	adds	r3, r7, #6
 80039ae:	801a      	strh	r2, [r3, #0]

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with falling interrupt
 80039b0:	1dbb      	adds	r3, r7, #6
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	2b80      	cmp	r3, #128	@ 0x80
 80039b6:	d117      	bne.n	80039e8 <HAL_GPIO_EXTI_Falling_Callback+0x44>

		if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 80039b8:	4b0d      	ldr	r3, [pc, #52]	@ (80039f0 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b06      	cmp	r3, #6
 80039c0:	d004      	beq.n	80039cc <HAL_GPIO_EXTI_Falling_Callback+0x28>
 80039c2:	4b0b      	ldr	r3, [pc, #44]	@ (80039f0 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b07      	cmp	r3, #7
 80039ca:	d10d      	bne.n	80039e8 <HAL_GPIO_EXTI_Falling_Callback+0x44>

			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80039cc:	2380      	movs	r3, #128	@ 0x80
 80039ce:	0099      	lsls	r1, r3, #2
 80039d0:	23a0      	movs	r3, #160	@ 0xa0
 80039d2:	05db      	lsls	r3, r3, #23
 80039d4:	2201      	movs	r2, #1
 80039d6:	0018      	movs	r0, r3
 80039d8:	f004 fc53 	bl	8008282 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80039dc:	4b05      	ldr	r3, [pc, #20]	@ (80039f4 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 80039de:	2200      	movs	r2, #0
 80039e0:	2140      	movs	r1, #64	@ 0x40
 80039e2:	0018      	movs	r0, r3
 80039e4:	f004 fc4d 	bl	8008282 <HAL_GPIO_WritePin>
		}
	}
}
 80039e8:	46c0      	nop			@ (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20000430 	.word	0x20000430
 80039f4:	50000800 	.word	0x50000800

080039f8 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	0002      	movs	r2, r0
 8003a00:	1dbb      	adds	r3, r7, #6
 8003a02:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with rising interrupt
 8003a04:	1dbb      	adds	r3, r7, #6
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	2b80      	cmp	r3, #128	@ 0x80
 8003a0a:	d000      	beq.n	8003a0e <HAL_GPIO_EXTI_Rising_Callback+0x16>
 8003a0c:	e0dd      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>

		if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8003a0e:	4b71      	ldr	r3, [pc, #452]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d114      	bne.n	8003a42 <HAL_GPIO_EXTI_Rising_Callback+0x4a>

			//Set SW OUT
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003a18:	2380      	movs	r3, #128	@ 0x80
 8003a1a:	0099      	lsls	r1, r3, #2
 8003a1c:	23a0      	movs	r3, #160	@ 0xa0
 8003a1e:	05db      	lsls	r3, r3, #23
 8003a20:	2200      	movs	r2, #0
 8003a22:	0018      	movs	r0, r3
 8003a24:	f004 fc2d 	bl	8008282 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003a28:	4b6b      	ldr	r3, [pc, #428]	@ (8003bd8 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	2140      	movs	r1, #64	@ 0x40
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f004 fc27 	bl	8008282 <HAL_GPIO_WritePin>

			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003a34:	4b67      	ldr	r3, [pc, #412]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003a3a:	4b66      	ldr	r3, [pc, #408]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a3c:	2207      	movs	r2, #7
 8003a3e:	701a      	strb	r2, [r3, #0]
		}

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8003a40:	e0c3      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == PC_MODE){
 8003a42:	4b64      	ldr	r3, [pc, #400]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d114      	bne.n	8003a76 <HAL_GPIO_EXTI_Rising_Callback+0x7e>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003a4c:	2380      	movs	r3, #128	@ 0x80
 8003a4e:	0099      	lsls	r1, r3, #2
 8003a50:	23a0      	movs	r3, #160	@ 0xa0
 8003a52:	05db      	lsls	r3, r3, #23
 8003a54:	2200      	movs	r2, #0
 8003a56:	0018      	movs	r0, r3
 8003a58:	f004 fc13 	bl	8008282 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003a5c:	4b5e      	ldr	r3, [pc, #376]	@ (8003bd8 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	2140      	movs	r1, #64	@ 0x40
 8003a62:	0018      	movs	r0, r3
 8003a64:	f004 fc0d 	bl	8008282 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = PC_MODE;
 8003a68:	4b5a      	ldr	r3, [pc, #360]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003a6e:	4b59      	ldr	r3, [pc, #356]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a70:	2207      	movs	r2, #7
 8003a72:	701a      	strb	r2, [r3, #0]
}
 8003a74:	e0a9      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == CC_MODE){
 8003a76:	4b57      	ldr	r3, [pc, #348]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d114      	bne.n	8003aaa <HAL_GPIO_EXTI_Rising_Callback+0xb2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003a80:	2380      	movs	r3, #128	@ 0x80
 8003a82:	0099      	lsls	r1, r3, #2
 8003a84:	23a0      	movs	r3, #160	@ 0xa0
 8003a86:	05db      	lsls	r3, r3, #23
 8003a88:	2200      	movs	r2, #0
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	f004 fbf9 	bl	8008282 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003a90:	4b51      	ldr	r3, [pc, #324]	@ (8003bd8 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	2140      	movs	r1, #64	@ 0x40
 8003a96:	0018      	movs	r0, r3
 8003a98:	f004 fbf3 	bl	8008282 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = CC_MODE;
 8003a9c:	4b4d      	ldr	r3, [pc, #308]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003aa2:	4b4c      	ldr	r3, [pc, #304]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003aa4:	2207      	movs	r2, #7
 8003aa6:	701a      	strb	r2, [r3, #0]
}
 8003aa8:	e08f      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d12b      	bne.n	8003b0c <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8003ab4:	4b49      	ldr	r3, [pc, #292]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d126      	bne.n	8003b0c <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8003abe:	4b48      	ldr	r3, [pc, #288]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003ac0:	2120      	movs	r1, #32
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f002 fb1a 	bl	80060fc <Get_Status_Bit>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d11e      	bne.n	8003b0c <HAL_GPIO_EXTI_Rising_Callback+0x114>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003ace:	2380      	movs	r3, #128	@ 0x80
 8003ad0:	0099      	lsls	r1, r3, #2
 8003ad2:	23a0      	movs	r3, #160	@ 0xa0
 8003ad4:	05db      	lsls	r3, r3, #23
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f004 fbd2 	bl	8008282 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003ade:	4b3e      	ldr	r3, [pc, #248]	@ (8003bd8 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	2140      	movs	r1, #64	@ 0x40
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f004 fbcc 	bl	8008282 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = TAP_MODE;
 8003aea:	4b3a      	ldr	r3, [pc, #232]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003aec:	2204      	movs	r2, #4
 8003aee:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003af0:	4b38      	ldr	r3, [pc, #224]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003af2:	2207      	movs	r2, #7
 8003af4:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003af6:	4b3a      	ldr	r3, [pc, #232]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003af8:	2120      	movs	r1, #32
 8003afa:	0018      	movs	r0, r3
 8003afc:	f002 fb24 	bl	8006148 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003b00:	4b37      	ldr	r3, [pc, #220]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003b02:	2140      	movs	r1, #64	@ 0x40
 8003b04:	0018      	movs	r0, r3
 8003b06:	f002 fb1f 	bl	8006148 <Clear_Status_Bit>
 8003b0a:	e05e      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003b0c:	4b31      	ldr	r3, [pc, #196]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	d12b      	bne.n	8003b6e <HAL_GPIO_EXTI_Rising_Callback+0x176>
 8003b16:	4b31      	ldr	r3, [pc, #196]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d126      	bne.n	8003b6e <HAL_GPIO_EXTI_Rising_Callback+0x176>
 8003b20:	4b2f      	ldr	r3, [pc, #188]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003b22:	2120      	movs	r1, #32
 8003b24:	0018      	movs	r0, r3
 8003b26:	f002 fae9 	bl	80060fc <Get_Status_Bit>
 8003b2a:	0003      	movs	r3, r0
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d11e      	bne.n	8003b6e <HAL_GPIO_EXTI_Rising_Callback+0x176>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003b30:	2380      	movs	r3, #128	@ 0x80
 8003b32:	0099      	lsls	r1, r3, #2
 8003b34:	23a0      	movs	r3, #160	@ 0xa0
 8003b36:	05db      	lsls	r3, r3, #23
 8003b38:	2200      	movs	r2, #0
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f004 fba1 	bl	8008282 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003b40:	4b25      	ldr	r3, [pc, #148]	@ (8003bd8 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003b42:	2201      	movs	r2, #1
 8003b44:	2140      	movs	r1, #64	@ 0x40
 8003b46:	0018      	movs	r0, r3
 8003b48:	f004 fb9b 	bl	8008282 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003b4c:	4b21      	ldr	r3, [pc, #132]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b4e:	2208      	movs	r2, #8
 8003b50:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003b52:	4b20      	ldr	r3, [pc, #128]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b54:	2207      	movs	r2, #7
 8003b56:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003b58:	4b21      	ldr	r3, [pc, #132]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003b5a:	2120      	movs	r1, #32
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f002 faf3 	bl	8006148 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003b62:	4b1f      	ldr	r3, [pc, #124]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003b64:	2140      	movs	r1, #64	@ 0x40
 8003b66:	0018      	movs	r0, r3
 8003b68:	f002 faee 	bl	8006148 <Clear_Status_Bit>
 8003b6c:	e02d      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){ //second edge
 8003b6e:	4b19      	ldr	r3, [pc, #100]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b07      	cmp	r3, #7
 8003b76:	d114      	bne.n	8003ba2 <HAL_GPIO_EXTI_Rising_Callback+0x1aa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003b78:	2380      	movs	r3, #128	@ 0x80
 8003b7a:	0099      	lsls	r1, r3, #2
 8003b7c:	23a0      	movs	r3, #160	@ 0xa0
 8003b7e:	05db      	lsls	r3, r3, #23
 8003b80:	2200      	movs	r2, #0
 8003b82:	0018      	movs	r0, r3
 8003b84:	f004 fb7d 	bl	8008282 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003b88:	4b13      	ldr	r3, [pc, #76]	@ (8003bd8 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	2140      	movs	r1, #64	@ 0x40
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f004 fb77 	bl	8008282 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003b94:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b96:	2207      	movs	r2, #7
 8003b98:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8003b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b9c:	2206      	movs	r2, #6
 8003b9e:	701a      	strb	r2, [r3, #0]
}
 8003ba0:	e013      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE){
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b06      	cmp	r3, #6
 8003baa:	d10e      	bne.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003bac:	2380      	movs	r3, #128	@ 0x80
 8003bae:	0099      	lsls	r1, r3, #2
 8003bb0:	23a0      	movs	r3, #160	@ 0xa0
 8003bb2:	05db      	lsls	r3, r3, #23
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f004 fb63 	bl	8008282 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003bbc:	4b06      	ldr	r3, [pc, #24]	@ (8003bd8 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	2140      	movs	r1, #64	@ 0x40
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f004 fb5d 	bl	8008282 <HAL_GPIO_WritePin>
}
 8003bc8:	e7ff      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
 8003bca:	46c0      	nop			@ (mov r8, r8)
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b002      	add	sp, #8
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	20000430 	.word	0x20000430
 8003bd8:	50000800 	.word	0x50000800
 8003bdc:	20000444 	.word	0x20000444
 8003be0:	20000c38 	.word	0x20000c38

08003be4 <LPTIM1_callback>:

void LPTIM1_callback(LPTIM_HandleTypeDef *hlptim){
 8003be4:	b5b0      	push	{r4, r5, r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

	static volatile struct Tap_Tempo_Switch_States tap_tempo_switch_states = {0};

	//CHECK IF NEED TAP_PENDING TRANSITION

	uint8_t pin_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8003bec:	250f      	movs	r5, #15
 8003bee:	197c      	adds	r4, r7, r5
 8003bf0:	2380      	movs	r3, #128	@ 0x80
 8003bf2:	00da      	lsls	r2, r3, #3
 8003bf4:	23a0      	movs	r3, #160	@ 0xa0
 8003bf6:	05db      	lsls	r3, r3, #23
 8003bf8:	0011      	movs	r1, r2
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f004 fb24 	bl	8008248 <HAL_GPIO_ReadPin>
 8003c00:	0003      	movs	r3, r0
 8003c02:	7023      	strb	r3, [r4, #0]

	if((speed_fsm.current_state.shared_state == MANUAL_MODE) && (pin_state == 0)){
 8003c04:	4bae      	ldr	r3, [pc, #696]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d10a      	bne.n	8003c24 <LPTIM1_callback+0x40>
 8003c0e:	197b      	adds	r3, r7, r5
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <LPTIM1_callback+0x40>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003c16:	4baa      	ldr	r3, [pc, #680]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c18:	2205      	movs	r2, #5
 8003c1a:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003c1c:	4ba8      	ldr	r3, [pc, #672]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c1e:	2201      	movs	r2, #1
 8003c20:	705a      	strb	r2, [r3, #1]
 8003c22:	e070      	b.n	8003d06 <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.shared_state == CC_MODE) && (pin_state == 0)){
 8003c24:	4ba6      	ldr	r3, [pc, #664]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d10b      	bne.n	8003c46 <LPTIM1_callback+0x62>
 8003c2e:	230f      	movs	r3, #15
 8003c30:	18fb      	adds	r3, r7, r3
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <LPTIM1_callback+0x62>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003c38:	4ba1      	ldr	r3, [pc, #644]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c3a:	2205      	movs	r2, #5
 8003c3c:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = CC_MODE;
 8003c3e:	4ba0      	ldr	r3, [pc, #640]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c40:	2202      	movs	r2, #2
 8003c42:	705a      	strb	r2, [r3, #1]
 8003c44:	e05f      	b.n	8003d06 <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.shared_state == PC_MODE) && (pin_state == 0)){
 8003c46:	4b9e      	ldr	r3, [pc, #632]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d10b      	bne.n	8003c68 <LPTIM1_callback+0x84>
 8003c50:	230f      	movs	r3, #15
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <LPTIM1_callback+0x84>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003c5a:	4b99      	ldr	r3, [pc, #612]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c5c:	2205      	movs	r2, #5
 8003c5e:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = PC_MODE;
 8003c60:	4b97      	ldr	r3, [pc, #604]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c62:	2203      	movs	r2, #3
 8003c64:	705a      	strb	r2, [r3, #1]
 8003c66:	e04e      	b.n	8003d06 <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003c68:	4b95      	ldr	r3, [pc, #596]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b06      	cmp	r3, #6
 8003c70:	d122      	bne.n	8003cb8 <LPTIM1_callback+0xd4>
 8003c72:	230f      	movs	r3, #15
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d11d      	bne.n	8003cb8 <LPTIM1_callback+0xd4>
 8003c7c:	4b91      	ldr	r3, [pc, #580]	@ (8003ec4 <LPTIM1_callback+0x2e0>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d118      	bne.n	8003cb8 <LPTIM1_callback+0xd4>
 8003c86:	4b90      	ldr	r3, [pc, #576]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003c88:	2120      	movs	r1, #32
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f002 fa36 	bl	80060fc <Get_Status_Bit>
 8003c90:	0003      	movs	r3, r0
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d110      	bne.n	8003cb8 <LPTIM1_callback+0xd4>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003c96:	4b8a      	ldr	r3, [pc, #552]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c98:	2205      	movs	r2, #5
 8003c9a:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.speed_exclusive_state = CLK_IN_MODE;
 8003c9c:	4b88      	ldr	r3, [pc, #544]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c9e:	2206      	movs	r2, #6
 8003ca0:	705a      	strb	r2, [r3, #1]

		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003ca2:	4b89      	ldr	r3, [pc, #548]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003ca4:	2120      	movs	r1, #32
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f002 fa4e 	bl	8006148 <Clear_Status_Bit>
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003cac:	4b86      	ldr	r3, [pc, #536]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003cae:	2140      	movs	r1, #64	@ 0x40
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f002 fa49 	bl	8006148 <Clear_Status_Bit>
 8003cb6:	e026      	b.n	8003d06 <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003cb8:	4b81      	ldr	r3, [pc, #516]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d121      	bne.n	8003d06 <LPTIM1_callback+0x122>
 8003cc2:	230f      	movs	r3, #15
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d11c      	bne.n	8003d06 <LPTIM1_callback+0x122>
 8003ccc:	4b7d      	ldr	r3, [pc, #500]	@ (8003ec4 <LPTIM1_callback+0x2e0>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d117      	bne.n	8003d06 <LPTIM1_callback+0x122>
 8003cd6:	4b7c      	ldr	r3, [pc, #496]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003cd8:	2120      	movs	r1, #32
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f002 fa0e 	bl	80060fc <Get_Status_Bit>
 8003ce0:	0003      	movs	r3, r0
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d10f      	bne.n	8003d06 <LPTIM1_callback+0x122>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003ce6:	4b76      	ldr	r3, [pc, #472]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003ce8:	2205      	movs	r2, #5
 8003cea:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003cec:	4b74      	ldr	r3, [pc, #464]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003cee:	2208      	movs	r2, #8
 8003cf0:	705a      	strb	r2, [r3, #1]

		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003cf2:	4b75      	ldr	r3, [pc, #468]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003cf4:	2120      	movs	r1, #32
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f002 fa26 	bl	8006148 <Clear_Status_Bit>
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003cfc:	4b72      	ldr	r3, [pc, #456]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003cfe:	2140      	movs	r1, #64	@ 0x40
 8003d00:	0018      	movs	r0, r3
 8003d02:	f002 fa21 	bl	8006148 <Clear_Status_Bit>
	}

	//CHECK TAP TEMPO STATE

	Check_Tap_Tempo_Switch_State(&tap_tempo_switch_states);
 8003d06:	4b71      	ldr	r3, [pc, #452]	@ (8003ecc <LPTIM1_callback+0x2e8>)
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f7fd fc75 	bl	80015f8 <Check_Tap_Tempo_Switch_State>

	if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == TAP_MODE)){
 8003d0e:	4b6c      	ldr	r3, [pc, #432]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b05      	cmp	r3, #5
 8003d16:	d004      	beq.n	8003d22 <LPTIM1_callback+0x13e>
 8003d18:	4b69      	ldr	r3, [pc, #420]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d126      	bne.n	8003d70 <LPTIM1_callback+0x18c>

		if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8003d22:	4b6a      	ldr	r3, [pc, #424]	@ (8003ecc <LPTIM1_callback+0x2e8>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d10e      	bne.n	8003d4a <LPTIM1_callback+0x166>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003d2c:	2380      	movs	r3, #128	@ 0x80
 8003d2e:	0099      	lsls	r1, r3, #2
 8003d30:	23a0      	movs	r3, #160	@ 0xa0
 8003d32:	05db      	lsls	r3, r3, #23
 8003d34:	2200      	movs	r2, #0
 8003d36:	0018      	movs	r0, r3
 8003d38:	f004 faa3 	bl	8008282 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003d3c:	4b64      	ldr	r3, [pc, #400]	@ (8003ed0 <LPTIM1_callback+0x2ec>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	2140      	movs	r1, #64	@ 0x40
 8003d42:	0018      	movs	r0, r3
 8003d44:	f004 fa9d 	bl	8008282 <HAL_GPIO_WritePin>
 8003d48:	e012      	b.n	8003d70 <LPTIM1_callback+0x18c>

		}
		else if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 8003d4a:	4b60      	ldr	r3, [pc, #384]	@ (8003ecc <LPTIM1_callback+0x2e8>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10d      	bne.n	8003d70 <LPTIM1_callback+0x18c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003d54:	2380      	movs	r3, #128	@ 0x80
 8003d56:	0099      	lsls	r1, r3, #2
 8003d58:	23a0      	movs	r3, #160	@ 0xa0
 8003d5a:	05db      	lsls	r3, r3, #23
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f004 fa8f 	bl	8008282 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003d64:	4b5a      	ldr	r3, [pc, #360]	@ (8003ed0 <LPTIM1_callback+0x2ec>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	2140      	movs	r1, #64	@ 0x40
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f004 fa89 	bl	8008282 <HAL_GPIO_WritePin>

	//enum Validate timeout = Get_Status_Bit(&statuses, Tap_Tempo_Switch_Hold_Timer_Has_Timed_Out);

	static uint32_t depressed_num = 0;

	if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8003d70:	4b56      	ldr	r3, [pc, #344]	@ (8003ecc <LPTIM1_callback+0x2e8>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d12c      	bne.n	8003dd4 <LPTIM1_callback+0x1f0>

		if(depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_HOLD_TIME_COUNT){
 8003d7a:	4b56      	ldr	r3, [pc, #344]	@ (8003ed4 <LPTIM1_callback+0x2f0>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	23fa      	movs	r3, #250	@ 0xfa
 8003d80:	015b      	lsls	r3, r3, #5
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d205      	bcs.n	8003d92 <LPTIM1_callback+0x1ae>

			depressed_num++;
 8003d86:	4b53      	ldr	r3, [pc, #332]	@ (8003ed4 <LPTIM1_callback+0x2f0>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	4b51      	ldr	r3, [pc, #324]	@ (8003ed4 <LPTIM1_callback+0x2f0>)
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	e023      	b.n	8003dda <LPTIM1_callback+0x1f6>
		else{

			//enter PRESET SAVE MODE

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003d92:	2380      	movs	r3, #128	@ 0x80
 8003d94:	0099      	lsls	r1, r3, #2
 8003d96:	23a0      	movs	r3, #160	@ 0xa0
 8003d98:	05db      	lsls	r3, r3, #23
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f004 fa70 	bl	8008282 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003da2:	4b4b      	ldr	r3, [pc, #300]	@ (8003ed0 <LPTIM1_callback+0x2ec>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	2140      	movs	r1, #64	@ 0x40
 8003da8:	0018      	movs	r0, r3
 8003daa:	f004 fa6a 	bl	8008282 <HAL_GPIO_WritePin>

			if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8003dae:	4b44      	ldr	r3, [pc, #272]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b05      	cmp	r3, #5
 8003db6:	d110      	bne.n	8003dda <LPTIM1_callback+0x1f6>

				union Speed_FSM_States curr_state = speed_fsm.current_state;
 8003db8:	210c      	movs	r1, #12
 8003dba:	187b      	adds	r3, r7, r1
 8003dbc:	4a40      	ldr	r2, [pc, #256]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003dbe:	7812      	ldrb	r2, [r2, #0]
 8003dc0:	701a      	strb	r2, [r3, #0]
				speed_fsm.current_state = speed_fsm.prev_state;
 8003dc2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003dc4:	4a3e      	ldr	r2, [pc, #248]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003dc6:	7852      	ldrb	r2, [r2, #1]
 8003dc8:	701a      	strb	r2, [r3, #0]
				speed_fsm.prev_state = curr_state;
 8003dca:	4b3d      	ldr	r3, [pc, #244]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003dcc:	187a      	adds	r2, r7, r1
 8003dce:	7812      	ldrb	r2, [r2, #0]
 8003dd0:	705a      	strb	r2, [r3, #1]
 8003dd2:	e002      	b.n	8003dda <LPTIM1_callback+0x1f6>
			}
		}
	}
	else{

		depressed_num = 0;
 8003dd4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ed4 <LPTIM1_callback+0x2f0>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
	}

	//CHECK FOR SPEED POT CHANGES
	if(Get_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out) == YES){
 8003dda:	2380      	movs	r3, #128	@ 0x80
 8003ddc:	011a      	lsls	r2, r3, #4
 8003dde:	4b3a      	ldr	r3, [pc, #232]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003de0:	0011      	movs	r1, r2
 8003de2:	0018      	movs	r0, r3
 8003de4:	f002 f98a 	bl	80060fc <Get_Status_Bit>
 8003de8:	0003      	movs	r3, r0
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d000      	beq.n	8003df0 <LPTIM1_callback+0x20c>
 8003dee:	e0d4      	b.n	8003f9a <LPTIM1_callback+0x3b6>

		Clear_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8003df0:	2380      	movs	r3, #128	@ 0x80
 8003df2:	011a      	lsls	r2, r3, #4
 8003df4:	4b34      	ldr	r3, [pc, #208]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003df6:	0011      	movs	r1, r2
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f002 f9a5 	bl	8006148 <Clear_Status_Bit>

		pots_counter = 0;
 8003dfe:	4b36      	ldr	r3, [pc, #216]	@ (8003ed8 <LPTIM1_callback+0x2f4>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	701a      	strb	r2, [r3, #0]

		//PERFORM SPEED POT CHECKING
		if((speed_fsm.current_state.shared_state == PC_MODE) || (speed_fsm.current_state.shared_state == CC_MODE)){
 8003e04:	4b2e      	ldr	r3, [pc, #184]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d004      	beq.n	8003e18 <LPTIM1_callback+0x234>
 8003e0e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d105      	bne.n	8003e24 <LPTIM1_callback+0x240>

			Pot_Check(ADCResultsDMA, SPEED_POT);
 8003e18:	4b30      	ldr	r3, [pc, #192]	@ (8003edc <LPTIM1_callback+0x2f8>)
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f7fd facb 	bl	80013b8 <Pot_Check>
 8003e22:	e07d      	b.n	8003f20 <LPTIM1_callback+0x33c>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003e24:	4b26      	ldr	r3, [pc, #152]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b06      	cmp	r3, #6
 8003e2c:	d117      	bne.n	8003e5e <LPTIM1_callback+0x27a>
 8003e2e:	4b25      	ldr	r3, [pc, #148]	@ (8003ec4 <LPTIM1_callback+0x2e0>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d112      	bne.n	8003e5e <LPTIM1_callback+0x27a>

			Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003e38:	4b23      	ldr	r3, [pc, #140]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003e3a:	2140      	movs	r1, #64	@ 0x40
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f002 f971 	bl	8006124 <Set_Status_Bit>

			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003e42:	4b21      	ldr	r3, [pc, #132]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003e44:	2120      	movs	r1, #32
 8003e46:	0018      	movs	r0, r3
 8003e48:	f002 f958 	bl	80060fc <Get_Status_Bit>
 8003e4c:	0003      	movs	r3, r0
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d166      	bne.n	8003f20 <LPTIM1_callback+0x33c>

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003e52:	4b22      	ldr	r3, [pc, #136]	@ (8003edc <LPTIM1_callback+0x2f8>)
 8003e54:	2101      	movs	r1, #1
 8003e56:	0018      	movs	r0, r3
 8003e58:	f7fd faae 	bl	80013b8 <Pot_Check>
			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003e5c:	e060      	b.n	8003f20 <LPTIM1_callback+0x33c>
			}
		}
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003e5e:	4b18      	ldr	r3, [pc, #96]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d13f      	bne.n	8003ee8 <LPTIM1_callback+0x304>
 8003e68:	4b16      	ldr	r3, [pc, #88]	@ (8003ec4 <LPTIM1_callback+0x2e0>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d13a      	bne.n	8003ee8 <LPTIM1_callback+0x304>

			Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003e72:	4b15      	ldr	r3, [pc, #84]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003e74:	2140      	movs	r1, #64	@ 0x40
 8003e76:	0018      	movs	r0, r3
 8003e78:	f002 f954 	bl	8006124 <Set_Status_Bit>

			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003e7c:	4b12      	ldr	r3, [pc, #72]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003e7e:	2120      	movs	r1, #32
 8003e80:	0018      	movs	r0, r3
 8003e82:	f002 f93b 	bl	80060fc <Get_Status_Bit>
 8003e86:	0003      	movs	r3, r0
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d149      	bne.n	8003f20 <LPTIM1_callback+0x33c>

				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003e8c:	2380      	movs	r3, #128	@ 0x80
 8003e8e:	0099      	lsls	r1, r3, #2
 8003e90:	23a0      	movs	r3, #160	@ 0xa0
 8003e92:	05db      	lsls	r3, r3, #23
 8003e94:	2201      	movs	r2, #1
 8003e96:	0018      	movs	r0, r3
 8003e98:	f004 f9f3 	bl	8008282 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed0 <LPTIM1_callback+0x2ec>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2140      	movs	r1, #64	@ 0x40
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f004 f9ed 	bl	8008282 <HAL_GPIO_WritePin>

				MIDI_CLK_fsm = NOT_COMPILING;
 8003ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <LPTIM1_callback+0x2fc>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	701a      	strb	r2, [r3, #0]
				MIDI_CLK_tag = 0;
 8003eae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee4 <LPTIM1_callback+0x300>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	701a      	strb	r2, [r3, #0]

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003eb4:	4b09      	ldr	r3, [pc, #36]	@ (8003edc <LPTIM1_callback+0x2f8>)
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f7fd fa7d 	bl	80013b8 <Pot_Check>
			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003ebe:	e02f      	b.n	8003f20 <LPTIM1_callback+0x33c>
 8003ec0:	20000430 	.word	0x20000430
 8003ec4:	20000444 	.word	0x20000444
 8003ec8:	20000c38 	.word	0x20000c38
 8003ecc:	20000c28 	.word	0x20000c28
 8003ed0:	50000800 	.word	0x50000800
 8003ed4:	20000c2c 	.word	0x20000c2c
 8003ed8:	200004e2 	.word	0x200004e2
 8003edc:	20000c44 	.word	0x20000c44
 8003ee0:	20000ce0 	.word	0x20000ce0
 8003ee4:	20000c36 	.word	0x20000c36
			}
		}
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003ee8:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd8 <LPTIM1_callback+0x3f4>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d116      	bne.n	8003f20 <LPTIM1_callback+0x33c>
 8003ef2:	4b3a      	ldr	r3, [pc, #232]	@ (8003fdc <LPTIM1_callback+0x3f8>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d111      	bne.n	8003f20 <LPTIM1_callback+0x33c>

			Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003efc:	4b38      	ldr	r3, [pc, #224]	@ (8003fe0 <LPTIM1_callback+0x3fc>)
 8003efe:	2140      	movs	r1, #64	@ 0x40
 8003f00:	0018      	movs	r0, r3
 8003f02:	f002 f90f 	bl	8006124 <Set_Status_Bit>

			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003f06:	4b36      	ldr	r3, [pc, #216]	@ (8003fe0 <LPTIM1_callback+0x3fc>)
 8003f08:	2120      	movs	r1, #32
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f002 f8f6 	bl	80060fc <Get_Status_Bit>
 8003f10:	0003      	movs	r3, r0
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d104      	bne.n	8003f20 <LPTIM1_callback+0x33c>

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003f16:	4b33      	ldr	r3, [pc, #204]	@ (8003fe4 <LPTIM1_callback+0x400>)
 8003f18:	2101      	movs	r1, #1
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f7fd fa4c 	bl	80013b8 <Pot_Check>
			}
		}

		if((waveshape_fsm.current_state == PC_MODE) || (waveshape_fsm.current_state == CC_MODE)){
 8003f20:	4b31      	ldr	r3, [pc, #196]	@ (8003fe8 <LPTIM1_callback+0x404>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d004      	beq.n	8003f34 <LPTIM1_callback+0x350>
 8003f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003fe8 <LPTIM1_callback+0x404>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d104      	bne.n	8003f3e <LPTIM1_callback+0x35a>
			Pot_Check(ADCResultsDMA, WAVESHAPE_POT);
 8003f34:	4b2b      	ldr	r3, [pc, #172]	@ (8003fe4 <LPTIM1_callback+0x400>)
 8003f36:	2100      	movs	r1, #0
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f7fd fa3d 	bl	80013b8 <Pot_Check>
		}
		if((depth_fsm.current_state == PC_MODE) || (depth_fsm.current_state == CC_MODE)){
 8003f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8003fec <LPTIM1_callback+0x408>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d004      	beq.n	8003f52 <LPTIM1_callback+0x36e>
 8003f48:	4b28      	ldr	r3, [pc, #160]	@ (8003fec <LPTIM1_callback+0x408>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d104      	bne.n	8003f5c <LPTIM1_callback+0x378>
			Pot_Check(ADCResultsDMA, DEPTH_POT);
 8003f52:	4b24      	ldr	r3, [pc, #144]	@ (8003fe4 <LPTIM1_callback+0x400>)
 8003f54:	2102      	movs	r1, #2
 8003f56:	0018      	movs	r0, r3
 8003f58:	f7fd fa2e 	bl	80013b8 <Pot_Check>
		}
		if((symmetry_fsm.current_state == PC_MODE) || (symmetry_fsm.current_state == CC_MODE)){
 8003f5c:	4b24      	ldr	r3, [pc, #144]	@ (8003ff0 <LPTIM1_callback+0x40c>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d004      	beq.n	8003f70 <LPTIM1_callback+0x38c>
 8003f66:	4b22      	ldr	r3, [pc, #136]	@ (8003ff0 <LPTIM1_callback+0x40c>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d104      	bne.n	8003f7a <LPTIM1_callback+0x396>
			Pot_Check(ADCResultsDMA, SYMMETRY_POT);
 8003f70:	4b1c      	ldr	r3, [pc, #112]	@ (8003fe4 <LPTIM1_callback+0x400>)
 8003f72:	2103      	movs	r1, #3
 8003f74:	0018      	movs	r0, r3
 8003f76:	f7fd fa1f 	bl	80013b8 <Pot_Check>
		}
		if((phase_fsm.current_state == PC_MODE) || (phase_fsm.current_state == CC_MODE)){
 8003f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ff4 <LPTIM1_callback+0x410>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d004      	beq.n	8003f8e <LPTIM1_callback+0x3aa>
 8003f84:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff4 <LPTIM1_callback+0x410>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d119      	bne.n	8003fc2 <LPTIM1_callback+0x3de>
			Pot_Check(ADCResultsDMA, PHASE_POT);
 8003f8e:	4b15      	ldr	r3, [pc, #84]	@ (8003fe4 <LPTIM1_callback+0x400>)
 8003f90:	2104      	movs	r1, #4
 8003f92:	0018      	movs	r0, r3
 8003f94:	f7fd fa10 	bl	80013b8 <Pot_Check>
 8003f98:	e013      	b.n	8003fc2 <LPTIM1_callback+0x3de>
		}

	}
	else{

		if(pots_counter == POT_COUNTER_COUNT){
 8003f9a:	4b17      	ldr	r3, [pc, #92]	@ (8003ff8 <LPTIM1_callback+0x414>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b40      	cmp	r3, #64	@ 0x40
 8003fa2:	d107      	bne.n	8003fb4 <LPTIM1_callback+0x3d0>

			Set_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8003fa4:	2380      	movs	r3, #128	@ 0x80
 8003fa6:	011a      	lsls	r2, r3, #4
 8003fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe0 <LPTIM1_callback+0x3fc>)
 8003faa:	0011      	movs	r1, r2
 8003fac:	0018      	movs	r0, r3
 8003fae:	f002 f8b9 	bl	8006124 <Set_Status_Bit>
 8003fb2:	e006      	b.n	8003fc2 <LPTIM1_callback+0x3de>
		}
		else{

			pots_counter++;
 8003fb4:	4b10      	ldr	r3, [pc, #64]	@ (8003ff8 <LPTIM1_callback+0x414>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	3301      	adds	r3, #1
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff8 <LPTIM1_callback+0x414>)
 8003fc0:	701a      	strb	r2, [r3, #0]
		}
	}

	//SET TIMER TRIGGER
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8003fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003ffc <LPTIM1_callback+0x418>)
 8003fc4:	22fa      	movs	r2, #250	@ 0xfa
 8003fc6:	21fa      	movs	r1, #250	@ 0xfa
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f004 fa51 	bl	8008470 <HAL_LPTIM_SetOnce_Start_IT>

}
 8003fce:	46c0      	nop			@ (mov r8, r8)
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	b004      	add	sp, #16
 8003fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8003fd6:	46c0      	nop			@ (mov r8, r8)
 8003fd8:	20000430 	.word	0x20000430
 8003fdc:	20000444 	.word	0x20000444
 8003fe0:	20000c38 	.word	0x20000c38
 8003fe4:	20000c44 	.word	0x20000c44
 8003fe8:	20000438 	.word	0x20000438
 8003fec:	20000434 	.word	0x20000434
 8003ff0:	2000043c 	.word	0x2000043c
 8003ff4:	20000440 	.word	0x20000440
 8003ff8:	200004e2 	.word	0x200004e2
 8003ffc:	20000bcc 	.word	0x20000bcc

08004000 <TIM17_callback>:

void TIM17_callback(TIM_HandleTypeDef *htim){
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]


}
 8004008:	46c0      	nop			@ (mov r8, r8)
 800400a:	46bd      	mov	sp, r7
 800400c:	b002      	add	sp, #8
 800400e:	bd80      	pop	{r7, pc}

08004010 <TIM14_callback>:

void TIM14_callback(TIM_HandleTypeDef *htim){
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]

	if(LED_fsm.current_state == LED_ON){
 8004018:	4bd8      	ldr	r3, [pc, #864]	@ (800437c <TIM14_callback+0x36c>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d106      	bne.n	8004030 <TIM14_callback+0x20>

		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004022:	4bd7      	ldr	r3, [pc, #860]	@ (8004380 <TIM14_callback+0x370>)
 8004024:	2201      	movs	r2, #1
 8004026:	2140      	movs	r1, #64	@ 0x40
 8004028:	0018      	movs	r0, r3
 800402a:	f004 f92a 	bl	8008282 <HAL_GPIO_WritePin>

				set_LED_to_state(&LED_fsm, prev);
			}
		}
	}
}
 800402e:	e28f      	b.n	8004550 <TIM14_callback+0x540>
	else if(LED_fsm.current_state == LED_OFF){
 8004030:	4bd2      	ldr	r3, [pc, #840]	@ (800437c <TIM14_callback+0x36c>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b01      	cmp	r3, #1
 8004038:	d106      	bne.n	8004048 <TIM14_callback+0x38>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800403a:	4bd1      	ldr	r3, [pc, #836]	@ (8004380 <TIM14_callback+0x370>)
 800403c:	2200      	movs	r2, #0
 800403e:	2140      	movs	r1, #64	@ 0x40
 8004040:	0018      	movs	r0, r3
 8004042:	f004 f91e 	bl	8008282 <HAL_GPIO_WritePin>
}
 8004046:	e283      	b.n	8004550 <TIM14_callback+0x540>
	else if(LED_fsm.current_state == LED_ONE_BLINK){
 8004048:	4bcc      	ldr	r3, [pc, #816]	@ (800437c <TIM14_callback+0x36c>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b03      	cmp	r3, #3
 8004050:	d133      	bne.n	80040ba <TIM14_callback+0xaa>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004052:	4bcc      	ldr	r3, [pc, #816]	@ (8004384 <TIM14_callback+0x374>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2200      	movs	r2, #0
 8004058:	625a      	str	r2, [r3, #36]	@ 0x24
		if(LED_counter == 0){
 800405a:	4bcb      	ldr	r3, [pc, #812]	@ (8004388 <TIM14_callback+0x378>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10d      	bne.n	8004080 <TIM14_callback+0x70>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004064:	4bc6      	ldr	r3, [pc, #792]	@ (8004380 <TIM14_callback+0x370>)
 8004066:	2201      	movs	r2, #1
 8004068:	2140      	movs	r1, #64	@ 0x40
 800406a:	0018      	movs	r0, r3
 800406c:	f004 f909 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 8004070:	4bc5      	ldr	r3, [pc, #788]	@ (8004388 <TIM14_callback+0x378>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	3301      	adds	r3, #1
 8004078:	b2da      	uxtb	r2, r3
 800407a:	4bc3      	ldr	r3, [pc, #780]	@ (8004388 <TIM14_callback+0x378>)
 800407c:	701a      	strb	r2, [r3, #0]
}
 800407e:	e267      	b.n	8004550 <TIM14_callback+0x540>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 1)){
 8004080:	4bc1      	ldr	r3, [pc, #772]	@ (8004388 <TIM14_callback+0x378>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b04      	cmp	r3, #4
 8004088:	d900      	bls.n	800408c <TIM14_callback+0x7c>
 800408a:	e261      	b.n	8004550 <TIM14_callback+0x540>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800408c:	4bbc      	ldr	r3, [pc, #752]	@ (8004380 <TIM14_callback+0x370>)
 800408e:	2200      	movs	r2, #0
 8004090:	2140      	movs	r1, #64	@ 0x40
 8004092:	0018      	movs	r0, r3
 8004094:	f004 f8f5 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 8004098:	4bbb      	ldr	r3, [pc, #748]	@ (8004388 <TIM14_callback+0x378>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	3301      	adds	r3, #1
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	4bb9      	ldr	r3, [pc, #740]	@ (8004388 <TIM14_callback+0x378>)
 80040a4:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 1){
 80040a6:	4bb8      	ldr	r3, [pc, #736]	@ (8004388 <TIM14_callback+0x378>)
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b05      	cmp	r3, #5
 80040ae:	d000      	beq.n	80040b2 <TIM14_callback+0xa2>
 80040b0:	e24e      	b.n	8004550 <TIM14_callback+0x540>
				LED_counter = 0;
 80040b2:	4bb5      	ldr	r3, [pc, #724]	@ (8004388 <TIM14_callback+0x378>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
}
 80040b8:	e24a      	b.n	8004550 <TIM14_callback+0x540>
	else if(LED_fsm.current_state == LED_TWO_BLINK){
 80040ba:	4bb0      	ldr	r3, [pc, #704]	@ (800437c <TIM14_callback+0x36c>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d159      	bne.n	8004178 <TIM14_callback+0x168>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 80040c4:	4baf      	ldr	r3, [pc, #700]	@ (8004384 <TIM14_callback+0x374>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2200      	movs	r2, #0
 80040ca:	625a      	str	r2, [r3, #36]	@ 0x24
		if(LED_counter == 0){
 80040cc:	4bae      	ldr	r3, [pc, #696]	@ (8004388 <TIM14_callback+0x378>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10d      	bne.n	80040f2 <TIM14_callback+0xe2>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80040d6:	4baa      	ldr	r3, [pc, #680]	@ (8004380 <TIM14_callback+0x370>)
 80040d8:	2201      	movs	r2, #1
 80040da:	2140      	movs	r1, #64	@ 0x40
 80040dc:	0018      	movs	r0, r3
 80040de:	f004 f8d0 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 80040e2:	4ba9      	ldr	r3, [pc, #676]	@ (8004388 <TIM14_callback+0x378>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	3301      	adds	r3, #1
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	4ba6      	ldr	r3, [pc, #664]	@ (8004388 <TIM14_callback+0x378>)
 80040ee:	701a      	strb	r2, [r3, #0]
}
 80040f0:	e22e      	b.n	8004550 <TIM14_callback+0x540>
		else if(LED_counter == 1){
 80040f2:	4ba5      	ldr	r3, [pc, #660]	@ (8004388 <TIM14_callback+0x378>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d10d      	bne.n	8004118 <TIM14_callback+0x108>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80040fc:	4ba0      	ldr	r3, [pc, #640]	@ (8004380 <TIM14_callback+0x370>)
 80040fe:	2200      	movs	r2, #0
 8004100:	2140      	movs	r1, #64	@ 0x40
 8004102:	0018      	movs	r0, r3
 8004104:	f004 f8bd 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 8004108:	4b9f      	ldr	r3, [pc, #636]	@ (8004388 <TIM14_callback+0x378>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	b2db      	uxtb	r3, r3
 800410e:	3301      	adds	r3, #1
 8004110:	b2da      	uxtb	r2, r3
 8004112:	4b9d      	ldr	r3, [pc, #628]	@ (8004388 <TIM14_callback+0x378>)
 8004114:	701a      	strb	r2, [r3, #0]
}
 8004116:	e21b      	b.n	8004550 <TIM14_callback+0x540>
		else if(LED_counter == 2){
 8004118:	4b9b      	ldr	r3, [pc, #620]	@ (8004388 <TIM14_callback+0x378>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d10d      	bne.n	800413e <TIM14_callback+0x12e>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004122:	4b97      	ldr	r3, [pc, #604]	@ (8004380 <TIM14_callback+0x370>)
 8004124:	2201      	movs	r2, #1
 8004126:	2140      	movs	r1, #64	@ 0x40
 8004128:	0018      	movs	r0, r3
 800412a:	f004 f8aa 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 800412e:	4b96      	ldr	r3, [pc, #600]	@ (8004388 <TIM14_callback+0x378>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	3301      	adds	r3, #1
 8004136:	b2da      	uxtb	r2, r3
 8004138:	4b93      	ldr	r3, [pc, #588]	@ (8004388 <TIM14_callback+0x378>)
 800413a:	701a      	strb	r2, [r3, #0]
}
 800413c:	e208      	b.n	8004550 <TIM14_callback+0x540>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 3)){
 800413e:	4b92      	ldr	r3, [pc, #584]	@ (8004388 <TIM14_callback+0x378>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b06      	cmp	r3, #6
 8004146:	d900      	bls.n	800414a <TIM14_callback+0x13a>
 8004148:	e202      	b.n	8004550 <TIM14_callback+0x540>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800414a:	4b8d      	ldr	r3, [pc, #564]	@ (8004380 <TIM14_callback+0x370>)
 800414c:	2200      	movs	r2, #0
 800414e:	2140      	movs	r1, #64	@ 0x40
 8004150:	0018      	movs	r0, r3
 8004152:	f004 f896 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 8004156:	4b8c      	ldr	r3, [pc, #560]	@ (8004388 <TIM14_callback+0x378>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	3301      	adds	r3, #1
 800415e:	b2da      	uxtb	r2, r3
 8004160:	4b89      	ldr	r3, [pc, #548]	@ (8004388 <TIM14_callback+0x378>)
 8004162:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 3){
 8004164:	4b88      	ldr	r3, [pc, #544]	@ (8004388 <TIM14_callback+0x378>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b07      	cmp	r3, #7
 800416c:	d000      	beq.n	8004170 <TIM14_callback+0x160>
 800416e:	e1ef      	b.n	8004550 <TIM14_callback+0x540>
				LED_counter = 0;
 8004170:	4b85      	ldr	r3, [pc, #532]	@ (8004388 <TIM14_callback+0x378>)
 8004172:	2200      	movs	r2, #0
 8004174:	701a      	strb	r2, [r3, #0]
}
 8004176:	e1eb      	b.n	8004550 <TIM14_callback+0x540>
	else if(LED_fsm.current_state == LED_THREE_BLINK){
 8004178:	4b80      	ldr	r3, [pc, #512]	@ (800437c <TIM14_callback+0x36c>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b05      	cmp	r3, #5
 8004180:	d000      	beq.n	8004184 <TIM14_callback+0x174>
 8004182:	e07f      	b.n	8004284 <TIM14_callback+0x274>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004184:	4b7f      	ldr	r3, [pc, #508]	@ (8004384 <TIM14_callback+0x374>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2200      	movs	r2, #0
 800418a:	625a      	str	r2, [r3, #36]	@ 0x24
		if(LED_counter == 0){
 800418c:	4b7e      	ldr	r3, [pc, #504]	@ (8004388 <TIM14_callback+0x378>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10d      	bne.n	80041b2 <TIM14_callback+0x1a2>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004196:	4b7a      	ldr	r3, [pc, #488]	@ (8004380 <TIM14_callback+0x370>)
 8004198:	2201      	movs	r2, #1
 800419a:	2140      	movs	r1, #64	@ 0x40
 800419c:	0018      	movs	r0, r3
 800419e:	f004 f870 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 80041a2:	4b79      	ldr	r3, [pc, #484]	@ (8004388 <TIM14_callback+0x378>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	3301      	adds	r3, #1
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	4b76      	ldr	r3, [pc, #472]	@ (8004388 <TIM14_callback+0x378>)
 80041ae:	701a      	strb	r2, [r3, #0]
}
 80041b0:	e1ce      	b.n	8004550 <TIM14_callback+0x540>
		else if(LED_counter == 1){
 80041b2:	4b75      	ldr	r3, [pc, #468]	@ (8004388 <TIM14_callback+0x378>)
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d10d      	bne.n	80041d8 <TIM14_callback+0x1c8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80041bc:	4b70      	ldr	r3, [pc, #448]	@ (8004380 <TIM14_callback+0x370>)
 80041be:	2200      	movs	r2, #0
 80041c0:	2140      	movs	r1, #64	@ 0x40
 80041c2:	0018      	movs	r0, r3
 80041c4:	f004 f85d 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 80041c8:	4b6f      	ldr	r3, [pc, #444]	@ (8004388 <TIM14_callback+0x378>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	3301      	adds	r3, #1
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004388 <TIM14_callback+0x378>)
 80041d4:	701a      	strb	r2, [r3, #0]
}
 80041d6:	e1bb      	b.n	8004550 <TIM14_callback+0x540>
		else if(LED_counter == 2){
 80041d8:	4b6b      	ldr	r3, [pc, #428]	@ (8004388 <TIM14_callback+0x378>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d10d      	bne.n	80041fe <TIM14_callback+0x1ee>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80041e2:	4b67      	ldr	r3, [pc, #412]	@ (8004380 <TIM14_callback+0x370>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	2140      	movs	r1, #64	@ 0x40
 80041e8:	0018      	movs	r0, r3
 80041ea:	f004 f84a 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 80041ee:	4b66      	ldr	r3, [pc, #408]	@ (8004388 <TIM14_callback+0x378>)
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	3301      	adds	r3, #1
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	4b63      	ldr	r3, [pc, #396]	@ (8004388 <TIM14_callback+0x378>)
 80041fa:	701a      	strb	r2, [r3, #0]
}
 80041fc:	e1a8      	b.n	8004550 <TIM14_callback+0x540>
		else if(LED_counter == 3){
 80041fe:	4b62      	ldr	r3, [pc, #392]	@ (8004388 <TIM14_callback+0x378>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b03      	cmp	r3, #3
 8004206:	d10d      	bne.n	8004224 <TIM14_callback+0x214>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004208:	4b5d      	ldr	r3, [pc, #372]	@ (8004380 <TIM14_callback+0x370>)
 800420a:	2200      	movs	r2, #0
 800420c:	2140      	movs	r1, #64	@ 0x40
 800420e:	0018      	movs	r0, r3
 8004210:	f004 f837 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 8004214:	4b5c      	ldr	r3, [pc, #368]	@ (8004388 <TIM14_callback+0x378>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	3301      	adds	r3, #1
 800421c:	b2da      	uxtb	r2, r3
 800421e:	4b5a      	ldr	r3, [pc, #360]	@ (8004388 <TIM14_callback+0x378>)
 8004220:	701a      	strb	r2, [r3, #0]
}
 8004222:	e195      	b.n	8004550 <TIM14_callback+0x540>
		else if(LED_counter == 4){
 8004224:	4b58      	ldr	r3, [pc, #352]	@ (8004388 <TIM14_callback+0x378>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b04      	cmp	r3, #4
 800422c:	d10d      	bne.n	800424a <TIM14_callback+0x23a>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800422e:	4b54      	ldr	r3, [pc, #336]	@ (8004380 <TIM14_callback+0x370>)
 8004230:	2201      	movs	r2, #1
 8004232:	2140      	movs	r1, #64	@ 0x40
 8004234:	0018      	movs	r0, r3
 8004236:	f004 f824 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 800423a:	4b53      	ldr	r3, [pc, #332]	@ (8004388 <TIM14_callback+0x378>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	3301      	adds	r3, #1
 8004242:	b2da      	uxtb	r2, r3
 8004244:	4b50      	ldr	r3, [pc, #320]	@ (8004388 <TIM14_callback+0x378>)
 8004246:	701a      	strb	r2, [r3, #0]
}
 8004248:	e182      	b.n	8004550 <TIM14_callback+0x540>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 5)){
 800424a:	4b4f      	ldr	r3, [pc, #316]	@ (8004388 <TIM14_callback+0x378>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b08      	cmp	r3, #8
 8004252:	d900      	bls.n	8004256 <TIM14_callback+0x246>
 8004254:	e17c      	b.n	8004550 <TIM14_callback+0x540>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004256:	4b4a      	ldr	r3, [pc, #296]	@ (8004380 <TIM14_callback+0x370>)
 8004258:	2200      	movs	r2, #0
 800425a:	2140      	movs	r1, #64	@ 0x40
 800425c:	0018      	movs	r0, r3
 800425e:	f004 f810 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 8004262:	4b49      	ldr	r3, [pc, #292]	@ (8004388 <TIM14_callback+0x378>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	b2db      	uxtb	r3, r3
 8004268:	3301      	adds	r3, #1
 800426a:	b2da      	uxtb	r2, r3
 800426c:	4b46      	ldr	r3, [pc, #280]	@ (8004388 <TIM14_callback+0x378>)
 800426e:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 5){
 8004270:	4b45      	ldr	r3, [pc, #276]	@ (8004388 <TIM14_callback+0x378>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b09      	cmp	r3, #9
 8004278:	d000      	beq.n	800427c <TIM14_callback+0x26c>
 800427a:	e169      	b.n	8004550 <TIM14_callback+0x540>
				LED_counter = 0;
 800427c:	4b42      	ldr	r3, [pc, #264]	@ (8004388 <TIM14_callback+0x378>)
 800427e:	2200      	movs	r2, #0
 8004280:	701a      	strb	r2, [r3, #0]
}
 8004282:	e165      	b.n	8004550 <TIM14_callback+0x540>
	else if(LED_fsm.current_state == LED_FOUR_BLINK){
 8004284:	4b3d      	ldr	r3, [pc, #244]	@ (800437c <TIM14_callback+0x36c>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b06      	cmp	r3, #6
 800428c:	d000      	beq.n	8004290 <TIM14_callback+0x280>
 800428e:	e0ad      	b.n	80043ec <TIM14_callback+0x3dc>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004290:	4b3c      	ldr	r3, [pc, #240]	@ (8004384 <TIM14_callback+0x374>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2200      	movs	r2, #0
 8004296:	625a      	str	r2, [r3, #36]	@ 0x24
		if(LED_counter == 0){
 8004298:	4b3b      	ldr	r3, [pc, #236]	@ (8004388 <TIM14_callback+0x378>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10d      	bne.n	80042be <TIM14_callback+0x2ae>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80042a2:	4b37      	ldr	r3, [pc, #220]	@ (8004380 <TIM14_callback+0x370>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	2140      	movs	r1, #64	@ 0x40
 80042a8:	0018      	movs	r0, r3
 80042aa:	f003 ffea 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 80042ae:	4b36      	ldr	r3, [pc, #216]	@ (8004388 <TIM14_callback+0x378>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	3301      	adds	r3, #1
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	4b33      	ldr	r3, [pc, #204]	@ (8004388 <TIM14_callback+0x378>)
 80042ba:	701a      	strb	r2, [r3, #0]
}
 80042bc:	e148      	b.n	8004550 <TIM14_callback+0x540>
		else if(LED_counter == 1){
 80042be:	4b32      	ldr	r3, [pc, #200]	@ (8004388 <TIM14_callback+0x378>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d10d      	bne.n	80042e4 <TIM14_callback+0x2d4>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80042c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004380 <TIM14_callback+0x370>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	2140      	movs	r1, #64	@ 0x40
 80042ce:	0018      	movs	r0, r3
 80042d0:	f003 ffd7 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 80042d4:	4b2c      	ldr	r3, [pc, #176]	@ (8004388 <TIM14_callback+0x378>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	3301      	adds	r3, #1
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	4b2a      	ldr	r3, [pc, #168]	@ (8004388 <TIM14_callback+0x378>)
 80042e0:	701a      	strb	r2, [r3, #0]
}
 80042e2:	e135      	b.n	8004550 <TIM14_callback+0x540>
		else if(LED_counter == 2){
 80042e4:	4b28      	ldr	r3, [pc, #160]	@ (8004388 <TIM14_callback+0x378>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d10d      	bne.n	800430a <TIM14_callback+0x2fa>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80042ee:	4b24      	ldr	r3, [pc, #144]	@ (8004380 <TIM14_callback+0x370>)
 80042f0:	2201      	movs	r2, #1
 80042f2:	2140      	movs	r1, #64	@ 0x40
 80042f4:	0018      	movs	r0, r3
 80042f6:	f003 ffc4 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 80042fa:	4b23      	ldr	r3, [pc, #140]	@ (8004388 <TIM14_callback+0x378>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	3301      	adds	r3, #1
 8004302:	b2da      	uxtb	r2, r3
 8004304:	4b20      	ldr	r3, [pc, #128]	@ (8004388 <TIM14_callback+0x378>)
 8004306:	701a      	strb	r2, [r3, #0]
}
 8004308:	e122      	b.n	8004550 <TIM14_callback+0x540>
		else if(LED_counter == 3){
 800430a:	4b1f      	ldr	r3, [pc, #124]	@ (8004388 <TIM14_callback+0x378>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b03      	cmp	r3, #3
 8004312:	d10d      	bne.n	8004330 <TIM14_callback+0x320>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004314:	4b1a      	ldr	r3, [pc, #104]	@ (8004380 <TIM14_callback+0x370>)
 8004316:	2200      	movs	r2, #0
 8004318:	2140      	movs	r1, #64	@ 0x40
 800431a:	0018      	movs	r0, r3
 800431c:	f003 ffb1 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 8004320:	4b19      	ldr	r3, [pc, #100]	@ (8004388 <TIM14_callback+0x378>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	3301      	adds	r3, #1
 8004328:	b2da      	uxtb	r2, r3
 800432a:	4b17      	ldr	r3, [pc, #92]	@ (8004388 <TIM14_callback+0x378>)
 800432c:	701a      	strb	r2, [r3, #0]
}
 800432e:	e10f      	b.n	8004550 <TIM14_callback+0x540>
		else if(LED_counter == 4){
 8004330:	4b15      	ldr	r3, [pc, #84]	@ (8004388 <TIM14_callback+0x378>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b04      	cmp	r3, #4
 8004338:	d10d      	bne.n	8004356 <TIM14_callback+0x346>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800433a:	4b11      	ldr	r3, [pc, #68]	@ (8004380 <TIM14_callback+0x370>)
 800433c:	2201      	movs	r2, #1
 800433e:	2140      	movs	r1, #64	@ 0x40
 8004340:	0018      	movs	r0, r3
 8004342:	f003 ff9e 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 8004346:	4b10      	ldr	r3, [pc, #64]	@ (8004388 <TIM14_callback+0x378>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	b2db      	uxtb	r3, r3
 800434c:	3301      	adds	r3, #1
 800434e:	b2da      	uxtb	r2, r3
 8004350:	4b0d      	ldr	r3, [pc, #52]	@ (8004388 <TIM14_callback+0x378>)
 8004352:	701a      	strb	r2, [r3, #0]
}
 8004354:	e0fc      	b.n	8004550 <TIM14_callback+0x540>
		else if(LED_counter == 5){
 8004356:	4b0c      	ldr	r3, [pc, #48]	@ (8004388 <TIM14_callback+0x378>)
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b05      	cmp	r3, #5
 800435e:	d115      	bne.n	800438c <TIM14_callback+0x37c>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004360:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <TIM14_callback+0x370>)
 8004362:	2200      	movs	r2, #0
 8004364:	2140      	movs	r1, #64	@ 0x40
 8004366:	0018      	movs	r0, r3
 8004368:	f003 ff8b 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 800436c:	4b06      	ldr	r3, [pc, #24]	@ (8004388 <TIM14_callback+0x378>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	3301      	adds	r3, #1
 8004374:	b2da      	uxtb	r2, r3
 8004376:	4b04      	ldr	r3, [pc, #16]	@ (8004388 <TIM14_callback+0x378>)
 8004378:	701a      	strb	r2, [r3, #0]
}
 800437a:	e0e9      	b.n	8004550 <TIM14_callback+0x540>
 800437c:	20000448 	.word	0x20000448
 8004380:	50000800 	.word	0x50000800
 8004384:	200005e0 	.word	0x200005e0
 8004388:	200004c9 	.word	0x200004c9
		else if(LED_counter == 6){
 800438c:	4b72      	ldr	r3, [pc, #456]	@ (8004558 <TIM14_callback+0x548>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b06      	cmp	r3, #6
 8004394:	d10d      	bne.n	80043b2 <TIM14_callback+0x3a2>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004396:	4b71      	ldr	r3, [pc, #452]	@ (800455c <TIM14_callback+0x54c>)
 8004398:	2201      	movs	r2, #1
 800439a:	2140      	movs	r1, #64	@ 0x40
 800439c:	0018      	movs	r0, r3
 800439e:	f003 ff70 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 80043a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004558 <TIM14_callback+0x548>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	3301      	adds	r3, #1
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004558 <TIM14_callback+0x548>)
 80043ae:	701a      	strb	r2, [r3, #0]
}
 80043b0:	e0ce      	b.n	8004550 <TIM14_callback+0x540>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 80043b2:	4b69      	ldr	r3, [pc, #420]	@ (8004558 <TIM14_callback+0x548>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b0a      	cmp	r3, #10
 80043ba:	d900      	bls.n	80043be <TIM14_callback+0x3ae>
 80043bc:	e0c8      	b.n	8004550 <TIM14_callback+0x540>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80043be:	4b67      	ldr	r3, [pc, #412]	@ (800455c <TIM14_callback+0x54c>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	2140      	movs	r1, #64	@ 0x40
 80043c4:	0018      	movs	r0, r3
 80043c6:	f003 ff5c 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 80043ca:	4b63      	ldr	r3, [pc, #396]	@ (8004558 <TIM14_callback+0x548>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	3301      	adds	r3, #1
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	4b60      	ldr	r3, [pc, #384]	@ (8004558 <TIM14_callback+0x548>)
 80043d6:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 7){
 80043d8:	4b5f      	ldr	r3, [pc, #380]	@ (8004558 <TIM14_callback+0x548>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b0b      	cmp	r3, #11
 80043e0:	d000      	beq.n	80043e4 <TIM14_callback+0x3d4>
 80043e2:	e0b5      	b.n	8004550 <TIM14_callback+0x540>
				LED_counter = 0;
 80043e4:	4b5c      	ldr	r3, [pc, #368]	@ (8004558 <TIM14_callback+0x548>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	701a      	strb	r2, [r3, #0]
}
 80043ea:	e0b1      	b.n	8004550 <TIM14_callback+0x540>
	else if(LED_fsm.current_state == LED_CONFIRM){
 80043ec:	4b5c      	ldr	r3, [pc, #368]	@ (8004560 <TIM14_callback+0x550>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b07      	cmp	r3, #7
 80043f4:	d000      	beq.n	80043f8 <TIM14_callback+0x3e8>
 80043f6:	e0ab      	b.n	8004550 <TIM14_callback+0x540>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 80043f8:	4b5a      	ldr	r3, [pc, #360]	@ (8004564 <TIM14_callback+0x554>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2200      	movs	r2, #0
 80043fe:	625a      	str	r2, [r3, #36]	@ 0x24
		if(LED_counter == 0){
 8004400:	4b55      	ldr	r3, [pc, #340]	@ (8004558 <TIM14_callback+0x548>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10d      	bne.n	8004426 <TIM14_callback+0x416>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800440a:	4b54      	ldr	r3, [pc, #336]	@ (800455c <TIM14_callback+0x54c>)
 800440c:	2201      	movs	r2, #1
 800440e:	2140      	movs	r1, #64	@ 0x40
 8004410:	0018      	movs	r0, r3
 8004412:	f003 ff36 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 8004416:	4b50      	ldr	r3, [pc, #320]	@ (8004558 <TIM14_callback+0x548>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	3301      	adds	r3, #1
 800441e:	b2da      	uxtb	r2, r3
 8004420:	4b4d      	ldr	r3, [pc, #308]	@ (8004558 <TIM14_callback+0x548>)
 8004422:	701a      	strb	r2, [r3, #0]
}
 8004424:	e094      	b.n	8004550 <TIM14_callback+0x540>
		else if(LED_counter == 1){
 8004426:	4b4c      	ldr	r3, [pc, #304]	@ (8004558 <TIM14_callback+0x548>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b01      	cmp	r3, #1
 800442e:	d10d      	bne.n	800444c <TIM14_callback+0x43c>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004430:	4b4a      	ldr	r3, [pc, #296]	@ (800455c <TIM14_callback+0x54c>)
 8004432:	2200      	movs	r2, #0
 8004434:	2140      	movs	r1, #64	@ 0x40
 8004436:	0018      	movs	r0, r3
 8004438:	f003 ff23 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 800443c:	4b46      	ldr	r3, [pc, #280]	@ (8004558 <TIM14_callback+0x548>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	3301      	adds	r3, #1
 8004444:	b2da      	uxtb	r2, r3
 8004446:	4b44      	ldr	r3, [pc, #272]	@ (8004558 <TIM14_callback+0x548>)
 8004448:	701a      	strb	r2, [r3, #0]
}
 800444a:	e081      	b.n	8004550 <TIM14_callback+0x540>
		else if(LED_counter == 2){
 800444c:	4b42      	ldr	r3, [pc, #264]	@ (8004558 <TIM14_callback+0x548>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d10d      	bne.n	8004472 <TIM14_callback+0x462>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004456:	4b41      	ldr	r3, [pc, #260]	@ (800455c <TIM14_callback+0x54c>)
 8004458:	2201      	movs	r2, #1
 800445a:	2140      	movs	r1, #64	@ 0x40
 800445c:	0018      	movs	r0, r3
 800445e:	f003 ff10 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 8004462:	4b3d      	ldr	r3, [pc, #244]	@ (8004558 <TIM14_callback+0x548>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	3301      	adds	r3, #1
 800446a:	b2da      	uxtb	r2, r3
 800446c:	4b3a      	ldr	r3, [pc, #232]	@ (8004558 <TIM14_callback+0x548>)
 800446e:	701a      	strb	r2, [r3, #0]
}
 8004470:	e06e      	b.n	8004550 <TIM14_callback+0x540>
		else if(LED_counter == 3){
 8004472:	4b39      	ldr	r3, [pc, #228]	@ (8004558 <TIM14_callback+0x548>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b03      	cmp	r3, #3
 800447a:	d10d      	bne.n	8004498 <TIM14_callback+0x488>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800447c:	4b37      	ldr	r3, [pc, #220]	@ (800455c <TIM14_callback+0x54c>)
 800447e:	2200      	movs	r2, #0
 8004480:	2140      	movs	r1, #64	@ 0x40
 8004482:	0018      	movs	r0, r3
 8004484:	f003 fefd 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 8004488:	4b33      	ldr	r3, [pc, #204]	@ (8004558 <TIM14_callback+0x548>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	b2db      	uxtb	r3, r3
 800448e:	3301      	adds	r3, #1
 8004490:	b2da      	uxtb	r2, r3
 8004492:	4b31      	ldr	r3, [pc, #196]	@ (8004558 <TIM14_callback+0x548>)
 8004494:	701a      	strb	r2, [r3, #0]
}
 8004496:	e05b      	b.n	8004550 <TIM14_callback+0x540>
		else if(LED_counter == 4){
 8004498:	4b2f      	ldr	r3, [pc, #188]	@ (8004558 <TIM14_callback+0x548>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d10d      	bne.n	80044be <TIM14_callback+0x4ae>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80044a2:	4b2e      	ldr	r3, [pc, #184]	@ (800455c <TIM14_callback+0x54c>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	2140      	movs	r1, #64	@ 0x40
 80044a8:	0018      	movs	r0, r3
 80044aa:	f003 feea 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 80044ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004558 <TIM14_callback+0x548>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	3301      	adds	r3, #1
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	4b27      	ldr	r3, [pc, #156]	@ (8004558 <TIM14_callback+0x548>)
 80044ba:	701a      	strb	r2, [r3, #0]
}
 80044bc:	e048      	b.n	8004550 <TIM14_callback+0x540>
		else if(LED_counter == 5){
 80044be:	4b26      	ldr	r3, [pc, #152]	@ (8004558 <TIM14_callback+0x548>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b05      	cmp	r3, #5
 80044c6:	d10d      	bne.n	80044e4 <TIM14_callback+0x4d4>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80044c8:	4b24      	ldr	r3, [pc, #144]	@ (800455c <TIM14_callback+0x54c>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	2140      	movs	r1, #64	@ 0x40
 80044ce:	0018      	movs	r0, r3
 80044d0:	f003 fed7 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 80044d4:	4b20      	ldr	r3, [pc, #128]	@ (8004558 <TIM14_callback+0x548>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	3301      	adds	r3, #1
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	4b1e      	ldr	r3, [pc, #120]	@ (8004558 <TIM14_callback+0x548>)
 80044e0:	701a      	strb	r2, [r3, #0]
}
 80044e2:	e035      	b.n	8004550 <TIM14_callback+0x540>
		else if(LED_counter == 6){
 80044e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004558 <TIM14_callback+0x548>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b06      	cmp	r3, #6
 80044ec:	d10d      	bne.n	800450a <TIM14_callback+0x4fa>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80044ee:	4b1b      	ldr	r3, [pc, #108]	@ (800455c <TIM14_callback+0x54c>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	2140      	movs	r1, #64	@ 0x40
 80044f4:	0018      	movs	r0, r3
 80044f6:	f003 fec4 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 80044fa:	4b17      	ldr	r3, [pc, #92]	@ (8004558 <TIM14_callback+0x548>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	3301      	adds	r3, #1
 8004502:	b2da      	uxtb	r2, r3
 8004504:	4b14      	ldr	r3, [pc, #80]	@ (8004558 <TIM14_callback+0x548>)
 8004506:	701a      	strb	r2, [r3, #0]
}
 8004508:	e022      	b.n	8004550 <TIM14_callback+0x540>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 800450a:	4b13      	ldr	r3, [pc, #76]	@ (8004558 <TIM14_callback+0x548>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b0a      	cmp	r3, #10
 8004512:	d81d      	bhi.n	8004550 <TIM14_callback+0x540>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004514:	4b11      	ldr	r3, [pc, #68]	@ (800455c <TIM14_callback+0x54c>)
 8004516:	2200      	movs	r2, #0
 8004518:	2140      	movs	r1, #64	@ 0x40
 800451a:	0018      	movs	r0, r3
 800451c:	f003 feb1 	bl	8008282 <HAL_GPIO_WritePin>
			LED_counter++;
 8004520:	4b0d      	ldr	r3, [pc, #52]	@ (8004558 <TIM14_callback+0x548>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	3301      	adds	r3, #1
 8004528:	b2da      	uxtb	r2, r3
 800452a:	4b0b      	ldr	r3, [pc, #44]	@ (8004558 <TIM14_callback+0x548>)
 800452c:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 7){
 800452e:	4b0a      	ldr	r3, [pc, #40]	@ (8004558 <TIM14_callback+0x548>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b0b      	cmp	r3, #11
 8004536:	d10b      	bne.n	8004550 <TIM14_callback+0x540>
				enum LED_States prev = LED_fsm.prev_state;
 8004538:	210f      	movs	r1, #15
 800453a:	187b      	adds	r3, r7, r1
 800453c:	4a08      	ldr	r2, [pc, #32]	@ (8004560 <TIM14_callback+0x550>)
 800453e:	7852      	ldrb	r2, [r2, #1]
 8004540:	701a      	strb	r2, [r3, #0]
				set_LED_to_state(&LED_fsm, prev);
 8004542:	187b      	adds	r3, r7, r1
 8004544:	781a      	ldrb	r2, [r3, #0]
 8004546:	4b06      	ldr	r3, [pc, #24]	@ (8004560 <TIM14_callback+0x550>)
 8004548:	0011      	movs	r1, r2
 800454a:	0018      	movs	r0, r3
 800454c:	f7fc fc18 	bl	8000d80 <set_LED_to_state>
}
 8004550:	46c0      	nop			@ (mov r8, r8)
 8004552:	46bd      	mov	sp, r7
 8004554:	b004      	add	sp, #16
 8004556:	bd80      	pop	{r7, pc}
 8004558:	200004c9 	.word	0x200004c9
 800455c:	50000800 	.word	0x50000800
 8004560:	20000448 	.word	0x20000448
 8004564:	200005e0 	.word	0x200005e0

08004568 <Input_Capture_Processing>:
volatile uint32_t TIM2_ch1_input_capture_value;
volatile uint16_t interrupt_period = 0;
volatile uint8_t MIDI_CLK_tag = 0;

//FUNCTION DEFINITIONS
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params *params_ptr){
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	0002      	movs	r2, r0
 8004570:	6039      	str	r1, [r7, #0]
 8004572:	1dbb      	adds	r3, r7, #6
 8004574:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Clear_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started); //reset flag
 8004576:	4b34      	ldr	r3, [pc, #208]	@ (8004648 <Input_Capture_Processing+0xe0>)
 8004578:	2104      	movs	r1, #4
 800457a:	0018      	movs	r0, r3
 800457c:	f001 fde4 	bl	8006148 <Clear_Status_Bit>

	//DETERMINE WHAT TO SET THE RAW_START_VALUE AND BASE_PRESCALER TO BASED ON THE I/P CAPTURE VALUE
	//CHECK FOR PRIMALITY
	if(isPrime(interrupt_period_value) == YES){
 8004580:	1dbb      	adds	r3, r7, #6
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	b29b      	uxth	r3, r3
 8004586:	0018      	movs	r0, r3
 8004588:	f001 fd6d 	bl	8006066 <isPrime>
 800458c:	0003      	movs	r3, r0
 800458e:	2b01      	cmp	r3, #1
 8004590:	d106      	bne.n	80045a0 <Input_Capture_Processing+0x38>

		interrupt_period_value += 1;
 8004592:	1dbb      	adds	r3, r7, #6
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	3301      	adds	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	1dbb      	adds	r3, r7, #6
 800459e:	801a      	strh	r2, [r3, #0]
	}

	//START FINDING FACTORS
	uint32_t N = interrupt_period_value << 6; //calculate the N-value which is prescaler_meas * interrupt_period_meas. The measurement prescaler is used which is 64. (TIM2 has a prescaler of 64*512, but since we divide this value by 512, the prescaler is then just 64).
 80045a0:	1dbb      	adds	r3, r7, #6
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	019b      	lsls	r3, r3, #6
 80045a8:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 80045aa:	2317      	movs	r3, #23
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	2200      	movs	r2, #0
 80045b0:	701a      	strb	r2, [r3, #0]
 80045b2:	e02d      	b.n	8004610 <Input_Capture_Processing+0xa8>

		interrupt_period_value = 256 - i;
 80045b4:	2317      	movs	r3, #23
 80045b6:	18fb      	adds	r3, r7, r3
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2280      	movs	r2, #128	@ 0x80
 80045be:	0052      	lsls	r2, r2, #1
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	1dbb      	adds	r3, r7, #6
 80045c6:	801a      	strh	r2, [r3, #0]
		uint16_t remainder = N % interrupt_period_value;
 80045c8:	1dbb      	adds	r3, r7, #6
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	001a      	movs	r2, r3
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	0011      	movs	r1, r2
 80045d4:	0018      	movs	r0, r3
 80045d6:	f7fb fe1b 	bl	8000210 <__aeabi_uidivmod>
 80045da:	000b      	movs	r3, r1
 80045dc:	001a      	movs	r2, r3
 80045de:	210e      	movs	r1, #14
 80045e0:	187b      	adds	r3, r7, r1
 80045e2:	801a      	strh	r2, [r3, #0]

		if(remainder == 0){ //check if no remainder -> integer
 80045e4:	187b      	adds	r3, r7, r1
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10b      	bne.n	8004604 <Input_Capture_Processing+0x9c>

			params_ptr->raw_prescaler = N / interrupt_period_value;
 80045ec:	1dbb      	adds	r3, r7, #6
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	0019      	movs	r1, r3
 80045f4:	6938      	ldr	r0, [r7, #16]
 80045f6:	f7fb fd85 	bl	8000104 <__udivsi3>
 80045fa:	0003      	movs	r3, r0
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	835a      	strh	r2, [r3, #26]
			break;
 8004602:	e00a      	b.n	800461a <Input_Capture_Processing+0xb2>
	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8004604:	2117      	movs	r1, #23
 8004606:	187b      	adds	r3, r7, r1
 8004608:	781a      	ldrb	r2, [r3, #0]
 800460a:	187b      	adds	r3, r7, r1
 800460c:	3201      	adds	r2, #1
 800460e:	701a      	strb	r2, [r3, #0]
 8004610:	2317      	movs	r3, #23
 8004612:	18fb      	adds	r3, r7, r3
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b80      	cmp	r3, #128	@ 0x80
 8004618:	d9cc      	bls.n	80045b4 <Input_Capture_Processing+0x4c>
		}
	}

	params_ptr->raw_start_value = 256 - interrupt_period_value;
 800461a:	1dbb      	adds	r3, r7, #6
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	b29b      	uxth	r3, r3
 8004620:	2280      	movs	r2, #128	@ 0x80
 8004622:	0052      	lsls	r2, r2, #1
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	b29a      	uxth	r2, r3
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	825a      	strh	r2, [r3, #18]

	Calculate_Next_Main_Oscillator_Values(params_ptr, (enum Next_Values_Processing_Mode)IP_CAPTURE_MODE);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	2101      	movs	r1, #1
 8004630:	0018      	movs	r0, r3
 8004632:	f000 f9d3 	bl	80049dc <Calculate_Next_Main_Oscillator_Values>
	Process_TIM16_Final_Start_Value_and_Final_Prescaler(params_ptr);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	0018      	movs	r0, r3
 800463a:	f001 f8d1 	bl	80057e0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);

	return 1;
 800463e:	2301      	movs	r3, #1
}
 8004640:	0018      	movs	r0, r3
 8004642:	46bd      	mov	sp, r7
 8004644:	b006      	add	sp, #24
 8004646:	bd80      	pop	{r7, pc}
 8004648:	20000c38 	.word	0x20000c38

0800464c <Start_Input_Capture_Timer>:

uint8_t Start_Input_Capture_Timer(void){
 800464c:	b590      	push	{r4, r7, lr}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0

	uint8_t ok = Start_IC_TIM(&htim2, TIM_CHANNEL_1);
 8004652:	1dfc      	adds	r4, r7, #7
 8004654:	4b09      	ldr	r3, [pc, #36]	@ (800467c <Start_Input_Capture_Timer+0x30>)
 8004656:	2100      	movs	r1, #0
 8004658:	0018      	movs	r0, r3
 800465a:	f000 f811 	bl	8004680 <Start_IC_TIM>
 800465e:	0003      	movs	r3, r0
 8004660:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8004662:	1dfb      	adds	r3, r7, #7
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <Start_Input_Capture_Timer+0x22>

		Error_Handler();
 800466a:	f7fd fe13 	bl	8002294 <Error_Handler>
	}

	return ok;
 800466e:	1dfb      	adds	r3, r7, #7
 8004670:	781b      	ldrb	r3, [r3, #0]
}
 8004672:	0018      	movs	r0, r3
 8004674:	46bd      	mov	sp, r7
 8004676:	b003      	add	sp, #12
 8004678:	bd90      	pop	{r4, r7, pc}
 800467a:	46c0      	nop			@ (mov r8, r8)
 800467c:	20000814 	.word	0x20000814

08004680 <Start_IC_TIM>:

uint8_t Start_IC_TIM(TIM_HandleTypeDef *TIM, uint32_t IC_TIM_channel){
 8004680:	b5b0      	push	{r4, r5, r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]

	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 800468a:	250f      	movs	r5, #15
 800468c:	197c      	adds	r4, r7, r5
 800468e:	4b10      	ldr	r3, [pc, #64]	@ (80046d0 <Start_IC_TIM+0x50>)
 8004690:	0018      	movs	r0, r3
 8004692:	f005 f987 	bl	80099a4 <HAL_TIM_Base_Start_IT>
 8004696:	0003      	movs	r3, r0
 8004698:	7023      	strb	r3, [r4, #0]
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	4b0c      	ldr	r3, [pc, #48]	@ (80046d0 <Start_IC_TIM+0x50>)
 800469e:	0011      	movs	r1, r2
 80046a0:	0018      	movs	r0, r3
 80046a2:	f005 fded 	bl	800a280 <HAL_TIM_IC_Start_IT>
 80046a6:	0003      	movs	r3, r0
 80046a8:	0019      	movs	r1, r3
 80046aa:	197b      	adds	r3, r7, r5
 80046ac:	197a      	adds	r2, r7, r5
 80046ae:	7812      	ldrb	r2, [r2, #0]
 80046b0:	400a      	ands	r2, r1
 80046b2:	701a      	strb	r2, [r3, #0]

	if(ok_AND != HAL_OK){
 80046b4:	197b      	adds	r3, r7, r5
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <Start_IC_TIM+0x40>

		Error_Handler();
 80046bc:	f7fd fdea 	bl	8002294 <Error_Handler>
	}

	return ok_AND;
 80046c0:	230f      	movs	r3, #15
 80046c2:	18fb      	adds	r3, r7, r3
 80046c4:	781b      	ldrb	r3, [r3, #0]
}
 80046c6:	0018      	movs	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b004      	add	sp, #16
 80046cc:	bdb0      	pop	{r4, r5, r7, pc}
 80046ce:	46c0      	nop			@ (mov r8, r8)
 80046d0:	20000814 	.word	0x20000814

080046d4 <Copy_Params_Structs>:

uint8_t Copy_Params_Structs(struct Params *src_ptr, struct Params *dst_ptr){
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]

	*dst_ptr = *src_ptr;
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	0010      	movs	r0, r2
 80046e4:	0019      	movs	r1, r3
 80046e6:	2324      	movs	r3, #36	@ 0x24
 80046e8:	001a      	movs	r2, r3
 80046ea:	f008 ff6b 	bl	800d5c4 <memcpy>

	return 1;
 80046ee:	2301      	movs	r3, #1
}
 80046f0:	0018      	movs	r0, r3
 80046f2:	46bd      	mov	sp, r7
 80046f4:	b002      	add	sp, #8
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <Start_Measurement_Reelapse_Timer>:

uint8_t Start_Measurement_Reelapse_Timer(void){
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 80046fc:	4b0b      	ldr	r3, [pc, #44]	@ (800472c <Start_Measurement_Reelapse_Timer+0x34>)
 80046fe:	2100      	movs	r1, #0
 8004700:	0018      	movs	r0, r3
 8004702:	f001 fc94 	bl	800602e <Stop_OC_TIM>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004706:	4b09      	ldr	r3, [pc, #36]	@ (800472c <Start_Measurement_Reelapse_Timer+0x34>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2200      	movs	r2, #0
 800470c:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 800470e:	4b08      	ldr	r3, [pc, #32]	@ (8004730 <Start_Measurement_Reelapse_Timer+0x38>)
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	b29a      	uxth	r2, r3
 8004714:	4b05      	ldr	r3, [pc, #20]	@ (800472c <Start_Measurement_Reelapse_Timer+0x34>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	635a      	str	r2, [r3, #52]	@ 0x34
	Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 800471a:	4b04      	ldr	r3, [pc, #16]	@ (800472c <Start_Measurement_Reelapse_Timer+0x34>)
 800471c:	2100      	movs	r1, #0
 800471e:	0018      	movs	r0, r3
 8004720:	f001 fc69 	bl	8005ff6 <Start_OC_TIM>

	return 1;
 8004724:	2301      	movs	r3, #1
}
 8004726:	0018      	movs	r0, r3
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	200008d0 	.word	0x200008d0
 8004730:	20000c34 	.word	0x20000c34

08004734 <Begin_Input_Capture_Measurement>:

uint8_t Begin_Input_Capture_Measurement(void){
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0

	__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 8004738:	4b03      	ldr	r3, [pc, #12]	@ (8004748 <Begin_Input_Capture_Measurement+0x14>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2200      	movs	r2, #0
 800473e:	625a      	str	r2, [r3, #36]	@ 0x24

	return 1;
 8004740:	2301      	movs	r3, #1
}
 8004742:	0018      	movs	r0, r3
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	20000814 	.word	0x20000814

0800474c <main>:
//INCLUDES
#include "main.h"
#include "main_vars.h"

int main(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
	//SYSTEM INIT
	System_Init();
 8004750:	f7fd fda6 	bl	80022a0 <System_Init>

	//STARTUP
	Startup();
 8004754:	f000 fb38 	bl	8004dc8 <Startup>

	while (1)
	{
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 8004758:	4b3b      	ldr	r3, [pc, #236]	@ (8004848 <main+0xfc>)
 800475a:	2104      	movs	r1, #4
 800475c:	0018      	movs	r0, r3
 800475e:	f001 fccd 	bl	80060fc <Get_Status_Bit>
 8004762:	0003      	movs	r3, r0
 8004764:	2b01      	cmp	r3, #1
 8004766:	d107      	bne.n	8004778 <main+0x2c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

			Input_Capture_Processing(interrupt_period, &params_to_be_loaded);
 8004768:	4b38      	ldr	r3, [pc, #224]	@ (800484c <main+0x100>)
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	b29b      	uxth	r3, r3
 800476e:	4a38      	ldr	r2, [pc, #224]	@ (8004850 <main+0x104>)
 8004770:	0011      	movs	r1, r2
 8004772:	0018      	movs	r0, r3
 8004774:	f7ff fef8 	bl	8004568 <Input_Capture_Processing>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
		}

		if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running) == YES){
 8004778:	4b33      	ldr	r3, [pc, #204]	@ (8004848 <main+0xfc>)
 800477a:	2140      	movs	r1, #64	@ 0x40
 800477c:	0018      	movs	r0, r3
 800477e:	f001 fcbd 	bl	80060fc <Get_Status_Bit>
 8004782:	0003      	movs	r3, r0
 8004784:	2b01      	cmp	r3, #1
 8004786:	d12b      	bne.n	80047e0 <main+0x94>

			if(idle_counter < IDLE_COUNT){
 8004788:	4b32      	ldr	r3, [pc, #200]	@ (8004854 <main+0x108>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	23fa      	movs	r3, #250	@ 0xfa
 800478e:	01db      	lsls	r3, r3, #7
 8004790:	429a      	cmp	r2, r3
 8004792:	d218      	bcs.n	80047c6 <main+0x7a>

				if(IP_CAP_fsm.current_state != IDLE){
 8004794:	4b30      	ldr	r3, [pc, #192]	@ (8004858 <main+0x10c>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00d      	beq.n	80047ba <main+0x6e>

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800479e:	4b2a      	ldr	r3, [pc, #168]	@ (8004848 <main+0xfc>)
 80047a0:	2140      	movs	r1, #64	@ 0x40
 80047a2:	0018      	movs	r0, r3
 80047a4:	f001 fcd0 	bl	8006148 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80047a8:	4b27      	ldr	r3, [pc, #156]	@ (8004848 <main+0xfc>)
 80047aa:	2120      	movs	r1, #32
 80047ac:	0018      	movs	r0, r3
 80047ae:	f001 fccb 	bl	8006148 <Clear_Status_Bit>
					idle_counter = 0;
 80047b2:	4b28      	ldr	r3, [pc, #160]	@ (8004854 <main+0x108>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	e012      	b.n	80047e0 <main+0x94>
				}
				else{

					idle_counter++;
 80047ba:	4b26      	ldr	r3, [pc, #152]	@ (8004854 <main+0x108>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	4b24      	ldr	r3, [pc, #144]	@ (8004854 <main+0x108>)
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	e00c      	b.n	80047e0 <main+0x94>
				}
			}
			else{

				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80047c6:	4b20      	ldr	r3, [pc, #128]	@ (8004848 <main+0xfc>)
 80047c8:	2140      	movs	r1, #64	@ 0x40
 80047ca:	0018      	movs	r0, r3
 80047cc:	f001 fcbc 	bl	8006148 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80047d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004848 <main+0xfc>)
 80047d2:	2120      	movs	r1, #32
 80047d4:	0018      	movs	r0, r3
 80047d6:	f001 fca5 	bl	8006124 <Set_Status_Bit>
				idle_counter = 0;
 80047da:	4b1e      	ldr	r3, [pc, #120]	@ (8004854 <main+0x108>)
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
			}
		}

		if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running) == YES){
 80047e0:	2380      	movs	r3, #128	@ 0x80
 80047e2:	005a      	lsls	r2, r3, #1
 80047e4:	4b18      	ldr	r3, [pc, #96]	@ (8004848 <main+0xfc>)
 80047e6:	0011      	movs	r1, r2
 80047e8:	0018      	movs	r0, r3
 80047ea:	f001 fc87 	bl	80060fc <Get_Status_Bit>
 80047ee:	0003      	movs	r3, r0
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d123      	bne.n	800483c <main+0xf0>

			if(midi_counter < MIDI_COUNT){
 80047f4:	4b19      	ldr	r3, [pc, #100]	@ (800485c <main+0x110>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	23fa      	movs	r3, #250	@ 0xfa
 80047fa:	01db      	lsls	r3, r3, #7
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d205      	bcs.n	800480c <main+0xc0>

				midi_counter++;
 8004800:	4b16      	ldr	r3, [pc, #88]	@ (800485c <main+0x110>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	4b15      	ldr	r3, [pc, #84]	@ (800485c <main+0x110>)
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	e017      	b.n	800483c <main+0xf0>
			}
			else{

				Clear_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800480c:	2380      	movs	r3, #128	@ 0x80
 800480e:	005a      	lsls	r2, r3, #1
 8004810:	4b0d      	ldr	r3, [pc, #52]	@ (8004848 <main+0xfc>)
 8004812:	0011      	movs	r1, r2
 8004814:	0018      	movs	r0, r3
 8004816:	f001 fc97 	bl	8006148 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out);
 800481a:	2380      	movs	r3, #128	@ 0x80
 800481c:	009a      	lsls	r2, r3, #2
 800481e:	4b0a      	ldr	r3, [pc, #40]	@ (8004848 <main+0xfc>)
 8004820:	0011      	movs	r1, r2
 8004822:	0018      	movs	r0, r3
 8004824:	f001 fc7e 	bl	8006124 <Set_Status_Bit>
				active_status_byte = 0;
 8004828:	4b0d      	ldr	r3, [pc, #52]	@ (8004860 <main+0x114>)
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 800482e:	4b0d      	ldr	r3, [pc, #52]	@ (8004864 <main+0x118>)
 8004830:	0018      	movs	r0, r3
 8004832:	f7fc fc64 	bl	80010fe <Clear_Data_Buffer>
				midi_counter = 0;
 8004836:	4b09      	ldr	r3, [pc, #36]	@ (800485c <main+0x110>)
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
			}
		}

		set_LED_to_state(&LED_fsm, LED_CONFIRM);
 800483c:	4b0a      	ldr	r3, [pc, #40]	@ (8004868 <main+0x11c>)
 800483e:	2107      	movs	r1, #7
 8004840:	0018      	movs	r0, r3
 8004842:	f7fc fa9d 	bl	8000d80 <set_LED_to_state>
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 8004846:	e787      	b.n	8004758 <main+0xc>
 8004848:	20000c38 	.word	0x20000c38
 800484c:	20000c34 	.word	0x20000c34
 8004850:	20000c98 	.word	0x20000c98
 8004854:	20000c3c 	.word	0x20000c3c
 8004858:	20000444 	.word	0x20000444
 800485c:	20000c40 	.word	0x20000c40
 8004860:	200004cb 	.word	0x200004cb
 8004864:	200004d0 	.word	0x200004d0
 8004868:	20000448 	.word	0x20000448

0800486c <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>:
								.duty_delay_line_start_offset = 1,  //initial value is 1st index - to give us space to fill index 0
								.duty_delay_line_finish_offset = FINAL_INDEX + 1}; //initial value is 512th index, one larger than the index of the final sample

//FUNCTION DEFINITIONS
uint8_t Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel_1, uint32_t PWM_TIM_channel_2)
{
 800486c:	b590      	push	{r4, r7, lr}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
	uint8_t ok_OR = 0;
 8004878:	2417      	movs	r4, #23
 800487a:	193b      	adds	r3, r7, r4
 800487c:	2200      	movs	r2, #0
 800487e:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_Base_Start(TIM);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	0018      	movs	r0, r3
 8004884:	f005 f842 	bl	800990c <HAL_TIM_Base_Start>
 8004888:	0003      	movs	r3, r0
 800488a:	0019      	movs	r1, r3
 800488c:	193b      	adds	r3, r7, r4
 800488e:	193a      	adds	r2, r7, r4
 8004890:	7812      	ldrb	r2, [r2, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	0011      	movs	r1, r2
 800489c:	0018      	movs	r0, r3
 800489e:	f005 fba3 	bl	8009fe8 <HAL_TIM_PWM_Start>
 80048a2:	0003      	movs	r3, r0
 80048a4:	0019      	movs	r1, r3
 80048a6:	193b      	adds	r3, r7, r4
 80048a8:	193a      	adds	r2, r7, r4
 80048aa:	7812      	ldrb	r2, [r2, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	0011      	movs	r1, r2
 80048b6:	0018      	movs	r0, r3
 80048b8:	f005 fb96 	bl	8009fe8 <HAL_TIM_PWM_Start>
 80048bc:	0003      	movs	r3, r0
 80048be:	0019      	movs	r1, r3
 80048c0:	193b      	adds	r3, r7, r4
 80048c2:	193a      	adds	r2, r7, r4
 80048c4:	7812      	ldrb	r2, [r2, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	701a      	strb	r2, [r3, #0]

	if(ok_OR != HAL_OK){
 80048ca:	193b      	adds	r3, r7, r4
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x6a>

		Error_Handler();
 80048d2:	f7fd fcdf 	bl	8002294 <Error_Handler>
	}

	return ok_OR;
 80048d6:	2317      	movs	r3, #23
 80048d8:	18fb      	adds	r3, r7, r3
 80048da:	781b      	ldrb	r3, [r3, #0]
}
 80048dc:	0018      	movs	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	b007      	add	sp, #28
 80048e2:	bd90      	pop	{r4, r7, pc}

080048e4 <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 80048e4:	b590      	push	{r4, r7, lr}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 80048ea:	1dfc      	adds	r4, r7, #7
 80048ec:	4b09      	ldr	r3, [pc, #36]	@ (8004914 <Start_Freq_Gen_Timer+0x30>)
 80048ee:	2100      	movs	r1, #0
 80048f0:	0018      	movs	r0, r3
 80048f2:	f001 fb80 	bl	8005ff6 <Start_OC_TIM>
 80048f6:	0003      	movs	r3, r0
 80048f8:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 80048fa:	1dfb      	adds	r3, r7, #7
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <Start_Freq_Gen_Timer+0x22>

		Error_Handler();
 8004902:	f7fd fcc7 	bl	8002294 <Error_Handler>
	}

	return ok;
 8004906:	1dfb      	adds	r3, r7, #7
 8004908:	781b      	ldrb	r3, [r3, #0]
}
 800490a:	0018      	movs	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	b003      	add	sp, #12
 8004910:	bd90      	pop	{r4, r7, pc}
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	20000758 	.word	0x20000758

08004918 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:

uint8_t Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(struct Params* params_ptr){
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]

	uint32_t speed_control = 0;
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]
	uint8_t how_many_128 = 0;
 8004924:	210b      	movs	r1, #11
 8004926:	187b      	adds	r3, r7, r1
 8004928:	2200      	movs	r2, #0
 800492a:	701a      	strb	r2, [r3, #0]

    //speed_control = (speed_adc_10_bit/1024)*'range macro'
    speed_control = params_ptr->speed * NUMBER_OF_FREQUENCY_STEPS;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	891b      	ldrh	r3, [r3, #8]
 8004930:	b29b      	uxth	r3, r3
 8004932:	001a      	movs	r2, r3
 8004934:	0013      	movs	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	189b      	adds	r3, r3, r2
 800493a:	019b      	lsls	r3, r3, #6
 800493c:	189b      	adds	r3, r3, r2
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	189b      	adds	r3, r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	0a9b      	lsrs	r3, r3, #10
 8004948:	60fb      	str	r3, [r7, #12]

    how_many_128 = (uint8_t)(speed_control >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	09da      	lsrs	r2, r3, #7
 800494e:	187b      	adds	r3, r7, r1
 8004950:	701a      	strb	r2, [r3, #0]
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	b29a      	uxth	r2, r3
 8004956:	187b      	adds	r3, r7, r1
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	b29b      	uxth	r3, r3
 800495c:	01db      	lsls	r3, r3, #7
 800495e:	b29b      	uxth	r3, r3
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	b29a      	uxth	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	825a      	strh	r2, [r3, #18]
    params_ptr->raw_prescaler = SLOWEST_SPEED_PRESCALER >> how_many_128;
 8004968:	187b      	adds	r3, r7, r1
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2280      	movs	r2, #128	@ 0x80
 800496e:	00d2      	lsls	r2, r2, #3
 8004970:	411a      	asrs	r2, r3
 8004972:	0013      	movs	r3, r2
 8004974:	b29a      	uxth	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	835a      	strh	r2, [r3, #26]

    return 1;
 800497a:	2301      	movs	r3, #1
}
 800497c:	0018      	movs	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	b004      	add	sp, #16
 8004982:	bd80      	pop	{r7, pc}

08004984 <Set_Oscillator_Values>:

uint8_t Set_Oscillator_Values(struct Params* params_ptr){
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]

	////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE MAIN OSCILLATOR//
	////////////////////////////////////////////////////////
	__HAL_TIM_SET_AUTORELOAD(&htim16, params_ptr->final_ARR);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	8b1b      	ldrh	r3, [r3, #24]
 8004990:	b29a      	uxth	r2, r3
 8004992:	4b10      	ldr	r3, [pc, #64]	@ (80049d4 <Set_Oscillator_Values+0x50>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	8b1b      	ldrh	r3, [r3, #24]
 800499c:	b29b      	uxth	r3, r3
 800499e:	001a      	movs	r2, r3
 80049a0:	4b0c      	ldr	r3, [pc, #48]	@ (80049d4 <Set_Oscillator_Values+0x50>)
 80049a2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_PRESCALER(&htim16, params_ptr->final_prescaler_minus_one); //have to take one off the divisor
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	8bdb      	ldrh	r3, [r3, #30]
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	4b0a      	ldr	r3, [pc, #40]	@ (80049d4 <Set_Oscillator_Values+0x50>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	629a      	str	r2, [r3, #40]	@ 0x28

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, params_ptr->prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	885b      	ldrh	r3, [r3, #2]
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	4b08      	ldr	r3, [pc, #32]	@ (80049d8 <Set_Oscillator_Values+0x54>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	639a      	str	r2, [r3, #56]	@ 0x38

	/////////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE SECONDARY OSCILLATOR//
	/////////////////////////////////////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	889b      	ldrh	r3, [r3, #4]
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	4b05      	ldr	r3, [pc, #20]	@ (80049d8 <Set_Oscillator_Values+0x54>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	641a      	str	r2, [r3, #64]	@ 0x40

	return 1;
 80049c8:	2301      	movs	r3, #1
}
 80049ca:	0018      	movs	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b002      	add	sp, #8
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	20000758 	.word	0x20000758
 80049d8:	2000098c 	.word	0x2000098c

080049dc <Calculate_Next_Main_Oscillator_Values>:

uint8_t Calculate_Next_Main_Oscillator_Values(struct Params* params_ptr, enum Next_Values_Processing_Mode mode){
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	000a      	movs	r2, r1
 80049e6:	1cfb      	adds	r3, r7, #3
 80049e8:	701a      	strb	r2, [r3, #0]

	if(mode == REGULAR_MODE){
 80049ea:	1cfb      	adds	r3, r7, #3
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d144      	bne.n	8004a7c <Calculate_Next_Main_Oscillator_Values+0xa0>

		params_ptr->index++;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	89db      	ldrh	r3, [r3, #14]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3301      	adds	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	81da      	strh	r2, [r3, #14]

		if(params_ptr->index == FINAL_INDEX + 1){
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	89db      	ldrh	r3, [r3, #14]
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	2380      	movs	r3, #128	@ 0x80
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d102      	bne.n	8004a14 <Calculate_Next_Main_Oscillator_Values+0x38>
			params_ptr->index = 0;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	81da      	strh	r2, [r3, #14]
		}

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	89db      	ldrh	r3, [r3, #14]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <Calculate_Next_Main_Oscillator_Values+0x50>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	741a      	strb	r2, [r3, #16]
 8004a2a:	e05a      	b.n	8004ae2 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == SECOND_QUADRANT_START_INDEX){
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	89db      	ldrh	r3, [r3, #14]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2b80      	cmp	r3, #128	@ 0x80
 8004a34:	d106      	bne.n	8004a44 <Calculate_Next_Main_Oscillator_Values+0x68>
			params_ptr->quadrant = SECOND_QUADRANT;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	741a      	strb	r2, [r3, #16]
 8004a42:	e04e      	b.n	8004ae2 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == THIRD_QUADRANT_START_INDEX){
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	89db      	ldrh	r3, [r3, #14]
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	2380      	movs	r3, #128	@ 0x80
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d106      	bne.n	8004a60 <Calculate_Next_Main_Oscillator_Values+0x84>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	741a      	strb	r2, [r3, #16]
 8004a5e:	e040      	b.n	8004ae2 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == FOURTH_QUADRANT_START_INDEX){
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	89db      	ldrh	r3, [r3, #14]
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	23c0      	movs	r3, #192	@ 0xc0
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d139      	bne.n	8004ae2 <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = SECOND_QUADRANT;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	741a      	strb	r2, [r3, #16]
 8004a7a:	e032      	b.n	8004ae2 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == IP_CAPTURE_MODE){
 8004a7c:	1cfb      	adds	r3, r7, #3
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d11f      	bne.n	8004ac4 <Calculate_Next_Main_Oscillator_Values+0xe8>

		if(params_ptr->waveshape == SINE_MODE || params_ptr->waveshape == TRIANGLE_MODE){
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	799b      	ldrb	r3, [r3, #6]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d004      	beq.n	8004a98 <Calculate_Next_Main_Oscillator_Values+0xbc>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	799b      	ldrb	r3, [r3, #6]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10a      	bne.n	8004aae <Calculate_Next_Main_Oscillator_Values+0xd2>

			params_ptr->index = SINE_OR_TRIANGLE_WAVE_TEMPO_PERCEIVED_APEX_INDEX;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	22a7      	movs	r2, #167	@ 0xa7
 8004a9c:	0052      	lsls	r2, r2, #1
 8004a9e:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SINE_OR_TRI_SYNCED;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SINE_OR_TRI_SYNCED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	741a      	strb	r2, [r3, #16]
 8004aac:	e019      	b.n	8004ae2 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else{

			params_ptr->index = SQUARE_WAVE_TEMPO_APEX_INDEX;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2280      	movs	r2, #128	@ 0x80
 8004ab2:	0052      	lsls	r2, r2, #1
 8004ab4:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SQUARE_SYNCED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SQUARE_SYNCED;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	741a      	strb	r2, [r3, #16]
 8004ac2:	e00e      	b.n	8004ae2 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == STARTUP_MODE){
 8004ac4:	1cfb      	adds	r3, r7, #3
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d10a      	bne.n	8004ae2 <Calculate_Next_Main_Oscillator_Values+0x106>

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	89db      	ldrh	r3, [r3, #14]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d105      	bne.n	8004ae2 <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	741a      	strb	r2, [r3, #16]
		}
	}

	//ONCE INDEX IS SET, FIND THE DUTY VALUE
	if(params_ptr->waveshape == TRIANGLE_MODE){
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	799b      	ldrb	r3, [r3, #6]
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d109      	bne.n	8004b00 <Calculate_Next_Main_Oscillator_Values+0x124>
		params_ptr->duty = tri_wavetable[params_ptr->index];
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	89db      	ldrh	r3, [r3, #14]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	001a      	movs	r2, r3
 8004af4:	4b31      	ldr	r3, [pc, #196]	@ (8004bbc <Calculate_Next_Main_Oscillator_Values+0x1e0>)
 8004af6:	0052      	lsls	r2, r2, #1
 8004af8:	5ad2      	ldrh	r2, [r2, r3]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	801a      	strh	r2, [r3, #0]
 8004afe:	e029      	b.n	8004b54 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if(params_ptr->waveshape == SINE_MODE){
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	799b      	ldrb	r3, [r3, #6]
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d109      	bne.n	8004b1e <Calculate_Next_Main_Oscillator_Values+0x142>
		params_ptr->duty = sine_wavetable[params_ptr->index];
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	89db      	ldrh	r3, [r3, #14]
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	001a      	movs	r2, r3
 8004b12:	4b2b      	ldr	r3, [pc, #172]	@ (8004bc0 <Calculate_Next_Main_Oscillator_Values+0x1e4>)
 8004b14:	0052      	lsls	r2, r2, #1
 8004b16:	5ad2      	ldrh	r2, [r2, r3]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	801a      	strh	r2, [r3, #0]
 8004b1c:	e01a      	b.n	8004b54 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	799b      	ldrb	r3, [r3, #6]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d108      	bne.n	8004b3a <Calculate_Next_Main_Oscillator_Values+0x15e>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	89db      	ldrh	r3, [r3, #14]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2bff      	cmp	r3, #255	@ 0xff
 8004b30:	d803      	bhi.n	8004b3a <Calculate_Next_Main_Oscillator_Values+0x15e>
		params_ptr->duty = PWM_DUTY_VALUE_MAX;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a23      	ldr	r2, [pc, #140]	@ (8004bc4 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004b36:	801a      	strh	r2, [r3, #0]
 8004b38:	e00c      	b.n	8004b54 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index >= THIRD_QUADRANT_START_INDEX)){
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	799b      	ldrb	r3, [r3, #6]
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d107      	bne.n	8004b54 <Calculate_Next_Main_Oscillator_Values+0x178>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	89db      	ldrh	r3, [r3, #14]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	2bff      	cmp	r3, #255	@ 0xff
 8004b4c:	d902      	bls.n	8004b54 <Calculate_Next_Main_Oscillator_Values+0x178>
		params_ptr->duty = PWM_DUTY_VALUE_MIN;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	801a      	strh	r2, [r3, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(params_ptr->depth == ((1 << DEPTH_ADC_RESOLUTION) - 1)){ //255
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	7a9b      	ldrb	r3, [r3, #10]
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b5c:	d108      	bne.n	8004b70 <Calculate_Next_Main_Oscillator_Values+0x194>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	4a17      	ldr	r2, [pc, #92]	@ (8004bc4 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	801a      	strh	r2, [r3, #0]
 8004b6e:	e01b      	b.n	8004ba8 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else if(params_ptr->depth != 0){
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	7a9b      	ldrb	r3, [r3, #10]
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d013      	beq.n	8004ba2 <Calculate_Next_Main_Oscillator_Values+0x1c6>

			//duty = 1023 - duty*(current_depth >> 8);
			uint32_t multiply_product = 0;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
			multiply_product = (params_ptr->duty) * (params_ptr->depth);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	001a      	movs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	7a9b      	ldrb	r3, [r3, #10]
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	4353      	muls	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
			params_ptr->duty = PWM_DUTY_VALUE_MAX - (multiply_product >> DEPTH_ADC_RESOLUTION);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	09db      	lsrs	r3, r3, #7
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	4a0b      	ldr	r2, [pc, #44]	@ (8004bc4 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	801a      	strh	r2, [r3, #0]
 8004ba0:	e002      	b.n	8004ba8 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else{
			params_ptr->duty = PWM_DUTY_VALUE_MAX; //if depth is 0, just output 1023
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a07      	ldr	r2, [pc, #28]	@ (8004bc4 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004ba6:	801a      	strh	r2, [r3, #0]
		}

	#endif

	//SET THE NEXT VALUE FOR THE MAIN OSCILLATOR
	params_ptr->prev_duty = params_ptr->duty;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	805a      	strh	r2, [r3, #2]

	return 1;
 8004bb2:	2301      	movs	r3, #1
}
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	b004      	add	sp, #16
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	0800da10 	.word	0x0800da10
 8004bc0:	0800d610 	.word	0x0800d610
 8004bc4:	000003ff 	.word	0x000003ff

08004bc8 <Write_Next_Main_Oscillator_Values_to_Delay_Line>:

uint8_t Write_Next_Main_Oscillator_Values_to_Delay_Line(struct Params* params_ptr, struct Delay_Line* delay_line_ptr){
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]

	//STORE THE VALUES IN THE APPROPRIATE '0TH - 1' INDEX RELATIVE TO THE START POINTER
		if(delay_line_ptr->duty_delay_line_start_offset != 0){
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	4a44      	ldr	r2, [pc, #272]	@ (8004ce8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004bd6:	5a9b      	ldrh	r3, [r3, r2]
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00b      	beq.n	8004bf6 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x2e>
			delay_line_ptr->duty_delay_line_storage_array[delay_line_ptr->duty_delay_line_start_offset - 1] = params_ptr->duty;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	4a41      	ldr	r2, [pc, #260]	@ (8004ce8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004be2:	5a9b      	ldrh	r3, [r3, r2]
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	1e5a      	subs	r2, r3, #1
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b299      	uxth	r1, r3
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	0052      	lsls	r2, r2, #1
 8004bf2:	52d1      	strh	r1, [r2, r3]
 8004bf4:	e006      	b.n	8004c04 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x3c>
		}
		else{
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	b299      	uxth	r1, r3
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	2380      	movs	r3, #128	@ 0x80
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	52d1      	strh	r1, [r2, r3]
		}

		//DECREMENT THE START AND FINISH POINTERS
		if(delay_line_ptr->duty_delay_line_start_offset == 0){
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	4a38      	ldr	r2, [pc, #224]	@ (8004ce8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004c08:	5a9b      	ldrh	r3, [r3, r2]
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10e      	bne.n	8004c2e <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x66>
			delay_line_ptr->duty_delay_line_start_offset = FINAL_INDEX + 1;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	4a35      	ldr	r2, [pc, #212]	@ (8004ce8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004c14:	2180      	movs	r1, #128	@ 0x80
 8004c16:	0089      	lsls	r1, r1, #2
 8004c18:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	4a33      	ldr	r2, [pc, #204]	@ (8004cec <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004c1e:	5a9b      	ldrh	r3, [r3, r2]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b299      	uxth	r1, r3
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	4a30      	ldr	r2, [pc, #192]	@ (8004cec <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004c2a:	5299      	strh	r1, [r3, r2]
 8004c2c:	e026      	b.n	8004c7c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else if(delay_line_ptr->duty_delay_line_finish_offset == 0){
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	4a2e      	ldr	r2, [pc, #184]	@ (8004cec <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004c32:	5a9b      	ldrh	r3, [r3, r2]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10e      	bne.n	8004c58 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x90>
			delay_line_ptr->duty_delay_line_finish_offset = FINAL_INDEX + 1;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	4a2b      	ldr	r2, [pc, #172]	@ (8004cec <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004c3e:	2180      	movs	r1, #128	@ 0x80
 8004c40:	0089      	lsls	r1, r1, #2
 8004c42:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	4a28      	ldr	r2, [pc, #160]	@ (8004ce8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004c48:	5a9b      	ldrh	r3, [r3, r2]
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b299      	uxth	r1, r3
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	4a25      	ldr	r2, [pc, #148]	@ (8004ce8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004c54:	5299      	strh	r1, [r3, r2]
 8004c56:	e011      	b.n	8004c7c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else{
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	4a23      	ldr	r2, [pc, #140]	@ (8004ce8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004c5c:	5a9b      	ldrh	r3, [r3, r2]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b299      	uxth	r1, r3
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	4a20      	ldr	r2, [pc, #128]	@ (8004ce8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004c68:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8004cec <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004c6e:	5a9b      	ldrh	r3, [r3, r2]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b299      	uxth	r1, r3
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	4a1c      	ldr	r2, [pc, #112]	@ (8004cec <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004c7a:	5299      	strh	r1, [r3, r2]
		}

		//DETERMINE THE DELAYED WAVE'S VALUES
		if(delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ce8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004c80:	5a9b      	ldrh	r3, [r3, r2]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	001a      	movs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	18d2      	adds	r2, r2, r3
 8004c8e:	2380      	movs	r3, #128	@ 0x80
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	429a      	cmp	r2, r3
 8004c94:	dd13      	ble.n	8004cbe <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xf6>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + (delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	4913      	ldr	r1, [pc, #76]	@ (8004ce8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004c9c:	5a5b      	ldrh	r3, [r3, r1]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	0019      	movs	r1, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	18cb      	adds	r3, r1, r3
 8004caa:	4911      	ldr	r1, [pc, #68]	@ (8004cf0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x128>)
 8004cac:	468c      	mov	ip, r1
 8004cae:	4463      	add	r3, ip
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	18d3      	adds	r3, r2, r3
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	809a      	strh	r2, [r3, #4]
 8004cbc:	e00f      	b.n	8004cde <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x116>
		}
		else{
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset);
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	4909      	ldr	r1, [pc, #36]	@ (8004ce8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004cc4:	5a5b      	ldrh	r3, [r3, r1]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	0019      	movs	r1, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	18cb      	adds	r3, r1, r3
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	18d3      	adds	r3, r2, r3
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	809a      	strh	r2, [r3, #4]
		}

	return 1;
 8004cde:	2301      	movs	r3, #1
}
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	b002      	add	sp, #8
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	00000402 	.word	0x00000402
 8004cec:	00000404 	.word	0x00000404
 8004cf0:	7ffffe00 	.word	0x7ffffe00

08004cf4 <Process_ADC_Conversion_Values>:

uint8_t Process_ADC_Conversion_Values(struct Params* params_ptr, volatile uint16_t* ADCResultsDMA_ptr){
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA_ptr[WAVESHAPE_ADC_RESULT_INDEX] >> 5; //set ADC_Result to waveshape index value, truncate to 7-bit
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	2116      	movs	r1, #22
 8004d06:	187b      	adds	r3, r7, r1
 8004d08:	0952      	lsrs	r2, r2, #5
 8004d0a:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8004d0c:	187b      	adds	r3, r7, r1
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d12:	d803      	bhi.n	8004d1c <Process_ADC_Conversion_Values+0x28>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	719a      	strb	r2, [r3, #6]
 8004d1a:	e010      	b.n	8004d3e <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8004d1c:	2316      	movs	r3, #22
 8004d1e:	18fb      	adds	r3, r7, r3
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	2b55      	cmp	r3, #85	@ 0x55
 8004d24:	d803      	bhi.n	8004d2e <Process_ADC_Conversion_Values+0x3a>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	719a      	strb	r2, [r3, #6]
 8004d2c:	e007      	b.n	8004d3e <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 8004d2e:	2316      	movs	r3, #22
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d36:	d802      	bhi.n	8004d3e <Process_ADC_Conversion_Values+0x4a>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	719a      	strb	r2, [r3, #6]
	}

	//GET SPEED
	uint16_t temp_speed = ADCResultsDMA_ptr[SPEED_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	3302      	adds	r3, #2
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	2114      	movs	r1, #20
 8004d48:	187b      	adds	r3, r7, r1
 8004d4a:	0952      	lsrs	r2, r2, #5
 8004d4c:	801a      	strh	r2, [r3, #0]
	temp_speed <<= 3; //convert to 10-bit
 8004d4e:	187b      	adds	r3, r7, r1
 8004d50:	187a      	adds	r2, r7, r1
 8004d52:	8812      	ldrh	r2, [r2, #0]
 8004d54:	00d2      	lsls	r2, r2, #3
 8004d56:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = temp_speed;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	187a      	adds	r2, r7, r1
 8004d5c:	8812      	ldrh	r2, [r2, #0]
 8004d5e:	811a      	strh	r2, [r3, #8]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON

		uint8_t temp_depth = ADCResultsDMA_ptr[DEPTH_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	3304      	adds	r3, #4
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	095b      	lsrs	r3, r3, #5
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	2113      	movs	r1, #19
 8004d6e:	187b      	adds	r3, r7, r1
 8004d70:	701a      	strb	r2, [r3, #0]
		params_ptr->depth = temp_depth;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	187a      	adds	r2, r7, r1
 8004d76:	7812      	ldrb	r2, [r2, #0]
 8004d78:	729a      	strb	r2, [r3, #10]
	#endif

	//GET SYMMETRY
	#if SYMMETRY_ON_OR_OFF == ON

		uint16_t temp_symmetry = ADCResultsDMA_ptr[SYMMETRY_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	3306      	adds	r3, #6
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	2110      	movs	r1, #16
 8004d84:	187b      	adds	r3, r7, r1
 8004d86:	0952      	lsrs	r2, r2, #5
 8004d88:	801a      	strh	r2, [r3, #0]
		temp_symmetry <<= 1; //convert to 8-bit
 8004d8a:	187a      	adds	r2, r7, r1
 8004d8c:	187b      	adds	r3, r7, r1
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	18db      	adds	r3, r3, r3
 8004d92:	8013      	strh	r3, [r2, #0]
		params_ptr->symmetry = temp_symmetry;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	187a      	adds	r2, r7, r1
 8004d98:	8812      	ldrh	r2, [r2, #0]
 8004d9a:	819a      	strh	r2, [r3, #12]

	#endif

	//GET DELAY LINE READ POINTER OFFSET

	uint16_t temp_delay = ADCResultsDMA_ptr[DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	3308      	adds	r3, #8
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	210e      	movs	r1, #14
 8004da6:	187b      	adds	r3, r7, r1
 8004da8:	0952      	lsrs	r2, r2, #5
 8004daa:	801a      	strh	r2, [r3, #0]
	temp_delay <<= 2; //convert to 9-bit
 8004dac:	187b      	adds	r3, r7, r1
 8004dae:	187a      	adds	r2, r7, r1
 8004db0:	8812      	ldrh	r2, [r2, #0]
 8004db2:	0092      	lsls	r2, r2, #2
 8004db4:	801a      	strh	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = temp_delay;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	187a      	adds	r2, r7, r1
 8004dba:	8812      	ldrh	r2, [r2, #0]
 8004dbc:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8004dbe:	2301      	movs	r3, #1
}
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	b006      	add	sp, #24
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <Startup>:
#include "stm32g0xx_ll_lptim.h"
#include "stm32g0xx_hal_flash.h"

#include "CC_and_PC.h" //for some reason compiler shits itself if this is included in startup.h

uint8_t __attribute__((optimize("O0")))Startup(void){
 8004dc8:	b590      	push	{r4, r7, lr}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af02      	add	r7, sp, #8

	//Shouldn't be required now we have a default state set below, even in case flash not programmed //Set_Status_Bit(&statuses, Start_Required_Before_Sync_Mode); //set default mode to requiring START MIDI message before beginning a sync

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8004dce:	2007      	movs	r0, #7
 8004dd0:	f002 fd9b 	bl	800790a <HAL_NVIC_DisableIRQ>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 8004dd4:	4b5a      	ldr	r3, [pc, #360]	@ (8004f40 <Startup+0x178>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	4b59      	ldr	r3, [pc, #356]	@ (8004f40 <Startup+0x178>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2101      	movs	r1, #1
 8004de0:	430a      	orrs	r2, r1
 8004de2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM16
 8004de4:	4b57      	ldr	r3, [pc, #348]	@ (8004f44 <Startup+0x17c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	4b56      	ldr	r3, [pc, #344]	@ (8004f44 <Startup+0x17c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2101      	movs	r1, #1
 8004df0:	430a      	orrs	r2, r1
 8004df2:	60da      	str	r2, [r3, #12]

	//SET DEFAULT PIN STATES
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 8004df4:	2380      	movs	r3, #128	@ 0x80
 8004df6:	0099      	lsls	r1, r3, #2
 8004df8:	23a0      	movs	r3, #160	@ 0xa0
 8004dfa:	05db      	lsls	r3, r3, #23
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f003 fa3f 	bl	8008282 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_HIGH_GPIO_Port, HACK_POT_HIGH_Pin, 1);
 8004e04:	2380      	movs	r3, #128	@ 0x80
 8004e06:	0159      	lsls	r1, r3, #5
 8004e08:	23a0      	movs	r3, #160	@ 0xa0
 8004e0a:	05db      	lsls	r3, r3, #23
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	0018      	movs	r0, r3
 8004e10:	f003 fa37 	bl	8008282 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_LOW_GPIO_Port, HACK_POT_LOW_Pin, 0);
 8004e14:	23a0      	movs	r3, #160	@ 0xa0
 8004e16:	05db      	lsls	r3, r3, #23
 8004e18:	2200      	movs	r2, #0
 8004e1a:	2180      	movs	r1, #128	@ 0x80
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	f003 fa30 	bl	8008282 <HAL_GPIO_WritePin>

	//Point Arrays to Presets
	Initialise_Preset_Arrays();
 8004e22:	f7fb fb11 	bl	8000448 <Initialise_Preset_Arrays>

	//Read User Presets From Flash, regardless of whether they have been written to before
	Read_and_Interpret_User_Presets_From_Flash();
 8004e26:	f7fb fe3f 	bl	8000aa8 <Read_and_Interpret_User_Presets_From_Flash>

	//Read 'User Preset Used' Bytes, 'Start Required Before MIDI CLK' Byte, MIDI Omni On/Off Status Bit, and MIDI Basic Channel
	Read_and_Interpret_Misc_From_Flash(MISC_FLASH_MEMORY_ADDRESS, user_presets_used_array, &statuses, &MIDI_basic_channel, NUM_PRESETS);
 8004e2a:	4b47      	ldr	r3, [pc, #284]	@ (8004f48 <Startup+0x180>)
 8004e2c:	4a47      	ldr	r2, [pc, #284]	@ (8004f4c <Startup+0x184>)
 8004e2e:	4948      	ldr	r1, [pc, #288]	@ (8004f50 <Startup+0x188>)
 8004e30:	4c48      	ldr	r4, [pc, #288]	@ (8004f54 <Startup+0x18c>)
 8004e32:	2004      	movs	r0, #4
 8004e34:	9000      	str	r0, [sp, #0]
 8004e36:	0020      	movs	r0, r4
 8004e38:	f7fb fd29 	bl	800088e <Read_and_Interpret_Misc_From_Flash>

	//Set the Converted Preset Array to the Relevant Factory/User Preset depending upon the 'User Preset Used' Byte read from Flash
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array,
 8004e3c:	4b46      	ldr	r3, [pc, #280]	@ (8004f58 <Startup+0x190>)
 8004e3e:	4a47      	ldr	r2, [pc, #284]	@ (8004f5c <Startup+0x194>)
 8004e40:	4943      	ldr	r1, [pc, #268]	@ (8004f50 <Startup+0x188>)
 8004e42:	4847      	ldr	r0, [pc, #284]	@ (8004f60 <Startup+0x198>)
 8004e44:	2404      	movs	r4, #4
 8004e46:	9400      	str	r4, [sp, #0]
 8004e48:	f7fb fdd7 	bl	80009fa <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
												  	  	  	  factory_presets_array,
															  user_presets_array,
															  NUM_PRESETS);

	//GET ADC VALUES
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 8004e4c:	4b45      	ldr	r3, [pc, #276]	@ (8004f64 <Startup+0x19c>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	001a      	movs	r2, r3
 8004e52:	4945      	ldr	r1, [pc, #276]	@ (8004f68 <Startup+0x1a0>)
 8004e54:	4b45      	ldr	r3, [pc, #276]	@ (8004f6c <Startup+0x1a4>)
 8004e56:	0018      	movs	r0, r3
 8004e58:	f001 fe08 	bl	8006a6c <HAL_ADC_Start_DMA>

	//WAIT
	while(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){}; //wait while first ADC conversion is ongoing - raw and final values will be computed within this time
 8004e5c:	46c0      	nop			@ (mov r8, r8)
 8004e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8004f4c <Startup+0x184>)
 8004e60:	2110      	movs	r1, #16
 8004e62:	0018      	movs	r0, r3
 8004e64:	f001 f94a 	bl	80060fc <Get_Status_Bit>
 8004e68:	1e03      	subs	r3, r0, #0
 8004e6a:	d0f8      	beq.n	8004e5e <Startup+0x96>

	// re-initialise all values in delay line storage array to middle value of wave (if sine/triangle mode) or bottom of wave if square mode, as they are initialised to 0 on startup
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8004e6c:	1dbb      	adds	r3, r7, #6
 8004e6e:	2200      	movs	r2, #0
 8004e70:	801a      	strh	r2, [r3, #0]
 8004e72:	e02c      	b.n	8004ece <Startup+0x106>

		if(params.waveshape == SQUARE_MODE){
 8004e74:	4b3e      	ldr	r3, [pc, #248]	@ (8004f70 <Startup+0x1a8>)
 8004e76:	799b      	ldrb	r3, [r3, #6]
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d111      	bne.n	8004ea2 <Startup+0xda>

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
 8004e7e:	4b3c      	ldr	r3, [pc, #240]	@ (8004f70 <Startup+0x1a8>)
 8004e80:	7a9b      	ldrb	r3, [r3, #10]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	001a      	movs	r2, r3
 8004e86:	0013      	movs	r3, r2
 8004e88:	029b      	lsls	r3, r3, #10
 8004e8a:	1a9b      	subs	r3, r3, r2
 8004e8c:	11db      	asrs	r3, r3, #7
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	1dba      	adds	r2, r7, #6
 8004e92:	8812      	ldrh	r2, [r2, #0]
 8004e94:	4937      	ldr	r1, [pc, #220]	@ (8004f74 <Startup+0x1ac>)
 8004e96:	1acb      	subs	r3, r1, r3
 8004e98:	b299      	uxth	r1, r3
 8004e9a:	4b37      	ldr	r3, [pc, #220]	@ (8004f78 <Startup+0x1b0>)
 8004e9c:	0052      	lsls	r2, r2, #1
 8004e9e:	52d1      	strh	r1, [r2, r3]
 8004ea0:	e010      	b.n	8004ec4 <Startup+0xfc>
		}
		else{

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - (((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION) >> 1);
 8004ea2:	4b33      	ldr	r3, [pc, #204]	@ (8004f70 <Startup+0x1a8>)
 8004ea4:	7a9b      	ldrb	r3, [r3, #10]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	001a      	movs	r2, r3
 8004eaa:	0013      	movs	r3, r2
 8004eac:	029b      	lsls	r3, r3, #10
 8004eae:	1a9b      	subs	r3, r3, r2
 8004eb0:	121b      	asrs	r3, r3, #8
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	1dba      	adds	r2, r7, #6
 8004eb6:	8812      	ldrh	r2, [r2, #0]
 8004eb8:	492e      	ldr	r1, [pc, #184]	@ (8004f74 <Startup+0x1ac>)
 8004eba:	1acb      	subs	r3, r1, r3
 8004ebc:	b299      	uxth	r1, r3
 8004ebe:	4b2e      	ldr	r3, [pc, #184]	@ (8004f78 <Startup+0x1b0>)
 8004ec0:	0052      	lsls	r2, r2, #1
 8004ec2:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8004ec4:	1dbb      	adds	r3, r7, #6
 8004ec6:	881a      	ldrh	r2, [r3, #0]
 8004ec8:	1dbb      	adds	r3, r7, #6
 8004eca:	3201      	adds	r2, #1
 8004ecc:	801a      	strh	r2, [r3, #0]
 8004ece:	1dbb      	adds	r3, r7, #6
 8004ed0:	881a      	ldrh	r2, [r3, #0]
 8004ed2:	2380      	movs	r3, #128	@ 0x80
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d9cc      	bls.n	8004e74 <Startup+0xac>
		}
	}

	//PREPARE OSCILLATORS
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)STARTUP_MODE);
 8004eda:	4b25      	ldr	r3, [pc, #148]	@ (8004f70 <Startup+0x1a8>)
 8004edc:	2102      	movs	r1, #2
 8004ede:	0018      	movs	r0, r3
 8004ee0:	f7ff fd7c 	bl	80049dc <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8004ee4:	4a24      	ldr	r2, [pc, #144]	@ (8004f78 <Startup+0x1b0>)
 8004ee6:	4b22      	ldr	r3, [pc, #136]	@ (8004f70 <Startup+0x1a8>)
 8004ee8:	0011      	movs	r1, r2
 8004eea:	0018      	movs	r0, r3
 8004eec:	f7ff fe6c 	bl	8004bc8 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	Set_Oscillator_Values(&params);
 8004ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8004f70 <Startup+0x1a8>)
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f7ff fd46 	bl	8004984 <Set_Oscillator_Values>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(&htim1, TIM_CHANNEL_2, TIM_CHANNEL_4);
 8004ef8:	4b20      	ldr	r3, [pc, #128]	@ (8004f7c <Startup+0x1b4>)
 8004efa:	220c      	movs	r2, #12
 8004efc:	2104      	movs	r1, #4
 8004efe:	0018      	movs	r0, r3
 8004f00:	f7ff fcb4 	bl	800486c <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>
	Start_Freq_Gen_Timer();
 8004f04:	f7ff fcee 	bl	80048e4 <Start_Freq_Gen_Timer>

	//START UART RECEIVE
	Start_UART_Receive();
 8004f08:	f7fc fa46 	bl	8001398 <Start_UART_Receive>

	//START IP CAP
	Start_Input_Capture_Timer();
 8004f0c:	f7ff fb9e 	bl	800464c <Start_Input_Capture_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 8004f10:	f001 f8ec 	bl	80060ec <Global_Interrupt_Enable>

	//ENABLE TAP-TEMPO SWITCH CHECKING
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8004f14:	4b1a      	ldr	r3, [pc, #104]	@ (8004f80 <Startup+0x1b8>)
 8004f16:	22fa      	movs	r2, #250	@ 0xfa
 8004f18:	21fa      	movs	r1, #250	@ 0xfa
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f003 faa8 	bl	8008470 <HAL_LPTIM_SetOnce_Start_IT>

	LED_fsm.current_state = LED_OFF;
 8004f20:	4b18      	ldr	r3, [pc, #96]	@ (8004f84 <Startup+0x1bc>)
 8004f22:	2201      	movs	r2, #1
 8004f24:	701a      	strb	r2, [r3, #0]

	//ENABLE LED TIMER
	Start_OC_TIM(&htim14, TIM_CHANNEL_1);
 8004f26:	4b18      	ldr	r3, [pc, #96]	@ (8004f88 <Startup+0x1c0>)
 8004f28:	2100      	movs	r1, #0
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	f001 f863 	bl	8005ff6 <Start_OC_TIM>

	//ENABLE EXTI
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004f30:	2007      	movs	r0, #7
 8004f32:	f002 fcda 	bl	80078ea <HAL_NVIC_EnableIRQ>

	return 1;
 8004f36:	2301      	movs	r3, #1
}
 8004f38:	0018      	movs	r0, r3
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	b003      	add	sp, #12
 8004f3e:	bd90      	pop	{r4, r7, pc}
 8004f40:	20000814 	.word	0x20000814
 8004f44:	20000758 	.word	0x20000758
 8004f48:	200004ca 	.word	0x200004ca
 8004f4c:	20000c38 	.word	0x20000c38
 8004f50:	200004c0 	.word	0x200004c0
 8004f54:	0800f820 	.word	0x0800f820
 8004f58:	20000484 	.word	0x20000484
 8004f5c:	20000474 	.word	0x20000474
 8004f60:	20000494 	.word	0x20000494
 8004f64:	0800de10 	.word	0x0800de10
 8004f68:	20000c44 	.word	0x20000c44
 8004f6c:	200004fc 	.word	0x200004fc
 8004f70:	20000c50 	.word	0x20000c50
 8004f74:	000003ff 	.word	0x000003ff
 8004f78:	20000028 	.word	0x20000028
 8004f7c:	2000098c 	.word	0x2000098c
 8004f80:	20000bcc 	.word	0x20000bcc
 8004f84:	20000448 	.word	0x20000448
 8004f88:	200005e0 	.word	0x200005e0

08004f8c <Advance_Pending_States>:
volatile struct IP_CAP_FSM IP_CAP_fsm = {.current_state = IDLE, .prev_state = IP_CAP_NONE};
volatile enum MIDI_CLK_FSM_State MIDI_CLK_fsm = NOT_COMPILING;
volatile struct LED_FSM LED_fsm = {.current_state = LED_OFF, .prev_state = LED_NONE};

//FUNCTION DEFINITIONS
uint8_t Advance_Pending_States(void){
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0

	//UPDATE SPEED FSM
	union Speed_FSM_States current_state = speed_fsm.current_state;
 8004f92:	1d3b      	adds	r3, r7, #4
 8004f94:	4a12      	ldr	r2, [pc, #72]	@ (8004fe0 <Advance_Pending_States+0x54>)
 8004f96:	7812      	ldrb	r2, [r2, #0]
 8004f98:	701a      	strb	r2, [r3, #0]

	if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8004f9a:	4b11      	ldr	r3, [pc, #68]	@ (8004fe0 <Advance_Pending_States+0x54>)
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b05      	cmp	r3, #5
 8004fa2:	d103      	bne.n	8004fac <Advance_Pending_States+0x20>

		speed_fsm.current_state.speed_exclusive_state = TAP_MODE;
 8004fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe0 <Advance_Pending_States+0x54>)
 8004fa6:	2204      	movs	r2, #4
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	e007      	b.n	8004fbc <Advance_Pending_States+0x30>
	}
	else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){
 8004fac:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe0 <Advance_Pending_States+0x54>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b07      	cmp	r3, #7
 8004fb4:	d102      	bne.n	8004fbc <Advance_Pending_States+0x30>

		speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8004fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe0 <Advance_Pending_States+0x54>)
 8004fb8:	2206      	movs	r2, #6
 8004fba:	701a      	strb	r2, [r3, #0]
	}

	//DON'T ADD MIDI CLK CODE


	if(!((current_state.speed_exclusive_state == CLK_IN_MODE) || (current_state.speed_exclusive_state == TAP_MODE))){
 8004fbc:	1d3b      	adds	r3, r7, #4
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b06      	cmp	r3, #6
 8004fc2:	d007      	beq.n	8004fd4 <Advance_Pending_States+0x48>
 8004fc4:	1d3b      	adds	r3, r7, #4
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b04      	cmp	r3, #4
 8004fca:	d003      	beq.n	8004fd4 <Advance_Pending_States+0x48>

		speed_fsm.prev_state = current_state;
 8004fcc:	4b04      	ldr	r3, [pc, #16]	@ (8004fe0 <Advance_Pending_States+0x54>)
 8004fce:	1d3a      	adds	r2, r7, #4
 8004fd0:	7812      	ldrb	r2, [r2, #0]
 8004fd2:	705a      	strb	r2, [r3, #1]
	}

	return 1;
 8004fd4:	2301      	movs	r3, #1
}
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	b002      	add	sp, #8
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	46c0      	nop			@ (mov r8, r8)
 8004fe0:	20000430 	.word	0x20000430

08004fe4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fea:	4b0f      	ldr	r3, [pc, #60]	@ (8005028 <HAL_MspInit+0x44>)
 8004fec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fee:	4b0e      	ldr	r3, [pc, #56]	@ (8005028 <HAL_MspInit+0x44>)
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8005028 <HAL_MspInit+0x44>)
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	607b      	str	r3, [r7, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005002:	4b09      	ldr	r3, [pc, #36]	@ (8005028 <HAL_MspInit+0x44>)
 8005004:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005006:	4b08      	ldr	r3, [pc, #32]	@ (8005028 <HAL_MspInit+0x44>)
 8005008:	2180      	movs	r1, #128	@ 0x80
 800500a:	0549      	lsls	r1, r1, #21
 800500c:	430a      	orrs	r2, r1
 800500e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005010:	4b05      	ldr	r3, [pc, #20]	@ (8005028 <HAL_MspInit+0x44>)
 8005012:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005014:	2380      	movs	r3, #128	@ 0x80
 8005016:	055b      	lsls	r3, r3, #21
 8005018:	4013      	ands	r3, r2
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800501e:	46c0      	nop			@ (mov r8, r8)
 8005020:	46bd      	mov	sp, r7
 8005022:	b002      	add	sp, #8
 8005024:	bd80      	pop	{r7, pc}
 8005026:	46c0      	nop			@ (mov r8, r8)
 8005028:	40021000 	.word	0x40021000

0800502c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800502c:	b590      	push	{r4, r7, lr}
 800502e:	b08b      	sub	sp, #44	@ 0x2c
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005034:	2414      	movs	r4, #20
 8005036:	193b      	adds	r3, r7, r4
 8005038:	0018      	movs	r0, r3
 800503a:	2314      	movs	r3, #20
 800503c:	001a      	movs	r2, r3
 800503e:	2100      	movs	r1, #0
 8005040:	f008 fa94 	bl	800d56c <memset>
  if(hadc->Instance==ADC1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a2e      	ldr	r2, [pc, #184]	@ (8005104 <HAL_ADC_MspInit+0xd8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d155      	bne.n	80050fa <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800504e:	4b2e      	ldr	r3, [pc, #184]	@ (8005108 <HAL_ADC_MspInit+0xdc>)
 8005050:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005052:	4b2d      	ldr	r3, [pc, #180]	@ (8005108 <HAL_ADC_MspInit+0xdc>)
 8005054:	2180      	movs	r1, #128	@ 0x80
 8005056:	0349      	lsls	r1, r1, #13
 8005058:	430a      	orrs	r2, r1
 800505a:	641a      	str	r2, [r3, #64]	@ 0x40
 800505c:	4b2a      	ldr	r3, [pc, #168]	@ (8005108 <HAL_ADC_MspInit+0xdc>)
 800505e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005060:	2380      	movs	r3, #128	@ 0x80
 8005062:	035b      	lsls	r3, r3, #13
 8005064:	4013      	ands	r3, r2
 8005066:	613b      	str	r3, [r7, #16]
 8005068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800506a:	4b27      	ldr	r3, [pc, #156]	@ (8005108 <HAL_ADC_MspInit+0xdc>)
 800506c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800506e:	4b26      	ldr	r3, [pc, #152]	@ (8005108 <HAL_ADC_MspInit+0xdc>)
 8005070:	2101      	movs	r1, #1
 8005072:	430a      	orrs	r2, r1
 8005074:	635a      	str	r2, [r3, #52]	@ 0x34
 8005076:	4b24      	ldr	r3, [pc, #144]	@ (8005108 <HAL_ADC_MspInit+0xdc>)
 8005078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800507a:	2201      	movs	r2, #1
 800507c:	4013      	ands	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005082:	193b      	adds	r3, r7, r4
 8005084:	2273      	movs	r2, #115	@ 0x73
 8005086:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005088:	193b      	adds	r3, r7, r4
 800508a:	2203      	movs	r2, #3
 800508c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508e:	193b      	adds	r3, r7, r4
 8005090:	2200      	movs	r2, #0
 8005092:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005094:	193a      	adds	r2, r7, r4
 8005096:	23a0      	movs	r3, #160	@ 0xa0
 8005098:	05db      	lsls	r3, r3, #23
 800509a:	0011      	movs	r1, r2
 800509c:	0018      	movs	r0, r3
 800509e:	f002 ff6f 	bl	8007f80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80050a2:	4b1a      	ldr	r3, [pc, #104]	@ (800510c <HAL_ADC_MspInit+0xe0>)
 80050a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005110 <HAL_ADC_MspInit+0xe4>)
 80050a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80050a8:	4b18      	ldr	r3, [pc, #96]	@ (800510c <HAL_ADC_MspInit+0xe0>)
 80050aa:	2205      	movs	r2, #5
 80050ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050ae:	4b17      	ldr	r3, [pc, #92]	@ (800510c <HAL_ADC_MspInit+0xe0>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80050b4:	4b15      	ldr	r3, [pc, #84]	@ (800510c <HAL_ADC_MspInit+0xe0>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80050ba:	4b14      	ldr	r3, [pc, #80]	@ (800510c <HAL_ADC_MspInit+0xe0>)
 80050bc:	2280      	movs	r2, #128	@ 0x80
 80050be:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80050c0:	4b12      	ldr	r3, [pc, #72]	@ (800510c <HAL_ADC_MspInit+0xe0>)
 80050c2:	2280      	movs	r2, #128	@ 0x80
 80050c4:	0052      	lsls	r2, r2, #1
 80050c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80050c8:	4b10      	ldr	r3, [pc, #64]	@ (800510c <HAL_ADC_MspInit+0xe0>)
 80050ca:	2280      	movs	r2, #128	@ 0x80
 80050cc:	00d2      	lsls	r2, r2, #3
 80050ce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80050d0:	4b0e      	ldr	r3, [pc, #56]	@ (800510c <HAL_ADC_MspInit+0xe0>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80050d6:	4b0d      	ldr	r3, [pc, #52]	@ (800510c <HAL_ADC_MspInit+0xe0>)
 80050d8:	2280      	movs	r2, #128	@ 0x80
 80050da:	0192      	lsls	r2, r2, #6
 80050dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80050de:	4b0b      	ldr	r3, [pc, #44]	@ (800510c <HAL_ADC_MspInit+0xe0>)
 80050e0:	0018      	movs	r0, r3
 80050e2:	f002 fc2f 	bl	8007944 <HAL_DMA_Init>
 80050e6:	1e03      	subs	r3, r0, #0
 80050e8:	d001      	beq.n	80050ee <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80050ea:	f7fd f8d3 	bl	8002294 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a06      	ldr	r2, [pc, #24]	@ (800510c <HAL_ADC_MspInit+0xe0>)
 80050f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80050f4:	4b05      	ldr	r3, [pc, #20]	@ (800510c <HAL_ADC_MspInit+0xe0>)
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80050fa:	46c0      	nop			@ (mov r8, r8)
 80050fc:	46bd      	mov	sp, r7
 80050fe:	b00b      	add	sp, #44	@ 0x2c
 8005100:	bd90      	pop	{r4, r7, pc}
 8005102:	46c0      	nop			@ (mov r8, r8)
 8005104:	40012400 	.word	0x40012400
 8005108:	40021000 	.word	0x40021000
 800510c:	20000584 	.word	0x20000584
 8005110:	40020008 	.word	0x40020008

08005114 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8005114:	b590      	push	{r4, r7, lr}
 8005116:	b097      	sub	sp, #92	@ 0x5c
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800511c:	2344      	movs	r3, #68	@ 0x44
 800511e:	18fb      	adds	r3, r7, r3
 8005120:	0018      	movs	r0, r3
 8005122:	2314      	movs	r3, #20
 8005124:	001a      	movs	r2, r3
 8005126:	2100      	movs	r1, #0
 8005128:	f008 fa20 	bl	800d56c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800512c:	241c      	movs	r4, #28
 800512e:	193b      	adds	r3, r7, r4
 8005130:	0018      	movs	r0, r3
 8005132:	2328      	movs	r3, #40	@ 0x28
 8005134:	001a      	movs	r2, r3
 8005136:	2100      	movs	r1, #0
 8005138:	f008 fa18 	bl	800d56c <memset>
  if(hlptim->Instance==LPTIM1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a46      	ldr	r2, [pc, #280]	@ (800525c <HAL_LPTIM_MspInit+0x148>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d13e      	bne.n	80051c4 <HAL_LPTIM_MspInit+0xb0>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8005146:	193b      	adds	r3, r7, r4
 8005148:	2280      	movs	r2, #128	@ 0x80
 800514a:	0092      	lsls	r2, r2, #2
 800514c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 800514e:	193b      	adds	r3, r7, r4
 8005150:	2200      	movs	r2, #0
 8005152:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005154:	193b      	adds	r3, r7, r4
 8005156:	0018      	movs	r0, r3
 8005158:	f004 f9f8 	bl	800954c <HAL_RCCEx_PeriphCLKConfig>
 800515c:	1e03      	subs	r3, r0, #0
 800515e:	d001      	beq.n	8005164 <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 8005160:	f7fd f898 	bl	8002294 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8005164:	4b3e      	ldr	r3, [pc, #248]	@ (8005260 <HAL_LPTIM_MspInit+0x14c>)
 8005166:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005168:	4b3d      	ldr	r3, [pc, #244]	@ (8005260 <HAL_LPTIM_MspInit+0x14c>)
 800516a:	2180      	movs	r1, #128	@ 0x80
 800516c:	0609      	lsls	r1, r1, #24
 800516e:	430a      	orrs	r2, r1
 8005170:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005172:	4b3b      	ldr	r3, [pc, #236]	@ (8005260 <HAL_LPTIM_MspInit+0x14c>)
 8005174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005176:	0fdb      	lsrs	r3, r3, #31
 8005178:	07db      	lsls	r3, r3, #31
 800517a:	61bb      	str	r3, [r7, #24]
 800517c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800517e:	4b38      	ldr	r3, [pc, #224]	@ (8005260 <HAL_LPTIM_MspInit+0x14c>)
 8005180:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005182:	4b37      	ldr	r3, [pc, #220]	@ (8005260 <HAL_LPTIM_MspInit+0x14c>)
 8005184:	2102      	movs	r1, #2
 8005186:	430a      	orrs	r2, r1
 8005188:	635a      	str	r2, [r3, #52]	@ 0x34
 800518a:	4b35      	ldr	r3, [pc, #212]	@ (8005260 <HAL_LPTIM_MspInit+0x14c>)
 800518c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800518e:	2202      	movs	r2, #2
 8005190:	4013      	ands	r3, r2
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	697b      	ldr	r3, [r7, #20]
    /**LPTIM1 GPIO Configuration
    PB0     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005196:	2144      	movs	r1, #68	@ 0x44
 8005198:	187b      	adds	r3, r7, r1
 800519a:	2201      	movs	r2, #1
 800519c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800519e:	187b      	adds	r3, r7, r1
 80051a0:	2202      	movs	r2, #2
 80051a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a4:	187b      	adds	r3, r7, r1
 80051a6:	2200      	movs	r2, #0
 80051a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051aa:	187b      	adds	r3, r7, r1
 80051ac:	2200      	movs	r2, #0
 80051ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM1;
 80051b0:	187b      	adds	r3, r7, r1
 80051b2:	2205      	movs	r2, #5
 80051b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051b6:	187b      	adds	r3, r7, r1
 80051b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005264 <HAL_LPTIM_MspInit+0x150>)
 80051ba:	0019      	movs	r1, r3
 80051bc:	0010      	movs	r0, r2
 80051be:	f002 fedf 	bl	8007f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 80051c2:	e046      	b.n	8005252 <HAL_LPTIM_MspInit+0x13e>
  else if(hlptim->Instance==LPTIM2)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a27      	ldr	r2, [pc, #156]	@ (8005268 <HAL_LPTIM_MspInit+0x154>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d141      	bne.n	8005252 <HAL_LPTIM_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 80051ce:	211c      	movs	r1, #28
 80051d0:	187b      	adds	r3, r7, r1
 80051d2:	2280      	movs	r2, #128	@ 0x80
 80051d4:	00d2      	lsls	r2, r2, #3
 80051d6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK1;
 80051d8:	187b      	adds	r3, r7, r1
 80051da:	2200      	movs	r2, #0
 80051dc:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051de:	187b      	adds	r3, r7, r1
 80051e0:	0018      	movs	r0, r3
 80051e2:	f004 f9b3 	bl	800954c <HAL_RCCEx_PeriphCLKConfig>
 80051e6:	1e03      	subs	r3, r0, #0
 80051e8:	d001      	beq.n	80051ee <HAL_LPTIM_MspInit+0xda>
      Error_Handler();
 80051ea:	f7fd f853 	bl	8002294 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80051ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005260 <HAL_LPTIM_MspInit+0x14c>)
 80051f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005260 <HAL_LPTIM_MspInit+0x14c>)
 80051f4:	2180      	movs	r1, #128	@ 0x80
 80051f6:	05c9      	lsls	r1, r1, #23
 80051f8:	430a      	orrs	r2, r1
 80051fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80051fc:	4b18      	ldr	r3, [pc, #96]	@ (8005260 <HAL_LPTIM_MspInit+0x14c>)
 80051fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005200:	2380      	movs	r3, #128	@ 0x80
 8005202:	05db      	lsls	r3, r3, #23
 8005204:	4013      	ands	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800520a:	4b15      	ldr	r3, [pc, #84]	@ (8005260 <HAL_LPTIM_MspInit+0x14c>)
 800520c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800520e:	4b14      	ldr	r3, [pc, #80]	@ (8005260 <HAL_LPTIM_MspInit+0x14c>)
 8005210:	2101      	movs	r1, #1
 8005212:	430a      	orrs	r2, r1
 8005214:	635a      	str	r2, [r3, #52]	@ 0x34
 8005216:	4b12      	ldr	r3, [pc, #72]	@ (8005260 <HAL_LPTIM_MspInit+0x14c>)
 8005218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800521a:	2201      	movs	r2, #1
 800521c:	4013      	ands	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005222:	2144      	movs	r1, #68	@ 0x44
 8005224:	187b      	adds	r3, r7, r1
 8005226:	2280      	movs	r2, #128	@ 0x80
 8005228:	0052      	lsls	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800522c:	187b      	adds	r3, r7, r1
 800522e:	2202      	movs	r2, #2
 8005230:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005232:	187b      	adds	r3, r7, r1
 8005234:	2200      	movs	r2, #0
 8005236:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005238:	187b      	adds	r3, r7, r1
 800523a:	2200      	movs	r2, #0
 800523c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM2;
 800523e:	187b      	adds	r3, r7, r1
 8005240:	2205      	movs	r2, #5
 8005242:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005244:	187a      	adds	r2, r7, r1
 8005246:	23a0      	movs	r3, #160	@ 0xa0
 8005248:	05db      	lsls	r3, r3, #23
 800524a:	0011      	movs	r1, r2
 800524c:	0018      	movs	r0, r3
 800524e:	f002 fe97 	bl	8007f80 <HAL_GPIO_Init>
}
 8005252:	46c0      	nop			@ (mov r8, r8)
 8005254:	46bd      	mov	sp, r7
 8005256:	b017      	add	sp, #92	@ 0x5c
 8005258:	bd90      	pop	{r4, r7, pc}
 800525a:	46c0      	nop			@ (mov r8, r8)
 800525c:	40007c00 	.word	0x40007c00
 8005260:	40021000 	.word	0x40021000
 8005264:	50000400 	.word	0x50000400
 8005268:	40009400 	.word	0x40009400

0800526c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800526c:	b590      	push	{r4, r7, lr}
 800526e:	b099      	sub	sp, #100	@ 0x64
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005274:	234c      	movs	r3, #76	@ 0x4c
 8005276:	18fb      	adds	r3, r7, r3
 8005278:	0018      	movs	r0, r3
 800527a:	2314      	movs	r3, #20
 800527c:	001a      	movs	r2, r3
 800527e:	2100      	movs	r1, #0
 8005280:	f008 f974 	bl	800d56c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005284:	2424      	movs	r4, #36	@ 0x24
 8005286:	193b      	adds	r3, r7, r4
 8005288:	0018      	movs	r0, r3
 800528a:	2328      	movs	r3, #40	@ 0x28
 800528c:	001a      	movs	r2, r3
 800528e:	2100      	movs	r1, #0
 8005290:	f008 f96c 	bl	800d56c <memset>
  if(htim_base->Instance==TIM1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a68      	ldr	r2, [pc, #416]	@ (800543c <HAL_TIM_Base_MspInit+0x1d0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d11d      	bne.n	80052da <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800529e:	193b      	adds	r3, r7, r4
 80052a0:	2280      	movs	r2, #128	@ 0x80
 80052a2:	0392      	lsls	r2, r2, #14
 80052a4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80052a6:	193b      	adds	r3, r7, r4
 80052a8:	2200      	movs	r2, #0
 80052aa:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80052ac:	193b      	adds	r3, r7, r4
 80052ae:	0018      	movs	r0, r3
 80052b0:	f004 f94c 	bl	800954c <HAL_RCCEx_PeriphCLKConfig>
 80052b4:	1e03      	subs	r3, r0, #0
 80052b6:	d001      	beq.n	80052bc <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 80052b8:	f7fc ffec 	bl	8002294 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80052bc:	4b60      	ldr	r3, [pc, #384]	@ (8005440 <HAL_TIM_Base_MspInit+0x1d4>)
 80052be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052c0:	4b5f      	ldr	r3, [pc, #380]	@ (8005440 <HAL_TIM_Base_MspInit+0x1d4>)
 80052c2:	2180      	movs	r1, #128	@ 0x80
 80052c4:	0109      	lsls	r1, r1, #4
 80052c6:	430a      	orrs	r2, r1
 80052c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80052ca:	4b5d      	ldr	r3, [pc, #372]	@ (8005440 <HAL_TIM_Base_MspInit+0x1d4>)
 80052cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052ce:	2380      	movs	r3, #128	@ 0x80
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	4013      	ands	r3, r2
 80052d4:	623b      	str	r3, [r7, #32]
 80052d6:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }

}
 80052d8:	e0ab      	b.n	8005432 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM2)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	2380      	movs	r3, #128	@ 0x80
 80052e0:	05db      	lsls	r3, r3, #23
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d138      	bne.n	8005358 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80052e6:	4b56      	ldr	r3, [pc, #344]	@ (8005440 <HAL_TIM_Base_MspInit+0x1d4>)
 80052e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052ea:	4b55      	ldr	r3, [pc, #340]	@ (8005440 <HAL_TIM_Base_MspInit+0x1d4>)
 80052ec:	2101      	movs	r1, #1
 80052ee:	430a      	orrs	r2, r1
 80052f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80052f2:	4b53      	ldr	r3, [pc, #332]	@ (8005440 <HAL_TIM_Base_MspInit+0x1d4>)
 80052f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f6:	2201      	movs	r2, #1
 80052f8:	4013      	ands	r3, r2
 80052fa:	61fb      	str	r3, [r7, #28]
 80052fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052fe:	4b50      	ldr	r3, [pc, #320]	@ (8005440 <HAL_TIM_Base_MspInit+0x1d4>)
 8005300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005302:	4b4f      	ldr	r3, [pc, #316]	@ (8005440 <HAL_TIM_Base_MspInit+0x1d4>)
 8005304:	2101      	movs	r1, #1
 8005306:	430a      	orrs	r2, r1
 8005308:	635a      	str	r2, [r3, #52]	@ 0x34
 800530a:	4b4d      	ldr	r3, [pc, #308]	@ (8005440 <HAL_TIM_Base_MspInit+0x1d4>)
 800530c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800530e:	2201      	movs	r2, #1
 8005310:	4013      	ands	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
 8005314:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 8005316:	214c      	movs	r1, #76	@ 0x4c
 8005318:	187b      	adds	r3, r7, r1
 800531a:	2280      	movs	r2, #128	@ 0x80
 800531c:	0212      	lsls	r2, r2, #8
 800531e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005320:	187b      	adds	r3, r7, r1
 8005322:	2202      	movs	r2, #2
 8005324:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP; //even though we do not 'technically' need a pullup as a push-pull O/P will be driving the I/P cap pin, I think it is better to ensure the I/P cap input properly idles
 8005326:	187b      	adds	r3, r7, r1
 8005328:	2201      	movs	r2, #1
 800532a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800532c:	187b      	adds	r3, r7, r1
 800532e:	2200      	movs	r2, #0
 8005330:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8005332:	187b      	adds	r3, r7, r1
 8005334:	2202      	movs	r2, #2
 8005336:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 8005338:	187a      	adds	r2, r7, r1
 800533a:	23a0      	movs	r3, #160	@ 0xa0
 800533c:	05db      	lsls	r3, r3, #23
 800533e:	0011      	movs	r1, r2
 8005340:	0018      	movs	r0, r3
 8005342:	f002 fe1d 	bl	8007f80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 2);
 8005346:	2202      	movs	r2, #2
 8005348:	2102      	movs	r1, #2
 800534a:	200f      	movs	r0, #15
 800534c:	f002 fab8 	bl	80078c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005350:	200f      	movs	r0, #15
 8005352:	f002 faca 	bl	80078ea <HAL_NVIC_EnableIRQ>
}
 8005356:	e06c      	b.n	8005432 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM3)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a39      	ldr	r2, [pc, #228]	@ (8005444 <HAL_TIM_Base_MspInit+0x1d8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d114      	bne.n	800538c <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005362:	4b37      	ldr	r3, [pc, #220]	@ (8005440 <HAL_TIM_Base_MspInit+0x1d4>)
 8005364:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005366:	4b36      	ldr	r3, [pc, #216]	@ (8005440 <HAL_TIM_Base_MspInit+0x1d4>)
 8005368:	2102      	movs	r1, #2
 800536a:	430a      	orrs	r2, r1
 800536c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800536e:	4b34      	ldr	r3, [pc, #208]	@ (8005440 <HAL_TIM_Base_MspInit+0x1d4>)
 8005370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005372:	2202      	movs	r2, #2
 8005374:	4013      	ands	r3, r2
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800537a:	2200      	movs	r2, #0
 800537c:	2100      	movs	r1, #0
 800537e:	2010      	movs	r0, #16
 8005380:	f002 fa9e 	bl	80078c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005384:	2010      	movs	r0, #16
 8005386:	f002 fab0 	bl	80078ea <HAL_NVIC_EnableIRQ>
}
 800538a:	e052      	b.n	8005432 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM16)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a2d      	ldr	r2, [pc, #180]	@ (8005448 <HAL_TIM_Base_MspInit+0x1dc>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d116      	bne.n	80053c4 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005396:	4b2a      	ldr	r3, [pc, #168]	@ (8005440 <HAL_TIM_Base_MspInit+0x1d4>)
 8005398:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800539a:	4b29      	ldr	r3, [pc, #164]	@ (8005440 <HAL_TIM_Base_MspInit+0x1d4>)
 800539c:	2180      	movs	r1, #128	@ 0x80
 800539e:	0289      	lsls	r1, r1, #10
 80053a0:	430a      	orrs	r2, r1
 80053a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80053a4:	4b26      	ldr	r3, [pc, #152]	@ (8005440 <HAL_TIM_Base_MspInit+0x1d4>)
 80053a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053a8:	2380      	movs	r3, #128	@ 0x80
 80053aa:	029b      	lsls	r3, r3, #10
 80053ac:	4013      	ands	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80053b2:	2200      	movs	r2, #0
 80053b4:	2100      	movs	r1, #0
 80053b6:	2015      	movs	r0, #21
 80053b8:	f002 fa82 	bl	80078c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80053bc:	2015      	movs	r0, #21
 80053be:	f002 fa94 	bl	80078ea <HAL_NVIC_EnableIRQ>
}
 80053c2:	e036      	b.n	8005432 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM17)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a20      	ldr	r2, [pc, #128]	@ (800544c <HAL_TIM_Base_MspInit+0x1e0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d116      	bne.n	80053fc <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80053ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005440 <HAL_TIM_Base_MspInit+0x1d4>)
 80053d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005440 <HAL_TIM_Base_MspInit+0x1d4>)
 80053d4:	2180      	movs	r1, #128	@ 0x80
 80053d6:	02c9      	lsls	r1, r1, #11
 80053d8:	430a      	orrs	r2, r1
 80053da:	641a      	str	r2, [r3, #64]	@ 0x40
 80053dc:	4b18      	ldr	r3, [pc, #96]	@ (8005440 <HAL_TIM_Base_MspInit+0x1d4>)
 80053de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053e0:	2380      	movs	r3, #128	@ 0x80
 80053e2:	02db      	lsls	r3, r3, #11
 80053e4:	4013      	ands	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 80053ea:	2203      	movs	r2, #3
 80053ec:	2103      	movs	r1, #3
 80053ee:	2016      	movs	r0, #22
 80053f0:	f002 fa66 	bl	80078c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80053f4:	2016      	movs	r0, #22
 80053f6:	f002 fa78 	bl	80078ea <HAL_NVIC_EnableIRQ>
}
 80053fa:	e01a      	b.n	8005432 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM14)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a13      	ldr	r2, [pc, #76]	@ (8005450 <HAL_TIM_Base_MspInit+0x1e4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d115      	bne.n	8005432 <HAL_TIM_Base_MspInit+0x1c6>
      __HAL_RCC_TIM14_CLK_ENABLE();
 8005406:	4b0e      	ldr	r3, [pc, #56]	@ (8005440 <HAL_TIM_Base_MspInit+0x1d4>)
 8005408:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800540a:	4b0d      	ldr	r3, [pc, #52]	@ (8005440 <HAL_TIM_Base_MspInit+0x1d4>)
 800540c:	2180      	movs	r1, #128	@ 0x80
 800540e:	0209      	lsls	r1, r1, #8
 8005410:	430a      	orrs	r2, r1
 8005412:	641a      	str	r2, [r3, #64]	@ 0x40
 8005414:	4b0a      	ldr	r3, [pc, #40]	@ (8005440 <HAL_TIM_Base_MspInit+0x1d4>)
 8005416:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005418:	2380      	movs	r3, #128	@ 0x80
 800541a:	021b      	lsls	r3, r3, #8
 800541c:	4013      	ands	r3, r2
 800541e:	60bb      	str	r3, [r7, #8]
 8005420:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8005422:	2203      	movs	r2, #3
 8005424:	2103      	movs	r1, #3
 8005426:	2013      	movs	r0, #19
 8005428:	f002 fa4a 	bl	80078c0 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800542c:	2013      	movs	r0, #19
 800542e:	f002 fa5c 	bl	80078ea <HAL_NVIC_EnableIRQ>
}
 8005432:	46c0      	nop			@ (mov r8, r8)
 8005434:	46bd      	mov	sp, r7
 8005436:	b019      	add	sp, #100	@ 0x64
 8005438:	bd90      	pop	{r4, r7, pc}
 800543a:	46c0      	nop			@ (mov r8, r8)
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40021000 	.word	0x40021000
 8005444:	40000400 	.word	0x40000400
 8005448:	40014400 	.word	0x40014400
 800544c:	40014800 	.word	0x40014800
 8005450:	40002000 	.word	0x40002000

08005454 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005454:	b590      	push	{r4, r7, lr}
 8005456:	b08b      	sub	sp, #44	@ 0x2c
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800545c:	2414      	movs	r4, #20
 800545e:	193b      	adds	r3, r7, r4
 8005460:	0018      	movs	r0, r3
 8005462:	2314      	movs	r3, #20
 8005464:	001a      	movs	r2, r3
 8005466:	2100      	movs	r1, #0
 8005468:	f008 f880 	bl	800d56c <memset>
  if(htim->Instance==TIM1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a25      	ldr	r2, [pc, #148]	@ (8005508 <HAL_TIM_MspPostInit+0xb4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d144      	bne.n	8005500 <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005476:	4b25      	ldr	r3, [pc, #148]	@ (800550c <HAL_TIM_MspPostInit+0xb8>)
 8005478:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800547a:	4b24      	ldr	r3, [pc, #144]	@ (800550c <HAL_TIM_MspPostInit+0xb8>)
 800547c:	2101      	movs	r1, #1
 800547e:	430a      	orrs	r2, r1
 8005480:	635a      	str	r2, [r3, #52]	@ 0x34
 8005482:	4b22      	ldr	r3, [pc, #136]	@ (800550c <HAL_TIM_MspPostInit+0xb8>)
 8005484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005486:	2201      	movs	r2, #1
 8005488:	4013      	ands	r3, r2
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800548e:	4b1f      	ldr	r3, [pc, #124]	@ (800550c <HAL_TIM_MspPostInit+0xb8>)
 8005490:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005492:	4b1e      	ldr	r3, [pc, #120]	@ (800550c <HAL_TIM_MspPostInit+0xb8>)
 8005494:	2102      	movs	r1, #2
 8005496:	430a      	orrs	r2, r1
 8005498:	635a      	str	r2, [r3, #52]	@ 0x34
 800549a:	4b1c      	ldr	r3, [pc, #112]	@ (800550c <HAL_TIM_MspPostInit+0xb8>)
 800549c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800549e:	2202      	movs	r2, #2
 80054a0:	4013      	ands	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11 [PA9]     ------> TIM1_CH4
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
 80054a6:	193b      	adds	r3, r7, r4
 80054a8:	2280      	movs	r2, #128	@ 0x80
 80054aa:	0112      	lsls	r2, r2, #4
 80054ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ae:	193b      	adds	r3, r7, r4
 80054b0:	2202      	movs	r2, #2
 80054b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b4:	193b      	adds	r3, r7, r4
 80054b6:	2200      	movs	r2, #0
 80054b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054ba:	193b      	adds	r3, r7, r4
 80054bc:	2200      	movs	r2, #0
 80054be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80054c0:	193b      	adds	r3, r7, r4
 80054c2:	2202      	movs	r2, #2
 80054c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 80054c6:	193a      	adds	r2, r7, r4
 80054c8:	23a0      	movs	r3, #160	@ 0xa0
 80054ca:	05db      	lsls	r3, r3, #23
 80054cc:	0011      	movs	r1, r2
 80054ce:	0018      	movs	r0, r3
 80054d0:	f002 fd56 	bl	8007f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAIN_OSCILLATOR_Pin;
 80054d4:	0021      	movs	r1, r4
 80054d6:	187b      	adds	r3, r7, r1
 80054d8:	2208      	movs	r2, #8
 80054da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054dc:	187b      	adds	r3, r7, r1
 80054de:	2202      	movs	r2, #2
 80054e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e2:	187b      	adds	r3, r7, r1
 80054e4:	2200      	movs	r2, #0
 80054e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054e8:	187b      	adds	r3, r7, r1
 80054ea:	2200      	movs	r2, #0
 80054ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80054ee:	187b      	adds	r3, r7, r1
 80054f0:	2201      	movs	r2, #1
 80054f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 80054f4:	187b      	adds	r3, r7, r1
 80054f6:	4a06      	ldr	r2, [pc, #24]	@ (8005510 <HAL_TIM_MspPostInit+0xbc>)
 80054f8:	0019      	movs	r1, r3
 80054fa:	0010      	movs	r0, r2
 80054fc:	f002 fd40 	bl	8007f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005500:	46c0      	nop			@ (mov r8, r8)
 8005502:	46bd      	mov	sp, r7
 8005504:	b00b      	add	sp, #44	@ 0x2c
 8005506:	bd90      	pop	{r4, r7, pc}
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40021000 	.word	0x40021000
 8005510:	50000400 	.word	0x50000400

08005514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005514:	b590      	push	{r4, r7, lr}
 8005516:	b08b      	sub	sp, #44	@ 0x2c
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800551c:	2414      	movs	r4, #20
 800551e:	193b      	adds	r3, r7, r4
 8005520:	0018      	movs	r0, r3
 8005522:	2314      	movs	r3, #20
 8005524:	001a      	movs	r2, r3
 8005526:	2100      	movs	r1, #0
 8005528:	f008 f820 	bl	800d56c <memset>
  if(huart->Instance==USART2)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a4a      	ldr	r2, [pc, #296]	@ (800565c <HAL_UART_MspInit+0x148>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d000      	beq.n	8005538 <HAL_UART_MspInit+0x24>
 8005536:	e08d      	b.n	8005654 <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005538:	4b49      	ldr	r3, [pc, #292]	@ (8005660 <HAL_UART_MspInit+0x14c>)
 800553a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800553c:	4b48      	ldr	r3, [pc, #288]	@ (8005660 <HAL_UART_MspInit+0x14c>)
 800553e:	2180      	movs	r1, #128	@ 0x80
 8005540:	0289      	lsls	r1, r1, #10
 8005542:	430a      	orrs	r2, r1
 8005544:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005546:	4b46      	ldr	r3, [pc, #280]	@ (8005660 <HAL_UART_MspInit+0x14c>)
 8005548:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800554a:	2380      	movs	r3, #128	@ 0x80
 800554c:	029b      	lsls	r3, r3, #10
 800554e:	4013      	ands	r3, r2
 8005550:	613b      	str	r3, [r7, #16]
 8005552:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005554:	4b42      	ldr	r3, [pc, #264]	@ (8005660 <HAL_UART_MspInit+0x14c>)
 8005556:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005558:	4b41      	ldr	r3, [pc, #260]	@ (8005660 <HAL_UART_MspInit+0x14c>)
 800555a:	2101      	movs	r1, #1
 800555c:	430a      	orrs	r2, r1
 800555e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005560:	4b3f      	ldr	r3, [pc, #252]	@ (8005660 <HAL_UART_MspInit+0x14c>)
 8005562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005564:	2201      	movs	r2, #1
 8005566:	4013      	ands	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 800556c:	0021      	movs	r1, r4
 800556e:	187b      	adds	r3, r7, r1
 8005570:	220c      	movs	r2, #12
 8005572:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005574:	187b      	adds	r3, r7, r1
 8005576:	2202      	movs	r2, #2
 8005578:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800557a:	187b      	adds	r3, r7, r1
 800557c:	2201      	movs	r2, #1
 800557e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005580:	187b      	adds	r3, r7, r1
 8005582:	2200      	movs	r2, #0
 8005584:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005586:	187b      	adds	r3, r7, r1
 8005588:	2201      	movs	r2, #1
 800558a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800558c:	187a      	adds	r2, r7, r1
 800558e:	23a0      	movs	r3, #160	@ 0xa0
 8005590:	05db      	lsls	r3, r3, #23
 8005592:	0011      	movs	r1, r2
 8005594:	0018      	movs	r0, r3
 8005596:	f002 fcf3 	bl	8007f80 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800559a:	4b32      	ldr	r3, [pc, #200]	@ (8005664 <HAL_UART_MspInit+0x150>)
 800559c:	4a32      	ldr	r2, [pc, #200]	@ (8005668 <HAL_UART_MspInit+0x154>)
 800559e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80055a0:	4b30      	ldr	r3, [pc, #192]	@ (8005664 <HAL_UART_MspInit+0x150>)
 80055a2:	2234      	movs	r2, #52	@ 0x34
 80055a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055a6:	4b2f      	ldr	r3, [pc, #188]	@ (8005664 <HAL_UART_MspInit+0x150>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005664 <HAL_UART_MspInit+0x150>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055b2:	4b2c      	ldr	r3, [pc, #176]	@ (8005664 <HAL_UART_MspInit+0x150>)
 80055b4:	2280      	movs	r2, #128	@ 0x80
 80055b6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005664 <HAL_UART_MspInit+0x150>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055be:	4b29      	ldr	r3, [pc, #164]	@ (8005664 <HAL_UART_MspInit+0x150>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80055c4:	4b27      	ldr	r3, [pc, #156]	@ (8005664 <HAL_UART_MspInit+0x150>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80055ca:	4b26      	ldr	r3, [pc, #152]	@ (8005664 <HAL_UART_MspInit+0x150>)
 80055cc:	2280      	movs	r2, #128	@ 0x80
 80055ce:	0152      	lsls	r2, r2, #5
 80055d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80055d2:	4b24      	ldr	r3, [pc, #144]	@ (8005664 <HAL_UART_MspInit+0x150>)
 80055d4:	0018      	movs	r0, r3
 80055d6:	f002 f9b5 	bl	8007944 <HAL_DMA_Init>
 80055da:	1e03      	subs	r3, r0, #0
 80055dc:	d001      	beq.n	80055e2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80055de:	f7fc fe59 	bl	8002294 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2180      	movs	r1, #128	@ 0x80
 80055e6:	4a1f      	ldr	r2, [pc, #124]	@ (8005664 <HAL_UART_MspInit+0x150>)
 80055e8:	505a      	str	r2, [r3, r1]
 80055ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005664 <HAL_UART_MspInit+0x150>)
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 80055f0:	4b1e      	ldr	r3, [pc, #120]	@ (800566c <HAL_UART_MspInit+0x158>)
 80055f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005670 <HAL_UART_MspInit+0x15c>)
 80055f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80055f6:	4b1d      	ldr	r3, [pc, #116]	@ (800566c <HAL_UART_MspInit+0x158>)
 80055f8:	2235      	movs	r2, #53	@ 0x35
 80055fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80055fc:	4b1b      	ldr	r3, [pc, #108]	@ (800566c <HAL_UART_MspInit+0x158>)
 80055fe:	2210      	movs	r2, #16
 8005600:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005602:	4b1a      	ldr	r3, [pc, #104]	@ (800566c <HAL_UART_MspInit+0x158>)
 8005604:	2200      	movs	r2, #0
 8005606:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005608:	4b18      	ldr	r3, [pc, #96]	@ (800566c <HAL_UART_MspInit+0x158>)
 800560a:	2280      	movs	r2, #128	@ 0x80
 800560c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800560e:	4b17      	ldr	r3, [pc, #92]	@ (800566c <HAL_UART_MspInit+0x158>)
 8005610:	2200      	movs	r2, #0
 8005612:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005614:	4b15      	ldr	r3, [pc, #84]	@ (800566c <HAL_UART_MspInit+0x158>)
 8005616:	2200      	movs	r2, #0
 8005618:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800561a:	4b14      	ldr	r3, [pc, #80]	@ (800566c <HAL_UART_MspInit+0x158>)
 800561c:	2200      	movs	r2, #0
 800561e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005620:	4b12      	ldr	r3, [pc, #72]	@ (800566c <HAL_UART_MspInit+0x158>)
 8005622:	2280      	movs	r2, #128	@ 0x80
 8005624:	0152      	lsls	r2, r2, #5
 8005626:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005628:	4b10      	ldr	r3, [pc, #64]	@ (800566c <HAL_UART_MspInit+0x158>)
 800562a:	0018      	movs	r0, r3
 800562c:	f002 f98a 	bl	8007944 <HAL_DMA_Init>
 8005630:	1e03      	subs	r3, r0, #0
 8005632:	d001      	beq.n	8005638 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8005634:	f7fc fe2e 	bl	8002294 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a0c      	ldr	r2, [pc, #48]	@ (800566c <HAL_UART_MspInit+0x158>)
 800563c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800563e:	4b0b      	ldr	r3, [pc, #44]	@ (800566c <HAL_UART_MspInit+0x158>)
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 8005644:	2201      	movs	r2, #1
 8005646:	2101      	movs	r1, #1
 8005648:	201c      	movs	r0, #28
 800564a:	f002 f939 	bl	80078c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800564e:	201c      	movs	r0, #28
 8005650:	f002 f94b 	bl	80078ea <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8005654:	46c0      	nop			@ (mov r8, r8)
 8005656:	46bd      	mov	sp, r7
 8005658:	b00b      	add	sp, #44	@ 0x2c
 800565a:	bd90      	pop	{r4, r7, pc}
 800565c:	40004400 	.word	0x40004400
 8005660:	40021000 	.word	0x40021000
 8005664:	20000b14 	.word	0x20000b14
 8005668:	4002001c 	.word	0x4002001c
 800566c:	20000b70 	.word	0x20000b70
 8005670:	40020030 	.word	0x40020030

08005674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005678:	46c0      	nop			@ (mov r8, r8)
 800567a:	e7fd      	b.n	8005678 <NMI_Handler+0x4>

0800567c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005680:	46c0      	nop			@ (mov r8, r8)
 8005682:	e7fd      	b.n	8005680 <HardFault_Handler+0x4>

08005684 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005688:	46c0      	nop			@ (mov r8, r8)
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005692:	46c0      	nop			@ (mov r8, r8)
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800569c:	f000 fdfc 	bl	8006298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80056a0:	46c0      	nop			@ (mov r8, r8)
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(CLK_IN_Pin);
 80056aa:	2080      	movs	r0, #128	@ 0x80
 80056ac:	f002 fe06 	bl	80082bc <HAL_GPIO_EXTI_IRQHandler>
	//HAL_GPIO_EXTI_IRQHandler(SW_IN_Pin);

  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80056b0:	46c0      	nop			@ (mov r8, r8)
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80056bc:	4b03      	ldr	r3, [pc, #12]	@ (80056cc <DMA1_Channel1_IRQHandler+0x14>)
 80056be:	0018      	movs	r0, r3
 80056c0:	f002 fb1c 	bl	8007cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80056c4:	46c0      	nop			@ (mov r8, r8)
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	46c0      	nop			@ (mov r8, r8)
 80056cc:	20000584 	.word	0x20000584

080056d0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80056d4:	4b05      	ldr	r3, [pc, #20]	@ (80056ec <DMA1_Channel2_3_IRQHandler+0x1c>)
 80056d6:	0018      	movs	r0, r3
 80056d8:	f002 fb10 	bl	8007cfc <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80056dc:	4b04      	ldr	r3, [pc, #16]	@ (80056f0 <DMA1_Channel2_3_IRQHandler+0x20>)
 80056de:	0018      	movs	r0, r3
 80056e0:	f002 fb0c 	bl	8007cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80056e4:	46c0      	nop			@ (mov r8, r8)
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	46c0      	nop			@ (mov r8, r8)
 80056ec:	20000b14 	.word	0x20000b14
 80056f0:	20000b70 	.word	0x20000b70

080056f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80056f8:	4b03      	ldr	r3, [pc, #12]	@ (8005708 <TIM2_IRQHandler+0x14>)
 80056fa:	0018      	movs	r0, r3
 80056fc:	f004 fef0 	bl	800a4e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005700:	46c0      	nop			@ (mov r8, r8)
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	46c0      	nop			@ (mov r8, r8)
 8005708:	20000814 	.word	0x20000814

0800570c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005710:	4b03      	ldr	r3, [pc, #12]	@ (8005720 <TIM3_IRQHandler+0x14>)
 8005712:	0018      	movs	r0, r3
 8005714:	f004 fee4 	bl	800a4e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005718:	46c0      	nop			@ (mov r8, r8)
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	46c0      	nop			@ (mov r8, r8)
 8005720:	200008d0 	.word	0x200008d0

08005724 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005728:	4b03      	ldr	r3, [pc, #12]	@ (8005738 <TIM16_IRQHandler+0x14>)
 800572a:	0018      	movs	r0, r3
 800572c:	f004 fed8 	bl	800a4e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8005730:	46c0      	nop			@ (mov r8, r8)
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	46c0      	nop			@ (mov r8, r8)
 8005738:	20000758 	.word	0x20000758

0800573c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005740:	4b03      	ldr	r3, [pc, #12]	@ (8005750 <USART2_IRQHandler+0x14>)
 8005742:	0018      	movs	r0, r3
 8005744:	f006 fc4e 	bl	800bfe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005748:	46c0      	nop			@ (mov r8, r8)
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	46c0      	nop			@ (mov r8, r8)
 8005750:	20000a48 	.word	0x20000a48

08005754 <LPTIM1_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void LPTIM1_IRQHandler(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	af00      	add	r7, sp, #0
  HAL_LPTIM_IRQHandler(&hlptim1);
 8005758:	4b03      	ldr	r3, [pc, #12]	@ (8005768 <LPTIM1_IRQHandler+0x14>)
 800575a:	0018      	movs	r0, r3
 800575c:	f002 ff1c 	bl	8008598 <HAL_LPTIM_IRQHandler>
}
 8005760:	46c0      	nop			@ (mov r8, r8)
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	46c0      	nop			@ (mov r8, r8)
 8005768:	20000bcc 	.word	0x20000bcc

0800576c <TIM17_IRQHandler>:


void TIM17_IRQHandler(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005770:	4b03      	ldr	r3, [pc, #12]	@ (8005780 <TIM17_IRQHandler+0x14>)
 8005772:	0018      	movs	r0, r3
 8005774:	f004 feb4 	bl	800a4e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8005778:	46c0      	nop			@ (mov r8, r8)
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	46c0      	nop			@ (mov r8, r8)
 8005780:	2000069c 	.word	0x2000069c

08005784 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005788:	4b03      	ldr	r3, [pc, #12]	@ (8005798 <TIM14_IRQHandler+0x14>)
 800578a:	0018      	movs	r0, r3
 800578c:	f004 fea8 	bl	800a4e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8005790:	46c0      	nop			@ (mov r8, r8)
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	46c0      	nop			@ (mov r8, r8)
 8005798:	200005e0 	.word	0x200005e0

0800579c <Adjust_TIM16_Prescaler>:
#include "symmetry_adjustment.h"


uint8_t Adjust_TIM16_Prescaler(struct Params* params_ptr){
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]

    if(params_ptr->prescaler_adjust == MULTIPLY_BY_TWO){
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2220      	movs	r2, #32
 80057a8:	5c9b      	ldrb	r3, [r3, r2]
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d107      	bne.n	80057c0 <Adjust_TIM16_Prescaler+0x24>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler << 1;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	8b5b      	ldrh	r3, [r3, #26]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	18db      	adds	r3, r3, r3
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	839a      	strh	r2, [r3, #28]
 80057be:	e00a      	b.n	80057d6 <Adjust_TIM16_Prescaler+0x3a>
    }
    else if(params_ptr->prescaler_adjust == DO_NOTHING){
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2220      	movs	r2, #32
 80057c4:	5c9b      	ldrb	r3, [r3, r2]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d104      	bne.n	80057d6 <Adjust_TIM16_Prescaler+0x3a>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	8b5b      	ldrh	r3, [r3, #26]
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	839a      	strh	r2, [r3, #28]
    }
    return 1;
 80057d6:	2301      	movs	r3, #1
}
 80057d8:	0018      	movs	r0, r3
 80057da:	46bd      	mov	sp, r7
 80057dc:	b002      	add	sp, #8
 80057de:	bd80      	pop	{r7, pc}

080057e0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>:

uint8_t Process_TIM16_Final_Start_Value_and_Final_Prescaler(struct Params* params_ptr){
 80057e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]

    #if SYMMETRY_ON_OR_OFF == ON

	enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80057e8:	2317      	movs	r3, #23
 80057ea:	18fb      	adds	r3, r7, r3
 80057ec:	2200      	movs	r2, #0
 80057ee:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 80057f0:	2316      	movs	r3, #22
 80057f2:	18fb      	adds	r3, r7, r3
 80057f4:	2200      	movs	r2, #0
 80057f6:	701a      	strb	r2, [r3, #0]

			uint8_t pot_rotation_corrected = 0;
 80057f8:	2315      	movs	r3, #21
 80057fa:	18fb      	adds	r3, r7, r3
 80057fc:	2200      	movs	r2, #0
 80057fe:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Status symmetry_status = CW;
 8005800:	2114      	movs	r1, #20
 8005802:	187b      	adds	r3, r7, r1
 8005804:	2200      	movs	r2, #0
 8005806:	701a      	strb	r2, [r3, #0]

			//DETERMINE IF CW OR CCW SYMMETRY POT ROTATION
			if(params_ptr->symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	899b      	ldrh	r3, [r3, #12]
 800580c:	b29b      	uxth	r3, r3
 800580e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005810:	d803      	bhi.n	800581a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3a>
				symmetry_status = CW;
 8005812:	187b      	adds	r3, r7, r1
 8005814:	2200      	movs	r2, #0
 8005816:	701a      	strb	r2, [r3, #0]
 8005818:	e003      	b.n	8005822 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x42>
			}
			else{ //adc is 128-255
				symmetry_status = CCW;
 800581a:	2314      	movs	r3, #20
 800581c:	18fb      	adds	r3, r7, r3
 800581e:	2201      	movs	r2, #1
 8005820:	701a      	strb	r2, [r3, #0]
			}

			//DETERMINE WHETHER TO SHORTEN OR LENGTHEN BASED ON CURRENT INDEX AND SYMMETRY POT POSITION
			if((params_ptr->waveshape == SINE_MODE) || (params_ptr->waveshape == TRIANGLE_MODE)){
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	799b      	ldrb	r3, [r3, #6]
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b01      	cmp	r3, #1
 800582a:	d004      	beq.n	8005836 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x56>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	799b      	ldrb	r3, [r3, #6]
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d146      	bne.n	80058c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe4>

				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	7c1b      	ldrb	r3, [r3, #16]
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d104      	bne.n	800584a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6a>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	7c5b      	ldrb	r3, [r3, #17]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d009      	beq.n	800585e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7e>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	7c1b      	ldrb	r3, [r3, #16]
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b01      	cmp	r3, #1
 8005852:	d113      	bne.n	800587c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	7c5b      	ldrb	r3, [r3, #17]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b01      	cmp	r3, #1
 800585c:	d10e      	bne.n	800587c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>

					if(symmetry_status == CW){
 800585e:	2314      	movs	r3, #20
 8005860:	18fb      	adds	r3, r7, r3
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d104      	bne.n	8005872 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x92>

						symmetry_type_for_halfcycle = LENGTHEN;
 8005868:	2316      	movs	r3, #22
 800586a:	18fb      	adds	r3, r7, r3
 800586c:	2201      	movs	r2, #1
 800586e:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 8005870:	e027      	b.n	80058c2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 8005872:	2316      	movs	r3, #22
 8005874:	18fb      	adds	r3, r7, r3
 8005876:	2200      	movs	r2, #0
 8005878:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 800587a:	e022      	b.n	80058c2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
				}
				else if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT)){
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	7c1b      	ldrb	r3, [r3, #16]
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d104      	bne.n	8005890 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xb0>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	7c5b      	ldrb	r3, [r3, #17]
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b01      	cmp	r3, #1
 800588e:	d009      	beq.n	80058a4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xc4>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	7c1b      	ldrb	r3, [r3, #16]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b01      	cmp	r3, #1
 8005898:	d13c      	bne.n	8005914 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	7c5b      	ldrb	r3, [r3, #17]
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d137      	bne.n	8005914 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>

					if(symmetry_status == CW){
 80058a4:	2314      	movs	r3, #20
 80058a6:	18fb      	adds	r3, r7, r3
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d104      	bne.n	80058b8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd8>

						symmetry_type_for_halfcycle = SHORTEN;
 80058ae:	2316      	movs	r3, #22
 80058b0:	18fb      	adds	r3, r7, r3
 80058b2:	2200      	movs	r2, #0
 80058b4:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 80058b6:	e02d      	b.n	8005914 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 80058b8:	2316      	movs	r3, #22
 80058ba:	18fb      	adds	r3, r7, r3
 80058bc:	2201      	movs	r2, #1
 80058be:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 80058c0:	e028      	b.n	8005914 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 80058c2:	e027      	b.n	8005914 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
				}
			}
			else if(params_ptr->waveshape == SQUARE_MODE){
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	799b      	ldrb	r3, [r3, #6]
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d123      	bne.n	8005916 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>

				if(params_ptr->halfcycle == FIRST_HALFCYCLE){
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	7c1b      	ldrb	r3, [r3, #16]
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10e      	bne.n	80058f6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x116>

					if(symmetry_status == CW){
 80058d8:	2314      	movs	r3, #20
 80058da:	18fb      	adds	r3, r7, r3
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d104      	bne.n	80058ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x10c>

						symmetry_type_for_halfcycle = LENGTHEN;
 80058e2:	2316      	movs	r3, #22
 80058e4:	18fb      	adds	r3, r7, r3
 80058e6:	2201      	movs	r2, #1
 80058e8:	701a      	strb	r2, [r3, #0]
 80058ea:	e014      	b.n	8005916 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 80058ec:	2316      	movs	r3, #22
 80058ee:	18fb      	adds	r3, r7, r3
 80058f0:	2200      	movs	r2, #0
 80058f2:	701a      	strb	r2, [r3, #0]
 80058f4:	e00f      	b.n	8005916 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
				}
				else{

					if(symmetry_status == CW){
 80058f6:	2314      	movs	r3, #20
 80058f8:	18fb      	adds	r3, r7, r3
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d104      	bne.n	800590a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x12a>

						symmetry_type_for_halfcycle = SHORTEN;
 8005900:	2316      	movs	r3, #22
 8005902:	18fb      	adds	r3, r7, r3
 8005904:	2200      	movs	r2, #0
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	e005      	b.n	8005916 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 800590a:	2316      	movs	r3, #22
 800590c:	18fb      	adds	r3, r7, r3
 800590e:	2201      	movs	r2, #1
 8005910:	701a      	strb	r2, [r3, #0]
 8005912:	e000      	b.n	8005916 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005914:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			if(symmetry_status == CW){
 8005916:	2314      	movs	r3, #20
 8005918:	18fb      	adds	r3, r7, r3
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d109      	bne.n	8005934 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x154>

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - params_ptr->symmetry;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	899b      	ldrh	r3, [r3, #12]
 8005924:	b29b      	uxth	r3, r3
 8005926:	b2da      	uxtb	r2, r3
 8005928:	2315      	movs	r3, #21
 800592a:	18fb      	adds	r3, r7, r3
 800592c:	217f      	movs	r1, #127	@ 0x7f
 800592e:	1a8a      	subs	r2, r1, r2
 8005930:	701a      	strb	r2, [r3, #0]
 8005932:	e007      	b.n	8005944 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x164>
			}
			else{ //CCW

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	899b      	ldrh	r3, [r3, #12]
 8005938:	b29b      	uxth	r3, r3
 800593a:	b2da      	uxtb	r2, r3
 800593c:	2315      	movs	r3, #21
 800593e:	18fb      	adds	r3, r7, r3
 8005940:	3a80      	subs	r2, #128	@ 0x80
 8005942:	701a      	strb	r2, [r3, #0]
			}

			//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - params_ptr->raw_start_value;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	8a5b      	ldrh	r3, [r3, #18]
 8005948:	b29a      	uxth	r2, r3
 800594a:	200e      	movs	r0, #14
 800594c:	183b      	adds	r3, r7, r0
 800594e:	2180      	movs	r1, #128	@ 0x80
 8005950:	0049      	lsls	r1, r1, #1
 8005952:	1a8a      	subs	r2, r1, r2
 8005954:	801a      	strh	r2, [r3, #0]

			//uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = (two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected);
			//COMMENT LINE BELOW IN AND LINE ABOVE OUT TO EXPERIMENT WITH MORE EXTREME SYMMETRY ADJUSTMENT
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = ((two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected) * 12) >> 3; //x(12/8) - 12/8 is the absolute maximum we can get away with
 8005956:	0001      	movs	r1, r0
 8005958:	187b      	adds	r3, r7, r1
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	2215      	movs	r2, #21
 800595e:	18ba      	adds	r2, r7, r2
 8005960:	7812      	ldrb	r2, [r2, #0]
 8005962:	435a      	muls	r2, r3
 8005964:	0013      	movs	r3, r2
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	189b      	adds	r3, r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	10da      	asrs	r2, r3, #3
 800596e:	240c      	movs	r4, #12
 8005970:	193b      	adds	r3, r7, r4
 8005972:	801a      	strh	r2, [r3, #0]

			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 8005974:	250a      	movs	r5, #10
 8005976:	197b      	adds	r3, r7, r5
 8005978:	193a      	adds	r2, r7, r4
 800597a:	8812      	ldrh	r2, [r2, #0]
 800597c:	0a12      	lsrs	r2, r2, #8
 800597e:	801a      	strh	r2, [r3, #0]


			//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8005980:	2312      	movs	r3, #18
 8005982:	18fb      	adds	r3, r7, r3
 8005984:	0008      	movs	r0, r1
 8005986:	1879      	adds	r1, r7, r1
 8005988:	197a      	adds	r2, r7, r5
 800598a:	8809      	ldrh	r1, [r1, #0]
 800598c:	8812      	ldrh	r2, [r2, #0]
 800598e:	1a8a      	subs	r2, r1, r2
 8005990:	801a      	strh	r2, [r3, #0]

			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 8005992:	2610      	movs	r6, #16
 8005994:	19bb      	adds	r3, r7, r6
 8005996:	1839      	adds	r1, r7, r0
 8005998:	197a      	adds	r2, r7, r5
 800599a:	8809      	ldrh	r1, [r1, #0]
 800599c:	8812      	ldrh	r2, [r2, #0]
 800599e:	188a      	adds	r2, r1, r2
 80059a0:	801a      	strh	r2, [r3, #0]


			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 80059a2:	19bb      	adds	r3, r7, r6
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	2bff      	cmp	r3, #255	@ 0xff
 80059a8:	d90f      	bls.n	80059ca <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 80059aa:	19bb      	adds	r3, r7, r6
 80059ac:	881a      	ldrh	r2, [r3, #0]
 80059ae:	2380      	movs	r3, #128	@ 0x80
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d000      	beq.n	80059b8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1d8>
 80059b6:	e0b0      	b.n	8005b1a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>
 80059b8:	193b      	adds	r3, r7, r4
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	2108      	movs	r1, #8
 80059be:	0018      	movs	r0, r3
 80059c0:	f000 fb80 	bl	80060c4 <unsigned_bitwise_modulo>
 80059c4:	1e03      	subs	r3, r0, #0
 80059c6:	d000      	beq.n	80059ca <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 80059c8:	e0a7      	b.n	8005b1a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80059ca:	230c      	movs	r3, #12
 80059cc:	18fb      	adds	r3, r7, r3
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	2108      	movs	r1, #8
 80059d2:	0018      	movs	r0, r3
 80059d4:	f000 fb76 	bl	80060c4 <unsigned_bitwise_modulo>
 80059d8:	0003      	movs	r3, r0
 80059da:	2b80      	cmp	r3, #128	@ 0x80
 80059dc:	d117      	bne.n	8005a0e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x22e>
					//remainder is 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in 0.5

					//manipulated_period_shorten should oscillate over the halfperiod between manipulated_period_shorten and manipulated_period_shorten - 1; //DONE
					//manipulated_period_lengthen should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1; //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 80059de:	2316      	movs	r3, #22
 80059e0:	18fb      	adds	r3, r7, r3
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d104      	bne.n	80059f2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x212>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_DOWNWARDS;
 80059e8:	2317      	movs	r3, #23
 80059ea:	18fb      	adds	r3, r7, r3
 80059ec:	2202      	movs	r2, #2
 80059ee:	701a      	strb	r2, [r3, #0]
 80059f0:	e008      	b.n	8005a04 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80059f2:	2316      	movs	r3, #22
 80059f4:	18fb      	adds	r3, r7, r3
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d103      	bne.n	8005a04 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80059fc:	2317      	movs	r3, #23
 80059fe:	18fb      	adds	r3, r7, r3
 8005a00:	2201      	movs	r2, #1
 8005a02:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2220      	movs	r2, #32
 8005a08:	2100      	movs	r1, #0
 8005a0a:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005a0c:	e21f      	b.n	8005e4e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8005a0e:	230c      	movs	r3, #12
 8005a10:	18fb      	adds	r3, r7, r3
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	2108      	movs	r1, #8
 8005a16:	0018      	movs	r0, r3
 8005a18:	f000 fb54 	bl	80060c4 <unsigned_bitwise_modulo>
 8005a1c:	1e03      	subs	r3, r0, #0
 8005a1e:	d121      	bne.n	8005a64 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x284>

					//remainder is zero, which means both shortened and lengthened manipulated periods have no no remainder

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 8005a20:	2212      	movs	r2, #18
 8005a22:	18bb      	adds	r3, r7, r2
 8005a24:	18ba      	adds	r2, r7, r2
 8005a26:	8812      	ldrh	r2, [r2, #0]
 8005a28:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8005a2a:	2210      	movs	r2, #16
 8005a2c:	18bb      	adds	r3, r7, r2
 8005a2e:	18ba      	adds	r2, r7, r2
 8005a30:	8812      	ldrh	r2, [r2, #0]
 8005a32:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005a34:	2316      	movs	r3, #22
 8005a36:	18fb      	adds	r3, r7, r3
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d104      	bne.n	8005a48 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x268>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005a3e:	2317      	movs	r3, #23
 8005a40:	18fb      	adds	r3, r7, r3
 8005a42:	2200      	movs	r2, #0
 8005a44:	701a      	strb	r2, [r3, #0]
 8005a46:	e008      	b.n	8005a5a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005a48:	2316      	movs	r3, #22
 8005a4a:	18fb      	adds	r3, r7, r3
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d103      	bne.n	8005a5a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005a52:	2317      	movs	r3, #23
 8005a54:	18fb      	adds	r3, r7, r3
 8005a56:	2200      	movs	r2, #0
 8005a58:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	2100      	movs	r1, #0
 8005a60:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005a62:	e1f4      	b.n	8005e4e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8005a64:	230c      	movs	r3, #12
 8005a66:	18fb      	adds	r3, r7, r3
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	2108      	movs	r1, #8
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	f000 fb29 	bl	80060c4 <unsigned_bitwise_modulo>
 8005a72:	0003      	movs	r3, r0
 8005a74:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a76:	d821      	bhi.n	8005abc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2dc>

					//remainder is less than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in less than 0.5

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 8005a78:	2212      	movs	r2, #18
 8005a7a:	18bb      	adds	r3, r7, r2
 8005a7c:	18ba      	adds	r2, r7, r2
 8005a7e:	8812      	ldrh	r2, [r2, #0]
 8005a80:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8005a82:	2210      	movs	r2, #16
 8005a84:	18bb      	adds	r3, r7, r2
 8005a86:	18ba      	adds	r2, r7, r2
 8005a88:	8812      	ldrh	r2, [r2, #0]
 8005a8a:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005a8c:	2316      	movs	r3, #22
 8005a8e:	18fb      	adds	r3, r7, r3
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d104      	bne.n	8005aa0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2c0>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005a96:	2317      	movs	r3, #23
 8005a98:	18fb      	adds	r3, r7, r3
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	701a      	strb	r2, [r3, #0]
 8005a9e:	e008      	b.n	8005ab2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005aa0:	2316      	movs	r3, #22
 8005aa2:	18fb      	adds	r3, r7, r3
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d103      	bne.n	8005ab2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005aaa:	2317      	movs	r3, #23
 8005aac:	18fb      	adds	r3, r7, r3
 8005aae:	2200      	movs	r2, #0
 8005ab0:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005aba:	e1c8      	b.n	8005e4e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8005abc:	230c      	movs	r3, #12
 8005abe:	18fb      	adds	r3, r7, r3
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	2108      	movs	r1, #8
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f000 fafd 	bl	80060c4 <unsigned_bitwise_modulo>
 8005aca:	0003      	movs	r3, r0
 8005acc:	2b80      	cmp	r3, #128	@ 0x80
 8005ace:	d800      	bhi.n	8005ad2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2f2>
 8005ad0:	e1bd      	b.n	8005e4e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>

					//remainder is greater than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in more than 0.5

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8005ad2:	2212      	movs	r2, #18
 8005ad4:	18bb      	adds	r3, r7, r2
 8005ad6:	18ba      	adds	r2, r7, r2
 8005ad8:	8812      	ldrh	r2, [r2, #0]
 8005ada:	3a01      	subs	r2, #1
 8005adc:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8005ade:	2210      	movs	r2, #16
 8005ae0:	18bb      	adds	r3, r7, r2
 8005ae2:	18ba      	adds	r2, r7, r2
 8005ae4:	8812      	ldrh	r2, [r2, #0]
 8005ae6:	3201      	adds	r2, #1
 8005ae8:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005aea:	2316      	movs	r3, #22
 8005aec:	18fb      	adds	r3, r7, r3
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d104      	bne.n	8005afe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x31e>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005af4:	2317      	movs	r3, #23
 8005af6:	18fb      	adds	r3, r7, r3
 8005af8:	2200      	movs	r2, #0
 8005afa:	701a      	strb	r2, [r3, #0]
 8005afc:	e008      	b.n	8005b10 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005afe:	2316      	movs	r3, #22
 8005b00:	18fb      	adds	r3, r7, r3
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d103      	bne.n	8005b10 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005b08:	2317      	movs	r3, #23
 8005b0a:	18fb      	adds	r3, r7, r3
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2220      	movs	r2, #32
 8005b14:	2100      	movs	r1, #0
 8005b16:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005b18:	e199      	b.n	8005e4e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
			}

			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 8005b1a:	2110      	movs	r1, #16
 8005b1c:	187b      	adds	r3, r7, r1
 8005b1e:	881a      	ldrh	r2, [r3, #0]
 8005b20:	2380      	movs	r3, #128	@ 0x80
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d810      	bhi.n	8005b4a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 8005b28:	187b      	adds	r3, r7, r1
 8005b2a:	881a      	ldrh	r2, [r3, #0]
 8005b2c:	2380      	movs	r3, #128	@ 0x80
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d000      	beq.n	8005b36 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x356>
 8005b34:	e18c      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 8005b36:	230c      	movs	r3, #12
 8005b38:	18fb      	adds	r3, r7, r3
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	2108      	movs	r1, #8
 8005b3e:	0018      	movs	r0, r3
 8005b40:	f000 fac0 	bl	80060c4 <unsigned_bitwise_modulo>
 8005b44:	1e03      	subs	r3, r0, #0
 8005b46:	d100      	bne.n	8005b4a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 8005b48:	e182      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005b4a:	230c      	movs	r3, #12
 8005b4c:	18fb      	adds	r3, r7, r3
 8005b4e:	881b      	ldrh	r3, [r3, #0]
 8005b50:	2108      	movs	r1, #8
 8005b52:	0018      	movs	r0, r3
 8005b54:	f000 fab6 	bl	80060c4 <unsigned_bitwise_modulo>
 8005b58:	0003      	movs	r3, r0
 8005b5a:	2b80      	cmp	r3, #128	@ 0x80
 8005b5c:	d159      	bne.n	8005c12 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x432>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8005b5e:	2212      	movs	r2, #18
 8005b60:	18bb      	adds	r3, r7, r2
 8005b62:	18ba      	adds	r2, r7, r2
 8005b64:	8812      	ldrh	r2, [r2, #0]
 8005b66:	3a01      	subs	r2, #1
 8005b68:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8005b6a:	2110      	movs	r1, #16
 8005b6c:	187b      	adds	r3, r7, r1
 8005b6e:	187a      	adds	r2, r7, r1
 8005b70:	8812      	ldrh	r2, [r2, #0]
 8005b72:	3201      	adds	r2, #1
 8005b74:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005b76:	000c      	movs	r4, r1
 8005b78:	187b      	adds	r3, r7, r1
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	0018      	movs	r0, r3
 8005b80:	f000 faa0 	bl	80060c4 <unsigned_bitwise_modulo>
 8005b84:	1e03      	subs	r3, r0, #0
 8005b86:	d121      	bne.n	8005bcc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ec>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005b88:	193b      	adds	r3, r7, r4
 8005b8a:	193a      	adds	r2, r7, r4
 8005b8c:	8812      	ldrh	r2, [r2, #0]
 8005b8e:	0852      	lsrs	r2, r2, #1
 8005b90:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005b92:	2316      	movs	r3, #22
 8005b94:	18fb      	adds	r3, r7, r3
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d108      	bne.n	8005bae <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ce>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005b9c:	2317      	movs	r3, #23
 8005b9e:	18fb      	adds	r3, r7, r3
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	2100      	movs	r1, #0
 8005baa:	5499      	strb	r1, [r3, r2]
 8005bac:	e150      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005bae:	2316      	movs	r3, #22
 8005bb0:	18fb      	adds	r3, r7, r3
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d000      	beq.n	8005bba <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3da>
 8005bb8:	e14a      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005bba:	2317      	movs	r3, #23
 8005bbc:	18fb      	adds	r3, r7, r3
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	5499      	strb	r1, [r3, r2]
 8005bca:	e141      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005bcc:	2210      	movs	r2, #16
 8005bce:	18bb      	adds	r3, r7, r2
 8005bd0:	18ba      	adds	r2, r7, r2
 8005bd2:	8812      	ldrh	r2, [r2, #0]
 8005bd4:	0852      	lsrs	r2, r2, #1
 8005bd6:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005bd8:	2316      	movs	r3, #22
 8005bda:	18fb      	adds	r3, r7, r3
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d108      	bne.n	8005bf4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x414>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005be2:	2317      	movs	r3, #23
 8005be4:	18fb      	adds	r3, r7, r3
 8005be6:	2200      	movs	r2, #0
 8005be8:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2220      	movs	r2, #32
 8005bee:	2100      	movs	r1, #0
 8005bf0:	5499      	strb	r1, [r3, r2]
 8005bf2:	e12d      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005bf4:	2316      	movs	r3, #22
 8005bf6:	18fb      	adds	r3, r7, r3
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d000      	beq.n	8005c00 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x420>
 8005bfe:	e127      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005c00:	2317      	movs	r3, #23
 8005c02:	18fb      	adds	r3, r7, r3
 8005c04:	2201      	movs	r2, #1
 8005c06:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	5499      	strb	r1, [r3, r2]
 8005c10:	e11e      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8005c12:	230c      	movs	r3, #12
 8005c14:	18fb      	adds	r3, r7, r3
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	2108      	movs	r1, #8
 8005c1a:	0018      	movs	r0, r3
 8005c1c:	f000 fa52 	bl	80060c4 <unsigned_bitwise_modulo>
 8005c20:	1e03      	subs	r3, r0, #0
 8005c22:	d152      	bne.n	8005cca <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4ea>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8005c24:	2212      	movs	r2, #18
 8005c26:	18bb      	adds	r3, r7, r2
 8005c28:	18ba      	adds	r2, r7, r2
 8005c2a:	8812      	ldrh	r2, [r2, #0]
 8005c2c:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005c2e:	2410      	movs	r4, #16
 8005c30:	193b      	adds	r3, r7, r4
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	2101      	movs	r1, #1
 8005c36:	0018      	movs	r0, r3
 8005c38:	f000 fa44 	bl	80060c4 <unsigned_bitwise_modulo>
 8005c3c:	1e03      	subs	r3, r0, #0
 8005c3e:	d121      	bne.n	8005c84 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4a4>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005c40:	193b      	adds	r3, r7, r4
 8005c42:	193a      	adds	r2, r7, r4
 8005c44:	8812      	ldrh	r2, [r2, #0]
 8005c46:	0852      	lsrs	r2, r2, #1
 8005c48:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005c4a:	2316      	movs	r3, #22
 8005c4c:	18fb      	adds	r3, r7, r3
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d108      	bne.n	8005c66 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x486>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005c54:	2317      	movs	r3, #23
 8005c56:	18fb      	adds	r3, r7, r3
 8005c58:	2200      	movs	r2, #0
 8005c5a:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	2100      	movs	r1, #0
 8005c62:	5499      	strb	r1, [r3, r2]
 8005c64:	e0f4      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005c66:	2316      	movs	r3, #22
 8005c68:	18fb      	adds	r3, r7, r3
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d000      	beq.n	8005c72 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x492>
 8005c70:	e0ee      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005c72:	2317      	movs	r3, #23
 8005c74:	18fb      	adds	r3, r7, r3
 8005c76:	2200      	movs	r2, #0
 8005c78:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	2101      	movs	r1, #1
 8005c80:	5499      	strb	r1, [r3, r2]
 8005c82:	e0e5      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005c84:	2210      	movs	r2, #16
 8005c86:	18bb      	adds	r3, r7, r2
 8005c88:	18ba      	adds	r2, r7, r2
 8005c8a:	8812      	ldrh	r2, [r2, #0]
 8005c8c:	0852      	lsrs	r2, r2, #1
 8005c8e:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005c90:	2316      	movs	r3, #22
 8005c92:	18fb      	adds	r3, r7, r3
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d108      	bne.n	8005cac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4cc>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005c9a:	2317      	movs	r3, #23
 8005c9c:	18fb      	adds	r3, r7, r3
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	5499      	strb	r1, [r3, r2]
 8005caa:	e0d1      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005cac:	2316      	movs	r3, #22
 8005cae:	18fb      	adds	r3, r7, r3
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d000      	beq.n	8005cb8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4d8>
 8005cb6:	e0cb      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005cb8:	2317      	movs	r3, #23
 8005cba:	18fb      	adds	r3, r7, r3
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	5499      	strb	r1, [r3, r2]
 8005cc8:	e0c2      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8005cca:	230c      	movs	r3, #12
 8005ccc:	18fb      	adds	r3, r7, r3
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	2108      	movs	r1, #8
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	f000 f9f6 	bl	80060c4 <unsigned_bitwise_modulo>
 8005cd8:	0003      	movs	r3, r0
 8005cda:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cdc:	d856      	bhi.n	8005d8c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x5ac>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8005cde:	2212      	movs	r2, #18
 8005ce0:	18bb      	adds	r3, r7, r2
 8005ce2:	18ba      	adds	r2, r7, r2
 8005ce4:	8812      	ldrh	r2, [r2, #0]
 8005ce6:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8005ce8:	2410      	movs	r4, #16
 8005cea:	193b      	adds	r3, r7, r4
 8005cec:	193a      	adds	r2, r7, r4
 8005cee:	8812      	ldrh	r2, [r2, #0]
 8005cf0:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005cf2:	193b      	adds	r3, r7, r4
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	f000 f9e3 	bl	80060c4 <unsigned_bitwise_modulo>
 8005cfe:	1e03      	subs	r3, r0, #0
 8005d00:	d121      	bne.n	8005d46 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x566>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005d02:	193b      	adds	r3, r7, r4
 8005d04:	193a      	adds	r2, r7, r4
 8005d06:	8812      	ldrh	r2, [r2, #0]
 8005d08:	0852      	lsrs	r2, r2, #1
 8005d0a:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005d0c:	2316      	movs	r3, #22
 8005d0e:	18fb      	adds	r3, r7, r3
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d108      	bne.n	8005d28 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x548>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005d16:	2317      	movs	r3, #23
 8005d18:	18fb      	adds	r3, r7, r3
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2220      	movs	r2, #32
 8005d22:	2100      	movs	r1, #0
 8005d24:	5499      	strb	r1, [r3, r2]
 8005d26:	e093      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005d28:	2316      	movs	r3, #22
 8005d2a:	18fb      	adds	r3, r7, r3
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d000      	beq.n	8005d34 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x554>
 8005d32:	e08d      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005d34:	2317      	movs	r3, #23
 8005d36:	18fb      	adds	r3, r7, r3
 8005d38:	2200      	movs	r2, #0
 8005d3a:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	2101      	movs	r1, #1
 8005d42:	5499      	strb	r1, [r3, r2]
 8005d44:	e084      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005d46:	2210      	movs	r2, #16
 8005d48:	18bb      	adds	r3, r7, r2
 8005d4a:	18ba      	adds	r2, r7, r2
 8005d4c:	8812      	ldrh	r2, [r2, #0]
 8005d4e:	0852      	lsrs	r2, r2, #1
 8005d50:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005d52:	2316      	movs	r3, #22
 8005d54:	18fb      	adds	r3, r7, r3
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d108      	bne.n	8005d6e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x58e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005d5c:	2317      	movs	r3, #23
 8005d5e:	18fb      	adds	r3, r7, r3
 8005d60:	2200      	movs	r2, #0
 8005d62:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2220      	movs	r2, #32
 8005d68:	2100      	movs	r1, #0
 8005d6a:	5499      	strb	r1, [r3, r2]
 8005d6c:	e070      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005d6e:	2316      	movs	r3, #22
 8005d70:	18fb      	adds	r3, r7, r3
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d000      	beq.n	8005d7a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x59a>
 8005d78:	e06a      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005d7a:	2317      	movs	r3, #23
 8005d7c:	18fb      	adds	r3, r7, r3
 8005d7e:	2201      	movs	r2, #1
 8005d80:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2220      	movs	r2, #32
 8005d86:	2101      	movs	r1, #1
 8005d88:	5499      	strb	r1, [r3, r2]
 8005d8a:	e061      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8005d8c:	230c      	movs	r3, #12
 8005d8e:	18fb      	adds	r3, r7, r3
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	2108      	movs	r1, #8
 8005d94:	0018      	movs	r0, r3
 8005d96:	f000 f995 	bl	80060c4 <unsigned_bitwise_modulo>
 8005d9a:	0003      	movs	r3, r0
 8005d9c:	2b80      	cmp	r3, #128	@ 0x80
 8005d9e:	d957      	bls.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8005da0:	2212      	movs	r2, #18
 8005da2:	18bb      	adds	r3, r7, r2
 8005da4:	18ba      	adds	r2, r7, r2
 8005da6:	8812      	ldrh	r2, [r2, #0]
 8005da8:	3a01      	subs	r2, #1
 8005daa:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8005dac:	2410      	movs	r4, #16
 8005dae:	193b      	adds	r3, r7, r4
 8005db0:	193a      	adds	r2, r7, r4
 8005db2:	8812      	ldrh	r2, [r2, #0]
 8005db4:	3201      	adds	r2, #1
 8005db6:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005db8:	193b      	adds	r3, r7, r4
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	f000 f980 	bl	80060c4 <unsigned_bitwise_modulo>
 8005dc4:	1e03      	subs	r3, r0, #0
 8005dc6:	d120      	bne.n	8005e0a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x62a>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005dc8:	193b      	adds	r3, r7, r4
 8005dca:	193a      	adds	r2, r7, r4
 8005dcc:	8812      	ldrh	r2, [r2, #0]
 8005dce:	0852      	lsrs	r2, r2, #1
 8005dd0:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005dd2:	2316      	movs	r3, #22
 8005dd4:	18fb      	adds	r3, r7, r3
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d108      	bne.n	8005dee <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x60e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005ddc:	2317      	movs	r3, #23
 8005dde:	18fb      	adds	r3, r7, r3
 8005de0:	2200      	movs	r2, #0
 8005de2:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2220      	movs	r2, #32
 8005de8:	2100      	movs	r1, #0
 8005dea:	5499      	strb	r1, [r3, r2]
 8005dec:	e030      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005dee:	2316      	movs	r3, #22
 8005df0:	18fb      	adds	r3, r7, r3
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d12b      	bne.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005df8:	2317      	movs	r3, #23
 8005dfa:	18fb      	adds	r3, r7, r3
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2220      	movs	r2, #32
 8005e04:	2101      	movs	r1, #1
 8005e06:	5499      	strb	r1, [r3, r2]
 8005e08:	e022      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005e0a:	2210      	movs	r2, #16
 8005e0c:	18bb      	adds	r3, r7, r2
 8005e0e:	18ba      	adds	r2, r7, r2
 8005e10:	8812      	ldrh	r2, [r2, #0]
 8005e12:	0852      	lsrs	r2, r2, #1
 8005e14:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005e16:	2316      	movs	r3, #22
 8005e18:	18fb      	adds	r3, r7, r3
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d108      	bne.n	8005e32 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x652>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005e20:	2317      	movs	r3, #23
 8005e22:	18fb      	adds	r3, r7, r3
 8005e24:	2200      	movs	r2, #0
 8005e26:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	5499      	strb	r1, [r3, r2]
 8005e30:	e00e      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005e32:	2316      	movs	r3, #22
 8005e34:	18fb      	adds	r3, r7, r3
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d109      	bne.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005e3c:	2317      	movs	r3, #23
 8005e3e:	18fb      	adds	r3, r7, r3
 8005e40:	2201      	movs	r2, #1
 8005e42:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2220      	movs	r2, #32
 8005e48:	2101      	movs	r1, #1
 8005e4a:	5499      	strb	r1, [r3, r2]
 8005e4c:	e000      	b.n	8005e50 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005e4e:	46c0      	nop			@ (mov r8, r8)
			}

	        //DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	        //NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	        //ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8005e50:	2316      	movs	r3, #22
 8005e52:	18fb      	adds	r3, r7, r3
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d152      	bne.n	8005f00 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x720>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8005e5a:	2317      	movs	r3, #23
 8005e5c:	18fb      	adds	r3, r7, r3
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d109      	bne.n	8005e78 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x698>

	                params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8005e64:	2312      	movs	r3, #18
 8005e66:	18fb      	adds	r3, r7, r3
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	2280      	movs	r2, #128	@ 0x80
 8005e6c:	0052      	lsls	r2, r2, #1
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	829a      	strh	r2, [r3, #20]
 8005e76:	e099      	b.n	8005fac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8005e78:	2317      	movs	r3, #23
 8005e7a:	18fb      	adds	r3, r7, r3
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d11b      	bne.n	8005eba <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6da>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	89db      	ldrh	r3, [r3, #14]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	2101      	movs	r1, #1
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	f000 f91a 	bl	80060c4 <unsigned_bitwise_modulo>
 8005e90:	1e03      	subs	r3, r0, #0
 8005e92:	d109      	bne.n	8005ea8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6c8>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8005e94:	2312      	movs	r3, #18
 8005e96:	18fb      	adds	r3, r7, r3
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	2280      	movs	r2, #128	@ 0x80
 8005e9c:	0052      	lsls	r2, r2, #1
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	829a      	strh	r2, [r3, #20]
 8005ea6:	e081      	b.n	8005fac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten - 1;
 8005ea8:	2312      	movs	r3, #18
 8005eaa:	18fb      	adds	r3, r7, r3
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	22ff      	movs	r2, #255	@ 0xff
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	829a      	strh	r2, [r3, #20]
 8005eb8:	e078      	b.n	8005fac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8005eba:	2317      	movs	r3, #23
 8005ebc:	18fb      	adds	r3, r7, r3
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d000      	beq.n	8005ec6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6e6>
 8005ec4:	e072      	b.n	8005fac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	89db      	ldrh	r3, [r3, #14]
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	2101      	movs	r1, #1
 8005ece:	0018      	movs	r0, r3
 8005ed0:	f000 f8f8 	bl	80060c4 <unsigned_bitwise_modulo>
 8005ed4:	1e03      	subs	r3, r0, #0
 8005ed6:	d109      	bne.n	8005eec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x70c>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8005ed8:	2312      	movs	r3, #18
 8005eda:	18fb      	adds	r3, r7, r3
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	2280      	movs	r2, #128	@ 0x80
 8005ee0:	0052      	lsls	r2, r2, #1
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	829a      	strh	r2, [r3, #20]
 8005eea:	e05f      	b.n	8005fac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten + 1;
 8005eec:	2312      	movs	r3, #18
 8005eee:	18fb      	adds	r3, r7, r3
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	32ff      	adds	r2, #255	@ 0xff
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	829a      	strh	r2, [r3, #20]
 8005efe:	e055      	b.n	8005fac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	        }
	        else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005f00:	2316      	movs	r3, #22
 8005f02:	18fb      	adds	r3, r7, r3
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d150      	bne.n	8005fac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8005f0a:	2317      	movs	r3, #23
 8005f0c:	18fb      	adds	r3, r7, r3
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d109      	bne.n	8005f28 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x748>

	                params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8005f14:	2310      	movs	r3, #16
 8005f16:	18fb      	adds	r3, r7, r3
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	2280      	movs	r2, #128	@ 0x80
 8005f1c:	0052      	lsls	r2, r2, #1
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	829a      	strh	r2, [r3, #20]
 8005f26:	e041      	b.n	8005fac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8005f28:	2317      	movs	r3, #23
 8005f2a:	18fb      	adds	r3, r7, r3
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d11b      	bne.n	8005f6a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x78a>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	89db      	ldrh	r3, [r3, #14]
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	2101      	movs	r1, #1
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f000 f8c2 	bl	80060c4 <unsigned_bitwise_modulo>
 8005f40:	1e03      	subs	r3, r0, #0
 8005f42:	d109      	bne.n	8005f58 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x778>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8005f44:	2310      	movs	r3, #16
 8005f46:	18fb      	adds	r3, r7, r3
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	2280      	movs	r2, #128	@ 0x80
 8005f4c:	0052      	lsls	r2, r2, #1
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	829a      	strh	r2, [r3, #20]
 8005f56:	e029      	b.n	8005fac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 8005f58:	2310      	movs	r3, #16
 8005f5a:	18fb      	adds	r3, r7, r3
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	22ff      	movs	r2, #255	@ 0xff
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	829a      	strh	r2, [r3, #20]
 8005f68:	e020      	b.n	8005fac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8005f6a:	2317      	movs	r3, #23
 8005f6c:	18fb      	adds	r3, r7, r3
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d11b      	bne.n	8005fac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	89db      	ldrh	r3, [r3, #14]
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	f000 f8a1 	bl	80060c4 <unsigned_bitwise_modulo>
 8005f82:	1e03      	subs	r3, r0, #0
 8005f84:	d109      	bne.n	8005f9a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7ba>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8005f86:	2310      	movs	r3, #16
 8005f88:	18fb      	adds	r3, r7, r3
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	2280      	movs	r2, #128	@ 0x80
 8005f8e:	0052      	lsls	r2, r2, #1
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	829a      	strh	r2, [r3, #20]
 8005f98:	e008      	b.n	8005fac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen + 1;
 8005f9a:	2310      	movs	r3, #16
 8005f9c:	18fb      	adds	r3, r7, r3
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	32ff      	adds	r2, #255	@ 0xff
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	829a      	strh	r2, [r3, #20]
	                }
	            }
	        }

	        Adjust_TIM16_Prescaler(params_ptr);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f7ff fbf4 	bl	800579c <Adjust_TIM16_Prescaler>
		params_ptr->final_start_value = params_ptr->raw_start_value;
		params_ptr->prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(params_ptr);
    #endif

    params_ptr->final_period = 256 - params_ptr->final_start_value;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	8a9b      	ldrh	r3, [r3, #20]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	2280      	movs	r2, #128	@ 0x80
 8005fbc:	0052      	lsls	r2, r2, #1
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	82da      	strh	r2, [r3, #22]
    params_ptr->final_ARR = params_ptr->final_period - 1;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	8adb      	ldrh	r3, [r3, #22]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	831a      	strh	r2, [r3, #24]
    params_ptr->final_prescaler_minus_one = params_ptr->final_prescaler - 1;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	8b9b      	ldrh	r3, [r3, #28]
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	83da      	strh	r2, [r3, #30]

    return 1;
 8005fe2:	2301      	movs	r3, #1
}
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	b007      	add	sp, #28
 8005fea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ff0:	46c0      	nop			@ (mov r8, r8)
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <Start_OC_TIM>:
//INCLUDES
#include "timers.h"

//FUNCTION DEFINITIONS
uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8005ff6:	b5b0      	push	{r4, r5, r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 8006000:	250f      	movs	r5, #15
 8006002:	197c      	adds	r4, r7, r5
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	0011      	movs	r1, r2
 800600a:	0018      	movs	r0, r3
 800600c:	f003 fd8c 	bl	8009b28 <HAL_TIM_OC_Start_IT>
 8006010:	0003      	movs	r3, r0
 8006012:	7023      	strb	r3, [r4, #0]
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 8006014:	197b      	adds	r3, r7, r5
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <Start_OC_TIM+0x2a>

		Error_Handler();
 800601c:	f7fc f93a 	bl	8002294 <Error_Handler>
	}

	return ok;
 8006020:	230f      	movs	r3, #15
 8006022:	18fb      	adds	r3, r7, r3
 8006024:	781b      	ldrb	r3, [r3, #0]
}
 8006026:	0018      	movs	r0, r3
 8006028:	46bd      	mov	sp, r7
 800602a:	b004      	add	sp, #16
 800602c:	bdb0      	pop	{r4, r5, r7, pc}

0800602e <Stop_OC_TIM>:

uint8_t Stop_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 800602e:	b5b0      	push	{r4, r5, r7, lr}
 8006030:	b084      	sub	sp, #16
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Stop_IT(TIM, OC_TIM_channel);
 8006038:	250f      	movs	r5, #15
 800603a:	197c      	adds	r4, r7, r5
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	0011      	movs	r1, r2
 8006042:	0018      	movs	r0, r3
 8006044:	f003 fe94 	bl	8009d70 <HAL_TIM_OC_Stop_IT>
 8006048:	0003      	movs	r3, r0
 800604a:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 800604c:	197b      	adds	r3, r7, r5
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <Stop_OC_TIM+0x2a>

		Error_Handler();
 8006054:	f7fc f91e 	bl	8002294 <Error_Handler>
	}

	return ok;
 8006058:	230f      	movs	r3, #15
 800605a:	18fb      	adds	r3, r7, r3
 800605c:	781b      	ldrb	r3, [r3, #0]
}
 800605e:	0018      	movs	r0, r3
 8006060:	46bd      	mov	sp, r7
 8006062:	b004      	add	sp, #16
 8006064:	bdb0      	pop	{r4, r5, r7, pc}

08006066 <isPrime>:
#include "utility.h"

enum Validate isPrime(uint16_t x){
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	0002      	movs	r2, r0
 800606e:	1dbb      	adds	r3, r7, #6
 8006070:	801a      	strh	r2, [r3, #0]
    for (uint16_t d = 2; d * d <= x; d++) {
 8006072:	230e      	movs	r3, #14
 8006074:	18fb      	adds	r3, r7, r3
 8006076:	2202      	movs	r2, #2
 8006078:	801a      	strh	r2, [r3, #0]
 800607a:	e014      	b.n	80060a6 <isPrime+0x40>
        if (x % d == 0)
 800607c:	1dba      	adds	r2, r7, #6
 800607e:	230e      	movs	r3, #14
 8006080:	18fb      	adds	r3, r7, r3
 8006082:	8812      	ldrh	r2, [r2, #0]
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	0019      	movs	r1, r3
 8006088:	0010      	movs	r0, r2
 800608a:	f7fa f8c1 	bl	8000210 <__aeabi_uidivmod>
 800608e:	000b      	movs	r3, r1
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <isPrime+0x34>
            return NO;
 8006096:	2300      	movs	r3, #0
 8006098:	e010      	b.n	80060bc <isPrime+0x56>
    for (uint16_t d = 2; d * d <= x; d++) {
 800609a:	210e      	movs	r1, #14
 800609c:	187b      	adds	r3, r7, r1
 800609e:	881a      	ldrh	r2, [r3, #0]
 80060a0:	187b      	adds	r3, r7, r1
 80060a2:	3201      	adds	r2, #1
 80060a4:	801a      	strh	r2, [r3, #0]
 80060a6:	220e      	movs	r2, #14
 80060a8:	18bb      	adds	r3, r7, r2
 80060aa:	881b      	ldrh	r3, [r3, #0]
 80060ac:	18ba      	adds	r2, r7, r2
 80060ae:	8812      	ldrh	r2, [r2, #0]
 80060b0:	435a      	muls	r2, r3
 80060b2:	1dbb      	adds	r3, r7, #6
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	dde0      	ble.n	800607c <isPrime+0x16>
    }
    return YES;
 80060ba:	2301      	movs	r3, #1
}
 80060bc:	0018      	movs	r0, r3
 80060be:	46bd      	mov	sp, r7
 80060c0:	b004      	add	sp, #16
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	000a      	movs	r2, r1
 80060ce:	1cfb      	adds	r3, r7, #3
 80060d0:	701a      	strb	r2, [r3, #0]

    return dividend & ((1 << base_2_exponent) - 1);
 80060d2:	1cfb      	adds	r3, r7, #3
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2201      	movs	r2, #1
 80060d8:	409a      	lsls	r2, r3
 80060da:	0013      	movs	r3, r2
 80060dc:	3b01      	subs	r3, #1
 80060de:	001a      	movs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4013      	ands	r3, r2
}
 80060e4:	0018      	movs	r0, r3
 80060e6:	46bd      	mov	sp, r7
 80060e8:	b002      	add	sp, #8
 80060ea:	bd80      	pop	{r7, pc}

080060ec <Global_Interrupt_Enable>:

uint8_t Global_Interrupt_Enable(void){
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80060f0:	b662      	cpsie	i
}
 80060f2:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
	return 1;
 80060f4:	2301      	movs	r3, #1
}
 80060f6:	0018      	movs	r0, r3
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <Get_Status_Bit>:

	__disable_irq();
	return 1;
}

enum Validate Get_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	000a      	movs	r2, r1
 8006106:	1cbb      	adds	r3, r7, #2
 8006108:	801a      	strh	r2, [r3, #0]

    if(*bits & bit){
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	1cba      	adds	r2, r7, #2
 8006110:	8812      	ldrh	r2, [r2, #0]
 8006112:	4013      	ands	r3, r2
 8006114:	d001      	beq.n	800611a <Get_Status_Bit+0x1e>

        return (enum Validate) YES;
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <Get_Status_Bit+0x20>
    }

    else{

        return (enum Validate) NO;
 800611a:	2300      	movs	r3, #0
    }
}
 800611c:	0018      	movs	r0, r3
 800611e:	46bd      	mov	sp, r7
 8006120:	b002      	add	sp, #8
 8006122:	bd80      	pop	{r7, pc}

08006124 <Set_Status_Bit>:

void Set_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	000a      	movs	r2, r1
 800612e:	1cbb      	adds	r3, r7, #2
 8006130:	801a      	strh	r2, [r3, #0]

	*bits |= bit;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	1cbb      	adds	r3, r7, #2
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	431a      	orrs	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	601a      	str	r2, [r3, #0]
}
 8006140:	46c0      	nop			@ (mov r8, r8)
 8006142:	46bd      	mov	sp, r7
 8006144:	b002      	add	sp, #8
 8006146:	bd80      	pop	{r7, pc}

08006148 <Clear_Status_Bit>:

void Clear_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	000a      	movs	r2, r1
 8006152:	1cbb      	adds	r3, r7, #2
 8006154:	801a      	strh	r2, [r3, #0]

	*bits &= ~bit;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	1cba      	adds	r2, r7, #2
 800615c:	8812      	ldrh	r2, [r2, #0]
 800615e:	43d2      	mvns	r2, r2
 8006160:	401a      	ands	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	601a      	str	r2, [r3, #0]
}
 8006166:	46c0      	nop			@ (mov r8, r8)
 8006168:	46bd      	mov	sp, r7
 800616a:	b002      	add	sp, #8
 800616c:	bd80      	pop	{r7, pc}
	...

08006170 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006170:	480d      	ldr	r0, [pc, #52]	@ (80061a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006172:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006174:	f7ff ff3a 	bl	8005fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006178:	480c      	ldr	r0, [pc, #48]	@ (80061ac <LoopForever+0x6>)
  ldr r1, =_edata
 800617a:	490d      	ldr	r1, [pc, #52]	@ (80061b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800617c:	4a0d      	ldr	r2, [pc, #52]	@ (80061b4 <LoopForever+0xe>)
  movs r3, #0
 800617e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006180:	e002      	b.n	8006188 <LoopCopyDataInit>

08006182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006186:	3304      	adds	r3, #4

08006188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800618a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800618c:	d3f9      	bcc.n	8006182 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800618e:	4a0a      	ldr	r2, [pc, #40]	@ (80061b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006190:	4c0a      	ldr	r4, [pc, #40]	@ (80061bc <LoopForever+0x16>)
  movs r3, #0
 8006192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006194:	e001      	b.n	800619a <LoopFillZerobss>

08006196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006198:	3204      	adds	r2, #4

0800619a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800619a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800619c:	d3fb      	bcc.n	8006196 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800619e:	f007 f9ed 	bl	800d57c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80061a2:	f7fe fad3 	bl	800474c <main>

080061a6 <LoopForever>:

LoopForever:
  b LoopForever
 80061a6:	e7fe      	b.n	80061a6 <LoopForever>
  ldr   r0, =_estack
 80061a8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80061ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80061b0:	20000458 	.word	0x20000458
  ldr r2, =_sidata
 80061b4:	0800e070 	.word	0x0800e070
  ldr r2, =_sbss
 80061b8:	20000458 	.word	0x20000458
  ldr r4, =_ebss
 80061bc:	20000ce8 	.word	0x20000ce8

080061c0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80061c0:	e7fe      	b.n	80061c0 <ADC1_IRQHandler>
	...

080061c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80061ca:	1dfb      	adds	r3, r7, #7
 80061cc:	2200      	movs	r2, #0
 80061ce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80061d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006200 <HAL_Init+0x3c>)
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006200 <HAL_Init+0x3c>)
 80061d6:	2180      	movs	r1, #128	@ 0x80
 80061d8:	0049      	lsls	r1, r1, #1
 80061da:	430a      	orrs	r2, r1
 80061dc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80061de:	2000      	movs	r0, #0
 80061e0:	f000 f810 	bl	8006204 <HAL_InitTick>
 80061e4:	1e03      	subs	r3, r0, #0
 80061e6:	d003      	beq.n	80061f0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80061e8:	1dfb      	adds	r3, r7, #7
 80061ea:	2201      	movs	r2, #1
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	e001      	b.n	80061f4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80061f0:	f7fe fef8 	bl	8004fe4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80061f4:	1dfb      	adds	r3, r7, #7
 80061f6:	781b      	ldrb	r3, [r3, #0]
}
 80061f8:	0018      	movs	r0, r3
 80061fa:	46bd      	mov	sp, r7
 80061fc:	b002      	add	sp, #8
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	40022000 	.word	0x40022000

08006204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006204:	b590      	push	{r4, r7, lr}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800620c:	230f      	movs	r3, #15
 800620e:	18fb      	adds	r3, r7, r3
 8006210:	2200      	movs	r2, #0
 8006212:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8006214:	4b1d      	ldr	r3, [pc, #116]	@ (800628c <HAL_InitTick+0x88>)
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d02b      	beq.n	8006274 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800621c:	4b1c      	ldr	r3, [pc, #112]	@ (8006290 <HAL_InitTick+0x8c>)
 800621e:	681c      	ldr	r4, [r3, #0]
 8006220:	4b1a      	ldr	r3, [pc, #104]	@ (800628c <HAL_InitTick+0x88>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	0019      	movs	r1, r3
 8006226:	23fa      	movs	r3, #250	@ 0xfa
 8006228:	0098      	lsls	r0, r3, #2
 800622a:	f7f9 ff6b 	bl	8000104 <__udivsi3>
 800622e:	0003      	movs	r3, r0
 8006230:	0019      	movs	r1, r3
 8006232:	0020      	movs	r0, r4
 8006234:	f7f9 ff66 	bl	8000104 <__udivsi3>
 8006238:	0003      	movs	r3, r0
 800623a:	0018      	movs	r0, r3
 800623c:	f001 fb75 	bl	800792a <HAL_SYSTICK_Config>
 8006240:	1e03      	subs	r3, r0, #0
 8006242:	d112      	bne.n	800626a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b03      	cmp	r3, #3
 8006248:	d80a      	bhi.n	8006260 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	2301      	movs	r3, #1
 800624e:	425b      	negs	r3, r3
 8006250:	2200      	movs	r2, #0
 8006252:	0018      	movs	r0, r3
 8006254:	f001 fb34 	bl	80078c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006258:	4b0e      	ldr	r3, [pc, #56]	@ (8006294 <HAL_InitTick+0x90>)
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	e00d      	b.n	800627c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8006260:	230f      	movs	r3, #15
 8006262:	18fb      	adds	r3, r7, r3
 8006264:	2201      	movs	r2, #1
 8006266:	701a      	strb	r2, [r3, #0]
 8006268:	e008      	b.n	800627c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800626a:	230f      	movs	r3, #15
 800626c:	18fb      	adds	r3, r7, r3
 800626e:	2201      	movs	r2, #1
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	e003      	b.n	800627c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006274:	230f      	movs	r3, #15
 8006276:	18fb      	adds	r3, r7, r3
 8006278:	2201      	movs	r2, #1
 800627a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800627c:	230f      	movs	r3, #15
 800627e:	18fb      	adds	r3, r7, r3
 8006280:	781b      	ldrb	r3, [r3, #0]
}
 8006282:	0018      	movs	r0, r3
 8006284:	46bd      	mov	sp, r7
 8006286:	b005      	add	sp, #20
 8006288:	bd90      	pop	{r4, r7, pc}
 800628a:	46c0      	nop			@ (mov r8, r8)
 800628c:	20000454 	.word	0x20000454
 8006290:	2000044c 	.word	0x2000044c
 8006294:	20000450 	.word	0x20000450

08006298 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800629c:	4b05      	ldr	r3, [pc, #20]	@ (80062b4 <HAL_IncTick+0x1c>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	001a      	movs	r2, r3
 80062a2:	4b05      	ldr	r3, [pc, #20]	@ (80062b8 <HAL_IncTick+0x20>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	18d2      	adds	r2, r2, r3
 80062a8:	4b03      	ldr	r3, [pc, #12]	@ (80062b8 <HAL_IncTick+0x20>)
 80062aa:	601a      	str	r2, [r3, #0]
}
 80062ac:	46c0      	nop			@ (mov r8, r8)
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	46c0      	nop			@ (mov r8, r8)
 80062b4:	20000454 	.word	0x20000454
 80062b8:	20000ce4 	.word	0x20000ce4

080062bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
  return uwTick;
 80062c0:	4b02      	ldr	r3, [pc, #8]	@ (80062cc <HAL_GetTick+0x10>)
 80062c2:	681b      	ldr	r3, [r3, #0]
}
 80062c4:	0018      	movs	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	46c0      	nop			@ (mov r8, r8)
 80062cc:	20000ce4 	.word	0x20000ce4

080062d0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a05      	ldr	r2, [pc, #20]	@ (80062f4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80062e0:	401a      	ands	r2, r3
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	431a      	orrs	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	601a      	str	r2, [r3, #0]
}
 80062ea:	46c0      	nop			@ (mov r8, r8)
 80062ec:	46bd      	mov	sp, r7
 80062ee:	b002      	add	sp, #8
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	46c0      	nop			@ (mov r8, r8)
 80062f4:	fe3fffff 	.word	0xfe3fffff

080062f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	23e0      	movs	r3, #224	@ 0xe0
 8006306:	045b      	lsls	r3, r3, #17
 8006308:	4013      	ands	r3, r2
}
 800630a:	0018      	movs	r0, r3
 800630c:	46bd      	mov	sp, r7
 800630e:	b002      	add	sp, #8
 8006310:	bd80      	pop	{r7, pc}

08006312 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b084      	sub	sp, #16
 8006316:	af00      	add	r7, sp, #0
 8006318:	60f8      	str	r0, [r7, #12]
 800631a:	60b9      	str	r1, [r7, #8]
 800631c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	2104      	movs	r1, #4
 8006326:	400a      	ands	r2, r1
 8006328:	2107      	movs	r1, #7
 800632a:	4091      	lsls	r1, r2
 800632c:	000a      	movs	r2, r1
 800632e:	43d2      	mvns	r2, r2
 8006330:	401a      	ands	r2, r3
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2104      	movs	r1, #4
 8006336:	400b      	ands	r3, r1
 8006338:	6879      	ldr	r1, [r7, #4]
 800633a:	4099      	lsls	r1, r3
 800633c:	000b      	movs	r3, r1
 800633e:	431a      	orrs	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8006344:	46c0      	nop			@ (mov r8, r8)
 8006346:	46bd      	mov	sp, r7
 8006348:	b004      	add	sp, #16
 800634a:	bd80      	pop	{r7, pc}

0800634c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	2104      	movs	r1, #4
 800635e:	400a      	ands	r2, r1
 8006360:	2107      	movs	r1, #7
 8006362:	4091      	lsls	r1, r2
 8006364:	000a      	movs	r2, r1
 8006366:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	2104      	movs	r1, #4
 800636c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800636e:	40da      	lsrs	r2, r3
 8006370:	0013      	movs	r3, r2
}
 8006372:	0018      	movs	r0, r3
 8006374:	46bd      	mov	sp, r7
 8006376:	b002      	add	sp, #8
 8006378:	bd80      	pop	{r7, pc}

0800637a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b082      	sub	sp, #8
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68da      	ldr	r2, [r3, #12]
 8006386:	23c0      	movs	r3, #192	@ 0xc0
 8006388:	011b      	lsls	r3, r3, #4
 800638a:	4013      	ands	r3, r2
 800638c:	d101      	bne.n	8006392 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800638e:	2301      	movs	r3, #1
 8006390:	e000      	b.n	8006394 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006392:	2300      	movs	r3, #0
}
 8006394:	0018      	movs	r0, r3
 8006396:	46bd      	mov	sp, r7
 8006398:	b002      	add	sp, #8
 800639a:	bd80      	pop	{r7, pc}

0800639c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	211f      	movs	r1, #31
 80063b0:	400a      	ands	r2, r1
 80063b2:	210f      	movs	r1, #15
 80063b4:	4091      	lsls	r1, r2
 80063b6:	000a      	movs	r2, r1
 80063b8:	43d2      	mvns	r2, r2
 80063ba:	401a      	ands	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	0e9b      	lsrs	r3, r3, #26
 80063c0:	210f      	movs	r1, #15
 80063c2:	4019      	ands	r1, r3
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	201f      	movs	r0, #31
 80063c8:	4003      	ands	r3, r0
 80063ca:	4099      	lsls	r1, r3
 80063cc:	000b      	movs	r3, r1
 80063ce:	431a      	orrs	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80063d4:	46c0      	nop			@ (mov r8, r8)
 80063d6:	46bd      	mov	sp, r7
 80063d8:	b004      	add	sp, #16
 80063da:	bd80      	pop	{r7, pc}

080063dc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	035b      	lsls	r3, r3, #13
 80063ee:	0b5b      	lsrs	r3, r3, #13
 80063f0:	431a      	orrs	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80063f6:	46c0      	nop			@ (mov r8, r8)
 80063f8:	46bd      	mov	sp, r7
 80063fa:	b002      	add	sp, #8
 80063fc:	bd80      	pop	{r7, pc}

080063fe <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b082      	sub	sp, #8
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	0352      	lsls	r2, r2, #13
 8006410:	0b52      	lsrs	r2, r2, #13
 8006412:	43d2      	mvns	r2, r2
 8006414:	401a      	ands	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800641a:	46c0      	nop			@ (mov r8, r8)
 800641c:	46bd      	mov	sp, r7
 800641e:	b002      	add	sp, #8
 8006420:	bd80      	pop	{r7, pc}
	...

08006424 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	0212      	lsls	r2, r2, #8
 8006438:	43d2      	mvns	r2, r2
 800643a:	401a      	ands	r2, r3
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	021b      	lsls	r3, r3, #8
 8006440:	6879      	ldr	r1, [r7, #4]
 8006442:	400b      	ands	r3, r1
 8006444:	4904      	ldr	r1, [pc, #16]	@ (8006458 <LL_ADC_SetChannelSamplingTime+0x34>)
 8006446:	400b      	ands	r3, r1
 8006448:	431a      	orrs	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800644e:	46c0      	nop			@ (mov r8, r8)
 8006450:	46bd      	mov	sp, r7
 8006452:	b004      	add	sp, #16
 8006454:	bd80      	pop	{r7, pc}
 8006456:	46c0      	nop			@ (mov r8, r8)
 8006458:	07ffff00 	.word	0x07ffff00

0800645c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	4a05      	ldr	r2, [pc, #20]	@ (8006480 <LL_ADC_EnableInternalRegulator+0x24>)
 800646a:	4013      	ands	r3, r2
 800646c:	2280      	movs	r2, #128	@ 0x80
 800646e:	0552      	lsls	r2, r2, #21
 8006470:	431a      	orrs	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006476:	46c0      	nop			@ (mov r8, r8)
 8006478:	46bd      	mov	sp, r7
 800647a:	b002      	add	sp, #8
 800647c:	bd80      	pop	{r7, pc}
 800647e:	46c0      	nop			@ (mov r8, r8)
 8006480:	6fffffe8 	.word	0x6fffffe8

08006484 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689a      	ldr	r2, [r3, #8]
 8006490:	2380      	movs	r3, #128	@ 0x80
 8006492:	055b      	lsls	r3, r3, #21
 8006494:	401a      	ands	r2, r3
 8006496:	2380      	movs	r3, #128	@ 0x80
 8006498:	055b      	lsls	r3, r3, #21
 800649a:	429a      	cmp	r2, r3
 800649c:	d101      	bne.n	80064a2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800649e:	2301      	movs	r3, #1
 80064a0:	e000      	b.n	80064a4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	0018      	movs	r0, r3
 80064a6:	46bd      	mov	sp, r7
 80064a8:	b002      	add	sp, #8
 80064aa:	bd80      	pop	{r7, pc}

080064ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	4a04      	ldr	r2, [pc, #16]	@ (80064cc <LL_ADC_Enable+0x20>)
 80064ba:	4013      	ands	r3, r2
 80064bc:	2201      	movs	r2, #1
 80064be:	431a      	orrs	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80064c4:	46c0      	nop			@ (mov r8, r8)
 80064c6:	46bd      	mov	sp, r7
 80064c8:	b002      	add	sp, #8
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	7fffffe8 	.word	0x7fffffe8

080064d0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	4a04      	ldr	r2, [pc, #16]	@ (80064f0 <LL_ADC_Disable+0x20>)
 80064de:	4013      	ands	r3, r2
 80064e0:	2202      	movs	r2, #2
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80064e8:	46c0      	nop			@ (mov r8, r8)
 80064ea:	46bd      	mov	sp, r7
 80064ec:	b002      	add	sp, #8
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	7fffffe8 	.word	0x7fffffe8

080064f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	2201      	movs	r2, #1
 8006502:	4013      	ands	r3, r2
 8006504:	2b01      	cmp	r3, #1
 8006506:	d101      	bne.n	800650c <LL_ADC_IsEnabled+0x18>
 8006508:	2301      	movs	r3, #1
 800650a:	e000      	b.n	800650e <LL_ADC_IsEnabled+0x1a>
 800650c:	2300      	movs	r3, #0
}
 800650e:	0018      	movs	r0, r3
 8006510:	46bd      	mov	sp, r7
 8006512:	b002      	add	sp, #8
 8006514:	bd80      	pop	{r7, pc}

08006516 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b082      	sub	sp, #8
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	2202      	movs	r2, #2
 8006524:	4013      	ands	r3, r2
 8006526:	2b02      	cmp	r3, #2
 8006528:	d101      	bne.n	800652e <LL_ADC_IsDisableOngoing+0x18>
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <LL_ADC_IsDisableOngoing+0x1a>
 800652e:	2300      	movs	r3, #0
}
 8006530:	0018      	movs	r0, r3
 8006532:	46bd      	mov	sp, r7
 8006534:	b002      	add	sp, #8
 8006536:	bd80      	pop	{r7, pc}

08006538 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	4a04      	ldr	r2, [pc, #16]	@ (8006558 <LL_ADC_REG_StartConversion+0x20>)
 8006546:	4013      	ands	r3, r2
 8006548:	2204      	movs	r2, #4
 800654a:	431a      	orrs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006550:	46c0      	nop			@ (mov r8, r8)
 8006552:	46bd      	mov	sp, r7
 8006554:	b002      	add	sp, #8
 8006556:	bd80      	pop	{r7, pc}
 8006558:	7fffffe8 	.word	0x7fffffe8

0800655c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	4a04      	ldr	r2, [pc, #16]	@ (800657c <LL_ADC_REG_StopConversion+0x20>)
 800656a:	4013      	ands	r3, r2
 800656c:	2210      	movs	r2, #16
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006574:	46c0      	nop			@ (mov r8, r8)
 8006576:	46bd      	mov	sp, r7
 8006578:	b002      	add	sp, #8
 800657a:	bd80      	pop	{r7, pc}
 800657c:	7fffffe8 	.word	0x7fffffe8

08006580 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	2204      	movs	r2, #4
 800658e:	4013      	ands	r3, r2
 8006590:	2b04      	cmp	r3, #4
 8006592:	d101      	bne.n	8006598 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006594:	2301      	movs	r3, #1
 8006596:	e000      	b.n	800659a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006598:	2300      	movs	r3, #0
}
 800659a:	0018      	movs	r0, r3
 800659c:	46bd      	mov	sp, r7
 800659e:	b002      	add	sp, #8
 80065a0:	bd80      	pop	{r7, pc}
	...

080065a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b088      	sub	sp, #32
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065ac:	231f      	movs	r3, #31
 80065ae:	18fb      	adds	r3, r7, r3
 80065b0:	2200      	movs	r2, #0
 80065b2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80065b4:	2300      	movs	r3, #0
 80065b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e19f      	b.n	800690a <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d12a      	bne.n	8006628 <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4acf      	ldr	r2, [pc, #828]	@ (8006914 <HAL_ADC_Init+0x370>)
 80065d6:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4acf      	ldr	r2, [pc, #828]	@ (8006918 <HAL_ADC_Init+0x374>)
 80065dc:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4ace      	ldr	r2, [pc, #824]	@ (800691c <HAL_ADC_Init+0x378>)
 80065e2:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4ace      	ldr	r2, [pc, #824]	@ (8006920 <HAL_ADC_Init+0x37c>)
 80065e8:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4acd      	ldr	r2, [pc, #820]	@ (8006924 <HAL_ADC_Init+0x380>)
 80065ee:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4acd      	ldr	r2, [pc, #820]	@ (8006928 <HAL_ADC_Init+0x384>)
 80065f4:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4acc      	ldr	r2, [pc, #816]	@ (800692c <HAL_ADC_Init+0x388>)
 80065fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (hadc->MspInitCallback == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2280      	movs	r2, #128	@ 0x80
 8006600:	589b      	ldr	r3, [r3, r2]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d103      	bne.n	800660e <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2180      	movs	r1, #128	@ 0x80
 800660a:	4ac9      	ldr	r2, [pc, #804]	@ (8006930 <HAL_ADC_Init+0x38c>)
 800660c:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2280      	movs	r2, #128	@ 0x80
 8006612:	589b      	ldr	r3, [r3, r2]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	0010      	movs	r0, r2
 8006618:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2254      	movs	r2, #84	@ 0x54
 8006624:	2100      	movs	r1, #0
 8006626:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	0018      	movs	r0, r3
 800662e:	f7ff ff29 	bl	8006484 <LL_ADC_IsInternalRegulatorEnabled>
 8006632:	1e03      	subs	r3, r0, #0
 8006634:	d115      	bne.n	8006662 <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	0018      	movs	r0, r3
 800663c:	f7ff ff0e 	bl	800645c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006640:	4bbc      	ldr	r3, [pc, #752]	@ (8006934 <HAL_ADC_Init+0x390>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	49bc      	ldr	r1, [pc, #752]	@ (8006938 <HAL_ADC_Init+0x394>)
 8006646:	0018      	movs	r0, r3
 8006648:	f7f9 fd5c 	bl	8000104 <__udivsi3>
 800664c:	0003      	movs	r3, r0
 800664e:	3301      	adds	r3, #1
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006654:	e002      	b.n	800665c <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3b01      	subs	r3, #1
 800665a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1f9      	bne.n	8006656 <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	0018      	movs	r0, r3
 8006668:	f7ff ff0c 	bl	8006484 <LL_ADC_IsInternalRegulatorEnabled>
 800666c:	1e03      	subs	r3, r0, #0
 800666e:	d10f      	bne.n	8006690 <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006674:	2210      	movs	r2, #16
 8006676:	431a      	orrs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006680:	2201      	movs	r2, #1
 8006682:	431a      	orrs	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006688:	231f      	movs	r3, #31
 800668a:	18fb      	adds	r3, r7, r3
 800668c:	2201      	movs	r2, #1
 800668e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	0018      	movs	r0, r3
 8006696:	f7ff ff73 	bl	8006580 <LL_ADC_REG_IsConversionOngoing>
 800669a:	0003      	movs	r3, r0
 800669c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066a2:	2210      	movs	r2, #16
 80066a4:	4013      	ands	r3, r2
 80066a6:	d000      	beq.n	80066aa <HAL_ADC_Init+0x106>
 80066a8:	e122      	b.n	80068f0 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d000      	beq.n	80066b2 <HAL_ADC_Init+0x10e>
 80066b0:	e11e      	b.n	80068f0 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b6:	4aa1      	ldr	r2, [pc, #644]	@ (800693c <HAL_ADC_Init+0x398>)
 80066b8:	4013      	ands	r3, r2
 80066ba:	2202      	movs	r2, #2
 80066bc:	431a      	orrs	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	0018      	movs	r0, r3
 80066c8:	f7ff ff14 	bl	80064f4 <LL_ADC_IsEnabled>
 80066cc:	1e03      	subs	r3, r0, #0
 80066ce:	d000      	beq.n	80066d2 <HAL_ADC_Init+0x12e>
 80066d0:	e0ad      	b.n	800682e <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	7e1b      	ldrb	r3, [r3, #24]
 80066da:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80066dc:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	7e5b      	ldrb	r3, [r3, #25]
 80066e2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80066e4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	7e9b      	ldrb	r3, [r3, #26]
 80066ea:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80066ec:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <HAL_ADC_Init+0x158>
 80066f6:	2380      	movs	r3, #128	@ 0x80
 80066f8:	015b      	lsls	r3, r3, #5
 80066fa:	e000      	b.n	80066fe <HAL_ADC_Init+0x15a>
 80066fc:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80066fe:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006704:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	2b00      	cmp	r3, #0
 800670c:	da04      	bge.n	8006718 <HAL_ADC_Init+0x174>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	085b      	lsrs	r3, r3, #1
 8006716:	e001      	b.n	800671c <HAL_ADC_Init+0x178>
 8006718:	2380      	movs	r3, #128	@ 0x80
 800671a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800671c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	212c      	movs	r1, #44	@ 0x2c
 8006722:	5c5b      	ldrb	r3, [r3, r1]
 8006724:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006726:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	4313      	orrs	r3, r2
 800672c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2220      	movs	r2, #32
 8006732:	5c9b      	ldrb	r3, [r3, r2]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d115      	bne.n	8006764 <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	7e9b      	ldrb	r3, [r3, #26]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d105      	bne.n	800674c <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	2280      	movs	r2, #128	@ 0x80
 8006744:	0252      	lsls	r2, r2, #9
 8006746:	4313      	orrs	r3, r2
 8006748:	61bb      	str	r3, [r7, #24]
 800674a:	e00b      	b.n	8006764 <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006750:	2220      	movs	r2, #32
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800675c:	2201      	movs	r2, #1
 800675e:	431a      	orrs	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00a      	beq.n	8006782 <HAL_ADC_Init+0x1de>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006770:	23e0      	movs	r3, #224	@ 0xe0
 8006772:	005b      	lsls	r3, r3, #1
 8006774:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800677a:	4313      	orrs	r3, r2
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	4313      	orrs	r3, r2
 8006780:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	4a6d      	ldr	r2, [pc, #436]	@ (8006940 <HAL_ADC_Init+0x39c>)
 800678a:	4013      	ands	r3, r2
 800678c:	0019      	movs	r1, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	430a      	orrs	r2, r1
 8006796:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	0f9b      	lsrs	r3, r3, #30
 800679e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80067a4:	4313      	orrs	r3, r2
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	223c      	movs	r2, #60	@ 0x3c
 80067b0:	5c9b      	ldrb	r3, [r3, r2]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d111      	bne.n	80067da <HAL_ADC_Init+0x236>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	0f9b      	lsrs	r3, r3, #30
 80067bc:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80067c2:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80067c8:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80067ce:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	2201      	movs	r2, #1
 80067d6:	4313      	orrs	r3, r2
 80067d8:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	4a58      	ldr	r2, [pc, #352]	@ (8006944 <HAL_ADC_Init+0x3a0>)
 80067e2:	4013      	ands	r3, r2
 80067e4:	0019      	movs	r1, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	23c0      	movs	r3, #192	@ 0xc0
 80067f6:	061b      	lsls	r3, r3, #24
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d018      	beq.n	800682e <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8006800:	2380      	movs	r3, #128	@ 0x80
 8006802:	05db      	lsls	r3, r3, #23
 8006804:	429a      	cmp	r2, r3
 8006806:	d012      	beq.n	800682e <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800680c:	2380      	movs	r3, #128	@ 0x80
 800680e:	061b      	lsls	r3, r3, #24
 8006810:	429a      	cmp	r2, r3
 8006812:	d00c      	beq.n	800682e <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8006814:	4b4c      	ldr	r3, [pc, #304]	@ (8006948 <HAL_ADC_Init+0x3a4>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a4c      	ldr	r2, [pc, #304]	@ (800694c <HAL_ADC_Init+0x3a8>)
 800681a:	4013      	ands	r3, r2
 800681c:	0019      	movs	r1, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	23f0      	movs	r3, #240	@ 0xf0
 8006824:	039b      	lsls	r3, r3, #14
 8006826:	401a      	ands	r2, r3
 8006828:	4b47      	ldr	r3, [pc, #284]	@ (8006948 <HAL_ADC_Init+0x3a4>)
 800682a:	430a      	orrs	r2, r1
 800682c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006836:	001a      	movs	r2, r3
 8006838:	2100      	movs	r1, #0
 800683a:	f7ff fd6a 	bl	8006312 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6818      	ldr	r0, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006846:	4942      	ldr	r1, [pc, #264]	@ (8006950 <HAL_ADC_Init+0x3ac>)
 8006848:	001a      	movs	r2, r3
 800684a:	f7ff fd62 	bl	8006312 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d109      	bne.n	800686a <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2110      	movs	r1, #16
 8006862:	4249      	negs	r1, r1
 8006864:	430a      	orrs	r2, r1
 8006866:	629a      	str	r2, [r3, #40]	@ 0x28
 8006868:	e018      	b.n	800689c <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691a      	ldr	r2, [r3, #16]
 800686e:	2380      	movs	r3, #128	@ 0x80
 8006870:	039b      	lsls	r3, r3, #14
 8006872:	429a      	cmp	r2, r3
 8006874:	d112      	bne.n	800689c <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	3b01      	subs	r3, #1
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	221c      	movs	r2, #28
 8006886:	4013      	ands	r3, r2
 8006888:	2210      	movs	r2, #16
 800688a:	4252      	negs	r2, r2
 800688c:	409a      	lsls	r2, r3
 800688e:	0011      	movs	r1, r2
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2100      	movs	r1, #0
 80068a2:	0018      	movs	r0, r3
 80068a4:	f7ff fd52 	bl	800634c <LL_ADC_GetSamplingTimeCommonChannels>
 80068a8:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d10b      	bne.n	80068ca <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068bc:	2203      	movs	r2, #3
 80068be:	4393      	bics	r3, r2
 80068c0:	2201      	movs	r2, #1
 80068c2:	431a      	orrs	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80068c8:	e01c      	b.n	8006904 <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ce:	2212      	movs	r2, #18
 80068d0:	4393      	bics	r3, r2
 80068d2:	2210      	movs	r2, #16
 80068d4:	431a      	orrs	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068de:	2201      	movs	r2, #1
 80068e0:	431a      	orrs	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80068e6:	231f      	movs	r3, #31
 80068e8:	18fb      	adds	r3, r7, r3
 80068ea:	2201      	movs	r2, #1
 80068ec:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80068ee:	e009      	b.n	8006904 <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f4:	2210      	movs	r2, #16
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80068fc:	231f      	movs	r3, #31
 80068fe:	18fb      	adds	r3, r7, r3
 8006900:	2201      	movs	r2, #1
 8006902:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8006904:	231f      	movs	r3, #31
 8006906:	18fb      	adds	r3, r7, r3
 8006908:	781b      	ldrb	r3, [r3, #0]
}
 800690a:	0018      	movs	r0, r3
 800690c:	46bd      	mov	sp, r7
 800690e:	b008      	add	sp, #32
 8006910:	bd80      	pop	{r7, pc}
 8006912:	46c0      	nop			@ (mov r8, r8)
 8006914:	08006c6d 	.word	0x08006c6d
 8006918:	08006c7d 	.word	0x08006c7d
 800691c:	08006c8d 	.word	0x08006c8d
 8006920:	08006c9d 	.word	0x08006c9d
 8006924:	080076f5 	.word	0x080076f5
 8006928:	08007705 	.word	0x08007705
 800692c:	08007715 	.word	0x08007715
 8006930:	0800502d 	.word	0x0800502d
 8006934:	2000044c 	.word	0x2000044c
 8006938:	00030d40 	.word	0x00030d40
 800693c:	fffffefd 	.word	0xfffffefd
 8006940:	ffde0201 	.word	0xffde0201
 8006944:	1ffffc02 	.word	0x1ffffc02
 8006948:	40012708 	.word	0x40012708
 800694c:	ffc3ffff 	.word	0xffc3ffff
 8006950:	07ffff04 	.word	0x07ffff04

08006954 <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	607a      	str	r2, [r7, #4]
 800695e:	230b      	movs	r3, #11
 8006960:	18fb      	adds	r3, r7, r3
 8006962:	1c0a      	adds	r2, r1, #0
 8006964:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006966:	2317      	movs	r3, #23
 8006968:	18fb      	adds	r3, r7, r3
 800696a:	2200      	movs	r2, #0
 800696c:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d107      	bne.n	8006984 <HAL_ADC_RegisterCallback+0x30>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006978:	2210      	movs	r2, #16
 800697a:	431a      	orrs	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	65da      	str	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e06d      	b.n	8006a60 <HAL_ADC_RegisterCallback+0x10c>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006988:	2201      	movs	r2, #1
 800698a:	4013      	ands	r3, r2
 800698c:	d03a      	beq.n	8006a04 <HAL_ADC_RegisterCallback+0xb0>
  {
    switch (CallbackID)
 800698e:	230b      	movs	r3, #11
 8006990:	18fb      	adds	r3, r7, r3
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	2b0a      	cmp	r3, #10
 8006996:	d82a      	bhi.n	80069ee <HAL_ADC_RegisterCallback+0x9a>
 8006998:	009a      	lsls	r2, r3, #2
 800699a:	4b33      	ldr	r3, [pc, #204]	@ (8006a68 <HAL_ADC_RegisterCallback+0x114>)
 800699c:	18d3      	adds	r3, r2, r3
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	469f      	mov	pc, r3
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80069a8:	e057      	b.n	8006a5a <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80069b0:	e053      	b.n	8006a5a <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80069b8:	e04f      	b.n	8006a5a <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80069c0:	e04b      	b.n	8006a5a <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80069c8:	e047      	b.n	8006a5a <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80069d0:	e043      	b.n	8006a5a <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80069d8:	e03f      	b.n	8006a5a <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2180      	movs	r1, #128	@ 0x80
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	505a      	str	r2, [r3, r1]
        break;
 80069e2:	e03a      	b.n	8006a5a <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2184      	movs	r1, #132	@ 0x84
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	505a      	str	r2, [r3, r1]
        break;
 80069ec:	e035      	b.n	8006a5a <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069f2:	2210      	movs	r2, #16
 80069f4:	431a      	orrs	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 80069fa:	2317      	movs	r3, #23
 80069fc:	18fb      	adds	r3, r7, r3
 80069fe:	2201      	movs	r2, #1
 8006a00:	701a      	strb	r2, [r3, #0]
        break;
 8006a02:	e02a      	b.n	8006a5a <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d11c      	bne.n	8006a46 <HAL_ADC_RegisterCallback+0xf2>
  {
    switch (CallbackID)
 8006a0c:	230b      	movs	r3, #11
 8006a0e:	18fb      	adds	r3, r7, r3
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	2b09      	cmp	r3, #9
 8006a14:	d002      	beq.n	8006a1c <HAL_ADC_RegisterCallback+0xc8>
 8006a16:	2b0a      	cmp	r3, #10
 8006a18:	d005      	beq.n	8006a26 <HAL_ADC_RegisterCallback+0xd2>
 8006a1a:	e009      	b.n	8006a30 <HAL_ADC_RegisterCallback+0xdc>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2180      	movs	r1, #128	@ 0x80
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	505a      	str	r2, [r3, r1]
        break;
 8006a24:	e019      	b.n	8006a5a <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2184      	movs	r1, #132	@ 0x84
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	505a      	str	r2, [r3, r1]
        break;
 8006a2e:	e014      	b.n	8006a5a <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a34:	2210      	movs	r2, #16
 8006a36:	431a      	orrs	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 8006a3c:	2317      	movs	r3, #23
 8006a3e:	18fb      	adds	r3, r7, r3
 8006a40:	2201      	movs	r2, #1
 8006a42:	701a      	strb	r2, [r3, #0]
        break;
 8006a44:	e009      	b.n	8006a5a <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a4a:	2210      	movs	r2, #16
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Return error status */
    status =  HAL_ERROR;
 8006a52:	2317      	movs	r3, #23
 8006a54:	18fb      	adds	r3, r7, r3
 8006a56:	2201      	movs	r2, #1
 8006a58:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006a5a:	2317      	movs	r3, #23
 8006a5c:	18fb      	adds	r3, r7, r3
 8006a5e:	781b      	ldrb	r3, [r3, #0]
}
 8006a60:	0018      	movs	r0, r3
 8006a62:	46bd      	mov	sp, r7
 8006a64:	b006      	add	sp, #24
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	0800de74 	.word	0x0800de74

08006a6c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006a6c:	b5b0      	push	{r4, r5, r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	f7ff fd7f 	bl	8006580 <LL_ADC_REG_IsConversionOngoing>
 8006a82:	1e03      	subs	r3, r0, #0
 8006a84:	d16c      	bne.n	8006b60 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2254      	movs	r2, #84	@ 0x54
 8006a8a:	5c9b      	ldrb	r3, [r3, r2]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d101      	bne.n	8006a94 <HAL_ADC_Start_DMA+0x28>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e06c      	b.n	8006b6e <HAL_ADC_Start_DMA+0x102>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2254      	movs	r2, #84	@ 0x54
 8006a98:	2101      	movs	r1, #1
 8006a9a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	d113      	bne.n	8006ad0 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	0018      	movs	r0, r3
 8006aae:	f7ff fd21 	bl	80064f4 <LL_ADC_IsEnabled>
 8006ab2:	1e03      	subs	r3, r0, #0
 8006ab4:	d004      	beq.n	8006ac0 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	0018      	movs	r0, r3
 8006abc:	f7ff fd08 	bl	80064d0 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2101      	movs	r1, #1
 8006acc:	430a      	orrs	r2, r1
 8006ace:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006ad0:	2517      	movs	r5, #23
 8006ad2:	197c      	adds	r4, r7, r5
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	f000 fb02 	bl	80070e0 <ADC_Enable>
 8006adc:	0003      	movs	r3, r0
 8006ade:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006ae0:	002c      	movs	r4, r5
 8006ae2:	193b      	adds	r3, r7, r4
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d13e      	bne.n	8006b68 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aee:	4a22      	ldr	r2, [pc, #136]	@ (8006b78 <HAL_ADC_Start_DMA+0x10c>)
 8006af0:	4013      	ands	r3, r2
 8006af2:	2280      	movs	r2, #128	@ 0x80
 8006af4:	0052      	lsls	r2, r2, #1
 8006af6:	431a      	orrs	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b06:	4a1d      	ldr	r2, [pc, #116]	@ (8006b7c <HAL_ADC_Start_DMA+0x110>)
 8006b08:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8006b80 <HAL_ADC_Start_DMA+0x114>)
 8006b10:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b16:	4a1b      	ldr	r2, [pc, #108]	@ (8006b84 <HAL_ADC_Start_DMA+0x118>)
 8006b18:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	221c      	movs	r2, #28
 8006b20:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2254      	movs	r2, #84	@ 0x54
 8006b26:	2100      	movs	r1, #0
 8006b28:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2110      	movs	r1, #16
 8006b36:	430a      	orrs	r2, r1
 8006b38:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	3340      	adds	r3, #64	@ 0x40
 8006b44:	0019      	movs	r1, r3
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	193c      	adds	r4, r7, r4
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f000 ff84 	bl	8007a58 <HAL_DMA_Start_IT>
 8006b50:	0003      	movs	r3, r0
 8006b52:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	0018      	movs	r0, r3
 8006b5a:	f7ff fced 	bl	8006538 <LL_ADC_REG_StartConversion>
 8006b5e:	e003      	b.n	8006b68 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006b60:	2317      	movs	r3, #23
 8006b62:	18fb      	adds	r3, r7, r3
 8006b64:	2202      	movs	r2, #2
 8006b66:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8006b68:	2317      	movs	r3, #23
 8006b6a:	18fb      	adds	r3, r7, r3
 8006b6c:	781b      	ldrb	r3, [r3, #0]
}
 8006b6e:	0018      	movs	r0, r3
 8006b70:	46bd      	mov	sp, r7
 8006b72:	b006      	add	sp, #24
 8006b74:	bdb0      	pop	{r4, r5, r7, pc}
 8006b76:	46c0      	nop			@ (mov r8, r8)
 8006b78:	fffff0fe 	.word	0xfffff0fe
 8006b7c:	080072a9 	.word	0x080072a9
 8006b80:	08007375 	.word	0x08007375
 8006b84:	08007395 	.word	0x08007395

08006b88 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006b88:	b5b0      	push	{r4, r5, r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2254      	movs	r2, #84	@ 0x54
 8006b94:	5c9b      	ldrb	r3, [r3, r2]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d101      	bne.n	8006b9e <HAL_ADC_Stop_DMA+0x16>
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	e05f      	b.n	8006c5e <HAL_ADC_Stop_DMA+0xd6>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2254      	movs	r2, #84	@ 0x54
 8006ba2:	2101      	movs	r1, #1
 8006ba4:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8006ba6:	250f      	movs	r5, #15
 8006ba8:	197c      	adds	r4, r7, r5
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	0018      	movs	r0, r3
 8006bae:	f000 fa55 	bl	800705c <ADC_ConversionStop>
 8006bb2:	0003      	movs	r3, r0
 8006bb4:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006bb6:	0029      	movs	r1, r5
 8006bb8:	187b      	adds	r3, r7, r1
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d147      	bne.n	8006c50 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bc4:	2225      	movs	r2, #37	@ 0x25
 8006bc6:	5c9b      	ldrb	r3, [r3, r2]
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d112      	bne.n	8006bf4 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bd2:	000d      	movs	r5, r1
 8006bd4:	187c      	adds	r4, r7, r1
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	f000 ffc4 	bl	8007b64 <HAL_DMA_Abort>
 8006bdc:	0003      	movs	r3, r0
 8006bde:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006be0:	197b      	adds	r3, r7, r5
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d005      	beq.n	8006bf4 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bec:	2240      	movs	r2, #64	@ 0x40
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2110      	movs	r1, #16
 8006c00:	438a      	bics	r2, r1
 8006c02:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8006c04:	220f      	movs	r2, #15
 8006c06:	18bb      	adds	r3, r7, r2
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d107      	bne.n	8006c1e <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8006c0e:	18bc      	adds	r4, r7, r2
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	0018      	movs	r0, r3
 8006c14:	f000 faea 	bl	80071ec <ADC_Disable>
 8006c18:	0003      	movs	r3, r0
 8006c1a:	7023      	strb	r3, [r4, #0]
 8006c1c:	e003      	b.n	8006c26 <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	0018      	movs	r0, r3
 8006c22:	f000 fae3 	bl	80071ec <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006c26:	230f      	movs	r3, #15
 8006c28:	18fb      	adds	r3, r7, r3
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d107      	bne.n	8006c40 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c34:	4a0c      	ldr	r2, [pc, #48]	@ (8006c68 <HAL_ADC_Stop_DMA+0xe0>)
 8006c36:	4013      	ands	r3, r2
 8006c38:	2201      	movs	r2, #1
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	438a      	bics	r2, r1
 8006c4e:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2254      	movs	r2, #84	@ 0x54
 8006c54:	2100      	movs	r1, #0
 8006c56:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006c58:	230f      	movs	r3, #15
 8006c5a:	18fb      	adds	r3, r7, r3
 8006c5c:	781b      	ldrb	r3, [r3, #0]
}
 8006c5e:	0018      	movs	r0, r3
 8006c60:	46bd      	mov	sp, r7
 8006c62:	b004      	add	sp, #16
 8006c64:	bdb0      	pop	{r4, r5, r7, pc}
 8006c66:	46c0      	nop			@ (mov r8, r8)
 8006c68:	fffffefe 	.word	0xfffffefe

08006c6c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006c74:	46c0      	nop			@ (mov r8, r8)
 8006c76:	46bd      	mov	sp, r7
 8006c78:	b002      	add	sp, #8
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006c84:	46c0      	nop			@ (mov r8, r8)
 8006c86:	46bd      	mov	sp, r7
 8006c88:	b002      	add	sp, #8
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006c94:	46c0      	nop			@ (mov r8, r8)
 8006c96:	46bd      	mov	sp, r7
 8006c98:	b002      	add	sp, #8
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006ca4:	46c0      	nop			@ (mov r8, r8)
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	b002      	add	sp, #8
 8006caa:	bd80      	pop	{r7, pc}

08006cac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006cb6:	2317      	movs	r3, #23
 8006cb8:	18fb      	adds	r3, r7, r3
 8006cba:	2200      	movs	r2, #0
 8006cbc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2254      	movs	r2, #84	@ 0x54
 8006cc6:	5c9b      	ldrb	r3, [r3, r2]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d101      	bne.n	8006cd0 <HAL_ADC_ConfigChannel+0x24>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e1c0      	b.n	8007052 <HAL_ADC_ConfigChannel+0x3a6>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2254      	movs	r2, #84	@ 0x54
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	0018      	movs	r0, r3
 8006cde:	f7ff fc4f 	bl	8006580 <LL_ADC_REG_IsConversionOngoing>
 8006ce2:	1e03      	subs	r3, r0, #0
 8006ce4:	d000      	beq.n	8006ce8 <HAL_ADC_ConfigChannel+0x3c>
 8006ce6:	e1a3      	b.n	8007030 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d100      	bne.n	8006cf2 <HAL_ADC_ConfigChannel+0x46>
 8006cf0:	e143      	b.n	8006f7a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691a      	ldr	r2, [r3, #16]
 8006cf6:	2380      	movs	r3, #128	@ 0x80
 8006cf8:	061b      	lsls	r3, r3, #24
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d004      	beq.n	8006d08 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006d02:	4ac1      	ldr	r2, [pc, #772]	@ (8007008 <HAL_ADC_ConfigChannel+0x35c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d108      	bne.n	8006d1a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	0019      	movs	r1, r3
 8006d12:	0010      	movs	r0, r2
 8006d14:	f7ff fb62 	bl	80063dc <LL_ADC_REG_SetSequencerChAdd>
 8006d18:	e0c9      	b.n	8006eae <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	211f      	movs	r1, #31
 8006d24:	400b      	ands	r3, r1
 8006d26:	210f      	movs	r1, #15
 8006d28:	4099      	lsls	r1, r3
 8006d2a:	000b      	movs	r3, r1
 8006d2c:	43db      	mvns	r3, r3
 8006d2e:	4013      	ands	r3, r2
 8006d30:	0019      	movs	r1, r3
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	035b      	lsls	r3, r3, #13
 8006d38:	0b5b      	lsrs	r3, r3, #13
 8006d3a:	d105      	bne.n	8006d48 <HAL_ADC_ConfigChannel+0x9c>
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	0e9b      	lsrs	r3, r3, #26
 8006d42:	221f      	movs	r2, #31
 8006d44:	4013      	ands	r3, r2
 8006d46:	e098      	b.n	8006e7a <HAL_ADC_ConfigChannel+0x1ce>
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	4013      	ands	r3, r2
 8006d50:	d000      	beq.n	8006d54 <HAL_ADC_ConfigChannel+0xa8>
 8006d52:	e091      	b.n	8006e78 <HAL_ADC_ConfigChannel+0x1cc>
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2202      	movs	r2, #2
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	d000      	beq.n	8006d60 <HAL_ADC_ConfigChannel+0xb4>
 8006d5e:	e089      	b.n	8006e74 <HAL_ADC_ConfigChannel+0x1c8>
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2204      	movs	r2, #4
 8006d66:	4013      	ands	r3, r2
 8006d68:	d000      	beq.n	8006d6c <HAL_ADC_ConfigChannel+0xc0>
 8006d6a:	e081      	b.n	8006e70 <HAL_ADC_ConfigChannel+0x1c4>
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2208      	movs	r2, #8
 8006d72:	4013      	ands	r3, r2
 8006d74:	d000      	beq.n	8006d78 <HAL_ADC_ConfigChannel+0xcc>
 8006d76:	e079      	b.n	8006e6c <HAL_ADC_ConfigChannel+0x1c0>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2210      	movs	r2, #16
 8006d7e:	4013      	ands	r3, r2
 8006d80:	d000      	beq.n	8006d84 <HAL_ADC_ConfigChannel+0xd8>
 8006d82:	e071      	b.n	8006e68 <HAL_ADC_ConfigChannel+0x1bc>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	d000      	beq.n	8006d90 <HAL_ADC_ConfigChannel+0xe4>
 8006d8e:	e069      	b.n	8006e64 <HAL_ADC_ConfigChannel+0x1b8>
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2240      	movs	r2, #64	@ 0x40
 8006d96:	4013      	ands	r3, r2
 8006d98:	d000      	beq.n	8006d9c <HAL_ADC_ConfigChannel+0xf0>
 8006d9a:	e061      	b.n	8006e60 <HAL_ADC_ConfigChannel+0x1b4>
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2280      	movs	r2, #128	@ 0x80
 8006da2:	4013      	ands	r3, r2
 8006da4:	d000      	beq.n	8006da8 <HAL_ADC_ConfigChannel+0xfc>
 8006da6:	e059      	b.n	8006e5c <HAL_ADC_ConfigChannel+0x1b0>
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	2380      	movs	r3, #128	@ 0x80
 8006dae:	005b      	lsls	r3, r3, #1
 8006db0:	4013      	ands	r3, r2
 8006db2:	d151      	bne.n	8006e58 <HAL_ADC_ConfigChannel+0x1ac>
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	2380      	movs	r3, #128	@ 0x80
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	d149      	bne.n	8006e54 <HAL_ADC_ConfigChannel+0x1a8>
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	2380      	movs	r3, #128	@ 0x80
 8006dc6:	00db      	lsls	r3, r3, #3
 8006dc8:	4013      	ands	r3, r2
 8006dca:	d141      	bne.n	8006e50 <HAL_ADC_ConfigChannel+0x1a4>
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	2380      	movs	r3, #128	@ 0x80
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	d139      	bne.n	8006e4c <HAL_ADC_ConfigChannel+0x1a0>
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	2380      	movs	r3, #128	@ 0x80
 8006dde:	015b      	lsls	r3, r3, #5
 8006de0:	4013      	ands	r3, r2
 8006de2:	d131      	bne.n	8006e48 <HAL_ADC_ConfigChannel+0x19c>
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	2380      	movs	r3, #128	@ 0x80
 8006dea:	019b      	lsls	r3, r3, #6
 8006dec:	4013      	ands	r3, r2
 8006dee:	d129      	bne.n	8006e44 <HAL_ADC_ConfigChannel+0x198>
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	2380      	movs	r3, #128	@ 0x80
 8006df6:	01db      	lsls	r3, r3, #7
 8006df8:	4013      	ands	r3, r2
 8006dfa:	d121      	bne.n	8006e40 <HAL_ADC_ConfigChannel+0x194>
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	2380      	movs	r3, #128	@ 0x80
 8006e02:	021b      	lsls	r3, r3, #8
 8006e04:	4013      	ands	r3, r2
 8006e06:	d119      	bne.n	8006e3c <HAL_ADC_ConfigChannel+0x190>
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	2380      	movs	r3, #128	@ 0x80
 8006e0e:	025b      	lsls	r3, r3, #9
 8006e10:	4013      	ands	r3, r2
 8006e12:	d111      	bne.n	8006e38 <HAL_ADC_ConfigChannel+0x18c>
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	2380      	movs	r3, #128	@ 0x80
 8006e1a:	029b      	lsls	r3, r3, #10
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	d109      	bne.n	8006e34 <HAL_ADC_ConfigChannel+0x188>
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	2380      	movs	r3, #128	@ 0x80
 8006e26:	02db      	lsls	r3, r3, #11
 8006e28:	4013      	ands	r3, r2
 8006e2a:	d001      	beq.n	8006e30 <HAL_ADC_ConfigChannel+0x184>
 8006e2c:	2312      	movs	r3, #18
 8006e2e:	e024      	b.n	8006e7a <HAL_ADC_ConfigChannel+0x1ce>
 8006e30:	2300      	movs	r3, #0
 8006e32:	e022      	b.n	8006e7a <HAL_ADC_ConfigChannel+0x1ce>
 8006e34:	2311      	movs	r3, #17
 8006e36:	e020      	b.n	8006e7a <HAL_ADC_ConfigChannel+0x1ce>
 8006e38:	2310      	movs	r3, #16
 8006e3a:	e01e      	b.n	8006e7a <HAL_ADC_ConfigChannel+0x1ce>
 8006e3c:	230f      	movs	r3, #15
 8006e3e:	e01c      	b.n	8006e7a <HAL_ADC_ConfigChannel+0x1ce>
 8006e40:	230e      	movs	r3, #14
 8006e42:	e01a      	b.n	8006e7a <HAL_ADC_ConfigChannel+0x1ce>
 8006e44:	230d      	movs	r3, #13
 8006e46:	e018      	b.n	8006e7a <HAL_ADC_ConfigChannel+0x1ce>
 8006e48:	230c      	movs	r3, #12
 8006e4a:	e016      	b.n	8006e7a <HAL_ADC_ConfigChannel+0x1ce>
 8006e4c:	230b      	movs	r3, #11
 8006e4e:	e014      	b.n	8006e7a <HAL_ADC_ConfigChannel+0x1ce>
 8006e50:	230a      	movs	r3, #10
 8006e52:	e012      	b.n	8006e7a <HAL_ADC_ConfigChannel+0x1ce>
 8006e54:	2309      	movs	r3, #9
 8006e56:	e010      	b.n	8006e7a <HAL_ADC_ConfigChannel+0x1ce>
 8006e58:	2308      	movs	r3, #8
 8006e5a:	e00e      	b.n	8006e7a <HAL_ADC_ConfigChannel+0x1ce>
 8006e5c:	2307      	movs	r3, #7
 8006e5e:	e00c      	b.n	8006e7a <HAL_ADC_ConfigChannel+0x1ce>
 8006e60:	2306      	movs	r3, #6
 8006e62:	e00a      	b.n	8006e7a <HAL_ADC_ConfigChannel+0x1ce>
 8006e64:	2305      	movs	r3, #5
 8006e66:	e008      	b.n	8006e7a <HAL_ADC_ConfigChannel+0x1ce>
 8006e68:	2304      	movs	r3, #4
 8006e6a:	e006      	b.n	8006e7a <HAL_ADC_ConfigChannel+0x1ce>
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e004      	b.n	8006e7a <HAL_ADC_ConfigChannel+0x1ce>
 8006e70:	2302      	movs	r3, #2
 8006e72:	e002      	b.n	8006e7a <HAL_ADC_ConfigChannel+0x1ce>
 8006e74:	2301      	movs	r3, #1
 8006e76:	e000      	b.n	8006e7a <HAL_ADC_ConfigChannel+0x1ce>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	6852      	ldr	r2, [r2, #4]
 8006e7e:	201f      	movs	r0, #31
 8006e80:	4002      	ands	r2, r0
 8006e82:	4093      	lsls	r3, r2
 8006e84:	000a      	movs	r2, r1
 8006e86:	431a      	orrs	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	089b      	lsrs	r3, r3, #2
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d808      	bhi.n	8006eae <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6818      	ldr	r0, [r3, #0]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	6859      	ldr	r1, [r3, #4]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	001a      	movs	r2, r3
 8006eaa:	f7ff fa77 	bl	800639c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6818      	ldr	r0, [r3, #0]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	6819      	ldr	r1, [r3, #0]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	001a      	movs	r2, r3
 8006ebc:	f7ff fab2 	bl	8006424 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	db00      	blt.n	8006eca <HAL_ADC_ConfigChannel+0x21e>
 8006ec8:	e0bc      	b.n	8007044 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006eca:	4b50      	ldr	r3, [pc, #320]	@ (800700c <HAL_ADC_ConfigChannel+0x360>)
 8006ecc:	0018      	movs	r0, r3
 8006ece:	f7ff fa13 	bl	80062f8 <LL_ADC_GetCommonPathInternalCh>
 8006ed2:	0003      	movs	r3, r0
 8006ed4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a4d      	ldr	r2, [pc, #308]	@ (8007010 <HAL_ADC_ConfigChannel+0x364>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d122      	bne.n	8006f26 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	2380      	movs	r3, #128	@ 0x80
 8006ee4:	041b      	lsls	r3, r3, #16
 8006ee6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006ee8:	d11d      	bne.n	8006f26 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	2280      	movs	r2, #128	@ 0x80
 8006eee:	0412      	lsls	r2, r2, #16
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	4a46      	ldr	r2, [pc, #280]	@ (800700c <HAL_ADC_ConfigChannel+0x360>)
 8006ef4:	0019      	movs	r1, r3
 8006ef6:	0010      	movs	r0, r2
 8006ef8:	f7ff f9ea 	bl	80062d0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006efc:	4b45      	ldr	r3, [pc, #276]	@ (8007014 <HAL_ADC_ConfigChannel+0x368>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4945      	ldr	r1, [pc, #276]	@ (8007018 <HAL_ADC_ConfigChannel+0x36c>)
 8006f02:	0018      	movs	r0, r3
 8006f04:	f7f9 f8fe 	bl	8000104 <__udivsi3>
 8006f08:	0003      	movs	r3, r0
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	0013      	movs	r3, r2
 8006f0e:	005b      	lsls	r3, r3, #1
 8006f10:	189b      	adds	r3, r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006f16:	e002      	b.n	8006f1e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1f9      	bne.n	8006f18 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006f24:	e08e      	b.n	8007044 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a3c      	ldr	r2, [pc, #240]	@ (800701c <HAL_ADC_ConfigChannel+0x370>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d10e      	bne.n	8006f4e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	2380      	movs	r3, #128	@ 0x80
 8006f34:	045b      	lsls	r3, r3, #17
 8006f36:	4013      	ands	r3, r2
 8006f38:	d109      	bne.n	8006f4e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	2280      	movs	r2, #128	@ 0x80
 8006f3e:	0452      	lsls	r2, r2, #17
 8006f40:	4313      	orrs	r3, r2
 8006f42:	4a32      	ldr	r2, [pc, #200]	@ (800700c <HAL_ADC_ConfigChannel+0x360>)
 8006f44:	0019      	movs	r1, r3
 8006f46:	0010      	movs	r0, r2
 8006f48:	f7ff f9c2 	bl	80062d0 <LL_ADC_SetCommonPathInternalCh>
 8006f4c:	e07a      	b.n	8007044 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a33      	ldr	r2, [pc, #204]	@ (8007020 <HAL_ADC_ConfigChannel+0x374>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d000      	beq.n	8006f5a <HAL_ADC_ConfigChannel+0x2ae>
 8006f58:	e074      	b.n	8007044 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	2380      	movs	r3, #128	@ 0x80
 8006f5e:	03db      	lsls	r3, r3, #15
 8006f60:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006f62:	d000      	beq.n	8006f66 <HAL_ADC_ConfigChannel+0x2ba>
 8006f64:	e06e      	b.n	8007044 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	2280      	movs	r2, #128	@ 0x80
 8006f6a:	03d2      	lsls	r2, r2, #15
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	4a27      	ldr	r2, [pc, #156]	@ (800700c <HAL_ADC_ConfigChannel+0x360>)
 8006f70:	0019      	movs	r1, r3
 8006f72:	0010      	movs	r0, r2
 8006f74:	f7ff f9ac 	bl	80062d0 <LL_ADC_SetCommonPathInternalCh>
 8006f78:	e064      	b.n	8007044 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	691a      	ldr	r2, [r3, #16]
 8006f7e:	2380      	movs	r3, #128	@ 0x80
 8006f80:	061b      	lsls	r3, r3, #24
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d004      	beq.n	8006f90 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006f8a:	4a1f      	ldr	r2, [pc, #124]	@ (8007008 <HAL_ADC_ConfigChannel+0x35c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d107      	bne.n	8006fa0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	0019      	movs	r1, r3
 8006f9a:	0010      	movs	r0, r2
 8006f9c:	f7ff fa2f 	bl	80063fe <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	da4d      	bge.n	8007044 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006fa8:	4b18      	ldr	r3, [pc, #96]	@ (800700c <HAL_ADC_ConfigChannel+0x360>)
 8006faa:	0018      	movs	r0, r3
 8006fac:	f7ff f9a4 	bl	80062f8 <LL_ADC_GetCommonPathInternalCh>
 8006fb0:	0003      	movs	r3, r0
 8006fb2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a15      	ldr	r2, [pc, #84]	@ (8007010 <HAL_ADC_ConfigChannel+0x364>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d108      	bne.n	8006fd0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	4a18      	ldr	r2, [pc, #96]	@ (8007024 <HAL_ADC_ConfigChannel+0x378>)
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	4a11      	ldr	r2, [pc, #68]	@ (800700c <HAL_ADC_ConfigChannel+0x360>)
 8006fc6:	0019      	movs	r1, r3
 8006fc8:	0010      	movs	r0, r2
 8006fca:	f7ff f981 	bl	80062d0 <LL_ADC_SetCommonPathInternalCh>
 8006fce:	e039      	b.n	8007044 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a11      	ldr	r2, [pc, #68]	@ (800701c <HAL_ADC_ConfigChannel+0x370>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d108      	bne.n	8006fec <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	4a12      	ldr	r2, [pc, #72]	@ (8007028 <HAL_ADC_ConfigChannel+0x37c>)
 8006fde:	4013      	ands	r3, r2
 8006fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800700c <HAL_ADC_ConfigChannel+0x360>)
 8006fe2:	0019      	movs	r1, r3
 8006fe4:	0010      	movs	r0, r2
 8006fe6:	f7ff f973 	bl	80062d0 <LL_ADC_SetCommonPathInternalCh>
 8006fea:	e02b      	b.n	8007044 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a0b      	ldr	r2, [pc, #44]	@ (8007020 <HAL_ADC_ConfigChannel+0x374>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d126      	bne.n	8007044 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	4a0c      	ldr	r2, [pc, #48]	@ (800702c <HAL_ADC_ConfigChannel+0x380>)
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	4a03      	ldr	r2, [pc, #12]	@ (800700c <HAL_ADC_ConfigChannel+0x360>)
 8006ffe:	0019      	movs	r1, r3
 8007000:	0010      	movs	r0, r2
 8007002:	f7ff f965 	bl	80062d0 <LL_ADC_SetCommonPathInternalCh>
 8007006:	e01d      	b.n	8007044 <HAL_ADC_ConfigChannel+0x398>
 8007008:	80000004 	.word	0x80000004
 800700c:	40012708 	.word	0x40012708
 8007010:	b0001000 	.word	0xb0001000
 8007014:	2000044c 	.word	0x2000044c
 8007018:	00030d40 	.word	0x00030d40
 800701c:	b8004000 	.word	0xb8004000
 8007020:	b4002000 	.word	0xb4002000
 8007024:	ff7fffff 	.word	0xff7fffff
 8007028:	feffffff 	.word	0xfeffffff
 800702c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007034:	2220      	movs	r2, #32
 8007036:	431a      	orrs	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800703c:	2317      	movs	r3, #23
 800703e:	18fb      	adds	r3, r7, r3
 8007040:	2201      	movs	r2, #1
 8007042:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2254      	movs	r2, #84	@ 0x54
 8007048:	2100      	movs	r1, #0
 800704a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800704c:	2317      	movs	r3, #23
 800704e:	18fb      	adds	r3, r7, r3
 8007050:	781b      	ldrb	r3, [r3, #0]
}
 8007052:	0018      	movs	r0, r3
 8007054:	46bd      	mov	sp, r7
 8007056:	b006      	add	sp, #24
 8007058:	bd80      	pop	{r7, pc}
 800705a:	46c0      	nop			@ (mov r8, r8)

0800705c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	0018      	movs	r0, r3
 800706a:	f7ff fa89 	bl	8006580 <LL_ADC_REG_IsConversionOngoing>
 800706e:	1e03      	subs	r3, r0, #0
 8007070:	d031      	beq.n	80070d6 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	0018      	movs	r0, r3
 8007078:	f7ff fa4d 	bl	8006516 <LL_ADC_IsDisableOngoing>
 800707c:	1e03      	subs	r3, r0, #0
 800707e:	d104      	bne.n	800708a <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	0018      	movs	r0, r3
 8007086:	f7ff fa69 	bl	800655c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800708a:	f7ff f917 	bl	80062bc <HAL_GetTick>
 800708e:	0003      	movs	r3, r0
 8007090:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8007092:	e01a      	b.n	80070ca <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007094:	f7ff f912 	bl	80062bc <HAL_GetTick>
 8007098:	0002      	movs	r2, r0
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d913      	bls.n	80070ca <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	2204      	movs	r2, #4
 80070aa:	4013      	ands	r3, r2
 80070ac:	d00d      	beq.n	80070ca <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070b2:	2210      	movs	r2, #16
 80070b4:	431a      	orrs	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070be:	2201      	movs	r2, #1
 80070c0:	431a      	orrs	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e006      	b.n	80070d8 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	2204      	movs	r2, #4
 80070d2:	4013      	ands	r3, r2
 80070d4:	d1de      	bne.n	8007094 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	0018      	movs	r0, r3
 80070da:	46bd      	mov	sp, r7
 80070dc:	b004      	add	sp, #16
 80070de:	bd80      	pop	{r7, pc}

080070e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80070e8:	2300      	movs	r3, #0
 80070ea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	0018      	movs	r0, r3
 80070f2:	f7ff f9ff 	bl	80064f4 <LL_ADC_IsEnabled>
 80070f6:	1e03      	subs	r3, r0, #0
 80070f8:	d000      	beq.n	80070fc <ADC_Enable+0x1c>
 80070fa:	e069      	b.n	80071d0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	4a36      	ldr	r2, [pc, #216]	@ (80071dc <ADC_Enable+0xfc>)
 8007104:	4013      	ands	r3, r2
 8007106:	d00d      	beq.n	8007124 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800710c:	2210      	movs	r2, #16
 800710e:	431a      	orrs	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007118:	2201      	movs	r2, #1
 800711a:	431a      	orrs	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e056      	b.n	80071d2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	0018      	movs	r0, r3
 800712a:	f7ff f9bf 	bl	80064ac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800712e:	4b2c      	ldr	r3, [pc, #176]	@ (80071e0 <ADC_Enable+0x100>)
 8007130:	0018      	movs	r0, r3
 8007132:	f7ff f8e1 	bl	80062f8 <LL_ADC_GetCommonPathInternalCh>
 8007136:	0002      	movs	r2, r0
 8007138:	2380      	movs	r3, #128	@ 0x80
 800713a:	041b      	lsls	r3, r3, #16
 800713c:	4013      	ands	r3, r2
 800713e:	d00f      	beq.n	8007160 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007140:	4b28      	ldr	r3, [pc, #160]	@ (80071e4 <ADC_Enable+0x104>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4928      	ldr	r1, [pc, #160]	@ (80071e8 <ADC_Enable+0x108>)
 8007146:	0018      	movs	r0, r3
 8007148:	f7f8 ffdc 	bl	8000104 <__udivsi3>
 800714c:	0003      	movs	r3, r0
 800714e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8007150:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007152:	e002      	b.n	800715a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	3b01      	subs	r3, #1
 8007158:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1f9      	bne.n	8007154 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	7e5b      	ldrb	r3, [r3, #25]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d033      	beq.n	80071d0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8007168:	f7ff f8a8 	bl	80062bc <HAL_GetTick>
 800716c:	0003      	movs	r3, r0
 800716e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007170:	e027      	b.n	80071c2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	0018      	movs	r0, r3
 8007178:	f7ff f9bc 	bl	80064f4 <LL_ADC_IsEnabled>
 800717c:	1e03      	subs	r3, r0, #0
 800717e:	d104      	bne.n	800718a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	0018      	movs	r0, r3
 8007186:	f7ff f991 	bl	80064ac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800718a:	f7ff f897 	bl	80062bc <HAL_GetTick>
 800718e:	0002      	movs	r2, r0
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d914      	bls.n	80071c2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2201      	movs	r2, #1
 80071a0:	4013      	ands	r3, r2
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d00d      	beq.n	80071c2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071aa:	2210      	movs	r2, #16
 80071ac:	431a      	orrs	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071b6:	2201      	movs	r2, #1
 80071b8:	431a      	orrs	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e007      	b.n	80071d2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2201      	movs	r2, #1
 80071ca:	4013      	ands	r3, r2
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d1d0      	bne.n	8007172 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	0018      	movs	r0, r3
 80071d4:	46bd      	mov	sp, r7
 80071d6:	b004      	add	sp, #16
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	46c0      	nop			@ (mov r8, r8)
 80071dc:	80000017 	.word	0x80000017
 80071e0:	40012708 	.word	0x40012708
 80071e4:	2000044c 	.word	0x2000044c
 80071e8:	00030d40 	.word	0x00030d40

080071ec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	0018      	movs	r0, r3
 80071fa:	f7ff f98c 	bl	8006516 <LL_ADC_IsDisableOngoing>
 80071fe:	0003      	movs	r3, r0
 8007200:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	0018      	movs	r0, r3
 8007208:	f7ff f974 	bl	80064f4 <LL_ADC_IsEnabled>
 800720c:	1e03      	subs	r3, r0, #0
 800720e:	d046      	beq.n	800729e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d143      	bne.n	800729e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	2205      	movs	r2, #5
 800721e:	4013      	ands	r3, r2
 8007220:	2b01      	cmp	r3, #1
 8007222:	d10d      	bne.n	8007240 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	0018      	movs	r0, r3
 800722a:	f7ff f951 	bl	80064d0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2203      	movs	r2, #3
 8007234:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007236:	f7ff f841 	bl	80062bc <HAL_GetTick>
 800723a:	0003      	movs	r3, r0
 800723c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800723e:	e028      	b.n	8007292 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007244:	2210      	movs	r2, #16
 8007246:	431a      	orrs	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007250:	2201      	movs	r2, #1
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e021      	b.n	80072a0 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800725c:	f7ff f82e 	bl	80062bc <HAL_GetTick>
 8007260:	0002      	movs	r2, r0
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d913      	bls.n	8007292 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	2201      	movs	r2, #1
 8007272:	4013      	ands	r3, r2
 8007274:	d00d      	beq.n	8007292 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800727a:	2210      	movs	r2, #16
 800727c:	431a      	orrs	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007286:	2201      	movs	r2, #1
 8007288:	431a      	orrs	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e006      	b.n	80072a0 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	2201      	movs	r2, #1
 800729a:	4013      	ands	r3, r2
 800729c:	d1de      	bne.n	800725c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	0018      	movs	r0, r3
 80072a2:	46bd      	mov	sp, r7
 80072a4:	b004      	add	sp, #16
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ba:	2250      	movs	r2, #80	@ 0x50
 80072bc:	4013      	ands	r3, r2
 80072be:	d142      	bne.n	8007346 <ADC_DMAConvCplt+0x9e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072c4:	2280      	movs	r2, #128	@ 0x80
 80072c6:	0092      	lsls	r2, r2, #2
 80072c8:	431a      	orrs	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	0018      	movs	r0, r3
 80072d4:	f7ff f851 	bl	800637a <LL_ADC_REG_IsTriggerSourceSWStart>
 80072d8:	1e03      	subs	r3, r0, #0
 80072da:	d02e      	beq.n	800733a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	7e9b      	ldrb	r3, [r3, #26]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d12a      	bne.n	800733a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2208      	movs	r2, #8
 80072ec:	4013      	ands	r3, r2
 80072ee:	2b08      	cmp	r3, #8
 80072f0:	d123      	bne.n	800733a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	0018      	movs	r0, r3
 80072f8:	f7ff f942 	bl	8006580 <LL_ADC_REG_IsConversionOngoing>
 80072fc:	1e03      	subs	r3, r0, #0
 80072fe:	d110      	bne.n	8007322 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	210c      	movs	r1, #12
 800730c:	438a      	bics	r2, r1
 800730e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007314:	4a16      	ldr	r2, [pc, #88]	@ (8007370 <ADC_DMAConvCplt+0xc8>)
 8007316:	4013      	ands	r3, r2
 8007318:	2201      	movs	r2, #1
 800731a:	431a      	orrs	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	659a      	str	r2, [r3, #88]	@ 0x58
 8007320:	e00b      	b.n	800733a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007326:	2220      	movs	r2, #32
 8007328:	431a      	orrs	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007332:	2201      	movs	r2, #1
 8007334:	431a      	orrs	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	0010      	movs	r0, r2
 8007342:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007344:	e010      	b.n	8007368 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800734a:	2210      	movs	r2, #16
 800734c:	4013      	ands	r3, r2
 800734e:	d005      	beq.n	800735c <ADC_DMAConvCplt+0xb4>
      hadc->ErrorCallback(hadc);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	0010      	movs	r0, r2
 8007358:	4798      	blx	r3
}
 800735a:	e005      	b.n	8007368 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	0010      	movs	r0, r2
 8007366:	4798      	blx	r3
}
 8007368:	46c0      	nop			@ (mov r8, r8)
 800736a:	46bd      	mov	sp, r7
 800736c:	b004      	add	sp, #16
 800736e:	bd80      	pop	{r7, pc}
 8007370:	fffffefe 	.word	0xfffffefe

08007374 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007380:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	0010      	movs	r0, r2
 800738a:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800738c:	46c0      	nop			@ (mov r8, r8)
 800738e:	46bd      	mov	sp, r7
 8007390:	b004      	add	sp, #16
 8007392:	bd80      	pop	{r7, pc}

08007394 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073a6:	2240      	movs	r2, #64	@ 0x40
 80073a8:	431a      	orrs	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073b2:	2204      	movs	r2, #4
 80073b4:	431a      	orrs	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	0010      	movs	r0, r2
 80073c2:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80073c4:	46c0      	nop			@ (mov r8, r8)
 80073c6:	46bd      	mov	sp, r7
 80073c8:	b004      	add	sp, #16
 80073ca:	bd80      	pop	{r7, pc}

080073cc <LL_ADC_GetCommonClock>:
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	23f0      	movs	r3, #240	@ 0xf0
 80073da:	039b      	lsls	r3, r3, #14
 80073dc:	4013      	ands	r3, r2
}
 80073de:	0018      	movs	r0, r3
 80073e0:	46bd      	mov	sp, r7
 80073e2:	b002      	add	sp, #8
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <LL_ADC_GetClock>:
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b082      	sub	sp, #8
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	0f9b      	lsrs	r3, r3, #30
 80073f4:	079b      	lsls	r3, r3, #30
}
 80073f6:	0018      	movs	r0, r3
 80073f8:	46bd      	mov	sp, r7
 80073fa:	b002      	add	sp, #8
 80073fc:	bd80      	pop	{r7, pc}

080073fe <LL_ADC_SetCalibrationFactor>:
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b082      	sub	sp, #8
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	22b4      	movs	r2, #180	@ 0xb4
 800740c:	589b      	ldr	r3, [r3, r2]
 800740e:	227f      	movs	r2, #127	@ 0x7f
 8007410:	4393      	bics	r3, r2
 8007412:	001a      	movs	r2, r3
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	431a      	orrs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	21b4      	movs	r1, #180	@ 0xb4
 800741c:	505a      	str	r2, [r3, r1]
}
 800741e:	46c0      	nop			@ (mov r8, r8)
 8007420:	46bd      	mov	sp, r7
 8007422:	b002      	add	sp, #8
 8007424:	bd80      	pop	{r7, pc}

08007426 <LL_ADC_GetCalibrationFactor>:
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b082      	sub	sp, #8
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	22b4      	movs	r2, #180	@ 0xb4
 8007432:	589b      	ldr	r3, [r3, r2]
 8007434:	227f      	movs	r2, #127	@ 0x7f
 8007436:	4013      	ands	r3, r2
}
 8007438:	0018      	movs	r0, r3
 800743a:	46bd      	mov	sp, r7
 800743c:	b002      	add	sp, #8
 800743e:	bd80      	pop	{r7, pc}

08007440 <LL_ADC_Enable>:
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	4a04      	ldr	r2, [pc, #16]	@ (8007460 <LL_ADC_Enable+0x20>)
 800744e:	4013      	ands	r3, r2
 8007450:	2201      	movs	r2, #1
 8007452:	431a      	orrs	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	609a      	str	r2, [r3, #8]
}
 8007458:	46c0      	nop			@ (mov r8, r8)
 800745a:	46bd      	mov	sp, r7
 800745c:	b002      	add	sp, #8
 800745e:	bd80      	pop	{r7, pc}
 8007460:	7fffffe8 	.word	0x7fffffe8

08007464 <LL_ADC_Disable>:
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	4a04      	ldr	r2, [pc, #16]	@ (8007484 <LL_ADC_Disable+0x20>)
 8007472:	4013      	ands	r3, r2
 8007474:	2202      	movs	r2, #2
 8007476:	431a      	orrs	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	609a      	str	r2, [r3, #8]
}
 800747c:	46c0      	nop			@ (mov r8, r8)
 800747e:	46bd      	mov	sp, r7
 8007480:	b002      	add	sp, #8
 8007482:	bd80      	pop	{r7, pc}
 8007484:	7fffffe8 	.word	0x7fffffe8

08007488 <LL_ADC_IsEnabled>:
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	2201      	movs	r2, #1
 8007496:	4013      	ands	r3, r2
 8007498:	2b01      	cmp	r3, #1
 800749a:	d101      	bne.n	80074a0 <LL_ADC_IsEnabled+0x18>
 800749c:	2301      	movs	r3, #1
 800749e:	e000      	b.n	80074a2 <LL_ADC_IsEnabled+0x1a>
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	0018      	movs	r0, r3
 80074a4:	46bd      	mov	sp, r7
 80074a6:	b002      	add	sp, #8
 80074a8:	bd80      	pop	{r7, pc}
	...

080074ac <LL_ADC_StartCalibration>:
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	4a05      	ldr	r2, [pc, #20]	@ (80074d0 <LL_ADC_StartCalibration+0x24>)
 80074ba:	4013      	ands	r3, r2
 80074bc:	2280      	movs	r2, #128	@ 0x80
 80074be:	0612      	lsls	r2, r2, #24
 80074c0:	431a      	orrs	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	609a      	str	r2, [r3, #8]
}
 80074c6:	46c0      	nop			@ (mov r8, r8)
 80074c8:	46bd      	mov	sp, r7
 80074ca:	b002      	add	sp, #8
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	46c0      	nop			@ (mov r8, r8)
 80074d0:	7fffffe8 	.word	0x7fffffe8

080074d4 <LL_ADC_IsCalibrationOnGoing>:
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	0fdb      	lsrs	r3, r3, #31
 80074e2:	07da      	lsls	r2, r3, #31
 80074e4:	2380      	movs	r3, #128	@ 0x80
 80074e6:	061b      	lsls	r3, r3, #24
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d101      	bne.n	80074f0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80074ec:	2301      	movs	r3, #1
 80074ee:	e000      	b.n	80074f2 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	0018      	movs	r0, r3
 80074f4:	46bd      	mov	sp, r7
 80074f6:	b002      	add	sp, #8
 80074f8:	bd80      	pop	{r7, pc}
	...

080074fc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80074fc:	b590      	push	{r4, r7, lr}
 80074fe:	b08b      	sub	sp, #44	@ 0x2c
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007504:	2300      	movs	r3, #0
 8007506:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8007508:	2300      	movs	r3, #0
 800750a:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2254      	movs	r2, #84	@ 0x54
 8007510:	5c9b      	ldrb	r3, [r3, r2]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d101      	bne.n	800751a <HAL_ADCEx_Calibration_Start+0x1e>
 8007516:	2302      	movs	r3, #2
 8007518:	e0dd      	b.n	80076d6 <HAL_ADCEx_Calibration_Start+0x1da>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2254      	movs	r2, #84	@ 0x54
 800751e:	2101      	movs	r1, #1
 8007520:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007522:	231f      	movs	r3, #31
 8007524:	18fc      	adds	r4, r7, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	0018      	movs	r0, r3
 800752a:	f7ff fe5f 	bl	80071ec <ADC_Disable>
 800752e:	0003      	movs	r3, r0
 8007530:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	0018      	movs	r0, r3
 8007538:	f7ff ffa6 	bl	8007488 <LL_ADC_IsEnabled>
 800753c:	1e03      	subs	r3, r0, #0
 800753e:	d000      	beq.n	8007542 <HAL_ADCEx_Calibration_Start+0x46>
 8007540:	e0bc      	b.n	80076bc <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007546:	4a66      	ldr	r2, [pc, #408]	@ (80076e0 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8007548:	4013      	ands	r3, r2
 800754a:	2202      	movs	r2, #2
 800754c:	431a      	orrs	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	4a62      	ldr	r2, [pc, #392]	@ (80076e4 <HAL_ADCEx_Calibration_Start+0x1e8>)
 800755a:	4013      	ands	r3, r2
 800755c:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	495f      	ldr	r1, [pc, #380]	@ (80076e8 <HAL_ADCEx_Calibration_Start+0x1ec>)
 800756a:	400a      	ands	r2, r1
 800756c:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800756e:	2300      	movs	r3, #0
 8007570:	627b      	str	r3, [r7, #36]	@ 0x24
 8007572:	e02d      	b.n	80075d0 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	0018      	movs	r0, r3
 800757a:	f7ff ff97 	bl	80074ac <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800757e:	e014      	b.n	80075aa <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	3301      	adds	r3, #1
 8007584:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	4a58      	ldr	r2, [pc, #352]	@ (80076ec <HAL_ADCEx_Calibration_Start+0x1f0>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d90d      	bls.n	80075aa <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007592:	2212      	movs	r2, #18
 8007594:	4393      	bics	r3, r2
 8007596:	2210      	movs	r2, #16
 8007598:	431a      	orrs	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2254      	movs	r2, #84	@ 0x54
 80075a2:	2100      	movs	r1, #0
 80075a4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e095      	b.n	80076d6 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	0018      	movs	r0, r3
 80075b0:	f7ff ff90 	bl	80074d4 <LL_ADC_IsCalibrationOnGoing>
 80075b4:	1e03      	subs	r3, r0, #0
 80075b6:	d1e3      	bne.n	8007580 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	0018      	movs	r0, r3
 80075be:	f7ff ff32 	bl	8007426 <LL_ADC_GetCalibrationFactor>
 80075c2:	0002      	movs	r2, r0
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	189b      	adds	r3, r3, r2
 80075c8:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80075ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075cc:	3301      	adds	r3, #1
 80075ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80075d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d2:	2b07      	cmp	r3, #7
 80075d4:	d9ce      	bls.n	8007574 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80075d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075d8:	6a38      	ldr	r0, [r7, #32]
 80075da:	f7f8 fd93 	bl	8000104 <__udivsi3>
 80075de:	0003      	movs	r3, r0
 80075e0:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	0018      	movs	r0, r3
 80075e8:	f7ff ff2a 	bl	8007440 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	0018      	movs	r0, r3
 80075f2:	f7ff fef8 	bl	80073e6 <LL_ADC_GetClock>
 80075f6:	1e03      	subs	r3, r0, #0
 80075f8:	d11b      	bne.n	8007632 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80075fa:	4b3d      	ldr	r3, [pc, #244]	@ (80076f0 <HAL_ADCEx_Calibration_Start+0x1f4>)
 80075fc:	0018      	movs	r0, r3
 80075fe:	f7ff fee5 	bl	80073cc <LL_ADC_GetCommonClock>
 8007602:	0003      	movs	r3, r0
 8007604:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	23e0      	movs	r3, #224	@ 0xe0
 800760a:	035b      	lsls	r3, r3, #13
 800760c:	429a      	cmp	r2, r3
 800760e:	d310      	bcc.n	8007632 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	0c9b      	lsrs	r3, r3, #18
 8007614:	3b03      	subs	r3, #3
 8007616:	2201      	movs	r2, #1
 8007618:	409a      	lsls	r2, r3
 800761a:	0013      	movs	r3, r2
 800761c:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	085b      	lsrs	r3, r3, #1
 8007622:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8007624:	e002      	b.n	800762c <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	3b01      	subs	r3, #1
 800762a:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1f9      	bne.n	8007626 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6a3a      	ldr	r2, [r7, #32]
 8007638:	0011      	movs	r1, r2
 800763a:	0018      	movs	r0, r3
 800763c:	f7ff fedf 	bl	80073fe <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	0018      	movs	r0, r3
 8007646:	f7ff ff0d 	bl	8007464 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800764a:	f7fe fe37 	bl	80062bc <HAL_GetTick>
 800764e:	0003      	movs	r3, r0
 8007650:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007652:	e01b      	b.n	800768c <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007654:	f7fe fe32 	bl	80062bc <HAL_GetTick>
 8007658:	0002      	movs	r2, r0
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	2b02      	cmp	r3, #2
 8007660:	d914      	bls.n	800768c <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	0018      	movs	r0, r3
 8007668:	f7ff ff0e 	bl	8007488 <LL_ADC_IsEnabled>
 800766c:	1e03      	subs	r3, r0, #0
 800766e:	d00d      	beq.n	800768c <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007674:	2210      	movs	r2, #16
 8007676:	431a      	orrs	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007680:	2201      	movs	r2, #1
 8007682:	431a      	orrs	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e024      	b.n	80076d6 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	0018      	movs	r0, r3
 8007692:	f7ff fef9 	bl	8007488 <LL_ADC_IsEnabled>
 8007696:	1e03      	subs	r3, r0, #0
 8007698:	d1dc      	bne.n	8007654 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68d9      	ldr	r1, [r3, #12]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ae:	2203      	movs	r2, #3
 80076b0:	4393      	bics	r3, r2
 80076b2:	2201      	movs	r2, #1
 80076b4:	431a      	orrs	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80076ba:	e005      	b.n	80076c8 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076c0:	2210      	movs	r2, #16
 80076c2:	431a      	orrs	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2254      	movs	r2, #84	@ 0x54
 80076cc:	2100      	movs	r1, #0
 80076ce:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80076d0:	231f      	movs	r3, #31
 80076d2:	18fb      	adds	r3, r7, r3
 80076d4:	781b      	ldrb	r3, [r3, #0]
}
 80076d6:	0018      	movs	r0, r3
 80076d8:	46bd      	mov	sp, r7
 80076da:	b00b      	add	sp, #44	@ 0x2c
 80076dc:	bd90      	pop	{r4, r7, pc}
 80076de:	46c0      	nop			@ (mov r8, r8)
 80076e0:	fffffefd 	.word	0xfffffefd
 80076e4:	00008003 	.word	0x00008003
 80076e8:	ffff7ffc 	.word	0xffff7ffc
 80076ec:	0002f1ff 	.word	0x0002f1ff
 80076f0:	40012708 	.word	0x40012708

080076f4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80076fc:	46c0      	nop			@ (mov r8, r8)
 80076fe:	46bd      	mov	sp, r7
 8007700:	b002      	add	sp, #8
 8007702:	bd80      	pop	{r7, pc}

08007704 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800770c:	46c0      	nop			@ (mov r8, r8)
 800770e:	46bd      	mov	sp, r7
 8007710:	b002      	add	sp, #8
 8007712:	bd80      	pop	{r7, pc}

08007714 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800771c:	46c0      	nop			@ (mov r8, r8)
 800771e:	46bd      	mov	sp, r7
 8007720:	b002      	add	sp, #8
 8007722:	bd80      	pop	{r7, pc}

08007724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	0002      	movs	r2, r0
 800772c:	1dfb      	adds	r3, r7, #7
 800772e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007730:	1dfb      	adds	r3, r7, #7
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	2b7f      	cmp	r3, #127	@ 0x7f
 8007736:	d809      	bhi.n	800774c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007738:	1dfb      	adds	r3, r7, #7
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	001a      	movs	r2, r3
 800773e:	231f      	movs	r3, #31
 8007740:	401a      	ands	r2, r3
 8007742:	4b04      	ldr	r3, [pc, #16]	@ (8007754 <__NVIC_EnableIRQ+0x30>)
 8007744:	2101      	movs	r1, #1
 8007746:	4091      	lsls	r1, r2
 8007748:	000a      	movs	r2, r1
 800774a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800774c:	46c0      	nop			@ (mov r8, r8)
 800774e:	46bd      	mov	sp, r7
 8007750:	b002      	add	sp, #8
 8007752:	bd80      	pop	{r7, pc}
 8007754:	e000e100 	.word	0xe000e100

08007758 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	0002      	movs	r2, r0
 8007760:	1dfb      	adds	r3, r7, #7
 8007762:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007764:	1dfb      	adds	r3, r7, #7
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	2b7f      	cmp	r3, #127	@ 0x7f
 800776a:	d810      	bhi.n	800778e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800776c:	1dfb      	adds	r3, r7, #7
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	001a      	movs	r2, r3
 8007772:	231f      	movs	r3, #31
 8007774:	4013      	ands	r3, r2
 8007776:	4908      	ldr	r1, [pc, #32]	@ (8007798 <__NVIC_DisableIRQ+0x40>)
 8007778:	2201      	movs	r2, #1
 800777a:	409a      	lsls	r2, r3
 800777c:	0013      	movs	r3, r2
 800777e:	2280      	movs	r2, #128	@ 0x80
 8007780:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007782:	f3bf 8f4f 	dsb	sy
}
 8007786:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8007788:	f3bf 8f6f 	isb	sy
}
 800778c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800778e:	46c0      	nop			@ (mov r8, r8)
 8007790:	46bd      	mov	sp, r7
 8007792:	b002      	add	sp, #8
 8007794:	bd80      	pop	{r7, pc}
 8007796:	46c0      	nop			@ (mov r8, r8)
 8007798:	e000e100 	.word	0xe000e100

0800779c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800779c:	b590      	push	{r4, r7, lr}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	0002      	movs	r2, r0
 80077a4:	6039      	str	r1, [r7, #0]
 80077a6:	1dfb      	adds	r3, r7, #7
 80077a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80077aa:	1dfb      	adds	r3, r7, #7
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80077b0:	d828      	bhi.n	8007804 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80077b2:	4a2f      	ldr	r2, [pc, #188]	@ (8007870 <__NVIC_SetPriority+0xd4>)
 80077b4:	1dfb      	adds	r3, r7, #7
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	b25b      	sxtb	r3, r3
 80077ba:	089b      	lsrs	r3, r3, #2
 80077bc:	33c0      	adds	r3, #192	@ 0xc0
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	589b      	ldr	r3, [r3, r2]
 80077c2:	1dfa      	adds	r2, r7, #7
 80077c4:	7812      	ldrb	r2, [r2, #0]
 80077c6:	0011      	movs	r1, r2
 80077c8:	2203      	movs	r2, #3
 80077ca:	400a      	ands	r2, r1
 80077cc:	00d2      	lsls	r2, r2, #3
 80077ce:	21ff      	movs	r1, #255	@ 0xff
 80077d0:	4091      	lsls	r1, r2
 80077d2:	000a      	movs	r2, r1
 80077d4:	43d2      	mvns	r2, r2
 80077d6:	401a      	ands	r2, r3
 80077d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	019b      	lsls	r3, r3, #6
 80077de:	22ff      	movs	r2, #255	@ 0xff
 80077e0:	401a      	ands	r2, r3
 80077e2:	1dfb      	adds	r3, r7, #7
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	0018      	movs	r0, r3
 80077e8:	2303      	movs	r3, #3
 80077ea:	4003      	ands	r3, r0
 80077ec:	00db      	lsls	r3, r3, #3
 80077ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80077f0:	481f      	ldr	r0, [pc, #124]	@ (8007870 <__NVIC_SetPriority+0xd4>)
 80077f2:	1dfb      	adds	r3, r7, #7
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	b25b      	sxtb	r3, r3
 80077f8:	089b      	lsrs	r3, r3, #2
 80077fa:	430a      	orrs	r2, r1
 80077fc:	33c0      	adds	r3, #192	@ 0xc0
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8007802:	e031      	b.n	8007868 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007804:	4a1b      	ldr	r2, [pc, #108]	@ (8007874 <__NVIC_SetPriority+0xd8>)
 8007806:	1dfb      	adds	r3, r7, #7
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	0019      	movs	r1, r3
 800780c:	230f      	movs	r3, #15
 800780e:	400b      	ands	r3, r1
 8007810:	3b08      	subs	r3, #8
 8007812:	089b      	lsrs	r3, r3, #2
 8007814:	3306      	adds	r3, #6
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	18d3      	adds	r3, r2, r3
 800781a:	3304      	adds	r3, #4
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	1dfa      	adds	r2, r7, #7
 8007820:	7812      	ldrb	r2, [r2, #0]
 8007822:	0011      	movs	r1, r2
 8007824:	2203      	movs	r2, #3
 8007826:	400a      	ands	r2, r1
 8007828:	00d2      	lsls	r2, r2, #3
 800782a:	21ff      	movs	r1, #255	@ 0xff
 800782c:	4091      	lsls	r1, r2
 800782e:	000a      	movs	r2, r1
 8007830:	43d2      	mvns	r2, r2
 8007832:	401a      	ands	r2, r3
 8007834:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	019b      	lsls	r3, r3, #6
 800783a:	22ff      	movs	r2, #255	@ 0xff
 800783c:	401a      	ands	r2, r3
 800783e:	1dfb      	adds	r3, r7, #7
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	0018      	movs	r0, r3
 8007844:	2303      	movs	r3, #3
 8007846:	4003      	ands	r3, r0
 8007848:	00db      	lsls	r3, r3, #3
 800784a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800784c:	4809      	ldr	r0, [pc, #36]	@ (8007874 <__NVIC_SetPriority+0xd8>)
 800784e:	1dfb      	adds	r3, r7, #7
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	001c      	movs	r4, r3
 8007854:	230f      	movs	r3, #15
 8007856:	4023      	ands	r3, r4
 8007858:	3b08      	subs	r3, #8
 800785a:	089b      	lsrs	r3, r3, #2
 800785c:	430a      	orrs	r2, r1
 800785e:	3306      	adds	r3, #6
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	18c3      	adds	r3, r0, r3
 8007864:	3304      	adds	r3, #4
 8007866:	601a      	str	r2, [r3, #0]
}
 8007868:	46c0      	nop			@ (mov r8, r8)
 800786a:	46bd      	mov	sp, r7
 800786c:	b003      	add	sp, #12
 800786e:	bd90      	pop	{r4, r7, pc}
 8007870:	e000e100 	.word	0xe000e100
 8007874:	e000ed00 	.word	0xe000ed00

08007878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	1e5a      	subs	r2, r3, #1
 8007884:	2380      	movs	r3, #128	@ 0x80
 8007886:	045b      	lsls	r3, r3, #17
 8007888:	429a      	cmp	r2, r3
 800788a:	d301      	bcc.n	8007890 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800788c:	2301      	movs	r3, #1
 800788e:	e010      	b.n	80078b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007890:	4b0a      	ldr	r3, [pc, #40]	@ (80078bc <SysTick_Config+0x44>)
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	3a01      	subs	r2, #1
 8007896:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007898:	2301      	movs	r3, #1
 800789a:	425b      	negs	r3, r3
 800789c:	2103      	movs	r1, #3
 800789e:	0018      	movs	r0, r3
 80078a0:	f7ff ff7c 	bl	800779c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80078a4:	4b05      	ldr	r3, [pc, #20]	@ (80078bc <SysTick_Config+0x44>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80078aa:	4b04      	ldr	r3, [pc, #16]	@ (80078bc <SysTick_Config+0x44>)
 80078ac:	2207      	movs	r2, #7
 80078ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	0018      	movs	r0, r3
 80078b4:	46bd      	mov	sp, r7
 80078b6:	b002      	add	sp, #8
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	46c0      	nop			@ (mov r8, r8)
 80078bc:	e000e010 	.word	0xe000e010

080078c0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60b9      	str	r1, [r7, #8]
 80078c8:	607a      	str	r2, [r7, #4]
 80078ca:	210f      	movs	r1, #15
 80078cc:	187b      	adds	r3, r7, r1
 80078ce:	1c02      	adds	r2, r0, #0
 80078d0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	187b      	adds	r3, r7, r1
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	b25b      	sxtb	r3, r3
 80078da:	0011      	movs	r1, r2
 80078dc:	0018      	movs	r0, r3
 80078de:	f7ff ff5d 	bl	800779c <__NVIC_SetPriority>
}
 80078e2:	46c0      	nop			@ (mov r8, r8)
 80078e4:	46bd      	mov	sp, r7
 80078e6:	b004      	add	sp, #16
 80078e8:	bd80      	pop	{r7, pc}

080078ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b082      	sub	sp, #8
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	0002      	movs	r2, r0
 80078f2:	1dfb      	adds	r3, r7, #7
 80078f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80078f6:	1dfb      	adds	r3, r7, #7
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	b25b      	sxtb	r3, r3
 80078fc:	0018      	movs	r0, r3
 80078fe:	f7ff ff11 	bl	8007724 <__NVIC_EnableIRQ>
}
 8007902:	46c0      	nop			@ (mov r8, r8)
 8007904:	46bd      	mov	sp, r7
 8007906:	b002      	add	sp, #8
 8007908:	bd80      	pop	{r7, pc}

0800790a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b082      	sub	sp, #8
 800790e:	af00      	add	r7, sp, #0
 8007910:	0002      	movs	r2, r0
 8007912:	1dfb      	adds	r3, r7, #7
 8007914:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007916:	1dfb      	adds	r3, r7, #7
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	b25b      	sxtb	r3, r3
 800791c:	0018      	movs	r0, r3
 800791e:	f7ff ff1b 	bl	8007758 <__NVIC_DisableIRQ>
}
 8007922:	46c0      	nop			@ (mov r8, r8)
 8007924:	46bd      	mov	sp, r7
 8007926:	b002      	add	sp, #8
 8007928:	bd80      	pop	{r7, pc}

0800792a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b082      	sub	sp, #8
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	0018      	movs	r0, r3
 8007936:	f7ff ff9f 	bl	8007878 <SysTick_Config>
 800793a:	0003      	movs	r3, r0
}
 800793c:	0018      	movs	r0, r3
 800793e:	46bd      	mov	sp, r7
 8007940:	b002      	add	sp, #8
 8007942:	bd80      	pop	{r7, pc}

08007944 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e077      	b.n	8007a46 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a3d      	ldr	r2, [pc, #244]	@ (8007a50 <HAL_DMA_Init+0x10c>)
 800795c:	4694      	mov	ip, r2
 800795e:	4463      	add	r3, ip
 8007960:	2114      	movs	r1, #20
 8007962:	0018      	movs	r0, r3
 8007964:	f7f8 fbce 	bl	8000104 <__udivsi3>
 8007968:	0003      	movs	r3, r0
 800796a:	009a      	lsls	r2, r3, #2
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2225      	movs	r2, #37	@ 0x25
 8007974:	2102      	movs	r1, #2
 8007976:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4934      	ldr	r1, [pc, #208]	@ (8007a54 <HAL_DMA_Init+0x110>)
 8007984:	400a      	ands	r2, r1
 8007986:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6819      	ldr	r1, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689a      	ldr	r2, [r3, #8]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	431a      	orrs	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	431a      	orrs	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	431a      	orrs	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	431a      	orrs	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	69db      	ldr	r3, [r3, #28]
 80079ae:	431a      	orrs	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a1b      	ldr	r3, [r3, #32]
 80079b4:	431a      	orrs	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	0018      	movs	r0, r3
 80079c2:	f000 fa8d 	bl	8007ee0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	689a      	ldr	r2, [r3, #8]
 80079ca:	2380      	movs	r3, #128	@ 0x80
 80079cc:	01db      	lsls	r3, r3, #7
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d102      	bne.n	80079d8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079e0:	213f      	movs	r1, #63	@ 0x3f
 80079e2:	400a      	ands	r2, r1
 80079e4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80079ee:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d011      	beq.n	8007a1c <HAL_DMA_Init+0xd8>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	2b04      	cmp	r3, #4
 80079fe:	d80d      	bhi.n	8007a1c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	0018      	movs	r0, r3
 8007a04:	f000 fa98 	bl	8007f38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007a18:	605a      	str	r2, [r3, #4]
 8007a1a:	e008      	b.n	8007a2e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2225      	movs	r2, #37	@ 0x25
 8007a38:	2101      	movs	r1, #1
 8007a3a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2224      	movs	r2, #36	@ 0x24
 8007a40:	2100      	movs	r1, #0
 8007a42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	0018      	movs	r0, r3
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	b002      	add	sp, #8
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	46c0      	nop			@ (mov r8, r8)
 8007a50:	bffdfff8 	.word	0xbffdfff8
 8007a54:	ffff800f 	.word	0xffff800f

08007a58 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
 8007a64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a66:	2317      	movs	r3, #23
 8007a68:	18fb      	adds	r3, r7, r3
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2224      	movs	r2, #36	@ 0x24
 8007a72:	5c9b      	ldrb	r3, [r3, r2]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d101      	bne.n	8007a7c <HAL_DMA_Start_IT+0x24>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e06f      	b.n	8007b5c <HAL_DMA_Start_IT+0x104>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2224      	movs	r2, #36	@ 0x24
 8007a80:	2101      	movs	r1, #1
 8007a82:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2225      	movs	r2, #37	@ 0x25
 8007a88:	5c9b      	ldrb	r3, [r3, r2]
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d157      	bne.n	8007b40 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2225      	movs	r2, #37	@ 0x25
 8007a94:	2102      	movs	r1, #2
 8007a96:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2101      	movs	r1, #1
 8007aaa:	438a      	bics	r2, r1
 8007aac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	68b9      	ldr	r1, [r7, #8]
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f000 f9d3 	bl	8007e60 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d008      	beq.n	8007ad4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	210e      	movs	r1, #14
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	601a      	str	r2, [r3, #0]
 8007ad2:	e00f      	b.n	8007af4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2104      	movs	r1, #4
 8007ae0:	438a      	bics	r2, r1
 8007ae2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	210a      	movs	r1, #10
 8007af0:	430a      	orrs	r2, r1
 8007af2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	2380      	movs	r3, #128	@ 0x80
 8007afc:	025b      	lsls	r3, r3, #9
 8007afe:	4013      	ands	r3, r2
 8007b00:	d008      	beq.n	8007b14 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b0c:	2180      	movs	r1, #128	@ 0x80
 8007b0e:	0049      	lsls	r1, r1, #1
 8007b10:	430a      	orrs	r2, r1
 8007b12:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d008      	beq.n	8007b2e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b26:	2180      	movs	r1, #128	@ 0x80
 8007b28:	0049      	lsls	r1, r1, #1
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2101      	movs	r1, #1
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	e00a      	b.n	8007b56 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2280      	movs	r2, #128	@ 0x80
 8007b44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2224      	movs	r2, #36	@ 0x24
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8007b4e:	2317      	movs	r3, #23
 8007b50:	18fb      	adds	r3, r7, r3
 8007b52:	2201      	movs	r2, #1
 8007b54:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007b56:	2317      	movs	r3, #23
 8007b58:	18fb      	adds	r3, r7, r3
 8007b5a:	781b      	ldrb	r3, [r3, #0]
}
 8007b5c:	0018      	movs	r0, r3
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	b006      	add	sp, #24
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e050      	b.n	8007c18 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2225      	movs	r2, #37	@ 0x25
 8007b7a:	5c9b      	ldrb	r3, [r3, r2]
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d008      	beq.n	8007b94 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2204      	movs	r2, #4
 8007b86:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2224      	movs	r2, #36	@ 0x24
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e041      	b.n	8007c18 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	210e      	movs	r1, #14
 8007ba0:	438a      	bics	r2, r1
 8007ba2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bae:	491c      	ldr	r1, [pc, #112]	@ (8007c20 <HAL_DMA_Abort+0xbc>)
 8007bb0:	400a      	ands	r2, r1
 8007bb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	438a      	bics	r2, r1
 8007bc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8007bc4:	4b17      	ldr	r3, [pc, #92]	@ (8007c24 <HAL_DMA_Abort+0xc0>)
 8007bc6:	6859      	ldr	r1, [r3, #4]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bcc:	221c      	movs	r2, #28
 8007bce:	4013      	ands	r3, r2
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	409a      	lsls	r2, r3
 8007bd4:	4b13      	ldr	r3, [pc, #76]	@ (8007c24 <HAL_DMA_Abort+0xc0>)
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007be2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00c      	beq.n	8007c06 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bf6:	490a      	ldr	r1, [pc, #40]	@ (8007c20 <HAL_DMA_Abort+0xbc>)
 8007bf8:	400a      	ands	r2, r1
 8007bfa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007c04:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2225      	movs	r2, #37	@ 0x25
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2224      	movs	r2, #36	@ 0x24
 8007c12:	2100      	movs	r1, #0
 8007c14:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	0018      	movs	r0, r3
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	b002      	add	sp, #8
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	fffffeff 	.word	0xfffffeff
 8007c24:	40020000 	.word	0x40020000

08007c28 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c30:	210f      	movs	r1, #15
 8007c32:	187b      	adds	r3, r7, r1
 8007c34:	2200      	movs	r2, #0
 8007c36:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2225      	movs	r2, #37	@ 0x25
 8007c3c:	5c9b      	ldrb	r3, [r3, r2]
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d006      	beq.n	8007c52 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2204      	movs	r2, #4
 8007c48:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007c4a:	187b      	adds	r3, r7, r1
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	701a      	strb	r2, [r3, #0]
 8007c50:	e049      	b.n	8007ce6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	210e      	movs	r1, #14
 8007c5e:	438a      	bics	r2, r1
 8007c60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	438a      	bics	r2, r1
 8007c70:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c7c:	491d      	ldr	r1, [pc, #116]	@ (8007cf4 <HAL_DMA_Abort_IT+0xcc>)
 8007c7e:	400a      	ands	r2, r1
 8007c80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8007c82:	4b1d      	ldr	r3, [pc, #116]	@ (8007cf8 <HAL_DMA_Abort_IT+0xd0>)
 8007c84:	6859      	ldr	r1, [r3, #4]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c8a:	221c      	movs	r2, #28
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	2201      	movs	r2, #1
 8007c90:	409a      	lsls	r2, r3
 8007c92:	4b19      	ldr	r3, [pc, #100]	@ (8007cf8 <HAL_DMA_Abort_IT+0xd0>)
 8007c94:	430a      	orrs	r2, r1
 8007c96:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007ca0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00c      	beq.n	8007cc4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cb4:	490f      	ldr	r1, [pc, #60]	@ (8007cf4 <HAL_DMA_Abort_IT+0xcc>)
 8007cb6:	400a      	ands	r2, r1
 8007cb8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007cc2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2225      	movs	r2, #37	@ 0x25
 8007cc8:	2101      	movs	r1, #1
 8007cca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2224      	movs	r2, #36	@ 0x24
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d004      	beq.n	8007ce6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	0010      	movs	r0, r2
 8007ce4:	4798      	blx	r3
    }
  }
  return status;
 8007ce6:	230f      	movs	r3, #15
 8007ce8:	18fb      	adds	r3, r7, r3
 8007cea:	781b      	ldrb	r3, [r3, #0]
}
 8007cec:	0018      	movs	r0, r3
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	b004      	add	sp, #16
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	fffffeff 	.word	0xfffffeff
 8007cf8:	40020000 	.word	0x40020000

08007cfc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8007d04:	4b55      	ldr	r3, [pc, #340]	@ (8007e5c <HAL_DMA_IRQHandler+0x160>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d16:	221c      	movs	r2, #28
 8007d18:	4013      	ands	r3, r2
 8007d1a:	2204      	movs	r2, #4
 8007d1c:	409a      	lsls	r2, r3
 8007d1e:	0013      	movs	r3, r2
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	4013      	ands	r3, r2
 8007d24:	d027      	beq.n	8007d76 <HAL_DMA_IRQHandler+0x7a>
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2204      	movs	r2, #4
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	d023      	beq.n	8007d76 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2220      	movs	r2, #32
 8007d36:	4013      	ands	r3, r2
 8007d38:	d107      	bne.n	8007d4a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2104      	movs	r1, #4
 8007d46:	438a      	bics	r2, r1
 8007d48:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8007d4a:	4b44      	ldr	r3, [pc, #272]	@ (8007e5c <HAL_DMA_IRQHandler+0x160>)
 8007d4c:	6859      	ldr	r1, [r3, #4]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d52:	221c      	movs	r2, #28
 8007d54:	4013      	ands	r3, r2
 8007d56:	2204      	movs	r2, #4
 8007d58:	409a      	lsls	r2, r3
 8007d5a:	4b40      	ldr	r3, [pc, #256]	@ (8007e5c <HAL_DMA_IRQHandler+0x160>)
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d100      	bne.n	8007d6a <HAL_DMA_IRQHandler+0x6e>
 8007d68:	e073      	b.n	8007e52 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	0010      	movs	r0, r2
 8007d72:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8007d74:	e06d      	b.n	8007e52 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d7a:	221c      	movs	r2, #28
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	2202      	movs	r2, #2
 8007d80:	409a      	lsls	r2, r3
 8007d82:	0013      	movs	r3, r2
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	4013      	ands	r3, r2
 8007d88:	d02e      	beq.n	8007de8 <HAL_DMA_IRQHandler+0xec>
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	2202      	movs	r2, #2
 8007d8e:	4013      	ands	r3, r2
 8007d90:	d02a      	beq.n	8007de8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	d10b      	bne.n	8007db6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	210a      	movs	r1, #10
 8007daa:	438a      	bics	r2, r1
 8007dac:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2225      	movs	r2, #37	@ 0x25
 8007db2:	2101      	movs	r1, #1
 8007db4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8007db6:	4b29      	ldr	r3, [pc, #164]	@ (8007e5c <HAL_DMA_IRQHandler+0x160>)
 8007db8:	6859      	ldr	r1, [r3, #4]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dbe:	221c      	movs	r2, #28
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	409a      	lsls	r2, r3
 8007dc6:	4b25      	ldr	r3, [pc, #148]	@ (8007e5c <HAL_DMA_IRQHandler+0x160>)
 8007dc8:	430a      	orrs	r2, r1
 8007dca:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2224      	movs	r2, #36	@ 0x24
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d03a      	beq.n	8007e52 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	0010      	movs	r0, r2
 8007de4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8007de6:	e034      	b.n	8007e52 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dec:	221c      	movs	r2, #28
 8007dee:	4013      	ands	r3, r2
 8007df0:	2208      	movs	r2, #8
 8007df2:	409a      	lsls	r2, r3
 8007df4:	0013      	movs	r3, r2
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	4013      	ands	r3, r2
 8007dfa:	d02b      	beq.n	8007e54 <HAL_DMA_IRQHandler+0x158>
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	2208      	movs	r2, #8
 8007e00:	4013      	ands	r3, r2
 8007e02:	d027      	beq.n	8007e54 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	210e      	movs	r1, #14
 8007e10:	438a      	bics	r2, r1
 8007e12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007e14:	4b11      	ldr	r3, [pc, #68]	@ (8007e5c <HAL_DMA_IRQHandler+0x160>)
 8007e16:	6859      	ldr	r1, [r3, #4]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e1c:	221c      	movs	r2, #28
 8007e1e:	4013      	ands	r3, r2
 8007e20:	2201      	movs	r2, #1
 8007e22:	409a      	lsls	r2, r3
 8007e24:	4b0d      	ldr	r3, [pc, #52]	@ (8007e5c <HAL_DMA_IRQHandler+0x160>)
 8007e26:	430a      	orrs	r2, r1
 8007e28:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2225      	movs	r2, #37	@ 0x25
 8007e34:	2101      	movs	r1, #1
 8007e36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2224      	movs	r2, #36	@ 0x24
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d005      	beq.n	8007e54 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	0010      	movs	r0, r2
 8007e50:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007e52:	46c0      	nop			@ (mov r8, r8)
 8007e54:	46c0      	nop			@ (mov r8, r8)
}
 8007e56:	46bd      	mov	sp, r7
 8007e58:	b004      	add	sp, #16
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	40020000 	.word	0x40020000

08007e60 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007e76:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d004      	beq.n	8007e8a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007e88:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007e8a:	4b14      	ldr	r3, [pc, #80]	@ (8007edc <DMA_SetConfig+0x7c>)
 8007e8c:	6859      	ldr	r1, [r3, #4]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e92:	221c      	movs	r2, #28
 8007e94:	4013      	ands	r3, r2
 8007e96:	2201      	movs	r2, #1
 8007e98:	409a      	lsls	r2, r3
 8007e9a:	4b10      	ldr	r3, [pc, #64]	@ (8007edc <DMA_SetConfig+0x7c>)
 8007e9c:	430a      	orrs	r2, r1
 8007e9e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	2b10      	cmp	r3, #16
 8007eae:	d108      	bne.n	8007ec2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007ec0:	e007      	b.n	8007ed2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	60da      	str	r2, [r3, #12]
}
 8007ed2:	46c0      	nop			@ (mov r8, r8)
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	b004      	add	sp, #16
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	46c0      	nop			@ (mov r8, r8)
 8007edc:	40020000 	.word	0x40020000

08007ee0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eec:	089b      	lsrs	r3, r3, #2
 8007eee:	4a10      	ldr	r2, [pc, #64]	@ (8007f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8007ef0:	4694      	mov	ip, r2
 8007ef2:	4463      	add	r3, ip
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	001a      	movs	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	001a      	movs	r2, r3
 8007f02:	23ff      	movs	r3, #255	@ 0xff
 8007f04:	4013      	ands	r3, r2
 8007f06:	3b08      	subs	r3, #8
 8007f08:	2114      	movs	r1, #20
 8007f0a:	0018      	movs	r0, r3
 8007f0c:	f7f8 f8fa 	bl	8000104 <__udivsi3>
 8007f10:	0003      	movs	r3, r0
 8007f12:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a07      	ldr	r2, [pc, #28]	@ (8007f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8007f18:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	221f      	movs	r2, #31
 8007f1e:	4013      	ands	r3, r2
 8007f20:	2201      	movs	r2, #1
 8007f22:	409a      	lsls	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8007f28:	46c0      	nop			@ (mov r8, r8)
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	b004      	add	sp, #16
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	10008200 	.word	0x10008200
 8007f34:	40020880 	.word	0x40020880

08007f38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	223f      	movs	r2, #63	@ 0x3f
 8007f46:	4013      	ands	r3, r2
 8007f48:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8007f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007f4e:	4694      	mov	ip, r2
 8007f50:	4463      	add	r3, ip
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	001a      	movs	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a07      	ldr	r2, [pc, #28]	@ (8007f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007f5e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	3b01      	subs	r3, #1
 8007f64:	2203      	movs	r2, #3
 8007f66:	4013      	ands	r3, r2
 8007f68:	2201      	movs	r2, #1
 8007f6a:	409a      	lsls	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8007f70:	46c0      	nop			@ (mov r8, r8)
 8007f72:	46bd      	mov	sp, r7
 8007f74:	b004      	add	sp, #16
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	1000823f 	.word	0x1000823f
 8007f7c:	40020940 	.word	0x40020940

08007f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007f8e:	e147      	b.n	8008220 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2101      	movs	r1, #1
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	4091      	lsls	r1, r2
 8007f9a:	000a      	movs	r2, r1
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d100      	bne.n	8007fa8 <HAL_GPIO_Init+0x28>
 8007fa6:	e138      	b.n	800821a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	2203      	movs	r2, #3
 8007fae:	4013      	ands	r3, r2
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d005      	beq.n	8007fc0 <HAL_GPIO_Init+0x40>
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	2203      	movs	r2, #3
 8007fba:	4013      	ands	r3, r2
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d130      	bne.n	8008022 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	005b      	lsls	r3, r3, #1
 8007fca:	2203      	movs	r2, #3
 8007fcc:	409a      	lsls	r2, r3
 8007fce:	0013      	movs	r3, r2
 8007fd0:	43da      	mvns	r2, r3
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	68da      	ldr	r2, [r3, #12]
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	005b      	lsls	r3, r3, #1
 8007fe0:	409a      	lsls	r2, r3
 8007fe2:	0013      	movs	r3, r2
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	409a      	lsls	r2, r3
 8007ffc:	0013      	movs	r3, r2
 8007ffe:	43da      	mvns	r2, r3
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	4013      	ands	r3, r2
 8008004:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	091b      	lsrs	r3, r3, #4
 800800c:	2201      	movs	r2, #1
 800800e:	401a      	ands	r2, r3
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	409a      	lsls	r2, r3
 8008014:	0013      	movs	r3, r2
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	4313      	orrs	r3, r2
 800801a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	2203      	movs	r2, #3
 8008028:	4013      	ands	r3, r2
 800802a:	2b03      	cmp	r3, #3
 800802c:	d017      	beq.n	800805e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	005b      	lsls	r3, r3, #1
 8008038:	2203      	movs	r2, #3
 800803a:	409a      	lsls	r2, r3
 800803c:	0013      	movs	r3, r2
 800803e:	43da      	mvns	r2, r3
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	4013      	ands	r3, r2
 8008044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	689a      	ldr	r2, [r3, #8]
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	005b      	lsls	r3, r3, #1
 800804e:	409a      	lsls	r2, r3
 8008050:	0013      	movs	r3, r2
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	4313      	orrs	r3, r2
 8008056:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	2203      	movs	r2, #3
 8008064:	4013      	ands	r3, r2
 8008066:	2b02      	cmp	r3, #2
 8008068:	d123      	bne.n	80080b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	08da      	lsrs	r2, r3, #3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	3208      	adds	r2, #8
 8008072:	0092      	lsls	r2, r2, #2
 8008074:	58d3      	ldr	r3, [r2, r3]
 8008076:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	2207      	movs	r2, #7
 800807c:	4013      	ands	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	220f      	movs	r2, #15
 8008082:	409a      	lsls	r2, r3
 8008084:	0013      	movs	r3, r2
 8008086:	43da      	mvns	r2, r3
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	4013      	ands	r3, r2
 800808c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	691a      	ldr	r2, [r3, #16]
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	2107      	movs	r1, #7
 8008096:	400b      	ands	r3, r1
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	409a      	lsls	r2, r3
 800809c:	0013      	movs	r3, r2
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	08da      	lsrs	r2, r3, #3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	3208      	adds	r2, #8
 80080ac:	0092      	lsls	r2, r2, #2
 80080ae:	6939      	ldr	r1, [r7, #16]
 80080b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	005b      	lsls	r3, r3, #1
 80080bc:	2203      	movs	r2, #3
 80080be:	409a      	lsls	r2, r3
 80080c0:	0013      	movs	r3, r2
 80080c2:	43da      	mvns	r2, r3
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	4013      	ands	r3, r2
 80080c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2203      	movs	r2, #3
 80080d0:	401a      	ands	r2, r3
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	005b      	lsls	r3, r3, #1
 80080d6:	409a      	lsls	r2, r3
 80080d8:	0013      	movs	r3, r2
 80080da:	693a      	ldr	r2, [r7, #16]
 80080dc:	4313      	orrs	r3, r2
 80080de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	23c0      	movs	r3, #192	@ 0xc0
 80080ec:	029b      	lsls	r3, r3, #10
 80080ee:	4013      	ands	r3, r2
 80080f0:	d100      	bne.n	80080f4 <HAL_GPIO_Init+0x174>
 80080f2:	e092      	b.n	800821a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80080f4:	4a50      	ldr	r2, [pc, #320]	@ (8008238 <HAL_GPIO_Init+0x2b8>)
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	089b      	lsrs	r3, r3, #2
 80080fa:	3318      	adds	r3, #24
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	589b      	ldr	r3, [r3, r2]
 8008100:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	2203      	movs	r2, #3
 8008106:	4013      	ands	r3, r2
 8008108:	00db      	lsls	r3, r3, #3
 800810a:	220f      	movs	r2, #15
 800810c:	409a      	lsls	r2, r3
 800810e:	0013      	movs	r3, r2
 8008110:	43da      	mvns	r2, r3
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	4013      	ands	r3, r2
 8008116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	23a0      	movs	r3, #160	@ 0xa0
 800811c:	05db      	lsls	r3, r3, #23
 800811e:	429a      	cmp	r2, r3
 8008120:	d013      	beq.n	800814a <HAL_GPIO_Init+0x1ca>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a45      	ldr	r2, [pc, #276]	@ (800823c <HAL_GPIO_Init+0x2bc>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d00d      	beq.n	8008146 <HAL_GPIO_Init+0x1c6>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a44      	ldr	r2, [pc, #272]	@ (8008240 <HAL_GPIO_Init+0x2c0>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d007      	beq.n	8008142 <HAL_GPIO_Init+0x1c2>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a43      	ldr	r2, [pc, #268]	@ (8008244 <HAL_GPIO_Init+0x2c4>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d101      	bne.n	800813e <HAL_GPIO_Init+0x1be>
 800813a:	2303      	movs	r3, #3
 800813c:	e006      	b.n	800814c <HAL_GPIO_Init+0x1cc>
 800813e:	2305      	movs	r3, #5
 8008140:	e004      	b.n	800814c <HAL_GPIO_Init+0x1cc>
 8008142:	2302      	movs	r3, #2
 8008144:	e002      	b.n	800814c <HAL_GPIO_Init+0x1cc>
 8008146:	2301      	movs	r3, #1
 8008148:	e000      	b.n	800814c <HAL_GPIO_Init+0x1cc>
 800814a:	2300      	movs	r3, #0
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	2103      	movs	r1, #3
 8008150:	400a      	ands	r2, r1
 8008152:	00d2      	lsls	r2, r2, #3
 8008154:	4093      	lsls	r3, r2
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	4313      	orrs	r3, r2
 800815a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800815c:	4936      	ldr	r1, [pc, #216]	@ (8008238 <HAL_GPIO_Init+0x2b8>)
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	089b      	lsrs	r3, r3, #2
 8008162:	3318      	adds	r3, #24
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800816a:	4b33      	ldr	r3, [pc, #204]	@ (8008238 <HAL_GPIO_Init+0x2b8>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	43da      	mvns	r2, r3
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	4013      	ands	r3, r2
 8008178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	2380      	movs	r3, #128	@ 0x80
 8008180:	035b      	lsls	r3, r3, #13
 8008182:	4013      	ands	r3, r2
 8008184:	d003      	beq.n	800818e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	4313      	orrs	r3, r2
 800818c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800818e:	4b2a      	ldr	r3, [pc, #168]	@ (8008238 <HAL_GPIO_Init+0x2b8>)
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008194:	4b28      	ldr	r3, [pc, #160]	@ (8008238 <HAL_GPIO_Init+0x2b8>)
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	43da      	mvns	r2, r3
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	4013      	ands	r3, r2
 80081a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	685a      	ldr	r2, [r3, #4]
 80081a8:	2380      	movs	r3, #128	@ 0x80
 80081aa:	039b      	lsls	r3, r3, #14
 80081ac:	4013      	ands	r3, r2
 80081ae:	d003      	beq.n	80081b8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80081b8:	4b1f      	ldr	r3, [pc, #124]	@ (8008238 <HAL_GPIO_Init+0x2b8>)
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80081be:	4a1e      	ldr	r2, [pc, #120]	@ (8008238 <HAL_GPIO_Init+0x2b8>)
 80081c0:	2384      	movs	r3, #132	@ 0x84
 80081c2:	58d3      	ldr	r3, [r2, r3]
 80081c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	43da      	mvns	r2, r3
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	4013      	ands	r3, r2
 80081ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	2380      	movs	r3, #128	@ 0x80
 80081d6:	029b      	lsls	r3, r3, #10
 80081d8:	4013      	ands	r3, r2
 80081da:	d003      	beq.n	80081e4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80081e4:	4914      	ldr	r1, [pc, #80]	@ (8008238 <HAL_GPIO_Init+0x2b8>)
 80081e6:	2284      	movs	r2, #132	@ 0x84
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80081ec:	4a12      	ldr	r2, [pc, #72]	@ (8008238 <HAL_GPIO_Init+0x2b8>)
 80081ee:	2380      	movs	r3, #128	@ 0x80
 80081f0:	58d3      	ldr	r3, [r2, r3]
 80081f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	43da      	mvns	r2, r3
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	4013      	ands	r3, r2
 80081fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	685a      	ldr	r2, [r3, #4]
 8008202:	2380      	movs	r3, #128	@ 0x80
 8008204:	025b      	lsls	r3, r3, #9
 8008206:	4013      	ands	r3, r2
 8008208:	d003      	beq.n	8008212 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	4313      	orrs	r3, r2
 8008210:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008212:	4909      	ldr	r1, [pc, #36]	@ (8008238 <HAL_GPIO_Init+0x2b8>)
 8008214:	2280      	movs	r2, #128	@ 0x80
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	3301      	adds	r3, #1
 800821e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	40da      	lsrs	r2, r3
 8008228:	1e13      	subs	r3, r2, #0
 800822a:	d000      	beq.n	800822e <HAL_GPIO_Init+0x2ae>
 800822c:	e6b0      	b.n	8007f90 <HAL_GPIO_Init+0x10>
  }
}
 800822e:	46c0      	nop			@ (mov r8, r8)
 8008230:	46c0      	nop			@ (mov r8, r8)
 8008232:	46bd      	mov	sp, r7
 8008234:	b006      	add	sp, #24
 8008236:	bd80      	pop	{r7, pc}
 8008238:	40021800 	.word	0x40021800
 800823c:	50000400 	.word	0x50000400
 8008240:	50000800 	.word	0x50000800
 8008244:	50000c00 	.word	0x50000c00

08008248 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	000a      	movs	r2, r1
 8008252:	1cbb      	adds	r3, r7, #2
 8008254:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	1cba      	adds	r2, r7, #2
 800825c:	8812      	ldrh	r2, [r2, #0]
 800825e:	4013      	ands	r3, r2
 8008260:	d004      	beq.n	800826c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8008262:	230f      	movs	r3, #15
 8008264:	18fb      	adds	r3, r7, r3
 8008266:	2201      	movs	r2, #1
 8008268:	701a      	strb	r2, [r3, #0]
 800826a:	e003      	b.n	8008274 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800826c:	230f      	movs	r3, #15
 800826e:	18fb      	adds	r3, r7, r3
 8008270:	2200      	movs	r2, #0
 8008272:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8008274:	230f      	movs	r3, #15
 8008276:	18fb      	adds	r3, r7, r3
 8008278:	781b      	ldrb	r3, [r3, #0]
}
 800827a:	0018      	movs	r0, r3
 800827c:	46bd      	mov	sp, r7
 800827e:	b004      	add	sp, #16
 8008280:	bd80      	pop	{r7, pc}

08008282 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b082      	sub	sp, #8
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	0008      	movs	r0, r1
 800828c:	0011      	movs	r1, r2
 800828e:	1cbb      	adds	r3, r7, #2
 8008290:	1c02      	adds	r2, r0, #0
 8008292:	801a      	strh	r2, [r3, #0]
 8008294:	1c7b      	adds	r3, r7, #1
 8008296:	1c0a      	adds	r2, r1, #0
 8008298:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800829a:	1c7b      	adds	r3, r7, #1
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d004      	beq.n	80082ac <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80082a2:	1cbb      	adds	r3, r7, #2
 80082a4:	881a      	ldrh	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80082aa:	e003      	b.n	80082b4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80082ac:	1cbb      	adds	r3, r7, #2
 80082ae:	881a      	ldrh	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80082b4:	46c0      	nop			@ (mov r8, r8)
 80082b6:	46bd      	mov	sp, r7
 80082b8:	b002      	add	sp, #8
 80082ba:	bd80      	pop	{r7, pc}

080082bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	0002      	movs	r2, r0
 80082c4:	1dbb      	adds	r3, r7, #6
 80082c6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80082c8:	4b10      	ldr	r3, [pc, #64]	@ (800830c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	1dba      	adds	r2, r7, #6
 80082ce:	8812      	ldrh	r2, [r2, #0]
 80082d0:	4013      	ands	r3, r2
 80082d2:	d008      	beq.n	80082e6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80082d4:	4b0d      	ldr	r3, [pc, #52]	@ (800830c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80082d6:	1dba      	adds	r2, r7, #6
 80082d8:	8812      	ldrh	r2, [r2, #0]
 80082da:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80082dc:	1dbb      	adds	r3, r7, #6
 80082de:	881b      	ldrh	r3, [r3, #0]
 80082e0:	0018      	movs	r0, r3
 80082e2:	f7fb fb89 	bl	80039f8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80082e6:	4b09      	ldr	r3, [pc, #36]	@ (800830c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	1dba      	adds	r2, r7, #6
 80082ec:	8812      	ldrh	r2, [r2, #0]
 80082ee:	4013      	ands	r3, r2
 80082f0:	d008      	beq.n	8008304 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80082f2:	4b06      	ldr	r3, [pc, #24]	@ (800830c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80082f4:	1dba      	adds	r2, r7, #6
 80082f6:	8812      	ldrh	r2, [r2, #0]
 80082f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80082fa:	1dbb      	adds	r3, r7, #6
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	0018      	movs	r0, r3
 8008300:	f7fb fb50 	bl	80039a4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8008304:	46c0      	nop			@ (mov r8, r8)
 8008306:	46bd      	mov	sp, r7
 8008308:	b002      	add	sp, #8
 800830a:	bd80      	pop	{r7, pc}
 800830c:	40021800 	.word	0x40021800

08008310 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d101      	bne.n	8008322 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e097      	b.n	8008452 <HAL_LPTIM_Init+0x142>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2236      	movs	r2, #54	@ 0x36
 8008326:	5c9b      	ldrb	r3, [r3, r2]
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	d113      	bne.n	8008356 <HAL_LPTIM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2235      	movs	r2, #53	@ 0x35
 8008332:	2100      	movs	r1, #0
 8008334:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    LPTIM_ResetCallback(hlptim);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	0018      	movs	r0, r3
 800833a:	f000 fa8f 	bl	800885c <LPTIM_ResetCallback>

    if (hlptim->MspInitCallback == NULL)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008342:	2b00      	cmp	r3, #0
 8008344:	d102      	bne.n	800834c <HAL_LPTIM_Init+0x3c>
    {
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a44      	ldr	r2, [pc, #272]	@ (800845c <HAL_LPTIM_Init+0x14c>)
 800834a:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	0010      	movs	r0, r2
 8008354:	4798      	blx	r3
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2236      	movs	r2, #54	@ 0x36
 800835a:	2102      	movs	r1, #2
 800835c:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d005      	beq.n	800837a <HAL_LPTIM_Init+0x6a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008372:	2380      	movs	r3, #128	@ 0x80
 8008374:	041b      	lsls	r3, r3, #16
 8008376:	429a      	cmp	r2, r3
 8008378:	d103      	bne.n	8008382 <HAL_LPTIM_Init+0x72>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	221e      	movs	r2, #30
 800837e:	4393      	bics	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	695b      	ldr	r3, [r3, #20]
 8008386:	4a36      	ldr	r2, [pc, #216]	@ (8008460 <HAL_LPTIM_Init+0x150>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d003      	beq.n	8008394 <HAL_LPTIM_Init+0x84>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	4a35      	ldr	r2, [pc, #212]	@ (8008464 <HAL_LPTIM_Init+0x154>)
 8008390:	4013      	ands	r3, r2
 8008392:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4a34      	ldr	r2, [pc, #208]	@ (8008468 <HAL_LPTIM_Init+0x158>)
 8008398:	4013      	ands	r3, r2
 800839a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80083a4:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80083aa:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 80083b0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 80083b6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d107      	bne.n	80083d6 <HAL_LPTIM_Init+0xc6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80083ce:	4313      	orrs	r3, r2
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d005      	beq.n	80083ea <HAL_LPTIM_Init+0xda>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80083e2:	2380      	movs	r3, #128	@ 0x80
 80083e4:	041b      	lsls	r3, r3, #16
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d107      	bne.n	80083fa <HAL_LPTIM_Init+0xea>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80083f2:	4313      	orrs	r3, r2
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	4a18      	ldr	r2, [pc, #96]	@ (8008460 <HAL_LPTIM_Init+0x150>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d00a      	beq.n	800841a <HAL_LPTIM_Init+0x10a>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800840c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8008412:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	4313      	orrs	r3, r2
 8008418:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a11      	ldr	r2, [pc, #68]	@ (800846c <HAL_LPTIM_Init+0x15c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d108      	bne.n	800843e <HAL_LPTIM_Init+0x12e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	430a      	orrs	r2, r1
 800843a:	625a      	str	r2, [r3, #36]	@ 0x24
 800843c:	e004      	b.n	8008448 <HAL_LPTIM_Init+0x138>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008446:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2236      	movs	r2, #54	@ 0x36
 800844c:	2101      	movs	r1, #1
 800844e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	0018      	movs	r0, r3
 8008454:	46bd      	mov	sp, r7
 8008456:	b004      	add	sp, #16
 8008458:	bd80      	pop	{r7, pc}
 800845a:	46c0      	nop			@ (mov r8, r8)
 800845c:	08005115 	.word	0x08005115
 8008460:	0000ffff 	.word	0x0000ffff
 8008464:	ffff1f3f 	.word	0xffff1f3f
 8008468:	ff19f1fe 	.word	0xff19f1fe
 800846c:	40007c00 	.word	0x40007c00

08008470 <HAL_LPTIM_SetOnce_Start_IT>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_SetOnce_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2236      	movs	r2, #54	@ 0x36
 8008480:	2102      	movs	r1, #2
 8008482:	5499      	strb	r1, [r3, r2]

  /* Set WAVE bit to enable the set once mode */
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68da      	ldr	r2, [r3, #12]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2180      	movs	r1, #128	@ 0x80
 8008490:	0349      	lsls	r1, r1, #13
 8008492:	430a      	orrs	r2, r1
 8008494:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	691a      	ldr	r2, [r3, #16]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2101      	movs	r1, #1
 80084a2:	430a      	orrs	r2, r1
 80084a4:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2210      	movs	r2, #16
 80084ac:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2110      	movs	r1, #16
 80084ba:	0018      	movs	r0, r3
 80084bc:	f000 f9fa 	bl	80088b4 <LPTIM_WaitForFlag>
 80084c0:	0003      	movs	r3, r0
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d101      	bne.n	80084ca <HAL_LPTIM_SetOnce_Start_IT+0x5a>
  {
    return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e060      	b.n	800858c <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2208      	movs	r2, #8
 80084d0:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2108      	movs	r1, #8
 80084de:	0018      	movs	r0, r3
 80084e0:	f000 f9e8 	bl	80088b4 <LPTIM_WaitForFlag>
 80084e4:	0003      	movs	r3, r0
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	d101      	bne.n	80084ee <HAL_LPTIM_SetOnce_Start_IT+0x7e>
  {
    return HAL_TIMEOUT;
 80084ea:	2303      	movs	r3, #3
 80084ec:	e04e      	b.n	800858c <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	0018      	movs	r0, r3
 80084f2:	f000 fa17 	bl	8008924 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	0018      	movs	r0, r3
 80084fa:	f000 f9a3 	bl	8008844 <HAL_LPTIM_GetState>
 80084fe:	0003      	movs	r3, r0
 8008500:	2b03      	cmp	r3, #3
 8008502:	d101      	bne.n	8008508 <HAL_LPTIM_SetOnce_Start_IT+0x98>
  {
    return HAL_TIMEOUT;
 8008504:	2303      	movs	r3, #3
 8008506:	e041      	b.n	800858c <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	689a      	ldr	r2, [r3, #8]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2110      	movs	r1, #16
 8008514:	430a      	orrs	r2, r1
 8008516:	609a      	str	r2, [r3, #8]

  /* Enable Compare write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	689a      	ldr	r2, [r3, #8]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2108      	movs	r1, #8
 8008524:	430a      	orrs	r2, r1
 8008526:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	689a      	ldr	r2, [r3, #8]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2102      	movs	r1, #2
 8008534:	430a      	orrs	r2, r1
 8008536:	609a      	str	r2, [r3, #8]

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	689a      	ldr	r2, [r3, #8]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2101      	movs	r1, #1
 8008544:	430a      	orrs	r2, r1
 8008546:	609a      	str	r2, [r3, #8]

  /* If external trigger source is used, then enable external trigger interrupt */
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	695b      	ldr	r3, [r3, #20]
 800854c:	4a11      	ldr	r2, [pc, #68]	@ (8008594 <HAL_LPTIM_SetOnce_Start_IT+0x124>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d007      	beq.n	8008562 <HAL_LPTIM_SetOnce_Start_IT+0xf2>
  {
    /* Enable external trigger interrupt */
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2104      	movs	r1, #4
 800855e:	430a      	orrs	r2, r1
 8008560:	609a      	str	r2, [r3, #8]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	691a      	ldr	r2, [r3, #16]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2101      	movs	r1, #1
 800856e:	430a      	orrs	r2, r1
 8008570:	611a      	str	r2, [r3, #16]

  /* Start timer in single (one shot) mode */
  __HAL_LPTIM_START_SINGLE(hlptim);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	691a      	ldr	r2, [r3, #16]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2102      	movs	r1, #2
 800857e:	430a      	orrs	r2, r1
 8008580:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2236      	movs	r2, #54	@ 0x36
 8008586:	2101      	movs	r1, #1
 8008588:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	0018      	movs	r0, r3
 800858e:	46bd      	mov	sp, r7
 8008590:	b004      	add	sp, #16
 8008592:	bd80      	pop	{r7, pc}
 8008594:	0000ffff 	.word	0x0000ffff

08008598 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2201      	movs	r2, #1
 80085a8:	4013      	ands	r3, r2
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d10f      	bne.n	80085ce <HAL_LPTIM_IRQHandler+0x36>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	2201      	movs	r2, #1
 80085b6:	4013      	ands	r3, r2
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d108      	bne.n	80085ce <HAL_LPTIM_IRQHandler+0x36>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2201      	movs	r2, #1
 80085c2:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	0010      	movs	r0, r2
 80085cc:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2202      	movs	r2, #2
 80085d6:	4013      	ands	r3, r2
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d10f      	bne.n	80085fc <HAL_LPTIM_IRQHandler+0x64>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	2202      	movs	r2, #2
 80085e4:	4013      	ands	r3, r2
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d108      	bne.n	80085fc <HAL_LPTIM_IRQHandler+0x64>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2202      	movs	r2, #2
 80085f0:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	0010      	movs	r0, r2
 80085fa:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2204      	movs	r2, #4
 8008604:	4013      	ands	r3, r2
 8008606:	2b04      	cmp	r3, #4
 8008608:	d10f      	bne.n	800862a <HAL_LPTIM_IRQHandler+0x92>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	2204      	movs	r2, #4
 8008612:	4013      	ands	r3, r2
 8008614:	2b04      	cmp	r3, #4
 8008616:	d108      	bne.n	800862a <HAL_LPTIM_IRQHandler+0x92>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2204      	movs	r2, #4
 800861e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	0010      	movs	r0, r2
 8008628:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2208      	movs	r2, #8
 8008632:	4013      	ands	r3, r2
 8008634:	2b08      	cmp	r3, #8
 8008636:	d10f      	bne.n	8008658 <HAL_LPTIM_IRQHandler+0xc0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	2208      	movs	r2, #8
 8008640:	4013      	ands	r3, r2
 8008642:	2b08      	cmp	r3, #8
 8008644:	d108      	bne.n	8008658 <HAL_LPTIM_IRQHandler+0xc0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2208      	movs	r2, #8
 800864c:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	0010      	movs	r0, r2
 8008656:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2210      	movs	r2, #16
 8008660:	4013      	ands	r3, r2
 8008662:	2b10      	cmp	r3, #16
 8008664:	d10f      	bne.n	8008686 <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	2210      	movs	r2, #16
 800866e:	4013      	ands	r3, r2
 8008670:	2b10      	cmp	r3, #16
 8008672:	d108      	bne.n	8008686 <HAL_LPTIM_IRQHandler+0xee>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2210      	movs	r2, #16
 800867a:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	0010      	movs	r0, r2
 8008684:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2220      	movs	r2, #32
 800868e:	4013      	ands	r3, r2
 8008690:	2b20      	cmp	r3, #32
 8008692:	d10f      	bne.n	80086b4 <HAL_LPTIM_IRQHandler+0x11c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	2220      	movs	r2, #32
 800869c:	4013      	ands	r3, r2
 800869e:	2b20      	cmp	r3, #32
 80086a0:	d108      	bne.n	80086b4 <HAL_LPTIM_IRQHandler+0x11c>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2220      	movs	r2, #32
 80086a8:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	0010      	movs	r0, r2
 80086b2:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2240      	movs	r2, #64	@ 0x40
 80086bc:	4013      	ands	r3, r2
 80086be:	2b40      	cmp	r3, #64	@ 0x40
 80086c0:	d10f      	bne.n	80086e2 <HAL_LPTIM_IRQHandler+0x14a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	2240      	movs	r2, #64	@ 0x40
 80086ca:	4013      	ands	r3, r2
 80086cc:	2b40      	cmp	r3, #64	@ 0x40
 80086ce:	d108      	bne.n	80086e2 <HAL_LPTIM_IRQHandler+0x14a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2240      	movs	r2, #64	@ 0x40
 80086d6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	0010      	movs	r0, r2
 80086e0:	4798      	blx	r3
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80086e2:	46c0      	nop			@ (mov r8, r8)
 80086e4:	46bd      	mov	sp, r7
 80086e6:	b002      	add	sp, #8
 80086e8:	bd80      	pop	{r7, pc}

080086ea <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b082      	sub	sp, #8
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80086f2:	46c0      	nop			@ (mov r8, r8)
 80086f4:	46bd      	mov	sp, r7
 80086f6:	b002      	add	sp, #8
 80086f8:	bd80      	pop	{r7, pc}

080086fa <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b082      	sub	sp, #8
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8008702:	46c0      	nop			@ (mov r8, r8)
 8008704:	46bd      	mov	sp, r7
 8008706:	b002      	add	sp, #8
 8008708:	bd80      	pop	{r7, pc}

0800870a <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b082      	sub	sp, #8
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8008712:	46c0      	nop			@ (mov r8, r8)
 8008714:	46bd      	mov	sp, r7
 8008716:	b002      	add	sp, #8
 8008718:	bd80      	pop	{r7, pc}

0800871a <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b082      	sub	sp, #8
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8008722:	46c0      	nop			@ (mov r8, r8)
 8008724:	46bd      	mov	sp, r7
 8008726:	b002      	add	sp, #8
 8008728:	bd80      	pop	{r7, pc}

0800872a <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b082      	sub	sp, #8
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8008732:	46c0      	nop			@ (mov r8, r8)
 8008734:	46bd      	mov	sp, r7
 8008736:	b002      	add	sp, #8
 8008738:	bd80      	pop	{r7, pc}

0800873a <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b082      	sub	sp, #8
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8008742:	46c0      	nop			@ (mov r8, r8)
 8008744:	46bd      	mov	sp, r7
 8008746:	b002      	add	sp, #8
 8008748:	bd80      	pop	{r7, pc}

0800874a <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8008752:	46c0      	nop			@ (mov r8, r8)
 8008754:	46bd      	mov	sp, r7
 8008756:	b002      	add	sp, #8
 8008758:	bd80      	pop	{r7, pc}
	...

0800875c <HAL_LPTIM_RegisterCallback>:
  * @retval status
  */
HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef        *hlptim,
                                             HAL_LPTIM_CallbackIDTypeDef CallbackID,
                                             pLPTIM_CallbackTypeDef      pCallback)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b086      	sub	sp, #24
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	607a      	str	r2, [r7, #4]
 8008766:	230b      	movs	r3, #11
 8008768:	18fb      	adds	r3, r7, r3
 800876a:	1c0a      	adds	r2, r1, #0
 800876c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800876e:	2317      	movs	r3, #23
 8008770:	18fb      	adds	r3, r7, r3
 8008772:	2200      	movs	r2, #0
 8008774:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d101      	bne.n	8008780 <HAL_LPTIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e05a      	b.n	8008836 <HAL_LPTIM_RegisterCallback+0xda>
  }

  if (hlptim->State == HAL_LPTIM_STATE_READY)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2236      	movs	r2, #54	@ 0x36
 8008784:	5c9b      	ldrb	r3, [r3, r2]
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b01      	cmp	r3, #1
 800878a:	d132      	bne.n	80087f2 <HAL_LPTIM_RegisterCallback+0x96>
  {
    switch (CallbackID)
 800878c:	230b      	movs	r3, #11
 800878e:	18fb      	adds	r3, r7, r3
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	2b08      	cmp	r3, #8
 8008794:	d828      	bhi.n	80087e8 <HAL_LPTIM_RegisterCallback+0x8c>
 8008796:	009a      	lsls	r2, r3, #2
 8008798:	4b29      	ldr	r3, [pc, #164]	@ (8008840 <HAL_LPTIM_RegisterCallback+0xe4>)
 800879a:	18d3      	adds	r3, r2, r3
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	469f      	mov	pc, r3
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80087a6:	e043      	b.n	8008830 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 80087ae:	e03f      	b.n	8008830 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_MATCH_CB_ID :
        hlptim->CompareMatchCallback = pCallback;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 80087b6:	e03b      	b.n	8008830 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_MATCH_CB_ID :
        hlptim->AutoReloadMatchCallback = pCallback;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 80087be:	e037      	b.n	8008830 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_TRIGGER_CB_ID :
        hlptim->TriggerCallback = pCallback;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 80087c6:	e033      	b.n	8008830 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_WRITE_CB_ID :
        hlptim->CompareWriteCallback = pCallback;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80087ce:	e02f      	b.n	8008830 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_WRITE_CB_ID :
        hlptim->AutoReloadWriteCallback = pCallback;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80087d6:	e02b      	b.n	8008830 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_UP_CB_ID :
        hlptim->DirectionUpCallback = pCallback;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80087de:	e027      	b.n	8008830 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
        hlptim->DirectionDownCallback = pCallback;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80087e6:	e023      	b.n	8008830 <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 80087e8:	2317      	movs	r3, #23
 80087ea:	18fb      	adds	r3, r7, r3
 80087ec:	2201      	movs	r2, #1
 80087ee:	701a      	strb	r2, [r3, #0]
        break;
 80087f0:	e01e      	b.n	8008830 <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2236      	movs	r2, #54	@ 0x36
 80087f6:	5c9b      	ldrb	r3, [r3, r2]
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d114      	bne.n	8008828 <HAL_LPTIM_RegisterCallback+0xcc>
  {
    switch (CallbackID)
 80087fe:	230b      	movs	r3, #11
 8008800:	18fb      	adds	r3, r7, r3
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <HAL_LPTIM_RegisterCallback+0xb2>
 8008808:	2b01      	cmp	r3, #1
 800880a:	d004      	beq.n	8008816 <HAL_LPTIM_RegisterCallback+0xba>
 800880c:	e007      	b.n	800881e <HAL_LPTIM_RegisterCallback+0xc2>
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8008814:	e00c      	b.n	8008830 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 800881c:	e008      	b.n	8008830 <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 800881e:	2317      	movs	r3, #23
 8008820:	18fb      	adds	r3, r7, r3
 8008822:	2201      	movs	r2, #1
 8008824:	701a      	strb	r2, [r3, #0]
        break;
 8008826:	e003      	b.n	8008830 <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8008828:	2317      	movs	r3, #23
 800882a:	18fb      	adds	r3, r7, r3
 800882c:	2201      	movs	r2, #1
 800882e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8008830:	2317      	movs	r3, #23
 8008832:	18fb      	adds	r3, r7, r3
 8008834:	781b      	ldrb	r3, [r3, #0]
}
 8008836:	0018      	movs	r0, r3
 8008838:	46bd      	mov	sp, r7
 800883a:	b006      	add	sp, #24
 800883c:	bd80      	pop	{r7, pc}
 800883e:	46c0      	nop			@ (mov r8, r8)
 8008840:	0800dea0 	.word	0x0800dea0

08008844 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2236      	movs	r2, #54	@ 0x36
 8008850:	5c9b      	ldrb	r3, [r3, r2]
 8008852:	b2db      	uxtb	r3, r3
}
 8008854:	0018      	movs	r0, r3
 8008856:	46bd      	mov	sp, r7
 8008858:	b002      	add	sp, #8
 800885a:	bd80      	pop	{r7, pc}

0800885c <LPTIM_ResetCallback>:
  * @param  lptim pointer to a LPTIM_HandleTypeDef structure that contains
  *                the configuration information for LPTIM module.
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a0c      	ldr	r2, [pc, #48]	@ (8008898 <LPTIM_ResetCallback+0x3c>)
 8008868:	641a      	str	r2, [r3, #64]	@ 0x40
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a0b      	ldr	r2, [pc, #44]	@ (800889c <LPTIM_ResetCallback+0x40>)
 800886e:	645a      	str	r2, [r3, #68]	@ 0x44
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a0b      	ldr	r2, [pc, #44]	@ (80088a0 <LPTIM_ResetCallback+0x44>)
 8008874:	649a      	str	r2, [r3, #72]	@ 0x48
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a0a      	ldr	r2, [pc, #40]	@ (80088a4 <LPTIM_ResetCallback+0x48>)
 800887a:	64da      	str	r2, [r3, #76]	@ 0x4c
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a0a      	ldr	r2, [pc, #40]	@ (80088a8 <LPTIM_ResetCallback+0x4c>)
 8008880:	651a      	str	r2, [r3, #80]	@ 0x50
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a09      	ldr	r2, [pc, #36]	@ (80088ac <LPTIM_ResetCallback+0x50>)
 8008886:	655a      	str	r2, [r3, #84]	@ 0x54
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a09      	ldr	r2, [pc, #36]	@ (80088b0 <LPTIM_ResetCallback+0x54>)
 800888c:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800888e:	46c0      	nop			@ (mov r8, r8)
 8008890:	46bd      	mov	sp, r7
 8008892:	b002      	add	sp, #8
 8008894:	bd80      	pop	{r7, pc}
 8008896:	46c0      	nop			@ (mov r8, r8)
 8008898:	080086eb 	.word	0x080086eb
 800889c:	080086fb 	.word	0x080086fb
 80088a0:	0800870b 	.word	0x0800870b
 80088a4:	0800871b 	.word	0x0800871b
 80088a8:	0800872b 	.word	0x0800872b
 80088ac:	0800873b 	.word	0x0800873b
 80088b0:	0800874b 	.word	0x0800874b

080088b4 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80088be:	230f      	movs	r3, #15
 80088c0:	18fb      	adds	r3, r7, r3
 80088c2:	2200      	movs	r2, #0
 80088c4:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80088c6:	4b15      	ldr	r3, [pc, #84]	@ (800891c <LPTIM_WaitForFlag+0x68>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4915      	ldr	r1, [pc, #84]	@ (8008920 <LPTIM_WaitForFlag+0x6c>)
 80088cc:	0018      	movs	r0, r3
 80088ce:	f7f7 fc19 	bl	8000104 <__udivsi3>
 80088d2:	0003      	movs	r3, r0
 80088d4:	001a      	movs	r2, r3
 80088d6:	0013      	movs	r3, r2
 80088d8:	015b      	lsls	r3, r3, #5
 80088da:	1a9b      	subs	r3, r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	189b      	adds	r3, r3, r2
 80088e0:	00db      	lsls	r3, r3, #3
 80088e2:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	3b01      	subs	r3, #1
 80088e8:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d103      	bne.n	80088f8 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 80088f0:	230f      	movs	r3, #15
 80088f2:	18fb      	adds	r3, r7, r3
 80088f4:	2203      	movs	r2, #3
 80088f6:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	4013      	ands	r3, r2
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	429a      	cmp	r2, r3
 8008906:	d002      	beq.n	800890e <LPTIM_WaitForFlag+0x5a>
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1ea      	bne.n	80088e4 <LPTIM_WaitForFlag+0x30>

  return result;
 800890e:	230f      	movs	r3, #15
 8008910:	18fb      	adds	r3, r7, r3
 8008912:	781b      	ldrb	r3, [r3, #0]
}
 8008914:	0018      	movs	r0, r3
 8008916:	46bd      	mov	sp, r7
 8008918:	b004      	add	sp, #16
 800891a:	bd80      	pop	{r7, pc}
 800891c:	2000044c 	.word	0x2000044c
 8008920:	00004e20 	.word	0x00004e20

08008924 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b08c      	sub	sp, #48	@ 0x30
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 800892c:	2300      	movs	r3, #0
 800892e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008930:	f3ef 8310 	mrs	r3, PRIMASK
 8008934:	60fb      	str	r3, [r7, #12]
  return(result);
 8008936:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8008938:	62bb      	str	r3, [r7, #40]	@ 0x28
 800893a:	2301      	movs	r3, #1
 800893c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	f383 8810 	msr	PRIMASK, r3
}
 8008944:	46c0      	nop			@ (mov r8, r8)
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a72      	ldr	r2, [pc, #456]	@ (8008b14 <LPTIM_Disable+0x1f0>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d003      	beq.n	8008958 <LPTIM_Disable+0x34>
 8008950:	4a71      	ldr	r2, [pc, #452]	@ (8008b18 <LPTIM_Disable+0x1f4>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d007      	beq.n	8008966 <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8008956:	e00d      	b.n	8008974 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008958:	4b70      	ldr	r3, [pc, #448]	@ (8008b1c <LPTIM_Disable+0x1f8>)
 800895a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800895c:	23c0      	movs	r3, #192	@ 0xc0
 800895e:	031b      	lsls	r3, r3, #12
 8008960:	4013      	ands	r3, r2
 8008962:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8008964:	e006      	b.n	8008974 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008966:	4b6d      	ldr	r3, [pc, #436]	@ (8008b1c <LPTIM_Disable+0x1f8>)
 8008968:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800896a:	23c0      	movs	r3, #192	@ 0xc0
 800896c:	039b      	lsls	r3, r3, #14
 800896e:	4013      	ands	r3, r2
 8008970:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8008972:	46c0      	nop			@ (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800899a:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a5c      	ldr	r2, [pc, #368]	@ (8008b14 <LPTIM_Disable+0x1f0>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d003      	beq.n	80089ae <LPTIM_Disable+0x8a>
 80089a6:	4a5c      	ldr	r2, [pc, #368]	@ (8008b18 <LPTIM_Disable+0x1f4>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d00e      	beq.n	80089ca <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 80089ac:	e01b      	b.n	80089e6 <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80089ae:	4b5b      	ldr	r3, [pc, #364]	@ (8008b1c <LPTIM_Disable+0x1f8>)
 80089b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089b2:	4b5a      	ldr	r3, [pc, #360]	@ (8008b1c <LPTIM_Disable+0x1f8>)
 80089b4:	2180      	movs	r1, #128	@ 0x80
 80089b6:	0609      	lsls	r1, r1, #24
 80089b8:	430a      	orrs	r2, r1
 80089ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80089bc:	4b57      	ldr	r3, [pc, #348]	@ (8008b1c <LPTIM_Disable+0x1f8>)
 80089be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089c0:	4b56      	ldr	r3, [pc, #344]	@ (8008b1c <LPTIM_Disable+0x1f8>)
 80089c2:	0052      	lsls	r2, r2, #1
 80089c4:	0852      	lsrs	r2, r2, #1
 80089c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 80089c8:	e00d      	b.n	80089e6 <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80089ca:	4b54      	ldr	r3, [pc, #336]	@ (8008b1c <LPTIM_Disable+0x1f8>)
 80089cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ce:	4b53      	ldr	r3, [pc, #332]	@ (8008b1c <LPTIM_Disable+0x1f8>)
 80089d0:	2180      	movs	r1, #128	@ 0x80
 80089d2:	05c9      	lsls	r1, r1, #23
 80089d4:	430a      	orrs	r2, r1
 80089d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80089d8:	4b50      	ldr	r3, [pc, #320]	@ (8008b1c <LPTIM_Disable+0x1f8>)
 80089da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089dc:	4b4f      	ldr	r3, [pc, #316]	@ (8008b1c <LPTIM_Disable+0x1f8>)
 80089de:	4950      	ldr	r1, [pc, #320]	@ (8008b20 <LPTIM_Disable+0x1fc>)
 80089e0:	400a      	ands	r2, r1
 80089e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 80089e4:	46c0      	nop			@ (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d103      	bne.n	80089f4 <LPTIM_Disable+0xd0>
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d100      	bne.n	80089f4 <LPTIM_Disable+0xd0>
 80089f2:	e071      	b.n	8008ad8 <LPTIM_Disable+0x1b4>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a46      	ldr	r2, [pc, #280]	@ (8008b14 <LPTIM_Disable+0x1f0>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d003      	beq.n	8008a06 <LPTIM_Disable+0xe2>
 80089fe:	4a46      	ldr	r2, [pc, #280]	@ (8008b18 <LPTIM_Disable+0x1f4>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d007      	beq.n	8008a14 <LPTIM_Disable+0xf0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8008a04:	e00d      	b.n	8008a22 <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8008a06:	4b45      	ldr	r3, [pc, #276]	@ (8008b1c <LPTIM_Disable+0x1f8>)
 8008a08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008a0a:	4b44      	ldr	r3, [pc, #272]	@ (8008b1c <LPTIM_Disable+0x1f8>)
 8008a0c:	4945      	ldr	r1, [pc, #276]	@ (8008b24 <LPTIM_Disable+0x200>)
 8008a0e:	400a      	ands	r2, r1
 8008a10:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008a12:	e006      	b.n	8008a22 <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8008a14:	4b41      	ldr	r3, [pc, #260]	@ (8008b1c <LPTIM_Disable+0x1f8>)
 8008a16:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008a18:	4b40      	ldr	r3, [pc, #256]	@ (8008b1c <LPTIM_Disable+0x1f8>)
 8008a1a:	4943      	ldr	r1, [pc, #268]	@ (8008b28 <LPTIM_Disable+0x204>)
 8008a1c:	400a      	ands	r2, r1
 8008a1e:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008a20:	46c0      	nop			@ (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d01b      	beq.n	8008a60 <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	691a      	ldr	r2, [r3, #16]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2101      	movs	r1, #1
 8008a34:	430a      	orrs	r2, r1
 8008a36:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	69fa      	ldr	r2, [r7, #28]
 8008a3e:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2108      	movs	r1, #8
 8008a44:	0018      	movs	r0, r3
 8008a46:	f7ff ff35 	bl	80088b4 <LPTIM_WaitForFlag>
 8008a4a:	0003      	movs	r3, r0
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d103      	bne.n	8008a58 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2236      	movs	r2, #54	@ 0x36
 8008a54:	2103      	movs	r1, #3
 8008a56:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2208      	movs	r2, #8
 8008a5e:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d01b      	beq.n	8008a9e <LPTIM_Disable+0x17a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	691a      	ldr	r2, [r3, #16]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2101      	movs	r1, #1
 8008a72:	430a      	orrs	r2, r1
 8008a74:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	69ba      	ldr	r2, [r7, #24]
 8008a7c:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2110      	movs	r1, #16
 8008a82:	0018      	movs	r0, r3
 8008a84:	f7ff ff16 	bl	80088b4 <LPTIM_WaitForFlag>
 8008a88:	0003      	movs	r3, r0
 8008a8a:	2b03      	cmp	r3, #3
 8008a8c:	d103      	bne.n	8008a96 <LPTIM_Disable+0x172>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2236      	movs	r2, #54	@ 0x36
 8008a92:	2103      	movs	r1, #3
 8008a94:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2210      	movs	r2, #16
 8008a9c:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8008b14 <LPTIM_Disable+0x1f0>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d003      	beq.n	8008ab0 <LPTIM_Disable+0x18c>
 8008aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8008b18 <LPTIM_Disable+0x1f4>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d00a      	beq.n	8008ac4 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8008aae:	e013      	b.n	8008ad8 <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8008ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8008b1c <LPTIM_Disable+0x1f8>)
 8008ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8008b24 <LPTIM_Disable+0x200>)
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	0019      	movs	r1, r3
 8008aba:	4b18      	ldr	r3, [pc, #96]	@ (8008b1c <LPTIM_Disable+0x1f8>)
 8008abc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008abe:	430a      	orrs	r2, r1
 8008ac0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008ac2:	e009      	b.n	8008ad8 <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8008ac4:	4b15      	ldr	r3, [pc, #84]	@ (8008b1c <LPTIM_Disable+0x1f8>)
 8008ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ac8:	4a17      	ldr	r2, [pc, #92]	@ (8008b28 <LPTIM_Disable+0x204>)
 8008aca:	4013      	ands	r3, r2
 8008acc:	0019      	movs	r1, r3
 8008ace:	4b13      	ldr	r3, [pc, #76]	@ (8008b1c <LPTIM_Disable+0x1f8>)
 8008ad0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008ad6:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	691a      	ldr	r2, [r3, #16]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2101      	movs	r1, #1
 8008ae4:	438a      	bics	r2, r1
 8008ae6:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008aee:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6a3a      	ldr	r2, [r7, #32]
 8008af6:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	625a      	str	r2, [r3, #36]	@ 0x24
 8008b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b02:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	f383 8810 	msr	PRIMASK, r3
}
 8008b0a:	46c0      	nop			@ (mov r8, r8)

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8008b0c:	46c0      	nop			@ (mov r8, r8)
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	b00c      	add	sp, #48	@ 0x30
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	40007c00 	.word	0x40007c00
 8008b18:	40009400 	.word	0x40009400
 8008b1c:	40021000 	.word	0x40021000
 8008b20:	bfffffff 	.word	0xbfffffff
 8008b24:	fff3ffff 	.word	0xfff3ffff
 8008b28:	ffcfffff 	.word	0xffcfffff

08008b2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008b34:	4b19      	ldr	r3, [pc, #100]	@ (8008b9c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a19      	ldr	r2, [pc, #100]	@ (8008ba0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	0019      	movs	r1, r3
 8008b3e:	4b17      	ldr	r3, [pc, #92]	@ (8008b9c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	430a      	orrs	r2, r1
 8008b44:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	2380      	movs	r3, #128	@ 0x80
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d11f      	bne.n	8008b90 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8008b50:	4b14      	ldr	r3, [pc, #80]	@ (8008ba4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	0013      	movs	r3, r2
 8008b56:	005b      	lsls	r3, r3, #1
 8008b58:	189b      	adds	r3, r3, r2
 8008b5a:	005b      	lsls	r3, r3, #1
 8008b5c:	4912      	ldr	r1, [pc, #72]	@ (8008ba8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8008b5e:	0018      	movs	r0, r3
 8008b60:	f7f7 fad0 	bl	8000104 <__udivsi3>
 8008b64:	0003      	movs	r3, r0
 8008b66:	3301      	adds	r3, #1
 8008b68:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008b6a:	e008      	b.n	8008b7e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	3b01      	subs	r3, #1
 8008b76:	60fb      	str	r3, [r7, #12]
 8008b78:	e001      	b.n	8008b7e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e009      	b.n	8008b92 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008b7e:	4b07      	ldr	r3, [pc, #28]	@ (8008b9c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008b80:	695a      	ldr	r2, [r3, #20]
 8008b82:	2380      	movs	r3, #128	@ 0x80
 8008b84:	00db      	lsls	r3, r3, #3
 8008b86:	401a      	ands	r2, r3
 8008b88:	2380      	movs	r3, #128	@ 0x80
 8008b8a:	00db      	lsls	r3, r3, #3
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d0ed      	beq.n	8008b6c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	0018      	movs	r0, r3
 8008b94:	46bd      	mov	sp, r7
 8008b96:	b004      	add	sp, #16
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	46c0      	nop			@ (mov r8, r8)
 8008b9c:	40007000 	.word	0x40007000
 8008ba0:	fffff9ff 	.word	0xfffff9ff
 8008ba4:	2000044c 	.word	0x2000044c
 8008ba8:	000f4240 	.word	0x000f4240

08008bac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8008bb0:	4b03      	ldr	r3, [pc, #12]	@ (8008bc0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8008bb2:	689a      	ldr	r2, [r3, #8]
 8008bb4:	23e0      	movs	r3, #224	@ 0xe0
 8008bb6:	01db      	lsls	r3, r3, #7
 8008bb8:	4013      	ands	r3, r2
}
 8008bba:	0018      	movs	r0, r3
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	40021000 	.word	0x40021000

08008bc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b088      	sub	sp, #32
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d101      	bne.n	8008bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e2fe      	b.n	80091d4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	4013      	ands	r3, r2
 8008bde:	d100      	bne.n	8008be2 <HAL_RCC_OscConfig+0x1e>
 8008be0:	e07c      	b.n	8008cdc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008be2:	4bc3      	ldr	r3, [pc, #780]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	2238      	movs	r2, #56	@ 0x38
 8008be8:	4013      	ands	r3, r2
 8008bea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008bec:	4bc0      	ldr	r3, [pc, #768]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	2203      	movs	r2, #3
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	2b10      	cmp	r3, #16
 8008bfa:	d102      	bne.n	8008c02 <HAL_RCC_OscConfig+0x3e>
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	d002      	beq.n	8008c08 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	2b08      	cmp	r3, #8
 8008c06:	d10b      	bne.n	8008c20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c08:	4bb9      	ldr	r3, [pc, #740]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	2380      	movs	r3, #128	@ 0x80
 8008c0e:	029b      	lsls	r3, r3, #10
 8008c10:	4013      	ands	r3, r2
 8008c12:	d062      	beq.n	8008cda <HAL_RCC_OscConfig+0x116>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d15e      	bne.n	8008cda <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e2d9      	b.n	80091d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685a      	ldr	r2, [r3, #4]
 8008c24:	2380      	movs	r3, #128	@ 0x80
 8008c26:	025b      	lsls	r3, r3, #9
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d107      	bne.n	8008c3c <HAL_RCC_OscConfig+0x78>
 8008c2c:	4bb0      	ldr	r3, [pc, #704]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	4baf      	ldr	r3, [pc, #700]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008c32:	2180      	movs	r1, #128	@ 0x80
 8008c34:	0249      	lsls	r1, r1, #9
 8008c36:	430a      	orrs	r2, r1
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	e020      	b.n	8008c7e <HAL_RCC_OscConfig+0xba>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685a      	ldr	r2, [r3, #4]
 8008c40:	23a0      	movs	r3, #160	@ 0xa0
 8008c42:	02db      	lsls	r3, r3, #11
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d10e      	bne.n	8008c66 <HAL_RCC_OscConfig+0xa2>
 8008c48:	4ba9      	ldr	r3, [pc, #676]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	4ba8      	ldr	r3, [pc, #672]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008c4e:	2180      	movs	r1, #128	@ 0x80
 8008c50:	02c9      	lsls	r1, r1, #11
 8008c52:	430a      	orrs	r2, r1
 8008c54:	601a      	str	r2, [r3, #0]
 8008c56:	4ba6      	ldr	r3, [pc, #664]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	4ba5      	ldr	r3, [pc, #660]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008c5c:	2180      	movs	r1, #128	@ 0x80
 8008c5e:	0249      	lsls	r1, r1, #9
 8008c60:	430a      	orrs	r2, r1
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	e00b      	b.n	8008c7e <HAL_RCC_OscConfig+0xba>
 8008c66:	4ba2      	ldr	r3, [pc, #648]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	4ba1      	ldr	r3, [pc, #644]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008c6c:	49a1      	ldr	r1, [pc, #644]	@ (8008ef4 <HAL_RCC_OscConfig+0x330>)
 8008c6e:	400a      	ands	r2, r1
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	4b9f      	ldr	r3, [pc, #636]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	4b9e      	ldr	r3, [pc, #632]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008c78:	499f      	ldr	r1, [pc, #636]	@ (8008ef8 <HAL_RCC_OscConfig+0x334>)
 8008c7a:	400a      	ands	r2, r1
 8008c7c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d014      	beq.n	8008cb0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c86:	f7fd fb19 	bl	80062bc <HAL_GetTick>
 8008c8a:	0003      	movs	r3, r0
 8008c8c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c8e:	e008      	b.n	8008ca2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c90:	f7fd fb14 	bl	80062bc <HAL_GetTick>
 8008c94:	0002      	movs	r2, r0
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	2b64      	cmp	r3, #100	@ 0x64
 8008c9c:	d901      	bls.n	8008ca2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	e298      	b.n	80091d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ca2:	4b93      	ldr	r3, [pc, #588]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	2380      	movs	r3, #128	@ 0x80
 8008ca8:	029b      	lsls	r3, r3, #10
 8008caa:	4013      	ands	r3, r2
 8008cac:	d0f0      	beq.n	8008c90 <HAL_RCC_OscConfig+0xcc>
 8008cae:	e015      	b.n	8008cdc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cb0:	f7fd fb04 	bl	80062bc <HAL_GetTick>
 8008cb4:	0003      	movs	r3, r0
 8008cb6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008cb8:	e008      	b.n	8008ccc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008cba:	f7fd faff 	bl	80062bc <HAL_GetTick>
 8008cbe:	0002      	movs	r2, r0
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	1ad3      	subs	r3, r2, r3
 8008cc4:	2b64      	cmp	r3, #100	@ 0x64
 8008cc6:	d901      	bls.n	8008ccc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	e283      	b.n	80091d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008ccc:	4b88      	ldr	r3, [pc, #544]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	2380      	movs	r3, #128	@ 0x80
 8008cd2:	029b      	lsls	r3, r3, #10
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	d1f0      	bne.n	8008cba <HAL_RCC_OscConfig+0xf6>
 8008cd8:	e000      	b.n	8008cdc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cda:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	d100      	bne.n	8008ce8 <HAL_RCC_OscConfig+0x124>
 8008ce6:	e099      	b.n	8008e1c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ce8:	4b81      	ldr	r3, [pc, #516]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	2238      	movs	r2, #56	@ 0x38
 8008cee:	4013      	ands	r3, r2
 8008cf0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008cf2:	4b7f      	ldr	r3, [pc, #508]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	2203      	movs	r2, #3
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	2b10      	cmp	r3, #16
 8008d00:	d102      	bne.n	8008d08 <HAL_RCC_OscConfig+0x144>
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	d002      	beq.n	8008d0e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d135      	bne.n	8008d7a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d0e:	4b78      	ldr	r3, [pc, #480]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	2380      	movs	r3, #128	@ 0x80
 8008d14:	00db      	lsls	r3, r3, #3
 8008d16:	4013      	ands	r3, r2
 8008d18:	d005      	beq.n	8008d26 <HAL_RCC_OscConfig+0x162>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d101      	bne.n	8008d26 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e256      	b.n	80091d4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d26:	4b72      	ldr	r3, [pc, #456]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	4a74      	ldr	r2, [pc, #464]	@ (8008efc <HAL_RCC_OscConfig+0x338>)
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	0019      	movs	r1, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	695b      	ldr	r3, [r3, #20]
 8008d34:	021a      	lsls	r2, r3, #8
 8008d36:	4b6e      	ldr	r3, [pc, #440]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008d38:	430a      	orrs	r2, r1
 8008d3a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d112      	bne.n	8008d68 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008d42:	4b6b      	ldr	r3, [pc, #428]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a6e      	ldr	r2, [pc, #440]	@ (8008f00 <HAL_RCC_OscConfig+0x33c>)
 8008d48:	4013      	ands	r3, r2
 8008d4a:	0019      	movs	r1, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	691a      	ldr	r2, [r3, #16]
 8008d50:	4b67      	ldr	r3, [pc, #412]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008d52:	430a      	orrs	r2, r1
 8008d54:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008d56:	4b66      	ldr	r3, [pc, #408]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	0adb      	lsrs	r3, r3, #11
 8008d5c:	2207      	movs	r2, #7
 8008d5e:	4013      	ands	r3, r2
 8008d60:	4a68      	ldr	r2, [pc, #416]	@ (8008f04 <HAL_RCC_OscConfig+0x340>)
 8008d62:	40da      	lsrs	r2, r3
 8008d64:	4b68      	ldr	r3, [pc, #416]	@ (8008f08 <HAL_RCC_OscConfig+0x344>)
 8008d66:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008d68:	4b68      	ldr	r3, [pc, #416]	@ (8008f0c <HAL_RCC_OscConfig+0x348>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	0018      	movs	r0, r3
 8008d6e:	f7fd fa49 	bl	8006204 <HAL_InitTick>
 8008d72:	1e03      	subs	r3, r0, #0
 8008d74:	d051      	beq.n	8008e1a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e22c      	b.n	80091d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d030      	beq.n	8008de4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008d82:	4b5b      	ldr	r3, [pc, #364]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a5e      	ldr	r2, [pc, #376]	@ (8008f00 <HAL_RCC_OscConfig+0x33c>)
 8008d88:	4013      	ands	r3, r2
 8008d8a:	0019      	movs	r1, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	691a      	ldr	r2, [r3, #16]
 8008d90:	4b57      	ldr	r3, [pc, #348]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008d92:	430a      	orrs	r2, r1
 8008d94:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8008d96:	4b56      	ldr	r3, [pc, #344]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	4b55      	ldr	r3, [pc, #340]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008d9c:	2180      	movs	r1, #128	@ 0x80
 8008d9e:	0049      	lsls	r1, r1, #1
 8008da0:	430a      	orrs	r2, r1
 8008da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008da4:	f7fd fa8a 	bl	80062bc <HAL_GetTick>
 8008da8:	0003      	movs	r3, r0
 8008daa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008dac:	e008      	b.n	8008dc0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008dae:	f7fd fa85 	bl	80062bc <HAL_GetTick>
 8008db2:	0002      	movs	r2, r0
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d901      	bls.n	8008dc0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e209      	b.n	80091d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	2380      	movs	r3, #128	@ 0x80
 8008dc6:	00db      	lsls	r3, r3, #3
 8008dc8:	4013      	ands	r3, r2
 8008dca:	d0f0      	beq.n	8008dae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dcc:	4b48      	ldr	r3, [pc, #288]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	4a4a      	ldr	r2, [pc, #296]	@ (8008efc <HAL_RCC_OscConfig+0x338>)
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	0019      	movs	r1, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	021a      	lsls	r2, r3, #8
 8008ddc:	4b44      	ldr	r3, [pc, #272]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008dde:	430a      	orrs	r2, r1
 8008de0:	605a      	str	r2, [r3, #4]
 8008de2:	e01b      	b.n	8008e1c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008de4:	4b42      	ldr	r3, [pc, #264]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	4b41      	ldr	r3, [pc, #260]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008dea:	4949      	ldr	r1, [pc, #292]	@ (8008f10 <HAL_RCC_OscConfig+0x34c>)
 8008dec:	400a      	ands	r2, r1
 8008dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008df0:	f7fd fa64 	bl	80062bc <HAL_GetTick>
 8008df4:	0003      	movs	r3, r0
 8008df6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008df8:	e008      	b.n	8008e0c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008dfa:	f7fd fa5f 	bl	80062bc <HAL_GetTick>
 8008dfe:	0002      	movs	r2, r0
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	1ad3      	subs	r3, r2, r3
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d901      	bls.n	8008e0c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	e1e3      	b.n	80091d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008e0c:	4b38      	ldr	r3, [pc, #224]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	2380      	movs	r3, #128	@ 0x80
 8008e12:	00db      	lsls	r3, r3, #3
 8008e14:	4013      	ands	r3, r2
 8008e16:	d1f0      	bne.n	8008dfa <HAL_RCC_OscConfig+0x236>
 8008e18:	e000      	b.n	8008e1c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e1a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2208      	movs	r2, #8
 8008e22:	4013      	ands	r3, r2
 8008e24:	d047      	beq.n	8008eb6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008e26:	4b32      	ldr	r3, [pc, #200]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	2238      	movs	r2, #56	@ 0x38
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	2b18      	cmp	r3, #24
 8008e30:	d10a      	bne.n	8008e48 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008e32:	4b2f      	ldr	r3, [pc, #188]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e36:	2202      	movs	r2, #2
 8008e38:	4013      	ands	r3, r2
 8008e3a:	d03c      	beq.n	8008eb6 <HAL_RCC_OscConfig+0x2f2>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	699b      	ldr	r3, [r3, #24]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d138      	bne.n	8008eb6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	e1c5      	b.n	80091d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d019      	beq.n	8008e84 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008e50:	4b27      	ldr	r3, [pc, #156]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008e52:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008e54:	4b26      	ldr	r3, [pc, #152]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008e56:	2101      	movs	r1, #1
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e5c:	f7fd fa2e 	bl	80062bc <HAL_GetTick>
 8008e60:	0003      	movs	r3, r0
 8008e62:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008e64:	e008      	b.n	8008e78 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e66:	f7fd fa29 	bl	80062bc <HAL_GetTick>
 8008e6a:	0002      	movs	r2, r0
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d901      	bls.n	8008e78 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e1ad      	b.n	80091d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008e78:	4b1d      	ldr	r3, [pc, #116]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	4013      	ands	r3, r2
 8008e80:	d0f1      	beq.n	8008e66 <HAL_RCC_OscConfig+0x2a2>
 8008e82:	e018      	b.n	8008eb6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008e84:	4b1a      	ldr	r3, [pc, #104]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008e86:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008e88:	4b19      	ldr	r3, [pc, #100]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008e8a:	2101      	movs	r1, #1
 8008e8c:	438a      	bics	r2, r1
 8008e8e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e90:	f7fd fa14 	bl	80062bc <HAL_GetTick>
 8008e94:	0003      	movs	r3, r0
 8008e96:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008e98:	e008      	b.n	8008eac <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e9a:	f7fd fa0f 	bl	80062bc <HAL_GetTick>
 8008e9e:	0002      	movs	r2, r0
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d901      	bls.n	8008eac <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	e193      	b.n	80091d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008eac:	4b10      	ldr	r3, [pc, #64]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008eb0:	2202      	movs	r2, #2
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	d1f1      	bne.n	8008e9a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2204      	movs	r2, #4
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	d100      	bne.n	8008ec2 <HAL_RCC_OscConfig+0x2fe>
 8008ec0:	e0c6      	b.n	8009050 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ec2:	231f      	movs	r3, #31
 8008ec4:	18fb      	adds	r3, r7, r3
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008eca:	4b09      	ldr	r3, [pc, #36]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	2238      	movs	r2, #56	@ 0x38
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	2b20      	cmp	r3, #32
 8008ed4:	d11e      	bne.n	8008f14 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8008ed6:	4b06      	ldr	r3, [pc, #24]	@ (8008ef0 <HAL_RCC_OscConfig+0x32c>)
 8008ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008eda:	2202      	movs	r2, #2
 8008edc:	4013      	ands	r3, r2
 8008ede:	d100      	bne.n	8008ee2 <HAL_RCC_OscConfig+0x31e>
 8008ee0:	e0b6      	b.n	8009050 <HAL_RCC_OscConfig+0x48c>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d000      	beq.n	8008eec <HAL_RCC_OscConfig+0x328>
 8008eea:	e0b1      	b.n	8009050 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e171      	b.n	80091d4 <HAL_RCC_OscConfig+0x610>
 8008ef0:	40021000 	.word	0x40021000
 8008ef4:	fffeffff 	.word	0xfffeffff
 8008ef8:	fffbffff 	.word	0xfffbffff
 8008efc:	ffff80ff 	.word	0xffff80ff
 8008f00:	ffffc7ff 	.word	0xffffc7ff
 8008f04:	00f42400 	.word	0x00f42400
 8008f08:	2000044c 	.word	0x2000044c
 8008f0c:	20000450 	.word	0x20000450
 8008f10:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008f14:	4bb1      	ldr	r3, [pc, #708]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8008f16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f18:	2380      	movs	r3, #128	@ 0x80
 8008f1a:	055b      	lsls	r3, r3, #21
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	d101      	bne.n	8008f24 <HAL_RCC_OscConfig+0x360>
 8008f20:	2301      	movs	r3, #1
 8008f22:	e000      	b.n	8008f26 <HAL_RCC_OscConfig+0x362>
 8008f24:	2300      	movs	r3, #0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d011      	beq.n	8008f4e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008f2a:	4bac      	ldr	r3, [pc, #688]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8008f2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f2e:	4bab      	ldr	r3, [pc, #684]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8008f30:	2180      	movs	r1, #128	@ 0x80
 8008f32:	0549      	lsls	r1, r1, #21
 8008f34:	430a      	orrs	r2, r1
 8008f36:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008f38:	4ba8      	ldr	r3, [pc, #672]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8008f3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f3c:	2380      	movs	r3, #128	@ 0x80
 8008f3e:	055b      	lsls	r3, r3, #21
 8008f40:	4013      	ands	r3, r2
 8008f42:	60fb      	str	r3, [r7, #12]
 8008f44:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008f46:	231f      	movs	r3, #31
 8008f48:	18fb      	adds	r3, r7, r3
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f4e:	4ba4      	ldr	r3, [pc, #656]	@ (80091e0 <HAL_RCC_OscConfig+0x61c>)
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	2380      	movs	r3, #128	@ 0x80
 8008f54:	005b      	lsls	r3, r3, #1
 8008f56:	4013      	ands	r3, r2
 8008f58:	d11a      	bne.n	8008f90 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f5a:	4ba1      	ldr	r3, [pc, #644]	@ (80091e0 <HAL_RCC_OscConfig+0x61c>)
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	4ba0      	ldr	r3, [pc, #640]	@ (80091e0 <HAL_RCC_OscConfig+0x61c>)
 8008f60:	2180      	movs	r1, #128	@ 0x80
 8008f62:	0049      	lsls	r1, r1, #1
 8008f64:	430a      	orrs	r2, r1
 8008f66:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008f68:	f7fd f9a8 	bl	80062bc <HAL_GetTick>
 8008f6c:	0003      	movs	r3, r0
 8008f6e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f70:	e008      	b.n	8008f84 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f72:	f7fd f9a3 	bl	80062bc <HAL_GetTick>
 8008f76:	0002      	movs	r2, r0
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	1ad3      	subs	r3, r2, r3
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d901      	bls.n	8008f84 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8008f80:	2303      	movs	r3, #3
 8008f82:	e127      	b.n	80091d4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f84:	4b96      	ldr	r3, [pc, #600]	@ (80091e0 <HAL_RCC_OscConfig+0x61c>)
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	2380      	movs	r3, #128	@ 0x80
 8008f8a:	005b      	lsls	r3, r3, #1
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	d0f0      	beq.n	8008f72 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d106      	bne.n	8008fa6 <HAL_RCC_OscConfig+0x3e2>
 8008f98:	4b90      	ldr	r3, [pc, #576]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8008f9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008f9c:	4b8f      	ldr	r3, [pc, #572]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8008f9e:	2101      	movs	r1, #1
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008fa4:	e01c      	b.n	8008fe0 <HAL_RCC_OscConfig+0x41c>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	2b05      	cmp	r3, #5
 8008fac:	d10c      	bne.n	8008fc8 <HAL_RCC_OscConfig+0x404>
 8008fae:	4b8b      	ldr	r3, [pc, #556]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8008fb0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008fb2:	4b8a      	ldr	r3, [pc, #552]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8008fb4:	2104      	movs	r1, #4
 8008fb6:	430a      	orrs	r2, r1
 8008fb8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008fba:	4b88      	ldr	r3, [pc, #544]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8008fbc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008fbe:	4b87      	ldr	r3, [pc, #540]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	430a      	orrs	r2, r1
 8008fc4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008fc6:	e00b      	b.n	8008fe0 <HAL_RCC_OscConfig+0x41c>
 8008fc8:	4b84      	ldr	r3, [pc, #528]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8008fca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008fcc:	4b83      	ldr	r3, [pc, #524]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8008fce:	2101      	movs	r1, #1
 8008fd0:	438a      	bics	r2, r1
 8008fd2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008fd4:	4b81      	ldr	r3, [pc, #516]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8008fd6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008fd8:	4b80      	ldr	r3, [pc, #512]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8008fda:	2104      	movs	r1, #4
 8008fdc:	438a      	bics	r2, r1
 8008fde:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d014      	beq.n	8009012 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fe8:	f7fd f968 	bl	80062bc <HAL_GetTick>
 8008fec:	0003      	movs	r3, r0
 8008fee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ff0:	e009      	b.n	8009006 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ff2:	f7fd f963 	bl	80062bc <HAL_GetTick>
 8008ff6:	0002      	movs	r2, r0
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	4a79      	ldr	r2, [pc, #484]	@ (80091e4 <HAL_RCC_OscConfig+0x620>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d901      	bls.n	8009006 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8009002:	2303      	movs	r3, #3
 8009004:	e0e6      	b.n	80091d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009006:	4b75      	ldr	r3, [pc, #468]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8009008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800900a:	2202      	movs	r2, #2
 800900c:	4013      	ands	r3, r2
 800900e:	d0f0      	beq.n	8008ff2 <HAL_RCC_OscConfig+0x42e>
 8009010:	e013      	b.n	800903a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009012:	f7fd f953 	bl	80062bc <HAL_GetTick>
 8009016:	0003      	movs	r3, r0
 8009018:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800901a:	e009      	b.n	8009030 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800901c:	f7fd f94e 	bl	80062bc <HAL_GetTick>
 8009020:	0002      	movs	r2, r0
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	4a6f      	ldr	r2, [pc, #444]	@ (80091e4 <HAL_RCC_OscConfig+0x620>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d901      	bls.n	8009030 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800902c:	2303      	movs	r3, #3
 800902e:	e0d1      	b.n	80091d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009030:	4b6a      	ldr	r3, [pc, #424]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8009032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009034:	2202      	movs	r2, #2
 8009036:	4013      	ands	r3, r2
 8009038:	d1f0      	bne.n	800901c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800903a:	231f      	movs	r3, #31
 800903c:	18fb      	adds	r3, r7, r3
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d105      	bne.n	8009050 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8009044:	4b65      	ldr	r3, [pc, #404]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8009046:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009048:	4b64      	ldr	r3, [pc, #400]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 800904a:	4967      	ldr	r1, [pc, #412]	@ (80091e8 <HAL_RCC_OscConfig+0x624>)
 800904c:	400a      	ands	r2, r1
 800904e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	69db      	ldr	r3, [r3, #28]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d100      	bne.n	800905a <HAL_RCC_OscConfig+0x496>
 8009058:	e0bb      	b.n	80091d2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800905a:	4b60      	ldr	r3, [pc, #384]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	2238      	movs	r2, #56	@ 0x38
 8009060:	4013      	ands	r3, r2
 8009062:	2b10      	cmp	r3, #16
 8009064:	d100      	bne.n	8009068 <HAL_RCC_OscConfig+0x4a4>
 8009066:	e07b      	b.n	8009160 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	69db      	ldr	r3, [r3, #28]
 800906c:	2b02      	cmp	r3, #2
 800906e:	d156      	bne.n	800911e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009070:	4b5a      	ldr	r3, [pc, #360]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	4b59      	ldr	r3, [pc, #356]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8009076:	495d      	ldr	r1, [pc, #372]	@ (80091ec <HAL_RCC_OscConfig+0x628>)
 8009078:	400a      	ands	r2, r1
 800907a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800907c:	f7fd f91e 	bl	80062bc <HAL_GetTick>
 8009080:	0003      	movs	r3, r0
 8009082:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009084:	e008      	b.n	8009098 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009086:	f7fd f919 	bl	80062bc <HAL_GetTick>
 800908a:	0002      	movs	r2, r0
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	2b02      	cmp	r3, #2
 8009092:	d901      	bls.n	8009098 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8009094:	2303      	movs	r3, #3
 8009096:	e09d      	b.n	80091d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009098:	4b50      	ldr	r3, [pc, #320]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	2380      	movs	r3, #128	@ 0x80
 800909e:	049b      	lsls	r3, r3, #18
 80090a0:	4013      	ands	r3, r2
 80090a2:	d1f0      	bne.n	8009086 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80090a4:	4b4d      	ldr	r3, [pc, #308]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	4a51      	ldr	r2, [pc, #324]	@ (80091f0 <HAL_RCC_OscConfig+0x62c>)
 80090aa:	4013      	ands	r3, r2
 80090ac:	0019      	movs	r1, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a1a      	ldr	r2, [r3, #32]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090b6:	431a      	orrs	r2, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090bc:	021b      	lsls	r3, r3, #8
 80090be:	431a      	orrs	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c4:	431a      	orrs	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ca:	431a      	orrs	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090d0:	431a      	orrs	r2, r3
 80090d2:	4b42      	ldr	r3, [pc, #264]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 80090d4:	430a      	orrs	r2, r1
 80090d6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80090d8:	4b40      	ldr	r3, [pc, #256]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	4b3f      	ldr	r3, [pc, #252]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 80090de:	2180      	movs	r1, #128	@ 0x80
 80090e0:	0449      	lsls	r1, r1, #17
 80090e2:	430a      	orrs	r2, r1
 80090e4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80090e6:	4b3d      	ldr	r3, [pc, #244]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 80090e8:	68da      	ldr	r2, [r3, #12]
 80090ea:	4b3c      	ldr	r3, [pc, #240]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 80090ec:	2180      	movs	r1, #128	@ 0x80
 80090ee:	0549      	lsls	r1, r1, #21
 80090f0:	430a      	orrs	r2, r1
 80090f2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090f4:	f7fd f8e2 	bl	80062bc <HAL_GetTick>
 80090f8:	0003      	movs	r3, r0
 80090fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090fc:	e008      	b.n	8009110 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090fe:	f7fd f8dd 	bl	80062bc <HAL_GetTick>
 8009102:	0002      	movs	r2, r0
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	2b02      	cmp	r3, #2
 800910a:	d901      	bls.n	8009110 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800910c:	2303      	movs	r3, #3
 800910e:	e061      	b.n	80091d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009110:	4b32      	ldr	r3, [pc, #200]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	2380      	movs	r3, #128	@ 0x80
 8009116:	049b      	lsls	r3, r3, #18
 8009118:	4013      	ands	r3, r2
 800911a:	d0f0      	beq.n	80090fe <HAL_RCC_OscConfig+0x53a>
 800911c:	e059      	b.n	80091d2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800911e:	4b2f      	ldr	r3, [pc, #188]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	4b2e      	ldr	r3, [pc, #184]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8009124:	4931      	ldr	r1, [pc, #196]	@ (80091ec <HAL_RCC_OscConfig+0x628>)
 8009126:	400a      	ands	r2, r1
 8009128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800912a:	f7fd f8c7 	bl	80062bc <HAL_GetTick>
 800912e:	0003      	movs	r3, r0
 8009130:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009132:	e008      	b.n	8009146 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009134:	f7fd f8c2 	bl	80062bc <HAL_GetTick>
 8009138:	0002      	movs	r2, r0
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	1ad3      	subs	r3, r2, r3
 800913e:	2b02      	cmp	r3, #2
 8009140:	d901      	bls.n	8009146 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8009142:	2303      	movs	r3, #3
 8009144:	e046      	b.n	80091d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009146:	4b25      	ldr	r3, [pc, #148]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	2380      	movs	r3, #128	@ 0x80
 800914c:	049b      	lsls	r3, r3, #18
 800914e:	4013      	ands	r3, r2
 8009150:	d1f0      	bne.n	8009134 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8009152:	4b22      	ldr	r3, [pc, #136]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8009154:	68da      	ldr	r2, [r3, #12]
 8009156:	4b21      	ldr	r3, [pc, #132]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 8009158:	4926      	ldr	r1, [pc, #152]	@ (80091f4 <HAL_RCC_OscConfig+0x630>)
 800915a:	400a      	ands	r2, r1
 800915c:	60da      	str	r2, [r3, #12]
 800915e:	e038      	b.n	80091d2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	69db      	ldr	r3, [r3, #28]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d101      	bne.n	800916c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	e033      	b.n	80091d4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800916c:	4b1b      	ldr	r3, [pc, #108]	@ (80091dc <HAL_RCC_OscConfig+0x618>)
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	2203      	movs	r2, #3
 8009176:	401a      	ands	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a1b      	ldr	r3, [r3, #32]
 800917c:	429a      	cmp	r2, r3
 800917e:	d126      	bne.n	80091ce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	2270      	movs	r2, #112	@ 0x70
 8009184:	401a      	ands	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800918a:	429a      	cmp	r2, r3
 800918c:	d11f      	bne.n	80091ce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	23fe      	movs	r3, #254	@ 0xfe
 8009192:	01db      	lsls	r3, r3, #7
 8009194:	401a      	ands	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800919a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800919c:	429a      	cmp	r2, r3
 800919e:	d116      	bne.n	80091ce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	23f8      	movs	r3, #248	@ 0xf8
 80091a4:	039b      	lsls	r3, r3, #14
 80091a6:	401a      	ands	r2, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d10e      	bne.n	80091ce <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80091b0:	697a      	ldr	r2, [r7, #20]
 80091b2:	23e0      	movs	r3, #224	@ 0xe0
 80091b4:	051b      	lsls	r3, r3, #20
 80091b6:	401a      	ands	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80091bc:	429a      	cmp	r2, r3
 80091be:	d106      	bne.n	80091ce <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	0f5b      	lsrs	r3, r3, #29
 80091c4:	075a      	lsls	r2, r3, #29
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d001      	beq.n	80091d2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e000      	b.n	80091d4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	0018      	movs	r0, r3
 80091d6:	46bd      	mov	sp, r7
 80091d8:	b008      	add	sp, #32
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	40021000 	.word	0x40021000
 80091e0:	40007000 	.word	0x40007000
 80091e4:	00001388 	.word	0x00001388
 80091e8:	efffffff 	.word	0xefffffff
 80091ec:	feffffff 	.word	0xfeffffff
 80091f0:	11c1808c 	.word	0x11c1808c
 80091f4:	eefefffc 	.word	0xeefefffc

080091f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d101      	bne.n	800920c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	e0e9      	b.n	80093e0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800920c:	4b76      	ldr	r3, [pc, #472]	@ (80093e8 <HAL_RCC_ClockConfig+0x1f0>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2207      	movs	r2, #7
 8009212:	4013      	ands	r3, r2
 8009214:	683a      	ldr	r2, [r7, #0]
 8009216:	429a      	cmp	r2, r3
 8009218:	d91e      	bls.n	8009258 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800921a:	4b73      	ldr	r3, [pc, #460]	@ (80093e8 <HAL_RCC_ClockConfig+0x1f0>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2207      	movs	r2, #7
 8009220:	4393      	bics	r3, r2
 8009222:	0019      	movs	r1, r3
 8009224:	4b70      	ldr	r3, [pc, #448]	@ (80093e8 <HAL_RCC_ClockConfig+0x1f0>)
 8009226:	683a      	ldr	r2, [r7, #0]
 8009228:	430a      	orrs	r2, r1
 800922a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800922c:	f7fd f846 	bl	80062bc <HAL_GetTick>
 8009230:	0003      	movs	r3, r0
 8009232:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009234:	e009      	b.n	800924a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009236:	f7fd f841 	bl	80062bc <HAL_GetTick>
 800923a:	0002      	movs	r2, r0
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	4a6a      	ldr	r2, [pc, #424]	@ (80093ec <HAL_RCC_ClockConfig+0x1f4>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d901      	bls.n	800924a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	e0ca      	b.n	80093e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800924a:	4b67      	ldr	r3, [pc, #412]	@ (80093e8 <HAL_RCC_ClockConfig+0x1f0>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2207      	movs	r2, #7
 8009250:	4013      	ands	r3, r2
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	429a      	cmp	r2, r3
 8009256:	d1ee      	bne.n	8009236 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2202      	movs	r2, #2
 800925e:	4013      	ands	r3, r2
 8009260:	d015      	beq.n	800928e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2204      	movs	r2, #4
 8009268:	4013      	ands	r3, r2
 800926a:	d006      	beq.n	800927a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800926c:	4b60      	ldr	r3, [pc, #384]	@ (80093f0 <HAL_RCC_ClockConfig+0x1f8>)
 800926e:	689a      	ldr	r2, [r3, #8]
 8009270:	4b5f      	ldr	r3, [pc, #380]	@ (80093f0 <HAL_RCC_ClockConfig+0x1f8>)
 8009272:	21e0      	movs	r1, #224	@ 0xe0
 8009274:	01c9      	lsls	r1, r1, #7
 8009276:	430a      	orrs	r2, r1
 8009278:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800927a:	4b5d      	ldr	r3, [pc, #372]	@ (80093f0 <HAL_RCC_ClockConfig+0x1f8>)
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	4a5d      	ldr	r2, [pc, #372]	@ (80093f4 <HAL_RCC_ClockConfig+0x1fc>)
 8009280:	4013      	ands	r3, r2
 8009282:	0019      	movs	r1, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	689a      	ldr	r2, [r3, #8]
 8009288:	4b59      	ldr	r3, [pc, #356]	@ (80093f0 <HAL_RCC_ClockConfig+0x1f8>)
 800928a:	430a      	orrs	r2, r1
 800928c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2201      	movs	r2, #1
 8009294:	4013      	ands	r3, r2
 8009296:	d057      	beq.n	8009348 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d107      	bne.n	80092b0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80092a0:	4b53      	ldr	r3, [pc, #332]	@ (80093f0 <HAL_RCC_ClockConfig+0x1f8>)
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	2380      	movs	r3, #128	@ 0x80
 80092a6:	029b      	lsls	r3, r3, #10
 80092a8:	4013      	ands	r3, r2
 80092aa:	d12b      	bne.n	8009304 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e097      	b.n	80093e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	d107      	bne.n	80092c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092b8:	4b4d      	ldr	r3, [pc, #308]	@ (80093f0 <HAL_RCC_ClockConfig+0x1f8>)
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	2380      	movs	r3, #128	@ 0x80
 80092be:	049b      	lsls	r3, r3, #18
 80092c0:	4013      	ands	r3, r2
 80092c2:	d11f      	bne.n	8009304 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	e08b      	b.n	80093e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d107      	bne.n	80092e0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80092d0:	4b47      	ldr	r3, [pc, #284]	@ (80093f0 <HAL_RCC_ClockConfig+0x1f8>)
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	2380      	movs	r3, #128	@ 0x80
 80092d6:	00db      	lsls	r3, r3, #3
 80092d8:	4013      	ands	r3, r2
 80092da:	d113      	bne.n	8009304 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	e07f      	b.n	80093e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	2b03      	cmp	r3, #3
 80092e6:	d106      	bne.n	80092f6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80092e8:	4b41      	ldr	r3, [pc, #260]	@ (80093f0 <HAL_RCC_ClockConfig+0x1f8>)
 80092ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092ec:	2202      	movs	r2, #2
 80092ee:	4013      	ands	r3, r2
 80092f0:	d108      	bne.n	8009304 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e074      	b.n	80093e0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092f6:	4b3e      	ldr	r3, [pc, #248]	@ (80093f0 <HAL_RCC_ClockConfig+0x1f8>)
 80092f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092fa:	2202      	movs	r2, #2
 80092fc:	4013      	ands	r3, r2
 80092fe:	d101      	bne.n	8009304 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	e06d      	b.n	80093e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009304:	4b3a      	ldr	r3, [pc, #232]	@ (80093f0 <HAL_RCC_ClockConfig+0x1f8>)
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	2207      	movs	r2, #7
 800930a:	4393      	bics	r3, r2
 800930c:	0019      	movs	r1, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	685a      	ldr	r2, [r3, #4]
 8009312:	4b37      	ldr	r3, [pc, #220]	@ (80093f0 <HAL_RCC_ClockConfig+0x1f8>)
 8009314:	430a      	orrs	r2, r1
 8009316:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009318:	f7fc ffd0 	bl	80062bc <HAL_GetTick>
 800931c:	0003      	movs	r3, r0
 800931e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009320:	e009      	b.n	8009336 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009322:	f7fc ffcb 	bl	80062bc <HAL_GetTick>
 8009326:	0002      	movs	r2, r0
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	4a2f      	ldr	r2, [pc, #188]	@ (80093ec <HAL_RCC_ClockConfig+0x1f4>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d901      	bls.n	8009336 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8009332:	2303      	movs	r3, #3
 8009334:	e054      	b.n	80093e0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009336:	4b2e      	ldr	r3, [pc, #184]	@ (80093f0 <HAL_RCC_ClockConfig+0x1f8>)
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	2238      	movs	r2, #56	@ 0x38
 800933c:	401a      	ands	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	00db      	lsls	r3, r3, #3
 8009344:	429a      	cmp	r2, r3
 8009346:	d1ec      	bne.n	8009322 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009348:	4b27      	ldr	r3, [pc, #156]	@ (80093e8 <HAL_RCC_ClockConfig+0x1f0>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2207      	movs	r2, #7
 800934e:	4013      	ands	r3, r2
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	429a      	cmp	r2, r3
 8009354:	d21e      	bcs.n	8009394 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009356:	4b24      	ldr	r3, [pc, #144]	@ (80093e8 <HAL_RCC_ClockConfig+0x1f0>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2207      	movs	r2, #7
 800935c:	4393      	bics	r3, r2
 800935e:	0019      	movs	r1, r3
 8009360:	4b21      	ldr	r3, [pc, #132]	@ (80093e8 <HAL_RCC_ClockConfig+0x1f0>)
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	430a      	orrs	r2, r1
 8009366:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009368:	f7fc ffa8 	bl	80062bc <HAL_GetTick>
 800936c:	0003      	movs	r3, r0
 800936e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009370:	e009      	b.n	8009386 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009372:	f7fc ffa3 	bl	80062bc <HAL_GetTick>
 8009376:	0002      	movs	r2, r0
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	1ad3      	subs	r3, r2, r3
 800937c:	4a1b      	ldr	r2, [pc, #108]	@ (80093ec <HAL_RCC_ClockConfig+0x1f4>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d901      	bls.n	8009386 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8009382:	2303      	movs	r3, #3
 8009384:	e02c      	b.n	80093e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009386:	4b18      	ldr	r3, [pc, #96]	@ (80093e8 <HAL_RCC_ClockConfig+0x1f0>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2207      	movs	r2, #7
 800938c:	4013      	ands	r3, r2
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	429a      	cmp	r2, r3
 8009392:	d1ee      	bne.n	8009372 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2204      	movs	r2, #4
 800939a:	4013      	ands	r3, r2
 800939c:	d009      	beq.n	80093b2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800939e:	4b14      	ldr	r3, [pc, #80]	@ (80093f0 <HAL_RCC_ClockConfig+0x1f8>)
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	4a15      	ldr	r2, [pc, #84]	@ (80093f8 <HAL_RCC_ClockConfig+0x200>)
 80093a4:	4013      	ands	r3, r2
 80093a6:	0019      	movs	r1, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	68da      	ldr	r2, [r3, #12]
 80093ac:	4b10      	ldr	r3, [pc, #64]	@ (80093f0 <HAL_RCC_ClockConfig+0x1f8>)
 80093ae:	430a      	orrs	r2, r1
 80093b0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80093b2:	f000 f829 	bl	8009408 <HAL_RCC_GetSysClockFreq>
 80093b6:	0001      	movs	r1, r0
 80093b8:	4b0d      	ldr	r3, [pc, #52]	@ (80093f0 <HAL_RCC_ClockConfig+0x1f8>)
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	0a1b      	lsrs	r3, r3, #8
 80093be:	220f      	movs	r2, #15
 80093c0:	401a      	ands	r2, r3
 80093c2:	4b0e      	ldr	r3, [pc, #56]	@ (80093fc <HAL_RCC_ClockConfig+0x204>)
 80093c4:	0092      	lsls	r2, r2, #2
 80093c6:	58d3      	ldr	r3, [r2, r3]
 80093c8:	221f      	movs	r2, #31
 80093ca:	4013      	ands	r3, r2
 80093cc:	000a      	movs	r2, r1
 80093ce:	40da      	lsrs	r2, r3
 80093d0:	4b0b      	ldr	r3, [pc, #44]	@ (8009400 <HAL_RCC_ClockConfig+0x208>)
 80093d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80093d4:	4b0b      	ldr	r3, [pc, #44]	@ (8009404 <HAL_RCC_ClockConfig+0x20c>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	0018      	movs	r0, r3
 80093da:	f7fc ff13 	bl	8006204 <HAL_InitTick>
 80093de:	0003      	movs	r3, r0
}
 80093e0:	0018      	movs	r0, r3
 80093e2:	46bd      	mov	sp, r7
 80093e4:	b004      	add	sp, #16
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	40022000 	.word	0x40022000
 80093ec:	00001388 	.word	0x00001388
 80093f0:	40021000 	.word	0x40021000
 80093f4:	fffff0ff 	.word	0xfffff0ff
 80093f8:	ffff8fff 	.word	0xffff8fff
 80093fc:	0800de14 	.word	0x0800de14
 8009400:	2000044c 	.word	0x2000044c
 8009404:	20000450 	.word	0x20000450

08009408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b086      	sub	sp, #24
 800940c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800940e:	4b3c      	ldr	r3, [pc, #240]	@ (8009500 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	2238      	movs	r2, #56	@ 0x38
 8009414:	4013      	ands	r3, r2
 8009416:	d10f      	bne.n	8009438 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009418:	4b39      	ldr	r3, [pc, #228]	@ (8009500 <HAL_RCC_GetSysClockFreq+0xf8>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	0adb      	lsrs	r3, r3, #11
 800941e:	2207      	movs	r2, #7
 8009420:	4013      	ands	r3, r2
 8009422:	2201      	movs	r2, #1
 8009424:	409a      	lsls	r2, r3
 8009426:	0013      	movs	r3, r2
 8009428:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800942a:	6839      	ldr	r1, [r7, #0]
 800942c:	4835      	ldr	r0, [pc, #212]	@ (8009504 <HAL_RCC_GetSysClockFreq+0xfc>)
 800942e:	f7f6 fe69 	bl	8000104 <__udivsi3>
 8009432:	0003      	movs	r3, r0
 8009434:	613b      	str	r3, [r7, #16]
 8009436:	e05d      	b.n	80094f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009438:	4b31      	ldr	r3, [pc, #196]	@ (8009500 <HAL_RCC_GetSysClockFreq+0xf8>)
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	2238      	movs	r2, #56	@ 0x38
 800943e:	4013      	ands	r3, r2
 8009440:	2b08      	cmp	r3, #8
 8009442:	d102      	bne.n	800944a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009444:	4b30      	ldr	r3, [pc, #192]	@ (8009508 <HAL_RCC_GetSysClockFreq+0x100>)
 8009446:	613b      	str	r3, [r7, #16]
 8009448:	e054      	b.n	80094f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800944a:	4b2d      	ldr	r3, [pc, #180]	@ (8009500 <HAL_RCC_GetSysClockFreq+0xf8>)
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	2238      	movs	r2, #56	@ 0x38
 8009450:	4013      	ands	r3, r2
 8009452:	2b10      	cmp	r3, #16
 8009454:	d138      	bne.n	80094c8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8009456:	4b2a      	ldr	r3, [pc, #168]	@ (8009500 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	2203      	movs	r2, #3
 800945c:	4013      	ands	r3, r2
 800945e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009460:	4b27      	ldr	r3, [pc, #156]	@ (8009500 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	091b      	lsrs	r3, r3, #4
 8009466:	2207      	movs	r2, #7
 8009468:	4013      	ands	r3, r2
 800946a:	3301      	adds	r3, #1
 800946c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2b03      	cmp	r3, #3
 8009472:	d10d      	bne.n	8009490 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009474:	68b9      	ldr	r1, [r7, #8]
 8009476:	4824      	ldr	r0, [pc, #144]	@ (8009508 <HAL_RCC_GetSysClockFreq+0x100>)
 8009478:	f7f6 fe44 	bl	8000104 <__udivsi3>
 800947c:	0003      	movs	r3, r0
 800947e:	0019      	movs	r1, r3
 8009480:	4b1f      	ldr	r3, [pc, #124]	@ (8009500 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	0a1b      	lsrs	r3, r3, #8
 8009486:	227f      	movs	r2, #127	@ 0x7f
 8009488:	4013      	ands	r3, r2
 800948a:	434b      	muls	r3, r1
 800948c:	617b      	str	r3, [r7, #20]
        break;
 800948e:	e00d      	b.n	80094ac <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8009490:	68b9      	ldr	r1, [r7, #8]
 8009492:	481c      	ldr	r0, [pc, #112]	@ (8009504 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009494:	f7f6 fe36 	bl	8000104 <__udivsi3>
 8009498:	0003      	movs	r3, r0
 800949a:	0019      	movs	r1, r3
 800949c:	4b18      	ldr	r3, [pc, #96]	@ (8009500 <HAL_RCC_GetSysClockFreq+0xf8>)
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	0a1b      	lsrs	r3, r3, #8
 80094a2:	227f      	movs	r2, #127	@ 0x7f
 80094a4:	4013      	ands	r3, r2
 80094a6:	434b      	muls	r3, r1
 80094a8:	617b      	str	r3, [r7, #20]
        break;
 80094aa:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80094ac:	4b14      	ldr	r3, [pc, #80]	@ (8009500 <HAL_RCC_GetSysClockFreq+0xf8>)
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	0f5b      	lsrs	r3, r3, #29
 80094b2:	2207      	movs	r2, #7
 80094b4:	4013      	ands	r3, r2
 80094b6:	3301      	adds	r3, #1
 80094b8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80094ba:	6879      	ldr	r1, [r7, #4]
 80094bc:	6978      	ldr	r0, [r7, #20]
 80094be:	f7f6 fe21 	bl	8000104 <__udivsi3>
 80094c2:	0003      	movs	r3, r0
 80094c4:	613b      	str	r3, [r7, #16]
 80094c6:	e015      	b.n	80094f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80094c8:	4b0d      	ldr	r3, [pc, #52]	@ (8009500 <HAL_RCC_GetSysClockFreq+0xf8>)
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	2238      	movs	r2, #56	@ 0x38
 80094ce:	4013      	ands	r3, r2
 80094d0:	2b20      	cmp	r3, #32
 80094d2:	d103      	bne.n	80094dc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80094d4:	2380      	movs	r3, #128	@ 0x80
 80094d6:	021b      	lsls	r3, r3, #8
 80094d8:	613b      	str	r3, [r7, #16]
 80094da:	e00b      	b.n	80094f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80094dc:	4b08      	ldr	r3, [pc, #32]	@ (8009500 <HAL_RCC_GetSysClockFreq+0xf8>)
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	2238      	movs	r2, #56	@ 0x38
 80094e2:	4013      	ands	r3, r2
 80094e4:	2b18      	cmp	r3, #24
 80094e6:	d103      	bne.n	80094f0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80094e8:	23fa      	movs	r3, #250	@ 0xfa
 80094ea:	01db      	lsls	r3, r3, #7
 80094ec:	613b      	str	r3, [r7, #16]
 80094ee:	e001      	b.n	80094f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80094f0:	2300      	movs	r3, #0
 80094f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80094f4:	693b      	ldr	r3, [r7, #16]
}
 80094f6:	0018      	movs	r0, r3
 80094f8:	46bd      	mov	sp, r7
 80094fa:	b006      	add	sp, #24
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	46c0      	nop			@ (mov r8, r8)
 8009500:	40021000 	.word	0x40021000
 8009504:	00f42400 	.word	0x00f42400
 8009508:	007a1200 	.word	0x007a1200

0800950c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009510:	4b02      	ldr	r3, [pc, #8]	@ (800951c <HAL_RCC_GetHCLKFreq+0x10>)
 8009512:	681b      	ldr	r3, [r3, #0]
}
 8009514:	0018      	movs	r0, r3
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	46c0      	nop			@ (mov r8, r8)
 800951c:	2000044c 	.word	0x2000044c

08009520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009520:	b5b0      	push	{r4, r5, r7, lr}
 8009522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009524:	f7ff fff2 	bl	800950c <HAL_RCC_GetHCLKFreq>
 8009528:	0004      	movs	r4, r0
 800952a:	f7ff fb3f 	bl	8008bac <LL_RCC_GetAPB1Prescaler>
 800952e:	0003      	movs	r3, r0
 8009530:	0b1a      	lsrs	r2, r3, #12
 8009532:	4b05      	ldr	r3, [pc, #20]	@ (8009548 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009534:	0092      	lsls	r2, r2, #2
 8009536:	58d3      	ldr	r3, [r2, r3]
 8009538:	221f      	movs	r2, #31
 800953a:	4013      	ands	r3, r2
 800953c:	40dc      	lsrs	r4, r3
 800953e:	0023      	movs	r3, r4
}
 8009540:	0018      	movs	r0, r3
 8009542:	46bd      	mov	sp, r7
 8009544:	bdb0      	pop	{r4, r5, r7, pc}
 8009546:	46c0      	nop			@ (mov r8, r8)
 8009548:	0800de54 	.word	0x0800de54

0800954c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b086      	sub	sp, #24
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8009554:	2313      	movs	r3, #19
 8009556:	18fb      	adds	r3, r7, r3
 8009558:	2200      	movs	r2, #0
 800955a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800955c:	2312      	movs	r3, #18
 800955e:	18fb      	adds	r3, r7, r3
 8009560:	2200      	movs	r2, #0
 8009562:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	2380      	movs	r3, #128	@ 0x80
 800956a:	029b      	lsls	r3, r3, #10
 800956c:	4013      	ands	r3, r2
 800956e:	d100      	bne.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8009570:	e0a3      	b.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009572:	2011      	movs	r0, #17
 8009574:	183b      	adds	r3, r7, r0
 8009576:	2200      	movs	r2, #0
 8009578:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800957a:	4ba5      	ldr	r3, [pc, #660]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800957c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800957e:	2380      	movs	r3, #128	@ 0x80
 8009580:	055b      	lsls	r3, r3, #21
 8009582:	4013      	ands	r3, r2
 8009584:	d110      	bne.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009586:	4ba2      	ldr	r3, [pc, #648]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009588:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800958a:	4ba1      	ldr	r3, [pc, #644]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800958c:	2180      	movs	r1, #128	@ 0x80
 800958e:	0549      	lsls	r1, r1, #21
 8009590:	430a      	orrs	r2, r1
 8009592:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009594:	4b9e      	ldr	r3, [pc, #632]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009596:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009598:	2380      	movs	r3, #128	@ 0x80
 800959a:	055b      	lsls	r3, r3, #21
 800959c:	4013      	ands	r3, r2
 800959e:	60bb      	str	r3, [r7, #8]
 80095a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80095a2:	183b      	adds	r3, r7, r0
 80095a4:	2201      	movs	r2, #1
 80095a6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80095a8:	4b9a      	ldr	r3, [pc, #616]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	4b99      	ldr	r3, [pc, #612]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80095ae:	2180      	movs	r1, #128	@ 0x80
 80095b0:	0049      	lsls	r1, r1, #1
 80095b2:	430a      	orrs	r2, r1
 80095b4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80095b6:	f7fc fe81 	bl	80062bc <HAL_GetTick>
 80095ba:	0003      	movs	r3, r0
 80095bc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80095be:	e00b      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095c0:	f7fc fe7c 	bl	80062bc <HAL_GetTick>
 80095c4:	0002      	movs	r2, r0
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d904      	bls.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80095ce:	2313      	movs	r3, #19
 80095d0:	18fb      	adds	r3, r7, r3
 80095d2:	2203      	movs	r2, #3
 80095d4:	701a      	strb	r2, [r3, #0]
        break;
 80095d6:	e005      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80095d8:	4b8e      	ldr	r3, [pc, #568]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	2380      	movs	r3, #128	@ 0x80
 80095de:	005b      	lsls	r3, r3, #1
 80095e0:	4013      	ands	r3, r2
 80095e2:	d0ed      	beq.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80095e4:	2313      	movs	r3, #19
 80095e6:	18fb      	adds	r3, r7, r3
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d154      	bne.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80095ee:	4b88      	ldr	r3, [pc, #544]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80095f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80095f2:	23c0      	movs	r3, #192	@ 0xc0
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	4013      	ands	r3, r2
 80095f8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d019      	beq.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	429a      	cmp	r2, r3
 8009608:	d014      	beq.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800960a:	4b81      	ldr	r3, [pc, #516]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800960c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800960e:	4a82      	ldr	r2, [pc, #520]	@ (8009818 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8009610:	4013      	ands	r3, r2
 8009612:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009614:	4b7e      	ldr	r3, [pc, #504]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009616:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009618:	4b7d      	ldr	r3, [pc, #500]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800961a:	2180      	movs	r1, #128	@ 0x80
 800961c:	0249      	lsls	r1, r1, #9
 800961e:	430a      	orrs	r2, r1
 8009620:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009622:	4b7b      	ldr	r3, [pc, #492]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009624:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009626:	4b7a      	ldr	r3, [pc, #488]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009628:	497c      	ldr	r1, [pc, #496]	@ (800981c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800962a:	400a      	ands	r2, r1
 800962c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800962e:	4b78      	ldr	r3, [pc, #480]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009630:	697a      	ldr	r2, [r7, #20]
 8009632:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	2201      	movs	r2, #1
 8009638:	4013      	ands	r3, r2
 800963a:	d016      	beq.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800963c:	f7fc fe3e 	bl	80062bc <HAL_GetTick>
 8009640:	0003      	movs	r3, r0
 8009642:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009644:	e00c      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009646:	f7fc fe39 	bl	80062bc <HAL_GetTick>
 800964a:	0002      	movs	r2, r0
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	4a73      	ldr	r2, [pc, #460]	@ (8009820 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d904      	bls.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8009656:	2313      	movs	r3, #19
 8009658:	18fb      	adds	r3, r7, r3
 800965a:	2203      	movs	r2, #3
 800965c:	701a      	strb	r2, [r3, #0]
            break;
 800965e:	e004      	b.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009660:	4b6b      	ldr	r3, [pc, #428]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009664:	2202      	movs	r2, #2
 8009666:	4013      	ands	r3, r2
 8009668:	d0ed      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800966a:	2313      	movs	r3, #19
 800966c:	18fb      	adds	r3, r7, r3
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10a      	bne.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009674:	4b66      	ldr	r3, [pc, #408]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009678:	4a67      	ldr	r2, [pc, #412]	@ (8009818 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800967a:	4013      	ands	r3, r2
 800967c:	0019      	movs	r1, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009682:	4b63      	ldr	r3, [pc, #396]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009684:	430a      	orrs	r2, r1
 8009686:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009688:	e00c      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800968a:	2312      	movs	r3, #18
 800968c:	18fb      	adds	r3, r7, r3
 800968e:	2213      	movs	r2, #19
 8009690:	18ba      	adds	r2, r7, r2
 8009692:	7812      	ldrb	r2, [r2, #0]
 8009694:	701a      	strb	r2, [r3, #0]
 8009696:	e005      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009698:	2312      	movs	r3, #18
 800969a:	18fb      	adds	r3, r7, r3
 800969c:	2213      	movs	r2, #19
 800969e:	18ba      	adds	r2, r7, r2
 80096a0:	7812      	ldrb	r2, [r2, #0]
 80096a2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80096a4:	2311      	movs	r3, #17
 80096a6:	18fb      	adds	r3, r7, r3
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d105      	bne.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80096ae:	4b58      	ldr	r3, [pc, #352]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80096b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096b2:	4b57      	ldr	r3, [pc, #348]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80096b4:	495b      	ldr	r1, [pc, #364]	@ (8009824 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80096b6:	400a      	ands	r2, r1
 80096b8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2201      	movs	r2, #1
 80096c0:	4013      	ands	r3, r2
 80096c2:	d009      	beq.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80096c4:	4b52      	ldr	r3, [pc, #328]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80096c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096c8:	2203      	movs	r2, #3
 80096ca:	4393      	bics	r3, r2
 80096cc:	0019      	movs	r1, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	685a      	ldr	r2, [r3, #4]
 80096d2:	4b4f      	ldr	r3, [pc, #316]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80096d4:	430a      	orrs	r2, r1
 80096d6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2210      	movs	r2, #16
 80096de:	4013      	ands	r3, r2
 80096e0:	d009      	beq.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80096e2:	4b4b      	ldr	r3, [pc, #300]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80096e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096e6:	4a50      	ldr	r2, [pc, #320]	@ (8009828 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80096e8:	4013      	ands	r3, r2
 80096ea:	0019      	movs	r1, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	689a      	ldr	r2, [r3, #8]
 80096f0:	4b47      	ldr	r3, [pc, #284]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80096f2:	430a      	orrs	r2, r1
 80096f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	2380      	movs	r3, #128	@ 0x80
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	4013      	ands	r3, r2
 8009700:	d009      	beq.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009702:	4b43      	ldr	r3, [pc, #268]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009706:	4a49      	ldr	r2, [pc, #292]	@ (800982c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8009708:	4013      	ands	r3, r2
 800970a:	0019      	movs	r1, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	695a      	ldr	r2, [r3, #20]
 8009710:	4b3f      	ldr	r3, [pc, #252]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009712:	430a      	orrs	r2, r1
 8009714:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	2380      	movs	r3, #128	@ 0x80
 800971c:	00db      	lsls	r3, r3, #3
 800971e:	4013      	ands	r3, r2
 8009720:	d009      	beq.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009722:	4b3b      	ldr	r3, [pc, #236]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009726:	4a42      	ldr	r2, [pc, #264]	@ (8009830 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8009728:	4013      	ands	r3, r2
 800972a:	0019      	movs	r1, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	699a      	ldr	r2, [r3, #24]
 8009730:	4b37      	ldr	r3, [pc, #220]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009732:	430a      	orrs	r2, r1
 8009734:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2220      	movs	r2, #32
 800973c:	4013      	ands	r3, r2
 800973e:	d009      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009740:	4b33      	ldr	r3, [pc, #204]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009744:	4a3b      	ldr	r2, [pc, #236]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009746:	4013      	ands	r3, r2
 8009748:	0019      	movs	r1, r3
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	68da      	ldr	r2, [r3, #12]
 800974e:	4b30      	ldr	r3, [pc, #192]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009750:	430a      	orrs	r2, r1
 8009752:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	2380      	movs	r3, #128	@ 0x80
 800975a:	01db      	lsls	r3, r3, #7
 800975c:	4013      	ands	r3, r2
 800975e:	d015      	beq.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009760:	4b2b      	ldr	r3, [pc, #172]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	0899      	lsrs	r1, r3, #2
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	69da      	ldr	r2, [r3, #28]
 800976c:	4b28      	ldr	r3, [pc, #160]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800976e:	430a      	orrs	r2, r1
 8009770:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	69da      	ldr	r2, [r3, #28]
 8009776:	2380      	movs	r3, #128	@ 0x80
 8009778:	05db      	lsls	r3, r3, #23
 800977a:	429a      	cmp	r2, r3
 800977c:	d106      	bne.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800977e:	4b24      	ldr	r3, [pc, #144]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009780:	68da      	ldr	r2, [r3, #12]
 8009782:	4b23      	ldr	r3, [pc, #140]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009784:	2180      	movs	r1, #128	@ 0x80
 8009786:	0249      	lsls	r1, r1, #9
 8009788:	430a      	orrs	r2, r1
 800978a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	2380      	movs	r3, #128	@ 0x80
 8009792:	039b      	lsls	r3, r3, #14
 8009794:	4013      	ands	r3, r2
 8009796:	d016      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8009798:	4b1d      	ldr	r3, [pc, #116]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800979a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800979c:	4a26      	ldr	r2, [pc, #152]	@ (8009838 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800979e:	4013      	ands	r3, r2
 80097a0:	0019      	movs	r1, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a1a      	ldr	r2, [r3, #32]
 80097a6:	4b1a      	ldr	r3, [pc, #104]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097a8:	430a      	orrs	r2, r1
 80097aa:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6a1a      	ldr	r2, [r3, #32]
 80097b0:	2380      	movs	r3, #128	@ 0x80
 80097b2:	03db      	lsls	r3, r3, #15
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d106      	bne.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80097b8:	4b15      	ldr	r3, [pc, #84]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097ba:	68da      	ldr	r2, [r3, #12]
 80097bc:	4b14      	ldr	r3, [pc, #80]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097be:	2180      	movs	r1, #128	@ 0x80
 80097c0:	0449      	lsls	r1, r1, #17
 80097c2:	430a      	orrs	r2, r1
 80097c4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	2380      	movs	r3, #128	@ 0x80
 80097cc:	011b      	lsls	r3, r3, #4
 80097ce:	4013      	ands	r3, r2
 80097d0:	d016      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80097d2:	4b0f      	ldr	r3, [pc, #60]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097d6:	4a19      	ldr	r2, [pc, #100]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80097d8:	4013      	ands	r3, r2
 80097da:	0019      	movs	r1, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	691a      	ldr	r2, [r3, #16]
 80097e0:	4b0b      	ldr	r3, [pc, #44]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097e2:	430a      	orrs	r2, r1
 80097e4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	691a      	ldr	r2, [r3, #16]
 80097ea:	2380      	movs	r3, #128	@ 0x80
 80097ec:	01db      	lsls	r3, r3, #7
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d106      	bne.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80097f2:	4b07      	ldr	r3, [pc, #28]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097f4:	68da      	ldr	r2, [r3, #12]
 80097f6:	4b06      	ldr	r3, [pc, #24]	@ (8009810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80097f8:	2180      	movs	r1, #128	@ 0x80
 80097fa:	0249      	lsls	r1, r1, #9
 80097fc:	430a      	orrs	r2, r1
 80097fe:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8009800:	2312      	movs	r3, #18
 8009802:	18fb      	adds	r3, r7, r3
 8009804:	781b      	ldrb	r3, [r3, #0]
}
 8009806:	0018      	movs	r0, r3
 8009808:	46bd      	mov	sp, r7
 800980a:	b006      	add	sp, #24
 800980c:	bd80      	pop	{r7, pc}
 800980e:	46c0      	nop			@ (mov r8, r8)
 8009810:	40021000 	.word	0x40021000
 8009814:	40007000 	.word	0x40007000
 8009818:	fffffcff 	.word	0xfffffcff
 800981c:	fffeffff 	.word	0xfffeffff
 8009820:	00001388 	.word	0x00001388
 8009824:	efffffff 	.word	0xefffffff
 8009828:	fffff3ff 	.word	0xfffff3ff
 800982c:	fff3ffff 	.word	0xfff3ffff
 8009830:	ffcfffff 	.word	0xffcfffff
 8009834:	ffffcfff 	.word	0xffffcfff
 8009838:	ffbfffff 	.word	0xffbfffff
 800983c:	ffff3fff 	.word	0xffff3fff

08009840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d101      	bne.n	8009852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e056      	b.n	8009900 <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	223d      	movs	r2, #61	@ 0x3d
 8009856:	5c9b      	ldrb	r3, [r3, r2]
 8009858:	b2db      	uxtb	r3, r3
 800985a:	2b00      	cmp	r3, #0
 800985c:	d113      	bne.n	8009886 <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	223c      	movs	r2, #60	@ 0x3c
 8009862:	2100      	movs	r1, #0
 8009864:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	0018      	movs	r0, r3
 800986a:	f002 f8c5 	bl	800b9f8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009872:	2b00      	cmp	r3, #0
 8009874:	d102      	bne.n	800987c <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4a23      	ldr	r2, [pc, #140]	@ (8009908 <HAL_TIM_Base_Init+0xc8>)
 800987a:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	0010      	movs	r0, r2
 8009884:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	223d      	movs	r2, #61	@ 0x3d
 800988a:	2102      	movs	r1, #2
 800988c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	3304      	adds	r3, #4
 8009896:	0019      	movs	r1, r3
 8009898:	0010      	movs	r0, r2
 800989a:	f001 fbaf 	bl	800affc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2248      	movs	r2, #72	@ 0x48
 80098a2:	2101      	movs	r1, #1
 80098a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	223e      	movs	r2, #62	@ 0x3e
 80098aa:	2101      	movs	r1, #1
 80098ac:	5499      	strb	r1, [r3, r2]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	223f      	movs	r2, #63	@ 0x3f
 80098b2:	2101      	movs	r1, #1
 80098b4:	5499      	strb	r1, [r3, r2]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2240      	movs	r2, #64	@ 0x40
 80098ba:	2101      	movs	r1, #1
 80098bc:	5499      	strb	r1, [r3, r2]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2241      	movs	r2, #65	@ 0x41
 80098c2:	2101      	movs	r1, #1
 80098c4:	5499      	strb	r1, [r3, r2]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2242      	movs	r2, #66	@ 0x42
 80098ca:	2101      	movs	r1, #1
 80098cc:	5499      	strb	r1, [r3, r2]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2243      	movs	r2, #67	@ 0x43
 80098d2:	2101      	movs	r1, #1
 80098d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2244      	movs	r2, #68	@ 0x44
 80098da:	2101      	movs	r1, #1
 80098dc:	5499      	strb	r1, [r3, r2]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2245      	movs	r2, #69	@ 0x45
 80098e2:	2101      	movs	r1, #1
 80098e4:	5499      	strb	r1, [r3, r2]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2246      	movs	r2, #70	@ 0x46
 80098ea:	2101      	movs	r1, #1
 80098ec:	5499      	strb	r1, [r3, r2]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2247      	movs	r2, #71	@ 0x47
 80098f2:	2101      	movs	r1, #1
 80098f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	223d      	movs	r2, #61	@ 0x3d
 80098fa:	2101      	movs	r1, #1
 80098fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	0018      	movs	r0, r3
 8009902:	46bd      	mov	sp, r7
 8009904:	b002      	add	sp, #8
 8009906:	bd80      	pop	{r7, pc}
 8009908:	0800526d 	.word	0x0800526d

0800990c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	223d      	movs	r2, #61	@ 0x3d
 8009918:	5c9b      	ldrb	r3, [r3, r2]
 800991a:	b2db      	uxtb	r3, r3
 800991c:	2b01      	cmp	r3, #1
 800991e:	d001      	beq.n	8009924 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	e035      	b.n	8009990 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	223d      	movs	r2, #61	@ 0x3d
 8009928:	2102      	movs	r1, #2
 800992a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a19      	ldr	r2, [pc, #100]	@ (8009998 <HAL_TIM_Base_Start+0x8c>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d00a      	beq.n	800994c <HAL_TIM_Base_Start+0x40>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	2380      	movs	r3, #128	@ 0x80
 800993c:	05db      	lsls	r3, r3, #23
 800993e:	429a      	cmp	r2, r3
 8009940:	d004      	beq.n	800994c <HAL_TIM_Base_Start+0x40>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a15      	ldr	r2, [pc, #84]	@ (800999c <HAL_TIM_Base_Start+0x90>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d116      	bne.n	800997a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	4a13      	ldr	r2, [pc, #76]	@ (80099a0 <HAL_TIM_Base_Start+0x94>)
 8009954:	4013      	ands	r3, r2
 8009956:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2b06      	cmp	r3, #6
 800995c:	d016      	beq.n	800998c <HAL_TIM_Base_Start+0x80>
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	2380      	movs	r3, #128	@ 0x80
 8009962:	025b      	lsls	r3, r3, #9
 8009964:	429a      	cmp	r2, r3
 8009966:	d011      	beq.n	800998c <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2101      	movs	r1, #1
 8009974:	430a      	orrs	r2, r1
 8009976:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009978:	e008      	b.n	800998c <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	2101      	movs	r1, #1
 8009986:	430a      	orrs	r2, r1
 8009988:	601a      	str	r2, [r3, #0]
 800998a:	e000      	b.n	800998e <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800998c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800998e:	2300      	movs	r3, #0
}
 8009990:	0018      	movs	r0, r3
 8009992:	46bd      	mov	sp, r7
 8009994:	b004      	add	sp, #16
 8009996:	bd80      	pop	{r7, pc}
 8009998:	40012c00 	.word	0x40012c00
 800999c:	40000400 	.word	0x40000400
 80099a0:	00010007 	.word	0x00010007

080099a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	223d      	movs	r2, #61	@ 0x3d
 80099b0:	5c9b      	ldrb	r3, [r3, r2]
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d001      	beq.n	80099bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	e03d      	b.n	8009a38 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	223d      	movs	r2, #61	@ 0x3d
 80099c0:	2102      	movs	r1, #2
 80099c2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68da      	ldr	r2, [r3, #12]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2101      	movs	r1, #1
 80099d0:	430a      	orrs	r2, r1
 80099d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a19      	ldr	r2, [pc, #100]	@ (8009a40 <HAL_TIM_Base_Start_IT+0x9c>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d00a      	beq.n	80099f4 <HAL_TIM_Base_Start_IT+0x50>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	2380      	movs	r3, #128	@ 0x80
 80099e4:	05db      	lsls	r3, r3, #23
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d004      	beq.n	80099f4 <HAL_TIM_Base_Start_IT+0x50>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a15      	ldr	r2, [pc, #84]	@ (8009a44 <HAL_TIM_Base_Start_IT+0xa0>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d116      	bne.n	8009a22 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	4a13      	ldr	r2, [pc, #76]	@ (8009a48 <HAL_TIM_Base_Start_IT+0xa4>)
 80099fc:	4013      	ands	r3, r2
 80099fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2b06      	cmp	r3, #6
 8009a04:	d016      	beq.n	8009a34 <HAL_TIM_Base_Start_IT+0x90>
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	2380      	movs	r3, #128	@ 0x80
 8009a0a:	025b      	lsls	r3, r3, #9
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d011      	beq.n	8009a34 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2101      	movs	r1, #1
 8009a1c:	430a      	orrs	r2, r1
 8009a1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a20:	e008      	b.n	8009a34 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2101      	movs	r1, #1
 8009a2e:	430a      	orrs	r2, r1
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	e000      	b.n	8009a36 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a34:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	0018      	movs	r0, r3
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	b004      	add	sp, #16
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	40012c00 	.word	0x40012c00
 8009a44:	40000400 	.word	0x40000400
 8009a48:	00010007 	.word	0x00010007

08009a4c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e056      	b.n	8009b0c <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	223d      	movs	r2, #61	@ 0x3d
 8009a62:	5c9b      	ldrb	r3, [r3, r2]
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d113      	bne.n	8009a92 <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	223c      	movs	r2, #60	@ 0x3c
 8009a6e:	2100      	movs	r1, #0
 8009a70:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	0018      	movs	r0, r3
 8009a76:	f001 ffbf 	bl	800b9f8 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d102      	bne.n	8009a88 <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a23      	ldr	r2, [pc, #140]	@ (8009b14 <HAL_TIM_OC_Init+0xc8>)
 8009a86:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	0010      	movs	r0, r2
 8009a90:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	223d      	movs	r2, #61	@ 0x3d
 8009a96:	2102      	movs	r1, #2
 8009a98:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	0019      	movs	r1, r3
 8009aa4:	0010      	movs	r0, r2
 8009aa6:	f001 faa9 	bl	800affc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2248      	movs	r2, #72	@ 0x48
 8009aae:	2101      	movs	r1, #1
 8009ab0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	223e      	movs	r2, #62	@ 0x3e
 8009ab6:	2101      	movs	r1, #1
 8009ab8:	5499      	strb	r1, [r3, r2]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	223f      	movs	r2, #63	@ 0x3f
 8009abe:	2101      	movs	r1, #1
 8009ac0:	5499      	strb	r1, [r3, r2]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2240      	movs	r2, #64	@ 0x40
 8009ac6:	2101      	movs	r1, #1
 8009ac8:	5499      	strb	r1, [r3, r2]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2241      	movs	r2, #65	@ 0x41
 8009ace:	2101      	movs	r1, #1
 8009ad0:	5499      	strb	r1, [r3, r2]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2242      	movs	r2, #66	@ 0x42
 8009ad6:	2101      	movs	r1, #1
 8009ad8:	5499      	strb	r1, [r3, r2]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2243      	movs	r2, #67	@ 0x43
 8009ade:	2101      	movs	r1, #1
 8009ae0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2244      	movs	r2, #68	@ 0x44
 8009ae6:	2101      	movs	r1, #1
 8009ae8:	5499      	strb	r1, [r3, r2]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2245      	movs	r2, #69	@ 0x45
 8009aee:	2101      	movs	r1, #1
 8009af0:	5499      	strb	r1, [r3, r2]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2246      	movs	r2, #70	@ 0x46
 8009af6:	2101      	movs	r1, #1
 8009af8:	5499      	strb	r1, [r3, r2]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2247      	movs	r2, #71	@ 0x47
 8009afe:	2101      	movs	r1, #1
 8009b00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	223d      	movs	r2, #61	@ 0x3d
 8009b06:	2101      	movs	r1, #1
 8009b08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	0018      	movs	r0, r3
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	b002      	add	sp, #8
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	08009b19 	.word	0x08009b19

08009b18 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009b20:	46c0      	nop			@ (mov r8, r8)
 8009b22:	46bd      	mov	sp, r7
 8009b24:	b002      	add	sp, #8
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b32:	230f      	movs	r3, #15
 8009b34:	18fb      	adds	r3, r7, r3
 8009b36:	2200      	movs	r2, #0
 8009b38:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d108      	bne.n	8009b52 <HAL_TIM_OC_Start_IT+0x2a>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	223e      	movs	r2, #62	@ 0x3e
 8009b44:	5c9b      	ldrb	r3, [r3, r2]
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	1e5a      	subs	r2, r3, #1
 8009b4c:	4193      	sbcs	r3, r2
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	e037      	b.n	8009bc2 <HAL_TIM_OC_Start_IT+0x9a>
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	2b04      	cmp	r3, #4
 8009b56:	d108      	bne.n	8009b6a <HAL_TIM_OC_Start_IT+0x42>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	223f      	movs	r2, #63	@ 0x3f
 8009b5c:	5c9b      	ldrb	r3, [r3, r2]
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	3b01      	subs	r3, #1
 8009b62:	1e5a      	subs	r2, r3, #1
 8009b64:	4193      	sbcs	r3, r2
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	e02b      	b.n	8009bc2 <HAL_TIM_OC_Start_IT+0x9a>
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b08      	cmp	r3, #8
 8009b6e:	d108      	bne.n	8009b82 <HAL_TIM_OC_Start_IT+0x5a>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2240      	movs	r2, #64	@ 0x40
 8009b74:	5c9b      	ldrb	r3, [r3, r2]
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	1e5a      	subs	r2, r3, #1
 8009b7c:	4193      	sbcs	r3, r2
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	e01f      	b.n	8009bc2 <HAL_TIM_OC_Start_IT+0x9a>
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	2b0c      	cmp	r3, #12
 8009b86:	d108      	bne.n	8009b9a <HAL_TIM_OC_Start_IT+0x72>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2241      	movs	r2, #65	@ 0x41
 8009b8c:	5c9b      	ldrb	r3, [r3, r2]
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	3b01      	subs	r3, #1
 8009b92:	1e5a      	subs	r2, r3, #1
 8009b94:	4193      	sbcs	r3, r2
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	e013      	b.n	8009bc2 <HAL_TIM_OC_Start_IT+0x9a>
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	2b10      	cmp	r3, #16
 8009b9e:	d108      	bne.n	8009bb2 <HAL_TIM_OC_Start_IT+0x8a>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2242      	movs	r2, #66	@ 0x42
 8009ba4:	5c9b      	ldrb	r3, [r3, r2]
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	1e5a      	subs	r2, r3, #1
 8009bac:	4193      	sbcs	r3, r2
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	e007      	b.n	8009bc2 <HAL_TIM_OC_Start_IT+0x9a>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2243      	movs	r2, #67	@ 0x43
 8009bb6:	5c9b      	ldrb	r3, [r3, r2]
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	1e5a      	subs	r2, r3, #1
 8009bbe:	4193      	sbcs	r3, r2
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d001      	beq.n	8009bca <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e0c4      	b.n	8009d54 <HAL_TIM_OC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d104      	bne.n	8009bda <HAL_TIM_OC_Start_IT+0xb2>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	223e      	movs	r2, #62	@ 0x3e
 8009bd4:	2102      	movs	r1, #2
 8009bd6:	5499      	strb	r1, [r3, r2]
 8009bd8:	e023      	b.n	8009c22 <HAL_TIM_OC_Start_IT+0xfa>
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	2b04      	cmp	r3, #4
 8009bde:	d104      	bne.n	8009bea <HAL_TIM_OC_Start_IT+0xc2>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	223f      	movs	r2, #63	@ 0x3f
 8009be4:	2102      	movs	r1, #2
 8009be6:	5499      	strb	r1, [r3, r2]
 8009be8:	e01b      	b.n	8009c22 <HAL_TIM_OC_Start_IT+0xfa>
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	2b08      	cmp	r3, #8
 8009bee:	d104      	bne.n	8009bfa <HAL_TIM_OC_Start_IT+0xd2>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2240      	movs	r2, #64	@ 0x40
 8009bf4:	2102      	movs	r1, #2
 8009bf6:	5499      	strb	r1, [r3, r2]
 8009bf8:	e013      	b.n	8009c22 <HAL_TIM_OC_Start_IT+0xfa>
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	2b0c      	cmp	r3, #12
 8009bfe:	d104      	bne.n	8009c0a <HAL_TIM_OC_Start_IT+0xe2>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2241      	movs	r2, #65	@ 0x41
 8009c04:	2102      	movs	r1, #2
 8009c06:	5499      	strb	r1, [r3, r2]
 8009c08:	e00b      	b.n	8009c22 <HAL_TIM_OC_Start_IT+0xfa>
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	2b10      	cmp	r3, #16
 8009c0e:	d104      	bne.n	8009c1a <HAL_TIM_OC_Start_IT+0xf2>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2242      	movs	r2, #66	@ 0x42
 8009c14:	2102      	movs	r1, #2
 8009c16:	5499      	strb	r1, [r3, r2]
 8009c18:	e003      	b.n	8009c22 <HAL_TIM_OC_Start_IT+0xfa>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2243      	movs	r2, #67	@ 0x43
 8009c1e:	2102      	movs	r1, #2
 8009c20:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	2b0c      	cmp	r3, #12
 8009c26:	d02a      	beq.n	8009c7e <HAL_TIM_OC_Start_IT+0x156>
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	2b0c      	cmp	r3, #12
 8009c2c:	d830      	bhi.n	8009c90 <HAL_TIM_OC_Start_IT+0x168>
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	2b08      	cmp	r3, #8
 8009c32:	d01b      	beq.n	8009c6c <HAL_TIM_OC_Start_IT+0x144>
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	2b08      	cmp	r3, #8
 8009c38:	d82a      	bhi.n	8009c90 <HAL_TIM_OC_Start_IT+0x168>
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d003      	beq.n	8009c48 <HAL_TIM_OC_Start_IT+0x120>
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	2b04      	cmp	r3, #4
 8009c44:	d009      	beq.n	8009c5a <HAL_TIM_OC_Start_IT+0x132>
 8009c46:	e023      	b.n	8009c90 <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68da      	ldr	r2, [r3, #12]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2102      	movs	r1, #2
 8009c54:	430a      	orrs	r2, r1
 8009c56:	60da      	str	r2, [r3, #12]
      break;
 8009c58:	e01f      	b.n	8009c9a <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68da      	ldr	r2, [r3, #12]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2104      	movs	r1, #4
 8009c66:	430a      	orrs	r2, r1
 8009c68:	60da      	str	r2, [r3, #12]
      break;
 8009c6a:	e016      	b.n	8009c9a <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	68da      	ldr	r2, [r3, #12]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2108      	movs	r1, #8
 8009c78:	430a      	orrs	r2, r1
 8009c7a:	60da      	str	r2, [r3, #12]
      break;
 8009c7c:	e00d      	b.n	8009c9a <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68da      	ldr	r2, [r3, #12]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2110      	movs	r1, #16
 8009c8a:	430a      	orrs	r2, r1
 8009c8c:	60da      	str	r2, [r3, #12]
      break;
 8009c8e:	e004      	b.n	8009c9a <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 8009c90:	230f      	movs	r3, #15
 8009c92:	18fb      	adds	r3, r7, r3
 8009c94:	2201      	movs	r2, #1
 8009c96:	701a      	strb	r2, [r3, #0]
      break;
 8009c98:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8009c9a:	230f      	movs	r3, #15
 8009c9c:	18fb      	adds	r3, r7, r3
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d154      	bne.n	8009d4e <HAL_TIM_OC_Start_IT+0x226>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	6839      	ldr	r1, [r7, #0]
 8009caa:	2201      	movs	r2, #1
 8009cac:	0018      	movs	r0, r3
 8009cae:	f001 fe7f 	bl	800b9b0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a29      	ldr	r2, [pc, #164]	@ (8009d5c <HAL_TIM_OC_Start_IT+0x234>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d009      	beq.n	8009cd0 <HAL_TIM_OC_Start_IT+0x1a8>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a27      	ldr	r2, [pc, #156]	@ (8009d60 <HAL_TIM_OC_Start_IT+0x238>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d004      	beq.n	8009cd0 <HAL_TIM_OC_Start_IT+0x1a8>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a26      	ldr	r2, [pc, #152]	@ (8009d64 <HAL_TIM_OC_Start_IT+0x23c>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d101      	bne.n	8009cd4 <HAL_TIM_OC_Start_IT+0x1ac>
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e000      	b.n	8009cd6 <HAL_TIM_OC_Start_IT+0x1ae>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d008      	beq.n	8009cec <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2180      	movs	r1, #128	@ 0x80
 8009ce6:	0209      	lsls	r1, r1, #8
 8009ce8:	430a      	orrs	r2, r1
 8009cea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8009d5c <HAL_TIM_OC_Start_IT+0x234>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d00a      	beq.n	8009d0c <HAL_TIM_OC_Start_IT+0x1e4>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	2380      	movs	r3, #128	@ 0x80
 8009cfc:	05db      	lsls	r3, r3, #23
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d004      	beq.n	8009d0c <HAL_TIM_OC_Start_IT+0x1e4>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a18      	ldr	r2, [pc, #96]	@ (8009d68 <HAL_TIM_OC_Start_IT+0x240>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d116      	bne.n	8009d3a <HAL_TIM_OC_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	4a16      	ldr	r2, [pc, #88]	@ (8009d6c <HAL_TIM_OC_Start_IT+0x244>)
 8009d14:	4013      	ands	r3, r2
 8009d16:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	2b06      	cmp	r3, #6
 8009d1c:	d016      	beq.n	8009d4c <HAL_TIM_OC_Start_IT+0x224>
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	2380      	movs	r3, #128	@ 0x80
 8009d22:	025b      	lsls	r3, r3, #9
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d011      	beq.n	8009d4c <HAL_TIM_OC_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2101      	movs	r1, #1
 8009d34:	430a      	orrs	r2, r1
 8009d36:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d38:	e008      	b.n	8009d4c <HAL_TIM_OC_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2101      	movs	r1, #1
 8009d46:	430a      	orrs	r2, r1
 8009d48:	601a      	str	r2, [r3, #0]
 8009d4a:	e000      	b.n	8009d4e <HAL_TIM_OC_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d4c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8009d4e:	230f      	movs	r3, #15
 8009d50:	18fb      	adds	r3, r7, r3
 8009d52:	781b      	ldrb	r3, [r3, #0]
}
 8009d54:	0018      	movs	r0, r3
 8009d56:	46bd      	mov	sp, r7
 8009d58:	b004      	add	sp, #16
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	40012c00 	.word	0x40012c00
 8009d60:	40014400 	.word	0x40014400
 8009d64:	40014800 	.word	0x40014800
 8009d68:	40000400 	.word	0x40000400
 8009d6c:	00010007 	.word	0x00010007

08009d70 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d7a:	230f      	movs	r3, #15
 8009d7c:	18fb      	adds	r3, r7, r3
 8009d7e:	2200      	movs	r2, #0
 8009d80:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	2b0c      	cmp	r3, #12
 8009d86:	d02a      	beq.n	8009dde <HAL_TIM_OC_Stop_IT+0x6e>
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	2b0c      	cmp	r3, #12
 8009d8c:	d830      	bhi.n	8009df0 <HAL_TIM_OC_Stop_IT+0x80>
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	2b08      	cmp	r3, #8
 8009d92:	d01b      	beq.n	8009dcc <HAL_TIM_OC_Stop_IT+0x5c>
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	2b08      	cmp	r3, #8
 8009d98:	d82a      	bhi.n	8009df0 <HAL_TIM_OC_Stop_IT+0x80>
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d003      	beq.n	8009da8 <HAL_TIM_OC_Stop_IT+0x38>
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	2b04      	cmp	r3, #4
 8009da4:	d009      	beq.n	8009dba <HAL_TIM_OC_Stop_IT+0x4a>
 8009da6:	e023      	b.n	8009df0 <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68da      	ldr	r2, [r3, #12]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2102      	movs	r1, #2
 8009db4:	438a      	bics	r2, r1
 8009db6:	60da      	str	r2, [r3, #12]
      break;
 8009db8:	e01f      	b.n	8009dfa <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68da      	ldr	r2, [r3, #12]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2104      	movs	r1, #4
 8009dc6:	438a      	bics	r2, r1
 8009dc8:	60da      	str	r2, [r3, #12]
      break;
 8009dca:	e016      	b.n	8009dfa <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68da      	ldr	r2, [r3, #12]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2108      	movs	r1, #8
 8009dd8:	438a      	bics	r2, r1
 8009dda:	60da      	str	r2, [r3, #12]
      break;
 8009ddc:	e00d      	b.n	8009dfa <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68da      	ldr	r2, [r3, #12]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2110      	movs	r1, #16
 8009dea:	438a      	bics	r2, r1
 8009dec:	60da      	str	r2, [r3, #12]
      break;
 8009dee:	e004      	b.n	8009dfa <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8009df0:	230f      	movs	r3, #15
 8009df2:	18fb      	adds	r3, r7, r3
 8009df4:	2201      	movs	r2, #1
 8009df6:	701a      	strb	r2, [r3, #0]
      break;
 8009df8:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8009dfa:	230f      	movs	r3, #15
 8009dfc:	18fb      	adds	r3, r7, r3
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d000      	beq.n	8009e06 <HAL_TIM_OC_Stop_IT+0x96>
 8009e04:	e06e      	b.n	8009ee4 <HAL_TIM_OC_Stop_IT+0x174>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	6839      	ldr	r1, [r7, #0]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	0018      	movs	r0, r3
 8009e10:	f001 fdce 	bl	800b9b0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a36      	ldr	r2, [pc, #216]	@ (8009ef4 <HAL_TIM_OC_Stop_IT+0x184>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d009      	beq.n	8009e32 <HAL_TIM_OC_Stop_IT+0xc2>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a35      	ldr	r2, [pc, #212]	@ (8009ef8 <HAL_TIM_OC_Stop_IT+0x188>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d004      	beq.n	8009e32 <HAL_TIM_OC_Stop_IT+0xc2>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a33      	ldr	r2, [pc, #204]	@ (8009efc <HAL_TIM_OC_Stop_IT+0x18c>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d101      	bne.n	8009e36 <HAL_TIM_OC_Stop_IT+0xc6>
 8009e32:	2301      	movs	r3, #1
 8009e34:	e000      	b.n	8009e38 <HAL_TIM_OC_Stop_IT+0xc8>
 8009e36:	2300      	movs	r3, #0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d013      	beq.n	8009e64 <HAL_TIM_OC_Stop_IT+0xf4>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6a1b      	ldr	r3, [r3, #32]
 8009e42:	4a2f      	ldr	r2, [pc, #188]	@ (8009f00 <HAL_TIM_OC_Stop_IT+0x190>)
 8009e44:	4013      	ands	r3, r2
 8009e46:	d10d      	bne.n	8009e64 <HAL_TIM_OC_Stop_IT+0xf4>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	4a2d      	ldr	r2, [pc, #180]	@ (8009f04 <HAL_TIM_OC_Stop_IT+0x194>)
 8009e50:	4013      	ands	r3, r2
 8009e52:	d107      	bne.n	8009e64 <HAL_TIM_OC_Stop_IT+0xf4>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	492a      	ldr	r1, [pc, #168]	@ (8009f08 <HAL_TIM_OC_Stop_IT+0x198>)
 8009e60:	400a      	ands	r2, r1
 8009e62:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6a1b      	ldr	r3, [r3, #32]
 8009e6a:	4a25      	ldr	r2, [pc, #148]	@ (8009f00 <HAL_TIM_OC_Stop_IT+0x190>)
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	d10d      	bne.n	8009e8c <HAL_TIM_OC_Stop_IT+0x11c>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6a1b      	ldr	r3, [r3, #32]
 8009e76:	4a23      	ldr	r2, [pc, #140]	@ (8009f04 <HAL_TIM_OC_Stop_IT+0x194>)
 8009e78:	4013      	ands	r3, r2
 8009e7a:	d107      	bne.n	8009e8c <HAL_TIM_OC_Stop_IT+0x11c>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2101      	movs	r1, #1
 8009e88:	438a      	bics	r2, r1
 8009e8a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d104      	bne.n	8009e9c <HAL_TIM_OC_Stop_IT+0x12c>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	223e      	movs	r2, #62	@ 0x3e
 8009e96:	2101      	movs	r1, #1
 8009e98:	5499      	strb	r1, [r3, r2]
 8009e9a:	e023      	b.n	8009ee4 <HAL_TIM_OC_Stop_IT+0x174>
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	2b04      	cmp	r3, #4
 8009ea0:	d104      	bne.n	8009eac <HAL_TIM_OC_Stop_IT+0x13c>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	223f      	movs	r2, #63	@ 0x3f
 8009ea6:	2101      	movs	r1, #1
 8009ea8:	5499      	strb	r1, [r3, r2]
 8009eaa:	e01b      	b.n	8009ee4 <HAL_TIM_OC_Stop_IT+0x174>
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	2b08      	cmp	r3, #8
 8009eb0:	d104      	bne.n	8009ebc <HAL_TIM_OC_Stop_IT+0x14c>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2240      	movs	r2, #64	@ 0x40
 8009eb6:	2101      	movs	r1, #1
 8009eb8:	5499      	strb	r1, [r3, r2]
 8009eba:	e013      	b.n	8009ee4 <HAL_TIM_OC_Stop_IT+0x174>
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	2b0c      	cmp	r3, #12
 8009ec0:	d104      	bne.n	8009ecc <HAL_TIM_OC_Stop_IT+0x15c>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2241      	movs	r2, #65	@ 0x41
 8009ec6:	2101      	movs	r1, #1
 8009ec8:	5499      	strb	r1, [r3, r2]
 8009eca:	e00b      	b.n	8009ee4 <HAL_TIM_OC_Stop_IT+0x174>
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	2b10      	cmp	r3, #16
 8009ed0:	d104      	bne.n	8009edc <HAL_TIM_OC_Stop_IT+0x16c>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2242      	movs	r2, #66	@ 0x42
 8009ed6:	2101      	movs	r1, #1
 8009ed8:	5499      	strb	r1, [r3, r2]
 8009eda:	e003      	b.n	8009ee4 <HAL_TIM_OC_Stop_IT+0x174>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2243      	movs	r2, #67	@ 0x43
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8009ee4:	230f      	movs	r3, #15
 8009ee6:	18fb      	adds	r3, r7, r3
 8009ee8:	781b      	ldrb	r3, [r3, #0]
}
 8009eea:	0018      	movs	r0, r3
 8009eec:	46bd      	mov	sp, r7
 8009eee:	b004      	add	sp, #16
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	46c0      	nop			@ (mov r8, r8)
 8009ef4:	40012c00 	.word	0x40012c00
 8009ef8:	40014400 	.word	0x40014400
 8009efc:	40014800 	.word	0x40014800
 8009f00:	00001111 	.word	0x00001111
 8009f04:	00000444 	.word	0x00000444
 8009f08:	ffff7fff 	.word	0xffff7fff

08009f0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e056      	b.n	8009fcc <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	223d      	movs	r2, #61	@ 0x3d
 8009f22:	5c9b      	ldrb	r3, [r3, r2]
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d113      	bne.n	8009f52 <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	223c      	movs	r2, #60	@ 0x3c
 8009f2e:	2100      	movs	r1, #0
 8009f30:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	0018      	movs	r0, r3
 8009f36:	f001 fd5f 	bl	800b9f8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d102      	bne.n	8009f48 <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a23      	ldr	r2, [pc, #140]	@ (8009fd4 <HAL_TIM_PWM_Init+0xc8>)
 8009f46:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	0010      	movs	r0, r2
 8009f50:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	223d      	movs	r2, #61	@ 0x3d
 8009f56:	2102      	movs	r1, #2
 8009f58:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	3304      	adds	r3, #4
 8009f62:	0019      	movs	r1, r3
 8009f64:	0010      	movs	r0, r2
 8009f66:	f001 f849 	bl	800affc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2248      	movs	r2, #72	@ 0x48
 8009f6e:	2101      	movs	r1, #1
 8009f70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	223e      	movs	r2, #62	@ 0x3e
 8009f76:	2101      	movs	r1, #1
 8009f78:	5499      	strb	r1, [r3, r2]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	223f      	movs	r2, #63	@ 0x3f
 8009f7e:	2101      	movs	r1, #1
 8009f80:	5499      	strb	r1, [r3, r2]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2240      	movs	r2, #64	@ 0x40
 8009f86:	2101      	movs	r1, #1
 8009f88:	5499      	strb	r1, [r3, r2]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2241      	movs	r2, #65	@ 0x41
 8009f8e:	2101      	movs	r1, #1
 8009f90:	5499      	strb	r1, [r3, r2]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2242      	movs	r2, #66	@ 0x42
 8009f96:	2101      	movs	r1, #1
 8009f98:	5499      	strb	r1, [r3, r2]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2243      	movs	r2, #67	@ 0x43
 8009f9e:	2101      	movs	r1, #1
 8009fa0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2244      	movs	r2, #68	@ 0x44
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	5499      	strb	r1, [r3, r2]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2245      	movs	r2, #69	@ 0x45
 8009fae:	2101      	movs	r1, #1
 8009fb0:	5499      	strb	r1, [r3, r2]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2246      	movs	r2, #70	@ 0x46
 8009fb6:	2101      	movs	r1, #1
 8009fb8:	5499      	strb	r1, [r3, r2]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2247      	movs	r2, #71	@ 0x47
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	223d      	movs	r2, #61	@ 0x3d
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	0018      	movs	r0, r3
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	b002      	add	sp, #8
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	08009fd9 	.word	0x08009fd9

08009fd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009fe0:	46c0      	nop			@ (mov r8, r8)
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	b002      	add	sp, #8
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d108      	bne.n	800a00a <HAL_TIM_PWM_Start+0x22>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	223e      	movs	r2, #62	@ 0x3e
 8009ffc:	5c9b      	ldrb	r3, [r3, r2]
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	3b01      	subs	r3, #1
 800a002:	1e5a      	subs	r2, r3, #1
 800a004:	4193      	sbcs	r3, r2
 800a006:	b2db      	uxtb	r3, r3
 800a008:	e037      	b.n	800a07a <HAL_TIM_PWM_Start+0x92>
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	2b04      	cmp	r3, #4
 800a00e:	d108      	bne.n	800a022 <HAL_TIM_PWM_Start+0x3a>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	223f      	movs	r2, #63	@ 0x3f
 800a014:	5c9b      	ldrb	r3, [r3, r2]
 800a016:	b2db      	uxtb	r3, r3
 800a018:	3b01      	subs	r3, #1
 800a01a:	1e5a      	subs	r2, r3, #1
 800a01c:	4193      	sbcs	r3, r2
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	e02b      	b.n	800a07a <HAL_TIM_PWM_Start+0x92>
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	2b08      	cmp	r3, #8
 800a026:	d108      	bne.n	800a03a <HAL_TIM_PWM_Start+0x52>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2240      	movs	r2, #64	@ 0x40
 800a02c:	5c9b      	ldrb	r3, [r3, r2]
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	3b01      	subs	r3, #1
 800a032:	1e5a      	subs	r2, r3, #1
 800a034:	4193      	sbcs	r3, r2
 800a036:	b2db      	uxtb	r3, r3
 800a038:	e01f      	b.n	800a07a <HAL_TIM_PWM_Start+0x92>
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	2b0c      	cmp	r3, #12
 800a03e:	d108      	bne.n	800a052 <HAL_TIM_PWM_Start+0x6a>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2241      	movs	r2, #65	@ 0x41
 800a044:	5c9b      	ldrb	r3, [r3, r2]
 800a046:	b2db      	uxtb	r3, r3
 800a048:	3b01      	subs	r3, #1
 800a04a:	1e5a      	subs	r2, r3, #1
 800a04c:	4193      	sbcs	r3, r2
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	e013      	b.n	800a07a <HAL_TIM_PWM_Start+0x92>
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	2b10      	cmp	r3, #16
 800a056:	d108      	bne.n	800a06a <HAL_TIM_PWM_Start+0x82>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2242      	movs	r2, #66	@ 0x42
 800a05c:	5c9b      	ldrb	r3, [r3, r2]
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	3b01      	subs	r3, #1
 800a062:	1e5a      	subs	r2, r3, #1
 800a064:	4193      	sbcs	r3, r2
 800a066:	b2db      	uxtb	r3, r3
 800a068:	e007      	b.n	800a07a <HAL_TIM_PWM_Start+0x92>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2243      	movs	r2, #67	@ 0x43
 800a06e:	5c9b      	ldrb	r3, [r3, r2]
 800a070:	b2db      	uxtb	r3, r3
 800a072:	3b01      	subs	r3, #1
 800a074:	1e5a      	subs	r2, r3, #1
 800a076:	4193      	sbcs	r3, r2
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d001      	beq.n	800a082 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	e081      	b.n	800a186 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d104      	bne.n	800a092 <HAL_TIM_PWM_Start+0xaa>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	223e      	movs	r2, #62	@ 0x3e
 800a08c:	2102      	movs	r1, #2
 800a08e:	5499      	strb	r1, [r3, r2]
 800a090:	e023      	b.n	800a0da <HAL_TIM_PWM_Start+0xf2>
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	2b04      	cmp	r3, #4
 800a096:	d104      	bne.n	800a0a2 <HAL_TIM_PWM_Start+0xba>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	223f      	movs	r2, #63	@ 0x3f
 800a09c:	2102      	movs	r1, #2
 800a09e:	5499      	strb	r1, [r3, r2]
 800a0a0:	e01b      	b.n	800a0da <HAL_TIM_PWM_Start+0xf2>
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	2b08      	cmp	r3, #8
 800a0a6:	d104      	bne.n	800a0b2 <HAL_TIM_PWM_Start+0xca>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2240      	movs	r2, #64	@ 0x40
 800a0ac:	2102      	movs	r1, #2
 800a0ae:	5499      	strb	r1, [r3, r2]
 800a0b0:	e013      	b.n	800a0da <HAL_TIM_PWM_Start+0xf2>
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	2b0c      	cmp	r3, #12
 800a0b6:	d104      	bne.n	800a0c2 <HAL_TIM_PWM_Start+0xda>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2241      	movs	r2, #65	@ 0x41
 800a0bc:	2102      	movs	r1, #2
 800a0be:	5499      	strb	r1, [r3, r2]
 800a0c0:	e00b      	b.n	800a0da <HAL_TIM_PWM_Start+0xf2>
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	2b10      	cmp	r3, #16
 800a0c6:	d104      	bne.n	800a0d2 <HAL_TIM_PWM_Start+0xea>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2242      	movs	r2, #66	@ 0x42
 800a0cc:	2102      	movs	r1, #2
 800a0ce:	5499      	strb	r1, [r3, r2]
 800a0d0:	e003      	b.n	800a0da <HAL_TIM_PWM_Start+0xf2>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2243      	movs	r2, #67	@ 0x43
 800a0d6:	2102      	movs	r1, #2
 800a0d8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	6839      	ldr	r1, [r7, #0]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	0018      	movs	r0, r3
 800a0e4:	f001 fc64 	bl	800b9b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a28      	ldr	r2, [pc, #160]	@ (800a190 <HAL_TIM_PWM_Start+0x1a8>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d009      	beq.n	800a106 <HAL_TIM_PWM_Start+0x11e>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a27      	ldr	r2, [pc, #156]	@ (800a194 <HAL_TIM_PWM_Start+0x1ac>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d004      	beq.n	800a106 <HAL_TIM_PWM_Start+0x11e>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a25      	ldr	r2, [pc, #148]	@ (800a198 <HAL_TIM_PWM_Start+0x1b0>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d101      	bne.n	800a10a <HAL_TIM_PWM_Start+0x122>
 800a106:	2301      	movs	r3, #1
 800a108:	e000      	b.n	800a10c <HAL_TIM_PWM_Start+0x124>
 800a10a:	2300      	movs	r3, #0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d008      	beq.n	800a122 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2180      	movs	r1, #128	@ 0x80
 800a11c:	0209      	lsls	r1, r1, #8
 800a11e:	430a      	orrs	r2, r1
 800a120:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a1a      	ldr	r2, [pc, #104]	@ (800a190 <HAL_TIM_PWM_Start+0x1a8>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d00a      	beq.n	800a142 <HAL_TIM_PWM_Start+0x15a>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	2380      	movs	r3, #128	@ 0x80
 800a132:	05db      	lsls	r3, r3, #23
 800a134:	429a      	cmp	r2, r3
 800a136:	d004      	beq.n	800a142 <HAL_TIM_PWM_Start+0x15a>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a17      	ldr	r2, [pc, #92]	@ (800a19c <HAL_TIM_PWM_Start+0x1b4>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d116      	bne.n	800a170 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	4a15      	ldr	r2, [pc, #84]	@ (800a1a0 <HAL_TIM_PWM_Start+0x1b8>)
 800a14a:	4013      	ands	r3, r2
 800a14c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2b06      	cmp	r3, #6
 800a152:	d016      	beq.n	800a182 <HAL_TIM_PWM_Start+0x19a>
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	2380      	movs	r3, #128	@ 0x80
 800a158:	025b      	lsls	r3, r3, #9
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d011      	beq.n	800a182 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2101      	movs	r1, #1
 800a16a:	430a      	orrs	r2, r1
 800a16c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a16e:	e008      	b.n	800a182 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2101      	movs	r1, #1
 800a17c:	430a      	orrs	r2, r1
 800a17e:	601a      	str	r2, [r3, #0]
 800a180:	e000      	b.n	800a184 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a182:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	0018      	movs	r0, r3
 800a188:	46bd      	mov	sp, r7
 800a18a:	b004      	add	sp, #16
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	46c0      	nop			@ (mov r8, r8)
 800a190:	40012c00 	.word	0x40012c00
 800a194:	40014400 	.word	0x40014400
 800a198:	40014800 	.word	0x40014800
 800a19c:	40000400 	.word	0x40000400
 800a1a0:	00010007 	.word	0x00010007

0800a1a4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d101      	bne.n	800a1b6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e056      	b.n	800a264 <HAL_TIM_IC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	223d      	movs	r2, #61	@ 0x3d
 800a1ba:	5c9b      	ldrb	r3, [r3, r2]
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d113      	bne.n	800a1ea <HAL_TIM_IC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	223c      	movs	r2, #60	@ 0x3c
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	0018      	movs	r0, r3
 800a1ce:	f001 fc13 	bl	800b9f8 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d102      	bne.n	800a1e0 <HAL_TIM_IC_Init+0x3c>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a23      	ldr	r2, [pc, #140]	@ (800a26c <HAL_TIM_IC_Init+0xc8>)
 800a1de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	0010      	movs	r0, r2
 800a1e8:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	223d      	movs	r2, #61	@ 0x3d
 800a1ee:	2102      	movs	r1, #2
 800a1f0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	3304      	adds	r3, #4
 800a1fa:	0019      	movs	r1, r3
 800a1fc:	0010      	movs	r0, r2
 800a1fe:	f000 fefd 	bl	800affc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2248      	movs	r2, #72	@ 0x48
 800a206:	2101      	movs	r1, #1
 800a208:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	223e      	movs	r2, #62	@ 0x3e
 800a20e:	2101      	movs	r1, #1
 800a210:	5499      	strb	r1, [r3, r2]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	223f      	movs	r2, #63	@ 0x3f
 800a216:	2101      	movs	r1, #1
 800a218:	5499      	strb	r1, [r3, r2]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2240      	movs	r2, #64	@ 0x40
 800a21e:	2101      	movs	r1, #1
 800a220:	5499      	strb	r1, [r3, r2]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2241      	movs	r2, #65	@ 0x41
 800a226:	2101      	movs	r1, #1
 800a228:	5499      	strb	r1, [r3, r2]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2242      	movs	r2, #66	@ 0x42
 800a22e:	2101      	movs	r1, #1
 800a230:	5499      	strb	r1, [r3, r2]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2243      	movs	r2, #67	@ 0x43
 800a236:	2101      	movs	r1, #1
 800a238:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2244      	movs	r2, #68	@ 0x44
 800a23e:	2101      	movs	r1, #1
 800a240:	5499      	strb	r1, [r3, r2]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2245      	movs	r2, #69	@ 0x45
 800a246:	2101      	movs	r1, #1
 800a248:	5499      	strb	r1, [r3, r2]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2246      	movs	r2, #70	@ 0x46
 800a24e:	2101      	movs	r1, #1
 800a250:	5499      	strb	r1, [r3, r2]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2247      	movs	r2, #71	@ 0x47
 800a256:	2101      	movs	r1, #1
 800a258:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	223d      	movs	r2, #61	@ 0x3d
 800a25e:	2101      	movs	r1, #1
 800a260:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	0018      	movs	r0, r3
 800a266:	46bd      	mov	sp, r7
 800a268:	b002      	add	sp, #8
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	0800a271 	.word	0x0800a271

0800a270 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a278:	46c0      	nop			@ (mov r8, r8)
 800a27a:	46bd      	mov	sp, r7
 800a27c:	b002      	add	sp, #8
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a28a:	230f      	movs	r3, #15
 800a28c:	18fb      	adds	r3, r7, r3
 800a28e:	2200      	movs	r2, #0
 800a290:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d104      	bne.n	800a2a2 <HAL_TIM_IC_Start_IT+0x22>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	223e      	movs	r2, #62	@ 0x3e
 800a29c:	5c9b      	ldrb	r3, [r3, r2]
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	e023      	b.n	800a2ea <HAL_TIM_IC_Start_IT+0x6a>
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	2b04      	cmp	r3, #4
 800a2a6:	d104      	bne.n	800a2b2 <HAL_TIM_IC_Start_IT+0x32>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	223f      	movs	r2, #63	@ 0x3f
 800a2ac:	5c9b      	ldrb	r3, [r3, r2]
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	e01b      	b.n	800a2ea <HAL_TIM_IC_Start_IT+0x6a>
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	2b08      	cmp	r3, #8
 800a2b6:	d104      	bne.n	800a2c2 <HAL_TIM_IC_Start_IT+0x42>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2240      	movs	r2, #64	@ 0x40
 800a2bc:	5c9b      	ldrb	r3, [r3, r2]
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	e013      	b.n	800a2ea <HAL_TIM_IC_Start_IT+0x6a>
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	2b0c      	cmp	r3, #12
 800a2c6:	d104      	bne.n	800a2d2 <HAL_TIM_IC_Start_IT+0x52>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2241      	movs	r2, #65	@ 0x41
 800a2cc:	5c9b      	ldrb	r3, [r3, r2]
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	e00b      	b.n	800a2ea <HAL_TIM_IC_Start_IT+0x6a>
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	2b10      	cmp	r3, #16
 800a2d6:	d104      	bne.n	800a2e2 <HAL_TIM_IC_Start_IT+0x62>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2242      	movs	r2, #66	@ 0x42
 800a2dc:	5c9b      	ldrb	r3, [r3, r2]
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	e003      	b.n	800a2ea <HAL_TIM_IC_Start_IT+0x6a>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2243      	movs	r2, #67	@ 0x43
 800a2e6:	5c9b      	ldrb	r3, [r3, r2]
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	220e      	movs	r2, #14
 800a2ec:	18ba      	adds	r2, r7, r2
 800a2ee:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d104      	bne.n	800a300 <HAL_TIM_IC_Start_IT+0x80>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2244      	movs	r2, #68	@ 0x44
 800a2fa:	5c9b      	ldrb	r3, [r3, r2]
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	e013      	b.n	800a328 <HAL_TIM_IC_Start_IT+0xa8>
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	2b04      	cmp	r3, #4
 800a304:	d104      	bne.n	800a310 <HAL_TIM_IC_Start_IT+0x90>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2245      	movs	r2, #69	@ 0x45
 800a30a:	5c9b      	ldrb	r3, [r3, r2]
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	e00b      	b.n	800a328 <HAL_TIM_IC_Start_IT+0xa8>
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	2b08      	cmp	r3, #8
 800a314:	d104      	bne.n	800a320 <HAL_TIM_IC_Start_IT+0xa0>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2246      	movs	r2, #70	@ 0x46
 800a31a:	5c9b      	ldrb	r3, [r3, r2]
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	e003      	b.n	800a328 <HAL_TIM_IC_Start_IT+0xa8>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2247      	movs	r2, #71	@ 0x47
 800a324:	5c9b      	ldrb	r3, [r3, r2]
 800a326:	b2db      	uxtb	r3, r3
 800a328:	210d      	movs	r1, #13
 800a32a:	187a      	adds	r2, r7, r1
 800a32c:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a32e:	230e      	movs	r3, #14
 800a330:	18fb      	adds	r3, r7, r3
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d103      	bne.n	800a340 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a338:	187b      	adds	r3, r7, r1
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d001      	beq.n	800a344 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 800a340:	2301      	movs	r3, #1
 800a342:	e0c3      	b.n	800a4cc <HAL_TIM_IC_Start_IT+0x24c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d104      	bne.n	800a354 <HAL_TIM_IC_Start_IT+0xd4>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	223e      	movs	r2, #62	@ 0x3e
 800a34e:	2102      	movs	r1, #2
 800a350:	5499      	strb	r1, [r3, r2]
 800a352:	e023      	b.n	800a39c <HAL_TIM_IC_Start_IT+0x11c>
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	2b04      	cmp	r3, #4
 800a358:	d104      	bne.n	800a364 <HAL_TIM_IC_Start_IT+0xe4>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	223f      	movs	r2, #63	@ 0x3f
 800a35e:	2102      	movs	r1, #2
 800a360:	5499      	strb	r1, [r3, r2]
 800a362:	e01b      	b.n	800a39c <HAL_TIM_IC_Start_IT+0x11c>
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	2b08      	cmp	r3, #8
 800a368:	d104      	bne.n	800a374 <HAL_TIM_IC_Start_IT+0xf4>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2240      	movs	r2, #64	@ 0x40
 800a36e:	2102      	movs	r1, #2
 800a370:	5499      	strb	r1, [r3, r2]
 800a372:	e013      	b.n	800a39c <HAL_TIM_IC_Start_IT+0x11c>
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2b0c      	cmp	r3, #12
 800a378:	d104      	bne.n	800a384 <HAL_TIM_IC_Start_IT+0x104>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2241      	movs	r2, #65	@ 0x41
 800a37e:	2102      	movs	r1, #2
 800a380:	5499      	strb	r1, [r3, r2]
 800a382:	e00b      	b.n	800a39c <HAL_TIM_IC_Start_IT+0x11c>
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	2b10      	cmp	r3, #16
 800a388:	d104      	bne.n	800a394 <HAL_TIM_IC_Start_IT+0x114>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2242      	movs	r2, #66	@ 0x42
 800a38e:	2102      	movs	r1, #2
 800a390:	5499      	strb	r1, [r3, r2]
 800a392:	e003      	b.n	800a39c <HAL_TIM_IC_Start_IT+0x11c>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2243      	movs	r2, #67	@ 0x43
 800a398:	2102      	movs	r1, #2
 800a39a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d104      	bne.n	800a3ac <HAL_TIM_IC_Start_IT+0x12c>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2244      	movs	r2, #68	@ 0x44
 800a3a6:	2102      	movs	r1, #2
 800a3a8:	5499      	strb	r1, [r3, r2]
 800a3aa:	e013      	b.n	800a3d4 <HAL_TIM_IC_Start_IT+0x154>
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	2b04      	cmp	r3, #4
 800a3b0:	d104      	bne.n	800a3bc <HAL_TIM_IC_Start_IT+0x13c>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2245      	movs	r2, #69	@ 0x45
 800a3b6:	2102      	movs	r1, #2
 800a3b8:	5499      	strb	r1, [r3, r2]
 800a3ba:	e00b      	b.n	800a3d4 <HAL_TIM_IC_Start_IT+0x154>
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	2b08      	cmp	r3, #8
 800a3c0:	d104      	bne.n	800a3cc <HAL_TIM_IC_Start_IT+0x14c>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2246      	movs	r2, #70	@ 0x46
 800a3c6:	2102      	movs	r1, #2
 800a3c8:	5499      	strb	r1, [r3, r2]
 800a3ca:	e003      	b.n	800a3d4 <HAL_TIM_IC_Start_IT+0x154>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2247      	movs	r2, #71	@ 0x47
 800a3d0:	2102      	movs	r1, #2
 800a3d2:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	2b0c      	cmp	r3, #12
 800a3d8:	d02a      	beq.n	800a430 <HAL_TIM_IC_Start_IT+0x1b0>
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	2b0c      	cmp	r3, #12
 800a3de:	d830      	bhi.n	800a442 <HAL_TIM_IC_Start_IT+0x1c2>
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	2b08      	cmp	r3, #8
 800a3e4:	d01b      	beq.n	800a41e <HAL_TIM_IC_Start_IT+0x19e>
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	2b08      	cmp	r3, #8
 800a3ea:	d82a      	bhi.n	800a442 <HAL_TIM_IC_Start_IT+0x1c2>
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d003      	beq.n	800a3fa <HAL_TIM_IC_Start_IT+0x17a>
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b04      	cmp	r3, #4
 800a3f6:	d009      	beq.n	800a40c <HAL_TIM_IC_Start_IT+0x18c>
 800a3f8:	e023      	b.n	800a442 <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68da      	ldr	r2, [r3, #12]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2102      	movs	r1, #2
 800a406:	430a      	orrs	r2, r1
 800a408:	60da      	str	r2, [r3, #12]
      break;
 800a40a:	e01f      	b.n	800a44c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68da      	ldr	r2, [r3, #12]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2104      	movs	r1, #4
 800a418:	430a      	orrs	r2, r1
 800a41a:	60da      	str	r2, [r3, #12]
      break;
 800a41c:	e016      	b.n	800a44c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68da      	ldr	r2, [r3, #12]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2108      	movs	r1, #8
 800a42a:	430a      	orrs	r2, r1
 800a42c:	60da      	str	r2, [r3, #12]
      break;
 800a42e:	e00d      	b.n	800a44c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68da      	ldr	r2, [r3, #12]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2110      	movs	r1, #16
 800a43c:	430a      	orrs	r2, r1
 800a43e:	60da      	str	r2, [r3, #12]
      break;
 800a440:	e004      	b.n	800a44c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 800a442:	230f      	movs	r3, #15
 800a444:	18fb      	adds	r3, r7, r3
 800a446:	2201      	movs	r2, #1
 800a448:	701a      	strb	r2, [r3, #0]
      break;
 800a44a:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800a44c:	230f      	movs	r3, #15
 800a44e:	18fb      	adds	r3, r7, r3
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d137      	bne.n	800a4c6 <HAL_TIM_IC_Start_IT+0x246>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	6839      	ldr	r1, [r7, #0]
 800a45c:	2201      	movs	r2, #1
 800a45e:	0018      	movs	r0, r3
 800a460:	f001 faa6 	bl	800b9b0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a1a      	ldr	r2, [pc, #104]	@ (800a4d4 <HAL_TIM_IC_Start_IT+0x254>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d00a      	beq.n	800a484 <HAL_TIM_IC_Start_IT+0x204>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	2380      	movs	r3, #128	@ 0x80
 800a474:	05db      	lsls	r3, r3, #23
 800a476:	429a      	cmp	r2, r3
 800a478:	d004      	beq.n	800a484 <HAL_TIM_IC_Start_IT+0x204>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a16      	ldr	r2, [pc, #88]	@ (800a4d8 <HAL_TIM_IC_Start_IT+0x258>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d116      	bne.n	800a4b2 <HAL_TIM_IC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	4a14      	ldr	r2, [pc, #80]	@ (800a4dc <HAL_TIM_IC_Start_IT+0x25c>)
 800a48c:	4013      	ands	r3, r2
 800a48e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	2b06      	cmp	r3, #6
 800a494:	d016      	beq.n	800a4c4 <HAL_TIM_IC_Start_IT+0x244>
 800a496:	68ba      	ldr	r2, [r7, #8]
 800a498:	2380      	movs	r3, #128	@ 0x80
 800a49a:	025b      	lsls	r3, r3, #9
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d011      	beq.n	800a4c4 <HAL_TIM_IC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2101      	movs	r1, #1
 800a4ac:	430a      	orrs	r2, r1
 800a4ae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4b0:	e008      	b.n	800a4c4 <HAL_TIM_IC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2101      	movs	r1, #1
 800a4be:	430a      	orrs	r2, r1
 800a4c0:	601a      	str	r2, [r3, #0]
 800a4c2:	e000      	b.n	800a4c6 <HAL_TIM_IC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4c4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800a4c6:	230f      	movs	r3, #15
 800a4c8:	18fb      	adds	r3, r7, r3
 800a4ca:	781b      	ldrb	r3, [r3, #0]
}
 800a4cc:	0018      	movs	r0, r3
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	b004      	add	sp, #16
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	40012c00 	.word	0x40012c00
 800a4d8:	40000400 	.word	0x40000400
 800a4dc:	00010007 	.word	0x00010007

0800a4e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	2202      	movs	r2, #2
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	d027      	beq.n	800a550 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2202      	movs	r2, #2
 800a504:	4013      	ands	r3, r2
 800a506:	d023      	beq.n	800a550 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2203      	movs	r2, #3
 800a50e:	4252      	negs	r2, r2
 800a510:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2201      	movs	r2, #1
 800a516:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	699b      	ldr	r3, [r3, #24]
 800a51e:	2203      	movs	r2, #3
 800a520:	4013      	ands	r3, r2
 800a522:	d006      	beq.n	800a532 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2294      	movs	r2, #148	@ 0x94
 800a528:	589b      	ldr	r3, [r3, r2]
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	0010      	movs	r0, r2
 800a52e:	4798      	blx	r3
 800a530:	e00b      	b.n	800a54a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	229c      	movs	r2, #156	@ 0x9c
 800a536:	589b      	ldr	r3, [r3, r2]
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	0010      	movs	r0, r2
 800a53c:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	22a0      	movs	r2, #160	@ 0xa0
 800a542:	589b      	ldr	r3, [r3, r2]
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	0010      	movs	r0, r2
 800a548:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	2204      	movs	r2, #4
 800a554:	4013      	ands	r3, r2
 800a556:	d028      	beq.n	800a5aa <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2204      	movs	r2, #4
 800a55c:	4013      	ands	r3, r2
 800a55e:	d024      	beq.n	800a5aa <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2205      	movs	r2, #5
 800a566:	4252      	negs	r2, r2
 800a568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2202      	movs	r2, #2
 800a56e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	699a      	ldr	r2, [r3, #24]
 800a576:	23c0      	movs	r3, #192	@ 0xc0
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4013      	ands	r3, r2
 800a57c:	d006      	beq.n	800a58c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2294      	movs	r2, #148	@ 0x94
 800a582:	589b      	ldr	r3, [r3, r2]
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	0010      	movs	r0, r2
 800a588:	4798      	blx	r3
 800a58a:	e00b      	b.n	800a5a4 <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	229c      	movs	r2, #156	@ 0x9c
 800a590:	589b      	ldr	r3, [r3, r2]
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	0010      	movs	r0, r2
 800a596:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	22a0      	movs	r2, #160	@ 0xa0
 800a59c:	589b      	ldr	r3, [r3, r2]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	0010      	movs	r0, r2
 800a5a2:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	2208      	movs	r2, #8
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	d027      	beq.n	800a602 <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2208      	movs	r2, #8
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	d023      	beq.n	800a602 <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2209      	movs	r2, #9
 800a5c0:	4252      	negs	r2, r2
 800a5c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2204      	movs	r2, #4
 800a5c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	69db      	ldr	r3, [r3, #28]
 800a5d0:	2203      	movs	r2, #3
 800a5d2:	4013      	ands	r3, r2
 800a5d4:	d006      	beq.n	800a5e4 <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2294      	movs	r2, #148	@ 0x94
 800a5da:	589b      	ldr	r3, [r3, r2]
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	0010      	movs	r0, r2
 800a5e0:	4798      	blx	r3
 800a5e2:	e00b      	b.n	800a5fc <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	229c      	movs	r2, #156	@ 0x9c
 800a5e8:	589b      	ldr	r3, [r3, r2]
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	0010      	movs	r0, r2
 800a5ee:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	22a0      	movs	r2, #160	@ 0xa0
 800a5f4:	589b      	ldr	r3, [r3, r2]
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	0010      	movs	r0, r2
 800a5fa:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	2210      	movs	r2, #16
 800a606:	4013      	ands	r3, r2
 800a608:	d028      	beq.n	800a65c <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2210      	movs	r2, #16
 800a60e:	4013      	ands	r3, r2
 800a610:	d024      	beq.n	800a65c <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2211      	movs	r2, #17
 800a618:	4252      	negs	r2, r2
 800a61a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2208      	movs	r2, #8
 800a620:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	69da      	ldr	r2, [r3, #28]
 800a628:	23c0      	movs	r3, #192	@ 0xc0
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	4013      	ands	r3, r2
 800a62e:	d006      	beq.n	800a63e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2294      	movs	r2, #148	@ 0x94
 800a634:	589b      	ldr	r3, [r3, r2]
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	0010      	movs	r0, r2
 800a63a:	4798      	blx	r3
 800a63c:	e00b      	b.n	800a656 <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	229c      	movs	r2, #156	@ 0x9c
 800a642:	589b      	ldr	r3, [r3, r2]
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	0010      	movs	r0, r2
 800a648:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	22a0      	movs	r2, #160	@ 0xa0
 800a64e:	589b      	ldr	r3, [r3, r2]
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	0010      	movs	r0, r2
 800a654:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	2201      	movs	r2, #1
 800a660:	4013      	ands	r3, r2
 800a662:	d00e      	beq.n	800a682 <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2201      	movs	r2, #1
 800a668:	4013      	ands	r3, r2
 800a66a:	d00a      	beq.n	800a682 <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2202      	movs	r2, #2
 800a672:	4252      	negs	r2, r2
 800a674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2284      	movs	r2, #132	@ 0x84
 800a67a:	589b      	ldr	r3, [r3, r2]
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	0010      	movs	r0, r2
 800a680:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	2280      	movs	r2, #128	@ 0x80
 800a686:	4013      	ands	r3, r2
 800a688:	d104      	bne.n	800a694 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	2380      	movs	r3, #128	@ 0x80
 800a68e:	019b      	lsls	r3, r3, #6
 800a690:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a692:	d00d      	beq.n	800a6b0 <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2280      	movs	r2, #128	@ 0x80
 800a698:	4013      	ands	r3, r2
 800a69a:	d009      	beq.n	800a6b0 <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a22      	ldr	r2, [pc, #136]	@ (800a72c <HAL_TIM_IRQHandler+0x24c>)
 800a6a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	22b4      	movs	r2, #180	@ 0xb4
 800a6a8:	589b      	ldr	r3, [r3, r2]
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	0010      	movs	r0, r2
 800a6ae:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a6b0:	68ba      	ldr	r2, [r7, #8]
 800a6b2:	2380      	movs	r3, #128	@ 0x80
 800a6b4:	005b      	lsls	r3, r3, #1
 800a6b6:	4013      	ands	r3, r2
 800a6b8:	d00d      	beq.n	800a6d6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2280      	movs	r2, #128	@ 0x80
 800a6be:	4013      	ands	r3, r2
 800a6c0:	d009      	beq.n	800a6d6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4a1a      	ldr	r2, [pc, #104]	@ (800a730 <HAL_TIM_IRQHandler+0x250>)
 800a6c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	22b8      	movs	r2, #184	@ 0xb8
 800a6ce:	589b      	ldr	r3, [r3, r2]
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	0010      	movs	r0, r2
 800a6d4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	2240      	movs	r2, #64	@ 0x40
 800a6da:	4013      	ands	r3, r2
 800a6dc:	d00e      	beq.n	800a6fc <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2240      	movs	r2, #64	@ 0x40
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	d00a      	beq.n	800a6fc <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2241      	movs	r2, #65	@ 0x41
 800a6ec:	4252      	negs	r2, r2
 800a6ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	228c      	movs	r2, #140	@ 0x8c
 800a6f4:	589b      	ldr	r3, [r3, r2]
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	0010      	movs	r0, r2
 800a6fa:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	2220      	movs	r2, #32
 800a700:	4013      	ands	r3, r2
 800a702:	d00e      	beq.n	800a722 <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2220      	movs	r2, #32
 800a708:	4013      	ands	r3, r2
 800a70a:	d00a      	beq.n	800a722 <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2221      	movs	r2, #33	@ 0x21
 800a712:	4252      	negs	r2, r2
 800a714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	22ac      	movs	r2, #172	@ 0xac
 800a71a:	589b      	ldr	r3, [r3, r2]
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	0010      	movs	r0, r2
 800a720:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a722:	46c0      	nop			@ (mov r8, r8)
 800a724:	46bd      	mov	sp, r7
 800a726:	b004      	add	sp, #16
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	46c0      	nop			@ (mov r8, r8)
 800a72c:	ffffdf7f 	.word	0xffffdf7f
 800a730:	fffffeff 	.word	0xfffffeff

0800a734 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b086      	sub	sp, #24
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a740:	2317      	movs	r3, #23
 800a742:	18fb      	adds	r3, r7, r3
 800a744:	2200      	movs	r2, #0
 800a746:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	223c      	movs	r2, #60	@ 0x3c
 800a74c:	5c9b      	ldrb	r3, [r3, r2]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d101      	bne.n	800a756 <HAL_TIM_OC_ConfigChannel+0x22>
 800a752:	2302      	movs	r3, #2
 800a754:	e048      	b.n	800a7e8 <HAL_TIM_OC_ConfigChannel+0xb4>
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	223c      	movs	r2, #60	@ 0x3c
 800a75a:	2101      	movs	r1, #1
 800a75c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2b14      	cmp	r3, #20
 800a762:	d835      	bhi.n	800a7d0 <HAL_TIM_OC_ConfigChannel+0x9c>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	009a      	lsls	r2, r3, #2
 800a768:	4b21      	ldr	r3, [pc, #132]	@ (800a7f0 <HAL_TIM_OC_ConfigChannel+0xbc>)
 800a76a:	18d3      	adds	r3, r2, r3
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	68ba      	ldr	r2, [r7, #8]
 800a776:	0011      	movs	r1, r2
 800a778:	0018      	movs	r0, r3
 800a77a:	f000 fcc3 	bl	800b104 <TIM_OC1_SetConfig>
      break;
 800a77e:	e02c      	b.n	800a7da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	68ba      	ldr	r2, [r7, #8]
 800a786:	0011      	movs	r1, r2
 800a788:	0018      	movs	r0, r3
 800a78a:	f000 fd3b 	bl	800b204 <TIM_OC2_SetConfig>
      break;
 800a78e:	e024      	b.n	800a7da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	0011      	movs	r1, r2
 800a798:	0018      	movs	r0, r3
 800a79a:	f000 fdb1 	bl	800b300 <TIM_OC3_SetConfig>
      break;
 800a79e:	e01c      	b.n	800a7da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	68ba      	ldr	r2, [r7, #8]
 800a7a6:	0011      	movs	r1, r2
 800a7a8:	0018      	movs	r0, r3
 800a7aa:	f000 fe2b 	bl	800b404 <TIM_OC4_SetConfig>
      break;
 800a7ae:	e014      	b.n	800a7da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68ba      	ldr	r2, [r7, #8]
 800a7b6:	0011      	movs	r1, r2
 800a7b8:	0018      	movs	r0, r3
 800a7ba:	f000 fe87 	bl	800b4cc <TIM_OC5_SetConfig>
      break;
 800a7be:	e00c      	b.n	800a7da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	68ba      	ldr	r2, [r7, #8]
 800a7c6:	0011      	movs	r1, r2
 800a7c8:	0018      	movs	r0, r3
 800a7ca:	f000 fed9 	bl	800b580 <TIM_OC6_SetConfig>
      break;
 800a7ce:	e004      	b.n	800a7da <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a7d0:	2317      	movs	r3, #23
 800a7d2:	18fb      	adds	r3, r7, r3
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	701a      	strb	r2, [r3, #0]
      break;
 800a7d8:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	223c      	movs	r2, #60	@ 0x3c
 800a7de:	2100      	movs	r1, #0
 800a7e0:	5499      	strb	r1, [r3, r2]

  return status;
 800a7e2:	2317      	movs	r3, #23
 800a7e4:	18fb      	adds	r3, r7, r3
 800a7e6:	781b      	ldrb	r3, [r3, #0]
}
 800a7e8:	0018      	movs	r0, r3
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	b006      	add	sp, #24
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	0800dec4 	.word	0x0800dec4

0800a7f4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b086      	sub	sp, #24
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a800:	2317      	movs	r3, #23
 800a802:	18fb      	adds	r3, r7, r3
 800a804:	2200      	movs	r2, #0
 800a806:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	223c      	movs	r2, #60	@ 0x3c
 800a80c:	5c9b      	ldrb	r3, [r3, r2]
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d101      	bne.n	800a816 <HAL_TIM_IC_ConfigChannel+0x22>
 800a812:	2302      	movs	r3, #2
 800a814:	e08c      	b.n	800a930 <HAL_TIM_IC_ConfigChannel+0x13c>
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	223c      	movs	r2, #60	@ 0x3c
 800a81a:	2101      	movs	r1, #1
 800a81c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d11b      	bne.n	800a85c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800a834:	f000 ff02 	bl	800b63c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	699a      	ldr	r2, [r3, #24]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	210c      	movs	r1, #12
 800a844:	438a      	bics	r2, r1
 800a846:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	6999      	ldr	r1, [r3, #24]
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	689a      	ldr	r2, [r3, #8]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	430a      	orrs	r2, r1
 800a858:	619a      	str	r2, [r3, #24]
 800a85a:	e062      	b.n	800a922 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b04      	cmp	r3, #4
 800a860:	d11c      	bne.n	800a89c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800a872:	f000 ff67 	bl	800b744 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	699a      	ldr	r2, [r3, #24]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	492d      	ldr	r1, [pc, #180]	@ (800a938 <HAL_TIM_IC_ConfigChannel+0x144>)
 800a882:	400a      	ands	r2, r1
 800a884:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	6999      	ldr	r1, [r3, #24]
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	021a      	lsls	r2, r3, #8
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	430a      	orrs	r2, r1
 800a898:	619a      	str	r2, [r3, #24]
 800a89a:	e042      	b.n	800a922 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2b08      	cmp	r3, #8
 800a8a0:	d11b      	bne.n	800a8da <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800a8b2:	f000 ffbb 	bl	800b82c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	69da      	ldr	r2, [r3, #28]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	210c      	movs	r1, #12
 800a8c2:	438a      	bics	r2, r1
 800a8c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	69d9      	ldr	r1, [r3, #28]
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	689a      	ldr	r2, [r3, #8]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	430a      	orrs	r2, r1
 800a8d6:	61da      	str	r2, [r3, #28]
 800a8d8:	e023      	b.n	800a922 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2b0c      	cmp	r3, #12
 800a8de:	d11c      	bne.n	800a91a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800a8f0:	f000 ffdc 	bl	800b8ac <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	69da      	ldr	r2, [r3, #28]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	490e      	ldr	r1, [pc, #56]	@ (800a938 <HAL_TIM_IC_ConfigChannel+0x144>)
 800a900:	400a      	ands	r2, r1
 800a902:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	69d9      	ldr	r1, [r3, #28]
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	689b      	ldr	r3, [r3, #8]
 800a90e:	021a      	lsls	r2, r3, #8
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	430a      	orrs	r2, r1
 800a916:	61da      	str	r2, [r3, #28]
 800a918:	e003      	b.n	800a922 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800a91a:	2317      	movs	r3, #23
 800a91c:	18fb      	adds	r3, r7, r3
 800a91e:	2201      	movs	r2, #1
 800a920:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	223c      	movs	r2, #60	@ 0x3c
 800a926:	2100      	movs	r1, #0
 800a928:	5499      	strb	r1, [r3, r2]

  return status;
 800a92a:	2317      	movs	r3, #23
 800a92c:	18fb      	adds	r3, r7, r3
 800a92e:	781b      	ldrb	r3, [r3, #0]
}
 800a930:	0018      	movs	r0, r3
 800a932:	46bd      	mov	sp, r7
 800a934:	b006      	add	sp, #24
 800a936:	bd80      	pop	{r7, pc}
 800a938:	fffff3ff 	.word	0xfffff3ff

0800a93c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a948:	2317      	movs	r3, #23
 800a94a:	18fb      	adds	r3, r7, r3
 800a94c:	2200      	movs	r2, #0
 800a94e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	223c      	movs	r2, #60	@ 0x3c
 800a954:	5c9b      	ldrb	r3, [r3, r2]
 800a956:	2b01      	cmp	r3, #1
 800a958:	d101      	bne.n	800a95e <HAL_TIM_PWM_ConfigChannel+0x22>
 800a95a:	2302      	movs	r3, #2
 800a95c:	e0e5      	b.n	800ab2a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	223c      	movs	r2, #60	@ 0x3c
 800a962:	2101      	movs	r1, #1
 800a964:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2b14      	cmp	r3, #20
 800a96a:	d900      	bls.n	800a96e <HAL_TIM_PWM_ConfigChannel+0x32>
 800a96c:	e0d1      	b.n	800ab12 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	009a      	lsls	r2, r3, #2
 800a972:	4b70      	ldr	r3, [pc, #448]	@ (800ab34 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a974:	18d3      	adds	r3, r2, r3
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	68ba      	ldr	r2, [r7, #8]
 800a980:	0011      	movs	r1, r2
 800a982:	0018      	movs	r0, r3
 800a984:	f000 fbbe 	bl	800b104 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	699a      	ldr	r2, [r3, #24]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2108      	movs	r1, #8
 800a994:	430a      	orrs	r2, r1
 800a996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	699a      	ldr	r2, [r3, #24]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2104      	movs	r1, #4
 800a9a4:	438a      	bics	r2, r1
 800a9a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	6999      	ldr	r1, [r3, #24]
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	691a      	ldr	r2, [r3, #16]
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	430a      	orrs	r2, r1
 800a9b8:	619a      	str	r2, [r3, #24]
      break;
 800a9ba:	e0af      	b.n	800ab1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	68ba      	ldr	r2, [r7, #8]
 800a9c2:	0011      	movs	r1, r2
 800a9c4:	0018      	movs	r0, r3
 800a9c6:	f000 fc1d 	bl	800b204 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	699a      	ldr	r2, [r3, #24]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2180      	movs	r1, #128	@ 0x80
 800a9d6:	0109      	lsls	r1, r1, #4
 800a9d8:	430a      	orrs	r2, r1
 800a9da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	699a      	ldr	r2, [r3, #24]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4954      	ldr	r1, [pc, #336]	@ (800ab38 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a9e8:	400a      	ands	r2, r1
 800a9ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	6999      	ldr	r1, [r3, #24]
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	021a      	lsls	r2, r3, #8
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	430a      	orrs	r2, r1
 800a9fe:	619a      	str	r2, [r3, #24]
      break;
 800aa00:	e08c      	b.n	800ab1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	0011      	movs	r1, r2
 800aa0a:	0018      	movs	r0, r3
 800aa0c:	f000 fc78 	bl	800b300 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	69da      	ldr	r2, [r3, #28]
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2108      	movs	r1, #8
 800aa1c:	430a      	orrs	r2, r1
 800aa1e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	69da      	ldr	r2, [r3, #28]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2104      	movs	r1, #4
 800aa2c:	438a      	bics	r2, r1
 800aa2e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	69d9      	ldr	r1, [r3, #28]
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	691a      	ldr	r2, [r3, #16]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	430a      	orrs	r2, r1
 800aa40:	61da      	str	r2, [r3, #28]
      break;
 800aa42:	e06b      	b.n	800ab1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	0011      	movs	r1, r2
 800aa4c:	0018      	movs	r0, r3
 800aa4e:	f000 fcd9 	bl	800b404 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	69da      	ldr	r2, [r3, #28]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2180      	movs	r1, #128	@ 0x80
 800aa5e:	0109      	lsls	r1, r1, #4
 800aa60:	430a      	orrs	r2, r1
 800aa62:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	69da      	ldr	r2, [r3, #28]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4932      	ldr	r1, [pc, #200]	@ (800ab38 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800aa70:	400a      	ands	r2, r1
 800aa72:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	69d9      	ldr	r1, [r3, #28]
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	021a      	lsls	r2, r3, #8
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	430a      	orrs	r2, r1
 800aa86:	61da      	str	r2, [r3, #28]
      break;
 800aa88:	e048      	b.n	800ab1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	68ba      	ldr	r2, [r7, #8]
 800aa90:	0011      	movs	r1, r2
 800aa92:	0018      	movs	r0, r3
 800aa94:	f000 fd1a 	bl	800b4cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2108      	movs	r1, #8
 800aaa4:	430a      	orrs	r2, r1
 800aaa6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	2104      	movs	r1, #4
 800aab4:	438a      	bics	r2, r1
 800aab6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	691a      	ldr	r2, [r3, #16]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	430a      	orrs	r2, r1
 800aac8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800aaca:	e027      	b.n	800ab1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	68ba      	ldr	r2, [r7, #8]
 800aad2:	0011      	movs	r1, r2
 800aad4:	0018      	movs	r0, r3
 800aad6:	f000 fd53 	bl	800b580 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2180      	movs	r1, #128	@ 0x80
 800aae6:	0109      	lsls	r1, r1, #4
 800aae8:	430a      	orrs	r2, r1
 800aaea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4910      	ldr	r1, [pc, #64]	@ (800ab38 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800aaf8:	400a      	ands	r2, r1
 800aafa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	691b      	ldr	r3, [r3, #16]
 800ab06:	021a      	lsls	r2, r3, #8
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	430a      	orrs	r2, r1
 800ab0e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ab10:	e004      	b.n	800ab1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800ab12:	2317      	movs	r3, #23
 800ab14:	18fb      	adds	r3, r7, r3
 800ab16:	2201      	movs	r2, #1
 800ab18:	701a      	strb	r2, [r3, #0]
      break;
 800ab1a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	223c      	movs	r2, #60	@ 0x3c
 800ab20:	2100      	movs	r1, #0
 800ab22:	5499      	strb	r1, [r3, r2]

  return status;
 800ab24:	2317      	movs	r3, #23
 800ab26:	18fb      	adds	r3, r7, r3
 800ab28:	781b      	ldrb	r3, [r3, #0]
}
 800ab2a:	0018      	movs	r0, r3
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	b006      	add	sp, #24
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	46c0      	nop			@ (mov r8, r8)
 800ab34:	0800df18 	.word	0x0800df18
 800ab38:	fffffbff 	.word	0xfffffbff

0800ab3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab46:	230f      	movs	r3, #15
 800ab48:	18fb      	adds	r3, r7, r3
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	223c      	movs	r2, #60	@ 0x3c
 800ab52:	5c9b      	ldrb	r3, [r3, r2]
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d101      	bne.n	800ab5c <HAL_TIM_ConfigClockSource+0x20>
 800ab58:	2302      	movs	r3, #2
 800ab5a:	e0bc      	b.n	800acd6 <HAL_TIM_ConfigClockSource+0x19a>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	223c      	movs	r2, #60	@ 0x3c
 800ab60:	2101      	movs	r1, #1
 800ab62:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	223d      	movs	r2, #61	@ 0x3d
 800ab68:	2102      	movs	r1, #2
 800ab6a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	4a5a      	ldr	r2, [pc, #360]	@ (800ace0 <HAL_TIM_ConfigClockSource+0x1a4>)
 800ab78:	4013      	ands	r3, r2
 800ab7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	4a59      	ldr	r2, [pc, #356]	@ (800ace4 <HAL_TIM_ConfigClockSource+0x1a8>)
 800ab80:	4013      	ands	r3, r2
 800ab82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68ba      	ldr	r2, [r7, #8]
 800ab8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2280      	movs	r2, #128	@ 0x80
 800ab92:	0192      	lsls	r2, r2, #6
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d040      	beq.n	800ac1a <HAL_TIM_ConfigClockSource+0xde>
 800ab98:	2280      	movs	r2, #128	@ 0x80
 800ab9a:	0192      	lsls	r2, r2, #6
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d900      	bls.n	800aba2 <HAL_TIM_ConfigClockSource+0x66>
 800aba0:	e088      	b.n	800acb4 <HAL_TIM_ConfigClockSource+0x178>
 800aba2:	2280      	movs	r2, #128	@ 0x80
 800aba4:	0152      	lsls	r2, r2, #5
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d100      	bne.n	800abac <HAL_TIM_ConfigClockSource+0x70>
 800abaa:	e088      	b.n	800acbe <HAL_TIM_ConfigClockSource+0x182>
 800abac:	2280      	movs	r2, #128	@ 0x80
 800abae:	0152      	lsls	r2, r2, #5
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d900      	bls.n	800abb6 <HAL_TIM_ConfigClockSource+0x7a>
 800abb4:	e07e      	b.n	800acb4 <HAL_TIM_ConfigClockSource+0x178>
 800abb6:	2b70      	cmp	r3, #112	@ 0x70
 800abb8:	d018      	beq.n	800abec <HAL_TIM_ConfigClockSource+0xb0>
 800abba:	d900      	bls.n	800abbe <HAL_TIM_ConfigClockSource+0x82>
 800abbc:	e07a      	b.n	800acb4 <HAL_TIM_ConfigClockSource+0x178>
 800abbe:	2b60      	cmp	r3, #96	@ 0x60
 800abc0:	d04f      	beq.n	800ac62 <HAL_TIM_ConfigClockSource+0x126>
 800abc2:	d900      	bls.n	800abc6 <HAL_TIM_ConfigClockSource+0x8a>
 800abc4:	e076      	b.n	800acb4 <HAL_TIM_ConfigClockSource+0x178>
 800abc6:	2b50      	cmp	r3, #80	@ 0x50
 800abc8:	d03b      	beq.n	800ac42 <HAL_TIM_ConfigClockSource+0x106>
 800abca:	d900      	bls.n	800abce <HAL_TIM_ConfigClockSource+0x92>
 800abcc:	e072      	b.n	800acb4 <HAL_TIM_ConfigClockSource+0x178>
 800abce:	2b40      	cmp	r3, #64	@ 0x40
 800abd0:	d057      	beq.n	800ac82 <HAL_TIM_ConfigClockSource+0x146>
 800abd2:	d900      	bls.n	800abd6 <HAL_TIM_ConfigClockSource+0x9a>
 800abd4:	e06e      	b.n	800acb4 <HAL_TIM_ConfigClockSource+0x178>
 800abd6:	2b30      	cmp	r3, #48	@ 0x30
 800abd8:	d063      	beq.n	800aca2 <HAL_TIM_ConfigClockSource+0x166>
 800abda:	d86b      	bhi.n	800acb4 <HAL_TIM_ConfigClockSource+0x178>
 800abdc:	2b20      	cmp	r3, #32
 800abde:	d060      	beq.n	800aca2 <HAL_TIM_ConfigClockSource+0x166>
 800abe0:	d868      	bhi.n	800acb4 <HAL_TIM_ConfigClockSource+0x178>
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d05d      	beq.n	800aca2 <HAL_TIM_ConfigClockSource+0x166>
 800abe6:	2b10      	cmp	r3, #16
 800abe8:	d05b      	beq.n	800aca2 <HAL_TIM_ConfigClockSource+0x166>
 800abea:	e063      	b.n	800acb4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800abfc:	f000 feb8 	bl	800b970 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	2277      	movs	r2, #119	@ 0x77
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	68ba      	ldr	r2, [r7, #8]
 800ac16:	609a      	str	r2, [r3, #8]
      break;
 800ac18:	e052      	b.n	800acc0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ac2a:	f000 fea1 	bl	800b970 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	689a      	ldr	r2, [r3, #8]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2180      	movs	r1, #128	@ 0x80
 800ac3a:	01c9      	lsls	r1, r1, #7
 800ac3c:	430a      	orrs	r2, r1
 800ac3e:	609a      	str	r2, [r3, #8]
      break;
 800ac40:	e03e      	b.n	800acc0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac4e:	001a      	movs	r2, r3
 800ac50:	f000 fd4a 	bl	800b6e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2150      	movs	r1, #80	@ 0x50
 800ac5a:	0018      	movs	r0, r3
 800ac5c:	f000 fe6c 	bl	800b938 <TIM_ITRx_SetConfig>
      break;
 800ac60:	e02e      	b.n	800acc0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac6e:	001a      	movs	r2, r3
 800ac70:	f000 fdaa 	bl	800b7c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2160      	movs	r1, #96	@ 0x60
 800ac7a:	0018      	movs	r0, r3
 800ac7c:	f000 fe5c 	bl	800b938 <TIM_ITRx_SetConfig>
      break;
 800ac80:	e01e      	b.n	800acc0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac8e:	001a      	movs	r2, r3
 800ac90:	f000 fd2a 	bl	800b6e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2140      	movs	r1, #64	@ 0x40
 800ac9a:	0018      	movs	r0, r3
 800ac9c:	f000 fe4c 	bl	800b938 <TIM_ITRx_SetConfig>
      break;
 800aca0:	e00e      	b.n	800acc0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	0019      	movs	r1, r3
 800acac:	0010      	movs	r0, r2
 800acae:	f000 fe43 	bl	800b938 <TIM_ITRx_SetConfig>
      break;
 800acb2:	e005      	b.n	800acc0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800acb4:	230f      	movs	r3, #15
 800acb6:	18fb      	adds	r3, r7, r3
 800acb8:	2201      	movs	r2, #1
 800acba:	701a      	strb	r2, [r3, #0]
      break;
 800acbc:	e000      	b.n	800acc0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800acbe:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	223d      	movs	r2, #61	@ 0x3d
 800acc4:	2101      	movs	r1, #1
 800acc6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	223c      	movs	r2, #60	@ 0x3c
 800accc:	2100      	movs	r1, #0
 800acce:	5499      	strb	r1, [r3, r2]

  return status;
 800acd0:	230f      	movs	r3, #15
 800acd2:	18fb      	adds	r3, r7, r3
 800acd4:	781b      	ldrb	r3, [r3, #0]
}
 800acd6:	0018      	movs	r0, r3
 800acd8:	46bd      	mov	sp, r7
 800acda:	b004      	add	sp, #16
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	46c0      	nop			@ (mov r8, r8)
 800ace0:	ffceff88 	.word	0xffceff88
 800ace4:	ffff00ff 	.word	0xffff00ff

0800ace8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800acf2:	2300      	movs	r3, #0
 800acf4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	2b0c      	cmp	r3, #12
 800acfa:	d01e      	beq.n	800ad3a <HAL_TIM_ReadCapturedValue+0x52>
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	2b0c      	cmp	r3, #12
 800ad00:	d820      	bhi.n	800ad44 <HAL_TIM_ReadCapturedValue+0x5c>
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	2b08      	cmp	r3, #8
 800ad06:	d013      	beq.n	800ad30 <HAL_TIM_ReadCapturedValue+0x48>
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	2b08      	cmp	r3, #8
 800ad0c:	d81a      	bhi.n	800ad44 <HAL_TIM_ReadCapturedValue+0x5c>
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d003      	beq.n	800ad1c <HAL_TIM_ReadCapturedValue+0x34>
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	2b04      	cmp	r3, #4
 800ad18:	d005      	beq.n	800ad26 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800ad1a:	e013      	b.n	800ad44 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad22:	60fb      	str	r3, [r7, #12]
      break;
 800ad24:	e00f      	b.n	800ad46 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad2c:	60fb      	str	r3, [r7, #12]
      break;
 800ad2e:	e00a      	b.n	800ad46 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad36:	60fb      	str	r3, [r7, #12]
      break;
 800ad38:	e005      	b.n	800ad46 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad40:	60fb      	str	r3, [r7, #12]
      break;
 800ad42:	e000      	b.n	800ad46 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 800ad44:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 800ad46:	68fb      	ldr	r3, [r7, #12]
}
 800ad48:	0018      	movs	r0, r3
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	b004      	add	sp, #16
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ad58:	46c0      	nop			@ (mov r8, r8)
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	b002      	add	sp, #8
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800ad68:	46c0      	nop			@ (mov r8, r8)
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	b002      	add	sp, #8
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad78:	46c0      	nop			@ (mov r8, r8)
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	b002      	add	sp, #8
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad88:	46c0      	nop			@ (mov r8, r8)
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	b002      	add	sp, #8
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800ad98:	46c0      	nop			@ (mov r8, r8)
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	b002      	add	sp, #8
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ada8:	46c0      	nop			@ (mov r8, r8)
 800adaa:	46bd      	mov	sp, r7
 800adac:	b002      	add	sp, #8
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800adb8:	46c0      	nop			@ (mov r8, r8)
 800adba:	46bd      	mov	sp, r7
 800adbc:	b002      	add	sp, #8
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800adc8:	46c0      	nop			@ (mov r8, r8)
 800adca:	46bd      	mov	sp, r7
 800adcc:	b002      	add	sp, #8
 800adce:	bd80      	pop	{r7, pc}

0800add0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800add8:	46c0      	nop			@ (mov r8, r8)
 800adda:	46bd      	mov	sp, r7
 800addc:	b002      	add	sp, #8
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ade8:	46c0      	nop			@ (mov r8, r8)
 800adea:	46bd      	mov	sp, r7
 800adec:	b002      	add	sp, #8
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b086      	sub	sp, #24
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	607a      	str	r2, [r7, #4]
 800adfa:	230b      	movs	r3, #11
 800adfc:	18fb      	adds	r3, r7, r3
 800adfe:	1c0a      	adds	r2, r1, #0
 800ae00:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae02:	2317      	movs	r3, #23
 800ae04:	18fb      	adds	r3, r7, r3
 800ae06:	2200      	movs	r2, #0
 800ae08:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d101      	bne.n	800ae14 <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 800ae10:	2301      	movs	r3, #1
 800ae12:	e0ea      	b.n	800afea <HAL_TIM_RegisterCallback+0x1fa>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	223d      	movs	r2, #61	@ 0x3d
 800ae18:	5c9b      	ldrb	r3, [r3, r2]
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d000      	beq.n	800ae22 <HAL_TIM_RegisterCallback+0x32>
 800ae20:	e08e      	b.n	800af40 <HAL_TIM_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800ae22:	230b      	movs	r3, #11
 800ae24:	18fb      	adds	r3, r7, r3
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	2b1b      	cmp	r3, #27
 800ae2a:	d900      	bls.n	800ae2e <HAL_TIM_RegisterCallback+0x3e>
 800ae2c:	e083      	b.n	800af36 <HAL_TIM_RegisterCallback+0x146>
 800ae2e:	009a      	lsls	r2, r3, #2
 800ae30:	4b70      	ldr	r3, [pc, #448]	@ (800aff4 <HAL_TIM_RegisterCallback+0x204>)
 800ae32:	18d3      	adds	r3, r2, r3
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800ae3e:	e0d1      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800ae46:	e0cd      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800ae4e:	e0c9      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800ae56:	e0c5      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800ae5e:	e0c1      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800ae66:	e0bd      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800ae6e:	e0b9      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800ae76:	e0b5      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800ae7e:	e0b1      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800ae86:	e0ad      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800ae8e:	e0a9      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800ae96:	e0a5      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800ae9e:	e0a1      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2180      	movs	r1, #128	@ 0x80
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	505a      	str	r2, [r3, r1]
        break;
 800aea8:	e09c      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2184      	movs	r1, #132	@ 0x84
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	505a      	str	r2, [r3, r1]
        break;
 800aeb2:	e097      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2188      	movs	r1, #136	@ 0x88
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	505a      	str	r2, [r3, r1]
        break;
 800aebc:	e092      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	218c      	movs	r1, #140	@ 0x8c
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	505a      	str	r2, [r3, r1]
        break;
 800aec6:	e08d      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2190      	movs	r1, #144	@ 0x90
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	505a      	str	r2, [r3, r1]
        break;
 800aed0:	e088      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2194      	movs	r1, #148	@ 0x94
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	505a      	str	r2, [r3, r1]
        break;
 800aeda:	e083      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2198      	movs	r1, #152	@ 0x98
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	505a      	str	r2, [r3, r1]
        break;
 800aee4:	e07e      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	219c      	movs	r1, #156	@ 0x9c
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	505a      	str	r2, [r3, r1]
        break;
 800aeee:	e079      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	21a0      	movs	r1, #160	@ 0xa0
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	505a      	str	r2, [r3, r1]
        break;
 800aef8:	e074      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	21a4      	movs	r1, #164	@ 0xa4
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	505a      	str	r2, [r3, r1]
        break;
 800af02:	e06f      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	21a8      	movs	r1, #168	@ 0xa8
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	505a      	str	r2, [r3, r1]
        break;
 800af0c:	e06a      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	21ac      	movs	r1, #172	@ 0xac
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	505a      	str	r2, [r3, r1]
        break;
 800af16:	e065      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	21b0      	movs	r1, #176	@ 0xb0
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	505a      	str	r2, [r3, r1]
        break;
 800af20:	e060      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	21b4      	movs	r1, #180	@ 0xb4
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	505a      	str	r2, [r3, r1]
        break;
 800af2a:	e05b      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	21b8      	movs	r1, #184	@ 0xb8
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	505a      	str	r2, [r3, r1]
        break;
 800af34:	e056      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800af36:	2317      	movs	r3, #23
 800af38:	18fb      	adds	r3, r7, r3
 800af3a:	2201      	movs	r2, #1
 800af3c:	701a      	strb	r2, [r3, #0]
        break;
 800af3e:	e051      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	223d      	movs	r2, #61	@ 0x3d
 800af44:	5c9b      	ldrb	r3, [r3, r2]
 800af46:	b2db      	uxtb	r3, r3
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d147      	bne.n	800afdc <HAL_TIM_RegisterCallback+0x1ec>
  {
    switch (CallbackID)
 800af4c:	230b      	movs	r3, #11
 800af4e:	18fb      	adds	r3, r7, r3
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	2b0d      	cmp	r3, #13
 800af54:	d83d      	bhi.n	800afd2 <HAL_TIM_RegisterCallback+0x1e2>
 800af56:	009a      	lsls	r2, r3, #2
 800af58:	4b27      	ldr	r3, [pc, #156]	@ (800aff8 <HAL_TIM_RegisterCallback+0x208>)
 800af5a:	18d3      	adds	r3, r2, r3
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800af66:	e03d      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800af6e:	e039      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800af76:	e035      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800af7e:	e031      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800af86:	e02d      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800af8e:	e029      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800af96:	e025      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800af9e:	e021      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800afa6:	e01d      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800afae:	e019      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800afb6:	e015      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800afbe:	e011      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800afc6:	e00d      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2180      	movs	r1, #128	@ 0x80
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	505a      	str	r2, [r3, r1]
        break;
 800afd0:	e008      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800afd2:	2317      	movs	r3, #23
 800afd4:	18fb      	adds	r3, r7, r3
 800afd6:	2201      	movs	r2, #1
 800afd8:	701a      	strb	r2, [r3, #0]
        break;
 800afda:	e003      	b.n	800afe4 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800afdc:	2317      	movs	r3, #23
 800afde:	18fb      	adds	r3, r7, r3
 800afe0:	2201      	movs	r2, #1
 800afe2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800afe4:	2317      	movs	r3, #23
 800afe6:	18fb      	adds	r3, r7, r3
 800afe8:	781b      	ldrb	r3, [r3, #0]
}
 800afea:	0018      	movs	r0, r3
 800afec:	46bd      	mov	sp, r7
 800afee:	b006      	add	sp, #24
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	46c0      	nop			@ (mov r8, r8)
 800aff4:	0800df6c 	.word	0x0800df6c
 800aff8:	0800dfdc 	.word	0x0800dfdc

0800affc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	4a37      	ldr	r2, [pc, #220]	@ (800b0ec <TIM_Base_SetConfig+0xf0>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d008      	beq.n	800b026 <TIM_Base_SetConfig+0x2a>
 800b014:	687a      	ldr	r2, [r7, #4]
 800b016:	2380      	movs	r3, #128	@ 0x80
 800b018:	05db      	lsls	r3, r3, #23
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d003      	beq.n	800b026 <TIM_Base_SetConfig+0x2a>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	4a33      	ldr	r2, [pc, #204]	@ (800b0f0 <TIM_Base_SetConfig+0xf4>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d108      	bne.n	800b038 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2270      	movs	r2, #112	@ 0x70
 800b02a:	4393      	bics	r3, r2
 800b02c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	68fa      	ldr	r2, [r7, #12]
 800b034:	4313      	orrs	r3, r2
 800b036:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4a2c      	ldr	r2, [pc, #176]	@ (800b0ec <TIM_Base_SetConfig+0xf0>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d014      	beq.n	800b06a <TIM_Base_SetConfig+0x6e>
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	2380      	movs	r3, #128	@ 0x80
 800b044:	05db      	lsls	r3, r3, #23
 800b046:	429a      	cmp	r2, r3
 800b048:	d00f      	beq.n	800b06a <TIM_Base_SetConfig+0x6e>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4a28      	ldr	r2, [pc, #160]	@ (800b0f0 <TIM_Base_SetConfig+0xf4>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d00b      	beq.n	800b06a <TIM_Base_SetConfig+0x6e>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4a27      	ldr	r2, [pc, #156]	@ (800b0f4 <TIM_Base_SetConfig+0xf8>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d007      	beq.n	800b06a <TIM_Base_SetConfig+0x6e>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4a26      	ldr	r2, [pc, #152]	@ (800b0f8 <TIM_Base_SetConfig+0xfc>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d003      	beq.n	800b06a <TIM_Base_SetConfig+0x6e>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	4a25      	ldr	r2, [pc, #148]	@ (800b0fc <TIM_Base_SetConfig+0x100>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d108      	bne.n	800b07c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	4a24      	ldr	r2, [pc, #144]	@ (800b100 <TIM_Base_SetConfig+0x104>)
 800b06e:	4013      	ands	r3, r2
 800b070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	4313      	orrs	r3, r2
 800b07a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2280      	movs	r2, #128	@ 0x80
 800b080:	4393      	bics	r3, r2
 800b082:	001a      	movs	r2, r3
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	695b      	ldr	r3, [r3, #20]
 800b088:	4313      	orrs	r3, r2
 800b08a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	689a      	ldr	r2, [r3, #8]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	4a11      	ldr	r2, [pc, #68]	@ (800b0ec <TIM_Base_SetConfig+0xf0>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d007      	beq.n	800b0ba <TIM_Base_SetConfig+0xbe>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4a12      	ldr	r2, [pc, #72]	@ (800b0f8 <TIM_Base_SetConfig+0xfc>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d003      	beq.n	800b0ba <TIM_Base_SetConfig+0xbe>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	4a11      	ldr	r2, [pc, #68]	@ (800b0fc <TIM_Base_SetConfig+0x100>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d103      	bne.n	800b0c2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	691a      	ldr	r2, [r3, #16]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	691b      	ldr	r3, [r3, #16]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	4013      	ands	r3, r2
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d106      	bne.n	800b0e2 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	4393      	bics	r3, r2
 800b0dc:	001a      	movs	r2, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	611a      	str	r2, [r3, #16]
  }
}
 800b0e2:	46c0      	nop			@ (mov r8, r8)
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	b004      	add	sp, #16
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	46c0      	nop			@ (mov r8, r8)
 800b0ec:	40012c00 	.word	0x40012c00
 800b0f0:	40000400 	.word	0x40000400
 800b0f4:	40002000 	.word	0x40002000
 800b0f8:	40014400 	.word	0x40014400
 800b0fc:	40014800 	.word	0x40014800
 800b100:	fffffcff 	.word	0xfffffcff

0800b104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b086      	sub	sp, #24
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6a1b      	ldr	r3, [r3, #32]
 800b112:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6a1b      	ldr	r3, [r3, #32]
 800b118:	2201      	movs	r2, #1
 800b11a:	4393      	bics	r3, r2
 800b11c:	001a      	movs	r2, r3
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	699b      	ldr	r3, [r3, #24]
 800b12c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	4a2e      	ldr	r2, [pc, #184]	@ (800b1ec <TIM_OC1_SetConfig+0xe8>)
 800b132:	4013      	ands	r3, r2
 800b134:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2203      	movs	r2, #3
 800b13a:	4393      	bics	r3, r2
 800b13c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	4313      	orrs	r3, r2
 800b146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	2202      	movs	r2, #2
 800b14c:	4393      	bics	r3, r2
 800b14e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	697a      	ldr	r2, [r7, #20]
 800b156:	4313      	orrs	r3, r2
 800b158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4a24      	ldr	r2, [pc, #144]	@ (800b1f0 <TIM_OC1_SetConfig+0xec>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d007      	beq.n	800b172 <TIM_OC1_SetConfig+0x6e>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4a23      	ldr	r2, [pc, #140]	@ (800b1f4 <TIM_OC1_SetConfig+0xf0>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d003      	beq.n	800b172 <TIM_OC1_SetConfig+0x6e>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4a22      	ldr	r2, [pc, #136]	@ (800b1f8 <TIM_OC1_SetConfig+0xf4>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d10c      	bne.n	800b18c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	2208      	movs	r2, #8
 800b176:	4393      	bics	r3, r2
 800b178:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	697a      	ldr	r2, [r7, #20]
 800b180:	4313      	orrs	r3, r2
 800b182:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	2204      	movs	r2, #4
 800b188:	4393      	bics	r3, r2
 800b18a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	4a18      	ldr	r2, [pc, #96]	@ (800b1f0 <TIM_OC1_SetConfig+0xec>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d007      	beq.n	800b1a4 <TIM_OC1_SetConfig+0xa0>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	4a17      	ldr	r2, [pc, #92]	@ (800b1f4 <TIM_OC1_SetConfig+0xf0>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d003      	beq.n	800b1a4 <TIM_OC1_SetConfig+0xa0>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4a16      	ldr	r2, [pc, #88]	@ (800b1f8 <TIM_OC1_SetConfig+0xf4>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d111      	bne.n	800b1c8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	4a15      	ldr	r2, [pc, #84]	@ (800b1fc <TIM_OC1_SetConfig+0xf8>)
 800b1a8:	4013      	ands	r3, r2
 800b1aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	4a14      	ldr	r2, [pc, #80]	@ (800b200 <TIM_OC1_SetConfig+0xfc>)
 800b1b0:	4013      	ands	r3, r2
 800b1b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	695b      	ldr	r3, [r3, #20]
 800b1b8:	693a      	ldr	r2, [r7, #16]
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	699b      	ldr	r3, [r3, #24]
 800b1c2:	693a      	ldr	r2, [r7, #16]
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	693a      	ldr	r2, [r7, #16]
 800b1cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	685a      	ldr	r2, [r3, #4]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	697a      	ldr	r2, [r7, #20]
 800b1e0:	621a      	str	r2, [r3, #32]
}
 800b1e2:	46c0      	nop			@ (mov r8, r8)
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	b006      	add	sp, #24
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	46c0      	nop			@ (mov r8, r8)
 800b1ec:	fffeff8f 	.word	0xfffeff8f
 800b1f0:	40012c00 	.word	0x40012c00
 800b1f4:	40014400 	.word	0x40014400
 800b1f8:	40014800 	.word	0x40014800
 800b1fc:	fffffeff 	.word	0xfffffeff
 800b200:	fffffdff 	.word	0xfffffdff

0800b204 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b086      	sub	sp, #24
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6a1b      	ldr	r3, [r3, #32]
 800b212:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6a1b      	ldr	r3, [r3, #32]
 800b218:	2210      	movs	r2, #16
 800b21a:	4393      	bics	r3, r2
 800b21c:	001a      	movs	r2, r3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	699b      	ldr	r3, [r3, #24]
 800b22c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	4a2c      	ldr	r2, [pc, #176]	@ (800b2e4 <TIM_OC2_SetConfig+0xe0>)
 800b232:	4013      	ands	r3, r2
 800b234:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	4a2b      	ldr	r2, [pc, #172]	@ (800b2e8 <TIM_OC2_SetConfig+0xe4>)
 800b23a:	4013      	ands	r3, r2
 800b23c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	021b      	lsls	r3, r3, #8
 800b244:	68fa      	ldr	r2, [r7, #12]
 800b246:	4313      	orrs	r3, r2
 800b248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	2220      	movs	r2, #32
 800b24e:	4393      	bics	r3, r2
 800b250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	011b      	lsls	r3, r3, #4
 800b258:	697a      	ldr	r2, [r7, #20]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4a22      	ldr	r2, [pc, #136]	@ (800b2ec <TIM_OC2_SetConfig+0xe8>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d10d      	bne.n	800b282 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	2280      	movs	r2, #128	@ 0x80
 800b26a:	4393      	bics	r3, r2
 800b26c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	011b      	lsls	r3, r3, #4
 800b274:	697a      	ldr	r2, [r7, #20]
 800b276:	4313      	orrs	r3, r2
 800b278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	2240      	movs	r2, #64	@ 0x40
 800b27e:	4393      	bics	r3, r2
 800b280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4a19      	ldr	r2, [pc, #100]	@ (800b2ec <TIM_OC2_SetConfig+0xe8>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d007      	beq.n	800b29a <TIM_OC2_SetConfig+0x96>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	4a18      	ldr	r2, [pc, #96]	@ (800b2f0 <TIM_OC2_SetConfig+0xec>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d003      	beq.n	800b29a <TIM_OC2_SetConfig+0x96>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	4a17      	ldr	r2, [pc, #92]	@ (800b2f4 <TIM_OC2_SetConfig+0xf0>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d113      	bne.n	800b2c2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	4a16      	ldr	r2, [pc, #88]	@ (800b2f8 <TIM_OC2_SetConfig+0xf4>)
 800b29e:	4013      	ands	r3, r2
 800b2a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	4a15      	ldr	r2, [pc, #84]	@ (800b2fc <TIM_OC2_SetConfig+0xf8>)
 800b2a6:	4013      	ands	r3, r2
 800b2a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	695b      	ldr	r3, [r3, #20]
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	693a      	ldr	r2, [r7, #16]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	699b      	ldr	r3, [r3, #24]
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	693a      	ldr	r2, [r7, #16]
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	693a      	ldr	r2, [r7, #16]
 800b2c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	68fa      	ldr	r2, [r7, #12]
 800b2cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	685a      	ldr	r2, [r3, #4]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	697a      	ldr	r2, [r7, #20]
 800b2da:	621a      	str	r2, [r3, #32]
}
 800b2dc:	46c0      	nop			@ (mov r8, r8)
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	b006      	add	sp, #24
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	feff8fff 	.word	0xfeff8fff
 800b2e8:	fffffcff 	.word	0xfffffcff
 800b2ec:	40012c00 	.word	0x40012c00
 800b2f0:	40014400 	.word	0x40014400
 800b2f4:	40014800 	.word	0x40014800
 800b2f8:	fffffbff 	.word	0xfffffbff
 800b2fc:	fffff7ff 	.word	0xfffff7ff

0800b300 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b086      	sub	sp, #24
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a1b      	ldr	r3, [r3, #32]
 800b30e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6a1b      	ldr	r3, [r3, #32]
 800b314:	4a31      	ldr	r2, [pc, #196]	@ (800b3dc <TIM_OC3_SetConfig+0xdc>)
 800b316:	401a      	ands	r2, r3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	69db      	ldr	r3, [r3, #28]
 800b326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	4a2d      	ldr	r2, [pc, #180]	@ (800b3e0 <TIM_OC3_SetConfig+0xe0>)
 800b32c:	4013      	ands	r3, r2
 800b32e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2203      	movs	r2, #3
 800b334:	4393      	bics	r3, r2
 800b336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	4313      	orrs	r3, r2
 800b340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	4a27      	ldr	r2, [pc, #156]	@ (800b3e4 <TIM_OC3_SetConfig+0xe4>)
 800b346:	4013      	ands	r3, r2
 800b348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	021b      	lsls	r3, r3, #8
 800b350:	697a      	ldr	r2, [r7, #20]
 800b352:	4313      	orrs	r3, r2
 800b354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	4a23      	ldr	r2, [pc, #140]	@ (800b3e8 <TIM_OC3_SetConfig+0xe8>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d10d      	bne.n	800b37a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	4a22      	ldr	r2, [pc, #136]	@ (800b3ec <TIM_OC3_SetConfig+0xec>)
 800b362:	4013      	ands	r3, r2
 800b364:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	68db      	ldr	r3, [r3, #12]
 800b36a:	021b      	lsls	r3, r3, #8
 800b36c:	697a      	ldr	r2, [r7, #20]
 800b36e:	4313      	orrs	r3, r2
 800b370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	4a1e      	ldr	r2, [pc, #120]	@ (800b3f0 <TIM_OC3_SetConfig+0xf0>)
 800b376:	4013      	ands	r3, r2
 800b378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4a1a      	ldr	r2, [pc, #104]	@ (800b3e8 <TIM_OC3_SetConfig+0xe8>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d007      	beq.n	800b392 <TIM_OC3_SetConfig+0x92>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	4a1b      	ldr	r2, [pc, #108]	@ (800b3f4 <TIM_OC3_SetConfig+0xf4>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d003      	beq.n	800b392 <TIM_OC3_SetConfig+0x92>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	4a1a      	ldr	r2, [pc, #104]	@ (800b3f8 <TIM_OC3_SetConfig+0xf8>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d113      	bne.n	800b3ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	4a19      	ldr	r2, [pc, #100]	@ (800b3fc <TIM_OC3_SetConfig+0xfc>)
 800b396:	4013      	ands	r3, r2
 800b398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	4a18      	ldr	r2, [pc, #96]	@ (800b400 <TIM_OC3_SetConfig+0x100>)
 800b39e:	4013      	ands	r3, r2
 800b3a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	695b      	ldr	r3, [r3, #20]
 800b3a6:	011b      	lsls	r3, r3, #4
 800b3a8:	693a      	ldr	r2, [r7, #16]
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	699b      	ldr	r3, [r3, #24]
 800b3b2:	011b      	lsls	r3, r3, #4
 800b3b4:	693a      	ldr	r2, [r7, #16]
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	693a      	ldr	r2, [r7, #16]
 800b3be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	68fa      	ldr	r2, [r7, #12]
 800b3c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	685a      	ldr	r2, [r3, #4]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	697a      	ldr	r2, [r7, #20]
 800b3d2:	621a      	str	r2, [r3, #32]
}
 800b3d4:	46c0      	nop			@ (mov r8, r8)
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	b006      	add	sp, #24
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	fffffeff 	.word	0xfffffeff
 800b3e0:	fffeff8f 	.word	0xfffeff8f
 800b3e4:	fffffdff 	.word	0xfffffdff
 800b3e8:	40012c00 	.word	0x40012c00
 800b3ec:	fffff7ff 	.word	0xfffff7ff
 800b3f0:	fffffbff 	.word	0xfffffbff
 800b3f4:	40014400 	.word	0x40014400
 800b3f8:	40014800 	.word	0x40014800
 800b3fc:	ffffefff 	.word	0xffffefff
 800b400:	ffffdfff 	.word	0xffffdfff

0800b404 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b086      	sub	sp, #24
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6a1b      	ldr	r3, [r3, #32]
 800b412:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6a1b      	ldr	r3, [r3, #32]
 800b418:	4a24      	ldr	r2, [pc, #144]	@ (800b4ac <TIM_OC4_SetConfig+0xa8>)
 800b41a:	401a      	ands	r2, r3
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	69db      	ldr	r3, [r3, #28]
 800b42a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	4a20      	ldr	r2, [pc, #128]	@ (800b4b0 <TIM_OC4_SetConfig+0xac>)
 800b430:	4013      	ands	r3, r2
 800b432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	4a1f      	ldr	r2, [pc, #124]	@ (800b4b4 <TIM_OC4_SetConfig+0xb0>)
 800b438:	4013      	ands	r3, r2
 800b43a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	021b      	lsls	r3, r3, #8
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	4313      	orrs	r3, r2
 800b446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	4a1b      	ldr	r2, [pc, #108]	@ (800b4b8 <TIM_OC4_SetConfig+0xb4>)
 800b44c:	4013      	ands	r3, r2
 800b44e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	031b      	lsls	r3, r3, #12
 800b456:	693a      	ldr	r2, [r7, #16]
 800b458:	4313      	orrs	r3, r2
 800b45a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	4a17      	ldr	r2, [pc, #92]	@ (800b4bc <TIM_OC4_SetConfig+0xb8>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d007      	beq.n	800b474 <TIM_OC4_SetConfig+0x70>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	4a16      	ldr	r2, [pc, #88]	@ (800b4c0 <TIM_OC4_SetConfig+0xbc>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d003      	beq.n	800b474 <TIM_OC4_SetConfig+0x70>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4a15      	ldr	r2, [pc, #84]	@ (800b4c4 <TIM_OC4_SetConfig+0xc0>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d109      	bne.n	800b488 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	4a14      	ldr	r2, [pc, #80]	@ (800b4c8 <TIM_OC4_SetConfig+0xc4>)
 800b478:	4013      	ands	r3, r2
 800b47a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	695b      	ldr	r3, [r3, #20]
 800b480:	019b      	lsls	r3, r3, #6
 800b482:	697a      	ldr	r2, [r7, #20]
 800b484:	4313      	orrs	r3, r2
 800b486:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	697a      	ldr	r2, [r7, #20]
 800b48c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	685a      	ldr	r2, [r3, #4]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	693a      	ldr	r2, [r7, #16]
 800b4a0:	621a      	str	r2, [r3, #32]
}
 800b4a2:	46c0      	nop			@ (mov r8, r8)
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	b006      	add	sp, #24
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	46c0      	nop			@ (mov r8, r8)
 800b4ac:	ffffefff 	.word	0xffffefff
 800b4b0:	feff8fff 	.word	0xfeff8fff
 800b4b4:	fffffcff 	.word	0xfffffcff
 800b4b8:	ffffdfff 	.word	0xffffdfff
 800b4bc:	40012c00 	.word	0x40012c00
 800b4c0:	40014400 	.word	0x40014400
 800b4c4:	40014800 	.word	0x40014800
 800b4c8:	ffffbfff 	.word	0xffffbfff

0800b4cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b086      	sub	sp, #24
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a1b      	ldr	r3, [r3, #32]
 800b4da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6a1b      	ldr	r3, [r3, #32]
 800b4e0:	4a21      	ldr	r2, [pc, #132]	@ (800b568 <TIM_OC5_SetConfig+0x9c>)
 800b4e2:	401a      	ands	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	4a1d      	ldr	r2, [pc, #116]	@ (800b56c <TIM_OC5_SetConfig+0xa0>)
 800b4f8:	4013      	ands	r3, r2
 800b4fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	4313      	orrs	r3, r2
 800b504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	4a19      	ldr	r2, [pc, #100]	@ (800b570 <TIM_OC5_SetConfig+0xa4>)
 800b50a:	4013      	ands	r3, r2
 800b50c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	041b      	lsls	r3, r3, #16
 800b514:	693a      	ldr	r2, [r7, #16]
 800b516:	4313      	orrs	r3, r2
 800b518:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	4a15      	ldr	r2, [pc, #84]	@ (800b574 <TIM_OC5_SetConfig+0xa8>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d007      	beq.n	800b532 <TIM_OC5_SetConfig+0x66>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	4a14      	ldr	r2, [pc, #80]	@ (800b578 <TIM_OC5_SetConfig+0xac>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d003      	beq.n	800b532 <TIM_OC5_SetConfig+0x66>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	4a13      	ldr	r2, [pc, #76]	@ (800b57c <TIM_OC5_SetConfig+0xb0>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d109      	bne.n	800b546 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	4a0c      	ldr	r2, [pc, #48]	@ (800b568 <TIM_OC5_SetConfig+0x9c>)
 800b536:	4013      	ands	r3, r2
 800b538:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	695b      	ldr	r3, [r3, #20]
 800b53e:	021b      	lsls	r3, r3, #8
 800b540:	697a      	ldr	r2, [r7, #20]
 800b542:	4313      	orrs	r3, r2
 800b544:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	697a      	ldr	r2, [r7, #20]
 800b54a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	68fa      	ldr	r2, [r7, #12]
 800b550:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	685a      	ldr	r2, [r3, #4]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	693a      	ldr	r2, [r7, #16]
 800b55e:	621a      	str	r2, [r3, #32]
}
 800b560:	46c0      	nop			@ (mov r8, r8)
 800b562:	46bd      	mov	sp, r7
 800b564:	b006      	add	sp, #24
 800b566:	bd80      	pop	{r7, pc}
 800b568:	fffeffff 	.word	0xfffeffff
 800b56c:	fffeff8f 	.word	0xfffeff8f
 800b570:	fffdffff 	.word	0xfffdffff
 800b574:	40012c00 	.word	0x40012c00
 800b578:	40014400 	.word	0x40014400
 800b57c:	40014800 	.word	0x40014800

0800b580 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b086      	sub	sp, #24
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a1b      	ldr	r3, [r3, #32]
 800b58e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6a1b      	ldr	r3, [r3, #32]
 800b594:	4a22      	ldr	r2, [pc, #136]	@ (800b620 <TIM_OC6_SetConfig+0xa0>)
 800b596:	401a      	ands	r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	4a1e      	ldr	r2, [pc, #120]	@ (800b624 <TIM_OC6_SetConfig+0xa4>)
 800b5ac:	4013      	ands	r3, r2
 800b5ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	021b      	lsls	r3, r3, #8
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	4a1a      	ldr	r2, [pc, #104]	@ (800b628 <TIM_OC6_SetConfig+0xa8>)
 800b5c0:	4013      	ands	r3, r2
 800b5c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	051b      	lsls	r3, r3, #20
 800b5ca:	693a      	ldr	r2, [r7, #16]
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4a16      	ldr	r2, [pc, #88]	@ (800b62c <TIM_OC6_SetConfig+0xac>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d007      	beq.n	800b5e8 <TIM_OC6_SetConfig+0x68>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	4a15      	ldr	r2, [pc, #84]	@ (800b630 <TIM_OC6_SetConfig+0xb0>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d003      	beq.n	800b5e8 <TIM_OC6_SetConfig+0x68>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4a14      	ldr	r2, [pc, #80]	@ (800b634 <TIM_OC6_SetConfig+0xb4>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d109      	bne.n	800b5fc <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	4a13      	ldr	r2, [pc, #76]	@ (800b638 <TIM_OC6_SetConfig+0xb8>)
 800b5ec:	4013      	ands	r3, r2
 800b5ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	695b      	ldr	r3, [r3, #20]
 800b5f4:	029b      	lsls	r3, r3, #10
 800b5f6:	697a      	ldr	r2, [r7, #20]
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	697a      	ldr	r2, [r7, #20]
 800b600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	68fa      	ldr	r2, [r7, #12]
 800b606:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	693a      	ldr	r2, [r7, #16]
 800b614:	621a      	str	r2, [r3, #32]
}
 800b616:	46c0      	nop			@ (mov r8, r8)
 800b618:	46bd      	mov	sp, r7
 800b61a:	b006      	add	sp, #24
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	46c0      	nop			@ (mov r8, r8)
 800b620:	ffefffff 	.word	0xffefffff
 800b624:	feff8fff 	.word	0xfeff8fff
 800b628:	ffdfffff 	.word	0xffdfffff
 800b62c:	40012c00 	.word	0x40012c00
 800b630:	40014400 	.word	0x40014400
 800b634:	40014800 	.word	0x40014800
 800b638:	fffbffff 	.word	0xfffbffff

0800b63c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b086      	sub	sp, #24
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
 800b648:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6a1b      	ldr	r3, [r3, #32]
 800b64e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6a1b      	ldr	r3, [r3, #32]
 800b654:	2201      	movs	r2, #1
 800b656:	4393      	bics	r3, r2
 800b658:	001a      	movs	r2, r3
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	699b      	ldr	r3, [r3, #24]
 800b662:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	4a1e      	ldr	r2, [pc, #120]	@ (800b6e0 <TIM_TI1_SetConfig+0xa4>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d008      	beq.n	800b67e <TIM_TI1_SetConfig+0x42>
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	2380      	movs	r3, #128	@ 0x80
 800b670:	05db      	lsls	r3, r3, #23
 800b672:	429a      	cmp	r2, r3
 800b674:	d003      	beq.n	800b67e <TIM_TI1_SetConfig+0x42>
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	4a1a      	ldr	r2, [pc, #104]	@ (800b6e4 <TIM_TI1_SetConfig+0xa8>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d101      	bne.n	800b682 <TIM_TI1_SetConfig+0x46>
 800b67e:	2301      	movs	r3, #1
 800b680:	e000      	b.n	800b684 <TIM_TI1_SetConfig+0x48>
 800b682:	2300      	movs	r3, #0
 800b684:	2b00      	cmp	r3, #0
 800b686:	d008      	beq.n	800b69a <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	2203      	movs	r2, #3
 800b68c:	4393      	bics	r3, r2
 800b68e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b690:	697a      	ldr	r2, [r7, #20]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	4313      	orrs	r3, r2
 800b696:	617b      	str	r3, [r7, #20]
 800b698:	e003      	b.n	800b6a2 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	2201      	movs	r2, #1
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	22f0      	movs	r2, #240	@ 0xf0
 800b6a6:	4393      	bics	r3, r2
 800b6a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	011b      	lsls	r3, r3, #4
 800b6ae:	22ff      	movs	r2, #255	@ 0xff
 800b6b0:	4013      	ands	r3, r2
 800b6b2:	697a      	ldr	r2, [r7, #20]
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	220a      	movs	r2, #10
 800b6bc:	4393      	bics	r3, r2
 800b6be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	220a      	movs	r2, #10
 800b6c4:	4013      	ands	r3, r2
 800b6c6:	693a      	ldr	r2, [r7, #16]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	697a      	ldr	r2, [r7, #20]
 800b6d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	693a      	ldr	r2, [r7, #16]
 800b6d6:	621a      	str	r2, [r3, #32]
}
 800b6d8:	46c0      	nop			@ (mov r8, r8)
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	b006      	add	sp, #24
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	40012c00 	.word	0x40012c00
 800b6e4:	40000400 	.word	0x40000400

0800b6e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b086      	sub	sp, #24
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	6a1b      	ldr	r3, [r3, #32]
 800b6f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	6a1b      	ldr	r3, [r3, #32]
 800b6fe:	2201      	movs	r2, #1
 800b700:	4393      	bics	r3, r2
 800b702:	001a      	movs	r2, r3
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	699b      	ldr	r3, [r3, #24]
 800b70c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	22f0      	movs	r2, #240	@ 0xf0
 800b712:	4393      	bics	r3, r2
 800b714:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	011b      	lsls	r3, r3, #4
 800b71a:	693a      	ldr	r2, [r7, #16]
 800b71c:	4313      	orrs	r3, r2
 800b71e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	220a      	movs	r2, #10
 800b724:	4393      	bics	r3, r2
 800b726:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b728:	697a      	ldr	r2, [r7, #20]
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	4313      	orrs	r3, r2
 800b72e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	693a      	ldr	r2, [r7, #16]
 800b734:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	697a      	ldr	r2, [r7, #20]
 800b73a:	621a      	str	r2, [r3, #32]
}
 800b73c:	46c0      	nop			@ (mov r8, r8)
 800b73e:	46bd      	mov	sp, r7
 800b740:	b006      	add	sp, #24
 800b742:	bd80      	pop	{r7, pc}

0800b744 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b086      	sub	sp, #24
 800b748:	af00      	add	r7, sp, #0
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	607a      	str	r2, [r7, #4]
 800b750:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	6a1b      	ldr	r3, [r3, #32]
 800b756:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	6a1b      	ldr	r3, [r3, #32]
 800b75c:	2210      	movs	r2, #16
 800b75e:	4393      	bics	r3, r2
 800b760:	001a      	movs	r2, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	699b      	ldr	r3, [r3, #24]
 800b76a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	4a14      	ldr	r2, [pc, #80]	@ (800b7c0 <TIM_TI2_SetConfig+0x7c>)
 800b770:	4013      	ands	r3, r2
 800b772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	021b      	lsls	r3, r3, #8
 800b778:	693a      	ldr	r2, [r7, #16]
 800b77a:	4313      	orrs	r3, r2
 800b77c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	4a10      	ldr	r2, [pc, #64]	@ (800b7c4 <TIM_TI2_SetConfig+0x80>)
 800b782:	4013      	ands	r3, r2
 800b784:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	031b      	lsls	r3, r3, #12
 800b78a:	041b      	lsls	r3, r3, #16
 800b78c:	0c1b      	lsrs	r3, r3, #16
 800b78e:	693a      	ldr	r2, [r7, #16]
 800b790:	4313      	orrs	r3, r2
 800b792:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	22a0      	movs	r2, #160	@ 0xa0
 800b798:	4393      	bics	r3, r2
 800b79a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	011b      	lsls	r3, r3, #4
 800b7a0:	22a0      	movs	r2, #160	@ 0xa0
 800b7a2:	4013      	ands	r3, r2
 800b7a4:	697a      	ldr	r2, [r7, #20]
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	693a      	ldr	r2, [r7, #16]
 800b7ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	697a      	ldr	r2, [r7, #20]
 800b7b4:	621a      	str	r2, [r3, #32]
}
 800b7b6:	46c0      	nop			@ (mov r8, r8)
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	b006      	add	sp, #24
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	46c0      	nop			@ (mov r8, r8)
 800b7c0:	fffffcff 	.word	0xfffffcff
 800b7c4:	ffff0fff 	.word	0xffff0fff

0800b7c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b086      	sub	sp, #24
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	6a1b      	ldr	r3, [r3, #32]
 800b7d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	6a1b      	ldr	r3, [r3, #32]
 800b7de:	2210      	movs	r2, #16
 800b7e0:	4393      	bics	r3, r2
 800b7e2:	001a      	movs	r2, r3
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	699b      	ldr	r3, [r3, #24]
 800b7ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	4a0d      	ldr	r2, [pc, #52]	@ (800b828 <TIM_TI2_ConfigInputStage+0x60>)
 800b7f2:	4013      	ands	r3, r2
 800b7f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	031b      	lsls	r3, r3, #12
 800b7fa:	693a      	ldr	r2, [r7, #16]
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	22a0      	movs	r2, #160	@ 0xa0
 800b804:	4393      	bics	r3, r2
 800b806:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	011b      	lsls	r3, r3, #4
 800b80c:	697a      	ldr	r2, [r7, #20]
 800b80e:	4313      	orrs	r3, r2
 800b810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	693a      	ldr	r2, [r7, #16]
 800b816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	697a      	ldr	r2, [r7, #20]
 800b81c:	621a      	str	r2, [r3, #32]
}
 800b81e:	46c0      	nop			@ (mov r8, r8)
 800b820:	46bd      	mov	sp, r7
 800b822:	b006      	add	sp, #24
 800b824:	bd80      	pop	{r7, pc}
 800b826:	46c0      	nop			@ (mov r8, r8)
 800b828:	ffff0fff 	.word	0xffff0fff

0800b82c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b086      	sub	sp, #24
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	607a      	str	r2, [r7, #4]
 800b838:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	6a1b      	ldr	r3, [r3, #32]
 800b83e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	6a1b      	ldr	r3, [r3, #32]
 800b844:	4a17      	ldr	r2, [pc, #92]	@ (800b8a4 <TIM_TI3_SetConfig+0x78>)
 800b846:	401a      	ands	r2, r3
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	69db      	ldr	r3, [r3, #28]
 800b850:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	2203      	movs	r2, #3
 800b856:	4393      	bics	r3, r2
 800b858:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800b85a:	693a      	ldr	r2, [r7, #16]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	4313      	orrs	r3, r2
 800b860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	22f0      	movs	r2, #240	@ 0xf0
 800b866:	4393      	bics	r3, r2
 800b868:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	011b      	lsls	r3, r3, #4
 800b86e:	22ff      	movs	r2, #255	@ 0xff
 800b870:	4013      	ands	r3, r2
 800b872:	693a      	ldr	r2, [r7, #16]
 800b874:	4313      	orrs	r3, r2
 800b876:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	4a0b      	ldr	r2, [pc, #44]	@ (800b8a8 <TIM_TI3_SetConfig+0x7c>)
 800b87c:	4013      	ands	r3, r2
 800b87e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	021a      	lsls	r2, r3, #8
 800b884:	23a0      	movs	r3, #160	@ 0xa0
 800b886:	011b      	lsls	r3, r3, #4
 800b888:	4013      	ands	r3, r2
 800b88a:	697a      	ldr	r2, [r7, #20]
 800b88c:	4313      	orrs	r3, r2
 800b88e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	693a      	ldr	r2, [r7, #16]
 800b894:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	697a      	ldr	r2, [r7, #20]
 800b89a:	621a      	str	r2, [r3, #32]
}
 800b89c:	46c0      	nop			@ (mov r8, r8)
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	b006      	add	sp, #24
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	fffffeff 	.word	0xfffffeff
 800b8a8:	fffff5ff 	.word	0xfffff5ff

0800b8ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b086      	sub	sp, #24
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
 800b8b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6a1b      	ldr	r3, [r3, #32]
 800b8be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6a1b      	ldr	r3, [r3, #32]
 800b8c4:	4a18      	ldr	r2, [pc, #96]	@ (800b928 <TIM_TI4_SetConfig+0x7c>)
 800b8c6:	401a      	ands	r2, r3
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	69db      	ldr	r3, [r3, #28]
 800b8d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	4a15      	ldr	r2, [pc, #84]	@ (800b92c <TIM_TI4_SetConfig+0x80>)
 800b8d6:	4013      	ands	r3, r2
 800b8d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	021b      	lsls	r3, r3, #8
 800b8de:	693a      	ldr	r2, [r7, #16]
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	4a12      	ldr	r2, [pc, #72]	@ (800b930 <TIM_TI4_SetConfig+0x84>)
 800b8e8:	4013      	ands	r3, r2
 800b8ea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	031b      	lsls	r3, r3, #12
 800b8f0:	041b      	lsls	r3, r3, #16
 800b8f2:	0c1b      	lsrs	r3, r3, #16
 800b8f4:	693a      	ldr	r2, [r7, #16]
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	4a0d      	ldr	r2, [pc, #52]	@ (800b934 <TIM_TI4_SetConfig+0x88>)
 800b8fe:	4013      	ands	r3, r2
 800b900:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	031a      	lsls	r2, r3, #12
 800b906:	23a0      	movs	r3, #160	@ 0xa0
 800b908:	021b      	lsls	r3, r3, #8
 800b90a:	4013      	ands	r3, r2
 800b90c:	697a      	ldr	r2, [r7, #20]
 800b90e:	4313      	orrs	r3, r2
 800b910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	693a      	ldr	r2, [r7, #16]
 800b916:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	621a      	str	r2, [r3, #32]
}
 800b91e:	46c0      	nop			@ (mov r8, r8)
 800b920:	46bd      	mov	sp, r7
 800b922:	b006      	add	sp, #24
 800b924:	bd80      	pop	{r7, pc}
 800b926:	46c0      	nop			@ (mov r8, r8)
 800b928:	ffffefff 	.word	0xffffefff
 800b92c:	fffffcff 	.word	0xfffffcff
 800b930:	ffff0fff 	.word	0xffff0fff
 800b934:	ffff5fff 	.word	0xffff5fff

0800b938 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	4a08      	ldr	r2, [pc, #32]	@ (800b96c <TIM_ITRx_SetConfig+0x34>)
 800b94c:	4013      	ands	r3, r2
 800b94e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b950:	683a      	ldr	r2, [r7, #0]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	4313      	orrs	r3, r2
 800b956:	2207      	movs	r2, #7
 800b958:	4313      	orrs	r3, r2
 800b95a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	609a      	str	r2, [r3, #8]
}
 800b962:	46c0      	nop			@ (mov r8, r8)
 800b964:	46bd      	mov	sp, r7
 800b966:	b004      	add	sp, #16
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	46c0      	nop			@ (mov r8, r8)
 800b96c:	ffcfff8f 	.word	0xffcfff8f

0800b970 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b086      	sub	sp, #24
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
 800b97c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	4a09      	ldr	r2, [pc, #36]	@ (800b9ac <TIM_ETR_SetConfig+0x3c>)
 800b988:	4013      	ands	r3, r2
 800b98a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	021a      	lsls	r2, r3, #8
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	431a      	orrs	r2, r3
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	4313      	orrs	r3, r2
 800b998:	697a      	ldr	r2, [r7, #20]
 800b99a:	4313      	orrs	r3, r2
 800b99c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	697a      	ldr	r2, [r7, #20]
 800b9a2:	609a      	str	r2, [r3, #8]
}
 800b9a4:	46c0      	nop			@ (mov r8, r8)
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	b006      	add	sp, #24
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	ffff00ff 	.word	0xffff00ff

0800b9b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b086      	sub	sp, #24
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	221f      	movs	r2, #31
 800b9c0:	4013      	ands	r3, r2
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	409a      	lsls	r2, r3
 800b9c6:	0013      	movs	r3, r2
 800b9c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	6a1b      	ldr	r3, [r3, #32]
 800b9ce:	697a      	ldr	r2, [r7, #20]
 800b9d0:	43d2      	mvns	r2, r2
 800b9d2:	401a      	ands	r2, r3
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6a1a      	ldr	r2, [r3, #32]
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	211f      	movs	r1, #31
 800b9e0:	400b      	ands	r3, r1
 800b9e2:	6879      	ldr	r1, [r7, #4]
 800b9e4:	4099      	lsls	r1, r3
 800b9e6:	000b      	movs	r3, r1
 800b9e8:	431a      	orrs	r2, r3
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	621a      	str	r2, [r3, #32]
}
 800b9ee:	46c0      	nop			@ (mov r8, r8)
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	b006      	add	sp, #24
 800b9f4:	bd80      	pop	{r7, pc}
	...

0800b9f8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2184      	movs	r1, #132	@ 0x84
 800ba04:	4a1c      	ldr	r2, [pc, #112]	@ (800ba78 <TIM_ResetCallback+0x80>)
 800ba06:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2188      	movs	r1, #136	@ 0x88
 800ba0c:	4a1b      	ldr	r2, [pc, #108]	@ (800ba7c <TIM_ResetCallback+0x84>)
 800ba0e:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	218c      	movs	r1, #140	@ 0x8c
 800ba14:	4a1a      	ldr	r2, [pc, #104]	@ (800ba80 <TIM_ResetCallback+0x88>)
 800ba16:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2190      	movs	r1, #144	@ 0x90
 800ba1c:	4a19      	ldr	r2, [pc, #100]	@ (800ba84 <TIM_ResetCallback+0x8c>)
 800ba1e:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2194      	movs	r1, #148	@ 0x94
 800ba24:	4a18      	ldr	r2, [pc, #96]	@ (800ba88 <TIM_ResetCallback+0x90>)
 800ba26:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2198      	movs	r1, #152	@ 0x98
 800ba2c:	4a17      	ldr	r2, [pc, #92]	@ (800ba8c <TIM_ResetCallback+0x94>)
 800ba2e:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	219c      	movs	r1, #156	@ 0x9c
 800ba34:	4a16      	ldr	r2, [pc, #88]	@ (800ba90 <TIM_ResetCallback+0x98>)
 800ba36:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	21a0      	movs	r1, #160	@ 0xa0
 800ba3c:	4a15      	ldr	r2, [pc, #84]	@ (800ba94 <TIM_ResetCallback+0x9c>)
 800ba3e:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	21a4      	movs	r1, #164	@ 0xa4
 800ba44:	4a14      	ldr	r2, [pc, #80]	@ (800ba98 <TIM_ResetCallback+0xa0>)
 800ba46:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	21a8      	movs	r1, #168	@ 0xa8
 800ba4c:	4a13      	ldr	r2, [pc, #76]	@ (800ba9c <TIM_ResetCallback+0xa4>)
 800ba4e:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	21ac      	movs	r1, #172	@ 0xac
 800ba54:	4a12      	ldr	r2, [pc, #72]	@ (800baa0 <TIM_ResetCallback+0xa8>)
 800ba56:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	21b0      	movs	r1, #176	@ 0xb0
 800ba5c:	4a11      	ldr	r2, [pc, #68]	@ (800baa4 <TIM_ResetCallback+0xac>)
 800ba5e:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	21b4      	movs	r1, #180	@ 0xb4
 800ba64:	4a10      	ldr	r2, [pc, #64]	@ (800baa8 <TIM_ResetCallback+0xb0>)
 800ba66:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	21b8      	movs	r1, #184	@ 0xb8
 800ba6c:	4a0f      	ldr	r2, [pc, #60]	@ (800baac <TIM_ResetCallback+0xb4>)
 800ba6e:	505a      	str	r2, [r3, r1]
}
 800ba70:	46c0      	nop			@ (mov r8, r8)
 800ba72:	46bd      	mov	sp, r7
 800ba74:	b002      	add	sp, #8
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	0800ad51 	.word	0x0800ad51
 800ba7c:	0800ad61 	.word	0x0800ad61
 800ba80:	0800adc1 	.word	0x0800adc1
 800ba84:	0800add1 	.word	0x0800add1
 800ba88:	0800ad81 	.word	0x0800ad81
 800ba8c:	0800ad91 	.word	0x0800ad91
 800ba90:	0800ad71 	.word	0x0800ad71
 800ba94:	0800ada1 	.word	0x0800ada1
 800ba98:	0800adb1 	.word	0x0800adb1
 800ba9c:	0800ade1 	.word	0x0800ade1
 800baa0:	0800bcb9 	.word	0x0800bcb9
 800baa4:	0800bcc9 	.word	0x0800bcc9
 800baa8:	0800bcd9 	.word	0x0800bcd9
 800baac:	0800bce9 	.word	0x0800bce9

0800bab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	223c      	movs	r2, #60	@ 0x3c
 800babe:	5c9b      	ldrb	r3, [r3, r2]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d101      	bne.n	800bac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bac4:	2302      	movs	r3, #2
 800bac6:	e050      	b.n	800bb6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	223c      	movs	r2, #60	@ 0x3c
 800bacc:	2101      	movs	r1, #1
 800bace:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	223d      	movs	r2, #61	@ 0x3d
 800bad4:	2102      	movs	r1, #2
 800bad6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a21      	ldr	r2, [pc, #132]	@ (800bb74 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d108      	bne.n	800bb04 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	4a20      	ldr	r2, [pc, #128]	@ (800bb78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800baf6:	4013      	ands	r3, r2
 800baf8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	4313      	orrs	r3, r2
 800bb02:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2270      	movs	r2, #112	@ 0x70
 800bb08:	4393      	bics	r3, r2
 800bb0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	68fa      	ldr	r2, [r7, #12]
 800bb12:	4313      	orrs	r3, r2
 800bb14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	68fa      	ldr	r2, [r7, #12]
 800bb1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a14      	ldr	r2, [pc, #80]	@ (800bb74 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d00a      	beq.n	800bb3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	2380      	movs	r3, #128	@ 0x80
 800bb2e:	05db      	lsls	r3, r3, #23
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d004      	beq.n	800bb3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4a10      	ldr	r2, [pc, #64]	@ (800bb7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d10c      	bne.n	800bb58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	2280      	movs	r2, #128	@ 0x80
 800bb42:	4393      	bics	r3, r2
 800bb44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	68ba      	ldr	r2, [r7, #8]
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	68ba      	ldr	r2, [r7, #8]
 800bb56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	223d      	movs	r2, #61	@ 0x3d
 800bb5c:	2101      	movs	r1, #1
 800bb5e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	223c      	movs	r2, #60	@ 0x3c
 800bb64:	2100      	movs	r1, #0
 800bb66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	0018      	movs	r0, r3
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	b004      	add	sp, #16
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	46c0      	nop			@ (mov r8, r8)
 800bb74:	40012c00 	.word	0x40012c00
 800bb78:	ff0fffff 	.word	0xff0fffff
 800bb7c:	40000400 	.word	0x40000400

0800bb80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	223c      	movs	r2, #60	@ 0x3c
 800bb92:	5c9b      	ldrb	r3, [r3, r2]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d101      	bne.n	800bb9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bb98:	2302      	movs	r3, #2
 800bb9a:	e06f      	b.n	800bc7c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	223c      	movs	r2, #60	@ 0x3c
 800bba0:	2101      	movs	r1, #1
 800bba2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	22ff      	movs	r2, #255	@ 0xff
 800bba8:	4393      	bics	r3, r2
 800bbaa:	001a      	movs	r2, r3
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	4a33      	ldr	r2, [pc, #204]	@ (800bc84 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800bbb8:	401a      	ands	r2, r3
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	689b      	ldr	r3, [r3, #8]
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	4a30      	ldr	r2, [pc, #192]	@ (800bc88 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800bbc6:	401a      	ands	r2, r3
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	4a2e      	ldr	r2, [pc, #184]	@ (800bc8c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800bbd4:	401a      	ands	r2, r3
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	4a2b      	ldr	r2, [pc, #172]	@ (800bc90 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800bbe2:	401a      	ands	r2, r3
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	4a29      	ldr	r2, [pc, #164]	@ (800bc94 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800bbf0:	401a      	ands	r2, r3
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	695b      	ldr	r3, [r3, #20]
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	4a26      	ldr	r2, [pc, #152]	@ (800bc98 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800bbfe:	401a      	ands	r2, r3
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc04:	4313      	orrs	r3, r2
 800bc06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	4a24      	ldr	r2, [pc, #144]	@ (800bc9c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800bc0c:	401a      	ands	r2, r3
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	699b      	ldr	r3, [r3, #24]
 800bc12:	041b      	lsls	r3, r3, #16
 800bc14:	4313      	orrs	r3, r2
 800bc16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	4a21      	ldr	r2, [pc, #132]	@ (800bca0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800bc1c:	401a      	ands	r2, r3
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	69db      	ldr	r3, [r3, #28]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a1e      	ldr	r2, [pc, #120]	@ (800bca4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d11c      	bne.n	800bc6a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	4a1d      	ldr	r2, [pc, #116]	@ (800bca8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800bc34:	401a      	ands	r2, r3
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc3a:	051b      	lsls	r3, r3, #20
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	4a1a      	ldr	r2, [pc, #104]	@ (800bcac <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800bc44:	401a      	ands	r2, r3
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	6a1b      	ldr	r3, [r3, #32]
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	4a17      	ldr	r2, [pc, #92]	@ (800bcb0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800bc52:	401a      	ands	r2, r3
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	4a15      	ldr	r2, [pc, #84]	@ (800bcb4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800bc60:	401a      	ands	r2, r3
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc66:	4313      	orrs	r3, r2
 800bc68:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	68fa      	ldr	r2, [r7, #12]
 800bc70:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	223c      	movs	r2, #60	@ 0x3c
 800bc76:	2100      	movs	r1, #0
 800bc78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	0018      	movs	r0, r3
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	b004      	add	sp, #16
 800bc82:	bd80      	pop	{r7, pc}
 800bc84:	fffffcff 	.word	0xfffffcff
 800bc88:	fffffbff 	.word	0xfffffbff
 800bc8c:	fffff7ff 	.word	0xfffff7ff
 800bc90:	ffffefff 	.word	0xffffefff
 800bc94:	ffffdfff 	.word	0xffffdfff
 800bc98:	ffffbfff 	.word	0xffffbfff
 800bc9c:	fff0ffff 	.word	0xfff0ffff
 800bca0:	efffffff 	.word	0xefffffff
 800bca4:	40012c00 	.word	0x40012c00
 800bca8:	ff0fffff 	.word	0xff0fffff
 800bcac:	feffffff 	.word	0xfeffffff
 800bcb0:	fdffffff 	.word	0xfdffffff
 800bcb4:	dfffffff 	.word	0xdfffffff

0800bcb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bcc0:	46c0      	nop			@ (mov r8, r8)
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	b002      	add	sp, #8
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b082      	sub	sp, #8
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800bcd0:	46c0      	nop			@ (mov r8, r8)
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	b002      	add	sp, #8
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bce0:	46c0      	nop			@ (mov r8, r8)
 800bce2:	46bd      	mov	sp, r7
 800bce4:	b002      	add	sp, #8
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bcf0:	46c0      	nop			@ (mov r8, r8)
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	b002      	add	sp, #8
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d101      	bne.n	800bd0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd06:	2301      	movs	r3, #1
 800bd08:	e055      	b.n	800bdb6 <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2288      	movs	r2, #136	@ 0x88
 800bd0e:	589b      	ldr	r3, [r3, r2]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d116      	bne.n	800bd42 <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2284      	movs	r2, #132	@ 0x84
 800bd18:	2100      	movs	r1, #0
 800bd1a:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	0018      	movs	r0, r3
 800bd20:	f000 fce0 	bl	800c6e4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	22c4      	movs	r2, #196	@ 0xc4
 800bd28:	589b      	ldr	r3, [r3, r2]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d103      	bne.n	800bd36 <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	21c4      	movs	r1, #196	@ 0xc4
 800bd32:	4a23      	ldr	r2, [pc, #140]	@ (800bdc0 <HAL_UART_Init+0xc8>)
 800bd34:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	22c4      	movs	r2, #196	@ 0xc4
 800bd3a:	589b      	ldr	r3, [r3, r2]
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	0010      	movs	r0, r2
 800bd40:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2288      	movs	r2, #136	@ 0x88
 800bd46:	2124      	movs	r1, #36	@ 0x24
 800bd48:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2101      	movs	r1, #1
 800bd56:	438a      	bics	r2, r1
 800bd58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d003      	beq.n	800bd6a <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	0018      	movs	r0, r3
 800bd66:	f000 ff85 	bl	800cc74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	0018      	movs	r0, r3
 800bd6e:	f000 fd09 	bl	800c784 <UART_SetConfig>
 800bd72:	0003      	movs	r3, r0
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d101      	bne.n	800bd7c <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e01c      	b.n	800bdb6 <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	685a      	ldr	r2, [r3, #4]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	490f      	ldr	r1, [pc, #60]	@ (800bdc4 <HAL_UART_Init+0xcc>)
 800bd88:	400a      	ands	r2, r1
 800bd8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	689a      	ldr	r2, [r3, #8]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	212a      	movs	r1, #42	@ 0x2a
 800bd98:	438a      	bics	r2, r1
 800bd9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2101      	movs	r1, #1
 800bda8:	430a      	orrs	r2, r1
 800bdaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	0018      	movs	r0, r3
 800bdb0:	f001 f814 	bl	800cddc <UART_CheckIdleState>
 800bdb4:	0003      	movs	r3, r0
}
 800bdb6:	0018      	movs	r0, r3
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	b002      	add	sp, #8
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	46c0      	nop			@ (mov r8, r8)
 800bdc0:	08005515 	.word	0x08005515
 800bdc4:	ffffb7ff 	.word	0xffffb7ff

0800bdc8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b086      	sub	sp, #24
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	607a      	str	r2, [r7, #4]
 800bdd2:	230b      	movs	r3, #11
 800bdd4:	18fb      	adds	r3, r7, r3
 800bdd6:	1c0a      	adds	r2, r1, #0
 800bdd8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bdda:	2317      	movs	r3, #23
 800bddc:	18fb      	adds	r3, r7, r3
 800bdde:	2200      	movs	r2, #0
 800bde0:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d109      	bne.n	800bdfc <HAL_UART_RegisterCallback+0x34>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2290      	movs	r2, #144	@ 0x90
 800bdec:	589b      	ldr	r3, [r3, r2]
 800bdee:	2240      	movs	r2, #64	@ 0x40
 800bdf0:	431a      	orrs	r2, r3
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2190      	movs	r1, #144	@ 0x90
 800bdf6:	505a      	str	r2, [r3, r1]

    return HAL_ERROR;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	e08f      	b.n	800bf1c <HAL_UART_RegisterCallback+0x154>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2288      	movs	r2, #136	@ 0x88
 800be00:	589b      	ldr	r3, [r3, r2]
 800be02:	2b20      	cmp	r3, #32
 800be04:	d157      	bne.n	800beb6 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800be06:	230b      	movs	r3, #11
 800be08:	18fb      	adds	r3, r7, r3
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	2b0c      	cmp	r3, #12
 800be0e:	d845      	bhi.n	800be9c <HAL_UART_RegisterCallback+0xd4>
 800be10:	009a      	lsls	r2, r3, #2
 800be12:	4b44      	ldr	r3, [pc, #272]	@ (800bf24 <HAL_UART_RegisterCallback+0x15c>)
 800be14:	18d3      	adds	r3, r2, r3
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	469f      	mov	pc, r3
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2194      	movs	r1, #148	@ 0x94
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	505a      	str	r2, [r3, r1]
        break;
 800be22:	e078      	b.n	800bf16 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2198      	movs	r1, #152	@ 0x98
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	505a      	str	r2, [r3, r1]
        break;
 800be2c:	e073      	b.n	800bf16 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	219c      	movs	r1, #156	@ 0x9c
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	505a      	str	r2, [r3, r1]
        break;
 800be36:	e06e      	b.n	800bf16 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	21a0      	movs	r1, #160	@ 0xa0
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	505a      	str	r2, [r3, r1]
        break;
 800be40:	e069      	b.n	800bf16 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	21a4      	movs	r1, #164	@ 0xa4
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	505a      	str	r2, [r3, r1]
        break;
 800be4a:	e064      	b.n	800bf16 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	21a8      	movs	r1, #168	@ 0xa8
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	505a      	str	r2, [r3, r1]
        break;
 800be54:	e05f      	b.n	800bf16 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	21ac      	movs	r1, #172	@ 0xac
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	505a      	str	r2, [r3, r1]
        break;
 800be5e:	e05a      	b.n	800bf16 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	21b0      	movs	r1, #176	@ 0xb0
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	505a      	str	r2, [r3, r1]
        break;
 800be68:	e055      	b.n	800bf16 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	21b4      	movs	r1, #180	@ 0xb4
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	505a      	str	r2, [r3, r1]
        break;
 800be72:	e050      	b.n	800bf16 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	21b8      	movs	r1, #184	@ 0xb8
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	505a      	str	r2, [r3, r1]
        break;
 800be7c:	e04b      	b.n	800bf16 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	21bc      	movs	r1, #188	@ 0xbc
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	505a      	str	r2, [r3, r1]
        break;
 800be86:	e046      	b.n	800bf16 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	21c4      	movs	r1, #196	@ 0xc4
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	505a      	str	r2, [r3, r1]
        break;
 800be90:	e041      	b.n	800bf16 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	21c8      	movs	r1, #200	@ 0xc8
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	505a      	str	r2, [r3, r1]
        break;
 800be9a:	e03c      	b.n	800bf16 <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2290      	movs	r2, #144	@ 0x90
 800bea0:	589b      	ldr	r3, [r3, r2]
 800bea2:	2240      	movs	r2, #64	@ 0x40
 800bea4:	431a      	orrs	r2, r3
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2190      	movs	r1, #144	@ 0x90
 800beaa:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800beac:	2317      	movs	r3, #23
 800beae:	18fb      	adds	r3, r7, r3
 800beb0:	2201      	movs	r2, #1
 800beb2:	701a      	strb	r2, [r3, #0]
        break;
 800beb4:	e02f      	b.n	800bf16 <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2288      	movs	r2, #136	@ 0x88
 800beba:	589b      	ldr	r3, [r3, r2]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d11e      	bne.n	800befe <HAL_UART_RegisterCallback+0x136>
  {
    switch (CallbackID)
 800bec0:	230b      	movs	r3, #11
 800bec2:	18fb      	adds	r3, r7, r3
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	2b0b      	cmp	r3, #11
 800bec8:	d002      	beq.n	800bed0 <HAL_UART_RegisterCallback+0x108>
 800beca:	2b0c      	cmp	r3, #12
 800becc:	d005      	beq.n	800beda <HAL_UART_RegisterCallback+0x112>
 800bece:	e009      	b.n	800bee4 <HAL_UART_RegisterCallback+0x11c>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	21c4      	movs	r1, #196	@ 0xc4
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	505a      	str	r2, [r3, r1]
        break;
 800bed8:	e01d      	b.n	800bf16 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	21c8      	movs	r1, #200	@ 0xc8
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	505a      	str	r2, [r3, r1]
        break;
 800bee2:	e018      	b.n	800bf16 <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2290      	movs	r2, #144	@ 0x90
 800bee8:	589b      	ldr	r3, [r3, r2]
 800beea:	2240      	movs	r2, #64	@ 0x40
 800beec:	431a      	orrs	r2, r3
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2190      	movs	r1, #144	@ 0x90
 800bef2:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800bef4:	2317      	movs	r3, #23
 800bef6:	18fb      	adds	r3, r7, r3
 800bef8:	2201      	movs	r2, #1
 800befa:	701a      	strb	r2, [r3, #0]
        break;
 800befc:	e00b      	b.n	800bf16 <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2290      	movs	r2, #144	@ 0x90
 800bf02:	589b      	ldr	r3, [r3, r2]
 800bf04:	2240      	movs	r2, #64	@ 0x40
 800bf06:	431a      	orrs	r2, r3
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2190      	movs	r1, #144	@ 0x90
 800bf0c:	505a      	str	r2, [r3, r1]

    status =  HAL_ERROR;
 800bf0e:	2317      	movs	r3, #23
 800bf10:	18fb      	adds	r3, r7, r3
 800bf12:	2201      	movs	r2, #1
 800bf14:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800bf16:	2317      	movs	r3, #23
 800bf18:	18fb      	adds	r3, r7, r3
 800bf1a:	781b      	ldrb	r3, [r3, #0]
}
 800bf1c:	0018      	movs	r0, r3
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	b006      	add	sp, #24
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	0800e02c 	.word	0x0800e02c

0800bf28 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b088      	sub	sp, #32
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	1dbb      	adds	r3, r7, #6
 800bf34:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	228c      	movs	r2, #140	@ 0x8c
 800bf3a:	589b      	ldr	r3, [r3, r2]
 800bf3c:	2b20      	cmp	r3, #32
 800bf3e:	d14a      	bne.n	800bfd6 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d003      	beq.n	800bf4e <HAL_UART_Receive_DMA+0x26>
 800bf46:	1dbb      	adds	r3, r7, #6
 800bf48:	881b      	ldrh	r3, [r3, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d101      	bne.n	800bf52 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e042      	b.n	800bfd8 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	689a      	ldr	r2, [r3, #8]
 800bf56:	2380      	movs	r3, #128	@ 0x80
 800bf58:	015b      	lsls	r3, r3, #5
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d109      	bne.n	800bf72 <HAL_UART_Receive_DMA+0x4a>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	691b      	ldr	r3, [r3, #16]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d105      	bne.n	800bf72 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	2201      	movs	r2, #1
 800bf6a:	4013      	ands	r3, r2
 800bf6c:	d001      	beq.n	800bf72 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	e032      	b.n	800bfd8 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2200      	movs	r2, #0
 800bf76:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a18      	ldr	r2, [pc, #96]	@ (800bfe0 <HAL_UART_Receive_DMA+0xb8>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d020      	beq.n	800bfc4 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	685a      	ldr	r2, [r3, #4]
 800bf88:	2380      	movs	r3, #128	@ 0x80
 800bf8a:	041b      	lsls	r3, r3, #16
 800bf8c:	4013      	ands	r3, r2
 800bf8e:	d019      	beq.n	800bfc4 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf90:	f3ef 8310 	mrs	r3, PRIMASK
 800bf94:	613b      	str	r3, [r7, #16]
  return(result);
 800bf96:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf98:	61fb      	str	r3, [r7, #28]
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	f383 8810 	msr	PRIMASK, r3
}
 800bfa4:	46c0      	nop			@ (mov r8, r8)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	2180      	movs	r1, #128	@ 0x80
 800bfb2:	04c9      	lsls	r1, r1, #19
 800bfb4:	430a      	orrs	r2, r1
 800bfb6:	601a      	str	r2, [r3, #0]
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfbc:	69bb      	ldr	r3, [r7, #24]
 800bfbe:	f383 8810 	msr	PRIMASK, r3
}
 800bfc2:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bfc4:	1dbb      	adds	r3, r7, #6
 800bfc6:	881a      	ldrh	r2, [r3, #0]
 800bfc8:	68b9      	ldr	r1, [r7, #8]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	0018      	movs	r0, r3
 800bfce:	f001 f81f 	bl	800d010 <UART_Start_Receive_DMA>
 800bfd2:	0003      	movs	r3, r0
 800bfd4:	e000      	b.n	800bfd8 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800bfd6:	2302      	movs	r3, #2
  }
}
 800bfd8:	0018      	movs	r0, r3
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	b008      	add	sp, #32
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	40008000 	.word	0x40008000

0800bfe4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bfe4:	b5b0      	push	{r4, r5, r7, lr}
 800bfe6:	b0aa      	sub	sp, #168	@ 0xa8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	69db      	ldr	r3, [r3, #28]
 800bff2:	22a4      	movs	r2, #164	@ 0xa4
 800bff4:	18b9      	adds	r1, r7, r2
 800bff6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	20a0      	movs	r0, #160	@ 0xa0
 800c000:	1839      	adds	r1, r7, r0
 800c002:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	689b      	ldr	r3, [r3, #8]
 800c00a:	249c      	movs	r4, #156	@ 0x9c
 800c00c:	1939      	adds	r1, r7, r4
 800c00e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c010:	0011      	movs	r1, r2
 800c012:	18bb      	adds	r3, r7, r2
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4aa5      	ldr	r2, [pc, #660]	@ (800c2ac <HAL_UART_IRQHandler+0x2c8>)
 800c018:	4013      	ands	r3, r2
 800c01a:	2298      	movs	r2, #152	@ 0x98
 800c01c:	18bd      	adds	r5, r7, r2
 800c01e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800c020:	18bb      	adds	r3, r7, r2
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d11a      	bne.n	800c05e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c028:	187b      	adds	r3, r7, r1
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2220      	movs	r2, #32
 800c02e:	4013      	ands	r3, r2
 800c030:	d015      	beq.n	800c05e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c032:	183b      	adds	r3, r7, r0
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2220      	movs	r2, #32
 800c038:	4013      	ands	r3, r2
 800c03a:	d105      	bne.n	800c048 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c03c:	193b      	adds	r3, r7, r4
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	2380      	movs	r3, #128	@ 0x80
 800c042:	055b      	lsls	r3, r3, #21
 800c044:	4013      	ands	r3, r2
 800c046:	d00a      	beq.n	800c05e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d100      	bne.n	800c052 <HAL_UART_IRQHandler+0x6e>
 800c050:	e2ea      	b.n	800c628 <HAL_UART_IRQHandler+0x644>
      {
        huart->RxISR(huart);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	0010      	movs	r0, r2
 800c05a:	4798      	blx	r3
      }
      return;
 800c05c:	e2e4      	b.n	800c628 <HAL_UART_IRQHandler+0x644>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c05e:	2398      	movs	r3, #152	@ 0x98
 800c060:	18fb      	adds	r3, r7, r3
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d100      	bne.n	800c06a <HAL_UART_IRQHandler+0x86>
 800c068:	e128      	b.n	800c2bc <HAL_UART_IRQHandler+0x2d8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c06a:	239c      	movs	r3, #156	@ 0x9c
 800c06c:	18fb      	adds	r3, r7, r3
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a8f      	ldr	r2, [pc, #572]	@ (800c2b0 <HAL_UART_IRQHandler+0x2cc>)
 800c072:	4013      	ands	r3, r2
 800c074:	d106      	bne.n	800c084 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c076:	23a0      	movs	r3, #160	@ 0xa0
 800c078:	18fb      	adds	r3, r7, r3
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4a8d      	ldr	r2, [pc, #564]	@ (800c2b4 <HAL_UART_IRQHandler+0x2d0>)
 800c07e:	4013      	ands	r3, r2
 800c080:	d100      	bne.n	800c084 <HAL_UART_IRQHandler+0xa0>
 800c082:	e11b      	b.n	800c2bc <HAL_UART_IRQHandler+0x2d8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c084:	23a4      	movs	r3, #164	@ 0xa4
 800c086:	18fb      	adds	r3, r7, r3
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2201      	movs	r2, #1
 800c08c:	4013      	ands	r3, r2
 800c08e:	d012      	beq.n	800c0b6 <HAL_UART_IRQHandler+0xd2>
 800c090:	23a0      	movs	r3, #160	@ 0xa0
 800c092:	18fb      	adds	r3, r7, r3
 800c094:	681a      	ldr	r2, [r3, #0]
 800c096:	2380      	movs	r3, #128	@ 0x80
 800c098:	005b      	lsls	r3, r3, #1
 800c09a:	4013      	ands	r3, r2
 800c09c:	d00b      	beq.n	800c0b6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2290      	movs	r2, #144	@ 0x90
 800c0aa:	589b      	ldr	r3, [r3, r2]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	431a      	orrs	r2, r3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2190      	movs	r1, #144	@ 0x90
 800c0b4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0b6:	23a4      	movs	r3, #164	@ 0xa4
 800c0b8:	18fb      	adds	r3, r7, r3
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2202      	movs	r2, #2
 800c0be:	4013      	ands	r3, r2
 800c0c0:	d011      	beq.n	800c0e6 <HAL_UART_IRQHandler+0x102>
 800c0c2:	239c      	movs	r3, #156	@ 0x9c
 800c0c4:	18fb      	adds	r3, r7, r3
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	4013      	ands	r3, r2
 800c0cc:	d00b      	beq.n	800c0e6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	2202      	movs	r2, #2
 800c0d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2290      	movs	r2, #144	@ 0x90
 800c0da:	589b      	ldr	r3, [r3, r2]
 800c0dc:	2204      	movs	r2, #4
 800c0de:	431a      	orrs	r2, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2190      	movs	r1, #144	@ 0x90
 800c0e4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0e6:	23a4      	movs	r3, #164	@ 0xa4
 800c0e8:	18fb      	adds	r3, r7, r3
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	2204      	movs	r2, #4
 800c0ee:	4013      	ands	r3, r2
 800c0f0:	d011      	beq.n	800c116 <HAL_UART_IRQHandler+0x132>
 800c0f2:	239c      	movs	r3, #156	@ 0x9c
 800c0f4:	18fb      	adds	r3, r7, r3
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	4013      	ands	r3, r2
 800c0fc:	d00b      	beq.n	800c116 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	2204      	movs	r2, #4
 800c104:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2290      	movs	r2, #144	@ 0x90
 800c10a:	589b      	ldr	r3, [r3, r2]
 800c10c:	2202      	movs	r2, #2
 800c10e:	431a      	orrs	r2, r3
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2190      	movs	r1, #144	@ 0x90
 800c114:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c116:	23a4      	movs	r3, #164	@ 0xa4
 800c118:	18fb      	adds	r3, r7, r3
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	2208      	movs	r2, #8
 800c11e:	4013      	ands	r3, r2
 800c120:	d017      	beq.n	800c152 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c122:	23a0      	movs	r3, #160	@ 0xa0
 800c124:	18fb      	adds	r3, r7, r3
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	2220      	movs	r2, #32
 800c12a:	4013      	ands	r3, r2
 800c12c:	d105      	bne.n	800c13a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c12e:	239c      	movs	r3, #156	@ 0x9c
 800c130:	18fb      	adds	r3, r7, r3
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a5e      	ldr	r2, [pc, #376]	@ (800c2b0 <HAL_UART_IRQHandler+0x2cc>)
 800c136:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c138:	d00b      	beq.n	800c152 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2208      	movs	r2, #8
 800c140:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2290      	movs	r2, #144	@ 0x90
 800c146:	589b      	ldr	r3, [r3, r2]
 800c148:	2208      	movs	r2, #8
 800c14a:	431a      	orrs	r2, r3
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2190      	movs	r1, #144	@ 0x90
 800c150:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c152:	23a4      	movs	r3, #164	@ 0xa4
 800c154:	18fb      	adds	r3, r7, r3
 800c156:	681a      	ldr	r2, [r3, #0]
 800c158:	2380      	movs	r3, #128	@ 0x80
 800c15a:	011b      	lsls	r3, r3, #4
 800c15c:	4013      	ands	r3, r2
 800c15e:	d013      	beq.n	800c188 <HAL_UART_IRQHandler+0x1a4>
 800c160:	23a0      	movs	r3, #160	@ 0xa0
 800c162:	18fb      	adds	r3, r7, r3
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	2380      	movs	r3, #128	@ 0x80
 800c168:	04db      	lsls	r3, r3, #19
 800c16a:	4013      	ands	r3, r2
 800c16c:	d00c      	beq.n	800c188 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2280      	movs	r2, #128	@ 0x80
 800c174:	0112      	lsls	r2, r2, #4
 800c176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2290      	movs	r2, #144	@ 0x90
 800c17c:	589b      	ldr	r3, [r3, r2]
 800c17e:	2220      	movs	r2, #32
 800c180:	431a      	orrs	r2, r3
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2190      	movs	r1, #144	@ 0x90
 800c186:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2290      	movs	r2, #144	@ 0x90
 800c18c:	589b      	ldr	r3, [r3, r2]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d100      	bne.n	800c194 <HAL_UART_IRQHandler+0x1b0>
 800c192:	e24b      	b.n	800c62c <HAL_UART_IRQHandler+0x648>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c194:	23a4      	movs	r3, #164	@ 0xa4
 800c196:	18fb      	adds	r3, r7, r3
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	2220      	movs	r2, #32
 800c19c:	4013      	ands	r3, r2
 800c19e:	d015      	beq.n	800c1cc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c1a0:	23a0      	movs	r3, #160	@ 0xa0
 800c1a2:	18fb      	adds	r3, r7, r3
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	2220      	movs	r2, #32
 800c1a8:	4013      	ands	r3, r2
 800c1aa:	d106      	bne.n	800c1ba <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c1ac:	239c      	movs	r3, #156	@ 0x9c
 800c1ae:	18fb      	adds	r3, r7, r3
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	2380      	movs	r3, #128	@ 0x80
 800c1b4:	055b      	lsls	r3, r3, #21
 800c1b6:	4013      	ands	r3, r2
 800c1b8:	d008      	beq.n	800c1cc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d004      	beq.n	800c1cc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	0010      	movs	r0, r2
 800c1ca:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2290      	movs	r2, #144	@ 0x90
 800c1d0:	589b      	ldr	r3, [r3, r2]
 800c1d2:	2194      	movs	r1, #148	@ 0x94
 800c1d4:	187a      	adds	r2, r7, r1
 800c1d6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	689b      	ldr	r3, [r3, #8]
 800c1de:	2240      	movs	r2, #64	@ 0x40
 800c1e0:	4013      	ands	r3, r2
 800c1e2:	2b40      	cmp	r3, #64	@ 0x40
 800c1e4:	d004      	beq.n	800c1f0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c1e6:	187b      	adds	r3, r7, r1
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2228      	movs	r2, #40	@ 0x28
 800c1ec:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c1ee:	d050      	beq.n	800c292 <HAL_UART_IRQHandler+0x2ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	0018      	movs	r0, r3
 800c1f4:	f000 fff2 	bl	800d1dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	689b      	ldr	r3, [r3, #8]
 800c1fe:	2240      	movs	r2, #64	@ 0x40
 800c200:	4013      	ands	r3, r2
 800c202:	2b40      	cmp	r3, #64	@ 0x40
 800c204:	d13e      	bne.n	800c284 <HAL_UART_IRQHandler+0x2a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c206:	f3ef 8310 	mrs	r3, PRIMASK
 800c20a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800c20c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c20e:	2090      	movs	r0, #144	@ 0x90
 800c210:	183a      	adds	r2, r7, r0
 800c212:	6013      	str	r3, [r2, #0]
 800c214:	2301      	movs	r3, #1
 800c216:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c218:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c21a:	f383 8810 	msr	PRIMASK, r3
}
 800c21e:	46c0      	nop			@ (mov r8, r8)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	689a      	ldr	r2, [r3, #8]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2140      	movs	r1, #64	@ 0x40
 800c22c:	438a      	bics	r2, r1
 800c22e:	609a      	str	r2, [r3, #8]
 800c230:	183b      	adds	r3, r7, r0
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c236:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c238:	f383 8810 	msr	PRIMASK, r3
}
 800c23c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2280      	movs	r2, #128	@ 0x80
 800c242:	589b      	ldr	r3, [r3, r2]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d016      	beq.n	800c276 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2280      	movs	r2, #128	@ 0x80
 800c24c:	589b      	ldr	r3, [r3, r2]
 800c24e:	4a1a      	ldr	r2, [pc, #104]	@ (800c2b8 <HAL_UART_IRQHandler+0x2d4>)
 800c250:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2280      	movs	r2, #128	@ 0x80
 800c256:	589b      	ldr	r3, [r3, r2]
 800c258:	0018      	movs	r0, r3
 800c25a:	f7fb fce5 	bl	8007c28 <HAL_DMA_Abort_IT>
 800c25e:	1e03      	subs	r3, r0, #0
 800c260:	d022      	beq.n	800c2a8 <HAL_UART_IRQHandler+0x2c4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2280      	movs	r2, #128	@ 0x80
 800c266:	589b      	ldr	r3, [r3, r2]
 800c268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	2180      	movs	r1, #128	@ 0x80
 800c26e:	5852      	ldr	r2, [r2, r1]
 800c270:	0010      	movs	r0, r2
 800c272:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c274:	e018      	b.n	800c2a8 <HAL_UART_IRQHandler+0x2c4>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	22a4      	movs	r2, #164	@ 0xa4
 800c27a:	589b      	ldr	r3, [r3, r2]
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	0010      	movs	r0, r2
 800c280:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c282:	e011      	b.n	800c2a8 <HAL_UART_IRQHandler+0x2c4>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	22a4      	movs	r2, #164	@ 0xa4
 800c288:	589b      	ldr	r3, [r3, r2]
 800c28a:	687a      	ldr	r2, [r7, #4]
 800c28c:	0010      	movs	r0, r2
 800c28e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c290:	e00a      	b.n	800c2a8 <HAL_UART_IRQHandler+0x2c4>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	22a4      	movs	r2, #164	@ 0xa4
 800c296:	589b      	ldr	r3, [r3, r2]
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	0010      	movs	r0, r2
 800c29c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2290      	movs	r2, #144	@ 0x90
 800c2a2:	2100      	movs	r1, #0
 800c2a4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800c2a6:	e1c1      	b.n	800c62c <HAL_UART_IRQHandler+0x648>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2a8:	46c0      	nop			@ (mov r8, r8)
    return;
 800c2aa:	e1bf      	b.n	800c62c <HAL_UART_IRQHandler+0x648>
 800c2ac:	0000080f 	.word	0x0000080f
 800c2b0:	10000001 	.word	0x10000001
 800c2b4:	04000120 	.word	0x04000120
 800c2b8:	0800d4af 	.word	0x0800d4af

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d000      	beq.n	800c2c6 <HAL_UART_IRQHandler+0x2e2>
 800c2c4:	e140      	b.n	800c548 <HAL_UART_IRQHandler+0x564>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c2c6:	23a4      	movs	r3, #164	@ 0xa4
 800c2c8:	18fb      	adds	r3, r7, r3
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2210      	movs	r2, #16
 800c2ce:	4013      	ands	r3, r2
 800c2d0:	d100      	bne.n	800c2d4 <HAL_UART_IRQHandler+0x2f0>
 800c2d2:	e139      	b.n	800c548 <HAL_UART_IRQHandler+0x564>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c2d4:	23a0      	movs	r3, #160	@ 0xa0
 800c2d6:	18fb      	adds	r3, r7, r3
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2210      	movs	r2, #16
 800c2dc:	4013      	ands	r3, r2
 800c2de:	d100      	bne.n	800c2e2 <HAL_UART_IRQHandler+0x2fe>
 800c2e0:	e132      	b.n	800c548 <HAL_UART_IRQHandler+0x564>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2210      	movs	r2, #16
 800c2e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	2240      	movs	r2, #64	@ 0x40
 800c2f2:	4013      	ands	r3, r2
 800c2f4:	2b40      	cmp	r3, #64	@ 0x40
 800c2f6:	d000      	beq.n	800c2fa <HAL_UART_IRQHandler+0x316>
 800c2f8:	e0a5      	b.n	800c446 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2280      	movs	r2, #128	@ 0x80
 800c2fe:	589b      	ldr	r3, [r3, r2]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	685a      	ldr	r2, [r3, #4]
 800c304:	217e      	movs	r1, #126	@ 0x7e
 800c306:	187b      	adds	r3, r7, r1
 800c308:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800c30a:	187b      	adds	r3, r7, r1
 800c30c:	881b      	ldrh	r3, [r3, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d100      	bne.n	800c314 <HAL_UART_IRQHandler+0x330>
 800c312:	e18d      	b.n	800c630 <HAL_UART_IRQHandler+0x64c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	225c      	movs	r2, #92	@ 0x5c
 800c318:	5a9b      	ldrh	r3, [r3, r2]
 800c31a:	187a      	adds	r2, r7, r1
 800c31c:	8812      	ldrh	r2, [r2, #0]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d300      	bcc.n	800c324 <HAL_UART_IRQHandler+0x340>
 800c322:	e185      	b.n	800c630 <HAL_UART_IRQHandler+0x64c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	187a      	adds	r2, r7, r1
 800c328:	215e      	movs	r1, #94	@ 0x5e
 800c32a:	8812      	ldrh	r2, [r2, #0]
 800c32c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2280      	movs	r2, #128	@ 0x80
 800c332:	589b      	ldr	r3, [r3, r2]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2220      	movs	r2, #32
 800c33a:	4013      	ands	r3, r2
 800c33c:	d170      	bne.n	800c420 <HAL_UART_IRQHandler+0x43c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c33e:	f3ef 8310 	mrs	r3, PRIMASK
 800c342:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800c344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c346:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c348:	2301      	movs	r3, #1
 800c34a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c34c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c34e:	f383 8810 	msr	PRIMASK, r3
}
 800c352:	46c0      	nop			@ (mov r8, r8)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	49b8      	ldr	r1, [pc, #736]	@ (800c640 <HAL_UART_IRQHandler+0x65c>)
 800c360:	400a      	ands	r2, r1
 800c362:	601a      	str	r2, [r3, #0]
 800c364:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c366:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c36a:	f383 8810 	msr	PRIMASK, r3
}
 800c36e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c370:	f3ef 8310 	mrs	r3, PRIMASK
 800c374:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800c376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c378:	677b      	str	r3, [r7, #116]	@ 0x74
 800c37a:	2301      	movs	r3, #1
 800c37c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c37e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c380:	f383 8810 	msr	PRIMASK, r3
}
 800c384:	46c0      	nop			@ (mov r8, r8)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	689a      	ldr	r2, [r3, #8]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	2101      	movs	r1, #1
 800c392:	438a      	bics	r2, r1
 800c394:	609a      	str	r2, [r3, #8]
 800c396:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c398:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c39a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c39c:	f383 8810 	msr	PRIMASK, r3
}
 800c3a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c3a2:	f3ef 8310 	mrs	r3, PRIMASK
 800c3a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800c3a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3aa:	673b      	str	r3, [r7, #112]	@ 0x70
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3b2:	f383 8810 	msr	PRIMASK, r3
}
 800c3b6:	46c0      	nop			@ (mov r8, r8)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	689a      	ldr	r2, [r3, #8]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2140      	movs	r1, #64	@ 0x40
 800c3c4:	438a      	bics	r2, r1
 800c3c6:	609a      	str	r2, [r3, #8]
 800c3c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c3ca:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3ce:	f383 8810 	msr	PRIMASK, r3
}
 800c3d2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	228c      	movs	r2, #140	@ 0x8c
 800c3d8:	2120      	movs	r1, #32
 800c3da:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c3e2:	f3ef 8310 	mrs	r3, PRIMASK
 800c3e6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800c3e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c3f2:	f383 8810 	msr	PRIMASK, r3
}
 800c3f6:	46c0      	nop			@ (mov r8, r8)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2110      	movs	r1, #16
 800c404:	438a      	bics	r2, r1
 800c406:	601a      	str	r2, [r3, #0]
 800c408:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c40a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c40c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c40e:	f383 8810 	msr	PRIMASK, r3
}
 800c412:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2280      	movs	r2, #128	@ 0x80
 800c418:	589b      	ldr	r3, [r3, r2]
 800c41a:	0018      	movs	r0, r3
 800c41c:	f7fb fba2 	bl	8007b64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2202      	movs	r2, #2
 800c424:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	22c0      	movs	r2, #192	@ 0xc0
 800c42a:	589b      	ldr	r3, [r3, r2]
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	215c      	movs	r1, #92	@ 0x5c
 800c430:	5a51      	ldrh	r1, [r2, r1]
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	205e      	movs	r0, #94	@ 0x5e
 800c436:	5a12      	ldrh	r2, [r2, r0]
 800c438:	b292      	uxth	r2, r2
 800c43a:	1a8a      	subs	r2, r1, r2
 800c43c:	b291      	uxth	r1, r2
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	0010      	movs	r0, r2
 800c442:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c444:	e0f4      	b.n	800c630 <HAL_UART_IRQHandler+0x64c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	225c      	movs	r2, #92	@ 0x5c
 800c44a:	5a99      	ldrh	r1, [r3, r2]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	225e      	movs	r2, #94	@ 0x5e
 800c450:	5a9b      	ldrh	r3, [r3, r2]
 800c452:	b29a      	uxth	r2, r3
 800c454:	208e      	movs	r0, #142	@ 0x8e
 800c456:	183b      	adds	r3, r7, r0
 800c458:	1a8a      	subs	r2, r1, r2
 800c45a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	225e      	movs	r2, #94	@ 0x5e
 800c460:	5a9b      	ldrh	r3, [r3, r2]
 800c462:	b29b      	uxth	r3, r3
 800c464:	2b00      	cmp	r3, #0
 800c466:	d100      	bne.n	800c46a <HAL_UART_IRQHandler+0x486>
 800c468:	e0e4      	b.n	800c634 <HAL_UART_IRQHandler+0x650>
          && (nb_rx_data > 0U))
 800c46a:	183b      	adds	r3, r7, r0
 800c46c:	881b      	ldrh	r3, [r3, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d100      	bne.n	800c474 <HAL_UART_IRQHandler+0x490>
 800c472:	e0df      	b.n	800c634 <HAL_UART_IRQHandler+0x650>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c474:	f3ef 8310 	mrs	r3, PRIMASK
 800c478:	60fb      	str	r3, [r7, #12]
  return(result);
 800c47a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c47c:	2488      	movs	r4, #136	@ 0x88
 800c47e:	193a      	adds	r2, r7, r4
 800c480:	6013      	str	r3, [r2, #0]
 800c482:	2301      	movs	r3, #1
 800c484:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	f383 8810 	msr	PRIMASK, r3
}
 800c48c:	46c0      	nop			@ (mov r8, r8)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	496a      	ldr	r1, [pc, #424]	@ (800c644 <HAL_UART_IRQHandler+0x660>)
 800c49a:	400a      	ands	r2, r1
 800c49c:	601a      	str	r2, [r3, #0]
 800c49e:	193b      	adds	r3, r7, r4
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	f383 8810 	msr	PRIMASK, r3
}
 800c4aa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c4ac:	f3ef 8310 	mrs	r3, PRIMASK
 800c4b0:	61bb      	str	r3, [r7, #24]
  return(result);
 800c4b2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c4b4:	2484      	movs	r4, #132	@ 0x84
 800c4b6:	193a      	adds	r2, r7, r4
 800c4b8:	6013      	str	r3, [r2, #0]
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	f383 8810 	msr	PRIMASK, r3
}
 800c4c4:	46c0      	nop			@ (mov r8, r8)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	689a      	ldr	r2, [r3, #8]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	495d      	ldr	r1, [pc, #372]	@ (800c648 <HAL_UART_IRQHandler+0x664>)
 800c4d2:	400a      	ands	r2, r1
 800c4d4:	609a      	str	r2, [r3, #8]
 800c4d6:	193b      	adds	r3, r7, r4
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4dc:	6a3b      	ldr	r3, [r7, #32]
 800c4de:	f383 8810 	msr	PRIMASK, r3
}
 800c4e2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	228c      	movs	r2, #140	@ 0x8c
 800c4e8:	2120      	movs	r1, #32
 800c4ea:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c4f8:	f3ef 8310 	mrs	r3, PRIMASK
 800c4fc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800c4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c500:	2480      	movs	r4, #128	@ 0x80
 800c502:	193a      	adds	r2, r7, r4
 800c504:	6013      	str	r3, [r2, #0]
 800c506:	2301      	movs	r3, #1
 800c508:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c50c:	f383 8810 	msr	PRIMASK, r3
}
 800c510:	46c0      	nop			@ (mov r8, r8)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2110      	movs	r1, #16
 800c51e:	438a      	bics	r2, r1
 800c520:	601a      	str	r2, [r3, #0]
 800c522:	193b      	adds	r3, r7, r4
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c52a:	f383 8810 	msr	PRIMASK, r3
}
 800c52e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2202      	movs	r2, #2
 800c534:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	22c0      	movs	r2, #192	@ 0xc0
 800c53a:	589b      	ldr	r3, [r3, r2]
 800c53c:	183a      	adds	r2, r7, r0
 800c53e:	8811      	ldrh	r1, [r2, #0]
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	0010      	movs	r0, r2
 800c544:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c546:	e075      	b.n	800c634 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c548:	23a4      	movs	r3, #164	@ 0xa4
 800c54a:	18fb      	adds	r3, r7, r3
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	2380      	movs	r3, #128	@ 0x80
 800c550:	035b      	lsls	r3, r3, #13
 800c552:	4013      	ands	r3, r2
 800c554:	d012      	beq.n	800c57c <HAL_UART_IRQHandler+0x598>
 800c556:	239c      	movs	r3, #156	@ 0x9c
 800c558:	18fb      	adds	r3, r7, r3
 800c55a:	681a      	ldr	r2, [r3, #0]
 800c55c:	2380      	movs	r3, #128	@ 0x80
 800c55e:	03db      	lsls	r3, r3, #15
 800c560:	4013      	ands	r3, r2
 800c562:	d00b      	beq.n	800c57c <HAL_UART_IRQHandler+0x598>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2280      	movs	r2, #128	@ 0x80
 800c56a:	0352      	lsls	r2, r2, #13
 800c56c:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	22b4      	movs	r2, #180	@ 0xb4
 800c572:	589b      	ldr	r3, [r3, r2]
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	0010      	movs	r0, r2
 800c578:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c57a:	e05e      	b.n	800c63a <HAL_UART_IRQHandler+0x656>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c57c:	23a4      	movs	r3, #164	@ 0xa4
 800c57e:	18fb      	adds	r3, r7, r3
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2280      	movs	r2, #128	@ 0x80
 800c584:	4013      	ands	r3, r2
 800c586:	d016      	beq.n	800c5b6 <HAL_UART_IRQHandler+0x5d2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c588:	23a0      	movs	r3, #160	@ 0xa0
 800c58a:	18fb      	adds	r3, r7, r3
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	2280      	movs	r2, #128	@ 0x80
 800c590:	4013      	ands	r3, r2
 800c592:	d106      	bne.n	800c5a2 <HAL_UART_IRQHandler+0x5be>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c594:	239c      	movs	r3, #156	@ 0x9c
 800c596:	18fb      	adds	r3, r7, r3
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	2380      	movs	r3, #128	@ 0x80
 800c59c:	041b      	lsls	r3, r3, #16
 800c59e:	4013      	ands	r3, r2
 800c5a0:	d009      	beq.n	800c5b6 <HAL_UART_IRQHandler+0x5d2>
  {
    if (huart->TxISR != NULL)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d046      	beq.n	800c638 <HAL_UART_IRQHandler+0x654>
    {
      huart->TxISR(huart);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	0010      	movs	r0, r2
 800c5b2:	4798      	blx	r3
    }
    return;
 800c5b4:	e040      	b.n	800c638 <HAL_UART_IRQHandler+0x654>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c5b6:	23a4      	movs	r3, #164	@ 0xa4
 800c5b8:	18fb      	adds	r3, r7, r3
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2240      	movs	r2, #64	@ 0x40
 800c5be:	4013      	ands	r3, r2
 800c5c0:	d00a      	beq.n	800c5d8 <HAL_UART_IRQHandler+0x5f4>
 800c5c2:	23a0      	movs	r3, #160	@ 0xa0
 800c5c4:	18fb      	adds	r3, r7, r3
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	2240      	movs	r2, #64	@ 0x40
 800c5ca:	4013      	ands	r3, r2
 800c5cc:	d004      	beq.n	800c5d8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	0018      	movs	r0, r3
 800c5d2:	f000 ff85 	bl	800d4e0 <UART_EndTransmit_IT>
    return;
 800c5d6:	e030      	b.n	800c63a <HAL_UART_IRQHandler+0x656>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c5d8:	23a4      	movs	r3, #164	@ 0xa4
 800c5da:	18fb      	adds	r3, r7, r3
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	2380      	movs	r3, #128	@ 0x80
 800c5e0:	041b      	lsls	r3, r3, #16
 800c5e2:	4013      	ands	r3, r2
 800c5e4:	d00d      	beq.n	800c602 <HAL_UART_IRQHandler+0x61e>
 800c5e6:	23a0      	movs	r3, #160	@ 0xa0
 800c5e8:	18fb      	adds	r3, r7, r3
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	2380      	movs	r3, #128	@ 0x80
 800c5ee:	05db      	lsls	r3, r3, #23
 800c5f0:	4013      	ands	r3, r2
 800c5f2:	d006      	beq.n	800c602 <HAL_UART_IRQHandler+0x61e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	22bc      	movs	r2, #188	@ 0xbc
 800c5f8:	589b      	ldr	r3, [r3, r2]
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	0010      	movs	r0, r2
 800c5fe:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c600:	e01b      	b.n	800c63a <HAL_UART_IRQHandler+0x656>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c602:	23a4      	movs	r3, #164	@ 0xa4
 800c604:	18fb      	adds	r3, r7, r3
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	2380      	movs	r3, #128	@ 0x80
 800c60a:	045b      	lsls	r3, r3, #17
 800c60c:	4013      	ands	r3, r2
 800c60e:	d014      	beq.n	800c63a <HAL_UART_IRQHandler+0x656>
 800c610:	23a0      	movs	r3, #160	@ 0xa0
 800c612:	18fb      	adds	r3, r7, r3
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	2b00      	cmp	r3, #0
 800c618:	da0f      	bge.n	800c63a <HAL_UART_IRQHandler+0x656>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	22b8      	movs	r2, #184	@ 0xb8
 800c61e:	589b      	ldr	r3, [r3, r2]
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	0010      	movs	r0, r2
 800c624:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c626:	e008      	b.n	800c63a <HAL_UART_IRQHandler+0x656>
      return;
 800c628:	46c0      	nop			@ (mov r8, r8)
 800c62a:	e006      	b.n	800c63a <HAL_UART_IRQHandler+0x656>
    return;
 800c62c:	46c0      	nop			@ (mov r8, r8)
 800c62e:	e004      	b.n	800c63a <HAL_UART_IRQHandler+0x656>
      return;
 800c630:	46c0      	nop			@ (mov r8, r8)
 800c632:	e002      	b.n	800c63a <HAL_UART_IRQHandler+0x656>
      return;
 800c634:	46c0      	nop			@ (mov r8, r8)
 800c636:	e000      	b.n	800c63a <HAL_UART_IRQHandler+0x656>
    return;
 800c638:	46c0      	nop			@ (mov r8, r8)
  }
}
 800c63a:	46bd      	mov	sp, r7
 800c63c:	b02a      	add	sp, #168	@ 0xa8
 800c63e:	bdb0      	pop	{r4, r5, r7, pc}
 800c640:	fffffeff 	.word	0xfffffeff
 800c644:	fffffedf 	.word	0xfffffedf
 800c648:	effffffe 	.word	0xeffffffe

0800c64c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c654:	46c0      	nop			@ (mov r8, r8)
 800c656:	46bd      	mov	sp, r7
 800c658:	b002      	add	sp, #8
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c664:	46c0      	nop			@ (mov r8, r8)
 800c666:	46bd      	mov	sp, r7
 800c668:	b002      	add	sp, #8
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c674:	46c0      	nop			@ (mov r8, r8)
 800c676:	46bd      	mov	sp, r7
 800c678:	b002      	add	sp, #8
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c684:	46c0      	nop			@ (mov r8, r8)
 800c686:	46bd      	mov	sp, r7
 800c688:	b002      	add	sp, #8
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c694:	46c0      	nop			@ (mov r8, r8)
 800c696:	46bd      	mov	sp, r7
 800c698:	b002      	add	sp, #8
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c6a4:	46c0      	nop			@ (mov r8, r8)
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	b002      	add	sp, #8
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800c6b4:	46c0      	nop			@ (mov r8, r8)
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	b002      	add	sp, #8
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800c6c4:	46c0      	nop			@ (mov r8, r8)
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	b002      	add	sp, #8
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	000a      	movs	r2, r1
 800c6d6:	1cbb      	adds	r3, r7, #2
 800c6d8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c6da:	46c0      	nop			@ (mov r8, r8)
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	b002      	add	sp, #8
 800c6e0:	bd80      	pop	{r7, pc}
	...

0800c6e4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b082      	sub	sp, #8
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2194      	movs	r1, #148	@ 0x94
 800c6f0:	4a18      	ldr	r2, [pc, #96]	@ (800c754 <UART_InitCallbacksToDefault+0x70>)
 800c6f2:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2198      	movs	r1, #152	@ 0x98
 800c6f8:	4a17      	ldr	r2, [pc, #92]	@ (800c758 <UART_InitCallbacksToDefault+0x74>)
 800c6fa:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	219c      	movs	r1, #156	@ 0x9c
 800c700:	4a16      	ldr	r2, [pc, #88]	@ (800c75c <UART_InitCallbacksToDefault+0x78>)
 800c702:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	21a0      	movs	r1, #160	@ 0xa0
 800c708:	4a15      	ldr	r2, [pc, #84]	@ (800c760 <UART_InitCallbacksToDefault+0x7c>)
 800c70a:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	21a4      	movs	r1, #164	@ 0xa4
 800c710:	4a14      	ldr	r2, [pc, #80]	@ (800c764 <UART_InitCallbacksToDefault+0x80>)
 800c712:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	21a8      	movs	r1, #168	@ 0xa8
 800c718:	4a13      	ldr	r2, [pc, #76]	@ (800c768 <UART_InitCallbacksToDefault+0x84>)
 800c71a:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	21ac      	movs	r1, #172	@ 0xac
 800c720:	4a12      	ldr	r2, [pc, #72]	@ (800c76c <UART_InitCallbacksToDefault+0x88>)
 800c722:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	21b0      	movs	r1, #176	@ 0xb0
 800c728:	4a11      	ldr	r2, [pc, #68]	@ (800c770 <UART_InitCallbacksToDefault+0x8c>)
 800c72a:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	21b4      	movs	r1, #180	@ 0xb4
 800c730:	4a10      	ldr	r2, [pc, #64]	@ (800c774 <UART_InitCallbacksToDefault+0x90>)
 800c732:	505a      	str	r2, [r3, r1]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	21b8      	movs	r1, #184	@ 0xb8
 800c738:	4a0f      	ldr	r2, [pc, #60]	@ (800c778 <UART_InitCallbacksToDefault+0x94>)
 800c73a:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	21bc      	movs	r1, #188	@ 0xbc
 800c740:	4a0e      	ldr	r2, [pc, #56]	@ (800c77c <UART_InitCallbacksToDefault+0x98>)
 800c742:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	21c0      	movs	r1, #192	@ 0xc0
 800c748:	4a0d      	ldr	r2, [pc, #52]	@ (800c780 <UART_InitCallbacksToDefault+0x9c>)
 800c74a:	505a      	str	r2, [r3, r1]

}
 800c74c:	46c0      	nop			@ (mov r8, r8)
 800c74e:	46bd      	mov	sp, r7
 800c750:	b002      	add	sp, #8
 800c752:	bd80      	pop	{r7, pc}
 800c754:	0800c65d 	.word	0x0800c65d
 800c758:	0800c64d 	.word	0x0800c64d
 800c75c:	0800c67d 	.word	0x0800c67d
 800c760:	0800c66d 	.word	0x0800c66d
 800c764:	0800c68d 	.word	0x0800c68d
 800c768:	0800c69d 	.word	0x0800c69d
 800c76c:	0800c6ad 	.word	0x0800c6ad
 800c770:	0800c6bd 	.word	0x0800c6bd
 800c774:	0800d53d 	.word	0x0800d53d
 800c778:	0800d54d 	.word	0x0800d54d
 800c77c:	0800d55d 	.word	0x0800d55d
 800c780:	0800c6cd 	.word	0x0800c6cd

0800c784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c784:	b5b0      	push	{r4, r5, r7, lr}
 800c786:	b090      	sub	sp, #64	@ 0x40
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c78c:	231a      	movs	r3, #26
 800c78e:	2220      	movs	r2, #32
 800c790:	189b      	adds	r3, r3, r2
 800c792:	19db      	adds	r3, r3, r7
 800c794:	2200      	movs	r2, #0
 800c796:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79a:	689a      	ldr	r2, [r3, #8]
 800c79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79e:	691b      	ldr	r3, [r3, #16]
 800c7a0:	431a      	orrs	r2, r3
 800c7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a4:	695b      	ldr	r3, [r3, #20]
 800c7a6:	431a      	orrs	r2, r3
 800c7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7aa:	69db      	ldr	r3, [r3, #28]
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c7b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4ac4      	ldr	r2, [pc, #784]	@ (800cac8 <UART_SetConfig+0x344>)
 800c7b8:	4013      	ands	r3, r2
 800c7ba:	0019      	movs	r1, r3
 800c7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7c2:	430b      	orrs	r3, r1
 800c7c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	4abf      	ldr	r2, [pc, #764]	@ (800cacc <UART_SetConfig+0x348>)
 800c7ce:	4013      	ands	r3, r2
 800c7d0:	0018      	movs	r0, r3
 800c7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d4:	68d9      	ldr	r1, [r3, #12]
 800c7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	0003      	movs	r3, r0
 800c7dc:	430b      	orrs	r3, r1
 800c7de:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e2:	699b      	ldr	r3, [r3, #24]
 800c7e4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4ab9      	ldr	r2, [pc, #740]	@ (800cad0 <UART_SetConfig+0x34c>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d004      	beq.n	800c7fa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f2:	6a1b      	ldr	r3, [r3, #32]
 800c7f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	689b      	ldr	r3, [r3, #8]
 800c800:	4ab4      	ldr	r2, [pc, #720]	@ (800cad4 <UART_SetConfig+0x350>)
 800c802:	4013      	ands	r3, r2
 800c804:	0019      	movs	r1, r3
 800c806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c808:	681a      	ldr	r2, [r3, #0]
 800c80a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c80c:	430b      	orrs	r3, r1
 800c80e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c816:	220f      	movs	r2, #15
 800c818:	4393      	bics	r3, r2
 800c81a:	0018      	movs	r0, r3
 800c81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c81e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	0003      	movs	r3, r0
 800c826:	430b      	orrs	r3, r1
 800c828:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4aaa      	ldr	r2, [pc, #680]	@ (800cad8 <UART_SetConfig+0x354>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d131      	bne.n	800c898 <UART_SetConfig+0x114>
 800c834:	4ba9      	ldr	r3, [pc, #676]	@ (800cadc <UART_SetConfig+0x358>)
 800c836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c838:	2203      	movs	r2, #3
 800c83a:	4013      	ands	r3, r2
 800c83c:	2b03      	cmp	r3, #3
 800c83e:	d01d      	beq.n	800c87c <UART_SetConfig+0xf8>
 800c840:	d823      	bhi.n	800c88a <UART_SetConfig+0x106>
 800c842:	2b02      	cmp	r3, #2
 800c844:	d00c      	beq.n	800c860 <UART_SetConfig+0xdc>
 800c846:	d820      	bhi.n	800c88a <UART_SetConfig+0x106>
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d002      	beq.n	800c852 <UART_SetConfig+0xce>
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d00e      	beq.n	800c86e <UART_SetConfig+0xea>
 800c850:	e01b      	b.n	800c88a <UART_SetConfig+0x106>
 800c852:	231b      	movs	r3, #27
 800c854:	2220      	movs	r2, #32
 800c856:	189b      	adds	r3, r3, r2
 800c858:	19db      	adds	r3, r3, r7
 800c85a:	2200      	movs	r2, #0
 800c85c:	701a      	strb	r2, [r3, #0]
 800c85e:	e071      	b.n	800c944 <UART_SetConfig+0x1c0>
 800c860:	231b      	movs	r3, #27
 800c862:	2220      	movs	r2, #32
 800c864:	189b      	adds	r3, r3, r2
 800c866:	19db      	adds	r3, r3, r7
 800c868:	2202      	movs	r2, #2
 800c86a:	701a      	strb	r2, [r3, #0]
 800c86c:	e06a      	b.n	800c944 <UART_SetConfig+0x1c0>
 800c86e:	231b      	movs	r3, #27
 800c870:	2220      	movs	r2, #32
 800c872:	189b      	adds	r3, r3, r2
 800c874:	19db      	adds	r3, r3, r7
 800c876:	2204      	movs	r2, #4
 800c878:	701a      	strb	r2, [r3, #0]
 800c87a:	e063      	b.n	800c944 <UART_SetConfig+0x1c0>
 800c87c:	231b      	movs	r3, #27
 800c87e:	2220      	movs	r2, #32
 800c880:	189b      	adds	r3, r3, r2
 800c882:	19db      	adds	r3, r3, r7
 800c884:	2208      	movs	r2, #8
 800c886:	701a      	strb	r2, [r3, #0]
 800c888:	e05c      	b.n	800c944 <UART_SetConfig+0x1c0>
 800c88a:	231b      	movs	r3, #27
 800c88c:	2220      	movs	r2, #32
 800c88e:	189b      	adds	r3, r3, r2
 800c890:	19db      	adds	r3, r3, r7
 800c892:	2210      	movs	r2, #16
 800c894:	701a      	strb	r2, [r3, #0]
 800c896:	e055      	b.n	800c944 <UART_SetConfig+0x1c0>
 800c898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4a90      	ldr	r2, [pc, #576]	@ (800cae0 <UART_SetConfig+0x35c>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d106      	bne.n	800c8b0 <UART_SetConfig+0x12c>
 800c8a2:	231b      	movs	r3, #27
 800c8a4:	2220      	movs	r2, #32
 800c8a6:	189b      	adds	r3, r3, r2
 800c8a8:	19db      	adds	r3, r3, r7
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	701a      	strb	r2, [r3, #0]
 800c8ae:	e049      	b.n	800c944 <UART_SetConfig+0x1c0>
 800c8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4a86      	ldr	r2, [pc, #536]	@ (800cad0 <UART_SetConfig+0x34c>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d13e      	bne.n	800c938 <UART_SetConfig+0x1b4>
 800c8ba:	4b88      	ldr	r3, [pc, #544]	@ (800cadc <UART_SetConfig+0x358>)
 800c8bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c8be:	23c0      	movs	r3, #192	@ 0xc0
 800c8c0:	011b      	lsls	r3, r3, #4
 800c8c2:	4013      	ands	r3, r2
 800c8c4:	22c0      	movs	r2, #192	@ 0xc0
 800c8c6:	0112      	lsls	r2, r2, #4
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d027      	beq.n	800c91c <UART_SetConfig+0x198>
 800c8cc:	22c0      	movs	r2, #192	@ 0xc0
 800c8ce:	0112      	lsls	r2, r2, #4
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d82a      	bhi.n	800c92a <UART_SetConfig+0x1a6>
 800c8d4:	2280      	movs	r2, #128	@ 0x80
 800c8d6:	0112      	lsls	r2, r2, #4
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d011      	beq.n	800c900 <UART_SetConfig+0x17c>
 800c8dc:	2280      	movs	r2, #128	@ 0x80
 800c8de:	0112      	lsls	r2, r2, #4
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d822      	bhi.n	800c92a <UART_SetConfig+0x1a6>
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d004      	beq.n	800c8f2 <UART_SetConfig+0x16e>
 800c8e8:	2280      	movs	r2, #128	@ 0x80
 800c8ea:	00d2      	lsls	r2, r2, #3
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d00e      	beq.n	800c90e <UART_SetConfig+0x18a>
 800c8f0:	e01b      	b.n	800c92a <UART_SetConfig+0x1a6>
 800c8f2:	231b      	movs	r3, #27
 800c8f4:	2220      	movs	r2, #32
 800c8f6:	189b      	adds	r3, r3, r2
 800c8f8:	19db      	adds	r3, r3, r7
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	701a      	strb	r2, [r3, #0]
 800c8fe:	e021      	b.n	800c944 <UART_SetConfig+0x1c0>
 800c900:	231b      	movs	r3, #27
 800c902:	2220      	movs	r2, #32
 800c904:	189b      	adds	r3, r3, r2
 800c906:	19db      	adds	r3, r3, r7
 800c908:	2202      	movs	r2, #2
 800c90a:	701a      	strb	r2, [r3, #0]
 800c90c:	e01a      	b.n	800c944 <UART_SetConfig+0x1c0>
 800c90e:	231b      	movs	r3, #27
 800c910:	2220      	movs	r2, #32
 800c912:	189b      	adds	r3, r3, r2
 800c914:	19db      	adds	r3, r3, r7
 800c916:	2204      	movs	r2, #4
 800c918:	701a      	strb	r2, [r3, #0]
 800c91a:	e013      	b.n	800c944 <UART_SetConfig+0x1c0>
 800c91c:	231b      	movs	r3, #27
 800c91e:	2220      	movs	r2, #32
 800c920:	189b      	adds	r3, r3, r2
 800c922:	19db      	adds	r3, r3, r7
 800c924:	2208      	movs	r2, #8
 800c926:	701a      	strb	r2, [r3, #0]
 800c928:	e00c      	b.n	800c944 <UART_SetConfig+0x1c0>
 800c92a:	231b      	movs	r3, #27
 800c92c:	2220      	movs	r2, #32
 800c92e:	189b      	adds	r3, r3, r2
 800c930:	19db      	adds	r3, r3, r7
 800c932:	2210      	movs	r2, #16
 800c934:	701a      	strb	r2, [r3, #0]
 800c936:	e005      	b.n	800c944 <UART_SetConfig+0x1c0>
 800c938:	231b      	movs	r3, #27
 800c93a:	2220      	movs	r2, #32
 800c93c:	189b      	adds	r3, r3, r2
 800c93e:	19db      	adds	r3, r3, r7
 800c940:	2210      	movs	r2, #16
 800c942:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a61      	ldr	r2, [pc, #388]	@ (800cad0 <UART_SetConfig+0x34c>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d000      	beq.n	800c950 <UART_SetConfig+0x1cc>
 800c94e:	e092      	b.n	800ca76 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c950:	231b      	movs	r3, #27
 800c952:	2220      	movs	r2, #32
 800c954:	189b      	adds	r3, r3, r2
 800c956:	19db      	adds	r3, r3, r7
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	2b08      	cmp	r3, #8
 800c95c:	d015      	beq.n	800c98a <UART_SetConfig+0x206>
 800c95e:	dc18      	bgt.n	800c992 <UART_SetConfig+0x20e>
 800c960:	2b04      	cmp	r3, #4
 800c962:	d00d      	beq.n	800c980 <UART_SetConfig+0x1fc>
 800c964:	dc15      	bgt.n	800c992 <UART_SetConfig+0x20e>
 800c966:	2b00      	cmp	r3, #0
 800c968:	d002      	beq.n	800c970 <UART_SetConfig+0x1ec>
 800c96a:	2b02      	cmp	r3, #2
 800c96c:	d005      	beq.n	800c97a <UART_SetConfig+0x1f6>
 800c96e:	e010      	b.n	800c992 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c970:	f7fc fdd6 	bl	8009520 <HAL_RCC_GetPCLK1Freq>
 800c974:	0003      	movs	r3, r0
 800c976:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c978:	e014      	b.n	800c9a4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c97a:	4b5a      	ldr	r3, [pc, #360]	@ (800cae4 <UART_SetConfig+0x360>)
 800c97c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c97e:	e011      	b.n	800c9a4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c980:	f7fc fd42 	bl	8009408 <HAL_RCC_GetSysClockFreq>
 800c984:	0003      	movs	r3, r0
 800c986:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c988:	e00c      	b.n	800c9a4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c98a:	2380      	movs	r3, #128	@ 0x80
 800c98c:	021b      	lsls	r3, r3, #8
 800c98e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c990:	e008      	b.n	800c9a4 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800c992:	2300      	movs	r3, #0
 800c994:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800c996:	231a      	movs	r3, #26
 800c998:	2220      	movs	r2, #32
 800c99a:	189b      	adds	r3, r3, r2
 800c99c:	19db      	adds	r3, r3, r7
 800c99e:	2201      	movs	r2, #1
 800c9a0:	701a      	strb	r2, [r3, #0]
        break;
 800c9a2:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c9a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d100      	bne.n	800c9ac <UART_SetConfig+0x228>
 800c9aa:	e147      	b.n	800cc3c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c9b0:	4b4d      	ldr	r3, [pc, #308]	@ (800cae8 <UART_SetConfig+0x364>)
 800c9b2:	0052      	lsls	r2, r2, #1
 800c9b4:	5ad3      	ldrh	r3, [r2, r3]
 800c9b6:	0019      	movs	r1, r3
 800c9b8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c9ba:	f7f3 fba3 	bl	8000104 <__udivsi3>
 800c9be:	0003      	movs	r3, r0
 800c9c0:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c4:	685a      	ldr	r2, [r3, #4]
 800c9c6:	0013      	movs	r3, r2
 800c9c8:	005b      	lsls	r3, r3, #1
 800c9ca:	189b      	adds	r3, r3, r2
 800c9cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d305      	bcc.n	800c9de <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d906      	bls.n	800c9ec <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800c9de:	231a      	movs	r3, #26
 800c9e0:	2220      	movs	r2, #32
 800c9e2:	189b      	adds	r3, r3, r2
 800c9e4:	19db      	adds	r3, r3, r7
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	701a      	strb	r2, [r3, #0]
 800c9ea:	e127      	b.n	800cc3c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9ee:	61bb      	str	r3, [r7, #24]
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	61fb      	str	r3, [r7, #28]
 800c9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c9f8:	4b3b      	ldr	r3, [pc, #236]	@ (800cae8 <UART_SetConfig+0x364>)
 800c9fa:	0052      	lsls	r2, r2, #1
 800c9fc:	5ad3      	ldrh	r3, [r2, r3]
 800c9fe:	613b      	str	r3, [r7, #16]
 800ca00:	2300      	movs	r3, #0
 800ca02:	617b      	str	r3, [r7, #20]
 800ca04:	693a      	ldr	r2, [r7, #16]
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	69b8      	ldr	r0, [r7, #24]
 800ca0a:	69f9      	ldr	r1, [r7, #28]
 800ca0c:	f7f3 fc06 	bl	800021c <__aeabi_uldivmod>
 800ca10:	0002      	movs	r2, r0
 800ca12:	000b      	movs	r3, r1
 800ca14:	0e11      	lsrs	r1, r2, #24
 800ca16:	021d      	lsls	r5, r3, #8
 800ca18:	430d      	orrs	r5, r1
 800ca1a:	0214      	lsls	r4, r2, #8
 800ca1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	085b      	lsrs	r3, r3, #1
 800ca22:	60bb      	str	r3, [r7, #8]
 800ca24:	2300      	movs	r3, #0
 800ca26:	60fb      	str	r3, [r7, #12]
 800ca28:	68b8      	ldr	r0, [r7, #8]
 800ca2a:	68f9      	ldr	r1, [r7, #12]
 800ca2c:	1900      	adds	r0, r0, r4
 800ca2e:	4169      	adcs	r1, r5
 800ca30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	603b      	str	r3, [r7, #0]
 800ca36:	2300      	movs	r3, #0
 800ca38:	607b      	str	r3, [r7, #4]
 800ca3a:	683a      	ldr	r2, [r7, #0]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f7f3 fbed 	bl	800021c <__aeabi_uldivmod>
 800ca42:	0002      	movs	r2, r0
 800ca44:	000b      	movs	r3, r1
 800ca46:	0013      	movs	r3, r2
 800ca48:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca4c:	23c0      	movs	r3, #192	@ 0xc0
 800ca4e:	009b      	lsls	r3, r3, #2
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d309      	bcc.n	800ca68 <UART_SetConfig+0x2e4>
 800ca54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca56:	2380      	movs	r3, #128	@ 0x80
 800ca58:	035b      	lsls	r3, r3, #13
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d204      	bcs.n	800ca68 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800ca5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca64:	60da      	str	r2, [r3, #12]
 800ca66:	e0e9      	b.n	800cc3c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800ca68:	231a      	movs	r3, #26
 800ca6a:	2220      	movs	r2, #32
 800ca6c:	189b      	adds	r3, r3, r2
 800ca6e:	19db      	adds	r3, r3, r7
 800ca70:	2201      	movs	r2, #1
 800ca72:	701a      	strb	r2, [r3, #0]
 800ca74:	e0e2      	b.n	800cc3c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca78:	69da      	ldr	r2, [r3, #28]
 800ca7a:	2380      	movs	r3, #128	@ 0x80
 800ca7c:	021b      	lsls	r3, r3, #8
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d000      	beq.n	800ca84 <UART_SetConfig+0x300>
 800ca82:	e083      	b.n	800cb8c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800ca84:	231b      	movs	r3, #27
 800ca86:	2220      	movs	r2, #32
 800ca88:	189b      	adds	r3, r3, r2
 800ca8a:	19db      	adds	r3, r3, r7
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	2b08      	cmp	r3, #8
 800ca90:	d015      	beq.n	800cabe <UART_SetConfig+0x33a>
 800ca92:	dc2b      	bgt.n	800caec <UART_SetConfig+0x368>
 800ca94:	2b04      	cmp	r3, #4
 800ca96:	d00d      	beq.n	800cab4 <UART_SetConfig+0x330>
 800ca98:	dc28      	bgt.n	800caec <UART_SetConfig+0x368>
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d002      	beq.n	800caa4 <UART_SetConfig+0x320>
 800ca9e:	2b02      	cmp	r3, #2
 800caa0:	d005      	beq.n	800caae <UART_SetConfig+0x32a>
 800caa2:	e023      	b.n	800caec <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800caa4:	f7fc fd3c 	bl	8009520 <HAL_RCC_GetPCLK1Freq>
 800caa8:	0003      	movs	r3, r0
 800caaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800caac:	e027      	b.n	800cafe <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800caae:	4b0d      	ldr	r3, [pc, #52]	@ (800cae4 <UART_SetConfig+0x360>)
 800cab0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cab2:	e024      	b.n	800cafe <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cab4:	f7fc fca8 	bl	8009408 <HAL_RCC_GetSysClockFreq>
 800cab8:	0003      	movs	r3, r0
 800caba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cabc:	e01f      	b.n	800cafe <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cabe:	2380      	movs	r3, #128	@ 0x80
 800cac0:	021b      	lsls	r3, r3, #8
 800cac2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cac4:	e01b      	b.n	800cafe <UART_SetConfig+0x37a>
 800cac6:	46c0      	nop			@ (mov r8, r8)
 800cac8:	cfff69f3 	.word	0xcfff69f3
 800cacc:	ffffcfff 	.word	0xffffcfff
 800cad0:	40008000 	.word	0x40008000
 800cad4:	11fff4ff 	.word	0x11fff4ff
 800cad8:	40013800 	.word	0x40013800
 800cadc:	40021000 	.word	0x40021000
 800cae0:	40004400 	.word	0x40004400
 800cae4:	00f42400 	.word	0x00f42400
 800cae8:	0800e014 	.word	0x0800e014
      default:
        pclk = 0U;
 800caec:	2300      	movs	r3, #0
 800caee:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800caf0:	231a      	movs	r3, #26
 800caf2:	2220      	movs	r2, #32
 800caf4:	189b      	adds	r3, r3, r2
 800caf6:	19db      	adds	r3, r3, r7
 800caf8:	2201      	movs	r2, #1
 800cafa:	701a      	strb	r2, [r3, #0]
        break;
 800cafc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cafe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d100      	bne.n	800cb06 <UART_SetConfig+0x382>
 800cb04:	e09a      	b.n	800cc3c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb0a:	4b58      	ldr	r3, [pc, #352]	@ (800cc6c <UART_SetConfig+0x4e8>)
 800cb0c:	0052      	lsls	r2, r2, #1
 800cb0e:	5ad3      	ldrh	r3, [r2, r3]
 800cb10:	0019      	movs	r1, r3
 800cb12:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cb14:	f7f3 faf6 	bl	8000104 <__udivsi3>
 800cb18:	0003      	movs	r3, r0
 800cb1a:	005a      	lsls	r2, r3, #1
 800cb1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	085b      	lsrs	r3, r3, #1
 800cb22:	18d2      	adds	r2, r2, r3
 800cb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	0019      	movs	r1, r3
 800cb2a:	0010      	movs	r0, r2
 800cb2c:	f7f3 faea 	bl	8000104 <__udivsi3>
 800cb30:	0003      	movs	r3, r0
 800cb32:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb36:	2b0f      	cmp	r3, #15
 800cb38:	d921      	bls.n	800cb7e <UART_SetConfig+0x3fa>
 800cb3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb3c:	2380      	movs	r3, #128	@ 0x80
 800cb3e:	025b      	lsls	r3, r3, #9
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d21c      	bcs.n	800cb7e <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb46:	b29a      	uxth	r2, r3
 800cb48:	200e      	movs	r0, #14
 800cb4a:	2420      	movs	r4, #32
 800cb4c:	1903      	adds	r3, r0, r4
 800cb4e:	19db      	adds	r3, r3, r7
 800cb50:	210f      	movs	r1, #15
 800cb52:	438a      	bics	r2, r1
 800cb54:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cb56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb58:	085b      	lsrs	r3, r3, #1
 800cb5a:	b29b      	uxth	r3, r3
 800cb5c:	2207      	movs	r2, #7
 800cb5e:	4013      	ands	r3, r2
 800cb60:	b299      	uxth	r1, r3
 800cb62:	1903      	adds	r3, r0, r4
 800cb64:	19db      	adds	r3, r3, r7
 800cb66:	1902      	adds	r2, r0, r4
 800cb68:	19d2      	adds	r2, r2, r7
 800cb6a:	8812      	ldrh	r2, [r2, #0]
 800cb6c:	430a      	orrs	r2, r1
 800cb6e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800cb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	1902      	adds	r2, r0, r4
 800cb76:	19d2      	adds	r2, r2, r7
 800cb78:	8812      	ldrh	r2, [r2, #0]
 800cb7a:	60da      	str	r2, [r3, #12]
 800cb7c:	e05e      	b.n	800cc3c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800cb7e:	231a      	movs	r3, #26
 800cb80:	2220      	movs	r2, #32
 800cb82:	189b      	adds	r3, r3, r2
 800cb84:	19db      	adds	r3, r3, r7
 800cb86:	2201      	movs	r2, #1
 800cb88:	701a      	strb	r2, [r3, #0]
 800cb8a:	e057      	b.n	800cc3c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cb8c:	231b      	movs	r3, #27
 800cb8e:	2220      	movs	r2, #32
 800cb90:	189b      	adds	r3, r3, r2
 800cb92:	19db      	adds	r3, r3, r7
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	2b08      	cmp	r3, #8
 800cb98:	d015      	beq.n	800cbc6 <UART_SetConfig+0x442>
 800cb9a:	dc18      	bgt.n	800cbce <UART_SetConfig+0x44a>
 800cb9c:	2b04      	cmp	r3, #4
 800cb9e:	d00d      	beq.n	800cbbc <UART_SetConfig+0x438>
 800cba0:	dc15      	bgt.n	800cbce <UART_SetConfig+0x44a>
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d002      	beq.n	800cbac <UART_SetConfig+0x428>
 800cba6:	2b02      	cmp	r3, #2
 800cba8:	d005      	beq.n	800cbb6 <UART_SetConfig+0x432>
 800cbaa:	e010      	b.n	800cbce <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbac:	f7fc fcb8 	bl	8009520 <HAL_RCC_GetPCLK1Freq>
 800cbb0:	0003      	movs	r3, r0
 800cbb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cbb4:	e014      	b.n	800cbe0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cbb6:	4b2e      	ldr	r3, [pc, #184]	@ (800cc70 <UART_SetConfig+0x4ec>)
 800cbb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cbba:	e011      	b.n	800cbe0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cbbc:	f7fc fc24 	bl	8009408 <HAL_RCC_GetSysClockFreq>
 800cbc0:	0003      	movs	r3, r0
 800cbc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cbc4:	e00c      	b.n	800cbe0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbc6:	2380      	movs	r3, #128	@ 0x80
 800cbc8:	021b      	lsls	r3, r3, #8
 800cbca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cbcc:	e008      	b.n	800cbe0 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800cbd2:	231a      	movs	r3, #26
 800cbd4:	2220      	movs	r2, #32
 800cbd6:	189b      	adds	r3, r3, r2
 800cbd8:	19db      	adds	r3, r3, r7
 800cbda:	2201      	movs	r2, #1
 800cbdc:	701a      	strb	r2, [r3, #0]
        break;
 800cbde:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800cbe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d02a      	beq.n	800cc3c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cbea:	4b20      	ldr	r3, [pc, #128]	@ (800cc6c <UART_SetConfig+0x4e8>)
 800cbec:	0052      	lsls	r2, r2, #1
 800cbee:	5ad3      	ldrh	r3, [r2, r3]
 800cbf0:	0019      	movs	r1, r3
 800cbf2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cbf4:	f7f3 fa86 	bl	8000104 <__udivsi3>
 800cbf8:	0003      	movs	r3, r0
 800cbfa:	001a      	movs	r2, r3
 800cbfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	085b      	lsrs	r3, r3, #1
 800cc02:	18d2      	adds	r2, r2, r3
 800cc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	0019      	movs	r1, r3
 800cc0a:	0010      	movs	r0, r2
 800cc0c:	f7f3 fa7a 	bl	8000104 <__udivsi3>
 800cc10:	0003      	movs	r3, r0
 800cc12:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc16:	2b0f      	cmp	r3, #15
 800cc18:	d90a      	bls.n	800cc30 <UART_SetConfig+0x4ac>
 800cc1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc1c:	2380      	movs	r3, #128	@ 0x80
 800cc1e:	025b      	lsls	r3, r3, #9
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d205      	bcs.n	800cc30 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cc24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc26:	b29a      	uxth	r2, r3
 800cc28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	60da      	str	r2, [r3, #12]
 800cc2e:	e005      	b.n	800cc3c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800cc30:	231a      	movs	r3, #26
 800cc32:	2220      	movs	r2, #32
 800cc34:	189b      	adds	r3, r3, r2
 800cc36:	19db      	adds	r3, r3, r7
 800cc38:	2201      	movs	r2, #1
 800cc3a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cc3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc3e:	226a      	movs	r2, #106	@ 0x6a
 800cc40:	2101      	movs	r1, #1
 800cc42:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800cc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc46:	2268      	movs	r2, #104	@ 0x68
 800cc48:	2101      	movs	r1, #1
 800cc4a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc4e:	2200      	movs	r2, #0
 800cc50:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cc52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc54:	2200      	movs	r2, #0
 800cc56:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cc58:	231a      	movs	r3, #26
 800cc5a:	2220      	movs	r2, #32
 800cc5c:	189b      	adds	r3, r3, r2
 800cc5e:	19db      	adds	r3, r3, r7
 800cc60:	781b      	ldrb	r3, [r3, #0]
}
 800cc62:	0018      	movs	r0, r3
 800cc64:	46bd      	mov	sp, r7
 800cc66:	b010      	add	sp, #64	@ 0x40
 800cc68:	bdb0      	pop	{r4, r5, r7, pc}
 800cc6a:	46c0      	nop			@ (mov r8, r8)
 800cc6c:	0800e014 	.word	0x0800e014
 800cc70:	00f42400 	.word	0x00f42400

0800cc74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc80:	2208      	movs	r2, #8
 800cc82:	4013      	ands	r3, r2
 800cc84:	d00b      	beq.n	800cc9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	4a4a      	ldr	r2, [pc, #296]	@ (800cdb8 <UART_AdvFeatureConfig+0x144>)
 800cc8e:	4013      	ands	r3, r2
 800cc90:	0019      	movs	r1, r3
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	430a      	orrs	r2, r1
 800cc9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cca2:	2201      	movs	r2, #1
 800cca4:	4013      	ands	r3, r2
 800cca6:	d00b      	beq.n	800ccc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	4a43      	ldr	r2, [pc, #268]	@ (800cdbc <UART_AdvFeatureConfig+0x148>)
 800ccb0:	4013      	ands	r3, r2
 800ccb2:	0019      	movs	r1, r3
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	430a      	orrs	r2, r1
 800ccbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccc4:	2202      	movs	r2, #2
 800ccc6:	4013      	ands	r3, r2
 800ccc8:	d00b      	beq.n	800cce2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	4a3b      	ldr	r2, [pc, #236]	@ (800cdc0 <UART_AdvFeatureConfig+0x14c>)
 800ccd2:	4013      	ands	r3, r2
 800ccd4:	0019      	movs	r1, r3
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	430a      	orrs	r2, r1
 800cce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cce6:	2204      	movs	r2, #4
 800cce8:	4013      	ands	r3, r2
 800ccea:	d00b      	beq.n	800cd04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	4a34      	ldr	r2, [pc, #208]	@ (800cdc4 <UART_AdvFeatureConfig+0x150>)
 800ccf4:	4013      	ands	r3, r2
 800ccf6:	0019      	movs	r1, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	430a      	orrs	r2, r1
 800cd02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd08:	2210      	movs	r2, #16
 800cd0a:	4013      	ands	r3, r2
 800cd0c:	d00b      	beq.n	800cd26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	689b      	ldr	r3, [r3, #8]
 800cd14:	4a2c      	ldr	r2, [pc, #176]	@ (800cdc8 <UART_AdvFeatureConfig+0x154>)
 800cd16:	4013      	ands	r3, r2
 800cd18:	0019      	movs	r1, r3
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	430a      	orrs	r2, r1
 800cd24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd2a:	2220      	movs	r2, #32
 800cd2c:	4013      	ands	r3, r2
 800cd2e:	d00b      	beq.n	800cd48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	689b      	ldr	r3, [r3, #8]
 800cd36:	4a25      	ldr	r2, [pc, #148]	@ (800cdcc <UART_AdvFeatureConfig+0x158>)
 800cd38:	4013      	ands	r3, r2
 800cd3a:	0019      	movs	r1, r3
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	430a      	orrs	r2, r1
 800cd46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd4c:	2240      	movs	r2, #64	@ 0x40
 800cd4e:	4013      	ands	r3, r2
 800cd50:	d01d      	beq.n	800cd8e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	4a1d      	ldr	r2, [pc, #116]	@ (800cdd0 <UART_AdvFeatureConfig+0x15c>)
 800cd5a:	4013      	ands	r3, r2
 800cd5c:	0019      	movs	r1, r3
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	430a      	orrs	r2, r1
 800cd68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd6e:	2380      	movs	r3, #128	@ 0x80
 800cd70:	035b      	lsls	r3, r3, #13
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d10b      	bne.n	800cd8e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	4a15      	ldr	r2, [pc, #84]	@ (800cdd4 <UART_AdvFeatureConfig+0x160>)
 800cd7e:	4013      	ands	r3, r2
 800cd80:	0019      	movs	r1, r3
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	430a      	orrs	r2, r1
 800cd8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd92:	2280      	movs	r2, #128	@ 0x80
 800cd94:	4013      	ands	r3, r2
 800cd96:	d00b      	beq.n	800cdb0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	4a0e      	ldr	r2, [pc, #56]	@ (800cdd8 <UART_AdvFeatureConfig+0x164>)
 800cda0:	4013      	ands	r3, r2
 800cda2:	0019      	movs	r1, r3
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	430a      	orrs	r2, r1
 800cdae:	605a      	str	r2, [r3, #4]
  }
}
 800cdb0:	46c0      	nop			@ (mov r8, r8)
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	b002      	add	sp, #8
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	ffff7fff 	.word	0xffff7fff
 800cdbc:	fffdffff 	.word	0xfffdffff
 800cdc0:	fffeffff 	.word	0xfffeffff
 800cdc4:	fffbffff 	.word	0xfffbffff
 800cdc8:	ffffefff 	.word	0xffffefff
 800cdcc:	ffffdfff 	.word	0xffffdfff
 800cdd0:	ffefffff 	.word	0xffefffff
 800cdd4:	ff9fffff 	.word	0xff9fffff
 800cdd8:	fff7ffff 	.word	0xfff7ffff

0800cddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b092      	sub	sp, #72	@ 0x48
 800cde0:	af02      	add	r7, sp, #8
 800cde2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2290      	movs	r2, #144	@ 0x90
 800cde8:	2100      	movs	r1, #0
 800cdea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cdec:	f7f9 fa66 	bl	80062bc <HAL_GetTick>
 800cdf0:	0003      	movs	r3, r0
 800cdf2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	2208      	movs	r2, #8
 800cdfc:	4013      	ands	r3, r2
 800cdfe:	2b08      	cmp	r3, #8
 800ce00:	d12d      	bne.n	800ce5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce04:	2280      	movs	r2, #128	@ 0x80
 800ce06:	0391      	lsls	r1, r2, #14
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	4a47      	ldr	r2, [pc, #284]	@ (800cf28 <UART_CheckIdleState+0x14c>)
 800ce0c:	9200      	str	r2, [sp, #0]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	f000 f88e 	bl	800cf30 <UART_WaitOnFlagUntilTimeout>
 800ce14:	1e03      	subs	r3, r0, #0
 800ce16:	d022      	beq.n	800ce5e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce18:	f3ef 8310 	mrs	r3, PRIMASK
 800ce1c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800ce1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ce20:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ce22:	2301      	movs	r3, #1
 800ce24:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce28:	f383 8810 	msr	PRIMASK, r3
}
 800ce2c:	46c0      	nop			@ (mov r8, r8)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	2180      	movs	r1, #128	@ 0x80
 800ce3a:	438a      	bics	r2, r1
 800ce3c:	601a      	str	r2, [r3, #0]
 800ce3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce44:	f383 8810 	msr	PRIMASK, r3
}
 800ce48:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2288      	movs	r2, #136	@ 0x88
 800ce4e:	2120      	movs	r1, #32
 800ce50:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2284      	movs	r2, #132	@ 0x84
 800ce56:	2100      	movs	r1, #0
 800ce58:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce5a:	2303      	movs	r3, #3
 800ce5c:	e060      	b.n	800cf20 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2204      	movs	r2, #4
 800ce66:	4013      	ands	r3, r2
 800ce68:	2b04      	cmp	r3, #4
 800ce6a:	d146      	bne.n	800cefa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce6e:	2280      	movs	r2, #128	@ 0x80
 800ce70:	03d1      	lsls	r1, r2, #15
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	4a2c      	ldr	r2, [pc, #176]	@ (800cf28 <UART_CheckIdleState+0x14c>)
 800ce76:	9200      	str	r2, [sp, #0]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f000 f859 	bl	800cf30 <UART_WaitOnFlagUntilTimeout>
 800ce7e:	1e03      	subs	r3, r0, #0
 800ce80:	d03b      	beq.n	800cefa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce82:	f3ef 8310 	mrs	r3, PRIMASK
 800ce86:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce88:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	f383 8810 	msr	PRIMASK, r3
}
 800ce96:	46c0      	nop			@ (mov r8, r8)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	4922      	ldr	r1, [pc, #136]	@ (800cf2c <UART_CheckIdleState+0x150>)
 800cea4:	400a      	ands	r2, r1
 800cea6:	601a      	str	r2, [r3, #0]
 800cea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	f383 8810 	msr	PRIMASK, r3
}
 800ceb2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ceb4:	f3ef 8310 	mrs	r3, PRIMASK
 800ceb8:	61bb      	str	r3, [r7, #24]
  return(result);
 800ceba:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cebc:	633b      	str	r3, [r7, #48]	@ 0x30
 800cebe:	2301      	movs	r3, #1
 800cec0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cec2:	69fb      	ldr	r3, [r7, #28]
 800cec4:	f383 8810 	msr	PRIMASK, r3
}
 800cec8:	46c0      	nop			@ (mov r8, r8)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	689a      	ldr	r2, [r3, #8]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	2101      	movs	r1, #1
 800ced6:	438a      	bics	r2, r1
 800ced8:	609a      	str	r2, [r3, #8]
 800ceda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cedc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cede:	6a3b      	ldr	r3, [r7, #32]
 800cee0:	f383 8810 	msr	PRIMASK, r3
}
 800cee4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	228c      	movs	r2, #140	@ 0x8c
 800ceea:	2120      	movs	r1, #32
 800ceec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2284      	movs	r2, #132	@ 0x84
 800cef2:	2100      	movs	r1, #0
 800cef4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cef6:	2303      	movs	r3, #3
 800cef8:	e012      	b.n	800cf20 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2288      	movs	r2, #136	@ 0x88
 800cefe:	2120      	movs	r1, #32
 800cf00:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	228c      	movs	r2, #140	@ 0x8c
 800cf06:	2120      	movs	r1, #32
 800cf08:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2284      	movs	r2, #132	@ 0x84
 800cf1a:	2100      	movs	r1, #0
 800cf1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cf1e:	2300      	movs	r3, #0
}
 800cf20:	0018      	movs	r0, r3
 800cf22:	46bd      	mov	sp, r7
 800cf24:	b010      	add	sp, #64	@ 0x40
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	01ffffff 	.word	0x01ffffff
 800cf2c:	fffffedf 	.word	0xfffffedf

0800cf30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	603b      	str	r3, [r7, #0]
 800cf3c:	1dfb      	adds	r3, r7, #7
 800cf3e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf40:	e051      	b.n	800cfe6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf42:	69bb      	ldr	r3, [r7, #24]
 800cf44:	3301      	adds	r3, #1
 800cf46:	d04e      	beq.n	800cfe6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf48:	f7f9 f9b8 	bl	80062bc <HAL_GetTick>
 800cf4c:	0002      	movs	r2, r0
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	1ad3      	subs	r3, r2, r3
 800cf52:	69ba      	ldr	r2, [r7, #24]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d302      	bcc.n	800cf5e <UART_WaitOnFlagUntilTimeout+0x2e>
 800cf58:	69bb      	ldr	r3, [r7, #24]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d101      	bne.n	800cf62 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800cf5e:	2303      	movs	r3, #3
 800cf60:	e051      	b.n	800d006 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	2204      	movs	r2, #4
 800cf6a:	4013      	ands	r3, r2
 800cf6c:	d03b      	beq.n	800cfe6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	2b80      	cmp	r3, #128	@ 0x80
 800cf72:	d038      	beq.n	800cfe6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	2b40      	cmp	r3, #64	@ 0x40
 800cf78:	d035      	beq.n	800cfe6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	69db      	ldr	r3, [r3, #28]
 800cf80:	2208      	movs	r2, #8
 800cf82:	4013      	ands	r3, r2
 800cf84:	2b08      	cmp	r3, #8
 800cf86:	d111      	bne.n	800cfac <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2208      	movs	r2, #8
 800cf8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	0018      	movs	r0, r3
 800cf94:	f000 f922 	bl	800d1dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2290      	movs	r2, #144	@ 0x90
 800cf9c:	2108      	movs	r1, #8
 800cf9e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2284      	movs	r2, #132	@ 0x84
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	e02c      	b.n	800d006 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	69da      	ldr	r2, [r3, #28]
 800cfb2:	2380      	movs	r3, #128	@ 0x80
 800cfb4:	011b      	lsls	r3, r3, #4
 800cfb6:	401a      	ands	r2, r3
 800cfb8:	2380      	movs	r3, #128	@ 0x80
 800cfba:	011b      	lsls	r3, r3, #4
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d112      	bne.n	800cfe6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	2280      	movs	r2, #128	@ 0x80
 800cfc6:	0112      	lsls	r2, r2, #4
 800cfc8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	0018      	movs	r0, r3
 800cfce:	f000 f905 	bl	800d1dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2290      	movs	r2, #144	@ 0x90
 800cfd6:	2120      	movs	r1, #32
 800cfd8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2284      	movs	r2, #132	@ 0x84
 800cfde:	2100      	movs	r1, #0
 800cfe0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800cfe2:	2303      	movs	r3, #3
 800cfe4:	e00f      	b.n	800d006 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	69db      	ldr	r3, [r3, #28]
 800cfec:	68ba      	ldr	r2, [r7, #8]
 800cfee:	4013      	ands	r3, r2
 800cff0:	68ba      	ldr	r2, [r7, #8]
 800cff2:	1ad3      	subs	r3, r2, r3
 800cff4:	425a      	negs	r2, r3
 800cff6:	4153      	adcs	r3, r2
 800cff8:	b2db      	uxtb	r3, r3
 800cffa:	001a      	movs	r2, r3
 800cffc:	1dfb      	adds	r3, r7, #7
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	429a      	cmp	r2, r3
 800d002:	d09e      	beq.n	800cf42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d004:	2300      	movs	r3, #0
}
 800d006:	0018      	movs	r0, r3
 800d008:	46bd      	mov	sp, r7
 800d00a:	b004      	add	sp, #16
 800d00c:	bd80      	pop	{r7, pc}
	...

0800d010 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b090      	sub	sp, #64	@ 0x40
 800d014:	af00      	add	r7, sp, #0
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	60b9      	str	r1, [r7, #8]
 800d01a:	1dbb      	adds	r3, r7, #6
 800d01c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	68ba      	ldr	r2, [r7, #8]
 800d022:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	1dba      	adds	r2, r7, #6
 800d028:	215c      	movs	r1, #92	@ 0x5c
 800d02a:	8812      	ldrh	r2, [r2, #0]
 800d02c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	2290      	movs	r2, #144	@ 0x90
 800d032:	2100      	movs	r1, #0
 800d034:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	228c      	movs	r2, #140	@ 0x8c
 800d03a:	2122      	movs	r1, #34	@ 0x22
 800d03c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2280      	movs	r2, #128	@ 0x80
 800d042:	589b      	ldr	r3, [r3, r2]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d02d      	beq.n	800d0a4 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2280      	movs	r2, #128	@ 0x80
 800d04c:	589b      	ldr	r3, [r3, r2]
 800d04e:	4a40      	ldr	r2, [pc, #256]	@ (800d150 <UART_Start_Receive_DMA+0x140>)
 800d050:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2280      	movs	r2, #128	@ 0x80
 800d056:	589b      	ldr	r3, [r3, r2]
 800d058:	4a3e      	ldr	r2, [pc, #248]	@ (800d154 <UART_Start_Receive_DMA+0x144>)
 800d05a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2280      	movs	r2, #128	@ 0x80
 800d060:	589b      	ldr	r3, [r3, r2]
 800d062:	4a3d      	ldr	r2, [pc, #244]	@ (800d158 <UART_Start_Receive_DMA+0x148>)
 800d064:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2280      	movs	r2, #128	@ 0x80
 800d06a:	589b      	ldr	r3, [r3, r2]
 800d06c:	2200      	movs	r2, #0
 800d06e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	2280      	movs	r2, #128	@ 0x80
 800d074:	5898      	ldr	r0, [r3, r2]
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	3324      	adds	r3, #36	@ 0x24
 800d07c:	0019      	movs	r1, r3
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d082:	001a      	movs	r2, r3
 800d084:	1dbb      	adds	r3, r7, #6
 800d086:	881b      	ldrh	r3, [r3, #0]
 800d088:	f7fa fce6 	bl	8007a58 <HAL_DMA_Start_IT>
 800d08c:	1e03      	subs	r3, r0, #0
 800d08e:	d009      	beq.n	800d0a4 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2290      	movs	r2, #144	@ 0x90
 800d094:	2110      	movs	r1, #16
 800d096:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	228c      	movs	r2, #140	@ 0x8c
 800d09c:	2120      	movs	r1, #32
 800d09e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	e050      	b.n	800d146 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	691b      	ldr	r3, [r3, #16]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d019      	beq.n	800d0e0 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0ac:	f3ef 8310 	mrs	r3, PRIMASK
 800d0b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800d0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0bc:	f383 8810 	msr	PRIMASK, r3
}
 800d0c0:	46c0      	nop			@ (mov r8, r8)
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	681a      	ldr	r2, [r3, #0]
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2180      	movs	r1, #128	@ 0x80
 800d0ce:	0049      	lsls	r1, r1, #1
 800d0d0:	430a      	orrs	r2, r1
 800d0d2:	601a      	str	r2, [r3, #0]
 800d0d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0d6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0da:	f383 8810 	msr	PRIMASK, r3
}
 800d0de:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0e0:	f3ef 8310 	mrs	r3, PRIMASK
 800d0e4:	613b      	str	r3, [r7, #16]
  return(result);
 800d0e6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	f383 8810 	msr	PRIMASK, r3
}
 800d0f4:	46c0      	nop			@ (mov r8, r8)
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	689a      	ldr	r2, [r3, #8]
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2101      	movs	r1, #1
 800d102:	430a      	orrs	r2, r1
 800d104:	609a      	str	r2, [r3, #8]
 800d106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d108:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d10a:	69bb      	ldr	r3, [r7, #24]
 800d10c:	f383 8810 	msr	PRIMASK, r3
}
 800d110:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d112:	f3ef 8310 	mrs	r3, PRIMASK
 800d116:	61fb      	str	r3, [r7, #28]
  return(result);
 800d118:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d11a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d11c:	2301      	movs	r3, #1
 800d11e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d120:	6a3b      	ldr	r3, [r7, #32]
 800d122:	f383 8810 	msr	PRIMASK, r3
}
 800d126:	46c0      	nop			@ (mov r8, r8)
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	689a      	ldr	r2, [r3, #8]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	2140      	movs	r1, #64	@ 0x40
 800d134:	430a      	orrs	r2, r1
 800d136:	609a      	str	r2, [r3, #8]
 800d138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d13a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d13e:	f383 8810 	msr	PRIMASK, r3
}
 800d142:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800d144:	2300      	movs	r3, #0
}
 800d146:	0018      	movs	r0, r3
 800d148:	46bd      	mov	sp, r7
 800d14a:	b010      	add	sp, #64	@ 0x40
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	46c0      	nop			@ (mov r8, r8)
 800d150:	0800d2a9 	.word	0x0800d2a9
 800d154:	0800d3dd 	.word	0x0800d3dd
 800d158:	0800d425 	.word	0x0800d425

0800d15c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b08a      	sub	sp, #40	@ 0x28
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d164:	f3ef 8310 	mrs	r3, PRIMASK
 800d168:	60bb      	str	r3, [r7, #8]
  return(result);
 800d16a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d16c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d16e:	2301      	movs	r3, #1
 800d170:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f383 8810 	msr	PRIMASK, r3
}
 800d178:	46c0      	nop			@ (mov r8, r8)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	21c0      	movs	r1, #192	@ 0xc0
 800d186:	438a      	bics	r2, r1
 800d188:	601a      	str	r2, [r3, #0]
 800d18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d18c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	f383 8810 	msr	PRIMASK, r3
}
 800d194:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d196:	f3ef 8310 	mrs	r3, PRIMASK
 800d19a:	617b      	str	r3, [r7, #20]
  return(result);
 800d19c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d19e:	623b      	str	r3, [r7, #32]
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1a4:	69bb      	ldr	r3, [r7, #24]
 800d1a6:	f383 8810 	msr	PRIMASK, r3
}
 800d1aa:	46c0      	nop			@ (mov r8, r8)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	689a      	ldr	r2, [r3, #8]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	4908      	ldr	r1, [pc, #32]	@ (800d1d8 <UART_EndTxTransfer+0x7c>)
 800d1b8:	400a      	ands	r2, r1
 800d1ba:	609a      	str	r2, [r3, #8]
 800d1bc:	6a3b      	ldr	r3, [r7, #32]
 800d1be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1c0:	69fb      	ldr	r3, [r7, #28]
 800d1c2:	f383 8810 	msr	PRIMASK, r3
}
 800d1c6:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2288      	movs	r2, #136	@ 0x88
 800d1cc:	2120      	movs	r1, #32
 800d1ce:	5099      	str	r1, [r3, r2]
}
 800d1d0:	46c0      	nop			@ (mov r8, r8)
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	b00a      	add	sp, #40	@ 0x28
 800d1d6:	bd80      	pop	{r7, pc}
 800d1d8:	ff7fffff 	.word	0xff7fffff

0800d1dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b08e      	sub	sp, #56	@ 0x38
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1e4:	f3ef 8310 	mrs	r3, PRIMASK
 800d1e8:	617b      	str	r3, [r7, #20]
  return(result);
 800d1ea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d1ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1f2:	69bb      	ldr	r3, [r7, #24]
 800d1f4:	f383 8810 	msr	PRIMASK, r3
}
 800d1f8:	46c0      	nop			@ (mov r8, r8)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	681a      	ldr	r2, [r3, #0]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4926      	ldr	r1, [pc, #152]	@ (800d2a0 <UART_EndRxTransfer+0xc4>)
 800d206:	400a      	ands	r2, r1
 800d208:	601a      	str	r2, [r3, #0]
 800d20a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d20c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d20e:	69fb      	ldr	r3, [r7, #28]
 800d210:	f383 8810 	msr	PRIMASK, r3
}
 800d214:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d216:	f3ef 8310 	mrs	r3, PRIMASK
 800d21a:	623b      	str	r3, [r7, #32]
  return(result);
 800d21c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d21e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d220:	2301      	movs	r3, #1
 800d222:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d226:	f383 8810 	msr	PRIMASK, r3
}
 800d22a:	46c0      	nop			@ (mov r8, r8)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	689a      	ldr	r2, [r3, #8]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	491b      	ldr	r1, [pc, #108]	@ (800d2a4 <UART_EndRxTransfer+0xc8>)
 800d238:	400a      	ands	r2, r1
 800d23a:	609a      	str	r2, [r3, #8]
 800d23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d23e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d242:	f383 8810 	msr	PRIMASK, r3
}
 800d246:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d118      	bne.n	800d282 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d250:	f3ef 8310 	mrs	r3, PRIMASK
 800d254:	60bb      	str	r3, [r7, #8]
  return(result);
 800d256:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d258:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d25a:	2301      	movs	r3, #1
 800d25c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	f383 8810 	msr	PRIMASK, r3
}
 800d264:	46c0      	nop			@ (mov r8, r8)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2110      	movs	r1, #16
 800d272:	438a      	bics	r2, r1
 800d274:	601a      	str	r2, [r3, #0]
 800d276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d278:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	f383 8810 	msr	PRIMASK, r3
}
 800d280:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	228c      	movs	r2, #140	@ 0x8c
 800d286:	2120      	movs	r1, #32
 800d288:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2200      	movs	r2, #0
 800d28e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d296:	46c0      	nop			@ (mov r8, r8)
 800d298:	46bd      	mov	sp, r7
 800d29a:	b00e      	add	sp, #56	@ 0x38
 800d29c:	bd80      	pop	{r7, pc}
 800d29e:	46c0      	nop			@ (mov r8, r8)
 800d2a0:	fffffedf 	.word	0xfffffedf
 800d2a4:	effffffe 	.word	0xeffffffe

0800d2a8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b094      	sub	sp, #80	@ 0x50
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2b4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2220      	movs	r2, #32
 800d2be:	4013      	ands	r3, r2
 800d2c0:	d16f      	bne.n	800d3a2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800d2c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2c4:	225e      	movs	r2, #94	@ 0x5e
 800d2c6:	2100      	movs	r1, #0
 800d2c8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2ca:	f3ef 8310 	mrs	r3, PRIMASK
 800d2ce:	61bb      	str	r3, [r7, #24]
  return(result);
 800d2d0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d2d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	f383 8810 	msr	PRIMASK, r3
}
 800d2de:	46c0      	nop			@ (mov r8, r8)
 800d2e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	681a      	ldr	r2, [r3, #0]
 800d2e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	493b      	ldr	r1, [pc, #236]	@ (800d3d8 <UART_DMAReceiveCplt+0x130>)
 800d2ec:	400a      	ands	r2, r1
 800d2ee:	601a      	str	r2, [r3, #0]
 800d2f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2f4:	6a3b      	ldr	r3, [r7, #32]
 800d2f6:	f383 8810 	msr	PRIMASK, r3
}
 800d2fa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2fc:	f3ef 8310 	mrs	r3, PRIMASK
 800d300:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d304:	647b      	str	r3, [r7, #68]	@ 0x44
 800d306:	2301      	movs	r3, #1
 800d308:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d30c:	f383 8810 	msr	PRIMASK, r3
}
 800d310:	46c0      	nop			@ (mov r8, r8)
 800d312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	689a      	ldr	r2, [r3, #8]
 800d318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	2101      	movs	r1, #1
 800d31e:	438a      	bics	r2, r1
 800d320:	609a      	str	r2, [r3, #8]
 800d322:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d324:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d328:	f383 8810 	msr	PRIMASK, r3
}
 800d32c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d32e:	f3ef 8310 	mrs	r3, PRIMASK
 800d332:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800d334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d336:	643b      	str	r3, [r7, #64]	@ 0x40
 800d338:	2301      	movs	r3, #1
 800d33a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d33c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d33e:	f383 8810 	msr	PRIMASK, r3
}
 800d342:	46c0      	nop			@ (mov r8, r8)
 800d344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	689a      	ldr	r2, [r3, #8]
 800d34a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	2140      	movs	r1, #64	@ 0x40
 800d350:	438a      	bics	r2, r1
 800d352:	609a      	str	r2, [r3, #8]
 800d354:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d356:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d35a:	f383 8810 	msr	PRIMASK, r3
}
 800d35e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d360:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d362:	228c      	movs	r2, #140	@ 0x8c
 800d364:	2120      	movs	r1, #32
 800d366:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d36a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d118      	bne.n	800d3a2 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d370:	f3ef 8310 	mrs	r3, PRIMASK
 800d374:	60fb      	str	r3, [r7, #12]
  return(result);
 800d376:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d378:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d37a:	2301      	movs	r3, #1
 800d37c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	f383 8810 	msr	PRIMASK, r3
}
 800d384:	46c0      	nop			@ (mov r8, r8)
 800d386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2110      	movs	r1, #16
 800d392:	438a      	bics	r2, r1
 800d394:	601a      	str	r2, [r3, #0]
 800d396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d398:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	f383 8810 	msr	PRIMASK, r3
}
 800d3a0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d3a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d109      	bne.n	800d3c4 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800d3b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3b2:	22c0      	movs	r2, #192	@ 0xc0
 800d3b4:	589b      	ldr	r3, [r3, r2]
 800d3b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d3b8:	215c      	movs	r1, #92	@ 0x5c
 800d3ba:	5a51      	ldrh	r1, [r2, r1]
 800d3bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d3be:	0010      	movs	r0, r2
 800d3c0:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d3c2:	e005      	b.n	800d3d0 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800d3c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3c6:	22a0      	movs	r2, #160	@ 0xa0
 800d3c8:	589b      	ldr	r3, [r3, r2]
 800d3ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d3cc:	0010      	movs	r0, r2
 800d3ce:	4798      	blx	r3
}
 800d3d0:	46c0      	nop			@ (mov r8, r8)
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	b014      	add	sp, #80	@ 0x50
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	fffffeff 	.word	0xfffffeff

0800d3dc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3e8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d10b      	bne.n	800d410 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	22c0      	movs	r2, #192	@ 0xc0
 800d3fc:	589b      	ldr	r3, [r3, r2]
 800d3fe:	68fa      	ldr	r2, [r7, #12]
 800d400:	215c      	movs	r1, #92	@ 0x5c
 800d402:	5a52      	ldrh	r2, [r2, r1]
 800d404:	0852      	lsrs	r2, r2, #1
 800d406:	b291      	uxth	r1, r2
 800d408:	68fa      	ldr	r2, [r7, #12]
 800d40a:	0010      	movs	r0, r2
 800d40c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d40e:	e005      	b.n	800d41c <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	229c      	movs	r2, #156	@ 0x9c
 800d414:	589b      	ldr	r3, [r3, r2]
 800d416:	68fa      	ldr	r2, [r7, #12]
 800d418:	0010      	movs	r0, r2
 800d41a:	4798      	blx	r3
}
 800d41c:	46c0      	nop			@ (mov r8, r8)
 800d41e:	46bd      	mov	sp, r7
 800d420:	b004      	add	sp, #16
 800d422:	bd80      	pop	{r7, pc}

0800d424 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b086      	sub	sp, #24
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d430:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	2288      	movs	r2, #136	@ 0x88
 800d436:	589b      	ldr	r3, [r3, r2]
 800d438:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	228c      	movs	r2, #140	@ 0x8c
 800d43e:	589b      	ldr	r3, [r3, r2]
 800d440:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	689b      	ldr	r3, [r3, #8]
 800d448:	2280      	movs	r2, #128	@ 0x80
 800d44a:	4013      	ands	r3, r2
 800d44c:	2b80      	cmp	r3, #128	@ 0x80
 800d44e:	d10a      	bne.n	800d466 <UART_DMAError+0x42>
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	2b21      	cmp	r3, #33	@ 0x21
 800d454:	d107      	bne.n	800d466 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	2256      	movs	r2, #86	@ 0x56
 800d45a:	2100      	movs	r1, #0
 800d45c:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	0018      	movs	r0, r3
 800d462:	f7ff fe7b 	bl	800d15c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	689b      	ldr	r3, [r3, #8]
 800d46c:	2240      	movs	r2, #64	@ 0x40
 800d46e:	4013      	ands	r3, r2
 800d470:	2b40      	cmp	r3, #64	@ 0x40
 800d472:	d10a      	bne.n	800d48a <UART_DMAError+0x66>
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	2b22      	cmp	r3, #34	@ 0x22
 800d478:	d107      	bne.n	800d48a <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	225e      	movs	r2, #94	@ 0x5e
 800d47e:	2100      	movs	r1, #0
 800d480:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	0018      	movs	r0, r3
 800d486:	f7ff fea9 	bl	800d1dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	2290      	movs	r2, #144	@ 0x90
 800d48e:	589b      	ldr	r3, [r3, r2]
 800d490:	2210      	movs	r2, #16
 800d492:	431a      	orrs	r2, r3
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	2190      	movs	r1, #144	@ 0x90
 800d498:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	22a4      	movs	r2, #164	@ 0xa4
 800d49e:	589b      	ldr	r3, [r3, r2]
 800d4a0:	697a      	ldr	r2, [r7, #20]
 800d4a2:	0010      	movs	r0, r2
 800d4a4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4a6:	46c0      	nop			@ (mov r8, r8)
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	b006      	add	sp, #24
 800d4ac:	bd80      	pop	{r7, pc}

0800d4ae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d4ae:	b580      	push	{r7, lr}
 800d4b0:	b084      	sub	sp, #16
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	225e      	movs	r2, #94	@ 0x5e
 800d4c0:	2100      	movs	r1, #0
 800d4c2:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2256      	movs	r2, #86	@ 0x56
 800d4c8:	2100      	movs	r1, #0
 800d4ca:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	22a4      	movs	r2, #164	@ 0xa4
 800d4d0:	589b      	ldr	r3, [r3, r2]
 800d4d2:	68fa      	ldr	r2, [r7, #12]
 800d4d4:	0010      	movs	r0, r2
 800d4d6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4d8:	46c0      	nop			@ (mov r8, r8)
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	b004      	add	sp, #16
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b086      	sub	sp, #24
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4e8:	f3ef 8310 	mrs	r3, PRIMASK
 800d4ec:	60bb      	str	r3, [r7, #8]
  return(result);
 800d4ee:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d4f0:	617b      	str	r3, [r7, #20]
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f383 8810 	msr	PRIMASK, r3
}
 800d4fc:	46c0      	nop			@ (mov r8, r8)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	681a      	ldr	r2, [r3, #0]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	2140      	movs	r1, #64	@ 0x40
 800d50a:	438a      	bics	r2, r1
 800d50c:	601a      	str	r2, [r3, #0]
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	f383 8810 	msr	PRIMASK, r3
}
 800d518:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2288      	movs	r2, #136	@ 0x88
 800d51e:	2120      	movs	r1, #32
 800d520:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2200      	movs	r2, #0
 800d526:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2298      	movs	r2, #152	@ 0x98
 800d52c:	589b      	ldr	r3, [r3, r2]
 800d52e:	687a      	ldr	r2, [r7, #4]
 800d530:	0010      	movs	r0, r2
 800d532:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d534:	46c0      	nop			@ (mov r8, r8)
 800d536:	46bd      	mov	sp, r7
 800d538:	b006      	add	sp, #24
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d544:	46c0      	nop			@ (mov r8, r8)
 800d546:	46bd      	mov	sp, r7
 800d548:	b002      	add	sp, #8
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d554:	46c0      	nop			@ (mov r8, r8)
 800d556:	46bd      	mov	sp, r7
 800d558:	b002      	add	sp, #8
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b082      	sub	sp, #8
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d564:	46c0      	nop			@ (mov r8, r8)
 800d566:	46bd      	mov	sp, r7
 800d568:	b002      	add	sp, #8
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <memset>:
 800d56c:	0003      	movs	r3, r0
 800d56e:	1882      	adds	r2, r0, r2
 800d570:	4293      	cmp	r3, r2
 800d572:	d100      	bne.n	800d576 <memset+0xa>
 800d574:	4770      	bx	lr
 800d576:	7019      	strb	r1, [r3, #0]
 800d578:	3301      	adds	r3, #1
 800d57a:	e7f9      	b.n	800d570 <memset+0x4>

0800d57c <__libc_init_array>:
 800d57c:	b570      	push	{r4, r5, r6, lr}
 800d57e:	2600      	movs	r6, #0
 800d580:	4c0c      	ldr	r4, [pc, #48]	@ (800d5b4 <__libc_init_array+0x38>)
 800d582:	4d0d      	ldr	r5, [pc, #52]	@ (800d5b8 <__libc_init_array+0x3c>)
 800d584:	1b64      	subs	r4, r4, r5
 800d586:	10a4      	asrs	r4, r4, #2
 800d588:	42a6      	cmp	r6, r4
 800d58a:	d109      	bne.n	800d5a0 <__libc_init_array+0x24>
 800d58c:	2600      	movs	r6, #0
 800d58e:	f000 f823 	bl	800d5d8 <_init>
 800d592:	4c0a      	ldr	r4, [pc, #40]	@ (800d5bc <__libc_init_array+0x40>)
 800d594:	4d0a      	ldr	r5, [pc, #40]	@ (800d5c0 <__libc_init_array+0x44>)
 800d596:	1b64      	subs	r4, r4, r5
 800d598:	10a4      	asrs	r4, r4, #2
 800d59a:	42a6      	cmp	r6, r4
 800d59c:	d105      	bne.n	800d5aa <__libc_init_array+0x2e>
 800d59e:	bd70      	pop	{r4, r5, r6, pc}
 800d5a0:	00b3      	lsls	r3, r6, #2
 800d5a2:	58eb      	ldr	r3, [r5, r3]
 800d5a4:	4798      	blx	r3
 800d5a6:	3601      	adds	r6, #1
 800d5a8:	e7ee      	b.n	800d588 <__libc_init_array+0xc>
 800d5aa:	00b3      	lsls	r3, r6, #2
 800d5ac:	58eb      	ldr	r3, [r5, r3]
 800d5ae:	4798      	blx	r3
 800d5b0:	3601      	adds	r6, #1
 800d5b2:	e7f2      	b.n	800d59a <__libc_init_array+0x1e>
 800d5b4:	0800e068 	.word	0x0800e068
 800d5b8:	0800e068 	.word	0x0800e068
 800d5bc:	0800e06c 	.word	0x0800e06c
 800d5c0:	0800e068 	.word	0x0800e068

0800d5c4 <memcpy>:
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	b510      	push	{r4, lr}
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d100      	bne.n	800d5ce <memcpy+0xa>
 800d5cc:	bd10      	pop	{r4, pc}
 800d5ce:	5ccc      	ldrb	r4, [r1, r3]
 800d5d0:	54c4      	strb	r4, [r0, r3]
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	e7f8      	b.n	800d5c8 <memcpy+0x4>
	...

0800d5d8 <_init>:
 800d5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5da:	46c0      	nop			@ (mov r8, r8)
 800d5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5de:	bc08      	pop	{r3}
 800d5e0:	469e      	mov	lr, r3
 800d5e2:	4770      	bx	lr

0800d5e4 <_fini>:
 800d5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5e6:	46c0      	nop			@ (mov r8, r8)
 800d5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ea:	bc08      	pop	{r3}
 800d5ec:	469e      	mov	lr, r3
 800d5ee:	4770      	bx	lr
