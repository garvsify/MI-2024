
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cea8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  0800cf64  0800cf64  0000df64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9d4  0800d9d4  0000f44c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d9d4  0800d9d4  0000e9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9dc  0800d9dc  0000f44c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9dc  0800d9dc  0000e9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d9e0  0800d9e0  0000e9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000044c  20000000  0800d9e4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000888  2000044c  0800de30  0000f44c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cd4  0800de30  0000fcd4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f44c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020299  00000000  00000000  0000f474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004586  00000000  00000000  0002f70d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  00033c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001257  00000000  00000000  00035448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015563  00000000  00000000  0003669f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00008259  00000000  00000000  0004bc02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00053e5b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005470  00000000  00000000  00053ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000054  00000000  00000000  00059310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000044c 	.word	0x2000044c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800cf4c 	.word	0x0800cf4c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000450 	.word	0x20000450
 8000100:	0800cf4c 	.word	0x0800cf4c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <Initialise_Preset_Arrays>:
volatile enum Validate user_presets_used_array[NUM_PRESETS] = {(enum Validate)NO};

volatile uint8_t CC_array[5] = {0};

//FUNCTION DEFINITIONS
uint8_t Initialise_Preset_Arrays(void){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]
 8000454:	e047      	b.n	80004e6 <Initialise_Preset_Arrays+0x9e>

		if(i == 0){
 8000456:	1dfb      	adds	r3, r7, #7
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d10c      	bne.n	8000478 <Initialise_Preset_Arrays+0x30>
			factory_presets_array[i] = &factory_preset_0;
 800045e:	1dfb      	adds	r3, r7, #7
 8000460:	781a      	ldrb	r2, [r3, #0]
 8000462:	4b25      	ldr	r3, [pc, #148]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 8000464:	0092      	lsls	r2, r2, #2
 8000466:	4925      	ldr	r1, [pc, #148]	@ (80004fc <Initialise_Preset_Arrays+0xb4>)
 8000468:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_0;
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	781a      	ldrb	r2, [r3, #0]
 800046e:	4b24      	ldr	r3, [pc, #144]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 8000470:	0092      	lsls	r2, r2, #2
 8000472:	4924      	ldr	r1, [pc, #144]	@ (8000504 <Initialise_Preset_Arrays+0xbc>)
 8000474:	50d1      	str	r1, [r2, r3]
 8000476:	e031      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 1){
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d10c      	bne.n	800049a <Initialise_Preset_Arrays+0x52>
			factory_presets_array[i] = &factory_preset_1;
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	781a      	ldrb	r2, [r3, #0]
 8000484:	4b1c      	ldr	r3, [pc, #112]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 8000486:	0092      	lsls	r2, r2, #2
 8000488:	491f      	ldr	r1, [pc, #124]	@ (8000508 <Initialise_Preset_Arrays+0xc0>)
 800048a:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_1;
 800048c:	1dfb      	adds	r3, r7, #7
 800048e:	781a      	ldrb	r2, [r3, #0]
 8000490:	4b1b      	ldr	r3, [pc, #108]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 8000492:	0092      	lsls	r2, r2, #2
 8000494:	491d      	ldr	r1, [pc, #116]	@ (800050c <Initialise_Preset_Arrays+0xc4>)
 8000496:	50d1      	str	r1, [r2, r3]
 8000498:	e020      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 2){
 800049a:	1dfb      	adds	r3, r7, #7
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b02      	cmp	r3, #2
 80004a0:	d10c      	bne.n	80004bc <Initialise_Preset_Arrays+0x74>
			factory_presets_array[i] = &factory_preset_2;
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	4919      	ldr	r1, [pc, #100]	@ (8000510 <Initialise_Preset_Arrays+0xc8>)
 80004ac:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_2;
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781a      	ldrb	r2, [r3, #0]
 80004b2:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 80004b4:	0092      	lsls	r2, r2, #2
 80004b6:	4917      	ldr	r1, [pc, #92]	@ (8000514 <Initialise_Preset_Arrays+0xcc>)
 80004b8:	50d1      	str	r1, [r2, r3]
 80004ba:	e00f      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 3){
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d10b      	bne.n	80004dc <Initialise_Preset_Arrays+0x94>
			factory_presets_array[i] = &factory_preset_3;
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 80004ca:	0092      	lsls	r2, r2, #2
 80004cc:	4912      	ldr	r1, [pc, #72]	@ (8000518 <Initialise_Preset_Arrays+0xd0>)
 80004ce:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_3;
 80004d0:	1dfb      	adds	r3, r7, #7
 80004d2:	781a      	ldrb	r2, [r3, #0]
 80004d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 80004d6:	0092      	lsls	r2, r2, #2
 80004d8:	4910      	ldr	r1, [pc, #64]	@ (800051c <Initialise_Preset_Arrays+0xd4>)
 80004da:	50d1      	str	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 80004dc:	1dfb      	adds	r3, r7, #7
 80004de:	781a      	ldrb	r2, [r3, #0]
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	3201      	adds	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b0f      	cmp	r3, #15
 80004ec:	d9b3      	bls.n	8000456 <Initialise_Preset_Arrays+0xe>
		}
	}

	return 1;
 80004ee:	2301      	movs	r3, #1
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000468 	.word	0x20000468
 80004fc:	0800cf64 	.word	0x0800cf64
 8000500:	20000478 	.word	0x20000478
 8000504:	20000000 	.word	0x20000000
 8000508:	0800cf6c 	.word	0x0800cf6c
 800050c:	20000008 	.word	0x20000008
 8000510:	0800cf74 	.word	0x0800cf74
 8000514:	20000010 	.word	0x20000010
 8000518:	0800cf7c 	.word	0x0800cf7c
 800051c:	20000018 	.word	0x20000018

08000520 <Update_Params_Based_On_Mode_Selected>:

uint8_t Update_Params_Based_On_Mode_Selected(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0

	if(waveshape_fsm.current_state == MANUAL_MODE){
 8000524:	4b68      	ldr	r3, [pc, #416]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	2b01      	cmp	r3, #1
 800052c:	d104      	bne.n	8000538 <Update_Params_Based_On_Mode_Selected+0x18>
		params.waveshape = params_manual.waveshape;
 800052e:	4b67      	ldr	r3, [pc, #412]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000530:	799b      	ldrb	r3, [r3, #6]
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b66      	ldr	r3, [pc, #408]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000536:	719a      	strb	r2, [r3, #6]
	}
	if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8000538:	4b66      	ldr	r3, [pc, #408]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b01      	cmp	r3, #1
 8000540:	d104      	bne.n	800054c <Update_Params_Based_On_Mode_Selected+0x2c>
		params.speed = params_manual.speed;
 8000542:	4b62      	ldr	r3, [pc, #392]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000544:	891b      	ldrh	r3, [r3, #8]
 8000546:	b29a      	uxth	r2, r3
 8000548:	4b61      	ldr	r3, [pc, #388]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800054a:	811a      	strh	r2, [r3, #8]
	}
	if(depth_fsm.current_state == MANUAL_MODE){
 800054c:	4b62      	ldr	r3, [pc, #392]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	2b01      	cmp	r3, #1
 8000554:	d104      	bne.n	8000560 <Update_Params_Based_On_Mode_Selected+0x40>
		params.depth = params_manual.depth;
 8000556:	4b5d      	ldr	r3, [pc, #372]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000558:	7a9b      	ldrb	r3, [r3, #10]
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b5c      	ldr	r3, [pc, #368]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800055e:	729a      	strb	r2, [r3, #10]
	}
	if(symmetry_fsm.current_state == MANUAL_MODE){
 8000560:	4b5e      	ldr	r3, [pc, #376]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b01      	cmp	r3, #1
 8000568:	d104      	bne.n	8000574 <Update_Params_Based_On_Mode_Selected+0x54>
		params.symmetry = params_manual.symmetry;
 800056a:	4b58      	ldr	r3, [pc, #352]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 800056c:	899b      	ldrh	r3, [r3, #12]
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b57      	ldr	r3, [pc, #348]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000572:	819a      	strh	r2, [r3, #12]
	}
	if(phase_fsm.current_state == MANUAL_MODE){
 8000574:	4b5a      	ldr	r3, [pc, #360]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b01      	cmp	r3, #1
 800057c:	d104      	bne.n	8000588 <Update_Params_Based_On_Mode_Selected+0x68>
		params.duty_delay_line_read_pointer_offset = params_manual.duty_delay_line_read_pointer_offset;
 800057e:	4b53      	ldr	r3, [pc, #332]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000580:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000582:	b29a      	uxth	r2, r3
 8000584:	4b52      	ldr	r3, [pc, #328]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000586:	845a      	strh	r2, [r3, #34]	@ 0x22
	}

	if(waveshape_fsm.current_state == PC_MODE){
 8000588:	4b4f      	ldr	r3, [pc, #316]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b03      	cmp	r3, #3
 8000590:	d10e      	bne.n	80005b0 <Update_Params_Based_On_Mode_Selected+0x90>
		Update_Waveshape_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000592:	4b54      	ldr	r3, [pc, #336]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	1e5a      	subs	r2, r3, #1
 800059a:	0013      	movs	r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	189b      	adds	r3, r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	4a51      	ldr	r2, [pc, #324]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005a4:	189b      	adds	r3, r3, r2
 80005a6:	4a4a      	ldr	r2, [pc, #296]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 f8d1 	bl	8000752 <Update_Waveshape_with_Converted_Preset_Value>
	}
	if(speed_fsm.current_state.shared_state == PC_MODE){
 80005b0:	4b48      	ldr	r3, [pc, #288]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d10e      	bne.n	80005d8 <Update_Params_Based_On_Mode_Selected+0xb8>
		Update_Speed_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005ba:	4b4a      	ldr	r3, [pc, #296]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	1e5a      	subs	r2, r3, #1
 80005c2:	0013      	movs	r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	189b      	adds	r3, r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4a47      	ldr	r2, [pc, #284]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005cc:	189b      	adds	r3, r3, r2
 80005ce:	4a40      	ldr	r2, [pc, #256]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005d0:	0011      	movs	r1, r2
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 f8e6 	bl	80007a4 <Update_Speed_with_Converted_Preset_Value>
	}
	if(depth_fsm.current_state == PC_MODE){
 80005d8:	4b3f      	ldr	r3, [pc, #252]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d10e      	bne.n	8000600 <Update_Params_Based_On_Mode_Selected+0xe0>
		Update_Depth_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005e2:	4b40      	ldr	r3, [pc, #256]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	1e5a      	subs	r2, r3, #1
 80005ea:	0013      	movs	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	189b      	adds	r3, r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	4a3d      	ldr	r2, [pc, #244]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005f4:	189b      	adds	r3, r3, r2
 80005f6:	4a36      	ldr	r2, [pc, #216]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005f8:	0011      	movs	r1, r2
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 f8e1 	bl	80007c2 <Update_Depth_with_Converted_Preset_Value>
	}
	if(symmetry_fsm.current_state == PC_MODE){
 8000600:	4b36      	ldr	r3, [pc, #216]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b03      	cmp	r3, #3
 8000608:	d10e      	bne.n	8000628 <Update_Params_Based_On_Mode_Selected+0x108>
		Update_Symmetry_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 800060a:	4b36      	ldr	r3, [pc, #216]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	1e5a      	subs	r2, r3, #1
 8000612:	0013      	movs	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	189b      	adds	r3, r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	4a33      	ldr	r2, [pc, #204]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 800061c:	189b      	adds	r3, r3, r2
 800061e:	4a2c      	ldr	r2, [pc, #176]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000620:	0011      	movs	r1, r2
 8000622:	0018      	movs	r0, r3
 8000624:	f000 f8dc 	bl	80007e0 <Update_Symmetry_with_Converted_Preset_Value>
	}
	if(phase_fsm.current_state == PC_MODE){
 8000628:	4b2d      	ldr	r3, [pc, #180]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b03      	cmp	r3, #3
 8000630:	d10e      	bne.n	8000650 <Update_Params_Based_On_Mode_Selected+0x130>
		Update_Phase_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000632:	4b2c      	ldr	r3, [pc, #176]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	0013      	movs	r3, r2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	189b      	adds	r3, r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4a29      	ldr	r2, [pc, #164]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 8000644:	189b      	adds	r3, r3, r2
 8000646:	4a22      	ldr	r2, [pc, #136]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f000 f8d7 	bl	80007fe <Update_Phase_with_Converted_Preset_Value>
	}


	if(waveshape_fsm.current_state == CC_MODE){
 8000650:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b02      	cmp	r3, #2
 8000658:	d105      	bne.n	8000666 <Update_Params_Based_On_Mode_Selected+0x146>
		Update_Waveshape_with_CC_Value(&CC_array[WAVESHAPE_ARR], &params);
 800065a:	4a1d      	ldr	r2, [pc, #116]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800065c:	4b23      	ldr	r3, [pc, #140]	@ (80006ec <Update_Params_Based_On_Mode_Selected+0x1cc>)
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fa4f 	bl	8000b04 <Update_Waveshape_with_CC_Value>
	}
	if(speed_fsm.current_state.shared_state == CC_MODE){
 8000666:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b02      	cmp	r3, #2
 800066e:	d105      	bne.n	800067c <Update_Params_Based_On_Mode_Selected+0x15c>
		Update_Speed_with_CC_Value(&CC_array[SPEED_ARR], &params);
 8000670:	4a17      	ldr	r2, [pc, #92]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000672:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <Update_Params_Based_On_Mode_Selected+0x1d0>)
 8000674:	0011      	movs	r1, r2
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fa69 	bl	8000b4e <Update_Speed_with_CC_Value>
	}
	if(depth_fsm.current_state == CC_MODE){
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b02      	cmp	r3, #2
 8000684:	d105      	bne.n	8000692 <Update_Params_Based_On_Mode_Selected+0x172>
		Update_Depth_with_CC_Value(&CC_array[DEPTH_ARR], &params);
 8000686:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000688:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <Update_Params_Based_On_Mode_Selected+0x1d4>)
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fa77 	bl	8000b80 <Update_Depth_with_CC_Value>
	}
	if(symmetry_fsm.current_state == CC_MODE){
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b02      	cmp	r3, #2
 800069a:	d105      	bne.n	80006a8 <Update_Params_Based_On_Mode_Selected+0x188>
		Update_Symmetry_with_CC_Value(&CC_array[SYMMETRY_ARR], &params);
 800069c:	4a0c      	ldr	r2, [pc, #48]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <Update_Params_Based_On_Mode_Selected+0x1d8>)
 80006a0:	0011      	movs	r1, r2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 fa7f 	bl	8000ba6 <Update_Symmetry_with_CC_Value>
	}
	if(phase_fsm.current_state == CC_MODE){
 80006a8:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	d105      	bne.n	80006be <Update_Params_Based_On_Mode_Selected+0x19e>
		Update_Phase_with_CC_Value(&CC_array[PHASE_ARR], &params);
 80006b2:	4a07      	ldr	r2, [pc, #28]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006b4:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <Update_Params_Based_On_Mode_Selected+0x1dc>)
 80006b6:	0011      	movs	r1, r2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fa8d 	bl	8000bd8 <Update_Phase_with_CC_Value>
	}

	return 1;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	0018      	movs	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	20000430 	.word	0x20000430
 80006cc:	20000c60 	.word	0x20000c60
 80006d0:	20000c3c 	.word	0x20000c3c
 80006d4:	20000428 	.word	0x20000428
 80006d8:	2000042c 	.word	0x2000042c
 80006dc:	20000434 	.word	0x20000434
 80006e0:	20000438 	.word	0x20000438
 80006e4:	200004b0 	.word	0x200004b0
 80006e8:	20000488 	.word	0x20000488
 80006ec:	200004b8 	.word	0x200004b8
 80006f0:	200004b9 	.word	0x200004b9
 80006f4:	200004ba 	.word	0x200004ba
 80006f8:	200004bb 	.word	0x200004bb
 80006fc:	200004bc 	.word	0x200004bc

08000700 <Convert_All_Preset_Values>:


uint8_t Convert_All_Preset_Values(volatile struct Preset* preset_ptr, volatile struct Preset_Converted* preset_converted_ptr){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]

	preset_converted_ptr->waveshape = preset_ptr->waveshape; //7-bit copy
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	701a      	strb	r2, [r3, #0]
	preset_converted_ptr->speed = (preset_ptr->speed) << 3; //convert to 10-bit
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	785b      	ldrb	r3, [r3, #1]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	b29a      	uxth	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	805a      	strh	r2, [r3, #2]
	preset_converted_ptr->depth = preset_ptr->depth; //7-bit copy
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	789b      	ldrb	r3, [r3, #2]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	711a      	strb	r2, [r3, #4]
	preset_converted_ptr->symmetry = (preset_ptr->symmetry) << 1; //convert to 8-bit
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	78db      	ldrb	r3, [r3, #3]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	18db      	adds	r3, r3, r3
 8000734:	b29a      	uxth	r2, r3
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	80da      	strh	r2, [r3, #6]
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	791b      	ldrb	r3, [r3, #4]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	b29a      	uxth	r2, r3
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	811a      	strh	r2, [r3, #8]

	return 1;
 8000748:	2301      	movs	r3, #1
}
 800074a:	0018      	movs	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	b002      	add	sp, #8
 8000750:	bd80      	pop	{r7, pc}

08000752 <Update_Waveshape_with_Converted_Preset_Value>:
	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;

	return 1;
}

uint8_t Update_Waveshape_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000752:	b580      	push	{r7, lr}
 8000754:	b084      	sub	sp, #16
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	6039      	str	r1, [r7, #0]

	uint8_t waveshape = preset_converted_ptr->waveshape;
 800075c:	210f      	movs	r1, #15
 800075e:	187b      	adds	r3, r7, r1
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	7812      	ldrb	r2, [r2, #0]
 8000764:	701a      	strb	r2, [r3, #0]

	if(waveshape <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000766:	187b      	adds	r3, r7, r1
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b2a      	cmp	r3, #42	@ 0x2a
 800076c:	d803      	bhi.n	8000776 <Update_Waveshape_with_Converted_Preset_Value+0x24>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	2200      	movs	r2, #0
 8000772:	719a      	strb	r2, [r3, #6]
 8000774:	e011      	b.n	800079a <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SINE_MODE_ADC_THRESHOLD){
 8000776:	230f      	movs	r3, #15
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b55      	cmp	r3, #85	@ 0x55
 800077e:	d803      	bhi.n	8000788 <Update_Waveshape_with_Converted_Preset_Value+0x36>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	2201      	movs	r2, #1
 8000784:	719a      	strb	r2, [r3, #6]
 8000786:	e008      	b.n	800079a <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SQUARE_MODE_ADC_THRESHOLD){
 8000788:	230f      	movs	r3, #15
 800078a:	18fb      	adds	r3, r7, r3
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b25b      	sxtb	r3, r3
 8000790:	2b00      	cmp	r3, #0
 8000792:	db02      	blt.n	800079a <Update_Waveshape_with_Converted_Preset_Value+0x48>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	2202      	movs	r2, #2
 8000798:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 800079a:	2301      	movs	r3, #1
}
 800079c:	0018      	movs	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	b004      	add	sp, #16
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <Update_Speed_with_Converted_Preset_Value>:

uint8_t Update_Speed_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]

	params_ptr->speed = preset_converted_ptr->speed;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	885b      	ldrh	r3, [r3, #2]
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	811a      	strh	r2, [r3, #8]

	return 1;
 80007b8:	2301      	movs	r3, #1
}
 80007ba:	0018      	movs	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	b002      	add	sp, #8
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <Update_Depth_with_Converted_Preset_Value>:

uint8_t Update_Depth_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	6039      	str	r1, [r7, #0]

	params_ptr->depth = preset_converted_ptr->depth;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	791b      	ldrb	r3, [r3, #4]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	729a      	strb	r2, [r3, #10]

	return 1;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	0018      	movs	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	b002      	add	sp, #8
 80007de:	bd80      	pop	{r7, pc}

080007e0 <Update_Symmetry_with_Converted_Preset_Value>:

uint8_t Update_Symmetry_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]

	params_ptr->symmetry = preset_converted_ptr->symmetry;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	88db      	ldrh	r3, [r3, #6]
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	819a      	strh	r2, [r3, #12]

	return 1;
 80007f4:	2301      	movs	r3, #1
}
 80007f6:	0018      	movs	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b002      	add	sp, #8
 80007fc:	bd80      	pop	{r7, pc}

080007fe <Update_Phase_with_Converted_Preset_Value>:

uint8_t Update_Phase_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
 8000806:	6039      	str	r1, [r7, #0]

	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	891b      	ldrh	r3, [r3, #8]
 800080c:	b29a      	uxth	r2, r3
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8000812:	2301      	movs	r3, #1
}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	b002      	add	sp, #8
 800081a:	bd80      	pop	{r7, pc}

0800081c <Read_and_Interpret_Preset_From_Flash>:
	*Doubleword_ptr = packed;

	return 1;
}

uint8_t Read_and_Interpret_Preset_From_Flash(uint32_t address_val, volatile struct Preset* preset_ptr){
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]

	uint8_t *flash = (uint8_t *)address_val;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	613b      	str	r3, [r7, #16]
	uint8_t *preset = (uint8_t *)preset_ptr;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 800082e:	2317      	movs	r3, #23
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	e020      	b.n	800087a <Read_and_Interpret_Preset_From_Flash+0x5e>

		if(*(flash + i) > 0x7F){ //127
 8000838:	2117      	movs	r1, #23
 800083a:	187b      	adds	r3, r7, r1
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	18d3      	adds	r3, r2, r3
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b25b      	sxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	da06      	bge.n	8000858 <Read_and_Interpret_Preset_From_Flash+0x3c>
			*(preset + i) = 0x7F;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	18d3      	adds	r3, r2, r3
 8000852:	227f      	movs	r2, #127	@ 0x7f
 8000854:	701a      	strb	r2, [r3, #0]
 8000856:	e00a      	b.n	800086e <Read_and_Interpret_Preset_From_Flash+0x52>
		}
		else{
			*(preset + i) = *(flash + i);
 8000858:	2117      	movs	r1, #23
 800085a:	187b      	adds	r3, r7, r1
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	18d2      	adds	r2, r2, r3
 8000862:	187b      	adds	r3, r7, r1
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	68f9      	ldr	r1, [r7, #12]
 8000868:	18cb      	adds	r3, r1, r3
 800086a:	7812      	ldrb	r2, [r2, #0]
 800086c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 800086e:	2117      	movs	r1, #23
 8000870:	187b      	adds	r3, r7, r1
 8000872:	781a      	ldrb	r2, [r3, #0]
 8000874:	187b      	adds	r3, r7, r1
 8000876:	3201      	adds	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
 800087a:	2317      	movs	r3, #23
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b04      	cmp	r3, #4
 8000882:	d9d9      	bls.n	8000838 <Read_and_Interpret_Preset_From_Flash+0x1c>
		}
	}

	return 1;
 8000884:	2301      	movs	r3, #1
}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b006      	add	sp, #24
 800088c:	bd80      	pop	{r7, pc}

0800088e <Read_and_Interpret_Misc_From_Flash>:
	*Doubleword_ptr = packed;

	return 1;
}

uint8_t Read_and_Interpret_Misc_From_Flash(uint32_t address_val, volatile enum Validate *user_presets_used_array_ptr, volatile uint32_t *statuses_ptr, volatile enum MIDI_Channel *MIDI_basic_channel_ptr, uint8_t num_presets){
 800088e:	b580      	push	{r7, lr}
 8000890:	b088      	sub	sp, #32
 8000892:	af00      	add	r7, sp, #0
 8000894:	60f8      	str	r0, [r7, #12]
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	603b      	str	r3, [r7, #0]

	uint8_t *address = (uint8_t *)address_val;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	61bb      	str	r3, [r7, #24]

	volatile uint8_t interpretted_value = 0;
 80008a0:	2316      	movs	r3, #22
 80008a2:	18fb      	adds	r3, r7, r3
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]

	//PRESETS
	for(uint8_t i = 0; i < num_presets; i++){
 80008a8:	231f      	movs	r3, #31
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
 80008b0:	e02c      	b.n	800090c <Read_and_Interpret_Misc_From_Flash+0x7e>

		interpretted_value = *(address + i);
 80008b2:	211f      	movs	r1, #31
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	18d3      	adds	r3, r2, r3
 80008bc:	781a      	ldrb	r2, [r3, #0]
 80008be:	2016      	movs	r0, #22
 80008c0:	183b      	adds	r3, r7, r0
 80008c2:	701a      	strb	r2, [r3, #0]

		if(interpretted_value == (enum Validate)YES){
 80008c4:	183b      	adds	r3, r7, r0
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d106      	bne.n	80008dc <Read_and_Interpret_Misc_From_Flash+0x4e>

			*(user_presets_used_array_ptr + i) = (enum Validate)YES;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	18d3      	adds	r3, r2, r3
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
 80008da:	e011      	b.n	8000900 <Read_and_Interpret_Misc_From_Flash+0x72>
		}
		else if((interpretted_value == 0xFF) || (interpretted_value == (enum Validate)NO)){
 80008dc:	2216      	movs	r2, #22
 80008de:	18bb      	adds	r3, r7, r2
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	2bff      	cmp	r3, #255	@ 0xff
 80008e6:	d004      	beq.n	80008f2 <Read_and_Interpret_Misc_From_Flash+0x64>
 80008e8:	18bb      	adds	r3, r7, r2
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d106      	bne.n	8000900 <Read_and_Interpret_Misc_From_Flash+0x72>

			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
 80008f2:	231f      	movs	r3, #31
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	68ba      	ldr	r2, [r7, #8]
 80008fa:	18d3      	adds	r3, r2, r3
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < num_presets; i++){
 8000900:	211f      	movs	r1, #31
 8000902:	187b      	adds	r3, r7, r1
 8000904:	781a      	ldrb	r2, [r3, #0]
 8000906:	187b      	adds	r3, r7, r1
 8000908:	3201      	adds	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
 800090c:	231f      	movs	r3, #31
 800090e:	18fa      	adds	r2, r7, r3
 8000910:	2128      	movs	r1, #40	@ 0x28
 8000912:	187b      	adds	r3, r7, r1
 8000914:	7812      	ldrb	r2, [r2, #0]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	429a      	cmp	r2, r3
 800091a:	d3ca      	bcc.n	80008b2 <Read_and_Interpret_Misc_From_Flash+0x24>
		}
	}

	//START REQUIRED BEFORE SYNC MODE
	interpretted_value = *(address + num_presets);
 800091c:	187b      	adds	r3, r7, r1
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	18d3      	adds	r3, r2, r3
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	2116      	movs	r1, #22
 8000928:	187b      	adds	r3, r7, r1
 800092a:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)NO){
 800092c:	187b      	adds	r3, r7, r1
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d105      	bne.n	8000942 <Read_and_Interpret_Misc_From_Flash+0xb4>
		Clear_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2180      	movs	r1, #128	@ 0x80
 800093a:	0018      	movs	r0, r3
 800093c:	f005 f8be 	bl	8005abc <Clear_Status_Bit>
 8000940:	e00f      	b.n	8000962 <Read_and_Interpret_Misc_From_Flash+0xd4>
	}
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 8000942:	2216      	movs	r2, #22
 8000944:	18bb      	adds	r3, r7, r2
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b01      	cmp	r3, #1
 800094c:	d004      	beq.n	8000958 <Read_and_Interpret_Misc_From_Flash+0xca>
 800094e:	18bb      	adds	r3, r7, r2
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2bff      	cmp	r3, #255	@ 0xff
 8000956:	d104      	bne.n	8000962 <Read_and_Interpret_Misc_From_Flash+0xd4>
		Set_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2180      	movs	r1, #128	@ 0x80
 800095c:	0018      	movs	r0, r3
 800095e:	f005 f89b 	bl	8005a98 <Set_Status_Bit>
	}

	//OMNI ON/OFF
	interpretted_value = *(address + num_presets + 1);
 8000962:	2328      	movs	r3, #40	@ 0x28
 8000964:	18fb      	adds	r3, r7, r3
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	18d3      	adds	r3, r2, r3
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	2116      	movs	r1, #22
 8000972:	187b      	adds	r3, r7, r1
 8000974:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)NO){
 8000976:	187b      	adds	r3, r7, r1
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	2b00      	cmp	r3, #0
 800097e:	d107      	bne.n	8000990 <Read_and_Interpret_Misc_From_Flash+0x102>
		Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI OFF
 8000980:	2380      	movs	r3, #128	@ 0x80
 8000982:	00da      	lsls	r2, r3, #3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	0011      	movs	r1, r2
 8000988:	0018      	movs	r0, r3
 800098a:	f005 f897 	bl	8005abc <Clear_Status_Bit>
 800098e:	e011      	b.n	80009b4 <Read_and_Interpret_Misc_From_Flash+0x126>
	}
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 8000990:	2216      	movs	r2, #22
 8000992:	18bb      	adds	r3, r7, r2
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b01      	cmp	r3, #1
 800099a:	d004      	beq.n	80009a6 <Read_and_Interpret_Misc_From_Flash+0x118>
 800099c:	18bb      	adds	r3, r7, r2
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2bff      	cmp	r3, #255	@ 0xff
 80009a4:	d106      	bne.n	80009b4 <Read_and_Interpret_Misc_From_Flash+0x126>
		Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI ON
 80009a6:	2380      	movs	r3, #128	@ 0x80
 80009a8:	00da      	lsls	r2, r3, #3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	0011      	movs	r1, r2
 80009ae:	0018      	movs	r0, r3
 80009b0:	f005 f872 	bl	8005a98 <Set_Status_Bit>
	}

	//BASIC CHANNEL
	interpretted_value = *(address + num_presets + 2);
 80009b4:	2328      	movs	r3, #40	@ 0x28
 80009b6:	18fb      	adds	r3, r7, r3
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	3302      	adds	r3, #2
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	18d3      	adds	r3, r2, r3
 80009c0:	781a      	ldrb	r2, [r3, #0]
 80009c2:	2116      	movs	r1, #22
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	701a      	strb	r2, [r3, #0]

	if(interpretted_value > (uint8_t)MIDI_CH_SIXTEEN){
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b0f      	cmp	r3, #15
 80009d0:	d908      	bls.n	80009e4 <Read_and_Interpret_Misc_From_Flash+0x156>

		uint8_t midi_channel_default = MIDI_BASIC_CHANNEL_DEFAULT;
 80009d2:	2117      	movs	r1, #23
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)midi_channel_default;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	187a      	adds	r2, r7, r1
 80009de:	7812      	ldrb	r2, [r2, #0]
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	e005      	b.n	80009f0 <Read_and_Interpret_Misc_From_Flash+0x162>
	}
	else{

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)interpretted_value;
 80009e4:	2316      	movs	r3, #22
 80009e6:	18fb      	adds	r3, r7, r3
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 80009f0:	2301      	movs	r3, #1
}
 80009f2:	0018      	movs	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b008      	add	sp, #32
 80009f8:	bd80      	pop	{r7, pc}

080009fa <Update_Converted_Preset_Array_with_User_or_Factory_Presets>:

uint8_t Update_Converted_Preset_Array_with_User_or_Factory_Presets(volatile struct Preset_Converted* presets_converted_array_ptr,
																	volatile enum Validate *user_presets_used_array_ptr,
																	const struct Preset **factory_presets_array_ptr,
																	volatile struct Preset **user_presets_array_ptr,
																	uint8_t size_of_factory_and_user_arrays){
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000a08:	2317      	movs	r3, #23
 8000a0a:	18fb      	adds	r3, r7, r3
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	e03c      	b.n	8000a8c <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x92>

		if(*(user_presets_used_array_ptr + i) == (enum Validate)YES){
 8000a12:	2117      	movs	r1, #23
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	68ba      	ldr	r2, [r7, #8]
 8000a1a:	18d3      	adds	r3, r2, r3
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d112      	bne.n	8000a4a <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x50>
			Convert_All_Preset_Values(*(user_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	18d3      	adds	r3, r2, r3
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	0013      	movs	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	189b      	adds	r3, r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	189b      	adds	r3, r3, r2
 8000a42:	0019      	movs	r1, r3
 8000a44:	f7ff fe5c 	bl	8000700 <Convert_All_Preset_Values>
 8000a48:	e01a      	b.n	8000a80 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
		}
		else if(*(user_presets_used_array_ptr + i) == (enum Validate)NO){
 8000a4a:	2117      	movs	r1, #23
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	18d3      	adds	r3, r2, r3
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d111      	bne.n	8000a80 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
			Convert_All_Preset_Values((struct Preset *) *(factory_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	18d3      	adds	r3, r2, r3
 8000a66:	6818      	ldr	r0, [r3, #0]
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	189b      	adds	r3, r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	001a      	movs	r2, r3
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	189b      	adds	r3, r3, r2
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	f7ff fe40 	bl	8000700 <Convert_All_Preset_Values>
	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000a80:	2117      	movs	r1, #23
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	781a      	ldrb	r2, [r3, #0]
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	3201      	adds	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
 8000a8c:	2317      	movs	r3, #23
 8000a8e:	18fa      	adds	r2, r7, r3
 8000a90:	2320      	movs	r3, #32
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	7812      	ldrb	r2, [r2, #0]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d3ba      	bcc.n	8000a12 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x18>
		}
	}

	return 1;
 8000a9c:	2301      	movs	r3, #1
}
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b006      	add	sp, #24
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <Read_and_Interpret_User_Presets_From_Flash>:

uint8_t Read_and_Interpret_User_Presets_From_Flash(void){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &user_preset_0);
 8000aac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <Read_and_Interpret_User_Presets_From_Flash+0x3c>)
 8000aae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae8 <Read_and_Interpret_User_Presets_From_Flash+0x40>)
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	0010      	movs	r0, r2
 8000ab4:	f7ff feb2 	bl	800081c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &user_preset_1);
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <Read_and_Interpret_User_Presets_From_Flash+0x44>)
 8000aba:	4a0d      	ldr	r2, [pc, #52]	@ (8000af0 <Read_and_Interpret_User_Presets_From_Flash+0x48>)
 8000abc:	0019      	movs	r1, r3
 8000abe:	0010      	movs	r0, r2
 8000ac0:	f7ff feac 	bl	800081c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &user_preset_2);
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <Read_and_Interpret_User_Presets_From_Flash+0x4c>)
 8000ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8000af8 <Read_and_Interpret_User_Presets_From_Flash+0x50>)
 8000ac8:	0019      	movs	r1, r3
 8000aca:	0010      	movs	r0, r2
 8000acc:	f7ff fea6 	bl	800081c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &user_preset_3);
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <Read_and_Interpret_User_Presets_From_Flash+0x54>)
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8000b00 <Read_and_Interpret_User_Presets_From_Flash+0x58>)
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	0010      	movs	r0, r2
 8000ad8:	f7ff fea0 	bl	800081c <Read_and_Interpret_Preset_From_Flash>

	return 1;
 8000adc:	2301      	movs	r3, #1
}
 8000ade:	0018      	movs	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	0800f800 	.word	0x0800f800
 8000aec:	20000008 	.word	0x20000008
 8000af0:	0800f808 	.word	0x0800f808
 8000af4:	20000010 	.word	0x20000010
 8000af8:	0800f810 	.word	0x0800f810
 8000afc:	20000018 	.word	0x20000018
 8000b00:	0800f818 	.word	0x0800f818

08000b04 <Update_Waveshape_with_CC_Value>:

uint8_t Update_Waveshape_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]

	if(*data <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b16:	d803      	bhi.n	8000b20 <Update_Waveshape_with_CC_Value+0x1c>
		params_ptr->waveshape = TRIANGLE_MODE;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	719a      	strb	r2, [r3, #6]
 8000b1e:	e011      	b.n	8000b44 <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SINE_MODE_ADC_THRESHOLD){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b55      	cmp	r3, #85	@ 0x55
 8000b28:	d803      	bhi.n	8000b32 <Update_Waveshape_with_CC_Value+0x2e>
		params_ptr->waveshape = SINE_MODE;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	719a      	strb	r2, [r3, #6]
 8000b30:	e008      	b.n	8000b44 <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SQUARE_MODE_ADC_THRESHOLD){
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	db02      	blt.n	8000b44 <Update_Waveshape_with_CC_Value+0x40>
		params_ptr->waveshape = SQUARE_MODE;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	2202      	movs	r2, #2
 8000b42:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 8000b44:	2301      	movs	r3, #1
}
 8000b46:	0018      	movs	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b002      	add	sp, #8
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <Update_Speed_with_CC_Value>:

uint8_t Update_Speed_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b084      	sub	sp, #16
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]

	uint16_t speed = (uint16_t)*data;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	210e      	movs	r1, #14
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	801a      	strh	r2, [r3, #0]

	speed <<= 3; //convert to 10-bit
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	187a      	adds	r2, r7, r1
 8000b68:	8812      	ldrh	r2, [r2, #0]
 8000b6a:	00d2      	lsls	r2, r2, #3
 8000b6c:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = speed;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	187a      	adds	r2, r7, r1
 8000b72:	8812      	ldrh	r2, [r2, #0]
 8000b74:	811a      	strh	r2, [r3, #8]

	return 1;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b004      	add	sp, #16
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <Update_Depth_with_CC_Value>:

uint8_t Update_Depth_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]

	uint8_t depth = (uint8_t)*data;
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	7812      	ldrb	r2, [r2, #0]
 8000b92:	701a      	strb	r2, [r3, #0]
	params_ptr->depth = depth;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	187a      	adds	r2, r7, r1
 8000b98:	7812      	ldrb	r2, [r2, #0]
 8000b9a:	729a      	strb	r2, [r3, #10]

	return 1;
 8000b9c:	2301      	movs	r3, #1
}
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b004      	add	sp, #16
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <Update_Symmetry_with_CC_Value>:

uint8_t Update_Symmetry_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b084      	sub	sp, #16
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]

	uint8_t symmetry = (uint8_t)*data;
 8000bb0:	210f      	movs	r1, #15
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	7812      	ldrb	r2, [r2, #0]
 8000bb8:	701a      	strb	r2, [r3, #0]

	symmetry <<= 1; //convert to 8-bit
 8000bba:	187a      	adds	r2, r7, r1
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	18db      	adds	r3, r3, r3
 8000bc2:	7013      	strb	r3, [r2, #0]
	params_ptr->symmetry = symmetry;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	819a      	strh	r2, [r3, #12]

	return 1;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b004      	add	sp, #16
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <Update_Phase_with_CC_Value>:

uint8_t Update_Phase_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]

	uint8_t phase = (uint8_t)*data;
 8000be2:	210f      	movs	r1, #15
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	7812      	ldrb	r2, [r2, #0]
 8000bea:	701a      	strb	r2, [r3, #0]

	phase <<= 2; //convert to 9-bit
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	187a      	adds	r2, r7, r1
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	0092      	lsls	r2, r2, #2
 8000bf4:	701a      	strb	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = phase;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8000c00:	2301      	movs	r3, #1
}
 8000c02:	0018      	movs	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b004      	add	sp, #16
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <Set_Waveshape_to_CC_Mode_and_Value>:

uint8_t Set_Waveshape_to_CC_Mode_and_Value(uint8_t *data){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000c14:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c1c:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = CC_MODE;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c20:	2202      	movs	r2, #2
 8000c22:	701a      	strb	r2, [r3, #0]

	CC_array[WAVESHAPE_ARR] = *data;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	781a      	ldrb	r2, [r3, #0]
 8000c28:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <Set_Waveshape_to_CC_Mode_and_Value+0x30>)
 8000c2a:	701a      	strb	r2, [r3, #0]

	return 1;
 8000c2c:	2301      	movs	r3, #1
}
 8000c2e:	0018      	movs	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b002      	add	sp, #8
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	20000430 	.word	0x20000430
 8000c3c:	200004b8 	.word	0x200004b8

08000c40 <Set_Speed_to_CC_Mode_and_Value>:

uint8_t Set_Speed_to_CC_Mode_and_Value(uint8_t *data){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000c50:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000c54:	2202      	movs	r2, #2
 8000c56:	701a      	strb	r2, [r3, #0]

	CC_array[SPEED_ARR] = *data;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	4b04      	ldr	r3, [pc, #16]	@ (8000c70 <Set_Speed_to_CC_Mode_and_Value+0x30>)
 8000c5e:	705a      	strb	r2, [r3, #1]

	return 1;
 8000c60:	2301      	movs	r3, #1
}
 8000c62:	0018      	movs	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	20000428 	.word	0x20000428
 8000c70:	200004b8 	.word	0x200004b8

08000c74 <Set_Depth_to_CC_Mode_and_Value>:

uint8_t Set_Depth_to_CC_Mode_and_Value(uint8_t *data){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000c84:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = CC_MODE;
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000c88:	2202      	movs	r2, #2
 8000c8a:	701a      	strb	r2, [r3, #0]

	CC_array[DEPTH_ARR] = *data;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <Set_Depth_to_CC_Mode_and_Value+0x30>)
 8000c92:	709a      	strb	r2, [r3, #2]

	return 1;
 8000c94:	2301      	movs	r3, #1
}
 8000c96:	0018      	movs	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b002      	add	sp, #8
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	2000042c 	.word	0x2000042c
 8000ca4:	200004b8 	.word	0x200004b8

08000ca8 <Set_Symmetry_to_CC_Mode_and_Value>:

uint8_t Set_Symmetry_to_CC_Mode_and_Value(uint8_t *data){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000cb8:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = CC_MODE;
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	701a      	strb	r2, [r3, #0]

	CC_array[SYMMETRY_ARR] = *data;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	781a      	ldrb	r2, [r3, #0]
 8000cc4:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <Set_Symmetry_to_CC_Mode_and_Value+0x30>)
 8000cc6:	70da      	strb	r2, [r3, #3]

	return 1;
 8000cc8:	2301      	movs	r3, #1
}
 8000cca:	0018      	movs	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	20000434 	.word	0x20000434
 8000cd8:	200004b8 	.word	0x200004b8

08000cdc <Set_Phase_to_CC_Mode_and_Value>:

uint8_t Set_Phase_to_CC_Mode_and_Value(uint8_t *data){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000cec:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = CC_MODE;
 8000cee:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	701a      	strb	r2, [r3, #0]

	CC_array[PHASE_ARR] = *data;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	4b04      	ldr	r3, [pc, #16]	@ (8000d0c <Set_Phase_to_CC_Mode_and_Value+0x30>)
 8000cfa:	711a      	strb	r2, [r3, #4]

	return 1;
 8000cfc:	2301      	movs	r3, #1
}
 8000cfe:	0018      	movs	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	20000438 	.word	0x20000438
 8000d0c:	200004b8 	.word	0x200004b8

08000d10 <Set_All_Pots_to_PC_Mode>:

uint8_t Set_All_Pots_to_PC_Mode(void){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000d14:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d1c:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = PC_MODE;
 8000d1e:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d20:	2203      	movs	r2, #3
 8000d22:	701a      	strb	r2, [r3, #0]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000d24:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d2c:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.shared_state = PC_MODE;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d30:	2203      	movs	r2, #3
 8000d32:	701a      	strb	r2, [r3, #0]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <Set_All_Pots_to_PC_Mode+0x64>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <Set_All_Pots_to_PC_Mode+0x64>)
 8000d3c:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = PC_MODE;
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <Set_All_Pots_to_PC_Mode+0x64>)
 8000d40:	2203      	movs	r2, #3
 8000d42:	701a      	strb	r2, [r3, #0]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <Set_All_Pots_to_PC_Mode+0x68>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <Set_All_Pots_to_PC_Mode+0x68>)
 8000d4c:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = PC_MODE;
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <Set_All_Pots_to_PC_Mode+0x68>)
 8000d50:	2203      	movs	r2, #3
 8000d52:	701a      	strb	r2, [r3, #0]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000d54:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <Set_All_Pots_to_PC_Mode+0x6c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <Set_All_Pots_to_PC_Mode+0x6c>)
 8000d5c:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = PC_MODE;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <Set_All_Pots_to_PC_Mode+0x6c>)
 8000d60:	2203      	movs	r2, #3
 8000d62:	701a      	strb	r2, [r3, #0]

	return 1;
 8000d64:	2301      	movs	r3, #1
}
 8000d66:	0018      	movs	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000430 	.word	0x20000430
 8000d70:	20000428 	.word	0x20000428
 8000d74:	2000042c 	.word	0x2000042c
 8000d78:	20000434 	.word	0x20000434
 8000d7c:	20000438 	.word	0x20000438

08000d80 <Is_Status_Byte>:
volatile uint8_t active_status_byte;
volatile uint8_t running_status_byte;
volatile struct MIDI_Data MIDI_data = {.MIDI_data_buffer = 0};

//FUNCTION DEFINITIONS
enum Validate Is_Status_Byte(volatile uint8_t *data){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000d88:	210f      	movs	r1, #15
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	7812      	ldrb	r2, [r2, #0]
 8000d90:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	187a      	adds	r2, r7, r1
 8000d96:	7812      	ldrb	r2, [r2, #0]
 8000d98:	09d2      	lsrs	r2, r2, #7
 8000d9a:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <Is_Status_Byte+0x28>

		return (enum Validate)YES;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e000      	b.n	8000daa <Is_Status_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)NO;
 8000da8:	2300      	movs	r3, #0
	}
}
 8000daa:	0018      	movs	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b004      	add	sp, #16
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <Is_Data_Byte>:

enum Validate Is_Data_Byte(volatile uint8_t *data){
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b084      	sub	sp, #16
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000dba:	210f      	movs	r1, #15
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	7812      	ldrb	r2, [r2, #0]
 8000dc2:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	187a      	adds	r2, r7, r1
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	09d2      	lsrs	r2, r2, #7
 8000dcc:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <Is_Data_Byte+0x28>

		return (enum Validate)NO;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e000      	b.n	8000ddc <Is_Data_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)YES;
 8000dda:	2301      	movs	r3, #1
	}
}
 8000ddc:	0018      	movs	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b004      	add	sp, #16
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <Is_PC_Status_Byte>:

enum Validate Is_PC_Status_Byte(volatile uint8_t *data){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_PROGRAM_CHANGE >> 4;
 8000dec:	210f      	movs	r1, #15
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	220c      	movs	r2, #12
 8000df2:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	200e      	movs	r0, #14
 8000dfc:	183b      	adds	r3, r7, r0
 8000dfe:	0912      	lsrs	r2, r2, #4
 8000e00:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000e02:	183a      	adds	r2, r7, r0
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	7812      	ldrb	r2, [r2, #0]
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d101      	bne.n	8000e12 <Is_PC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e000      	b.n	8000e14 <Is_PC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000e12:	2300      	movs	r3, #0
	}
}
 8000e14:	0018      	movs	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b004      	add	sp, #16
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <Is_CC_Status_Byte>:

enum Validate Is_CC_Status_Byte(volatile uint8_t *data){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_CONTROL_CHANGE >> 4;
 8000e24:	210f      	movs	r1, #15
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	220b      	movs	r2, #11
 8000e2a:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	200e      	movs	r0, #14
 8000e34:	183b      	adds	r3, r7, r0
 8000e36:	0912      	lsrs	r2, r2, #4
 8000e38:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000e3a:	183a      	adds	r2, r7, r0
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	7812      	ldrb	r2, [r2, #0]
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d101      	bne.n	8000e4a <Is_CC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e000      	b.n	8000e4c <Is_CC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000e4a:	2300      	movs	r3, #0
	}
}
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b004      	add	sp, #16
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>:

enum Validate Is_Utilised_Channel_Mode_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b77      	cmp	r3, #119	@ 0x77
 8000e64:	d91d      	bls.n	8000ea2 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4e>

		if(*first_data_byte == RESET_ALL_CONTROLLERS){ //put all pots into CC mode and set to 50%
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b79      	cmp	r3, #121	@ 0x79
 8000e6e:	d101      	bne.n	8000e74 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x20>

			return (enum Validate)YES;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e017      	b.n	8000ea4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == LOCAL_CONTROL){
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b7a      	cmp	r3, #122	@ 0x7a
 8000e7c:	d101      	bne.n	8000e82 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x2e>

			return (enum Validate)YES;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e010      	b.n	8000ea4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_ON){
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b7d      	cmp	r3, #125	@ 0x7d
 8000e8a:	d101      	bne.n	8000e90 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x3c>

			return (enum Validate)YES;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e009      	b.n	8000ea4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_OFF){
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b7c      	cmp	r3, #124	@ 0x7c
 8000e98:	d101      	bne.n	8000e9e <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4a>

			return (enum Validate)YES;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e002      	b.n	8000ea4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else{

			return (enum Validate)NO;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e000      	b.n	8000ea4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
	}
	else{

		return (enum Validate)NO;
 8000ea2:	2300      	movs	r3, #0
	}
}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b002      	add	sp, #8
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <Is_Utilised_CC_First_Data_Byte>:

enum Validate Is_Utilised_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b77      	cmp	r3, #119	@ 0x77
 8000ebc:	d901      	bls.n	8000ec2 <Is_Utilised_CC_First_Data_Byte+0x16>

		return (enum Validate)NO;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e023      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
	}
	else{

		if(*first_data_byte == WAVESHAPE_CC){
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b14      	cmp	r3, #20
 8000eca:	d101      	bne.n	8000ed0 <Is_Utilised_CC_First_Data_Byte+0x24>

			return (enum Validate)YES;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e01c      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SPEED_CC){
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b15      	cmp	r3, #21
 8000ed8:	d101      	bne.n	8000ede <Is_Utilised_CC_First_Data_Byte+0x32>

			return (enum Validate)YES;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e015      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == DEPTH_CC){
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b16      	cmp	r3, #22
 8000ee6:	d101      	bne.n	8000eec <Is_Utilised_CC_First_Data_Byte+0x40>

			return (enum Validate)YES;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e00e      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SYMMETRY_CC){
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b17      	cmp	r3, #23
 8000ef4:	d101      	bne.n	8000efa <Is_Utilised_CC_First_Data_Byte+0x4e>

			return (enum Validate)YES;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e007      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == PHASE_CC){
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b18      	cmp	r3, #24
 8000f02:	d101      	bne.n	8000f08 <Is_Utilised_CC_First_Data_Byte+0x5c>

			return (enum Validate)YES;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else{

			return (enum Validate)NO;
 8000f08:	2300      	movs	r3, #0
		}
	}
}
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>:

enum Validate Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(volatile uint8_t *first_data_byte, volatile uint8_t *second_data_byte){
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	6039      	str	r1, [r7, #0]

	if(*first_data_byte == RESET_ALL_CONTROLLERS){
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b79      	cmp	r3, #121	@ 0x79
 8000f24:	d108      	bne.n	8000f38 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x26>

		if(*second_data_byte == 0){
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x22>

			return (enum Validate)YES;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e031      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8000f34:	2300      	movs	r3, #0
 8000f36:	e02f      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == LOCAL_CONTROL){
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b7a      	cmp	r3, #122	@ 0x7a
 8000f40:	d10d      	bne.n	8000f5e <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x4c>

		if((*second_data_byte == 0) || (*second_data_byte == 127)){
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d004      	beq.n	8000f56 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x44>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f54:	d101      	bne.n	8000f5a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x48>

			return (enum Validate)YES;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e01e      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e01c      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_OFF){
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b7c      	cmp	r3, #124	@ 0x7c
 8000f66:	d108      	bne.n	8000f7a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x68>

		if((*second_data_byte == 0)){
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x64>

			return (enum Validate)YES;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e010      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e00e      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_ON){
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b7d      	cmp	r3, #125	@ 0x7d
 8000f82:	d108      	bne.n	8000f96 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x84>

		if((*second_data_byte == 0)){
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x80>

			return (enum Validate)YES;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e002      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e000      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else{

		return (enum Validate)NO; //should not even be called if first data byte is always valid
 8000f96:	2300      	movs	r3, #0
	}
}
 8000f98:	0018      	movs	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b002      	add	sp, #8
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <Is_Sysex_Start_Status_Byte>:
	}

	return 1;
}

enum Validate Is_Sysex_Start_Status_Byte(volatile uint8_t *data){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

	if(*data == (uint8_t)SYSTEM_EXCLUSIVE_START){
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2bf0      	cmp	r3, #240	@ 0xf0
 8000fb0:	d101      	bne.n	8000fb6 <Is_Sysex_Start_Status_Byte+0x16>

		return (enum Validate)YES;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <Is_Sysex_Start_Status_Byte+0x18>
	}
	else{

		return (enum Validate)NO;
 8000fb6:	2300      	movs	r3, #0
	}
}
 8000fb8:	0018      	movs	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b002      	add	sp, #8
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>:

		return (enum Validate)NO;
	}
}

enum Validate Is_Channelised_Status_Byte_On_Basic_Channel(volatile uint8_t *data, volatile enum MIDI_Channel MIDI_basic_channel){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	000a      	movs	r2, r1
 8000fca:	1cfb      	adds	r3, r7, #3
 8000fcc:	701a      	strb	r2, [r3, #0]

	uint8_t ch = *data & 0x0F;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	200f      	movs	r0, #15
 8000fd6:	183b      	adds	r3, r7, r0
 8000fd8:	210f      	movs	r1, #15
 8000fda:	400a      	ands	r2, r1
 8000fdc:	701a      	strb	r2, [r3, #0]
	uint8_t b_ch = (uint8_t)MIDI_basic_channel;
 8000fde:	210e      	movs	r1, #14
 8000fe0:	187b      	adds	r3, r7, r1
 8000fe2:	1cfa      	adds	r2, r7, #3
 8000fe4:	7812      	ldrb	r2, [r2, #0]
 8000fe6:	701a      	strb	r2, [r3, #0]

	if(ch == b_ch){
 8000fe8:	183a      	adds	r2, r7, r0
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	7812      	ldrb	r2, [r2, #0]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d101      	bne.n	8000ff8 <Is_Channelised_Status_Byte_On_Basic_Channel+0x38>

		return (enum Validate)YES;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <Is_Channelised_Status_Byte_On_Basic_Channel+0x3a>
	}
	else{

		return (enum Validate)NO;
 8000ff8:	2300      	movs	r3, #0
	}
}
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b004      	add	sp, #16
 8001000:	bd80      	pop	{r7, pc}

08001002 <Is_Data_Buffer_Empty>:

enum Validate Is_Data_Buffer_Empty(volatile struct MIDI_Data *MIDI_data_struct){
 8001002:	b580      	push	{r7, lr}
 8001004:	b084      	sub	sp, #16
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]

	uint16_t sum = 0;
 800100a:	230e      	movs	r3, #14
 800100c:	18fb      	adds	r3, r7, r3
 800100e:	2200      	movs	r2, #0
 8001010:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001012:	230d      	movs	r3, #13
 8001014:	18fb      	adds	r3, r7, r3
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
 800101a:	e011      	b.n	8001040 <Is_Data_Buffer_Empty+0x3e>

		sum += MIDI_data_struct->MIDI_data_buffer[i];
 800101c:	200d      	movs	r0, #13
 800101e:	183b      	adds	r3, r7, r0
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	5cd3      	ldrb	r3, [r2, r3]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	0019      	movs	r1, r3
 800102a:	220e      	movs	r2, #14
 800102c:	18bb      	adds	r3, r7, r2
 800102e:	18ba      	adds	r2, r7, r2
 8001030:	8812      	ldrh	r2, [r2, #0]
 8001032:	188a      	adds	r2, r1, r2
 8001034:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001036:	183b      	adds	r3, r7, r0
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	183b      	adds	r3, r7, r0
 800103c:	3201      	adds	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	230d      	movs	r3, #13
 8001042:	18fb      	adds	r3, r7, r3
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b09      	cmp	r3, #9
 8001048:	d9e8      	bls.n	800101c <Is_Data_Buffer_Empty+0x1a>
	}

	if(sum == 0){
 800104a:	230e      	movs	r3, #14
 800104c:	18fb      	adds	r3, r7, r3
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <Is_Data_Buffer_Empty+0x56>

		return (enum Validate)YES;
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <Is_Data_Buffer_Empty+0x58>
	}
	else{

		return (enum Validate)NO;
 8001058:	2300      	movs	r3, #0
	}
}
 800105a:	0018      	movs	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	b004      	add	sp, #16
 8001060:	bd80      	pop	{r7, pc}

08001062 <Clear_Data_Buffer>:
			return 1;
		}
	}
}

uint8_t Clear_Data_Buffer(volatile struct MIDI_Data *MIDI_data_struct){
 8001062:	b580      	push	{r7, lr}
 8001064:	b084      	sub	sp, #16
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 800106a:	230f      	movs	r3, #15
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	e00a      	b.n	800108a <Clear_Data_Buffer+0x28>

		MIDI_data_struct->MIDI_data_buffer[i] = 0;
 8001074:	200f      	movs	r0, #15
 8001076:	183b      	adds	r3, r7, r0
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	2100      	movs	r1, #0
 800107e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001080:	183b      	adds	r3, r7, r0
 8001082:	781a      	ldrb	r2, [r3, #0]
 8001084:	183b      	adds	r3, r7, r0
 8001086:	3201      	adds	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
 800108a:	230f      	movs	r3, #15
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b09      	cmp	r3, #9
 8001092:	d9ef      	bls.n	8001074 <Clear_Data_Buffer+0x12>
	}

	return 1;
 8001094:	2301      	movs	r3, #1
}
 8001096:	0018      	movs	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	b004      	add	sp, #16
 800109c:	bd80      	pop	{r7, pc}

0800109e <Is_Program_Change_Data_Byte_In_Range>:

enum Validate Is_Program_Change_Data_Byte_In_Range(volatile uint8_t *PC_data, uint8_t size_of_factory_or_user_array){
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	000a      	movs	r2, r1
 80010a8:	1cfb      	adds	r3, r7, #3
 80010aa:	701a      	strb	r2, [r3, #0]

	if(*PC_data < size_of_factory_or_user_array){
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	1cfa      	adds	r2, r7, #3
 80010b4:	7812      	ldrb	r2, [r2, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d901      	bls.n	80010be <Is_Program_Change_Data_Byte_In_Range+0x20>

		return (enum Validate)YES;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <Is_Program_Change_Data_Byte_In_Range+0x22>
	}
	else{

		return (enum Validate)NO;
 80010be:	2300      	movs	r3, #0
	}
}
 80010c0:	0018      	movs	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b002      	add	sp, #8
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <Is_System_Real_Time_Status_Byte>:

enum Validate Is_System_Real_Time_Status_Byte(volatile uint8_t *data){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

	if(*data == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2bf8      	cmp	r3, #248	@ 0xf8
 80010d8:	d101      	bne.n	80010de <Is_System_Real_Time_Status_Byte+0x16>
		return (enum Validate)YES;
 80010da:	2301      	movs	r3, #1
 80010dc:	e023      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_START){
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2bfa      	cmp	r3, #250	@ 0xfa
 80010e6:	d101      	bne.n	80010ec <Is_System_Real_Time_Status_Byte+0x24>
		return (enum Validate)YES;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e01c      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_CONTINUE){
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2bfb      	cmp	r3, #251	@ 0xfb
 80010f4:	d101      	bne.n	80010fa <Is_System_Real_Time_Status_Byte+0x32>
		return (enum Validate)YES;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e015      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_STOP){
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2bfc      	cmp	r3, #252	@ 0xfc
 8001102:	d101      	bne.n	8001108 <Is_System_Real_Time_Status_Byte+0x40>
		return (enum Validate)YES;
 8001104:	2301      	movs	r3, #1
 8001106:	e00e      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_ACTIVE_SENSING){
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001110:	d101      	bne.n	8001116 <Is_System_Real_Time_Status_Byte+0x4e>
		return (enum Validate)YES;
 8001112:	2301      	movs	r3, #1
 8001114:	e007      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_RESET){
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2bff      	cmp	r3, #255	@ 0xff
 800111e:	d101      	bne.n	8001124 <Is_System_Real_Time_Status_Byte+0x5c>
		return (enum Validate)YES;
 8001120:	2301      	movs	r3, #1
 8001122:	e000      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else{
		return (enum Validate)NO;
 8001124:	2300      	movs	r3, #0
	}
}
 8001126:	0018      	movs	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	b002      	add	sp, #8
 800112c:	bd80      	pop	{r7, pc}

0800112e <Is_OMNI_On>:

enum Validate Is_OMNI_On(volatile uint32_t *statuses_ptr){
 800112e:	b5b0      	push	{r4, r5, r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]

	uint8_t omni_mode = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001136:	250f      	movs	r5, #15
 8001138:	197c      	adds	r4, r7, r5
 800113a:	2380      	movs	r3, #128	@ 0x80
 800113c:	00da      	lsls	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0011      	movs	r1, r2
 8001142:	0018      	movs	r0, r3
 8001144:	f004 fc94 	bl	8005a70 <Get_Status_Bit>
 8001148:	0003      	movs	r3, r0
 800114a:	7023      	strb	r3, [r4, #0]

	if(omni_mode == 1){
 800114c:	197b      	adds	r3, r7, r5
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d101      	bne.n	8001158 <Is_OMNI_On+0x2a>

		return (enum Validate)YES;
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <Is_OMNI_On+0x2c>
	}
	else{

		return (enum Validate)NO;
 8001158:	2300      	movs	r3, #0
	}
}
 800115a:	0018      	movs	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	b004      	add	sp, #16
 8001160:	bdb0      	pop	{r4, r5, r7, pc}

08001162 <Reset_and_Stop_MIDI_Software_Timer>:

uint8_t Reset_and_Stop_MIDI_Software_Timer(uint32_t *midi_counter_ptr, volatile uint32_t *statuses_ptr){
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]

	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Is_Running);
 800116c:	2380      	movs	r3, #128	@ 0x80
 800116e:	005a      	lsls	r2, r3, #1
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	0011      	movs	r1, r2
 8001174:	0018      	movs	r0, r3
 8001176:	f004 fca1 	bl	8005abc <Clear_Status_Bit>
	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Has_Timed_Out);
 800117a:	2380      	movs	r3, #128	@ 0x80
 800117c:	009a      	lsls	r2, r3, #2
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	0011      	movs	r1, r2
 8001182:	0018      	movs	r0, r3
 8001184:	f004 fc9a 	bl	8005abc <Clear_Status_Bit>
	*midi_counter_ptr = 0;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]

	return 1;
 800118e:	2301      	movs	r3, #1
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	b002      	add	sp, #8
 8001196:	bd80      	pop	{r7, pc}

08001198 <Reset_All_Controllers>:

uint8_t Reset_All_Controllers(struct Params *params_ptr, struct Delay_Line* delay_line_ptr){
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80011a2:	4b24      	ldr	r3, [pc, #144]	@ (8001234 <Reset_All_Controllers+0x9c>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	4b22      	ldr	r3, [pc, #136]	@ (8001234 <Reset_All_Controllers+0x9c>)
 80011aa:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 80011ac:	4b22      	ldr	r3, [pc, #136]	@ (8001238 <Reset_All_Controllers+0xa0>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b21      	ldr	r3, [pc, #132]	@ (8001238 <Reset_All_Controllers+0xa0>)
 80011b4:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 80011b6:	4b21      	ldr	r3, [pc, #132]	@ (800123c <Reset_All_Controllers+0xa4>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <Reset_All_Controllers+0xa4>)
 80011be:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <Reset_All_Controllers+0xa8>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001240 <Reset_All_Controllers+0xa8>)
 80011c8:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 80011ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001244 <Reset_All_Controllers+0xac>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <Reset_All_Controllers+0xac>)
 80011d2:	705a      	strb	r2, [r3, #1]

	//Put all pots into CC mode
	waveshape_fsm.current_state = CC_MODE;
 80011d4:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <Reset_All_Controllers+0x9c>)
 80011d6:	2202      	movs	r2, #2
 80011d8:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 80011da:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <Reset_All_Controllers+0xa0>)
 80011dc:	2202      	movs	r2, #2
 80011de:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = CC_MODE;
 80011e0:	4b16      	ldr	r3, [pc, #88]	@ (800123c <Reset_All_Controllers+0xa4>)
 80011e2:	2202      	movs	r2, #2
 80011e4:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = CC_MODE;
 80011e6:	4b16      	ldr	r3, [pc, #88]	@ (8001240 <Reset_All_Controllers+0xa8>)
 80011e8:	2202      	movs	r2, #2
 80011ea:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = CC_MODE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <Reset_All_Controllers+0xac>)
 80011ee:	2202      	movs	r2, #2
 80011f0:	701a      	strb	r2, [r3, #0]

	uint8_t data = 127 >> 1;
 80011f2:	230e      	movs	r3, #14
 80011f4:	18fb      	adds	r3, r7, r3
 80011f6:	223f      	movs	r2, #63	@ 0x3f
 80011f8:	701a      	strb	r2, [r3, #0]

	for(uint8_t index = 0; index < NUM_POTS; index++){
 80011fa:	230f      	movs	r3, #15
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
 8001202:	e00c      	b.n	800121e <Reset_All_Controllers+0x86>

		CC_array[index] = data;
 8001204:	200f      	movs	r0, #15
 8001206:	183b      	adds	r3, r7, r0
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4a0f      	ldr	r2, [pc, #60]	@ (8001248 <Reset_All_Controllers+0xb0>)
 800120c:	210e      	movs	r1, #14
 800120e:	1879      	adds	r1, r7, r1
 8001210:	7809      	ldrb	r1, [r1, #0]
 8001212:	54d1      	strb	r1, [r2, r3]
	for(uint8_t index = 0; index < NUM_POTS; index++){
 8001214:	183b      	adds	r3, r7, r0
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	183b      	adds	r3, r7, r0
 800121a:	3201      	adds	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	230f      	movs	r3, #15
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b04      	cmp	r3, #4
 8001226:	d9ed      	bls.n	8001204 <Reset_All_Controllers+0x6c>
	}

	return 1;
 8001228:	2301      	movs	r3, #1
}
 800122a:	0018      	movs	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	b004      	add	sp, #16
 8001230:	bd80      	pop	{r7, pc}
 8001232:	46c0      	nop			@ (mov r8, r8)
 8001234:	20000430 	.word	0x20000430
 8001238:	20000428 	.word	0x20000428
 800123c:	2000042c 	.word	0x2000042c
 8001240:	20000434 	.word	0x20000434
 8001244:	20000438 	.word	0x20000438
 8001248:	200004b8 	.word	0x200004b8

0800124c <Set_Local_Control>:

uint8_t Set_Local_Control(){
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8001250:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <Set_Local_Control+0x5c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <Set_Local_Control+0x5c>)
 8001258:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 800125a:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <Set_Local_Control+0x60>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <Set_Local_Control+0x60>)
 8001262:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8001264:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <Set_Local_Control+0x64>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <Set_Local_Control+0x64>)
 800126c:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <Set_Local_Control+0x68>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <Set_Local_Control+0x68>)
 8001276:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 8001278:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <Set_Local_Control+0x6c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <Set_Local_Control+0x6c>)
 8001280:	705a      	strb	r2, [r3, #1]

	//Put all pots into manual mode
	waveshape_fsm.current_state = MANUAL_MODE;
 8001282:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <Set_Local_Control+0x5c>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = MANUAL_MODE;
 8001288:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <Set_Local_Control+0x60>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = MANUAL_MODE;
 800128e:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <Set_Local_Control+0x64>)
 8001290:	2201      	movs	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = MANUAL_MODE;
 8001294:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <Set_Local_Control+0x68>)
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = MANUAL_MODE;
 800129a:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <Set_Local_Control+0x6c>)
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]

	return 1;
 80012a0:	2301      	movs	r3, #1
}
 80012a2:	0018      	movs	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000430 	.word	0x20000430
 80012ac:	20000428 	.word	0x20000428
 80012b0:	2000042c 	.word	0x2000042c
 80012b4:	20000434 	.word	0x20000434
 80012b8:	20000438 	.word	0x20000438

080012bc <Set_OMNI_Off>:

uint8_t Set_OMNI_Off(volatile uint32_t *statuses_ptr){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

	//Clear status bit
	Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 80012c4:	2380      	movs	r3, #128	@ 0x80
 80012c6:	00da      	lsls	r2, r3, #3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	0011      	movs	r1, r2
 80012cc:	0018      	movs	r0, r3
 80012ce:	f004 fbf5 	bl	8005abc <Clear_Status_Bit>

	return 1;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	0018      	movs	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b002      	add	sp, #8
 80012da:	bd80      	pop	{r7, pc}

080012dc <Set_OMNI_On>:

uint8_t Set_OMNI_On(volatile uint32_t *statuses_ptr){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

	//Set status bit
	Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 80012e4:	2380      	movs	r3, #128	@ 0x80
 80012e6:	00da      	lsls	r2, r3, #3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	0011      	movs	r1, r2
 80012ec:	0018      	movs	r0, r3
 80012ee:	f004 fbd3 	bl	8005a98 <Set_Status_Bit>

	return 1;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	0018      	movs	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b002      	add	sp, #8
 80012fa:	bd80      	pop	{r7, pc}

080012fc <Start_UART_Receive>:
//VARIABLE DEFINITIONS
volatile uint8_t rx_buffer[1] = {0};
volatile enum Validate UART_DMA_TX_is_complete = YES;

//FUNCTION DEFINITIONS
uint8_t Start_UART_Receive(void){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

	//START UART RECEIVE
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8001300:	4904      	ldr	r1, [pc, #16]	@ (8001314 <Start_UART_Receive+0x18>)
 8001302:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <Start_UART_Receive+0x1c>)
 8001304:	2201      	movs	r2, #1
 8001306:	0018      	movs	r0, r3
 8001308:	f00a fac8 	bl	800b89c <HAL_UART_Receive_DMA>

	return 1;
 800130c:	2301      	movs	r3, #1
}
 800130e:	0018      	movs	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200004cc 	.word	0x200004cc
 8001318:	20000a38 	.word	0x20000a38

0800131c <Pot_Check>:
volatile uint8_t symmetry_pot_adc_measurement_num = 0;
volatile uint8_t phase_pot_adc_measurement_num = 0;
volatile uint8_t pots_counter = 0;

//FUNCTION DEFINITIONS
uint8_t Pot_Check(volatile uint16_t* ADCResults_arr, enum Pot_Type pot_type){
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	000a      	movs	r2, r1
 8001326:	1cfb      	adds	r3, r7, #3
 8001328:	701a      	strb	r2, [r3, #0]
	static uint16_t second_symmetry_measurement;

	static uint16_t first_phase_measurement;
	static uint16_t second_phase_measurement;

	uint16_t *first_measurement_ptr = NULL;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t *second_measurement_ptr = NULL;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
	volatile uint8_t *measurement_num_ptr = NULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
	void *measurement_ptr = NULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
	uint8_t tolerance = 0;
 800133a:	2117      	movs	r1, #23
 800133c:	187b      	adds	r3, r7, r1
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
	volatile struct Normal_FSM* normal_fsm_ptr = NULL;
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]

	if(pot_type == WAVESHAPE_POT){
 800134a:	1cfb      	adds	r3, r7, #3
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10d      	bne.n	800136e <Pot_Check+0x52>

		first_measurement_ptr = &first_waveshape_measurement;
 8001352:	4b6d      	ldr	r3, [pc, #436]	@ (8001508 <Pot_Check+0x1ec>)
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_waveshape_measurement;
 8001356:	4b6d      	ldr	r3, [pc, #436]	@ (800150c <Pot_Check+0x1f0>)
 8001358:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &waveshape_pot_adc_measurement_num;
 800135a:	4b6d      	ldr	r3, [pc, #436]	@ (8001510 <Pot_Check+0x1f4>)
 800135c:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + WAVESHAPE_ADC_RESULT_INDEX);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	61bb      	str	r3, [r7, #24]
		tolerance = WAVESHAPE_TOLERANCE;
 8001362:	187b      	adds	r3, r7, r1
 8001364:	2246      	movs	r2, #70	@ 0x46
 8001366:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &waveshape_fsm;
 8001368:	4b6a      	ldr	r3, [pc, #424]	@ (8001514 <Pot_Check+0x1f8>)
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	e04e      	b.n	800140c <Pot_Check+0xf0>
	}
	else if(pot_type == SPEED_POT){
 800136e:	1cfb      	adds	r3, r7, #3
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d10f      	bne.n	8001396 <Pot_Check+0x7a>

		first_measurement_ptr = &first_speed_measurement;
 8001376:	4b68      	ldr	r3, [pc, #416]	@ (8001518 <Pot_Check+0x1fc>)
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_speed_measurement;
 800137a:	4b68      	ldr	r3, [pc, #416]	@ (800151c <Pot_Check+0x200>)
 800137c:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &speed_pot_adc_measurement_num;
 800137e:	4b68      	ldr	r3, [pc, #416]	@ (8001520 <Pot_Check+0x204>)
 8001380:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SPEED_ADC_RESULT_INDEX);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3302      	adds	r3, #2
 8001386:	61bb      	str	r3, [r7, #24]
		tolerance = SPEED_TOLERANCE;
 8001388:	2317      	movs	r3, #23
 800138a:	18fb      	adds	r3, r7, r3
 800138c:	2246      	movs	r2, #70	@ 0x46
 800138e:	701a      	strb	r2, [r3, #0]
		speed_fsm_ptr = &speed_fsm;
 8001390:	4b64      	ldr	r3, [pc, #400]	@ (8001524 <Pot_Check+0x208>)
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	e03a      	b.n	800140c <Pot_Check+0xf0>
	}
	else if(pot_type == DEPTH_POT){
 8001396:	1cfb      	adds	r3, r7, #3
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d10f      	bne.n	80013be <Pot_Check+0xa2>

		first_measurement_ptr = &first_depth_measurement;
 800139e:	4b62      	ldr	r3, [pc, #392]	@ (8001528 <Pot_Check+0x20c>)
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_depth_measurement;
 80013a2:	4b62      	ldr	r3, [pc, #392]	@ (800152c <Pot_Check+0x210>)
 80013a4:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &depth_pot_adc_measurement_num;
 80013a6:	4b62      	ldr	r3, [pc, #392]	@ (8001530 <Pot_Check+0x214>)
 80013a8:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DEPTH_ADC_RESULT_INDEX);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3304      	adds	r3, #4
 80013ae:	61bb      	str	r3, [r7, #24]
		tolerance = DEPTH_TOLERANCE;
 80013b0:	2317      	movs	r3, #23
 80013b2:	18fb      	adds	r3, r7, r3
 80013b4:	2246      	movs	r2, #70	@ 0x46
 80013b6:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &depth_fsm;
 80013b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001534 <Pot_Check+0x218>)
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	e026      	b.n	800140c <Pot_Check+0xf0>
	}
	else if(pot_type == SYMMETRY_POT){
 80013be:	1cfb      	adds	r3, r7, #3
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d10f      	bne.n	80013e6 <Pot_Check+0xca>

		first_measurement_ptr = &first_symmetry_measurement;
 80013c6:	4b5c      	ldr	r3, [pc, #368]	@ (8001538 <Pot_Check+0x21c>)
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_symmetry_measurement;
 80013ca:	4b5c      	ldr	r3, [pc, #368]	@ (800153c <Pot_Check+0x220>)
 80013cc:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &symmetry_pot_adc_measurement_num;
 80013ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001540 <Pot_Check+0x224>)
 80013d0:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SYMMETRY_ADC_RESULT_INDEX);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3306      	adds	r3, #6
 80013d6:	61bb      	str	r3, [r7, #24]
		tolerance = SYMMETRY_TOLERANCE;
 80013d8:	2317      	movs	r3, #23
 80013da:	18fb      	adds	r3, r7, r3
 80013dc:	2246      	movs	r2, #70	@ 0x46
 80013de:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &symmetry_fsm;
 80013e0:	4b58      	ldr	r3, [pc, #352]	@ (8001544 <Pot_Check+0x228>)
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	e012      	b.n	800140c <Pot_Check+0xf0>
	}
	else if(pot_type == PHASE_POT){
 80013e6:	1cfb      	adds	r3, r7, #3
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d10e      	bne.n	800140c <Pot_Check+0xf0>

		first_measurement_ptr = &first_phase_measurement;
 80013ee:	4b56      	ldr	r3, [pc, #344]	@ (8001548 <Pot_Check+0x22c>)
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_phase_measurement;
 80013f2:	4b56      	ldr	r3, [pc, #344]	@ (800154c <Pot_Check+0x230>)
 80013f4:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &phase_pot_adc_measurement_num;
 80013f6:	4b56      	ldr	r3, [pc, #344]	@ (8001550 <Pot_Check+0x234>)
 80013f8:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3308      	adds	r3, #8
 80013fe:	61bb      	str	r3, [r7, #24]
		tolerance = PHASE_TOLERANCE;
 8001400:	2317      	movs	r3, #23
 8001402:	18fb      	adds	r3, r7, r3
 8001404:	2246      	movs	r2, #70	@ 0x46
 8001406:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &phase_fsm;
 8001408:	4b52      	ldr	r3, [pc, #328]	@ (8001554 <Pot_Check+0x238>)
 800140a:	613b      	str	r3, [r7, #16]
	}

	if(*measurement_num_ptr == 0){
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10b      	bne.n	800142e <Pot_Check+0x112>

		*first_measurement_ptr = *((uint16_t*)measurement_ptr);
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	881a      	ldrh	r2, [r3, #0]
 800141a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141c:	801a      	strh	r2, [r3, #0]

			(*measurement_num_ptr)++;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	3301      	adds	r3, #1
 8001426:	b2da      	uxtb	r2, r3
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	e066      	b.n	80014fc <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 1){
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b01      	cmp	r3, #1
 8001436:	d10b      	bne.n	8001450 <Pot_Check+0x134>

		*second_measurement_ptr = *((uint16_t*)measurement_ptr);
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	881a      	ldrh	r2, [r3, #0]
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	801a      	strh	r2, [r3, #0]

		(*measurement_num_ptr)++;
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	3301      	adds	r3, #1
 8001448:	b2da      	uxtb	r2, r3
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	e055      	b.n	80014fc <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 2){
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d150      	bne.n	80014fc <Pot_Check+0x1e0>

		*measurement_num_ptr = 0;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]

		uint16_t diff = 0;
 8001460:	200a      	movs	r0, #10
 8001462:	183b      	adds	r3, r7, r0
 8001464:	2200      	movs	r2, #0
 8001466:	801a      	strh	r2, [r3, #0]

		if(*first_measurement_ptr > *second_measurement_ptr){
 8001468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146a:	881a      	ldrh	r2, [r3, #0]
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d907      	bls.n	8001484 <Pot_Check+0x168>

			diff = *first_measurement_ptr - *second_measurement_ptr;
 8001474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001476:	8819      	ldrh	r1, [r3, #0]
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	881a      	ldrh	r2, [r3, #0]
 800147c:	183b      	adds	r3, r7, r0
 800147e:	1a8a      	subs	r2, r1, r2
 8001480:	801a      	strh	r2, [r3, #0]
 8001482:	e00d      	b.n	80014a0 <Pot_Check+0x184>

		}
		else if(*second_measurement_ptr > *first_measurement_ptr){
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	881a      	ldrh	r2, [r3, #0]
 8001488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d907      	bls.n	80014a0 <Pot_Check+0x184>

			diff = *second_measurement_ptr - *first_measurement_ptr;
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	8819      	ldrh	r1, [r3, #0]
 8001494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001496:	881a      	ldrh	r2, [r3, #0]
 8001498:	230a      	movs	r3, #10
 800149a:	18fb      	adds	r3, r7, r3
 800149c:	1a8a      	subs	r2, r1, r2
 800149e:	801a      	strh	r2, [r3, #0]
		/*else{

			diff = 0
		}*/

		if(diff > tolerance){
 80014a0:	2317      	movs	r3, #23
 80014a2:	18fb      	adds	r3, r7, r3
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	220a      	movs	r2, #10
 80014aa:	18ba      	adds	r2, r7, r2
 80014ac:	8812      	ldrh	r2, [r2, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d924      	bls.n	80014fc <Pot_Check+0x1e0>

			if(normal_fsm_ptr != NULL){
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d008      	beq.n	80014ca <Pot_Check+0x1ae>

				normal_fsm_ptr->prev_state = normal_fsm_ptr->current_state;
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	705a      	strb	r2, [r3, #1]
				normal_fsm_ptr->current_state = MANUAL_MODE;
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
 80014c8:	e018      	b.n	80014fc <Pot_Check+0x1e0>

			}
			else if(speed_fsm_ptr != NULL){
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d015      	beq.n	80014fc <Pot_Check+0x1e0>

				speed_fsm_ptr->prev_state = speed_fsm_ptr->current_state;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	7812      	ldrb	r2, [r2, #0]
 80014d6:	705a      	strb	r2, [r3, #1]
				speed_fsm_ptr->current_state.shared_state = MANUAL_MODE;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80014de:	4b1e      	ldr	r3, [pc, #120]	@ (8001558 <Pot_Check+0x23c>)
 80014e0:	2120      	movs	r1, #32
 80014e2:	0018      	movs	r0, r3
 80014e4:	f004 faea 	bl	8005abc <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80014e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <Pot_Check+0x23c>)
 80014ea:	2140      	movs	r1, #64	@ 0x40
 80014ec:	0018      	movs	r0, r3
 80014ee:	f004 fae5 	bl	8005abc <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, First_Sync_Complete);
 80014f2:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <Pot_Check+0x23c>)
 80014f4:	2108      	movs	r1, #8
 80014f6:	0018      	movs	r0, r3
 80014f8:	f004 fae0 	bl	8005abc <Clear_Status_Bit>
			}
		}
	}

	return 1;
 80014fc:	2301      	movs	r3, #1
}
 80014fe:	0018      	movs	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	b00a      	add	sp, #40	@ 0x28
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	200004d4 	.word	0x200004d4
 800150c:	200004d6 	.word	0x200004d6
 8001510:	200004cd 	.word	0x200004cd
 8001514:	20000430 	.word	0x20000430
 8001518:	200004d8 	.word	0x200004d8
 800151c:	200004da 	.word	0x200004da
 8001520:	200004ce 	.word	0x200004ce
 8001524:	20000428 	.word	0x20000428
 8001528:	200004dc 	.word	0x200004dc
 800152c:	200004de 	.word	0x200004de
 8001530:	200004cf 	.word	0x200004cf
 8001534:	2000042c 	.word	0x2000042c
 8001538:	200004e0 	.word	0x200004e0
 800153c:	200004e2 	.word	0x200004e2
 8001540:	200004d0 	.word	0x200004d0
 8001544:	20000434 	.word	0x20000434
 8001548:	200004e4 	.word	0x200004e4
 800154c:	200004e6 	.word	0x200004e6
 8001550:	200004d1 	.word	0x200004d1
 8001554:	20000438 	.word	0x20000438
 8001558:	20000c24 	.word	0x20000c24

0800155c <Check_Tap_Tempo_Switch_State>:

uint8_t Check_Tap_Tempo_Switch_State(volatile struct Tap_Tempo_Switch_States *tap_tempo_switch_states_ptr){
 800155c:	b5b0      	push	{r4, r5, r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

	static uint8_t extend_rising_edge = 0;
	static uint8_t tap_tempo_switch_state_counter = TAP_TEMPO_SWITCH_CONFIDENCE_COUNT;

	uint8_t switch_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8001564:	250f      	movs	r5, #15
 8001566:	197c      	adds	r4, r7, r5
 8001568:	2380      	movs	r3, #128	@ 0x80
 800156a:	00da      	lsls	r2, r3, #3
 800156c:	23a0      	movs	r3, #160	@ 0xa0
 800156e:	05db      	lsls	r3, r3, #23
 8001570:	0011      	movs	r1, r2
 8001572:	0018      	movs	r0, r3
 8001574:	f006 fb22 	bl	8007bbc <HAL_GPIO_ReadPin>
 8001578:	0003      	movs	r3, r0
 800157a:	7023      	strb	r3, [r4, #0]

	if(switch_state == 0){
 800157c:	197b      	adds	r3, r7, r5
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d10a      	bne.n	800159a <Check_Tap_Tempo_Switch_State+0x3e>

		if(tap_tempo_switch_state_counter != 0){
 8001584:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <Check_Tap_Tempo_Switch_State+0x98>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d01e      	beq.n	80015ca <Check_Tap_Tempo_Switch_State+0x6e>

			tap_tempo_switch_state_counter--;
 800158c:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <Check_Tap_Tempo_Switch_State+0x98>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	3b01      	subs	r3, #1
 8001592:	b2da      	uxtb	r2, r3
 8001594:	4b17      	ldr	r3, [pc, #92]	@ (80015f4 <Check_Tap_Tempo_Switch_State+0x98>)
 8001596:	701a      	strb	r2, [r3, #0]
 8001598:	e017      	b.n	80015ca <Check_Tap_Tempo_Switch_State+0x6e>
		}
	}
	else{

		if(tap_tempo_switch_state_counter != TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 800159a:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <Check_Tap_Tempo_Switch_State+0x98>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b0e      	cmp	r3, #14
 80015a0:	d013      	beq.n	80015ca <Check_Tap_Tempo_Switch_State+0x6e>

			if(extend_rising_edge == COUNT_TO_DELAY_RISING_TAP_TEMPO_EDGE){
 80015a2:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <Check_Tap_Tempo_Switch_State+0x9c>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d109      	bne.n	80015be <Check_Tap_Tempo_Switch_State+0x62>

				tap_tempo_switch_state_counter++;
 80015aa:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <Check_Tap_Tempo_Switch_State+0x98>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	3301      	adds	r3, #1
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <Check_Tap_Tempo_Switch_State+0x98>)
 80015b4:	701a      	strb	r2, [r3, #0]
				extend_rising_edge = 0;
 80015b6:	4b10      	ldr	r3, [pc, #64]	@ (80015f8 <Check_Tap_Tempo_Switch_State+0x9c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
 80015bc:	e005      	b.n	80015ca <Check_Tap_Tempo_Switch_State+0x6e>
			}
			else{
				extend_rising_edge++;
 80015be:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <Check_Tap_Tempo_Switch_State+0x9c>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <Check_Tap_Tempo_Switch_State+0x9c>)
 80015c8:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(tap_tempo_switch_state_counter == 0){
 80015ca:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <Check_Tap_Tempo_Switch_State+0x98>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d103      	bne.n	80015da <Check_Tap_Tempo_Switch_State+0x7e>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	e006      	b.n	80015e8 <Check_Tap_Tempo_Switch_State+0x8c>
	}
	else if(tap_tempo_switch_state_counter == TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <Check_Tap_Tempo_Switch_State+0x98>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b0e      	cmp	r3, #14
 80015e0:	d102      	bne.n	80015e8 <Check_Tap_Tempo_Switch_State+0x8c>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = NOT_DEPRESSED;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 80015e8:	2301      	movs	r3, #1
}
 80015ea:	0018      	movs	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b004      	add	sp, #16
 80015f0:	bdb0      	pop	{r4, r5, r7, pc}
 80015f2:	46c0      	nop			@ (mov r8, r8)
 80015f4:	2000001d 	.word	0x2000001d
 80015f8:	200004e8 	.word	0x200004e8

080015fc <SystemClock_Config>:

LPTIM_HandleTypeDef hlptim1;

//FUNCTIONS
void SystemClock_Config(void)
{
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b093      	sub	sp, #76	@ 0x4c
 8001600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001602:	2410      	movs	r4, #16
 8001604:	193b      	adds	r3, r7, r4
 8001606:	0018      	movs	r0, r3
 8001608:	2338      	movs	r3, #56	@ 0x38
 800160a:	001a      	movs	r2, r3
 800160c:	2100      	movs	r1, #0
 800160e:	f00b fc67 	bl	800cee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001612:	003b      	movs	r3, r7
 8001614:	0018      	movs	r0, r3
 8001616:	2310      	movs	r3, #16
 8001618:	001a      	movs	r2, r3
 800161a:	2100      	movs	r1, #0
 800161c:	f00b fc60 	bl	800cee0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001620:	2380      	movs	r3, #128	@ 0x80
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	0018      	movs	r0, r3
 8001626:	f006 ff3b 	bl	80084a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800162a:	193b      	adds	r3, r7, r4
 800162c:	2202      	movs	r2, #2
 800162e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001630:	193b      	adds	r3, r7, r4
 8001632:	2280      	movs	r2, #128	@ 0x80
 8001634:	0052      	lsls	r2, r2, #1
 8001636:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001638:	0021      	movs	r1, r4
 800163a:	187b      	adds	r3, r7, r1
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001640:	187b      	adds	r3, r7, r1
 8001642:	2240      	movs	r2, #64	@ 0x40
 8001644:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001646:	187b      	adds	r3, r7, r1
 8001648:	2202      	movs	r2, #2
 800164a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800164c:	187b      	adds	r3, r7, r1
 800164e:	2202      	movs	r2, #2
 8001650:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001652:	187b      	adds	r3, r7, r1
 8001654:	2200      	movs	r2, #0
 8001656:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001658:	187b      	adds	r3, r7, r1
 800165a:	2208      	movs	r2, #8
 800165c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800165e:	187b      	adds	r3, r7, r1
 8001660:	2280      	movs	r2, #128	@ 0x80
 8001662:	0292      	lsls	r2, r2, #10
 8001664:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001666:	187b      	adds	r3, r7, r1
 8001668:	22c0      	movs	r2, #192	@ 0xc0
 800166a:	04d2      	lsls	r2, r2, #19
 800166c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800166e:	187b      	adds	r3, r7, r1
 8001670:	2280      	movs	r2, #128	@ 0x80
 8001672:	0592      	lsls	r2, r2, #22
 8001674:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001676:	187b      	adds	r3, r7, r1
 8001678:	0018      	movs	r0, r3
 800167a:	f006 ff5d 	bl	8008538 <HAL_RCC_OscConfig>
 800167e:	1e03      	subs	r3, r0, #0
 8001680:	d001      	beq.n	8001686 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001682:	f000 fdb1 	bl	80021e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001686:	003b      	movs	r3, r7
 8001688:	2207      	movs	r2, #7
 800168a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800168c:	003b      	movs	r3, r7
 800168e:	2202      	movs	r2, #2
 8001690:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001692:	003b      	movs	r3, r7
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001698:	003b      	movs	r3, r7
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800169e:	003b      	movs	r3, r7
 80016a0:	2102      	movs	r1, #2
 80016a2:	0018      	movs	r0, r3
 80016a4:	f007 fa62 	bl	8008b6c <HAL_RCC_ClockConfig>
 80016a8:	1e03      	subs	r3, r0, #0
 80016aa:	d001      	beq.n	80016b0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80016ac:	f000 fd9c 	bl	80021e8 <Error_Handler>
  }
}
 80016b0:	46c0      	nop			@ (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b013      	add	sp, #76	@ 0x4c
 80016b6:	bd90      	pop	{r4, r7, pc}

080016b8 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	0018      	movs	r0, r3
 80016c2:	230c      	movs	r3, #12
 80016c4:	001a      	movs	r2, r3
 80016c6:	2100      	movs	r1, #0
 80016c8:	f00b fc0a 	bl	800cee0 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016cc:	4b54      	ldr	r3, [pc, #336]	@ (8001820 <MX_ADC1_Init+0x168>)
 80016ce:	4a55      	ldr	r2, [pc, #340]	@ (8001824 <MX_ADC1_Init+0x16c>)
 80016d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016d2:	4b53      	ldr	r3, [pc, #332]	@ (8001820 <MX_ADC1_Init+0x168>)
 80016d4:	2280      	movs	r2, #128	@ 0x80
 80016d6:	05d2      	lsls	r2, r2, #23
 80016d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016da:	4b51      	ldr	r3, [pc, #324]	@ (8001820 <MX_ADC1_Init+0x168>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001820 <MX_ADC1_Init+0x168>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001820 <MX_ADC1_Init+0x168>)
 80016e8:	2280      	movs	r2, #128	@ 0x80
 80016ea:	0392      	lsls	r2, r2, #14
 80016ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80016ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001820 <MX_ADC1_Init+0x168>)
 80016f0:	2208      	movs	r2, #8
 80016f2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001820 <MX_ADC1_Init+0x168>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80016fa:	4b49      	ldr	r3, [pc, #292]	@ (8001820 <MX_ADC1_Init+0x168>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001700:	4b47      	ldr	r3, [pc, #284]	@ (8001820 <MX_ADC1_Init+0x168>)
 8001702:	2200      	movs	r2, #0
 8001704:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 8001706:	4b46      	ldr	r3, [pc, #280]	@ (8001820 <MX_ADC1_Init+0x168>)
 8001708:	2205      	movs	r2, #5
 800170a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800170c:	4b44      	ldr	r3, [pc, #272]	@ (8001820 <MX_ADC1_Init+0x168>)
 800170e:	2220      	movs	r2, #32
 8001710:	2100      	movs	r1, #0
 8001712:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001714:	4b42      	ldr	r3, [pc, #264]	@ (8001820 <MX_ADC1_Init+0x168>)
 8001716:	2200      	movs	r2, #0
 8001718:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800171a:	4b41      	ldr	r3, [pc, #260]	@ (8001820 <MX_ADC1_Init+0x168>)
 800171c:	2200      	movs	r2, #0
 800171e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001720:	4b3f      	ldr	r3, [pc, #252]	@ (8001820 <MX_ADC1_Init+0x168>)
 8001722:	222c      	movs	r2, #44	@ 0x2c
 8001724:	2100      	movs	r1, #0
 8001726:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001728:	4b3d      	ldr	r3, [pc, #244]	@ (8001820 <MX_ADC1_Init+0x168>)
 800172a:	2200      	movs	r2, #0
 800172c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800172e:	4b3c      	ldr	r3, [pc, #240]	@ (8001820 <MX_ADC1_Init+0x168>)
 8001730:	2200      	movs	r2, #0
 8001732:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001734:	4b3a      	ldr	r3, [pc, #232]	@ (8001820 <MX_ADC1_Init+0x168>)
 8001736:	2200      	movs	r2, #0
 8001738:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800173a:	4b39      	ldr	r3, [pc, #228]	@ (8001820 <MX_ADC1_Init+0x168>)
 800173c:	223c      	movs	r2, #60	@ 0x3c
 800173e:	2100      	movs	r1, #0
 8001740:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001742:	4b37      	ldr	r3, [pc, #220]	@ (8001820 <MX_ADC1_Init+0x168>)
 8001744:	2200      	movs	r2, #0
 8001746:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001748:	4b35      	ldr	r3, [pc, #212]	@ (8001820 <MX_ADC1_Init+0x168>)
 800174a:	0018      	movs	r0, r3
 800174c:	f004 fbe4 	bl	8005f18 <HAL_ADC_Init>
 8001750:	1e03      	subs	r3, r0, #0
 8001752:	d001      	beq.n	8001758 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001754:	f000 fd48 	bl	80021e8 <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	2200      	movs	r2, #0
 8001762:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800176a:	1d3a      	adds	r2, r7, #4
 800176c:	4b2c      	ldr	r3, [pc, #176]	@ (8001820 <MX_ADC1_Init+0x168>)
 800176e:	0011      	movs	r1, r2
 8001770:	0018      	movs	r0, r3
 8001772:	f004 ff55 	bl	8006620 <HAL_ADC_ConfigChannel>
 8001776:	1e03      	subs	r3, r0, #0
 8001778:	d001      	beq.n	800177e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800177a:	f000 fd35 	bl	80021e8 <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	4a29      	ldr	r2, [pc, #164]	@ (8001828 <MX_ADC1_Init+0x170>)
 8001782:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	2204      	movs	r2, #4
 8001788:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001790:	1d3a      	adds	r2, r7, #4
 8001792:	4b23      	ldr	r3, [pc, #140]	@ (8001820 <MX_ADC1_Init+0x168>)
 8001794:	0011      	movs	r1, r2
 8001796:	0018      	movs	r0, r3
 8001798:	f004 ff42 	bl	8006620 <HAL_ADC_ConfigChannel>
 800179c:	1e03      	subs	r3, r0, #0
 800179e:	d001      	beq.n	80017a4 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80017a0:	f000 fd22 	bl	80021e8 <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	4a21      	ldr	r2, [pc, #132]	@ (800182c <MX_ADC1_Init+0x174>)
 80017a8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	2208      	movs	r2, #8
 80017ae:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017b6:	1d3a      	adds	r2, r7, #4
 80017b8:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <MX_ADC1_Init+0x168>)
 80017ba:	0011      	movs	r1, r2
 80017bc:	0018      	movs	r0, r3
 80017be:	f004 ff2f 	bl	8006620 <HAL_ADC_ConfigChannel>
 80017c2:	1e03      	subs	r3, r0, #0
 80017c4:	d001      	beq.n	80017ca <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 80017c6:	f000 fd0f 	bl	80021e8 <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	4a18      	ldr	r2, [pc, #96]	@ (8001830 <MX_ADC1_Init+0x178>)
 80017ce:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	220c      	movs	r2, #12
 80017d4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017dc:	1d3a      	adds	r2, r7, #4
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <MX_ADC1_Init+0x168>)
 80017e0:	0011      	movs	r1, r2
 80017e2:	0018      	movs	r0, r3
 80017e4:	f004 ff1c 	bl	8006620 <HAL_ADC_ConfigChannel>
 80017e8:	1e03      	subs	r3, r0, #0
 80017ea:	d001      	beq.n	80017f0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80017ec:	f000 fcfc 	bl	80021e8 <Error_Handler>
  }

  /** Configure Channel 6
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	4a10      	ldr	r2, [pc, #64]	@ (8001834 <MX_ADC1_Init+0x17c>)
 80017f4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	2210      	movs	r2, #16
 80017fa:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001802:	1d3a      	adds	r2, r7, #4
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <MX_ADC1_Init+0x168>)
 8001806:	0011      	movs	r1, r2
 8001808:	0018      	movs	r0, r3
 800180a:	f004 ff09 	bl	8006620 <HAL_ADC_ConfigChannel>
 800180e:	1e03      	subs	r3, r0, #0
 8001810:	d001      	beq.n	8001816 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8001812:	f000 fce9 	bl	80021e8 <Error_Handler>
  }
}
 8001816:	46c0      	nop			@ (mov r8, r8)
 8001818:	46bd      	mov	sp, r7
 800181a:	b004      	add	sp, #16
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	200004ec 	.word	0x200004ec
 8001824:	40012400 	.word	0x40012400
 8001828:	04000002 	.word	0x04000002
 800182c:	10000010 	.word	0x10000010
 8001830:	14000020 	.word	0x14000020
 8001834:	18000040 	.word	0x18000040

08001838 <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b094      	sub	sp, #80	@ 0x50
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800183e:	2334      	movs	r3, #52	@ 0x34
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	0018      	movs	r0, r3
 8001844:	231c      	movs	r3, #28
 8001846:	001a      	movs	r2, r3
 8001848:	2100      	movs	r1, #0
 800184a:	f00b fb49 	bl	800cee0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800184e:	003b      	movs	r3, r7
 8001850:	0018      	movs	r0, r3
 8001852:	2334      	movs	r3, #52	@ 0x34
 8001854:	001a      	movs	r2, r3
 8001856:	2100      	movs	r1, #0
 8001858:	f00b fb42 	bl	800cee0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800185c:	4b3a      	ldr	r3, [pc, #232]	@ (8001948 <MX_TIM16_Init+0x110>)
 800185e:	4a3b      	ldr	r2, [pc, #236]	@ (800194c <MX_TIM16_Init+0x114>)
 8001860:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001862:	4b39      	ldr	r3, [pc, #228]	@ (8001948 <MX_TIM16_Init+0x110>)
 8001864:	2200      	movs	r2, #0
 8001866:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001868:	4b37      	ldr	r3, [pc, #220]	@ (8001948 <MX_TIM16_Init+0x110>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 800186e:	4b36      	ldr	r3, [pc, #216]	@ (8001948 <MX_TIM16_Init+0x110>)
 8001870:	22ff      	movs	r2, #255	@ 0xff
 8001872:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001874:	4b34      	ldr	r3, [pc, #208]	@ (8001948 <MX_TIM16_Init+0x110>)
 8001876:	2280      	movs	r2, #128	@ 0x80
 8001878:	0092      	lsls	r2, r2, #2
 800187a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800187c:	4b32      	ldr	r3, [pc, #200]	@ (8001948 <MX_TIM16_Init+0x110>)
 800187e:	2200      	movs	r2, #0
 8001880:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001882:	4b31      	ldr	r3, [pc, #196]	@ (8001948 <MX_TIM16_Init+0x110>)
 8001884:	2280      	movs	r2, #128	@ 0x80
 8001886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001888:	4b2f      	ldr	r3, [pc, #188]	@ (8001948 <MX_TIM16_Init+0x110>)
 800188a:	0018      	movs	r0, r3
 800188c:	f007 fc92 	bl	80091b4 <HAL_TIM_Base_Init>
 8001890:	1e03      	subs	r3, r0, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8001894:	f000 fca8 	bl	80021e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001898:	4b2b      	ldr	r3, [pc, #172]	@ (8001948 <MX_TIM16_Init+0x110>)
 800189a:	0018      	movs	r0, r3
 800189c:	f007 fd90 	bl	80093c0 <HAL_TIM_OC_Init>
 80018a0:	1e03      	subs	r3, r0, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 80018a4:	f000 fca0 	bl	80021e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80018a8:	2134      	movs	r1, #52	@ 0x34
 80018aa:	187b      	adds	r3, r7, r1
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 80018b0:	187b      	adds	r3, r7, r1
 80018b2:	22ff      	movs	r2, #255	@ 0xff
 80018b4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b6:	187b      	adds	r3, r7, r1
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018bc:	187b      	adds	r3, r7, r1
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c2:	187b      	adds	r3, r7, r1
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	2200      	movs	r2, #0
 80018cc:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ce:	187b      	adds	r3, r7, r1
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d4:	1879      	adds	r1, r7, r1
 80018d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001948 <MX_TIM16_Init+0x110>)
 80018d8:	2200      	movs	r2, #0
 80018da:	0018      	movs	r0, r3
 80018dc:	f008 fbe4 	bl	800a0a8 <HAL_TIM_OC_ConfigChannel>
 80018e0:	1e03      	subs	r3, r0, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 80018e4:	f000 fc80 	bl	80021e8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 80018e8:	4b17      	ldr	r3, [pc, #92]	@ (8001948 <MX_TIM16_Init+0x110>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	699a      	ldr	r2, [r3, #24]
 80018ee:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <MX_TIM16_Init+0x110>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2108      	movs	r1, #8
 80018f4:	438a      	bics	r2, r1
 80018f6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018f8:	003b      	movs	r3, r7
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018fe:	003b      	movs	r3, r7
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001904:	003b      	movs	r3, r7
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800190a:	003b      	movs	r3, r7
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001910:	003b      	movs	r3, r7
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001916:	003b      	movs	r3, r7
 8001918:	2280      	movs	r2, #128	@ 0x80
 800191a:	0192      	lsls	r2, r2, #6
 800191c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800191e:	003b      	movs	r3, r7
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001924:	003b      	movs	r3, r7
 8001926:	2200      	movs	r2, #0
 8001928:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800192a:	003a      	movs	r2, r7
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <MX_TIM16_Init+0x110>)
 800192e:	0011      	movs	r1, r2
 8001930:	0018      	movs	r0, r3
 8001932:	f009 fddf 	bl	800b4f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001936:	1e03      	subs	r3, r0, #0
 8001938:	d001      	beq.n	800193e <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 800193a:	f000 fc55 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 800193e:	46c0      	nop			@ (mov r8, r8)
 8001940:	46bd      	mov	sp, r7
 8001942:	b014      	add	sp, #80	@ 0x50
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			@ (mov r8, r8)
 8001948:	20000748 	.word	0x20000748
 800194c:	40014400 	.word	0x40014400

08001950 <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08c      	sub	sp, #48	@ 0x30
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001956:	2320      	movs	r3, #32
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	0018      	movs	r0, r3
 800195c:	2310      	movs	r3, #16
 800195e:	001a      	movs	r2, r3
 8001960:	2100      	movs	r1, #0
 8001962:	f00b fabd 	bl	800cee0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001966:	2314      	movs	r3, #20
 8001968:	18fb      	adds	r3, r7, r3
 800196a:	0018      	movs	r0, r3
 800196c:	230c      	movs	r3, #12
 800196e:	001a      	movs	r2, r3
 8001970:	2100      	movs	r1, #0
 8001972:	f00b fab5 	bl	800cee0 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	0018      	movs	r0, r3
 800197a:	2310      	movs	r3, #16
 800197c:	001a      	movs	r2, r3
 800197e:	2100      	movs	r1, #0
 8001980:	f00b faae 	bl	800cee0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001984:	4b2e      	ldr	r3, [pc, #184]	@ (8001a40 <MX_TIM2_Init+0xf0>)
 8001986:	2280      	movs	r2, #128	@ 0x80
 8001988:	05d2      	lsls	r2, r2, #23
 800198a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 800198c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a40 <MX_TIM2_Init+0xf0>)
 800198e:	223f      	movs	r2, #63	@ 0x3f
 8001990:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001992:	4b2b      	ldr	r3, [pc, #172]	@ (8001a40 <MX_TIM2_Init+0xf0>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2097152 - 1;
 8001998:	4b29      	ldr	r3, [pc, #164]	@ (8001a40 <MX_TIM2_Init+0xf0>)
 800199a:	4a2a      	ldr	r2, [pc, #168]	@ (8001a44 <MX_TIM2_Init+0xf4>)
 800199c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800199e:	4b28      	ldr	r3, [pc, #160]	@ (8001a40 <MX_TIM2_Init+0xf0>)
 80019a0:	2280      	movs	r2, #128	@ 0x80
 80019a2:	0092      	lsls	r2, r2, #2
 80019a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019a6:	4b26      	ldr	r3, [pc, #152]	@ (8001a40 <MX_TIM2_Init+0xf0>)
 80019a8:	2280      	movs	r2, #128	@ 0x80
 80019aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019ac:	4b24      	ldr	r3, [pc, #144]	@ (8001a40 <MX_TIM2_Init+0xf0>)
 80019ae:	0018      	movs	r0, r3
 80019b0:	f007 fc00 	bl	80091b4 <HAL_TIM_Base_Init>
 80019b4:	1e03      	subs	r3, r0, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80019b8:	f000 fc16 	bl	80021e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019bc:	2120      	movs	r1, #32
 80019be:	187b      	adds	r3, r7, r1
 80019c0:	2280      	movs	r2, #128	@ 0x80
 80019c2:	0152      	lsls	r2, r2, #5
 80019c4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019c6:	187a      	adds	r2, r7, r1
 80019c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a40 <MX_TIM2_Init+0xf0>)
 80019ca:	0011      	movs	r1, r2
 80019cc:	0018      	movs	r0, r3
 80019ce:	f008 fd6f 	bl	800a4b0 <HAL_TIM_ConfigClockSource>
 80019d2:	1e03      	subs	r3, r0, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80019d6:	f000 fc07 	bl	80021e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80019da:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <MX_TIM2_Init+0xf0>)
 80019dc:	0018      	movs	r0, r3
 80019de:	f008 f89b 	bl	8009b18 <HAL_TIM_IC_Init>
 80019e2:	1e03      	subs	r3, r0, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80019e6:	f000 fbff 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ea:	2114      	movs	r1, #20
 80019ec:	187b      	adds	r3, r7, r1
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f2:	187b      	adds	r3, r7, r1
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019f8:	187a      	adds	r2, r7, r1
 80019fa:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <MX_TIM2_Init+0xf0>)
 80019fc:	0011      	movs	r1, r2
 80019fe:	0018      	movs	r0, r3
 8001a00:	f009 fd10 	bl	800b424 <HAL_TIMEx_MasterConfigSynchronization>
 8001a04:	1e03      	subs	r3, r0, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001a08:	f000 fbee 	bl	80021e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	2202      	movs	r2, #2
 8001a10:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2201      	movs	r2, #1
 8001a16:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	220f      	movs	r2, #15
 8001a22:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a24:	1d39      	adds	r1, r7, #4
 8001a26:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <MX_TIM2_Init+0xf0>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f008 fb9c 	bl	800a168 <HAL_TIM_IC_ConfigChannel>
 8001a30:	1e03      	subs	r3, r0, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001a34:	f000 fbd8 	bl	80021e8 <Error_Handler>

  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a38:	46c0      	nop			@ (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b00c      	add	sp, #48	@ 0x30
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000804 	.word	0x20000804
 8001a44:	001fffff 	.word	0x001fffff

08001a48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08e      	sub	sp, #56	@ 0x38
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4e:	2328      	movs	r3, #40	@ 0x28
 8001a50:	18fb      	adds	r3, r7, r3
 8001a52:	0018      	movs	r0, r3
 8001a54:	2310      	movs	r3, #16
 8001a56:	001a      	movs	r2, r3
 8001a58:	2100      	movs	r1, #0
 8001a5a:	f00b fa41 	bl	800cee0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a5e:	231c      	movs	r3, #28
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	0018      	movs	r0, r3
 8001a64:	230c      	movs	r3, #12
 8001a66:	001a      	movs	r2, r3
 8001a68:	2100      	movs	r1, #0
 8001a6a:	f00b fa39 	bl	800cee0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a6e:	003b      	movs	r3, r7
 8001a70:	0018      	movs	r0, r3
 8001a72:	231c      	movs	r3, #28
 8001a74:	001a      	movs	r2, r3
 8001a76:	2100      	movs	r1, #0
 8001a78:	f00b fa32 	bl	800cee0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a7c:	4b32      	ldr	r3, [pc, #200]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001a7e:	4a33      	ldr	r2, [pc, #204]	@ (8001b4c <MX_TIM3_Init+0x104>)
 8001a80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 8001a82:	4b31      	ldr	r3, [pc, #196]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001a84:	4a32      	ldr	r2, [pc, #200]	@ (8001b50 <MX_TIM3_Init+0x108>)
 8001a86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	4b2f      	ldr	r3, [pc, #188]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8001a8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001a90:	4a30      	ldr	r2, [pc, #192]	@ (8001b54 <MX_TIM3_Init+0x10c>)
 8001a92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001a94:	4b2c      	ldr	r3, [pc, #176]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001a96:	2280      	movs	r2, #128	@ 0x80
 8001a98:	0092      	lsls	r2, r2, #2
 8001a9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001a9e:	2280      	movs	r2, #128	@ 0x80
 8001aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aa2:	4b29      	ldr	r3, [pc, #164]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f007 fb85 	bl	80091b4 <HAL_TIM_Base_Init>
 8001aaa:	1e03      	subs	r3, r0, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001aae:	f000 fb9b 	bl	80021e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab2:	2128      	movs	r1, #40	@ 0x28
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	2280      	movs	r2, #128	@ 0x80
 8001ab8:	0152      	lsls	r2, r2, #5
 8001aba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001abc:	187a      	adds	r2, r7, r1
 8001abe:	4b22      	ldr	r3, [pc, #136]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001ac0:	0011      	movs	r1, r2
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f008 fcf4 	bl	800a4b0 <HAL_TIM_ConfigClockSource>
 8001ac8:	1e03      	subs	r3, r0, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001acc:	f000 fb8c 	bl	80021e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f007 fc74 	bl	80093c0 <HAL_TIM_OC_Init>
 8001ad8:	1e03      	subs	r3, r0, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001adc:	f000 fb84 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae0:	211c      	movs	r1, #28
 8001ae2:	187b      	adds	r3, r7, r1
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae8:	187b      	adds	r3, r7, r1
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aee:	187a      	adds	r2, r7, r1
 8001af0:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001af2:	0011      	movs	r1, r2
 8001af4:	0018      	movs	r0, r3
 8001af6:	f009 fc95 	bl	800b424 <HAL_TIMEx_MasterConfigSynchronization>
 8001afa:	1e03      	subs	r3, r0, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001afe:	f000 fb73 	bl	80021e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b02:	003b      	movs	r3, r7
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001b08:	003b      	movs	r3, r7
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b0e:	003b      	movs	r3, r7
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b14:	003b      	movs	r3, r7
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b1a:	0039      	movs	r1, r7
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	0018      	movs	r0, r3
 8001b22:	f008 fac1 	bl	800a0a8 <HAL_TIM_OC_ConfigChannel>
 8001b26:	1e03      	subs	r3, r0, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001b2a:	f000 fb5d 	bl	80021e8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001b2e:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	699a      	ldr	r2, [r3, #24]
 8001b34:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <MX_TIM3_Init+0x100>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2108      	movs	r1, #8
 8001b3a:	438a      	bics	r2, r1
 8001b3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b3e:	46c0      	nop			@ (mov r8, r8)
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b00e      	add	sp, #56	@ 0x38
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			@ (mov r8, r8)
 8001b48:	200008c0 	.word	0x200008c0
 8001b4c:	40000400 	.word	0x40000400
 8001b50:	00007fff 	.word	0x00007fff
 8001b54:	00000fff 	.word	0x00000fff

08001b58 <MX_TIM1_Init>:

void MX_TIM1_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b09c      	sub	sp, #112	@ 0x70
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b5e:	2360      	movs	r3, #96	@ 0x60
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	0018      	movs	r0, r3
 8001b64:	2310      	movs	r3, #16
 8001b66:	001a      	movs	r2, r3
 8001b68:	2100      	movs	r1, #0
 8001b6a:	f00b f9b9 	bl	800cee0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6e:	2354      	movs	r3, #84	@ 0x54
 8001b70:	18fb      	adds	r3, r7, r3
 8001b72:	0018      	movs	r0, r3
 8001b74:	230c      	movs	r3, #12
 8001b76:	001a      	movs	r2, r3
 8001b78:	2100      	movs	r1, #0
 8001b7a:	f00b f9b1 	bl	800cee0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b7e:	2338      	movs	r3, #56	@ 0x38
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	0018      	movs	r0, r3
 8001b84:	231c      	movs	r3, #28
 8001b86:	001a      	movs	r2, r3
 8001b88:	2100      	movs	r1, #0
 8001b8a:	f00b f9a9 	bl	800cee0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	0018      	movs	r0, r3
 8001b92:	2334      	movs	r3, #52	@ 0x34
 8001b94:	001a      	movs	r2, r3
 8001b96:	2100      	movs	r1, #0
 8001b98:	f00b f9a2 	bl	800cee0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b9c:	4b5f      	ldr	r3, [pc, #380]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001b9e:	4a60      	ldr	r2, [pc, #384]	@ (8001d20 <MX_TIM1_Init+0x1c8>)
 8001ba0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ba2:	4b5e      	ldr	r3, [pc, #376]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba8:	4b5c      	ldr	r3, [pc, #368]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024 - 1;
 8001bae:	4b5b      	ldr	r3, [pc, #364]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001bb0:	4a5c      	ldr	r2, [pc, #368]	@ (8001d24 <MX_TIM1_Init+0x1cc>)
 8001bb2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001bb4:	4b59      	ldr	r3, [pc, #356]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001bb6:	2280      	movs	r2, #128	@ 0x80
 8001bb8:	0052      	lsls	r2, r2, #1
 8001bba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bbc:	4b57      	ldr	r3, [pc, #348]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bc2:	4b56      	ldr	r3, [pc, #344]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001bc4:	2280      	movs	r2, #128	@ 0x80
 8001bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bc8:	4b54      	ldr	r3, [pc, #336]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f007 faf2 	bl	80091b4 <HAL_TIM_Base_Init>
 8001bd0:	1e03      	subs	r3, r0, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001bd4:	f000 fb08 	bl	80021e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd8:	2160      	movs	r1, #96	@ 0x60
 8001bda:	187b      	adds	r3, r7, r1
 8001bdc:	2280      	movs	r2, #128	@ 0x80
 8001bde:	0152      	lsls	r2, r2, #5
 8001be0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001be2:	187a      	adds	r2, r7, r1
 8001be4:	4b4d      	ldr	r3, [pc, #308]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001be6:	0011      	movs	r1, r2
 8001be8:	0018      	movs	r0, r3
 8001bea:	f008 fc61 	bl	800a4b0 <HAL_TIM_ConfigClockSource>
 8001bee:	1e03      	subs	r3, r0, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001bf2:	f000 faf9 	bl	80021e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bf6:	4b49      	ldr	r3, [pc, #292]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f007 fe41 	bl	8009880 <HAL_TIM_PWM_Init>
 8001bfe:	1e03      	subs	r3, r0, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8001c02:	f000 faf1 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c06:	2154      	movs	r1, #84	@ 0x54
 8001c08:	187b      	adds	r3, r7, r1
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c0e:	187b      	adds	r3, r7, r1
 8001c10:	2200      	movs	r2, #0
 8001c12:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c14:	187b      	adds	r3, r7, r1
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c1a:	187a      	adds	r2, r7, r1
 8001c1c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001c1e:	0011      	movs	r1, r2
 8001c20:	0018      	movs	r0, r3
 8001c22:	f009 fbff 	bl	800b424 <HAL_TIMEx_MasterConfigSynchronization>
 8001c26:	1e03      	subs	r3, r0, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001c2a:	f000 fadd 	bl	80021e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c2e:	2138      	movs	r1, #56	@ 0x38
 8001c30:	187b      	adds	r3, r7, r1
 8001c32:	2260      	movs	r2, #96	@ 0x60
 8001c34:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001c36:	187b      	adds	r3, r7, r1
 8001c38:	2200      	movs	r2, #0
 8001c3a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c3c:	187b      	adds	r3, r7, r1
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c42:	187b      	adds	r3, r7, r1
 8001c44:	2200      	movs	r2, #0
 8001c46:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c48:	187b      	adds	r3, r7, r1
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c4e:	187b      	adds	r3, r7, r1
 8001c50:	2200      	movs	r2, #0
 8001c52:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	2200      	movs	r2, #0
 8001c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c5a:	1879      	adds	r1, r7, r1
 8001c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001c5e:	2204      	movs	r2, #4
 8001c60:	0018      	movs	r0, r3
 8001c62:	f008 fb25 	bl	800a2b0 <HAL_TIM_PWM_ConfigChannel>
 8001c66:	1e03      	subs	r3, r0, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001c6a:	f000 fabd 	bl	80021e8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8001c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	699a      	ldr	r2, [r3, #24]
 8001c74:	4b29      	ldr	r3, [pc, #164]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	492b      	ldr	r1, [pc, #172]	@ (8001d28 <MX_TIM1_Init+0x1d0>)
 8001c7a:	400a      	ands	r2, r1
 8001c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c7e:	2338      	movs	r3, #56	@ 0x38
 8001c80:	18f9      	adds	r1, r7, r3
 8001c82:	4b26      	ldr	r3, [pc, #152]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001c84:	220c      	movs	r2, #12
 8001c86:	0018      	movs	r0, r3
 8001c88:	f008 fb12 	bl	800a2b0 <HAL_TIM_PWM_ConfigChannel>
 8001c8c:	1e03      	subs	r3, r0, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001c90:	f000 faaa 	bl	80021e8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8001c94:	4b21      	ldr	r3, [pc, #132]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	69da      	ldr	r2, [r3, #28]
 8001c9a:	4b20      	ldr	r3, [pc, #128]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4922      	ldr	r1, [pc, #136]	@ (8001d28 <MX_TIM1_Init+0x1d0>)
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	2200      	movs	r2, #0
 8001cae:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	2200      	movs	r2, #0
 8001cba:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	2280      	movs	r2, #128	@ 0x80
 8001cc6:	0192      	lsls	r2, r2, #6
 8001cc8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	2200      	movs	r2, #0
 8001cda:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	2280      	movs	r2, #128	@ 0x80
 8001ce0:	0492      	lsls	r2, r2, #18
 8001ce2:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	2200      	movs	r2, #0
 8001cee:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cf6:	1d3a      	adds	r2, r7, #4
 8001cf8:	4b08      	ldr	r3, [pc, #32]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001cfa:	0011      	movs	r1, r2
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f009 fbf9 	bl	800b4f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d02:	1e03      	subs	r3, r0, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM1_Init+0x1b2>
  {
    Error_Handler();
 8001d06:	f000 fa6f 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d0a:	4b04      	ldr	r3, [pc, #16]	@ (8001d1c <MX_TIM1_Init+0x1c4>)
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f003 f85b 	bl	8004dc8 <HAL_TIM_MspPostInit>

}
 8001d12:	46c0      	nop			@ (mov r8, r8)
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b01c      	add	sp, #112	@ 0x70
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	46c0      	nop			@ (mov r8, r8)
 8001d1c:	2000097c 	.word	0x2000097c
 8001d20:	40012c00 	.word	0x40012c00
 8001d24:	000003ff 	.word	0x000003ff
 8001d28:	fffff7ff 	.word	0xfffff7ff

08001d2c <MX_TIM17_Init>:

void MX_TIM17_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b094      	sub	sp, #80	@ 0x50
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d32:	2334      	movs	r3, #52	@ 0x34
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	0018      	movs	r0, r3
 8001d38:	231c      	movs	r3, #28
 8001d3a:	001a      	movs	r2, r3
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	f00b f8cf 	bl	800cee0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d42:	003b      	movs	r3, r7
 8001d44:	0018      	movs	r0, r3
 8001d46:	2334      	movs	r3, #52	@ 0x34
 8001d48:	001a      	movs	r2, r3
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	f00b f8c8 	bl	800cee0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001d50:	4b3a      	ldr	r3, [pc, #232]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001d52:	4a3b      	ldr	r2, [pc, #236]	@ (8001e40 <MX_TIM17_Init+0x114>)
 8001d54:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 8001d56:	4b39      	ldr	r3, [pc, #228]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001d58:	4a3a      	ldr	r2, [pc, #232]	@ (8001e44 <MX_TIM17_Init+0x118>)
 8001d5a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5c:	4b37      	ldr	r3, [pc, #220]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 0;
 8001d62:	4b36      	ldr	r3, [pc, #216]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001d68:	4b34      	ldr	r3, [pc, #208]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001d6a:	2280      	movs	r2, #128	@ 0x80
 8001d6c:	0092      	lsls	r2, r2, #2
 8001d6e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001d70:	4b32      	ldr	r3, [pc, #200]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d76:	4b31      	ldr	r3, [pc, #196]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001d78:	2280      	movs	r2, #128	@ 0x80
 8001d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001d7c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f007 fa18 	bl	80091b4 <HAL_TIM_Base_Init>
 8001d84:	1e03      	subs	r3, r0, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001d88:	f000 fa2e 	bl	80021e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f007 fb16 	bl	80093c0 <HAL_TIM_OC_Init>
 8001d94:	1e03      	subs	r3, r0, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8001d98:	f000 fa26 	bl	80021e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001d9c:	2134      	movs	r1, #52	@ 0x34
 8001d9e:	187b      	adds	r3, r7, r1
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001da4:	187b      	adds	r3, r7, r1
 8001da6:	2200      	movs	r2, #0
 8001da8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001daa:	187b      	adds	r3, r7, r1
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001db0:	187b      	adds	r3, r7, r1
 8001db2:	2200      	movs	r2, #0
 8001db4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001db6:	187b      	adds	r3, r7, r1
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dc2:	187b      	adds	r3, r7, r1
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dc8:	1879      	adds	r1, r7, r1
 8001dca:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f008 f96a 	bl	800a0a8 <HAL_TIM_OC_ConfigChannel>
 8001dd4:	1e03      	subs	r3, r0, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 8001dd8:	f000 fa06 	bl	80021e8 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8001ddc:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699a      	ldr	r2, [r3, #24]
 8001de2:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2108      	movs	r1, #8
 8001de8:	430a      	orrs	r2, r1
 8001dea:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dec:	003b      	movs	r3, r7
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001df2:	003b      	movs	r3, r7
 8001df4:	2200      	movs	r2, #0
 8001df6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001df8:	003b      	movs	r3, r7
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dfe:	003b      	movs	r3, r7
 8001e00:	2200      	movs	r2, #0
 8001e02:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e04:	003b      	movs	r3, r7
 8001e06:	2200      	movs	r2, #0
 8001e08:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e0a:	003b      	movs	r3, r7
 8001e0c:	2280      	movs	r2, #128	@ 0x80
 8001e0e:	0192      	lsls	r2, r2, #6
 8001e10:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e12:	003b      	movs	r3, r7
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e18:	003b      	movs	r3, r7
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001e1e:	003a      	movs	r2, r7
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <MX_TIM17_Init+0x110>)
 8001e22:	0011      	movs	r1, r2
 8001e24:	0018      	movs	r0, r3
 8001e26:	f009 fb65 	bl	800b4f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e2a:	1e03      	subs	r3, r0, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 8001e2e:	f000 f9db 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001e32:	46c0      	nop			@ (mov r8, r8)
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b014      	add	sp, #80	@ 0x50
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	46c0      	nop			@ (mov r8, r8)
 8001e3c:	2000068c 	.word	0x2000068c
 8001e40:	40014800 	.word	0x40014800
 8001e44:	00007fff 	.word	0x00007fff

08001e48 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPTIM1_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001e4c:	4b17      	ldr	r3, [pc, #92]	@ (8001eac <MX_LPTIM1_Init+0x64>)
 8001e4e:	4a18      	ldr	r2, [pc, #96]	@ (8001eb0 <MX_LPTIM1_Init+0x68>)
 8001e50:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001e52:	4b16      	ldr	r3, [pc, #88]	@ (8001eac <MX_LPTIM1_Init+0x64>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8001e58:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <MX_LPTIM1_Init+0x64>)
 8001e5a:	22e0      	movs	r2, #224	@ 0xe0
 8001e5c:	0112      	lsls	r2, r2, #4
 8001e5e:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001e60:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <MX_LPTIM1_Init+0x64>)
 8001e62:	4a14      	ldr	r2, [pc, #80]	@ (8001eb4 <MX_LPTIM1_Init+0x6c>)
 8001e64:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001e66:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <MX_LPTIM1_Init+0x64>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <MX_LPTIM1_Init+0x64>)
 8001e6e:	2280      	movs	r2, #128	@ 0x80
 8001e70:	03d2      	lsls	r2, r2, #15
 8001e72:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001e74:	4b0d      	ldr	r3, [pc, #52]	@ (8001eac <MX_LPTIM1_Init+0x64>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <MX_LPTIM1_Init+0x64>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001e80:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <MX_LPTIM1_Init+0x64>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001e86:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <MX_LPTIM1_Init+0x64>)
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f005 fefb 	bl	8007c84 <HAL_LPTIM_Init>
 8001e8e:	1e03      	subs	r3, r0, #0
 8001e90:	d001      	beq.n	8001e96 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8001e92:	f000 f9a9 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

  HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 2);
 8001e96:	2202      	movs	r2, #2
 8001e98:	2102      	movs	r1, #2
 8001e9a:	2011      	movs	r0, #17
 8001e9c:	f005 f9ca 	bl	8007234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001ea0:	2011      	movs	r0, #17
 8001ea2:	f005 f9dc 	bl	800725e <HAL_NVIC_EnableIRQ>
}
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000bbc 	.word	0x20000bbc
 8001eb0:	40007c00 	.word	0x40007c00
 8001eb4:	0000ffff 	.word	0x0000ffff

08001eb8 <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	231c      	movs	r3, #28
 8001ec4:	001a      	movs	r2, r3
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	f00b f80a 	bl	800cee0 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f48 <MX_TIM14_Init+0x90>)
 8001ece:	4a1f      	ldr	r2, [pc, #124]	@ (8001f4c <MX_TIM14_Init+0x94>)
 8001ed0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (512 * 64) - 1;
 8001ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f48 <MX_TIM14_Init+0x90>)
 8001ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f50 <MX_TIM14_Init+0x98>)
 8001ed6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <MX_TIM14_Init+0x90>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0;
 8001ede:	4b1a      	ldr	r3, [pc, #104]	@ (8001f48 <MX_TIM14_Init+0x90>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001ee4:	4b18      	ldr	r3, [pc, #96]	@ (8001f48 <MX_TIM14_Init+0x90>)
 8001ee6:	2280      	movs	r2, #128	@ 0x80
 8001ee8:	0092      	lsls	r2, r2, #2
 8001eea:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eec:	4b16      	ldr	r3, [pc, #88]	@ (8001f48 <MX_TIM14_Init+0x90>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001ef2:	4b15      	ldr	r3, [pc, #84]	@ (8001f48 <MX_TIM14_Init+0x90>)
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f007 f95d 	bl	80091b4 <HAL_TIM_Base_Init>
 8001efa:	1e03      	subs	r3, r0, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 8001efe:	f000 f973 	bl	80021e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8001f02:	4b11      	ldr	r3, [pc, #68]	@ (8001f48 <MX_TIM14_Init+0x90>)
 8001f04:	0018      	movs	r0, r3
 8001f06:	f007 fa5b 	bl	80093c0 <HAL_TIM_OC_Init>
 8001f0a:	1e03      	subs	r3, r0, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 8001f0e:	f000 f96b 	bl	80021e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f2a:	1d39      	adds	r1, r7, #4
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <MX_TIM14_Init+0x90>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	0018      	movs	r0, r3
 8001f32:	f008 f8b9 	bl	800a0a8 <HAL_TIM_OC_ConfigChannel>
 8001f36:	1e03      	subs	r3, r0, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8001f3a:	f000 f955 	bl	80021e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001f3e:	46c0      	nop			@ (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b008      	add	sp, #32
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	46c0      	nop			@ (mov r8, r8)
 8001f48:	200005d0 	.word	0x200005d0
 8001f4c:	40002000 	.word	0x40002000
 8001f50:	00007fff 	.word	0x00007fff

08001f54 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001f58:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f5a:	4a16      	ldr	r2, [pc, #88]	@ (8001fb4 <MX_USART2_UART_Init+0x60>)
 8001f5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 8001f5e:	4b14      	ldr	r3, [pc, #80]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f60:	4a15      	ldr	r2, [pc, #84]	@ (8001fb8 <MX_USART2_UART_Init+0x64>)
 8001f62:	605a      	str	r2, [r3, #4]
  //huart2.Init.BaudRate = 57600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f64:	4b12      	ldr	r3, [pc, #72]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f6a:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f78:	220c      	movs	r2, #12
 8001f7a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f88:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f94:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f9a:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f009 fb65 	bl	800b66c <HAL_UART_Init>
 8001fa2:	1e03      	subs	r3, r0, #0
 8001fa4:	d001      	beq.n	8001faa <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8001fa6:	f000 f91f 	bl	80021e8 <Error_Handler>
  }
}
 8001faa:	46c0      	nop			@ (mov r8, r8)
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000a38 	.word	0x20000a38
 8001fb4:	40004400 	.word	0x40004400
 8001fb8:	00007a12 	.word	0x00007a12

08001fbc <MX_DMA_Init>:
    Error_Handler();
  }
}

void MX_DMA_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fc2:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <MX_DMA_Init+0x48>)
 8001fc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <MX_DMA_Init+0x48>)
 8001fc8:	2101      	movs	r1, #1
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	639a      	str	r2, [r3, #56]	@ 0x38
 8001fce:	4b0d      	ldr	r3, [pc, #52]	@ (8002004 <MX_DMA_Init+0x48>)
 8001fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */ // - ADC
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2100      	movs	r1, #0
 8001fde:	2009      	movs	r0, #9
 8001fe0:	f005 f928 	bl	8007234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001fe4:	2009      	movs	r0, #9
 8001fe6:	f005 f93a 	bl	800725e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */ // - UART RX is ch2, TX is ch3
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 2);
 8001fea:	2202      	movs	r2, #2
 8001fec:	2102      	movs	r1, #2
 8001fee:	200a      	movs	r0, #10
 8001ff0:	f005 f920 	bl	8007234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001ff4:	200a      	movs	r0, #10
 8001ff6:	f005 f932 	bl	800725e <HAL_NVIC_EnableIRQ>

}
 8001ffa:	46c0      	nop			@ (mov r8, r8)
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b002      	add	sp, #8
 8002000:	bd80      	pop	{r7, pc}
 8002002:	46c0      	nop			@ (mov r8, r8)
 8002004:	40021000 	.word	0x40021000

08002008 <MX_GPIO_Init>:


void MX_GPIO_Init(void)
{
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b08b      	sub	sp, #44	@ 0x2c
 800200c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200e:	2414      	movs	r4, #20
 8002010:	193b      	adds	r3, r7, r4
 8002012:	0018      	movs	r0, r3
 8002014:	2314      	movs	r3, #20
 8002016:	001a      	movs	r2, r3
 8002018:	2100      	movs	r1, #0
 800201a:	f00a ff61 	bl	800cee0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800201e:	4b6e      	ldr	r3, [pc, #440]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 8002020:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002022:	4b6d      	ldr	r3, [pc, #436]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 8002024:	2104      	movs	r1, #4
 8002026:	430a      	orrs	r2, r1
 8002028:	635a      	str	r2, [r3, #52]	@ 0x34
 800202a:	4b6b      	ldr	r3, [pc, #428]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 800202c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800202e:	2204      	movs	r2, #4
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002036:	4b68      	ldr	r3, [pc, #416]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 8002038:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800203a:	4b67      	ldr	r3, [pc, #412]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 800203c:	2120      	movs	r1, #32
 800203e:	430a      	orrs	r2, r1
 8002040:	635a      	str	r2, [r3, #52]	@ 0x34
 8002042:	4b65      	ldr	r3, [pc, #404]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 8002044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002046:	2220      	movs	r2, #32
 8002048:	4013      	ands	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	4b62      	ldr	r3, [pc, #392]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 8002050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002052:	4b61      	ldr	r3, [pc, #388]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 8002054:	2101      	movs	r1, #1
 8002056:	430a      	orrs	r2, r1
 8002058:	635a      	str	r2, [r3, #52]	@ 0x34
 800205a:	4b5f      	ldr	r3, [pc, #380]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 800205c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800205e:	2201      	movs	r2, #1
 8002060:	4013      	ands	r3, r2
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002066:	4b5c      	ldr	r3, [pc, #368]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 8002068:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800206a:	4b5b      	ldr	r3, [pc, #364]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 800206c:	2102      	movs	r1, #2
 800206e:	430a      	orrs	r2, r1
 8002070:	635a      	str	r2, [r3, #52]	@ 0x34
 8002072:	4b59      	ldr	r3, [pc, #356]	@ (80021d8 <MX_GPIO_Init+0x1d0>)
 8002074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002076:	2202      	movs	r2, #2
 8002078:	4013      	ands	r3, r2
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  /*HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, GPIO_PIN_RESET);*/

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800207e:	4b57      	ldr	r3, [pc, #348]	@ (80021dc <MX_GPIO_Init+0x1d4>)
 8002080:	2200      	movs	r2, #0
 8002082:	2140      	movs	r1, #64	@ 0x40
 8002084:	0018      	movs	r0, r3
 8002086:	f005 fdb6 	bl	8007bf6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 800208a:	193b      	adds	r3, r7, r4
 800208c:	2204      	movs	r2, #4
 800208e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002090:	193b      	adds	r3, r7, r4
 8002092:	2288      	movs	r2, #136	@ 0x88
 8002094:	0352      	lsls	r2, r2, #13
 8002096:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	193b      	adds	r3, r7, r4
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 800209e:	193b      	adds	r3, r7, r4
 80020a0:	4a4f      	ldr	r2, [pc, #316]	@ (80021e0 <MX_GPIO_Init+0x1d8>)
 80020a2:	0019      	movs	r1, r3
 80020a4:	0010      	movs	r0, r2
 80020a6:	f005 fc25 	bl	80078f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_OUT_Pin */
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 80020aa:	0021      	movs	r1, r4
 80020ac:	193b      	adds	r3, r7, r4
 80020ae:	2280      	movs	r2, #128	@ 0x80
 80020b0:	0092      	lsls	r2, r2, #2
 80020b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b4:	000c      	movs	r4, r1
 80020b6:	193b      	adds	r3, r7, r4
 80020b8:	2201      	movs	r2, #1
 80020ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	193b      	adds	r3, r7, r4
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	193b      	adds	r3, r7, r4
 80020c4:	2200      	movs	r2, #0
 80020c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 80020c8:	193a      	adds	r2, r7, r4
 80020ca:	23a0      	movs	r3, #160	@ 0xa0
 80020cc:	05db      	lsls	r3, r3, #23
 80020ce:	0011      	movs	r1, r2
 80020d0:	0018      	movs	r0, r3
 80020d2:	f005 fc0f 	bl	80078f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80020d6:	193b      	adds	r3, r7, r4
 80020d8:	2240      	movs	r2, #64	@ 0x40
 80020da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020dc:	193b      	adds	r3, r7, r4
 80020de:	2201      	movs	r2, #1
 80020e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	193b      	adds	r3, r7, r4
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e8:	193b      	adds	r3, r7, r4
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80020ee:	193b      	adds	r3, r7, r4
 80020f0:	4a3a      	ldr	r2, [pc, #232]	@ (80021dc <MX_GPIO_Init+0x1d4>)
 80020f2:	0019      	movs	r1, r3
 80020f4:	0010      	movs	r0, r2
 80020f6:	f005 fbfd 	bl	80078f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_IN_Pin */
  GPIO_InitStruct.Pin = SW_IN_Pin;
 80020fa:	193b      	adds	r3, r7, r4
 80020fc:	2280      	movs	r2, #128	@ 0x80
 80020fe:	00d2      	lsls	r2, r2, #3
 8002100:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002102:	193b      	adds	r3, r7, r4
 8002104:	2200      	movs	r2, #0
 8002106:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002108:	193b      	adds	r3, r7, r4
 800210a:	2201      	movs	r2, #1
 800210c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 800210e:	193a      	adds	r2, r7, r4
 8002110:	23a0      	movs	r3, #160	@ 0xa0
 8002112:	05db      	lsls	r3, r3, #23
 8002114:	0011      	movs	r1, r2
 8002116:	0018      	movs	r0, r3
 8002118:	f005 fbec 	bl	80078f4 <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_Pin;
 800211c:	193b      	adds	r3, r7, r4
 800211e:	2240      	movs	r2, #64	@ 0x40
 8002120:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002122:	193b      	adds	r3, r7, r4
 8002124:	2201      	movs	r2, #1
 8002126:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	193b      	adds	r3, r7, r4
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	193b      	adds	r3, r7, r4
 8002130:	2200      	movs	r2, #0
 8002132:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8002134:	193b      	adds	r3, r7, r4
 8002136:	4a2b      	ldr	r2, [pc, #172]	@ (80021e4 <MX_GPIO_Init+0x1dc>)
 8002138:	0019      	movs	r1, r3
 800213a:	0010      	movs	r0, r2
 800213c:	f005 fbda 	bl	80078f4 <HAL_GPIO_Init>

  //Configure CLK IN Pin - i.e. dedicated clock inputs to use this pin rather than the Tap-tempo switch debouncing SW IN pin
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002140:	0021      	movs	r1, r4
 8002142:	187b      	adds	r3, r7, r1
 8002144:	2280      	movs	r2, #128	@ 0x80
 8002146:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002148:	187b      	adds	r3, r7, r1
 800214a:	22c4      	movs	r2, #196	@ 0xc4
 800214c:	0392      	lsls	r2, r2, #14
 800214e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; //seems to improve stuff for CLK IN??
 8002150:	000c      	movs	r4, r1
 8002152:	193b      	adds	r3, r7, r4
 8002154:	2202      	movs	r2, #2
 8002156:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002158:	193b      	adds	r3, r7, r4
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 800215e:	193b      	adds	r3, r7, r4
 8002160:	4a20      	ldr	r2, [pc, #128]	@ (80021e4 <MX_GPIO_Init+0x1dc>)
 8002162:	0019      	movs	r1, r3
 8002164:	0010      	movs	r0, r2
 8002166:	f005 fbc5 	bl	80078f4 <HAL_GPIO_Init>

  //Configure hacked on pot high leg -> i.e. it is to be set high
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 800216a:	0021      	movs	r1, r4
 800216c:	187b      	adds	r3, r7, r1
 800216e:	2280      	movs	r2, #128	@ 0x80
 8002170:	0152      	lsls	r2, r2, #5
 8002172:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002174:	000c      	movs	r4, r1
 8002176:	193b      	adds	r3, r7, r4
 8002178:	2201      	movs	r2, #1
 800217a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	193b      	adds	r3, r7, r4
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002182:	193b      	adds	r3, r7, r4
 8002184:	2200      	movs	r2, #0
 8002186:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 8002188:	193a      	adds	r2, r7, r4
 800218a:	23a0      	movs	r3, #160	@ 0xa0
 800218c:	05db      	lsls	r3, r3, #23
 800218e:	0011      	movs	r1, r2
 8002190:	0018      	movs	r0, r3
 8002192:	f005 fbaf 	bl	80078f4 <HAL_GPIO_Init>

  //Configure hacked on pot low leg -> i.e. it is to be set low
  GPIO_InitStruct.Pin = HACK_POT_LOW_Pin;
 8002196:	0021      	movs	r1, r4
 8002198:	187b      	adds	r3, r7, r1
 800219a:	2280      	movs	r2, #128	@ 0x80
 800219c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219e:	187b      	adds	r3, r7, r1
 80021a0:	2201      	movs	r2, #1
 80021a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	187b      	adds	r3, r7, r1
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021aa:	187b      	adds	r3, r7, r1
 80021ac:	2200      	movs	r2, #0
 80021ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_LOW_GPIO_Port, &GPIO_InitStruct);
 80021b0:	187a      	adds	r2, r7, r1
 80021b2:	23a0      	movs	r3, #160	@ 0xa0
 80021b4:	05db      	lsls	r3, r3, #23
 80021b6:	0011      	movs	r1, r2
 80021b8:	0018      	movs	r0, r3
 80021ba:	f005 fb9b 	bl	80078f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 2);
 80021be:	2202      	movs	r2, #2
 80021c0:	2102      	movs	r1, #2
 80021c2:	2007      	movs	r0, #7
 80021c4:	f005 f836 	bl	8007234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80021c8:	2007      	movs	r0, #7
 80021ca:	f005 f848 	bl	800725e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021ce:	46c0      	nop			@ (mov r8, r8)
 80021d0:	46bd      	mov	sp, r7
 80021d2:	b00b      	add	sp, #44	@ 0x2c
 80021d4:	bd90      	pop	{r4, r7, pc}
 80021d6:	46c0      	nop			@ (mov r8, r8)
 80021d8:	40021000 	.word	0x40021000
 80021dc:	50000800 	.word	0x50000800
 80021e0:	50001400 	.word	0x50001400
 80021e4:	50000400 	.word	0x50000400

080021e8 <Error_Handler>:

void Error_Handler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021ec:	b672      	cpsid	i
}
 80021ee:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021f0:	46c0      	nop			@ (mov r8, r8)
 80021f2:	e7fd      	b.n	80021f0 <Error_Handler+0x8>

080021f4 <System_Init>:
  {

  }
}

void System_Init(void){
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80021f8:	f003 fc9e 	bl	8005b38 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80021fc:	f7ff f9fe 	bl	80015fc <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002200:	f7ff ff02 	bl	8002008 <MX_GPIO_Init>
	MX_DMA_Init();
 8002204:	f7ff feda 	bl	8001fbc <MX_DMA_Init>
	MX_USART2_UART_Init();
 8002208:	f7ff fea4 	bl	8001f54 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800220c:	f7ff fa54 	bl	80016b8 <MX_ADC1_Init>
	MX_TIM16_Init(); //Frequency Gen.
 8002210:	f7ff fb12 	bl	8001838 <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement is TIM2_ch1
 8002214:	f7ff fb9c 	bl	8001950 <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse is TIM3_ch1
 8002218:	f7ff fc16 	bl	8001a48 <MX_TIM3_Init>
	MX_TIM1_Init(); //PWM Gen. Main/Secondary Oscillator on ch2/ch4
 800221c:	f7ff fc9c 	bl	8001b58 <MX_TIM1_Init>
	MX_TIM17_Init();
 8002220:	f7ff fd84 	bl	8001d2c <MX_TIM17_Init>
	MX_TIM14_Init();
 8002224:	f7ff fe48 	bl	8001eb8 <MX_TIM14_Init>
	//MX_IWDG_Init(); fucks up stuff - to be config'd
	MX_LPTIM1_Init(); //Tap Tempo checking/debouncing timer
 8002228:	f7ff fe0e 	bl	8001e48 <MX_LPTIM1_Init>

	//Calibrate ADC - DO NOT MOVE TO BEFORE OTHER CONFIG ABOVE
	HAL_ADCEx_Calibration_Start(&hadc1);
 800222c:	4b21      	ldr	r3, [pc, #132]	@ (80022b4 <System_Init+0xc0>)
 800222e:	0018      	movs	r0, r3
 8002230:	f004 fe1e 	bl	8006e70 <HAL_ADCEx_Calibration_Start>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM16_callback);
 8002234:	4a20      	ldr	r2, [pc, #128]	@ (80022b8 <System_Init+0xc4>)
 8002236:	4b21      	ldr	r3, [pc, #132]	@ (80022bc <System_Init+0xc8>)
 8002238:	210e      	movs	r1, #14
 800223a:	0018      	movs	r0, r3
 800223c:	f008 fa92 	bl	800a764 <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 8002240:	4a1f      	ldr	r2, [pc, #124]	@ (80022c0 <System_Init+0xcc>)
 8002242:	4b1c      	ldr	r3, [pc, #112]	@ (80022b4 <System_Init+0xc0>)
 8002244:	2100      	movs	r1, #0
 8002246:	0018      	movs	r0, r3
 8002248:	f004 f83e 	bl	80062c8 <HAL_ADC_RegisterCallback>

	//Set custom callback function for I/P capture input falling edge event
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, &TIM2_ch1_IP_capture_callback);
 800224c:	4a1d      	ldr	r2, [pc, #116]	@ (80022c4 <System_Init+0xd0>)
 800224e:	4b1e      	ldr	r3, [pc, #120]	@ (80022c8 <System_Init+0xd4>)
 8002250:	2112      	movs	r1, #18
 8002252:	0018      	movs	r0, r3
 8002254:	f008 fa86 	bl	800a764 <HAL_TIM_RegisterCallback>

	//Set custom callback function for I/P capture timer overflow (Update event/overflow)
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM2_ch1_overflow_callback);
 8002258:	4a1c      	ldr	r2, [pc, #112]	@ (80022cc <System_Init+0xd8>)
 800225a:	4b1b      	ldr	r3, [pc, #108]	@ (80022c8 <System_Init+0xd4>)
 800225c:	210e      	movs	r1, #14
 800225e:	0018      	movs	r0, r3
 8002260:	f008 fa80 	bl	800a764 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM3_ch1 (Measurement Re-Elapse) (CCR match)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM3_ch1_IP_capture_measurement_reelapse_callback);
 8002264:	4a1a      	ldr	r2, [pc, #104]	@ (80022d0 <System_Init+0xdc>)
 8002266:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <System_Init+0xe0>)
 8002268:	2114      	movs	r1, #20
 800226a:	0018      	movs	r0, r3
 800226c:	f008 fa7a 	bl	800a764 <HAL_TIM_RegisterCallback>

	//Set custom callback function for DMA TX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID, &UART2_TX_transfer_complete_callback);
 8002270:	4a19      	ldr	r2, [pc, #100]	@ (80022d8 <System_Init+0xe4>)
 8002272:	4b1a      	ldr	r3, [pc, #104]	@ (80022dc <System_Init+0xe8>)
 8002274:	2101      	movs	r1, #1
 8002276:	0018      	movs	r0, r3
 8002278:	f009 fa60 	bl	800b73c <HAL_UART_RegisterCallback>

	//Set custom callback function for DMA RX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, &UART2_RX_transfer_complete_callback);
 800227c:	4a18      	ldr	r2, [pc, #96]	@ (80022e0 <System_Init+0xec>)
 800227e:	4b17      	ldr	r3, [pc, #92]	@ (80022dc <System_Init+0xe8>)
 8002280:	2103      	movs	r1, #3
 8002282:	0018      	movs	r0, r3
 8002284:	f009 fa5a 	bl	800b73c <HAL_UART_RegisterCallback>

	//Set custom callback for LPTIM1 (Tap Tempo SW state check)
	HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, &LPTIM1_callback);
 8002288:	4a16      	ldr	r2, [pc, #88]	@ (80022e4 <System_Init+0xf0>)
 800228a:	4b17      	ldr	r3, [pc, #92]	@ (80022e8 <System_Init+0xf4>)
 800228c:	2102      	movs	r1, #2
 800228e:	0018      	movs	r0, r3
 8002290:	f005 ff1e 	bl	80080d0 <HAL_LPTIM_RegisterCallback>

	//Set custom callback function for TIM17
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback);
 8002294:	4a15      	ldr	r2, [pc, #84]	@ (80022ec <System_Init+0xf8>)
 8002296:	4b16      	ldr	r3, [pc, #88]	@ (80022f0 <System_Init+0xfc>)
 8002298:	2114      	movs	r1, #20
 800229a:	0018      	movs	r0, r3
 800229c:	f008 fa62 	bl	800a764 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM14
	HAL_TIM_RegisterCallback(&htim14, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM14_callback);
 80022a0:	4a14      	ldr	r2, [pc, #80]	@ (80022f4 <System_Init+0x100>)
 80022a2:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <System_Init+0x104>)
 80022a4:	2114      	movs	r1, #20
 80022a6:	0018      	movs	r0, r3
 80022a8:	f008 fa5c 	bl	800a764 <HAL_TIM_RegisterCallback>
}
 80022ac:	46c0      	nop			@ (mov r8, r8)
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			@ (mov r8, r8)
 80022b4:	200004ec 	.word	0x200004ec
 80022b8:	080022fd 	.word	0x080022fd
 80022bc:	20000748 	.word	0x20000748
 80022c0:	08002351 	.word	0x08002351
 80022c4:	080023e5 	.word	0x080023e5
 80022c8:	20000804 	.word	0x20000804
 80022cc:	08002501 	.word	0x08002501
 80022d0:	0800260d 	.word	0x0800260d
 80022d4:	200008c0 	.word	0x200008c0
 80022d8:	08002749 	.word	0x08002749
 80022dc:	20000a38 	.word	0x20000a38
 80022e0:	08002759 	.word	0x08002759
 80022e4:	08003b39 	.word	0x08003b39
 80022e8:	20000bbc 	.word	0x20000bbc
 80022ec:	08003ed9 	.word	0x08003ed9
 80022f0:	2000068c 	.word	0x2000068c
 80022f4:	08003ee9 	.word	0x08003ee9
 80022f8:	200005d0 	.word	0x200005d0

080022fc <TIM16_callback>:
#include "custom_callbacks.h"

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Set_Oscillator_Values(&params);
 8002304:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <TIM16_callback+0x40>)
 8002306:	0018      	movs	r0, r3
 8002308:	f001 fffe 	bl	8004308 <Set_Oscillator_Values>
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 800230c:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <TIM16_callback+0x40>)
 800230e:	2100      	movs	r1, #0
 8002310:	0018      	movs	r0, r3
 8002312:	f002 f825 	bl	8004360 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002316:	4a0a      	ldr	r2, [pc, #40]	@ (8002340 <TIM16_callback+0x44>)
 8002318:	4b08      	ldr	r3, [pc, #32]	@ (800233c <TIM16_callback+0x40>)
 800231a:	0011      	movs	r1, r2
 800231c:	0018      	movs	r0, r3
 800231e:	f002 f915 	bl	800454c <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002322:	4b08      	ldr	r3, [pc, #32]	@ (8002344 <TIM16_callback+0x48>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	001a      	movs	r2, r3
 8002328:	4907      	ldr	r1, [pc, #28]	@ (8002348 <TIM16_callback+0x4c>)
 800232a:	4b08      	ldr	r3, [pc, #32]	@ (800234c <TIM16_callback+0x50>)
 800232c:	0018      	movs	r0, r3
 800232e:	f004 f857 	bl	80063e0 <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002332:	46c0      	nop			@ (mov r8, r8)
 8002334:	46bd      	mov	sp, r7
 8002336:	b002      	add	sp, #8
 8002338:	bd80      	pop	{r7, pc}
 800233a:	46c0      	nop			@ (mov r8, r8)
 800233c:	20000c3c 	.word	0x20000c3c
 8002340:	20000020 	.word	0x20000020
 8002344:	0800d784 	.word	0x0800d784
 8002348:	20000c30 	.word	0x20000c30
 800234c:	200004ec 	.word	0x200004ec

08002350 <ADC_DMA_conversion_complete_callback>:

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 8002350:	b5b0      	push	{r4, r5, r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	0018      	movs	r0, r3
 800235c:	f004 f8ce 	bl	80064fc <HAL_ADC_Stop_DMA>
	Process_ADC_Conversion_Values(&params_manual, ADCResultsDMA);
 8002360:	4a1b      	ldr	r2, [pc, #108]	@ (80023d0 <ADC_DMA_conversion_complete_callback+0x80>)
 8002362:	4b1c      	ldr	r3, [pc, #112]	@ (80023d4 <ADC_DMA_conversion_complete_callback+0x84>)
 8002364:	0011      	movs	r1, r2
 8002366:	0018      	movs	r0, r3
 8002368:	f002 f986 	bl	8004678 <Process_ADC_Conversion_Values>

	//copies into running params based on mode
	Update_Params_Based_On_Mode_Selected();
 800236c:	f7fe f8d8 	bl	8000520 <Update_Params_Based_On_Mode_Selected>

	enum Validate first_sync_complete = Get_Status_Bit(&statuses, First_Sync_Complete);
 8002370:	250f      	movs	r5, #15
 8002372:	197c      	adds	r4, r7, r5
 8002374:	4b18      	ldr	r3, [pc, #96]	@ (80023d8 <ADC_DMA_conversion_complete_callback+0x88>)
 8002376:	2108      	movs	r1, #8
 8002378:	0018      	movs	r0, r3
 800237a:	f003 fb79 	bl	8005a70 <Get_Status_Bit>
 800237e:	0003      	movs	r3, r0
 8002380:	7023      	strb	r3, [r4, #0]

	//overwrites raw speed values if a sync has completed
	if(first_sync_complete == YES){
 8002382:	197b      	adds	r3, r7, r5
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d10a      	bne.n	80023a0 <ADC_DMA_conversion_complete_callback+0x50>

		params.raw_start_value = params_working.raw_start_value;
 800238a:	4b14      	ldr	r3, [pc, #80]	@ (80023dc <ADC_DMA_conversion_complete_callback+0x8c>)
 800238c:	8a5b      	ldrh	r3, [r3, #18]
 800238e:	b29a      	uxth	r2, r3
 8002390:	4b13      	ldr	r3, [pc, #76]	@ (80023e0 <ADC_DMA_conversion_complete_callback+0x90>)
 8002392:	825a      	strh	r2, [r3, #18]
		params.raw_prescaler = params_working.raw_prescaler;
 8002394:	4b11      	ldr	r3, [pc, #68]	@ (80023dc <ADC_DMA_conversion_complete_callback+0x8c>)
 8002396:	8b5b      	ldrh	r3, [r3, #26]
 8002398:	b29a      	uxth	r2, r3
 800239a:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <ADC_DMA_conversion_complete_callback+0x90>)
 800239c:	835a      	strh	r2, [r3, #26]
 800239e:	e003      	b.n	80023a8 <ADC_DMA_conversion_complete_callback+0x58>
	}
	else{

		Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(&params);
 80023a0:	4b0f      	ldr	r3, [pc, #60]	@ (80023e0 <ADC_DMA_conversion_complete_callback+0x90>)
 80023a2:	0018      	movs	r0, r3
 80023a4:	f001 ff7a 	bl	800429c <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	}

	Process_TIM16_Final_Start_Value_and_Final_Prescaler(&params);
 80023a8:	4b0d      	ldr	r3, [pc, #52]	@ (80023e0 <ADC_DMA_conversion_complete_callback+0x90>)
 80023aa:	0018      	movs	r0, r3
 80023ac:	f002 fed2 	bl	8005154 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//after initial conversion is complete, set the conversion complete flag - leave this after raw/final value processing rather than actually when ADC values are converted for startup routine reasons.
	if(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){
 80023b0:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <ADC_DMA_conversion_complete_callback+0x88>)
 80023b2:	2110      	movs	r1, #16
 80023b4:	0018      	movs	r0, r3
 80023b6:	f003 fb5b 	bl	8005a70 <Get_Status_Bit>
 80023ba:	1e03      	subs	r3, r0, #0
 80023bc:	d104      	bne.n	80023c8 <ADC_DMA_conversion_complete_callback+0x78>
		Set_Status_Bit(&statuses, Initial_ADC_Conversion_Complete);
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <ADC_DMA_conversion_complete_callback+0x88>)
 80023c0:	2110      	movs	r1, #16
 80023c2:	0018      	movs	r0, r3
 80023c4:	f003 fb68 	bl	8005a98 <Set_Status_Bit>
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80023c8:	46c0      	nop			@ (mov r8, r8)
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b004      	add	sp, #16
 80023ce:	bdb0      	pop	{r4, r5, r7, pc}
 80023d0:	20000c30 	.word	0x20000c30
 80023d4:	20000c60 	.word	0x20000c60
 80023d8:	20000c24 	.word	0x20000c24
 80023dc:	20000ca8 	.word	0x20000ca8
 80023e0:	20000c3c 	.word	0x20000c3c

080023e4 <TIM2_ch1_IP_capture_callback>:

void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]

	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2100      	movs	r1, #0
 80023f0:	0018      	movs	r0, r3
 80023f2:	f008 f933 	bl	800a65c <HAL_TIM_ReadCapturedValue>
 80023f6:	0002      	movs	r2, r0
 80023f8:	4b3a      	ldr	r3, [pc, #232]	@ (80024e4 <TIM2_ch1_IP_capture_callback+0x100>)
 80023fa:	601a      	str	r2, [r3, #0]

	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 80023fc:	4b39      	ldr	r3, [pc, #228]	@ (80024e4 <TIM2_ch1_IP_capture_callback+0x100>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	0a5b      	lsrs	r3, r3, #9
 8002402:	b29a      	uxth	r2, r3
 8002404:	4b38      	ldr	r3, [pc, #224]	@ (80024e8 <TIM2_ch1_IP_capture_callback+0x104>)
 8002406:	801a      	strh	r2, [r3, #0]

	//since the input capture measurement is z, and this is 512x the interrupt period, we just use the interrupt
	//period = z/512 as the 'elapse period value' if we also set the elapse timer prescaler to 512x less than the
	//input capture measurement timer

	if(IP_CAP_fsm.current_state == IDLE){
 8002408:	4b38      	ldr	r3, [pc, #224]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d108      	bne.n	8002424 <TIM2_ch1_IP_capture_callback+0x40>

		Begin_Input_Capture_Measurement();
 8002412:	f001 fe57 	bl	80040c4 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8002416:	4b35      	ldr	r3, [pc, #212]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = IDLE;
 800241c:	4b33      	ldr	r3, [pc, #204]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 800241e:	2200      	movs	r2, #0
 8002420:	705a      	strb	r2, [r3, #1]
		//BEGIN PROCESSING
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002422:	e05b      	b.n	80024dc <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){ //second edge
 8002424:	4b31      	ldr	r3, [pc, #196]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d124      	bne.n	8002478 <TIM2_ch1_IP_capture_callback+0x94>
		if(interrupt_period >= HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is >= than 129
 800242e:	4b2e      	ldr	r3, [pc, #184]	@ (80024e8 <TIM2_ch1_IP_capture_callback+0x104>)
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	2b80      	cmp	r3, #128	@ 0x80
 8002436:	d951      	bls.n	80024dc <TIM2_ch1_IP_capture_callback+0xf8>
				Start_Measurement_Reelapse_Timer();
 8002438:	f001 fe26 	bl	8004088 <Start_Measurement_Reelapse_Timer>
			IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 800243c:	4b2b      	ldr	r3, [pc, #172]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 800243e:	2202      	movs	r2, #2
 8002440:	701a      	strb	r2, [r3, #0]
			IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8002442:	4b2a      	ldr	r3, [pc, #168]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 8002444:	2201      	movs	r2, #1
 8002446:	705a      	strb	r2, [r3, #1]
			Copy_Params_Structs(&params, &params_to_be_loaded);
 8002448:	4a29      	ldr	r2, [pc, #164]	@ (80024f0 <TIM2_ch1_IP_capture_callback+0x10c>)
 800244a:	4b2a      	ldr	r3, [pc, #168]	@ (80024f4 <TIM2_ch1_IP_capture_callback+0x110>)
 800244c:	0011      	movs	r1, r2
 800244e:	0018      	movs	r0, r3
 8002450:	f001 fe08 	bl	8004064 <Copy_Params_Structs>
			if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8002454:	4b28      	ldr	r3, [pc, #160]	@ (80024f8 <TIM2_ch1_IP_capture_callback+0x114>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b05      	cmp	r3, #5
 800245c:	d004      	beq.n	8002468 <TIM2_ch1_IP_capture_callback+0x84>
 800245e:	4b26      	ldr	r3, [pc, #152]	@ (80024f8 <TIM2_ch1_IP_capture_callback+0x114>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b07      	cmp	r3, #7
 8002466:	d101      	bne.n	800246c <TIM2_ch1_IP_capture_callback+0x88>
				Advance_Pending_States();
 8002468:	f002 fa4a 	bl	8004900 <Advance_Pending_States>
			Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 800246c:	4b23      	ldr	r3, [pc, #140]	@ (80024fc <TIM2_ch1_IP_capture_callback+0x118>)
 800246e:	2104      	movs	r1, #4
 8002470:	0018      	movs	r0, r3
 8002472:	f003 fb11 	bl	8005a98 <Set_Status_Bit>
}
 8002476:	e031      	b.n	80024dc <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){ //first edge
 8002478:	4b1c      	ldr	r3, [pc, #112]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d108      	bne.n	8002494 <TIM2_ch1_IP_capture_callback+0xb0>
		Begin_Input_Capture_Measurement();
 8002482:	f001 fe1f 	bl	80040c4 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002486:	4b19      	ldr	r3, [pc, #100]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 8002488:	2203      	movs	r2, #3
 800248a:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 800248c:	4b17      	ldr	r3, [pc, #92]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 800248e:	2202      	movs	r2, #2
 8002490:	705a      	strb	r2, [r3, #1]
}
 8002492:	e023      	b.n	80024dc <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){ //second edge
 8002494:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b03      	cmp	r3, #3
 800249c:	d11e      	bne.n	80024dc <TIM2_ch1_IP_capture_callback+0xf8>
			Start_Measurement_Reelapse_Timer();
 800249e:	f001 fdf3 	bl	8004088 <Start_Measurement_Reelapse_Timer>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 80024a2:	4b12      	ldr	r3, [pc, #72]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 80024a4:	2202      	movs	r2, #2
 80024a6:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 80024a8:	4b10      	ldr	r3, [pc, #64]	@ (80024ec <TIM2_ch1_IP_capture_callback+0x108>)
 80024aa:	2203      	movs	r2, #3
 80024ac:	705a      	strb	r2, [r3, #1]
		Copy_Params_Structs(&params, &params_to_be_loaded);
 80024ae:	4a10      	ldr	r2, [pc, #64]	@ (80024f0 <TIM2_ch1_IP_capture_callback+0x10c>)
 80024b0:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <TIM2_ch1_IP_capture_callback+0x110>)
 80024b2:	0011      	movs	r1, r2
 80024b4:	0018      	movs	r0, r3
 80024b6:	f001 fdd5 	bl	8004064 <Copy_Params_Structs>
		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 80024ba:	4b0f      	ldr	r3, [pc, #60]	@ (80024f8 <TIM2_ch1_IP_capture_callback+0x114>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b05      	cmp	r3, #5
 80024c2:	d004      	beq.n	80024ce <TIM2_ch1_IP_capture_callback+0xea>
 80024c4:	4b0c      	ldr	r3, [pc, #48]	@ (80024f8 <TIM2_ch1_IP_capture_callback+0x114>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b07      	cmp	r3, #7
 80024cc:	d101      	bne.n	80024d2 <TIM2_ch1_IP_capture_callback+0xee>
			Advance_Pending_States();
 80024ce:	f002 fa17 	bl	8004900 <Advance_Pending_States>
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 80024d2:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <TIM2_ch1_IP_capture_callback+0x118>)
 80024d4:	2104      	movs	r1, #4
 80024d6:	0018      	movs	r0, r3
 80024d8:	f003 fade 	bl	8005a98 <Set_Status_Bit>
}
 80024dc:	46c0      	nop			@ (mov r8, r8)
 80024de:	46bd      	mov	sp, r7
 80024e0:	b002      	add	sp, #8
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000c1c 	.word	0x20000c1c
 80024e8:	20000c20 	.word	0x20000c20
 80024ec:	2000043c 	.word	0x2000043c
 80024f0:	20000c84 	.word	0x20000c84
 80024f4:	20000c3c 	.word	0x20000c3c
 80024f8:	20000428 	.word	0x20000428
 80024fc:	20000c24 	.word	0x20000c24

08002500 <TIM2_ch1_overflow_callback>:


void TIM2_ch1_overflow_callback(TIM_HandleTypeDef *htim){
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

	union Speed_FSM_States previous = speed_fsm.prev_state;
 8002508:	240c      	movs	r4, #12
 800250a:	193b      	adds	r3, r7, r4
 800250c:	4a3a      	ldr	r2, [pc, #232]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 800250e:	7852      	ldrb	r2, [r2, #1]
 8002510:	701a      	strb	r2, [r3, #0]

	if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){
 8002512:	4b3a      	ldr	r3, [pc, #232]	@ (80025fc <TIM2_ch1_overflow_callback+0xfc>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b01      	cmp	r3, #1
 800251a:	d131      	bne.n	8002580 <TIM2_ch1_overflow_callback+0x80>

		IP_CAP_fsm.current_state = IDLE;
 800251c:	4b37      	ldr	r3, [pc, #220]	@ (80025fc <TIM2_ch1_overflow_callback+0xfc>)
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8002522:	4b36      	ldr	r3, [pc, #216]	@ (80025fc <TIM2_ch1_overflow_callback+0xfc>)
 8002524:	2201      	movs	r2, #1
 8002526:	705a      	strb	r2, [r3, #1]

		MIDI_CLK_fsm = NOT_COMPILING;
 8002528:	4b35      	ldr	r3, [pc, #212]	@ (8002600 <TIM2_ch1_overflow_callback+0x100>)
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 800252e:	4b35      	ldr	r3, [pc, #212]	@ (8002604 <TIM2_ch1_overflow_callback+0x104>)
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002534:	2380      	movs	r3, #128	@ 0x80
 8002536:	0099      	lsls	r1, r3, #2
 8002538:	23a0      	movs	r3, #160	@ 0xa0
 800253a:	05db      	lsls	r3, r3, #23
 800253c:	2201      	movs	r2, #1
 800253e:	0018      	movs	r0, r3
 8002540:	f005 fb59 	bl	8007bf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002544:	4b30      	ldr	r3, [pc, #192]	@ (8002608 <TIM2_ch1_overflow_callback+0x108>)
 8002546:	2200      	movs	r2, #0
 8002548:	2140      	movs	r1, #64	@ 0x40
 800254a:	0018      	movs	r0, r3
 800254c:	f005 fb53 	bl	8007bf6 <HAL_GPIO_WritePin>

		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002550:	4b29      	ldr	r3, [pc, #164]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b04      	cmp	r3, #4
 8002558:	d049      	beq.n	80025ee <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 800255a:	4b27      	ldr	r3, [pc, #156]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b06      	cmp	r3, #6
 8002562:	d044      	beq.n	80025ee <TIM2_ch1_overflow_callback+0xee>
 8002564:	4b24      	ldr	r3, [pc, #144]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 800256a:	2b08      	cmp	r3, #8
 800256c:	d03f      	beq.n	80025ee <TIM2_ch1_overflow_callback+0xee>

			speed_fsm.prev_state = speed_fsm.current_state;
 800256e:	4b22      	ldr	r3, [pc, #136]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 8002570:	4a21      	ldr	r2, [pc, #132]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 8002572:	7812      	ldrb	r2, [r2, #0]
 8002574:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002576:	4b20      	ldr	r3, [pc, #128]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 8002578:	193a      	adds	r2, r7, r4
 800257a:	7812      	ldrb	r2, [r2, #0]
 800257c:	701a      	strb	r2, [r3, #0]

			speed_fsm.prev_state = speed_fsm.current_state;
			speed_fsm.current_state = previous;
		}
	}
}
 800257e:	e036      	b.n	80025ee <TIM2_ch1_overflow_callback+0xee>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8002580:	4b1e      	ldr	r3, [pc, #120]	@ (80025fc <TIM2_ch1_overflow_callback+0xfc>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b03      	cmp	r3, #3
 8002588:	d131      	bne.n	80025ee <TIM2_ch1_overflow_callback+0xee>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 800258a:	4b1c      	ldr	r3, [pc, #112]	@ (80025fc <TIM2_ch1_overflow_callback+0xfc>)
 800258c:	2202      	movs	r2, #2
 800258e:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002590:	4b1a      	ldr	r3, [pc, #104]	@ (80025fc <TIM2_ch1_overflow_callback+0xfc>)
 8002592:	2203      	movs	r2, #3
 8002594:	705a      	strb	r2, [r3, #1]
		MIDI_CLK_fsm = NOT_COMPILING;
 8002596:	4b1a      	ldr	r3, [pc, #104]	@ (8002600 <TIM2_ch1_overflow_callback+0x100>)
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 800259c:	4b19      	ldr	r3, [pc, #100]	@ (8002604 <TIM2_ch1_overflow_callback+0x104>)
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80025a2:	2380      	movs	r3, #128	@ 0x80
 80025a4:	0099      	lsls	r1, r3, #2
 80025a6:	23a0      	movs	r3, #160	@ 0xa0
 80025a8:	05db      	lsls	r3, r3, #23
 80025aa:	2201      	movs	r2, #1
 80025ac:	0018      	movs	r0, r3
 80025ae:	f005 fb22 	bl	8007bf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80025b2:	4b15      	ldr	r3, [pc, #84]	@ (8002608 <TIM2_ch1_overflow_callback+0x108>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	2140      	movs	r1, #64	@ 0x40
 80025b8:	0018      	movs	r0, r3
 80025ba:	f005 fb1c 	bl	8007bf6 <HAL_GPIO_WritePin>
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80025be:	4b0e      	ldr	r3, [pc, #56]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d012      	beq.n	80025ee <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 80025c8:	4b0b      	ldr	r3, [pc, #44]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d00d      	beq.n	80025ee <TIM2_ch1_overflow_callback+0xee>
 80025d2:	4b09      	ldr	r3, [pc, #36]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d008      	beq.n	80025ee <TIM2_ch1_overflow_callback+0xee>
			speed_fsm.prev_state = speed_fsm.current_state;
 80025dc:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 80025de:	4a06      	ldr	r2, [pc, #24]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 80025e0:	7812      	ldrb	r2, [r2, #0]
 80025e2:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 80025e4:	4b04      	ldr	r3, [pc, #16]	@ (80025f8 <TIM2_ch1_overflow_callback+0xf8>)
 80025e6:	220c      	movs	r2, #12
 80025e8:	18ba      	adds	r2, r7, r2
 80025ea:	7812      	ldrb	r2, [r2, #0]
 80025ec:	701a      	strb	r2, [r3, #0]
}
 80025ee:	46c0      	nop			@ (mov r8, r8)
 80025f0:	46bd      	mov	sp, r7
 80025f2:	b005      	add	sp, #20
 80025f4:	bd90      	pop	{r4, r7, pc}
 80025f6:	46c0      	nop			@ (mov r8, r8)
 80025f8:	20000428 	.word	0x20000428
 80025fc:	2000043c 	.word	0x2000043c
 8002600:	20000ccc 	.word	0x20000ccc
 8002604:	20000c22 	.word	0x20000c22
 8002608:	50000800 	.word	0x50000800

0800260c <TIM3_ch1_IP_capture_measurement_reelapse_callback>:

void TIM3_ch1_IP_capture_measurement_reelapse_callback(TIM_HandleTypeDef *htim){
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002614:	4b41      	ldr	r3, [pc, #260]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b0b      	cmp	r3, #11
 800261c:	d01c      	beq.n	8002658 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 800261e:	4b3f      	ldr	r3, [pc, #252]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b0c      	cmp	r3, #12
 8002626:	d017      	beq.n	8002658 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8002628:	4b3c      	ldr	r3, [pc, #240]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b0d      	cmp	r3, #13
 8002630:	d012      	beq.n	8002658 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 8002632:	4b3a      	ldr	r3, [pc, #232]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b10      	cmp	r3, #16
 800263a:	d00d      	beq.n	8002658 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 800263c:	4b37      	ldr	r3, [pc, #220]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b11      	cmp	r3, #17
 8002644:	d008      	beq.n	8002658 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8002646:	4b35      	ldr	r3, [pc, #212]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 800264c:	2b12      	cmp	r3, #18
 800264e:	d003      	beq.n	8002658 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>

		// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
		Set_Oscillator_Values(&params_to_be_loaded);
 8002650:	4b33      	ldr	r3, [pc, #204]	@ (8002720 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002652:	0018      	movs	r0, r3
 8002654:	f001 fe58 	bl	8004308 <Set_Oscillator_Values>
	}

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8002658:	4b32      	ldr	r3, [pc, #200]	@ (8002724 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x118>)
 800265a:	2100      	movs	r1, #0
 800265c:	0018      	movs	r0, r3
 800265e:	f003 f9a0 	bl	80059a2 <Stop_OC_TIM>

	if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){
 8002662:	4b31      	ldr	r3, [pc, #196]	@ (8002728 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d106      	bne.n	800267a <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x6e>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = IDLE;
 800266c:	4b2e      	ldr	r3, [pc, #184]	@ (8002728 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8002672:	4b2d      	ldr	r3, [pc, #180]	@ (8002728 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002674:	2202      	movs	r2, #2
 8002676:	705a      	strb	r2, [r3, #1]
 8002678:	e00a      	b.n	8002690 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>
	}
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 800267a:	4b2b      	ldr	r3, [pc, #172]	@ (8002728 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b03      	cmp	r3, #3
 8002682:	d105      	bne.n	8002690 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8002684:	4b28      	ldr	r3, [pc, #160]	@ (8002728 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 800268a:	4b27      	ldr	r3, [pc, #156]	@ (8002728 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 800268c:	2203      	movs	r2, #3
 800268e:	705a      	strb	r2, [r3, #1]
	}

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002690:	4b22      	ldr	r3, [pc, #136]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b0b      	cmp	r3, #11
 8002698:	d03c      	beq.n	8002714 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 800269a:	4b20      	ldr	r3, [pc, #128]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b0c      	cmp	r3, #12
 80026a2:	d037      	beq.n	8002714 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 80026a4:	4b1d      	ldr	r3, [pc, #116]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b0d      	cmp	r3, #13
 80026ac:	d032      	beq.n	8002714 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 80026ae:	4b1b      	ldr	r3, [pc, #108]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b10      	cmp	r3, #16
 80026b6:	d02d      	beq.n	8002714 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 80026b8:	4b18      	ldr	r3, [pc, #96]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b11      	cmp	r3, #17
 80026c0:	d028      	beq.n	8002714 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 80026c2:	4b16      	ldr	r3, [pc, #88]	@ (800271c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 80026c8:	2b12      	cmp	r3, #18
 80026ca:	d023      	beq.n	8002714 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>

		Copy_Params_Structs(&params_to_be_loaded, &params_working);
 80026cc:	4a17      	ldr	r2, [pc, #92]	@ (800272c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x120>)
 80026ce:	4b14      	ldr	r3, [pc, #80]	@ (8002720 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 80026d0:	0011      	movs	r1, r2
 80026d2:	0018      	movs	r0, r3
 80026d4:	f001 fcc6 	bl	8004064 <Copy_Params_Structs>
		Copy_Params_Structs(&params_to_be_loaded, &params);
 80026d8:	4a15      	ldr	r2, [pc, #84]	@ (8002730 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 80026da:	4b11      	ldr	r3, [pc, #68]	@ (8002720 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 80026dc:	0011      	movs	r1, r2
 80026de:	0018      	movs	r0, r3
 80026e0:	f001 fcc0 	bl	8004064 <Copy_Params_Structs>

		Set_Status_Bit(&statuses, First_Sync_Complete);
 80026e4:	4b13      	ldr	r3, [pc, #76]	@ (8002734 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x128>)
 80026e6:	2108      	movs	r1, #8
 80026e8:	0018      	movs	r0, r3
 80026ea:	f003 f9d5 	bl	8005a98 <Set_Status_Bit>

		Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 80026ee:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 80026f0:	2100      	movs	r1, #0
 80026f2:	0018      	movs	r0, r3
 80026f4:	f001 fe34 	bl	8004360 <Calculate_Next_Main_Oscillator_Values>
		Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80026f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002738 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x12c>)
 80026fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002730 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 80026fc:	0011      	movs	r1, r2
 80026fe:	0018      	movs	r0, r3
 8002700:	f001 ff24 	bl	800454c <Write_Next_Main_Oscillator_Values_to_Delay_Line>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002704:	4b0d      	ldr	r3, [pc, #52]	@ (800273c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x130>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	001a      	movs	r2, r3
 800270a:	490d      	ldr	r1, [pc, #52]	@ (8002740 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x134>)
 800270c:	4b0d      	ldr	r3, [pc, #52]	@ (8002744 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x138>)
 800270e:	0018      	movs	r0, r3
 8002710:	f003 fe66 	bl	80063e0 <HAL_ADC_Start_DMA>

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002714:	46c0      	nop			@ (mov r8, r8)
 8002716:	46bd      	mov	sp, r7
 8002718:	b002      	add	sp, #8
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000428 	.word	0x20000428
 8002720:	20000c84 	.word	0x20000c84
 8002724:	200008c0 	.word	0x200008c0
 8002728:	2000043c 	.word	0x2000043c
 800272c:	20000ca8 	.word	0x20000ca8
 8002730:	20000c3c 	.word	0x20000c3c
 8002734:	20000c24 	.word	0x20000c24
 8002738:	20000020 	.word	0x20000020
 800273c:	0800d784 	.word	0x0800d784
 8002740:	20000c30 	.word	0x20000c30
 8002744:	200004ec 	.word	0x200004ec

08002748 <UART2_TX_transfer_complete_callback>:

void UART2_TX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]

	//UART_DMA_TX_is_complete = YES;
}
 8002750:	46c0      	nop			@ (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	b002      	add	sp, #8
 8002756:	bd80      	pop	{r7, pc}

08002758 <UART2_RX_transfer_complete_callback>:

void UART2_RX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]

	if(Is_System_Real_Time_Status_Byte(rx_buffer) == YES){
 8002760:	4bbe      	ldr	r3, [pc, #760]	@ (8002a5c <UART2_RX_transfer_complete_callback+0x304>)
 8002762:	0018      	movs	r0, r3
 8002764:	f7fe fcb0 	bl	80010c8 <Is_System_Real_Time_Status_Byte>
 8002768:	0003      	movs	r3, r0
 800276a:	2b01      	cmp	r3, #1
 800276c:	d001      	beq.n	8002772 <UART2_RX_transfer_complete_callback+0x1a>
 800276e:	f000 fc0c 	bl	8002f8a <UART2_RX_transfer_complete_callback+0x832>

		if(Get_Status_Bit(&statuses, Start_Required_Before_Sync_Mode) == YES){
 8002772:	4bbb      	ldr	r3, [pc, #748]	@ (8002a60 <UART2_RX_transfer_complete_callback+0x308>)
 8002774:	2180      	movs	r1, #128	@ 0x80
 8002776:	0018      	movs	r0, r3
 8002778:	f003 f97a 	bl	8005a70 <Get_Status_Bit>
 800277c:	0003      	movs	r3, r0
 800277e:	2b01      	cmp	r3, #1
 8002780:	d001      	beq.n	8002786 <UART2_RX_transfer_complete_callback+0x2e>
 8002782:	f001 f895 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

			if((MIDI_CLK_fsm == NOT_COMPILING) && (IP_CAP_fsm.current_state == IDLE)
 8002786:	4bb7      	ldr	r3, [pc, #732]	@ (8002a64 <UART2_RX_transfer_complete_callback+0x30c>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d159      	bne.n	8002844 <UART2_RX_transfer_complete_callback+0xec>
 8002790:	4bb5      	ldr	r3, [pc, #724]	@ (8002a68 <UART2_RX_transfer_complete_callback+0x310>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d154      	bne.n	8002844 <UART2_RX_transfer_complete_callback+0xec>
					&& ((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 800279a:	4bb4      	ldr	r3, [pc, #720]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d013      	beq.n	80027cc <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == MANUAL_MODE)
 80027a4:	4bb1      	ldr	r3, [pc, #708]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d00e      	beq.n	80027cc <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE)
 80027ae:	4baf      	ldr	r3, [pc, #700]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b06      	cmp	r3, #6
 80027b6:	d009      	beq.n	80027cc <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == PC_MODE)
 80027b8:	4bac      	ldr	r3, [pc, #688]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d004      	beq.n	80027cc <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == CC_MODE))){
 80027c2:	4baa      	ldr	r3, [pc, #680]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d13b      	bne.n	8002844 <UART2_RX_transfer_complete_callback+0xec>

				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80027cc:	4ba3      	ldr	r3, [pc, #652]	@ (8002a5c <UART2_RX_transfer_complete_callback+0x304>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2bfa      	cmp	r3, #250	@ 0xfa
 80027d4:	d10b      	bne.n	80027ee <UART2_RX_transfer_complete_callback+0x96>

					speed_fsm.prev_state = speed_fsm.current_state;
 80027d6:	4ba5      	ldr	r3, [pc, #660]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 80027d8:	4aa4      	ldr	r2, [pc, #656]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 80027da:	7812      	ldrb	r2, [r2, #0]
 80027dc:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A0_MODE;
 80027de:	4ba3      	ldr	r3, [pc, #652]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 80027e0:	2209      	movs	r2, #9
 80027e2:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 80027e4:	4ba2      	ldr	r3, [pc, #648]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80027ea:	f001 f85e 	bl	80038aa <UART2_RX_transfer_complete_callback+0x1152>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80027ee:	4b9b      	ldr	r3, [pc, #620]	@ (8002a5c <UART2_RX_transfer_complete_callback+0x304>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2bf8      	cmp	r3, #248	@ 0xf8
 80027f6:	d001      	beq.n	80027fc <UART2_RX_transfer_complete_callback+0xa4>
 80027f8:	f001 f857 	bl	80038aa <UART2_RX_transfer_complete_callback+0x1152>

					speed_fsm.prev_state = speed_fsm.current_state;
 80027fc:	4b9b      	ldr	r3, [pc, #620]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 80027fe:	4a9b      	ldr	r2, [pc, #620]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 8002800:	7812      	ldrb	r2, [r2, #0]
 8002802:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B0_MODE;
 8002804:	4b99      	ldr	r3, [pc, #612]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 8002806:	220b      	movs	r2, #11
 8002808:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 800280a:	4b99      	ldr	r3, [pc, #612]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002810:	2380      	movs	r3, #128	@ 0x80
 8002812:	0099      	lsls	r1, r3, #2
 8002814:	23a0      	movs	r3, #160	@ 0xa0
 8002816:	05db      	lsls	r3, r3, #23
 8002818:	2200      	movs	r2, #0
 800281a:	0018      	movs	r0, r3
 800281c:	f005 f9eb 	bl	8007bf6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002820:	4b94      	ldr	r3, [pc, #592]	@ (8002a74 <UART2_RX_transfer_complete_callback+0x31c>)
 8002822:	2201      	movs	r2, #1
 8002824:	2140      	movs	r1, #64	@ 0x40
 8002826:	0018      	movs	r0, r3
 8002828:	f005 f9e5 	bl	8007bf6 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 800282c:	4b8d      	ldr	r3, [pc, #564]	@ (8002a64 <UART2_RX_transfer_complete_callback+0x30c>)
 800282e:	2201      	movs	r2, #1
 8002830:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002832:	4b8f      	ldr	r3, [pc, #572]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	3301      	adds	r3, #1
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b8c      	ldr	r3, [pc, #560]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 800283e:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002840:	f001 f833 	bl	80038aa <UART2_RX_transfer_complete_callback+0x1152>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A0_MODE){
 8002844:	4b89      	ldr	r3, [pc, #548]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b09      	cmp	r3, #9
 800284c:	d123      	bne.n	8002896 <UART2_RX_transfer_complete_callback+0x13e>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800284e:	4b83      	ldr	r3, [pc, #524]	@ (8002a5c <UART2_RX_transfer_complete_callback+0x304>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2bf8      	cmp	r3, #248	@ 0xf8
 8002856:	d001      	beq.n	800285c <UART2_RX_transfer_complete_callback+0x104>
 8002858:	f001 f82a 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	0099      	lsls	r1, r3, #2
 8002860:	23a0      	movs	r3, #160	@ 0xa0
 8002862:	05db      	lsls	r3, r3, #23
 8002864:	2200      	movs	r2, #0
 8002866:	0018      	movs	r0, r3
 8002868:	f005 f9c5 	bl	8007bf6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800286c:	4b81      	ldr	r3, [pc, #516]	@ (8002a74 <UART2_RX_transfer_complete_callback+0x31c>)
 800286e:	2201      	movs	r2, #1
 8002870:	2140      	movs	r1, #64	@ 0x40
 8002872:	0018      	movs	r0, r3
 8002874:	f005 f9bf 	bl	8007bf6 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002878:	4b7a      	ldr	r3, [pc, #488]	@ (8002a64 <UART2_RX_transfer_complete_callback+0x30c>)
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 800287e:	4b7c      	ldr	r3, [pc, #496]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	3301      	adds	r3, #1
 8002886:	b2da      	uxtb	r2, r3
 8002888:	4b79      	ldr	r3, [pc, #484]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 800288a:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 800288c:	4b77      	ldr	r3, [pc, #476]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 800288e:	220a      	movs	r2, #10
 8002890:	701a      	strb	r2, [r3, #0]
 8002892:	f001 f80d 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A1_MODE){
 8002896:	4b75      	ldr	r3, [pc, #468]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b0a      	cmp	r3, #10
 800289e:	d145      	bne.n	800292c <UART2_RX_transfer_complete_callback+0x1d4>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80028a0:	4b6e      	ldr	r3, [pc, #440]	@ (8002a5c <UART2_RX_transfer_complete_callback+0x304>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2bf8      	cmp	r3, #248	@ 0xf8
 80028a8:	d001      	beq.n	80028ae <UART2_RX_transfer_complete_callback+0x156>
 80028aa:	f001 f801 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 80028ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002a64 <UART2_RX_transfer_complete_callback+0x30c>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80028b4:	4b6e      	ldr	r3, [pc, #440]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	3301      	adds	r3, #1
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4b6c      	ldr	r3, [pc, #432]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 80028c0:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 80028c2:	4b6b      	ldr	r3, [pc, #428]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b0b      	cmp	r3, #11
 80028ca:	d80f      	bhi.n	80028ec <UART2_RX_transfer_complete_callback+0x194>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80028cc:	2380      	movs	r3, #128	@ 0x80
 80028ce:	0099      	lsls	r1, r3, #2
 80028d0:	23a0      	movs	r3, #160	@ 0xa0
 80028d2:	05db      	lsls	r3, r3, #23
 80028d4:	2200      	movs	r2, #0
 80028d6:	0018      	movs	r0, r3
 80028d8:	f005 f98d 	bl	8007bf6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80028dc:	4b65      	ldr	r3, [pc, #404]	@ (8002a74 <UART2_RX_transfer_complete_callback+0x31c>)
 80028de:	2201      	movs	r2, #1
 80028e0:	2140      	movs	r1, #64	@ 0x40
 80028e2:	0018      	movs	r0, r3
 80028e4:	f005 f987 	bl	8007bf6 <HAL_GPIO_WritePin>
 80028e8:	f000 ffe2 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 80028ec:	4b60      	ldr	r3, [pc, #384]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b18      	cmp	r3, #24
 80028f4:	d80f      	bhi.n	8002916 <UART2_RX_transfer_complete_callback+0x1be>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80028f6:	2380      	movs	r3, #128	@ 0x80
 80028f8:	0099      	lsls	r1, r3, #2
 80028fa:	23a0      	movs	r3, #160	@ 0xa0
 80028fc:	05db      	lsls	r3, r3, #23
 80028fe:	2201      	movs	r2, #1
 8002900:	0018      	movs	r0, r3
 8002902:	f005 f978 	bl	8007bf6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002906:	4b5b      	ldr	r3, [pc, #364]	@ (8002a74 <UART2_RX_transfer_complete_callback+0x31c>)
 8002908:	2200      	movs	r2, #0
 800290a:	2140      	movs	r1, #64	@ 0x40
 800290c:	0018      	movs	r0, r3
 800290e:	f005 f972 	bl	8007bf6 <HAL_GPIO_WritePin>
 8002912:	f000 ffcd 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8002916:	4b55      	ldr	r3, [pc, #340]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 8002918:	220a      	movs	r2, #10
 800291a:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 800291c:	4b53      	ldr	r3, [pc, #332]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 800291e:	2208      	movs	r2, #8
 8002920:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8002922:	4b53      	ldr	r3, [pc, #332]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
 8002928:	f000 ffc2 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE){
 800292c:	4b4f      	ldr	r3, [pc, #316]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b0b      	cmp	r3, #11
 8002934:	d142      	bne.n	80029bc <UART2_RX_transfer_complete_callback+0x264>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002936:	4b49      	ldr	r3, [pc, #292]	@ (8002a5c <UART2_RX_transfer_complete_callback+0x304>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2bf8      	cmp	r3, #248	@ 0xf8
 800293e:	d001      	beq.n	8002944 <UART2_RX_transfer_complete_callback+0x1ec>
 8002940:	f000 ffb6 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002944:	4b47      	ldr	r3, [pc, #284]	@ (8002a64 <UART2_RX_transfer_complete_callback+0x30c>)
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 800294a:	4b49      	ldr	r3, [pc, #292]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	3301      	adds	r3, #1
 8002952:	b2da      	uxtb	r2, r3
 8002954:	4b46      	ldr	r3, [pc, #280]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 8002956:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002958:	4b45      	ldr	r3, [pc, #276]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b0b      	cmp	r3, #11
 8002960:	d80f      	bhi.n	8002982 <UART2_RX_transfer_complete_callback+0x22a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002962:	2380      	movs	r3, #128	@ 0x80
 8002964:	0099      	lsls	r1, r3, #2
 8002966:	23a0      	movs	r3, #160	@ 0xa0
 8002968:	05db      	lsls	r3, r3, #23
 800296a:	2200      	movs	r2, #0
 800296c:	0018      	movs	r0, r3
 800296e:	f005 f942 	bl	8007bf6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002972:	4b40      	ldr	r3, [pc, #256]	@ (8002a74 <UART2_RX_transfer_complete_callback+0x31c>)
 8002974:	2201      	movs	r2, #1
 8002976:	2140      	movs	r1, #64	@ 0x40
 8002978:	0018      	movs	r0, r3
 800297a:	f005 f93c 	bl	8007bf6 <HAL_GPIO_WritePin>
 800297e:	f000 ff97 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002982:	4b3b      	ldr	r3, [pc, #236]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b18      	cmp	r3, #24
 800298a:	d80f      	bhi.n	80029ac <UART2_RX_transfer_complete_callback+0x254>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 800298c:	2380      	movs	r3, #128	@ 0x80
 800298e:	0099      	lsls	r1, r3, #2
 8002990:	23a0      	movs	r3, #160	@ 0xa0
 8002992:	05db      	lsls	r3, r3, #23
 8002994:	2201      	movs	r2, #1
 8002996:	0018      	movs	r0, r3
 8002998:	f005 f92d 	bl	8007bf6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800299c:	4b35      	ldr	r3, [pc, #212]	@ (8002a74 <UART2_RX_transfer_complete_callback+0x31c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	2140      	movs	r1, #64	@ 0x40
 80029a2:	0018      	movs	r0, r3
 80029a4:	f005 f927 	bl	8007bf6 <HAL_GPIO_WritePin>
 80029a8:	f000 ff82 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 80029ac:	4b30      	ldr	r3, [pc, #192]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B1_MODE;
 80029b2:	4b2e      	ldr	r3, [pc, #184]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 80029b4:	220c      	movs	r2, #12
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	f000 ff7a 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE){
 80029bc:	4b2b      	ldr	r3, [pc, #172]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b0c      	cmp	r3, #12
 80029c4:	d158      	bne.n	8002a78 <UART2_RX_transfer_complete_callback+0x320>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80029c6:	4b25      	ldr	r3, [pc, #148]	@ (8002a5c <UART2_RX_transfer_complete_callback+0x304>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2bf8      	cmp	r3, #248	@ 0xf8
 80029ce:	d138      	bne.n	8002a42 <UART2_RX_transfer_complete_callback+0x2ea>

					MIDI_CLK_fsm = COMPILING; //just in case
 80029d0:	4b24      	ldr	r3, [pc, #144]	@ (8002a64 <UART2_RX_transfer_complete_callback+0x30c>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80029d6:	4b26      	ldr	r3, [pc, #152]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	3301      	adds	r3, #1
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	4b23      	ldr	r3, [pc, #140]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 80029e2:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 80029e4:	4b22      	ldr	r3, [pc, #136]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b0b      	cmp	r3, #11
 80029ec:	d80f      	bhi.n	8002a0e <UART2_RX_transfer_complete_callback+0x2b6>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80029ee:	2380      	movs	r3, #128	@ 0x80
 80029f0:	0099      	lsls	r1, r3, #2
 80029f2:	23a0      	movs	r3, #160	@ 0xa0
 80029f4:	05db      	lsls	r3, r3, #23
 80029f6:	2200      	movs	r2, #0
 80029f8:	0018      	movs	r0, r3
 80029fa:	f005 f8fc 	bl	8007bf6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80029fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002a74 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	2140      	movs	r1, #64	@ 0x40
 8002a04:	0018      	movs	r0, r3
 8002a06:	f005 f8f6 	bl	8007bf6 <HAL_GPIO_WritePin>
 8002a0a:	f000 ff51 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002a0e:	4b18      	ldr	r3, [pc, #96]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b18      	cmp	r3, #24
 8002a16:	d80f      	bhi.n	8002a38 <UART2_RX_transfer_complete_callback+0x2e0>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002a18:	2380      	movs	r3, #128	@ 0x80
 8002a1a:	0099      	lsls	r1, r3, #2
 8002a1c:	23a0      	movs	r3, #160	@ 0xa0
 8002a1e:	05db      	lsls	r3, r3, #23
 8002a20:	2201      	movs	r2, #1
 8002a22:	0018      	movs	r0, r3
 8002a24:	f005 f8e7 	bl	8007bf6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002a28:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2140      	movs	r1, #64	@ 0x40
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f005 f8e1 	bl	8007bf6 <HAL_GPIO_WritePin>
 8002a34:	f000 ff3c 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002a38:	4b0d      	ldr	r3, [pc, #52]	@ (8002a70 <UART2_RX_transfer_complete_callback+0x318>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	f000 ff37 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002a42:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <UART2_RX_transfer_complete_callback+0x304>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2bfa      	cmp	r3, #250	@ 0xfa
 8002a4a:	d001      	beq.n	8002a50 <UART2_RX_transfer_complete_callback+0x2f8>
 8002a4c:	f000 ff30 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002a50:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <UART2_RX_transfer_complete_callback+0x314>)
 8002a52:	220d      	movs	r2, #13
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	f000 ff2b 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
 8002a5a:	46c0      	nop			@ (mov r8, r8)
 8002a5c:	200004cc 	.word	0x200004cc
 8002a60:	20000c24 	.word	0x20000c24
 8002a64:	20000ccc 	.word	0x20000ccc
 8002a68:	2000043c 	.word	0x2000043c
 8002a6c:	20000428 	.word	0x20000428
 8002a70:	20000c22 	.word	0x20000c22
 8002a74:	50000800 	.word	0x50000800
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE){
 8002a78:	4bdc      	ldr	r3, [pc, #880]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b0d      	cmp	r3, #13
 8002a80:	d160      	bne.n	8002b44 <UART2_RX_transfer_complete_callback+0x3ec>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002a82:	4bdb      	ldr	r3, [pc, #876]	@ (8002df0 <UART2_RX_transfer_complete_callback+0x698>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2bf8      	cmp	r3, #248	@ 0xf8
 8002a8a:	d001      	beq.n	8002a90 <UART2_RX_transfer_complete_callback+0x338>
 8002a8c:	f000 ff10 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8002a90:	4bd8      	ldr	r3, [pc, #864]	@ (8002df4 <UART2_RX_transfer_complete_callback+0x69c>)
 8002a92:	0018      	movs	r0, r3
 8002a94:	f001 fc38 	bl	8004308 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002a98:	2380      	movs	r3, #128	@ 0x80
 8002a9a:	0099      	lsls	r1, r3, #2
 8002a9c:	23a0      	movs	r3, #160	@ 0xa0
 8002a9e:	05db      	lsls	r3, r3, #23
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f005 f8a7 	bl	8007bf6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002aa8:	4bd3      	ldr	r3, [pc, #844]	@ (8002df8 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2140      	movs	r1, #64	@ 0x40
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f005 f8a1 	bl	8007bf6 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002ab4:	2380      	movs	r3, #128	@ 0x80
 8002ab6:	0099      	lsls	r1, r3, #2
 8002ab8:	23a0      	movs	r3, #160	@ 0xa0
 8002aba:	05db      	lsls	r3, r3, #23
 8002abc:	2200      	movs	r2, #0
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f005 f899 	bl	8007bf6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002ac4:	4bcc      	ldr	r3, [pc, #816]	@ (8002df8 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	2140      	movs	r1, #64	@ 0x40
 8002aca:	0018      	movs	r0, r3
 8002acc:	f005 f893 	bl	8007bf6 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002ad0:	4bca      	ldr	r3, [pc, #808]	@ (8002dfc <UART2_RX_transfer_complete_callback+0x6a4>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 1;
 8002ad6:	4bca      	ldr	r3, [pc, #808]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002adc:	4bc3      	ldr	r3, [pc, #780]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002ade:	220d      	movs	r2, #13
 8002ae0:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002ae2:	4bc2      	ldr	r3, [pc, #776]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8002ae8:	4bc6      	ldr	r3, [pc, #792]	@ (8002e04 <UART2_RX_transfer_complete_callback+0x6ac>)
 8002aea:	2100      	movs	r1, #0
 8002aec:	0018      	movs	r0, r3
 8002aee:	f002 ff58 	bl	80059a2 <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8002af2:	4bc5      	ldr	r3, [pc, #788]	@ (8002e08 <UART2_RX_transfer_complete_callback+0x6b0>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002af8:	4ac4      	ldr	r2, [pc, #784]	@ (8002e0c <UART2_RX_transfer_complete_callback+0x6b4>)
 8002afa:	4bbe      	ldr	r3, [pc, #760]	@ (8002df4 <UART2_RX_transfer_complete_callback+0x69c>)
 8002afc:	0011      	movs	r1, r2
 8002afe:	0018      	movs	r0, r3
 8002b00:	f001 fab0 	bl	8004064 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8002b04:	4ac2      	ldr	r2, [pc, #776]	@ (8002e10 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002b06:	4bbb      	ldr	r3, [pc, #748]	@ (8002df4 <UART2_RX_transfer_complete_callback+0x69c>)
 8002b08:	0011      	movs	r1, r2
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f001 faaa 	bl	8004064 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8002b10:	4bc0      	ldr	r3, [pc, #768]	@ (8002e14 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002b12:	2108      	movs	r1, #8
 8002b14:	0018      	movs	r0, r3
 8002b16:	f002 ffbf 	bl	8005a98 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002b1a:	4bbd      	ldr	r3, [pc, #756]	@ (8002e10 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f001 fc1e 	bl	8004360 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002b24:	4abc      	ldr	r2, [pc, #752]	@ (8002e18 <UART2_RX_transfer_complete_callback+0x6c0>)
 8002b26:	4bba      	ldr	r3, [pc, #744]	@ (8002e10 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002b28:	0011      	movs	r1, r2
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f001 fd0e 	bl	800454c <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002b30:	4bba      	ldr	r3, [pc, #744]	@ (8002e1c <UART2_RX_transfer_complete_callback+0x6c4>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	001a      	movs	r2, r3
 8002b36:	49ba      	ldr	r1, [pc, #744]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6c8>)
 8002b38:	4bba      	ldr	r3, [pc, #744]	@ (8002e24 <UART2_RX_transfer_complete_callback+0x6cc>)
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f003 fc50 	bl	80063e0 <HAL_ADC_Start_DMA>
 8002b40:	f000 feb6 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == NO)){
 8002b44:	4ba9      	ldr	r3, [pc, #676]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d146      	bne.n	8002bdc <UART2_RX_transfer_complete_callback+0x484>
 8002b4e:	4bb1      	ldr	r3, [pc, #708]	@ (8002e14 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002b50:	2120      	movs	r1, #32
 8002b52:	0018      	movs	r0, r3
 8002b54:	f002 ff8c 	bl	8005a70 <Get_Status_Bit>
 8002b58:	1e03      	subs	r3, r0, #0
 8002b5a:	d13f      	bne.n	8002bdc <UART2_RX_transfer_complete_callback+0x484>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002b5c:	4ba4      	ldr	r3, [pc, #656]	@ (8002df0 <UART2_RX_transfer_complete_callback+0x698>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2bf8      	cmp	r3, #248	@ 0xf8
 8002b64:	d001      	beq.n	8002b6a <UART2_RX_transfer_complete_callback+0x412>
 8002b66:	f000 fea3 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002b6a:	4ba4      	ldr	r3, [pc, #656]	@ (8002dfc <UART2_RX_transfer_complete_callback+0x6a4>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002b70:	4ba3      	ldr	r3, [pc, #652]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	3301      	adds	r3, #1
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4ba1      	ldr	r3, [pc, #644]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002b7c:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002b7e:	4ba0      	ldr	r3, [pc, #640]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b0b      	cmp	r3, #11
 8002b86:	d80f      	bhi.n	8002ba8 <UART2_RX_transfer_complete_callback+0x450>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002b88:	2380      	movs	r3, #128	@ 0x80
 8002b8a:	0099      	lsls	r1, r3, #2
 8002b8c:	23a0      	movs	r3, #160	@ 0xa0
 8002b8e:	05db      	lsls	r3, r3, #23
 8002b90:	2200      	movs	r2, #0
 8002b92:	0018      	movs	r0, r3
 8002b94:	f005 f82f 	bl	8007bf6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002b98:	4b97      	ldr	r3, [pc, #604]	@ (8002df8 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	2140      	movs	r1, #64	@ 0x40
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f005 f829 	bl	8007bf6 <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002ba4:	f000 fe84 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002ba8:	4b95      	ldr	r3, [pc, #596]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b18      	cmp	r3, #24
 8002bb0:	d80f      	bhi.n	8002bd2 <UART2_RX_transfer_complete_callback+0x47a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002bb2:	2380      	movs	r3, #128	@ 0x80
 8002bb4:	0099      	lsls	r1, r3, #2
 8002bb6:	23a0      	movs	r3, #160	@ 0xa0
 8002bb8:	05db      	lsls	r3, r3, #23
 8002bba:	2201      	movs	r2, #1
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f005 f81a 	bl	8007bf6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002bc2:	4b8d      	ldr	r3, [pc, #564]	@ (8002df8 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2140      	movs	r1, #64	@ 0x40
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f005 f814 	bl	8007bf6 <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002bce:	f000 fe6f 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002bd2:	4b8b      	ldr	r3, [pc, #556]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002bd8:	f000 fe6a 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8002bdc:	4b83      	ldr	r3, [pc, #524]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d14c      	bne.n	8002c80 <UART2_RX_transfer_complete_callback+0x528>
 8002be6:	4b88      	ldr	r3, [pc, #544]	@ (8002e08 <UART2_RX_transfer_complete_callback+0x6b0>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d147      	bne.n	8002c80 <UART2_RX_transfer_complete_callback+0x528>
 8002bf0:	4b88      	ldr	r3, [pc, #544]	@ (8002e14 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002bf2:	2120      	movs	r1, #32
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f002 ff3b 	bl	8005a70 <Get_Status_Bit>
 8002bfa:	0003      	movs	r3, r0
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d13f      	bne.n	8002c80 <UART2_RX_transfer_complete_callback+0x528>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c00:	4b7b      	ldr	r3, [pc, #492]	@ (8002df0 <UART2_RX_transfer_complete_callback+0x698>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2bf8      	cmp	r3, #248	@ 0xf8
 8002c08:	d11e      	bne.n	8002c48 <UART2_RX_transfer_complete_callback+0x4f0>

					MIDI_CLK_tag = 0; //just in case
 8002c0a:	4b7d      	ldr	r3, [pc, #500]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002c10:	4b7b      	ldr	r3, [pc, #492]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	3301      	adds	r3, #1
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	4b79      	ldr	r3, [pc, #484]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c1c:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_fsm = COMPILING;
 8002c1e:	4b77      	ldr	r3, [pc, #476]	@ (8002dfc <UART2_RX_transfer_complete_callback+0x6a4>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B0_MODE;
 8002c24:	4b71      	ldr	r3, [pc, #452]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002c26:	2210      	movs	r2, #16
 8002c28:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002c2a:	4b70      	ldr	r3, [pc, #448]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002c2c:	2208      	movs	r2, #8
 8002c2e:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002c30:	4b78      	ldr	r3, [pc, #480]	@ (8002e14 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c32:	2120      	movs	r1, #32
 8002c34:	0018      	movs	r0, r3
 8002c36:	f002 ff41 	bl	8005abc <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002c3a:	4b76      	ldr	r3, [pc, #472]	@ (8002e14 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c3c:	2140      	movs	r1, #64	@ 0x40
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f002 ff3c 	bl	8005abc <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c44:	f000 fe33 	bl	80038ae <UART2_RX_transfer_complete_callback+0x1156>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002c48:	4b69      	ldr	r3, [pc, #420]	@ (8002df0 <UART2_RX_transfer_complete_callback+0x698>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2bfa      	cmp	r3, #250	@ 0xfa
 8002c50:	d001      	beq.n	8002c56 <UART2_RX_transfer_complete_callback+0x4fe>
 8002c52:	f000 fe2c 	bl	80038ae <UART2_RX_transfer_complete_callback+0x1156>

					MIDI_CLK_tag = 0; //just in case
 8002c56:	4b6a      	ldr	r3, [pc, #424]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A0_MODE;
 8002c5c:	4b63      	ldr	r3, [pc, #396]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002c5e:	220e      	movs	r2, #14
 8002c60:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002c62:	4b62      	ldr	r3, [pc, #392]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002c64:	2208      	movs	r2, #8
 8002c66:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002c68:	4b6a      	ldr	r3, [pc, #424]	@ (8002e14 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c6a:	2120      	movs	r1, #32
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f002 ff25 	bl	8005abc <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002c72:	4b68      	ldr	r3, [pc, #416]	@ (8002e14 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c74:	2140      	movs	r1, #64	@ 0x40
 8002c76:	0018      	movs	r0, r3
 8002c78:	f002 ff20 	bl	8005abc <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c7c:	f000 fe17 	bl	80038ae <UART2_RX_transfer_complete_callback+0x1156>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A0_MODE){
 8002c80:	4b5a      	ldr	r3, [pc, #360]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b0e      	cmp	r3, #14
 8002c88:	d123      	bne.n	8002cd2 <UART2_RX_transfer_complete_callback+0x57a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c8a:	4b59      	ldr	r3, [pc, #356]	@ (8002df0 <UART2_RX_transfer_complete_callback+0x698>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2bf8      	cmp	r3, #248	@ 0xf8
 8002c92:	d001      	beq.n	8002c98 <UART2_RX_transfer_complete_callback+0x540>
 8002c94:	f000 fe0c 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002c98:	2380      	movs	r3, #128	@ 0x80
 8002c9a:	0099      	lsls	r1, r3, #2
 8002c9c:	23a0      	movs	r3, #160	@ 0xa0
 8002c9e:	05db      	lsls	r3, r3, #23
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f004 ffa7 	bl	8007bf6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002ca8:	4b53      	ldr	r3, [pc, #332]	@ (8002df8 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	2140      	movs	r1, #64	@ 0x40
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f004 ffa1 	bl	8007bf6 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002cb4:	4b51      	ldr	r3, [pc, #324]	@ (8002dfc <UART2_RX_transfer_complete_callback+0x6a4>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002cba:	4b51      	ldr	r3, [pc, #324]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	4b4e      	ldr	r3, [pc, #312]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cc6:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002cc8:	4b48      	ldr	r3, [pc, #288]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002cca:	220f      	movs	r2, #15
 8002ccc:	701a      	strb	r2, [r3, #0]
 8002cce:	f000 fdef 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A1_MODE){
 8002cd2:	4b46      	ldr	r3, [pc, #280]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b0f      	cmp	r3, #15
 8002cda:	d142      	bne.n	8002d62 <UART2_RX_transfer_complete_callback+0x60a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002cdc:	4b44      	ldr	r3, [pc, #272]	@ (8002df0 <UART2_RX_transfer_complete_callback+0x698>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2bf8      	cmp	r3, #248	@ 0xf8
 8002ce4:	d001      	beq.n	8002cea <UART2_RX_transfer_complete_callback+0x592>
 8002ce6:	f000 fde3 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_tag++;
 8002cea:	4b45      	ldr	r3, [pc, #276]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	4b42      	ldr	r3, [pc, #264]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cf6:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002cf8:	4b41      	ldr	r3, [pc, #260]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b0b      	cmp	r3, #11
 8002d00:	d80f      	bhi.n	8002d22 <UART2_RX_transfer_complete_callback+0x5ca>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002d02:	2380      	movs	r3, #128	@ 0x80
 8002d04:	0099      	lsls	r1, r3, #2
 8002d06:	23a0      	movs	r3, #160	@ 0xa0
 8002d08:	05db      	lsls	r3, r3, #23
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f004 ff72 	bl	8007bf6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002d12:	4b39      	ldr	r3, [pc, #228]	@ (8002df8 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	2140      	movs	r1, #64	@ 0x40
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f004 ff6c 	bl	8007bf6 <HAL_GPIO_WritePin>
 8002d1e:	f000 fdc7 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002d22:	4b37      	ldr	r3, [pc, #220]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b18      	cmp	r3, #24
 8002d2a:	d80f      	bhi.n	8002d4c <UART2_RX_transfer_complete_callback+0x5f4>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002d2c:	2380      	movs	r3, #128	@ 0x80
 8002d2e:	0099      	lsls	r1, r3, #2
 8002d30:	23a0      	movs	r3, #160	@ 0xa0
 8002d32:	05db      	lsls	r3, r3, #23
 8002d34:	2201      	movs	r2, #1
 8002d36:	0018      	movs	r0, r3
 8002d38:	f004 ff5d 	bl	8007bf6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002d3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002df8 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2140      	movs	r1, #64	@ 0x40
 8002d42:	0018      	movs	r0, r3
 8002d44:	f004 ff57 	bl	8007bf6 <HAL_GPIO_WritePin>
 8002d48:	f000 fdb2 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002d4c:	4b27      	ldr	r3, [pc, #156]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002d4e:	220f      	movs	r2, #15
 8002d50:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002d52:	4b26      	ldr	r3, [pc, #152]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002d54:	2208      	movs	r2, #8
 8002d56:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8002d58:	4b29      	ldr	r3, [pc, #164]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]
 8002d5e:	f000 fda7 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE){
 8002d62:	4b22      	ldr	r3, [pc, #136]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b10      	cmp	r3, #16
 8002d6a:	d15d      	bne.n	8002e28 <UART2_RX_transfer_complete_callback+0x6d0>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d6c:	4b20      	ldr	r3, [pc, #128]	@ (8002df0 <UART2_RX_transfer_complete_callback+0x698>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2bf8      	cmp	r3, #248	@ 0xf8
 8002d74:	d001      	beq.n	8002d7a <UART2_RX_transfer_complete_callback+0x622>
 8002d76:	f000 fd9b 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

					//when sftwre timer times out the midi clk tag is reset to 0
					MIDI_CLK_tag++;
 8002d7a:	4b21      	ldr	r3, [pc, #132]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	3301      	adds	r3, #1
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	4b1e      	ldr	r3, [pc, #120]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d86:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002d88:	4b1d      	ldr	r3, [pc, #116]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b0b      	cmp	r3, #11
 8002d90:	d80f      	bhi.n	8002db2 <UART2_RX_transfer_complete_callback+0x65a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002d92:	2380      	movs	r3, #128	@ 0x80
 8002d94:	0099      	lsls	r1, r3, #2
 8002d96:	23a0      	movs	r3, #160	@ 0xa0
 8002d98:	05db      	lsls	r3, r3, #23
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f004 ff2a 	bl	8007bf6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002da2:	4b15      	ldr	r3, [pc, #84]	@ (8002df8 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	2140      	movs	r1, #64	@ 0x40
 8002da8:	0018      	movs	r0, r3
 8002daa:	f004 ff24 	bl	8007bf6 <HAL_GPIO_WritePin>
 8002dae:	f000 fd7f 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002db2:	4b13      	ldr	r3, [pc, #76]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b18      	cmp	r3, #24
 8002dba:	d80f      	bhi.n	8002ddc <UART2_RX_transfer_complete_callback+0x684>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002dbc:	2380      	movs	r3, #128	@ 0x80
 8002dbe:	0099      	lsls	r1, r3, #2
 8002dc0:	23a0      	movs	r3, #160	@ 0xa0
 8002dc2:	05db      	lsls	r3, r3, #23
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f004 ff15 	bl	8007bf6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8002df8 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2140      	movs	r1, #64	@ 0x40
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f004 ff0f 	bl	8007bf6 <HAL_GPIO_WritePin>
 8002dd8:	f000 fd6a 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B1_MODE;
 8002ddc:	4b03      	ldr	r3, [pc, #12]	@ (8002dec <UART2_RX_transfer_complete_callback+0x694>)
 8002dde:	2211      	movs	r2, #17
 8002de0:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						MIDI_CLK_tag = 1;
 8002de2:	4b07      	ldr	r3, [pc, #28]	@ (8002e00 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
 8002de8:	f000 fd62 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
 8002dec:	20000428 	.word	0x20000428
 8002df0:	200004cc 	.word	0x200004cc
 8002df4:	20000c84 	.word	0x20000c84
 8002df8:	50000800 	.word	0x50000800
 8002dfc:	20000ccc 	.word	0x20000ccc
 8002e00:	20000c22 	.word	0x20000c22
 8002e04:	200008c0 	.word	0x200008c0
 8002e08:	2000043c 	.word	0x2000043c
 8002e0c:	20000ca8 	.word	0x20000ca8
 8002e10:	20000c3c 	.word	0x20000c3c
 8002e14:	20000c24 	.word	0x20000c24
 8002e18:	20000020 	.word	0x20000020
 8002e1c:	0800d784 	.word	0x0800d784
 8002e20:	20000c30 	.word	0x20000c30
 8002e24:	200004ec 	.word	0x200004ec
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE){
 8002e28:	4bed      	ldr	r3, [pc, #948]	@ (80031e0 <UART2_RX_transfer_complete_callback+0xa88>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b11      	cmp	r3, #17
 8002e30:	d146      	bne.n	8002ec0 <UART2_RX_transfer_complete_callback+0x768>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002e32:	4bec      	ldr	r3, [pc, #944]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2bf8      	cmp	r3, #248	@ 0xf8
 8002e3a:	d135      	bne.n	8002ea8 <UART2_RX_transfer_complete_callback+0x750>

					MIDI_CLK_tag++;
 8002e3c:	4bea      	ldr	r3, [pc, #936]	@ (80031e8 <UART2_RX_transfer_complete_callback+0xa90>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	3301      	adds	r3, #1
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	4be8      	ldr	r3, [pc, #928]	@ (80031e8 <UART2_RX_transfer_complete_callback+0xa90>)
 8002e48:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002e4a:	4be7      	ldr	r3, [pc, #924]	@ (80031e8 <UART2_RX_transfer_complete_callback+0xa90>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b0b      	cmp	r3, #11
 8002e52:	d80f      	bhi.n	8002e74 <UART2_RX_transfer_complete_callback+0x71c>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002e54:	2380      	movs	r3, #128	@ 0x80
 8002e56:	0099      	lsls	r1, r3, #2
 8002e58:	23a0      	movs	r3, #160	@ 0xa0
 8002e5a:	05db      	lsls	r3, r3, #23
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f004 fec9 	bl	8007bf6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002e64:	4be1      	ldr	r3, [pc, #900]	@ (80031ec <UART2_RX_transfer_complete_callback+0xa94>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	2140      	movs	r1, #64	@ 0x40
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f004 fec3 	bl	8007bf6 <HAL_GPIO_WritePin>
 8002e70:	f000 fd1e 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002e74:	4bdc      	ldr	r3, [pc, #880]	@ (80031e8 <UART2_RX_transfer_complete_callback+0xa90>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b18      	cmp	r3, #24
 8002e7c:	d80f      	bhi.n	8002e9e <UART2_RX_transfer_complete_callback+0x746>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002e7e:	2380      	movs	r3, #128	@ 0x80
 8002e80:	0099      	lsls	r1, r3, #2
 8002e82:	23a0      	movs	r3, #160	@ 0xa0
 8002e84:	05db      	lsls	r3, r3, #23
 8002e86:	2201      	movs	r2, #1
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f004 feb4 	bl	8007bf6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002e8e:	4bd7      	ldr	r3, [pc, #860]	@ (80031ec <UART2_RX_transfer_complete_callback+0xa94>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	2140      	movs	r1, #64	@ 0x40
 8002e94:	0018      	movs	r0, r3
 8002e96:	f004 feae 	bl	8007bf6 <HAL_GPIO_WritePin>
 8002e9a:	f000 fd09 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002e9e:	4bd2      	ldr	r3, [pc, #840]	@ (80031e8 <UART2_RX_transfer_complete_callback+0xa90>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
 8002ea4:	f000 fd04 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002ea8:	4bce      	ldr	r3, [pc, #824]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2bfa      	cmp	r3, #250	@ 0xfa
 8002eb0:	d001      	beq.n	8002eb6 <UART2_RX_transfer_complete_callback+0x75e>
 8002eb2:	f000 fcfd 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 8002eb6:	4bca      	ldr	r3, [pc, #808]	@ (80031e0 <UART2_RX_transfer_complete_callback+0xa88>)
 8002eb8:	2212      	movs	r2, #18
 8002eba:	701a      	strb	r2, [r3, #0]
 8002ebc:	f000 fcf8 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE){
 8002ec0:	4bc7      	ldr	r3, [pc, #796]	@ (80031e0 <UART2_RX_transfer_complete_callback+0xa88>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b12      	cmp	r3, #18
 8002ec8:	d001      	beq.n	8002ece <UART2_RX_transfer_complete_callback+0x776>
 8002eca:	f000 fcf1 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002ece:	4bc5      	ldr	r3, [pc, #788]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2bf8      	cmp	r3, #248	@ 0xf8
 8002ed6:	d001      	beq.n	8002edc <UART2_RX_transfer_complete_callback+0x784>
 8002ed8:	f000 fcea 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8002edc:	4bc4      	ldr	r3, [pc, #784]	@ (80031f0 <UART2_RX_transfer_complete_callback+0xa98>)
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f001 fa12 	bl	8004308 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002ee4:	2380      	movs	r3, #128	@ 0x80
 8002ee6:	0099      	lsls	r1, r3, #2
 8002ee8:	23a0      	movs	r3, #160	@ 0xa0
 8002eea:	05db      	lsls	r3, r3, #23
 8002eec:	2201      	movs	r2, #1
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f004 fe81 	bl	8007bf6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002ef4:	4bbd      	ldr	r3, [pc, #756]	@ (80031ec <UART2_RX_transfer_complete_callback+0xa94>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2140      	movs	r1, #64	@ 0x40
 8002efa:	0018      	movs	r0, r3
 8002efc:	f004 fe7b 	bl	8007bf6 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002f00:	2380      	movs	r3, #128	@ 0x80
 8002f02:	0099      	lsls	r1, r3, #2
 8002f04:	23a0      	movs	r3, #160	@ 0xa0
 8002f06:	05db      	lsls	r3, r3, #23
 8002f08:	2200      	movs	r2, #0
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f004 fe73 	bl	8007bf6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002f10:	4bb6      	ldr	r3, [pc, #728]	@ (80031ec <UART2_RX_transfer_complete_callback+0xa94>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	2140      	movs	r1, #64	@ 0x40
 8002f16:	0018      	movs	r0, r3
 8002f18:	f004 fe6d 	bl	8007bf6 <HAL_GPIO_WritePin>

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 8002f1c:	4bb0      	ldr	r3, [pc, #704]	@ (80031e0 <UART2_RX_transfer_complete_callback+0xa88>)
 8002f1e:	2212      	movs	r2, #18
 8002f20:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002f22:	4baf      	ldr	r3, [pc, #700]	@ (80031e0 <UART2_RX_transfer_complete_callback+0xa88>)
 8002f24:	2208      	movs	r2, #8
 8002f26:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 1;
 8002f28:	4baf      	ldr	r3, [pc, #700]	@ (80031e8 <UART2_RX_transfer_complete_callback+0xa90>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8002f2e:	4bb1      	ldr	r3, [pc, #708]	@ (80031f4 <UART2_RX_transfer_complete_callback+0xa9c>)
 8002f30:	2100      	movs	r1, #0
 8002f32:	0018      	movs	r0, r3
 8002f34:	f002 fd35 	bl	80059a2 <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8002f38:	4baf      	ldr	r3, [pc, #700]	@ (80031f8 <UART2_RX_transfer_complete_callback+0xaa0>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002f3e:	4aaf      	ldr	r2, [pc, #700]	@ (80031fc <UART2_RX_transfer_complete_callback+0xaa4>)
 8002f40:	4bab      	ldr	r3, [pc, #684]	@ (80031f0 <UART2_RX_transfer_complete_callback+0xa98>)
 8002f42:	0011      	movs	r1, r2
 8002f44:	0018      	movs	r0, r3
 8002f46:	f001 f88d 	bl	8004064 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8002f4a:	4aad      	ldr	r2, [pc, #692]	@ (8003200 <UART2_RX_transfer_complete_callback+0xaa8>)
 8002f4c:	4ba8      	ldr	r3, [pc, #672]	@ (80031f0 <UART2_RX_transfer_complete_callback+0xa98>)
 8002f4e:	0011      	movs	r1, r2
 8002f50:	0018      	movs	r0, r3
 8002f52:	f001 f887 	bl	8004064 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8002f56:	4bab      	ldr	r3, [pc, #684]	@ (8003204 <UART2_RX_transfer_complete_callback+0xaac>)
 8002f58:	2108      	movs	r1, #8
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f002 fd9c 	bl	8005a98 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002f60:	4ba7      	ldr	r3, [pc, #668]	@ (8003200 <UART2_RX_transfer_complete_callback+0xaa8>)
 8002f62:	2100      	movs	r1, #0
 8002f64:	0018      	movs	r0, r3
 8002f66:	f001 f9fb 	bl	8004360 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002f6a:	4aa7      	ldr	r2, [pc, #668]	@ (8003208 <UART2_RX_transfer_complete_callback+0xab0>)
 8002f6c:	4ba4      	ldr	r3, [pc, #656]	@ (8003200 <UART2_RX_transfer_complete_callback+0xaa8>)
 8002f6e:	0011      	movs	r1, r2
 8002f70:	0018      	movs	r0, r3
 8002f72:	f001 faeb 	bl	800454c <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002f76:	4ba5      	ldr	r3, [pc, #660]	@ (800320c <UART2_RX_transfer_complete_callback+0xab4>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	001a      	movs	r2, r3
 8002f7c:	49a4      	ldr	r1, [pc, #656]	@ (8003210 <UART2_RX_transfer_complete_callback+0xab8>)
 8002f7e:	4ba5      	ldr	r3, [pc, #660]	@ (8003214 <UART2_RX_transfer_complete_callback+0xabc>)
 8002f80:	0018      	movs	r0, r3
 8002f82:	f003 fa2d 	bl	80063e0 <HAL_ADC_Start_DMA>
 8002f86:	f000 fc93 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
		}
	}
	//not a realtime status byte
	else{

		if(active_status_byte == 0){
 8002f8a:	4ba3      	ldr	r3, [pc, #652]	@ (8003218 <UART2_RX_transfer_complete_callback+0xac0>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d000      	beq.n	8002f96 <UART2_RX_transfer_complete_callback+0x83e>
 8002f94:	e29e      	b.n	80034d4 <UART2_RX_transfer_complete_callback+0xd7c>

			if(running_status_byte == 0){
 8002f96:	4ba1      	ldr	r3, [pc, #644]	@ (800321c <UART2_RX_transfer_complete_callback+0xac4>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d000      	beq.n	8002fa2 <UART2_RX_transfer_complete_callback+0x84a>
 8002fa0:	e0a3      	b.n	80030ea <UART2_RX_transfer_complete_callback+0x992>

				if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8002fa2:	4b9f      	ldr	r3, [pc, #636]	@ (8003220 <UART2_RX_transfer_complete_callback+0xac8>)
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7fe f82c 	bl	8001002 <Is_Data_Buffer_Empty>
 8002faa:	0003      	movs	r3, r0
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d001      	beq.n	8002fb4 <UART2_RX_transfer_complete_callback+0x85c>
 8002fb0:	f000 fc7e 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

					if(Is_Status_Byte(rx_buffer) == YES){
 8002fb4:	4b8b      	ldr	r3, [pc, #556]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f7fd fee2 	bl	8000d80 <Is_Status_Byte>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d001      	beq.n	8002fc6 <UART2_RX_transfer_complete_callback+0x86e>
 8002fc2:	f000 fc75 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_PC_Status_Byte(rx_buffer) == YES){
 8002fc6:	4b87      	ldr	r3, [pc, #540]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7fd ff0b 	bl	8000de4 <Is_PC_Status_Byte>
 8002fce:	0003      	movs	r3, r0
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d134      	bne.n	800303e <UART2_RX_transfer_complete_callback+0x8e6>

							running_status_byte = (uint8_t)*rx_buffer;
 8002fd4:	4b83      	ldr	r3, [pc, #524]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	4b90      	ldr	r3, [pc, #576]	@ (800321c <UART2_RX_transfer_complete_callback+0xac4>)
 8002fdc:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8002fde:	4b91      	ldr	r3, [pc, #580]	@ (8003224 <UART2_RX_transfer_complete_callback+0xacc>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	4b7f      	ldr	r3, [pc, #508]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002fe6:	0011      	movs	r1, r2
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f7fd ffe9 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d10d      	bne.n	8003010 <UART2_RX_transfer_complete_callback+0x8b8>

								active_status_byte = (uint8_t)*rx_buffer;
 8002ff4:	4b7b      	ldr	r3, [pc, #492]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	4b87      	ldr	r3, [pc, #540]	@ (8003218 <UART2_RX_transfer_complete_callback+0xac0>)
 8002ffc:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8002ffe:	2380      	movs	r3, #128	@ 0x80
 8003000:	005a      	lsls	r2, r3, #1
 8003002:	4b80      	ldr	r3, [pc, #512]	@ (8003204 <UART2_RX_transfer_complete_callback+0xaac>)
 8003004:	0011      	movs	r1, r2
 8003006:	0018      	movs	r0, r3
 8003008:	f002 fd46 	bl	8005a98 <Set_Status_Bit>
 800300c:	f000 fc50 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 8003010:	4b7c      	ldr	r3, [pc, #496]	@ (8003204 <UART2_RX_transfer_complete_callback+0xaac>)
 8003012:	0018      	movs	r0, r3
 8003014:	f7fe f88b 	bl	800112e <Is_OMNI_On>
 8003018:	0003      	movs	r3, r0
 800301a:	2b01      	cmp	r3, #1
 800301c:	d001      	beq.n	8003022 <UART2_RX_transfer_complete_callback+0x8ca>
 800301e:	f000 fc47 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 8003022:	4b70      	ldr	r3, [pc, #448]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	4b7b      	ldr	r3, [pc, #492]	@ (8003218 <UART2_RX_transfer_complete_callback+0xac0>)
 800302a:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800302c:	2380      	movs	r3, #128	@ 0x80
 800302e:	005a      	lsls	r2, r3, #1
 8003030:	4b74      	ldr	r3, [pc, #464]	@ (8003204 <UART2_RX_transfer_complete_callback+0xaac>)
 8003032:	0011      	movs	r1, r2
 8003034:	0018      	movs	r0, r3
 8003036:	f002 fd2f 	bl	8005a98 <Set_Status_Bit>
 800303a:	f000 fc39 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_CC_Status_Byte(rx_buffer) == YES){
 800303e:	4b69      	ldr	r3, [pc, #420]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003040:	0018      	movs	r0, r3
 8003042:	f7fd feeb 	bl	8000e1c <Is_CC_Status_Byte>
 8003046:	0003      	movs	r3, r0
 8003048:	2b01      	cmp	r3, #1
 800304a:	d134      	bne.n	80030b6 <UART2_RX_transfer_complete_callback+0x95e>

							running_status_byte = (uint8_t)*rx_buffer;
 800304c:	4b65      	ldr	r3, [pc, #404]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	b2da      	uxtb	r2, r3
 8003052:	4b72      	ldr	r3, [pc, #456]	@ (800321c <UART2_RX_transfer_complete_callback+0xac4>)
 8003054:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003056:	4b73      	ldr	r3, [pc, #460]	@ (8003224 <UART2_RX_transfer_complete_callback+0xacc>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	b2da      	uxtb	r2, r3
 800305c:	4b61      	ldr	r3, [pc, #388]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 800305e:	0011      	movs	r1, r2
 8003060:	0018      	movs	r0, r3
 8003062:	f7fd ffad 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003066:	0003      	movs	r3, r0
 8003068:	2b01      	cmp	r3, #1
 800306a:	d10d      	bne.n	8003088 <UART2_RX_transfer_complete_callback+0x930>

								active_status_byte = (uint8_t)*rx_buffer;
 800306c:	4b5d      	ldr	r3, [pc, #372]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	b2da      	uxtb	r2, r3
 8003072:	4b69      	ldr	r3, [pc, #420]	@ (8003218 <UART2_RX_transfer_complete_callback+0xac0>)
 8003074:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003076:	2380      	movs	r3, #128	@ 0x80
 8003078:	005a      	lsls	r2, r3, #1
 800307a:	4b62      	ldr	r3, [pc, #392]	@ (8003204 <UART2_RX_transfer_complete_callback+0xaac>)
 800307c:	0011      	movs	r1, r2
 800307e:	0018      	movs	r0, r3
 8003080:	f002 fd0a 	bl	8005a98 <Set_Status_Bit>
 8003084:	f000 fc14 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 8003088:	4b5e      	ldr	r3, [pc, #376]	@ (8003204 <UART2_RX_transfer_complete_callback+0xaac>)
 800308a:	0018      	movs	r0, r3
 800308c:	f7fe f84f 	bl	800112e <Is_OMNI_On>
 8003090:	0003      	movs	r3, r0
 8003092:	2b01      	cmp	r3, #1
 8003094:	d001      	beq.n	800309a <UART2_RX_transfer_complete_callback+0x942>
 8003096:	f000 fc0b 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 800309a:	4b52      	ldr	r3, [pc, #328]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	4b5d      	ldr	r3, [pc, #372]	@ (8003218 <UART2_RX_transfer_complete_callback+0xac0>)
 80030a2:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80030a4:	2380      	movs	r3, #128	@ 0x80
 80030a6:	005a      	lsls	r2, r3, #1
 80030a8:	4b56      	ldr	r3, [pc, #344]	@ (8003204 <UART2_RX_transfer_complete_callback+0xaac>)
 80030aa:	0011      	movs	r1, r2
 80030ac:	0018      	movs	r0, r3
 80030ae:	f002 fcf3 	bl	8005a98 <Set_Status_Bit>
 80030b2:	f000 fbfd 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 80030b6:	4b4b      	ldr	r3, [pc, #300]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 80030b8:	0018      	movs	r0, r3
 80030ba:	f7fd ff71 	bl	8000fa0 <Is_Sysex_Start_Status_Byte>
 80030be:	0003      	movs	r3, r0
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d001      	beq.n	80030c8 <UART2_RX_transfer_complete_callback+0x970>
 80030c4:	f000 fbf4 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

							active_status_byte = (uint8_t)*rx_buffer;
 80030c8:	4b46      	ldr	r3, [pc, #280]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	4b52      	ldr	r3, [pc, #328]	@ (8003218 <UART2_RX_transfer_complete_callback+0xac0>)
 80030d0:	701a      	strb	r2, [r3, #0]
							running_status_byte = 0;
 80030d2:	4b52      	ldr	r3, [pc, #328]	@ (800321c <UART2_RX_transfer_complete_callback+0xac4>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80030d8:	2380      	movs	r3, #128	@ 0x80
 80030da:	005a      	lsls	r2, r3, #1
 80030dc:	4b49      	ldr	r3, [pc, #292]	@ (8003204 <UART2_RX_transfer_complete_callback+0xaac>)
 80030de:	0011      	movs	r1, r2
 80030e0:	0018      	movs	r0, r3
 80030e2:	f002 fcd9 	bl	8005a98 <Set_Status_Bit>
 80030e6:	f000 fbe3 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

						}
					}
				}
			}
			else if(running_status_byte != 0){
 80030ea:	4b4c      	ldr	r3, [pc, #304]	@ (800321c <UART2_RX_transfer_complete_callback+0xac4>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <UART2_RX_transfer_complete_callback+0x9a0>
 80030f4:	f000 fbdc 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

				if(Is_Data_Byte(rx_buffer) == YES){
 80030f8:	4b3a      	ldr	r3, [pc, #232]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 80030fa:	0018      	movs	r0, r3
 80030fc:	f7fd fe59 	bl	8000db2 <Is_Data_Byte>
 8003100:	0003      	movs	r3, r0
 8003102:	2b01      	cmp	r3, #1
 8003104:	d000      	beq.n	8003108 <UART2_RX_transfer_complete_callback+0x9b0>
 8003106:	e151      	b.n	80033ac <UART2_RX_transfer_complete_callback+0xc54>

					Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003108:	2380      	movs	r3, #128	@ 0x80
 800310a:	005a      	lsls	r2, r3, #1
 800310c:	4b3d      	ldr	r3, [pc, #244]	@ (8003204 <UART2_RX_transfer_complete_callback+0xaac>)
 800310e:	0011      	movs	r1, r2
 8003110:	0018      	movs	r0, r3
 8003112:	f002 fcc1 	bl	8005a98 <Set_Status_Bit>

					if(Is_PC_Status_Byte(&running_status_byte) == YES){
 8003116:	4b41      	ldr	r3, [pc, #260]	@ (800321c <UART2_RX_transfer_complete_callback+0xac4>)
 8003118:	0018      	movs	r0, r3
 800311a:	f7fd fe63 	bl	8000de4 <Is_PC_Status_Byte>
 800311e:	0003      	movs	r3, r0
 8003120:	2b01      	cmp	r3, #1
 8003122:	d143      	bne.n	80031ac <UART2_RX_transfer_complete_callback+0xa54>

						if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 8003124:	4b3f      	ldr	r3, [pc, #252]	@ (8003224 <UART2_RX_transfer_complete_callback+0xacc>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	b2da      	uxtb	r2, r3
 800312a:	4b3c      	ldr	r3, [pc, #240]	@ (800321c <UART2_RX_transfer_complete_callback+0xac4>)
 800312c:	0011      	movs	r1, r2
 800312e:	0018      	movs	r0, r3
 8003130:	f7fd ff46 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003134:	0003      	movs	r3, r0
 8003136:	2b01      	cmp	r3, #1
 8003138:	d008      	beq.n	800314c <UART2_RX_transfer_complete_callback+0x9f4>
																|| (Is_OMNI_On(&statuses) == YES)){
 800313a:	4b32      	ldr	r3, [pc, #200]	@ (8003204 <UART2_RX_transfer_complete_callback+0xaac>)
 800313c:	0018      	movs	r0, r3
 800313e:	f7fd fff6 	bl	800112e <Is_OMNI_On>
 8003142:	0003      	movs	r3, r0
 8003144:	2b01      	cmp	r3, #1
 8003146:	d001      	beq.n	800314c <UART2_RX_transfer_complete_callback+0x9f4>
 8003148:	f000 fbb2 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

							if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800314c:	4b34      	ldr	r3, [pc, #208]	@ (8003220 <UART2_RX_transfer_complete_callback+0xac8>)
 800314e:	0018      	movs	r0, r3
 8003150:	f7fd ff57 	bl	8001002 <Is_Data_Buffer_Empty>
 8003154:	0003      	movs	r3, r0
 8003156:	2b01      	cmp	r3, #1
 8003158:	d001      	beq.n	800315e <UART2_RX_transfer_complete_callback+0xa06>
 800315a:	f000 fba9 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

								//first data byte received
								if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 800315e:	4b21      	ldr	r3, [pc, #132]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003160:	2104      	movs	r1, #4
 8003162:	0018      	movs	r0, r3
 8003164:	f7fd ff9b 	bl	800109e <Is_Program_Change_Data_Byte_In_Range>
 8003168:	0003      	movs	r3, r0
 800316a:	2b01      	cmp	r3, #1
 800316c:	d10f      	bne.n	800318e <UART2_RX_transfer_complete_callback+0xa36>

									Set_All_Pots_to_PC_Mode();
 800316e:	f7fd fdcf 	bl	8000d10 <Set_All_Pots_to_PC_Mode>
									preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 8003172:	4b1c      	ldr	r3, [pc, #112]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	3301      	adds	r3, #1
 800317a:	b2da      	uxtb	r2, r3
 800317c:	4b2a      	ldr	r3, [pc, #168]	@ (8003228 <UART2_RX_transfer_complete_callback+0xad0>)
 800317e:	701a      	strb	r2, [r3, #0]
									Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 8003180:	f7fd f9ce 	bl	8000520 <Update_Params_Based_On_Mode_Selected>
									Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003184:	4b1f      	ldr	r3, [pc, #124]	@ (8003204 <UART2_RX_transfer_complete_callback+0xaac>)
 8003186:	2108      	movs	r1, #8
 8003188:	0018      	movs	r0, r3
 800318a:	f002 fc97 	bl	8005abc <Clear_Status_Bit>
								}

								//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
								Clear_Data_Buffer(&MIDI_data);
 800318e:	4b24      	ldr	r3, [pc, #144]	@ (8003220 <UART2_RX_transfer_complete_callback+0xac8>)
 8003190:	0018      	movs	r0, r3
 8003192:	f7fd ff66 	bl	8001062 <Clear_Data_Buffer>
								active_status_byte = 0;
 8003196:	4b20      	ldr	r3, [pc, #128]	@ (8003218 <UART2_RX_transfer_complete_callback+0xac0>)
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]

								//not really required
								Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 800319c:	4a19      	ldr	r2, [pc, #100]	@ (8003204 <UART2_RX_transfer_complete_callback+0xaac>)
 800319e:	4b23      	ldr	r3, [pc, #140]	@ (800322c <UART2_RX_transfer_complete_callback+0xad4>)
 80031a0:	0011      	movs	r1, r2
 80031a2:	0018      	movs	r0, r3
 80031a4:	f7fd ffdd 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>
 80031a8:	f000 fb82 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(&running_status_byte) == YES){
 80031ac:	4b1b      	ldr	r3, [pc, #108]	@ (800321c <UART2_RX_transfer_complete_callback+0xac4>)
 80031ae:	0018      	movs	r0, r3
 80031b0:	f7fd fe34 	bl	8000e1c <Is_CC_Status_Byte>
 80031b4:	0003      	movs	r3, r0
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d001      	beq.n	80031be <UART2_RX_transfer_complete_callback+0xa66>
 80031ba:	f000 fb79 	bl	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80031be:	4b18      	ldr	r3, [pc, #96]	@ (8003220 <UART2_RX_transfer_complete_callback+0xac8>)
 80031c0:	0018      	movs	r0, r3
 80031c2:	f7fd ff1e 	bl	8001002 <Is_Data_Buffer_Empty>
 80031c6:	0003      	movs	r3, r0
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d131      	bne.n	8003230 <UART2_RX_transfer_complete_callback+0xad8>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 80031cc:	4b05      	ldr	r3, [pc, #20]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	4b13      	ldr	r3, [pc, #76]	@ (8003220 <UART2_RX_transfer_complete_callback+0xac8>)
 80031d4:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 80031d6:	4b15      	ldr	r3, [pc, #84]	@ (800322c <UART2_RX_transfer_complete_callback+0xad4>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	e368      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
 80031de:	46c0      	nop			@ (mov r8, r8)
 80031e0:	20000428 	.word	0x20000428
 80031e4:	200004cc 	.word	0x200004cc
 80031e8:	20000c22 	.word	0x20000c22
 80031ec:	50000800 	.word	0x50000800
 80031f0:	20000c84 	.word	0x20000c84
 80031f4:	200008c0 	.word	0x200008c0
 80031f8:	2000043c 	.word	0x2000043c
 80031fc:	20000ca8 	.word	0x20000ca8
 8003200:	20000c3c 	.word	0x20000c3c
 8003204:	20000c24 	.word	0x20000c24
 8003208:	20000020 	.word	0x20000020
 800320c:	0800d784 	.word	0x0800d784
 8003210:	20000c30 	.word	0x20000c30
 8003214:	200004ec 	.word	0x200004ec
 8003218:	200004be 	.word	0x200004be
 800321c:	200004bf 	.word	0x200004bf
 8003220:	200004c0 	.word	0x200004c0
 8003224:	200004bd 	.word	0x200004bd
 8003228:	200004b0 	.word	0x200004b0
 800322c:	20000c2c 	.word	0x20000c2c

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 8003230:	4bd6      	ldr	r3, [pc, #856]	@ (800358c <UART2_RX_transfer_complete_callback+0xe34>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	b2da      	uxtb	r2, r3
 8003236:	4bd6      	ldr	r3, [pc, #856]	@ (8003590 <UART2_RX_transfer_complete_callback+0xe38>)
 8003238:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 800323a:	4ad6      	ldr	r2, [pc, #856]	@ (8003594 <UART2_RX_transfer_complete_callback+0xe3c>)
 800323c:	4bd6      	ldr	r3, [pc, #856]	@ (8003598 <UART2_RX_transfer_complete_callback+0xe40>)
 800323e:	0011      	movs	r1, r2
 8003240:	0018      	movs	r0, r3
 8003242:	f7fd ff8e 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003246:	4bd2      	ldr	r3, [pc, #840]	@ (8003590 <UART2_RX_transfer_complete_callback+0xe38>)
 8003248:	0018      	movs	r0, r3
 800324a:	f7fd fe03 	bl	8000e54 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 800324e:	0003      	movs	r3, r0
 8003250:	2b01      	cmp	r3, #1
 8003252:	d14c      	bne.n	80032ee <UART2_RX_transfer_complete_callback+0xb96>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES){
 8003254:	4bd1      	ldr	r3, [pc, #836]	@ (800359c <UART2_RX_transfer_complete_callback+0xe44>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	4bd1      	ldr	r3, [pc, #836]	@ (80035a0 <UART2_RX_transfer_complete_callback+0xe48>)
 800325c:	0011      	movs	r1, r2
 800325e:	0018      	movs	r0, r3
 8003260:	f7fd feae 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003264:	0003      	movs	r3, r0
 8003266:	2b01      	cmp	r3, #1
 8003268:	d139      	bne.n	80032de <UART2_RX_transfer_complete_callback+0xb86>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 800326a:	4ace      	ldr	r2, [pc, #824]	@ (80035a4 <UART2_RX_transfer_complete_callback+0xe4c>)
 800326c:	4bc8      	ldr	r3, [pc, #800]	@ (8003590 <UART2_RX_transfer_complete_callback+0xe38>)
 800326e:	0011      	movs	r1, r2
 8003270:	0018      	movs	r0, r3
 8003272:	f7fd fe4e 	bl	8000f12 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 8003276:	0003      	movs	r3, r0
 8003278:	2b01      	cmp	r3, #1
 800327a:	d130      	bne.n	80032de <UART2_RX_transfer_complete_callback+0xb86>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 800327c:	4bc4      	ldr	r3, [pc, #784]	@ (8003590 <UART2_RX_transfer_complete_callback+0xe38>)
 800327e:	785b      	ldrb	r3, [r3, #1]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b79      	cmp	r3, #121	@ 0x79
 8003284:	d10b      	bne.n	800329e <UART2_RX_transfer_complete_callback+0xb46>

											Reset_All_Controllers(&params, &delay_line);
 8003286:	4ac8      	ldr	r2, [pc, #800]	@ (80035a8 <UART2_RX_transfer_complete_callback+0xe50>)
 8003288:	4bc8      	ldr	r3, [pc, #800]	@ (80035ac <UART2_RX_transfer_complete_callback+0xe54>)
 800328a:	0011      	movs	r1, r2
 800328c:	0018      	movs	r0, r3
 800328e:	f7fd ff83 	bl	8001198 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003292:	4bc0      	ldr	r3, [pc, #768]	@ (8003594 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003294:	2108      	movs	r1, #8
 8003296:	0018      	movs	r0, r3
 8003298:	f002 fc10 	bl	8005abc <Clear_Status_Bit>
 800329c:	e01f      	b.n	80032de <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 800329e:	4bbc      	ldr	r3, [pc, #752]	@ (8003590 <UART2_RX_transfer_complete_callback+0xe38>)
 80032a0:	785b      	ldrb	r3, [r3, #1]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b7a      	cmp	r3, #122	@ 0x7a
 80032a6:	d107      	bne.n	80032b8 <UART2_RX_transfer_complete_callback+0xb60>

											Set_Local_Control();
 80032a8:	f7fd ffd0 	bl	800124c <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80032ac:	4bb9      	ldr	r3, [pc, #740]	@ (8003594 <UART2_RX_transfer_complete_callback+0xe3c>)
 80032ae:	2108      	movs	r1, #8
 80032b0:	0018      	movs	r0, r3
 80032b2:	f002 fc03 	bl	8005abc <Clear_Status_Bit>
 80032b6:	e012      	b.n	80032de <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 80032b8:	4bb5      	ldr	r3, [pc, #724]	@ (8003590 <UART2_RX_transfer_complete_callback+0xe38>)
 80032ba:	785b      	ldrb	r3, [r3, #1]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b7c      	cmp	r3, #124	@ 0x7c
 80032c0:	d104      	bne.n	80032cc <UART2_RX_transfer_complete_callback+0xb74>

											Set_OMNI_Off(&statuses);
 80032c2:	4bb4      	ldr	r3, [pc, #720]	@ (8003594 <UART2_RX_transfer_complete_callback+0xe3c>)
 80032c4:	0018      	movs	r0, r3
 80032c6:	f7fd fff9 	bl	80012bc <Set_OMNI_Off>
 80032ca:	e008      	b.n	80032de <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 80032cc:	4bb0      	ldr	r3, [pc, #704]	@ (8003590 <UART2_RX_transfer_complete_callback+0xe38>)
 80032ce:	785b      	ldrb	r3, [r3, #1]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b7d      	cmp	r3, #125	@ 0x7d
 80032d4:	d103      	bne.n	80032de <UART2_RX_transfer_complete_callback+0xb86>

											Set_OMNI_On(&statuses);
 80032d6:	4baf      	ldr	r3, [pc, #700]	@ (8003594 <UART2_RX_transfer_complete_callback+0xe3c>)
 80032d8:	0018      	movs	r0, r3
 80032da:	f7fd ffff 	bl	80012dc <Set_OMNI_On>
										}
									}
								}

								//not required
								active_status_byte = 0;
 80032de:	4bb4      	ldr	r3, [pc, #720]	@ (80035b0 <UART2_RX_transfer_complete_callback+0xe58>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80032e4:	4baa      	ldr	r3, [pc, #680]	@ (8003590 <UART2_RX_transfer_complete_callback+0xe38>)
 80032e6:	0018      	movs	r0, r3
 80032e8:	f7fd febb 	bl	8001062 <Clear_Data_Buffer>
 80032ec:	e2e0      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80032ee:	4ba8      	ldr	r3, [pc, #672]	@ (8003590 <UART2_RX_transfer_complete_callback+0xe38>)
 80032f0:	0018      	movs	r0, r3
 80032f2:	f7fd fddb 	bl	8000eac <Is_Utilised_CC_First_Data_Byte>
 80032f6:	0003      	movs	r3, r0
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d14f      	bne.n	800339c <UART2_RX_transfer_complete_callback+0xc44>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 80032fc:	4ba7      	ldr	r3, [pc, #668]	@ (800359c <UART2_RX_transfer_complete_callback+0xe44>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	b2da      	uxtb	r2, r3
 8003302:	4ba7      	ldr	r3, [pc, #668]	@ (80035a0 <UART2_RX_transfer_complete_callback+0xe48>)
 8003304:	0011      	movs	r1, r2
 8003306:	0018      	movs	r0, r3
 8003308:	f7fd fe5a 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 800330c:	0003      	movs	r3, r0
 800330e:	2b01      	cmp	r3, #1
 8003310:	d006      	beq.n	8003320 <UART2_RX_transfer_complete_callback+0xbc8>
										|| (Is_OMNI_On(&statuses) == YES)){
 8003312:	4ba0      	ldr	r3, [pc, #640]	@ (8003594 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003314:	0018      	movs	r0, r3
 8003316:	f7fd ff0a 	bl	800112e <Is_OMNI_On>
 800331a:	0003      	movs	r3, r0
 800331c:	2b01      	cmp	r3, #1
 800331e:	d135      	bne.n	800338c <UART2_RX_transfer_complete_callback+0xc34>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 8003320:	4b9b      	ldr	r3, [pc, #620]	@ (8003590 <UART2_RX_transfer_complete_callback+0xe38>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b14      	cmp	r3, #20
 8003328:	d104      	bne.n	8003334 <UART2_RX_transfer_complete_callback+0xbdc>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 800332a:	4b9e      	ldr	r3, [pc, #632]	@ (80035a4 <UART2_RX_transfer_complete_callback+0xe4c>)
 800332c:	0018      	movs	r0, r3
 800332e:	f7fd fc6d 	bl	8000c0c <Set_Waveshape_to_CC_Mode_and_Value>
 8003332:	e02b      	b.n	800338c <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 8003334:	4b96      	ldr	r3, [pc, #600]	@ (8003590 <UART2_RX_transfer_complete_callback+0xe38>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b15      	cmp	r3, #21
 800333c:	d109      	bne.n	8003352 <UART2_RX_transfer_complete_callback+0xbfa>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 800333e:	4b99      	ldr	r3, [pc, #612]	@ (80035a4 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003340:	0018      	movs	r0, r3
 8003342:	f7fd fc7d 	bl	8000c40 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003346:	4b93      	ldr	r3, [pc, #588]	@ (8003594 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003348:	2108      	movs	r1, #8
 800334a:	0018      	movs	r0, r3
 800334c:	f002 fbb6 	bl	8005abc <Clear_Status_Bit>
 8003350:	e01c      	b.n	800338c <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8003352:	4b8f      	ldr	r3, [pc, #572]	@ (8003590 <UART2_RX_transfer_complete_callback+0xe38>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b16      	cmp	r3, #22
 800335a:	d104      	bne.n	8003366 <UART2_RX_transfer_complete_callback+0xc0e>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 800335c:	4b91      	ldr	r3, [pc, #580]	@ (80035a4 <UART2_RX_transfer_complete_callback+0xe4c>)
 800335e:	0018      	movs	r0, r3
 8003360:	f7fd fc88 	bl	8000c74 <Set_Depth_to_CC_Mode_and_Value>
 8003364:	e012      	b.n	800338c <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8003366:	4b8a      	ldr	r3, [pc, #552]	@ (8003590 <UART2_RX_transfer_complete_callback+0xe38>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b17      	cmp	r3, #23
 800336e:	d104      	bne.n	800337a <UART2_RX_transfer_complete_callback+0xc22>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003370:	4b8c      	ldr	r3, [pc, #560]	@ (80035a4 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003372:	0018      	movs	r0, r3
 8003374:	f7fd fc98 	bl	8000ca8 <Set_Symmetry_to_CC_Mode_and_Value>
 8003378:	e008      	b.n	800338c <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 800337a:	4b85      	ldr	r3, [pc, #532]	@ (8003590 <UART2_RX_transfer_complete_callback+0xe38>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b18      	cmp	r3, #24
 8003382:	d103      	bne.n	800338c <UART2_RX_transfer_complete_callback+0xc34>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003384:	4b87      	ldr	r3, [pc, #540]	@ (80035a4 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003386:	0018      	movs	r0, r3
 8003388:	f7fd fca8 	bl	8000cdc <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 800338c:	4b88      	ldr	r3, [pc, #544]	@ (80035b0 <UART2_RX_transfer_complete_callback+0xe58>)
 800338e:	2200      	movs	r2, #0
 8003390:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003392:	4b7f      	ldr	r3, [pc, #508]	@ (8003590 <UART2_RX_transfer_complete_callback+0xe38>)
 8003394:	0018      	movs	r0, r3
 8003396:	f7fd fe64 	bl	8001062 <Clear_Data_Buffer>
 800339a:	e289      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 800339c:	4b84      	ldr	r3, [pc, #528]	@ (80035b0 <UART2_RX_transfer_complete_callback+0xe58>)
 800339e:	2200      	movs	r2, #0
 80033a0:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80033a2:	4b7b      	ldr	r3, [pc, #492]	@ (8003590 <UART2_RX_transfer_complete_callback+0xe38>)
 80033a4:	0018      	movs	r0, r3
 80033a6:	f7fd fe5c 	bl	8001062 <Clear_Data_Buffer>
 80033aa:	e281      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					//don't need to check Sysex with running status, as not supported by MIDI
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 80033ac:	4b78      	ldr	r3, [pc, #480]	@ (8003590 <UART2_RX_transfer_complete_callback+0xe38>)
 80033ae:	0018      	movs	r0, r3
 80033b0:	f7fd fe57 	bl	8001062 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80033b4:	4a77      	ldr	r2, [pc, #476]	@ (8003594 <UART2_RX_transfer_complete_callback+0xe3c>)
 80033b6:	4b78      	ldr	r3, [pc, #480]	@ (8003598 <UART2_RX_transfer_complete_callback+0xe40>)
 80033b8:	0011      	movs	r1, r2
 80033ba:	0018      	movs	r0, r3
 80033bc:	f7fd fed1 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 80033c0:	4b72      	ldr	r3, [pc, #456]	@ (800358c <UART2_RX_transfer_complete_callback+0xe34>)
 80033c2:	0018      	movs	r0, r3
 80033c4:	f7fd fd0e 	bl	8000de4 <Is_PC_Status_Byte>
 80033c8:	0003      	movs	r3, r0
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d131      	bne.n	8003432 <UART2_RX_transfer_complete_callback+0xcda>

						running_status_byte = (uint8_t)*rx_buffer;
 80033ce:	4b6f      	ldr	r3, [pc, #444]	@ (800358c <UART2_RX_transfer_complete_callback+0xe34>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	4b72      	ldr	r3, [pc, #456]	@ (80035a0 <UART2_RX_transfer_complete_callback+0xe48>)
 80033d6:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80033d8:	4b70      	ldr	r3, [pc, #448]	@ (800359c <UART2_RX_transfer_complete_callback+0xe44>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4b6b      	ldr	r3, [pc, #428]	@ (800358c <UART2_RX_transfer_complete_callback+0xe34>)
 80033e0:	0011      	movs	r1, r2
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7fd fdec 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80033e8:	0003      	movs	r3, r0
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d10c      	bne.n	8003408 <UART2_RX_transfer_complete_callback+0xcb0>

							active_status_byte = (uint8_t)*rx_buffer;
 80033ee:	4b67      	ldr	r3, [pc, #412]	@ (800358c <UART2_RX_transfer_complete_callback+0xe34>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	4b6e      	ldr	r3, [pc, #440]	@ (80035b0 <UART2_RX_transfer_complete_callback+0xe58>)
 80033f6:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80033f8:	2380      	movs	r3, #128	@ 0x80
 80033fa:	005a      	lsls	r2, r3, #1
 80033fc:	4b65      	ldr	r3, [pc, #404]	@ (8003594 <UART2_RX_transfer_complete_callback+0xe3c>)
 80033fe:	0011      	movs	r1, r2
 8003400:	0018      	movs	r0, r3
 8003402:	f002 fb49 	bl	8005a98 <Set_Status_Bit>
 8003406:	e253      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003408:	4b62      	ldr	r3, [pc, #392]	@ (8003594 <UART2_RX_transfer_complete_callback+0xe3c>)
 800340a:	0018      	movs	r0, r3
 800340c:	f7fd fe8f 	bl	800112e <Is_OMNI_On>
 8003410:	0003      	movs	r3, r0
 8003412:	2b01      	cmp	r3, #1
 8003414:	d000      	beq.n	8003418 <UART2_RX_transfer_complete_callback+0xcc0>
 8003416:	e24b      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003418:	4b5c      	ldr	r3, [pc, #368]	@ (800358c <UART2_RX_transfer_complete_callback+0xe34>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	b2da      	uxtb	r2, r3
 800341e:	4b64      	ldr	r3, [pc, #400]	@ (80035b0 <UART2_RX_transfer_complete_callback+0xe58>)
 8003420:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003422:	2380      	movs	r3, #128	@ 0x80
 8003424:	005a      	lsls	r2, r3, #1
 8003426:	4b5b      	ldr	r3, [pc, #364]	@ (8003594 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003428:	0011      	movs	r1, r2
 800342a:	0018      	movs	r0, r3
 800342c:	f002 fb34 	bl	8005a98 <Set_Status_Bit>
 8003430:	e23e      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8003432:	4b56      	ldr	r3, [pc, #344]	@ (800358c <UART2_RX_transfer_complete_callback+0xe34>)
 8003434:	0018      	movs	r0, r3
 8003436:	f7fd fcf1 	bl	8000e1c <Is_CC_Status_Byte>
 800343a:	0003      	movs	r3, r0
 800343c:	2b01      	cmp	r3, #1
 800343e:	d131      	bne.n	80034a4 <UART2_RX_transfer_complete_callback+0xd4c>

						running_status_byte = (uint8_t)*rx_buffer;
 8003440:	4b52      	ldr	r3, [pc, #328]	@ (800358c <UART2_RX_transfer_complete_callback+0xe34>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	b2da      	uxtb	r2, r3
 8003446:	4b56      	ldr	r3, [pc, #344]	@ (80035a0 <UART2_RX_transfer_complete_callback+0xe48>)
 8003448:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 800344a:	4b54      	ldr	r3, [pc, #336]	@ (800359c <UART2_RX_transfer_complete_callback+0xe44>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	b2da      	uxtb	r2, r3
 8003450:	4b4e      	ldr	r3, [pc, #312]	@ (800358c <UART2_RX_transfer_complete_callback+0xe34>)
 8003452:	0011      	movs	r1, r2
 8003454:	0018      	movs	r0, r3
 8003456:	f7fd fdb3 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 800345a:	0003      	movs	r3, r0
 800345c:	2b01      	cmp	r3, #1
 800345e:	d10c      	bne.n	800347a <UART2_RX_transfer_complete_callback+0xd22>

							active_status_byte = (uint8_t)*rx_buffer;
 8003460:	4b4a      	ldr	r3, [pc, #296]	@ (800358c <UART2_RX_transfer_complete_callback+0xe34>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	4b52      	ldr	r3, [pc, #328]	@ (80035b0 <UART2_RX_transfer_complete_callback+0xe58>)
 8003468:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800346a:	2380      	movs	r3, #128	@ 0x80
 800346c:	005a      	lsls	r2, r3, #1
 800346e:	4b49      	ldr	r3, [pc, #292]	@ (8003594 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003470:	0011      	movs	r1, r2
 8003472:	0018      	movs	r0, r3
 8003474:	f002 fb10 	bl	8005a98 <Set_Status_Bit>
 8003478:	e21a      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 800347a:	4b46      	ldr	r3, [pc, #280]	@ (8003594 <UART2_RX_transfer_complete_callback+0xe3c>)
 800347c:	0018      	movs	r0, r3
 800347e:	f7fd fe56 	bl	800112e <Is_OMNI_On>
 8003482:	0003      	movs	r3, r0
 8003484:	2b01      	cmp	r3, #1
 8003486:	d000      	beq.n	800348a <UART2_RX_transfer_complete_callback+0xd32>
 8003488:	e212      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 800348a:	4b40      	ldr	r3, [pc, #256]	@ (800358c <UART2_RX_transfer_complete_callback+0xe34>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	b2da      	uxtb	r2, r3
 8003490:	4b47      	ldr	r3, [pc, #284]	@ (80035b0 <UART2_RX_transfer_complete_callback+0xe58>)
 8003492:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003494:	2380      	movs	r3, #128	@ 0x80
 8003496:	005a      	lsls	r2, r3, #1
 8003498:	4b3e      	ldr	r3, [pc, #248]	@ (8003594 <UART2_RX_transfer_complete_callback+0xe3c>)
 800349a:	0011      	movs	r1, r2
 800349c:	0018      	movs	r0, r3
 800349e:	f002 fafb 	bl	8005a98 <Set_Status_Bit>
 80034a2:	e205      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 80034a4:	4b39      	ldr	r3, [pc, #228]	@ (800358c <UART2_RX_transfer_complete_callback+0xe34>)
 80034a6:	0018      	movs	r0, r3
 80034a8:	f7fd fd7a 	bl	8000fa0 <Is_Sysex_Start_Status_Byte>
 80034ac:	0003      	movs	r3, r0
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d000      	beq.n	80034b4 <UART2_RX_transfer_complete_callback+0xd5c>
 80034b2:	e1fd      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 80034b4:	4b35      	ldr	r3, [pc, #212]	@ (800358c <UART2_RX_transfer_complete_callback+0xe34>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	4b3d      	ldr	r3, [pc, #244]	@ (80035b0 <UART2_RX_transfer_complete_callback+0xe58>)
 80034bc:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 80034be:	4b38      	ldr	r3, [pc, #224]	@ (80035a0 <UART2_RX_transfer_complete_callback+0xe48>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80034c4:	2380      	movs	r3, #128	@ 0x80
 80034c6:	005a      	lsls	r2, r3, #1
 80034c8:	4b32      	ldr	r3, [pc, #200]	@ (8003594 <UART2_RX_transfer_complete_callback+0xe3c>)
 80034ca:	0011      	movs	r1, r2
 80034cc:	0018      	movs	r0, r3
 80034ce:	f002 fae3 	bl	8005a98 <Set_Status_Bit>
 80034d2:	e1ed      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
			}
		}
		else if(active_status_byte != 0){ //CC/PC only called if on basic channel or omni ON
 80034d4:	4b36      	ldr	r3, [pc, #216]	@ (80035b0 <UART2_RX_transfer_complete_callback+0xe58>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d100      	bne.n	80034e0 <UART2_RX_transfer_complete_callback+0xd88>
 80034de:	e1e7      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

			if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out) == YES){
 80034e0:	2380      	movs	r3, #128	@ 0x80
 80034e2:	009a      	lsls	r2, r3, #2
 80034e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003594 <UART2_RX_transfer_complete_callback+0xe3c>)
 80034e6:	0011      	movs	r1, r2
 80034e8:	0018      	movs	r0, r3
 80034ea:	f002 fac1 	bl	8005a70 <Get_Status_Bit>
 80034ee:	0003      	movs	r3, r0
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d10d      	bne.n	8003510 <UART2_RX_transfer_complete_callback+0xdb8>

				active_status_byte = 0;
 80034f4:	4b2e      	ldr	r3, [pc, #184]	@ (80035b0 <UART2_RX_transfer_complete_callback+0xe58>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 80034fa:	4b25      	ldr	r3, [pc, #148]	@ (8003590 <UART2_RX_transfer_complete_callback+0xe38>)
 80034fc:	0018      	movs	r0, r3
 80034fe:	f7fd fdb0 	bl	8001062 <Clear_Data_Buffer>
				//running status is kept

				Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003502:	4a24      	ldr	r2, [pc, #144]	@ (8003594 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003504:	4b24      	ldr	r3, [pc, #144]	@ (8003598 <UART2_RX_transfer_complete_callback+0xe40>)
 8003506:	0011      	movs	r1, r2
 8003508:	0018      	movs	r0, r3
 800350a:	f7fd fe2a 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>
 800350e:	e1cf      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
				//In this condition, the data bytes haven't been received in enough time, so any subsequent data bytes
				//sent after this are simply ignored
			}
			else{ //not timed out

				if(Is_Data_Byte(rx_buffer) == YES){
 8003510:	4b1e      	ldr	r3, [pc, #120]	@ (800358c <UART2_RX_transfer_complete_callback+0xe34>)
 8003512:	0018      	movs	r0, r3
 8003514:	f7fd fc4d 	bl	8000db2 <Is_Data_Byte>
 8003518:	0003      	movs	r3, r0
 800351a:	2b01      	cmp	r3, #1
 800351c:	d000      	beq.n	8003520 <UART2_RX_transfer_complete_callback+0xdc8>
 800351e:	e133      	b.n	8003788 <UART2_RX_transfer_complete_callback+0x1030>

					if(Is_PC_Status_Byte(&active_status_byte) == YES){
 8003520:	4b23      	ldr	r3, [pc, #140]	@ (80035b0 <UART2_RX_transfer_complete_callback+0xe58>)
 8003522:	0018      	movs	r0, r3
 8003524:	f7fd fc5e 	bl	8000de4 <Is_PC_Status_Byte>
 8003528:	0003      	movs	r3, r0
 800352a:	2b01      	cmp	r3, #1
 800352c:	d144      	bne.n	80035b8 <UART2_RX_transfer_complete_callback+0xe60>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800352e:	4b18      	ldr	r3, [pc, #96]	@ (8003590 <UART2_RX_transfer_complete_callback+0xe38>)
 8003530:	0018      	movs	r0, r3
 8003532:	f7fd fd66 	bl	8001002 <Is_Data_Buffer_Empty>
 8003536:	0003      	movs	r3, r0
 8003538:	2b01      	cmp	r3, #1
 800353a:	d000      	beq.n	800353e <UART2_RX_transfer_complete_callback+0xde6>
 800353c:	e1b8      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

							//first data byte received
							if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 800353e:	4b13      	ldr	r3, [pc, #76]	@ (800358c <UART2_RX_transfer_complete_callback+0xe34>)
 8003540:	2104      	movs	r1, #4
 8003542:	0018      	movs	r0, r3
 8003544:	f7fd fdab 	bl	800109e <Is_Program_Change_Data_Byte_In_Range>
 8003548:	0003      	movs	r3, r0
 800354a:	2b01      	cmp	r3, #1
 800354c:	d10f      	bne.n	800356e <UART2_RX_transfer_complete_callback+0xe16>

								Set_All_Pots_to_PC_Mode();
 800354e:	f7fd fbdf 	bl	8000d10 <Set_All_Pots_to_PC_Mode>
								preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 8003552:	4b0e      	ldr	r3, [pc, #56]	@ (800358c <UART2_RX_transfer_complete_callback+0xe34>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	3301      	adds	r3, #1
 800355a:	b2da      	uxtb	r2, r3
 800355c:	4b15      	ldr	r3, [pc, #84]	@ (80035b4 <UART2_RX_transfer_complete_callback+0xe5c>)
 800355e:	701a      	strb	r2, [r3, #0]
								Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 8003560:	f7fc ffde 	bl	8000520 <Update_Params_Based_On_Mode_Selected>
								Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003564:	4b0b      	ldr	r3, [pc, #44]	@ (8003594 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003566:	2108      	movs	r1, #8
 8003568:	0018      	movs	r0, r3
 800356a:	f002 faa7 	bl	8005abc <Clear_Status_Bit>
							}

							//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
							Clear_Data_Buffer(&MIDI_data);
 800356e:	4b08      	ldr	r3, [pc, #32]	@ (8003590 <UART2_RX_transfer_complete_callback+0xe38>)
 8003570:	0018      	movs	r0, r3
 8003572:	f7fd fd76 	bl	8001062 <Clear_Data_Buffer>
							active_status_byte = 0;
 8003576:	4b0e      	ldr	r3, [pc, #56]	@ (80035b0 <UART2_RX_transfer_complete_callback+0xe58>)
 8003578:	2200      	movs	r2, #0
 800357a:	701a      	strb	r2, [r3, #0]

							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 800357c:	4a05      	ldr	r2, [pc, #20]	@ (8003594 <UART2_RX_transfer_complete_callback+0xe3c>)
 800357e:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <UART2_RX_transfer_complete_callback+0xe40>)
 8003580:	0011      	movs	r1, r2
 8003582:	0018      	movs	r0, r3
 8003584:	f7fd fded 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>
 8003588:	e192      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
 800358a:	46c0      	nop			@ (mov r8, r8)
 800358c:	200004cc 	.word	0x200004cc
 8003590:	200004c0 	.word	0x200004c0
 8003594:	20000c24 	.word	0x20000c24
 8003598:	20000c2c 	.word	0x20000c2c
 800359c:	200004bd 	.word	0x200004bd
 80035a0:	200004bf 	.word	0x200004bf
 80035a4:	200004c1 	.word	0x200004c1
 80035a8:	20000020 	.word	0x20000020
 80035ac:	20000c3c 	.word	0x20000c3c
 80035b0:	200004be 	.word	0x200004be
 80035b4:	200004b0 	.word	0x200004b0

						}
					}
					else if(Is_CC_Status_Byte(&active_status_byte) == YES){
 80035b8:	4bc4      	ldr	r3, [pc, #784]	@ (80038cc <UART2_RX_transfer_complete_callback+0x1174>)
 80035ba:	0018      	movs	r0, r3
 80035bc:	f7fd fc2e 	bl	8000e1c <Is_CC_Status_Byte>
 80035c0:	0003      	movs	r3, r0
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d000      	beq.n	80035c8 <UART2_RX_transfer_complete_callback+0xe70>
 80035c6:	e0d2      	b.n	800376e <UART2_RX_transfer_complete_callback+0x1016>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80035c8:	4bc1      	ldr	r3, [pc, #772]	@ (80038d0 <UART2_RX_transfer_complete_callback+0x1178>)
 80035ca:	0018      	movs	r0, r3
 80035cc:	f7fd fd19 	bl	8001002 <Is_Data_Buffer_Empty>
 80035d0:	0003      	movs	r3, r0
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d108      	bne.n	80035e8 <UART2_RX_transfer_complete_callback+0xe90>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 80035d6:	4bbf      	ldr	r3, [pc, #764]	@ (80038d4 <UART2_RX_transfer_complete_callback+0x117c>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	4bbc      	ldr	r3, [pc, #752]	@ (80038d0 <UART2_RX_transfer_complete_callback+0x1178>)
 80035de:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 80035e0:	4bbd      	ldr	r3, [pc, #756]	@ (80038d8 <UART2_RX_transfer_complete_callback+0x1180>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	e163      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 80035e8:	4bba      	ldr	r3, [pc, #744]	@ (80038d4 <UART2_RX_transfer_complete_callback+0x117c>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	4bb8      	ldr	r3, [pc, #736]	@ (80038d0 <UART2_RX_transfer_complete_callback+0x1178>)
 80035f0:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80035f2:	4aba      	ldr	r2, [pc, #744]	@ (80038dc <UART2_RX_transfer_complete_callback+0x1184>)
 80035f4:	4bb8      	ldr	r3, [pc, #736]	@ (80038d8 <UART2_RX_transfer_complete_callback+0x1180>)
 80035f6:	0011      	movs	r1, r2
 80035f8:	0018      	movs	r0, r3
 80035fa:	f7fd fdb2 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>
							Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80035fe:	4bb7      	ldr	r3, [pc, #732]	@ (80038dc <UART2_RX_transfer_complete_callback+0x1184>)
 8003600:	2108      	movs	r1, #8
 8003602:	0018      	movs	r0, r3
 8003604:	f002 fa5a 	bl	8005abc <Clear_Status_Bit>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003608:	4bb1      	ldr	r3, [pc, #708]	@ (80038d0 <UART2_RX_transfer_complete_callback+0x1178>)
 800360a:	0018      	movs	r0, r3
 800360c:	f7fd fc22 	bl	8000e54 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 8003610:	0003      	movs	r3, r0
 8003612:	2b01      	cmp	r3, #1
 8003614:	d14c      	bne.n	80036b0 <UART2_RX_transfer_complete_callback+0xf58>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES){
 8003616:	4bb2      	ldr	r3, [pc, #712]	@ (80038e0 <UART2_RX_transfer_complete_callback+0x1188>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	b2da      	uxtb	r2, r3
 800361c:	4bab      	ldr	r3, [pc, #684]	@ (80038cc <UART2_RX_transfer_complete_callback+0x1174>)
 800361e:	0011      	movs	r1, r2
 8003620:	0018      	movs	r0, r3
 8003622:	f7fd fccd 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003626:	0003      	movs	r3, r0
 8003628:	2b01      	cmp	r3, #1
 800362a:	d139      	bne.n	80036a0 <UART2_RX_transfer_complete_callback+0xf48>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 800362c:	4aad      	ldr	r2, [pc, #692]	@ (80038e4 <UART2_RX_transfer_complete_callback+0x118c>)
 800362e:	4ba8      	ldr	r3, [pc, #672]	@ (80038d0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003630:	0011      	movs	r1, r2
 8003632:	0018      	movs	r0, r3
 8003634:	f7fd fc6d 	bl	8000f12 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 8003638:	0003      	movs	r3, r0
 800363a:	2b01      	cmp	r3, #1
 800363c:	d130      	bne.n	80036a0 <UART2_RX_transfer_complete_callback+0xf48>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 800363e:	4ba4      	ldr	r3, [pc, #656]	@ (80038d0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003640:	785b      	ldrb	r3, [r3, #1]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b79      	cmp	r3, #121	@ 0x79
 8003646:	d10b      	bne.n	8003660 <UART2_RX_transfer_complete_callback+0xf08>

											Reset_All_Controllers(&params, &delay_line);
 8003648:	4aa7      	ldr	r2, [pc, #668]	@ (80038e8 <UART2_RX_transfer_complete_callback+0x1190>)
 800364a:	4ba8      	ldr	r3, [pc, #672]	@ (80038ec <UART2_RX_transfer_complete_callback+0x1194>)
 800364c:	0011      	movs	r1, r2
 800364e:	0018      	movs	r0, r3
 8003650:	f7fd fda2 	bl	8001198 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003654:	4ba1      	ldr	r3, [pc, #644]	@ (80038dc <UART2_RX_transfer_complete_callback+0x1184>)
 8003656:	2108      	movs	r1, #8
 8003658:	0018      	movs	r0, r3
 800365a:	f002 fa2f 	bl	8005abc <Clear_Status_Bit>
 800365e:	e01f      	b.n	80036a0 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 8003660:	4b9b      	ldr	r3, [pc, #620]	@ (80038d0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003662:	785b      	ldrb	r3, [r3, #1]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b7a      	cmp	r3, #122	@ 0x7a
 8003668:	d107      	bne.n	800367a <UART2_RX_transfer_complete_callback+0xf22>

											Set_Local_Control();
 800366a:	f7fd fdef 	bl	800124c <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 800366e:	4b9b      	ldr	r3, [pc, #620]	@ (80038dc <UART2_RX_transfer_complete_callback+0x1184>)
 8003670:	2108      	movs	r1, #8
 8003672:	0018      	movs	r0, r3
 8003674:	f002 fa22 	bl	8005abc <Clear_Status_Bit>
 8003678:	e012      	b.n	80036a0 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 800367a:	4b95      	ldr	r3, [pc, #596]	@ (80038d0 <UART2_RX_transfer_complete_callback+0x1178>)
 800367c:	785b      	ldrb	r3, [r3, #1]
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b7c      	cmp	r3, #124	@ 0x7c
 8003682:	d104      	bne.n	800368e <UART2_RX_transfer_complete_callback+0xf36>

											Set_OMNI_Off(&statuses);
 8003684:	4b95      	ldr	r3, [pc, #596]	@ (80038dc <UART2_RX_transfer_complete_callback+0x1184>)
 8003686:	0018      	movs	r0, r3
 8003688:	f7fd fe18 	bl	80012bc <Set_OMNI_Off>
 800368c:	e008      	b.n	80036a0 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 800368e:	4b90      	ldr	r3, [pc, #576]	@ (80038d0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003690:	785b      	ldrb	r3, [r3, #1]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b7d      	cmp	r3, #125	@ 0x7d
 8003696:	d103      	bne.n	80036a0 <UART2_RX_transfer_complete_callback+0xf48>

											Set_OMNI_On(&statuses);
 8003698:	4b90      	ldr	r3, [pc, #576]	@ (80038dc <UART2_RX_transfer_complete_callback+0x1184>)
 800369a:	0018      	movs	r0, r3
 800369c:	f7fd fe1e 	bl	80012dc <Set_OMNI_On>
										}
									}
								}

								active_status_byte = 0;
 80036a0:	4b8a      	ldr	r3, [pc, #552]	@ (80038cc <UART2_RX_transfer_complete_callback+0x1174>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80036a6:	4b8a      	ldr	r3, [pc, #552]	@ (80038d0 <UART2_RX_transfer_complete_callback+0x1178>)
 80036a8:	0018      	movs	r0, r3
 80036aa:	f7fd fcda 	bl	8001062 <Clear_Data_Buffer>
 80036ae:	e0ff      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80036b0:	4b87      	ldr	r3, [pc, #540]	@ (80038d0 <UART2_RX_transfer_complete_callback+0x1178>)
 80036b2:	0018      	movs	r0, r3
 80036b4:	f7fd fbfa 	bl	8000eac <Is_Utilised_CC_First_Data_Byte>
 80036b8:	0003      	movs	r3, r0
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d14f      	bne.n	800375e <UART2_RX_transfer_complete_callback+0x1006>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES)
 80036be:	4b88      	ldr	r3, [pc, #544]	@ (80038e0 <UART2_RX_transfer_complete_callback+0x1188>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	4b81      	ldr	r3, [pc, #516]	@ (80038cc <UART2_RX_transfer_complete_callback+0x1174>)
 80036c6:	0011      	movs	r1, r2
 80036c8:	0018      	movs	r0, r3
 80036ca:	f7fd fc79 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80036ce:	0003      	movs	r3, r0
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d006      	beq.n	80036e2 <UART2_RX_transfer_complete_callback+0xf8a>
										|| (Is_OMNI_On(&statuses) == YES)){
 80036d4:	4b81      	ldr	r3, [pc, #516]	@ (80038dc <UART2_RX_transfer_complete_callback+0x1184>)
 80036d6:	0018      	movs	r0, r3
 80036d8:	f7fd fd29 	bl	800112e <Is_OMNI_On>
 80036dc:	0003      	movs	r3, r0
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d135      	bne.n	800374e <UART2_RX_transfer_complete_callback+0xff6>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 80036e2:	4b7b      	ldr	r3, [pc, #492]	@ (80038d0 <UART2_RX_transfer_complete_callback+0x1178>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b14      	cmp	r3, #20
 80036ea:	d104      	bne.n	80036f6 <UART2_RX_transfer_complete_callback+0xf9e>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80036ec:	4b7d      	ldr	r3, [pc, #500]	@ (80038e4 <UART2_RX_transfer_complete_callback+0x118c>)
 80036ee:	0018      	movs	r0, r3
 80036f0:	f7fd fa8c 	bl	8000c0c <Set_Waveshape_to_CC_Mode_and_Value>
 80036f4:	e02b      	b.n	800374e <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 80036f6:	4b76      	ldr	r3, [pc, #472]	@ (80038d0 <UART2_RX_transfer_complete_callback+0x1178>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b15      	cmp	r3, #21
 80036fe:	d109      	bne.n	8003714 <UART2_RX_transfer_complete_callback+0xfbc>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003700:	4b78      	ldr	r3, [pc, #480]	@ (80038e4 <UART2_RX_transfer_complete_callback+0x118c>)
 8003702:	0018      	movs	r0, r3
 8003704:	f7fd fa9c 	bl	8000c40 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003708:	4b74      	ldr	r3, [pc, #464]	@ (80038dc <UART2_RX_transfer_complete_callback+0x1184>)
 800370a:	2108      	movs	r1, #8
 800370c:	0018      	movs	r0, r3
 800370e:	f002 f9d5 	bl	8005abc <Clear_Status_Bit>
 8003712:	e01c      	b.n	800374e <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8003714:	4b6e      	ldr	r3, [pc, #440]	@ (80038d0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b16      	cmp	r3, #22
 800371c:	d104      	bne.n	8003728 <UART2_RX_transfer_complete_callback+0xfd0>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 800371e:	4b71      	ldr	r3, [pc, #452]	@ (80038e4 <UART2_RX_transfer_complete_callback+0x118c>)
 8003720:	0018      	movs	r0, r3
 8003722:	f7fd faa7 	bl	8000c74 <Set_Depth_to_CC_Mode_and_Value>
 8003726:	e012      	b.n	800374e <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8003728:	4b69      	ldr	r3, [pc, #420]	@ (80038d0 <UART2_RX_transfer_complete_callback+0x1178>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b17      	cmp	r3, #23
 8003730:	d104      	bne.n	800373c <UART2_RX_transfer_complete_callback+0xfe4>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003732:	4b6c      	ldr	r3, [pc, #432]	@ (80038e4 <UART2_RX_transfer_complete_callback+0x118c>)
 8003734:	0018      	movs	r0, r3
 8003736:	f7fd fab7 	bl	8000ca8 <Set_Symmetry_to_CC_Mode_and_Value>
 800373a:	e008      	b.n	800374e <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 800373c:	4b64      	ldr	r3, [pc, #400]	@ (80038d0 <UART2_RX_transfer_complete_callback+0x1178>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b18      	cmp	r3, #24
 8003744:	d103      	bne.n	800374e <UART2_RX_transfer_complete_callback+0xff6>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003746:	4b67      	ldr	r3, [pc, #412]	@ (80038e4 <UART2_RX_transfer_complete_callback+0x118c>)
 8003748:	0018      	movs	r0, r3
 800374a:	f7fd fac7 	bl	8000cdc <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 800374e:	4b5f      	ldr	r3, [pc, #380]	@ (80038cc <UART2_RX_transfer_complete_callback+0x1174>)
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003754:	4b5e      	ldr	r3, [pc, #376]	@ (80038d0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003756:	0018      	movs	r0, r3
 8003758:	f7fd fc83 	bl	8001062 <Clear_Data_Buffer>
 800375c:	e0a8      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 800375e:	4b5b      	ldr	r3, [pc, #364]	@ (80038cc <UART2_RX_transfer_complete_callback+0x1174>)
 8003760:	2200      	movs	r2, #0
 8003762:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003764:	4b5a      	ldr	r3, [pc, #360]	@ (80038d0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003766:	0018      	movs	r0, r3
 8003768:	f7fd fc7b 	bl	8001062 <Clear_Data_Buffer>
 800376c:	e0a0      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(&active_status_byte) == YES){
 800376e:	4b57      	ldr	r3, [pc, #348]	@ (80038cc <UART2_RX_transfer_complete_callback+0x1174>)
 8003770:	0018      	movs	r0, r3
 8003772:	f7fd fc15 	bl	8000fa0 <Is_Sysex_Start_Status_Byte>
 8003776:	0003      	movs	r3, r0
 8003778:	2b01      	cmp	r3, #1
 800377a:	d000      	beq.n	800377e <UART2_RX_transfer_complete_callback+0x1026>
 800377c:	e098      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

						//@TODO

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800377e:	4b54      	ldr	r3, [pc, #336]	@ (80038d0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003780:	0018      	movs	r0, r3
 8003782:	f7fd fc3e 	bl	8001002 <Is_Data_Buffer_Empty>
 8003786:	e093      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8003788:	4b51      	ldr	r3, [pc, #324]	@ (80038d0 <UART2_RX_transfer_complete_callback+0x1178>)
 800378a:	0018      	movs	r0, r3
 800378c:	f7fd fc69 	bl	8001062 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003790:	4a52      	ldr	r2, [pc, #328]	@ (80038dc <UART2_RX_transfer_complete_callback+0x1184>)
 8003792:	4b51      	ldr	r3, [pc, #324]	@ (80038d8 <UART2_RX_transfer_complete_callback+0x1180>)
 8003794:	0011      	movs	r1, r2
 8003796:	0018      	movs	r0, r3
 8003798:	f7fd fce3 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 800379c:	4b4d      	ldr	r3, [pc, #308]	@ (80038d4 <UART2_RX_transfer_complete_callback+0x117c>)
 800379e:	0018      	movs	r0, r3
 80037a0:	f7fd fb20 	bl	8000de4 <Is_PC_Status_Byte>
 80037a4:	0003      	movs	r3, r0
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d130      	bne.n	800380c <UART2_RX_transfer_complete_callback+0x10b4>

						running_status_byte = (uint8_t)*rx_buffer;
 80037aa:	4b4a      	ldr	r3, [pc, #296]	@ (80038d4 <UART2_RX_transfer_complete_callback+0x117c>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	4b4f      	ldr	r3, [pc, #316]	@ (80038f0 <UART2_RX_transfer_complete_callback+0x1198>)
 80037b2:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80037b4:	4b4a      	ldr	r3, [pc, #296]	@ (80038e0 <UART2_RX_transfer_complete_callback+0x1188>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	4b46      	ldr	r3, [pc, #280]	@ (80038d4 <UART2_RX_transfer_complete_callback+0x117c>)
 80037bc:	0011      	movs	r1, r2
 80037be:	0018      	movs	r0, r3
 80037c0:	f7fd fbfe 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80037c4:	0003      	movs	r3, r0
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d10c      	bne.n	80037e4 <UART2_RX_transfer_complete_callback+0x108c>

							active_status_byte = (uint8_t)*rx_buffer;
 80037ca:	4b42      	ldr	r3, [pc, #264]	@ (80038d4 <UART2_RX_transfer_complete_callback+0x117c>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	4b3e      	ldr	r3, [pc, #248]	@ (80038cc <UART2_RX_transfer_complete_callback+0x1174>)
 80037d2:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80037d4:	2380      	movs	r3, #128	@ 0x80
 80037d6:	005a      	lsls	r2, r3, #1
 80037d8:	4b40      	ldr	r3, [pc, #256]	@ (80038dc <UART2_RX_transfer_complete_callback+0x1184>)
 80037da:	0011      	movs	r1, r2
 80037dc:	0018      	movs	r0, r3
 80037de:	f002 f95b 	bl	8005a98 <Set_Status_Bit>
 80037e2:	e065      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 80037e4:	4b3d      	ldr	r3, [pc, #244]	@ (80038dc <UART2_RX_transfer_complete_callback+0x1184>)
 80037e6:	0018      	movs	r0, r3
 80037e8:	f7fd fca1 	bl	800112e <Is_OMNI_On>
 80037ec:	0003      	movs	r3, r0
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d15e      	bne.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 80037f2:	4b38      	ldr	r3, [pc, #224]	@ (80038d4 <UART2_RX_transfer_complete_callback+0x117c>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	4b34      	ldr	r3, [pc, #208]	@ (80038cc <UART2_RX_transfer_complete_callback+0x1174>)
 80037fa:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80037fc:	2380      	movs	r3, #128	@ 0x80
 80037fe:	005a      	lsls	r2, r3, #1
 8003800:	4b36      	ldr	r3, [pc, #216]	@ (80038dc <UART2_RX_transfer_complete_callback+0x1184>)
 8003802:	0011      	movs	r1, r2
 8003804:	0018      	movs	r0, r3
 8003806:	f002 f947 	bl	8005a98 <Set_Status_Bit>
 800380a:	e051      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 800380c:	4b31      	ldr	r3, [pc, #196]	@ (80038d4 <UART2_RX_transfer_complete_callback+0x117c>)
 800380e:	0018      	movs	r0, r3
 8003810:	f7fd fb04 	bl	8000e1c <Is_CC_Status_Byte>
 8003814:	0003      	movs	r3, r0
 8003816:	2b01      	cmp	r3, #1
 8003818:	d130      	bne.n	800387c <UART2_RX_transfer_complete_callback+0x1124>

						running_status_byte = (uint8_t)*rx_buffer;
 800381a:	4b2e      	ldr	r3, [pc, #184]	@ (80038d4 <UART2_RX_transfer_complete_callback+0x117c>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	b2da      	uxtb	r2, r3
 8003820:	4b33      	ldr	r3, [pc, #204]	@ (80038f0 <UART2_RX_transfer_complete_callback+0x1198>)
 8003822:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003824:	4b2e      	ldr	r3, [pc, #184]	@ (80038e0 <UART2_RX_transfer_complete_callback+0x1188>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	4b2a      	ldr	r3, [pc, #168]	@ (80038d4 <UART2_RX_transfer_complete_callback+0x117c>)
 800382c:	0011      	movs	r1, r2
 800382e:	0018      	movs	r0, r3
 8003830:	f7fd fbc6 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003834:	0003      	movs	r3, r0
 8003836:	2b01      	cmp	r3, #1
 8003838:	d10c      	bne.n	8003854 <UART2_RX_transfer_complete_callback+0x10fc>

							active_status_byte = (uint8_t)*rx_buffer;
 800383a:	4b26      	ldr	r3, [pc, #152]	@ (80038d4 <UART2_RX_transfer_complete_callback+0x117c>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	b2da      	uxtb	r2, r3
 8003840:	4b22      	ldr	r3, [pc, #136]	@ (80038cc <UART2_RX_transfer_complete_callback+0x1174>)
 8003842:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003844:	2380      	movs	r3, #128	@ 0x80
 8003846:	005a      	lsls	r2, r3, #1
 8003848:	4b24      	ldr	r3, [pc, #144]	@ (80038dc <UART2_RX_transfer_complete_callback+0x1184>)
 800384a:	0011      	movs	r1, r2
 800384c:	0018      	movs	r0, r3
 800384e:	f002 f923 	bl	8005a98 <Set_Status_Bit>
 8003852:	e02d      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003854:	4b21      	ldr	r3, [pc, #132]	@ (80038dc <UART2_RX_transfer_complete_callback+0x1184>)
 8003856:	0018      	movs	r0, r3
 8003858:	f7fd fc69 	bl	800112e <Is_OMNI_On>
 800385c:	0003      	movs	r3, r0
 800385e:	2b01      	cmp	r3, #1
 8003860:	d126      	bne.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003862:	4b1c      	ldr	r3, [pc, #112]	@ (80038d4 <UART2_RX_transfer_complete_callback+0x117c>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	b2da      	uxtb	r2, r3
 8003868:	4b18      	ldr	r3, [pc, #96]	@ (80038cc <UART2_RX_transfer_complete_callback+0x1174>)
 800386a:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800386c:	2380      	movs	r3, #128	@ 0x80
 800386e:	005a      	lsls	r2, r3, #1
 8003870:	4b1a      	ldr	r3, [pc, #104]	@ (80038dc <UART2_RX_transfer_complete_callback+0x1184>)
 8003872:	0011      	movs	r1, r2
 8003874:	0018      	movs	r0, r3
 8003876:	f002 f90f 	bl	8005a98 <Set_Status_Bit>
 800387a:	e019      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 800387c:	4b15      	ldr	r3, [pc, #84]	@ (80038d4 <UART2_RX_transfer_complete_callback+0x117c>)
 800387e:	0018      	movs	r0, r3
 8003880:	f7fd fb8e 	bl	8000fa0 <Is_Sysex_Start_Status_Byte>
 8003884:	0003      	movs	r3, r0
 8003886:	2b01      	cmp	r3, #1
 8003888:	d112      	bne.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 800388a:	4b12      	ldr	r3, [pc, #72]	@ (80038d4 <UART2_RX_transfer_complete_callback+0x117c>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	b2da      	uxtb	r2, r3
 8003890:	4b0e      	ldr	r3, [pc, #56]	@ (80038cc <UART2_RX_transfer_complete_callback+0x1174>)
 8003892:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003894:	4b16      	ldr	r3, [pc, #88]	@ (80038f0 <UART2_RX_transfer_complete_callback+0x1198>)
 8003896:	2200      	movs	r2, #0
 8003898:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800389a:	2380      	movs	r3, #128	@ 0x80
 800389c:	005a      	lsls	r2, r3, #1
 800389e:	4b0f      	ldr	r3, [pc, #60]	@ (80038dc <UART2_RX_transfer_complete_callback+0x1184>)
 80038a0:	0011      	movs	r1, r2
 80038a2:	0018      	movs	r0, r3
 80038a4:	f002 f8f8 	bl	8005a98 <Set_Status_Bit>
 80038a8:	e002      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80038aa:	46c0      	nop			@ (mov r8, r8)
 80038ac:	e000      	b.n	80038b0 <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80038ae:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}

	*rx_buffer = 0;
 80038b0:	4b08      	ldr	r3, [pc, #32]	@ (80038d4 <UART2_RX_transfer_complete_callback+0x117c>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 80038b6:	4907      	ldr	r1, [pc, #28]	@ (80038d4 <UART2_RX_transfer_complete_callback+0x117c>)
 80038b8:	4b0e      	ldr	r3, [pc, #56]	@ (80038f4 <UART2_RX_transfer_complete_callback+0x119c>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	0018      	movs	r0, r3
 80038be:	f007 ffed 	bl	800b89c <HAL_UART_Receive_DMA>
}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b002      	add	sp, #8
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	200004be 	.word	0x200004be
 80038d0:	200004c0 	.word	0x200004c0
 80038d4:	200004cc 	.word	0x200004cc
 80038d8:	20000c2c 	.word	0x20000c2c
 80038dc:	20000c24 	.word	0x20000c24
 80038e0:	200004bd 	.word	0x200004bd
 80038e4:	200004c1 	.word	0x200004c1
 80038e8:	20000020 	.word	0x20000020
 80038ec:	20000c3c 	.word	0x20000c3c
 80038f0:	200004bf 	.word	0x200004bf
 80038f4:	20000a38 	.word	0x20000a38

080038f8 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	0002      	movs	r2, r0
 8003900:	1dbb      	adds	r3, r7, #6
 8003902:	801a      	strh	r2, [r3, #0]

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with falling interrupt
 8003904:	1dbb      	adds	r3, r7, #6
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	2b80      	cmp	r3, #128	@ 0x80
 800390a:	d117      	bne.n	800393c <HAL_GPIO_EXTI_Falling_Callback+0x44>

		if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 800390c:	4b0d      	ldr	r3, [pc, #52]	@ (8003944 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b06      	cmp	r3, #6
 8003914:	d004      	beq.n	8003920 <HAL_GPIO_EXTI_Falling_Callback+0x28>
 8003916:	4b0b      	ldr	r3, [pc, #44]	@ (8003944 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b07      	cmp	r3, #7
 800391e:	d10d      	bne.n	800393c <HAL_GPIO_EXTI_Falling_Callback+0x44>

			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003920:	2380      	movs	r3, #128	@ 0x80
 8003922:	0099      	lsls	r1, r3, #2
 8003924:	23a0      	movs	r3, #160	@ 0xa0
 8003926:	05db      	lsls	r3, r3, #23
 8003928:	2201      	movs	r2, #1
 800392a:	0018      	movs	r0, r3
 800392c:	f004 f963 	bl	8007bf6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003930:	4b05      	ldr	r3, [pc, #20]	@ (8003948 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 8003932:	2200      	movs	r2, #0
 8003934:	2140      	movs	r1, #64	@ 0x40
 8003936:	0018      	movs	r0, r3
 8003938:	f004 f95d 	bl	8007bf6 <HAL_GPIO_WritePin>
		}
	}
}
 800393c:	46c0      	nop			@ (mov r8, r8)
 800393e:	46bd      	mov	sp, r7
 8003940:	b002      	add	sp, #8
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000428 	.word	0x20000428
 8003948:	50000800 	.word	0x50000800

0800394c <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	0002      	movs	r2, r0
 8003954:	1dbb      	adds	r3, r7, #6
 8003956:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with rising interrupt
 8003958:	1dbb      	adds	r3, r7, #6
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	2b80      	cmp	r3, #128	@ 0x80
 800395e:	d000      	beq.n	8003962 <HAL_GPIO_EXTI_Rising_Callback+0x16>
 8003960:	e0dd      	b.n	8003b1e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>

		if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8003962:	4b71      	ldr	r3, [pc, #452]	@ (8003b28 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b01      	cmp	r3, #1
 800396a:	d114      	bne.n	8003996 <HAL_GPIO_EXTI_Rising_Callback+0x4a>

			//Set SW OUT
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800396c:	2380      	movs	r3, #128	@ 0x80
 800396e:	0099      	lsls	r1, r3, #2
 8003970:	23a0      	movs	r3, #160	@ 0xa0
 8003972:	05db      	lsls	r3, r3, #23
 8003974:	2200      	movs	r2, #0
 8003976:	0018      	movs	r0, r3
 8003978:	f004 f93d 	bl	8007bf6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800397c:	4b6b      	ldr	r3, [pc, #428]	@ (8003b2c <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 800397e:	2201      	movs	r2, #1
 8003980:	2140      	movs	r1, #64	@ 0x40
 8003982:	0018      	movs	r0, r3
 8003984:	f004 f937 	bl	8007bf6 <HAL_GPIO_WritePin>

			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003988:	4b67      	ldr	r3, [pc, #412]	@ (8003b28 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800398a:	2201      	movs	r2, #1
 800398c:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 800398e:	4b66      	ldr	r3, [pc, #408]	@ (8003b28 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003990:	2207      	movs	r2, #7
 8003992:	701a      	strb	r2, [r3, #0]
		}

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8003994:	e0c3      	b.n	8003b1e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == PC_MODE){
 8003996:	4b64      	ldr	r3, [pc, #400]	@ (8003b28 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b03      	cmp	r3, #3
 800399e:	d114      	bne.n	80039ca <HAL_GPIO_EXTI_Rising_Callback+0x7e>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80039a0:	2380      	movs	r3, #128	@ 0x80
 80039a2:	0099      	lsls	r1, r3, #2
 80039a4:	23a0      	movs	r3, #160	@ 0xa0
 80039a6:	05db      	lsls	r3, r3, #23
 80039a8:	2200      	movs	r2, #0
 80039aa:	0018      	movs	r0, r3
 80039ac:	f004 f923 	bl	8007bf6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80039b0:	4b5e      	ldr	r3, [pc, #376]	@ (8003b2c <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	2140      	movs	r1, #64	@ 0x40
 80039b6:	0018      	movs	r0, r3
 80039b8:	f004 f91d 	bl	8007bf6 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = PC_MODE;
 80039bc:	4b5a      	ldr	r3, [pc, #360]	@ (8003b28 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80039be:	2203      	movs	r2, #3
 80039c0:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 80039c2:	4b59      	ldr	r3, [pc, #356]	@ (8003b28 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80039c4:	2207      	movs	r2, #7
 80039c6:	701a      	strb	r2, [r3, #0]
}
 80039c8:	e0a9      	b.n	8003b1e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == CC_MODE){
 80039ca:	4b57      	ldr	r3, [pc, #348]	@ (8003b28 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d114      	bne.n	80039fe <HAL_GPIO_EXTI_Rising_Callback+0xb2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80039d4:	2380      	movs	r3, #128	@ 0x80
 80039d6:	0099      	lsls	r1, r3, #2
 80039d8:	23a0      	movs	r3, #160	@ 0xa0
 80039da:	05db      	lsls	r3, r3, #23
 80039dc:	2200      	movs	r2, #0
 80039de:	0018      	movs	r0, r3
 80039e0:	f004 f909 	bl	8007bf6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80039e4:	4b51      	ldr	r3, [pc, #324]	@ (8003b2c <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	2140      	movs	r1, #64	@ 0x40
 80039ea:	0018      	movs	r0, r3
 80039ec:	f004 f903 	bl	8007bf6 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = CC_MODE;
 80039f0:	4b4d      	ldr	r3, [pc, #308]	@ (8003b28 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80039f2:	2202      	movs	r2, #2
 80039f4:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 80039f6:	4b4c      	ldr	r3, [pc, #304]	@ (8003b28 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80039f8:	2207      	movs	r2, #7
 80039fa:	701a      	strb	r2, [r3, #0]
}
 80039fc:	e08f      	b.n	8003b1e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 80039fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003b28 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d12b      	bne.n	8003a60 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8003a08:	4b49      	ldr	r3, [pc, #292]	@ (8003b30 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d126      	bne.n	8003a60 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8003a12:	4b48      	ldr	r3, [pc, #288]	@ (8003b34 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003a14:	2120      	movs	r1, #32
 8003a16:	0018      	movs	r0, r3
 8003a18:	f002 f82a 	bl	8005a70 <Get_Status_Bit>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d11e      	bne.n	8003a60 <HAL_GPIO_EXTI_Rising_Callback+0x114>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003a22:	2380      	movs	r3, #128	@ 0x80
 8003a24:	0099      	lsls	r1, r3, #2
 8003a26:	23a0      	movs	r3, #160	@ 0xa0
 8003a28:	05db      	lsls	r3, r3, #23
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f004 f8e2 	bl	8007bf6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003a32:	4b3e      	ldr	r3, [pc, #248]	@ (8003b2c <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	2140      	movs	r1, #64	@ 0x40
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f004 f8dc 	bl	8007bf6 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = TAP_MODE;
 8003a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8003b28 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a40:	2204      	movs	r2, #4
 8003a42:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003a44:	4b38      	ldr	r3, [pc, #224]	@ (8003b28 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a46:	2207      	movs	r2, #7
 8003a48:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003a4a:	4b3a      	ldr	r3, [pc, #232]	@ (8003b34 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003a4c:	2120      	movs	r1, #32
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f002 f834 	bl	8005abc <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003a54:	4b37      	ldr	r3, [pc, #220]	@ (8003b34 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003a56:	2140      	movs	r1, #64	@ 0x40
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f002 f82f 	bl	8005abc <Clear_Status_Bit>
 8003a5e:	e05e      	b.n	8003b1e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003a60:	4b31      	ldr	r3, [pc, #196]	@ (8003b28 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d12b      	bne.n	8003ac2 <HAL_GPIO_EXTI_Rising_Callback+0x176>
 8003a6a:	4b31      	ldr	r3, [pc, #196]	@ (8003b30 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d126      	bne.n	8003ac2 <HAL_GPIO_EXTI_Rising_Callback+0x176>
 8003a74:	4b2f      	ldr	r3, [pc, #188]	@ (8003b34 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003a76:	2120      	movs	r1, #32
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f001 fff9 	bl	8005a70 <Get_Status_Bit>
 8003a7e:	0003      	movs	r3, r0
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d11e      	bne.n	8003ac2 <HAL_GPIO_EXTI_Rising_Callback+0x176>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003a84:	2380      	movs	r3, #128	@ 0x80
 8003a86:	0099      	lsls	r1, r3, #2
 8003a88:	23a0      	movs	r3, #160	@ 0xa0
 8003a8a:	05db      	lsls	r3, r3, #23
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f004 f8b1 	bl	8007bf6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003a94:	4b25      	ldr	r3, [pc, #148]	@ (8003b2c <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003a96:	2201      	movs	r2, #1
 8003a98:	2140      	movs	r1, #64	@ 0x40
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f004 f8ab 	bl	8007bf6 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003aa0:	4b21      	ldr	r3, [pc, #132]	@ (8003b28 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003aa2:	2208      	movs	r2, #8
 8003aa4:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003aa6:	4b20      	ldr	r3, [pc, #128]	@ (8003b28 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003aa8:	2207      	movs	r2, #7
 8003aaa:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003aac:	4b21      	ldr	r3, [pc, #132]	@ (8003b34 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003aae:	2120      	movs	r1, #32
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f002 f803 	bl	8005abc <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8003b34 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003ab8:	2140      	movs	r1, #64	@ 0x40
 8003aba:	0018      	movs	r0, r3
 8003abc:	f001 fffe 	bl	8005abc <Clear_Status_Bit>
 8003ac0:	e02d      	b.n	8003b1e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){ //second edge
 8003ac2:	4b19      	ldr	r3, [pc, #100]	@ (8003b28 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b07      	cmp	r3, #7
 8003aca:	d114      	bne.n	8003af6 <HAL_GPIO_EXTI_Rising_Callback+0x1aa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003acc:	2380      	movs	r3, #128	@ 0x80
 8003ace:	0099      	lsls	r1, r3, #2
 8003ad0:	23a0      	movs	r3, #160	@ 0xa0
 8003ad2:	05db      	lsls	r3, r3, #23
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	f004 f88d 	bl	8007bf6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003adc:	4b13      	ldr	r3, [pc, #76]	@ (8003b2c <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	2140      	movs	r1, #64	@ 0x40
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f004 f887 	bl	8007bf6 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8003b28 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003aea:	2207      	movs	r2, #7
 8003aec:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8003aee:	4b0e      	ldr	r3, [pc, #56]	@ (8003b28 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003af0:	2206      	movs	r2, #6
 8003af2:	701a      	strb	r2, [r3, #0]
}
 8003af4:	e013      	b.n	8003b1e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE){
 8003af6:	4b0c      	ldr	r3, [pc, #48]	@ (8003b28 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b06      	cmp	r3, #6
 8003afe:	d10e      	bne.n	8003b1e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003b00:	2380      	movs	r3, #128	@ 0x80
 8003b02:	0099      	lsls	r1, r3, #2
 8003b04:	23a0      	movs	r3, #160	@ 0xa0
 8003b06:	05db      	lsls	r3, r3, #23
 8003b08:	2200      	movs	r2, #0
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f004 f873 	bl	8007bf6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003b10:	4b06      	ldr	r3, [pc, #24]	@ (8003b2c <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	2140      	movs	r1, #64	@ 0x40
 8003b16:	0018      	movs	r0, r3
 8003b18:	f004 f86d 	bl	8007bf6 <HAL_GPIO_WritePin>
}
 8003b1c:	e7ff      	b.n	8003b1e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
 8003b1e:	46c0      	nop			@ (mov r8, r8)
 8003b20:	46bd      	mov	sp, r7
 8003b22:	b002      	add	sp, #8
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	46c0      	nop			@ (mov r8, r8)
 8003b28:	20000428 	.word	0x20000428
 8003b2c:	50000800 	.word	0x50000800
 8003b30:	2000043c 	.word	0x2000043c
 8003b34:	20000c24 	.word	0x20000c24

08003b38 <LPTIM1_callback>:

void LPTIM1_callback(LPTIM_HandleTypeDef *hlptim){
 8003b38:	b5b0      	push	{r4, r5, r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]

	static volatile struct Tap_Tempo_Switch_States tap_tempo_switch_states = {0};

	//CHECK IF NEED TO TAP_PENDING TRANSITION

	uint8_t pin_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8003b40:	250f      	movs	r5, #15
 8003b42:	197c      	adds	r4, r7, r5
 8003b44:	2380      	movs	r3, #128	@ 0x80
 8003b46:	00da      	lsls	r2, r3, #3
 8003b48:	23a0      	movs	r3, #160	@ 0xa0
 8003b4a:	05db      	lsls	r3, r3, #23
 8003b4c:	0011      	movs	r1, r2
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f004 f834 	bl	8007bbc <HAL_GPIO_ReadPin>
 8003b54:	0003      	movs	r3, r0
 8003b56:	7023      	strb	r3, [r4, #0]

	if((speed_fsm.current_state.shared_state == MANUAL_MODE) && (pin_state == 0)){
 8003b58:	4bc7      	ldr	r3, [pc, #796]	@ (8003e78 <LPTIM1_callback+0x340>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d10a      	bne.n	8003b78 <LPTIM1_callback+0x40>
 8003b62:	197b      	adds	r3, r7, r5
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <LPTIM1_callback+0x40>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003b6a:	4bc3      	ldr	r3, [pc, #780]	@ (8003e78 <LPTIM1_callback+0x340>)
 8003b6c:	2205      	movs	r2, #5
 8003b6e:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003b70:	4bc1      	ldr	r3, [pc, #772]	@ (8003e78 <LPTIM1_callback+0x340>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	705a      	strb	r2, [r3, #1]
 8003b76:	e070      	b.n	8003c5a <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.shared_state == CC_MODE) && (pin_state == 0)){
 8003b78:	4bbf      	ldr	r3, [pc, #764]	@ (8003e78 <LPTIM1_callback+0x340>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d10b      	bne.n	8003b9a <LPTIM1_callback+0x62>
 8003b82:	230f      	movs	r3, #15
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d106      	bne.n	8003b9a <LPTIM1_callback+0x62>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003b8c:	4bba      	ldr	r3, [pc, #744]	@ (8003e78 <LPTIM1_callback+0x340>)
 8003b8e:	2205      	movs	r2, #5
 8003b90:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = CC_MODE;
 8003b92:	4bb9      	ldr	r3, [pc, #740]	@ (8003e78 <LPTIM1_callback+0x340>)
 8003b94:	2202      	movs	r2, #2
 8003b96:	705a      	strb	r2, [r3, #1]
 8003b98:	e05f      	b.n	8003c5a <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.shared_state == PC_MODE) && (pin_state == 0)){
 8003b9a:	4bb7      	ldr	r3, [pc, #732]	@ (8003e78 <LPTIM1_callback+0x340>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b03      	cmp	r3, #3
 8003ba2:	d10b      	bne.n	8003bbc <LPTIM1_callback+0x84>
 8003ba4:	230f      	movs	r3, #15
 8003ba6:	18fb      	adds	r3, r7, r3
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <LPTIM1_callback+0x84>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003bae:	4bb2      	ldr	r3, [pc, #712]	@ (8003e78 <LPTIM1_callback+0x340>)
 8003bb0:	2205      	movs	r2, #5
 8003bb2:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = PC_MODE;
 8003bb4:	4bb0      	ldr	r3, [pc, #704]	@ (8003e78 <LPTIM1_callback+0x340>)
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	705a      	strb	r2, [r3, #1]
 8003bba:	e04e      	b.n	8003c5a <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003bbc:	4bae      	ldr	r3, [pc, #696]	@ (8003e78 <LPTIM1_callback+0x340>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b06      	cmp	r3, #6
 8003bc4:	d122      	bne.n	8003c0c <LPTIM1_callback+0xd4>
 8003bc6:	230f      	movs	r3, #15
 8003bc8:	18fb      	adds	r3, r7, r3
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d11d      	bne.n	8003c0c <LPTIM1_callback+0xd4>
 8003bd0:	4baa      	ldr	r3, [pc, #680]	@ (8003e7c <LPTIM1_callback+0x344>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d118      	bne.n	8003c0c <LPTIM1_callback+0xd4>
 8003bda:	4ba9      	ldr	r3, [pc, #676]	@ (8003e80 <LPTIM1_callback+0x348>)
 8003bdc:	2120      	movs	r1, #32
 8003bde:	0018      	movs	r0, r3
 8003be0:	f001 ff46 	bl	8005a70 <Get_Status_Bit>
 8003be4:	0003      	movs	r3, r0
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d110      	bne.n	8003c0c <LPTIM1_callback+0xd4>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003bea:	4ba3      	ldr	r3, [pc, #652]	@ (8003e78 <LPTIM1_callback+0x340>)
 8003bec:	2205      	movs	r2, #5
 8003bee:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.speed_exclusive_state = CLK_IN_MODE;
 8003bf0:	4ba1      	ldr	r3, [pc, #644]	@ (8003e78 <LPTIM1_callback+0x340>)
 8003bf2:	2206      	movs	r2, #6
 8003bf4:	705a      	strb	r2, [r3, #1]

		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003bf6:	4ba2      	ldr	r3, [pc, #648]	@ (8003e80 <LPTIM1_callback+0x348>)
 8003bf8:	2120      	movs	r1, #32
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f001 ff5e 	bl	8005abc <Clear_Status_Bit>
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003c00:	4b9f      	ldr	r3, [pc, #636]	@ (8003e80 <LPTIM1_callback+0x348>)
 8003c02:	2140      	movs	r1, #64	@ 0x40
 8003c04:	0018      	movs	r0, r3
 8003c06:	f001 ff59 	bl	8005abc <Clear_Status_Bit>
 8003c0a:	e026      	b.n	8003c5a <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003c0c:	4b9a      	ldr	r3, [pc, #616]	@ (8003e78 <LPTIM1_callback+0x340>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d121      	bne.n	8003c5a <LPTIM1_callback+0x122>
 8003c16:	230f      	movs	r3, #15
 8003c18:	18fb      	adds	r3, r7, r3
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d11c      	bne.n	8003c5a <LPTIM1_callback+0x122>
 8003c20:	4b96      	ldr	r3, [pc, #600]	@ (8003e7c <LPTIM1_callback+0x344>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d117      	bne.n	8003c5a <LPTIM1_callback+0x122>
 8003c2a:	4b95      	ldr	r3, [pc, #596]	@ (8003e80 <LPTIM1_callback+0x348>)
 8003c2c:	2120      	movs	r1, #32
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f001 ff1e 	bl	8005a70 <Get_Status_Bit>
 8003c34:	0003      	movs	r3, r0
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d10f      	bne.n	8003c5a <LPTIM1_callback+0x122>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003c3a:	4b8f      	ldr	r3, [pc, #572]	@ (8003e78 <LPTIM1_callback+0x340>)
 8003c3c:	2205      	movs	r2, #5
 8003c3e:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003c40:	4b8d      	ldr	r3, [pc, #564]	@ (8003e78 <LPTIM1_callback+0x340>)
 8003c42:	2208      	movs	r2, #8
 8003c44:	705a      	strb	r2, [r3, #1]

		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003c46:	4b8e      	ldr	r3, [pc, #568]	@ (8003e80 <LPTIM1_callback+0x348>)
 8003c48:	2120      	movs	r1, #32
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f001 ff36 	bl	8005abc <Clear_Status_Bit>
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003c50:	4b8b      	ldr	r3, [pc, #556]	@ (8003e80 <LPTIM1_callback+0x348>)
 8003c52:	2140      	movs	r1, #64	@ 0x40
 8003c54:	0018      	movs	r0, r3
 8003c56:	f001 ff31 	bl	8005abc <Clear_Status_Bit>
	}

	//CHECK TAP TEMPO STATE
	if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == TAP_MODE)){
 8003c5a:	4b87      	ldr	r3, [pc, #540]	@ (8003e78 <LPTIM1_callback+0x340>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b05      	cmp	r3, #5
 8003c62:	d004      	beq.n	8003c6e <LPTIM1_callback+0x136>
 8003c64:	4b84      	ldr	r3, [pc, #528]	@ (8003e78 <LPTIM1_callback+0x340>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d12a      	bne.n	8003cc4 <LPTIM1_callback+0x18c>

		Check_Tap_Tempo_Switch_State(&tap_tempo_switch_states);
 8003c6e:	4b85      	ldr	r3, [pc, #532]	@ (8003e84 <LPTIM1_callback+0x34c>)
 8003c70:	0018      	movs	r0, r3
 8003c72:	f7fd fc73 	bl	800155c <Check_Tap_Tempo_Switch_State>

		if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8003c76:	4b83      	ldr	r3, [pc, #524]	@ (8003e84 <LPTIM1_callback+0x34c>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d10e      	bne.n	8003c9e <LPTIM1_callback+0x166>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003c80:	2380      	movs	r3, #128	@ 0x80
 8003c82:	0099      	lsls	r1, r3, #2
 8003c84:	23a0      	movs	r3, #160	@ 0xa0
 8003c86:	05db      	lsls	r3, r3, #23
 8003c88:	2200      	movs	r2, #0
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f003 ffb3 	bl	8007bf6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003c90:	4b7d      	ldr	r3, [pc, #500]	@ (8003e88 <LPTIM1_callback+0x350>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	2140      	movs	r1, #64	@ 0x40
 8003c96:	0018      	movs	r0, r3
 8003c98:	f003 ffad 	bl	8007bf6 <HAL_GPIO_WritePin>
 8003c9c:	e012      	b.n	8003cc4 <LPTIM1_callback+0x18c>

		}
		else if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 8003c9e:	4b79      	ldr	r3, [pc, #484]	@ (8003e84 <LPTIM1_callback+0x34c>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10d      	bne.n	8003cc4 <LPTIM1_callback+0x18c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003ca8:	2380      	movs	r3, #128	@ 0x80
 8003caa:	0099      	lsls	r1, r3, #2
 8003cac:	23a0      	movs	r3, #160	@ 0xa0
 8003cae:	05db      	lsls	r3, r3, #23
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f003 ff9f 	bl	8007bf6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003cb8:	4b73      	ldr	r3, [pc, #460]	@ (8003e88 <LPTIM1_callback+0x350>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2140      	movs	r1, #64	@ 0x40
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f003 ff99 	bl	8007bf6 <HAL_GPIO_WritePin>
	}

	//SET PREVIOUS STATE TO CURRENT STATE
	//tap_tempo_switch_states.tap_tempo_switch_prev_state = tap_tempo_switch_states.tap_tempo_switch_state;

	if(Get_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out) == YES){
 8003cc4:	2380      	movs	r3, #128	@ 0x80
 8003cc6:	011a      	lsls	r2, r3, #4
 8003cc8:	4b6d      	ldr	r3, [pc, #436]	@ (8003e80 <LPTIM1_callback+0x348>)
 8003cca:	0011      	movs	r1, r2
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f001 fecf 	bl	8005a70 <Get_Status_Bit>
 8003cd2:	0003      	movs	r3, r0
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d000      	beq.n	8003cda <LPTIM1_callback+0x1a2>
 8003cd8:	e0c0      	b.n	8003e5c <LPTIM1_callback+0x324>

		Clear_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8003cda:	2380      	movs	r3, #128	@ 0x80
 8003cdc:	011a      	lsls	r2, r3, #4
 8003cde:	4b68      	ldr	r3, [pc, #416]	@ (8003e80 <LPTIM1_callback+0x348>)
 8003ce0:	0011      	movs	r1, r2
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f001 feea 	bl	8005abc <Clear_Status_Bit>

		pots_counter = 0;
 8003ce8:	4b68      	ldr	r3, [pc, #416]	@ (8003e8c <LPTIM1_callback+0x354>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	701a      	strb	r2, [r3, #0]

		//PERFORM SPEED POT CHECKING
		if((speed_fsm.current_state.shared_state == PC_MODE) || (speed_fsm.current_state.shared_state == CC_MODE)){
 8003cee:	4b62      	ldr	r3, [pc, #392]	@ (8003e78 <LPTIM1_callback+0x340>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b03      	cmp	r3, #3
 8003cf6:	d004      	beq.n	8003d02 <LPTIM1_callback+0x1ca>
 8003cf8:	4b5f      	ldr	r3, [pc, #380]	@ (8003e78 <LPTIM1_callback+0x340>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d105      	bne.n	8003d0e <LPTIM1_callback+0x1d6>

			Pot_Check(ADCResultsDMA, SPEED_POT);
 8003d02:	4b63      	ldr	r3, [pc, #396]	@ (8003e90 <LPTIM1_callback+0x358>)
 8003d04:	2101      	movs	r1, #1
 8003d06:	0018      	movs	r0, r3
 8003d08:	f7fd fb08 	bl	800131c <Pot_Check>
 8003d0c:	e069      	b.n	8003de2 <LPTIM1_callback+0x2aa>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003d0e:	4b5a      	ldr	r3, [pc, #360]	@ (8003e78 <LPTIM1_callback+0x340>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b06      	cmp	r3, #6
 8003d16:	d117      	bne.n	8003d48 <LPTIM1_callback+0x210>
 8003d18:	4b58      	ldr	r3, [pc, #352]	@ (8003e7c <LPTIM1_callback+0x344>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d112      	bne.n	8003d48 <LPTIM1_callback+0x210>

			Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003d22:	4b57      	ldr	r3, [pc, #348]	@ (8003e80 <LPTIM1_callback+0x348>)
 8003d24:	2140      	movs	r1, #64	@ 0x40
 8003d26:	0018      	movs	r0, r3
 8003d28:	f001 feb6 	bl	8005a98 <Set_Status_Bit>

			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003d2c:	4b54      	ldr	r3, [pc, #336]	@ (8003e80 <LPTIM1_callback+0x348>)
 8003d2e:	2120      	movs	r1, #32
 8003d30:	0018      	movs	r0, r3
 8003d32:	f001 fe9d 	bl	8005a70 <Get_Status_Bit>
 8003d36:	0003      	movs	r3, r0
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d152      	bne.n	8003de2 <LPTIM1_callback+0x2aa>

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003d3c:	4b54      	ldr	r3, [pc, #336]	@ (8003e90 <LPTIM1_callback+0x358>)
 8003d3e:	2101      	movs	r1, #1
 8003d40:	0018      	movs	r0, r3
 8003d42:	f7fd faeb 	bl	800131c <Pot_Check>
			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003d46:	e04c      	b.n	8003de2 <LPTIM1_callback+0x2aa>
			}
		}
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003d48:	4b4b      	ldr	r3, [pc, #300]	@ (8003e78 <LPTIM1_callback+0x340>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d12b      	bne.n	8003daa <LPTIM1_callback+0x272>
 8003d52:	4b4a      	ldr	r3, [pc, #296]	@ (8003e7c <LPTIM1_callback+0x344>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d126      	bne.n	8003daa <LPTIM1_callback+0x272>

			Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003d5c:	4b48      	ldr	r3, [pc, #288]	@ (8003e80 <LPTIM1_callback+0x348>)
 8003d5e:	2140      	movs	r1, #64	@ 0x40
 8003d60:	0018      	movs	r0, r3
 8003d62:	f001 fe99 	bl	8005a98 <Set_Status_Bit>

			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003d66:	4b46      	ldr	r3, [pc, #280]	@ (8003e80 <LPTIM1_callback+0x348>)
 8003d68:	2120      	movs	r1, #32
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f001 fe80 	bl	8005a70 <Get_Status_Bit>
 8003d70:	0003      	movs	r3, r0
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d135      	bne.n	8003de2 <LPTIM1_callback+0x2aa>

				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003d76:	2380      	movs	r3, #128	@ 0x80
 8003d78:	0099      	lsls	r1, r3, #2
 8003d7a:	23a0      	movs	r3, #160	@ 0xa0
 8003d7c:	05db      	lsls	r3, r3, #23
 8003d7e:	2201      	movs	r2, #1
 8003d80:	0018      	movs	r0, r3
 8003d82:	f003 ff38 	bl	8007bf6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003d86:	4b40      	ldr	r3, [pc, #256]	@ (8003e88 <LPTIM1_callback+0x350>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2140      	movs	r1, #64	@ 0x40
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f003 ff32 	bl	8007bf6 <HAL_GPIO_WritePin>

				MIDI_CLK_fsm = NOT_COMPILING;
 8003d92:	4b40      	ldr	r3, [pc, #256]	@ (8003e94 <LPTIM1_callback+0x35c>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	701a      	strb	r2, [r3, #0]
				MIDI_CLK_tag = 0;
 8003d98:	4b3f      	ldr	r3, [pc, #252]	@ (8003e98 <LPTIM1_callback+0x360>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	701a      	strb	r2, [r3, #0]

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003d9e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e90 <LPTIM1_callback+0x358>)
 8003da0:	2101      	movs	r1, #1
 8003da2:	0018      	movs	r0, r3
 8003da4:	f7fd faba 	bl	800131c <Pot_Check>
			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003da8:	e01b      	b.n	8003de2 <LPTIM1_callback+0x2aa>
			}
		}
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003daa:	4b33      	ldr	r3, [pc, #204]	@ (8003e78 <LPTIM1_callback+0x340>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d116      	bne.n	8003de2 <LPTIM1_callback+0x2aa>
 8003db4:	4b31      	ldr	r3, [pc, #196]	@ (8003e7c <LPTIM1_callback+0x344>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d111      	bne.n	8003de2 <LPTIM1_callback+0x2aa>

			Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003dbe:	4b30      	ldr	r3, [pc, #192]	@ (8003e80 <LPTIM1_callback+0x348>)
 8003dc0:	2140      	movs	r1, #64	@ 0x40
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f001 fe68 	bl	8005a98 <Set_Status_Bit>

			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8003e80 <LPTIM1_callback+0x348>)
 8003dca:	2120      	movs	r1, #32
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f001 fe4f 	bl	8005a70 <Get_Status_Bit>
 8003dd2:	0003      	movs	r3, r0
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d104      	bne.n	8003de2 <LPTIM1_callback+0x2aa>

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003dd8:	4b2d      	ldr	r3, [pc, #180]	@ (8003e90 <LPTIM1_callback+0x358>)
 8003dda:	2101      	movs	r1, #1
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f7fd fa9d 	bl	800131c <Pot_Check>
			}
		}

		if((waveshape_fsm.current_state == PC_MODE) || (waveshape_fsm.current_state == CC_MODE)){
 8003de2:	4b2e      	ldr	r3, [pc, #184]	@ (8003e9c <LPTIM1_callback+0x364>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d004      	beq.n	8003df6 <LPTIM1_callback+0x2be>
 8003dec:	4b2b      	ldr	r3, [pc, #172]	@ (8003e9c <LPTIM1_callback+0x364>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d104      	bne.n	8003e00 <LPTIM1_callback+0x2c8>
			Pot_Check(ADCResultsDMA, WAVESHAPE_POT);
 8003df6:	4b26      	ldr	r3, [pc, #152]	@ (8003e90 <LPTIM1_callback+0x358>)
 8003df8:	2100      	movs	r1, #0
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f7fd fa8e 	bl	800131c <Pot_Check>
		}
		if((depth_fsm.current_state == PC_MODE) || (depth_fsm.current_state == CC_MODE)){
 8003e00:	4b27      	ldr	r3, [pc, #156]	@ (8003ea0 <LPTIM1_callback+0x368>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d004      	beq.n	8003e14 <LPTIM1_callback+0x2dc>
 8003e0a:	4b25      	ldr	r3, [pc, #148]	@ (8003ea0 <LPTIM1_callback+0x368>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d104      	bne.n	8003e1e <LPTIM1_callback+0x2e6>
			Pot_Check(ADCResultsDMA, DEPTH_POT);
 8003e14:	4b1e      	ldr	r3, [pc, #120]	@ (8003e90 <LPTIM1_callback+0x358>)
 8003e16:	2102      	movs	r1, #2
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f7fd fa7f 	bl	800131c <Pot_Check>
		}
		if((symmetry_fsm.current_state == PC_MODE) || (symmetry_fsm.current_state == CC_MODE)){
 8003e1e:	4b21      	ldr	r3, [pc, #132]	@ (8003ea4 <LPTIM1_callback+0x36c>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b03      	cmp	r3, #3
 8003e26:	d004      	beq.n	8003e32 <LPTIM1_callback+0x2fa>
 8003e28:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea4 <LPTIM1_callback+0x36c>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d104      	bne.n	8003e3c <LPTIM1_callback+0x304>
			Pot_Check(ADCResultsDMA, SYMMETRY_POT);
 8003e32:	4b17      	ldr	r3, [pc, #92]	@ (8003e90 <LPTIM1_callback+0x358>)
 8003e34:	2103      	movs	r1, #3
 8003e36:	0018      	movs	r0, r3
 8003e38:	f7fd fa70 	bl	800131c <Pot_Check>
		}
		if((phase_fsm.current_state == PC_MODE) || (phase_fsm.current_state == CC_MODE)){
 8003e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea8 <LPTIM1_callback+0x370>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d004      	beq.n	8003e50 <LPTIM1_callback+0x318>
 8003e46:	4b18      	ldr	r3, [pc, #96]	@ (8003ea8 <LPTIM1_callback+0x370>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d134      	bne.n	8003eba <LPTIM1_callback+0x382>
			Pot_Check(ADCResultsDMA, PHASE_POT);
 8003e50:	4b0f      	ldr	r3, [pc, #60]	@ (8003e90 <LPTIM1_callback+0x358>)
 8003e52:	2104      	movs	r1, #4
 8003e54:	0018      	movs	r0, r3
 8003e56:	f7fd fa61 	bl	800131c <Pot_Check>
 8003e5a:	e02e      	b.n	8003eba <LPTIM1_callback+0x382>
		}

	}
	else{
		if(pots_counter == POT_COUNTER_COUNT){
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e8c <LPTIM1_callback+0x354>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b40      	cmp	r3, #64	@ 0x40
 8003e64:	d122      	bne.n	8003eac <LPTIM1_callback+0x374>

			Set_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8003e66:	2380      	movs	r3, #128	@ 0x80
 8003e68:	011a      	lsls	r2, r3, #4
 8003e6a:	4b05      	ldr	r3, [pc, #20]	@ (8003e80 <LPTIM1_callback+0x348>)
 8003e6c:	0011      	movs	r1, r2
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f001 fe12 	bl	8005a98 <Set_Status_Bit>
 8003e74:	e021      	b.n	8003eba <LPTIM1_callback+0x382>
 8003e76:	46c0      	nop			@ (mov r8, r8)
 8003e78:	20000428 	.word	0x20000428
 8003e7c:	2000043c 	.word	0x2000043c
 8003e80:	20000c24 	.word	0x20000c24
 8003e84:	20000c18 	.word	0x20000c18
 8003e88:	50000800 	.word	0x50000800
 8003e8c:	200004d2 	.word	0x200004d2
 8003e90:	20000c30 	.word	0x20000c30
 8003e94:	20000ccc 	.word	0x20000ccc
 8003e98:	20000c22 	.word	0x20000c22
 8003e9c:	20000430 	.word	0x20000430
 8003ea0:	2000042c 	.word	0x2000042c
 8003ea4:	20000434 	.word	0x20000434
 8003ea8:	20000438 	.word	0x20000438
		}
		else{

			pots_counter++;
 8003eac:	4b08      	ldr	r3, [pc, #32]	@ (8003ed0 <LPTIM1_callback+0x398>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	4b06      	ldr	r3, [pc, #24]	@ (8003ed0 <LPTIM1_callback+0x398>)
 8003eb8:	701a      	strb	r2, [r3, #0]
		}
	}

	//SET TIMER TRIGGER
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8003eba:	4b06      	ldr	r3, [pc, #24]	@ (8003ed4 <LPTIM1_callback+0x39c>)
 8003ebc:	22fa      	movs	r2, #250	@ 0xfa
 8003ebe:	21fa      	movs	r1, #250	@ 0xfa
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f003 ff8f 	bl	8007de4 <HAL_LPTIM_SetOnce_Start_IT>

}
 8003ec6:	46c0      	nop			@ (mov r8, r8)
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	b004      	add	sp, #16
 8003ecc:	bdb0      	pop	{r4, r5, r7, pc}
 8003ece:	46c0      	nop			@ (mov r8, r8)
 8003ed0:	200004d2 	.word	0x200004d2
 8003ed4:	20000bbc 	.word	0x20000bbc

08003ed8 <TIM17_callback>:

void TIM17_callback(TIM_HandleTypeDef *htim){
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]


}
 8003ee0:	46c0      	nop			@ (mov r8, r8)
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b002      	add	sp, #8
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <TIM14_callback>:

void TIM14_callback(TIM_HandleTypeDef *htim){
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]


}
 8003ef0:	46c0      	nop			@ (mov r8, r8)
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b002      	add	sp, #8
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <Input_Capture_Processing>:
volatile uint32_t TIM2_ch1_input_capture_value;
volatile uint16_t interrupt_period = 0;
volatile uint8_t MIDI_CLK_tag = 0;

//FUNCTION DEFINITIONS
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params *params_ptr){
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	0002      	movs	r2, r0
 8003f00:	6039      	str	r1, [r7, #0]
 8003f02:	1dbb      	adds	r3, r7, #6
 8003f04:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Clear_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started); //reset flag
 8003f06:	4b34      	ldr	r3, [pc, #208]	@ (8003fd8 <Input_Capture_Processing+0xe0>)
 8003f08:	2104      	movs	r1, #4
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f001 fdd6 	bl	8005abc <Clear_Status_Bit>

	//DETERMINE WHAT TO SET THE RAW_START_VALUE AND BASE_PRESCALER TO BASED ON THE I/P CAPTURE VALUE
	//CHECK FOR PRIMALITY
	if(isPrime(interrupt_period_value) == YES){
 8003f10:	1dbb      	adds	r3, r7, #6
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	0018      	movs	r0, r3
 8003f18:	f001 fd5f 	bl	80059da <isPrime>
 8003f1c:	0003      	movs	r3, r0
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d106      	bne.n	8003f30 <Input_Capture_Processing+0x38>

		interrupt_period_value += 1;
 8003f22:	1dbb      	adds	r3, r7, #6
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3301      	adds	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	1dbb      	adds	r3, r7, #6
 8003f2e:	801a      	strh	r2, [r3, #0]
	}

	//START FINDING FACTORS
	uint32_t N = interrupt_period_value << 6; //calculate the N-value which is prescaler_meas * interrupt_period_meas. The measurement prescaler is used which is 64. (TIM2 has a prescaler of 64*512, but since we divide this value by 512, the prescaler is then just 64).
 8003f30:	1dbb      	adds	r3, r7, #6
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	019b      	lsls	r3, r3, #6
 8003f38:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8003f3a:	2317      	movs	r3, #23
 8003f3c:	18fb      	adds	r3, r7, r3
 8003f3e:	2200      	movs	r2, #0
 8003f40:	701a      	strb	r2, [r3, #0]
 8003f42:	e02d      	b.n	8003fa0 <Input_Capture_Processing+0xa8>

		interrupt_period_value = 256 - i;
 8003f44:	2317      	movs	r3, #23
 8003f46:	18fb      	adds	r3, r7, r3
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2280      	movs	r2, #128	@ 0x80
 8003f4e:	0052      	lsls	r2, r2, #1
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	1dbb      	adds	r3, r7, #6
 8003f56:	801a      	strh	r2, [r3, #0]
		uint16_t remainder = N % interrupt_period_value;
 8003f58:	1dbb      	adds	r3, r7, #6
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	001a      	movs	r2, r3
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	0011      	movs	r1, r2
 8003f64:	0018      	movs	r0, r3
 8003f66:	f7fc f953 	bl	8000210 <__aeabi_uidivmod>
 8003f6a:	000b      	movs	r3, r1
 8003f6c:	001a      	movs	r2, r3
 8003f6e:	210e      	movs	r1, #14
 8003f70:	187b      	adds	r3, r7, r1
 8003f72:	801a      	strh	r2, [r3, #0]

		if(remainder == 0){ //check if no remainder -> integer
 8003f74:	187b      	adds	r3, r7, r1
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10b      	bne.n	8003f94 <Input_Capture_Processing+0x9c>

			params_ptr->raw_prescaler = N / interrupt_period_value;
 8003f7c:	1dbb      	adds	r3, r7, #6
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	0019      	movs	r1, r3
 8003f84:	6938      	ldr	r0, [r7, #16]
 8003f86:	f7fc f8bd 	bl	8000104 <__udivsi3>
 8003f8a:	0003      	movs	r3, r0
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	835a      	strh	r2, [r3, #26]
			break;
 8003f92:	e00a      	b.n	8003faa <Input_Capture_Processing+0xb2>
	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8003f94:	2117      	movs	r1, #23
 8003f96:	187b      	adds	r3, r7, r1
 8003f98:	781a      	ldrb	r2, [r3, #0]
 8003f9a:	187b      	adds	r3, r7, r1
 8003f9c:	3201      	adds	r2, #1
 8003f9e:	701a      	strb	r2, [r3, #0]
 8003fa0:	2317      	movs	r3, #23
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b80      	cmp	r3, #128	@ 0x80
 8003fa8:	d9cc      	bls.n	8003f44 <Input_Capture_Processing+0x4c>
		}
	}

	params_ptr->raw_start_value = 256 - interrupt_period_value;
 8003faa:	1dbb      	adds	r3, r7, #6
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2280      	movs	r2, #128	@ 0x80
 8003fb2:	0052      	lsls	r2, r2, #1
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	825a      	strh	r2, [r3, #18]

	Calculate_Next_Main_Oscillator_Values(params_ptr, (enum Next_Values_Processing_Mode)IP_CAPTURE_MODE);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f000 f9cd 	bl	8004360 <Calculate_Next_Main_Oscillator_Values>
	Process_TIM16_Final_Start_Value_and_Final_Prescaler(params_ptr);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f001 f8c3 	bl	8005154 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);

	return 1;
 8003fce:	2301      	movs	r3, #1
}
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b006      	add	sp, #24
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20000c24 	.word	0x20000c24

08003fdc <Start_Input_Capture_Timer>:

uint8_t Start_Input_Capture_Timer(void){
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0

	uint8_t ok = Start_IC_TIM(&htim2, TIM_CHANNEL_1);
 8003fe2:	1dfc      	adds	r4, r7, #7
 8003fe4:	4b09      	ldr	r3, [pc, #36]	@ (800400c <Start_Input_Capture_Timer+0x30>)
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f000 f811 	bl	8004010 <Start_IC_TIM>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8003ff2:	1dfb      	adds	r3, r7, #7
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <Start_Input_Capture_Timer+0x22>

		Error_Handler();
 8003ffa:	f7fe f8f5 	bl	80021e8 <Error_Handler>
	}

	return ok;
 8003ffe:	1dfb      	adds	r3, r7, #7
 8004000:	781b      	ldrb	r3, [r3, #0]
}
 8004002:	0018      	movs	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	b003      	add	sp, #12
 8004008:	bd90      	pop	{r4, r7, pc}
 800400a:	46c0      	nop			@ (mov r8, r8)
 800400c:	20000804 	.word	0x20000804

08004010 <Start_IC_TIM>:

uint8_t Start_IC_TIM(TIM_HandleTypeDef *TIM, uint32_t IC_TIM_channel){
 8004010:	b5b0      	push	{r4, r5, r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]

	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 800401a:	250f      	movs	r5, #15
 800401c:	197c      	adds	r4, r7, r5
 800401e:	4b10      	ldr	r3, [pc, #64]	@ (8004060 <Start_IC_TIM+0x50>)
 8004020:	0018      	movs	r0, r3
 8004022:	f005 f979 	bl	8009318 <HAL_TIM_Base_Start_IT>
 8004026:	0003      	movs	r3, r0
 8004028:	7023      	strb	r3, [r4, #0]
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	4b0c      	ldr	r3, [pc, #48]	@ (8004060 <Start_IC_TIM+0x50>)
 800402e:	0011      	movs	r1, r2
 8004030:	0018      	movs	r0, r3
 8004032:	f005 fddf 	bl	8009bf4 <HAL_TIM_IC_Start_IT>
 8004036:	0003      	movs	r3, r0
 8004038:	0019      	movs	r1, r3
 800403a:	197b      	adds	r3, r7, r5
 800403c:	197a      	adds	r2, r7, r5
 800403e:	7812      	ldrb	r2, [r2, #0]
 8004040:	400a      	ands	r2, r1
 8004042:	701a      	strb	r2, [r3, #0]

	if(ok_AND != HAL_OK){
 8004044:	197b      	adds	r3, r7, r5
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <Start_IC_TIM+0x40>

		Error_Handler();
 800404c:	f7fe f8cc 	bl	80021e8 <Error_Handler>
	}

	return ok_AND;
 8004050:	230f      	movs	r3, #15
 8004052:	18fb      	adds	r3, r7, r3
 8004054:	781b      	ldrb	r3, [r3, #0]
}
 8004056:	0018      	movs	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	b004      	add	sp, #16
 800405c:	bdb0      	pop	{r4, r5, r7, pc}
 800405e:	46c0      	nop			@ (mov r8, r8)
 8004060:	20000804 	.word	0x20000804

08004064 <Copy_Params_Structs>:

uint8_t Copy_Params_Structs(struct Params *src_ptr, struct Params *dst_ptr){
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]

	*dst_ptr = *src_ptr;
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	0010      	movs	r0, r2
 8004074:	0019      	movs	r1, r3
 8004076:	2324      	movs	r3, #36	@ 0x24
 8004078:	001a      	movs	r2, r3
 800407a:	f008 ff5d 	bl	800cf38 <memcpy>

	return 1;
 800407e:	2301      	movs	r3, #1
}
 8004080:	0018      	movs	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	b002      	add	sp, #8
 8004086:	bd80      	pop	{r7, pc}

08004088 <Start_Measurement_Reelapse_Timer>:

uint8_t Start_Measurement_Reelapse_Timer(void){
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 800408c:	4b0b      	ldr	r3, [pc, #44]	@ (80040bc <Start_Measurement_Reelapse_Timer+0x34>)
 800408e:	2100      	movs	r1, #0
 8004090:	0018      	movs	r0, r3
 8004092:	f001 fc86 	bl	80059a2 <Stop_OC_TIM>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004096:	4b09      	ldr	r3, [pc, #36]	@ (80040bc <Start_Measurement_Reelapse_Timer+0x34>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2200      	movs	r2, #0
 800409c:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 800409e:	4b08      	ldr	r3, [pc, #32]	@ (80040c0 <Start_Measurement_Reelapse_Timer+0x38>)
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	4b05      	ldr	r3, [pc, #20]	@ (80040bc <Start_Measurement_Reelapse_Timer+0x34>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	635a      	str	r2, [r3, #52]	@ 0x34
	Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 80040aa:	4b04      	ldr	r3, [pc, #16]	@ (80040bc <Start_Measurement_Reelapse_Timer+0x34>)
 80040ac:	2100      	movs	r1, #0
 80040ae:	0018      	movs	r0, r3
 80040b0:	f001 fc5b 	bl	800596a <Start_OC_TIM>

	return 1;
 80040b4:	2301      	movs	r3, #1
}
 80040b6:	0018      	movs	r0, r3
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	200008c0 	.word	0x200008c0
 80040c0:	20000c20 	.word	0x20000c20

080040c4 <Begin_Input_Capture_Measurement>:

uint8_t Begin_Input_Capture_Measurement(void){
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0

	__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 80040c8:	4b03      	ldr	r3, [pc, #12]	@ (80040d8 <Begin_Input_Capture_Measurement+0x14>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2200      	movs	r2, #0
 80040ce:	625a      	str	r2, [r3, #36]	@ 0x24

	return 1;
 80040d0:	2301      	movs	r3, #1
}
 80040d2:	0018      	movs	r0, r3
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20000804 	.word	0x20000804

080040dc <main>:
//INCLUDES
#include "main.h"
#include "main_vars.h"

int main(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
	//SYSTEM INIT
	System_Init();
 80040e0:	f7fe f888 	bl	80021f4 <System_Init>

	//STARTUP
	Startup();
 80040e4:	f000 fb32 	bl	800474c <Startup>

	while (1)
	{
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 80040e8:	4b39      	ldr	r3, [pc, #228]	@ (80041d0 <main+0xf4>)
 80040ea:	2104      	movs	r1, #4
 80040ec:	0018      	movs	r0, r3
 80040ee:	f001 fcbf 	bl	8005a70 <Get_Status_Bit>
 80040f2:	0003      	movs	r3, r0
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d107      	bne.n	8004108 <main+0x2c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

			Input_Capture_Processing(interrupt_period, &params_to_be_loaded);
 80040f8:	4b36      	ldr	r3, [pc, #216]	@ (80041d4 <main+0xf8>)
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	4a36      	ldr	r2, [pc, #216]	@ (80041d8 <main+0xfc>)
 8004100:	0011      	movs	r1, r2
 8004102:	0018      	movs	r0, r3
 8004104:	f7ff fef8 	bl	8003ef8 <Input_Capture_Processing>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
		}

		if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running) == YES){
 8004108:	4b31      	ldr	r3, [pc, #196]	@ (80041d0 <main+0xf4>)
 800410a:	2140      	movs	r1, #64	@ 0x40
 800410c:	0018      	movs	r0, r3
 800410e:	f001 fcaf 	bl	8005a70 <Get_Status_Bit>
 8004112:	0003      	movs	r3, r0
 8004114:	2b01      	cmp	r3, #1
 8004116:	d12b      	bne.n	8004170 <main+0x94>

			if(idle_counter < IDLE_COUNT){
 8004118:	4b30      	ldr	r3, [pc, #192]	@ (80041dc <main+0x100>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	23fa      	movs	r3, #250	@ 0xfa
 800411e:	01db      	lsls	r3, r3, #7
 8004120:	429a      	cmp	r2, r3
 8004122:	d218      	bcs.n	8004156 <main+0x7a>

				if(IP_CAP_fsm.current_state != IDLE){
 8004124:	4b2e      	ldr	r3, [pc, #184]	@ (80041e0 <main+0x104>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00d      	beq.n	800414a <main+0x6e>

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800412e:	4b28      	ldr	r3, [pc, #160]	@ (80041d0 <main+0xf4>)
 8004130:	2140      	movs	r1, #64	@ 0x40
 8004132:	0018      	movs	r0, r3
 8004134:	f001 fcc2 	bl	8005abc <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004138:	4b25      	ldr	r3, [pc, #148]	@ (80041d0 <main+0xf4>)
 800413a:	2120      	movs	r1, #32
 800413c:	0018      	movs	r0, r3
 800413e:	f001 fcbd 	bl	8005abc <Clear_Status_Bit>
					idle_counter = 0;
 8004142:	4b26      	ldr	r3, [pc, #152]	@ (80041dc <main+0x100>)
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	e012      	b.n	8004170 <main+0x94>
				}
				else{

					idle_counter++;
 800414a:	4b24      	ldr	r3, [pc, #144]	@ (80041dc <main+0x100>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	4b22      	ldr	r3, [pc, #136]	@ (80041dc <main+0x100>)
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	e00c      	b.n	8004170 <main+0x94>
				}
			}
			else{

				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004156:	4b1e      	ldr	r3, [pc, #120]	@ (80041d0 <main+0xf4>)
 8004158:	2140      	movs	r1, #64	@ 0x40
 800415a:	0018      	movs	r0, r3
 800415c:	f001 fcae 	bl	8005abc <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004160:	4b1b      	ldr	r3, [pc, #108]	@ (80041d0 <main+0xf4>)
 8004162:	2120      	movs	r1, #32
 8004164:	0018      	movs	r0, r3
 8004166:	f001 fc97 	bl	8005a98 <Set_Status_Bit>
				idle_counter = 0;
 800416a:	4b1c      	ldr	r3, [pc, #112]	@ (80041dc <main+0x100>)
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
			}
		}
		if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running) == YES){
 8004170:	2380      	movs	r3, #128	@ 0x80
 8004172:	005a      	lsls	r2, r3, #1
 8004174:	4b16      	ldr	r3, [pc, #88]	@ (80041d0 <main+0xf4>)
 8004176:	0011      	movs	r1, r2
 8004178:	0018      	movs	r0, r3
 800417a:	f001 fc79 	bl	8005a70 <Get_Status_Bit>
 800417e:	0003      	movs	r3, r0
 8004180:	2b01      	cmp	r3, #1
 8004182:	d1b1      	bne.n	80040e8 <main+0xc>

			if(midi_counter < MIDI_COUNT){
 8004184:	4b17      	ldr	r3, [pc, #92]	@ (80041e4 <main+0x108>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	23fa      	movs	r3, #250	@ 0xfa
 800418a:	01db      	lsls	r3, r3, #7
 800418c:	429a      	cmp	r2, r3
 800418e:	d205      	bcs.n	800419c <main+0xc0>

				midi_counter++;
 8004190:	4b14      	ldr	r3, [pc, #80]	@ (80041e4 <main+0x108>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	4b13      	ldr	r3, [pc, #76]	@ (80041e4 <main+0x108>)
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	e7a5      	b.n	80040e8 <main+0xc>
			}
			else{

				Clear_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800419c:	2380      	movs	r3, #128	@ 0x80
 800419e:	005a      	lsls	r2, r3, #1
 80041a0:	4b0b      	ldr	r3, [pc, #44]	@ (80041d0 <main+0xf4>)
 80041a2:	0011      	movs	r1, r2
 80041a4:	0018      	movs	r0, r3
 80041a6:	f001 fc89 	bl	8005abc <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out);
 80041aa:	2380      	movs	r3, #128	@ 0x80
 80041ac:	009a      	lsls	r2, r3, #2
 80041ae:	4b08      	ldr	r3, [pc, #32]	@ (80041d0 <main+0xf4>)
 80041b0:	0011      	movs	r1, r2
 80041b2:	0018      	movs	r0, r3
 80041b4:	f001 fc70 	bl	8005a98 <Set_Status_Bit>
				active_status_byte = 0;
 80041b8:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <main+0x10c>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 80041be:	4b0b      	ldr	r3, [pc, #44]	@ (80041ec <main+0x110>)
 80041c0:	0018      	movs	r0, r3
 80041c2:	f7fc ff4e 	bl	8001062 <Clear_Data_Buffer>
				midi_counter = 0;
 80041c6:	4b07      	ldr	r3, [pc, #28]	@ (80041e4 <main+0x108>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 80041cc:	e78c      	b.n	80040e8 <main+0xc>
 80041ce:	46c0      	nop			@ (mov r8, r8)
 80041d0:	20000c24 	.word	0x20000c24
 80041d4:	20000c20 	.word	0x20000c20
 80041d8:	20000c84 	.word	0x20000c84
 80041dc:	20000c28 	.word	0x20000c28
 80041e0:	2000043c 	.word	0x2000043c
 80041e4:	20000c2c 	.word	0x20000c2c
 80041e8:	200004be 	.word	0x200004be
 80041ec:	200004c0 	.word	0x200004c0

080041f0 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>:
								.duty_delay_line_start_offset = 1,  //initial value is 1st index - to give us space to fill index 0
								.duty_delay_line_finish_offset = FINAL_INDEX + 1}; //initial value is 512th index, one larger than the index of the final sample

//FUNCTION DEFINITIONS
uint8_t Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel_1, uint32_t PWM_TIM_channel_2)
{
 80041f0:	b590      	push	{r4, r7, lr}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
	uint8_t ok_OR = 0;
 80041fc:	2417      	movs	r4, #23
 80041fe:	193b      	adds	r3, r7, r4
 8004200:	2200      	movs	r2, #0
 8004202:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_Base_Start(TIM);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	0018      	movs	r0, r3
 8004208:	f005 f83a 	bl	8009280 <HAL_TIM_Base_Start>
 800420c:	0003      	movs	r3, r0
 800420e:	0019      	movs	r1, r3
 8004210:	193b      	adds	r3, r7, r4
 8004212:	193a      	adds	r2, r7, r4
 8004214:	7812      	ldrb	r2, [r2, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	0011      	movs	r1, r2
 8004220:	0018      	movs	r0, r3
 8004222:	f005 fb9b 	bl	800995c <HAL_TIM_PWM_Start>
 8004226:	0003      	movs	r3, r0
 8004228:	0019      	movs	r1, r3
 800422a:	193b      	adds	r3, r7, r4
 800422c:	193a      	adds	r2, r7, r4
 800422e:	7812      	ldrb	r2, [r2, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	0011      	movs	r1, r2
 800423a:	0018      	movs	r0, r3
 800423c:	f005 fb8e 	bl	800995c <HAL_TIM_PWM_Start>
 8004240:	0003      	movs	r3, r0
 8004242:	0019      	movs	r1, r3
 8004244:	193b      	adds	r3, r7, r4
 8004246:	193a      	adds	r2, r7, r4
 8004248:	7812      	ldrb	r2, [r2, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	701a      	strb	r2, [r3, #0]

	if(ok_OR != HAL_OK){
 800424e:	193b      	adds	r3, r7, r4
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x6a>

		Error_Handler();
 8004256:	f7fd ffc7 	bl	80021e8 <Error_Handler>
	}

	return ok_OR;
 800425a:	2317      	movs	r3, #23
 800425c:	18fb      	adds	r3, r7, r3
 800425e:	781b      	ldrb	r3, [r3, #0]
}
 8004260:	0018      	movs	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	b007      	add	sp, #28
 8004266:	bd90      	pop	{r4, r7, pc}

08004268 <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 8004268:	b590      	push	{r4, r7, lr}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 800426e:	1dfc      	adds	r4, r7, #7
 8004270:	4b09      	ldr	r3, [pc, #36]	@ (8004298 <Start_Freq_Gen_Timer+0x30>)
 8004272:	2100      	movs	r1, #0
 8004274:	0018      	movs	r0, r3
 8004276:	f001 fb78 	bl	800596a <Start_OC_TIM>
 800427a:	0003      	movs	r3, r0
 800427c:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 800427e:	1dfb      	adds	r3, r7, #7
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <Start_Freq_Gen_Timer+0x22>

		Error_Handler();
 8004286:	f7fd ffaf 	bl	80021e8 <Error_Handler>
	}

	return ok;
 800428a:	1dfb      	adds	r3, r7, #7
 800428c:	781b      	ldrb	r3, [r3, #0]
}
 800428e:	0018      	movs	r0, r3
 8004290:	46bd      	mov	sp, r7
 8004292:	b003      	add	sp, #12
 8004294:	bd90      	pop	{r4, r7, pc}
 8004296:	46c0      	nop			@ (mov r8, r8)
 8004298:	20000748 	.word	0x20000748

0800429c <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:

uint8_t Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(struct Params* params_ptr){
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]

	uint32_t speed_control = 0;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60fb      	str	r3, [r7, #12]
	uint8_t how_many_128 = 0;
 80042a8:	210b      	movs	r1, #11
 80042aa:	187b      	adds	r3, r7, r1
 80042ac:	2200      	movs	r2, #0
 80042ae:	701a      	strb	r2, [r3, #0]

    //speed_control = (speed_adc_10_bit/1024)*'range macro'
    speed_control = params_ptr->speed * NUMBER_OF_FREQUENCY_STEPS;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	891b      	ldrh	r3, [r3, #8]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	001a      	movs	r2, r3
 80042b8:	0013      	movs	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	189b      	adds	r3, r3, r2
 80042be:	019b      	lsls	r3, r3, #6
 80042c0:	189b      	adds	r3, r3, r2
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	189b      	adds	r3, r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	0a9b      	lsrs	r3, r3, #10
 80042cc:	60fb      	str	r3, [r7, #12]

    how_many_128 = (uint8_t)(speed_control >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	09da      	lsrs	r2, r3, #7
 80042d2:	187b      	adds	r3, r7, r1
 80042d4:	701a      	strb	r2, [r3, #0]
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	b29a      	uxth	r2, r3
 80042da:	187b      	adds	r3, r7, r1
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	01db      	lsls	r3, r3, #7
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	825a      	strh	r2, [r3, #18]
    params_ptr->raw_prescaler = SLOWEST_SPEED_PRESCALER >> how_many_128;
 80042ec:	187b      	adds	r3, r7, r1
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2280      	movs	r2, #128	@ 0x80
 80042f2:	00d2      	lsls	r2, r2, #3
 80042f4:	411a      	asrs	r2, r3
 80042f6:	0013      	movs	r3, r2
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	835a      	strh	r2, [r3, #26]

    return 1;
 80042fe:	2301      	movs	r3, #1
}
 8004300:	0018      	movs	r0, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	b004      	add	sp, #16
 8004306:	bd80      	pop	{r7, pc}

08004308 <Set_Oscillator_Values>:

uint8_t Set_Oscillator_Values(struct Params* params_ptr){
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]

	////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE MAIN OSCILLATOR//
	////////////////////////////////////////////////////////
	__HAL_TIM_SET_AUTORELOAD(&htim16, params_ptr->final_ARR);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8b1b      	ldrh	r3, [r3, #24]
 8004314:	b29a      	uxth	r2, r3
 8004316:	4b10      	ldr	r3, [pc, #64]	@ (8004358 <Set_Oscillator_Values+0x50>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8b1b      	ldrh	r3, [r3, #24]
 8004320:	b29b      	uxth	r3, r3
 8004322:	001a      	movs	r2, r3
 8004324:	4b0c      	ldr	r3, [pc, #48]	@ (8004358 <Set_Oscillator_Values+0x50>)
 8004326:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_PRESCALER(&htim16, params_ptr->final_prescaler_minus_one); //have to take one off the divisor
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8bdb      	ldrh	r3, [r3, #30]
 800432c:	b29a      	uxth	r2, r3
 800432e:	4b0a      	ldr	r3, [pc, #40]	@ (8004358 <Set_Oscillator_Values+0x50>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	629a      	str	r2, [r3, #40]	@ 0x28

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, params_ptr->prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	885b      	ldrh	r3, [r3, #2]
 8004338:	b29a      	uxth	r2, r3
 800433a:	4b08      	ldr	r3, [pc, #32]	@ (800435c <Set_Oscillator_Values+0x54>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	639a      	str	r2, [r3, #56]	@ 0x38

	/////////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE SECONDARY OSCILLATOR//
	/////////////////////////////////////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	889b      	ldrh	r3, [r3, #4]
 8004344:	b29a      	uxth	r2, r3
 8004346:	4b05      	ldr	r3, [pc, #20]	@ (800435c <Set_Oscillator_Values+0x54>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	641a      	str	r2, [r3, #64]	@ 0x40

	return 1;
 800434c:	2301      	movs	r3, #1
}
 800434e:	0018      	movs	r0, r3
 8004350:	46bd      	mov	sp, r7
 8004352:	b002      	add	sp, #8
 8004354:	bd80      	pop	{r7, pc}
 8004356:	46c0      	nop			@ (mov r8, r8)
 8004358:	20000748 	.word	0x20000748
 800435c:	2000097c 	.word	0x2000097c

08004360 <Calculate_Next_Main_Oscillator_Values>:

uint8_t Calculate_Next_Main_Oscillator_Values(struct Params* params_ptr, enum Next_Values_Processing_Mode mode){
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	000a      	movs	r2, r1
 800436a:	1cfb      	adds	r3, r7, #3
 800436c:	701a      	strb	r2, [r3, #0]

	if(mode == REGULAR_MODE){
 800436e:	1cfb      	adds	r3, r7, #3
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d144      	bne.n	8004400 <Calculate_Next_Main_Oscillator_Values+0xa0>

		params_ptr->index++;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	89db      	ldrh	r3, [r3, #14]
 800437a:	b29b      	uxth	r3, r3
 800437c:	3301      	adds	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	81da      	strh	r2, [r3, #14]

		if(params_ptr->index == FINAL_INDEX + 1){
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	89db      	ldrh	r3, [r3, #14]
 8004388:	b29a      	uxth	r2, r3
 800438a:	2380      	movs	r3, #128	@ 0x80
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	429a      	cmp	r2, r3
 8004390:	d102      	bne.n	8004398 <Calculate_Next_Main_Oscillator_Values+0x38>
			params_ptr->index = 0;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	81da      	strh	r2, [r3, #14]
		}

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	89db      	ldrh	r3, [r3, #14]
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <Calculate_Next_Main_Oscillator_Values+0x50>
			params_ptr->quadrant = FIRST_QUADRANT;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	741a      	strb	r2, [r3, #16]
 80043ae:	e05a      	b.n	8004466 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == SECOND_QUADRANT_START_INDEX){
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	89db      	ldrh	r3, [r3, #14]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b80      	cmp	r3, #128	@ 0x80
 80043b8:	d106      	bne.n	80043c8 <Calculate_Next_Main_Oscillator_Values+0x68>
			params_ptr->quadrant = SECOND_QUADRANT;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	741a      	strb	r2, [r3, #16]
 80043c6:	e04e      	b.n	8004466 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == THIRD_QUADRANT_START_INDEX){
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	89db      	ldrh	r3, [r3, #14]
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	2380      	movs	r3, #128	@ 0x80
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d106      	bne.n	80043e4 <Calculate_Next_Main_Oscillator_Values+0x84>
			params_ptr->quadrant = FIRST_QUADRANT;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	741a      	strb	r2, [r3, #16]
 80043e2:	e040      	b.n	8004466 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == FOURTH_QUADRANT_START_INDEX){
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	89db      	ldrh	r3, [r3, #14]
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	23c0      	movs	r3, #192	@ 0xc0
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d139      	bne.n	8004466 <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = SECOND_QUADRANT;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	741a      	strb	r2, [r3, #16]
 80043fe:	e032      	b.n	8004466 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == IP_CAPTURE_MODE){
 8004400:	1cfb      	adds	r3, r7, #3
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d11f      	bne.n	8004448 <Calculate_Next_Main_Oscillator_Values+0xe8>

		if(params_ptr->waveshape == SINE_MODE || params_ptr->waveshape == TRIANGLE_MODE){
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	799b      	ldrb	r3, [r3, #6]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	d004      	beq.n	800441c <Calculate_Next_Main_Oscillator_Values+0xbc>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	799b      	ldrb	r3, [r3, #6]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10a      	bne.n	8004432 <Calculate_Next_Main_Oscillator_Values+0xd2>

			params_ptr->index = SINE_OR_TRIANGLE_WAVE_TEMPO_PERCEIVED_APEX_INDEX;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	22a7      	movs	r2, #167	@ 0xa7
 8004420:	0052      	lsls	r2, r2, #1
 8004422:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SINE_OR_TRI_SYNCED;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SINE_OR_TRI_SYNCED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	741a      	strb	r2, [r3, #16]
 8004430:	e019      	b.n	8004466 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else{

			params_ptr->index = SQUARE_WAVE_TEMPO_APEX_INDEX;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2280      	movs	r2, #128	@ 0x80
 8004436:	0052      	lsls	r2, r2, #1
 8004438:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SQUARE_SYNCED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SQUARE_SYNCED;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	741a      	strb	r2, [r3, #16]
 8004446:	e00e      	b.n	8004466 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == STARTUP_MODE){
 8004448:	1cfb      	adds	r3, r7, #3
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b02      	cmp	r3, #2
 800444e:	d10a      	bne.n	8004466 <Calculate_Next_Main_Oscillator_Values+0x106>

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	89db      	ldrh	r3, [r3, #14]
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d105      	bne.n	8004466 <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = FIRST_QUADRANT;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	741a      	strb	r2, [r3, #16]
		}
	}

	//ONCE INDEX IS SET, FIND THE DUTY VALUE
	if(params_ptr->waveshape == TRIANGLE_MODE){
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	799b      	ldrb	r3, [r3, #6]
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d109      	bne.n	8004484 <Calculate_Next_Main_Oscillator_Values+0x124>
		params_ptr->duty = tri_wavetable[params_ptr->index];
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	89db      	ldrh	r3, [r3, #14]
 8004474:	b29b      	uxth	r3, r3
 8004476:	001a      	movs	r2, r3
 8004478:	4b31      	ldr	r3, [pc, #196]	@ (8004540 <Calculate_Next_Main_Oscillator_Values+0x1e0>)
 800447a:	0052      	lsls	r2, r2, #1
 800447c:	5ad2      	ldrh	r2, [r2, r3]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	801a      	strh	r2, [r3, #0]
 8004482:	e029      	b.n	80044d8 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if(params_ptr->waveshape == SINE_MODE){
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	799b      	ldrb	r3, [r3, #6]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b01      	cmp	r3, #1
 800448c:	d109      	bne.n	80044a2 <Calculate_Next_Main_Oscillator_Values+0x142>
		params_ptr->duty = sine_wavetable[params_ptr->index];
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	89db      	ldrh	r3, [r3, #14]
 8004492:	b29b      	uxth	r3, r3
 8004494:	001a      	movs	r2, r3
 8004496:	4b2b      	ldr	r3, [pc, #172]	@ (8004544 <Calculate_Next_Main_Oscillator_Values+0x1e4>)
 8004498:	0052      	lsls	r2, r2, #1
 800449a:	5ad2      	ldrh	r2, [r2, r3]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	801a      	strh	r2, [r3, #0]
 80044a0:	e01a      	b.n	80044d8 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	799b      	ldrb	r3, [r3, #6]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d108      	bne.n	80044be <Calculate_Next_Main_Oscillator_Values+0x15e>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	89db      	ldrh	r3, [r3, #14]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2bff      	cmp	r3, #255	@ 0xff
 80044b4:	d803      	bhi.n	80044be <Calculate_Next_Main_Oscillator_Values+0x15e>
		params_ptr->duty = PWM_DUTY_VALUE_MAX;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a23      	ldr	r2, [pc, #140]	@ (8004548 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 80044ba:	801a      	strh	r2, [r3, #0]
 80044bc:	e00c      	b.n	80044d8 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index >= THIRD_QUADRANT_START_INDEX)){
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	799b      	ldrb	r3, [r3, #6]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d107      	bne.n	80044d8 <Calculate_Next_Main_Oscillator_Values+0x178>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	89db      	ldrh	r3, [r3, #14]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2bff      	cmp	r3, #255	@ 0xff
 80044d0:	d902      	bls.n	80044d8 <Calculate_Next_Main_Oscillator_Values+0x178>
		params_ptr->duty = PWM_DUTY_VALUE_MIN;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	801a      	strh	r2, [r3, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(params_ptr->depth == ((1 << DEPTH_ADC_RESOLUTION) - 1)){ //255
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	7a9b      	ldrb	r3, [r3, #10]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b7f      	cmp	r3, #127	@ 0x7f
 80044e0:	d108      	bne.n	80044f4 <Calculate_Next_Main_Oscillator_Values+0x194>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	4a17      	ldr	r2, [pc, #92]	@ (8004548 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	801a      	strh	r2, [r3, #0]
 80044f2:	e01b      	b.n	800452c <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else if(params_ptr->depth != 0){
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	7a9b      	ldrb	r3, [r3, #10]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d013      	beq.n	8004526 <Calculate_Next_Main_Oscillator_Values+0x1c6>

			//duty = 1023 - duty*(current_depth >> 8);
			uint32_t multiply_product = 0;
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]
			multiply_product = (params_ptr->duty) * (params_ptr->depth);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	001a      	movs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	7a9b      	ldrb	r3, [r3, #10]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	4353      	muls	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]
			params_ptr->duty = PWM_DUTY_VALUE_MAX - (multiply_product >> DEPTH_ADC_RESOLUTION);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	09db      	lsrs	r3, r3, #7
 8004518:	b29b      	uxth	r3, r3
 800451a:	4a0b      	ldr	r2, [pc, #44]	@ (8004548 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	b29a      	uxth	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	801a      	strh	r2, [r3, #0]
 8004524:	e002      	b.n	800452c <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else{
			params_ptr->duty = PWM_DUTY_VALUE_MAX; //if depth is 0, just output 1023
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a07      	ldr	r2, [pc, #28]	@ (8004548 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 800452a:	801a      	strh	r2, [r3, #0]
		}

	#endif

	//SET THE NEXT VALUE FOR THE MAIN OSCILLATOR
	params_ptr->prev_duty = params_ptr->duty;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	b29a      	uxth	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	805a      	strh	r2, [r3, #2]

	return 1;
 8004536:	2301      	movs	r3, #1
}
 8004538:	0018      	movs	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	b004      	add	sp, #16
 800453e:	bd80      	pop	{r7, pc}
 8004540:	0800d384 	.word	0x0800d384
 8004544:	0800cf84 	.word	0x0800cf84
 8004548:	000003ff 	.word	0x000003ff

0800454c <Write_Next_Main_Oscillator_Values_to_Delay_Line>:

uint8_t Write_Next_Main_Oscillator_Values_to_Delay_Line(struct Params* params_ptr, struct Delay_Line* delay_line_ptr){
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]

	//STORE THE VALUES IN THE APPROPRIATE '0TH - 1' INDEX RELATIVE TO THE START POINTER
		if(delay_line_ptr->duty_delay_line_start_offset != 0){
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	4a44      	ldr	r2, [pc, #272]	@ (800466c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800455a:	5a9b      	ldrh	r3, [r3, r2]
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00b      	beq.n	800457a <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x2e>
			delay_line_ptr->duty_delay_line_storage_array[delay_line_ptr->duty_delay_line_start_offset - 1] = params_ptr->duty;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	4a41      	ldr	r2, [pc, #260]	@ (800466c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004566:	5a9b      	ldrh	r3, [r3, r2]
 8004568:	b29b      	uxth	r3, r3
 800456a:	1e5a      	subs	r2, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	b299      	uxth	r1, r3
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	0052      	lsls	r2, r2, #1
 8004576:	52d1      	strh	r1, [r2, r3]
 8004578:	e006      	b.n	8004588 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x3c>
		}
		else{
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	b299      	uxth	r1, r3
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	2380      	movs	r3, #128	@ 0x80
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	52d1      	strh	r1, [r2, r3]
		}

		//DECREMENT THE START AND FINISH POINTERS
		if(delay_line_ptr->duty_delay_line_start_offset == 0){
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	4a38      	ldr	r2, [pc, #224]	@ (800466c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800458c:	5a9b      	ldrh	r3, [r3, r2]
 800458e:	b29b      	uxth	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10e      	bne.n	80045b2 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x66>
			delay_line_ptr->duty_delay_line_start_offset = FINAL_INDEX + 1;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	4a35      	ldr	r2, [pc, #212]	@ (800466c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004598:	2180      	movs	r1, #128	@ 0x80
 800459a:	0089      	lsls	r1, r1, #2
 800459c:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	4a33      	ldr	r2, [pc, #204]	@ (8004670 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 80045a2:	5a9b      	ldrh	r3, [r3, r2]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b299      	uxth	r1, r3
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	4a30      	ldr	r2, [pc, #192]	@ (8004670 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 80045ae:	5299      	strh	r1, [r3, r2]
 80045b0:	e026      	b.n	8004600 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else if(delay_line_ptr->duty_delay_line_finish_offset == 0){
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	4a2e      	ldr	r2, [pc, #184]	@ (8004670 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 80045b6:	5a9b      	ldrh	r3, [r3, r2]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10e      	bne.n	80045dc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x90>
			delay_line_ptr->duty_delay_line_finish_offset = FINAL_INDEX + 1;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004670 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 80045c2:	2180      	movs	r1, #128	@ 0x80
 80045c4:	0089      	lsls	r1, r1, #2
 80045c6:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	4a28      	ldr	r2, [pc, #160]	@ (800466c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80045cc:	5a9b      	ldrh	r3, [r3, r2]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b299      	uxth	r1, r3
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	4a25      	ldr	r2, [pc, #148]	@ (800466c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80045d8:	5299      	strh	r1, [r3, r2]
 80045da:	e011      	b.n	8004600 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else{
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	4a23      	ldr	r2, [pc, #140]	@ (800466c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80045e0:	5a9b      	ldrh	r3, [r3, r2]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b299      	uxth	r1, r3
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	4a20      	ldr	r2, [pc, #128]	@ (800466c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80045ec:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004670 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 80045f2:	5a9b      	ldrh	r3, [r3, r2]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b299      	uxth	r1, r3
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004670 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 80045fe:	5299      	strh	r1, [r3, r2]
		}

		//DETERMINE THE DELAYED WAVE'S VALUES
		if(delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	4a1a      	ldr	r2, [pc, #104]	@ (800466c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004604:	5a9b      	ldrh	r3, [r3, r2]
 8004606:	b29b      	uxth	r3, r3
 8004608:	001a      	movs	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800460e:	b29b      	uxth	r3, r3
 8004610:	18d2      	adds	r2, r2, r3
 8004612:	2380      	movs	r3, #128	@ 0x80
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	429a      	cmp	r2, r3
 8004618:	dd13      	ble.n	8004642 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xf6>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + (delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	4913      	ldr	r1, [pc, #76]	@ (800466c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004620:	5a5b      	ldrh	r3, [r3, r1]
 8004622:	b29b      	uxth	r3, r3
 8004624:	0019      	movs	r1, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800462a:	b29b      	uxth	r3, r3
 800462c:	18cb      	adds	r3, r1, r3
 800462e:	4911      	ldr	r1, [pc, #68]	@ (8004674 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x128>)
 8004630:	468c      	mov	ip, r1
 8004632:	4463      	add	r3, ip
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	18d3      	adds	r3, r2, r3
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	b29a      	uxth	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	809a      	strh	r2, [r3, #4]
 8004640:	e00f      	b.n	8004662 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x116>
		}
		else{
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset);
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	4909      	ldr	r1, [pc, #36]	@ (800466c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004648:	5a5b      	ldrh	r3, [r3, r1]
 800464a:	b29b      	uxth	r3, r3
 800464c:	0019      	movs	r1, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004652:	b29b      	uxth	r3, r3
 8004654:	18cb      	adds	r3, r1, r3
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	18d3      	adds	r3, r2, r3
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	b29a      	uxth	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	809a      	strh	r2, [r3, #4]
		}

	return 1;
 8004662:	2301      	movs	r3, #1
}
 8004664:	0018      	movs	r0, r3
 8004666:	46bd      	mov	sp, r7
 8004668:	b002      	add	sp, #8
 800466a:	bd80      	pop	{r7, pc}
 800466c:	00000402 	.word	0x00000402
 8004670:	00000404 	.word	0x00000404
 8004674:	7ffffe00 	.word	0x7ffffe00

08004678 <Process_ADC_Conversion_Values>:

uint8_t Process_ADC_Conversion_Values(struct Params* params_ptr, volatile uint16_t* ADCResultsDMA_ptr){
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA_ptr[WAVESHAPE_ADC_RESULT_INDEX] >> 5; //set ADC_Result to waveshape index value, truncate to 7-bit
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	b29a      	uxth	r2, r3
 8004688:	2116      	movs	r1, #22
 800468a:	187b      	adds	r3, r7, r1
 800468c:	0952      	lsrs	r2, r2, #5
 800468e:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8004690:	187b      	adds	r3, r7, r1
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	2b2a      	cmp	r3, #42	@ 0x2a
 8004696:	d803      	bhi.n	80046a0 <Process_ADC_Conversion_Values+0x28>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	719a      	strb	r2, [r3, #6]
 800469e:	e010      	b.n	80046c2 <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 80046a0:	2316      	movs	r3, #22
 80046a2:	18fb      	adds	r3, r7, r3
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	2b55      	cmp	r3, #85	@ 0x55
 80046a8:	d803      	bhi.n	80046b2 <Process_ADC_Conversion_Values+0x3a>
		params_ptr->waveshape = SINE_MODE; //sine wave
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	719a      	strb	r2, [r3, #6]
 80046b0:	e007      	b.n	80046c2 <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 80046b2:	2316      	movs	r3, #22
 80046b4:	18fb      	adds	r3, r7, r3
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80046ba:	d802      	bhi.n	80046c2 <Process_ADC_Conversion_Values+0x4a>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	719a      	strb	r2, [r3, #6]
	}

	//GET SPEED
	uint16_t temp_speed = ADCResultsDMA_ptr[SPEED_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	3302      	adds	r3, #2
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	2114      	movs	r1, #20
 80046cc:	187b      	adds	r3, r7, r1
 80046ce:	0952      	lsrs	r2, r2, #5
 80046d0:	801a      	strh	r2, [r3, #0]
	temp_speed <<= 3; //convert to 10-bit
 80046d2:	187b      	adds	r3, r7, r1
 80046d4:	187a      	adds	r2, r7, r1
 80046d6:	8812      	ldrh	r2, [r2, #0]
 80046d8:	00d2      	lsls	r2, r2, #3
 80046da:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = temp_speed;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	187a      	adds	r2, r7, r1
 80046e0:	8812      	ldrh	r2, [r2, #0]
 80046e2:	811a      	strh	r2, [r3, #8]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON

		uint8_t temp_depth = ADCResultsDMA_ptr[DEPTH_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	3304      	adds	r3, #4
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	2113      	movs	r1, #19
 80046f2:	187b      	adds	r3, r7, r1
 80046f4:	701a      	strb	r2, [r3, #0]
		params_ptr->depth = temp_depth;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	187a      	adds	r2, r7, r1
 80046fa:	7812      	ldrb	r2, [r2, #0]
 80046fc:	729a      	strb	r2, [r3, #10]
	#endif

	//GET SYMMETRY
	#if SYMMETRY_ON_OR_OFF == ON

		uint16_t temp_symmetry = ADCResultsDMA_ptr[SYMMETRY_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	3306      	adds	r3, #6
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	b29a      	uxth	r2, r3
 8004706:	2110      	movs	r1, #16
 8004708:	187b      	adds	r3, r7, r1
 800470a:	0952      	lsrs	r2, r2, #5
 800470c:	801a      	strh	r2, [r3, #0]
		temp_symmetry <<= 1; //convert to 8-bit
 800470e:	187a      	adds	r2, r7, r1
 8004710:	187b      	adds	r3, r7, r1
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	18db      	adds	r3, r3, r3
 8004716:	8013      	strh	r3, [r2, #0]
		params_ptr->symmetry = temp_symmetry;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	187a      	adds	r2, r7, r1
 800471c:	8812      	ldrh	r2, [r2, #0]
 800471e:	819a      	strh	r2, [r3, #12]

	#endif

	//GET DELAY LINE READ POINTER OFFSET

	uint16_t temp_delay = ADCResultsDMA_ptr[DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	3308      	adds	r3, #8
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	b29a      	uxth	r2, r3
 8004728:	210e      	movs	r1, #14
 800472a:	187b      	adds	r3, r7, r1
 800472c:	0952      	lsrs	r2, r2, #5
 800472e:	801a      	strh	r2, [r3, #0]
	temp_delay <<= 2; //convert to 9-bit
 8004730:	187b      	adds	r3, r7, r1
 8004732:	187a      	adds	r2, r7, r1
 8004734:	8812      	ldrh	r2, [r2, #0]
 8004736:	0092      	lsls	r2, r2, #2
 8004738:	801a      	strh	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = temp_delay;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	187a      	adds	r2, r7, r1
 800473e:	8812      	ldrh	r2, [r2, #0]
 8004740:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8004742:	2301      	movs	r3, #1
}
 8004744:	0018      	movs	r0, r3
 8004746:	46bd      	mov	sp, r7
 8004748:	b006      	add	sp, #24
 800474a:	bd80      	pop	{r7, pc}

0800474c <Startup>:

#include "stm32g0xx_ll_lptim.h"

#include "CC_and_PC.h" //for some reason compiler shits itself if this is included in startup.h

uint8_t __attribute__((optimize("O0")))Startup(void){
 800474c:	b590      	push	{r4, r7, lr}
 800474e:	b085      	sub	sp, #20
 8004750:	af02      	add	r7, sp, #8

	//Shouldn't be required now we have a default state set below, even in case flash not programmed //Set_Status_Bit(&statuses, Start_Required_Before_Sync_Mode); //set default mode to requiring START MIDI message before beginning a sync

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8004752:	2007      	movs	r0, #7
 8004754:	f002 fd93 	bl	800727e <HAL_NVIC_DisableIRQ>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 8004758:	4b58      	ldr	r3, [pc, #352]	@ (80048bc <Startup+0x170>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	4b57      	ldr	r3, [pc, #348]	@ (80048bc <Startup+0x170>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2101      	movs	r1, #1
 8004764:	430a      	orrs	r2, r1
 8004766:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM16
 8004768:	4b55      	ldr	r3, [pc, #340]	@ (80048c0 <Startup+0x174>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	4b54      	ldr	r3, [pc, #336]	@ (80048c0 <Startup+0x174>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2101      	movs	r1, #1
 8004774:	430a      	orrs	r2, r1
 8004776:	60da      	str	r2, [r3, #12]

	//SET DEFAULT PIN STATES
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 8004778:	2380      	movs	r3, #128	@ 0x80
 800477a:	0099      	lsls	r1, r3, #2
 800477c:	23a0      	movs	r3, #160	@ 0xa0
 800477e:	05db      	lsls	r3, r3, #23
 8004780:	2201      	movs	r2, #1
 8004782:	0018      	movs	r0, r3
 8004784:	f003 fa37 	bl	8007bf6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_HIGH_GPIO_Port, HACK_POT_HIGH_Pin, 1);
 8004788:	2380      	movs	r3, #128	@ 0x80
 800478a:	0159      	lsls	r1, r3, #5
 800478c:	23a0      	movs	r3, #160	@ 0xa0
 800478e:	05db      	lsls	r3, r3, #23
 8004790:	2201      	movs	r2, #1
 8004792:	0018      	movs	r0, r3
 8004794:	f003 fa2f 	bl	8007bf6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_LOW_GPIO_Port, HACK_POT_LOW_Pin, 0);
 8004798:	23a0      	movs	r3, #160	@ 0xa0
 800479a:	05db      	lsls	r3, r3, #23
 800479c:	2200      	movs	r2, #0
 800479e:	2180      	movs	r1, #128	@ 0x80
 80047a0:	0018      	movs	r0, r3
 80047a2:	f003 fa28 	bl	8007bf6 <HAL_GPIO_WritePin>

	//Point Arrays to Presets
	Initialise_Preset_Arrays();
 80047a6:	f7fb fe4f 	bl	8000448 <Initialise_Preset_Arrays>

	//Read User Presets From Flash, regardless of whether they have been written to before
	Read_and_Interpret_User_Presets_From_Flash();
 80047aa:	f7fc f97d 	bl	8000aa8 <Read_and_Interpret_User_Presets_From_Flash>

	//Read 'User Preset Used' Bytes, 'Start Required Before MIDI CLK' Byte, MIDI Omni On/Off Status Bit, and MIDI Basic Channel
	Read_and_Interpret_Misc_From_Flash(MISC_FLASH_MEMORY_ADDRESS, user_presets_used_array, &statuses, &MIDI_basic_channel, NUM_PRESETS);
 80047ae:	4b45      	ldr	r3, [pc, #276]	@ (80048c4 <Startup+0x178>)
 80047b0:	4a45      	ldr	r2, [pc, #276]	@ (80048c8 <Startup+0x17c>)
 80047b2:	4946      	ldr	r1, [pc, #280]	@ (80048cc <Startup+0x180>)
 80047b4:	4c46      	ldr	r4, [pc, #280]	@ (80048d0 <Startup+0x184>)
 80047b6:	2004      	movs	r0, #4
 80047b8:	9000      	str	r0, [sp, #0]
 80047ba:	0020      	movs	r0, r4
 80047bc:	f7fc f867 	bl	800088e <Read_and_Interpret_Misc_From_Flash>

	//Set the Converted Preset Array to the Relevant Factory/User Preset depending upon the 'User Preset Used' Byte read from Flash
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array,
 80047c0:	4b44      	ldr	r3, [pc, #272]	@ (80048d4 <Startup+0x188>)
 80047c2:	4a45      	ldr	r2, [pc, #276]	@ (80048d8 <Startup+0x18c>)
 80047c4:	4941      	ldr	r1, [pc, #260]	@ (80048cc <Startup+0x180>)
 80047c6:	4845      	ldr	r0, [pc, #276]	@ (80048dc <Startup+0x190>)
 80047c8:	2404      	movs	r4, #4
 80047ca:	9400      	str	r4, [sp, #0]
 80047cc:	f7fc f915 	bl	80009fa <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
												  	  	  	  factory_presets_array,
															  user_presets_array,
															  NUM_PRESETS);

	//GET ADC VALUES
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 80047d0:	4b43      	ldr	r3, [pc, #268]	@ (80048e0 <Startup+0x194>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	001a      	movs	r2, r3
 80047d6:	4943      	ldr	r1, [pc, #268]	@ (80048e4 <Startup+0x198>)
 80047d8:	4b43      	ldr	r3, [pc, #268]	@ (80048e8 <Startup+0x19c>)
 80047da:	0018      	movs	r0, r3
 80047dc:	f001 fe00 	bl	80063e0 <HAL_ADC_Start_DMA>

	//WAIT
	while(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){}; //wait while first ADC conversion is ongoing - raw and final values will be computed within this time
 80047e0:	46c0      	nop			@ (mov r8, r8)
 80047e2:	4b39      	ldr	r3, [pc, #228]	@ (80048c8 <Startup+0x17c>)
 80047e4:	2110      	movs	r1, #16
 80047e6:	0018      	movs	r0, r3
 80047e8:	f001 f942 	bl	8005a70 <Get_Status_Bit>
 80047ec:	1e03      	subs	r3, r0, #0
 80047ee:	d0f8      	beq.n	80047e2 <Startup+0x96>

	// re-initialise all values in delay line storage array to middle value of wave (if sine/triangle mode) or bottom of wave if square mode, as they are initialised to 0 on startup
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 80047f0:	1dbb      	adds	r3, r7, #6
 80047f2:	2200      	movs	r2, #0
 80047f4:	801a      	strh	r2, [r3, #0]
 80047f6:	e02c      	b.n	8004852 <Startup+0x106>

		if(params.waveshape == SQUARE_MODE){
 80047f8:	4b3c      	ldr	r3, [pc, #240]	@ (80048ec <Startup+0x1a0>)
 80047fa:	799b      	ldrb	r3, [r3, #6]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d111      	bne.n	8004826 <Startup+0xda>

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
 8004802:	4b3a      	ldr	r3, [pc, #232]	@ (80048ec <Startup+0x1a0>)
 8004804:	7a9b      	ldrb	r3, [r3, #10]
 8004806:	b2db      	uxtb	r3, r3
 8004808:	001a      	movs	r2, r3
 800480a:	0013      	movs	r3, r2
 800480c:	029b      	lsls	r3, r3, #10
 800480e:	1a9b      	subs	r3, r3, r2
 8004810:	11db      	asrs	r3, r3, #7
 8004812:	b29b      	uxth	r3, r3
 8004814:	1dba      	adds	r2, r7, #6
 8004816:	8812      	ldrh	r2, [r2, #0]
 8004818:	4935      	ldr	r1, [pc, #212]	@ (80048f0 <Startup+0x1a4>)
 800481a:	1acb      	subs	r3, r1, r3
 800481c:	b299      	uxth	r1, r3
 800481e:	4b35      	ldr	r3, [pc, #212]	@ (80048f4 <Startup+0x1a8>)
 8004820:	0052      	lsls	r2, r2, #1
 8004822:	52d1      	strh	r1, [r2, r3]
 8004824:	e010      	b.n	8004848 <Startup+0xfc>
		}
		else{

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - (((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION) >> 1);
 8004826:	4b31      	ldr	r3, [pc, #196]	@ (80048ec <Startup+0x1a0>)
 8004828:	7a9b      	ldrb	r3, [r3, #10]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	001a      	movs	r2, r3
 800482e:	0013      	movs	r3, r2
 8004830:	029b      	lsls	r3, r3, #10
 8004832:	1a9b      	subs	r3, r3, r2
 8004834:	121b      	asrs	r3, r3, #8
 8004836:	b29b      	uxth	r3, r3
 8004838:	1dba      	adds	r2, r7, #6
 800483a:	8812      	ldrh	r2, [r2, #0]
 800483c:	492c      	ldr	r1, [pc, #176]	@ (80048f0 <Startup+0x1a4>)
 800483e:	1acb      	subs	r3, r1, r3
 8004840:	b299      	uxth	r1, r3
 8004842:	4b2c      	ldr	r3, [pc, #176]	@ (80048f4 <Startup+0x1a8>)
 8004844:	0052      	lsls	r2, r2, #1
 8004846:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8004848:	1dbb      	adds	r3, r7, #6
 800484a:	881a      	ldrh	r2, [r3, #0]
 800484c:	1dbb      	adds	r3, r7, #6
 800484e:	3201      	adds	r2, #1
 8004850:	801a      	strh	r2, [r3, #0]
 8004852:	1dbb      	adds	r3, r7, #6
 8004854:	881a      	ldrh	r2, [r3, #0]
 8004856:	2380      	movs	r3, #128	@ 0x80
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	429a      	cmp	r2, r3
 800485c:	d9cc      	bls.n	80047f8 <Startup+0xac>
		}
	}

	//PREPARE OSCILLATORS
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)STARTUP_MODE);
 800485e:	4b23      	ldr	r3, [pc, #140]	@ (80048ec <Startup+0x1a0>)
 8004860:	2102      	movs	r1, #2
 8004862:	0018      	movs	r0, r3
 8004864:	f7ff fd7c 	bl	8004360 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8004868:	4a22      	ldr	r2, [pc, #136]	@ (80048f4 <Startup+0x1a8>)
 800486a:	4b20      	ldr	r3, [pc, #128]	@ (80048ec <Startup+0x1a0>)
 800486c:	0011      	movs	r1, r2
 800486e:	0018      	movs	r0, r3
 8004870:	f7ff fe6c 	bl	800454c <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	Set_Oscillator_Values(&params);
 8004874:	4b1d      	ldr	r3, [pc, #116]	@ (80048ec <Startup+0x1a0>)
 8004876:	0018      	movs	r0, r3
 8004878:	f7ff fd46 	bl	8004308 <Set_Oscillator_Values>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(&htim1, TIM_CHANNEL_2, TIM_CHANNEL_4);
 800487c:	4b1e      	ldr	r3, [pc, #120]	@ (80048f8 <Startup+0x1ac>)
 800487e:	220c      	movs	r2, #12
 8004880:	2104      	movs	r1, #4
 8004882:	0018      	movs	r0, r3
 8004884:	f7ff fcb4 	bl	80041f0 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>
	Start_Freq_Gen_Timer();
 8004888:	f7ff fcee 	bl	8004268 <Start_Freq_Gen_Timer>

	//START UART RECEIVE
	Start_UART_Receive();
 800488c:	f7fc fd36 	bl	80012fc <Start_UART_Receive>

	//START IP CAP
	Start_Input_Capture_Timer();
 8004890:	f7ff fba4 	bl	8003fdc <Start_Input_Capture_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 8004894:	f001 f8e4 	bl	8005a60 <Global_Interrupt_Enable>

	//ENABLE TAP-TEMPO SWITCH CHECKING
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8004898:	4b18      	ldr	r3, [pc, #96]	@ (80048fc <Startup+0x1b0>)
 800489a:	22fa      	movs	r2, #250	@ 0xfa
 800489c:	21fa      	movs	r1, #250	@ 0xfa
 800489e:	0018      	movs	r0, r3
 80048a0:	f003 faa0 	bl	8007de4 <HAL_LPTIM_SetOnce_Start_IT>

	//ENABLE EXTI
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80048a4:	2007      	movs	r0, #7
 80048a6:	f002 fcda 	bl	800725e <HAL_NVIC_EnableIRQ>

	//debug
	Set_OMNI_Off(&statuses);
 80048aa:	4b07      	ldr	r3, [pc, #28]	@ (80048c8 <Startup+0x17c>)
 80048ac:	0018      	movs	r0, r3
 80048ae:	f7fc fd05 	bl	80012bc <Set_OMNI_Off>
	//debug

	return 1;
 80048b2:	2301      	movs	r3, #1
}
 80048b4:	0018      	movs	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	b003      	add	sp, #12
 80048ba:	bd90      	pop	{r4, r7, pc}
 80048bc:	20000804 	.word	0x20000804
 80048c0:	20000748 	.word	0x20000748
 80048c4:	200004bd 	.word	0x200004bd
 80048c8:	20000c24 	.word	0x20000c24
 80048cc:	200004b4 	.word	0x200004b4
 80048d0:	0800f820 	.word	0x0800f820
 80048d4:	20000478 	.word	0x20000478
 80048d8:	20000468 	.word	0x20000468
 80048dc:	20000488 	.word	0x20000488
 80048e0:	0800d784 	.word	0x0800d784
 80048e4:	20000c30 	.word	0x20000c30
 80048e8:	200004ec 	.word	0x200004ec
 80048ec:	20000c3c 	.word	0x20000c3c
 80048f0:	000003ff 	.word	0x000003ff
 80048f4:	20000020 	.word	0x20000020
 80048f8:	2000097c 	.word	0x2000097c
 80048fc:	20000bbc 	.word	0x20000bbc

08004900 <Advance_Pending_States>:
volatile struct Normal_FSM phase_fsm = {.current_state = MANUAL_MODE, .prev_state = NONE};
volatile struct IP_CAP_FSM IP_CAP_fsm = {.current_state = IDLE, .prev_state = IP_CAP_NONE};
volatile enum MIDI_CLK_FSM_State MIDI_CLK_fsm = NOT_COMPILING;

//FUNCTION DEFINITIONS
uint8_t Advance_Pending_States(void){
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0

	//UPDATE SPEED FSM
	union Speed_FSM_States current_state = speed_fsm.current_state;
 8004906:	1d3b      	adds	r3, r7, #4
 8004908:	4a12      	ldr	r2, [pc, #72]	@ (8004954 <Advance_Pending_States+0x54>)
 800490a:	7812      	ldrb	r2, [r2, #0]
 800490c:	701a      	strb	r2, [r3, #0]

	if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 800490e:	4b11      	ldr	r3, [pc, #68]	@ (8004954 <Advance_Pending_States+0x54>)
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b05      	cmp	r3, #5
 8004916:	d103      	bne.n	8004920 <Advance_Pending_States+0x20>

		speed_fsm.current_state.speed_exclusive_state = TAP_MODE;
 8004918:	4b0e      	ldr	r3, [pc, #56]	@ (8004954 <Advance_Pending_States+0x54>)
 800491a:	2204      	movs	r2, #4
 800491c:	701a      	strb	r2, [r3, #0]
 800491e:	e007      	b.n	8004930 <Advance_Pending_States+0x30>
	}
	else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){
 8004920:	4b0c      	ldr	r3, [pc, #48]	@ (8004954 <Advance_Pending_States+0x54>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b07      	cmp	r3, #7
 8004928:	d102      	bne.n	8004930 <Advance_Pending_States+0x30>

		speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 800492a:	4b0a      	ldr	r3, [pc, #40]	@ (8004954 <Advance_Pending_States+0x54>)
 800492c:	2206      	movs	r2, #6
 800492e:	701a      	strb	r2, [r3, #0]
	}

	//DON'T ADD MIDI CLK CODE


	if(!((current_state.speed_exclusive_state == CLK_IN_MODE) || (current_state.speed_exclusive_state == TAP_MODE))){
 8004930:	1d3b      	adds	r3, r7, #4
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b06      	cmp	r3, #6
 8004936:	d007      	beq.n	8004948 <Advance_Pending_States+0x48>
 8004938:	1d3b      	adds	r3, r7, #4
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b04      	cmp	r3, #4
 800493e:	d003      	beq.n	8004948 <Advance_Pending_States+0x48>

		speed_fsm.prev_state = current_state;
 8004940:	4b04      	ldr	r3, [pc, #16]	@ (8004954 <Advance_Pending_States+0x54>)
 8004942:	1d3a      	adds	r2, r7, #4
 8004944:	7812      	ldrb	r2, [r2, #0]
 8004946:	705a      	strb	r2, [r3, #1]
	}

	return 1;
 8004948:	2301      	movs	r3, #1
}
 800494a:	0018      	movs	r0, r3
 800494c:	46bd      	mov	sp, r7
 800494e:	b002      	add	sp, #8
 8004950:	bd80      	pop	{r7, pc}
 8004952:	46c0      	nop			@ (mov r8, r8)
 8004954:	20000428 	.word	0x20000428

08004958 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800495e:	4b0f      	ldr	r3, [pc, #60]	@ (800499c <HAL_MspInit+0x44>)
 8004960:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004962:	4b0e      	ldr	r3, [pc, #56]	@ (800499c <HAL_MspInit+0x44>)
 8004964:	2101      	movs	r1, #1
 8004966:	430a      	orrs	r2, r1
 8004968:	641a      	str	r2, [r3, #64]	@ 0x40
 800496a:	4b0c      	ldr	r3, [pc, #48]	@ (800499c <HAL_MspInit+0x44>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496e:	2201      	movs	r2, #1
 8004970:	4013      	ands	r3, r2
 8004972:	607b      	str	r3, [r7, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004976:	4b09      	ldr	r3, [pc, #36]	@ (800499c <HAL_MspInit+0x44>)
 8004978:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800497a:	4b08      	ldr	r3, [pc, #32]	@ (800499c <HAL_MspInit+0x44>)
 800497c:	2180      	movs	r1, #128	@ 0x80
 800497e:	0549      	lsls	r1, r1, #21
 8004980:	430a      	orrs	r2, r1
 8004982:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004984:	4b05      	ldr	r3, [pc, #20]	@ (800499c <HAL_MspInit+0x44>)
 8004986:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004988:	2380      	movs	r3, #128	@ 0x80
 800498a:	055b      	lsls	r3, r3, #21
 800498c:	4013      	ands	r3, r2
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004992:	46c0      	nop			@ (mov r8, r8)
 8004994:	46bd      	mov	sp, r7
 8004996:	b002      	add	sp, #8
 8004998:	bd80      	pop	{r7, pc}
 800499a:	46c0      	nop			@ (mov r8, r8)
 800499c:	40021000 	.word	0x40021000

080049a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80049a0:	b590      	push	{r4, r7, lr}
 80049a2:	b08b      	sub	sp, #44	@ 0x2c
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049a8:	2414      	movs	r4, #20
 80049aa:	193b      	adds	r3, r7, r4
 80049ac:	0018      	movs	r0, r3
 80049ae:	2314      	movs	r3, #20
 80049b0:	001a      	movs	r2, r3
 80049b2:	2100      	movs	r1, #0
 80049b4:	f008 fa94 	bl	800cee0 <memset>
  if(hadc->Instance==ADC1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a2e      	ldr	r2, [pc, #184]	@ (8004a78 <HAL_ADC_MspInit+0xd8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d155      	bne.n	8004a6e <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80049c2:	4b2e      	ldr	r3, [pc, #184]	@ (8004a7c <HAL_ADC_MspInit+0xdc>)
 80049c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049c6:	4b2d      	ldr	r3, [pc, #180]	@ (8004a7c <HAL_ADC_MspInit+0xdc>)
 80049c8:	2180      	movs	r1, #128	@ 0x80
 80049ca:	0349      	lsls	r1, r1, #13
 80049cc:	430a      	orrs	r2, r1
 80049ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80049d0:	4b2a      	ldr	r3, [pc, #168]	@ (8004a7c <HAL_ADC_MspInit+0xdc>)
 80049d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049d4:	2380      	movs	r3, #128	@ 0x80
 80049d6:	035b      	lsls	r3, r3, #13
 80049d8:	4013      	ands	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
 80049dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049de:	4b27      	ldr	r3, [pc, #156]	@ (8004a7c <HAL_ADC_MspInit+0xdc>)
 80049e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049e2:	4b26      	ldr	r3, [pc, #152]	@ (8004a7c <HAL_ADC_MspInit+0xdc>)
 80049e4:	2101      	movs	r1, #1
 80049e6:	430a      	orrs	r2, r1
 80049e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80049ea:	4b24      	ldr	r3, [pc, #144]	@ (8004a7c <HAL_ADC_MspInit+0xdc>)
 80049ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ee:	2201      	movs	r2, #1
 80049f0:	4013      	ands	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80049f6:	193b      	adds	r3, r7, r4
 80049f8:	2273      	movs	r2, #115	@ 0x73
 80049fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049fc:	193b      	adds	r3, r7, r4
 80049fe:	2203      	movs	r2, #3
 8004a00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a02:	193b      	adds	r3, r7, r4
 8004a04:	2200      	movs	r2, #0
 8004a06:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a08:	193a      	adds	r2, r7, r4
 8004a0a:	23a0      	movs	r3, #160	@ 0xa0
 8004a0c:	05db      	lsls	r3, r3, #23
 8004a0e:	0011      	movs	r1, r2
 8004a10:	0018      	movs	r0, r3
 8004a12:	f002 ff6f 	bl	80078f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004a16:	4b1a      	ldr	r3, [pc, #104]	@ (8004a80 <HAL_ADC_MspInit+0xe0>)
 8004a18:	4a1a      	ldr	r2, [pc, #104]	@ (8004a84 <HAL_ADC_MspInit+0xe4>)
 8004a1a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004a1c:	4b18      	ldr	r3, [pc, #96]	@ (8004a80 <HAL_ADC_MspInit+0xe0>)
 8004a1e:	2205      	movs	r2, #5
 8004a20:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a22:	4b17      	ldr	r3, [pc, #92]	@ (8004a80 <HAL_ADC_MspInit+0xe0>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a28:	4b15      	ldr	r3, [pc, #84]	@ (8004a80 <HAL_ADC_MspInit+0xe0>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004a2e:	4b14      	ldr	r3, [pc, #80]	@ (8004a80 <HAL_ADC_MspInit+0xe0>)
 8004a30:	2280      	movs	r2, #128	@ 0x80
 8004a32:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004a34:	4b12      	ldr	r3, [pc, #72]	@ (8004a80 <HAL_ADC_MspInit+0xe0>)
 8004a36:	2280      	movs	r2, #128	@ 0x80
 8004a38:	0052      	lsls	r2, r2, #1
 8004a3a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004a3c:	4b10      	ldr	r3, [pc, #64]	@ (8004a80 <HAL_ADC_MspInit+0xe0>)
 8004a3e:	2280      	movs	r2, #128	@ 0x80
 8004a40:	00d2      	lsls	r2, r2, #3
 8004a42:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004a44:	4b0e      	ldr	r3, [pc, #56]	@ (8004a80 <HAL_ADC_MspInit+0xe0>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8004a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a80 <HAL_ADC_MspInit+0xe0>)
 8004a4c:	2280      	movs	r2, #128	@ 0x80
 8004a4e:	0192      	lsls	r2, r2, #6
 8004a50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004a52:	4b0b      	ldr	r3, [pc, #44]	@ (8004a80 <HAL_ADC_MspInit+0xe0>)
 8004a54:	0018      	movs	r0, r3
 8004a56:	f002 fc2f 	bl	80072b8 <HAL_DMA_Init>
 8004a5a:	1e03      	subs	r3, r0, #0
 8004a5c:	d001      	beq.n	8004a62 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8004a5e:	f7fd fbc3 	bl	80021e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a06      	ldr	r2, [pc, #24]	@ (8004a80 <HAL_ADC_MspInit+0xe0>)
 8004a66:	651a      	str	r2, [r3, #80]	@ 0x50
 8004a68:	4b05      	ldr	r3, [pc, #20]	@ (8004a80 <HAL_ADC_MspInit+0xe0>)
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004a6e:	46c0      	nop			@ (mov r8, r8)
 8004a70:	46bd      	mov	sp, r7
 8004a72:	b00b      	add	sp, #44	@ 0x2c
 8004a74:	bd90      	pop	{r4, r7, pc}
 8004a76:	46c0      	nop			@ (mov r8, r8)
 8004a78:	40012400 	.word	0x40012400
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	20000574 	.word	0x20000574
 8004a84:	40020008 	.word	0x40020008

08004a88 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8004a88:	b590      	push	{r4, r7, lr}
 8004a8a:	b097      	sub	sp, #92	@ 0x5c
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a90:	2344      	movs	r3, #68	@ 0x44
 8004a92:	18fb      	adds	r3, r7, r3
 8004a94:	0018      	movs	r0, r3
 8004a96:	2314      	movs	r3, #20
 8004a98:	001a      	movs	r2, r3
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	f008 fa20 	bl	800cee0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004aa0:	241c      	movs	r4, #28
 8004aa2:	193b      	adds	r3, r7, r4
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	2328      	movs	r3, #40	@ 0x28
 8004aa8:	001a      	movs	r2, r3
 8004aaa:	2100      	movs	r1, #0
 8004aac:	f008 fa18 	bl	800cee0 <memset>
  if(hlptim->Instance==LPTIM1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a46      	ldr	r2, [pc, #280]	@ (8004bd0 <HAL_LPTIM_MspInit+0x148>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d13e      	bne.n	8004b38 <HAL_LPTIM_MspInit+0xb0>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8004aba:	193b      	adds	r3, r7, r4
 8004abc:	2280      	movs	r2, #128	@ 0x80
 8004abe:	0092      	lsls	r2, r2, #2
 8004ac0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 8004ac2:	193b      	adds	r3, r7, r4
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ac8:	193b      	adds	r3, r7, r4
 8004aca:	0018      	movs	r0, r3
 8004acc:	f004 f9f8 	bl	8008ec0 <HAL_RCCEx_PeriphCLKConfig>
 8004ad0:	1e03      	subs	r3, r0, #0
 8004ad2:	d001      	beq.n	8004ad8 <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 8004ad4:	f7fd fb88 	bl	80021e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8004ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8004bd4 <HAL_LPTIM_MspInit+0x14c>)
 8004ada:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004adc:	4b3d      	ldr	r3, [pc, #244]	@ (8004bd4 <HAL_LPTIM_MspInit+0x14c>)
 8004ade:	2180      	movs	r1, #128	@ 0x80
 8004ae0:	0609      	lsls	r1, r1, #24
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8004bd4 <HAL_LPTIM_MspInit+0x14c>)
 8004ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aea:	0fdb      	lsrs	r3, r3, #31
 8004aec:	07db      	lsls	r3, r3, #31
 8004aee:	61bb      	str	r3, [r7, #24]
 8004af0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004af2:	4b38      	ldr	r3, [pc, #224]	@ (8004bd4 <HAL_LPTIM_MspInit+0x14c>)
 8004af4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004af6:	4b37      	ldr	r3, [pc, #220]	@ (8004bd4 <HAL_LPTIM_MspInit+0x14c>)
 8004af8:	2102      	movs	r1, #2
 8004afa:	430a      	orrs	r2, r1
 8004afc:	635a      	str	r2, [r3, #52]	@ 0x34
 8004afe:	4b35      	ldr	r3, [pc, #212]	@ (8004bd4 <HAL_LPTIM_MspInit+0x14c>)
 8004b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b02:	2202      	movs	r2, #2
 8004b04:	4013      	ands	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	697b      	ldr	r3, [r7, #20]
    /**LPTIM1 GPIO Configuration
    PB0     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004b0a:	2144      	movs	r1, #68	@ 0x44
 8004b0c:	187b      	adds	r3, r7, r1
 8004b0e:	2201      	movs	r2, #1
 8004b10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b12:	187b      	adds	r3, r7, r1
 8004b14:	2202      	movs	r2, #2
 8004b16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b18:	187b      	adds	r3, r7, r1
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b1e:	187b      	adds	r3, r7, r1
 8004b20:	2200      	movs	r2, #0
 8004b22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM1;
 8004b24:	187b      	adds	r3, r7, r1
 8004b26:	2205      	movs	r2, #5
 8004b28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b2a:	187b      	adds	r3, r7, r1
 8004b2c:	4a2a      	ldr	r2, [pc, #168]	@ (8004bd8 <HAL_LPTIM_MspInit+0x150>)
 8004b2e:	0019      	movs	r1, r3
 8004b30:	0010      	movs	r0, r2
 8004b32:	f002 fedf 	bl	80078f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8004b36:	e046      	b.n	8004bc6 <HAL_LPTIM_MspInit+0x13e>
  else if(hlptim->Instance==LPTIM2)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a27      	ldr	r2, [pc, #156]	@ (8004bdc <HAL_LPTIM_MspInit+0x154>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d141      	bne.n	8004bc6 <HAL_LPTIM_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8004b42:	211c      	movs	r1, #28
 8004b44:	187b      	adds	r3, r7, r1
 8004b46:	2280      	movs	r2, #128	@ 0x80
 8004b48:	00d2      	lsls	r2, r2, #3
 8004b4a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK1;
 8004b4c:	187b      	adds	r3, r7, r1
 8004b4e:	2200      	movs	r2, #0
 8004b50:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b52:	187b      	adds	r3, r7, r1
 8004b54:	0018      	movs	r0, r3
 8004b56:	f004 f9b3 	bl	8008ec0 <HAL_RCCEx_PeriphCLKConfig>
 8004b5a:	1e03      	subs	r3, r0, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_LPTIM_MspInit+0xda>
      Error_Handler();
 8004b5e:	f7fd fb43 	bl	80021e8 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8004b62:	4b1c      	ldr	r3, [pc, #112]	@ (8004bd4 <HAL_LPTIM_MspInit+0x14c>)
 8004b64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b66:	4b1b      	ldr	r3, [pc, #108]	@ (8004bd4 <HAL_LPTIM_MspInit+0x14c>)
 8004b68:	2180      	movs	r1, #128	@ 0x80
 8004b6a:	05c9      	lsls	r1, r1, #23
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b70:	4b18      	ldr	r3, [pc, #96]	@ (8004bd4 <HAL_LPTIM_MspInit+0x14c>)
 8004b72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b74:	2380      	movs	r3, #128	@ 0x80
 8004b76:	05db      	lsls	r3, r3, #23
 8004b78:	4013      	ands	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
 8004b7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b7e:	4b15      	ldr	r3, [pc, #84]	@ (8004bd4 <HAL_LPTIM_MspInit+0x14c>)
 8004b80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b82:	4b14      	ldr	r3, [pc, #80]	@ (8004bd4 <HAL_LPTIM_MspInit+0x14c>)
 8004b84:	2101      	movs	r1, #1
 8004b86:	430a      	orrs	r2, r1
 8004b88:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b8a:	4b12      	ldr	r3, [pc, #72]	@ (8004bd4 <HAL_LPTIM_MspInit+0x14c>)
 8004b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b8e:	2201      	movs	r2, #1
 8004b90:	4013      	ands	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004b96:	2144      	movs	r1, #68	@ 0x44
 8004b98:	187b      	adds	r3, r7, r1
 8004b9a:	2280      	movs	r2, #128	@ 0x80
 8004b9c:	0052      	lsls	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba0:	187b      	adds	r3, r7, r1
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba6:	187b      	adds	r3, r7, r1
 8004ba8:	2200      	movs	r2, #0
 8004baa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bac:	187b      	adds	r3, r7, r1
 8004bae:	2200      	movs	r2, #0
 8004bb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM2;
 8004bb2:	187b      	adds	r3, r7, r1
 8004bb4:	2205      	movs	r2, #5
 8004bb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bb8:	187a      	adds	r2, r7, r1
 8004bba:	23a0      	movs	r3, #160	@ 0xa0
 8004bbc:	05db      	lsls	r3, r3, #23
 8004bbe:	0011      	movs	r1, r2
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	f002 fe97 	bl	80078f4 <HAL_GPIO_Init>
}
 8004bc6:	46c0      	nop			@ (mov r8, r8)
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	b017      	add	sp, #92	@ 0x5c
 8004bcc:	bd90      	pop	{r4, r7, pc}
 8004bce:	46c0      	nop			@ (mov r8, r8)
 8004bd0:	40007c00 	.word	0x40007c00
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	50000400 	.word	0x50000400
 8004bdc:	40009400 	.word	0x40009400

08004be0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004be0:	b590      	push	{r4, r7, lr}
 8004be2:	b099      	sub	sp, #100	@ 0x64
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004be8:	234c      	movs	r3, #76	@ 0x4c
 8004bea:	18fb      	adds	r3, r7, r3
 8004bec:	0018      	movs	r0, r3
 8004bee:	2314      	movs	r3, #20
 8004bf0:	001a      	movs	r2, r3
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	f008 f974 	bl	800cee0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004bf8:	2424      	movs	r4, #36	@ 0x24
 8004bfa:	193b      	adds	r3, r7, r4
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	2328      	movs	r3, #40	@ 0x28
 8004c00:	001a      	movs	r2, r3
 8004c02:	2100      	movs	r1, #0
 8004c04:	f008 f96c 	bl	800cee0 <memset>
  if(htim_base->Instance==TIM1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a68      	ldr	r2, [pc, #416]	@ (8004db0 <HAL_TIM_Base_MspInit+0x1d0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d11d      	bne.n	8004c4e <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8004c12:	193b      	adds	r3, r7, r4
 8004c14:	2280      	movs	r2, #128	@ 0x80
 8004c16:	0392      	lsls	r2, r2, #14
 8004c18:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8004c1a:	193b      	adds	r3, r7, r4
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c20:	193b      	adds	r3, r7, r4
 8004c22:	0018      	movs	r0, r3
 8004c24:	f004 f94c 	bl	8008ec0 <HAL_RCCEx_PeriphCLKConfig>
 8004c28:	1e03      	subs	r3, r0, #0
 8004c2a:	d001      	beq.n	8004c30 <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 8004c2c:	f7fd fadc 	bl	80021e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c30:	4b60      	ldr	r3, [pc, #384]	@ (8004db4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004c32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c34:	4b5f      	ldr	r3, [pc, #380]	@ (8004db4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004c36:	2180      	movs	r1, #128	@ 0x80
 8004c38:	0109      	lsls	r1, r1, #4
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c3e:	4b5d      	ldr	r3, [pc, #372]	@ (8004db4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004c40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c42:	2380      	movs	r3, #128	@ 0x80
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	4013      	ands	r3, r2
 8004c48:	623b      	str	r3, [r7, #32]
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }

}
 8004c4c:	e0ab      	b.n	8004da6 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM2)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	2380      	movs	r3, #128	@ 0x80
 8004c54:	05db      	lsls	r3, r3, #23
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d138      	bne.n	8004ccc <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c5a:	4b56      	ldr	r3, [pc, #344]	@ (8004db4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004c5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c5e:	4b55      	ldr	r3, [pc, #340]	@ (8004db4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004c60:	2101      	movs	r1, #1
 8004c62:	430a      	orrs	r2, r1
 8004c64:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004c66:	4b53      	ldr	r3, [pc, #332]	@ (8004db4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	61fb      	str	r3, [r7, #28]
 8004c70:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c72:	4b50      	ldr	r3, [pc, #320]	@ (8004db4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004c74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c76:	4b4f      	ldr	r3, [pc, #316]	@ (8004db4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004c78:	2101      	movs	r1, #1
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c7e:	4b4d      	ldr	r3, [pc, #308]	@ (8004db4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c82:	2201      	movs	r2, #1
 8004c84:	4013      	ands	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
 8004c88:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 8004c8a:	214c      	movs	r1, #76	@ 0x4c
 8004c8c:	187b      	adds	r3, r7, r1
 8004c8e:	2280      	movs	r2, #128	@ 0x80
 8004c90:	0212      	lsls	r2, r2, #8
 8004c92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c94:	187b      	adds	r3, r7, r1
 8004c96:	2202      	movs	r2, #2
 8004c98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP; //even though we do not 'technically' need a pullup as a push-pull O/P will be driving the I/P cap pin, I think it is better to ensure the I/P cap input properly idles
 8004c9a:	187b      	adds	r3, r7, r1
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ca0:	187b      	adds	r3, r7, r1
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004ca6:	187b      	adds	r3, r7, r1
 8004ca8:	2202      	movs	r2, #2
 8004caa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 8004cac:	187a      	adds	r2, r7, r1
 8004cae:	23a0      	movs	r3, #160	@ 0xa0
 8004cb0:	05db      	lsls	r3, r3, #23
 8004cb2:	0011      	movs	r1, r2
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f002 fe1d 	bl	80078f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 2);
 8004cba:	2202      	movs	r2, #2
 8004cbc:	2102      	movs	r1, #2
 8004cbe:	200f      	movs	r0, #15
 8004cc0:	f002 fab8 	bl	8007234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004cc4:	200f      	movs	r0, #15
 8004cc6:	f002 faca 	bl	800725e <HAL_NVIC_EnableIRQ>
}
 8004cca:	e06c      	b.n	8004da6 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM3)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a39      	ldr	r2, [pc, #228]	@ (8004db8 <HAL_TIM_Base_MspInit+0x1d8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d114      	bne.n	8004d00 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004cd6:	4b37      	ldr	r3, [pc, #220]	@ (8004db4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004cd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cda:	4b36      	ldr	r3, [pc, #216]	@ (8004db4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004cdc:	2102      	movs	r1, #2
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004ce2:	4b34      	ldr	r3, [pc, #208]	@ (8004db4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	4013      	ands	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004cee:	2200      	movs	r2, #0
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	2010      	movs	r0, #16
 8004cf4:	f002 fa9e 	bl	8007234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004cf8:	2010      	movs	r0, #16
 8004cfa:	f002 fab0 	bl	800725e <HAL_NVIC_EnableIRQ>
}
 8004cfe:	e052      	b.n	8004da6 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM16)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a2d      	ldr	r2, [pc, #180]	@ (8004dbc <HAL_TIM_Base_MspInit+0x1dc>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d116      	bne.n	8004d38 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8004db4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004d0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d0e:	4b29      	ldr	r3, [pc, #164]	@ (8004db4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004d10:	2180      	movs	r1, #128	@ 0x80
 8004d12:	0289      	lsls	r1, r1, #10
 8004d14:	430a      	orrs	r2, r1
 8004d16:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d18:	4b26      	ldr	r3, [pc, #152]	@ (8004db4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004d1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d1c:	2380      	movs	r3, #128	@ 0x80
 8004d1e:	029b      	lsls	r3, r3, #10
 8004d20:	4013      	ands	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]
 8004d24:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004d26:	2200      	movs	r2, #0
 8004d28:	2100      	movs	r1, #0
 8004d2a:	2015      	movs	r0, #21
 8004d2c:	f002 fa82 	bl	8007234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004d30:	2015      	movs	r0, #21
 8004d32:	f002 fa94 	bl	800725e <HAL_NVIC_EnableIRQ>
}
 8004d36:	e036      	b.n	8004da6 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM17)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a20      	ldr	r2, [pc, #128]	@ (8004dc0 <HAL_TIM_Base_MspInit+0x1e0>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d116      	bne.n	8004d70 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004d42:	4b1c      	ldr	r3, [pc, #112]	@ (8004db4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004d44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d46:	4b1b      	ldr	r3, [pc, #108]	@ (8004db4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004d48:	2180      	movs	r1, #128	@ 0x80
 8004d4a:	02c9      	lsls	r1, r1, #11
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d50:	4b18      	ldr	r3, [pc, #96]	@ (8004db4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004d52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d54:	2380      	movs	r3, #128	@ 0x80
 8004d56:	02db      	lsls	r3, r3, #11
 8004d58:	4013      	ands	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 8004d5e:	2203      	movs	r2, #3
 8004d60:	2103      	movs	r1, #3
 8004d62:	2016      	movs	r0, #22
 8004d64:	f002 fa66 	bl	8007234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8004d68:	2016      	movs	r0, #22
 8004d6a:	f002 fa78 	bl	800725e <HAL_NVIC_EnableIRQ>
}
 8004d6e:	e01a      	b.n	8004da6 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM14)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a13      	ldr	r2, [pc, #76]	@ (8004dc4 <HAL_TIM_Base_MspInit+0x1e4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d115      	bne.n	8004da6 <HAL_TIM_Base_MspInit+0x1c6>
      __HAL_RCC_TIM14_CLK_ENABLE();
 8004d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8004db4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004d7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004db4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004d80:	2180      	movs	r1, #128	@ 0x80
 8004d82:	0209      	lsls	r1, r1, #8
 8004d84:	430a      	orrs	r2, r1
 8004d86:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d88:	4b0a      	ldr	r3, [pc, #40]	@ (8004db4 <HAL_TIM_Base_MspInit+0x1d4>)
 8004d8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d8c:	2380      	movs	r3, #128	@ 0x80
 8004d8e:	021b      	lsls	r3, r3, #8
 8004d90:	4013      	ands	r3, r2
 8004d92:	60bb      	str	r3, [r7, #8]
 8004d94:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8004d96:	2203      	movs	r2, #3
 8004d98:	2103      	movs	r1, #3
 8004d9a:	2013      	movs	r0, #19
 8004d9c:	f002 fa4a 	bl	8007234 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8004da0:	2013      	movs	r0, #19
 8004da2:	f002 fa5c 	bl	800725e <HAL_NVIC_EnableIRQ>
}
 8004da6:	46c0      	nop			@ (mov r8, r8)
 8004da8:	46bd      	mov	sp, r7
 8004daa:	b019      	add	sp, #100	@ 0x64
 8004dac:	bd90      	pop	{r4, r7, pc}
 8004dae:	46c0      	nop			@ (mov r8, r8)
 8004db0:	40012c00 	.word	0x40012c00
 8004db4:	40021000 	.word	0x40021000
 8004db8:	40000400 	.word	0x40000400
 8004dbc:	40014400 	.word	0x40014400
 8004dc0:	40014800 	.word	0x40014800
 8004dc4:	40002000 	.word	0x40002000

08004dc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004dc8:	b590      	push	{r4, r7, lr}
 8004dca:	b08b      	sub	sp, #44	@ 0x2c
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dd0:	2414      	movs	r4, #20
 8004dd2:	193b      	adds	r3, r7, r4
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	2314      	movs	r3, #20
 8004dd8:	001a      	movs	r2, r3
 8004dda:	2100      	movs	r1, #0
 8004ddc:	f008 f880 	bl	800cee0 <memset>
  if(htim->Instance==TIM1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a25      	ldr	r2, [pc, #148]	@ (8004e7c <HAL_TIM_MspPostInit+0xb4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d144      	bne.n	8004e74 <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dea:	4b25      	ldr	r3, [pc, #148]	@ (8004e80 <HAL_TIM_MspPostInit+0xb8>)
 8004dec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dee:	4b24      	ldr	r3, [pc, #144]	@ (8004e80 <HAL_TIM_MspPostInit+0xb8>)
 8004df0:	2101      	movs	r1, #1
 8004df2:	430a      	orrs	r2, r1
 8004df4:	635a      	str	r2, [r3, #52]	@ 0x34
 8004df6:	4b22      	ldr	r3, [pc, #136]	@ (8004e80 <HAL_TIM_MspPostInit+0xb8>)
 8004df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
 8004e00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e02:	4b1f      	ldr	r3, [pc, #124]	@ (8004e80 <HAL_TIM_MspPostInit+0xb8>)
 8004e04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e06:	4b1e      	ldr	r3, [pc, #120]	@ (8004e80 <HAL_TIM_MspPostInit+0xb8>)
 8004e08:	2102      	movs	r1, #2
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8004e80 <HAL_TIM_MspPostInit+0xb8>)
 8004e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e12:	2202      	movs	r2, #2
 8004e14:	4013      	ands	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11 [PA9]     ------> TIM1_CH4
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
 8004e1a:	193b      	adds	r3, r7, r4
 8004e1c:	2280      	movs	r2, #128	@ 0x80
 8004e1e:	0112      	lsls	r2, r2, #4
 8004e20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e22:	193b      	adds	r3, r7, r4
 8004e24:	2202      	movs	r2, #2
 8004e26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e28:	193b      	adds	r3, r7, r4
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e2e:	193b      	adds	r3, r7, r4
 8004e30:	2200      	movs	r2, #0
 8004e32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004e34:	193b      	adds	r3, r7, r4
 8004e36:	2202      	movs	r2, #2
 8004e38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8004e3a:	193a      	adds	r2, r7, r4
 8004e3c:	23a0      	movs	r3, #160	@ 0xa0
 8004e3e:	05db      	lsls	r3, r3, #23
 8004e40:	0011      	movs	r1, r2
 8004e42:	0018      	movs	r0, r3
 8004e44:	f002 fd56 	bl	80078f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAIN_OSCILLATOR_Pin;
 8004e48:	0021      	movs	r1, r4
 8004e4a:	187b      	adds	r3, r7, r1
 8004e4c:	2208      	movs	r2, #8
 8004e4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e50:	187b      	adds	r3, r7, r1
 8004e52:	2202      	movs	r2, #2
 8004e54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e56:	187b      	adds	r3, r7, r1
 8004e58:	2200      	movs	r2, #0
 8004e5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e5c:	187b      	adds	r3, r7, r1
 8004e5e:	2200      	movs	r2, #0
 8004e60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004e62:	187b      	adds	r3, r7, r1
 8004e64:	2201      	movs	r2, #1
 8004e66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8004e68:	187b      	adds	r3, r7, r1
 8004e6a:	4a06      	ldr	r2, [pc, #24]	@ (8004e84 <HAL_TIM_MspPostInit+0xbc>)
 8004e6c:	0019      	movs	r1, r3
 8004e6e:	0010      	movs	r0, r2
 8004e70:	f002 fd40 	bl	80078f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004e74:	46c0      	nop			@ (mov r8, r8)
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b00b      	add	sp, #44	@ 0x2c
 8004e7a:	bd90      	pop	{r4, r7, pc}
 8004e7c:	40012c00 	.word	0x40012c00
 8004e80:	40021000 	.word	0x40021000
 8004e84:	50000400 	.word	0x50000400

08004e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e88:	b590      	push	{r4, r7, lr}
 8004e8a:	b08b      	sub	sp, #44	@ 0x2c
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e90:	2414      	movs	r4, #20
 8004e92:	193b      	adds	r3, r7, r4
 8004e94:	0018      	movs	r0, r3
 8004e96:	2314      	movs	r3, #20
 8004e98:	001a      	movs	r2, r3
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	f008 f820 	bl	800cee0 <memset>
  if(huart->Instance==USART2)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a4a      	ldr	r2, [pc, #296]	@ (8004fd0 <HAL_UART_MspInit+0x148>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d000      	beq.n	8004eac <HAL_UART_MspInit+0x24>
 8004eaa:	e08d      	b.n	8004fc8 <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004eac:	4b49      	ldr	r3, [pc, #292]	@ (8004fd4 <HAL_UART_MspInit+0x14c>)
 8004eae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004eb0:	4b48      	ldr	r3, [pc, #288]	@ (8004fd4 <HAL_UART_MspInit+0x14c>)
 8004eb2:	2180      	movs	r1, #128	@ 0x80
 8004eb4:	0289      	lsls	r1, r1, #10
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004eba:	4b46      	ldr	r3, [pc, #280]	@ (8004fd4 <HAL_UART_MspInit+0x14c>)
 8004ebc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ebe:	2380      	movs	r3, #128	@ 0x80
 8004ec0:	029b      	lsls	r3, r3, #10
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ec8:	4b42      	ldr	r3, [pc, #264]	@ (8004fd4 <HAL_UART_MspInit+0x14c>)
 8004eca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ecc:	4b41      	ldr	r3, [pc, #260]	@ (8004fd4 <HAL_UART_MspInit+0x14c>)
 8004ece:	2101      	movs	r1, #1
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	635a      	str	r2, [r3, #52]	@ 0x34
 8004ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8004fd4 <HAL_UART_MspInit+0x14c>)
 8004ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed8:	2201      	movs	r2, #1
 8004eda:	4013      	ands	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8004ee0:	0021      	movs	r1, r4
 8004ee2:	187b      	adds	r3, r7, r1
 8004ee4:	220c      	movs	r2, #12
 8004ee6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee8:	187b      	adds	r3, r7, r1
 8004eea:	2202      	movs	r2, #2
 8004eec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004eee:	187b      	adds	r3, r7, r1
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ef4:	187b      	adds	r3, r7, r1
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004efa:	187b      	adds	r3, r7, r1
 8004efc:	2201      	movs	r2, #1
 8004efe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f00:	187a      	adds	r2, r7, r1
 8004f02:	23a0      	movs	r3, #160	@ 0xa0
 8004f04:	05db      	lsls	r3, r3, #23
 8004f06:	0011      	movs	r1, r2
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f002 fcf3 	bl	80078f4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8004f0e:	4b32      	ldr	r3, [pc, #200]	@ (8004fd8 <HAL_UART_MspInit+0x150>)
 8004f10:	4a32      	ldr	r2, [pc, #200]	@ (8004fdc <HAL_UART_MspInit+0x154>)
 8004f12:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004f14:	4b30      	ldr	r3, [pc, #192]	@ (8004fd8 <HAL_UART_MspInit+0x150>)
 8004f16:	2234      	movs	r2, #52	@ 0x34
 8004f18:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8004fd8 <HAL_UART_MspInit+0x150>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f20:	4b2d      	ldr	r3, [pc, #180]	@ (8004fd8 <HAL_UART_MspInit+0x150>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004f26:	4b2c      	ldr	r3, [pc, #176]	@ (8004fd8 <HAL_UART_MspInit+0x150>)
 8004f28:	2280      	movs	r2, #128	@ 0x80
 8004f2a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8004fd8 <HAL_UART_MspInit+0x150>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f32:	4b29      	ldr	r3, [pc, #164]	@ (8004fd8 <HAL_UART_MspInit+0x150>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004f38:	4b27      	ldr	r3, [pc, #156]	@ (8004fd8 <HAL_UART_MspInit+0x150>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004f3e:	4b26      	ldr	r3, [pc, #152]	@ (8004fd8 <HAL_UART_MspInit+0x150>)
 8004f40:	2280      	movs	r2, #128	@ 0x80
 8004f42:	0152      	lsls	r2, r2, #5
 8004f44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004f46:	4b24      	ldr	r3, [pc, #144]	@ (8004fd8 <HAL_UART_MspInit+0x150>)
 8004f48:	0018      	movs	r0, r3
 8004f4a:	f002 f9b5 	bl	80072b8 <HAL_DMA_Init>
 8004f4e:	1e03      	subs	r3, r0, #0
 8004f50:	d001      	beq.n	8004f56 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004f52:	f7fd f949 	bl	80021e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2180      	movs	r1, #128	@ 0x80
 8004f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8004fd8 <HAL_UART_MspInit+0x150>)
 8004f5c:	505a      	str	r2, [r3, r1]
 8004f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004fd8 <HAL_UART_MspInit+0x150>)
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8004f64:	4b1e      	ldr	r3, [pc, #120]	@ (8004fe0 <HAL_UART_MspInit+0x158>)
 8004f66:	4a1f      	ldr	r2, [pc, #124]	@ (8004fe4 <HAL_UART_MspInit+0x15c>)
 8004f68:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe0 <HAL_UART_MspInit+0x158>)
 8004f6c:	2235      	movs	r2, #53	@ 0x35
 8004f6e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f70:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe0 <HAL_UART_MspInit+0x158>)
 8004f72:	2210      	movs	r2, #16
 8004f74:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f76:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe0 <HAL_UART_MspInit+0x158>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f7c:	4b18      	ldr	r3, [pc, #96]	@ (8004fe0 <HAL_UART_MspInit+0x158>)
 8004f7e:	2280      	movs	r2, #128	@ 0x80
 8004f80:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f82:	4b17      	ldr	r3, [pc, #92]	@ (8004fe0 <HAL_UART_MspInit+0x158>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f88:	4b15      	ldr	r3, [pc, #84]	@ (8004fe0 <HAL_UART_MspInit+0x158>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004f8e:	4b14      	ldr	r3, [pc, #80]	@ (8004fe0 <HAL_UART_MspInit+0x158>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004f94:	4b12      	ldr	r3, [pc, #72]	@ (8004fe0 <HAL_UART_MspInit+0x158>)
 8004f96:	2280      	movs	r2, #128	@ 0x80
 8004f98:	0152      	lsls	r2, r2, #5
 8004f9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004f9c:	4b10      	ldr	r3, [pc, #64]	@ (8004fe0 <HAL_UART_MspInit+0x158>)
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f002 f98a 	bl	80072b8 <HAL_DMA_Init>
 8004fa4:	1e03      	subs	r3, r0, #0
 8004fa6:	d001      	beq.n	8004fac <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8004fa8:	f7fd f91e 	bl	80021e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a0c      	ldr	r2, [pc, #48]	@ (8004fe0 <HAL_UART_MspInit+0x158>)
 8004fb0:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe0 <HAL_UART_MspInit+0x158>)
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 8004fb8:	2201      	movs	r2, #1
 8004fba:	2101      	movs	r1, #1
 8004fbc:	201c      	movs	r0, #28
 8004fbe:	f002 f939 	bl	8007234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004fc2:	201c      	movs	r0, #28
 8004fc4:	f002 f94b 	bl	800725e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8004fc8:	46c0      	nop			@ (mov r8, r8)
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	b00b      	add	sp, #44	@ 0x2c
 8004fce:	bd90      	pop	{r4, r7, pc}
 8004fd0:	40004400 	.word	0x40004400
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	20000b04 	.word	0x20000b04
 8004fdc:	4002001c 	.word	0x4002001c
 8004fe0:	20000b60 	.word	0x20000b60
 8004fe4:	40020030 	.word	0x40020030

08004fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004fec:	46c0      	nop			@ (mov r8, r8)
 8004fee:	e7fd      	b.n	8004fec <NMI_Handler+0x4>

08004ff0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ff4:	46c0      	nop			@ (mov r8, r8)
 8004ff6:	e7fd      	b.n	8004ff4 <HardFault_Handler+0x4>

08004ff8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004ffc:	46c0      	nop			@ (mov r8, r8)
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005006:	46c0      	nop			@ (mov r8, r8)
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005010:	f000 fdfc 	bl	8005c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005014:	46c0      	nop			@ (mov r8, r8)
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(CLK_IN_Pin);
 800501e:	2080      	movs	r0, #128	@ 0x80
 8005020:	f002 fe06 	bl	8007c30 <HAL_GPIO_EXTI_IRQHandler>
	//HAL_GPIO_EXTI_IRQHandler(SW_IN_Pin);

  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005024:	46c0      	nop			@ (mov r8, r8)
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005030:	4b03      	ldr	r3, [pc, #12]	@ (8005040 <DMA1_Channel1_IRQHandler+0x14>)
 8005032:	0018      	movs	r0, r3
 8005034:	f002 fb1c 	bl	8007670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005038:	46c0      	nop			@ (mov r8, r8)
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	46c0      	nop			@ (mov r8, r8)
 8005040:	20000574 	.word	0x20000574

08005044 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005048:	4b05      	ldr	r3, [pc, #20]	@ (8005060 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800504a:	0018      	movs	r0, r3
 800504c:	f002 fb10 	bl	8007670 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005050:	4b04      	ldr	r3, [pc, #16]	@ (8005064 <DMA1_Channel2_3_IRQHandler+0x20>)
 8005052:	0018      	movs	r0, r3
 8005054:	f002 fb0c 	bl	8007670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005058:	46c0      	nop			@ (mov r8, r8)
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	46c0      	nop			@ (mov r8, r8)
 8005060:	20000b04 	.word	0x20000b04
 8005064:	20000b60 	.word	0x20000b60

08005068 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800506c:	4b03      	ldr	r3, [pc, #12]	@ (800507c <TIM2_IRQHandler+0x14>)
 800506e:	0018      	movs	r0, r3
 8005070:	f004 fef0 	bl	8009e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005074:	46c0      	nop			@ (mov r8, r8)
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	46c0      	nop			@ (mov r8, r8)
 800507c:	20000804 	.word	0x20000804

08005080 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005084:	4b03      	ldr	r3, [pc, #12]	@ (8005094 <TIM3_IRQHandler+0x14>)
 8005086:	0018      	movs	r0, r3
 8005088:	f004 fee4 	bl	8009e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800508c:	46c0      	nop			@ (mov r8, r8)
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	46c0      	nop			@ (mov r8, r8)
 8005094:	200008c0 	.word	0x200008c0

08005098 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800509c:	4b03      	ldr	r3, [pc, #12]	@ (80050ac <TIM16_IRQHandler+0x14>)
 800509e:	0018      	movs	r0, r3
 80050a0:	f004 fed8 	bl	8009e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80050a4:	46c0      	nop			@ (mov r8, r8)
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	46c0      	nop			@ (mov r8, r8)
 80050ac:	20000748 	.word	0x20000748

080050b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80050b4:	4b03      	ldr	r3, [pc, #12]	@ (80050c4 <USART2_IRQHandler+0x14>)
 80050b6:	0018      	movs	r0, r3
 80050b8:	f006 fc4e 	bl	800b958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80050bc:	46c0      	nop			@ (mov r8, r8)
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	46c0      	nop			@ (mov r8, r8)
 80050c4:	20000a38 	.word	0x20000a38

080050c8 <LPTIM1_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void LPTIM1_IRQHandler(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  HAL_LPTIM_IRQHandler(&hlptim1);
 80050cc:	4b03      	ldr	r3, [pc, #12]	@ (80050dc <LPTIM1_IRQHandler+0x14>)
 80050ce:	0018      	movs	r0, r3
 80050d0:	f002 ff1c 	bl	8007f0c <HAL_LPTIM_IRQHandler>
}
 80050d4:	46c0      	nop			@ (mov r8, r8)
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	46c0      	nop			@ (mov r8, r8)
 80050dc:	20000bbc 	.word	0x20000bbc

080050e0 <TIM17_IRQHandler>:


void TIM17_IRQHandler(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80050e4:	4b03      	ldr	r3, [pc, #12]	@ (80050f4 <TIM17_IRQHandler+0x14>)
 80050e6:	0018      	movs	r0, r3
 80050e8:	f004 feb4 	bl	8009e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80050ec:	46c0      	nop			@ (mov r8, r8)
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	46c0      	nop			@ (mov r8, r8)
 80050f4:	2000068c 	.word	0x2000068c

080050f8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80050fc:	4b03      	ldr	r3, [pc, #12]	@ (800510c <TIM14_IRQHandler+0x14>)
 80050fe:	0018      	movs	r0, r3
 8005100:	f004 fea8 	bl	8009e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8005104:	46c0      	nop			@ (mov r8, r8)
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	46c0      	nop			@ (mov r8, r8)
 800510c:	200005d0 	.word	0x200005d0

08005110 <Adjust_TIM16_Prescaler>:
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	5c9b      	ldrb	r3, [r3, r2]
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b01      	cmp	r3, #1
 8005122:	d107      	bne.n	8005134 <Adjust_TIM16_Prescaler+0x24>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	8b5b      	ldrh	r3, [r3, #26]
 8005128:	b29b      	uxth	r3, r3
 800512a:	18db      	adds	r3, r3, r3
 800512c:	b29a      	uxth	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	839a      	strh	r2, [r3, #28]
 8005132:	e00a      	b.n	800514a <Adjust_TIM16_Prescaler+0x3a>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2220      	movs	r2, #32
 8005138:	5c9b      	ldrb	r3, [r3, r2]
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d104      	bne.n	800514a <Adjust_TIM16_Prescaler+0x3a>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	8b5b      	ldrh	r3, [r3, #26]
 8005144:	b29a      	uxth	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	839a      	strh	r2, [r3, #28]
 800514a:	2301      	movs	r3, #1
 800514c:	0018      	movs	r0, r3
 800514e:	46bd      	mov	sp, r7
 8005150:	b002      	add	sp, #8
 8005152:	bd80      	pop	{r7, pc}

08005154 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>:
 8005154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	2317      	movs	r3, #23
 800515e:	18fb      	adds	r3, r7, r3
 8005160:	2200      	movs	r2, #0
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	2316      	movs	r3, #22
 8005166:	18fb      	adds	r3, r7, r3
 8005168:	2200      	movs	r2, #0
 800516a:	701a      	strb	r2, [r3, #0]
 800516c:	2315      	movs	r3, #21
 800516e:	18fb      	adds	r3, r7, r3
 8005170:	2200      	movs	r2, #0
 8005172:	701a      	strb	r2, [r3, #0]
 8005174:	2114      	movs	r1, #20
 8005176:	187b      	adds	r3, r7, r1
 8005178:	2200      	movs	r2, #0
 800517a:	701a      	strb	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	899b      	ldrh	r3, [r3, #12]
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b7f      	cmp	r3, #127	@ 0x7f
 8005184:	d803      	bhi.n	800518e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3a>
 8005186:	187b      	adds	r3, r7, r1
 8005188:	2200      	movs	r2, #0
 800518a:	701a      	strb	r2, [r3, #0]
 800518c:	e003      	b.n	8005196 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x42>
 800518e:	2314      	movs	r3, #20
 8005190:	18fb      	adds	r3, r7, r3
 8005192:	2201      	movs	r2, #1
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	799b      	ldrb	r3, [r3, #6]
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b01      	cmp	r3, #1
 800519e:	d004      	beq.n	80051aa <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x56>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	799b      	ldrb	r3, [r3, #6]
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d146      	bne.n	8005238 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe4>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	7c1b      	ldrb	r3, [r3, #16]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d104      	bne.n	80051be <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6a>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	7c5b      	ldrb	r3, [r3, #17]
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d009      	beq.n	80051d2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7e>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	7c1b      	ldrb	r3, [r3, #16]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d113      	bne.n	80051f0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	7c5b      	ldrb	r3, [r3, #17]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d10e      	bne.n	80051f0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>
 80051d2:	2314      	movs	r3, #20
 80051d4:	18fb      	adds	r3, r7, r3
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d104      	bne.n	80051e6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x92>
 80051dc:	2316      	movs	r3, #22
 80051de:	18fb      	adds	r3, r7, r3
 80051e0:	2201      	movs	r2, #1
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	e027      	b.n	8005236 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
 80051e6:	2316      	movs	r3, #22
 80051e8:	18fb      	adds	r3, r7, r3
 80051ea:	2200      	movs	r2, #0
 80051ec:	701a      	strb	r2, [r3, #0]
 80051ee:	e022      	b.n	8005236 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	7c1b      	ldrb	r3, [r3, #16]
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d104      	bne.n	8005204 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xb0>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	7c5b      	ldrb	r3, [r3, #17]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b01      	cmp	r3, #1
 8005202:	d009      	beq.n	8005218 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xc4>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	7c1b      	ldrb	r3, [r3, #16]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b01      	cmp	r3, #1
 800520c:	d13c      	bne.n	8005288 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	7c5b      	ldrb	r3, [r3, #17]
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d137      	bne.n	8005288 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 8005218:	2314      	movs	r3, #20
 800521a:	18fb      	adds	r3, r7, r3
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d104      	bne.n	800522c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd8>
 8005222:	2316      	movs	r3, #22
 8005224:	18fb      	adds	r3, r7, r3
 8005226:	2200      	movs	r2, #0
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	e02d      	b.n	8005288 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 800522c:	2316      	movs	r3, #22
 800522e:	18fb      	adds	r3, r7, r3
 8005230:	2201      	movs	r2, #1
 8005232:	701a      	strb	r2, [r3, #0]
 8005234:	e028      	b.n	8005288 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 8005236:	e027      	b.n	8005288 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	799b      	ldrb	r3, [r3, #6]
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d123      	bne.n	800528a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	7c1b      	ldrb	r3, [r3, #16]
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10e      	bne.n	800526a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x116>
 800524c:	2314      	movs	r3, #20
 800524e:	18fb      	adds	r3, r7, r3
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d104      	bne.n	8005260 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x10c>
 8005256:	2316      	movs	r3, #22
 8005258:	18fb      	adds	r3, r7, r3
 800525a:	2201      	movs	r2, #1
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	e014      	b.n	800528a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
 8005260:	2316      	movs	r3, #22
 8005262:	18fb      	adds	r3, r7, r3
 8005264:	2200      	movs	r2, #0
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	e00f      	b.n	800528a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
 800526a:	2314      	movs	r3, #20
 800526c:	18fb      	adds	r3, r7, r3
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d104      	bne.n	800527e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x12a>
 8005274:	2316      	movs	r3, #22
 8005276:	18fb      	adds	r3, r7, r3
 8005278:	2200      	movs	r2, #0
 800527a:	701a      	strb	r2, [r3, #0]
 800527c:	e005      	b.n	800528a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
 800527e:	2316      	movs	r3, #22
 8005280:	18fb      	adds	r3, r7, r3
 8005282:	2201      	movs	r2, #1
 8005284:	701a      	strb	r2, [r3, #0]
 8005286:	e000      	b.n	800528a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
 8005288:	46c0      	nop			@ (mov r8, r8)
 800528a:	2314      	movs	r3, #20
 800528c:	18fb      	adds	r3, r7, r3
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d109      	bne.n	80052a8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x154>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	899b      	ldrh	r3, [r3, #12]
 8005298:	b29b      	uxth	r3, r3
 800529a:	b2da      	uxtb	r2, r3
 800529c:	2315      	movs	r3, #21
 800529e:	18fb      	adds	r3, r7, r3
 80052a0:	217f      	movs	r1, #127	@ 0x7f
 80052a2:	1a8a      	subs	r2, r1, r2
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	e007      	b.n	80052b8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x164>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	899b      	ldrh	r3, [r3, #12]
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	2315      	movs	r3, #21
 80052b2:	18fb      	adds	r3, r7, r3
 80052b4:	3a80      	subs	r2, #128	@ 0x80
 80052b6:	701a      	strb	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	8a5b      	ldrh	r3, [r3, #18]
 80052bc:	b29a      	uxth	r2, r3
 80052be:	200e      	movs	r0, #14
 80052c0:	183b      	adds	r3, r7, r0
 80052c2:	2180      	movs	r1, #128	@ 0x80
 80052c4:	0049      	lsls	r1, r1, #1
 80052c6:	1a8a      	subs	r2, r1, r2
 80052c8:	801a      	strh	r2, [r3, #0]
 80052ca:	0001      	movs	r1, r0
 80052cc:	187b      	adds	r3, r7, r1
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	2215      	movs	r2, #21
 80052d2:	18ba      	adds	r2, r7, r2
 80052d4:	7812      	ldrb	r2, [r2, #0]
 80052d6:	435a      	muls	r2, r3
 80052d8:	0013      	movs	r3, r2
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	189b      	adds	r3, r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	10da      	asrs	r2, r3, #3
 80052e2:	240c      	movs	r4, #12
 80052e4:	193b      	adds	r3, r7, r4
 80052e6:	801a      	strh	r2, [r3, #0]
 80052e8:	250a      	movs	r5, #10
 80052ea:	197b      	adds	r3, r7, r5
 80052ec:	193a      	adds	r2, r7, r4
 80052ee:	8812      	ldrh	r2, [r2, #0]
 80052f0:	0a12      	lsrs	r2, r2, #8
 80052f2:	801a      	strh	r2, [r3, #0]
 80052f4:	2312      	movs	r3, #18
 80052f6:	18fb      	adds	r3, r7, r3
 80052f8:	0008      	movs	r0, r1
 80052fa:	1879      	adds	r1, r7, r1
 80052fc:	197a      	adds	r2, r7, r5
 80052fe:	8809      	ldrh	r1, [r1, #0]
 8005300:	8812      	ldrh	r2, [r2, #0]
 8005302:	1a8a      	subs	r2, r1, r2
 8005304:	801a      	strh	r2, [r3, #0]
 8005306:	2610      	movs	r6, #16
 8005308:	19bb      	adds	r3, r7, r6
 800530a:	1839      	adds	r1, r7, r0
 800530c:	197a      	adds	r2, r7, r5
 800530e:	8809      	ldrh	r1, [r1, #0]
 8005310:	8812      	ldrh	r2, [r2, #0]
 8005312:	188a      	adds	r2, r1, r2
 8005314:	801a      	strh	r2, [r3, #0]
 8005316:	19bb      	adds	r3, r7, r6
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	2bff      	cmp	r3, #255	@ 0xff
 800531c:	d90f      	bls.n	800533e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 800531e:	19bb      	adds	r3, r7, r6
 8005320:	881a      	ldrh	r2, [r3, #0]
 8005322:	2380      	movs	r3, #128	@ 0x80
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	429a      	cmp	r2, r3
 8005328:	d000      	beq.n	800532c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1d8>
 800532a:	e0b0      	b.n	800548e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>
 800532c:	193b      	adds	r3, r7, r4
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	2108      	movs	r1, #8
 8005332:	0018      	movs	r0, r3
 8005334:	f000 fb80 	bl	8005a38 <unsigned_bitwise_modulo>
 8005338:	1e03      	subs	r3, r0, #0
 800533a:	d000      	beq.n	800533e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 800533c:	e0a7      	b.n	800548e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>
 800533e:	230c      	movs	r3, #12
 8005340:	18fb      	adds	r3, r7, r3
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	2108      	movs	r1, #8
 8005346:	0018      	movs	r0, r3
 8005348:	f000 fb76 	bl	8005a38 <unsigned_bitwise_modulo>
 800534c:	0003      	movs	r3, r0
 800534e:	2b80      	cmp	r3, #128	@ 0x80
 8005350:	d117      	bne.n	8005382 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x22e>
 8005352:	2316      	movs	r3, #22
 8005354:	18fb      	adds	r3, r7, r3
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d104      	bne.n	8005366 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x212>
 800535c:	2317      	movs	r3, #23
 800535e:	18fb      	adds	r3, r7, r3
 8005360:	2202      	movs	r2, #2
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	e008      	b.n	8005378 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>
 8005366:	2316      	movs	r3, #22
 8005368:	18fb      	adds	r3, r7, r3
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d103      	bne.n	8005378 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>
 8005370:	2317      	movs	r3, #23
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	2201      	movs	r2, #1
 8005376:	701a      	strb	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2220      	movs	r2, #32
 800537c:	2100      	movs	r1, #0
 800537e:	5499      	strb	r1, [r3, r2]
 8005380:	e21f      	b.n	80057c2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
 8005382:	230c      	movs	r3, #12
 8005384:	18fb      	adds	r3, r7, r3
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	2108      	movs	r1, #8
 800538a:	0018      	movs	r0, r3
 800538c:	f000 fb54 	bl	8005a38 <unsigned_bitwise_modulo>
 8005390:	1e03      	subs	r3, r0, #0
 8005392:	d121      	bne.n	80053d8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x284>
 8005394:	2212      	movs	r2, #18
 8005396:	18bb      	adds	r3, r7, r2
 8005398:	18ba      	adds	r2, r7, r2
 800539a:	8812      	ldrh	r2, [r2, #0]
 800539c:	801a      	strh	r2, [r3, #0]
 800539e:	2210      	movs	r2, #16
 80053a0:	18bb      	adds	r3, r7, r2
 80053a2:	18ba      	adds	r2, r7, r2
 80053a4:	8812      	ldrh	r2, [r2, #0]
 80053a6:	801a      	strh	r2, [r3, #0]
 80053a8:	2316      	movs	r3, #22
 80053aa:	18fb      	adds	r3, r7, r3
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d104      	bne.n	80053bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x268>
 80053b2:	2317      	movs	r3, #23
 80053b4:	18fb      	adds	r3, r7, r3
 80053b6:	2200      	movs	r2, #0
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	e008      	b.n	80053ce <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
 80053bc:	2316      	movs	r3, #22
 80053be:	18fb      	adds	r3, r7, r3
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d103      	bne.n	80053ce <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
 80053c6:	2317      	movs	r3, #23
 80053c8:	18fb      	adds	r3, r7, r3
 80053ca:	2200      	movs	r2, #0
 80053cc:	701a      	strb	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2220      	movs	r2, #32
 80053d2:	2100      	movs	r1, #0
 80053d4:	5499      	strb	r1, [r3, r2]
 80053d6:	e1f4      	b.n	80057c2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
 80053d8:	230c      	movs	r3, #12
 80053da:	18fb      	adds	r3, r7, r3
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	2108      	movs	r1, #8
 80053e0:	0018      	movs	r0, r3
 80053e2:	f000 fb29 	bl	8005a38 <unsigned_bitwise_modulo>
 80053e6:	0003      	movs	r3, r0
 80053e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80053ea:	d821      	bhi.n	8005430 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2dc>
 80053ec:	2212      	movs	r2, #18
 80053ee:	18bb      	adds	r3, r7, r2
 80053f0:	18ba      	adds	r2, r7, r2
 80053f2:	8812      	ldrh	r2, [r2, #0]
 80053f4:	801a      	strh	r2, [r3, #0]
 80053f6:	2210      	movs	r2, #16
 80053f8:	18bb      	adds	r3, r7, r2
 80053fa:	18ba      	adds	r2, r7, r2
 80053fc:	8812      	ldrh	r2, [r2, #0]
 80053fe:	801a      	strh	r2, [r3, #0]
 8005400:	2316      	movs	r3, #22
 8005402:	18fb      	adds	r3, r7, r3
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d104      	bne.n	8005414 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2c0>
 800540a:	2317      	movs	r3, #23
 800540c:	18fb      	adds	r3, r7, r3
 800540e:	2200      	movs	r2, #0
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	e008      	b.n	8005426 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
 8005414:	2316      	movs	r3, #22
 8005416:	18fb      	adds	r3, r7, r3
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d103      	bne.n	8005426 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
 800541e:	2317      	movs	r3, #23
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	2200      	movs	r2, #0
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2220      	movs	r2, #32
 800542a:	2100      	movs	r1, #0
 800542c:	5499      	strb	r1, [r3, r2]
 800542e:	e1c8      	b.n	80057c2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
 8005430:	230c      	movs	r3, #12
 8005432:	18fb      	adds	r3, r7, r3
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	2108      	movs	r1, #8
 8005438:	0018      	movs	r0, r3
 800543a:	f000 fafd 	bl	8005a38 <unsigned_bitwise_modulo>
 800543e:	0003      	movs	r3, r0
 8005440:	2b80      	cmp	r3, #128	@ 0x80
 8005442:	d800      	bhi.n	8005446 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2f2>
 8005444:	e1bd      	b.n	80057c2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
 8005446:	2212      	movs	r2, #18
 8005448:	18bb      	adds	r3, r7, r2
 800544a:	18ba      	adds	r2, r7, r2
 800544c:	8812      	ldrh	r2, [r2, #0]
 800544e:	3a01      	subs	r2, #1
 8005450:	801a      	strh	r2, [r3, #0]
 8005452:	2210      	movs	r2, #16
 8005454:	18bb      	adds	r3, r7, r2
 8005456:	18ba      	adds	r2, r7, r2
 8005458:	8812      	ldrh	r2, [r2, #0]
 800545a:	3201      	adds	r2, #1
 800545c:	801a      	strh	r2, [r3, #0]
 800545e:	2316      	movs	r3, #22
 8005460:	18fb      	adds	r3, r7, r3
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d104      	bne.n	8005472 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x31e>
 8005468:	2317      	movs	r3, #23
 800546a:	18fb      	adds	r3, r7, r3
 800546c:	2200      	movs	r2, #0
 800546e:	701a      	strb	r2, [r3, #0]
 8005470:	e008      	b.n	8005484 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
 8005472:	2316      	movs	r3, #22
 8005474:	18fb      	adds	r3, r7, r3
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d103      	bne.n	8005484 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
 800547c:	2317      	movs	r3, #23
 800547e:	18fb      	adds	r3, r7, r3
 8005480:	2200      	movs	r2, #0
 8005482:	701a      	strb	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2220      	movs	r2, #32
 8005488:	2100      	movs	r1, #0
 800548a:	5499      	strb	r1, [r3, r2]
 800548c:	e199      	b.n	80057c2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
 800548e:	2110      	movs	r1, #16
 8005490:	187b      	adds	r3, r7, r1
 8005492:	881a      	ldrh	r2, [r3, #0]
 8005494:	2380      	movs	r3, #128	@ 0x80
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	429a      	cmp	r2, r3
 800549a:	d810      	bhi.n	80054be <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 800549c:	187b      	adds	r3, r7, r1
 800549e:	881a      	ldrh	r2, [r3, #0]
 80054a0:	2380      	movs	r3, #128	@ 0x80
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d000      	beq.n	80054aa <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x356>
 80054a8:	e18c      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 80054aa:	230c      	movs	r3, #12
 80054ac:	18fb      	adds	r3, r7, r3
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	2108      	movs	r1, #8
 80054b2:	0018      	movs	r0, r3
 80054b4:	f000 fac0 	bl	8005a38 <unsigned_bitwise_modulo>
 80054b8:	1e03      	subs	r3, r0, #0
 80054ba:	d100      	bne.n	80054be <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 80054bc:	e182      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 80054be:	230c      	movs	r3, #12
 80054c0:	18fb      	adds	r3, r7, r3
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	2108      	movs	r1, #8
 80054c6:	0018      	movs	r0, r3
 80054c8:	f000 fab6 	bl	8005a38 <unsigned_bitwise_modulo>
 80054cc:	0003      	movs	r3, r0
 80054ce:	2b80      	cmp	r3, #128	@ 0x80
 80054d0:	d159      	bne.n	8005586 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x432>
 80054d2:	2212      	movs	r2, #18
 80054d4:	18bb      	adds	r3, r7, r2
 80054d6:	18ba      	adds	r2, r7, r2
 80054d8:	8812      	ldrh	r2, [r2, #0]
 80054da:	3a01      	subs	r2, #1
 80054dc:	801a      	strh	r2, [r3, #0]
 80054de:	2110      	movs	r1, #16
 80054e0:	187b      	adds	r3, r7, r1
 80054e2:	187a      	adds	r2, r7, r1
 80054e4:	8812      	ldrh	r2, [r2, #0]
 80054e6:	3201      	adds	r2, #1
 80054e8:	801a      	strh	r2, [r3, #0]
 80054ea:	000c      	movs	r4, r1
 80054ec:	187b      	adds	r3, r7, r1
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	2101      	movs	r1, #1
 80054f2:	0018      	movs	r0, r3
 80054f4:	f000 faa0 	bl	8005a38 <unsigned_bitwise_modulo>
 80054f8:	1e03      	subs	r3, r0, #0
 80054fa:	d121      	bne.n	8005540 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ec>
 80054fc:	193b      	adds	r3, r7, r4
 80054fe:	193a      	adds	r2, r7, r4
 8005500:	8812      	ldrh	r2, [r2, #0]
 8005502:	0852      	lsrs	r2, r2, #1
 8005504:	801a      	strh	r2, [r3, #0]
 8005506:	2316      	movs	r3, #22
 8005508:	18fb      	adds	r3, r7, r3
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d108      	bne.n	8005522 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ce>
 8005510:	2317      	movs	r3, #23
 8005512:	18fb      	adds	r3, r7, r3
 8005514:	2200      	movs	r2, #0
 8005516:	701a      	strb	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	2100      	movs	r1, #0
 800551e:	5499      	strb	r1, [r3, r2]
 8005520:	e150      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 8005522:	2316      	movs	r3, #22
 8005524:	18fb      	adds	r3, r7, r3
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d000      	beq.n	800552e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3da>
 800552c:	e14a      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 800552e:	2317      	movs	r3, #23
 8005530:	18fb      	adds	r3, r7, r3
 8005532:	2200      	movs	r2, #0
 8005534:	701a      	strb	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	2101      	movs	r1, #1
 800553c:	5499      	strb	r1, [r3, r2]
 800553e:	e141      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 8005540:	2210      	movs	r2, #16
 8005542:	18bb      	adds	r3, r7, r2
 8005544:	18ba      	adds	r2, r7, r2
 8005546:	8812      	ldrh	r2, [r2, #0]
 8005548:	0852      	lsrs	r2, r2, #1
 800554a:	801a      	strh	r2, [r3, #0]
 800554c:	2316      	movs	r3, #22
 800554e:	18fb      	adds	r3, r7, r3
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d108      	bne.n	8005568 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x414>
 8005556:	2317      	movs	r3, #23
 8005558:	18fb      	adds	r3, r7, r3
 800555a:	2200      	movs	r2, #0
 800555c:	701a      	strb	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2220      	movs	r2, #32
 8005562:	2100      	movs	r1, #0
 8005564:	5499      	strb	r1, [r3, r2]
 8005566:	e12d      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 8005568:	2316      	movs	r3, #22
 800556a:	18fb      	adds	r3, r7, r3
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d000      	beq.n	8005574 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x420>
 8005572:	e127      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 8005574:	2317      	movs	r3, #23
 8005576:	18fb      	adds	r3, r7, r3
 8005578:	2201      	movs	r2, #1
 800557a:	701a      	strb	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	2101      	movs	r1, #1
 8005582:	5499      	strb	r1, [r3, r2]
 8005584:	e11e      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 8005586:	230c      	movs	r3, #12
 8005588:	18fb      	adds	r3, r7, r3
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	2108      	movs	r1, #8
 800558e:	0018      	movs	r0, r3
 8005590:	f000 fa52 	bl	8005a38 <unsigned_bitwise_modulo>
 8005594:	1e03      	subs	r3, r0, #0
 8005596:	d152      	bne.n	800563e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4ea>
 8005598:	2212      	movs	r2, #18
 800559a:	18bb      	adds	r3, r7, r2
 800559c:	18ba      	adds	r2, r7, r2
 800559e:	8812      	ldrh	r2, [r2, #0]
 80055a0:	801a      	strh	r2, [r3, #0]
 80055a2:	2410      	movs	r4, #16
 80055a4:	193b      	adds	r3, r7, r4
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	2101      	movs	r1, #1
 80055aa:	0018      	movs	r0, r3
 80055ac:	f000 fa44 	bl	8005a38 <unsigned_bitwise_modulo>
 80055b0:	1e03      	subs	r3, r0, #0
 80055b2:	d121      	bne.n	80055f8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4a4>
 80055b4:	193b      	adds	r3, r7, r4
 80055b6:	193a      	adds	r2, r7, r4
 80055b8:	8812      	ldrh	r2, [r2, #0]
 80055ba:	0852      	lsrs	r2, r2, #1
 80055bc:	801a      	strh	r2, [r3, #0]
 80055be:	2316      	movs	r3, #22
 80055c0:	18fb      	adds	r3, r7, r3
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d108      	bne.n	80055da <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x486>
 80055c8:	2317      	movs	r3, #23
 80055ca:	18fb      	adds	r3, r7, r3
 80055cc:	2200      	movs	r2, #0
 80055ce:	701a      	strb	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	2100      	movs	r1, #0
 80055d6:	5499      	strb	r1, [r3, r2]
 80055d8:	e0f4      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 80055da:	2316      	movs	r3, #22
 80055dc:	18fb      	adds	r3, r7, r3
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d000      	beq.n	80055e6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x492>
 80055e4:	e0ee      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 80055e6:	2317      	movs	r3, #23
 80055e8:	18fb      	adds	r3, r7, r3
 80055ea:	2200      	movs	r2, #0
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	2101      	movs	r1, #1
 80055f4:	5499      	strb	r1, [r3, r2]
 80055f6:	e0e5      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 80055f8:	2210      	movs	r2, #16
 80055fa:	18bb      	adds	r3, r7, r2
 80055fc:	18ba      	adds	r2, r7, r2
 80055fe:	8812      	ldrh	r2, [r2, #0]
 8005600:	0852      	lsrs	r2, r2, #1
 8005602:	801a      	strh	r2, [r3, #0]
 8005604:	2316      	movs	r3, #22
 8005606:	18fb      	adds	r3, r7, r3
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d108      	bne.n	8005620 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4cc>
 800560e:	2317      	movs	r3, #23
 8005610:	18fb      	adds	r3, r7, r3
 8005612:	2200      	movs	r2, #0
 8005614:	701a      	strb	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2220      	movs	r2, #32
 800561a:	2100      	movs	r1, #0
 800561c:	5499      	strb	r1, [r3, r2]
 800561e:	e0d1      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 8005620:	2316      	movs	r3, #22
 8005622:	18fb      	adds	r3, r7, r3
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d000      	beq.n	800562c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4d8>
 800562a:	e0cb      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 800562c:	2317      	movs	r3, #23
 800562e:	18fb      	adds	r3, r7, r3
 8005630:	2201      	movs	r2, #1
 8005632:	701a      	strb	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2220      	movs	r2, #32
 8005638:	2101      	movs	r1, #1
 800563a:	5499      	strb	r1, [r3, r2]
 800563c:	e0c2      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 800563e:	230c      	movs	r3, #12
 8005640:	18fb      	adds	r3, r7, r3
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	2108      	movs	r1, #8
 8005646:	0018      	movs	r0, r3
 8005648:	f000 f9f6 	bl	8005a38 <unsigned_bitwise_modulo>
 800564c:	0003      	movs	r3, r0
 800564e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005650:	d856      	bhi.n	8005700 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x5ac>
 8005652:	2212      	movs	r2, #18
 8005654:	18bb      	adds	r3, r7, r2
 8005656:	18ba      	adds	r2, r7, r2
 8005658:	8812      	ldrh	r2, [r2, #0]
 800565a:	801a      	strh	r2, [r3, #0]
 800565c:	2410      	movs	r4, #16
 800565e:	193b      	adds	r3, r7, r4
 8005660:	193a      	adds	r2, r7, r4
 8005662:	8812      	ldrh	r2, [r2, #0]
 8005664:	801a      	strh	r2, [r3, #0]
 8005666:	193b      	adds	r3, r7, r4
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	2101      	movs	r1, #1
 800566c:	0018      	movs	r0, r3
 800566e:	f000 f9e3 	bl	8005a38 <unsigned_bitwise_modulo>
 8005672:	1e03      	subs	r3, r0, #0
 8005674:	d121      	bne.n	80056ba <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x566>
 8005676:	193b      	adds	r3, r7, r4
 8005678:	193a      	adds	r2, r7, r4
 800567a:	8812      	ldrh	r2, [r2, #0]
 800567c:	0852      	lsrs	r2, r2, #1
 800567e:	801a      	strh	r2, [r3, #0]
 8005680:	2316      	movs	r3, #22
 8005682:	18fb      	adds	r3, r7, r3
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d108      	bne.n	800569c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x548>
 800568a:	2317      	movs	r3, #23
 800568c:	18fb      	adds	r3, r7, r3
 800568e:	2200      	movs	r2, #0
 8005690:	701a      	strb	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	2100      	movs	r1, #0
 8005698:	5499      	strb	r1, [r3, r2]
 800569a:	e093      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 800569c:	2316      	movs	r3, #22
 800569e:	18fb      	adds	r3, r7, r3
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d000      	beq.n	80056a8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x554>
 80056a6:	e08d      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 80056a8:	2317      	movs	r3, #23
 80056aa:	18fb      	adds	r3, r7, r3
 80056ac:	2200      	movs	r2, #0
 80056ae:	701a      	strb	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2220      	movs	r2, #32
 80056b4:	2101      	movs	r1, #1
 80056b6:	5499      	strb	r1, [r3, r2]
 80056b8:	e084      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 80056ba:	2210      	movs	r2, #16
 80056bc:	18bb      	adds	r3, r7, r2
 80056be:	18ba      	adds	r2, r7, r2
 80056c0:	8812      	ldrh	r2, [r2, #0]
 80056c2:	0852      	lsrs	r2, r2, #1
 80056c4:	801a      	strh	r2, [r3, #0]
 80056c6:	2316      	movs	r3, #22
 80056c8:	18fb      	adds	r3, r7, r3
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d108      	bne.n	80056e2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x58e>
 80056d0:	2317      	movs	r3, #23
 80056d2:	18fb      	adds	r3, r7, r3
 80056d4:	2200      	movs	r2, #0
 80056d6:	701a      	strb	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2220      	movs	r2, #32
 80056dc:	2100      	movs	r1, #0
 80056de:	5499      	strb	r1, [r3, r2]
 80056e0:	e070      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 80056e2:	2316      	movs	r3, #22
 80056e4:	18fb      	adds	r3, r7, r3
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d000      	beq.n	80056ee <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x59a>
 80056ec:	e06a      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 80056ee:	2317      	movs	r3, #23
 80056f0:	18fb      	adds	r3, r7, r3
 80056f2:	2201      	movs	r2, #1
 80056f4:	701a      	strb	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2220      	movs	r2, #32
 80056fa:	2101      	movs	r1, #1
 80056fc:	5499      	strb	r1, [r3, r2]
 80056fe:	e061      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 8005700:	230c      	movs	r3, #12
 8005702:	18fb      	adds	r3, r7, r3
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	2108      	movs	r1, #8
 8005708:	0018      	movs	r0, r3
 800570a:	f000 f995 	bl	8005a38 <unsigned_bitwise_modulo>
 800570e:	0003      	movs	r3, r0
 8005710:	2b80      	cmp	r3, #128	@ 0x80
 8005712:	d957      	bls.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 8005714:	2212      	movs	r2, #18
 8005716:	18bb      	adds	r3, r7, r2
 8005718:	18ba      	adds	r2, r7, r2
 800571a:	8812      	ldrh	r2, [r2, #0]
 800571c:	3a01      	subs	r2, #1
 800571e:	801a      	strh	r2, [r3, #0]
 8005720:	2410      	movs	r4, #16
 8005722:	193b      	adds	r3, r7, r4
 8005724:	193a      	adds	r2, r7, r4
 8005726:	8812      	ldrh	r2, [r2, #0]
 8005728:	3201      	adds	r2, #1
 800572a:	801a      	strh	r2, [r3, #0]
 800572c:	193b      	adds	r3, r7, r4
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	2101      	movs	r1, #1
 8005732:	0018      	movs	r0, r3
 8005734:	f000 f980 	bl	8005a38 <unsigned_bitwise_modulo>
 8005738:	1e03      	subs	r3, r0, #0
 800573a:	d120      	bne.n	800577e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x62a>
 800573c:	193b      	adds	r3, r7, r4
 800573e:	193a      	adds	r2, r7, r4
 8005740:	8812      	ldrh	r2, [r2, #0]
 8005742:	0852      	lsrs	r2, r2, #1
 8005744:	801a      	strh	r2, [r3, #0]
 8005746:	2316      	movs	r3, #22
 8005748:	18fb      	adds	r3, r7, r3
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d108      	bne.n	8005762 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x60e>
 8005750:	2317      	movs	r3, #23
 8005752:	18fb      	adds	r3, r7, r3
 8005754:	2200      	movs	r2, #0
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	2100      	movs	r1, #0
 800575e:	5499      	strb	r1, [r3, r2]
 8005760:	e030      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 8005762:	2316      	movs	r3, #22
 8005764:	18fb      	adds	r3, r7, r3
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d12b      	bne.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 800576c:	2317      	movs	r3, #23
 800576e:	18fb      	adds	r3, r7, r3
 8005770:	2200      	movs	r2, #0
 8005772:	701a      	strb	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2220      	movs	r2, #32
 8005778:	2101      	movs	r1, #1
 800577a:	5499      	strb	r1, [r3, r2]
 800577c:	e022      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 800577e:	2210      	movs	r2, #16
 8005780:	18bb      	adds	r3, r7, r2
 8005782:	18ba      	adds	r2, r7, r2
 8005784:	8812      	ldrh	r2, [r2, #0]
 8005786:	0852      	lsrs	r2, r2, #1
 8005788:	801a      	strh	r2, [r3, #0]
 800578a:	2316      	movs	r3, #22
 800578c:	18fb      	adds	r3, r7, r3
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d108      	bne.n	80057a6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x652>
 8005794:	2317      	movs	r3, #23
 8005796:	18fb      	adds	r3, r7, r3
 8005798:	2200      	movs	r2, #0
 800579a:	701a      	strb	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2220      	movs	r2, #32
 80057a0:	2100      	movs	r1, #0
 80057a2:	5499      	strb	r1, [r3, r2]
 80057a4:	e00e      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 80057a6:	2316      	movs	r3, #22
 80057a8:	18fb      	adds	r3, r7, r3
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d109      	bne.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 80057b0:	2317      	movs	r3, #23
 80057b2:	18fb      	adds	r3, r7, r3
 80057b4:	2201      	movs	r2, #1
 80057b6:	701a      	strb	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	2101      	movs	r1, #1
 80057be:	5499      	strb	r1, [r3, r2]
 80057c0:	e000      	b.n	80057c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 80057c2:	46c0      	nop			@ (mov r8, r8)
 80057c4:	2316      	movs	r3, #22
 80057c6:	18fb      	adds	r3, r7, r3
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d152      	bne.n	8005874 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x720>
 80057ce:	2317      	movs	r3, #23
 80057d0:	18fb      	adds	r3, r7, r3
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d109      	bne.n	80057ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x698>
 80057d8:	2312      	movs	r3, #18
 80057da:	18fb      	adds	r3, r7, r3
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	2280      	movs	r2, #128	@ 0x80
 80057e0:	0052      	lsls	r2, r2, #1
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	829a      	strh	r2, [r3, #20]
 80057ea:	e099      	b.n	8005920 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
 80057ec:	2317      	movs	r3, #23
 80057ee:	18fb      	adds	r3, r7, r3
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d11b      	bne.n	800582e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6da>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	89db      	ldrh	r3, [r3, #14]
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2101      	movs	r1, #1
 80057fe:	0018      	movs	r0, r3
 8005800:	f000 f91a 	bl	8005a38 <unsigned_bitwise_modulo>
 8005804:	1e03      	subs	r3, r0, #0
 8005806:	d109      	bne.n	800581c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6c8>
 8005808:	2312      	movs	r3, #18
 800580a:	18fb      	adds	r3, r7, r3
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	2280      	movs	r2, #128	@ 0x80
 8005810:	0052      	lsls	r2, r2, #1
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	b29a      	uxth	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	829a      	strh	r2, [r3, #20]
 800581a:	e081      	b.n	8005920 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
 800581c:	2312      	movs	r3, #18
 800581e:	18fb      	adds	r3, r7, r3
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	22ff      	movs	r2, #255	@ 0xff
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	b29a      	uxth	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	829a      	strh	r2, [r3, #20]
 800582c:	e078      	b.n	8005920 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
 800582e:	2317      	movs	r3, #23
 8005830:	18fb      	adds	r3, r7, r3
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b02      	cmp	r3, #2
 8005836:	d000      	beq.n	800583a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6e6>
 8005838:	e072      	b.n	8005920 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	89db      	ldrh	r3, [r3, #14]
 800583e:	b29b      	uxth	r3, r3
 8005840:	2101      	movs	r1, #1
 8005842:	0018      	movs	r0, r3
 8005844:	f000 f8f8 	bl	8005a38 <unsigned_bitwise_modulo>
 8005848:	1e03      	subs	r3, r0, #0
 800584a:	d109      	bne.n	8005860 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x70c>
 800584c:	2312      	movs	r3, #18
 800584e:	18fb      	adds	r3, r7, r3
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	2280      	movs	r2, #128	@ 0x80
 8005854:	0052      	lsls	r2, r2, #1
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	b29a      	uxth	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	829a      	strh	r2, [r3, #20]
 800585e:	e05f      	b.n	8005920 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
 8005860:	2312      	movs	r3, #18
 8005862:	18fb      	adds	r3, r7, r3
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	2202      	movs	r2, #2
 8005868:	32ff      	adds	r2, #255	@ 0xff
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	b29a      	uxth	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	829a      	strh	r2, [r3, #20]
 8005872:	e055      	b.n	8005920 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
 8005874:	2316      	movs	r3, #22
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d150      	bne.n	8005920 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
 800587e:	2317      	movs	r3, #23
 8005880:	18fb      	adds	r3, r7, r3
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d109      	bne.n	800589c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x748>
 8005888:	2310      	movs	r3, #16
 800588a:	18fb      	adds	r3, r7, r3
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	2280      	movs	r2, #128	@ 0x80
 8005890:	0052      	lsls	r2, r2, #1
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	b29a      	uxth	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	829a      	strh	r2, [r3, #20]
 800589a:	e041      	b.n	8005920 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
 800589c:	2317      	movs	r3, #23
 800589e:	18fb      	adds	r3, r7, r3
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d11b      	bne.n	80058de <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x78a>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	89db      	ldrh	r3, [r3, #14]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	2101      	movs	r1, #1
 80058ae:	0018      	movs	r0, r3
 80058b0:	f000 f8c2 	bl	8005a38 <unsigned_bitwise_modulo>
 80058b4:	1e03      	subs	r3, r0, #0
 80058b6:	d109      	bne.n	80058cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x778>
 80058b8:	2310      	movs	r3, #16
 80058ba:	18fb      	adds	r3, r7, r3
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	2280      	movs	r2, #128	@ 0x80
 80058c0:	0052      	lsls	r2, r2, #1
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	829a      	strh	r2, [r3, #20]
 80058ca:	e029      	b.n	8005920 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
 80058cc:	2310      	movs	r3, #16
 80058ce:	18fb      	adds	r3, r7, r3
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	22ff      	movs	r2, #255	@ 0xff
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	829a      	strh	r2, [r3, #20]
 80058dc:	e020      	b.n	8005920 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
 80058de:	2317      	movs	r3, #23
 80058e0:	18fb      	adds	r3, r7, r3
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d11b      	bne.n	8005920 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	89db      	ldrh	r3, [r3, #14]
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	2101      	movs	r1, #1
 80058f0:	0018      	movs	r0, r3
 80058f2:	f000 f8a1 	bl	8005a38 <unsigned_bitwise_modulo>
 80058f6:	1e03      	subs	r3, r0, #0
 80058f8:	d109      	bne.n	800590e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7ba>
 80058fa:	2310      	movs	r3, #16
 80058fc:	18fb      	adds	r3, r7, r3
 80058fe:	881b      	ldrh	r3, [r3, #0]
 8005900:	2280      	movs	r2, #128	@ 0x80
 8005902:	0052      	lsls	r2, r2, #1
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	b29a      	uxth	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	829a      	strh	r2, [r3, #20]
 800590c:	e008      	b.n	8005920 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
 800590e:	2310      	movs	r3, #16
 8005910:	18fb      	adds	r3, r7, r3
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	2202      	movs	r2, #2
 8005916:	32ff      	adds	r2, #255	@ 0xff
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	b29a      	uxth	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	829a      	strh	r2, [r3, #20]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	0018      	movs	r0, r3
 8005924:	f7ff fbf4 	bl	8005110 <Adjust_TIM16_Prescaler>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	8a9b      	ldrh	r3, [r3, #20]
 800592c:	b29b      	uxth	r3, r3
 800592e:	2280      	movs	r2, #128	@ 0x80
 8005930:	0052      	lsls	r2, r2, #1
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	b29a      	uxth	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	82da      	strh	r2, [r3, #22]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	8adb      	ldrh	r3, [r3, #22]
 800593e:	b29b      	uxth	r3, r3
 8005940:	3b01      	subs	r3, #1
 8005942:	b29a      	uxth	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	831a      	strh	r2, [r3, #24]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	8b9b      	ldrh	r3, [r3, #28]
 800594c:	b29b      	uxth	r3, r3
 800594e:	3b01      	subs	r3, #1
 8005950:	b29a      	uxth	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	83da      	strh	r2, [r3, #30]
 8005956:	2301      	movs	r3, #1
 8005958:	0018      	movs	r0, r3
 800595a:	46bd      	mov	sp, r7
 800595c:	b007      	add	sp, #28
 800595e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005960 <SystemInit>:
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
 8005964:	46c0      	nop			@ (mov r8, r8)
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <Start_OC_TIM>:
 800596a:	b5b0      	push	{r4, r5, r7, lr}
 800596c:	b084      	sub	sp, #16
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	6039      	str	r1, [r7, #0]
 8005974:	250f      	movs	r5, #15
 8005976:	197c      	adds	r4, r7, r5
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	0011      	movs	r1, r2
 800597e:	0018      	movs	r0, r3
 8005980:	f003 fd8c 	bl	800949c <HAL_TIM_OC_Start_IT>
 8005984:	0003      	movs	r3, r0
 8005986:	7023      	strb	r3, [r4, #0]
 8005988:	197b      	adds	r3, r7, r5
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <Start_OC_TIM+0x2a>
 8005990:	f7fc fc2a 	bl	80021e8 <Error_Handler>
 8005994:	230f      	movs	r3, #15
 8005996:	18fb      	adds	r3, r7, r3
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	0018      	movs	r0, r3
 800599c:	46bd      	mov	sp, r7
 800599e:	b004      	add	sp, #16
 80059a0:	bdb0      	pop	{r4, r5, r7, pc}

080059a2 <Stop_OC_TIM>:
 80059a2:	b5b0      	push	{r4, r5, r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
 80059ac:	250f      	movs	r5, #15
 80059ae:	197c      	adds	r4, r7, r5
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	0011      	movs	r1, r2
 80059b6:	0018      	movs	r0, r3
 80059b8:	f003 fe94 	bl	80096e4 <HAL_TIM_OC_Stop_IT>
 80059bc:	0003      	movs	r3, r0
 80059be:	7023      	strb	r3, [r4, #0]
 80059c0:	197b      	adds	r3, r7, r5
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <Stop_OC_TIM+0x2a>
 80059c8:	f7fc fc0e 	bl	80021e8 <Error_Handler>
 80059cc:	230f      	movs	r3, #15
 80059ce:	18fb      	adds	r3, r7, r3
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	0018      	movs	r0, r3
 80059d4:	46bd      	mov	sp, r7
 80059d6:	b004      	add	sp, #16
 80059d8:	bdb0      	pop	{r4, r5, r7, pc}

080059da <isPrime>:
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	0002      	movs	r2, r0
 80059e2:	1dbb      	adds	r3, r7, #6
 80059e4:	801a      	strh	r2, [r3, #0]
 80059e6:	230e      	movs	r3, #14
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	2202      	movs	r2, #2
 80059ec:	801a      	strh	r2, [r3, #0]
 80059ee:	e014      	b.n	8005a1a <isPrime+0x40>
 80059f0:	1dba      	adds	r2, r7, #6
 80059f2:	230e      	movs	r3, #14
 80059f4:	18fb      	adds	r3, r7, r3
 80059f6:	8812      	ldrh	r2, [r2, #0]
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	0019      	movs	r1, r3
 80059fc:	0010      	movs	r0, r2
 80059fe:	f7fa fc07 	bl	8000210 <__aeabi_uidivmod>
 8005a02:	000b      	movs	r3, r1
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <isPrime+0x34>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e010      	b.n	8005a30 <isPrime+0x56>
 8005a0e:	210e      	movs	r1, #14
 8005a10:	187b      	adds	r3, r7, r1
 8005a12:	881a      	ldrh	r2, [r3, #0]
 8005a14:	187b      	adds	r3, r7, r1
 8005a16:	3201      	adds	r2, #1
 8005a18:	801a      	strh	r2, [r3, #0]
 8005a1a:	220e      	movs	r2, #14
 8005a1c:	18bb      	adds	r3, r7, r2
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	18ba      	adds	r2, r7, r2
 8005a22:	8812      	ldrh	r2, [r2, #0]
 8005a24:	435a      	muls	r2, r3
 8005a26:	1dbb      	adds	r3, r7, #6
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	dde0      	ble.n	80059f0 <isPrime+0x16>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	0018      	movs	r0, r3
 8005a32:	46bd      	mov	sp, r7
 8005a34:	b004      	add	sp, #16
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <unsigned_bitwise_modulo>:
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	000a      	movs	r2, r1
 8005a42:	1cfb      	adds	r3, r7, #3
 8005a44:	701a      	strb	r2, [r3, #0]
 8005a46:	1cfb      	adds	r3, r7, #3
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	409a      	lsls	r2, r3
 8005a4e:	0013      	movs	r3, r2
 8005a50:	3b01      	subs	r3, #1
 8005a52:	001a      	movs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4013      	ands	r3, r2
 8005a58:	0018      	movs	r0, r3
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	b002      	add	sp, #8
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <Global_Interrupt_Enable>:
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	b662      	cpsie	i
 8005a66:	46c0      	nop			@ (mov r8, r8)
 8005a68:	2301      	movs	r3, #1
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <Get_Status_Bit>:
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	000a      	movs	r2, r1
 8005a7a:	1cbb      	adds	r3, r7, #2
 8005a7c:	801a      	strh	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	1cba      	adds	r2, r7, #2
 8005a84:	8812      	ldrh	r2, [r2, #0]
 8005a86:	4013      	ands	r3, r2
 8005a88:	d001      	beq.n	8005a8e <Get_Status_Bit+0x1e>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <Get_Status_Bit+0x20>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	0018      	movs	r0, r3
 8005a92:	46bd      	mov	sp, r7
 8005a94:	b002      	add	sp, #8
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <Set_Status_Bit>:
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	000a      	movs	r2, r1
 8005aa2:	1cbb      	adds	r3, r7, #2
 8005aa4:	801a      	strh	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	1cbb      	adds	r3, r7, #2
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	46c0      	nop			@ (mov r8, r8)
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	b002      	add	sp, #8
 8005aba:	bd80      	pop	{r7, pc}

08005abc <Clear_Status_Bit>:
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	000a      	movs	r2, r1
 8005ac6:	1cbb      	adds	r3, r7, #2
 8005ac8:	801a      	strh	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	1cba      	adds	r2, r7, #2
 8005ad0:	8812      	ldrh	r2, [r2, #0]
 8005ad2:	43d2      	mvns	r2, r2
 8005ad4:	401a      	ands	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	46c0      	nop			@ (mov r8, r8)
 8005adc:	46bd      	mov	sp, r7
 8005ade:	b002      	add	sp, #8
 8005ae0:	bd80      	pop	{r7, pc}
	...

08005ae4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005ae4:	480d      	ldr	r0, [pc, #52]	@ (8005b1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005ae6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005ae8:	f7ff ff3a 	bl	8005960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005aec:	480c      	ldr	r0, [pc, #48]	@ (8005b20 <LoopForever+0x6>)
  ldr r1, =_edata
 8005aee:	490d      	ldr	r1, [pc, #52]	@ (8005b24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005af0:	4a0d      	ldr	r2, [pc, #52]	@ (8005b28 <LoopForever+0xe>)
  movs r3, #0
 8005af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005af4:	e002      	b.n	8005afc <LoopCopyDataInit>

08005af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005afa:	3304      	adds	r3, #4

08005afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b00:	d3f9      	bcc.n	8005af6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b02:	4a0a      	ldr	r2, [pc, #40]	@ (8005b2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005b04:	4c0a      	ldr	r4, [pc, #40]	@ (8005b30 <LoopForever+0x16>)
  movs r3, #0
 8005b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b08:	e001      	b.n	8005b0e <LoopFillZerobss>

08005b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b0c:	3204      	adds	r2, #4

08005b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b10:	d3fb      	bcc.n	8005b0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005b12:	f007 f9ed 	bl	800cef0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005b16:	f7fe fae1 	bl	80040dc <main>

08005b1a <LoopForever>:

LoopForever:
  b LoopForever
 8005b1a:	e7fe      	b.n	8005b1a <LoopForever>
  ldr   r0, =_estack
 8005b1c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b24:	2000044c 	.word	0x2000044c
  ldr r2, =_sidata
 8005b28:	0800d9e4 	.word	0x0800d9e4
  ldr r2, =_sbss
 8005b2c:	2000044c 	.word	0x2000044c
  ldr r4, =_ebss
 8005b30:	20000cd4 	.word	0x20000cd4

08005b34 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005b34:	e7fe      	b.n	8005b34 <ADC1_IRQHandler>
	...

08005b38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005b3e:	1dfb      	adds	r3, r7, #7
 8005b40:	2200      	movs	r2, #0
 8005b42:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b44:	4b0b      	ldr	r3, [pc, #44]	@ (8005b74 <HAL_Init+0x3c>)
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	4b0a      	ldr	r3, [pc, #40]	@ (8005b74 <HAL_Init+0x3c>)
 8005b4a:	2180      	movs	r1, #128	@ 0x80
 8005b4c:	0049      	lsls	r1, r1, #1
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005b52:	2000      	movs	r0, #0
 8005b54:	f000 f810 	bl	8005b78 <HAL_InitTick>
 8005b58:	1e03      	subs	r3, r0, #0
 8005b5a:	d003      	beq.n	8005b64 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005b5c:	1dfb      	adds	r3, r7, #7
 8005b5e:	2201      	movs	r2, #1
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	e001      	b.n	8005b68 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005b64:	f7fe fef8 	bl	8004958 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005b68:	1dfb      	adds	r3, r7, #7
 8005b6a:	781b      	ldrb	r3, [r3, #0]
}
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	b002      	add	sp, #8
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	40022000 	.word	0x40022000

08005b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b78:	b590      	push	{r4, r7, lr}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005b80:	230f      	movs	r3, #15
 8005b82:	18fb      	adds	r3, r7, r3
 8005b84:	2200      	movs	r2, #0
 8005b86:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005b88:	4b1d      	ldr	r3, [pc, #116]	@ (8005c00 <HAL_InitTick+0x88>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d02b      	beq.n	8005be8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005b90:	4b1c      	ldr	r3, [pc, #112]	@ (8005c04 <HAL_InitTick+0x8c>)
 8005b92:	681c      	ldr	r4, [r3, #0]
 8005b94:	4b1a      	ldr	r3, [pc, #104]	@ (8005c00 <HAL_InitTick+0x88>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	0019      	movs	r1, r3
 8005b9a:	23fa      	movs	r3, #250	@ 0xfa
 8005b9c:	0098      	lsls	r0, r3, #2
 8005b9e:	f7fa fab1 	bl	8000104 <__udivsi3>
 8005ba2:	0003      	movs	r3, r0
 8005ba4:	0019      	movs	r1, r3
 8005ba6:	0020      	movs	r0, r4
 8005ba8:	f7fa faac 	bl	8000104 <__udivsi3>
 8005bac:	0003      	movs	r3, r0
 8005bae:	0018      	movs	r0, r3
 8005bb0:	f001 fb75 	bl	800729e <HAL_SYSTICK_Config>
 8005bb4:	1e03      	subs	r3, r0, #0
 8005bb6:	d112      	bne.n	8005bde <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b03      	cmp	r3, #3
 8005bbc:	d80a      	bhi.n	8005bd4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	425b      	negs	r3, r3
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f001 fb34 	bl	8007234 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8005c08 <HAL_InitTick+0x90>)
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	e00d      	b.n	8005bf0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005bd4:	230f      	movs	r3, #15
 8005bd6:	18fb      	adds	r3, r7, r3
 8005bd8:	2201      	movs	r2, #1
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	e008      	b.n	8005bf0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005bde:	230f      	movs	r3, #15
 8005be0:	18fb      	adds	r3, r7, r3
 8005be2:	2201      	movs	r2, #1
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	e003      	b.n	8005bf0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005be8:	230f      	movs	r3, #15
 8005bea:	18fb      	adds	r3, r7, r3
 8005bec:	2201      	movs	r2, #1
 8005bee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005bf0:	230f      	movs	r3, #15
 8005bf2:	18fb      	adds	r3, r7, r3
 8005bf4:	781b      	ldrb	r3, [r3, #0]
}
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	b005      	add	sp, #20
 8005bfc:	bd90      	pop	{r4, r7, pc}
 8005bfe:	46c0      	nop			@ (mov r8, r8)
 8005c00:	20000448 	.word	0x20000448
 8005c04:	20000440 	.word	0x20000440
 8005c08:	20000444 	.word	0x20000444

08005c0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005c10:	4b05      	ldr	r3, [pc, #20]	@ (8005c28 <HAL_IncTick+0x1c>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	001a      	movs	r2, r3
 8005c16:	4b05      	ldr	r3, [pc, #20]	@ (8005c2c <HAL_IncTick+0x20>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	18d2      	adds	r2, r2, r3
 8005c1c:	4b03      	ldr	r3, [pc, #12]	@ (8005c2c <HAL_IncTick+0x20>)
 8005c1e:	601a      	str	r2, [r3, #0]
}
 8005c20:	46c0      	nop			@ (mov r8, r8)
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	46c0      	nop			@ (mov r8, r8)
 8005c28:	20000448 	.word	0x20000448
 8005c2c:	20000cd0 	.word	0x20000cd0

08005c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
  return uwTick;
 8005c34:	4b02      	ldr	r3, [pc, #8]	@ (8005c40 <HAL_GetTick+0x10>)
 8005c36:	681b      	ldr	r3, [r3, #0]
}
 8005c38:	0018      	movs	r0, r3
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	46c0      	nop			@ (mov r8, r8)
 8005c40:	20000cd0 	.word	0x20000cd0

08005c44 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a05      	ldr	r2, [pc, #20]	@ (8005c68 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005c54:	401a      	ands	r2, r3
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	601a      	str	r2, [r3, #0]
}
 8005c5e:	46c0      	nop			@ (mov r8, r8)
 8005c60:	46bd      	mov	sp, r7
 8005c62:	b002      	add	sp, #8
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	46c0      	nop			@ (mov r8, r8)
 8005c68:	fe3fffff 	.word	0xfe3fffff

08005c6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	23e0      	movs	r3, #224	@ 0xe0
 8005c7a:	045b      	lsls	r3, r3, #17
 8005c7c:	4013      	ands	r3, r2
}
 8005c7e:	0018      	movs	r0, r3
 8005c80:	46bd      	mov	sp, r7
 8005c82:	b002      	add	sp, #8
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b084      	sub	sp, #16
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	60b9      	str	r1, [r7, #8]
 8005c90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	2104      	movs	r1, #4
 8005c9a:	400a      	ands	r2, r1
 8005c9c:	2107      	movs	r1, #7
 8005c9e:	4091      	lsls	r1, r2
 8005ca0:	000a      	movs	r2, r1
 8005ca2:	43d2      	mvns	r2, r2
 8005ca4:	401a      	ands	r2, r3
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2104      	movs	r1, #4
 8005caa:	400b      	ands	r3, r1
 8005cac:	6879      	ldr	r1, [r7, #4]
 8005cae:	4099      	lsls	r1, r3
 8005cb0:	000b      	movs	r3, r1
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005cb8:	46c0      	nop			@ (mov r8, r8)
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	b004      	add	sp, #16
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	2104      	movs	r1, #4
 8005cd2:	400a      	ands	r2, r1
 8005cd4:	2107      	movs	r1, #7
 8005cd6:	4091      	lsls	r1, r2
 8005cd8:	000a      	movs	r2, r1
 8005cda:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2104      	movs	r1, #4
 8005ce0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005ce2:	40da      	lsrs	r2, r3
 8005ce4:	0013      	movs	r3, r2
}
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	b002      	add	sp, #8
 8005cec:	bd80      	pop	{r7, pc}

08005cee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	23c0      	movs	r3, #192	@ 0xc0
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	4013      	ands	r3, r2
 8005d00:	d101      	bne.n	8005d06 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005d02:	2301      	movs	r3, #1
 8005d04:	e000      	b.n	8005d08 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	0018      	movs	r0, r3
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	b002      	add	sp, #8
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	211f      	movs	r1, #31
 8005d24:	400a      	ands	r2, r1
 8005d26:	210f      	movs	r1, #15
 8005d28:	4091      	lsls	r1, r2
 8005d2a:	000a      	movs	r2, r1
 8005d2c:	43d2      	mvns	r2, r2
 8005d2e:	401a      	ands	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	0e9b      	lsrs	r3, r3, #26
 8005d34:	210f      	movs	r1, #15
 8005d36:	4019      	ands	r1, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	201f      	movs	r0, #31
 8005d3c:	4003      	ands	r3, r0
 8005d3e:	4099      	lsls	r1, r3
 8005d40:	000b      	movs	r3, r1
 8005d42:	431a      	orrs	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005d48:	46c0      	nop			@ (mov r8, r8)
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	b004      	add	sp, #16
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	035b      	lsls	r3, r3, #13
 8005d62:	0b5b      	lsrs	r3, r3, #13
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005d6a:	46c0      	nop			@ (mov r8, r8)
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	b002      	add	sp, #8
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b082      	sub	sp, #8
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	0352      	lsls	r2, r2, #13
 8005d84:	0b52      	lsrs	r2, r2, #13
 8005d86:	43d2      	mvns	r2, r2
 8005d88:	401a      	ands	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005d8e:	46c0      	nop			@ (mov r8, r8)
 8005d90:	46bd      	mov	sp, r7
 8005d92:	b002      	add	sp, #8
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	0212      	lsls	r2, r2, #8
 8005dac:	43d2      	mvns	r2, r2
 8005dae:	401a      	ands	r2, r3
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	021b      	lsls	r3, r3, #8
 8005db4:	6879      	ldr	r1, [r7, #4]
 8005db6:	400b      	ands	r3, r1
 8005db8:	4904      	ldr	r1, [pc, #16]	@ (8005dcc <LL_ADC_SetChannelSamplingTime+0x34>)
 8005dba:	400b      	ands	r3, r1
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005dc2:	46c0      	nop			@ (mov r8, r8)
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	b004      	add	sp, #16
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	46c0      	nop			@ (mov r8, r8)
 8005dcc:	07ffff00 	.word	0x07ffff00

08005dd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	4a05      	ldr	r2, [pc, #20]	@ (8005df4 <LL_ADC_EnableInternalRegulator+0x24>)
 8005dde:	4013      	ands	r3, r2
 8005de0:	2280      	movs	r2, #128	@ 0x80
 8005de2:	0552      	lsls	r2, r2, #21
 8005de4:	431a      	orrs	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005dea:	46c0      	nop			@ (mov r8, r8)
 8005dec:	46bd      	mov	sp, r7
 8005dee:	b002      	add	sp, #8
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	46c0      	nop			@ (mov r8, r8)
 8005df4:	6fffffe8 	.word	0x6fffffe8

08005df8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	2380      	movs	r3, #128	@ 0x80
 8005e06:	055b      	lsls	r3, r3, #21
 8005e08:	401a      	ands	r2, r3
 8005e0a:	2380      	movs	r3, #128	@ 0x80
 8005e0c:	055b      	lsls	r3, r3, #21
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d101      	bne.n	8005e16 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005e12:	2301      	movs	r3, #1
 8005e14:	e000      	b.n	8005e18 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	0018      	movs	r0, r3
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	b002      	add	sp, #8
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	4a04      	ldr	r2, [pc, #16]	@ (8005e40 <LL_ADC_Enable+0x20>)
 8005e2e:	4013      	ands	r3, r2
 8005e30:	2201      	movs	r2, #1
 8005e32:	431a      	orrs	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005e38:	46c0      	nop			@ (mov r8, r8)
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	b002      	add	sp, #8
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	7fffffe8 	.word	0x7fffffe8

08005e44 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	4a04      	ldr	r2, [pc, #16]	@ (8005e64 <LL_ADC_Disable+0x20>)
 8005e52:	4013      	ands	r3, r2
 8005e54:	2202      	movs	r2, #2
 8005e56:	431a      	orrs	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005e5c:	46c0      	nop			@ (mov r8, r8)
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	b002      	add	sp, #8
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	7fffffe8 	.word	0x7fffffe8

08005e68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	2201      	movs	r2, #1
 8005e76:	4013      	ands	r3, r2
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d101      	bne.n	8005e80 <LL_ADC_IsEnabled+0x18>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e000      	b.n	8005e82 <LL_ADC_IsEnabled+0x1a>
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	0018      	movs	r0, r3
 8005e84:	46bd      	mov	sp, r7
 8005e86:	b002      	add	sp, #8
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	2202      	movs	r2, #2
 8005e98:	4013      	ands	r3, r2
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d101      	bne.n	8005ea2 <LL_ADC_IsDisableOngoing+0x18>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <LL_ADC_IsDisableOngoing+0x1a>
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	b002      	add	sp, #8
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	4a04      	ldr	r2, [pc, #16]	@ (8005ecc <LL_ADC_REG_StartConversion+0x20>)
 8005eba:	4013      	ands	r3, r2
 8005ebc:	2204      	movs	r2, #4
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005ec4:	46c0      	nop			@ (mov r8, r8)
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b002      	add	sp, #8
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	7fffffe8 	.word	0x7fffffe8

08005ed0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	4a04      	ldr	r2, [pc, #16]	@ (8005ef0 <LL_ADC_REG_StopConversion+0x20>)
 8005ede:	4013      	ands	r3, r2
 8005ee0:	2210      	movs	r2, #16
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005ee8:	46c0      	nop			@ (mov r8, r8)
 8005eea:	46bd      	mov	sp, r7
 8005eec:	b002      	add	sp, #8
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	7fffffe8 	.word	0x7fffffe8

08005ef4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	2204      	movs	r2, #4
 8005f02:	4013      	ands	r3, r2
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	d101      	bne.n	8005f0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e000      	b.n	8005f0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	0018      	movs	r0, r3
 8005f10:	46bd      	mov	sp, r7
 8005f12:	b002      	add	sp, #8
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b088      	sub	sp, #32
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f20:	231f      	movs	r3, #31
 8005f22:	18fb      	adds	r3, r7, r3
 8005f24:	2200      	movs	r2, #0
 8005f26:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005f30:	2300      	movs	r3, #0
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e19f      	b.n	800627e <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d12a      	bne.n	8005f9c <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4acf      	ldr	r2, [pc, #828]	@ (8006288 <HAL_ADC_Init+0x370>)
 8005f4a:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4acf      	ldr	r2, [pc, #828]	@ (800628c <HAL_ADC_Init+0x374>)
 8005f50:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4ace      	ldr	r2, [pc, #824]	@ (8006290 <HAL_ADC_Init+0x378>)
 8005f56:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4ace      	ldr	r2, [pc, #824]	@ (8006294 <HAL_ADC_Init+0x37c>)
 8005f5c:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4acd      	ldr	r2, [pc, #820]	@ (8006298 <HAL_ADC_Init+0x380>)
 8005f62:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4acd      	ldr	r2, [pc, #820]	@ (800629c <HAL_ADC_Init+0x384>)
 8005f68:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4acc      	ldr	r2, [pc, #816]	@ (80062a0 <HAL_ADC_Init+0x388>)
 8005f6e:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (hadc->MspInitCallback == NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2280      	movs	r2, #128	@ 0x80
 8005f74:	589b      	ldr	r3, [r3, r2]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d103      	bne.n	8005f82 <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2180      	movs	r1, #128	@ 0x80
 8005f7e:	4ac9      	ldr	r2, [pc, #804]	@ (80062a4 <HAL_ADC_Init+0x38c>)
 8005f80:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2280      	movs	r2, #128	@ 0x80
 8005f86:	589b      	ldr	r3, [r3, r2]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	0010      	movs	r0, r2
 8005f8c:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2254      	movs	r2, #84	@ 0x54
 8005f98:	2100      	movs	r1, #0
 8005f9a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	0018      	movs	r0, r3
 8005fa2:	f7ff ff29 	bl	8005df8 <LL_ADC_IsInternalRegulatorEnabled>
 8005fa6:	1e03      	subs	r3, r0, #0
 8005fa8:	d115      	bne.n	8005fd6 <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f7ff ff0e 	bl	8005dd0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005fb4:	4bbc      	ldr	r3, [pc, #752]	@ (80062a8 <HAL_ADC_Init+0x390>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	49bc      	ldr	r1, [pc, #752]	@ (80062ac <HAL_ADC_Init+0x394>)
 8005fba:	0018      	movs	r0, r3
 8005fbc:	f7fa f8a2 	bl	8000104 <__udivsi3>
 8005fc0:	0003      	movs	r3, r0
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005fc8:	e002      	b.n	8005fd0 <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1f9      	bne.n	8005fca <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	0018      	movs	r0, r3
 8005fdc:	f7ff ff0c 	bl	8005df8 <LL_ADC_IsInternalRegulatorEnabled>
 8005fe0:	1e03      	subs	r3, r0, #0
 8005fe2:	d10f      	bne.n	8006004 <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fe8:	2210      	movs	r2, #16
 8005fea:	431a      	orrs	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ffc:	231f      	movs	r3, #31
 8005ffe:	18fb      	adds	r3, r7, r3
 8006000:	2201      	movs	r2, #1
 8006002:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	0018      	movs	r0, r3
 800600a:	f7ff ff73 	bl	8005ef4 <LL_ADC_REG_IsConversionOngoing>
 800600e:	0003      	movs	r3, r0
 8006010:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006016:	2210      	movs	r2, #16
 8006018:	4013      	ands	r3, r2
 800601a:	d000      	beq.n	800601e <HAL_ADC_Init+0x106>
 800601c:	e122      	b.n	8006264 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d000      	beq.n	8006026 <HAL_ADC_Init+0x10e>
 8006024:	e11e      	b.n	8006264 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800602a:	4aa1      	ldr	r2, [pc, #644]	@ (80062b0 <HAL_ADC_Init+0x398>)
 800602c:	4013      	ands	r3, r2
 800602e:	2202      	movs	r2, #2
 8006030:	431a      	orrs	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	0018      	movs	r0, r3
 800603c:	f7ff ff14 	bl	8005e68 <LL_ADC_IsEnabled>
 8006040:	1e03      	subs	r3, r0, #0
 8006042:	d000      	beq.n	8006046 <HAL_ADC_Init+0x12e>
 8006044:	e0ad      	b.n	80061a2 <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	7e1b      	ldrb	r3, [r3, #24]
 800604e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006050:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	7e5b      	ldrb	r3, [r3, #25]
 8006056:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006058:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	7e9b      	ldrb	r3, [r3, #26]
 800605e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006060:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <HAL_ADC_Init+0x158>
 800606a:	2380      	movs	r3, #128	@ 0x80
 800606c:	015b      	lsls	r3, r3, #5
 800606e:	e000      	b.n	8006072 <HAL_ADC_Init+0x15a>
 8006070:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006072:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006078:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	da04      	bge.n	800608c <HAL_ADC_Init+0x174>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	085b      	lsrs	r3, r3, #1
 800608a:	e001      	b.n	8006090 <HAL_ADC_Init+0x178>
 800608c:	2380      	movs	r3, #128	@ 0x80
 800608e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8006090:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	212c      	movs	r1, #44	@ 0x2c
 8006096:	5c5b      	ldrb	r3, [r3, r1]
 8006098:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800609a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	4313      	orrs	r3, r2
 80060a0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2220      	movs	r2, #32
 80060a6:	5c9b      	ldrb	r3, [r3, r2]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d115      	bne.n	80060d8 <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	7e9b      	ldrb	r3, [r3, #26]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d105      	bne.n	80060c0 <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	2280      	movs	r2, #128	@ 0x80
 80060b8:	0252      	lsls	r2, r2, #9
 80060ba:	4313      	orrs	r3, r2
 80060bc:	61bb      	str	r3, [r7, #24]
 80060be:	e00b      	b.n	80060d8 <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060c4:	2220      	movs	r2, #32
 80060c6:	431a      	orrs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060d0:	2201      	movs	r2, #1
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00a      	beq.n	80060f6 <HAL_ADC_Init+0x1de>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060e4:	23e0      	movs	r3, #224	@ 0xe0
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80060ee:	4313      	orrs	r3, r2
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	4a6d      	ldr	r2, [pc, #436]	@ (80062b4 <HAL_ADC_Init+0x39c>)
 80060fe:	4013      	ands	r3, r2
 8006100:	0019      	movs	r1, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	430a      	orrs	r2, r1
 800610a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	0f9b      	lsrs	r3, r3, #30
 8006112:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006118:	4313      	orrs	r3, r2
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	4313      	orrs	r3, r2
 800611e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	223c      	movs	r2, #60	@ 0x3c
 8006124:	5c9b      	ldrb	r3, [r3, r2]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d111      	bne.n	800614e <HAL_ADC_Init+0x236>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	0f9b      	lsrs	r3, r3, #30
 8006130:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006136:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800613c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8006142:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	2201      	movs	r2, #1
 800614a:	4313      	orrs	r3, r2
 800614c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	4a58      	ldr	r2, [pc, #352]	@ (80062b8 <HAL_ADC_Init+0x3a0>)
 8006156:	4013      	ands	r3, r2
 8006158:	0019      	movs	r1, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	430a      	orrs	r2, r1
 8006162:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	23c0      	movs	r3, #192	@ 0xc0
 800616a:	061b      	lsls	r3, r3, #24
 800616c:	429a      	cmp	r2, r3
 800616e:	d018      	beq.n	80061a2 <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8006174:	2380      	movs	r3, #128	@ 0x80
 8006176:	05db      	lsls	r3, r3, #23
 8006178:	429a      	cmp	r2, r3
 800617a:	d012      	beq.n	80061a2 <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8006180:	2380      	movs	r3, #128	@ 0x80
 8006182:	061b      	lsls	r3, r3, #24
 8006184:	429a      	cmp	r2, r3
 8006186:	d00c      	beq.n	80061a2 <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8006188:	4b4c      	ldr	r3, [pc, #304]	@ (80062bc <HAL_ADC_Init+0x3a4>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a4c      	ldr	r2, [pc, #304]	@ (80062c0 <HAL_ADC_Init+0x3a8>)
 800618e:	4013      	ands	r3, r2
 8006190:	0019      	movs	r1, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	23f0      	movs	r3, #240	@ 0xf0
 8006198:	039b      	lsls	r3, r3, #14
 800619a:	401a      	ands	r2, r3
 800619c:	4b47      	ldr	r3, [pc, #284]	@ (80062bc <HAL_ADC_Init+0x3a4>)
 800619e:	430a      	orrs	r2, r1
 80061a0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061aa:	001a      	movs	r2, r3
 80061ac:	2100      	movs	r1, #0
 80061ae:	f7ff fd6a 	bl	8005c86 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6818      	ldr	r0, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ba:	4942      	ldr	r1, [pc, #264]	@ (80062c4 <HAL_ADC_Init+0x3ac>)
 80061bc:	001a      	movs	r2, r3
 80061be:	f7ff fd62 	bl	8005c86 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d109      	bne.n	80061de <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2110      	movs	r1, #16
 80061d6:	4249      	negs	r1, r1
 80061d8:	430a      	orrs	r2, r1
 80061da:	629a      	str	r2, [r3, #40]	@ 0x28
 80061dc:	e018      	b.n	8006210 <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691a      	ldr	r2, [r3, #16]
 80061e2:	2380      	movs	r3, #128	@ 0x80
 80061e4:	039b      	lsls	r3, r3, #14
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d112      	bne.n	8006210 <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	69db      	ldr	r3, [r3, #28]
 80061f4:	3b01      	subs	r3, #1
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	221c      	movs	r2, #28
 80061fa:	4013      	ands	r3, r2
 80061fc:	2210      	movs	r2, #16
 80061fe:	4252      	negs	r2, r2
 8006200:	409a      	lsls	r2, r3
 8006202:	0011      	movs	r1, r2
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2100      	movs	r1, #0
 8006216:	0018      	movs	r0, r3
 8006218:	f7ff fd52 	bl	8005cc0 <LL_ADC_GetSamplingTimeCommonChannels>
 800621c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006222:	429a      	cmp	r2, r3
 8006224:	d10b      	bne.n	800623e <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006230:	2203      	movs	r2, #3
 8006232:	4393      	bics	r3, r2
 8006234:	2201      	movs	r2, #1
 8006236:	431a      	orrs	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800623c:	e01c      	b.n	8006278 <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006242:	2212      	movs	r2, #18
 8006244:	4393      	bics	r3, r2
 8006246:	2210      	movs	r2, #16
 8006248:	431a      	orrs	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006252:	2201      	movs	r2, #1
 8006254:	431a      	orrs	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800625a:	231f      	movs	r3, #31
 800625c:	18fb      	adds	r3, r7, r3
 800625e:	2201      	movs	r2, #1
 8006260:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006262:	e009      	b.n	8006278 <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006268:	2210      	movs	r2, #16
 800626a:	431a      	orrs	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006270:	231f      	movs	r3, #31
 8006272:	18fb      	adds	r3, r7, r3
 8006274:	2201      	movs	r2, #1
 8006276:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8006278:	231f      	movs	r3, #31
 800627a:	18fb      	adds	r3, r7, r3
 800627c:	781b      	ldrb	r3, [r3, #0]
}
 800627e:	0018      	movs	r0, r3
 8006280:	46bd      	mov	sp, r7
 8006282:	b008      	add	sp, #32
 8006284:	bd80      	pop	{r7, pc}
 8006286:	46c0      	nop			@ (mov r8, r8)
 8006288:	080065e1 	.word	0x080065e1
 800628c:	080065f1 	.word	0x080065f1
 8006290:	08006601 	.word	0x08006601
 8006294:	08006611 	.word	0x08006611
 8006298:	08007069 	.word	0x08007069
 800629c:	08007079 	.word	0x08007079
 80062a0:	08007089 	.word	0x08007089
 80062a4:	080049a1 	.word	0x080049a1
 80062a8:	20000440 	.word	0x20000440
 80062ac:	00030d40 	.word	0x00030d40
 80062b0:	fffffefd 	.word	0xfffffefd
 80062b4:	ffde0201 	.word	0xffde0201
 80062b8:	1ffffc02 	.word	0x1ffffc02
 80062bc:	40012708 	.word	0x40012708
 80062c0:	ffc3ffff 	.word	0xffc3ffff
 80062c4:	07ffff04 	.word	0x07ffff04

080062c8 <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	607a      	str	r2, [r7, #4]
 80062d2:	230b      	movs	r3, #11
 80062d4:	18fb      	adds	r3, r7, r3
 80062d6:	1c0a      	adds	r2, r1, #0
 80062d8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062da:	2317      	movs	r3, #23
 80062dc:	18fb      	adds	r3, r7, r3
 80062de:	2200      	movs	r2, #0
 80062e0:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d107      	bne.n	80062f8 <HAL_ADC_RegisterCallback+0x30>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062ec:	2210      	movs	r2, #16
 80062ee:	431a      	orrs	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e06d      	b.n	80063d4 <HAL_ADC_RegisterCallback+0x10c>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062fc:	2201      	movs	r2, #1
 80062fe:	4013      	ands	r3, r2
 8006300:	d03a      	beq.n	8006378 <HAL_ADC_RegisterCallback+0xb0>
  {
    switch (CallbackID)
 8006302:	230b      	movs	r3, #11
 8006304:	18fb      	adds	r3, r7, r3
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	2b0a      	cmp	r3, #10
 800630a:	d82a      	bhi.n	8006362 <HAL_ADC_RegisterCallback+0x9a>
 800630c:	009a      	lsls	r2, r3, #2
 800630e:	4b33      	ldr	r3, [pc, #204]	@ (80063dc <HAL_ADC_RegisterCallback+0x114>)
 8006310:	18d3      	adds	r3, r2, r3
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	469f      	mov	pc, r3
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800631c:	e057      	b.n	80063ce <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8006324:	e053      	b.n	80063ce <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800632c:	e04f      	b.n	80063ce <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8006334:	e04b      	b.n	80063ce <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800633c:	e047      	b.n	80063ce <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8006344:	e043      	b.n	80063ce <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800634c:	e03f      	b.n	80063ce <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2180      	movs	r1, #128	@ 0x80
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	505a      	str	r2, [r3, r1]
        break;
 8006356:	e03a      	b.n	80063ce <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2184      	movs	r1, #132	@ 0x84
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	505a      	str	r2, [r3, r1]
        break;
 8006360:	e035      	b.n	80063ce <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006366:	2210      	movs	r2, #16
 8006368:	431a      	orrs	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 800636e:	2317      	movs	r3, #23
 8006370:	18fb      	adds	r3, r7, r3
 8006372:	2201      	movs	r2, #1
 8006374:	701a      	strb	r2, [r3, #0]
        break;
 8006376:	e02a      	b.n	80063ce <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800637c:	2b00      	cmp	r3, #0
 800637e:	d11c      	bne.n	80063ba <HAL_ADC_RegisterCallback+0xf2>
  {
    switch (CallbackID)
 8006380:	230b      	movs	r3, #11
 8006382:	18fb      	adds	r3, r7, r3
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	2b09      	cmp	r3, #9
 8006388:	d002      	beq.n	8006390 <HAL_ADC_RegisterCallback+0xc8>
 800638a:	2b0a      	cmp	r3, #10
 800638c:	d005      	beq.n	800639a <HAL_ADC_RegisterCallback+0xd2>
 800638e:	e009      	b.n	80063a4 <HAL_ADC_RegisterCallback+0xdc>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2180      	movs	r1, #128	@ 0x80
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	505a      	str	r2, [r3, r1]
        break;
 8006398:	e019      	b.n	80063ce <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2184      	movs	r1, #132	@ 0x84
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	505a      	str	r2, [r3, r1]
        break;
 80063a2:	e014      	b.n	80063ce <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063a8:	2210      	movs	r2, #16
 80063aa:	431a      	orrs	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 80063b0:	2317      	movs	r3, #23
 80063b2:	18fb      	adds	r3, r7, r3
 80063b4:	2201      	movs	r2, #1
 80063b6:	701a      	strb	r2, [r3, #0]
        break;
 80063b8:	e009      	b.n	80063ce <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063be:	2210      	movs	r2, #16
 80063c0:	431a      	orrs	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Return error status */
    status =  HAL_ERROR;
 80063c6:	2317      	movs	r3, #23
 80063c8:	18fb      	adds	r3, r7, r3
 80063ca:	2201      	movs	r2, #1
 80063cc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80063ce:	2317      	movs	r3, #23
 80063d0:	18fb      	adds	r3, r7, r3
 80063d2:	781b      	ldrb	r3, [r3, #0]
}
 80063d4:	0018      	movs	r0, r3
 80063d6:	46bd      	mov	sp, r7
 80063d8:	b006      	add	sp, #24
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	0800d7e8 	.word	0x0800d7e8

080063e0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80063e0:	b5b0      	push	{r4, r5, r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	0018      	movs	r0, r3
 80063f2:	f7ff fd7f 	bl	8005ef4 <LL_ADC_REG_IsConversionOngoing>
 80063f6:	1e03      	subs	r3, r0, #0
 80063f8:	d16c      	bne.n	80064d4 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2254      	movs	r2, #84	@ 0x54
 80063fe:	5c9b      	ldrb	r3, [r3, r2]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_ADC_Start_DMA+0x28>
 8006404:	2302      	movs	r3, #2
 8006406:	e06c      	b.n	80064e2 <HAL_ADC_Start_DMA+0x102>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2254      	movs	r2, #84	@ 0x54
 800640c:	2101      	movs	r1, #1
 800640e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	2201      	movs	r2, #1
 8006418:	4013      	ands	r3, r2
 800641a:	d113      	bne.n	8006444 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	0018      	movs	r0, r3
 8006422:	f7ff fd21 	bl	8005e68 <LL_ADC_IsEnabled>
 8006426:	1e03      	subs	r3, r0, #0
 8006428:	d004      	beq.n	8006434 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	0018      	movs	r0, r3
 8006430:	f7ff fd08 	bl	8005e44 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2101      	movs	r1, #1
 8006440:	430a      	orrs	r2, r1
 8006442:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006444:	2517      	movs	r5, #23
 8006446:	197c      	adds	r4, r7, r5
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	0018      	movs	r0, r3
 800644c:	f000 fb02 	bl	8006a54 <ADC_Enable>
 8006450:	0003      	movs	r3, r0
 8006452:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006454:	002c      	movs	r4, r5
 8006456:	193b      	adds	r3, r7, r4
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d13e      	bne.n	80064dc <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006462:	4a22      	ldr	r2, [pc, #136]	@ (80064ec <HAL_ADC_Start_DMA+0x10c>)
 8006464:	4013      	ands	r3, r2
 8006466:	2280      	movs	r2, #128	@ 0x80
 8006468:	0052      	lsls	r2, r2, #1
 800646a:	431a      	orrs	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800647a:	4a1d      	ldr	r2, [pc, #116]	@ (80064f0 <HAL_ADC_Start_DMA+0x110>)
 800647c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006482:	4a1c      	ldr	r2, [pc, #112]	@ (80064f4 <HAL_ADC_Start_DMA+0x114>)
 8006484:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800648a:	4a1b      	ldr	r2, [pc, #108]	@ (80064f8 <HAL_ADC_Start_DMA+0x118>)
 800648c:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	221c      	movs	r2, #28
 8006494:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2254      	movs	r2, #84	@ 0x54
 800649a:	2100      	movs	r1, #0
 800649c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2110      	movs	r1, #16
 80064aa:	430a      	orrs	r2, r1
 80064ac:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3340      	adds	r3, #64	@ 0x40
 80064b8:	0019      	movs	r1, r3
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	193c      	adds	r4, r7, r4
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f000 ff84 	bl	80073cc <HAL_DMA_Start_IT>
 80064c4:	0003      	movs	r3, r0
 80064c6:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	0018      	movs	r0, r3
 80064ce:	f7ff fced 	bl	8005eac <LL_ADC_REG_StartConversion>
 80064d2:	e003      	b.n	80064dc <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80064d4:	2317      	movs	r3, #23
 80064d6:	18fb      	adds	r3, r7, r3
 80064d8:	2202      	movs	r2, #2
 80064da:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80064dc:	2317      	movs	r3, #23
 80064de:	18fb      	adds	r3, r7, r3
 80064e0:	781b      	ldrb	r3, [r3, #0]
}
 80064e2:	0018      	movs	r0, r3
 80064e4:	46bd      	mov	sp, r7
 80064e6:	b006      	add	sp, #24
 80064e8:	bdb0      	pop	{r4, r5, r7, pc}
 80064ea:	46c0      	nop			@ (mov r8, r8)
 80064ec:	fffff0fe 	.word	0xfffff0fe
 80064f0:	08006c1d 	.word	0x08006c1d
 80064f4:	08006ce9 	.word	0x08006ce9
 80064f8:	08006d09 	.word	0x08006d09

080064fc <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80064fc:	b5b0      	push	{r4, r5, r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2254      	movs	r2, #84	@ 0x54
 8006508:	5c9b      	ldrb	r3, [r3, r2]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d101      	bne.n	8006512 <HAL_ADC_Stop_DMA+0x16>
 800650e:	2302      	movs	r3, #2
 8006510:	e05f      	b.n	80065d2 <HAL_ADC_Stop_DMA+0xd6>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2254      	movs	r2, #84	@ 0x54
 8006516:	2101      	movs	r1, #1
 8006518:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800651a:	250f      	movs	r5, #15
 800651c:	197c      	adds	r4, r7, r5
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	0018      	movs	r0, r3
 8006522:	f000 fa55 	bl	80069d0 <ADC_ConversionStop>
 8006526:	0003      	movs	r3, r0
 8006528:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800652a:	0029      	movs	r1, r5
 800652c:	187b      	adds	r3, r7, r1
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d147      	bne.n	80065c4 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006538:	2225      	movs	r2, #37	@ 0x25
 800653a:	5c9b      	ldrb	r3, [r3, r2]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d112      	bne.n	8006568 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006546:	000d      	movs	r5, r1
 8006548:	187c      	adds	r4, r7, r1
 800654a:	0018      	movs	r0, r3
 800654c:	f000 ffc4 	bl	80074d8 <HAL_DMA_Abort>
 8006550:	0003      	movs	r3, r0
 8006552:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006554:	197b      	adds	r3, r7, r5
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d005      	beq.n	8006568 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006560:	2240      	movs	r2, #64	@ 0x40
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2110      	movs	r1, #16
 8006574:	438a      	bics	r2, r1
 8006576:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8006578:	220f      	movs	r2, #15
 800657a:	18bb      	adds	r3, r7, r2
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d107      	bne.n	8006592 <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8006582:	18bc      	adds	r4, r7, r2
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	0018      	movs	r0, r3
 8006588:	f000 faea 	bl	8006b60 <ADC_Disable>
 800658c:	0003      	movs	r3, r0
 800658e:	7023      	strb	r3, [r4, #0]
 8006590:	e003      	b.n	800659a <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	0018      	movs	r0, r3
 8006596:	f000 fae3 	bl	8006b60 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800659a:	230f      	movs	r3, #15
 800659c:	18fb      	adds	r3, r7, r3
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d107      	bne.n	80065b4 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065a8:	4a0c      	ldr	r2, [pc, #48]	@ (80065dc <HAL_ADC_Stop_DMA+0xe0>)
 80065aa:	4013      	ands	r3, r2
 80065ac:	2201      	movs	r2, #1
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2101      	movs	r1, #1
 80065c0:	438a      	bics	r2, r1
 80065c2:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2254      	movs	r2, #84	@ 0x54
 80065c8:	2100      	movs	r1, #0
 80065ca:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80065cc:	230f      	movs	r3, #15
 80065ce:	18fb      	adds	r3, r7, r3
 80065d0:	781b      	ldrb	r3, [r3, #0]
}
 80065d2:	0018      	movs	r0, r3
 80065d4:	46bd      	mov	sp, r7
 80065d6:	b004      	add	sp, #16
 80065d8:	bdb0      	pop	{r4, r5, r7, pc}
 80065da:	46c0      	nop			@ (mov r8, r8)
 80065dc:	fffffefe 	.word	0xfffffefe

080065e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80065e8:	46c0      	nop			@ (mov r8, r8)
 80065ea:	46bd      	mov	sp, r7
 80065ec:	b002      	add	sp, #8
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80065f8:	46c0      	nop			@ (mov r8, r8)
 80065fa:	46bd      	mov	sp, r7
 80065fc:	b002      	add	sp, #8
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006608:	46c0      	nop			@ (mov r8, r8)
 800660a:	46bd      	mov	sp, r7
 800660c:	b002      	add	sp, #8
 800660e:	bd80      	pop	{r7, pc}

08006610 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006618:	46c0      	nop			@ (mov r8, r8)
 800661a:	46bd      	mov	sp, r7
 800661c:	b002      	add	sp, #8
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800662a:	2317      	movs	r3, #23
 800662c:	18fb      	adds	r3, r7, r3
 800662e:	2200      	movs	r2, #0
 8006630:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2254      	movs	r2, #84	@ 0x54
 800663a:	5c9b      	ldrb	r3, [r3, r2]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d101      	bne.n	8006644 <HAL_ADC_ConfigChannel+0x24>
 8006640:	2302      	movs	r3, #2
 8006642:	e1c0      	b.n	80069c6 <HAL_ADC_ConfigChannel+0x3a6>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2254      	movs	r2, #84	@ 0x54
 8006648:	2101      	movs	r1, #1
 800664a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	0018      	movs	r0, r3
 8006652:	f7ff fc4f 	bl	8005ef4 <LL_ADC_REG_IsConversionOngoing>
 8006656:	1e03      	subs	r3, r0, #0
 8006658:	d000      	beq.n	800665c <HAL_ADC_ConfigChannel+0x3c>
 800665a:	e1a3      	b.n	80069a4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2b02      	cmp	r3, #2
 8006662:	d100      	bne.n	8006666 <HAL_ADC_ConfigChannel+0x46>
 8006664:	e143      	b.n	80068ee <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	691a      	ldr	r2, [r3, #16]
 800666a:	2380      	movs	r3, #128	@ 0x80
 800666c:	061b      	lsls	r3, r3, #24
 800666e:	429a      	cmp	r2, r3
 8006670:	d004      	beq.n	800667c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006676:	4ac1      	ldr	r2, [pc, #772]	@ (800697c <HAL_ADC_ConfigChannel+0x35c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d108      	bne.n	800668e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	0019      	movs	r1, r3
 8006686:	0010      	movs	r0, r2
 8006688:	f7ff fb62 	bl	8005d50 <LL_ADC_REG_SetSequencerChAdd>
 800668c:	e0c9      	b.n	8006822 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	211f      	movs	r1, #31
 8006698:	400b      	ands	r3, r1
 800669a:	210f      	movs	r1, #15
 800669c:	4099      	lsls	r1, r3
 800669e:	000b      	movs	r3, r1
 80066a0:	43db      	mvns	r3, r3
 80066a2:	4013      	ands	r3, r2
 80066a4:	0019      	movs	r1, r3
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	035b      	lsls	r3, r3, #13
 80066ac:	0b5b      	lsrs	r3, r3, #13
 80066ae:	d105      	bne.n	80066bc <HAL_ADC_ConfigChannel+0x9c>
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	0e9b      	lsrs	r3, r3, #26
 80066b6:	221f      	movs	r2, #31
 80066b8:	4013      	ands	r3, r2
 80066ba:	e098      	b.n	80067ee <HAL_ADC_ConfigChannel+0x1ce>
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2201      	movs	r2, #1
 80066c2:	4013      	ands	r3, r2
 80066c4:	d000      	beq.n	80066c8 <HAL_ADC_ConfigChannel+0xa8>
 80066c6:	e091      	b.n	80067ec <HAL_ADC_ConfigChannel+0x1cc>
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2202      	movs	r2, #2
 80066ce:	4013      	ands	r3, r2
 80066d0:	d000      	beq.n	80066d4 <HAL_ADC_ConfigChannel+0xb4>
 80066d2:	e089      	b.n	80067e8 <HAL_ADC_ConfigChannel+0x1c8>
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2204      	movs	r2, #4
 80066da:	4013      	ands	r3, r2
 80066dc:	d000      	beq.n	80066e0 <HAL_ADC_ConfigChannel+0xc0>
 80066de:	e081      	b.n	80067e4 <HAL_ADC_ConfigChannel+0x1c4>
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2208      	movs	r2, #8
 80066e6:	4013      	ands	r3, r2
 80066e8:	d000      	beq.n	80066ec <HAL_ADC_ConfigChannel+0xcc>
 80066ea:	e079      	b.n	80067e0 <HAL_ADC_ConfigChannel+0x1c0>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2210      	movs	r2, #16
 80066f2:	4013      	ands	r3, r2
 80066f4:	d000      	beq.n	80066f8 <HAL_ADC_ConfigChannel+0xd8>
 80066f6:	e071      	b.n	80067dc <HAL_ADC_ConfigChannel+0x1bc>
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2220      	movs	r2, #32
 80066fe:	4013      	ands	r3, r2
 8006700:	d000      	beq.n	8006704 <HAL_ADC_ConfigChannel+0xe4>
 8006702:	e069      	b.n	80067d8 <HAL_ADC_ConfigChannel+0x1b8>
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2240      	movs	r2, #64	@ 0x40
 800670a:	4013      	ands	r3, r2
 800670c:	d000      	beq.n	8006710 <HAL_ADC_ConfigChannel+0xf0>
 800670e:	e061      	b.n	80067d4 <HAL_ADC_ConfigChannel+0x1b4>
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2280      	movs	r2, #128	@ 0x80
 8006716:	4013      	ands	r3, r2
 8006718:	d000      	beq.n	800671c <HAL_ADC_ConfigChannel+0xfc>
 800671a:	e059      	b.n	80067d0 <HAL_ADC_ConfigChannel+0x1b0>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	2380      	movs	r3, #128	@ 0x80
 8006722:	005b      	lsls	r3, r3, #1
 8006724:	4013      	ands	r3, r2
 8006726:	d151      	bne.n	80067cc <HAL_ADC_ConfigChannel+0x1ac>
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	2380      	movs	r3, #128	@ 0x80
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4013      	ands	r3, r2
 8006732:	d149      	bne.n	80067c8 <HAL_ADC_ConfigChannel+0x1a8>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	2380      	movs	r3, #128	@ 0x80
 800673a:	00db      	lsls	r3, r3, #3
 800673c:	4013      	ands	r3, r2
 800673e:	d141      	bne.n	80067c4 <HAL_ADC_ConfigChannel+0x1a4>
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	2380      	movs	r3, #128	@ 0x80
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	4013      	ands	r3, r2
 800674a:	d139      	bne.n	80067c0 <HAL_ADC_ConfigChannel+0x1a0>
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	2380      	movs	r3, #128	@ 0x80
 8006752:	015b      	lsls	r3, r3, #5
 8006754:	4013      	ands	r3, r2
 8006756:	d131      	bne.n	80067bc <HAL_ADC_ConfigChannel+0x19c>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	2380      	movs	r3, #128	@ 0x80
 800675e:	019b      	lsls	r3, r3, #6
 8006760:	4013      	ands	r3, r2
 8006762:	d129      	bne.n	80067b8 <HAL_ADC_ConfigChannel+0x198>
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	2380      	movs	r3, #128	@ 0x80
 800676a:	01db      	lsls	r3, r3, #7
 800676c:	4013      	ands	r3, r2
 800676e:	d121      	bne.n	80067b4 <HAL_ADC_ConfigChannel+0x194>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	2380      	movs	r3, #128	@ 0x80
 8006776:	021b      	lsls	r3, r3, #8
 8006778:	4013      	ands	r3, r2
 800677a:	d119      	bne.n	80067b0 <HAL_ADC_ConfigChannel+0x190>
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	2380      	movs	r3, #128	@ 0x80
 8006782:	025b      	lsls	r3, r3, #9
 8006784:	4013      	ands	r3, r2
 8006786:	d111      	bne.n	80067ac <HAL_ADC_ConfigChannel+0x18c>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	2380      	movs	r3, #128	@ 0x80
 800678e:	029b      	lsls	r3, r3, #10
 8006790:	4013      	ands	r3, r2
 8006792:	d109      	bne.n	80067a8 <HAL_ADC_ConfigChannel+0x188>
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	2380      	movs	r3, #128	@ 0x80
 800679a:	02db      	lsls	r3, r3, #11
 800679c:	4013      	ands	r3, r2
 800679e:	d001      	beq.n	80067a4 <HAL_ADC_ConfigChannel+0x184>
 80067a0:	2312      	movs	r3, #18
 80067a2:	e024      	b.n	80067ee <HAL_ADC_ConfigChannel+0x1ce>
 80067a4:	2300      	movs	r3, #0
 80067a6:	e022      	b.n	80067ee <HAL_ADC_ConfigChannel+0x1ce>
 80067a8:	2311      	movs	r3, #17
 80067aa:	e020      	b.n	80067ee <HAL_ADC_ConfigChannel+0x1ce>
 80067ac:	2310      	movs	r3, #16
 80067ae:	e01e      	b.n	80067ee <HAL_ADC_ConfigChannel+0x1ce>
 80067b0:	230f      	movs	r3, #15
 80067b2:	e01c      	b.n	80067ee <HAL_ADC_ConfigChannel+0x1ce>
 80067b4:	230e      	movs	r3, #14
 80067b6:	e01a      	b.n	80067ee <HAL_ADC_ConfigChannel+0x1ce>
 80067b8:	230d      	movs	r3, #13
 80067ba:	e018      	b.n	80067ee <HAL_ADC_ConfigChannel+0x1ce>
 80067bc:	230c      	movs	r3, #12
 80067be:	e016      	b.n	80067ee <HAL_ADC_ConfigChannel+0x1ce>
 80067c0:	230b      	movs	r3, #11
 80067c2:	e014      	b.n	80067ee <HAL_ADC_ConfigChannel+0x1ce>
 80067c4:	230a      	movs	r3, #10
 80067c6:	e012      	b.n	80067ee <HAL_ADC_ConfigChannel+0x1ce>
 80067c8:	2309      	movs	r3, #9
 80067ca:	e010      	b.n	80067ee <HAL_ADC_ConfigChannel+0x1ce>
 80067cc:	2308      	movs	r3, #8
 80067ce:	e00e      	b.n	80067ee <HAL_ADC_ConfigChannel+0x1ce>
 80067d0:	2307      	movs	r3, #7
 80067d2:	e00c      	b.n	80067ee <HAL_ADC_ConfigChannel+0x1ce>
 80067d4:	2306      	movs	r3, #6
 80067d6:	e00a      	b.n	80067ee <HAL_ADC_ConfigChannel+0x1ce>
 80067d8:	2305      	movs	r3, #5
 80067da:	e008      	b.n	80067ee <HAL_ADC_ConfigChannel+0x1ce>
 80067dc:	2304      	movs	r3, #4
 80067de:	e006      	b.n	80067ee <HAL_ADC_ConfigChannel+0x1ce>
 80067e0:	2303      	movs	r3, #3
 80067e2:	e004      	b.n	80067ee <HAL_ADC_ConfigChannel+0x1ce>
 80067e4:	2302      	movs	r3, #2
 80067e6:	e002      	b.n	80067ee <HAL_ADC_ConfigChannel+0x1ce>
 80067e8:	2301      	movs	r3, #1
 80067ea:	e000      	b.n	80067ee <HAL_ADC_ConfigChannel+0x1ce>
 80067ec:	2300      	movs	r3, #0
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	6852      	ldr	r2, [r2, #4]
 80067f2:	201f      	movs	r0, #31
 80067f4:	4002      	ands	r2, r0
 80067f6:	4093      	lsls	r3, r2
 80067f8:	000a      	movs	r2, r1
 80067fa:	431a      	orrs	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	089b      	lsrs	r3, r3, #2
 8006806:	1c5a      	adds	r2, r3, #1
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	429a      	cmp	r2, r3
 800680e:	d808      	bhi.n	8006822 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6818      	ldr	r0, [r3, #0]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	6859      	ldr	r1, [r3, #4]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	001a      	movs	r2, r3
 800681e:	f7ff fa77 	bl	8005d10 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6818      	ldr	r0, [r3, #0]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	6819      	ldr	r1, [r3, #0]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	001a      	movs	r2, r3
 8006830:	f7ff fab2 	bl	8005d98 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	db00      	blt.n	800683e <HAL_ADC_ConfigChannel+0x21e>
 800683c:	e0bc      	b.n	80069b8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800683e:	4b50      	ldr	r3, [pc, #320]	@ (8006980 <HAL_ADC_ConfigChannel+0x360>)
 8006840:	0018      	movs	r0, r3
 8006842:	f7ff fa13 	bl	8005c6c <LL_ADC_GetCommonPathInternalCh>
 8006846:	0003      	movs	r3, r0
 8006848:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a4d      	ldr	r2, [pc, #308]	@ (8006984 <HAL_ADC_ConfigChannel+0x364>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d122      	bne.n	800689a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	2380      	movs	r3, #128	@ 0x80
 8006858:	041b      	lsls	r3, r3, #16
 800685a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800685c:	d11d      	bne.n	800689a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	2280      	movs	r2, #128	@ 0x80
 8006862:	0412      	lsls	r2, r2, #16
 8006864:	4313      	orrs	r3, r2
 8006866:	4a46      	ldr	r2, [pc, #280]	@ (8006980 <HAL_ADC_ConfigChannel+0x360>)
 8006868:	0019      	movs	r1, r3
 800686a:	0010      	movs	r0, r2
 800686c:	f7ff f9ea 	bl	8005c44 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006870:	4b45      	ldr	r3, [pc, #276]	@ (8006988 <HAL_ADC_ConfigChannel+0x368>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4945      	ldr	r1, [pc, #276]	@ (800698c <HAL_ADC_ConfigChannel+0x36c>)
 8006876:	0018      	movs	r0, r3
 8006878:	f7f9 fc44 	bl	8000104 <__udivsi3>
 800687c:	0003      	movs	r3, r0
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	0013      	movs	r3, r2
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	189b      	adds	r3, r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800688a:	e002      	b.n	8006892 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3b01      	subs	r3, #1
 8006890:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1f9      	bne.n	800688c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006898:	e08e      	b.n	80069b8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a3c      	ldr	r2, [pc, #240]	@ (8006990 <HAL_ADC_ConfigChannel+0x370>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d10e      	bne.n	80068c2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	2380      	movs	r3, #128	@ 0x80
 80068a8:	045b      	lsls	r3, r3, #17
 80068aa:	4013      	ands	r3, r2
 80068ac:	d109      	bne.n	80068c2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	2280      	movs	r2, #128	@ 0x80
 80068b2:	0452      	lsls	r2, r2, #17
 80068b4:	4313      	orrs	r3, r2
 80068b6:	4a32      	ldr	r2, [pc, #200]	@ (8006980 <HAL_ADC_ConfigChannel+0x360>)
 80068b8:	0019      	movs	r1, r3
 80068ba:	0010      	movs	r0, r2
 80068bc:	f7ff f9c2 	bl	8005c44 <LL_ADC_SetCommonPathInternalCh>
 80068c0:	e07a      	b.n	80069b8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a33      	ldr	r2, [pc, #204]	@ (8006994 <HAL_ADC_ConfigChannel+0x374>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d000      	beq.n	80068ce <HAL_ADC_ConfigChannel+0x2ae>
 80068cc:	e074      	b.n	80069b8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	2380      	movs	r3, #128	@ 0x80
 80068d2:	03db      	lsls	r3, r3, #15
 80068d4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80068d6:	d000      	beq.n	80068da <HAL_ADC_ConfigChannel+0x2ba>
 80068d8:	e06e      	b.n	80069b8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	2280      	movs	r2, #128	@ 0x80
 80068de:	03d2      	lsls	r2, r2, #15
 80068e0:	4313      	orrs	r3, r2
 80068e2:	4a27      	ldr	r2, [pc, #156]	@ (8006980 <HAL_ADC_ConfigChannel+0x360>)
 80068e4:	0019      	movs	r1, r3
 80068e6:	0010      	movs	r0, r2
 80068e8:	f7ff f9ac 	bl	8005c44 <LL_ADC_SetCommonPathInternalCh>
 80068ec:	e064      	b.n	80069b8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	691a      	ldr	r2, [r3, #16]
 80068f2:	2380      	movs	r3, #128	@ 0x80
 80068f4:	061b      	lsls	r3, r3, #24
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d004      	beq.n	8006904 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80068fe:	4a1f      	ldr	r2, [pc, #124]	@ (800697c <HAL_ADC_ConfigChannel+0x35c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d107      	bne.n	8006914 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	0019      	movs	r1, r3
 800690e:	0010      	movs	r0, r2
 8006910:	f7ff fa2f 	bl	8005d72 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	da4d      	bge.n	80069b8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800691c:	4b18      	ldr	r3, [pc, #96]	@ (8006980 <HAL_ADC_ConfigChannel+0x360>)
 800691e:	0018      	movs	r0, r3
 8006920:	f7ff f9a4 	bl	8005c6c <LL_ADC_GetCommonPathInternalCh>
 8006924:	0003      	movs	r3, r0
 8006926:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a15      	ldr	r2, [pc, #84]	@ (8006984 <HAL_ADC_ConfigChannel+0x364>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d108      	bne.n	8006944 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	4a18      	ldr	r2, [pc, #96]	@ (8006998 <HAL_ADC_ConfigChannel+0x378>)
 8006936:	4013      	ands	r3, r2
 8006938:	4a11      	ldr	r2, [pc, #68]	@ (8006980 <HAL_ADC_ConfigChannel+0x360>)
 800693a:	0019      	movs	r1, r3
 800693c:	0010      	movs	r0, r2
 800693e:	f7ff f981 	bl	8005c44 <LL_ADC_SetCommonPathInternalCh>
 8006942:	e039      	b.n	80069b8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a11      	ldr	r2, [pc, #68]	@ (8006990 <HAL_ADC_ConfigChannel+0x370>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d108      	bne.n	8006960 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	4a12      	ldr	r2, [pc, #72]	@ (800699c <HAL_ADC_ConfigChannel+0x37c>)
 8006952:	4013      	ands	r3, r2
 8006954:	4a0a      	ldr	r2, [pc, #40]	@ (8006980 <HAL_ADC_ConfigChannel+0x360>)
 8006956:	0019      	movs	r1, r3
 8006958:	0010      	movs	r0, r2
 800695a:	f7ff f973 	bl	8005c44 <LL_ADC_SetCommonPathInternalCh>
 800695e:	e02b      	b.n	80069b8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a0b      	ldr	r2, [pc, #44]	@ (8006994 <HAL_ADC_ConfigChannel+0x374>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d126      	bne.n	80069b8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	4a0c      	ldr	r2, [pc, #48]	@ (80069a0 <HAL_ADC_ConfigChannel+0x380>)
 800696e:	4013      	ands	r3, r2
 8006970:	4a03      	ldr	r2, [pc, #12]	@ (8006980 <HAL_ADC_ConfigChannel+0x360>)
 8006972:	0019      	movs	r1, r3
 8006974:	0010      	movs	r0, r2
 8006976:	f7ff f965 	bl	8005c44 <LL_ADC_SetCommonPathInternalCh>
 800697a:	e01d      	b.n	80069b8 <HAL_ADC_ConfigChannel+0x398>
 800697c:	80000004 	.word	0x80000004
 8006980:	40012708 	.word	0x40012708
 8006984:	b0001000 	.word	0xb0001000
 8006988:	20000440 	.word	0x20000440
 800698c:	00030d40 	.word	0x00030d40
 8006990:	b8004000 	.word	0xb8004000
 8006994:	b4002000 	.word	0xb4002000
 8006998:	ff7fffff 	.word	0xff7fffff
 800699c:	feffffff 	.word	0xfeffffff
 80069a0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069a8:	2220      	movs	r2, #32
 80069aa:	431a      	orrs	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80069b0:	2317      	movs	r3, #23
 80069b2:	18fb      	adds	r3, r7, r3
 80069b4:	2201      	movs	r2, #1
 80069b6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2254      	movs	r2, #84	@ 0x54
 80069bc:	2100      	movs	r1, #0
 80069be:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80069c0:	2317      	movs	r3, #23
 80069c2:	18fb      	adds	r3, r7, r3
 80069c4:	781b      	ldrb	r3, [r3, #0]
}
 80069c6:	0018      	movs	r0, r3
 80069c8:	46bd      	mov	sp, r7
 80069ca:	b006      	add	sp, #24
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	46c0      	nop			@ (mov r8, r8)

080069d0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	0018      	movs	r0, r3
 80069de:	f7ff fa89 	bl	8005ef4 <LL_ADC_REG_IsConversionOngoing>
 80069e2:	1e03      	subs	r3, r0, #0
 80069e4:	d031      	beq.n	8006a4a <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	0018      	movs	r0, r3
 80069ec:	f7ff fa4d 	bl	8005e8a <LL_ADC_IsDisableOngoing>
 80069f0:	1e03      	subs	r3, r0, #0
 80069f2:	d104      	bne.n	80069fe <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	0018      	movs	r0, r3
 80069fa:	f7ff fa69 	bl	8005ed0 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80069fe:	f7ff f917 	bl	8005c30 <HAL_GetTick>
 8006a02:	0003      	movs	r3, r0
 8006a04:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006a06:	e01a      	b.n	8006a3e <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006a08:	f7ff f912 	bl	8005c30 <HAL_GetTick>
 8006a0c:	0002      	movs	r2, r0
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d913      	bls.n	8006a3e <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	2204      	movs	r2, #4
 8006a1e:	4013      	ands	r3, r2
 8006a20:	d00d      	beq.n	8006a3e <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a26:	2210      	movs	r2, #16
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a32:	2201      	movs	r2, #1
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e006      	b.n	8006a4c <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	2204      	movs	r2, #4
 8006a46:	4013      	ands	r3, r2
 8006a48:	d1de      	bne.n	8006a08 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	b004      	add	sp, #16
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	0018      	movs	r0, r3
 8006a66:	f7ff f9ff 	bl	8005e68 <LL_ADC_IsEnabled>
 8006a6a:	1e03      	subs	r3, r0, #0
 8006a6c:	d000      	beq.n	8006a70 <ADC_Enable+0x1c>
 8006a6e:	e069      	b.n	8006b44 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	4a36      	ldr	r2, [pc, #216]	@ (8006b50 <ADC_Enable+0xfc>)
 8006a78:	4013      	ands	r3, r2
 8006a7a:	d00d      	beq.n	8006a98 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a80:	2210      	movs	r2, #16
 8006a82:	431a      	orrs	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e056      	b.n	8006b46 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	f7ff f9bf 	bl	8005e20 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8006aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8006b54 <ADC_Enable+0x100>)
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	f7ff f8e1 	bl	8005c6c <LL_ADC_GetCommonPathInternalCh>
 8006aaa:	0002      	movs	r2, r0
 8006aac:	2380      	movs	r3, #128	@ 0x80
 8006aae:	041b      	lsls	r3, r3, #16
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	d00f      	beq.n	8006ad4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006ab4:	4b28      	ldr	r3, [pc, #160]	@ (8006b58 <ADC_Enable+0x104>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4928      	ldr	r1, [pc, #160]	@ (8006b5c <ADC_Enable+0x108>)
 8006aba:	0018      	movs	r0, r3
 8006abc:	f7f9 fb22 	bl	8000104 <__udivsi3>
 8006ac0:	0003      	movs	r3, r0
 8006ac2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8006ac4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006ac6:	e002      	b.n	8006ace <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1f9      	bne.n	8006ac8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	7e5b      	ldrb	r3, [r3, #25]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d033      	beq.n	8006b44 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006adc:	f7ff f8a8 	bl	8005c30 <HAL_GetTick>
 8006ae0:	0003      	movs	r3, r0
 8006ae2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006ae4:	e027      	b.n	8006b36 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	0018      	movs	r0, r3
 8006aec:	f7ff f9bc 	bl	8005e68 <LL_ADC_IsEnabled>
 8006af0:	1e03      	subs	r3, r0, #0
 8006af2:	d104      	bne.n	8006afe <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	0018      	movs	r0, r3
 8006afa:	f7ff f991 	bl	8005e20 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006afe:	f7ff f897 	bl	8005c30 <HAL_GetTick>
 8006b02:	0002      	movs	r2, r0
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d914      	bls.n	8006b36 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2201      	movs	r2, #1
 8006b14:	4013      	ands	r3, r2
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d00d      	beq.n	8006b36 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b1e:	2210      	movs	r2, #16
 8006b20:	431a      	orrs	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e007      	b.n	8006b46 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	4013      	ands	r3, r2
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d1d0      	bne.n	8006ae6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	0018      	movs	r0, r3
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	b004      	add	sp, #16
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	46c0      	nop			@ (mov r8, r8)
 8006b50:	80000017 	.word	0x80000017
 8006b54:	40012708 	.word	0x40012708
 8006b58:	20000440 	.word	0x20000440
 8006b5c:	00030d40 	.word	0x00030d40

08006b60 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	f7ff f98c 	bl	8005e8a <LL_ADC_IsDisableOngoing>
 8006b72:	0003      	movs	r3, r0
 8006b74:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f7ff f974 	bl	8005e68 <LL_ADC_IsEnabled>
 8006b80:	1e03      	subs	r3, r0, #0
 8006b82:	d046      	beq.n	8006c12 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d143      	bne.n	8006c12 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	2205      	movs	r2, #5
 8006b92:	4013      	ands	r3, r2
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d10d      	bne.n	8006bb4 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	0018      	movs	r0, r3
 8006b9e:	f7ff f951 	bl	8005e44 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2203      	movs	r2, #3
 8006ba8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006baa:	f7ff f841 	bl	8005c30 <HAL_GetTick>
 8006bae:	0003      	movs	r3, r0
 8006bb0:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006bb2:	e028      	b.n	8006c06 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bb8:	2210      	movs	r2, #16
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e021      	b.n	8006c14 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006bd0:	f7ff f82e 	bl	8005c30 <HAL_GetTick>
 8006bd4:	0002      	movs	r2, r0
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d913      	bls.n	8006c06 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	2201      	movs	r2, #1
 8006be6:	4013      	ands	r3, r2
 8006be8:	d00d      	beq.n	8006c06 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bee:	2210      	movs	r2, #16
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e006      	b.n	8006c14 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	4013      	ands	r3, r2
 8006c10:	d1de      	bne.n	8006bd0 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	0018      	movs	r0, r3
 8006c16:	46bd      	mov	sp, r7
 8006c18:	b004      	add	sp, #16
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c28:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c2e:	2250      	movs	r2, #80	@ 0x50
 8006c30:	4013      	ands	r3, r2
 8006c32:	d142      	bne.n	8006cba <ADC_DMAConvCplt+0x9e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c38:	2280      	movs	r2, #128	@ 0x80
 8006c3a:	0092      	lsls	r2, r2, #2
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	0018      	movs	r0, r3
 8006c48:	f7ff f851 	bl	8005cee <LL_ADC_REG_IsTriggerSourceSWStart>
 8006c4c:	1e03      	subs	r3, r0, #0
 8006c4e:	d02e      	beq.n	8006cae <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	7e9b      	ldrb	r3, [r3, #26]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d12a      	bne.n	8006cae <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2208      	movs	r2, #8
 8006c60:	4013      	ands	r3, r2
 8006c62:	2b08      	cmp	r3, #8
 8006c64:	d123      	bne.n	8006cae <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	f7ff f942 	bl	8005ef4 <LL_ADC_REG_IsConversionOngoing>
 8006c70:	1e03      	subs	r3, r0, #0
 8006c72:	d110      	bne.n	8006c96 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685a      	ldr	r2, [r3, #4]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	210c      	movs	r1, #12
 8006c80:	438a      	bics	r2, r1
 8006c82:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c88:	4a16      	ldr	r2, [pc, #88]	@ (8006ce4 <ADC_DMAConvCplt+0xc8>)
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	431a      	orrs	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	659a      	str	r2, [r3, #88]	@ 0x58
 8006c94:	e00b      	b.n	8006cae <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	0010      	movs	r0, r2
 8006cb6:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006cb8:	e010      	b.n	8006cdc <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cbe:	2210      	movs	r2, #16
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	d005      	beq.n	8006cd0 <ADC_DMAConvCplt+0xb4>
      hadc->ErrorCallback(hadc);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	0010      	movs	r0, r2
 8006ccc:	4798      	blx	r3
}
 8006cce:	e005      	b.n	8006cdc <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	0010      	movs	r0, r2
 8006cda:	4798      	blx	r3
}
 8006cdc:	46c0      	nop			@ (mov r8, r8)
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	b004      	add	sp, #16
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	fffffefe 	.word	0xfffffefe

08006ce8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	0010      	movs	r0, r2
 8006cfe:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d00:	46c0      	nop			@ (mov r8, r8)
 8006d02:	46bd      	mov	sp, r7
 8006d04:	b004      	add	sp, #16
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d14:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d1a:	2240      	movs	r2, #64	@ 0x40
 8006d1c:	431a      	orrs	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d26:	2204      	movs	r2, #4
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	0010      	movs	r0, r2
 8006d36:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d38:	46c0      	nop			@ (mov r8, r8)
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	b004      	add	sp, #16
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <LL_ADC_GetCommonClock>:
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	23f0      	movs	r3, #240	@ 0xf0
 8006d4e:	039b      	lsls	r3, r3, #14
 8006d50:	4013      	ands	r3, r2
}
 8006d52:	0018      	movs	r0, r3
 8006d54:	46bd      	mov	sp, r7
 8006d56:	b002      	add	sp, #8
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <LL_ADC_GetClock>:
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b082      	sub	sp, #8
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	0f9b      	lsrs	r3, r3, #30
 8006d68:	079b      	lsls	r3, r3, #30
}
 8006d6a:	0018      	movs	r0, r3
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	b002      	add	sp, #8
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <LL_ADC_SetCalibrationFactor>:
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	22b4      	movs	r2, #180	@ 0xb4
 8006d80:	589b      	ldr	r3, [r3, r2]
 8006d82:	227f      	movs	r2, #127	@ 0x7f
 8006d84:	4393      	bics	r3, r2
 8006d86:	001a      	movs	r2, r3
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	21b4      	movs	r1, #180	@ 0xb4
 8006d90:	505a      	str	r2, [r3, r1]
}
 8006d92:	46c0      	nop			@ (mov r8, r8)
 8006d94:	46bd      	mov	sp, r7
 8006d96:	b002      	add	sp, #8
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <LL_ADC_GetCalibrationFactor>:
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b082      	sub	sp, #8
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	22b4      	movs	r2, #180	@ 0xb4
 8006da6:	589b      	ldr	r3, [r3, r2]
 8006da8:	227f      	movs	r2, #127	@ 0x7f
 8006daa:	4013      	ands	r3, r2
}
 8006dac:	0018      	movs	r0, r3
 8006dae:	46bd      	mov	sp, r7
 8006db0:	b002      	add	sp, #8
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <LL_ADC_Enable>:
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	4a04      	ldr	r2, [pc, #16]	@ (8006dd4 <LL_ADC_Enable+0x20>)
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	609a      	str	r2, [r3, #8]
}
 8006dcc:	46c0      	nop			@ (mov r8, r8)
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	b002      	add	sp, #8
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	7fffffe8 	.word	0x7fffffe8

08006dd8 <LL_ADC_Disable>:
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	4a04      	ldr	r2, [pc, #16]	@ (8006df8 <LL_ADC_Disable+0x20>)
 8006de6:	4013      	ands	r3, r2
 8006de8:	2202      	movs	r2, #2
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	609a      	str	r2, [r3, #8]
}
 8006df0:	46c0      	nop			@ (mov r8, r8)
 8006df2:	46bd      	mov	sp, r7
 8006df4:	b002      	add	sp, #8
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	7fffffe8 	.word	0x7fffffe8

08006dfc <LL_ADC_IsEnabled>:
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d101      	bne.n	8006e14 <LL_ADC_IsEnabled+0x18>
 8006e10:	2301      	movs	r3, #1
 8006e12:	e000      	b.n	8006e16 <LL_ADC_IsEnabled+0x1a>
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	0018      	movs	r0, r3
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	b002      	add	sp, #8
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <LL_ADC_StartCalibration>:
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	4a05      	ldr	r2, [pc, #20]	@ (8006e44 <LL_ADC_StartCalibration+0x24>)
 8006e2e:	4013      	ands	r3, r2
 8006e30:	2280      	movs	r2, #128	@ 0x80
 8006e32:	0612      	lsls	r2, r2, #24
 8006e34:	431a      	orrs	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	609a      	str	r2, [r3, #8]
}
 8006e3a:	46c0      	nop			@ (mov r8, r8)
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	b002      	add	sp, #8
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	46c0      	nop			@ (mov r8, r8)
 8006e44:	7fffffe8 	.word	0x7fffffe8

08006e48 <LL_ADC_IsCalibrationOnGoing>:
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	0fdb      	lsrs	r3, r3, #31
 8006e56:	07da      	lsls	r2, r3, #31
 8006e58:	2380      	movs	r3, #128	@ 0x80
 8006e5a:	061b      	lsls	r3, r3, #24
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d101      	bne.n	8006e64 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006e60:	2301      	movs	r3, #1
 8006e62:	e000      	b.n	8006e66 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	0018      	movs	r0, r3
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	b002      	add	sp, #8
 8006e6c:	bd80      	pop	{r7, pc}
	...

08006e70 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8006e70:	b590      	push	{r4, r7, lr}
 8006e72:	b08b      	sub	sp, #44	@ 0x2c
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2254      	movs	r2, #84	@ 0x54
 8006e84:	5c9b      	ldrb	r3, [r3, r2]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d101      	bne.n	8006e8e <HAL_ADCEx_Calibration_Start+0x1e>
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	e0dd      	b.n	800704a <HAL_ADCEx_Calibration_Start+0x1da>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2254      	movs	r2, #84	@ 0x54
 8006e92:	2101      	movs	r1, #1
 8006e94:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006e96:	231f      	movs	r3, #31
 8006e98:	18fc      	adds	r4, r7, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	f7ff fe5f 	bl	8006b60 <ADC_Disable>
 8006ea2:	0003      	movs	r3, r0
 8006ea4:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	0018      	movs	r0, r3
 8006eac:	f7ff ffa6 	bl	8006dfc <LL_ADC_IsEnabled>
 8006eb0:	1e03      	subs	r3, r0, #0
 8006eb2:	d000      	beq.n	8006eb6 <HAL_ADCEx_Calibration_Start+0x46>
 8006eb4:	e0bc      	b.n	8007030 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eba:	4a66      	ldr	r2, [pc, #408]	@ (8007054 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	431a      	orrs	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	4a62      	ldr	r2, [pc, #392]	@ (8007058 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8006ece:	4013      	ands	r3, r2
 8006ed0:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68da      	ldr	r2, [r3, #12]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	495f      	ldr	r1, [pc, #380]	@ (800705c <HAL_ADCEx_Calibration_Start+0x1ec>)
 8006ede:	400a      	ands	r2, r1
 8006ee0:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ee6:	e02d      	b.n	8006f44 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	0018      	movs	r0, r3
 8006eee:	f7ff ff97 	bl	8006e20 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006ef2:	e014      	b.n	8006f1e <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4a58      	ldr	r2, [pc, #352]	@ (8007060 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d90d      	bls.n	8006f1e <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f06:	2212      	movs	r2, #18
 8006f08:	4393      	bics	r3, r2
 8006f0a:	2210      	movs	r2, #16
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2254      	movs	r2, #84	@ 0x54
 8006f16:	2100      	movs	r1, #0
 8006f18:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e095      	b.n	800704a <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	0018      	movs	r0, r3
 8006f24:	f7ff ff90 	bl	8006e48 <LL_ADC_IsCalibrationOnGoing>
 8006f28:	1e03      	subs	r3, r0, #0
 8006f2a:	d1e3      	bne.n	8006ef4 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	0018      	movs	r0, r3
 8006f32:	f7ff ff32 	bl	8006d9a <LL_ADC_GetCalibrationFactor>
 8006f36:	0002      	movs	r2, r0
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	189b      	adds	r3, r3, r2
 8006f3c:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f40:	3301      	adds	r3, #1
 8006f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f46:	2b07      	cmp	r3, #7
 8006f48:	d9ce      	bls.n	8006ee8 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8006f4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f4c:	6a38      	ldr	r0, [r7, #32]
 8006f4e:	f7f9 f8d9 	bl	8000104 <__udivsi3>
 8006f52:	0003      	movs	r3, r0
 8006f54:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	0018      	movs	r0, r3
 8006f5c:	f7ff ff2a 	bl	8006db4 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	0018      	movs	r0, r3
 8006f66:	f7ff fef8 	bl	8006d5a <LL_ADC_GetClock>
 8006f6a:	1e03      	subs	r3, r0, #0
 8006f6c:	d11b      	bne.n	8006fa6 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8007064 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8006f70:	0018      	movs	r0, r3
 8006f72:	f7ff fee5 	bl	8006d40 <LL_ADC_GetCommonClock>
 8006f76:	0003      	movs	r3, r0
 8006f78:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	23e0      	movs	r3, #224	@ 0xe0
 8006f7e:	035b      	lsls	r3, r3, #13
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d310      	bcc.n	8006fa6 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	0c9b      	lsrs	r3, r3, #18
 8006f88:	3b03      	subs	r3, #3
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	409a      	lsls	r2, r3
 8006f8e:	0013      	movs	r3, r2
 8006f90:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	085b      	lsrs	r3, r3, #1
 8006f96:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8006f98:	e002      	b.n	8006fa0 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1f9      	bne.n	8006f9a <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	6a3a      	ldr	r2, [r7, #32]
 8006fac:	0011      	movs	r1, r2
 8006fae:	0018      	movs	r0, r3
 8006fb0:	f7ff fedf 	bl	8006d72 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	0018      	movs	r0, r3
 8006fba:	f7ff ff0d 	bl	8006dd8 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006fbe:	f7fe fe37 	bl	8005c30 <HAL_GetTick>
 8006fc2:	0003      	movs	r3, r0
 8006fc4:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006fc6:	e01b      	b.n	8007000 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006fc8:	f7fe fe32 	bl	8005c30 <HAL_GetTick>
 8006fcc:	0002      	movs	r2, r0
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d914      	bls.n	8007000 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	0018      	movs	r0, r3
 8006fdc:	f7ff ff0e 	bl	8006dfc <LL_ADC_IsEnabled>
 8006fe0:	1e03      	subs	r3, r0, #0
 8006fe2:	d00d      	beq.n	8007000 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fe8:	2210      	movs	r2, #16
 8006fea:	431a      	orrs	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	431a      	orrs	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e024      	b.n	800704a <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	0018      	movs	r0, r3
 8007006:	f7ff fef9 	bl	8006dfc <LL_ADC_IsEnabled>
 800700a:	1e03      	subs	r3, r0, #0
 800700c:	d1dc      	bne.n	8006fc8 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68d9      	ldr	r1, [r3, #12]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	430a      	orrs	r2, r1
 800701c:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007022:	2203      	movs	r2, #3
 8007024:	4393      	bics	r3, r2
 8007026:	2201      	movs	r2, #1
 8007028:	431a      	orrs	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	659a      	str	r2, [r3, #88]	@ 0x58
 800702e:	e005      	b.n	800703c <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007034:	2210      	movs	r2, #16
 8007036:	431a      	orrs	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2254      	movs	r2, #84	@ 0x54
 8007040:	2100      	movs	r1, #0
 8007042:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8007044:	231f      	movs	r3, #31
 8007046:	18fb      	adds	r3, r7, r3
 8007048:	781b      	ldrb	r3, [r3, #0]
}
 800704a:	0018      	movs	r0, r3
 800704c:	46bd      	mov	sp, r7
 800704e:	b00b      	add	sp, #44	@ 0x2c
 8007050:	bd90      	pop	{r4, r7, pc}
 8007052:	46c0      	nop			@ (mov r8, r8)
 8007054:	fffffefd 	.word	0xfffffefd
 8007058:	00008003 	.word	0x00008003
 800705c:	ffff7ffc 	.word	0xffff7ffc
 8007060:	0002f1ff 	.word	0x0002f1ff
 8007064:	40012708 	.word	0x40012708

08007068 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007070:	46c0      	nop			@ (mov r8, r8)
 8007072:	46bd      	mov	sp, r7
 8007074:	b002      	add	sp, #8
 8007076:	bd80      	pop	{r7, pc}

08007078 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007080:	46c0      	nop			@ (mov r8, r8)
 8007082:	46bd      	mov	sp, r7
 8007084:	b002      	add	sp, #8
 8007086:	bd80      	pop	{r7, pc}

08007088 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007090:	46c0      	nop			@ (mov r8, r8)
 8007092:	46bd      	mov	sp, r7
 8007094:	b002      	add	sp, #8
 8007096:	bd80      	pop	{r7, pc}

08007098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	0002      	movs	r2, r0
 80070a0:	1dfb      	adds	r3, r7, #7
 80070a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80070a4:	1dfb      	adds	r3, r7, #7
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80070aa:	d809      	bhi.n	80070c0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070ac:	1dfb      	adds	r3, r7, #7
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	001a      	movs	r2, r3
 80070b2:	231f      	movs	r3, #31
 80070b4:	401a      	ands	r2, r3
 80070b6:	4b04      	ldr	r3, [pc, #16]	@ (80070c8 <__NVIC_EnableIRQ+0x30>)
 80070b8:	2101      	movs	r1, #1
 80070ba:	4091      	lsls	r1, r2
 80070bc:	000a      	movs	r2, r1
 80070be:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80070c0:	46c0      	nop			@ (mov r8, r8)
 80070c2:	46bd      	mov	sp, r7
 80070c4:	b002      	add	sp, #8
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	e000e100 	.word	0xe000e100

080070cc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	0002      	movs	r2, r0
 80070d4:	1dfb      	adds	r3, r7, #7
 80070d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80070d8:	1dfb      	adds	r3, r7, #7
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80070de:	d810      	bhi.n	8007102 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070e0:	1dfb      	adds	r3, r7, #7
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	001a      	movs	r2, r3
 80070e6:	231f      	movs	r3, #31
 80070e8:	4013      	ands	r3, r2
 80070ea:	4908      	ldr	r1, [pc, #32]	@ (800710c <__NVIC_DisableIRQ+0x40>)
 80070ec:	2201      	movs	r2, #1
 80070ee:	409a      	lsls	r2, r3
 80070f0:	0013      	movs	r3, r2
 80070f2:	2280      	movs	r2, #128	@ 0x80
 80070f4:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80070f6:	f3bf 8f4f 	dsb	sy
}
 80070fa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80070fc:	f3bf 8f6f 	isb	sy
}
 8007100:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8007102:	46c0      	nop			@ (mov r8, r8)
 8007104:	46bd      	mov	sp, r7
 8007106:	b002      	add	sp, #8
 8007108:	bd80      	pop	{r7, pc}
 800710a:	46c0      	nop			@ (mov r8, r8)
 800710c:	e000e100 	.word	0xe000e100

08007110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007110:	b590      	push	{r4, r7, lr}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	0002      	movs	r2, r0
 8007118:	6039      	str	r1, [r7, #0]
 800711a:	1dfb      	adds	r3, r7, #7
 800711c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800711e:	1dfb      	adds	r3, r7, #7
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	2b7f      	cmp	r3, #127	@ 0x7f
 8007124:	d828      	bhi.n	8007178 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007126:	4a2f      	ldr	r2, [pc, #188]	@ (80071e4 <__NVIC_SetPriority+0xd4>)
 8007128:	1dfb      	adds	r3, r7, #7
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	b25b      	sxtb	r3, r3
 800712e:	089b      	lsrs	r3, r3, #2
 8007130:	33c0      	adds	r3, #192	@ 0xc0
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	589b      	ldr	r3, [r3, r2]
 8007136:	1dfa      	adds	r2, r7, #7
 8007138:	7812      	ldrb	r2, [r2, #0]
 800713a:	0011      	movs	r1, r2
 800713c:	2203      	movs	r2, #3
 800713e:	400a      	ands	r2, r1
 8007140:	00d2      	lsls	r2, r2, #3
 8007142:	21ff      	movs	r1, #255	@ 0xff
 8007144:	4091      	lsls	r1, r2
 8007146:	000a      	movs	r2, r1
 8007148:	43d2      	mvns	r2, r2
 800714a:	401a      	ands	r2, r3
 800714c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	019b      	lsls	r3, r3, #6
 8007152:	22ff      	movs	r2, #255	@ 0xff
 8007154:	401a      	ands	r2, r3
 8007156:	1dfb      	adds	r3, r7, #7
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	0018      	movs	r0, r3
 800715c:	2303      	movs	r3, #3
 800715e:	4003      	ands	r3, r0
 8007160:	00db      	lsls	r3, r3, #3
 8007162:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007164:	481f      	ldr	r0, [pc, #124]	@ (80071e4 <__NVIC_SetPriority+0xd4>)
 8007166:	1dfb      	adds	r3, r7, #7
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	b25b      	sxtb	r3, r3
 800716c:	089b      	lsrs	r3, r3, #2
 800716e:	430a      	orrs	r2, r1
 8007170:	33c0      	adds	r3, #192	@ 0xc0
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8007176:	e031      	b.n	80071dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007178:	4a1b      	ldr	r2, [pc, #108]	@ (80071e8 <__NVIC_SetPriority+0xd8>)
 800717a:	1dfb      	adds	r3, r7, #7
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	0019      	movs	r1, r3
 8007180:	230f      	movs	r3, #15
 8007182:	400b      	ands	r3, r1
 8007184:	3b08      	subs	r3, #8
 8007186:	089b      	lsrs	r3, r3, #2
 8007188:	3306      	adds	r3, #6
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	18d3      	adds	r3, r2, r3
 800718e:	3304      	adds	r3, #4
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	1dfa      	adds	r2, r7, #7
 8007194:	7812      	ldrb	r2, [r2, #0]
 8007196:	0011      	movs	r1, r2
 8007198:	2203      	movs	r2, #3
 800719a:	400a      	ands	r2, r1
 800719c:	00d2      	lsls	r2, r2, #3
 800719e:	21ff      	movs	r1, #255	@ 0xff
 80071a0:	4091      	lsls	r1, r2
 80071a2:	000a      	movs	r2, r1
 80071a4:	43d2      	mvns	r2, r2
 80071a6:	401a      	ands	r2, r3
 80071a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	019b      	lsls	r3, r3, #6
 80071ae:	22ff      	movs	r2, #255	@ 0xff
 80071b0:	401a      	ands	r2, r3
 80071b2:	1dfb      	adds	r3, r7, #7
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	0018      	movs	r0, r3
 80071b8:	2303      	movs	r3, #3
 80071ba:	4003      	ands	r3, r0
 80071bc:	00db      	lsls	r3, r3, #3
 80071be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80071c0:	4809      	ldr	r0, [pc, #36]	@ (80071e8 <__NVIC_SetPriority+0xd8>)
 80071c2:	1dfb      	adds	r3, r7, #7
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	001c      	movs	r4, r3
 80071c8:	230f      	movs	r3, #15
 80071ca:	4023      	ands	r3, r4
 80071cc:	3b08      	subs	r3, #8
 80071ce:	089b      	lsrs	r3, r3, #2
 80071d0:	430a      	orrs	r2, r1
 80071d2:	3306      	adds	r3, #6
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	18c3      	adds	r3, r0, r3
 80071d8:	3304      	adds	r3, #4
 80071da:	601a      	str	r2, [r3, #0]
}
 80071dc:	46c0      	nop			@ (mov r8, r8)
 80071de:	46bd      	mov	sp, r7
 80071e0:	b003      	add	sp, #12
 80071e2:	bd90      	pop	{r4, r7, pc}
 80071e4:	e000e100 	.word	0xe000e100
 80071e8:	e000ed00 	.word	0xe000ed00

080071ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	1e5a      	subs	r2, r3, #1
 80071f8:	2380      	movs	r3, #128	@ 0x80
 80071fa:	045b      	lsls	r3, r3, #17
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d301      	bcc.n	8007204 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007200:	2301      	movs	r3, #1
 8007202:	e010      	b.n	8007226 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007204:	4b0a      	ldr	r3, [pc, #40]	@ (8007230 <SysTick_Config+0x44>)
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	3a01      	subs	r2, #1
 800720a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800720c:	2301      	movs	r3, #1
 800720e:	425b      	negs	r3, r3
 8007210:	2103      	movs	r1, #3
 8007212:	0018      	movs	r0, r3
 8007214:	f7ff ff7c 	bl	8007110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007218:	4b05      	ldr	r3, [pc, #20]	@ (8007230 <SysTick_Config+0x44>)
 800721a:	2200      	movs	r2, #0
 800721c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800721e:	4b04      	ldr	r3, [pc, #16]	@ (8007230 <SysTick_Config+0x44>)
 8007220:	2207      	movs	r2, #7
 8007222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007224:	2300      	movs	r3, #0
}
 8007226:	0018      	movs	r0, r3
 8007228:	46bd      	mov	sp, r7
 800722a:	b002      	add	sp, #8
 800722c:	bd80      	pop	{r7, pc}
 800722e:	46c0      	nop			@ (mov r8, r8)
 8007230:	e000e010 	.word	0xe000e010

08007234 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	607a      	str	r2, [r7, #4]
 800723e:	210f      	movs	r1, #15
 8007240:	187b      	adds	r3, r7, r1
 8007242:	1c02      	adds	r2, r0, #0
 8007244:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	187b      	adds	r3, r7, r1
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	b25b      	sxtb	r3, r3
 800724e:	0011      	movs	r1, r2
 8007250:	0018      	movs	r0, r3
 8007252:	f7ff ff5d 	bl	8007110 <__NVIC_SetPriority>
}
 8007256:	46c0      	nop			@ (mov r8, r8)
 8007258:	46bd      	mov	sp, r7
 800725a:	b004      	add	sp, #16
 800725c:	bd80      	pop	{r7, pc}

0800725e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b082      	sub	sp, #8
 8007262:	af00      	add	r7, sp, #0
 8007264:	0002      	movs	r2, r0
 8007266:	1dfb      	adds	r3, r7, #7
 8007268:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800726a:	1dfb      	adds	r3, r7, #7
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	b25b      	sxtb	r3, r3
 8007270:	0018      	movs	r0, r3
 8007272:	f7ff ff11 	bl	8007098 <__NVIC_EnableIRQ>
}
 8007276:	46c0      	nop			@ (mov r8, r8)
 8007278:	46bd      	mov	sp, r7
 800727a:	b002      	add	sp, #8
 800727c:	bd80      	pop	{r7, pc}

0800727e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b082      	sub	sp, #8
 8007282:	af00      	add	r7, sp, #0
 8007284:	0002      	movs	r2, r0
 8007286:	1dfb      	adds	r3, r7, #7
 8007288:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800728a:	1dfb      	adds	r3, r7, #7
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	b25b      	sxtb	r3, r3
 8007290:	0018      	movs	r0, r3
 8007292:	f7ff ff1b 	bl	80070cc <__NVIC_DisableIRQ>
}
 8007296:	46c0      	nop			@ (mov r8, r8)
 8007298:	46bd      	mov	sp, r7
 800729a:	b002      	add	sp, #8
 800729c:	bd80      	pop	{r7, pc}

0800729e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b082      	sub	sp, #8
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	0018      	movs	r0, r3
 80072aa:	f7ff ff9f 	bl	80071ec <SysTick_Config>
 80072ae:	0003      	movs	r3, r0
}
 80072b0:	0018      	movs	r0, r3
 80072b2:	46bd      	mov	sp, r7
 80072b4:	b002      	add	sp, #8
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e077      	b.n	80073ba <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a3d      	ldr	r2, [pc, #244]	@ (80073c4 <HAL_DMA_Init+0x10c>)
 80072d0:	4694      	mov	ip, r2
 80072d2:	4463      	add	r3, ip
 80072d4:	2114      	movs	r1, #20
 80072d6:	0018      	movs	r0, r3
 80072d8:	f7f8 ff14 	bl	8000104 <__udivsi3>
 80072dc:	0003      	movs	r3, r0
 80072de:	009a      	lsls	r2, r3, #2
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2225      	movs	r2, #37	@ 0x25
 80072e8:	2102      	movs	r1, #2
 80072ea:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4934      	ldr	r1, [pc, #208]	@ (80073c8 <HAL_DMA_Init+0x110>)
 80072f8:	400a      	ands	r2, r1
 80072fa:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6819      	ldr	r1, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	689a      	ldr	r2, [r3, #8]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	431a      	orrs	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	431a      	orrs	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	431a      	orrs	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	431a      	orrs	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	431a      	orrs	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a1b      	ldr	r3, [r3, #32]
 8007328:	431a      	orrs	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	0018      	movs	r0, r3
 8007336:	f000 fa8d 	bl	8007854 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	689a      	ldr	r2, [r3, #8]
 800733e:	2380      	movs	r3, #128	@ 0x80
 8007340:	01db      	lsls	r3, r3, #7
 8007342:	429a      	cmp	r2, r3
 8007344:	d102      	bne.n	800734c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007354:	213f      	movs	r1, #63	@ 0x3f
 8007356:	400a      	ands	r2, r1
 8007358:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007362:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d011      	beq.n	8007390 <HAL_DMA_Init+0xd8>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	2b04      	cmp	r3, #4
 8007372:	d80d      	bhi.n	8007390 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	0018      	movs	r0, r3
 8007378:	f000 fa98 	bl	80078ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007380:	2200      	movs	r2, #0
 8007382:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800738c:	605a      	str	r2, [r3, #4]
 800738e:	e008      	b.n	80073a2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2225      	movs	r2, #37	@ 0x25
 80073ac:	2101      	movs	r1, #1
 80073ae:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2224      	movs	r2, #36	@ 0x24
 80073b4:	2100      	movs	r1, #0
 80073b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	0018      	movs	r0, r3
 80073bc:	46bd      	mov	sp, r7
 80073be:	b002      	add	sp, #8
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	46c0      	nop			@ (mov r8, r8)
 80073c4:	bffdfff8 	.word	0xbffdfff8
 80073c8:	ffff800f 	.word	0xffff800f

080073cc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
 80073d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073da:	2317      	movs	r3, #23
 80073dc:	18fb      	adds	r3, r7, r3
 80073de:	2200      	movs	r2, #0
 80073e0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2224      	movs	r2, #36	@ 0x24
 80073e6:	5c9b      	ldrb	r3, [r3, r2]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d101      	bne.n	80073f0 <HAL_DMA_Start_IT+0x24>
 80073ec:	2302      	movs	r3, #2
 80073ee:	e06f      	b.n	80074d0 <HAL_DMA_Start_IT+0x104>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2224      	movs	r2, #36	@ 0x24
 80073f4:	2101      	movs	r1, #1
 80073f6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2225      	movs	r2, #37	@ 0x25
 80073fc:	5c9b      	ldrb	r3, [r3, r2]
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b01      	cmp	r3, #1
 8007402:	d157      	bne.n	80074b4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2225      	movs	r2, #37	@ 0x25
 8007408:	2102      	movs	r1, #2
 800740a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2101      	movs	r1, #1
 800741e:	438a      	bics	r2, r1
 8007420:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	68b9      	ldr	r1, [r7, #8]
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 f9d3 	bl	80077d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007432:	2b00      	cmp	r3, #0
 8007434:	d008      	beq.n	8007448 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	210e      	movs	r1, #14
 8007442:	430a      	orrs	r2, r1
 8007444:	601a      	str	r2, [r3, #0]
 8007446:	e00f      	b.n	8007468 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2104      	movs	r1, #4
 8007454:	438a      	bics	r2, r1
 8007456:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	210a      	movs	r1, #10
 8007464:	430a      	orrs	r2, r1
 8007466:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	2380      	movs	r3, #128	@ 0x80
 8007470:	025b      	lsls	r3, r3, #9
 8007472:	4013      	ands	r3, r2
 8007474:	d008      	beq.n	8007488 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007480:	2180      	movs	r1, #128	@ 0x80
 8007482:	0049      	lsls	r1, r1, #1
 8007484:	430a      	orrs	r2, r1
 8007486:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800748c:	2b00      	cmp	r3, #0
 800748e:	d008      	beq.n	80074a2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800749a:	2180      	movs	r1, #128	@ 0x80
 800749c:	0049      	lsls	r1, r1, #1
 800749e:	430a      	orrs	r2, r1
 80074a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2101      	movs	r1, #1
 80074ae:	430a      	orrs	r2, r1
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	e00a      	b.n	80074ca <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2280      	movs	r2, #128	@ 0x80
 80074b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2224      	movs	r2, #36	@ 0x24
 80074be:	2100      	movs	r1, #0
 80074c0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80074c2:	2317      	movs	r3, #23
 80074c4:	18fb      	adds	r3, r7, r3
 80074c6:	2201      	movs	r2, #1
 80074c8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80074ca:	2317      	movs	r3, #23
 80074cc:	18fb      	adds	r3, r7, r3
 80074ce:	781b      	ldrb	r3, [r3, #0]
}
 80074d0:	0018      	movs	r0, r3
 80074d2:	46bd      	mov	sp, r7
 80074d4:	b006      	add	sp, #24
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d101      	bne.n	80074ea <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e050      	b.n	800758c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2225      	movs	r2, #37	@ 0x25
 80074ee:	5c9b      	ldrb	r3, [r3, r2]
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d008      	beq.n	8007508 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2204      	movs	r2, #4
 80074fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2224      	movs	r2, #36	@ 0x24
 8007500:	2100      	movs	r1, #0
 8007502:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e041      	b.n	800758c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	210e      	movs	r1, #14
 8007514:	438a      	bics	r2, r1
 8007516:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007522:	491c      	ldr	r1, [pc, #112]	@ (8007594 <HAL_DMA_Abort+0xbc>)
 8007524:	400a      	ands	r2, r1
 8007526:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2101      	movs	r1, #1
 8007534:	438a      	bics	r2, r1
 8007536:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8007538:	4b17      	ldr	r3, [pc, #92]	@ (8007598 <HAL_DMA_Abort+0xc0>)
 800753a:	6859      	ldr	r1, [r3, #4]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007540:	221c      	movs	r2, #28
 8007542:	4013      	ands	r3, r2
 8007544:	2201      	movs	r2, #1
 8007546:	409a      	lsls	r2, r3
 8007548:	4b13      	ldr	r3, [pc, #76]	@ (8007598 <HAL_DMA_Abort+0xc0>)
 800754a:	430a      	orrs	r2, r1
 800754c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007556:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00c      	beq.n	800757a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800756a:	490a      	ldr	r1, [pc, #40]	@ (8007594 <HAL_DMA_Abort+0xbc>)
 800756c:	400a      	ands	r2, r1
 800756e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007578:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2225      	movs	r2, #37	@ 0x25
 800757e:	2101      	movs	r1, #1
 8007580:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2224      	movs	r2, #36	@ 0x24
 8007586:	2100      	movs	r1, #0
 8007588:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	0018      	movs	r0, r3
 800758e:	46bd      	mov	sp, r7
 8007590:	b002      	add	sp, #8
 8007592:	bd80      	pop	{r7, pc}
 8007594:	fffffeff 	.word	0xfffffeff
 8007598:	40020000 	.word	0x40020000

0800759c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075a4:	210f      	movs	r1, #15
 80075a6:	187b      	adds	r3, r7, r1
 80075a8:	2200      	movs	r2, #0
 80075aa:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2225      	movs	r2, #37	@ 0x25
 80075b0:	5c9b      	ldrb	r3, [r3, r2]
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d006      	beq.n	80075c6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2204      	movs	r2, #4
 80075bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80075be:	187b      	adds	r3, r7, r1
 80075c0:	2201      	movs	r2, #1
 80075c2:	701a      	strb	r2, [r3, #0]
 80075c4:	e049      	b.n	800765a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	210e      	movs	r1, #14
 80075d2:	438a      	bics	r2, r1
 80075d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2101      	movs	r1, #1
 80075e2:	438a      	bics	r2, r1
 80075e4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075f0:	491d      	ldr	r1, [pc, #116]	@ (8007668 <HAL_DMA_Abort_IT+0xcc>)
 80075f2:	400a      	ands	r2, r1
 80075f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80075f6:	4b1d      	ldr	r3, [pc, #116]	@ (800766c <HAL_DMA_Abort_IT+0xd0>)
 80075f8:	6859      	ldr	r1, [r3, #4]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075fe:	221c      	movs	r2, #28
 8007600:	4013      	ands	r3, r2
 8007602:	2201      	movs	r2, #1
 8007604:	409a      	lsls	r2, r3
 8007606:	4b19      	ldr	r3, [pc, #100]	@ (800766c <HAL_DMA_Abort_IT+0xd0>)
 8007608:	430a      	orrs	r2, r1
 800760a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007614:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00c      	beq.n	8007638 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007628:	490f      	ldr	r1, [pc, #60]	@ (8007668 <HAL_DMA_Abort_IT+0xcc>)
 800762a:	400a      	ands	r2, r1
 800762c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007636:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2225      	movs	r2, #37	@ 0x25
 800763c:	2101      	movs	r1, #1
 800763e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2224      	movs	r2, #36	@ 0x24
 8007644:	2100      	movs	r1, #0
 8007646:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800764c:	2b00      	cmp	r3, #0
 800764e:	d004      	beq.n	800765a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	0010      	movs	r0, r2
 8007658:	4798      	blx	r3
    }
  }
  return status;
 800765a:	230f      	movs	r3, #15
 800765c:	18fb      	adds	r3, r7, r3
 800765e:	781b      	ldrb	r3, [r3, #0]
}
 8007660:	0018      	movs	r0, r3
 8007662:	46bd      	mov	sp, r7
 8007664:	b004      	add	sp, #16
 8007666:	bd80      	pop	{r7, pc}
 8007668:	fffffeff 	.word	0xfffffeff
 800766c:	40020000 	.word	0x40020000

08007670 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8007678:	4b55      	ldr	r3, [pc, #340]	@ (80077d0 <HAL_DMA_IRQHandler+0x160>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800768a:	221c      	movs	r2, #28
 800768c:	4013      	ands	r3, r2
 800768e:	2204      	movs	r2, #4
 8007690:	409a      	lsls	r2, r3
 8007692:	0013      	movs	r3, r2
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	4013      	ands	r3, r2
 8007698:	d027      	beq.n	80076ea <HAL_DMA_IRQHandler+0x7a>
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	2204      	movs	r2, #4
 800769e:	4013      	ands	r3, r2
 80076a0:	d023      	beq.n	80076ea <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2220      	movs	r2, #32
 80076aa:	4013      	ands	r3, r2
 80076ac:	d107      	bne.n	80076be <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2104      	movs	r1, #4
 80076ba:	438a      	bics	r2, r1
 80076bc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80076be:	4b44      	ldr	r3, [pc, #272]	@ (80077d0 <HAL_DMA_IRQHandler+0x160>)
 80076c0:	6859      	ldr	r1, [r3, #4]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c6:	221c      	movs	r2, #28
 80076c8:	4013      	ands	r3, r2
 80076ca:	2204      	movs	r2, #4
 80076cc:	409a      	lsls	r2, r3
 80076ce:	4b40      	ldr	r3, [pc, #256]	@ (80077d0 <HAL_DMA_IRQHandler+0x160>)
 80076d0:	430a      	orrs	r2, r1
 80076d2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d100      	bne.n	80076de <HAL_DMA_IRQHandler+0x6e>
 80076dc:	e073      	b.n	80077c6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	0010      	movs	r0, r2
 80076e6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80076e8:	e06d      	b.n	80077c6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ee:	221c      	movs	r2, #28
 80076f0:	4013      	ands	r3, r2
 80076f2:	2202      	movs	r2, #2
 80076f4:	409a      	lsls	r2, r3
 80076f6:	0013      	movs	r3, r2
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	4013      	ands	r3, r2
 80076fc:	d02e      	beq.n	800775c <HAL_DMA_IRQHandler+0xec>
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	2202      	movs	r2, #2
 8007702:	4013      	ands	r3, r2
 8007704:	d02a      	beq.n	800775c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2220      	movs	r2, #32
 800770e:	4013      	ands	r3, r2
 8007710:	d10b      	bne.n	800772a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	210a      	movs	r1, #10
 800771e:	438a      	bics	r2, r1
 8007720:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2225      	movs	r2, #37	@ 0x25
 8007726:	2101      	movs	r1, #1
 8007728:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800772a:	4b29      	ldr	r3, [pc, #164]	@ (80077d0 <HAL_DMA_IRQHandler+0x160>)
 800772c:	6859      	ldr	r1, [r3, #4]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007732:	221c      	movs	r2, #28
 8007734:	4013      	ands	r3, r2
 8007736:	2202      	movs	r2, #2
 8007738:	409a      	lsls	r2, r3
 800773a:	4b25      	ldr	r3, [pc, #148]	@ (80077d0 <HAL_DMA_IRQHandler+0x160>)
 800773c:	430a      	orrs	r2, r1
 800773e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2224      	movs	r2, #36	@ 0x24
 8007744:	2100      	movs	r1, #0
 8007746:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774c:	2b00      	cmp	r3, #0
 800774e:	d03a      	beq.n	80077c6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	0010      	movs	r0, r2
 8007758:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800775a:	e034      	b.n	80077c6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007760:	221c      	movs	r2, #28
 8007762:	4013      	ands	r3, r2
 8007764:	2208      	movs	r2, #8
 8007766:	409a      	lsls	r2, r3
 8007768:	0013      	movs	r3, r2
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	4013      	ands	r3, r2
 800776e:	d02b      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x158>
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	2208      	movs	r2, #8
 8007774:	4013      	ands	r3, r2
 8007776:	d027      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	210e      	movs	r1, #14
 8007784:	438a      	bics	r2, r1
 8007786:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007788:	4b11      	ldr	r3, [pc, #68]	@ (80077d0 <HAL_DMA_IRQHandler+0x160>)
 800778a:	6859      	ldr	r1, [r3, #4]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007790:	221c      	movs	r2, #28
 8007792:	4013      	ands	r3, r2
 8007794:	2201      	movs	r2, #1
 8007796:	409a      	lsls	r2, r3
 8007798:	4b0d      	ldr	r3, [pc, #52]	@ (80077d0 <HAL_DMA_IRQHandler+0x160>)
 800779a:	430a      	orrs	r2, r1
 800779c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2225      	movs	r2, #37	@ 0x25
 80077a8:	2101      	movs	r1, #1
 80077aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2224      	movs	r2, #36	@ 0x24
 80077b0:	2100      	movs	r1, #0
 80077b2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d005      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	0010      	movs	r0, r2
 80077c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80077c6:	46c0      	nop			@ (mov r8, r8)
 80077c8:	46c0      	nop			@ (mov r8, r8)
}
 80077ca:	46bd      	mov	sp, r7
 80077cc:	b004      	add	sp, #16
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	40020000 	.word	0x40020000

080077d4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80077ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d004      	beq.n	80077fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80077fc:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80077fe:	4b14      	ldr	r3, [pc, #80]	@ (8007850 <DMA_SetConfig+0x7c>)
 8007800:	6859      	ldr	r1, [r3, #4]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007806:	221c      	movs	r2, #28
 8007808:	4013      	ands	r3, r2
 800780a:	2201      	movs	r2, #1
 800780c:	409a      	lsls	r2, r3
 800780e:	4b10      	ldr	r3, [pc, #64]	@ (8007850 <DMA_SetConfig+0x7c>)
 8007810:	430a      	orrs	r2, r1
 8007812:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	2b10      	cmp	r3, #16
 8007822:	d108      	bne.n	8007836 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007834:	e007      	b.n	8007846 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	60da      	str	r2, [r3, #12]
}
 8007846:	46c0      	nop			@ (mov r8, r8)
 8007848:	46bd      	mov	sp, r7
 800784a:	b004      	add	sp, #16
 800784c:	bd80      	pop	{r7, pc}
 800784e:	46c0      	nop			@ (mov r8, r8)
 8007850:	40020000 	.word	0x40020000

08007854 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007860:	089b      	lsrs	r3, r3, #2
 8007862:	4a10      	ldr	r2, [pc, #64]	@ (80078a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8007864:	4694      	mov	ip, r2
 8007866:	4463      	add	r3, ip
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	001a      	movs	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	001a      	movs	r2, r3
 8007876:	23ff      	movs	r3, #255	@ 0xff
 8007878:	4013      	ands	r3, r2
 800787a:	3b08      	subs	r3, #8
 800787c:	2114      	movs	r1, #20
 800787e:	0018      	movs	r0, r3
 8007880:	f7f8 fc40 	bl	8000104 <__udivsi3>
 8007884:	0003      	movs	r3, r0
 8007886:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a07      	ldr	r2, [pc, #28]	@ (80078a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800788c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	221f      	movs	r2, #31
 8007892:	4013      	ands	r3, r2
 8007894:	2201      	movs	r2, #1
 8007896:	409a      	lsls	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800789c:	46c0      	nop			@ (mov r8, r8)
 800789e:	46bd      	mov	sp, r7
 80078a0:	b004      	add	sp, #16
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	10008200 	.word	0x10008200
 80078a8:	40020880 	.word	0x40020880

080078ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	223f      	movs	r2, #63	@ 0x3f
 80078ba:	4013      	ands	r3, r2
 80078bc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	4a0a      	ldr	r2, [pc, #40]	@ (80078ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80078c2:	4694      	mov	ip, r2
 80078c4:	4463      	add	r3, ip
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	001a      	movs	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a07      	ldr	r2, [pc, #28]	@ (80078f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80078d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	3b01      	subs	r3, #1
 80078d8:	2203      	movs	r2, #3
 80078da:	4013      	ands	r3, r2
 80078dc:	2201      	movs	r2, #1
 80078de:	409a      	lsls	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80078e4:	46c0      	nop			@ (mov r8, r8)
 80078e6:	46bd      	mov	sp, r7
 80078e8:	b004      	add	sp, #16
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	1000823f 	.word	0x1000823f
 80078f0:	40020940 	.word	0x40020940

080078f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80078fe:	2300      	movs	r3, #0
 8007900:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007902:	e147      	b.n	8007b94 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2101      	movs	r1, #1
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	4091      	lsls	r1, r2
 800790e:	000a      	movs	r2, r1
 8007910:	4013      	ands	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d100      	bne.n	800791c <HAL_GPIO_Init+0x28>
 800791a:	e138      	b.n	8007b8e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	2203      	movs	r2, #3
 8007922:	4013      	ands	r3, r2
 8007924:	2b01      	cmp	r3, #1
 8007926:	d005      	beq.n	8007934 <HAL_GPIO_Init+0x40>
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	2203      	movs	r2, #3
 800792e:	4013      	ands	r3, r2
 8007930:	2b02      	cmp	r3, #2
 8007932:	d130      	bne.n	8007996 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	2203      	movs	r2, #3
 8007940:	409a      	lsls	r2, r3
 8007942:	0013      	movs	r3, r2
 8007944:	43da      	mvns	r2, r3
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	4013      	ands	r3, r2
 800794a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	68da      	ldr	r2, [r3, #12]
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	005b      	lsls	r3, r3, #1
 8007954:	409a      	lsls	r2, r3
 8007956:	0013      	movs	r3, r2
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	4313      	orrs	r3, r2
 800795c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800796a:	2201      	movs	r2, #1
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	409a      	lsls	r2, r3
 8007970:	0013      	movs	r3, r2
 8007972:	43da      	mvns	r2, r3
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	4013      	ands	r3, r2
 8007978:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	091b      	lsrs	r3, r3, #4
 8007980:	2201      	movs	r2, #1
 8007982:	401a      	ands	r2, r3
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	409a      	lsls	r2, r3
 8007988:	0013      	movs	r3, r2
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	4313      	orrs	r3, r2
 800798e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	2203      	movs	r2, #3
 800799c:	4013      	ands	r3, r2
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d017      	beq.n	80079d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	2203      	movs	r2, #3
 80079ae:	409a      	lsls	r2, r3
 80079b0:	0013      	movs	r3, r2
 80079b2:	43da      	mvns	r2, r3
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	4013      	ands	r3, r2
 80079b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	689a      	ldr	r2, [r3, #8]
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	005b      	lsls	r3, r3, #1
 80079c2:	409a      	lsls	r2, r3
 80079c4:	0013      	movs	r3, r2
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	2203      	movs	r2, #3
 80079d8:	4013      	ands	r3, r2
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d123      	bne.n	8007a26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	08da      	lsrs	r2, r3, #3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	3208      	adds	r2, #8
 80079e6:	0092      	lsls	r2, r2, #2
 80079e8:	58d3      	ldr	r3, [r2, r3]
 80079ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	2207      	movs	r2, #7
 80079f0:	4013      	ands	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	220f      	movs	r2, #15
 80079f6:	409a      	lsls	r2, r3
 80079f8:	0013      	movs	r3, r2
 80079fa:	43da      	mvns	r2, r3
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	4013      	ands	r3, r2
 8007a00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	691a      	ldr	r2, [r3, #16]
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2107      	movs	r1, #7
 8007a0a:	400b      	ands	r3, r1
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	409a      	lsls	r2, r3
 8007a10:	0013      	movs	r3, r2
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	08da      	lsrs	r2, r3, #3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	3208      	adds	r2, #8
 8007a20:	0092      	lsls	r2, r2, #2
 8007a22:	6939      	ldr	r1, [r7, #16]
 8007a24:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	005b      	lsls	r3, r3, #1
 8007a30:	2203      	movs	r2, #3
 8007a32:	409a      	lsls	r2, r3
 8007a34:	0013      	movs	r3, r2
 8007a36:	43da      	mvns	r2, r3
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	2203      	movs	r2, #3
 8007a44:	401a      	ands	r2, r3
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	409a      	lsls	r2, r3
 8007a4c:	0013      	movs	r3, r2
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	23c0      	movs	r3, #192	@ 0xc0
 8007a60:	029b      	lsls	r3, r3, #10
 8007a62:	4013      	ands	r3, r2
 8007a64:	d100      	bne.n	8007a68 <HAL_GPIO_Init+0x174>
 8007a66:	e092      	b.n	8007b8e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8007a68:	4a50      	ldr	r2, [pc, #320]	@ (8007bac <HAL_GPIO_Init+0x2b8>)
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	089b      	lsrs	r3, r3, #2
 8007a6e:	3318      	adds	r3, #24
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	589b      	ldr	r3, [r3, r2]
 8007a74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2203      	movs	r2, #3
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	00db      	lsls	r3, r3, #3
 8007a7e:	220f      	movs	r2, #15
 8007a80:	409a      	lsls	r2, r3
 8007a82:	0013      	movs	r3, r2
 8007a84:	43da      	mvns	r2, r3
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	4013      	ands	r3, r2
 8007a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	23a0      	movs	r3, #160	@ 0xa0
 8007a90:	05db      	lsls	r3, r3, #23
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d013      	beq.n	8007abe <HAL_GPIO_Init+0x1ca>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a45      	ldr	r2, [pc, #276]	@ (8007bb0 <HAL_GPIO_Init+0x2bc>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d00d      	beq.n	8007aba <HAL_GPIO_Init+0x1c6>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a44      	ldr	r2, [pc, #272]	@ (8007bb4 <HAL_GPIO_Init+0x2c0>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d007      	beq.n	8007ab6 <HAL_GPIO_Init+0x1c2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a43      	ldr	r2, [pc, #268]	@ (8007bb8 <HAL_GPIO_Init+0x2c4>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d101      	bne.n	8007ab2 <HAL_GPIO_Init+0x1be>
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e006      	b.n	8007ac0 <HAL_GPIO_Init+0x1cc>
 8007ab2:	2305      	movs	r3, #5
 8007ab4:	e004      	b.n	8007ac0 <HAL_GPIO_Init+0x1cc>
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	e002      	b.n	8007ac0 <HAL_GPIO_Init+0x1cc>
 8007aba:	2301      	movs	r3, #1
 8007abc:	e000      	b.n	8007ac0 <HAL_GPIO_Init+0x1cc>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	2103      	movs	r1, #3
 8007ac4:	400a      	ands	r2, r1
 8007ac6:	00d2      	lsls	r2, r2, #3
 8007ac8:	4093      	lsls	r3, r2
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8007ad0:	4936      	ldr	r1, [pc, #216]	@ (8007bac <HAL_GPIO_Init+0x2b8>)
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	089b      	lsrs	r3, r3, #2
 8007ad6:	3318      	adds	r3, #24
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ade:	4b33      	ldr	r3, [pc, #204]	@ (8007bac <HAL_GPIO_Init+0x2b8>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	43da      	mvns	r2, r3
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	4013      	ands	r3, r2
 8007aec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	685a      	ldr	r2, [r3, #4]
 8007af2:	2380      	movs	r3, #128	@ 0x80
 8007af4:	035b      	lsls	r3, r3, #13
 8007af6:	4013      	ands	r3, r2
 8007af8:	d003      	beq.n	8007b02 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007b02:	4b2a      	ldr	r3, [pc, #168]	@ (8007bac <HAL_GPIO_Init+0x2b8>)
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8007b08:	4b28      	ldr	r3, [pc, #160]	@ (8007bac <HAL_GPIO_Init+0x2b8>)
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	43da      	mvns	r2, r3
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	4013      	ands	r3, r2
 8007b16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	2380      	movs	r3, #128	@ 0x80
 8007b1e:	039b      	lsls	r3, r3, #14
 8007b20:	4013      	ands	r3, r2
 8007b22:	d003      	beq.n	8007b2c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8007bac <HAL_GPIO_Init+0x2b8>)
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007b32:	4a1e      	ldr	r2, [pc, #120]	@ (8007bac <HAL_GPIO_Init+0x2b8>)
 8007b34:	2384      	movs	r3, #132	@ 0x84
 8007b36:	58d3      	ldr	r3, [r2, r3]
 8007b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	43da      	mvns	r2, r3
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	4013      	ands	r3, r2
 8007b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	2380      	movs	r3, #128	@ 0x80
 8007b4a:	029b      	lsls	r3, r3, #10
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	d003      	beq.n	8007b58 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007b58:	4914      	ldr	r1, [pc, #80]	@ (8007bac <HAL_GPIO_Init+0x2b8>)
 8007b5a:	2284      	movs	r2, #132	@ 0x84
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8007b60:	4a12      	ldr	r2, [pc, #72]	@ (8007bac <HAL_GPIO_Init+0x2b8>)
 8007b62:	2380      	movs	r3, #128	@ 0x80
 8007b64:	58d3      	ldr	r3, [r2, r3]
 8007b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	43da      	mvns	r2, r3
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	4013      	ands	r3, r2
 8007b70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	685a      	ldr	r2, [r3, #4]
 8007b76:	2380      	movs	r3, #128	@ 0x80
 8007b78:	025b      	lsls	r3, r3, #9
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	d003      	beq.n	8007b86 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007b86:	4909      	ldr	r1, [pc, #36]	@ (8007bac <HAL_GPIO_Init+0x2b8>)
 8007b88:	2280      	movs	r2, #128	@ 0x80
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	3301      	adds	r3, #1
 8007b92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	40da      	lsrs	r2, r3
 8007b9c:	1e13      	subs	r3, r2, #0
 8007b9e:	d000      	beq.n	8007ba2 <HAL_GPIO_Init+0x2ae>
 8007ba0:	e6b0      	b.n	8007904 <HAL_GPIO_Init+0x10>
  }
}
 8007ba2:	46c0      	nop			@ (mov r8, r8)
 8007ba4:	46c0      	nop			@ (mov r8, r8)
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	b006      	add	sp, #24
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	40021800 	.word	0x40021800
 8007bb0:	50000400 	.word	0x50000400
 8007bb4:	50000800 	.word	0x50000800
 8007bb8:	50000c00 	.word	0x50000c00

08007bbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	000a      	movs	r2, r1
 8007bc6:	1cbb      	adds	r3, r7, #2
 8007bc8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	1cba      	adds	r2, r7, #2
 8007bd0:	8812      	ldrh	r2, [r2, #0]
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	d004      	beq.n	8007be0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007bd6:	230f      	movs	r3, #15
 8007bd8:	18fb      	adds	r3, r7, r3
 8007bda:	2201      	movs	r2, #1
 8007bdc:	701a      	strb	r2, [r3, #0]
 8007bde:	e003      	b.n	8007be8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007be0:	230f      	movs	r3, #15
 8007be2:	18fb      	adds	r3, r7, r3
 8007be4:	2200      	movs	r2, #0
 8007be6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007be8:	230f      	movs	r3, #15
 8007bea:	18fb      	adds	r3, r7, r3
 8007bec:	781b      	ldrb	r3, [r3, #0]
}
 8007bee:	0018      	movs	r0, r3
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	b004      	add	sp, #16
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b082      	sub	sp, #8
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	0008      	movs	r0, r1
 8007c00:	0011      	movs	r1, r2
 8007c02:	1cbb      	adds	r3, r7, #2
 8007c04:	1c02      	adds	r2, r0, #0
 8007c06:	801a      	strh	r2, [r3, #0]
 8007c08:	1c7b      	adds	r3, r7, #1
 8007c0a:	1c0a      	adds	r2, r1, #0
 8007c0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c0e:	1c7b      	adds	r3, r7, #1
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d004      	beq.n	8007c20 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007c16:	1cbb      	adds	r3, r7, #2
 8007c18:	881a      	ldrh	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007c1e:	e003      	b.n	8007c28 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007c20:	1cbb      	adds	r3, r7, #2
 8007c22:	881a      	ldrh	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007c28:	46c0      	nop			@ (mov r8, r8)
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	b002      	add	sp, #8
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	0002      	movs	r2, r0
 8007c38:	1dbb      	adds	r3, r7, #6
 8007c3a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8007c3c:	4b10      	ldr	r3, [pc, #64]	@ (8007c80 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	1dba      	adds	r2, r7, #6
 8007c42:	8812      	ldrh	r2, [r2, #0]
 8007c44:	4013      	ands	r3, r2
 8007c46:	d008      	beq.n	8007c5a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8007c48:	4b0d      	ldr	r3, [pc, #52]	@ (8007c80 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007c4a:	1dba      	adds	r2, r7, #6
 8007c4c:	8812      	ldrh	r2, [r2, #0]
 8007c4e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8007c50:	1dbb      	adds	r3, r7, #6
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	0018      	movs	r0, r3
 8007c56:	f7fb fe79 	bl	800394c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8007c5a:	4b09      	ldr	r3, [pc, #36]	@ (8007c80 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	1dba      	adds	r2, r7, #6
 8007c60:	8812      	ldrh	r2, [r2, #0]
 8007c62:	4013      	ands	r3, r2
 8007c64:	d008      	beq.n	8007c78 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007c66:	4b06      	ldr	r3, [pc, #24]	@ (8007c80 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007c68:	1dba      	adds	r2, r7, #6
 8007c6a:	8812      	ldrh	r2, [r2, #0]
 8007c6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8007c6e:	1dbb      	adds	r3, r7, #6
 8007c70:	881b      	ldrh	r3, [r3, #0]
 8007c72:	0018      	movs	r0, r3
 8007c74:	f7fb fe40 	bl	80038f8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8007c78:	46c0      	nop			@ (mov r8, r8)
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	b002      	add	sp, #8
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	40021800 	.word	0x40021800

08007c84 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e097      	b.n	8007dc6 <HAL_LPTIM_Init+0x142>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2236      	movs	r2, #54	@ 0x36
 8007c9a:	5c9b      	ldrb	r3, [r3, r2]
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d113      	bne.n	8007cca <HAL_LPTIM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2235      	movs	r2, #53	@ 0x35
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    LPTIM_ResetCallback(hlptim);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	0018      	movs	r0, r3
 8007cae:	f000 fa8f 	bl	80081d0 <LPTIM_ResetCallback>

    if (hlptim->MspInitCallback == NULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d102      	bne.n	8007cc0 <HAL_LPTIM_Init+0x3c>
    {
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a44      	ldr	r2, [pc, #272]	@ (8007dd0 <HAL_LPTIM_Init+0x14c>)
 8007cbe:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	0010      	movs	r0, r2
 8007cc8:	4798      	blx	r3
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2236      	movs	r2, #54	@ 0x36
 8007cce:	2102      	movs	r1, #2
 8007cd0:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d005      	beq.n	8007cee <HAL_LPTIM_Init+0x6a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ce6:	2380      	movs	r3, #128	@ 0x80
 8007ce8:	041b      	lsls	r3, r3, #16
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d103      	bne.n	8007cf6 <HAL_LPTIM_Init+0x72>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	221e      	movs	r2, #30
 8007cf2:	4393      	bics	r3, r2
 8007cf4:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	4a36      	ldr	r2, [pc, #216]	@ (8007dd4 <HAL_LPTIM_Init+0x150>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d003      	beq.n	8007d08 <HAL_LPTIM_Init+0x84>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	4a35      	ldr	r2, [pc, #212]	@ (8007dd8 <HAL_LPTIM_Init+0x154>)
 8007d04:	4013      	ands	r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4a34      	ldr	r2, [pc, #208]	@ (8007ddc <HAL_LPTIM_Init+0x158>)
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007d18:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8007d1e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8007d24:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8007d2a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d107      	bne.n	8007d4a <HAL_LPTIM_Init+0xc6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007d42:	4313      	orrs	r3, r2
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d005      	beq.n	8007d5e <HAL_LPTIM_Init+0xda>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d56:	2380      	movs	r3, #128	@ 0x80
 8007d58:	041b      	lsls	r3, r3, #16
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d107      	bne.n	8007d6e <HAL_LPTIM_Init+0xea>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007d66:	4313      	orrs	r3, r2
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	4a18      	ldr	r2, [pc, #96]	@ (8007dd4 <HAL_LPTIM_Init+0x150>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d00a      	beq.n	8007d8e <HAL_LPTIM_Init+0x10a>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007d80:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8007d86:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a11      	ldr	r2, [pc, #68]	@ (8007de0 <HAL_LPTIM_Init+0x15c>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d108      	bne.n	8007db2 <HAL_LPTIM_Init+0x12e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	430a      	orrs	r2, r1
 8007dae:	625a      	str	r2, [r3, #36]	@ 0x24
 8007db0:	e004      	b.n	8007dbc <HAL_LPTIM_Init+0x138>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007dba:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2236      	movs	r2, #54	@ 0x36
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	0018      	movs	r0, r3
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	b004      	add	sp, #16
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	46c0      	nop			@ (mov r8, r8)
 8007dd0:	08004a89 	.word	0x08004a89
 8007dd4:	0000ffff 	.word	0x0000ffff
 8007dd8:	ffff1f3f 	.word	0xffff1f3f
 8007ddc:	ff19f1fe 	.word	0xff19f1fe
 8007de0:	40007c00 	.word	0x40007c00

08007de4 <HAL_LPTIM_SetOnce_Start_IT>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_SetOnce_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2236      	movs	r2, #54	@ 0x36
 8007df4:	2102      	movs	r1, #2
 8007df6:	5499      	strb	r1, [r3, r2]

  /* Set WAVE bit to enable the set once mode */
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68da      	ldr	r2, [r3, #12]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2180      	movs	r1, #128	@ 0x80
 8007e04:	0349      	lsls	r1, r1, #13
 8007e06:	430a      	orrs	r2, r1
 8007e08:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	691a      	ldr	r2, [r3, #16]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2101      	movs	r1, #1
 8007e16:	430a      	orrs	r2, r1
 8007e18:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2210      	movs	r2, #16
 8007e20:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68ba      	ldr	r2, [r7, #8]
 8007e28:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2110      	movs	r1, #16
 8007e2e:	0018      	movs	r0, r3
 8007e30:	f000 f9fa 	bl	8008228 <LPTIM_WaitForFlag>
 8007e34:	0003      	movs	r3, r0
 8007e36:	2b03      	cmp	r3, #3
 8007e38:	d101      	bne.n	8007e3e <HAL_LPTIM_SetOnce_Start_IT+0x5a>
  {
    return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e060      	b.n	8007f00 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2208      	movs	r2, #8
 8007e44:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2108      	movs	r1, #8
 8007e52:	0018      	movs	r0, r3
 8007e54:	f000 f9e8 	bl	8008228 <LPTIM_WaitForFlag>
 8007e58:	0003      	movs	r3, r0
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d101      	bne.n	8007e62 <HAL_LPTIM_SetOnce_Start_IT+0x7e>
  {
    return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e04e      	b.n	8007f00 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	0018      	movs	r0, r3
 8007e66:	f000 fa17 	bl	8008298 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	0018      	movs	r0, r3
 8007e6e:	f000 f9a3 	bl	80081b8 <HAL_LPTIM_GetState>
 8007e72:	0003      	movs	r3, r0
 8007e74:	2b03      	cmp	r3, #3
 8007e76:	d101      	bne.n	8007e7c <HAL_LPTIM_SetOnce_Start_IT+0x98>
  {
    return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e041      	b.n	8007f00 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	689a      	ldr	r2, [r3, #8]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2110      	movs	r1, #16
 8007e88:	430a      	orrs	r2, r1
 8007e8a:	609a      	str	r2, [r3, #8]

  /* Enable Compare write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689a      	ldr	r2, [r3, #8]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2108      	movs	r1, #8
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689a      	ldr	r2, [r3, #8]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2102      	movs	r1, #2
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	609a      	str	r2, [r3, #8]

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	689a      	ldr	r2, [r3, #8]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	609a      	str	r2, [r3, #8]

  /* If external trigger source is used, then enable external trigger interrupt */
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	4a11      	ldr	r2, [pc, #68]	@ (8007f08 <HAL_LPTIM_SetOnce_Start_IT+0x124>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d007      	beq.n	8007ed6 <HAL_LPTIM_SetOnce_Start_IT+0xf2>
  {
    /* Enable external trigger interrupt */
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689a      	ldr	r2, [r3, #8]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2104      	movs	r1, #4
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	691a      	ldr	r2, [r3, #16]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	611a      	str	r2, [r3, #16]

  /* Start timer in single (one shot) mode */
  __HAL_LPTIM_START_SINGLE(hlptim);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	691a      	ldr	r2, [r3, #16]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2102      	movs	r1, #2
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2236      	movs	r2, #54	@ 0x36
 8007efa:	2101      	movs	r1, #1
 8007efc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	0018      	movs	r0, r3
 8007f02:	46bd      	mov	sp, r7
 8007f04:	b004      	add	sp, #16
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	0000ffff 	.word	0x0000ffff

08007f0c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d10f      	bne.n	8007f42 <HAL_LPTIM_IRQHandler+0x36>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d108      	bne.n	8007f42 <HAL_LPTIM_IRQHandler+0x36>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2201      	movs	r2, #1
 8007f36:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	0010      	movs	r0, r2
 8007f40:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2202      	movs	r2, #2
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d10f      	bne.n	8007f70 <HAL_LPTIM_IRQHandler+0x64>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	2202      	movs	r2, #2
 8007f58:	4013      	ands	r3, r2
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d108      	bne.n	8007f70 <HAL_LPTIM_IRQHandler+0x64>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2202      	movs	r2, #2
 8007f64:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	0010      	movs	r0, r2
 8007f6e:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2204      	movs	r2, #4
 8007f78:	4013      	ands	r3, r2
 8007f7a:	2b04      	cmp	r3, #4
 8007f7c:	d10f      	bne.n	8007f9e <HAL_LPTIM_IRQHandler+0x92>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	2204      	movs	r2, #4
 8007f86:	4013      	ands	r3, r2
 8007f88:	2b04      	cmp	r3, #4
 8007f8a:	d108      	bne.n	8007f9e <HAL_LPTIM_IRQHandler+0x92>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2204      	movs	r2, #4
 8007f92:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	0010      	movs	r0, r2
 8007f9c:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2208      	movs	r2, #8
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	2b08      	cmp	r3, #8
 8007faa:	d10f      	bne.n	8007fcc <HAL_LPTIM_IRQHandler+0xc0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	2208      	movs	r2, #8
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	2b08      	cmp	r3, #8
 8007fb8:	d108      	bne.n	8007fcc <HAL_LPTIM_IRQHandler+0xc0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2208      	movs	r2, #8
 8007fc0:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	0010      	movs	r0, r2
 8007fca:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2210      	movs	r2, #16
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	2b10      	cmp	r3, #16
 8007fd8:	d10f      	bne.n	8007ffa <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	2210      	movs	r2, #16
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	2b10      	cmp	r3, #16
 8007fe6:	d108      	bne.n	8007ffa <HAL_LPTIM_IRQHandler+0xee>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2210      	movs	r2, #16
 8007fee:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	0010      	movs	r0, r2
 8007ff8:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2220      	movs	r2, #32
 8008002:	4013      	ands	r3, r2
 8008004:	2b20      	cmp	r3, #32
 8008006:	d10f      	bne.n	8008028 <HAL_LPTIM_IRQHandler+0x11c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	2220      	movs	r2, #32
 8008010:	4013      	ands	r3, r2
 8008012:	2b20      	cmp	r3, #32
 8008014:	d108      	bne.n	8008028 <HAL_LPTIM_IRQHandler+0x11c>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2220      	movs	r2, #32
 800801c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	0010      	movs	r0, r2
 8008026:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2240      	movs	r2, #64	@ 0x40
 8008030:	4013      	ands	r3, r2
 8008032:	2b40      	cmp	r3, #64	@ 0x40
 8008034:	d10f      	bne.n	8008056 <HAL_LPTIM_IRQHandler+0x14a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	2240      	movs	r2, #64	@ 0x40
 800803e:	4013      	ands	r3, r2
 8008040:	2b40      	cmp	r3, #64	@ 0x40
 8008042:	d108      	bne.n	8008056 <HAL_LPTIM_IRQHandler+0x14a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2240      	movs	r2, #64	@ 0x40
 800804a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	0010      	movs	r0, r2
 8008054:	4798      	blx	r3
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008056:	46c0      	nop			@ (mov r8, r8)
 8008058:	46bd      	mov	sp, r7
 800805a:	b002      	add	sp, #8
 800805c:	bd80      	pop	{r7, pc}

0800805e <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8008066:	46c0      	nop			@ (mov r8, r8)
 8008068:	46bd      	mov	sp, r7
 800806a:	b002      	add	sp, #8
 800806c:	bd80      	pop	{r7, pc}

0800806e <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b082      	sub	sp, #8
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8008076:	46c0      	nop			@ (mov r8, r8)
 8008078:	46bd      	mov	sp, r7
 800807a:	b002      	add	sp, #8
 800807c:	bd80      	pop	{r7, pc}

0800807e <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b082      	sub	sp, #8
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8008086:	46c0      	nop			@ (mov r8, r8)
 8008088:	46bd      	mov	sp, r7
 800808a:	b002      	add	sp, #8
 800808c:	bd80      	pop	{r7, pc}

0800808e <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b082      	sub	sp, #8
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8008096:	46c0      	nop			@ (mov r8, r8)
 8008098:	46bd      	mov	sp, r7
 800809a:	b002      	add	sp, #8
 800809c:	bd80      	pop	{r7, pc}

0800809e <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b082      	sub	sp, #8
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80080a6:	46c0      	nop			@ (mov r8, r8)
 80080a8:	46bd      	mov	sp, r7
 80080aa:	b002      	add	sp, #8
 80080ac:	bd80      	pop	{r7, pc}

080080ae <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b082      	sub	sp, #8
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80080b6:	46c0      	nop			@ (mov r8, r8)
 80080b8:	46bd      	mov	sp, r7
 80080ba:	b002      	add	sp, #8
 80080bc:	bd80      	pop	{r7, pc}

080080be <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b082      	sub	sp, #8
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80080c6:	46c0      	nop			@ (mov r8, r8)
 80080c8:	46bd      	mov	sp, r7
 80080ca:	b002      	add	sp, #8
 80080cc:	bd80      	pop	{r7, pc}
	...

080080d0 <HAL_LPTIM_RegisterCallback>:
  * @retval status
  */
HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef        *hlptim,
                                             HAL_LPTIM_CallbackIDTypeDef CallbackID,
                                             pLPTIM_CallbackTypeDef      pCallback)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	607a      	str	r2, [r7, #4]
 80080da:	230b      	movs	r3, #11
 80080dc:	18fb      	adds	r3, r7, r3
 80080de:	1c0a      	adds	r2, r1, #0
 80080e0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080e2:	2317      	movs	r3, #23
 80080e4:	18fb      	adds	r3, r7, r3
 80080e6:	2200      	movs	r2, #0
 80080e8:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <HAL_LPTIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e05a      	b.n	80081aa <HAL_LPTIM_RegisterCallback+0xda>
  }

  if (hlptim->State == HAL_LPTIM_STATE_READY)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2236      	movs	r2, #54	@ 0x36
 80080f8:	5c9b      	ldrb	r3, [r3, r2]
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d132      	bne.n	8008166 <HAL_LPTIM_RegisterCallback+0x96>
  {
    switch (CallbackID)
 8008100:	230b      	movs	r3, #11
 8008102:	18fb      	adds	r3, r7, r3
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	2b08      	cmp	r3, #8
 8008108:	d828      	bhi.n	800815c <HAL_LPTIM_RegisterCallback+0x8c>
 800810a:	009a      	lsls	r2, r3, #2
 800810c:	4b29      	ldr	r3, [pc, #164]	@ (80081b4 <HAL_LPTIM_RegisterCallback+0xe4>)
 800810e:	18d3      	adds	r3, r2, r3
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	469f      	mov	pc, r3
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 800811a:	e043      	b.n	80081a4 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8008122:	e03f      	b.n	80081a4 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_MATCH_CB_ID :
        hlptim->CompareMatchCallback = pCallback;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 800812a:	e03b      	b.n	80081a4 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_MATCH_CB_ID :
        hlptim->AutoReloadMatchCallback = pCallback;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 8008132:	e037      	b.n	80081a4 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_TRIGGER_CB_ID :
        hlptim->TriggerCallback = pCallback;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 800813a:	e033      	b.n	80081a4 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_WRITE_CB_ID :
        hlptim->CompareWriteCallback = pCallback;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008142:	e02f      	b.n	80081a4 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_WRITE_CB_ID :
        hlptim->AutoReloadWriteCallback = pCallback;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800814a:	e02b      	b.n	80081a4 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_UP_CB_ID :
        hlptim->DirectionUpCallback = pCallback;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008152:	e027      	b.n	80081a4 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
        hlptim->DirectionDownCallback = pCallback;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800815a:	e023      	b.n	80081a4 <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 800815c:	2317      	movs	r3, #23
 800815e:	18fb      	adds	r3, r7, r3
 8008160:	2201      	movs	r2, #1
 8008162:	701a      	strb	r2, [r3, #0]
        break;
 8008164:	e01e      	b.n	80081a4 <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2236      	movs	r2, #54	@ 0x36
 800816a:	5c9b      	ldrb	r3, [r3, r2]
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d114      	bne.n	800819c <HAL_LPTIM_RegisterCallback+0xcc>
  {
    switch (CallbackID)
 8008172:	230b      	movs	r3, #11
 8008174:	18fb      	adds	r3, r7, r3
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d002      	beq.n	8008182 <HAL_LPTIM_RegisterCallback+0xb2>
 800817c:	2b01      	cmp	r3, #1
 800817e:	d004      	beq.n	800818a <HAL_LPTIM_RegisterCallback+0xba>
 8008180:	e007      	b.n	8008192 <HAL_LPTIM_RegisterCallback+0xc2>
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8008188:	e00c      	b.n	80081a4 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8008190:	e008      	b.n	80081a4 <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8008192:	2317      	movs	r3, #23
 8008194:	18fb      	adds	r3, r7, r3
 8008196:	2201      	movs	r2, #1
 8008198:	701a      	strb	r2, [r3, #0]
        break;
 800819a:	e003      	b.n	80081a4 <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800819c:	2317      	movs	r3, #23
 800819e:	18fb      	adds	r3, r7, r3
 80081a0:	2201      	movs	r2, #1
 80081a2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80081a4:	2317      	movs	r3, #23
 80081a6:	18fb      	adds	r3, r7, r3
 80081a8:	781b      	ldrb	r3, [r3, #0]
}
 80081aa:	0018      	movs	r0, r3
 80081ac:	46bd      	mov	sp, r7
 80081ae:	b006      	add	sp, #24
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	46c0      	nop			@ (mov r8, r8)
 80081b4:	0800d814 	.word	0x0800d814

080081b8 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2236      	movs	r2, #54	@ 0x36
 80081c4:	5c9b      	ldrb	r3, [r3, r2]
 80081c6:	b2db      	uxtb	r3, r3
}
 80081c8:	0018      	movs	r0, r3
 80081ca:	46bd      	mov	sp, r7
 80081cc:	b002      	add	sp, #8
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <LPTIM_ResetCallback>:
  * @param  lptim pointer to a LPTIM_HandleTypeDef structure that contains
  *                the configuration information for LPTIM module.
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a0c      	ldr	r2, [pc, #48]	@ (800820c <LPTIM_ResetCallback+0x3c>)
 80081dc:	641a      	str	r2, [r3, #64]	@ 0x40
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a0b      	ldr	r2, [pc, #44]	@ (8008210 <LPTIM_ResetCallback+0x40>)
 80081e2:	645a      	str	r2, [r3, #68]	@ 0x44
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a0b      	ldr	r2, [pc, #44]	@ (8008214 <LPTIM_ResetCallback+0x44>)
 80081e8:	649a      	str	r2, [r3, #72]	@ 0x48
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a0a      	ldr	r2, [pc, #40]	@ (8008218 <LPTIM_ResetCallback+0x48>)
 80081ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a0a      	ldr	r2, [pc, #40]	@ (800821c <LPTIM_ResetCallback+0x4c>)
 80081f4:	651a      	str	r2, [r3, #80]	@ 0x50
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a09      	ldr	r2, [pc, #36]	@ (8008220 <LPTIM_ResetCallback+0x50>)
 80081fa:	655a      	str	r2, [r3, #84]	@ 0x54
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a09      	ldr	r2, [pc, #36]	@ (8008224 <LPTIM_ResetCallback+0x54>)
 8008200:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8008202:	46c0      	nop			@ (mov r8, r8)
 8008204:	46bd      	mov	sp, r7
 8008206:	b002      	add	sp, #8
 8008208:	bd80      	pop	{r7, pc}
 800820a:	46c0      	nop			@ (mov r8, r8)
 800820c:	0800805f 	.word	0x0800805f
 8008210:	0800806f 	.word	0x0800806f
 8008214:	0800807f 	.word	0x0800807f
 8008218:	0800808f 	.word	0x0800808f
 800821c:	0800809f 	.word	0x0800809f
 8008220:	080080af 	.word	0x080080af
 8008224:	080080bf 	.word	0x080080bf

08008228 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8008232:	230f      	movs	r3, #15
 8008234:	18fb      	adds	r3, r7, r3
 8008236:	2200      	movs	r2, #0
 8008238:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800823a:	4b15      	ldr	r3, [pc, #84]	@ (8008290 <LPTIM_WaitForFlag+0x68>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4915      	ldr	r1, [pc, #84]	@ (8008294 <LPTIM_WaitForFlag+0x6c>)
 8008240:	0018      	movs	r0, r3
 8008242:	f7f7 ff5f 	bl	8000104 <__udivsi3>
 8008246:	0003      	movs	r3, r0
 8008248:	001a      	movs	r2, r3
 800824a:	0013      	movs	r3, r2
 800824c:	015b      	lsls	r3, r3, #5
 800824e:	1a9b      	subs	r3, r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	189b      	adds	r3, r3, r2
 8008254:	00db      	lsls	r3, r3, #3
 8008256:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	3b01      	subs	r3, #1
 800825c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d103      	bne.n	800826c <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8008264:	230f      	movs	r3, #15
 8008266:	18fb      	adds	r3, r7, r3
 8008268:	2203      	movs	r2, #3
 800826a:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	4013      	ands	r3, r2
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	429a      	cmp	r2, r3
 800827a:	d002      	beq.n	8008282 <LPTIM_WaitForFlag+0x5a>
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1ea      	bne.n	8008258 <LPTIM_WaitForFlag+0x30>

  return result;
 8008282:	230f      	movs	r3, #15
 8008284:	18fb      	adds	r3, r7, r3
 8008286:	781b      	ldrb	r3, [r3, #0]
}
 8008288:	0018      	movs	r0, r3
 800828a:	46bd      	mov	sp, r7
 800828c:	b004      	add	sp, #16
 800828e:	bd80      	pop	{r7, pc}
 8008290:	20000440 	.word	0x20000440
 8008294:	00004e20 	.word	0x00004e20

08008298 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b08c      	sub	sp, #48	@ 0x30
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80082a0:	2300      	movs	r3, #0
 80082a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082a4:	f3ef 8310 	mrs	r3, PRIMASK
 80082a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80082aa:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80082ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082ae:	2301      	movs	r3, #1
 80082b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	f383 8810 	msr	PRIMASK, r3
}
 80082b8:	46c0      	nop			@ (mov r8, r8)
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a72      	ldr	r2, [pc, #456]	@ (8008488 <LPTIM_Disable+0x1f0>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d003      	beq.n	80082cc <LPTIM_Disable+0x34>
 80082c4:	4a71      	ldr	r2, [pc, #452]	@ (800848c <LPTIM_Disable+0x1f4>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d007      	beq.n	80082da <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 80082ca:	e00d      	b.n	80082e8 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80082cc:	4b70      	ldr	r3, [pc, #448]	@ (8008490 <LPTIM_Disable+0x1f8>)
 80082ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80082d0:	23c0      	movs	r3, #192	@ 0xc0
 80082d2:	031b      	lsls	r3, r3, #12
 80082d4:	4013      	ands	r3, r2
 80082d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80082d8:	e006      	b.n	80082e8 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80082da:	4b6d      	ldr	r3, [pc, #436]	@ (8008490 <LPTIM_Disable+0x1f8>)
 80082dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80082de:	23c0      	movs	r3, #192	@ 0xc0
 80082e0:	039b      	lsls	r3, r3, #14
 80082e2:	4013      	ands	r3, r2
 80082e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80082e6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800830e:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a5c      	ldr	r2, [pc, #368]	@ (8008488 <LPTIM_Disable+0x1f0>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d003      	beq.n	8008322 <LPTIM_Disable+0x8a>
 800831a:	4a5c      	ldr	r2, [pc, #368]	@ (800848c <LPTIM_Disable+0x1f4>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d00e      	beq.n	800833e <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8008320:	e01b      	b.n	800835a <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8008322:	4b5b      	ldr	r3, [pc, #364]	@ (8008490 <LPTIM_Disable+0x1f8>)
 8008324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008326:	4b5a      	ldr	r3, [pc, #360]	@ (8008490 <LPTIM_Disable+0x1f8>)
 8008328:	2180      	movs	r1, #128	@ 0x80
 800832a:	0609      	lsls	r1, r1, #24
 800832c:	430a      	orrs	r2, r1
 800832e:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8008330:	4b57      	ldr	r3, [pc, #348]	@ (8008490 <LPTIM_Disable+0x1f8>)
 8008332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008334:	4b56      	ldr	r3, [pc, #344]	@ (8008490 <LPTIM_Disable+0x1f8>)
 8008336:	0052      	lsls	r2, r2, #1
 8008338:	0852      	lsrs	r2, r2, #1
 800833a:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 800833c:	e00d      	b.n	800835a <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 800833e:	4b54      	ldr	r3, [pc, #336]	@ (8008490 <LPTIM_Disable+0x1f8>)
 8008340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008342:	4b53      	ldr	r3, [pc, #332]	@ (8008490 <LPTIM_Disable+0x1f8>)
 8008344:	2180      	movs	r1, #128	@ 0x80
 8008346:	05c9      	lsls	r1, r1, #23
 8008348:	430a      	orrs	r2, r1
 800834a:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 800834c:	4b50      	ldr	r3, [pc, #320]	@ (8008490 <LPTIM_Disable+0x1f8>)
 800834e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008350:	4b4f      	ldr	r3, [pc, #316]	@ (8008490 <LPTIM_Disable+0x1f8>)
 8008352:	4950      	ldr	r1, [pc, #320]	@ (8008494 <LPTIM_Disable+0x1fc>)
 8008354:	400a      	ands	r2, r1
 8008356:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 8008358:	46c0      	nop			@ (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d103      	bne.n	8008368 <LPTIM_Disable+0xd0>
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d100      	bne.n	8008368 <LPTIM_Disable+0xd0>
 8008366:	e071      	b.n	800844c <LPTIM_Disable+0x1b4>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a46      	ldr	r2, [pc, #280]	@ (8008488 <LPTIM_Disable+0x1f0>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d003      	beq.n	800837a <LPTIM_Disable+0xe2>
 8008372:	4a46      	ldr	r2, [pc, #280]	@ (800848c <LPTIM_Disable+0x1f4>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d007      	beq.n	8008388 <LPTIM_Disable+0xf0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8008378:	e00d      	b.n	8008396 <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 800837a:	4b45      	ldr	r3, [pc, #276]	@ (8008490 <LPTIM_Disable+0x1f8>)
 800837c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800837e:	4b44      	ldr	r3, [pc, #272]	@ (8008490 <LPTIM_Disable+0x1f8>)
 8008380:	4945      	ldr	r1, [pc, #276]	@ (8008498 <LPTIM_Disable+0x200>)
 8008382:	400a      	ands	r2, r1
 8008384:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008386:	e006      	b.n	8008396 <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8008388:	4b41      	ldr	r3, [pc, #260]	@ (8008490 <LPTIM_Disable+0x1f8>)
 800838a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800838c:	4b40      	ldr	r3, [pc, #256]	@ (8008490 <LPTIM_Disable+0x1f8>)
 800838e:	4943      	ldr	r1, [pc, #268]	@ (800849c <LPTIM_Disable+0x204>)
 8008390:	400a      	ands	r2, r1
 8008392:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008394:	46c0      	nop			@ (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d01b      	beq.n	80083d4 <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	691a      	ldr	r2, [r3, #16]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2101      	movs	r1, #1
 80083a8:	430a      	orrs	r2, r1
 80083aa:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	69fa      	ldr	r2, [r7, #28]
 80083b2:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2108      	movs	r1, #8
 80083b8:	0018      	movs	r0, r3
 80083ba:	f7ff ff35 	bl	8008228 <LPTIM_WaitForFlag>
 80083be:	0003      	movs	r3, r0
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	d103      	bne.n	80083cc <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2236      	movs	r2, #54	@ 0x36
 80083c8:	2103      	movs	r1, #3
 80083ca:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2208      	movs	r2, #8
 80083d2:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d01b      	beq.n	8008412 <LPTIM_Disable+0x17a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	691a      	ldr	r2, [r3, #16]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2101      	movs	r1, #1
 80083e6:	430a      	orrs	r2, r1
 80083e8:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	69ba      	ldr	r2, [r7, #24]
 80083f0:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2110      	movs	r1, #16
 80083f6:	0018      	movs	r0, r3
 80083f8:	f7ff ff16 	bl	8008228 <LPTIM_WaitForFlag>
 80083fc:	0003      	movs	r3, r0
 80083fe:	2b03      	cmp	r3, #3
 8008400:	d103      	bne.n	800840a <LPTIM_Disable+0x172>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2236      	movs	r2, #54	@ 0x36
 8008406:	2103      	movs	r1, #3
 8008408:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2210      	movs	r2, #16
 8008410:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a1c      	ldr	r2, [pc, #112]	@ (8008488 <LPTIM_Disable+0x1f0>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d003      	beq.n	8008424 <LPTIM_Disable+0x18c>
 800841c:	4a1b      	ldr	r2, [pc, #108]	@ (800848c <LPTIM_Disable+0x1f4>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d00a      	beq.n	8008438 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8008422:	e013      	b.n	800844c <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8008424:	4b1a      	ldr	r3, [pc, #104]	@ (8008490 <LPTIM_Disable+0x1f8>)
 8008426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008428:	4a1b      	ldr	r2, [pc, #108]	@ (8008498 <LPTIM_Disable+0x200>)
 800842a:	4013      	ands	r3, r2
 800842c:	0019      	movs	r1, r3
 800842e:	4b18      	ldr	r3, [pc, #96]	@ (8008490 <LPTIM_Disable+0x1f8>)
 8008430:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008432:	430a      	orrs	r2, r1
 8008434:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008436:	e009      	b.n	800844c <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8008438:	4b15      	ldr	r3, [pc, #84]	@ (8008490 <LPTIM_Disable+0x1f8>)
 800843a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800843c:	4a17      	ldr	r2, [pc, #92]	@ (800849c <LPTIM_Disable+0x204>)
 800843e:	4013      	ands	r3, r2
 8008440:	0019      	movs	r1, r3
 8008442:	4b13      	ldr	r3, [pc, #76]	@ (8008490 <LPTIM_Disable+0x1f8>)
 8008444:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008446:	430a      	orrs	r2, r1
 8008448:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800844a:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	691a      	ldr	r2, [r3, #16]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2101      	movs	r1, #1
 8008458:	438a      	bics	r2, r1
 800845a:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008462:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6a3a      	ldr	r2, [r7, #32]
 800846a:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	625a      	str	r2, [r3, #36]	@ 0x24
 8008474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008476:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	f383 8810 	msr	PRIMASK, r3
}
 800847e:	46c0      	nop			@ (mov r8, r8)

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8008480:	46c0      	nop			@ (mov r8, r8)
 8008482:	46bd      	mov	sp, r7
 8008484:	b00c      	add	sp, #48	@ 0x30
 8008486:	bd80      	pop	{r7, pc}
 8008488:	40007c00 	.word	0x40007c00
 800848c:	40009400 	.word	0x40009400
 8008490:	40021000 	.word	0x40021000
 8008494:	bfffffff 	.word	0xbfffffff
 8008498:	fff3ffff 	.word	0xfff3ffff
 800849c:	ffcfffff 	.word	0xffcfffff

080084a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80084a8:	4b19      	ldr	r3, [pc, #100]	@ (8008510 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a19      	ldr	r2, [pc, #100]	@ (8008514 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80084ae:	4013      	ands	r3, r2
 80084b0:	0019      	movs	r1, r3
 80084b2:	4b17      	ldr	r3, [pc, #92]	@ (8008510 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	430a      	orrs	r2, r1
 80084b8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	2380      	movs	r3, #128	@ 0x80
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d11f      	bne.n	8008504 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80084c4:	4b14      	ldr	r3, [pc, #80]	@ (8008518 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	0013      	movs	r3, r2
 80084ca:	005b      	lsls	r3, r3, #1
 80084cc:	189b      	adds	r3, r3, r2
 80084ce:	005b      	lsls	r3, r3, #1
 80084d0:	4912      	ldr	r1, [pc, #72]	@ (800851c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80084d2:	0018      	movs	r0, r3
 80084d4:	f7f7 fe16 	bl	8000104 <__udivsi3>
 80084d8:	0003      	movs	r3, r0
 80084da:	3301      	adds	r3, #1
 80084dc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80084de:	e008      	b.n	80084f2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d003      	beq.n	80084ee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	e001      	b.n	80084f2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e009      	b.n	8008506 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80084f2:	4b07      	ldr	r3, [pc, #28]	@ (8008510 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80084f4:	695a      	ldr	r2, [r3, #20]
 80084f6:	2380      	movs	r3, #128	@ 0x80
 80084f8:	00db      	lsls	r3, r3, #3
 80084fa:	401a      	ands	r2, r3
 80084fc:	2380      	movs	r3, #128	@ 0x80
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	429a      	cmp	r2, r3
 8008502:	d0ed      	beq.n	80084e0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	0018      	movs	r0, r3
 8008508:	46bd      	mov	sp, r7
 800850a:	b004      	add	sp, #16
 800850c:	bd80      	pop	{r7, pc}
 800850e:	46c0      	nop			@ (mov r8, r8)
 8008510:	40007000 	.word	0x40007000
 8008514:	fffff9ff 	.word	0xfffff9ff
 8008518:	20000440 	.word	0x20000440
 800851c:	000f4240 	.word	0x000f4240

08008520 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8008524:	4b03      	ldr	r3, [pc, #12]	@ (8008534 <LL_RCC_GetAPB1Prescaler+0x14>)
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	23e0      	movs	r3, #224	@ 0xe0
 800852a:	01db      	lsls	r3, r3, #7
 800852c:	4013      	ands	r3, r2
}
 800852e:	0018      	movs	r0, r3
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	40021000 	.word	0x40021000

08008538 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b088      	sub	sp, #32
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e2fe      	b.n	8008b48 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2201      	movs	r2, #1
 8008550:	4013      	ands	r3, r2
 8008552:	d100      	bne.n	8008556 <HAL_RCC_OscConfig+0x1e>
 8008554:	e07c      	b.n	8008650 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008556:	4bc3      	ldr	r3, [pc, #780]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	2238      	movs	r2, #56	@ 0x38
 800855c:	4013      	ands	r3, r2
 800855e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008560:	4bc0      	ldr	r3, [pc, #768]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	2203      	movs	r2, #3
 8008566:	4013      	ands	r3, r2
 8008568:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	2b10      	cmp	r3, #16
 800856e:	d102      	bne.n	8008576 <HAL_RCC_OscConfig+0x3e>
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	2b03      	cmp	r3, #3
 8008574:	d002      	beq.n	800857c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	2b08      	cmp	r3, #8
 800857a:	d10b      	bne.n	8008594 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800857c:	4bb9      	ldr	r3, [pc, #740]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	2380      	movs	r3, #128	@ 0x80
 8008582:	029b      	lsls	r3, r3, #10
 8008584:	4013      	ands	r3, r2
 8008586:	d062      	beq.n	800864e <HAL_RCC_OscConfig+0x116>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d15e      	bne.n	800864e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e2d9      	b.n	8008b48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	2380      	movs	r3, #128	@ 0x80
 800859a:	025b      	lsls	r3, r3, #9
 800859c:	429a      	cmp	r2, r3
 800859e:	d107      	bne.n	80085b0 <HAL_RCC_OscConfig+0x78>
 80085a0:	4bb0      	ldr	r3, [pc, #704]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	4baf      	ldr	r3, [pc, #700]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 80085a6:	2180      	movs	r1, #128	@ 0x80
 80085a8:	0249      	lsls	r1, r1, #9
 80085aa:	430a      	orrs	r2, r1
 80085ac:	601a      	str	r2, [r3, #0]
 80085ae:	e020      	b.n	80085f2 <HAL_RCC_OscConfig+0xba>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	685a      	ldr	r2, [r3, #4]
 80085b4:	23a0      	movs	r3, #160	@ 0xa0
 80085b6:	02db      	lsls	r3, r3, #11
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d10e      	bne.n	80085da <HAL_RCC_OscConfig+0xa2>
 80085bc:	4ba9      	ldr	r3, [pc, #676]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	4ba8      	ldr	r3, [pc, #672]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 80085c2:	2180      	movs	r1, #128	@ 0x80
 80085c4:	02c9      	lsls	r1, r1, #11
 80085c6:	430a      	orrs	r2, r1
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	4ba6      	ldr	r3, [pc, #664]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	4ba5      	ldr	r3, [pc, #660]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 80085d0:	2180      	movs	r1, #128	@ 0x80
 80085d2:	0249      	lsls	r1, r1, #9
 80085d4:	430a      	orrs	r2, r1
 80085d6:	601a      	str	r2, [r3, #0]
 80085d8:	e00b      	b.n	80085f2 <HAL_RCC_OscConfig+0xba>
 80085da:	4ba2      	ldr	r3, [pc, #648]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	4ba1      	ldr	r3, [pc, #644]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 80085e0:	49a1      	ldr	r1, [pc, #644]	@ (8008868 <HAL_RCC_OscConfig+0x330>)
 80085e2:	400a      	ands	r2, r1
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	4b9f      	ldr	r3, [pc, #636]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	4b9e      	ldr	r3, [pc, #632]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 80085ec:	499f      	ldr	r1, [pc, #636]	@ (800886c <HAL_RCC_OscConfig+0x334>)
 80085ee:	400a      	ands	r2, r1
 80085f0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d014      	beq.n	8008624 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085fa:	f7fd fb19 	bl	8005c30 <HAL_GetTick>
 80085fe:	0003      	movs	r3, r0
 8008600:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008602:	e008      	b.n	8008616 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008604:	f7fd fb14 	bl	8005c30 <HAL_GetTick>
 8008608:	0002      	movs	r2, r0
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	2b64      	cmp	r3, #100	@ 0x64
 8008610:	d901      	bls.n	8008616 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	e298      	b.n	8008b48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008616:	4b93      	ldr	r3, [pc, #588]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	2380      	movs	r3, #128	@ 0x80
 800861c:	029b      	lsls	r3, r3, #10
 800861e:	4013      	ands	r3, r2
 8008620:	d0f0      	beq.n	8008604 <HAL_RCC_OscConfig+0xcc>
 8008622:	e015      	b.n	8008650 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008624:	f7fd fb04 	bl	8005c30 <HAL_GetTick>
 8008628:	0003      	movs	r3, r0
 800862a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800862c:	e008      	b.n	8008640 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800862e:	f7fd faff 	bl	8005c30 <HAL_GetTick>
 8008632:	0002      	movs	r2, r0
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	2b64      	cmp	r3, #100	@ 0x64
 800863a:	d901      	bls.n	8008640 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e283      	b.n	8008b48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008640:	4b88      	ldr	r3, [pc, #544]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	2380      	movs	r3, #128	@ 0x80
 8008646:	029b      	lsls	r3, r3, #10
 8008648:	4013      	ands	r3, r2
 800864a:	d1f0      	bne.n	800862e <HAL_RCC_OscConfig+0xf6>
 800864c:	e000      	b.n	8008650 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800864e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2202      	movs	r2, #2
 8008656:	4013      	ands	r3, r2
 8008658:	d100      	bne.n	800865c <HAL_RCC_OscConfig+0x124>
 800865a:	e099      	b.n	8008790 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800865c:	4b81      	ldr	r3, [pc, #516]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	2238      	movs	r2, #56	@ 0x38
 8008662:	4013      	ands	r3, r2
 8008664:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008666:	4b7f      	ldr	r3, [pc, #508]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	2203      	movs	r2, #3
 800866c:	4013      	ands	r3, r2
 800866e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	2b10      	cmp	r3, #16
 8008674:	d102      	bne.n	800867c <HAL_RCC_OscConfig+0x144>
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	2b02      	cmp	r3, #2
 800867a:	d002      	beq.n	8008682 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d135      	bne.n	80086ee <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008682:	4b78      	ldr	r3, [pc, #480]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	2380      	movs	r3, #128	@ 0x80
 8008688:	00db      	lsls	r3, r3, #3
 800868a:	4013      	ands	r3, r2
 800868c:	d005      	beq.n	800869a <HAL_RCC_OscConfig+0x162>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e256      	b.n	8008b48 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800869a:	4b72      	ldr	r3, [pc, #456]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	4a74      	ldr	r2, [pc, #464]	@ (8008870 <HAL_RCC_OscConfig+0x338>)
 80086a0:	4013      	ands	r3, r2
 80086a2:	0019      	movs	r1, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	695b      	ldr	r3, [r3, #20]
 80086a8:	021a      	lsls	r2, r3, #8
 80086aa:	4b6e      	ldr	r3, [pc, #440]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 80086ac:	430a      	orrs	r2, r1
 80086ae:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d112      	bne.n	80086dc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80086b6:	4b6b      	ldr	r3, [pc, #428]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a6e      	ldr	r2, [pc, #440]	@ (8008874 <HAL_RCC_OscConfig+0x33c>)
 80086bc:	4013      	ands	r3, r2
 80086be:	0019      	movs	r1, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	691a      	ldr	r2, [r3, #16]
 80086c4:	4b67      	ldr	r3, [pc, #412]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 80086c6:	430a      	orrs	r2, r1
 80086c8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80086ca:	4b66      	ldr	r3, [pc, #408]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	0adb      	lsrs	r3, r3, #11
 80086d0:	2207      	movs	r2, #7
 80086d2:	4013      	ands	r3, r2
 80086d4:	4a68      	ldr	r2, [pc, #416]	@ (8008878 <HAL_RCC_OscConfig+0x340>)
 80086d6:	40da      	lsrs	r2, r3
 80086d8:	4b68      	ldr	r3, [pc, #416]	@ (800887c <HAL_RCC_OscConfig+0x344>)
 80086da:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80086dc:	4b68      	ldr	r3, [pc, #416]	@ (8008880 <HAL_RCC_OscConfig+0x348>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	0018      	movs	r0, r3
 80086e2:	f7fd fa49 	bl	8005b78 <HAL_InitTick>
 80086e6:	1e03      	subs	r3, r0, #0
 80086e8:	d051      	beq.n	800878e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e22c      	b.n	8008b48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d030      	beq.n	8008758 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80086f6:	4b5b      	ldr	r3, [pc, #364]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a5e      	ldr	r2, [pc, #376]	@ (8008874 <HAL_RCC_OscConfig+0x33c>)
 80086fc:	4013      	ands	r3, r2
 80086fe:	0019      	movs	r1, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	691a      	ldr	r2, [r3, #16]
 8008704:	4b57      	ldr	r3, [pc, #348]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 8008706:	430a      	orrs	r2, r1
 8008708:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800870a:	4b56      	ldr	r3, [pc, #344]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	4b55      	ldr	r3, [pc, #340]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 8008710:	2180      	movs	r1, #128	@ 0x80
 8008712:	0049      	lsls	r1, r1, #1
 8008714:	430a      	orrs	r2, r1
 8008716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008718:	f7fd fa8a 	bl	8005c30 <HAL_GetTick>
 800871c:	0003      	movs	r3, r0
 800871e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008720:	e008      	b.n	8008734 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008722:	f7fd fa85 	bl	8005c30 <HAL_GetTick>
 8008726:	0002      	movs	r2, r0
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	2b02      	cmp	r3, #2
 800872e:	d901      	bls.n	8008734 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008730:	2303      	movs	r3, #3
 8008732:	e209      	b.n	8008b48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008734:	4b4b      	ldr	r3, [pc, #300]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	2380      	movs	r3, #128	@ 0x80
 800873a:	00db      	lsls	r3, r3, #3
 800873c:	4013      	ands	r3, r2
 800873e:	d0f0      	beq.n	8008722 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008740:	4b48      	ldr	r3, [pc, #288]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	4a4a      	ldr	r2, [pc, #296]	@ (8008870 <HAL_RCC_OscConfig+0x338>)
 8008746:	4013      	ands	r3, r2
 8008748:	0019      	movs	r1, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	021a      	lsls	r2, r3, #8
 8008750:	4b44      	ldr	r3, [pc, #272]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 8008752:	430a      	orrs	r2, r1
 8008754:	605a      	str	r2, [r3, #4]
 8008756:	e01b      	b.n	8008790 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008758:	4b42      	ldr	r3, [pc, #264]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	4b41      	ldr	r3, [pc, #260]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 800875e:	4949      	ldr	r1, [pc, #292]	@ (8008884 <HAL_RCC_OscConfig+0x34c>)
 8008760:	400a      	ands	r2, r1
 8008762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008764:	f7fd fa64 	bl	8005c30 <HAL_GetTick>
 8008768:	0003      	movs	r3, r0
 800876a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800876c:	e008      	b.n	8008780 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800876e:	f7fd fa5f 	bl	8005c30 <HAL_GetTick>
 8008772:	0002      	movs	r2, r0
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	2b02      	cmp	r3, #2
 800877a:	d901      	bls.n	8008780 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	e1e3      	b.n	8008b48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008780:	4b38      	ldr	r3, [pc, #224]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	2380      	movs	r3, #128	@ 0x80
 8008786:	00db      	lsls	r3, r3, #3
 8008788:	4013      	ands	r3, r2
 800878a:	d1f0      	bne.n	800876e <HAL_RCC_OscConfig+0x236>
 800878c:	e000      	b.n	8008790 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800878e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2208      	movs	r2, #8
 8008796:	4013      	ands	r3, r2
 8008798:	d047      	beq.n	800882a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800879a:	4b32      	ldr	r3, [pc, #200]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	2238      	movs	r2, #56	@ 0x38
 80087a0:	4013      	ands	r3, r2
 80087a2:	2b18      	cmp	r3, #24
 80087a4:	d10a      	bne.n	80087bc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80087a6:	4b2f      	ldr	r3, [pc, #188]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 80087a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087aa:	2202      	movs	r2, #2
 80087ac:	4013      	ands	r3, r2
 80087ae:	d03c      	beq.n	800882a <HAL_RCC_OscConfig+0x2f2>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	699b      	ldr	r3, [r3, #24]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d138      	bne.n	800882a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e1c5      	b.n	8008b48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d019      	beq.n	80087f8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80087c4:	4b27      	ldr	r3, [pc, #156]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 80087c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80087c8:	4b26      	ldr	r3, [pc, #152]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 80087ca:	2101      	movs	r1, #1
 80087cc:	430a      	orrs	r2, r1
 80087ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087d0:	f7fd fa2e 	bl	8005c30 <HAL_GetTick>
 80087d4:	0003      	movs	r3, r0
 80087d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80087d8:	e008      	b.n	80087ec <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087da:	f7fd fa29 	bl	8005c30 <HAL_GetTick>
 80087de:	0002      	movs	r2, r0
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d901      	bls.n	80087ec <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e1ad      	b.n	8008b48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80087ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 80087ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087f0:	2202      	movs	r2, #2
 80087f2:	4013      	ands	r3, r2
 80087f4:	d0f1      	beq.n	80087da <HAL_RCC_OscConfig+0x2a2>
 80087f6:	e018      	b.n	800882a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80087f8:	4b1a      	ldr	r3, [pc, #104]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 80087fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80087fc:	4b19      	ldr	r3, [pc, #100]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 80087fe:	2101      	movs	r1, #1
 8008800:	438a      	bics	r2, r1
 8008802:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008804:	f7fd fa14 	bl	8005c30 <HAL_GetTick>
 8008808:	0003      	movs	r3, r0
 800880a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800880c:	e008      	b.n	8008820 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800880e:	f7fd fa0f 	bl	8005c30 <HAL_GetTick>
 8008812:	0002      	movs	r2, r0
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	2b02      	cmp	r3, #2
 800881a:	d901      	bls.n	8008820 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e193      	b.n	8008b48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008820:	4b10      	ldr	r3, [pc, #64]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 8008822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008824:	2202      	movs	r2, #2
 8008826:	4013      	ands	r3, r2
 8008828:	d1f1      	bne.n	800880e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2204      	movs	r2, #4
 8008830:	4013      	ands	r3, r2
 8008832:	d100      	bne.n	8008836 <HAL_RCC_OscConfig+0x2fe>
 8008834:	e0c6      	b.n	80089c4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008836:	231f      	movs	r3, #31
 8008838:	18fb      	adds	r3, r7, r3
 800883a:	2200      	movs	r2, #0
 800883c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800883e:	4b09      	ldr	r3, [pc, #36]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	2238      	movs	r2, #56	@ 0x38
 8008844:	4013      	ands	r3, r2
 8008846:	2b20      	cmp	r3, #32
 8008848:	d11e      	bne.n	8008888 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800884a:	4b06      	ldr	r3, [pc, #24]	@ (8008864 <HAL_RCC_OscConfig+0x32c>)
 800884c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800884e:	2202      	movs	r2, #2
 8008850:	4013      	ands	r3, r2
 8008852:	d100      	bne.n	8008856 <HAL_RCC_OscConfig+0x31e>
 8008854:	e0b6      	b.n	80089c4 <HAL_RCC_OscConfig+0x48c>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d000      	beq.n	8008860 <HAL_RCC_OscConfig+0x328>
 800885e:	e0b1      	b.n	80089c4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	e171      	b.n	8008b48 <HAL_RCC_OscConfig+0x610>
 8008864:	40021000 	.word	0x40021000
 8008868:	fffeffff 	.word	0xfffeffff
 800886c:	fffbffff 	.word	0xfffbffff
 8008870:	ffff80ff 	.word	0xffff80ff
 8008874:	ffffc7ff 	.word	0xffffc7ff
 8008878:	00f42400 	.word	0x00f42400
 800887c:	20000440 	.word	0x20000440
 8008880:	20000444 	.word	0x20000444
 8008884:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008888:	4bb1      	ldr	r3, [pc, #708]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 800888a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800888c:	2380      	movs	r3, #128	@ 0x80
 800888e:	055b      	lsls	r3, r3, #21
 8008890:	4013      	ands	r3, r2
 8008892:	d101      	bne.n	8008898 <HAL_RCC_OscConfig+0x360>
 8008894:	2301      	movs	r3, #1
 8008896:	e000      	b.n	800889a <HAL_RCC_OscConfig+0x362>
 8008898:	2300      	movs	r3, #0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d011      	beq.n	80088c2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800889e:	4bac      	ldr	r3, [pc, #688]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 80088a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088a2:	4bab      	ldr	r3, [pc, #684]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 80088a4:	2180      	movs	r1, #128	@ 0x80
 80088a6:	0549      	lsls	r1, r1, #21
 80088a8:	430a      	orrs	r2, r1
 80088aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80088ac:	4ba8      	ldr	r3, [pc, #672]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 80088ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088b0:	2380      	movs	r3, #128	@ 0x80
 80088b2:	055b      	lsls	r3, r3, #21
 80088b4:	4013      	ands	r3, r2
 80088b6:	60fb      	str	r3, [r7, #12]
 80088b8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80088ba:	231f      	movs	r3, #31
 80088bc:	18fb      	adds	r3, r7, r3
 80088be:	2201      	movs	r2, #1
 80088c0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088c2:	4ba4      	ldr	r3, [pc, #656]	@ (8008b54 <HAL_RCC_OscConfig+0x61c>)
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	2380      	movs	r3, #128	@ 0x80
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	4013      	ands	r3, r2
 80088cc:	d11a      	bne.n	8008904 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80088ce:	4ba1      	ldr	r3, [pc, #644]	@ (8008b54 <HAL_RCC_OscConfig+0x61c>)
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	4ba0      	ldr	r3, [pc, #640]	@ (8008b54 <HAL_RCC_OscConfig+0x61c>)
 80088d4:	2180      	movs	r1, #128	@ 0x80
 80088d6:	0049      	lsls	r1, r1, #1
 80088d8:	430a      	orrs	r2, r1
 80088da:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80088dc:	f7fd f9a8 	bl	8005c30 <HAL_GetTick>
 80088e0:	0003      	movs	r3, r0
 80088e2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088e4:	e008      	b.n	80088f8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088e6:	f7fd f9a3 	bl	8005c30 <HAL_GetTick>
 80088ea:	0002      	movs	r2, r0
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d901      	bls.n	80088f8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e127      	b.n	8008b48 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088f8:	4b96      	ldr	r3, [pc, #600]	@ (8008b54 <HAL_RCC_OscConfig+0x61c>)
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	2380      	movs	r3, #128	@ 0x80
 80088fe:	005b      	lsls	r3, r3, #1
 8008900:	4013      	ands	r3, r2
 8008902:	d0f0      	beq.n	80088e6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d106      	bne.n	800891a <HAL_RCC_OscConfig+0x3e2>
 800890c:	4b90      	ldr	r3, [pc, #576]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 800890e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008910:	4b8f      	ldr	r3, [pc, #572]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 8008912:	2101      	movs	r1, #1
 8008914:	430a      	orrs	r2, r1
 8008916:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008918:	e01c      	b.n	8008954 <HAL_RCC_OscConfig+0x41c>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	2b05      	cmp	r3, #5
 8008920:	d10c      	bne.n	800893c <HAL_RCC_OscConfig+0x404>
 8008922:	4b8b      	ldr	r3, [pc, #556]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 8008924:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008926:	4b8a      	ldr	r3, [pc, #552]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 8008928:	2104      	movs	r1, #4
 800892a:	430a      	orrs	r2, r1
 800892c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800892e:	4b88      	ldr	r3, [pc, #544]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 8008930:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008932:	4b87      	ldr	r3, [pc, #540]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 8008934:	2101      	movs	r1, #1
 8008936:	430a      	orrs	r2, r1
 8008938:	65da      	str	r2, [r3, #92]	@ 0x5c
 800893a:	e00b      	b.n	8008954 <HAL_RCC_OscConfig+0x41c>
 800893c:	4b84      	ldr	r3, [pc, #528]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 800893e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008940:	4b83      	ldr	r3, [pc, #524]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 8008942:	2101      	movs	r1, #1
 8008944:	438a      	bics	r2, r1
 8008946:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008948:	4b81      	ldr	r3, [pc, #516]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 800894a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800894c:	4b80      	ldr	r3, [pc, #512]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 800894e:	2104      	movs	r1, #4
 8008950:	438a      	bics	r2, r1
 8008952:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d014      	beq.n	8008986 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800895c:	f7fd f968 	bl	8005c30 <HAL_GetTick>
 8008960:	0003      	movs	r3, r0
 8008962:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008964:	e009      	b.n	800897a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008966:	f7fd f963 	bl	8005c30 <HAL_GetTick>
 800896a:	0002      	movs	r2, r0
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	4a79      	ldr	r2, [pc, #484]	@ (8008b58 <HAL_RCC_OscConfig+0x620>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d901      	bls.n	800897a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8008976:	2303      	movs	r3, #3
 8008978:	e0e6      	b.n	8008b48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800897a:	4b75      	ldr	r3, [pc, #468]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 800897c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800897e:	2202      	movs	r2, #2
 8008980:	4013      	ands	r3, r2
 8008982:	d0f0      	beq.n	8008966 <HAL_RCC_OscConfig+0x42e>
 8008984:	e013      	b.n	80089ae <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008986:	f7fd f953 	bl	8005c30 <HAL_GetTick>
 800898a:	0003      	movs	r3, r0
 800898c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800898e:	e009      	b.n	80089a4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008990:	f7fd f94e 	bl	8005c30 <HAL_GetTick>
 8008994:	0002      	movs	r2, r0
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	4a6f      	ldr	r2, [pc, #444]	@ (8008b58 <HAL_RCC_OscConfig+0x620>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d901      	bls.n	80089a4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	e0d1      	b.n	8008b48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80089a4:	4b6a      	ldr	r3, [pc, #424]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 80089a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089a8:	2202      	movs	r2, #2
 80089aa:	4013      	ands	r3, r2
 80089ac:	d1f0      	bne.n	8008990 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80089ae:	231f      	movs	r3, #31
 80089b0:	18fb      	adds	r3, r7, r3
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d105      	bne.n	80089c4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80089b8:	4b65      	ldr	r3, [pc, #404]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 80089ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089bc:	4b64      	ldr	r3, [pc, #400]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 80089be:	4967      	ldr	r1, [pc, #412]	@ (8008b5c <HAL_RCC_OscConfig+0x624>)
 80089c0:	400a      	ands	r2, r1
 80089c2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	69db      	ldr	r3, [r3, #28]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d100      	bne.n	80089ce <HAL_RCC_OscConfig+0x496>
 80089cc:	e0bb      	b.n	8008b46 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80089ce:	4b60      	ldr	r3, [pc, #384]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	2238      	movs	r2, #56	@ 0x38
 80089d4:	4013      	ands	r3, r2
 80089d6:	2b10      	cmp	r3, #16
 80089d8:	d100      	bne.n	80089dc <HAL_RCC_OscConfig+0x4a4>
 80089da:	e07b      	b.n	8008ad4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	69db      	ldr	r3, [r3, #28]
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d156      	bne.n	8008a92 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089e4:	4b5a      	ldr	r3, [pc, #360]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	4b59      	ldr	r3, [pc, #356]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 80089ea:	495d      	ldr	r1, [pc, #372]	@ (8008b60 <HAL_RCC_OscConfig+0x628>)
 80089ec:	400a      	ands	r2, r1
 80089ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f0:	f7fd f91e 	bl	8005c30 <HAL_GetTick>
 80089f4:	0003      	movs	r3, r0
 80089f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80089f8:	e008      	b.n	8008a0c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089fa:	f7fd f919 	bl	8005c30 <HAL_GetTick>
 80089fe:	0002      	movs	r2, r0
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d901      	bls.n	8008a0c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e09d      	b.n	8008b48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a0c:	4b50      	ldr	r3, [pc, #320]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	2380      	movs	r3, #128	@ 0x80
 8008a12:	049b      	lsls	r3, r3, #18
 8008a14:	4013      	ands	r3, r2
 8008a16:	d1f0      	bne.n	80089fa <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a18:	4b4d      	ldr	r3, [pc, #308]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	4a51      	ldr	r2, [pc, #324]	@ (8008b64 <HAL_RCC_OscConfig+0x62c>)
 8008a1e:	4013      	ands	r3, r2
 8008a20:	0019      	movs	r1, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a1a      	ldr	r2, [r3, #32]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a30:	021b      	lsls	r3, r3, #8
 8008a32:	431a      	orrs	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a38:	431a      	orrs	r2, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a3e:	431a      	orrs	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a44:	431a      	orrs	r2, r3
 8008a46:	4b42      	ldr	r3, [pc, #264]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 8008a48:	430a      	orrs	r2, r1
 8008a4a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a4c:	4b40      	ldr	r3, [pc, #256]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	4b3f      	ldr	r3, [pc, #252]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 8008a52:	2180      	movs	r1, #128	@ 0x80
 8008a54:	0449      	lsls	r1, r1, #17
 8008a56:	430a      	orrs	r2, r1
 8008a58:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008a5a:	4b3d      	ldr	r3, [pc, #244]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 8008a5c:	68da      	ldr	r2, [r3, #12]
 8008a5e:	4b3c      	ldr	r3, [pc, #240]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 8008a60:	2180      	movs	r1, #128	@ 0x80
 8008a62:	0549      	lsls	r1, r1, #21
 8008a64:	430a      	orrs	r2, r1
 8008a66:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a68:	f7fd f8e2 	bl	8005c30 <HAL_GetTick>
 8008a6c:	0003      	movs	r3, r0
 8008a6e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a70:	e008      	b.n	8008a84 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a72:	f7fd f8dd 	bl	8005c30 <HAL_GetTick>
 8008a76:	0002      	movs	r2, r0
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d901      	bls.n	8008a84 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e061      	b.n	8008b48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a84:	4b32      	ldr	r3, [pc, #200]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	2380      	movs	r3, #128	@ 0x80
 8008a8a:	049b      	lsls	r3, r3, #18
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	d0f0      	beq.n	8008a72 <HAL_RCC_OscConfig+0x53a>
 8008a90:	e059      	b.n	8008b46 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a92:	4b2f      	ldr	r3, [pc, #188]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	4b2e      	ldr	r3, [pc, #184]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 8008a98:	4931      	ldr	r1, [pc, #196]	@ (8008b60 <HAL_RCC_OscConfig+0x628>)
 8008a9a:	400a      	ands	r2, r1
 8008a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a9e:	f7fd f8c7 	bl	8005c30 <HAL_GetTick>
 8008aa2:	0003      	movs	r3, r0
 8008aa4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008aa6:	e008      	b.n	8008aba <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aa8:	f7fd f8c2 	bl	8005c30 <HAL_GetTick>
 8008aac:	0002      	movs	r2, r0
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d901      	bls.n	8008aba <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e046      	b.n	8008b48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008aba:	4b25      	ldr	r3, [pc, #148]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	2380      	movs	r3, #128	@ 0x80
 8008ac0:	049b      	lsls	r3, r3, #18
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	d1f0      	bne.n	8008aa8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8008ac6:	4b22      	ldr	r3, [pc, #136]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 8008ac8:	68da      	ldr	r2, [r3, #12]
 8008aca:	4b21      	ldr	r3, [pc, #132]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 8008acc:	4926      	ldr	r1, [pc, #152]	@ (8008b68 <HAL_RCC_OscConfig+0x630>)
 8008ace:	400a      	ands	r2, r1
 8008ad0:	60da      	str	r2, [r3, #12]
 8008ad2:	e038      	b.n	8008b46 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	69db      	ldr	r3, [r3, #28]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d101      	bne.n	8008ae0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e033      	b.n	8008b48 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8008b50 <HAL_RCC_OscConfig+0x618>)
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	2203      	movs	r2, #3
 8008aea:	401a      	ands	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a1b      	ldr	r3, [r3, #32]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d126      	bne.n	8008b42 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	2270      	movs	r2, #112	@ 0x70
 8008af8:	401a      	ands	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d11f      	bne.n	8008b42 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	23fe      	movs	r3, #254	@ 0xfe
 8008b06:	01db      	lsls	r3, r3, #7
 8008b08:	401a      	ands	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b0e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d116      	bne.n	8008b42 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	23f8      	movs	r3, #248	@ 0xf8
 8008b18:	039b      	lsls	r3, r3, #14
 8008b1a:	401a      	ands	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d10e      	bne.n	8008b42 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	23e0      	movs	r3, #224	@ 0xe0
 8008b28:	051b      	lsls	r3, r3, #20
 8008b2a:	401a      	ands	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d106      	bne.n	8008b42 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	0f5b      	lsrs	r3, r3, #29
 8008b38:	075a      	lsls	r2, r3, #29
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d001      	beq.n	8008b46 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e000      	b.n	8008b48 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	0018      	movs	r0, r3
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	b008      	add	sp, #32
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	40021000 	.word	0x40021000
 8008b54:	40007000 	.word	0x40007000
 8008b58:	00001388 	.word	0x00001388
 8008b5c:	efffffff 	.word	0xefffffff
 8008b60:	feffffff 	.word	0xfeffffff
 8008b64:	11c1808c 	.word	0x11c1808c
 8008b68:	eefefffc 	.word	0xeefefffc

08008b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d101      	bne.n	8008b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e0e9      	b.n	8008d54 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008b80:	4b76      	ldr	r3, [pc, #472]	@ (8008d5c <HAL_RCC_ClockConfig+0x1f0>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2207      	movs	r2, #7
 8008b86:	4013      	ands	r3, r2
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d91e      	bls.n	8008bcc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b8e:	4b73      	ldr	r3, [pc, #460]	@ (8008d5c <HAL_RCC_ClockConfig+0x1f0>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2207      	movs	r2, #7
 8008b94:	4393      	bics	r3, r2
 8008b96:	0019      	movs	r1, r3
 8008b98:	4b70      	ldr	r3, [pc, #448]	@ (8008d5c <HAL_RCC_ClockConfig+0x1f0>)
 8008b9a:	683a      	ldr	r2, [r7, #0]
 8008b9c:	430a      	orrs	r2, r1
 8008b9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008ba0:	f7fd f846 	bl	8005c30 <HAL_GetTick>
 8008ba4:	0003      	movs	r3, r0
 8008ba6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008ba8:	e009      	b.n	8008bbe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008baa:	f7fd f841 	bl	8005c30 <HAL_GetTick>
 8008bae:	0002      	movs	r2, r0
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	4a6a      	ldr	r2, [pc, #424]	@ (8008d60 <HAL_RCC_ClockConfig+0x1f4>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d901      	bls.n	8008bbe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e0ca      	b.n	8008d54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008bbe:	4b67      	ldr	r3, [pc, #412]	@ (8008d5c <HAL_RCC_ClockConfig+0x1f0>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2207      	movs	r2, #7
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d1ee      	bne.n	8008baa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	4013      	ands	r3, r2
 8008bd4:	d015      	beq.n	8008c02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2204      	movs	r2, #4
 8008bdc:	4013      	ands	r3, r2
 8008bde:	d006      	beq.n	8008bee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008be0:	4b60      	ldr	r3, [pc, #384]	@ (8008d64 <HAL_RCC_ClockConfig+0x1f8>)
 8008be2:	689a      	ldr	r2, [r3, #8]
 8008be4:	4b5f      	ldr	r3, [pc, #380]	@ (8008d64 <HAL_RCC_ClockConfig+0x1f8>)
 8008be6:	21e0      	movs	r1, #224	@ 0xe0
 8008be8:	01c9      	lsls	r1, r1, #7
 8008bea:	430a      	orrs	r2, r1
 8008bec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bee:	4b5d      	ldr	r3, [pc, #372]	@ (8008d64 <HAL_RCC_ClockConfig+0x1f8>)
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	4a5d      	ldr	r2, [pc, #372]	@ (8008d68 <HAL_RCC_ClockConfig+0x1fc>)
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	0019      	movs	r1, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	689a      	ldr	r2, [r3, #8]
 8008bfc:	4b59      	ldr	r3, [pc, #356]	@ (8008d64 <HAL_RCC_ClockConfig+0x1f8>)
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2201      	movs	r2, #1
 8008c08:	4013      	ands	r3, r2
 8008c0a:	d057      	beq.n	8008cbc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d107      	bne.n	8008c24 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c14:	4b53      	ldr	r3, [pc, #332]	@ (8008d64 <HAL_RCC_ClockConfig+0x1f8>)
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	2380      	movs	r3, #128	@ 0x80
 8008c1a:	029b      	lsls	r3, r3, #10
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	d12b      	bne.n	8008c78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e097      	b.n	8008d54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d107      	bne.n	8008c3c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c2c:	4b4d      	ldr	r3, [pc, #308]	@ (8008d64 <HAL_RCC_ClockConfig+0x1f8>)
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	2380      	movs	r3, #128	@ 0x80
 8008c32:	049b      	lsls	r3, r3, #18
 8008c34:	4013      	ands	r3, r2
 8008c36:	d11f      	bne.n	8008c78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e08b      	b.n	8008d54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d107      	bne.n	8008c54 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c44:	4b47      	ldr	r3, [pc, #284]	@ (8008d64 <HAL_RCC_ClockConfig+0x1f8>)
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	2380      	movs	r3, #128	@ 0x80
 8008c4a:	00db      	lsls	r3, r3, #3
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	d113      	bne.n	8008c78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e07f      	b.n	8008d54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	2b03      	cmp	r3, #3
 8008c5a:	d106      	bne.n	8008c6a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c5c:	4b41      	ldr	r3, [pc, #260]	@ (8008d64 <HAL_RCC_ClockConfig+0x1f8>)
 8008c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c60:	2202      	movs	r2, #2
 8008c62:	4013      	ands	r3, r2
 8008c64:	d108      	bne.n	8008c78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e074      	b.n	8008d54 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c6a:	4b3e      	ldr	r3, [pc, #248]	@ (8008d64 <HAL_RCC_ClockConfig+0x1f8>)
 8008c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c6e:	2202      	movs	r2, #2
 8008c70:	4013      	ands	r3, r2
 8008c72:	d101      	bne.n	8008c78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e06d      	b.n	8008d54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c78:	4b3a      	ldr	r3, [pc, #232]	@ (8008d64 <HAL_RCC_ClockConfig+0x1f8>)
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	2207      	movs	r2, #7
 8008c7e:	4393      	bics	r3, r2
 8008c80:	0019      	movs	r1, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	685a      	ldr	r2, [r3, #4]
 8008c86:	4b37      	ldr	r3, [pc, #220]	@ (8008d64 <HAL_RCC_ClockConfig+0x1f8>)
 8008c88:	430a      	orrs	r2, r1
 8008c8a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c8c:	f7fc ffd0 	bl	8005c30 <HAL_GetTick>
 8008c90:	0003      	movs	r3, r0
 8008c92:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c94:	e009      	b.n	8008caa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c96:	f7fc ffcb 	bl	8005c30 <HAL_GetTick>
 8008c9a:	0002      	movs	r2, r0
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	4a2f      	ldr	r2, [pc, #188]	@ (8008d60 <HAL_RCC_ClockConfig+0x1f4>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d901      	bls.n	8008caa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e054      	b.n	8008d54 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008caa:	4b2e      	ldr	r3, [pc, #184]	@ (8008d64 <HAL_RCC_ClockConfig+0x1f8>)
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	2238      	movs	r2, #56	@ 0x38
 8008cb0:	401a      	ands	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	00db      	lsls	r3, r3, #3
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d1ec      	bne.n	8008c96 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008cbc:	4b27      	ldr	r3, [pc, #156]	@ (8008d5c <HAL_RCC_ClockConfig+0x1f0>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2207      	movs	r2, #7
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	683a      	ldr	r2, [r7, #0]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d21e      	bcs.n	8008d08 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cca:	4b24      	ldr	r3, [pc, #144]	@ (8008d5c <HAL_RCC_ClockConfig+0x1f0>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2207      	movs	r2, #7
 8008cd0:	4393      	bics	r3, r2
 8008cd2:	0019      	movs	r1, r3
 8008cd4:	4b21      	ldr	r3, [pc, #132]	@ (8008d5c <HAL_RCC_ClockConfig+0x1f0>)
 8008cd6:	683a      	ldr	r2, [r7, #0]
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008cdc:	f7fc ffa8 	bl	8005c30 <HAL_GetTick>
 8008ce0:	0003      	movs	r3, r0
 8008ce2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008ce4:	e009      	b.n	8008cfa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ce6:	f7fc ffa3 	bl	8005c30 <HAL_GetTick>
 8008cea:	0002      	movs	r2, r0
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	1ad3      	subs	r3, r2, r3
 8008cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8008d60 <HAL_RCC_ClockConfig+0x1f4>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d901      	bls.n	8008cfa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e02c      	b.n	8008d54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008cfa:	4b18      	ldr	r3, [pc, #96]	@ (8008d5c <HAL_RCC_ClockConfig+0x1f0>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2207      	movs	r2, #7
 8008d00:	4013      	ands	r3, r2
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d1ee      	bne.n	8008ce6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2204      	movs	r2, #4
 8008d0e:	4013      	ands	r3, r2
 8008d10:	d009      	beq.n	8008d26 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008d12:	4b14      	ldr	r3, [pc, #80]	@ (8008d64 <HAL_RCC_ClockConfig+0x1f8>)
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	4a15      	ldr	r2, [pc, #84]	@ (8008d6c <HAL_RCC_ClockConfig+0x200>)
 8008d18:	4013      	ands	r3, r2
 8008d1a:	0019      	movs	r1, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	68da      	ldr	r2, [r3, #12]
 8008d20:	4b10      	ldr	r3, [pc, #64]	@ (8008d64 <HAL_RCC_ClockConfig+0x1f8>)
 8008d22:	430a      	orrs	r2, r1
 8008d24:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008d26:	f000 f829 	bl	8008d7c <HAL_RCC_GetSysClockFreq>
 8008d2a:	0001      	movs	r1, r0
 8008d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8008d64 <HAL_RCC_ClockConfig+0x1f8>)
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	0a1b      	lsrs	r3, r3, #8
 8008d32:	220f      	movs	r2, #15
 8008d34:	401a      	ands	r2, r3
 8008d36:	4b0e      	ldr	r3, [pc, #56]	@ (8008d70 <HAL_RCC_ClockConfig+0x204>)
 8008d38:	0092      	lsls	r2, r2, #2
 8008d3a:	58d3      	ldr	r3, [r2, r3]
 8008d3c:	221f      	movs	r2, #31
 8008d3e:	4013      	ands	r3, r2
 8008d40:	000a      	movs	r2, r1
 8008d42:	40da      	lsrs	r2, r3
 8008d44:	4b0b      	ldr	r3, [pc, #44]	@ (8008d74 <HAL_RCC_ClockConfig+0x208>)
 8008d46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008d48:	4b0b      	ldr	r3, [pc, #44]	@ (8008d78 <HAL_RCC_ClockConfig+0x20c>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	f7fc ff13 	bl	8005b78 <HAL_InitTick>
 8008d52:	0003      	movs	r3, r0
}
 8008d54:	0018      	movs	r0, r3
 8008d56:	46bd      	mov	sp, r7
 8008d58:	b004      	add	sp, #16
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	40022000 	.word	0x40022000
 8008d60:	00001388 	.word	0x00001388
 8008d64:	40021000 	.word	0x40021000
 8008d68:	fffff0ff 	.word	0xfffff0ff
 8008d6c:	ffff8fff 	.word	0xffff8fff
 8008d70:	0800d788 	.word	0x0800d788
 8008d74:	20000440 	.word	0x20000440
 8008d78:	20000444 	.word	0x20000444

08008d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d82:	4b3c      	ldr	r3, [pc, #240]	@ (8008e74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	2238      	movs	r2, #56	@ 0x38
 8008d88:	4013      	ands	r3, r2
 8008d8a:	d10f      	bne.n	8008dac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008d8c:	4b39      	ldr	r3, [pc, #228]	@ (8008e74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	0adb      	lsrs	r3, r3, #11
 8008d92:	2207      	movs	r2, #7
 8008d94:	4013      	ands	r3, r2
 8008d96:	2201      	movs	r2, #1
 8008d98:	409a      	lsls	r2, r3
 8008d9a:	0013      	movs	r3, r2
 8008d9c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	4835      	ldr	r0, [pc, #212]	@ (8008e78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008da2:	f7f7 f9af 	bl	8000104 <__udivsi3>
 8008da6:	0003      	movs	r3, r0
 8008da8:	613b      	str	r3, [r7, #16]
 8008daa:	e05d      	b.n	8008e68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008dac:	4b31      	ldr	r3, [pc, #196]	@ (8008e74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	2238      	movs	r2, #56	@ 0x38
 8008db2:	4013      	ands	r3, r2
 8008db4:	2b08      	cmp	r3, #8
 8008db6:	d102      	bne.n	8008dbe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008db8:	4b30      	ldr	r3, [pc, #192]	@ (8008e7c <HAL_RCC_GetSysClockFreq+0x100>)
 8008dba:	613b      	str	r3, [r7, #16]
 8008dbc:	e054      	b.n	8008e68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008dbe:	4b2d      	ldr	r3, [pc, #180]	@ (8008e74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	2238      	movs	r2, #56	@ 0x38
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	2b10      	cmp	r3, #16
 8008dc8:	d138      	bne.n	8008e3c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008dca:	4b2a      	ldr	r3, [pc, #168]	@ (8008e74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	2203      	movs	r2, #3
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008dd4:	4b27      	ldr	r3, [pc, #156]	@ (8008e74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	091b      	lsrs	r3, r3, #4
 8008dda:	2207      	movs	r2, #7
 8008ddc:	4013      	ands	r3, r2
 8008dde:	3301      	adds	r3, #1
 8008de0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2b03      	cmp	r3, #3
 8008de6:	d10d      	bne.n	8008e04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008de8:	68b9      	ldr	r1, [r7, #8]
 8008dea:	4824      	ldr	r0, [pc, #144]	@ (8008e7c <HAL_RCC_GetSysClockFreq+0x100>)
 8008dec:	f7f7 f98a 	bl	8000104 <__udivsi3>
 8008df0:	0003      	movs	r3, r0
 8008df2:	0019      	movs	r1, r3
 8008df4:	4b1f      	ldr	r3, [pc, #124]	@ (8008e74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	0a1b      	lsrs	r3, r3, #8
 8008dfa:	227f      	movs	r2, #127	@ 0x7f
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	434b      	muls	r3, r1
 8008e00:	617b      	str	r3, [r7, #20]
        break;
 8008e02:	e00d      	b.n	8008e20 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008e04:	68b9      	ldr	r1, [r7, #8]
 8008e06:	481c      	ldr	r0, [pc, #112]	@ (8008e78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008e08:	f7f7 f97c 	bl	8000104 <__udivsi3>
 8008e0c:	0003      	movs	r3, r0
 8008e0e:	0019      	movs	r1, r3
 8008e10:	4b18      	ldr	r3, [pc, #96]	@ (8008e74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	0a1b      	lsrs	r3, r3, #8
 8008e16:	227f      	movs	r2, #127	@ 0x7f
 8008e18:	4013      	ands	r3, r2
 8008e1a:	434b      	muls	r3, r1
 8008e1c:	617b      	str	r3, [r7, #20]
        break;
 8008e1e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008e20:	4b14      	ldr	r3, [pc, #80]	@ (8008e74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	0f5b      	lsrs	r3, r3, #29
 8008e26:	2207      	movs	r2, #7
 8008e28:	4013      	ands	r3, r2
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8008e2e:	6879      	ldr	r1, [r7, #4]
 8008e30:	6978      	ldr	r0, [r7, #20]
 8008e32:	f7f7 f967 	bl	8000104 <__udivsi3>
 8008e36:	0003      	movs	r3, r0
 8008e38:	613b      	str	r3, [r7, #16]
 8008e3a:	e015      	b.n	8008e68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8008e74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	2238      	movs	r2, #56	@ 0x38
 8008e42:	4013      	ands	r3, r2
 8008e44:	2b20      	cmp	r3, #32
 8008e46:	d103      	bne.n	8008e50 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008e48:	2380      	movs	r3, #128	@ 0x80
 8008e4a:	021b      	lsls	r3, r3, #8
 8008e4c:	613b      	str	r3, [r7, #16]
 8008e4e:	e00b      	b.n	8008e68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008e50:	4b08      	ldr	r3, [pc, #32]	@ (8008e74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	2238      	movs	r2, #56	@ 0x38
 8008e56:	4013      	ands	r3, r2
 8008e58:	2b18      	cmp	r3, #24
 8008e5a:	d103      	bne.n	8008e64 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008e5c:	23fa      	movs	r3, #250	@ 0xfa
 8008e5e:	01db      	lsls	r3, r3, #7
 8008e60:	613b      	str	r3, [r7, #16]
 8008e62:	e001      	b.n	8008e68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008e64:	2300      	movs	r3, #0
 8008e66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008e68:	693b      	ldr	r3, [r7, #16]
}
 8008e6a:	0018      	movs	r0, r3
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	b006      	add	sp, #24
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	46c0      	nop			@ (mov r8, r8)
 8008e74:	40021000 	.word	0x40021000
 8008e78:	00f42400 	.word	0x00f42400
 8008e7c:	007a1200 	.word	0x007a1200

08008e80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e84:	4b02      	ldr	r3, [pc, #8]	@ (8008e90 <HAL_RCC_GetHCLKFreq+0x10>)
 8008e86:	681b      	ldr	r3, [r3, #0]
}
 8008e88:	0018      	movs	r0, r3
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	46c0      	nop			@ (mov r8, r8)
 8008e90:	20000440 	.word	0x20000440

08008e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e94:	b5b0      	push	{r4, r5, r7, lr}
 8008e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008e98:	f7ff fff2 	bl	8008e80 <HAL_RCC_GetHCLKFreq>
 8008e9c:	0004      	movs	r4, r0
 8008e9e:	f7ff fb3f 	bl	8008520 <LL_RCC_GetAPB1Prescaler>
 8008ea2:	0003      	movs	r3, r0
 8008ea4:	0b1a      	lsrs	r2, r3, #12
 8008ea6:	4b05      	ldr	r3, [pc, #20]	@ (8008ebc <HAL_RCC_GetPCLK1Freq+0x28>)
 8008ea8:	0092      	lsls	r2, r2, #2
 8008eaa:	58d3      	ldr	r3, [r2, r3]
 8008eac:	221f      	movs	r2, #31
 8008eae:	4013      	ands	r3, r2
 8008eb0:	40dc      	lsrs	r4, r3
 8008eb2:	0023      	movs	r3, r4
}
 8008eb4:	0018      	movs	r0, r3
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8008eba:	46c0      	nop			@ (mov r8, r8)
 8008ebc:	0800d7c8 	.word	0x0800d7c8

08008ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b086      	sub	sp, #24
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008ec8:	2313      	movs	r3, #19
 8008eca:	18fb      	adds	r3, r7, r3
 8008ecc:	2200      	movs	r2, #0
 8008ece:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ed0:	2312      	movs	r3, #18
 8008ed2:	18fb      	adds	r3, r7, r3
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	2380      	movs	r3, #128	@ 0x80
 8008ede:	029b      	lsls	r3, r3, #10
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	d100      	bne.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008ee4:	e0a3      	b.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ee6:	2011      	movs	r0, #17
 8008ee8:	183b      	adds	r3, r7, r0
 8008eea:	2200      	movs	r2, #0
 8008eec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008eee:	4ba5      	ldr	r3, [pc, #660]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008ef0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ef2:	2380      	movs	r3, #128	@ 0x80
 8008ef4:	055b      	lsls	r3, r3, #21
 8008ef6:	4013      	ands	r3, r2
 8008ef8:	d110      	bne.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008efa:	4ba2      	ldr	r3, [pc, #648]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008efc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008efe:	4ba1      	ldr	r3, [pc, #644]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f00:	2180      	movs	r1, #128	@ 0x80
 8008f02:	0549      	lsls	r1, r1, #21
 8008f04:	430a      	orrs	r2, r1
 8008f06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008f08:	4b9e      	ldr	r3, [pc, #632]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f0c:	2380      	movs	r3, #128	@ 0x80
 8008f0e:	055b      	lsls	r3, r3, #21
 8008f10:	4013      	ands	r3, r2
 8008f12:	60bb      	str	r3, [r7, #8]
 8008f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f16:	183b      	adds	r3, r7, r0
 8008f18:	2201      	movs	r2, #1
 8008f1a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f1c:	4b9a      	ldr	r3, [pc, #616]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	4b99      	ldr	r3, [pc, #612]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8008f22:	2180      	movs	r1, #128	@ 0x80
 8008f24:	0049      	lsls	r1, r1, #1
 8008f26:	430a      	orrs	r2, r1
 8008f28:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f2a:	f7fc fe81 	bl	8005c30 <HAL_GetTick>
 8008f2e:	0003      	movs	r3, r0
 8008f30:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f32:	e00b      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f34:	f7fc fe7c 	bl	8005c30 <HAL_GetTick>
 8008f38:	0002      	movs	r2, r0
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d904      	bls.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8008f42:	2313      	movs	r3, #19
 8008f44:	18fb      	adds	r3, r7, r3
 8008f46:	2203      	movs	r2, #3
 8008f48:	701a      	strb	r2, [r3, #0]
        break;
 8008f4a:	e005      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f4c:	4b8e      	ldr	r3, [pc, #568]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	2380      	movs	r3, #128	@ 0x80
 8008f52:	005b      	lsls	r3, r3, #1
 8008f54:	4013      	ands	r3, r2
 8008f56:	d0ed      	beq.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008f58:	2313      	movs	r3, #19
 8008f5a:	18fb      	adds	r3, r7, r3
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d154      	bne.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008f62:	4b88      	ldr	r3, [pc, #544]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008f66:	23c0      	movs	r3, #192	@ 0xc0
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d019      	beq.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d014      	beq.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008f7e:	4b81      	ldr	r3, [pc, #516]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f82:	4a82      	ldr	r2, [pc, #520]	@ (800918c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8008f84:	4013      	ands	r3, r2
 8008f86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008f88:	4b7e      	ldr	r3, [pc, #504]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008f8c:	4b7d      	ldr	r3, [pc, #500]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f8e:	2180      	movs	r1, #128	@ 0x80
 8008f90:	0249      	lsls	r1, r1, #9
 8008f92:	430a      	orrs	r2, r1
 8008f94:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008f96:	4b7b      	ldr	r3, [pc, #492]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008f9a:	4b7a      	ldr	r3, [pc, #488]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008f9c:	497c      	ldr	r1, [pc, #496]	@ (8009190 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008f9e:	400a      	ands	r2, r1
 8008fa0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008fa2:	4b78      	ldr	r3, [pc, #480]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008fa4:	697a      	ldr	r2, [r7, #20]
 8008fa6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	2201      	movs	r2, #1
 8008fac:	4013      	ands	r3, r2
 8008fae:	d016      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fb0:	f7fc fe3e 	bl	8005c30 <HAL_GetTick>
 8008fb4:	0003      	movs	r3, r0
 8008fb6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008fb8:	e00c      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fba:	f7fc fe39 	bl	8005c30 <HAL_GetTick>
 8008fbe:	0002      	movs	r2, r0
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	4a73      	ldr	r2, [pc, #460]	@ (8009194 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d904      	bls.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008fca:	2313      	movs	r3, #19
 8008fcc:	18fb      	adds	r3, r7, r3
 8008fce:	2203      	movs	r2, #3
 8008fd0:	701a      	strb	r2, [r3, #0]
            break;
 8008fd2:	e004      	b.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008fd4:	4b6b      	ldr	r3, [pc, #428]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fd8:	2202      	movs	r2, #2
 8008fda:	4013      	ands	r3, r2
 8008fdc:	d0ed      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8008fde:	2313      	movs	r3, #19
 8008fe0:	18fb      	adds	r3, r7, r3
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10a      	bne.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008fe8:	4b66      	ldr	r3, [pc, #408]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fec:	4a67      	ldr	r2, [pc, #412]	@ (800918c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8008fee:	4013      	ands	r3, r2
 8008ff0:	0019      	movs	r1, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ff6:	4b63      	ldr	r3, [pc, #396]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008ff8:	430a      	orrs	r2, r1
 8008ffa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008ffc:	e00c      	b.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008ffe:	2312      	movs	r3, #18
 8009000:	18fb      	adds	r3, r7, r3
 8009002:	2213      	movs	r2, #19
 8009004:	18ba      	adds	r2, r7, r2
 8009006:	7812      	ldrb	r2, [r2, #0]
 8009008:	701a      	strb	r2, [r3, #0]
 800900a:	e005      	b.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800900c:	2312      	movs	r3, #18
 800900e:	18fb      	adds	r3, r7, r3
 8009010:	2213      	movs	r2, #19
 8009012:	18ba      	adds	r2, r7, r2
 8009014:	7812      	ldrb	r2, [r2, #0]
 8009016:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009018:	2311      	movs	r3, #17
 800901a:	18fb      	adds	r3, r7, r3
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d105      	bne.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009022:	4b58      	ldr	r3, [pc, #352]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009024:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009026:	4b57      	ldr	r3, [pc, #348]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009028:	495b      	ldr	r1, [pc, #364]	@ (8009198 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800902a:	400a      	ands	r2, r1
 800902c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2201      	movs	r2, #1
 8009034:	4013      	ands	r3, r2
 8009036:	d009      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009038:	4b52      	ldr	r3, [pc, #328]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800903a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800903c:	2203      	movs	r2, #3
 800903e:	4393      	bics	r3, r2
 8009040:	0019      	movs	r1, r3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	685a      	ldr	r2, [r3, #4]
 8009046:	4b4f      	ldr	r3, [pc, #316]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009048:	430a      	orrs	r2, r1
 800904a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2210      	movs	r2, #16
 8009052:	4013      	ands	r3, r2
 8009054:	d009      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009056:	4b4b      	ldr	r3, [pc, #300]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800905a:	4a50      	ldr	r2, [pc, #320]	@ (800919c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800905c:	4013      	ands	r3, r2
 800905e:	0019      	movs	r1, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	689a      	ldr	r2, [r3, #8]
 8009064:	4b47      	ldr	r3, [pc, #284]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009066:	430a      	orrs	r2, r1
 8009068:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	2380      	movs	r3, #128	@ 0x80
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4013      	ands	r3, r2
 8009074:	d009      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009076:	4b43      	ldr	r3, [pc, #268]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800907a:	4a49      	ldr	r2, [pc, #292]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800907c:	4013      	ands	r3, r2
 800907e:	0019      	movs	r1, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	695a      	ldr	r2, [r3, #20]
 8009084:	4b3f      	ldr	r3, [pc, #252]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009086:	430a      	orrs	r2, r1
 8009088:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	2380      	movs	r3, #128	@ 0x80
 8009090:	00db      	lsls	r3, r3, #3
 8009092:	4013      	ands	r3, r2
 8009094:	d009      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009096:	4b3b      	ldr	r3, [pc, #236]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800909a:	4a42      	ldr	r2, [pc, #264]	@ (80091a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800909c:	4013      	ands	r3, r2
 800909e:	0019      	movs	r1, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	699a      	ldr	r2, [r3, #24]
 80090a4:	4b37      	ldr	r3, [pc, #220]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80090a6:	430a      	orrs	r2, r1
 80090a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2220      	movs	r2, #32
 80090b0:	4013      	ands	r3, r2
 80090b2:	d009      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80090b4:	4b33      	ldr	r3, [pc, #204]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80090b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090b8:	4a3b      	ldr	r2, [pc, #236]	@ (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80090ba:	4013      	ands	r3, r2
 80090bc:	0019      	movs	r1, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68da      	ldr	r2, [r3, #12]
 80090c2:	4b30      	ldr	r3, [pc, #192]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80090c4:	430a      	orrs	r2, r1
 80090c6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	2380      	movs	r3, #128	@ 0x80
 80090ce:	01db      	lsls	r3, r3, #7
 80090d0:	4013      	ands	r3, r2
 80090d2:	d015      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80090d4:	4b2b      	ldr	r3, [pc, #172]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80090d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	0899      	lsrs	r1, r3, #2
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	69da      	ldr	r2, [r3, #28]
 80090e0:	4b28      	ldr	r3, [pc, #160]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80090e2:	430a      	orrs	r2, r1
 80090e4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	69da      	ldr	r2, [r3, #28]
 80090ea:	2380      	movs	r3, #128	@ 0x80
 80090ec:	05db      	lsls	r3, r3, #23
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d106      	bne.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80090f2:	4b24      	ldr	r3, [pc, #144]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80090f4:	68da      	ldr	r2, [r3, #12]
 80090f6:	4b23      	ldr	r3, [pc, #140]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80090f8:	2180      	movs	r1, #128	@ 0x80
 80090fa:	0249      	lsls	r1, r1, #9
 80090fc:	430a      	orrs	r2, r1
 80090fe:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	2380      	movs	r3, #128	@ 0x80
 8009106:	039b      	lsls	r3, r3, #14
 8009108:	4013      	ands	r3, r2
 800910a:	d016      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800910c:	4b1d      	ldr	r3, [pc, #116]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800910e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009110:	4a26      	ldr	r2, [pc, #152]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8009112:	4013      	ands	r3, r2
 8009114:	0019      	movs	r1, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a1a      	ldr	r2, [r3, #32]
 800911a:	4b1a      	ldr	r3, [pc, #104]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800911c:	430a      	orrs	r2, r1
 800911e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a1a      	ldr	r2, [r3, #32]
 8009124:	2380      	movs	r3, #128	@ 0x80
 8009126:	03db      	lsls	r3, r3, #15
 8009128:	429a      	cmp	r2, r3
 800912a:	d106      	bne.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800912c:	4b15      	ldr	r3, [pc, #84]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800912e:	68da      	ldr	r2, [r3, #12]
 8009130:	4b14      	ldr	r3, [pc, #80]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009132:	2180      	movs	r1, #128	@ 0x80
 8009134:	0449      	lsls	r1, r1, #17
 8009136:	430a      	orrs	r2, r1
 8009138:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	2380      	movs	r3, #128	@ 0x80
 8009140:	011b      	lsls	r3, r3, #4
 8009142:	4013      	ands	r3, r2
 8009144:	d016      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8009146:	4b0f      	ldr	r3, [pc, #60]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800914a:	4a19      	ldr	r2, [pc, #100]	@ (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800914c:	4013      	ands	r3, r2
 800914e:	0019      	movs	r1, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	691a      	ldr	r2, [r3, #16]
 8009154:	4b0b      	ldr	r3, [pc, #44]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009156:	430a      	orrs	r2, r1
 8009158:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	691a      	ldr	r2, [r3, #16]
 800915e:	2380      	movs	r3, #128	@ 0x80
 8009160:	01db      	lsls	r3, r3, #7
 8009162:	429a      	cmp	r2, r3
 8009164:	d106      	bne.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009166:	4b07      	ldr	r3, [pc, #28]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009168:	68da      	ldr	r2, [r3, #12]
 800916a:	4b06      	ldr	r3, [pc, #24]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800916c:	2180      	movs	r1, #128	@ 0x80
 800916e:	0249      	lsls	r1, r1, #9
 8009170:	430a      	orrs	r2, r1
 8009172:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8009174:	2312      	movs	r3, #18
 8009176:	18fb      	adds	r3, r7, r3
 8009178:	781b      	ldrb	r3, [r3, #0]
}
 800917a:	0018      	movs	r0, r3
 800917c:	46bd      	mov	sp, r7
 800917e:	b006      	add	sp, #24
 8009180:	bd80      	pop	{r7, pc}
 8009182:	46c0      	nop			@ (mov r8, r8)
 8009184:	40021000 	.word	0x40021000
 8009188:	40007000 	.word	0x40007000
 800918c:	fffffcff 	.word	0xfffffcff
 8009190:	fffeffff 	.word	0xfffeffff
 8009194:	00001388 	.word	0x00001388
 8009198:	efffffff 	.word	0xefffffff
 800919c:	fffff3ff 	.word	0xfffff3ff
 80091a0:	fff3ffff 	.word	0xfff3ffff
 80091a4:	ffcfffff 	.word	0xffcfffff
 80091a8:	ffffcfff 	.word	0xffffcfff
 80091ac:	ffbfffff 	.word	0xffbfffff
 80091b0:	ffff3fff 	.word	0xffff3fff

080091b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d101      	bne.n	80091c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e056      	b.n	8009274 <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	223d      	movs	r2, #61	@ 0x3d
 80091ca:	5c9b      	ldrb	r3, [r3, r2]
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d113      	bne.n	80091fa <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	223c      	movs	r2, #60	@ 0x3c
 80091d6:	2100      	movs	r1, #0
 80091d8:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	0018      	movs	r0, r3
 80091de:	f002 f8c5 	bl	800b36c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d102      	bne.n	80091f0 <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a23      	ldr	r2, [pc, #140]	@ (800927c <HAL_TIM_Base_Init+0xc8>)
 80091ee:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	0010      	movs	r0, r2
 80091f8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	223d      	movs	r2, #61	@ 0x3d
 80091fe:	2102      	movs	r1, #2
 8009200:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	3304      	adds	r3, #4
 800920a:	0019      	movs	r1, r3
 800920c:	0010      	movs	r0, r2
 800920e:	f001 fbaf 	bl	800a970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2248      	movs	r2, #72	@ 0x48
 8009216:	2101      	movs	r1, #1
 8009218:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	223e      	movs	r2, #62	@ 0x3e
 800921e:	2101      	movs	r1, #1
 8009220:	5499      	strb	r1, [r3, r2]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	223f      	movs	r2, #63	@ 0x3f
 8009226:	2101      	movs	r1, #1
 8009228:	5499      	strb	r1, [r3, r2]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2240      	movs	r2, #64	@ 0x40
 800922e:	2101      	movs	r1, #1
 8009230:	5499      	strb	r1, [r3, r2]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2241      	movs	r2, #65	@ 0x41
 8009236:	2101      	movs	r1, #1
 8009238:	5499      	strb	r1, [r3, r2]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2242      	movs	r2, #66	@ 0x42
 800923e:	2101      	movs	r1, #1
 8009240:	5499      	strb	r1, [r3, r2]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2243      	movs	r2, #67	@ 0x43
 8009246:	2101      	movs	r1, #1
 8009248:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2244      	movs	r2, #68	@ 0x44
 800924e:	2101      	movs	r1, #1
 8009250:	5499      	strb	r1, [r3, r2]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2245      	movs	r2, #69	@ 0x45
 8009256:	2101      	movs	r1, #1
 8009258:	5499      	strb	r1, [r3, r2]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2246      	movs	r2, #70	@ 0x46
 800925e:	2101      	movs	r1, #1
 8009260:	5499      	strb	r1, [r3, r2]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2247      	movs	r2, #71	@ 0x47
 8009266:	2101      	movs	r1, #1
 8009268:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	223d      	movs	r2, #61	@ 0x3d
 800926e:	2101      	movs	r1, #1
 8009270:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	0018      	movs	r0, r3
 8009276:	46bd      	mov	sp, r7
 8009278:	b002      	add	sp, #8
 800927a:	bd80      	pop	{r7, pc}
 800927c:	08004be1 	.word	0x08004be1

08009280 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	223d      	movs	r2, #61	@ 0x3d
 800928c:	5c9b      	ldrb	r3, [r3, r2]
 800928e:	b2db      	uxtb	r3, r3
 8009290:	2b01      	cmp	r3, #1
 8009292:	d001      	beq.n	8009298 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	e035      	b.n	8009304 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	223d      	movs	r2, #61	@ 0x3d
 800929c:	2102      	movs	r1, #2
 800929e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a19      	ldr	r2, [pc, #100]	@ (800930c <HAL_TIM_Base_Start+0x8c>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d00a      	beq.n	80092c0 <HAL_TIM_Base_Start+0x40>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	2380      	movs	r3, #128	@ 0x80
 80092b0:	05db      	lsls	r3, r3, #23
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d004      	beq.n	80092c0 <HAL_TIM_Base_Start+0x40>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a15      	ldr	r2, [pc, #84]	@ (8009310 <HAL_TIM_Base_Start+0x90>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d116      	bne.n	80092ee <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	4a13      	ldr	r2, [pc, #76]	@ (8009314 <HAL_TIM_Base_Start+0x94>)
 80092c8:	4013      	ands	r3, r2
 80092ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2b06      	cmp	r3, #6
 80092d0:	d016      	beq.n	8009300 <HAL_TIM_Base_Start+0x80>
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	2380      	movs	r3, #128	@ 0x80
 80092d6:	025b      	lsls	r3, r3, #9
 80092d8:	429a      	cmp	r2, r3
 80092da:	d011      	beq.n	8009300 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2101      	movs	r1, #1
 80092e8:	430a      	orrs	r2, r1
 80092ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ec:	e008      	b.n	8009300 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2101      	movs	r1, #1
 80092fa:	430a      	orrs	r2, r1
 80092fc:	601a      	str	r2, [r3, #0]
 80092fe:	e000      	b.n	8009302 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009300:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	0018      	movs	r0, r3
 8009306:	46bd      	mov	sp, r7
 8009308:	b004      	add	sp, #16
 800930a:	bd80      	pop	{r7, pc}
 800930c:	40012c00 	.word	0x40012c00
 8009310:	40000400 	.word	0x40000400
 8009314:	00010007 	.word	0x00010007

08009318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	223d      	movs	r2, #61	@ 0x3d
 8009324:	5c9b      	ldrb	r3, [r3, r2]
 8009326:	b2db      	uxtb	r3, r3
 8009328:	2b01      	cmp	r3, #1
 800932a:	d001      	beq.n	8009330 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	e03d      	b.n	80093ac <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	223d      	movs	r2, #61	@ 0x3d
 8009334:	2102      	movs	r1, #2
 8009336:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68da      	ldr	r2, [r3, #12]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2101      	movs	r1, #1
 8009344:	430a      	orrs	r2, r1
 8009346:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a19      	ldr	r2, [pc, #100]	@ (80093b4 <HAL_TIM_Base_Start_IT+0x9c>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d00a      	beq.n	8009368 <HAL_TIM_Base_Start_IT+0x50>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	2380      	movs	r3, #128	@ 0x80
 8009358:	05db      	lsls	r3, r3, #23
 800935a:	429a      	cmp	r2, r3
 800935c:	d004      	beq.n	8009368 <HAL_TIM_Base_Start_IT+0x50>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a15      	ldr	r2, [pc, #84]	@ (80093b8 <HAL_TIM_Base_Start_IT+0xa0>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d116      	bne.n	8009396 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	4a13      	ldr	r2, [pc, #76]	@ (80093bc <HAL_TIM_Base_Start_IT+0xa4>)
 8009370:	4013      	ands	r3, r2
 8009372:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2b06      	cmp	r3, #6
 8009378:	d016      	beq.n	80093a8 <HAL_TIM_Base_Start_IT+0x90>
 800937a:	68fa      	ldr	r2, [r7, #12]
 800937c:	2380      	movs	r3, #128	@ 0x80
 800937e:	025b      	lsls	r3, r3, #9
 8009380:	429a      	cmp	r2, r3
 8009382:	d011      	beq.n	80093a8 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2101      	movs	r1, #1
 8009390:	430a      	orrs	r2, r1
 8009392:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009394:	e008      	b.n	80093a8 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2101      	movs	r1, #1
 80093a2:	430a      	orrs	r2, r1
 80093a4:	601a      	str	r2, [r3, #0]
 80093a6:	e000      	b.n	80093aa <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093a8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	0018      	movs	r0, r3
 80093ae:	46bd      	mov	sp, r7
 80093b0:	b004      	add	sp, #16
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	40012c00 	.word	0x40012c00
 80093b8:	40000400 	.word	0x40000400
 80093bc:	00010007 	.word	0x00010007

080093c0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d101      	bne.n	80093d2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e056      	b.n	8009480 <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	223d      	movs	r2, #61	@ 0x3d
 80093d6:	5c9b      	ldrb	r3, [r3, r2]
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d113      	bne.n	8009406 <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	223c      	movs	r2, #60	@ 0x3c
 80093e2:	2100      	movs	r1, #0
 80093e4:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	0018      	movs	r0, r3
 80093ea:	f001 ffbf 	bl	800b36c <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d102      	bne.n	80093fc <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a23      	ldr	r2, [pc, #140]	@ (8009488 <HAL_TIM_OC_Init+0xc8>)
 80093fa:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	0010      	movs	r0, r2
 8009404:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	223d      	movs	r2, #61	@ 0x3d
 800940a:	2102      	movs	r1, #2
 800940c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	3304      	adds	r3, #4
 8009416:	0019      	movs	r1, r3
 8009418:	0010      	movs	r0, r2
 800941a:	f001 faa9 	bl	800a970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2248      	movs	r2, #72	@ 0x48
 8009422:	2101      	movs	r1, #1
 8009424:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	223e      	movs	r2, #62	@ 0x3e
 800942a:	2101      	movs	r1, #1
 800942c:	5499      	strb	r1, [r3, r2]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	223f      	movs	r2, #63	@ 0x3f
 8009432:	2101      	movs	r1, #1
 8009434:	5499      	strb	r1, [r3, r2]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2240      	movs	r2, #64	@ 0x40
 800943a:	2101      	movs	r1, #1
 800943c:	5499      	strb	r1, [r3, r2]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2241      	movs	r2, #65	@ 0x41
 8009442:	2101      	movs	r1, #1
 8009444:	5499      	strb	r1, [r3, r2]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2242      	movs	r2, #66	@ 0x42
 800944a:	2101      	movs	r1, #1
 800944c:	5499      	strb	r1, [r3, r2]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2243      	movs	r2, #67	@ 0x43
 8009452:	2101      	movs	r1, #1
 8009454:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2244      	movs	r2, #68	@ 0x44
 800945a:	2101      	movs	r1, #1
 800945c:	5499      	strb	r1, [r3, r2]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2245      	movs	r2, #69	@ 0x45
 8009462:	2101      	movs	r1, #1
 8009464:	5499      	strb	r1, [r3, r2]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2246      	movs	r2, #70	@ 0x46
 800946a:	2101      	movs	r1, #1
 800946c:	5499      	strb	r1, [r3, r2]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2247      	movs	r2, #71	@ 0x47
 8009472:	2101      	movs	r1, #1
 8009474:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	223d      	movs	r2, #61	@ 0x3d
 800947a:	2101      	movs	r1, #1
 800947c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	0018      	movs	r0, r3
 8009482:	46bd      	mov	sp, r7
 8009484:	b002      	add	sp, #8
 8009486:	bd80      	pop	{r7, pc}
 8009488:	0800948d 	.word	0x0800948d

0800948c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009494:	46c0      	nop			@ (mov r8, r8)
 8009496:	46bd      	mov	sp, r7
 8009498:	b002      	add	sp, #8
 800949a:	bd80      	pop	{r7, pc}

0800949c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094a6:	230f      	movs	r3, #15
 80094a8:	18fb      	adds	r3, r7, r3
 80094aa:	2200      	movs	r2, #0
 80094ac:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d108      	bne.n	80094c6 <HAL_TIM_OC_Start_IT+0x2a>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	223e      	movs	r2, #62	@ 0x3e
 80094b8:	5c9b      	ldrb	r3, [r3, r2]
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	3b01      	subs	r3, #1
 80094be:	1e5a      	subs	r2, r3, #1
 80094c0:	4193      	sbcs	r3, r2
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	e037      	b.n	8009536 <HAL_TIM_OC_Start_IT+0x9a>
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	2b04      	cmp	r3, #4
 80094ca:	d108      	bne.n	80094de <HAL_TIM_OC_Start_IT+0x42>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	223f      	movs	r2, #63	@ 0x3f
 80094d0:	5c9b      	ldrb	r3, [r3, r2]
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	3b01      	subs	r3, #1
 80094d6:	1e5a      	subs	r2, r3, #1
 80094d8:	4193      	sbcs	r3, r2
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	e02b      	b.n	8009536 <HAL_TIM_OC_Start_IT+0x9a>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	2b08      	cmp	r3, #8
 80094e2:	d108      	bne.n	80094f6 <HAL_TIM_OC_Start_IT+0x5a>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2240      	movs	r2, #64	@ 0x40
 80094e8:	5c9b      	ldrb	r3, [r3, r2]
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	3b01      	subs	r3, #1
 80094ee:	1e5a      	subs	r2, r3, #1
 80094f0:	4193      	sbcs	r3, r2
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	e01f      	b.n	8009536 <HAL_TIM_OC_Start_IT+0x9a>
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	2b0c      	cmp	r3, #12
 80094fa:	d108      	bne.n	800950e <HAL_TIM_OC_Start_IT+0x72>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2241      	movs	r2, #65	@ 0x41
 8009500:	5c9b      	ldrb	r3, [r3, r2]
 8009502:	b2db      	uxtb	r3, r3
 8009504:	3b01      	subs	r3, #1
 8009506:	1e5a      	subs	r2, r3, #1
 8009508:	4193      	sbcs	r3, r2
 800950a:	b2db      	uxtb	r3, r3
 800950c:	e013      	b.n	8009536 <HAL_TIM_OC_Start_IT+0x9a>
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	2b10      	cmp	r3, #16
 8009512:	d108      	bne.n	8009526 <HAL_TIM_OC_Start_IT+0x8a>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2242      	movs	r2, #66	@ 0x42
 8009518:	5c9b      	ldrb	r3, [r3, r2]
 800951a:	b2db      	uxtb	r3, r3
 800951c:	3b01      	subs	r3, #1
 800951e:	1e5a      	subs	r2, r3, #1
 8009520:	4193      	sbcs	r3, r2
 8009522:	b2db      	uxtb	r3, r3
 8009524:	e007      	b.n	8009536 <HAL_TIM_OC_Start_IT+0x9a>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2243      	movs	r2, #67	@ 0x43
 800952a:	5c9b      	ldrb	r3, [r3, r2]
 800952c:	b2db      	uxtb	r3, r3
 800952e:	3b01      	subs	r3, #1
 8009530:	1e5a      	subs	r2, r3, #1
 8009532:	4193      	sbcs	r3, r2
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b00      	cmp	r3, #0
 8009538:	d001      	beq.n	800953e <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e0c4      	b.n	80096c8 <HAL_TIM_OC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d104      	bne.n	800954e <HAL_TIM_OC_Start_IT+0xb2>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	223e      	movs	r2, #62	@ 0x3e
 8009548:	2102      	movs	r1, #2
 800954a:	5499      	strb	r1, [r3, r2]
 800954c:	e023      	b.n	8009596 <HAL_TIM_OC_Start_IT+0xfa>
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	2b04      	cmp	r3, #4
 8009552:	d104      	bne.n	800955e <HAL_TIM_OC_Start_IT+0xc2>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	223f      	movs	r2, #63	@ 0x3f
 8009558:	2102      	movs	r1, #2
 800955a:	5499      	strb	r1, [r3, r2]
 800955c:	e01b      	b.n	8009596 <HAL_TIM_OC_Start_IT+0xfa>
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	2b08      	cmp	r3, #8
 8009562:	d104      	bne.n	800956e <HAL_TIM_OC_Start_IT+0xd2>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2240      	movs	r2, #64	@ 0x40
 8009568:	2102      	movs	r1, #2
 800956a:	5499      	strb	r1, [r3, r2]
 800956c:	e013      	b.n	8009596 <HAL_TIM_OC_Start_IT+0xfa>
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	2b0c      	cmp	r3, #12
 8009572:	d104      	bne.n	800957e <HAL_TIM_OC_Start_IT+0xe2>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2241      	movs	r2, #65	@ 0x41
 8009578:	2102      	movs	r1, #2
 800957a:	5499      	strb	r1, [r3, r2]
 800957c:	e00b      	b.n	8009596 <HAL_TIM_OC_Start_IT+0xfa>
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	2b10      	cmp	r3, #16
 8009582:	d104      	bne.n	800958e <HAL_TIM_OC_Start_IT+0xf2>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2242      	movs	r2, #66	@ 0x42
 8009588:	2102      	movs	r1, #2
 800958a:	5499      	strb	r1, [r3, r2]
 800958c:	e003      	b.n	8009596 <HAL_TIM_OC_Start_IT+0xfa>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2243      	movs	r2, #67	@ 0x43
 8009592:	2102      	movs	r1, #2
 8009594:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	2b0c      	cmp	r3, #12
 800959a:	d02a      	beq.n	80095f2 <HAL_TIM_OC_Start_IT+0x156>
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	2b0c      	cmp	r3, #12
 80095a0:	d830      	bhi.n	8009604 <HAL_TIM_OC_Start_IT+0x168>
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	2b08      	cmp	r3, #8
 80095a6:	d01b      	beq.n	80095e0 <HAL_TIM_OC_Start_IT+0x144>
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	2b08      	cmp	r3, #8
 80095ac:	d82a      	bhi.n	8009604 <HAL_TIM_OC_Start_IT+0x168>
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d003      	beq.n	80095bc <HAL_TIM_OC_Start_IT+0x120>
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	2b04      	cmp	r3, #4
 80095b8:	d009      	beq.n	80095ce <HAL_TIM_OC_Start_IT+0x132>
 80095ba:	e023      	b.n	8009604 <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68da      	ldr	r2, [r3, #12]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2102      	movs	r1, #2
 80095c8:	430a      	orrs	r2, r1
 80095ca:	60da      	str	r2, [r3, #12]
      break;
 80095cc:	e01f      	b.n	800960e <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68da      	ldr	r2, [r3, #12]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2104      	movs	r1, #4
 80095da:	430a      	orrs	r2, r1
 80095dc:	60da      	str	r2, [r3, #12]
      break;
 80095de:	e016      	b.n	800960e <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68da      	ldr	r2, [r3, #12]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2108      	movs	r1, #8
 80095ec:	430a      	orrs	r2, r1
 80095ee:	60da      	str	r2, [r3, #12]
      break;
 80095f0:	e00d      	b.n	800960e <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68da      	ldr	r2, [r3, #12]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2110      	movs	r1, #16
 80095fe:	430a      	orrs	r2, r1
 8009600:	60da      	str	r2, [r3, #12]
      break;
 8009602:	e004      	b.n	800960e <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 8009604:	230f      	movs	r3, #15
 8009606:	18fb      	adds	r3, r7, r3
 8009608:	2201      	movs	r2, #1
 800960a:	701a      	strb	r2, [r3, #0]
      break;
 800960c:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800960e:	230f      	movs	r3, #15
 8009610:	18fb      	adds	r3, r7, r3
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d154      	bne.n	80096c2 <HAL_TIM_OC_Start_IT+0x226>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	2201      	movs	r2, #1
 8009620:	0018      	movs	r0, r3
 8009622:	f001 fe7f 	bl	800b324 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a29      	ldr	r2, [pc, #164]	@ (80096d0 <HAL_TIM_OC_Start_IT+0x234>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d009      	beq.n	8009644 <HAL_TIM_OC_Start_IT+0x1a8>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a27      	ldr	r2, [pc, #156]	@ (80096d4 <HAL_TIM_OC_Start_IT+0x238>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d004      	beq.n	8009644 <HAL_TIM_OC_Start_IT+0x1a8>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a26      	ldr	r2, [pc, #152]	@ (80096d8 <HAL_TIM_OC_Start_IT+0x23c>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d101      	bne.n	8009648 <HAL_TIM_OC_Start_IT+0x1ac>
 8009644:	2301      	movs	r3, #1
 8009646:	e000      	b.n	800964a <HAL_TIM_OC_Start_IT+0x1ae>
 8009648:	2300      	movs	r3, #0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d008      	beq.n	8009660 <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2180      	movs	r1, #128	@ 0x80
 800965a:	0209      	lsls	r1, r1, #8
 800965c:	430a      	orrs	r2, r1
 800965e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a1a      	ldr	r2, [pc, #104]	@ (80096d0 <HAL_TIM_OC_Start_IT+0x234>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d00a      	beq.n	8009680 <HAL_TIM_OC_Start_IT+0x1e4>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	2380      	movs	r3, #128	@ 0x80
 8009670:	05db      	lsls	r3, r3, #23
 8009672:	429a      	cmp	r2, r3
 8009674:	d004      	beq.n	8009680 <HAL_TIM_OC_Start_IT+0x1e4>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a18      	ldr	r2, [pc, #96]	@ (80096dc <HAL_TIM_OC_Start_IT+0x240>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d116      	bne.n	80096ae <HAL_TIM_OC_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	4a16      	ldr	r2, [pc, #88]	@ (80096e0 <HAL_TIM_OC_Start_IT+0x244>)
 8009688:	4013      	ands	r3, r2
 800968a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	2b06      	cmp	r3, #6
 8009690:	d016      	beq.n	80096c0 <HAL_TIM_OC_Start_IT+0x224>
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	2380      	movs	r3, #128	@ 0x80
 8009696:	025b      	lsls	r3, r3, #9
 8009698:	429a      	cmp	r2, r3
 800969a:	d011      	beq.n	80096c0 <HAL_TIM_OC_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2101      	movs	r1, #1
 80096a8:	430a      	orrs	r2, r1
 80096aa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096ac:	e008      	b.n	80096c0 <HAL_TIM_OC_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2101      	movs	r1, #1
 80096ba:	430a      	orrs	r2, r1
 80096bc:	601a      	str	r2, [r3, #0]
 80096be:	e000      	b.n	80096c2 <HAL_TIM_OC_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096c0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 80096c2:	230f      	movs	r3, #15
 80096c4:	18fb      	adds	r3, r7, r3
 80096c6:	781b      	ldrb	r3, [r3, #0]
}
 80096c8:	0018      	movs	r0, r3
 80096ca:	46bd      	mov	sp, r7
 80096cc:	b004      	add	sp, #16
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	40012c00 	.word	0x40012c00
 80096d4:	40014400 	.word	0x40014400
 80096d8:	40014800 	.word	0x40014800
 80096dc:	40000400 	.word	0x40000400
 80096e0:	00010007 	.word	0x00010007

080096e4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096ee:	230f      	movs	r3, #15
 80096f0:	18fb      	adds	r3, r7, r3
 80096f2:	2200      	movs	r2, #0
 80096f4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	2b0c      	cmp	r3, #12
 80096fa:	d02a      	beq.n	8009752 <HAL_TIM_OC_Stop_IT+0x6e>
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	2b0c      	cmp	r3, #12
 8009700:	d830      	bhi.n	8009764 <HAL_TIM_OC_Stop_IT+0x80>
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	2b08      	cmp	r3, #8
 8009706:	d01b      	beq.n	8009740 <HAL_TIM_OC_Stop_IT+0x5c>
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	2b08      	cmp	r3, #8
 800970c:	d82a      	bhi.n	8009764 <HAL_TIM_OC_Stop_IT+0x80>
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d003      	beq.n	800971c <HAL_TIM_OC_Stop_IT+0x38>
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	2b04      	cmp	r3, #4
 8009718:	d009      	beq.n	800972e <HAL_TIM_OC_Stop_IT+0x4a>
 800971a:	e023      	b.n	8009764 <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68da      	ldr	r2, [r3, #12]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2102      	movs	r1, #2
 8009728:	438a      	bics	r2, r1
 800972a:	60da      	str	r2, [r3, #12]
      break;
 800972c:	e01f      	b.n	800976e <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68da      	ldr	r2, [r3, #12]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2104      	movs	r1, #4
 800973a:	438a      	bics	r2, r1
 800973c:	60da      	str	r2, [r3, #12]
      break;
 800973e:	e016      	b.n	800976e <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68da      	ldr	r2, [r3, #12]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2108      	movs	r1, #8
 800974c:	438a      	bics	r2, r1
 800974e:	60da      	str	r2, [r3, #12]
      break;
 8009750:	e00d      	b.n	800976e <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	68da      	ldr	r2, [r3, #12]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2110      	movs	r1, #16
 800975e:	438a      	bics	r2, r1
 8009760:	60da      	str	r2, [r3, #12]
      break;
 8009762:	e004      	b.n	800976e <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8009764:	230f      	movs	r3, #15
 8009766:	18fb      	adds	r3, r7, r3
 8009768:	2201      	movs	r2, #1
 800976a:	701a      	strb	r2, [r3, #0]
      break;
 800976c:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800976e:	230f      	movs	r3, #15
 8009770:	18fb      	adds	r3, r7, r3
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d000      	beq.n	800977a <HAL_TIM_OC_Stop_IT+0x96>
 8009778:	e06e      	b.n	8009858 <HAL_TIM_OC_Stop_IT+0x174>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	6839      	ldr	r1, [r7, #0]
 8009780:	2200      	movs	r2, #0
 8009782:	0018      	movs	r0, r3
 8009784:	f001 fdce 	bl	800b324 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a36      	ldr	r2, [pc, #216]	@ (8009868 <HAL_TIM_OC_Stop_IT+0x184>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d009      	beq.n	80097a6 <HAL_TIM_OC_Stop_IT+0xc2>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a35      	ldr	r2, [pc, #212]	@ (800986c <HAL_TIM_OC_Stop_IT+0x188>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d004      	beq.n	80097a6 <HAL_TIM_OC_Stop_IT+0xc2>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a33      	ldr	r2, [pc, #204]	@ (8009870 <HAL_TIM_OC_Stop_IT+0x18c>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d101      	bne.n	80097aa <HAL_TIM_OC_Stop_IT+0xc6>
 80097a6:	2301      	movs	r3, #1
 80097a8:	e000      	b.n	80097ac <HAL_TIM_OC_Stop_IT+0xc8>
 80097aa:	2300      	movs	r3, #0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d013      	beq.n	80097d8 <HAL_TIM_OC_Stop_IT+0xf4>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6a1b      	ldr	r3, [r3, #32]
 80097b6:	4a2f      	ldr	r2, [pc, #188]	@ (8009874 <HAL_TIM_OC_Stop_IT+0x190>)
 80097b8:	4013      	ands	r3, r2
 80097ba:	d10d      	bne.n	80097d8 <HAL_TIM_OC_Stop_IT+0xf4>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	4a2d      	ldr	r2, [pc, #180]	@ (8009878 <HAL_TIM_OC_Stop_IT+0x194>)
 80097c4:	4013      	ands	r3, r2
 80097c6:	d107      	bne.n	80097d8 <HAL_TIM_OC_Stop_IT+0xf4>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	492a      	ldr	r1, [pc, #168]	@ (800987c <HAL_TIM_OC_Stop_IT+0x198>)
 80097d4:	400a      	ands	r2, r1
 80097d6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	4a25      	ldr	r2, [pc, #148]	@ (8009874 <HAL_TIM_OC_Stop_IT+0x190>)
 80097e0:	4013      	ands	r3, r2
 80097e2:	d10d      	bne.n	8009800 <HAL_TIM_OC_Stop_IT+0x11c>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	6a1b      	ldr	r3, [r3, #32]
 80097ea:	4a23      	ldr	r2, [pc, #140]	@ (8009878 <HAL_TIM_OC_Stop_IT+0x194>)
 80097ec:	4013      	ands	r3, r2
 80097ee:	d107      	bne.n	8009800 <HAL_TIM_OC_Stop_IT+0x11c>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2101      	movs	r1, #1
 80097fc:	438a      	bics	r2, r1
 80097fe:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d104      	bne.n	8009810 <HAL_TIM_OC_Stop_IT+0x12c>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	223e      	movs	r2, #62	@ 0x3e
 800980a:	2101      	movs	r1, #1
 800980c:	5499      	strb	r1, [r3, r2]
 800980e:	e023      	b.n	8009858 <HAL_TIM_OC_Stop_IT+0x174>
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	2b04      	cmp	r3, #4
 8009814:	d104      	bne.n	8009820 <HAL_TIM_OC_Stop_IT+0x13c>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	223f      	movs	r2, #63	@ 0x3f
 800981a:	2101      	movs	r1, #1
 800981c:	5499      	strb	r1, [r3, r2]
 800981e:	e01b      	b.n	8009858 <HAL_TIM_OC_Stop_IT+0x174>
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	2b08      	cmp	r3, #8
 8009824:	d104      	bne.n	8009830 <HAL_TIM_OC_Stop_IT+0x14c>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2240      	movs	r2, #64	@ 0x40
 800982a:	2101      	movs	r1, #1
 800982c:	5499      	strb	r1, [r3, r2]
 800982e:	e013      	b.n	8009858 <HAL_TIM_OC_Stop_IT+0x174>
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	2b0c      	cmp	r3, #12
 8009834:	d104      	bne.n	8009840 <HAL_TIM_OC_Stop_IT+0x15c>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2241      	movs	r2, #65	@ 0x41
 800983a:	2101      	movs	r1, #1
 800983c:	5499      	strb	r1, [r3, r2]
 800983e:	e00b      	b.n	8009858 <HAL_TIM_OC_Stop_IT+0x174>
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	2b10      	cmp	r3, #16
 8009844:	d104      	bne.n	8009850 <HAL_TIM_OC_Stop_IT+0x16c>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2242      	movs	r2, #66	@ 0x42
 800984a:	2101      	movs	r1, #1
 800984c:	5499      	strb	r1, [r3, r2]
 800984e:	e003      	b.n	8009858 <HAL_TIM_OC_Stop_IT+0x174>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2243      	movs	r2, #67	@ 0x43
 8009854:	2101      	movs	r1, #1
 8009856:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8009858:	230f      	movs	r3, #15
 800985a:	18fb      	adds	r3, r7, r3
 800985c:	781b      	ldrb	r3, [r3, #0]
}
 800985e:	0018      	movs	r0, r3
 8009860:	46bd      	mov	sp, r7
 8009862:	b004      	add	sp, #16
 8009864:	bd80      	pop	{r7, pc}
 8009866:	46c0      	nop			@ (mov r8, r8)
 8009868:	40012c00 	.word	0x40012c00
 800986c:	40014400 	.word	0x40014400
 8009870:	40014800 	.word	0x40014800
 8009874:	00001111 	.word	0x00001111
 8009878:	00000444 	.word	0x00000444
 800987c:	ffff7fff 	.word	0xffff7fff

08009880 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d101      	bne.n	8009892 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	e056      	b.n	8009940 <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	223d      	movs	r2, #61	@ 0x3d
 8009896:	5c9b      	ldrb	r3, [r3, r2]
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b00      	cmp	r3, #0
 800989c:	d113      	bne.n	80098c6 <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	223c      	movs	r2, #60	@ 0x3c
 80098a2:	2100      	movs	r1, #0
 80098a4:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	0018      	movs	r0, r3
 80098aa:	f001 fd5f 	bl	800b36c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d102      	bne.n	80098bc <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a23      	ldr	r2, [pc, #140]	@ (8009948 <HAL_TIM_PWM_Init+0xc8>)
 80098ba:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	0010      	movs	r0, r2
 80098c4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	223d      	movs	r2, #61	@ 0x3d
 80098ca:	2102      	movs	r1, #2
 80098cc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	3304      	adds	r3, #4
 80098d6:	0019      	movs	r1, r3
 80098d8:	0010      	movs	r0, r2
 80098da:	f001 f849 	bl	800a970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2248      	movs	r2, #72	@ 0x48
 80098e2:	2101      	movs	r1, #1
 80098e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	223e      	movs	r2, #62	@ 0x3e
 80098ea:	2101      	movs	r1, #1
 80098ec:	5499      	strb	r1, [r3, r2]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	223f      	movs	r2, #63	@ 0x3f
 80098f2:	2101      	movs	r1, #1
 80098f4:	5499      	strb	r1, [r3, r2]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2240      	movs	r2, #64	@ 0x40
 80098fa:	2101      	movs	r1, #1
 80098fc:	5499      	strb	r1, [r3, r2]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2241      	movs	r2, #65	@ 0x41
 8009902:	2101      	movs	r1, #1
 8009904:	5499      	strb	r1, [r3, r2]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2242      	movs	r2, #66	@ 0x42
 800990a:	2101      	movs	r1, #1
 800990c:	5499      	strb	r1, [r3, r2]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2243      	movs	r2, #67	@ 0x43
 8009912:	2101      	movs	r1, #1
 8009914:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2244      	movs	r2, #68	@ 0x44
 800991a:	2101      	movs	r1, #1
 800991c:	5499      	strb	r1, [r3, r2]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2245      	movs	r2, #69	@ 0x45
 8009922:	2101      	movs	r1, #1
 8009924:	5499      	strb	r1, [r3, r2]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2246      	movs	r2, #70	@ 0x46
 800992a:	2101      	movs	r1, #1
 800992c:	5499      	strb	r1, [r3, r2]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2247      	movs	r2, #71	@ 0x47
 8009932:	2101      	movs	r1, #1
 8009934:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	223d      	movs	r2, #61	@ 0x3d
 800993a:	2101      	movs	r1, #1
 800993c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	0018      	movs	r0, r3
 8009942:	46bd      	mov	sp, r7
 8009944:	b002      	add	sp, #8
 8009946:	bd80      	pop	{r7, pc}
 8009948:	0800994d 	.word	0x0800994d

0800994c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009954:	46c0      	nop			@ (mov r8, r8)
 8009956:	46bd      	mov	sp, r7
 8009958:	b002      	add	sp, #8
 800995a:	bd80      	pop	{r7, pc}

0800995c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d108      	bne.n	800997e <HAL_TIM_PWM_Start+0x22>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	223e      	movs	r2, #62	@ 0x3e
 8009970:	5c9b      	ldrb	r3, [r3, r2]
 8009972:	b2db      	uxtb	r3, r3
 8009974:	3b01      	subs	r3, #1
 8009976:	1e5a      	subs	r2, r3, #1
 8009978:	4193      	sbcs	r3, r2
 800997a:	b2db      	uxtb	r3, r3
 800997c:	e037      	b.n	80099ee <HAL_TIM_PWM_Start+0x92>
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	2b04      	cmp	r3, #4
 8009982:	d108      	bne.n	8009996 <HAL_TIM_PWM_Start+0x3a>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	223f      	movs	r2, #63	@ 0x3f
 8009988:	5c9b      	ldrb	r3, [r3, r2]
 800998a:	b2db      	uxtb	r3, r3
 800998c:	3b01      	subs	r3, #1
 800998e:	1e5a      	subs	r2, r3, #1
 8009990:	4193      	sbcs	r3, r2
 8009992:	b2db      	uxtb	r3, r3
 8009994:	e02b      	b.n	80099ee <HAL_TIM_PWM_Start+0x92>
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	2b08      	cmp	r3, #8
 800999a:	d108      	bne.n	80099ae <HAL_TIM_PWM_Start+0x52>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2240      	movs	r2, #64	@ 0x40
 80099a0:	5c9b      	ldrb	r3, [r3, r2]
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	3b01      	subs	r3, #1
 80099a6:	1e5a      	subs	r2, r3, #1
 80099a8:	4193      	sbcs	r3, r2
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	e01f      	b.n	80099ee <HAL_TIM_PWM_Start+0x92>
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	2b0c      	cmp	r3, #12
 80099b2:	d108      	bne.n	80099c6 <HAL_TIM_PWM_Start+0x6a>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2241      	movs	r2, #65	@ 0x41
 80099b8:	5c9b      	ldrb	r3, [r3, r2]
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	3b01      	subs	r3, #1
 80099be:	1e5a      	subs	r2, r3, #1
 80099c0:	4193      	sbcs	r3, r2
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	e013      	b.n	80099ee <HAL_TIM_PWM_Start+0x92>
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	2b10      	cmp	r3, #16
 80099ca:	d108      	bne.n	80099de <HAL_TIM_PWM_Start+0x82>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2242      	movs	r2, #66	@ 0x42
 80099d0:	5c9b      	ldrb	r3, [r3, r2]
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	3b01      	subs	r3, #1
 80099d6:	1e5a      	subs	r2, r3, #1
 80099d8:	4193      	sbcs	r3, r2
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	e007      	b.n	80099ee <HAL_TIM_PWM_Start+0x92>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2243      	movs	r2, #67	@ 0x43
 80099e2:	5c9b      	ldrb	r3, [r3, r2]
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	3b01      	subs	r3, #1
 80099e8:	1e5a      	subs	r2, r3, #1
 80099ea:	4193      	sbcs	r3, r2
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d001      	beq.n	80099f6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e081      	b.n	8009afa <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d104      	bne.n	8009a06 <HAL_TIM_PWM_Start+0xaa>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	223e      	movs	r2, #62	@ 0x3e
 8009a00:	2102      	movs	r1, #2
 8009a02:	5499      	strb	r1, [r3, r2]
 8009a04:	e023      	b.n	8009a4e <HAL_TIM_PWM_Start+0xf2>
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	2b04      	cmp	r3, #4
 8009a0a:	d104      	bne.n	8009a16 <HAL_TIM_PWM_Start+0xba>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	223f      	movs	r2, #63	@ 0x3f
 8009a10:	2102      	movs	r1, #2
 8009a12:	5499      	strb	r1, [r3, r2]
 8009a14:	e01b      	b.n	8009a4e <HAL_TIM_PWM_Start+0xf2>
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	2b08      	cmp	r3, #8
 8009a1a:	d104      	bne.n	8009a26 <HAL_TIM_PWM_Start+0xca>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2240      	movs	r2, #64	@ 0x40
 8009a20:	2102      	movs	r1, #2
 8009a22:	5499      	strb	r1, [r3, r2]
 8009a24:	e013      	b.n	8009a4e <HAL_TIM_PWM_Start+0xf2>
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b0c      	cmp	r3, #12
 8009a2a:	d104      	bne.n	8009a36 <HAL_TIM_PWM_Start+0xda>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2241      	movs	r2, #65	@ 0x41
 8009a30:	2102      	movs	r1, #2
 8009a32:	5499      	strb	r1, [r3, r2]
 8009a34:	e00b      	b.n	8009a4e <HAL_TIM_PWM_Start+0xf2>
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	2b10      	cmp	r3, #16
 8009a3a:	d104      	bne.n	8009a46 <HAL_TIM_PWM_Start+0xea>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2242      	movs	r2, #66	@ 0x42
 8009a40:	2102      	movs	r1, #2
 8009a42:	5499      	strb	r1, [r3, r2]
 8009a44:	e003      	b.n	8009a4e <HAL_TIM_PWM_Start+0xf2>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2243      	movs	r2, #67	@ 0x43
 8009a4a:	2102      	movs	r1, #2
 8009a4c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	6839      	ldr	r1, [r7, #0]
 8009a54:	2201      	movs	r2, #1
 8009a56:	0018      	movs	r0, r3
 8009a58:	f001 fc64 	bl	800b324 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a28      	ldr	r2, [pc, #160]	@ (8009b04 <HAL_TIM_PWM_Start+0x1a8>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d009      	beq.n	8009a7a <HAL_TIM_PWM_Start+0x11e>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a27      	ldr	r2, [pc, #156]	@ (8009b08 <HAL_TIM_PWM_Start+0x1ac>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d004      	beq.n	8009a7a <HAL_TIM_PWM_Start+0x11e>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a25      	ldr	r2, [pc, #148]	@ (8009b0c <HAL_TIM_PWM_Start+0x1b0>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d101      	bne.n	8009a7e <HAL_TIM_PWM_Start+0x122>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e000      	b.n	8009a80 <HAL_TIM_PWM_Start+0x124>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d008      	beq.n	8009a96 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2180      	movs	r1, #128	@ 0x80
 8009a90:	0209      	lsls	r1, r1, #8
 8009a92:	430a      	orrs	r2, r1
 8009a94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a1a      	ldr	r2, [pc, #104]	@ (8009b04 <HAL_TIM_PWM_Start+0x1a8>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d00a      	beq.n	8009ab6 <HAL_TIM_PWM_Start+0x15a>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	2380      	movs	r3, #128	@ 0x80
 8009aa6:	05db      	lsls	r3, r3, #23
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d004      	beq.n	8009ab6 <HAL_TIM_PWM_Start+0x15a>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a17      	ldr	r2, [pc, #92]	@ (8009b10 <HAL_TIM_PWM_Start+0x1b4>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d116      	bne.n	8009ae4 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	4a15      	ldr	r2, [pc, #84]	@ (8009b14 <HAL_TIM_PWM_Start+0x1b8>)
 8009abe:	4013      	ands	r3, r2
 8009ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2b06      	cmp	r3, #6
 8009ac6:	d016      	beq.n	8009af6 <HAL_TIM_PWM_Start+0x19a>
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	2380      	movs	r3, #128	@ 0x80
 8009acc:	025b      	lsls	r3, r3, #9
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d011      	beq.n	8009af6 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2101      	movs	r1, #1
 8009ade:	430a      	orrs	r2, r1
 8009ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ae2:	e008      	b.n	8009af6 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2101      	movs	r1, #1
 8009af0:	430a      	orrs	r2, r1
 8009af2:	601a      	str	r2, [r3, #0]
 8009af4:	e000      	b.n	8009af8 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009af6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	0018      	movs	r0, r3
 8009afc:	46bd      	mov	sp, r7
 8009afe:	b004      	add	sp, #16
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	46c0      	nop			@ (mov r8, r8)
 8009b04:	40012c00 	.word	0x40012c00
 8009b08:	40014400 	.word	0x40014400
 8009b0c:	40014800 	.word	0x40014800
 8009b10:	40000400 	.word	0x40000400
 8009b14:	00010007 	.word	0x00010007

08009b18 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d101      	bne.n	8009b2a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	e056      	b.n	8009bd8 <HAL_TIM_IC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	223d      	movs	r2, #61	@ 0x3d
 8009b2e:	5c9b      	ldrb	r3, [r3, r2]
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d113      	bne.n	8009b5e <HAL_TIM_IC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	223c      	movs	r2, #60	@ 0x3c
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	0018      	movs	r0, r3
 8009b42:	f001 fc13 	bl	800b36c <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d102      	bne.n	8009b54 <HAL_TIM_IC_Init+0x3c>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a23      	ldr	r2, [pc, #140]	@ (8009be0 <HAL_TIM_IC_Init+0xc8>)
 8009b52:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	0010      	movs	r0, r2
 8009b5c:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	223d      	movs	r2, #61	@ 0x3d
 8009b62:	2102      	movs	r1, #2
 8009b64:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	3304      	adds	r3, #4
 8009b6e:	0019      	movs	r1, r3
 8009b70:	0010      	movs	r0, r2
 8009b72:	f000 fefd 	bl	800a970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2248      	movs	r2, #72	@ 0x48
 8009b7a:	2101      	movs	r1, #1
 8009b7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	223e      	movs	r2, #62	@ 0x3e
 8009b82:	2101      	movs	r1, #1
 8009b84:	5499      	strb	r1, [r3, r2]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	223f      	movs	r2, #63	@ 0x3f
 8009b8a:	2101      	movs	r1, #1
 8009b8c:	5499      	strb	r1, [r3, r2]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2240      	movs	r2, #64	@ 0x40
 8009b92:	2101      	movs	r1, #1
 8009b94:	5499      	strb	r1, [r3, r2]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2241      	movs	r2, #65	@ 0x41
 8009b9a:	2101      	movs	r1, #1
 8009b9c:	5499      	strb	r1, [r3, r2]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2242      	movs	r2, #66	@ 0x42
 8009ba2:	2101      	movs	r1, #1
 8009ba4:	5499      	strb	r1, [r3, r2]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2243      	movs	r2, #67	@ 0x43
 8009baa:	2101      	movs	r1, #1
 8009bac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2244      	movs	r2, #68	@ 0x44
 8009bb2:	2101      	movs	r1, #1
 8009bb4:	5499      	strb	r1, [r3, r2]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2245      	movs	r2, #69	@ 0x45
 8009bba:	2101      	movs	r1, #1
 8009bbc:	5499      	strb	r1, [r3, r2]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2246      	movs	r2, #70	@ 0x46
 8009bc2:	2101      	movs	r1, #1
 8009bc4:	5499      	strb	r1, [r3, r2]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2247      	movs	r2, #71	@ 0x47
 8009bca:	2101      	movs	r1, #1
 8009bcc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	223d      	movs	r2, #61	@ 0x3d
 8009bd2:	2101      	movs	r1, #1
 8009bd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	0018      	movs	r0, r3
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	b002      	add	sp, #8
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	08009be5 	.word	0x08009be5

08009be4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009bec:	46c0      	nop			@ (mov r8, r8)
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	b002      	add	sp, #8
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009bfe:	230f      	movs	r3, #15
 8009c00:	18fb      	adds	r3, r7, r3
 8009c02:	2200      	movs	r2, #0
 8009c04:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d104      	bne.n	8009c16 <HAL_TIM_IC_Start_IT+0x22>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	223e      	movs	r2, #62	@ 0x3e
 8009c10:	5c9b      	ldrb	r3, [r3, r2]
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	e023      	b.n	8009c5e <HAL_TIM_IC_Start_IT+0x6a>
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	2b04      	cmp	r3, #4
 8009c1a:	d104      	bne.n	8009c26 <HAL_TIM_IC_Start_IT+0x32>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	223f      	movs	r2, #63	@ 0x3f
 8009c20:	5c9b      	ldrb	r3, [r3, r2]
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	e01b      	b.n	8009c5e <HAL_TIM_IC_Start_IT+0x6a>
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	2b08      	cmp	r3, #8
 8009c2a:	d104      	bne.n	8009c36 <HAL_TIM_IC_Start_IT+0x42>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2240      	movs	r2, #64	@ 0x40
 8009c30:	5c9b      	ldrb	r3, [r3, r2]
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	e013      	b.n	8009c5e <HAL_TIM_IC_Start_IT+0x6a>
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b0c      	cmp	r3, #12
 8009c3a:	d104      	bne.n	8009c46 <HAL_TIM_IC_Start_IT+0x52>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2241      	movs	r2, #65	@ 0x41
 8009c40:	5c9b      	ldrb	r3, [r3, r2]
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	e00b      	b.n	8009c5e <HAL_TIM_IC_Start_IT+0x6a>
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	2b10      	cmp	r3, #16
 8009c4a:	d104      	bne.n	8009c56 <HAL_TIM_IC_Start_IT+0x62>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2242      	movs	r2, #66	@ 0x42
 8009c50:	5c9b      	ldrb	r3, [r3, r2]
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	e003      	b.n	8009c5e <HAL_TIM_IC_Start_IT+0x6a>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2243      	movs	r2, #67	@ 0x43
 8009c5a:	5c9b      	ldrb	r3, [r3, r2]
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	220e      	movs	r2, #14
 8009c60:	18ba      	adds	r2, r7, r2
 8009c62:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d104      	bne.n	8009c74 <HAL_TIM_IC_Start_IT+0x80>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2244      	movs	r2, #68	@ 0x44
 8009c6e:	5c9b      	ldrb	r3, [r3, r2]
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	e013      	b.n	8009c9c <HAL_TIM_IC_Start_IT+0xa8>
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	2b04      	cmp	r3, #4
 8009c78:	d104      	bne.n	8009c84 <HAL_TIM_IC_Start_IT+0x90>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2245      	movs	r2, #69	@ 0x45
 8009c7e:	5c9b      	ldrb	r3, [r3, r2]
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	e00b      	b.n	8009c9c <HAL_TIM_IC_Start_IT+0xa8>
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	2b08      	cmp	r3, #8
 8009c88:	d104      	bne.n	8009c94 <HAL_TIM_IC_Start_IT+0xa0>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2246      	movs	r2, #70	@ 0x46
 8009c8e:	5c9b      	ldrb	r3, [r3, r2]
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	e003      	b.n	8009c9c <HAL_TIM_IC_Start_IT+0xa8>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2247      	movs	r2, #71	@ 0x47
 8009c98:	5c9b      	ldrb	r3, [r3, r2]
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	210d      	movs	r1, #13
 8009c9e:	187a      	adds	r2, r7, r1
 8009ca0:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ca2:	230e      	movs	r3, #14
 8009ca4:	18fb      	adds	r3, r7, r3
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d103      	bne.n	8009cb4 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009cac:	187b      	adds	r3, r7, r1
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d001      	beq.n	8009cb8 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e0c3      	b.n	8009e40 <HAL_TIM_IC_Start_IT+0x24c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d104      	bne.n	8009cc8 <HAL_TIM_IC_Start_IT+0xd4>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	223e      	movs	r2, #62	@ 0x3e
 8009cc2:	2102      	movs	r1, #2
 8009cc4:	5499      	strb	r1, [r3, r2]
 8009cc6:	e023      	b.n	8009d10 <HAL_TIM_IC_Start_IT+0x11c>
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	2b04      	cmp	r3, #4
 8009ccc:	d104      	bne.n	8009cd8 <HAL_TIM_IC_Start_IT+0xe4>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	223f      	movs	r2, #63	@ 0x3f
 8009cd2:	2102      	movs	r1, #2
 8009cd4:	5499      	strb	r1, [r3, r2]
 8009cd6:	e01b      	b.n	8009d10 <HAL_TIM_IC_Start_IT+0x11c>
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	2b08      	cmp	r3, #8
 8009cdc:	d104      	bne.n	8009ce8 <HAL_TIM_IC_Start_IT+0xf4>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2240      	movs	r2, #64	@ 0x40
 8009ce2:	2102      	movs	r1, #2
 8009ce4:	5499      	strb	r1, [r3, r2]
 8009ce6:	e013      	b.n	8009d10 <HAL_TIM_IC_Start_IT+0x11c>
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	2b0c      	cmp	r3, #12
 8009cec:	d104      	bne.n	8009cf8 <HAL_TIM_IC_Start_IT+0x104>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2241      	movs	r2, #65	@ 0x41
 8009cf2:	2102      	movs	r1, #2
 8009cf4:	5499      	strb	r1, [r3, r2]
 8009cf6:	e00b      	b.n	8009d10 <HAL_TIM_IC_Start_IT+0x11c>
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	2b10      	cmp	r3, #16
 8009cfc:	d104      	bne.n	8009d08 <HAL_TIM_IC_Start_IT+0x114>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2242      	movs	r2, #66	@ 0x42
 8009d02:	2102      	movs	r1, #2
 8009d04:	5499      	strb	r1, [r3, r2]
 8009d06:	e003      	b.n	8009d10 <HAL_TIM_IC_Start_IT+0x11c>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2243      	movs	r2, #67	@ 0x43
 8009d0c:	2102      	movs	r1, #2
 8009d0e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d104      	bne.n	8009d20 <HAL_TIM_IC_Start_IT+0x12c>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2244      	movs	r2, #68	@ 0x44
 8009d1a:	2102      	movs	r1, #2
 8009d1c:	5499      	strb	r1, [r3, r2]
 8009d1e:	e013      	b.n	8009d48 <HAL_TIM_IC_Start_IT+0x154>
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	2b04      	cmp	r3, #4
 8009d24:	d104      	bne.n	8009d30 <HAL_TIM_IC_Start_IT+0x13c>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2245      	movs	r2, #69	@ 0x45
 8009d2a:	2102      	movs	r1, #2
 8009d2c:	5499      	strb	r1, [r3, r2]
 8009d2e:	e00b      	b.n	8009d48 <HAL_TIM_IC_Start_IT+0x154>
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	2b08      	cmp	r3, #8
 8009d34:	d104      	bne.n	8009d40 <HAL_TIM_IC_Start_IT+0x14c>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2246      	movs	r2, #70	@ 0x46
 8009d3a:	2102      	movs	r1, #2
 8009d3c:	5499      	strb	r1, [r3, r2]
 8009d3e:	e003      	b.n	8009d48 <HAL_TIM_IC_Start_IT+0x154>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2247      	movs	r2, #71	@ 0x47
 8009d44:	2102      	movs	r1, #2
 8009d46:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	2b0c      	cmp	r3, #12
 8009d4c:	d02a      	beq.n	8009da4 <HAL_TIM_IC_Start_IT+0x1b0>
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	2b0c      	cmp	r3, #12
 8009d52:	d830      	bhi.n	8009db6 <HAL_TIM_IC_Start_IT+0x1c2>
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	2b08      	cmp	r3, #8
 8009d58:	d01b      	beq.n	8009d92 <HAL_TIM_IC_Start_IT+0x19e>
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	2b08      	cmp	r3, #8
 8009d5e:	d82a      	bhi.n	8009db6 <HAL_TIM_IC_Start_IT+0x1c2>
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d003      	beq.n	8009d6e <HAL_TIM_IC_Start_IT+0x17a>
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	2b04      	cmp	r3, #4
 8009d6a:	d009      	beq.n	8009d80 <HAL_TIM_IC_Start_IT+0x18c>
 8009d6c:	e023      	b.n	8009db6 <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68da      	ldr	r2, [r3, #12]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2102      	movs	r1, #2
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	60da      	str	r2, [r3, #12]
      break;
 8009d7e:	e01f      	b.n	8009dc0 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68da      	ldr	r2, [r3, #12]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2104      	movs	r1, #4
 8009d8c:	430a      	orrs	r2, r1
 8009d8e:	60da      	str	r2, [r3, #12]
      break;
 8009d90:	e016      	b.n	8009dc0 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68da      	ldr	r2, [r3, #12]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2108      	movs	r1, #8
 8009d9e:	430a      	orrs	r2, r1
 8009da0:	60da      	str	r2, [r3, #12]
      break;
 8009da2:	e00d      	b.n	8009dc0 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68da      	ldr	r2, [r3, #12]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2110      	movs	r1, #16
 8009db0:	430a      	orrs	r2, r1
 8009db2:	60da      	str	r2, [r3, #12]
      break;
 8009db4:	e004      	b.n	8009dc0 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 8009db6:	230f      	movs	r3, #15
 8009db8:	18fb      	adds	r3, r7, r3
 8009dba:	2201      	movs	r2, #1
 8009dbc:	701a      	strb	r2, [r3, #0]
      break;
 8009dbe:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8009dc0:	230f      	movs	r3, #15
 8009dc2:	18fb      	adds	r3, r7, r3
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d137      	bne.n	8009e3a <HAL_TIM_IC_Start_IT+0x246>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	6839      	ldr	r1, [r7, #0]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	0018      	movs	r0, r3
 8009dd4:	f001 faa6 	bl	800b324 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a1a      	ldr	r2, [pc, #104]	@ (8009e48 <HAL_TIM_IC_Start_IT+0x254>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d00a      	beq.n	8009df8 <HAL_TIM_IC_Start_IT+0x204>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	2380      	movs	r3, #128	@ 0x80
 8009de8:	05db      	lsls	r3, r3, #23
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d004      	beq.n	8009df8 <HAL_TIM_IC_Start_IT+0x204>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a16      	ldr	r2, [pc, #88]	@ (8009e4c <HAL_TIM_IC_Start_IT+0x258>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d116      	bne.n	8009e26 <HAL_TIM_IC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	4a14      	ldr	r2, [pc, #80]	@ (8009e50 <HAL_TIM_IC_Start_IT+0x25c>)
 8009e00:	4013      	ands	r3, r2
 8009e02:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	2b06      	cmp	r3, #6
 8009e08:	d016      	beq.n	8009e38 <HAL_TIM_IC_Start_IT+0x244>
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	2380      	movs	r3, #128	@ 0x80
 8009e0e:	025b      	lsls	r3, r3, #9
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d011      	beq.n	8009e38 <HAL_TIM_IC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2101      	movs	r1, #1
 8009e20:	430a      	orrs	r2, r1
 8009e22:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e24:	e008      	b.n	8009e38 <HAL_TIM_IC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2101      	movs	r1, #1
 8009e32:	430a      	orrs	r2, r1
 8009e34:	601a      	str	r2, [r3, #0]
 8009e36:	e000      	b.n	8009e3a <HAL_TIM_IC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e38:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8009e3a:	230f      	movs	r3, #15
 8009e3c:	18fb      	adds	r3, r7, r3
 8009e3e:	781b      	ldrb	r3, [r3, #0]
}
 8009e40:	0018      	movs	r0, r3
 8009e42:	46bd      	mov	sp, r7
 8009e44:	b004      	add	sp, #16
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	40012c00 	.word	0x40012c00
 8009e4c:	40000400 	.word	0x40000400
 8009e50:	00010007 	.word	0x00010007

08009e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	2202      	movs	r2, #2
 8009e70:	4013      	ands	r3, r2
 8009e72:	d027      	beq.n	8009ec4 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2202      	movs	r2, #2
 8009e78:	4013      	ands	r3, r2
 8009e7a:	d023      	beq.n	8009ec4 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2203      	movs	r2, #3
 8009e82:	4252      	negs	r2, r2
 8009e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	699b      	ldr	r3, [r3, #24]
 8009e92:	2203      	movs	r2, #3
 8009e94:	4013      	ands	r3, r2
 8009e96:	d006      	beq.n	8009ea6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2294      	movs	r2, #148	@ 0x94
 8009e9c:	589b      	ldr	r3, [r3, r2]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	0010      	movs	r0, r2
 8009ea2:	4798      	blx	r3
 8009ea4:	e00b      	b.n	8009ebe <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	229c      	movs	r2, #156	@ 0x9c
 8009eaa:	589b      	ldr	r3, [r3, r2]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	0010      	movs	r0, r2
 8009eb0:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	22a0      	movs	r2, #160	@ 0xa0
 8009eb6:	589b      	ldr	r3, [r3, r2]
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	0010      	movs	r0, r2
 8009ebc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	2204      	movs	r2, #4
 8009ec8:	4013      	ands	r3, r2
 8009eca:	d028      	beq.n	8009f1e <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2204      	movs	r2, #4
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	d024      	beq.n	8009f1e <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2205      	movs	r2, #5
 8009eda:	4252      	negs	r2, r2
 8009edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	699a      	ldr	r2, [r3, #24]
 8009eea:	23c0      	movs	r3, #192	@ 0xc0
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	4013      	ands	r3, r2
 8009ef0:	d006      	beq.n	8009f00 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2294      	movs	r2, #148	@ 0x94
 8009ef6:	589b      	ldr	r3, [r3, r2]
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	0010      	movs	r0, r2
 8009efc:	4798      	blx	r3
 8009efe:	e00b      	b.n	8009f18 <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	229c      	movs	r2, #156	@ 0x9c
 8009f04:	589b      	ldr	r3, [r3, r2]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	0010      	movs	r0, r2
 8009f0a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	22a0      	movs	r2, #160	@ 0xa0
 8009f10:	589b      	ldr	r3, [r3, r2]
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	0010      	movs	r0, r2
 8009f16:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	2208      	movs	r2, #8
 8009f22:	4013      	ands	r3, r2
 8009f24:	d027      	beq.n	8009f76 <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2208      	movs	r2, #8
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	d023      	beq.n	8009f76 <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2209      	movs	r2, #9
 8009f34:	4252      	negs	r2, r2
 8009f36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2204      	movs	r2, #4
 8009f3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	69db      	ldr	r3, [r3, #28]
 8009f44:	2203      	movs	r2, #3
 8009f46:	4013      	ands	r3, r2
 8009f48:	d006      	beq.n	8009f58 <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2294      	movs	r2, #148	@ 0x94
 8009f4e:	589b      	ldr	r3, [r3, r2]
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	0010      	movs	r0, r2
 8009f54:	4798      	blx	r3
 8009f56:	e00b      	b.n	8009f70 <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	229c      	movs	r2, #156	@ 0x9c
 8009f5c:	589b      	ldr	r3, [r3, r2]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	0010      	movs	r0, r2
 8009f62:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	22a0      	movs	r2, #160	@ 0xa0
 8009f68:	589b      	ldr	r3, [r3, r2]
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	0010      	movs	r0, r2
 8009f6e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	2210      	movs	r2, #16
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	d028      	beq.n	8009fd0 <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2210      	movs	r2, #16
 8009f82:	4013      	ands	r3, r2
 8009f84:	d024      	beq.n	8009fd0 <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2211      	movs	r2, #17
 8009f8c:	4252      	negs	r2, r2
 8009f8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2208      	movs	r2, #8
 8009f94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	69da      	ldr	r2, [r3, #28]
 8009f9c:	23c0      	movs	r3, #192	@ 0xc0
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	d006      	beq.n	8009fb2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2294      	movs	r2, #148	@ 0x94
 8009fa8:	589b      	ldr	r3, [r3, r2]
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	0010      	movs	r0, r2
 8009fae:	4798      	blx	r3
 8009fb0:	e00b      	b.n	8009fca <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	229c      	movs	r2, #156	@ 0x9c
 8009fb6:	589b      	ldr	r3, [r3, r2]
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	0010      	movs	r0, r2
 8009fbc:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	22a0      	movs	r2, #160	@ 0xa0
 8009fc2:	589b      	ldr	r3, [r3, r2]
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	0010      	movs	r0, r2
 8009fc8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	d00e      	beq.n	8009ff6 <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	4013      	ands	r3, r2
 8009fde:	d00a      	beq.n	8009ff6 <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2202      	movs	r2, #2
 8009fe6:	4252      	negs	r2, r2
 8009fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2284      	movs	r2, #132	@ 0x84
 8009fee:	589b      	ldr	r3, [r3, r2]
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	0010      	movs	r0, r2
 8009ff4:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	2280      	movs	r2, #128	@ 0x80
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	d104      	bne.n	800a008 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009ffe:	68ba      	ldr	r2, [r7, #8]
 800a000:	2380      	movs	r3, #128	@ 0x80
 800a002:	019b      	lsls	r3, r3, #6
 800a004:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a006:	d00d      	beq.n	800a024 <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2280      	movs	r2, #128	@ 0x80
 800a00c:	4013      	ands	r3, r2
 800a00e:	d009      	beq.n	800a024 <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a22      	ldr	r2, [pc, #136]	@ (800a0a0 <HAL_TIM_IRQHandler+0x24c>)
 800a016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	22b4      	movs	r2, #180	@ 0xb4
 800a01c:	589b      	ldr	r3, [r3, r2]
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	0010      	movs	r0, r2
 800a022:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	2380      	movs	r3, #128	@ 0x80
 800a028:	005b      	lsls	r3, r3, #1
 800a02a:	4013      	ands	r3, r2
 800a02c:	d00d      	beq.n	800a04a <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2280      	movs	r2, #128	@ 0x80
 800a032:	4013      	ands	r3, r2
 800a034:	d009      	beq.n	800a04a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a1a      	ldr	r2, [pc, #104]	@ (800a0a4 <HAL_TIM_IRQHandler+0x250>)
 800a03c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	22b8      	movs	r2, #184	@ 0xb8
 800a042:	589b      	ldr	r3, [r3, r2]
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	0010      	movs	r0, r2
 800a048:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	2240      	movs	r2, #64	@ 0x40
 800a04e:	4013      	ands	r3, r2
 800a050:	d00e      	beq.n	800a070 <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2240      	movs	r2, #64	@ 0x40
 800a056:	4013      	ands	r3, r2
 800a058:	d00a      	beq.n	800a070 <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2241      	movs	r2, #65	@ 0x41
 800a060:	4252      	negs	r2, r2
 800a062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	228c      	movs	r2, #140	@ 0x8c
 800a068:	589b      	ldr	r3, [r3, r2]
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	0010      	movs	r0, r2
 800a06e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	2220      	movs	r2, #32
 800a074:	4013      	ands	r3, r2
 800a076:	d00e      	beq.n	800a096 <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2220      	movs	r2, #32
 800a07c:	4013      	ands	r3, r2
 800a07e:	d00a      	beq.n	800a096 <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2221      	movs	r2, #33	@ 0x21
 800a086:	4252      	negs	r2, r2
 800a088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	22ac      	movs	r2, #172	@ 0xac
 800a08e:	589b      	ldr	r3, [r3, r2]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	0010      	movs	r0, r2
 800a094:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a096:	46c0      	nop			@ (mov r8, r8)
 800a098:	46bd      	mov	sp, r7
 800a09a:	b004      	add	sp, #16
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	46c0      	nop			@ (mov r8, r8)
 800a0a0:	ffffdf7f 	.word	0xffffdf7f
 800a0a4:	fffffeff 	.word	0xfffffeff

0800a0a8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b086      	sub	sp, #24
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0b4:	2317      	movs	r3, #23
 800a0b6:	18fb      	adds	r3, r7, r3
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	223c      	movs	r2, #60	@ 0x3c
 800a0c0:	5c9b      	ldrb	r3, [r3, r2]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d101      	bne.n	800a0ca <HAL_TIM_OC_ConfigChannel+0x22>
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	e048      	b.n	800a15c <HAL_TIM_OC_ConfigChannel+0xb4>
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	223c      	movs	r2, #60	@ 0x3c
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2b14      	cmp	r3, #20
 800a0d6:	d835      	bhi.n	800a144 <HAL_TIM_OC_ConfigChannel+0x9c>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	009a      	lsls	r2, r3, #2
 800a0dc:	4b21      	ldr	r3, [pc, #132]	@ (800a164 <HAL_TIM_OC_ConfigChannel+0xbc>)
 800a0de:	18d3      	adds	r3, r2, r3
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	0011      	movs	r1, r2
 800a0ec:	0018      	movs	r0, r3
 800a0ee:	f000 fcc3 	bl	800aa78 <TIM_OC1_SetConfig>
      break;
 800a0f2:	e02c      	b.n	800a14e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	68ba      	ldr	r2, [r7, #8]
 800a0fa:	0011      	movs	r1, r2
 800a0fc:	0018      	movs	r0, r3
 800a0fe:	f000 fd3b 	bl	800ab78 <TIM_OC2_SetConfig>
      break;
 800a102:	e024      	b.n	800a14e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68ba      	ldr	r2, [r7, #8]
 800a10a:	0011      	movs	r1, r2
 800a10c:	0018      	movs	r0, r3
 800a10e:	f000 fdb1 	bl	800ac74 <TIM_OC3_SetConfig>
      break;
 800a112:	e01c      	b.n	800a14e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68ba      	ldr	r2, [r7, #8]
 800a11a:	0011      	movs	r1, r2
 800a11c:	0018      	movs	r0, r3
 800a11e:	f000 fe2b 	bl	800ad78 <TIM_OC4_SetConfig>
      break;
 800a122:	e014      	b.n	800a14e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	0011      	movs	r1, r2
 800a12c:	0018      	movs	r0, r3
 800a12e:	f000 fe87 	bl	800ae40 <TIM_OC5_SetConfig>
      break;
 800a132:	e00c      	b.n	800a14e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	0011      	movs	r1, r2
 800a13c:	0018      	movs	r0, r3
 800a13e:	f000 fed9 	bl	800aef4 <TIM_OC6_SetConfig>
      break;
 800a142:	e004      	b.n	800a14e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a144:	2317      	movs	r3, #23
 800a146:	18fb      	adds	r3, r7, r3
 800a148:	2201      	movs	r2, #1
 800a14a:	701a      	strb	r2, [r3, #0]
      break;
 800a14c:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	223c      	movs	r2, #60	@ 0x3c
 800a152:	2100      	movs	r1, #0
 800a154:	5499      	strb	r1, [r3, r2]

  return status;
 800a156:	2317      	movs	r3, #23
 800a158:	18fb      	adds	r3, r7, r3
 800a15a:	781b      	ldrb	r3, [r3, #0]
}
 800a15c:	0018      	movs	r0, r3
 800a15e:	46bd      	mov	sp, r7
 800a160:	b006      	add	sp, #24
 800a162:	bd80      	pop	{r7, pc}
 800a164:	0800d838 	.word	0x0800d838

0800a168 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b086      	sub	sp, #24
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a174:	2317      	movs	r3, #23
 800a176:	18fb      	adds	r3, r7, r3
 800a178:	2200      	movs	r2, #0
 800a17a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	223c      	movs	r2, #60	@ 0x3c
 800a180:	5c9b      	ldrb	r3, [r3, r2]
 800a182:	2b01      	cmp	r3, #1
 800a184:	d101      	bne.n	800a18a <HAL_TIM_IC_ConfigChannel+0x22>
 800a186:	2302      	movs	r3, #2
 800a188:	e08c      	b.n	800a2a4 <HAL_TIM_IC_ConfigChannel+0x13c>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	223c      	movs	r2, #60	@ 0x3c
 800a18e:	2101      	movs	r1, #1
 800a190:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d11b      	bne.n	800a1d0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800a1a8:	f000 ff02 	bl	800afb0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	699a      	ldr	r2, [r3, #24]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	210c      	movs	r1, #12
 800a1b8:	438a      	bics	r2, r1
 800a1ba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	6999      	ldr	r1, [r3, #24]
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	689a      	ldr	r2, [r3, #8]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	430a      	orrs	r2, r1
 800a1cc:	619a      	str	r2, [r3, #24]
 800a1ce:	e062      	b.n	800a296 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2b04      	cmp	r3, #4
 800a1d4:	d11c      	bne.n	800a210 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800a1e6:	f000 ff67 	bl	800b0b8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	699a      	ldr	r2, [r3, #24]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	492d      	ldr	r1, [pc, #180]	@ (800a2ac <HAL_TIM_IC_ConfigChannel+0x144>)
 800a1f6:	400a      	ands	r2, r1
 800a1f8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	6999      	ldr	r1, [r3, #24]
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	021a      	lsls	r2, r3, #8
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	430a      	orrs	r2, r1
 800a20c:	619a      	str	r2, [r3, #24]
 800a20e:	e042      	b.n	800a296 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b08      	cmp	r3, #8
 800a214:	d11b      	bne.n	800a24e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800a226:	f000 ffbb 	bl	800b1a0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	69da      	ldr	r2, [r3, #28]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	210c      	movs	r1, #12
 800a236:	438a      	bics	r2, r1
 800a238:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	69d9      	ldr	r1, [r3, #28]
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	689a      	ldr	r2, [r3, #8]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	430a      	orrs	r2, r1
 800a24a:	61da      	str	r2, [r3, #28]
 800a24c:	e023      	b.n	800a296 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2b0c      	cmp	r3, #12
 800a252:	d11c      	bne.n	800a28e <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800a264:	f000 ffdc 	bl	800b220 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	69da      	ldr	r2, [r3, #28]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	490e      	ldr	r1, [pc, #56]	@ (800a2ac <HAL_TIM_IC_ConfigChannel+0x144>)
 800a274:	400a      	ands	r2, r1
 800a276:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	69d9      	ldr	r1, [r3, #28]
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	021a      	lsls	r2, r3, #8
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	430a      	orrs	r2, r1
 800a28a:	61da      	str	r2, [r3, #28]
 800a28c:	e003      	b.n	800a296 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800a28e:	2317      	movs	r3, #23
 800a290:	18fb      	adds	r3, r7, r3
 800a292:	2201      	movs	r2, #1
 800a294:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	223c      	movs	r2, #60	@ 0x3c
 800a29a:	2100      	movs	r1, #0
 800a29c:	5499      	strb	r1, [r3, r2]

  return status;
 800a29e:	2317      	movs	r3, #23
 800a2a0:	18fb      	adds	r3, r7, r3
 800a2a2:	781b      	ldrb	r3, [r3, #0]
}
 800a2a4:	0018      	movs	r0, r3
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	b006      	add	sp, #24
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	fffff3ff 	.word	0xfffff3ff

0800a2b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2bc:	2317      	movs	r3, #23
 800a2be:	18fb      	adds	r3, r7, r3
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	223c      	movs	r2, #60	@ 0x3c
 800a2c8:	5c9b      	ldrb	r3, [r3, r2]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d101      	bne.n	800a2d2 <HAL_TIM_PWM_ConfigChannel+0x22>
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	e0e5      	b.n	800a49e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	223c      	movs	r2, #60	@ 0x3c
 800a2d6:	2101      	movs	r1, #1
 800a2d8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2b14      	cmp	r3, #20
 800a2de:	d900      	bls.n	800a2e2 <HAL_TIM_PWM_ConfigChannel+0x32>
 800a2e0:	e0d1      	b.n	800a486 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	009a      	lsls	r2, r3, #2
 800a2e6:	4b70      	ldr	r3, [pc, #448]	@ (800a4a8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a2e8:	18d3      	adds	r3, r2, r3
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	0011      	movs	r1, r2
 800a2f6:	0018      	movs	r0, r3
 800a2f8:	f000 fbbe 	bl	800aa78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	699a      	ldr	r2, [r3, #24]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2108      	movs	r1, #8
 800a308:	430a      	orrs	r2, r1
 800a30a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	699a      	ldr	r2, [r3, #24]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2104      	movs	r1, #4
 800a318:	438a      	bics	r2, r1
 800a31a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	6999      	ldr	r1, [r3, #24]
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	691a      	ldr	r2, [r3, #16]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	430a      	orrs	r2, r1
 800a32c:	619a      	str	r2, [r3, #24]
      break;
 800a32e:	e0af      	b.n	800a490 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	68ba      	ldr	r2, [r7, #8]
 800a336:	0011      	movs	r1, r2
 800a338:	0018      	movs	r0, r3
 800a33a:	f000 fc1d 	bl	800ab78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	699a      	ldr	r2, [r3, #24]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2180      	movs	r1, #128	@ 0x80
 800a34a:	0109      	lsls	r1, r1, #4
 800a34c:	430a      	orrs	r2, r1
 800a34e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	699a      	ldr	r2, [r3, #24]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4954      	ldr	r1, [pc, #336]	@ (800a4ac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a35c:	400a      	ands	r2, r1
 800a35e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	6999      	ldr	r1, [r3, #24]
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	021a      	lsls	r2, r3, #8
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	430a      	orrs	r2, r1
 800a372:	619a      	str	r2, [r3, #24]
      break;
 800a374:	e08c      	b.n	800a490 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68ba      	ldr	r2, [r7, #8]
 800a37c:	0011      	movs	r1, r2
 800a37e:	0018      	movs	r0, r3
 800a380:	f000 fc78 	bl	800ac74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	69da      	ldr	r2, [r3, #28]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2108      	movs	r1, #8
 800a390:	430a      	orrs	r2, r1
 800a392:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	69da      	ldr	r2, [r3, #28]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2104      	movs	r1, #4
 800a3a0:	438a      	bics	r2, r1
 800a3a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	69d9      	ldr	r1, [r3, #28]
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	691a      	ldr	r2, [r3, #16]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	430a      	orrs	r2, r1
 800a3b4:	61da      	str	r2, [r3, #28]
      break;
 800a3b6:	e06b      	b.n	800a490 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68ba      	ldr	r2, [r7, #8]
 800a3be:	0011      	movs	r1, r2
 800a3c0:	0018      	movs	r0, r3
 800a3c2:	f000 fcd9 	bl	800ad78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	69da      	ldr	r2, [r3, #28]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2180      	movs	r1, #128	@ 0x80
 800a3d2:	0109      	lsls	r1, r1, #4
 800a3d4:	430a      	orrs	r2, r1
 800a3d6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	69da      	ldr	r2, [r3, #28]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4932      	ldr	r1, [pc, #200]	@ (800a4ac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a3e4:	400a      	ands	r2, r1
 800a3e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	69d9      	ldr	r1, [r3, #28]
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	021a      	lsls	r2, r3, #8
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	430a      	orrs	r2, r1
 800a3fa:	61da      	str	r2, [r3, #28]
      break;
 800a3fc:	e048      	b.n	800a490 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	68ba      	ldr	r2, [r7, #8]
 800a404:	0011      	movs	r1, r2
 800a406:	0018      	movs	r0, r3
 800a408:	f000 fd1a 	bl	800ae40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2108      	movs	r1, #8
 800a418:	430a      	orrs	r2, r1
 800a41a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2104      	movs	r1, #4
 800a428:	438a      	bics	r2, r1
 800a42a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	691a      	ldr	r2, [r3, #16]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	430a      	orrs	r2, r1
 800a43c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a43e:	e027      	b.n	800a490 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68ba      	ldr	r2, [r7, #8]
 800a446:	0011      	movs	r1, r2
 800a448:	0018      	movs	r0, r3
 800a44a:	f000 fd53 	bl	800aef4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2180      	movs	r1, #128	@ 0x80
 800a45a:	0109      	lsls	r1, r1, #4
 800a45c:	430a      	orrs	r2, r1
 800a45e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4910      	ldr	r1, [pc, #64]	@ (800a4ac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a46c:	400a      	ands	r2, r1
 800a46e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	021a      	lsls	r2, r3, #8
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	430a      	orrs	r2, r1
 800a482:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a484:	e004      	b.n	800a490 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800a486:	2317      	movs	r3, #23
 800a488:	18fb      	adds	r3, r7, r3
 800a48a:	2201      	movs	r2, #1
 800a48c:	701a      	strb	r2, [r3, #0]
      break;
 800a48e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	223c      	movs	r2, #60	@ 0x3c
 800a494:	2100      	movs	r1, #0
 800a496:	5499      	strb	r1, [r3, r2]

  return status;
 800a498:	2317      	movs	r3, #23
 800a49a:	18fb      	adds	r3, r7, r3
 800a49c:	781b      	ldrb	r3, [r3, #0]
}
 800a49e:	0018      	movs	r0, r3
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	b006      	add	sp, #24
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	46c0      	nop			@ (mov r8, r8)
 800a4a8:	0800d88c 	.word	0x0800d88c
 800a4ac:	fffffbff 	.word	0xfffffbff

0800a4b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4ba:	230f      	movs	r3, #15
 800a4bc:	18fb      	adds	r3, r7, r3
 800a4be:	2200      	movs	r2, #0
 800a4c0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	223c      	movs	r2, #60	@ 0x3c
 800a4c6:	5c9b      	ldrb	r3, [r3, r2]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d101      	bne.n	800a4d0 <HAL_TIM_ConfigClockSource+0x20>
 800a4cc:	2302      	movs	r3, #2
 800a4ce:	e0bc      	b.n	800a64a <HAL_TIM_ConfigClockSource+0x19a>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	223c      	movs	r2, #60	@ 0x3c
 800a4d4:	2101      	movs	r1, #1
 800a4d6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	223d      	movs	r2, #61	@ 0x3d
 800a4dc:	2102      	movs	r1, #2
 800a4de:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	4a5a      	ldr	r2, [pc, #360]	@ (800a654 <HAL_TIM_ConfigClockSource+0x1a4>)
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	4a59      	ldr	r2, [pc, #356]	@ (800a658 <HAL_TIM_ConfigClockSource+0x1a8>)
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2280      	movs	r2, #128	@ 0x80
 800a506:	0192      	lsls	r2, r2, #6
 800a508:	4293      	cmp	r3, r2
 800a50a:	d040      	beq.n	800a58e <HAL_TIM_ConfigClockSource+0xde>
 800a50c:	2280      	movs	r2, #128	@ 0x80
 800a50e:	0192      	lsls	r2, r2, #6
 800a510:	4293      	cmp	r3, r2
 800a512:	d900      	bls.n	800a516 <HAL_TIM_ConfigClockSource+0x66>
 800a514:	e088      	b.n	800a628 <HAL_TIM_ConfigClockSource+0x178>
 800a516:	2280      	movs	r2, #128	@ 0x80
 800a518:	0152      	lsls	r2, r2, #5
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d100      	bne.n	800a520 <HAL_TIM_ConfigClockSource+0x70>
 800a51e:	e088      	b.n	800a632 <HAL_TIM_ConfigClockSource+0x182>
 800a520:	2280      	movs	r2, #128	@ 0x80
 800a522:	0152      	lsls	r2, r2, #5
 800a524:	4293      	cmp	r3, r2
 800a526:	d900      	bls.n	800a52a <HAL_TIM_ConfigClockSource+0x7a>
 800a528:	e07e      	b.n	800a628 <HAL_TIM_ConfigClockSource+0x178>
 800a52a:	2b70      	cmp	r3, #112	@ 0x70
 800a52c:	d018      	beq.n	800a560 <HAL_TIM_ConfigClockSource+0xb0>
 800a52e:	d900      	bls.n	800a532 <HAL_TIM_ConfigClockSource+0x82>
 800a530:	e07a      	b.n	800a628 <HAL_TIM_ConfigClockSource+0x178>
 800a532:	2b60      	cmp	r3, #96	@ 0x60
 800a534:	d04f      	beq.n	800a5d6 <HAL_TIM_ConfigClockSource+0x126>
 800a536:	d900      	bls.n	800a53a <HAL_TIM_ConfigClockSource+0x8a>
 800a538:	e076      	b.n	800a628 <HAL_TIM_ConfigClockSource+0x178>
 800a53a:	2b50      	cmp	r3, #80	@ 0x50
 800a53c:	d03b      	beq.n	800a5b6 <HAL_TIM_ConfigClockSource+0x106>
 800a53e:	d900      	bls.n	800a542 <HAL_TIM_ConfigClockSource+0x92>
 800a540:	e072      	b.n	800a628 <HAL_TIM_ConfigClockSource+0x178>
 800a542:	2b40      	cmp	r3, #64	@ 0x40
 800a544:	d057      	beq.n	800a5f6 <HAL_TIM_ConfigClockSource+0x146>
 800a546:	d900      	bls.n	800a54a <HAL_TIM_ConfigClockSource+0x9a>
 800a548:	e06e      	b.n	800a628 <HAL_TIM_ConfigClockSource+0x178>
 800a54a:	2b30      	cmp	r3, #48	@ 0x30
 800a54c:	d063      	beq.n	800a616 <HAL_TIM_ConfigClockSource+0x166>
 800a54e:	d86b      	bhi.n	800a628 <HAL_TIM_ConfigClockSource+0x178>
 800a550:	2b20      	cmp	r3, #32
 800a552:	d060      	beq.n	800a616 <HAL_TIM_ConfigClockSource+0x166>
 800a554:	d868      	bhi.n	800a628 <HAL_TIM_ConfigClockSource+0x178>
 800a556:	2b00      	cmp	r3, #0
 800a558:	d05d      	beq.n	800a616 <HAL_TIM_ConfigClockSource+0x166>
 800a55a:	2b10      	cmp	r3, #16
 800a55c:	d05b      	beq.n	800a616 <HAL_TIM_ConfigClockSource+0x166>
 800a55e:	e063      	b.n	800a628 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a570:	f000 feb8 	bl	800b2e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	2277      	movs	r2, #119	@ 0x77
 800a580:	4313      	orrs	r3, r2
 800a582:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	609a      	str	r2, [r3, #8]
      break;
 800a58c:	e052      	b.n	800a634 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a59e:	f000 fea1 	bl	800b2e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	689a      	ldr	r2, [r3, #8]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2180      	movs	r1, #128	@ 0x80
 800a5ae:	01c9      	lsls	r1, r1, #7
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	609a      	str	r2, [r3, #8]
      break;
 800a5b4:	e03e      	b.n	800a634 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5c2:	001a      	movs	r2, r3
 800a5c4:	f000 fd4a 	bl	800b05c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2150      	movs	r1, #80	@ 0x50
 800a5ce:	0018      	movs	r0, r3
 800a5d0:	f000 fe6c 	bl	800b2ac <TIM_ITRx_SetConfig>
      break;
 800a5d4:	e02e      	b.n	800a634 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a5e2:	001a      	movs	r2, r3
 800a5e4:	f000 fdaa 	bl	800b13c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2160      	movs	r1, #96	@ 0x60
 800a5ee:	0018      	movs	r0, r3
 800a5f0:	f000 fe5c 	bl	800b2ac <TIM_ITRx_SetConfig>
      break;
 800a5f4:	e01e      	b.n	800a634 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a602:	001a      	movs	r2, r3
 800a604:	f000 fd2a 	bl	800b05c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2140      	movs	r1, #64	@ 0x40
 800a60e:	0018      	movs	r0, r3
 800a610:	f000 fe4c 	bl	800b2ac <TIM_ITRx_SetConfig>
      break;
 800a614:	e00e      	b.n	800a634 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	0019      	movs	r1, r3
 800a620:	0010      	movs	r0, r2
 800a622:	f000 fe43 	bl	800b2ac <TIM_ITRx_SetConfig>
      break;
 800a626:	e005      	b.n	800a634 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800a628:	230f      	movs	r3, #15
 800a62a:	18fb      	adds	r3, r7, r3
 800a62c:	2201      	movs	r2, #1
 800a62e:	701a      	strb	r2, [r3, #0]
      break;
 800a630:	e000      	b.n	800a634 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800a632:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	223d      	movs	r2, #61	@ 0x3d
 800a638:	2101      	movs	r1, #1
 800a63a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	223c      	movs	r2, #60	@ 0x3c
 800a640:	2100      	movs	r1, #0
 800a642:	5499      	strb	r1, [r3, r2]

  return status;
 800a644:	230f      	movs	r3, #15
 800a646:	18fb      	adds	r3, r7, r3
 800a648:	781b      	ldrb	r3, [r3, #0]
}
 800a64a:	0018      	movs	r0, r3
 800a64c:	46bd      	mov	sp, r7
 800a64e:	b004      	add	sp, #16
 800a650:	bd80      	pop	{r7, pc}
 800a652:	46c0      	nop			@ (mov r8, r8)
 800a654:	ffceff88 	.word	0xffceff88
 800a658:	ffff00ff 	.word	0xffff00ff

0800a65c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a666:	2300      	movs	r3, #0
 800a668:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	2b0c      	cmp	r3, #12
 800a66e:	d01e      	beq.n	800a6ae <HAL_TIM_ReadCapturedValue+0x52>
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	2b0c      	cmp	r3, #12
 800a674:	d820      	bhi.n	800a6b8 <HAL_TIM_ReadCapturedValue+0x5c>
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	2b08      	cmp	r3, #8
 800a67a:	d013      	beq.n	800a6a4 <HAL_TIM_ReadCapturedValue+0x48>
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	2b08      	cmp	r3, #8
 800a680:	d81a      	bhi.n	800a6b8 <HAL_TIM_ReadCapturedValue+0x5c>
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d003      	beq.n	800a690 <HAL_TIM_ReadCapturedValue+0x34>
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	2b04      	cmp	r3, #4
 800a68c:	d005      	beq.n	800a69a <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800a68e:	e013      	b.n	800a6b8 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a696:	60fb      	str	r3, [r7, #12]
      break;
 800a698:	e00f      	b.n	800a6ba <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6a0:	60fb      	str	r3, [r7, #12]
      break;
 800a6a2:	e00a      	b.n	800a6ba <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6aa:	60fb      	str	r3, [r7, #12]
      break;
 800a6ac:	e005      	b.n	800a6ba <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6b4:	60fb      	str	r3, [r7, #12]
      break;
 800a6b6:	e000      	b.n	800a6ba <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 800a6b8:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
}
 800a6bc:	0018      	movs	r0, r3
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	b004      	add	sp, #16
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a6cc:	46c0      	nop			@ (mov r8, r8)
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	b002      	add	sp, #8
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a6dc:	46c0      	nop			@ (mov r8, r8)
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	b002      	add	sp, #8
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a6ec:	46c0      	nop			@ (mov r8, r8)
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	b002      	add	sp, #8
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a6fc:	46c0      	nop			@ (mov r8, r8)
 800a6fe:	46bd      	mov	sp, r7
 800a700:	b002      	add	sp, #8
 800a702:	bd80      	pop	{r7, pc}

0800a704 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a70c:	46c0      	nop			@ (mov r8, r8)
 800a70e:	46bd      	mov	sp, r7
 800a710:	b002      	add	sp, #8
 800a712:	bd80      	pop	{r7, pc}

0800a714 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a71c:	46c0      	nop			@ (mov r8, r8)
 800a71e:	46bd      	mov	sp, r7
 800a720:	b002      	add	sp, #8
 800a722:	bd80      	pop	{r7, pc}

0800a724 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a72c:	46c0      	nop			@ (mov r8, r8)
 800a72e:	46bd      	mov	sp, r7
 800a730:	b002      	add	sp, #8
 800a732:	bd80      	pop	{r7, pc}

0800a734 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a73c:	46c0      	nop			@ (mov r8, r8)
 800a73e:	46bd      	mov	sp, r7
 800a740:	b002      	add	sp, #8
 800a742:	bd80      	pop	{r7, pc}

0800a744 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a74c:	46c0      	nop			@ (mov r8, r8)
 800a74e:	46bd      	mov	sp, r7
 800a750:	b002      	add	sp, #8
 800a752:	bd80      	pop	{r7, pc}

0800a754 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a75c:	46c0      	nop			@ (mov r8, r8)
 800a75e:	46bd      	mov	sp, r7
 800a760:	b002      	add	sp, #8
 800a762:	bd80      	pop	{r7, pc}

0800a764 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b086      	sub	sp, #24
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	607a      	str	r2, [r7, #4]
 800a76e:	230b      	movs	r3, #11
 800a770:	18fb      	adds	r3, r7, r3
 800a772:	1c0a      	adds	r2, r1, #0
 800a774:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a776:	2317      	movs	r3, #23
 800a778:	18fb      	adds	r3, r7, r3
 800a77a:	2200      	movs	r2, #0
 800a77c:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d101      	bne.n	800a788 <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	e0ea      	b.n	800a95e <HAL_TIM_RegisterCallback+0x1fa>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	223d      	movs	r2, #61	@ 0x3d
 800a78c:	5c9b      	ldrb	r3, [r3, r2]
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	2b01      	cmp	r3, #1
 800a792:	d000      	beq.n	800a796 <HAL_TIM_RegisterCallback+0x32>
 800a794:	e08e      	b.n	800a8b4 <HAL_TIM_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a796:	230b      	movs	r3, #11
 800a798:	18fb      	adds	r3, r7, r3
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	2b1b      	cmp	r3, #27
 800a79e:	d900      	bls.n	800a7a2 <HAL_TIM_RegisterCallback+0x3e>
 800a7a0:	e083      	b.n	800a8aa <HAL_TIM_RegisterCallback+0x146>
 800a7a2:	009a      	lsls	r2, r3, #2
 800a7a4:	4b70      	ldr	r3, [pc, #448]	@ (800a968 <HAL_TIM_RegisterCallback+0x204>)
 800a7a6:	18d3      	adds	r3, r2, r3
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800a7b2:	e0d1      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800a7ba:	e0cd      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800a7c2:	e0c9      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800a7ca:	e0c5      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800a7d2:	e0c1      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800a7da:	e0bd      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800a7e2:	e0b9      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800a7ea:	e0b5      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800a7f2:	e0b1      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800a7fa:	e0ad      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800a802:	e0a9      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800a80a:	e0a5      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800a812:	e0a1      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2180      	movs	r1, #128	@ 0x80
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	505a      	str	r2, [r3, r1]
        break;
 800a81c:	e09c      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2184      	movs	r1, #132	@ 0x84
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	505a      	str	r2, [r3, r1]
        break;
 800a826:	e097      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2188      	movs	r1, #136	@ 0x88
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	505a      	str	r2, [r3, r1]
        break;
 800a830:	e092      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	218c      	movs	r1, #140	@ 0x8c
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	505a      	str	r2, [r3, r1]
        break;
 800a83a:	e08d      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2190      	movs	r1, #144	@ 0x90
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	505a      	str	r2, [r3, r1]
        break;
 800a844:	e088      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2194      	movs	r1, #148	@ 0x94
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	505a      	str	r2, [r3, r1]
        break;
 800a84e:	e083      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2198      	movs	r1, #152	@ 0x98
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	505a      	str	r2, [r3, r1]
        break;
 800a858:	e07e      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	219c      	movs	r1, #156	@ 0x9c
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	505a      	str	r2, [r3, r1]
        break;
 800a862:	e079      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	21a0      	movs	r1, #160	@ 0xa0
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	505a      	str	r2, [r3, r1]
        break;
 800a86c:	e074      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	21a4      	movs	r1, #164	@ 0xa4
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	505a      	str	r2, [r3, r1]
        break;
 800a876:	e06f      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	21a8      	movs	r1, #168	@ 0xa8
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	505a      	str	r2, [r3, r1]
        break;
 800a880:	e06a      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	21ac      	movs	r1, #172	@ 0xac
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	505a      	str	r2, [r3, r1]
        break;
 800a88a:	e065      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	21b0      	movs	r1, #176	@ 0xb0
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	505a      	str	r2, [r3, r1]
        break;
 800a894:	e060      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	21b4      	movs	r1, #180	@ 0xb4
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	505a      	str	r2, [r3, r1]
        break;
 800a89e:	e05b      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	21b8      	movs	r1, #184	@ 0xb8
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	505a      	str	r2, [r3, r1]
        break;
 800a8a8:	e056      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a8aa:	2317      	movs	r3, #23
 800a8ac:	18fb      	adds	r3, r7, r3
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	701a      	strb	r2, [r3, #0]
        break;
 800a8b2:	e051      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	223d      	movs	r2, #61	@ 0x3d
 800a8b8:	5c9b      	ldrb	r3, [r3, r2]
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d147      	bne.n	800a950 <HAL_TIM_RegisterCallback+0x1ec>
  {
    switch (CallbackID)
 800a8c0:	230b      	movs	r3, #11
 800a8c2:	18fb      	adds	r3, r7, r3
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	2b0d      	cmp	r3, #13
 800a8c8:	d83d      	bhi.n	800a946 <HAL_TIM_RegisterCallback+0x1e2>
 800a8ca:	009a      	lsls	r2, r3, #2
 800a8cc:	4b27      	ldr	r3, [pc, #156]	@ (800a96c <HAL_TIM_RegisterCallback+0x208>)
 800a8ce:	18d3      	adds	r3, r2, r3
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800a8da:	e03d      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800a8e2:	e039      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800a8ea:	e035      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800a8f2:	e031      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800a8fa:	e02d      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800a902:	e029      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800a90a:	e025      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800a912:	e021      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800a91a:	e01d      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800a922:	e019      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800a92a:	e015      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800a932:	e011      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800a93a:	e00d      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2180      	movs	r1, #128	@ 0x80
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	505a      	str	r2, [r3, r1]
        break;
 800a944:	e008      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a946:	2317      	movs	r3, #23
 800a948:	18fb      	adds	r3, r7, r3
 800a94a:	2201      	movs	r2, #1
 800a94c:	701a      	strb	r2, [r3, #0]
        break;
 800a94e:	e003      	b.n	800a958 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a950:	2317      	movs	r3, #23
 800a952:	18fb      	adds	r3, r7, r3
 800a954:	2201      	movs	r2, #1
 800a956:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800a958:	2317      	movs	r3, #23
 800a95a:	18fb      	adds	r3, r7, r3
 800a95c:	781b      	ldrb	r3, [r3, #0]
}
 800a95e:	0018      	movs	r0, r3
 800a960:	46bd      	mov	sp, r7
 800a962:	b006      	add	sp, #24
 800a964:	bd80      	pop	{r7, pc}
 800a966:	46c0      	nop			@ (mov r8, r8)
 800a968:	0800d8e0 	.word	0x0800d8e0
 800a96c:	0800d950 	.word	0x0800d950

0800a970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	4a37      	ldr	r2, [pc, #220]	@ (800aa60 <TIM_Base_SetConfig+0xf0>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d008      	beq.n	800a99a <TIM_Base_SetConfig+0x2a>
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	2380      	movs	r3, #128	@ 0x80
 800a98c:	05db      	lsls	r3, r3, #23
 800a98e:	429a      	cmp	r2, r3
 800a990:	d003      	beq.n	800a99a <TIM_Base_SetConfig+0x2a>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4a33      	ldr	r2, [pc, #204]	@ (800aa64 <TIM_Base_SetConfig+0xf4>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d108      	bne.n	800a9ac <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2270      	movs	r2, #112	@ 0x70
 800a99e:	4393      	bics	r3, r2
 800a9a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a2c      	ldr	r2, [pc, #176]	@ (800aa60 <TIM_Base_SetConfig+0xf0>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d014      	beq.n	800a9de <TIM_Base_SetConfig+0x6e>
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	2380      	movs	r3, #128	@ 0x80
 800a9b8:	05db      	lsls	r3, r3, #23
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d00f      	beq.n	800a9de <TIM_Base_SetConfig+0x6e>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	4a28      	ldr	r2, [pc, #160]	@ (800aa64 <TIM_Base_SetConfig+0xf4>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d00b      	beq.n	800a9de <TIM_Base_SetConfig+0x6e>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	4a27      	ldr	r2, [pc, #156]	@ (800aa68 <TIM_Base_SetConfig+0xf8>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d007      	beq.n	800a9de <TIM_Base_SetConfig+0x6e>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	4a26      	ldr	r2, [pc, #152]	@ (800aa6c <TIM_Base_SetConfig+0xfc>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d003      	beq.n	800a9de <TIM_Base_SetConfig+0x6e>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4a25      	ldr	r2, [pc, #148]	@ (800aa70 <TIM_Base_SetConfig+0x100>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d108      	bne.n	800a9f0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	4a24      	ldr	r2, [pc, #144]	@ (800aa74 <TIM_Base_SetConfig+0x104>)
 800a9e2:	4013      	ands	r3, r2
 800a9e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	68db      	ldr	r3, [r3, #12]
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2280      	movs	r2, #128	@ 0x80
 800a9f4:	4393      	bics	r3, r2
 800a9f6:	001a      	movs	r2, r3
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	695b      	ldr	r3, [r3, #20]
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	689a      	ldr	r2, [r3, #8]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a11      	ldr	r2, [pc, #68]	@ (800aa60 <TIM_Base_SetConfig+0xf0>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d007      	beq.n	800aa2e <TIM_Base_SetConfig+0xbe>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4a12      	ldr	r2, [pc, #72]	@ (800aa6c <TIM_Base_SetConfig+0xfc>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d003      	beq.n	800aa2e <TIM_Base_SetConfig+0xbe>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a11      	ldr	r2, [pc, #68]	@ (800aa70 <TIM_Base_SetConfig+0x100>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d103      	bne.n	800aa36 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	691a      	ldr	r2, [r3, #16]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	2201      	movs	r2, #1
 800aa42:	4013      	ands	r3, r2
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d106      	bne.n	800aa56 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	4393      	bics	r3, r2
 800aa50:	001a      	movs	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	611a      	str	r2, [r3, #16]
  }
}
 800aa56:	46c0      	nop			@ (mov r8, r8)
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	b004      	add	sp, #16
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	46c0      	nop			@ (mov r8, r8)
 800aa60:	40012c00 	.word	0x40012c00
 800aa64:	40000400 	.word	0x40000400
 800aa68:	40002000 	.word	0x40002000
 800aa6c:	40014400 	.word	0x40014400
 800aa70:	40014800 	.word	0x40014800
 800aa74:	fffffcff 	.word	0xfffffcff

0800aa78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6a1b      	ldr	r3, [r3, #32]
 800aa86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6a1b      	ldr	r3, [r3, #32]
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	4393      	bics	r3, r2
 800aa90:	001a      	movs	r2, r3
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	699b      	ldr	r3, [r3, #24]
 800aaa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	4a2e      	ldr	r2, [pc, #184]	@ (800ab60 <TIM_OC1_SetConfig+0xe8>)
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2203      	movs	r2, #3
 800aaae:	4393      	bics	r3, r2
 800aab0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	4313      	orrs	r3, r2
 800aaba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	2202      	movs	r2, #2
 800aac0:	4393      	bics	r3, r2
 800aac2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	697a      	ldr	r2, [r7, #20]
 800aaca:	4313      	orrs	r3, r2
 800aacc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4a24      	ldr	r2, [pc, #144]	@ (800ab64 <TIM_OC1_SetConfig+0xec>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d007      	beq.n	800aae6 <TIM_OC1_SetConfig+0x6e>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	4a23      	ldr	r2, [pc, #140]	@ (800ab68 <TIM_OC1_SetConfig+0xf0>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d003      	beq.n	800aae6 <TIM_OC1_SetConfig+0x6e>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	4a22      	ldr	r2, [pc, #136]	@ (800ab6c <TIM_OC1_SetConfig+0xf4>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d10c      	bne.n	800ab00 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	2208      	movs	r2, #8
 800aaea:	4393      	bics	r3, r2
 800aaec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	697a      	ldr	r2, [r7, #20]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	2204      	movs	r2, #4
 800aafc:	4393      	bics	r3, r2
 800aafe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a18      	ldr	r2, [pc, #96]	@ (800ab64 <TIM_OC1_SetConfig+0xec>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d007      	beq.n	800ab18 <TIM_OC1_SetConfig+0xa0>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a17      	ldr	r2, [pc, #92]	@ (800ab68 <TIM_OC1_SetConfig+0xf0>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d003      	beq.n	800ab18 <TIM_OC1_SetConfig+0xa0>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a16      	ldr	r2, [pc, #88]	@ (800ab6c <TIM_OC1_SetConfig+0xf4>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d111      	bne.n	800ab3c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	4a15      	ldr	r2, [pc, #84]	@ (800ab70 <TIM_OC1_SetConfig+0xf8>)
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	4a14      	ldr	r2, [pc, #80]	@ (800ab74 <TIM_OC1_SetConfig+0xfc>)
 800ab24:	4013      	ands	r3, r2
 800ab26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	695b      	ldr	r3, [r3, #20]
 800ab2c:	693a      	ldr	r2, [r7, #16]
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	699b      	ldr	r3, [r3, #24]
 800ab36:	693a      	ldr	r2, [r7, #16]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	693a      	ldr	r2, [r7, #16]
 800ab40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	68fa      	ldr	r2, [r7, #12]
 800ab46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	685a      	ldr	r2, [r3, #4]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	697a      	ldr	r2, [r7, #20]
 800ab54:	621a      	str	r2, [r3, #32]
}
 800ab56:	46c0      	nop			@ (mov r8, r8)
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	b006      	add	sp, #24
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	46c0      	nop			@ (mov r8, r8)
 800ab60:	fffeff8f 	.word	0xfffeff8f
 800ab64:	40012c00 	.word	0x40012c00
 800ab68:	40014400 	.word	0x40014400
 800ab6c:	40014800 	.word	0x40014800
 800ab70:	fffffeff 	.word	0xfffffeff
 800ab74:	fffffdff 	.word	0xfffffdff

0800ab78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b086      	sub	sp, #24
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a1b      	ldr	r3, [r3, #32]
 800ab86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a1b      	ldr	r3, [r3, #32]
 800ab8c:	2210      	movs	r2, #16
 800ab8e:	4393      	bics	r3, r2
 800ab90:	001a      	movs	r2, r3
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	699b      	ldr	r3, [r3, #24]
 800aba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	4a2c      	ldr	r2, [pc, #176]	@ (800ac58 <TIM_OC2_SetConfig+0xe0>)
 800aba6:	4013      	ands	r3, r2
 800aba8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	4a2b      	ldr	r2, [pc, #172]	@ (800ac5c <TIM_OC2_SetConfig+0xe4>)
 800abae:	4013      	ands	r3, r2
 800abb0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	021b      	lsls	r3, r3, #8
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	4313      	orrs	r3, r2
 800abbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	2220      	movs	r2, #32
 800abc2:	4393      	bics	r3, r2
 800abc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	011b      	lsls	r3, r3, #4
 800abcc:	697a      	ldr	r2, [r7, #20]
 800abce:	4313      	orrs	r3, r2
 800abd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a22      	ldr	r2, [pc, #136]	@ (800ac60 <TIM_OC2_SetConfig+0xe8>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d10d      	bne.n	800abf6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	2280      	movs	r2, #128	@ 0x80
 800abde:	4393      	bics	r3, r2
 800abe0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	011b      	lsls	r3, r3, #4
 800abe8:	697a      	ldr	r2, [r7, #20]
 800abea:	4313      	orrs	r3, r2
 800abec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	2240      	movs	r2, #64	@ 0x40
 800abf2:	4393      	bics	r3, r2
 800abf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a19      	ldr	r2, [pc, #100]	@ (800ac60 <TIM_OC2_SetConfig+0xe8>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d007      	beq.n	800ac0e <TIM_OC2_SetConfig+0x96>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4a18      	ldr	r2, [pc, #96]	@ (800ac64 <TIM_OC2_SetConfig+0xec>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d003      	beq.n	800ac0e <TIM_OC2_SetConfig+0x96>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4a17      	ldr	r2, [pc, #92]	@ (800ac68 <TIM_OC2_SetConfig+0xf0>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d113      	bne.n	800ac36 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	4a16      	ldr	r2, [pc, #88]	@ (800ac6c <TIM_OC2_SetConfig+0xf4>)
 800ac12:	4013      	ands	r3, r2
 800ac14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	4a15      	ldr	r2, [pc, #84]	@ (800ac70 <TIM_OC2_SetConfig+0xf8>)
 800ac1a:	4013      	ands	r3, r2
 800ac1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	695b      	ldr	r3, [r3, #20]
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	693a      	ldr	r2, [r7, #16]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	699b      	ldr	r3, [r3, #24]
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	693a      	ldr	r2, [r7, #16]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	693a      	ldr	r2, [r7, #16]
 800ac3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	685a      	ldr	r2, [r3, #4]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	697a      	ldr	r2, [r7, #20]
 800ac4e:	621a      	str	r2, [r3, #32]
}
 800ac50:	46c0      	nop			@ (mov r8, r8)
 800ac52:	46bd      	mov	sp, r7
 800ac54:	b006      	add	sp, #24
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	feff8fff 	.word	0xfeff8fff
 800ac5c:	fffffcff 	.word	0xfffffcff
 800ac60:	40012c00 	.word	0x40012c00
 800ac64:	40014400 	.word	0x40014400
 800ac68:	40014800 	.word	0x40014800
 800ac6c:	fffffbff 	.word	0xfffffbff
 800ac70:	fffff7ff 	.word	0xfffff7ff

0800ac74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b086      	sub	sp, #24
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a1b      	ldr	r3, [r3, #32]
 800ac82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a1b      	ldr	r3, [r3, #32]
 800ac88:	4a31      	ldr	r2, [pc, #196]	@ (800ad50 <TIM_OC3_SetConfig+0xdc>)
 800ac8a:	401a      	ands	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	69db      	ldr	r3, [r3, #28]
 800ac9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	4a2d      	ldr	r2, [pc, #180]	@ (800ad54 <TIM_OC3_SetConfig+0xe0>)
 800aca0:	4013      	ands	r3, r2
 800aca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2203      	movs	r2, #3
 800aca8:	4393      	bics	r3, r2
 800acaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	4313      	orrs	r3, r2
 800acb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	4a27      	ldr	r2, [pc, #156]	@ (800ad58 <TIM_OC3_SetConfig+0xe4>)
 800acba:	4013      	ands	r3, r2
 800acbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	689b      	ldr	r3, [r3, #8]
 800acc2:	021b      	lsls	r3, r3, #8
 800acc4:	697a      	ldr	r2, [r7, #20]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a23      	ldr	r2, [pc, #140]	@ (800ad5c <TIM_OC3_SetConfig+0xe8>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d10d      	bne.n	800acee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	4a22      	ldr	r2, [pc, #136]	@ (800ad60 <TIM_OC3_SetConfig+0xec>)
 800acd6:	4013      	ands	r3, r2
 800acd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	68db      	ldr	r3, [r3, #12]
 800acde:	021b      	lsls	r3, r3, #8
 800ace0:	697a      	ldr	r2, [r7, #20]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	4a1e      	ldr	r2, [pc, #120]	@ (800ad64 <TIM_OC3_SetConfig+0xf0>)
 800acea:	4013      	ands	r3, r2
 800acec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	4a1a      	ldr	r2, [pc, #104]	@ (800ad5c <TIM_OC3_SetConfig+0xe8>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d007      	beq.n	800ad06 <TIM_OC3_SetConfig+0x92>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4a1b      	ldr	r2, [pc, #108]	@ (800ad68 <TIM_OC3_SetConfig+0xf4>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d003      	beq.n	800ad06 <TIM_OC3_SetConfig+0x92>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	4a1a      	ldr	r2, [pc, #104]	@ (800ad6c <TIM_OC3_SetConfig+0xf8>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d113      	bne.n	800ad2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	4a19      	ldr	r2, [pc, #100]	@ (800ad70 <TIM_OC3_SetConfig+0xfc>)
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	4a18      	ldr	r2, [pc, #96]	@ (800ad74 <TIM_OC3_SetConfig+0x100>)
 800ad12:	4013      	ands	r3, r2
 800ad14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	011b      	lsls	r3, r3, #4
 800ad1c:	693a      	ldr	r2, [r7, #16]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	699b      	ldr	r3, [r3, #24]
 800ad26:	011b      	lsls	r3, r3, #4
 800ad28:	693a      	ldr	r2, [r7, #16]
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	693a      	ldr	r2, [r7, #16]
 800ad32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	685a      	ldr	r2, [r3, #4]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	697a      	ldr	r2, [r7, #20]
 800ad46:	621a      	str	r2, [r3, #32]
}
 800ad48:	46c0      	nop			@ (mov r8, r8)
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	b006      	add	sp, #24
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	fffffeff 	.word	0xfffffeff
 800ad54:	fffeff8f 	.word	0xfffeff8f
 800ad58:	fffffdff 	.word	0xfffffdff
 800ad5c:	40012c00 	.word	0x40012c00
 800ad60:	fffff7ff 	.word	0xfffff7ff
 800ad64:	fffffbff 	.word	0xfffffbff
 800ad68:	40014400 	.word	0x40014400
 800ad6c:	40014800 	.word	0x40014800
 800ad70:	ffffefff 	.word	0xffffefff
 800ad74:	ffffdfff 	.word	0xffffdfff

0800ad78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b086      	sub	sp, #24
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6a1b      	ldr	r3, [r3, #32]
 800ad86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6a1b      	ldr	r3, [r3, #32]
 800ad8c:	4a24      	ldr	r2, [pc, #144]	@ (800ae20 <TIM_OC4_SetConfig+0xa8>)
 800ad8e:	401a      	ands	r2, r3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	69db      	ldr	r3, [r3, #28]
 800ad9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	4a20      	ldr	r2, [pc, #128]	@ (800ae24 <TIM_OC4_SetConfig+0xac>)
 800ada4:	4013      	ands	r3, r2
 800ada6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	4a1f      	ldr	r2, [pc, #124]	@ (800ae28 <TIM_OC4_SetConfig+0xb0>)
 800adac:	4013      	ands	r3, r2
 800adae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	021b      	lsls	r3, r3, #8
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	4313      	orrs	r3, r2
 800adba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	4a1b      	ldr	r2, [pc, #108]	@ (800ae2c <TIM_OC4_SetConfig+0xb4>)
 800adc0:	4013      	ands	r3, r2
 800adc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	031b      	lsls	r3, r3, #12
 800adca:	693a      	ldr	r2, [r7, #16]
 800adcc:	4313      	orrs	r3, r2
 800adce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4a17      	ldr	r2, [pc, #92]	@ (800ae30 <TIM_OC4_SetConfig+0xb8>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d007      	beq.n	800ade8 <TIM_OC4_SetConfig+0x70>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	4a16      	ldr	r2, [pc, #88]	@ (800ae34 <TIM_OC4_SetConfig+0xbc>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d003      	beq.n	800ade8 <TIM_OC4_SetConfig+0x70>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a15      	ldr	r2, [pc, #84]	@ (800ae38 <TIM_OC4_SetConfig+0xc0>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d109      	bne.n	800adfc <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	4a14      	ldr	r2, [pc, #80]	@ (800ae3c <TIM_OC4_SetConfig+0xc4>)
 800adec:	4013      	ands	r3, r2
 800adee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	695b      	ldr	r3, [r3, #20]
 800adf4:	019b      	lsls	r3, r3, #6
 800adf6:	697a      	ldr	r2, [r7, #20]
 800adf8:	4313      	orrs	r3, r2
 800adfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	697a      	ldr	r2, [r7, #20]
 800ae00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	693a      	ldr	r2, [r7, #16]
 800ae14:	621a      	str	r2, [r3, #32]
}
 800ae16:	46c0      	nop			@ (mov r8, r8)
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	b006      	add	sp, #24
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	46c0      	nop			@ (mov r8, r8)
 800ae20:	ffffefff 	.word	0xffffefff
 800ae24:	feff8fff 	.word	0xfeff8fff
 800ae28:	fffffcff 	.word	0xfffffcff
 800ae2c:	ffffdfff 	.word	0xffffdfff
 800ae30:	40012c00 	.word	0x40012c00
 800ae34:	40014400 	.word	0x40014400
 800ae38:	40014800 	.word	0x40014800
 800ae3c:	ffffbfff 	.word	0xffffbfff

0800ae40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b086      	sub	sp, #24
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a1b      	ldr	r3, [r3, #32]
 800ae4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6a1b      	ldr	r3, [r3, #32]
 800ae54:	4a21      	ldr	r2, [pc, #132]	@ (800aedc <TIM_OC5_SetConfig+0x9c>)
 800ae56:	401a      	ands	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	4a1d      	ldr	r2, [pc, #116]	@ (800aee0 <TIM_OC5_SetConfig+0xa0>)
 800ae6c:	4013      	ands	r3, r2
 800ae6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	68fa      	ldr	r2, [r7, #12]
 800ae76:	4313      	orrs	r3, r2
 800ae78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	4a19      	ldr	r2, [pc, #100]	@ (800aee4 <TIM_OC5_SetConfig+0xa4>)
 800ae7e:	4013      	ands	r3, r2
 800ae80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	689b      	ldr	r3, [r3, #8]
 800ae86:	041b      	lsls	r3, r3, #16
 800ae88:	693a      	ldr	r2, [r7, #16]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a15      	ldr	r2, [pc, #84]	@ (800aee8 <TIM_OC5_SetConfig+0xa8>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d007      	beq.n	800aea6 <TIM_OC5_SetConfig+0x66>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a14      	ldr	r2, [pc, #80]	@ (800aeec <TIM_OC5_SetConfig+0xac>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d003      	beq.n	800aea6 <TIM_OC5_SetConfig+0x66>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a13      	ldr	r2, [pc, #76]	@ (800aef0 <TIM_OC5_SetConfig+0xb0>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d109      	bne.n	800aeba <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	4a0c      	ldr	r2, [pc, #48]	@ (800aedc <TIM_OC5_SetConfig+0x9c>)
 800aeaa:	4013      	ands	r3, r2
 800aeac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	695b      	ldr	r3, [r3, #20]
 800aeb2:	021b      	lsls	r3, r3, #8
 800aeb4:	697a      	ldr	r2, [r7, #20]
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	697a      	ldr	r2, [r7, #20]
 800aebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	68fa      	ldr	r2, [r7, #12]
 800aec4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	685a      	ldr	r2, [r3, #4]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	693a      	ldr	r2, [r7, #16]
 800aed2:	621a      	str	r2, [r3, #32]
}
 800aed4:	46c0      	nop			@ (mov r8, r8)
 800aed6:	46bd      	mov	sp, r7
 800aed8:	b006      	add	sp, #24
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	fffeffff 	.word	0xfffeffff
 800aee0:	fffeff8f 	.word	0xfffeff8f
 800aee4:	fffdffff 	.word	0xfffdffff
 800aee8:	40012c00 	.word	0x40012c00
 800aeec:	40014400 	.word	0x40014400
 800aef0:	40014800 	.word	0x40014800

0800aef4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6a1b      	ldr	r3, [r3, #32]
 800af02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6a1b      	ldr	r3, [r3, #32]
 800af08:	4a22      	ldr	r2, [pc, #136]	@ (800af94 <TIM_OC6_SetConfig+0xa0>)
 800af0a:	401a      	ands	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	4a1e      	ldr	r2, [pc, #120]	@ (800af98 <TIM_OC6_SetConfig+0xa4>)
 800af20:	4013      	ands	r3, r2
 800af22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	021b      	lsls	r3, r3, #8
 800af2a:	68fa      	ldr	r2, [r7, #12]
 800af2c:	4313      	orrs	r3, r2
 800af2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	4a1a      	ldr	r2, [pc, #104]	@ (800af9c <TIM_OC6_SetConfig+0xa8>)
 800af34:	4013      	ands	r3, r2
 800af36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	051b      	lsls	r3, r3, #20
 800af3e:	693a      	ldr	r2, [r7, #16]
 800af40:	4313      	orrs	r3, r2
 800af42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	4a16      	ldr	r2, [pc, #88]	@ (800afa0 <TIM_OC6_SetConfig+0xac>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d007      	beq.n	800af5c <TIM_OC6_SetConfig+0x68>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	4a15      	ldr	r2, [pc, #84]	@ (800afa4 <TIM_OC6_SetConfig+0xb0>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d003      	beq.n	800af5c <TIM_OC6_SetConfig+0x68>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	4a14      	ldr	r2, [pc, #80]	@ (800afa8 <TIM_OC6_SetConfig+0xb4>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d109      	bne.n	800af70 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	4a13      	ldr	r2, [pc, #76]	@ (800afac <TIM_OC6_SetConfig+0xb8>)
 800af60:	4013      	ands	r3, r2
 800af62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	695b      	ldr	r3, [r3, #20]
 800af68:	029b      	lsls	r3, r3, #10
 800af6a:	697a      	ldr	r2, [r7, #20]
 800af6c:	4313      	orrs	r3, r2
 800af6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	697a      	ldr	r2, [r7, #20]
 800af74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	685a      	ldr	r2, [r3, #4]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	693a      	ldr	r2, [r7, #16]
 800af88:	621a      	str	r2, [r3, #32]
}
 800af8a:	46c0      	nop			@ (mov r8, r8)
 800af8c:	46bd      	mov	sp, r7
 800af8e:	b006      	add	sp, #24
 800af90:	bd80      	pop	{r7, pc}
 800af92:	46c0      	nop			@ (mov r8, r8)
 800af94:	ffefffff 	.word	0xffefffff
 800af98:	feff8fff 	.word	0xfeff8fff
 800af9c:	ffdfffff 	.word	0xffdfffff
 800afa0:	40012c00 	.word	0x40012c00
 800afa4:	40014400 	.word	0x40014400
 800afa8:	40014800 	.word	0x40014800
 800afac:	fffbffff 	.word	0xfffbffff

0800afb0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b086      	sub	sp, #24
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	607a      	str	r2, [r7, #4]
 800afbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6a1b      	ldr	r3, [r3, #32]
 800afc2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6a1b      	ldr	r3, [r3, #32]
 800afc8:	2201      	movs	r2, #1
 800afca:	4393      	bics	r3, r2
 800afcc:	001a      	movs	r2, r3
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	699b      	ldr	r3, [r3, #24]
 800afd6:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	4a1e      	ldr	r2, [pc, #120]	@ (800b054 <TIM_TI1_SetConfig+0xa4>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d008      	beq.n	800aff2 <TIM_TI1_SetConfig+0x42>
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	2380      	movs	r3, #128	@ 0x80
 800afe4:	05db      	lsls	r3, r3, #23
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d003      	beq.n	800aff2 <TIM_TI1_SetConfig+0x42>
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	4a1a      	ldr	r2, [pc, #104]	@ (800b058 <TIM_TI1_SetConfig+0xa8>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d101      	bne.n	800aff6 <TIM_TI1_SetConfig+0x46>
 800aff2:	2301      	movs	r3, #1
 800aff4:	e000      	b.n	800aff8 <TIM_TI1_SetConfig+0x48>
 800aff6:	2300      	movs	r3, #0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d008      	beq.n	800b00e <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	2203      	movs	r2, #3
 800b000:	4393      	bics	r3, r2
 800b002:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b004:	697a      	ldr	r2, [r7, #20]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	4313      	orrs	r3, r2
 800b00a:	617b      	str	r3, [r7, #20]
 800b00c:	e003      	b.n	800b016 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	2201      	movs	r2, #1
 800b012:	4313      	orrs	r3, r2
 800b014:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	22f0      	movs	r2, #240	@ 0xf0
 800b01a:	4393      	bics	r3, r2
 800b01c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	011b      	lsls	r3, r3, #4
 800b022:	22ff      	movs	r2, #255	@ 0xff
 800b024:	4013      	ands	r3, r2
 800b026:	697a      	ldr	r2, [r7, #20]
 800b028:	4313      	orrs	r3, r2
 800b02a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	220a      	movs	r2, #10
 800b030:	4393      	bics	r3, r2
 800b032:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	220a      	movs	r2, #10
 800b038:	4013      	ands	r3, r2
 800b03a:	693a      	ldr	r2, [r7, #16]
 800b03c:	4313      	orrs	r3, r2
 800b03e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	693a      	ldr	r2, [r7, #16]
 800b04a:	621a      	str	r2, [r3, #32]
}
 800b04c:	46c0      	nop			@ (mov r8, r8)
 800b04e:	46bd      	mov	sp, r7
 800b050:	b006      	add	sp, #24
 800b052:	bd80      	pop	{r7, pc}
 800b054:	40012c00 	.word	0x40012c00
 800b058:	40000400 	.word	0x40000400

0800b05c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b086      	sub	sp, #24
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6a1b      	ldr	r3, [r3, #32]
 800b06c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	6a1b      	ldr	r3, [r3, #32]
 800b072:	2201      	movs	r2, #1
 800b074:	4393      	bics	r3, r2
 800b076:	001a      	movs	r2, r3
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	699b      	ldr	r3, [r3, #24]
 800b080:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	22f0      	movs	r2, #240	@ 0xf0
 800b086:	4393      	bics	r3, r2
 800b088:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	011b      	lsls	r3, r3, #4
 800b08e:	693a      	ldr	r2, [r7, #16]
 800b090:	4313      	orrs	r3, r2
 800b092:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	220a      	movs	r2, #10
 800b098:	4393      	bics	r3, r2
 800b09a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b09c:	697a      	ldr	r2, [r7, #20]
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	693a      	ldr	r2, [r7, #16]
 800b0a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	697a      	ldr	r2, [r7, #20]
 800b0ae:	621a      	str	r2, [r3, #32]
}
 800b0b0:	46c0      	nop			@ (mov r8, r8)
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	b006      	add	sp, #24
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
 800b0c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	6a1b      	ldr	r3, [r3, #32]
 800b0ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6a1b      	ldr	r3, [r3, #32]
 800b0d0:	2210      	movs	r2, #16
 800b0d2:	4393      	bics	r3, r2
 800b0d4:	001a      	movs	r2, r3
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	699b      	ldr	r3, [r3, #24]
 800b0de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	4a14      	ldr	r2, [pc, #80]	@ (800b134 <TIM_TI2_SetConfig+0x7c>)
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	021b      	lsls	r3, r3, #8
 800b0ec:	693a      	ldr	r2, [r7, #16]
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	4a10      	ldr	r2, [pc, #64]	@ (800b138 <TIM_TI2_SetConfig+0x80>)
 800b0f6:	4013      	ands	r3, r2
 800b0f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	031b      	lsls	r3, r3, #12
 800b0fe:	041b      	lsls	r3, r3, #16
 800b100:	0c1b      	lsrs	r3, r3, #16
 800b102:	693a      	ldr	r2, [r7, #16]
 800b104:	4313      	orrs	r3, r2
 800b106:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	22a0      	movs	r2, #160	@ 0xa0
 800b10c:	4393      	bics	r3, r2
 800b10e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	011b      	lsls	r3, r3, #4
 800b114:	22a0      	movs	r2, #160	@ 0xa0
 800b116:	4013      	ands	r3, r2
 800b118:	697a      	ldr	r2, [r7, #20]
 800b11a:	4313      	orrs	r3, r2
 800b11c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	693a      	ldr	r2, [r7, #16]
 800b122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	697a      	ldr	r2, [r7, #20]
 800b128:	621a      	str	r2, [r3, #32]
}
 800b12a:	46c0      	nop			@ (mov r8, r8)
 800b12c:	46bd      	mov	sp, r7
 800b12e:	b006      	add	sp, #24
 800b130:	bd80      	pop	{r7, pc}
 800b132:	46c0      	nop			@ (mov r8, r8)
 800b134:	fffffcff 	.word	0xfffffcff
 800b138:	ffff0fff 	.word	0xffff0fff

0800b13c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b086      	sub	sp, #24
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6a1b      	ldr	r3, [r3, #32]
 800b14c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	6a1b      	ldr	r3, [r3, #32]
 800b152:	2210      	movs	r2, #16
 800b154:	4393      	bics	r3, r2
 800b156:	001a      	movs	r2, r3
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	699b      	ldr	r3, [r3, #24]
 800b160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	4a0d      	ldr	r2, [pc, #52]	@ (800b19c <TIM_TI2_ConfigInputStage+0x60>)
 800b166:	4013      	ands	r3, r2
 800b168:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	031b      	lsls	r3, r3, #12
 800b16e:	693a      	ldr	r2, [r7, #16]
 800b170:	4313      	orrs	r3, r2
 800b172:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	22a0      	movs	r2, #160	@ 0xa0
 800b178:	4393      	bics	r3, r2
 800b17a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	011b      	lsls	r3, r3, #4
 800b180:	697a      	ldr	r2, [r7, #20]
 800b182:	4313      	orrs	r3, r2
 800b184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	693a      	ldr	r2, [r7, #16]
 800b18a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	697a      	ldr	r2, [r7, #20]
 800b190:	621a      	str	r2, [r3, #32]
}
 800b192:	46c0      	nop			@ (mov r8, r8)
 800b194:	46bd      	mov	sp, r7
 800b196:	b006      	add	sp, #24
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	46c0      	nop			@ (mov r8, r8)
 800b19c:	ffff0fff 	.word	0xffff0fff

0800b1a0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b086      	sub	sp, #24
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
 800b1ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	6a1b      	ldr	r3, [r3, #32]
 800b1b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6a1b      	ldr	r3, [r3, #32]
 800b1b8:	4a17      	ldr	r2, [pc, #92]	@ (800b218 <TIM_TI3_SetConfig+0x78>)
 800b1ba:	401a      	ands	r2, r3
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	69db      	ldr	r3, [r3, #28]
 800b1c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	2203      	movs	r2, #3
 800b1ca:	4393      	bics	r3, r2
 800b1cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800b1ce:	693a      	ldr	r2, [r7, #16]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	22f0      	movs	r2, #240	@ 0xf0
 800b1da:	4393      	bics	r3, r2
 800b1dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	011b      	lsls	r3, r3, #4
 800b1e2:	22ff      	movs	r2, #255	@ 0xff
 800b1e4:	4013      	ands	r3, r2
 800b1e6:	693a      	ldr	r2, [r7, #16]
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	4a0b      	ldr	r2, [pc, #44]	@ (800b21c <TIM_TI3_SetConfig+0x7c>)
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	021a      	lsls	r2, r3, #8
 800b1f8:	23a0      	movs	r3, #160	@ 0xa0
 800b1fa:	011b      	lsls	r3, r3, #4
 800b1fc:	4013      	ands	r3, r2
 800b1fe:	697a      	ldr	r2, [r7, #20]
 800b200:	4313      	orrs	r3, r2
 800b202:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	693a      	ldr	r2, [r7, #16]
 800b208:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	697a      	ldr	r2, [r7, #20]
 800b20e:	621a      	str	r2, [r3, #32]
}
 800b210:	46c0      	nop			@ (mov r8, r8)
 800b212:	46bd      	mov	sp, r7
 800b214:	b006      	add	sp, #24
 800b216:	bd80      	pop	{r7, pc}
 800b218:	fffffeff 	.word	0xfffffeff
 800b21c:	fffff5ff 	.word	0xfffff5ff

0800b220 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	607a      	str	r2, [r7, #4]
 800b22c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	6a1b      	ldr	r3, [r3, #32]
 800b232:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	6a1b      	ldr	r3, [r3, #32]
 800b238:	4a18      	ldr	r2, [pc, #96]	@ (800b29c <TIM_TI4_SetConfig+0x7c>)
 800b23a:	401a      	ands	r2, r3
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	69db      	ldr	r3, [r3, #28]
 800b244:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	4a15      	ldr	r2, [pc, #84]	@ (800b2a0 <TIM_TI4_SetConfig+0x80>)
 800b24a:	4013      	ands	r3, r2
 800b24c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	021b      	lsls	r3, r3, #8
 800b252:	693a      	ldr	r2, [r7, #16]
 800b254:	4313      	orrs	r3, r2
 800b256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	4a12      	ldr	r2, [pc, #72]	@ (800b2a4 <TIM_TI4_SetConfig+0x84>)
 800b25c:	4013      	ands	r3, r2
 800b25e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	031b      	lsls	r3, r3, #12
 800b264:	041b      	lsls	r3, r3, #16
 800b266:	0c1b      	lsrs	r3, r3, #16
 800b268:	693a      	ldr	r2, [r7, #16]
 800b26a:	4313      	orrs	r3, r2
 800b26c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	4a0d      	ldr	r2, [pc, #52]	@ (800b2a8 <TIM_TI4_SetConfig+0x88>)
 800b272:	4013      	ands	r3, r2
 800b274:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	031a      	lsls	r2, r3, #12
 800b27a:	23a0      	movs	r3, #160	@ 0xa0
 800b27c:	021b      	lsls	r3, r3, #8
 800b27e:	4013      	ands	r3, r2
 800b280:	697a      	ldr	r2, [r7, #20]
 800b282:	4313      	orrs	r3, r2
 800b284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	693a      	ldr	r2, [r7, #16]
 800b28a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	697a      	ldr	r2, [r7, #20]
 800b290:	621a      	str	r2, [r3, #32]
}
 800b292:	46c0      	nop			@ (mov r8, r8)
 800b294:	46bd      	mov	sp, r7
 800b296:	b006      	add	sp, #24
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	46c0      	nop			@ (mov r8, r8)
 800b29c:	ffffefff 	.word	0xffffefff
 800b2a0:	fffffcff 	.word	0xfffffcff
 800b2a4:	ffff0fff 	.word	0xffff0fff
 800b2a8:	ffff5fff 	.word	0xffff5fff

0800b2ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b084      	sub	sp, #16
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	4a08      	ldr	r2, [pc, #32]	@ (800b2e0 <TIM_ITRx_SetConfig+0x34>)
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b2c4:	683a      	ldr	r2, [r7, #0]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	2207      	movs	r2, #7
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	609a      	str	r2, [r3, #8]
}
 800b2d6:	46c0      	nop			@ (mov r8, r8)
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	b004      	add	sp, #16
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	46c0      	nop			@ (mov r8, r8)
 800b2e0:	ffcfff8f 	.word	0xffcfff8f

0800b2e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b086      	sub	sp, #24
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	607a      	str	r2, [r7, #4]
 800b2f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	4a09      	ldr	r2, [pc, #36]	@ (800b320 <TIM_ETR_SetConfig+0x3c>)
 800b2fc:	4013      	ands	r3, r2
 800b2fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	021a      	lsls	r2, r3, #8
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	431a      	orrs	r2, r3
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	4313      	orrs	r3, r2
 800b30c:	697a      	ldr	r2, [r7, #20]
 800b30e:	4313      	orrs	r3, r2
 800b310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	697a      	ldr	r2, [r7, #20]
 800b316:	609a      	str	r2, [r3, #8]
}
 800b318:	46c0      	nop			@ (mov r8, r8)
 800b31a:	46bd      	mov	sp, r7
 800b31c:	b006      	add	sp, #24
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	ffff00ff 	.word	0xffff00ff

0800b324 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b086      	sub	sp, #24
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	221f      	movs	r2, #31
 800b334:	4013      	ands	r3, r2
 800b336:	2201      	movs	r2, #1
 800b338:	409a      	lsls	r2, r3
 800b33a:	0013      	movs	r3, r2
 800b33c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	6a1b      	ldr	r3, [r3, #32]
 800b342:	697a      	ldr	r2, [r7, #20]
 800b344:	43d2      	mvns	r2, r2
 800b346:	401a      	ands	r2, r3
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6a1a      	ldr	r2, [r3, #32]
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	211f      	movs	r1, #31
 800b354:	400b      	ands	r3, r1
 800b356:	6879      	ldr	r1, [r7, #4]
 800b358:	4099      	lsls	r1, r3
 800b35a:	000b      	movs	r3, r1
 800b35c:	431a      	orrs	r2, r3
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	621a      	str	r2, [r3, #32]
}
 800b362:	46c0      	nop			@ (mov r8, r8)
 800b364:	46bd      	mov	sp, r7
 800b366:	b006      	add	sp, #24
 800b368:	bd80      	pop	{r7, pc}
	...

0800b36c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2184      	movs	r1, #132	@ 0x84
 800b378:	4a1c      	ldr	r2, [pc, #112]	@ (800b3ec <TIM_ResetCallback+0x80>)
 800b37a:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2188      	movs	r1, #136	@ 0x88
 800b380:	4a1b      	ldr	r2, [pc, #108]	@ (800b3f0 <TIM_ResetCallback+0x84>)
 800b382:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	218c      	movs	r1, #140	@ 0x8c
 800b388:	4a1a      	ldr	r2, [pc, #104]	@ (800b3f4 <TIM_ResetCallback+0x88>)
 800b38a:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2190      	movs	r1, #144	@ 0x90
 800b390:	4a19      	ldr	r2, [pc, #100]	@ (800b3f8 <TIM_ResetCallback+0x8c>)
 800b392:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2194      	movs	r1, #148	@ 0x94
 800b398:	4a18      	ldr	r2, [pc, #96]	@ (800b3fc <TIM_ResetCallback+0x90>)
 800b39a:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2198      	movs	r1, #152	@ 0x98
 800b3a0:	4a17      	ldr	r2, [pc, #92]	@ (800b400 <TIM_ResetCallback+0x94>)
 800b3a2:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	219c      	movs	r1, #156	@ 0x9c
 800b3a8:	4a16      	ldr	r2, [pc, #88]	@ (800b404 <TIM_ResetCallback+0x98>)
 800b3aa:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	21a0      	movs	r1, #160	@ 0xa0
 800b3b0:	4a15      	ldr	r2, [pc, #84]	@ (800b408 <TIM_ResetCallback+0x9c>)
 800b3b2:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	21a4      	movs	r1, #164	@ 0xa4
 800b3b8:	4a14      	ldr	r2, [pc, #80]	@ (800b40c <TIM_ResetCallback+0xa0>)
 800b3ba:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	21a8      	movs	r1, #168	@ 0xa8
 800b3c0:	4a13      	ldr	r2, [pc, #76]	@ (800b410 <TIM_ResetCallback+0xa4>)
 800b3c2:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	21ac      	movs	r1, #172	@ 0xac
 800b3c8:	4a12      	ldr	r2, [pc, #72]	@ (800b414 <TIM_ResetCallback+0xa8>)
 800b3ca:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	21b0      	movs	r1, #176	@ 0xb0
 800b3d0:	4a11      	ldr	r2, [pc, #68]	@ (800b418 <TIM_ResetCallback+0xac>)
 800b3d2:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	21b4      	movs	r1, #180	@ 0xb4
 800b3d8:	4a10      	ldr	r2, [pc, #64]	@ (800b41c <TIM_ResetCallback+0xb0>)
 800b3da:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	21b8      	movs	r1, #184	@ 0xb8
 800b3e0:	4a0f      	ldr	r2, [pc, #60]	@ (800b420 <TIM_ResetCallback+0xb4>)
 800b3e2:	505a      	str	r2, [r3, r1]
}
 800b3e4:	46c0      	nop			@ (mov r8, r8)
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	b002      	add	sp, #8
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	0800a6c5 	.word	0x0800a6c5
 800b3f0:	0800a6d5 	.word	0x0800a6d5
 800b3f4:	0800a735 	.word	0x0800a735
 800b3f8:	0800a745 	.word	0x0800a745
 800b3fc:	0800a6f5 	.word	0x0800a6f5
 800b400:	0800a705 	.word	0x0800a705
 800b404:	0800a6e5 	.word	0x0800a6e5
 800b408:	0800a715 	.word	0x0800a715
 800b40c:	0800a725 	.word	0x0800a725
 800b410:	0800a755 	.word	0x0800a755
 800b414:	0800b62d 	.word	0x0800b62d
 800b418:	0800b63d 	.word	0x0800b63d
 800b41c:	0800b64d 	.word	0x0800b64d
 800b420:	0800b65d 	.word	0x0800b65d

0800b424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	223c      	movs	r2, #60	@ 0x3c
 800b432:	5c9b      	ldrb	r3, [r3, r2]
 800b434:	2b01      	cmp	r3, #1
 800b436:	d101      	bne.n	800b43c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b438:	2302      	movs	r3, #2
 800b43a:	e050      	b.n	800b4de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	223c      	movs	r2, #60	@ 0x3c
 800b440:	2101      	movs	r1, #1
 800b442:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	223d      	movs	r2, #61	@ 0x3d
 800b448:	2102      	movs	r1, #2
 800b44a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a21      	ldr	r2, [pc, #132]	@ (800b4e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d108      	bne.n	800b478 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	4a20      	ldr	r2, [pc, #128]	@ (800b4ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b46a:	4013      	ands	r3, r2
 800b46c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	4313      	orrs	r3, r2
 800b476:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2270      	movs	r2, #112	@ 0x70
 800b47c:	4393      	bics	r3, r2
 800b47e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68fa      	ldr	r2, [r7, #12]
 800b486:	4313      	orrs	r3, r2
 800b488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	68fa      	ldr	r2, [r7, #12]
 800b490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a14      	ldr	r2, [pc, #80]	@ (800b4e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d00a      	beq.n	800b4b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	2380      	movs	r3, #128	@ 0x80
 800b4a2:	05db      	lsls	r3, r3, #23
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d004      	beq.n	800b4b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a10      	ldr	r2, [pc, #64]	@ (800b4f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d10c      	bne.n	800b4cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	2280      	movs	r2, #128	@ 0x80
 800b4b6:	4393      	bics	r3, r2
 800b4b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	689b      	ldr	r3, [r3, #8]
 800b4be:	68ba      	ldr	r2, [r7, #8]
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	68ba      	ldr	r2, [r7, #8]
 800b4ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	223d      	movs	r2, #61	@ 0x3d
 800b4d0:	2101      	movs	r1, #1
 800b4d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	223c      	movs	r2, #60	@ 0x3c
 800b4d8:	2100      	movs	r1, #0
 800b4da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	0018      	movs	r0, r3
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	b004      	add	sp, #16
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	46c0      	nop			@ (mov r8, r8)
 800b4e8:	40012c00 	.word	0x40012c00
 800b4ec:	ff0fffff 	.word	0xff0fffff
 800b4f0:	40000400 	.word	0x40000400

0800b4f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b4fe:	2300      	movs	r3, #0
 800b500:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	223c      	movs	r2, #60	@ 0x3c
 800b506:	5c9b      	ldrb	r3, [r3, r2]
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d101      	bne.n	800b510 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b50c:	2302      	movs	r3, #2
 800b50e:	e06f      	b.n	800b5f0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	223c      	movs	r2, #60	@ 0x3c
 800b514:	2101      	movs	r1, #1
 800b516:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	22ff      	movs	r2, #255	@ 0xff
 800b51c:	4393      	bics	r3, r2
 800b51e:	001a      	movs	r2, r3
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	4313      	orrs	r3, r2
 800b526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	4a33      	ldr	r2, [pc, #204]	@ (800b5f8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800b52c:	401a      	ands	r2, r3
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	4313      	orrs	r3, r2
 800b534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	4a30      	ldr	r2, [pc, #192]	@ (800b5fc <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800b53a:	401a      	ands	r2, r3
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	4313      	orrs	r3, r2
 800b542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	4a2e      	ldr	r2, [pc, #184]	@ (800b600 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800b548:	401a      	ands	r2, r3
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4313      	orrs	r3, r2
 800b550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	4a2b      	ldr	r2, [pc, #172]	@ (800b604 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800b556:	401a      	ands	r2, r3
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	691b      	ldr	r3, [r3, #16]
 800b55c:	4313      	orrs	r3, r2
 800b55e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	4a29      	ldr	r2, [pc, #164]	@ (800b608 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800b564:	401a      	ands	r2, r3
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	695b      	ldr	r3, [r3, #20]
 800b56a:	4313      	orrs	r3, r2
 800b56c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	4a26      	ldr	r2, [pc, #152]	@ (800b60c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800b572:	401a      	ands	r2, r3
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b578:	4313      	orrs	r3, r2
 800b57a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	4a24      	ldr	r2, [pc, #144]	@ (800b610 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b580:	401a      	ands	r2, r3
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	699b      	ldr	r3, [r3, #24]
 800b586:	041b      	lsls	r3, r3, #16
 800b588:	4313      	orrs	r3, r2
 800b58a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	4a21      	ldr	r2, [pc, #132]	@ (800b614 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b590:	401a      	ands	r2, r3
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	69db      	ldr	r3, [r3, #28]
 800b596:	4313      	orrs	r3, r2
 800b598:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a1e      	ldr	r2, [pc, #120]	@ (800b618 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d11c      	bne.n	800b5de <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	4a1d      	ldr	r2, [pc, #116]	@ (800b61c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b5a8:	401a      	ands	r2, r3
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5ae:	051b      	lsls	r3, r3, #20
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	4a1a      	ldr	r2, [pc, #104]	@ (800b620 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b5b8:	401a      	ands	r2, r3
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	6a1b      	ldr	r3, [r3, #32]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	4a17      	ldr	r2, [pc, #92]	@ (800b624 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b5c6:	401a      	ands	r2, r3
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	4a15      	ldr	r2, [pc, #84]	@ (800b628 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b5d4:	401a      	ands	r2, r3
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	68fa      	ldr	r2, [r7, #12]
 800b5e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	223c      	movs	r2, #60	@ 0x3c
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b5ee:	2300      	movs	r3, #0
}
 800b5f0:	0018      	movs	r0, r3
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	b004      	add	sp, #16
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	fffffcff 	.word	0xfffffcff
 800b5fc:	fffffbff 	.word	0xfffffbff
 800b600:	fffff7ff 	.word	0xfffff7ff
 800b604:	ffffefff 	.word	0xffffefff
 800b608:	ffffdfff 	.word	0xffffdfff
 800b60c:	ffffbfff 	.word	0xffffbfff
 800b610:	fff0ffff 	.word	0xfff0ffff
 800b614:	efffffff 	.word	0xefffffff
 800b618:	40012c00 	.word	0x40012c00
 800b61c:	ff0fffff 	.word	0xff0fffff
 800b620:	feffffff 	.word	0xfeffffff
 800b624:	fdffffff 	.word	0xfdffffff
 800b628:	dfffffff 	.word	0xdfffffff

0800b62c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b634:	46c0      	nop			@ (mov r8, r8)
 800b636:	46bd      	mov	sp, r7
 800b638:	b002      	add	sp, #8
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800b644:	46c0      	nop			@ (mov r8, r8)
 800b646:	46bd      	mov	sp, r7
 800b648:	b002      	add	sp, #8
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b654:	46c0      	nop			@ (mov r8, r8)
 800b656:	46bd      	mov	sp, r7
 800b658:	b002      	add	sp, #8
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b664:	46c0      	nop			@ (mov r8, r8)
 800b666:	46bd      	mov	sp, r7
 800b668:	b002      	add	sp, #8
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d101      	bne.n	800b67e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b67a:	2301      	movs	r3, #1
 800b67c:	e055      	b.n	800b72a <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2288      	movs	r2, #136	@ 0x88
 800b682:	589b      	ldr	r3, [r3, r2]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d116      	bne.n	800b6b6 <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2284      	movs	r2, #132	@ 0x84
 800b68c:	2100      	movs	r1, #0
 800b68e:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	0018      	movs	r0, r3
 800b694:	f000 fce0 	bl	800c058 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	22c4      	movs	r2, #196	@ 0xc4
 800b69c:	589b      	ldr	r3, [r3, r2]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d103      	bne.n	800b6aa <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	21c4      	movs	r1, #196	@ 0xc4
 800b6a6:	4a23      	ldr	r2, [pc, #140]	@ (800b734 <HAL_UART_Init+0xc8>)
 800b6a8:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	22c4      	movs	r2, #196	@ 0xc4
 800b6ae:	589b      	ldr	r3, [r3, r2]
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	0010      	movs	r0, r2
 800b6b4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2288      	movs	r2, #136	@ 0x88
 800b6ba:	2124      	movs	r1, #36	@ 0x24
 800b6bc:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2101      	movs	r1, #1
 800b6ca:	438a      	bics	r2, r1
 800b6cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d003      	beq.n	800b6de <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	0018      	movs	r0, r3
 800b6da:	f000 ff85 	bl	800c5e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	0018      	movs	r0, r3
 800b6e2:	f000 fd09 	bl	800c0f8 <UART_SetConfig>
 800b6e6:	0003      	movs	r3, r0
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d101      	bne.n	800b6f0 <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	e01c      	b.n	800b72a <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	685a      	ldr	r2, [r3, #4]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	490f      	ldr	r1, [pc, #60]	@ (800b738 <HAL_UART_Init+0xcc>)
 800b6fc:	400a      	ands	r2, r1
 800b6fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	689a      	ldr	r2, [r3, #8]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	212a      	movs	r1, #42	@ 0x2a
 800b70c:	438a      	bics	r2, r1
 800b70e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2101      	movs	r1, #1
 800b71c:	430a      	orrs	r2, r1
 800b71e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	0018      	movs	r0, r3
 800b724:	f001 f814 	bl	800c750 <UART_CheckIdleState>
 800b728:	0003      	movs	r3, r0
}
 800b72a:	0018      	movs	r0, r3
 800b72c:	46bd      	mov	sp, r7
 800b72e:	b002      	add	sp, #8
 800b730:	bd80      	pop	{r7, pc}
 800b732:	46c0      	nop			@ (mov r8, r8)
 800b734:	08004e89 	.word	0x08004e89
 800b738:	ffffb7ff 	.word	0xffffb7ff

0800b73c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b086      	sub	sp, #24
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	607a      	str	r2, [r7, #4]
 800b746:	230b      	movs	r3, #11
 800b748:	18fb      	adds	r3, r7, r3
 800b74a:	1c0a      	adds	r2, r1, #0
 800b74c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b74e:	2317      	movs	r3, #23
 800b750:	18fb      	adds	r3, r7, r3
 800b752:	2200      	movs	r2, #0
 800b754:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d109      	bne.n	800b770 <HAL_UART_RegisterCallback+0x34>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2290      	movs	r2, #144	@ 0x90
 800b760:	589b      	ldr	r3, [r3, r2]
 800b762:	2240      	movs	r2, #64	@ 0x40
 800b764:	431a      	orrs	r2, r3
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2190      	movs	r1, #144	@ 0x90
 800b76a:	505a      	str	r2, [r3, r1]

    return HAL_ERROR;
 800b76c:	2301      	movs	r3, #1
 800b76e:	e08f      	b.n	800b890 <HAL_UART_RegisterCallback+0x154>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2288      	movs	r2, #136	@ 0x88
 800b774:	589b      	ldr	r3, [r3, r2]
 800b776:	2b20      	cmp	r3, #32
 800b778:	d157      	bne.n	800b82a <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800b77a:	230b      	movs	r3, #11
 800b77c:	18fb      	adds	r3, r7, r3
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	2b0c      	cmp	r3, #12
 800b782:	d845      	bhi.n	800b810 <HAL_UART_RegisterCallback+0xd4>
 800b784:	009a      	lsls	r2, r3, #2
 800b786:	4b44      	ldr	r3, [pc, #272]	@ (800b898 <HAL_UART_RegisterCallback+0x15c>)
 800b788:	18d3      	adds	r3, r2, r3
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	469f      	mov	pc, r3
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2194      	movs	r1, #148	@ 0x94
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	505a      	str	r2, [r3, r1]
        break;
 800b796:	e078      	b.n	800b88a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2198      	movs	r1, #152	@ 0x98
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	505a      	str	r2, [r3, r1]
        break;
 800b7a0:	e073      	b.n	800b88a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	219c      	movs	r1, #156	@ 0x9c
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	505a      	str	r2, [r3, r1]
        break;
 800b7aa:	e06e      	b.n	800b88a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	21a0      	movs	r1, #160	@ 0xa0
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	505a      	str	r2, [r3, r1]
        break;
 800b7b4:	e069      	b.n	800b88a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	21a4      	movs	r1, #164	@ 0xa4
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	505a      	str	r2, [r3, r1]
        break;
 800b7be:	e064      	b.n	800b88a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	21a8      	movs	r1, #168	@ 0xa8
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	505a      	str	r2, [r3, r1]
        break;
 800b7c8:	e05f      	b.n	800b88a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	21ac      	movs	r1, #172	@ 0xac
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	505a      	str	r2, [r3, r1]
        break;
 800b7d2:	e05a      	b.n	800b88a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	21b0      	movs	r1, #176	@ 0xb0
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	505a      	str	r2, [r3, r1]
        break;
 800b7dc:	e055      	b.n	800b88a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	21b4      	movs	r1, #180	@ 0xb4
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	505a      	str	r2, [r3, r1]
        break;
 800b7e6:	e050      	b.n	800b88a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	21b8      	movs	r1, #184	@ 0xb8
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	505a      	str	r2, [r3, r1]
        break;
 800b7f0:	e04b      	b.n	800b88a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	21bc      	movs	r1, #188	@ 0xbc
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	505a      	str	r2, [r3, r1]
        break;
 800b7fa:	e046      	b.n	800b88a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	21c4      	movs	r1, #196	@ 0xc4
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	505a      	str	r2, [r3, r1]
        break;
 800b804:	e041      	b.n	800b88a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	21c8      	movs	r1, #200	@ 0xc8
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	505a      	str	r2, [r3, r1]
        break;
 800b80e:	e03c      	b.n	800b88a <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2290      	movs	r2, #144	@ 0x90
 800b814:	589b      	ldr	r3, [r3, r2]
 800b816:	2240      	movs	r2, #64	@ 0x40
 800b818:	431a      	orrs	r2, r3
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2190      	movs	r1, #144	@ 0x90
 800b81e:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800b820:	2317      	movs	r3, #23
 800b822:	18fb      	adds	r3, r7, r3
 800b824:	2201      	movs	r2, #1
 800b826:	701a      	strb	r2, [r3, #0]
        break;
 800b828:	e02f      	b.n	800b88a <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2288      	movs	r2, #136	@ 0x88
 800b82e:	589b      	ldr	r3, [r3, r2]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d11e      	bne.n	800b872 <HAL_UART_RegisterCallback+0x136>
  {
    switch (CallbackID)
 800b834:	230b      	movs	r3, #11
 800b836:	18fb      	adds	r3, r7, r3
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	2b0b      	cmp	r3, #11
 800b83c:	d002      	beq.n	800b844 <HAL_UART_RegisterCallback+0x108>
 800b83e:	2b0c      	cmp	r3, #12
 800b840:	d005      	beq.n	800b84e <HAL_UART_RegisterCallback+0x112>
 800b842:	e009      	b.n	800b858 <HAL_UART_RegisterCallback+0x11c>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	21c4      	movs	r1, #196	@ 0xc4
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	505a      	str	r2, [r3, r1]
        break;
 800b84c:	e01d      	b.n	800b88a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	21c8      	movs	r1, #200	@ 0xc8
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	505a      	str	r2, [r3, r1]
        break;
 800b856:	e018      	b.n	800b88a <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2290      	movs	r2, #144	@ 0x90
 800b85c:	589b      	ldr	r3, [r3, r2]
 800b85e:	2240      	movs	r2, #64	@ 0x40
 800b860:	431a      	orrs	r2, r3
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2190      	movs	r1, #144	@ 0x90
 800b866:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800b868:	2317      	movs	r3, #23
 800b86a:	18fb      	adds	r3, r7, r3
 800b86c:	2201      	movs	r2, #1
 800b86e:	701a      	strb	r2, [r3, #0]
        break;
 800b870:	e00b      	b.n	800b88a <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2290      	movs	r2, #144	@ 0x90
 800b876:	589b      	ldr	r3, [r3, r2]
 800b878:	2240      	movs	r2, #64	@ 0x40
 800b87a:	431a      	orrs	r2, r3
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2190      	movs	r1, #144	@ 0x90
 800b880:	505a      	str	r2, [r3, r1]

    status =  HAL_ERROR;
 800b882:	2317      	movs	r3, #23
 800b884:	18fb      	adds	r3, r7, r3
 800b886:	2201      	movs	r2, #1
 800b888:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800b88a:	2317      	movs	r3, #23
 800b88c:	18fb      	adds	r3, r7, r3
 800b88e:	781b      	ldrb	r3, [r3, #0]
}
 800b890:	0018      	movs	r0, r3
 800b892:	46bd      	mov	sp, r7
 800b894:	b006      	add	sp, #24
 800b896:	bd80      	pop	{r7, pc}
 800b898:	0800d9a0 	.word	0x0800d9a0

0800b89c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b088      	sub	sp, #32
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	1dbb      	adds	r3, r7, #6
 800b8a8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	228c      	movs	r2, #140	@ 0x8c
 800b8ae:	589b      	ldr	r3, [r3, r2]
 800b8b0:	2b20      	cmp	r3, #32
 800b8b2:	d14a      	bne.n	800b94a <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d003      	beq.n	800b8c2 <HAL_UART_Receive_DMA+0x26>
 800b8ba:	1dbb      	adds	r3, r7, #6
 800b8bc:	881b      	ldrh	r3, [r3, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d101      	bne.n	800b8c6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	e042      	b.n	800b94c <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	689a      	ldr	r2, [r3, #8]
 800b8ca:	2380      	movs	r3, #128	@ 0x80
 800b8cc:	015b      	lsls	r3, r3, #5
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d109      	bne.n	800b8e6 <HAL_UART_Receive_DMA+0x4a>
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	691b      	ldr	r3, [r3, #16]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d105      	bne.n	800b8e6 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	4013      	ands	r3, r2
 800b8e0:	d001      	beq.n	800b8e6 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e032      	b.n	800b94c <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a18      	ldr	r2, [pc, #96]	@ (800b954 <HAL_UART_Receive_DMA+0xb8>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d020      	beq.n	800b938 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	685a      	ldr	r2, [r3, #4]
 800b8fc:	2380      	movs	r3, #128	@ 0x80
 800b8fe:	041b      	lsls	r3, r3, #16
 800b900:	4013      	ands	r3, r2
 800b902:	d019      	beq.n	800b938 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b904:	f3ef 8310 	mrs	r3, PRIMASK
 800b908:	613b      	str	r3, [r7, #16]
  return(result);
 800b90a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b90c:	61fb      	str	r3, [r7, #28]
 800b90e:	2301      	movs	r3, #1
 800b910:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	f383 8810 	msr	PRIMASK, r3
}
 800b918:	46c0      	nop			@ (mov r8, r8)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	681a      	ldr	r2, [r3, #0]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2180      	movs	r1, #128	@ 0x80
 800b926:	04c9      	lsls	r1, r1, #19
 800b928:	430a      	orrs	r2, r1
 800b92a:	601a      	str	r2, [r3, #0]
 800b92c:	69fb      	ldr	r3, [r7, #28]
 800b92e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	f383 8810 	msr	PRIMASK, r3
}
 800b936:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b938:	1dbb      	adds	r3, r7, #6
 800b93a:	881a      	ldrh	r2, [r3, #0]
 800b93c:	68b9      	ldr	r1, [r7, #8]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	0018      	movs	r0, r3
 800b942:	f001 f81f 	bl	800c984 <UART_Start_Receive_DMA>
 800b946:	0003      	movs	r3, r0
 800b948:	e000      	b.n	800b94c <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800b94a:	2302      	movs	r3, #2
  }
}
 800b94c:	0018      	movs	r0, r3
 800b94e:	46bd      	mov	sp, r7
 800b950:	b008      	add	sp, #32
 800b952:	bd80      	pop	{r7, pc}
 800b954:	40008000 	.word	0x40008000

0800b958 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b958:	b5b0      	push	{r4, r5, r7, lr}
 800b95a:	b0aa      	sub	sp, #168	@ 0xa8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	69db      	ldr	r3, [r3, #28]
 800b966:	22a4      	movs	r2, #164	@ 0xa4
 800b968:	18b9      	adds	r1, r7, r2
 800b96a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	20a0      	movs	r0, #160	@ 0xa0
 800b974:	1839      	adds	r1, r7, r0
 800b976:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	249c      	movs	r4, #156	@ 0x9c
 800b980:	1939      	adds	r1, r7, r4
 800b982:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b984:	0011      	movs	r1, r2
 800b986:	18bb      	adds	r3, r7, r2
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4aa5      	ldr	r2, [pc, #660]	@ (800bc20 <HAL_UART_IRQHandler+0x2c8>)
 800b98c:	4013      	ands	r3, r2
 800b98e:	2298      	movs	r2, #152	@ 0x98
 800b990:	18bd      	adds	r5, r7, r2
 800b992:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800b994:	18bb      	adds	r3, r7, r2
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d11a      	bne.n	800b9d2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b99c:	187b      	adds	r3, r7, r1
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2220      	movs	r2, #32
 800b9a2:	4013      	ands	r3, r2
 800b9a4:	d015      	beq.n	800b9d2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b9a6:	183b      	adds	r3, r7, r0
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2220      	movs	r2, #32
 800b9ac:	4013      	ands	r3, r2
 800b9ae:	d105      	bne.n	800b9bc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b9b0:	193b      	adds	r3, r7, r4
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	2380      	movs	r3, #128	@ 0x80
 800b9b6:	055b      	lsls	r3, r3, #21
 800b9b8:	4013      	ands	r3, r2
 800b9ba:	d00a      	beq.n	800b9d2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d100      	bne.n	800b9c6 <HAL_UART_IRQHandler+0x6e>
 800b9c4:	e2ea      	b.n	800bf9c <HAL_UART_IRQHandler+0x644>
      {
        huart->RxISR(huart);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	0010      	movs	r0, r2
 800b9ce:	4798      	blx	r3
      }
      return;
 800b9d0:	e2e4      	b.n	800bf9c <HAL_UART_IRQHandler+0x644>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b9d2:	2398      	movs	r3, #152	@ 0x98
 800b9d4:	18fb      	adds	r3, r7, r3
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d100      	bne.n	800b9de <HAL_UART_IRQHandler+0x86>
 800b9dc:	e128      	b.n	800bc30 <HAL_UART_IRQHandler+0x2d8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b9de:	239c      	movs	r3, #156	@ 0x9c
 800b9e0:	18fb      	adds	r3, r7, r3
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a8f      	ldr	r2, [pc, #572]	@ (800bc24 <HAL_UART_IRQHandler+0x2cc>)
 800b9e6:	4013      	ands	r3, r2
 800b9e8:	d106      	bne.n	800b9f8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b9ea:	23a0      	movs	r3, #160	@ 0xa0
 800b9ec:	18fb      	adds	r3, r7, r3
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a8d      	ldr	r2, [pc, #564]	@ (800bc28 <HAL_UART_IRQHandler+0x2d0>)
 800b9f2:	4013      	ands	r3, r2
 800b9f4:	d100      	bne.n	800b9f8 <HAL_UART_IRQHandler+0xa0>
 800b9f6:	e11b      	b.n	800bc30 <HAL_UART_IRQHandler+0x2d8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b9f8:	23a4      	movs	r3, #164	@ 0xa4
 800b9fa:	18fb      	adds	r3, r7, r3
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	4013      	ands	r3, r2
 800ba02:	d012      	beq.n	800ba2a <HAL_UART_IRQHandler+0xd2>
 800ba04:	23a0      	movs	r3, #160	@ 0xa0
 800ba06:	18fb      	adds	r3, r7, r3
 800ba08:	681a      	ldr	r2, [r3, #0]
 800ba0a:	2380      	movs	r3, #128	@ 0x80
 800ba0c:	005b      	lsls	r3, r3, #1
 800ba0e:	4013      	ands	r3, r2
 800ba10:	d00b      	beq.n	800ba2a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2201      	movs	r2, #1
 800ba18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2290      	movs	r2, #144	@ 0x90
 800ba1e:	589b      	ldr	r3, [r3, r2]
 800ba20:	2201      	movs	r2, #1
 800ba22:	431a      	orrs	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2190      	movs	r1, #144	@ 0x90
 800ba28:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba2a:	23a4      	movs	r3, #164	@ 0xa4
 800ba2c:	18fb      	adds	r3, r7, r3
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	2202      	movs	r2, #2
 800ba32:	4013      	ands	r3, r2
 800ba34:	d011      	beq.n	800ba5a <HAL_UART_IRQHandler+0x102>
 800ba36:	239c      	movs	r3, #156	@ 0x9c
 800ba38:	18fb      	adds	r3, r7, r3
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	4013      	ands	r3, r2
 800ba40:	d00b      	beq.n	800ba5a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2202      	movs	r2, #2
 800ba48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2290      	movs	r2, #144	@ 0x90
 800ba4e:	589b      	ldr	r3, [r3, r2]
 800ba50:	2204      	movs	r2, #4
 800ba52:	431a      	orrs	r2, r3
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2190      	movs	r1, #144	@ 0x90
 800ba58:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba5a:	23a4      	movs	r3, #164	@ 0xa4
 800ba5c:	18fb      	adds	r3, r7, r3
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2204      	movs	r2, #4
 800ba62:	4013      	ands	r3, r2
 800ba64:	d011      	beq.n	800ba8a <HAL_UART_IRQHandler+0x132>
 800ba66:	239c      	movs	r3, #156	@ 0x9c
 800ba68:	18fb      	adds	r3, r7, r3
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	4013      	ands	r3, r2
 800ba70:	d00b      	beq.n	800ba8a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2204      	movs	r2, #4
 800ba78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2290      	movs	r2, #144	@ 0x90
 800ba7e:	589b      	ldr	r3, [r3, r2]
 800ba80:	2202      	movs	r2, #2
 800ba82:	431a      	orrs	r2, r3
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2190      	movs	r1, #144	@ 0x90
 800ba88:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ba8a:	23a4      	movs	r3, #164	@ 0xa4
 800ba8c:	18fb      	adds	r3, r7, r3
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2208      	movs	r2, #8
 800ba92:	4013      	ands	r3, r2
 800ba94:	d017      	beq.n	800bac6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ba96:	23a0      	movs	r3, #160	@ 0xa0
 800ba98:	18fb      	adds	r3, r7, r3
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	2220      	movs	r2, #32
 800ba9e:	4013      	ands	r3, r2
 800baa0:	d105      	bne.n	800baae <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800baa2:	239c      	movs	r3, #156	@ 0x9c
 800baa4:	18fb      	adds	r3, r7, r3
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a5e      	ldr	r2, [pc, #376]	@ (800bc24 <HAL_UART_IRQHandler+0x2cc>)
 800baaa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800baac:	d00b      	beq.n	800bac6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	2208      	movs	r2, #8
 800bab4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2290      	movs	r2, #144	@ 0x90
 800baba:	589b      	ldr	r3, [r3, r2]
 800babc:	2208      	movs	r2, #8
 800babe:	431a      	orrs	r2, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2190      	movs	r1, #144	@ 0x90
 800bac4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bac6:	23a4      	movs	r3, #164	@ 0xa4
 800bac8:	18fb      	adds	r3, r7, r3
 800baca:	681a      	ldr	r2, [r3, #0]
 800bacc:	2380      	movs	r3, #128	@ 0x80
 800bace:	011b      	lsls	r3, r3, #4
 800bad0:	4013      	ands	r3, r2
 800bad2:	d013      	beq.n	800bafc <HAL_UART_IRQHandler+0x1a4>
 800bad4:	23a0      	movs	r3, #160	@ 0xa0
 800bad6:	18fb      	adds	r3, r7, r3
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	2380      	movs	r3, #128	@ 0x80
 800badc:	04db      	lsls	r3, r3, #19
 800bade:	4013      	ands	r3, r2
 800bae0:	d00c      	beq.n	800bafc <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2280      	movs	r2, #128	@ 0x80
 800bae8:	0112      	lsls	r2, r2, #4
 800baea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2290      	movs	r2, #144	@ 0x90
 800baf0:	589b      	ldr	r3, [r3, r2]
 800baf2:	2220      	movs	r2, #32
 800baf4:	431a      	orrs	r2, r3
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2190      	movs	r1, #144	@ 0x90
 800bafa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2290      	movs	r2, #144	@ 0x90
 800bb00:	589b      	ldr	r3, [r3, r2]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d100      	bne.n	800bb08 <HAL_UART_IRQHandler+0x1b0>
 800bb06:	e24b      	b.n	800bfa0 <HAL_UART_IRQHandler+0x648>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb08:	23a4      	movs	r3, #164	@ 0xa4
 800bb0a:	18fb      	adds	r3, r7, r3
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2220      	movs	r2, #32
 800bb10:	4013      	ands	r3, r2
 800bb12:	d015      	beq.n	800bb40 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bb14:	23a0      	movs	r3, #160	@ 0xa0
 800bb16:	18fb      	adds	r3, r7, r3
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2220      	movs	r2, #32
 800bb1c:	4013      	ands	r3, r2
 800bb1e:	d106      	bne.n	800bb2e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bb20:	239c      	movs	r3, #156	@ 0x9c
 800bb22:	18fb      	adds	r3, r7, r3
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	2380      	movs	r3, #128	@ 0x80
 800bb28:	055b      	lsls	r3, r3, #21
 800bb2a:	4013      	ands	r3, r2
 800bb2c:	d008      	beq.n	800bb40 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d004      	beq.n	800bb40 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	0010      	movs	r0, r2
 800bb3e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2290      	movs	r2, #144	@ 0x90
 800bb44:	589b      	ldr	r3, [r3, r2]
 800bb46:	2194      	movs	r1, #148	@ 0x94
 800bb48:	187a      	adds	r2, r7, r1
 800bb4a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	689b      	ldr	r3, [r3, #8]
 800bb52:	2240      	movs	r2, #64	@ 0x40
 800bb54:	4013      	ands	r3, r2
 800bb56:	2b40      	cmp	r3, #64	@ 0x40
 800bb58:	d004      	beq.n	800bb64 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bb5a:	187b      	adds	r3, r7, r1
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2228      	movs	r2, #40	@ 0x28
 800bb60:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb62:	d050      	beq.n	800bc06 <HAL_UART_IRQHandler+0x2ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	0018      	movs	r0, r3
 800bb68:	f000 fff2 	bl	800cb50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	2240      	movs	r2, #64	@ 0x40
 800bb74:	4013      	ands	r3, r2
 800bb76:	2b40      	cmp	r3, #64	@ 0x40
 800bb78:	d13e      	bne.n	800bbf8 <HAL_UART_IRQHandler+0x2a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb7a:	f3ef 8310 	mrs	r3, PRIMASK
 800bb7e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800bb80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb82:	2090      	movs	r0, #144	@ 0x90
 800bb84:	183a      	adds	r2, r7, r0
 800bb86:	6013      	str	r3, [r2, #0]
 800bb88:	2301      	movs	r3, #1
 800bb8a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb8e:	f383 8810 	msr	PRIMASK, r3
}
 800bb92:	46c0      	nop			@ (mov r8, r8)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	689a      	ldr	r2, [r3, #8]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2140      	movs	r1, #64	@ 0x40
 800bba0:	438a      	bics	r2, r1
 800bba2:	609a      	str	r2, [r3, #8]
 800bba4:	183b      	adds	r3, r7, r0
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bbac:	f383 8810 	msr	PRIMASK, r3
}
 800bbb0:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2280      	movs	r2, #128	@ 0x80
 800bbb6:	589b      	ldr	r3, [r3, r2]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d016      	beq.n	800bbea <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2280      	movs	r2, #128	@ 0x80
 800bbc0:	589b      	ldr	r3, [r3, r2]
 800bbc2:	4a1a      	ldr	r2, [pc, #104]	@ (800bc2c <HAL_UART_IRQHandler+0x2d4>)
 800bbc4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2280      	movs	r2, #128	@ 0x80
 800bbca:	589b      	ldr	r3, [r3, r2]
 800bbcc:	0018      	movs	r0, r3
 800bbce:	f7fb fce5 	bl	800759c <HAL_DMA_Abort_IT>
 800bbd2:	1e03      	subs	r3, r0, #0
 800bbd4:	d022      	beq.n	800bc1c <HAL_UART_IRQHandler+0x2c4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2280      	movs	r2, #128	@ 0x80
 800bbda:	589b      	ldr	r3, [r3, r2]
 800bbdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	2180      	movs	r1, #128	@ 0x80
 800bbe2:	5852      	ldr	r2, [r2, r1]
 800bbe4:	0010      	movs	r0, r2
 800bbe6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbe8:	e018      	b.n	800bc1c <HAL_UART_IRQHandler+0x2c4>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	22a4      	movs	r2, #164	@ 0xa4
 800bbee:	589b      	ldr	r3, [r3, r2]
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	0010      	movs	r0, r2
 800bbf4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbf6:	e011      	b.n	800bc1c <HAL_UART_IRQHandler+0x2c4>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	22a4      	movs	r2, #164	@ 0xa4
 800bbfc:	589b      	ldr	r3, [r3, r2]
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	0010      	movs	r0, r2
 800bc02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc04:	e00a      	b.n	800bc1c <HAL_UART_IRQHandler+0x2c4>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	22a4      	movs	r2, #164	@ 0xa4
 800bc0a:	589b      	ldr	r3, [r3, r2]
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	0010      	movs	r0, r2
 800bc10:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2290      	movs	r2, #144	@ 0x90
 800bc16:	2100      	movs	r1, #0
 800bc18:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800bc1a:	e1c1      	b.n	800bfa0 <HAL_UART_IRQHandler+0x648>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc1c:	46c0      	nop			@ (mov r8, r8)
    return;
 800bc1e:	e1bf      	b.n	800bfa0 <HAL_UART_IRQHandler+0x648>
 800bc20:	0000080f 	.word	0x0000080f
 800bc24:	10000001 	.word	0x10000001
 800bc28:	04000120 	.word	0x04000120
 800bc2c:	0800ce23 	.word	0x0800ce23

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d000      	beq.n	800bc3a <HAL_UART_IRQHandler+0x2e2>
 800bc38:	e140      	b.n	800bebc <HAL_UART_IRQHandler+0x564>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bc3a:	23a4      	movs	r3, #164	@ 0xa4
 800bc3c:	18fb      	adds	r3, r7, r3
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	2210      	movs	r2, #16
 800bc42:	4013      	ands	r3, r2
 800bc44:	d100      	bne.n	800bc48 <HAL_UART_IRQHandler+0x2f0>
 800bc46:	e139      	b.n	800bebc <HAL_UART_IRQHandler+0x564>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bc48:	23a0      	movs	r3, #160	@ 0xa0
 800bc4a:	18fb      	adds	r3, r7, r3
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2210      	movs	r2, #16
 800bc50:	4013      	ands	r3, r2
 800bc52:	d100      	bne.n	800bc56 <HAL_UART_IRQHandler+0x2fe>
 800bc54:	e132      	b.n	800bebc <HAL_UART_IRQHandler+0x564>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	2210      	movs	r2, #16
 800bc5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	2240      	movs	r2, #64	@ 0x40
 800bc66:	4013      	ands	r3, r2
 800bc68:	2b40      	cmp	r3, #64	@ 0x40
 800bc6a:	d000      	beq.n	800bc6e <HAL_UART_IRQHandler+0x316>
 800bc6c:	e0a5      	b.n	800bdba <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2280      	movs	r2, #128	@ 0x80
 800bc72:	589b      	ldr	r3, [r3, r2]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	685a      	ldr	r2, [r3, #4]
 800bc78:	217e      	movs	r1, #126	@ 0x7e
 800bc7a:	187b      	adds	r3, r7, r1
 800bc7c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800bc7e:	187b      	adds	r3, r7, r1
 800bc80:	881b      	ldrh	r3, [r3, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d100      	bne.n	800bc88 <HAL_UART_IRQHandler+0x330>
 800bc86:	e18d      	b.n	800bfa4 <HAL_UART_IRQHandler+0x64c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	225c      	movs	r2, #92	@ 0x5c
 800bc8c:	5a9b      	ldrh	r3, [r3, r2]
 800bc8e:	187a      	adds	r2, r7, r1
 800bc90:	8812      	ldrh	r2, [r2, #0]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d300      	bcc.n	800bc98 <HAL_UART_IRQHandler+0x340>
 800bc96:	e185      	b.n	800bfa4 <HAL_UART_IRQHandler+0x64c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	187a      	adds	r2, r7, r1
 800bc9c:	215e      	movs	r1, #94	@ 0x5e
 800bc9e:	8812      	ldrh	r2, [r2, #0]
 800bca0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2280      	movs	r2, #128	@ 0x80
 800bca6:	589b      	ldr	r3, [r3, r2]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2220      	movs	r2, #32
 800bcae:	4013      	ands	r3, r2
 800bcb0:	d170      	bne.n	800bd94 <HAL_UART_IRQHandler+0x43c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bcb2:	f3ef 8310 	mrs	r3, PRIMASK
 800bcb6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800bcb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcba:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bcc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcc2:	f383 8810 	msr	PRIMASK, r3
}
 800bcc6:	46c0      	nop			@ (mov r8, r8)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	681a      	ldr	r2, [r3, #0]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	49b8      	ldr	r1, [pc, #736]	@ (800bfb4 <HAL_UART_IRQHandler+0x65c>)
 800bcd4:	400a      	ands	r2, r1
 800bcd6:	601a      	str	r2, [r3, #0]
 800bcd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bcda:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bcdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcde:	f383 8810 	msr	PRIMASK, r3
}
 800bce2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bce4:	f3ef 8310 	mrs	r3, PRIMASK
 800bce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800bcea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcec:	677b      	str	r3, [r7, #116]	@ 0x74
 800bcee:	2301      	movs	r3, #1
 800bcf0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bcf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcf4:	f383 8810 	msr	PRIMASK, r3
}
 800bcf8:	46c0      	nop			@ (mov r8, r8)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	689a      	ldr	r2, [r3, #8]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	2101      	movs	r1, #1
 800bd06:	438a      	bics	r2, r1
 800bd08:	609a      	str	r2, [r3, #8]
 800bd0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd0c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd10:	f383 8810 	msr	PRIMASK, r3
}
 800bd14:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd16:	f3ef 8310 	mrs	r3, PRIMASK
 800bd1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800bd1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd1e:	673b      	str	r3, [r7, #112]	@ 0x70
 800bd20:	2301      	movs	r3, #1
 800bd22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd26:	f383 8810 	msr	PRIMASK, r3
}
 800bd2a:	46c0      	nop			@ (mov r8, r8)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	689a      	ldr	r2, [r3, #8]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	2140      	movs	r1, #64	@ 0x40
 800bd38:	438a      	bics	r2, r1
 800bd3a:	609a      	str	r2, [r3, #8]
 800bd3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bd3e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd42:	f383 8810 	msr	PRIMASK, r3
}
 800bd46:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	228c      	movs	r2, #140	@ 0x8c
 800bd4c:	2120      	movs	r1, #32
 800bd4e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd56:	f3ef 8310 	mrs	r3, PRIMASK
 800bd5a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800bd5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bd60:	2301      	movs	r3, #1
 800bd62:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bd66:	f383 8810 	msr	PRIMASK, r3
}
 800bd6a:	46c0      	nop			@ (mov r8, r8)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2110      	movs	r1, #16
 800bd78:	438a      	bics	r2, r1
 800bd7a:	601a      	str	r2, [r3, #0]
 800bd7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd82:	f383 8810 	msr	PRIMASK, r3
}
 800bd86:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2280      	movs	r2, #128	@ 0x80
 800bd8c:	589b      	ldr	r3, [r3, r2]
 800bd8e:	0018      	movs	r0, r3
 800bd90:	f7fb fba2 	bl	80074d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2202      	movs	r2, #2
 800bd98:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	22c0      	movs	r2, #192	@ 0xc0
 800bd9e:	589b      	ldr	r3, [r3, r2]
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	215c      	movs	r1, #92	@ 0x5c
 800bda4:	5a51      	ldrh	r1, [r2, r1]
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	205e      	movs	r0, #94	@ 0x5e
 800bdaa:	5a12      	ldrh	r2, [r2, r0]
 800bdac:	b292      	uxth	r2, r2
 800bdae:	1a8a      	subs	r2, r1, r2
 800bdb0:	b291      	uxth	r1, r2
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	0010      	movs	r0, r2
 800bdb6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bdb8:	e0f4      	b.n	800bfa4 <HAL_UART_IRQHandler+0x64c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	225c      	movs	r2, #92	@ 0x5c
 800bdbe:	5a99      	ldrh	r1, [r3, r2]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	225e      	movs	r2, #94	@ 0x5e
 800bdc4:	5a9b      	ldrh	r3, [r3, r2]
 800bdc6:	b29a      	uxth	r2, r3
 800bdc8:	208e      	movs	r0, #142	@ 0x8e
 800bdca:	183b      	adds	r3, r7, r0
 800bdcc:	1a8a      	subs	r2, r1, r2
 800bdce:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	225e      	movs	r2, #94	@ 0x5e
 800bdd4:	5a9b      	ldrh	r3, [r3, r2]
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d100      	bne.n	800bdde <HAL_UART_IRQHandler+0x486>
 800bddc:	e0e4      	b.n	800bfa8 <HAL_UART_IRQHandler+0x650>
          && (nb_rx_data > 0U))
 800bdde:	183b      	adds	r3, r7, r0
 800bde0:	881b      	ldrh	r3, [r3, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d100      	bne.n	800bde8 <HAL_UART_IRQHandler+0x490>
 800bde6:	e0df      	b.n	800bfa8 <HAL_UART_IRQHandler+0x650>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bde8:	f3ef 8310 	mrs	r3, PRIMASK
 800bdec:	60fb      	str	r3, [r7, #12]
  return(result);
 800bdee:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bdf0:	2488      	movs	r4, #136	@ 0x88
 800bdf2:	193a      	adds	r2, r7, r4
 800bdf4:	6013      	str	r3, [r2, #0]
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	f383 8810 	msr	PRIMASK, r3
}
 800be00:	46c0      	nop			@ (mov r8, r8)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	681a      	ldr	r2, [r3, #0]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	496a      	ldr	r1, [pc, #424]	@ (800bfb8 <HAL_UART_IRQHandler+0x660>)
 800be0e:	400a      	ands	r2, r1
 800be10:	601a      	str	r2, [r3, #0]
 800be12:	193b      	adds	r3, r7, r4
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	f383 8810 	msr	PRIMASK, r3
}
 800be1e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be20:	f3ef 8310 	mrs	r3, PRIMASK
 800be24:	61bb      	str	r3, [r7, #24]
  return(result);
 800be26:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be28:	2484      	movs	r4, #132	@ 0x84
 800be2a:	193a      	adds	r2, r7, r4
 800be2c:	6013      	str	r3, [r2, #0]
 800be2e:	2301      	movs	r3, #1
 800be30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be32:	69fb      	ldr	r3, [r7, #28]
 800be34:	f383 8810 	msr	PRIMASK, r3
}
 800be38:	46c0      	nop			@ (mov r8, r8)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	689a      	ldr	r2, [r3, #8]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	495d      	ldr	r1, [pc, #372]	@ (800bfbc <HAL_UART_IRQHandler+0x664>)
 800be46:	400a      	ands	r2, r1
 800be48:	609a      	str	r2, [r3, #8]
 800be4a:	193b      	adds	r3, r7, r4
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be50:	6a3b      	ldr	r3, [r7, #32]
 800be52:	f383 8810 	msr	PRIMASK, r3
}
 800be56:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	228c      	movs	r2, #140	@ 0x8c
 800be5c:	2120      	movs	r1, #32
 800be5e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2200      	movs	r2, #0
 800be64:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be6c:	f3ef 8310 	mrs	r3, PRIMASK
 800be70:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800be72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be74:	2480      	movs	r4, #128	@ 0x80
 800be76:	193a      	adds	r2, r7, r4
 800be78:	6013      	str	r3, [r2, #0]
 800be7a:	2301      	movs	r3, #1
 800be7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be80:	f383 8810 	msr	PRIMASK, r3
}
 800be84:	46c0      	nop			@ (mov r8, r8)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	2110      	movs	r1, #16
 800be92:	438a      	bics	r2, r1
 800be94:	601a      	str	r2, [r3, #0]
 800be96:	193b      	adds	r3, r7, r4
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be9e:	f383 8810 	msr	PRIMASK, r3
}
 800bea2:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2202      	movs	r2, #2
 800bea8:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	22c0      	movs	r2, #192	@ 0xc0
 800beae:	589b      	ldr	r3, [r3, r2]
 800beb0:	183a      	adds	r2, r7, r0
 800beb2:	8811      	ldrh	r1, [r2, #0]
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	0010      	movs	r0, r2
 800beb8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800beba:	e075      	b.n	800bfa8 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bebc:	23a4      	movs	r3, #164	@ 0xa4
 800bebe:	18fb      	adds	r3, r7, r3
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	2380      	movs	r3, #128	@ 0x80
 800bec4:	035b      	lsls	r3, r3, #13
 800bec6:	4013      	ands	r3, r2
 800bec8:	d012      	beq.n	800bef0 <HAL_UART_IRQHandler+0x598>
 800beca:	239c      	movs	r3, #156	@ 0x9c
 800becc:	18fb      	adds	r3, r7, r3
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	2380      	movs	r3, #128	@ 0x80
 800bed2:	03db      	lsls	r3, r3, #15
 800bed4:	4013      	ands	r3, r2
 800bed6:	d00b      	beq.n	800bef0 <HAL_UART_IRQHandler+0x598>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2280      	movs	r2, #128	@ 0x80
 800bede:	0352      	lsls	r2, r2, #13
 800bee0:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	22b4      	movs	r2, #180	@ 0xb4
 800bee6:	589b      	ldr	r3, [r3, r2]
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	0010      	movs	r0, r2
 800beec:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800beee:	e05e      	b.n	800bfae <HAL_UART_IRQHandler+0x656>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bef0:	23a4      	movs	r3, #164	@ 0xa4
 800bef2:	18fb      	adds	r3, r7, r3
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	2280      	movs	r2, #128	@ 0x80
 800bef8:	4013      	ands	r3, r2
 800befa:	d016      	beq.n	800bf2a <HAL_UART_IRQHandler+0x5d2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800befc:	23a0      	movs	r3, #160	@ 0xa0
 800befe:	18fb      	adds	r3, r7, r3
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	2280      	movs	r2, #128	@ 0x80
 800bf04:	4013      	ands	r3, r2
 800bf06:	d106      	bne.n	800bf16 <HAL_UART_IRQHandler+0x5be>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bf08:	239c      	movs	r3, #156	@ 0x9c
 800bf0a:	18fb      	adds	r3, r7, r3
 800bf0c:	681a      	ldr	r2, [r3, #0]
 800bf0e:	2380      	movs	r3, #128	@ 0x80
 800bf10:	041b      	lsls	r3, r3, #16
 800bf12:	4013      	ands	r3, r2
 800bf14:	d009      	beq.n	800bf2a <HAL_UART_IRQHandler+0x5d2>
  {
    if (huart->TxISR != NULL)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d046      	beq.n	800bfac <HAL_UART_IRQHandler+0x654>
    {
      huart->TxISR(huart);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	0010      	movs	r0, r2
 800bf26:	4798      	blx	r3
    }
    return;
 800bf28:	e040      	b.n	800bfac <HAL_UART_IRQHandler+0x654>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bf2a:	23a4      	movs	r3, #164	@ 0xa4
 800bf2c:	18fb      	adds	r3, r7, r3
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2240      	movs	r2, #64	@ 0x40
 800bf32:	4013      	ands	r3, r2
 800bf34:	d00a      	beq.n	800bf4c <HAL_UART_IRQHandler+0x5f4>
 800bf36:	23a0      	movs	r3, #160	@ 0xa0
 800bf38:	18fb      	adds	r3, r7, r3
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2240      	movs	r2, #64	@ 0x40
 800bf3e:	4013      	ands	r3, r2
 800bf40:	d004      	beq.n	800bf4c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	0018      	movs	r0, r3
 800bf46:	f000 ff85 	bl	800ce54 <UART_EndTransmit_IT>
    return;
 800bf4a:	e030      	b.n	800bfae <HAL_UART_IRQHandler+0x656>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bf4c:	23a4      	movs	r3, #164	@ 0xa4
 800bf4e:	18fb      	adds	r3, r7, r3
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	2380      	movs	r3, #128	@ 0x80
 800bf54:	041b      	lsls	r3, r3, #16
 800bf56:	4013      	ands	r3, r2
 800bf58:	d00d      	beq.n	800bf76 <HAL_UART_IRQHandler+0x61e>
 800bf5a:	23a0      	movs	r3, #160	@ 0xa0
 800bf5c:	18fb      	adds	r3, r7, r3
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	2380      	movs	r3, #128	@ 0x80
 800bf62:	05db      	lsls	r3, r3, #23
 800bf64:	4013      	ands	r3, r2
 800bf66:	d006      	beq.n	800bf76 <HAL_UART_IRQHandler+0x61e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	22bc      	movs	r2, #188	@ 0xbc
 800bf6c:	589b      	ldr	r3, [r3, r2]
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	0010      	movs	r0, r2
 800bf72:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf74:	e01b      	b.n	800bfae <HAL_UART_IRQHandler+0x656>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bf76:	23a4      	movs	r3, #164	@ 0xa4
 800bf78:	18fb      	adds	r3, r7, r3
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	2380      	movs	r3, #128	@ 0x80
 800bf7e:	045b      	lsls	r3, r3, #17
 800bf80:	4013      	ands	r3, r2
 800bf82:	d014      	beq.n	800bfae <HAL_UART_IRQHandler+0x656>
 800bf84:	23a0      	movs	r3, #160	@ 0xa0
 800bf86:	18fb      	adds	r3, r7, r3
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	da0f      	bge.n	800bfae <HAL_UART_IRQHandler+0x656>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	22b8      	movs	r2, #184	@ 0xb8
 800bf92:	589b      	ldr	r3, [r3, r2]
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	0010      	movs	r0, r2
 800bf98:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf9a:	e008      	b.n	800bfae <HAL_UART_IRQHandler+0x656>
      return;
 800bf9c:	46c0      	nop			@ (mov r8, r8)
 800bf9e:	e006      	b.n	800bfae <HAL_UART_IRQHandler+0x656>
    return;
 800bfa0:	46c0      	nop			@ (mov r8, r8)
 800bfa2:	e004      	b.n	800bfae <HAL_UART_IRQHandler+0x656>
      return;
 800bfa4:	46c0      	nop			@ (mov r8, r8)
 800bfa6:	e002      	b.n	800bfae <HAL_UART_IRQHandler+0x656>
      return;
 800bfa8:	46c0      	nop			@ (mov r8, r8)
 800bfaa:	e000      	b.n	800bfae <HAL_UART_IRQHandler+0x656>
    return;
 800bfac:	46c0      	nop			@ (mov r8, r8)
  }
}
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	b02a      	add	sp, #168	@ 0xa8
 800bfb2:	bdb0      	pop	{r4, r5, r7, pc}
 800bfb4:	fffffeff 	.word	0xfffffeff
 800bfb8:	fffffedf 	.word	0xfffffedf
 800bfbc:	effffffe 	.word	0xeffffffe

0800bfc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bfc8:	46c0      	nop			@ (mov r8, r8)
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	b002      	add	sp, #8
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bfd8:	46c0      	nop			@ (mov r8, r8)
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	b002      	add	sp, #8
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800bfe8:	46c0      	nop			@ (mov r8, r8)
 800bfea:	46bd      	mov	sp, r7
 800bfec:	b002      	add	sp, #8
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bff8:	46c0      	nop			@ (mov r8, r8)
 800bffa:	46bd      	mov	sp, r7
 800bffc:	b002      	add	sp, #8
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c008:	46c0      	nop			@ (mov r8, r8)
 800c00a:	46bd      	mov	sp, r7
 800c00c:	b002      	add	sp, #8
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c018:	46c0      	nop			@ (mov r8, r8)
 800c01a:	46bd      	mov	sp, r7
 800c01c:	b002      	add	sp, #8
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800c028:	46c0      	nop			@ (mov r8, r8)
 800c02a:	46bd      	mov	sp, r7
 800c02c:	b002      	add	sp, #8
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800c038:	46c0      	nop			@ (mov r8, r8)
 800c03a:	46bd      	mov	sp, r7
 800c03c:	b002      	add	sp, #8
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b082      	sub	sp, #8
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	000a      	movs	r2, r1
 800c04a:	1cbb      	adds	r3, r7, #2
 800c04c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c04e:	46c0      	nop			@ (mov r8, r8)
 800c050:	46bd      	mov	sp, r7
 800c052:	b002      	add	sp, #8
 800c054:	bd80      	pop	{r7, pc}
	...

0800c058 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2194      	movs	r1, #148	@ 0x94
 800c064:	4a18      	ldr	r2, [pc, #96]	@ (800c0c8 <UART_InitCallbacksToDefault+0x70>)
 800c066:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2198      	movs	r1, #152	@ 0x98
 800c06c:	4a17      	ldr	r2, [pc, #92]	@ (800c0cc <UART_InitCallbacksToDefault+0x74>)
 800c06e:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	219c      	movs	r1, #156	@ 0x9c
 800c074:	4a16      	ldr	r2, [pc, #88]	@ (800c0d0 <UART_InitCallbacksToDefault+0x78>)
 800c076:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	21a0      	movs	r1, #160	@ 0xa0
 800c07c:	4a15      	ldr	r2, [pc, #84]	@ (800c0d4 <UART_InitCallbacksToDefault+0x7c>)
 800c07e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	21a4      	movs	r1, #164	@ 0xa4
 800c084:	4a14      	ldr	r2, [pc, #80]	@ (800c0d8 <UART_InitCallbacksToDefault+0x80>)
 800c086:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	21a8      	movs	r1, #168	@ 0xa8
 800c08c:	4a13      	ldr	r2, [pc, #76]	@ (800c0dc <UART_InitCallbacksToDefault+0x84>)
 800c08e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	21ac      	movs	r1, #172	@ 0xac
 800c094:	4a12      	ldr	r2, [pc, #72]	@ (800c0e0 <UART_InitCallbacksToDefault+0x88>)
 800c096:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	21b0      	movs	r1, #176	@ 0xb0
 800c09c:	4a11      	ldr	r2, [pc, #68]	@ (800c0e4 <UART_InitCallbacksToDefault+0x8c>)
 800c09e:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	21b4      	movs	r1, #180	@ 0xb4
 800c0a4:	4a10      	ldr	r2, [pc, #64]	@ (800c0e8 <UART_InitCallbacksToDefault+0x90>)
 800c0a6:	505a      	str	r2, [r3, r1]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	21b8      	movs	r1, #184	@ 0xb8
 800c0ac:	4a0f      	ldr	r2, [pc, #60]	@ (800c0ec <UART_InitCallbacksToDefault+0x94>)
 800c0ae:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	21bc      	movs	r1, #188	@ 0xbc
 800c0b4:	4a0e      	ldr	r2, [pc, #56]	@ (800c0f0 <UART_InitCallbacksToDefault+0x98>)
 800c0b6:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	21c0      	movs	r1, #192	@ 0xc0
 800c0bc:	4a0d      	ldr	r2, [pc, #52]	@ (800c0f4 <UART_InitCallbacksToDefault+0x9c>)
 800c0be:	505a      	str	r2, [r3, r1]

}
 800c0c0:	46c0      	nop			@ (mov r8, r8)
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	b002      	add	sp, #8
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	0800bfd1 	.word	0x0800bfd1
 800c0cc:	0800bfc1 	.word	0x0800bfc1
 800c0d0:	0800bff1 	.word	0x0800bff1
 800c0d4:	0800bfe1 	.word	0x0800bfe1
 800c0d8:	0800c001 	.word	0x0800c001
 800c0dc:	0800c011 	.word	0x0800c011
 800c0e0:	0800c021 	.word	0x0800c021
 800c0e4:	0800c031 	.word	0x0800c031
 800c0e8:	0800ceb1 	.word	0x0800ceb1
 800c0ec:	0800cec1 	.word	0x0800cec1
 800c0f0:	0800ced1 	.word	0x0800ced1
 800c0f4:	0800c041 	.word	0x0800c041

0800c0f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c0f8:	b5b0      	push	{r4, r5, r7, lr}
 800c0fa:	b090      	sub	sp, #64	@ 0x40
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c100:	231a      	movs	r3, #26
 800c102:	2220      	movs	r2, #32
 800c104:	189b      	adds	r3, r3, r2
 800c106:	19db      	adds	r3, r3, r7
 800c108:	2200      	movs	r2, #0
 800c10a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c10e:	689a      	ldr	r2, [r3, #8]
 800c110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c112:	691b      	ldr	r3, [r3, #16]
 800c114:	431a      	orrs	r2, r3
 800c116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c118:	695b      	ldr	r3, [r3, #20]
 800c11a:	431a      	orrs	r2, r3
 800c11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c11e:	69db      	ldr	r3, [r3, #28]
 800c120:	4313      	orrs	r3, r2
 800c122:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4ac4      	ldr	r2, [pc, #784]	@ (800c43c <UART_SetConfig+0x344>)
 800c12c:	4013      	ands	r3, r2
 800c12e:	0019      	movs	r1, r3
 800c130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c132:	681a      	ldr	r2, [r3, #0]
 800c134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c136:	430b      	orrs	r3, r1
 800c138:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	4abf      	ldr	r2, [pc, #764]	@ (800c440 <UART_SetConfig+0x348>)
 800c142:	4013      	ands	r3, r2
 800c144:	0018      	movs	r0, r3
 800c146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c148:	68d9      	ldr	r1, [r3, #12]
 800c14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c14c:	681a      	ldr	r2, [r3, #0]
 800c14e:	0003      	movs	r3, r0
 800c150:	430b      	orrs	r3, r1
 800c152:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c156:	699b      	ldr	r3, [r3, #24]
 800c158:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4ab9      	ldr	r2, [pc, #740]	@ (800c444 <UART_SetConfig+0x34c>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d004      	beq.n	800c16e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c166:	6a1b      	ldr	r3, [r3, #32]
 800c168:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c16a:	4313      	orrs	r3, r2
 800c16c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	4ab4      	ldr	r2, [pc, #720]	@ (800c448 <UART_SetConfig+0x350>)
 800c176:	4013      	ands	r3, r2
 800c178:	0019      	movs	r1, r3
 800c17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c180:	430b      	orrs	r3, r1
 800c182:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c18a:	220f      	movs	r2, #15
 800c18c:	4393      	bics	r3, r2
 800c18e:	0018      	movs	r0, r3
 800c190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c192:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	0003      	movs	r3, r0
 800c19a:	430b      	orrs	r3, r1
 800c19c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4aaa      	ldr	r2, [pc, #680]	@ (800c44c <UART_SetConfig+0x354>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d131      	bne.n	800c20c <UART_SetConfig+0x114>
 800c1a8:	4ba9      	ldr	r3, [pc, #676]	@ (800c450 <UART_SetConfig+0x358>)
 800c1aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1ac:	2203      	movs	r2, #3
 800c1ae:	4013      	ands	r3, r2
 800c1b0:	2b03      	cmp	r3, #3
 800c1b2:	d01d      	beq.n	800c1f0 <UART_SetConfig+0xf8>
 800c1b4:	d823      	bhi.n	800c1fe <UART_SetConfig+0x106>
 800c1b6:	2b02      	cmp	r3, #2
 800c1b8:	d00c      	beq.n	800c1d4 <UART_SetConfig+0xdc>
 800c1ba:	d820      	bhi.n	800c1fe <UART_SetConfig+0x106>
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d002      	beq.n	800c1c6 <UART_SetConfig+0xce>
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d00e      	beq.n	800c1e2 <UART_SetConfig+0xea>
 800c1c4:	e01b      	b.n	800c1fe <UART_SetConfig+0x106>
 800c1c6:	231b      	movs	r3, #27
 800c1c8:	2220      	movs	r2, #32
 800c1ca:	189b      	adds	r3, r3, r2
 800c1cc:	19db      	adds	r3, r3, r7
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	701a      	strb	r2, [r3, #0]
 800c1d2:	e071      	b.n	800c2b8 <UART_SetConfig+0x1c0>
 800c1d4:	231b      	movs	r3, #27
 800c1d6:	2220      	movs	r2, #32
 800c1d8:	189b      	adds	r3, r3, r2
 800c1da:	19db      	adds	r3, r3, r7
 800c1dc:	2202      	movs	r2, #2
 800c1de:	701a      	strb	r2, [r3, #0]
 800c1e0:	e06a      	b.n	800c2b8 <UART_SetConfig+0x1c0>
 800c1e2:	231b      	movs	r3, #27
 800c1e4:	2220      	movs	r2, #32
 800c1e6:	189b      	adds	r3, r3, r2
 800c1e8:	19db      	adds	r3, r3, r7
 800c1ea:	2204      	movs	r2, #4
 800c1ec:	701a      	strb	r2, [r3, #0]
 800c1ee:	e063      	b.n	800c2b8 <UART_SetConfig+0x1c0>
 800c1f0:	231b      	movs	r3, #27
 800c1f2:	2220      	movs	r2, #32
 800c1f4:	189b      	adds	r3, r3, r2
 800c1f6:	19db      	adds	r3, r3, r7
 800c1f8:	2208      	movs	r2, #8
 800c1fa:	701a      	strb	r2, [r3, #0]
 800c1fc:	e05c      	b.n	800c2b8 <UART_SetConfig+0x1c0>
 800c1fe:	231b      	movs	r3, #27
 800c200:	2220      	movs	r2, #32
 800c202:	189b      	adds	r3, r3, r2
 800c204:	19db      	adds	r3, r3, r7
 800c206:	2210      	movs	r2, #16
 800c208:	701a      	strb	r2, [r3, #0]
 800c20a:	e055      	b.n	800c2b8 <UART_SetConfig+0x1c0>
 800c20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a90      	ldr	r2, [pc, #576]	@ (800c454 <UART_SetConfig+0x35c>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d106      	bne.n	800c224 <UART_SetConfig+0x12c>
 800c216:	231b      	movs	r3, #27
 800c218:	2220      	movs	r2, #32
 800c21a:	189b      	adds	r3, r3, r2
 800c21c:	19db      	adds	r3, r3, r7
 800c21e:	2200      	movs	r2, #0
 800c220:	701a      	strb	r2, [r3, #0]
 800c222:	e049      	b.n	800c2b8 <UART_SetConfig+0x1c0>
 800c224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a86      	ldr	r2, [pc, #536]	@ (800c444 <UART_SetConfig+0x34c>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d13e      	bne.n	800c2ac <UART_SetConfig+0x1b4>
 800c22e:	4b88      	ldr	r3, [pc, #544]	@ (800c450 <UART_SetConfig+0x358>)
 800c230:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c232:	23c0      	movs	r3, #192	@ 0xc0
 800c234:	011b      	lsls	r3, r3, #4
 800c236:	4013      	ands	r3, r2
 800c238:	22c0      	movs	r2, #192	@ 0xc0
 800c23a:	0112      	lsls	r2, r2, #4
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d027      	beq.n	800c290 <UART_SetConfig+0x198>
 800c240:	22c0      	movs	r2, #192	@ 0xc0
 800c242:	0112      	lsls	r2, r2, #4
 800c244:	4293      	cmp	r3, r2
 800c246:	d82a      	bhi.n	800c29e <UART_SetConfig+0x1a6>
 800c248:	2280      	movs	r2, #128	@ 0x80
 800c24a:	0112      	lsls	r2, r2, #4
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d011      	beq.n	800c274 <UART_SetConfig+0x17c>
 800c250:	2280      	movs	r2, #128	@ 0x80
 800c252:	0112      	lsls	r2, r2, #4
 800c254:	4293      	cmp	r3, r2
 800c256:	d822      	bhi.n	800c29e <UART_SetConfig+0x1a6>
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d004      	beq.n	800c266 <UART_SetConfig+0x16e>
 800c25c:	2280      	movs	r2, #128	@ 0x80
 800c25e:	00d2      	lsls	r2, r2, #3
 800c260:	4293      	cmp	r3, r2
 800c262:	d00e      	beq.n	800c282 <UART_SetConfig+0x18a>
 800c264:	e01b      	b.n	800c29e <UART_SetConfig+0x1a6>
 800c266:	231b      	movs	r3, #27
 800c268:	2220      	movs	r2, #32
 800c26a:	189b      	adds	r3, r3, r2
 800c26c:	19db      	adds	r3, r3, r7
 800c26e:	2200      	movs	r2, #0
 800c270:	701a      	strb	r2, [r3, #0]
 800c272:	e021      	b.n	800c2b8 <UART_SetConfig+0x1c0>
 800c274:	231b      	movs	r3, #27
 800c276:	2220      	movs	r2, #32
 800c278:	189b      	adds	r3, r3, r2
 800c27a:	19db      	adds	r3, r3, r7
 800c27c:	2202      	movs	r2, #2
 800c27e:	701a      	strb	r2, [r3, #0]
 800c280:	e01a      	b.n	800c2b8 <UART_SetConfig+0x1c0>
 800c282:	231b      	movs	r3, #27
 800c284:	2220      	movs	r2, #32
 800c286:	189b      	adds	r3, r3, r2
 800c288:	19db      	adds	r3, r3, r7
 800c28a:	2204      	movs	r2, #4
 800c28c:	701a      	strb	r2, [r3, #0]
 800c28e:	e013      	b.n	800c2b8 <UART_SetConfig+0x1c0>
 800c290:	231b      	movs	r3, #27
 800c292:	2220      	movs	r2, #32
 800c294:	189b      	adds	r3, r3, r2
 800c296:	19db      	adds	r3, r3, r7
 800c298:	2208      	movs	r2, #8
 800c29a:	701a      	strb	r2, [r3, #0]
 800c29c:	e00c      	b.n	800c2b8 <UART_SetConfig+0x1c0>
 800c29e:	231b      	movs	r3, #27
 800c2a0:	2220      	movs	r2, #32
 800c2a2:	189b      	adds	r3, r3, r2
 800c2a4:	19db      	adds	r3, r3, r7
 800c2a6:	2210      	movs	r2, #16
 800c2a8:	701a      	strb	r2, [r3, #0]
 800c2aa:	e005      	b.n	800c2b8 <UART_SetConfig+0x1c0>
 800c2ac:	231b      	movs	r3, #27
 800c2ae:	2220      	movs	r2, #32
 800c2b0:	189b      	adds	r3, r3, r2
 800c2b2:	19db      	adds	r3, r3, r7
 800c2b4:	2210      	movs	r2, #16
 800c2b6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a61      	ldr	r2, [pc, #388]	@ (800c444 <UART_SetConfig+0x34c>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d000      	beq.n	800c2c4 <UART_SetConfig+0x1cc>
 800c2c2:	e092      	b.n	800c3ea <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c2c4:	231b      	movs	r3, #27
 800c2c6:	2220      	movs	r2, #32
 800c2c8:	189b      	adds	r3, r3, r2
 800c2ca:	19db      	adds	r3, r3, r7
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	2b08      	cmp	r3, #8
 800c2d0:	d015      	beq.n	800c2fe <UART_SetConfig+0x206>
 800c2d2:	dc18      	bgt.n	800c306 <UART_SetConfig+0x20e>
 800c2d4:	2b04      	cmp	r3, #4
 800c2d6:	d00d      	beq.n	800c2f4 <UART_SetConfig+0x1fc>
 800c2d8:	dc15      	bgt.n	800c306 <UART_SetConfig+0x20e>
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d002      	beq.n	800c2e4 <UART_SetConfig+0x1ec>
 800c2de:	2b02      	cmp	r3, #2
 800c2e0:	d005      	beq.n	800c2ee <UART_SetConfig+0x1f6>
 800c2e2:	e010      	b.n	800c306 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2e4:	f7fc fdd6 	bl	8008e94 <HAL_RCC_GetPCLK1Freq>
 800c2e8:	0003      	movs	r3, r0
 800c2ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2ec:	e014      	b.n	800c318 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c2ee:	4b5a      	ldr	r3, [pc, #360]	@ (800c458 <UART_SetConfig+0x360>)
 800c2f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2f2:	e011      	b.n	800c318 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c2f4:	f7fc fd42 	bl	8008d7c <HAL_RCC_GetSysClockFreq>
 800c2f8:	0003      	movs	r3, r0
 800c2fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2fc:	e00c      	b.n	800c318 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2fe:	2380      	movs	r3, #128	@ 0x80
 800c300:	021b      	lsls	r3, r3, #8
 800c302:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c304:	e008      	b.n	800c318 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800c306:	2300      	movs	r3, #0
 800c308:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800c30a:	231a      	movs	r3, #26
 800c30c:	2220      	movs	r2, #32
 800c30e:	189b      	adds	r3, r3, r2
 800c310:	19db      	adds	r3, r3, r7
 800c312:	2201      	movs	r2, #1
 800c314:	701a      	strb	r2, [r3, #0]
        break;
 800c316:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d100      	bne.n	800c320 <UART_SetConfig+0x228>
 800c31e:	e147      	b.n	800c5b0 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c322:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c324:	4b4d      	ldr	r3, [pc, #308]	@ (800c45c <UART_SetConfig+0x364>)
 800c326:	0052      	lsls	r2, r2, #1
 800c328:	5ad3      	ldrh	r3, [r2, r3]
 800c32a:	0019      	movs	r1, r3
 800c32c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c32e:	f7f3 fee9 	bl	8000104 <__udivsi3>
 800c332:	0003      	movs	r3, r0
 800c334:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c338:	685a      	ldr	r2, [r3, #4]
 800c33a:	0013      	movs	r3, r2
 800c33c:	005b      	lsls	r3, r3, #1
 800c33e:	189b      	adds	r3, r3, r2
 800c340:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c342:	429a      	cmp	r2, r3
 800c344:	d305      	bcc.n	800c352 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c34c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c34e:	429a      	cmp	r2, r3
 800c350:	d906      	bls.n	800c360 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800c352:	231a      	movs	r3, #26
 800c354:	2220      	movs	r2, #32
 800c356:	189b      	adds	r3, r3, r2
 800c358:	19db      	adds	r3, r3, r7
 800c35a:	2201      	movs	r2, #1
 800c35c:	701a      	strb	r2, [r3, #0]
 800c35e:	e127      	b.n	800c5b0 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c362:	61bb      	str	r3, [r7, #24]
 800c364:	2300      	movs	r3, #0
 800c366:	61fb      	str	r3, [r7, #28]
 800c368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c36a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c36c:	4b3b      	ldr	r3, [pc, #236]	@ (800c45c <UART_SetConfig+0x364>)
 800c36e:	0052      	lsls	r2, r2, #1
 800c370:	5ad3      	ldrh	r3, [r2, r3]
 800c372:	613b      	str	r3, [r7, #16]
 800c374:	2300      	movs	r3, #0
 800c376:	617b      	str	r3, [r7, #20]
 800c378:	693a      	ldr	r2, [r7, #16]
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	69b8      	ldr	r0, [r7, #24]
 800c37e:	69f9      	ldr	r1, [r7, #28]
 800c380:	f7f3 ff4c 	bl	800021c <__aeabi_uldivmod>
 800c384:	0002      	movs	r2, r0
 800c386:	000b      	movs	r3, r1
 800c388:	0e11      	lsrs	r1, r2, #24
 800c38a:	021d      	lsls	r5, r3, #8
 800c38c:	430d      	orrs	r5, r1
 800c38e:	0214      	lsls	r4, r2, #8
 800c390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	085b      	lsrs	r3, r3, #1
 800c396:	60bb      	str	r3, [r7, #8]
 800c398:	2300      	movs	r3, #0
 800c39a:	60fb      	str	r3, [r7, #12]
 800c39c:	68b8      	ldr	r0, [r7, #8]
 800c39e:	68f9      	ldr	r1, [r7, #12]
 800c3a0:	1900      	adds	r0, r0, r4
 800c3a2:	4169      	adcs	r1, r5
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	603b      	str	r3, [r7, #0]
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	607b      	str	r3, [r7, #4]
 800c3ae:	683a      	ldr	r2, [r7, #0]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f7f3 ff33 	bl	800021c <__aeabi_uldivmod>
 800c3b6:	0002      	movs	r2, r0
 800c3b8:	000b      	movs	r3, r1
 800c3ba:	0013      	movs	r3, r2
 800c3bc:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c3be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3c0:	23c0      	movs	r3, #192	@ 0xc0
 800c3c2:	009b      	lsls	r3, r3, #2
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d309      	bcc.n	800c3dc <UART_SetConfig+0x2e4>
 800c3c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3ca:	2380      	movs	r3, #128	@ 0x80
 800c3cc:	035b      	lsls	r3, r3, #13
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d204      	bcs.n	800c3dc <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800c3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3d8:	60da      	str	r2, [r3, #12]
 800c3da:	e0e9      	b.n	800c5b0 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800c3dc:	231a      	movs	r3, #26
 800c3de:	2220      	movs	r2, #32
 800c3e0:	189b      	adds	r3, r3, r2
 800c3e2:	19db      	adds	r3, r3, r7
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	701a      	strb	r2, [r3, #0]
 800c3e8:	e0e2      	b.n	800c5b0 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ec:	69da      	ldr	r2, [r3, #28]
 800c3ee:	2380      	movs	r3, #128	@ 0x80
 800c3f0:	021b      	lsls	r3, r3, #8
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d000      	beq.n	800c3f8 <UART_SetConfig+0x300>
 800c3f6:	e083      	b.n	800c500 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800c3f8:	231b      	movs	r3, #27
 800c3fa:	2220      	movs	r2, #32
 800c3fc:	189b      	adds	r3, r3, r2
 800c3fe:	19db      	adds	r3, r3, r7
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	2b08      	cmp	r3, #8
 800c404:	d015      	beq.n	800c432 <UART_SetConfig+0x33a>
 800c406:	dc2b      	bgt.n	800c460 <UART_SetConfig+0x368>
 800c408:	2b04      	cmp	r3, #4
 800c40a:	d00d      	beq.n	800c428 <UART_SetConfig+0x330>
 800c40c:	dc28      	bgt.n	800c460 <UART_SetConfig+0x368>
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d002      	beq.n	800c418 <UART_SetConfig+0x320>
 800c412:	2b02      	cmp	r3, #2
 800c414:	d005      	beq.n	800c422 <UART_SetConfig+0x32a>
 800c416:	e023      	b.n	800c460 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c418:	f7fc fd3c 	bl	8008e94 <HAL_RCC_GetPCLK1Freq>
 800c41c:	0003      	movs	r3, r0
 800c41e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c420:	e027      	b.n	800c472 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c422:	4b0d      	ldr	r3, [pc, #52]	@ (800c458 <UART_SetConfig+0x360>)
 800c424:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c426:	e024      	b.n	800c472 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c428:	f7fc fca8 	bl	8008d7c <HAL_RCC_GetSysClockFreq>
 800c42c:	0003      	movs	r3, r0
 800c42e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c430:	e01f      	b.n	800c472 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c432:	2380      	movs	r3, #128	@ 0x80
 800c434:	021b      	lsls	r3, r3, #8
 800c436:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c438:	e01b      	b.n	800c472 <UART_SetConfig+0x37a>
 800c43a:	46c0      	nop			@ (mov r8, r8)
 800c43c:	cfff69f3 	.word	0xcfff69f3
 800c440:	ffffcfff 	.word	0xffffcfff
 800c444:	40008000 	.word	0x40008000
 800c448:	11fff4ff 	.word	0x11fff4ff
 800c44c:	40013800 	.word	0x40013800
 800c450:	40021000 	.word	0x40021000
 800c454:	40004400 	.word	0x40004400
 800c458:	00f42400 	.word	0x00f42400
 800c45c:	0800d988 	.word	0x0800d988
      default:
        pclk = 0U;
 800c460:	2300      	movs	r3, #0
 800c462:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800c464:	231a      	movs	r3, #26
 800c466:	2220      	movs	r2, #32
 800c468:	189b      	adds	r3, r3, r2
 800c46a:	19db      	adds	r3, r3, r7
 800c46c:	2201      	movs	r2, #1
 800c46e:	701a      	strb	r2, [r3, #0]
        break;
 800c470:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c474:	2b00      	cmp	r3, #0
 800c476:	d100      	bne.n	800c47a <UART_SetConfig+0x382>
 800c478:	e09a      	b.n	800c5b0 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c47c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c47e:	4b58      	ldr	r3, [pc, #352]	@ (800c5e0 <UART_SetConfig+0x4e8>)
 800c480:	0052      	lsls	r2, r2, #1
 800c482:	5ad3      	ldrh	r3, [r2, r3]
 800c484:	0019      	movs	r1, r3
 800c486:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c488:	f7f3 fe3c 	bl	8000104 <__udivsi3>
 800c48c:	0003      	movs	r3, r0
 800c48e:	005a      	lsls	r2, r3, #1
 800c490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	085b      	lsrs	r3, r3, #1
 800c496:	18d2      	adds	r2, r2, r3
 800c498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	0019      	movs	r1, r3
 800c49e:	0010      	movs	r0, r2
 800c4a0:	f7f3 fe30 	bl	8000104 <__udivsi3>
 800c4a4:	0003      	movs	r3, r0
 800c4a6:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4aa:	2b0f      	cmp	r3, #15
 800c4ac:	d921      	bls.n	800c4f2 <UART_SetConfig+0x3fa>
 800c4ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4b0:	2380      	movs	r3, #128	@ 0x80
 800c4b2:	025b      	lsls	r3, r3, #9
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d21c      	bcs.n	800c4f2 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ba:	b29a      	uxth	r2, r3
 800c4bc:	200e      	movs	r0, #14
 800c4be:	2420      	movs	r4, #32
 800c4c0:	1903      	adds	r3, r0, r4
 800c4c2:	19db      	adds	r3, r3, r7
 800c4c4:	210f      	movs	r1, #15
 800c4c6:	438a      	bics	r2, r1
 800c4c8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4cc:	085b      	lsrs	r3, r3, #1
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	2207      	movs	r2, #7
 800c4d2:	4013      	ands	r3, r2
 800c4d4:	b299      	uxth	r1, r3
 800c4d6:	1903      	adds	r3, r0, r4
 800c4d8:	19db      	adds	r3, r3, r7
 800c4da:	1902      	adds	r2, r0, r4
 800c4dc:	19d2      	adds	r2, r2, r7
 800c4de:	8812      	ldrh	r2, [r2, #0]
 800c4e0:	430a      	orrs	r2, r1
 800c4e2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800c4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	1902      	adds	r2, r0, r4
 800c4ea:	19d2      	adds	r2, r2, r7
 800c4ec:	8812      	ldrh	r2, [r2, #0]
 800c4ee:	60da      	str	r2, [r3, #12]
 800c4f0:	e05e      	b.n	800c5b0 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800c4f2:	231a      	movs	r3, #26
 800c4f4:	2220      	movs	r2, #32
 800c4f6:	189b      	adds	r3, r3, r2
 800c4f8:	19db      	adds	r3, r3, r7
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	701a      	strb	r2, [r3, #0]
 800c4fe:	e057      	b.n	800c5b0 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c500:	231b      	movs	r3, #27
 800c502:	2220      	movs	r2, #32
 800c504:	189b      	adds	r3, r3, r2
 800c506:	19db      	adds	r3, r3, r7
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	2b08      	cmp	r3, #8
 800c50c:	d015      	beq.n	800c53a <UART_SetConfig+0x442>
 800c50e:	dc18      	bgt.n	800c542 <UART_SetConfig+0x44a>
 800c510:	2b04      	cmp	r3, #4
 800c512:	d00d      	beq.n	800c530 <UART_SetConfig+0x438>
 800c514:	dc15      	bgt.n	800c542 <UART_SetConfig+0x44a>
 800c516:	2b00      	cmp	r3, #0
 800c518:	d002      	beq.n	800c520 <UART_SetConfig+0x428>
 800c51a:	2b02      	cmp	r3, #2
 800c51c:	d005      	beq.n	800c52a <UART_SetConfig+0x432>
 800c51e:	e010      	b.n	800c542 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c520:	f7fc fcb8 	bl	8008e94 <HAL_RCC_GetPCLK1Freq>
 800c524:	0003      	movs	r3, r0
 800c526:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c528:	e014      	b.n	800c554 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c52a:	4b2e      	ldr	r3, [pc, #184]	@ (800c5e4 <UART_SetConfig+0x4ec>)
 800c52c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c52e:	e011      	b.n	800c554 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c530:	f7fc fc24 	bl	8008d7c <HAL_RCC_GetSysClockFreq>
 800c534:	0003      	movs	r3, r0
 800c536:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c538:	e00c      	b.n	800c554 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c53a:	2380      	movs	r3, #128	@ 0x80
 800c53c:	021b      	lsls	r3, r3, #8
 800c53e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c540:	e008      	b.n	800c554 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800c542:	2300      	movs	r3, #0
 800c544:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800c546:	231a      	movs	r3, #26
 800c548:	2220      	movs	r2, #32
 800c54a:	189b      	adds	r3, r3, r2
 800c54c:	19db      	adds	r3, r3, r7
 800c54e:	2201      	movs	r2, #1
 800c550:	701a      	strb	r2, [r3, #0]
        break;
 800c552:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800c554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c556:	2b00      	cmp	r3, #0
 800c558:	d02a      	beq.n	800c5b0 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c55c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c55e:	4b20      	ldr	r3, [pc, #128]	@ (800c5e0 <UART_SetConfig+0x4e8>)
 800c560:	0052      	lsls	r2, r2, #1
 800c562:	5ad3      	ldrh	r3, [r2, r3]
 800c564:	0019      	movs	r1, r3
 800c566:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c568:	f7f3 fdcc 	bl	8000104 <__udivsi3>
 800c56c:	0003      	movs	r3, r0
 800c56e:	001a      	movs	r2, r3
 800c570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	085b      	lsrs	r3, r3, #1
 800c576:	18d2      	adds	r2, r2, r3
 800c578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	0019      	movs	r1, r3
 800c57e:	0010      	movs	r0, r2
 800c580:	f7f3 fdc0 	bl	8000104 <__udivsi3>
 800c584:	0003      	movs	r3, r0
 800c586:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c58a:	2b0f      	cmp	r3, #15
 800c58c:	d90a      	bls.n	800c5a4 <UART_SetConfig+0x4ac>
 800c58e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c590:	2380      	movs	r3, #128	@ 0x80
 800c592:	025b      	lsls	r3, r3, #9
 800c594:	429a      	cmp	r2, r3
 800c596:	d205      	bcs.n	800c5a4 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c59a:	b29a      	uxth	r2, r3
 800c59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	60da      	str	r2, [r3, #12]
 800c5a2:	e005      	b.n	800c5b0 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800c5a4:	231a      	movs	r3, #26
 800c5a6:	2220      	movs	r2, #32
 800c5a8:	189b      	adds	r3, r3, r2
 800c5aa:	19db      	adds	r3, r3, r7
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b2:	226a      	movs	r2, #106	@ 0x6a
 800c5b4:	2101      	movs	r1, #1
 800c5b6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ba:	2268      	movs	r2, #104	@ 0x68
 800c5bc:	2101      	movs	r1, #1
 800c5be:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c5cc:	231a      	movs	r3, #26
 800c5ce:	2220      	movs	r2, #32
 800c5d0:	189b      	adds	r3, r3, r2
 800c5d2:	19db      	adds	r3, r3, r7
 800c5d4:	781b      	ldrb	r3, [r3, #0]
}
 800c5d6:	0018      	movs	r0, r3
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	b010      	add	sp, #64	@ 0x40
 800c5dc:	bdb0      	pop	{r4, r5, r7, pc}
 800c5de:	46c0      	nop			@ (mov r8, r8)
 800c5e0:	0800d988 	.word	0x0800d988
 800c5e4:	00f42400 	.word	0x00f42400

0800c5e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5f4:	2208      	movs	r2, #8
 800c5f6:	4013      	ands	r3, r2
 800c5f8:	d00b      	beq.n	800c612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	4a4a      	ldr	r2, [pc, #296]	@ (800c72c <UART_AdvFeatureConfig+0x144>)
 800c602:	4013      	ands	r3, r2
 800c604:	0019      	movs	r1, r3
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	430a      	orrs	r2, r1
 800c610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c616:	2201      	movs	r2, #1
 800c618:	4013      	ands	r3, r2
 800c61a:	d00b      	beq.n	800c634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	685b      	ldr	r3, [r3, #4]
 800c622:	4a43      	ldr	r2, [pc, #268]	@ (800c730 <UART_AdvFeatureConfig+0x148>)
 800c624:	4013      	ands	r3, r2
 800c626:	0019      	movs	r1, r3
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	430a      	orrs	r2, r1
 800c632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c638:	2202      	movs	r2, #2
 800c63a:	4013      	ands	r3, r2
 800c63c:	d00b      	beq.n	800c656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	685b      	ldr	r3, [r3, #4]
 800c644:	4a3b      	ldr	r2, [pc, #236]	@ (800c734 <UART_AdvFeatureConfig+0x14c>)
 800c646:	4013      	ands	r3, r2
 800c648:	0019      	movs	r1, r3
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	430a      	orrs	r2, r1
 800c654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c65a:	2204      	movs	r2, #4
 800c65c:	4013      	ands	r3, r2
 800c65e:	d00b      	beq.n	800c678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	4a34      	ldr	r2, [pc, #208]	@ (800c738 <UART_AdvFeatureConfig+0x150>)
 800c668:	4013      	ands	r3, r2
 800c66a:	0019      	movs	r1, r3
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	430a      	orrs	r2, r1
 800c676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c67c:	2210      	movs	r2, #16
 800c67e:	4013      	ands	r3, r2
 800c680:	d00b      	beq.n	800c69a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	689b      	ldr	r3, [r3, #8]
 800c688:	4a2c      	ldr	r2, [pc, #176]	@ (800c73c <UART_AdvFeatureConfig+0x154>)
 800c68a:	4013      	ands	r3, r2
 800c68c:	0019      	movs	r1, r3
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	430a      	orrs	r2, r1
 800c698:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c69e:	2220      	movs	r2, #32
 800c6a0:	4013      	ands	r3, r2
 800c6a2:	d00b      	beq.n	800c6bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	689b      	ldr	r3, [r3, #8]
 800c6aa:	4a25      	ldr	r2, [pc, #148]	@ (800c740 <UART_AdvFeatureConfig+0x158>)
 800c6ac:	4013      	ands	r3, r2
 800c6ae:	0019      	movs	r1, r3
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	430a      	orrs	r2, r1
 800c6ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6c0:	2240      	movs	r2, #64	@ 0x40
 800c6c2:	4013      	ands	r3, r2
 800c6c4:	d01d      	beq.n	800c702 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	4a1d      	ldr	r2, [pc, #116]	@ (800c744 <UART_AdvFeatureConfig+0x15c>)
 800c6ce:	4013      	ands	r3, r2
 800c6d0:	0019      	movs	r1, r3
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	430a      	orrs	r2, r1
 800c6dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c6e2:	2380      	movs	r3, #128	@ 0x80
 800c6e4:	035b      	lsls	r3, r3, #13
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d10b      	bne.n	800c702 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	4a15      	ldr	r2, [pc, #84]	@ (800c748 <UART_AdvFeatureConfig+0x160>)
 800c6f2:	4013      	ands	r3, r2
 800c6f4:	0019      	movs	r1, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	430a      	orrs	r2, r1
 800c700:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c706:	2280      	movs	r2, #128	@ 0x80
 800c708:	4013      	ands	r3, r2
 800c70a:	d00b      	beq.n	800c724 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	4a0e      	ldr	r2, [pc, #56]	@ (800c74c <UART_AdvFeatureConfig+0x164>)
 800c714:	4013      	ands	r3, r2
 800c716:	0019      	movs	r1, r3
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	430a      	orrs	r2, r1
 800c722:	605a      	str	r2, [r3, #4]
  }
}
 800c724:	46c0      	nop			@ (mov r8, r8)
 800c726:	46bd      	mov	sp, r7
 800c728:	b002      	add	sp, #8
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	ffff7fff 	.word	0xffff7fff
 800c730:	fffdffff 	.word	0xfffdffff
 800c734:	fffeffff 	.word	0xfffeffff
 800c738:	fffbffff 	.word	0xfffbffff
 800c73c:	ffffefff 	.word	0xffffefff
 800c740:	ffffdfff 	.word	0xffffdfff
 800c744:	ffefffff 	.word	0xffefffff
 800c748:	ff9fffff 	.word	0xff9fffff
 800c74c:	fff7ffff 	.word	0xfff7ffff

0800c750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b092      	sub	sp, #72	@ 0x48
 800c754:	af02      	add	r7, sp, #8
 800c756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2290      	movs	r2, #144	@ 0x90
 800c75c:	2100      	movs	r1, #0
 800c75e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c760:	f7f9 fa66 	bl	8005c30 <HAL_GetTick>
 800c764:	0003      	movs	r3, r0
 800c766:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	2208      	movs	r2, #8
 800c770:	4013      	ands	r3, r2
 800c772:	2b08      	cmp	r3, #8
 800c774:	d12d      	bne.n	800c7d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c778:	2280      	movs	r2, #128	@ 0x80
 800c77a:	0391      	lsls	r1, r2, #14
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	4a47      	ldr	r2, [pc, #284]	@ (800c89c <UART_CheckIdleState+0x14c>)
 800c780:	9200      	str	r2, [sp, #0]
 800c782:	2200      	movs	r2, #0
 800c784:	f000 f88e 	bl	800c8a4 <UART_WaitOnFlagUntilTimeout>
 800c788:	1e03      	subs	r3, r0, #0
 800c78a:	d022      	beq.n	800c7d2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c78c:	f3ef 8310 	mrs	r3, PRIMASK
 800c790:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800c792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c794:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c796:	2301      	movs	r3, #1
 800c798:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c79a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c79c:	f383 8810 	msr	PRIMASK, r3
}
 800c7a0:	46c0      	nop			@ (mov r8, r8)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2180      	movs	r1, #128	@ 0x80
 800c7ae:	438a      	bics	r2, r1
 800c7b0:	601a      	str	r2, [r3, #0]
 800c7b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7b8:	f383 8810 	msr	PRIMASK, r3
}
 800c7bc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2288      	movs	r2, #136	@ 0x88
 800c7c2:	2120      	movs	r1, #32
 800c7c4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2284      	movs	r2, #132	@ 0x84
 800c7ca:	2100      	movs	r1, #0
 800c7cc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c7ce:	2303      	movs	r3, #3
 800c7d0:	e060      	b.n	800c894 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2204      	movs	r2, #4
 800c7da:	4013      	ands	r3, r2
 800c7dc:	2b04      	cmp	r3, #4
 800c7de:	d146      	bne.n	800c86e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c7e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7e2:	2280      	movs	r2, #128	@ 0x80
 800c7e4:	03d1      	lsls	r1, r2, #15
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	4a2c      	ldr	r2, [pc, #176]	@ (800c89c <UART_CheckIdleState+0x14c>)
 800c7ea:	9200      	str	r2, [sp, #0]
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	f000 f859 	bl	800c8a4 <UART_WaitOnFlagUntilTimeout>
 800c7f2:	1e03      	subs	r3, r0, #0
 800c7f4:	d03b      	beq.n	800c86e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7f6:	f3ef 8310 	mrs	r3, PRIMASK
 800c7fa:	60fb      	str	r3, [r7, #12]
  return(result);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c7fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800c800:	2301      	movs	r3, #1
 800c802:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	f383 8810 	msr	PRIMASK, r3
}
 800c80a:	46c0      	nop			@ (mov r8, r8)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4922      	ldr	r1, [pc, #136]	@ (800c8a0 <UART_CheckIdleState+0x150>)
 800c818:	400a      	ands	r2, r1
 800c81a:	601a      	str	r2, [r3, #0]
 800c81c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c81e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	f383 8810 	msr	PRIMASK, r3
}
 800c826:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c828:	f3ef 8310 	mrs	r3, PRIMASK
 800c82c:	61bb      	str	r3, [r7, #24]
  return(result);
 800c82e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c830:	633b      	str	r3, [r7, #48]	@ 0x30
 800c832:	2301      	movs	r3, #1
 800c834:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c836:	69fb      	ldr	r3, [r7, #28]
 800c838:	f383 8810 	msr	PRIMASK, r3
}
 800c83c:	46c0      	nop			@ (mov r8, r8)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	689a      	ldr	r2, [r3, #8]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2101      	movs	r1, #1
 800c84a:	438a      	bics	r2, r1
 800c84c:	609a      	str	r2, [r3, #8]
 800c84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c850:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c852:	6a3b      	ldr	r3, [r7, #32]
 800c854:	f383 8810 	msr	PRIMASK, r3
}
 800c858:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	228c      	movs	r2, #140	@ 0x8c
 800c85e:	2120      	movs	r1, #32
 800c860:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2284      	movs	r2, #132	@ 0x84
 800c866:	2100      	movs	r1, #0
 800c868:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c86a:	2303      	movs	r3, #3
 800c86c:	e012      	b.n	800c894 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2288      	movs	r2, #136	@ 0x88
 800c872:	2120      	movs	r1, #32
 800c874:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	228c      	movs	r2, #140	@ 0x8c
 800c87a:	2120      	movs	r1, #32
 800c87c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2200      	movs	r2, #0
 800c882:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2200      	movs	r2, #0
 800c888:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2284      	movs	r2, #132	@ 0x84
 800c88e:	2100      	movs	r1, #0
 800c890:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c892:	2300      	movs	r3, #0
}
 800c894:	0018      	movs	r0, r3
 800c896:	46bd      	mov	sp, r7
 800c898:	b010      	add	sp, #64	@ 0x40
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	01ffffff 	.word	0x01ffffff
 800c8a0:	fffffedf 	.word	0xfffffedf

0800c8a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	603b      	str	r3, [r7, #0]
 800c8b0:	1dfb      	adds	r3, r7, #7
 800c8b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8b4:	e051      	b.n	800c95a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	d04e      	beq.n	800c95a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8bc:	f7f9 f9b8 	bl	8005c30 <HAL_GetTick>
 800c8c0:	0002      	movs	r2, r0
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	1ad3      	subs	r3, r2, r3
 800c8c6:	69ba      	ldr	r2, [r7, #24]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d302      	bcc.n	800c8d2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800c8cc:	69bb      	ldr	r3, [r7, #24]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d101      	bne.n	800c8d6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800c8d2:	2303      	movs	r3, #3
 800c8d4:	e051      	b.n	800c97a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	2204      	movs	r2, #4
 800c8de:	4013      	ands	r3, r2
 800c8e0:	d03b      	beq.n	800c95a <UART_WaitOnFlagUntilTimeout+0xb6>
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	2b80      	cmp	r3, #128	@ 0x80
 800c8e6:	d038      	beq.n	800c95a <UART_WaitOnFlagUntilTimeout+0xb6>
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	2b40      	cmp	r3, #64	@ 0x40
 800c8ec:	d035      	beq.n	800c95a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	69db      	ldr	r3, [r3, #28]
 800c8f4:	2208      	movs	r2, #8
 800c8f6:	4013      	ands	r3, r2
 800c8f8:	2b08      	cmp	r3, #8
 800c8fa:	d111      	bne.n	800c920 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2208      	movs	r2, #8
 800c902:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	0018      	movs	r0, r3
 800c908:	f000 f922 	bl	800cb50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2290      	movs	r2, #144	@ 0x90
 800c910:	2108      	movs	r1, #8
 800c912:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2284      	movs	r2, #132	@ 0x84
 800c918:	2100      	movs	r1, #0
 800c91a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800c91c:	2301      	movs	r3, #1
 800c91e:	e02c      	b.n	800c97a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	69da      	ldr	r2, [r3, #28]
 800c926:	2380      	movs	r3, #128	@ 0x80
 800c928:	011b      	lsls	r3, r3, #4
 800c92a:	401a      	ands	r2, r3
 800c92c:	2380      	movs	r3, #128	@ 0x80
 800c92e:	011b      	lsls	r3, r3, #4
 800c930:	429a      	cmp	r2, r3
 800c932:	d112      	bne.n	800c95a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	2280      	movs	r2, #128	@ 0x80
 800c93a:	0112      	lsls	r2, r2, #4
 800c93c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	0018      	movs	r0, r3
 800c942:	f000 f905 	bl	800cb50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2290      	movs	r2, #144	@ 0x90
 800c94a:	2120      	movs	r1, #32
 800c94c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	2284      	movs	r2, #132	@ 0x84
 800c952:	2100      	movs	r1, #0
 800c954:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800c956:	2303      	movs	r3, #3
 800c958:	e00f      	b.n	800c97a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	69db      	ldr	r3, [r3, #28]
 800c960:	68ba      	ldr	r2, [r7, #8]
 800c962:	4013      	ands	r3, r2
 800c964:	68ba      	ldr	r2, [r7, #8]
 800c966:	1ad3      	subs	r3, r2, r3
 800c968:	425a      	negs	r2, r3
 800c96a:	4153      	adcs	r3, r2
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	001a      	movs	r2, r3
 800c970:	1dfb      	adds	r3, r7, #7
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	429a      	cmp	r2, r3
 800c976:	d09e      	beq.n	800c8b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c978:	2300      	movs	r3, #0
}
 800c97a:	0018      	movs	r0, r3
 800c97c:	46bd      	mov	sp, r7
 800c97e:	b004      	add	sp, #16
 800c980:	bd80      	pop	{r7, pc}
	...

0800c984 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b090      	sub	sp, #64	@ 0x40
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	1dbb      	adds	r3, r7, #6
 800c990:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	68ba      	ldr	r2, [r7, #8]
 800c996:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	1dba      	adds	r2, r7, #6
 800c99c:	215c      	movs	r1, #92	@ 0x5c
 800c99e:	8812      	ldrh	r2, [r2, #0]
 800c9a0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2290      	movs	r2, #144	@ 0x90
 800c9a6:	2100      	movs	r1, #0
 800c9a8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	228c      	movs	r2, #140	@ 0x8c
 800c9ae:	2122      	movs	r1, #34	@ 0x22
 800c9b0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2280      	movs	r2, #128	@ 0x80
 800c9b6:	589b      	ldr	r3, [r3, r2]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d02d      	beq.n	800ca18 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2280      	movs	r2, #128	@ 0x80
 800c9c0:	589b      	ldr	r3, [r3, r2]
 800c9c2:	4a40      	ldr	r2, [pc, #256]	@ (800cac4 <UART_Start_Receive_DMA+0x140>)
 800c9c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2280      	movs	r2, #128	@ 0x80
 800c9ca:	589b      	ldr	r3, [r3, r2]
 800c9cc:	4a3e      	ldr	r2, [pc, #248]	@ (800cac8 <UART_Start_Receive_DMA+0x144>)
 800c9ce:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2280      	movs	r2, #128	@ 0x80
 800c9d4:	589b      	ldr	r3, [r3, r2]
 800c9d6:	4a3d      	ldr	r2, [pc, #244]	@ (800cacc <UART_Start_Receive_DMA+0x148>)
 800c9d8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2280      	movs	r2, #128	@ 0x80
 800c9de:	589b      	ldr	r3, [r3, r2]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2280      	movs	r2, #128	@ 0x80
 800c9e8:	5898      	ldr	r0, [r3, r2]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	3324      	adds	r3, #36	@ 0x24
 800c9f0:	0019      	movs	r1, r3
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9f6:	001a      	movs	r2, r3
 800c9f8:	1dbb      	adds	r3, r7, #6
 800c9fa:	881b      	ldrh	r3, [r3, #0]
 800c9fc:	f7fa fce6 	bl	80073cc <HAL_DMA_Start_IT>
 800ca00:	1e03      	subs	r3, r0, #0
 800ca02:	d009      	beq.n	800ca18 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2290      	movs	r2, #144	@ 0x90
 800ca08:	2110      	movs	r1, #16
 800ca0a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	228c      	movs	r2, #140	@ 0x8c
 800ca10:	2120      	movs	r1, #32
 800ca12:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800ca14:	2301      	movs	r3, #1
 800ca16:	e050      	b.n	800caba <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	691b      	ldr	r3, [r3, #16]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d019      	beq.n	800ca54 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca20:	f3ef 8310 	mrs	r3, PRIMASK
 800ca24:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800ca26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ca28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca30:	f383 8810 	msr	PRIMASK, r3
}
 800ca34:	46c0      	nop			@ (mov r8, r8)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	2180      	movs	r1, #128	@ 0x80
 800ca42:	0049      	lsls	r1, r1, #1
 800ca44:	430a      	orrs	r2, r1
 800ca46:	601a      	str	r2, [r3, #0]
 800ca48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca4a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca4e:	f383 8810 	msr	PRIMASK, r3
}
 800ca52:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca54:	f3ef 8310 	mrs	r3, PRIMASK
 800ca58:	613b      	str	r3, [r7, #16]
  return(result);
 800ca5a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca5e:	2301      	movs	r3, #1
 800ca60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	f383 8810 	msr	PRIMASK, r3
}
 800ca68:	46c0      	nop			@ (mov r8, r8)
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	689a      	ldr	r2, [r3, #8]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	2101      	movs	r1, #1
 800ca76:	430a      	orrs	r2, r1
 800ca78:	609a      	str	r2, [r3, #8]
 800ca7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca7e:	69bb      	ldr	r3, [r7, #24]
 800ca80:	f383 8810 	msr	PRIMASK, r3
}
 800ca84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca86:	f3ef 8310 	mrs	r3, PRIMASK
 800ca8a:	61fb      	str	r3, [r7, #28]
  return(result);
 800ca8c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca90:	2301      	movs	r3, #1
 800ca92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca94:	6a3b      	ldr	r3, [r7, #32]
 800ca96:	f383 8810 	msr	PRIMASK, r3
}
 800ca9a:	46c0      	nop			@ (mov r8, r8)
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	689a      	ldr	r2, [r3, #8]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	2140      	movs	r1, #64	@ 0x40
 800caa8:	430a      	orrs	r2, r1
 800caaa:	609a      	str	r2, [r3, #8]
 800caac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab2:	f383 8810 	msr	PRIMASK, r3
}
 800cab6:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800cab8:	2300      	movs	r3, #0
}
 800caba:	0018      	movs	r0, r3
 800cabc:	46bd      	mov	sp, r7
 800cabe:	b010      	add	sp, #64	@ 0x40
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	46c0      	nop			@ (mov r8, r8)
 800cac4:	0800cc1d 	.word	0x0800cc1d
 800cac8:	0800cd51 	.word	0x0800cd51
 800cacc:	0800cd99 	.word	0x0800cd99

0800cad0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b08a      	sub	sp, #40	@ 0x28
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cad8:	f3ef 8310 	mrs	r3, PRIMASK
 800cadc:	60bb      	str	r3, [r7, #8]
  return(result);
 800cade:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cae0:	627b      	str	r3, [r7, #36]	@ 0x24
 800cae2:	2301      	movs	r3, #1
 800cae4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f383 8810 	msr	PRIMASK, r3
}
 800caec:	46c0      	nop			@ (mov r8, r8)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	21c0      	movs	r1, #192	@ 0xc0
 800cafa:	438a      	bics	r2, r1
 800cafc:	601a      	str	r2, [r3, #0]
 800cafe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	f383 8810 	msr	PRIMASK, r3
}
 800cb08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb0a:	f3ef 8310 	mrs	r3, PRIMASK
 800cb0e:	617b      	str	r3, [r7, #20]
  return(result);
 800cb10:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cb12:	623b      	str	r3, [r7, #32]
 800cb14:	2301      	movs	r3, #1
 800cb16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb18:	69bb      	ldr	r3, [r7, #24]
 800cb1a:	f383 8810 	msr	PRIMASK, r3
}
 800cb1e:	46c0      	nop			@ (mov r8, r8)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	689a      	ldr	r2, [r3, #8]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4908      	ldr	r1, [pc, #32]	@ (800cb4c <UART_EndTxTransfer+0x7c>)
 800cb2c:	400a      	ands	r2, r1
 800cb2e:	609a      	str	r2, [r3, #8]
 800cb30:	6a3b      	ldr	r3, [r7, #32]
 800cb32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	f383 8810 	msr	PRIMASK, r3
}
 800cb3a:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2288      	movs	r2, #136	@ 0x88
 800cb40:	2120      	movs	r1, #32
 800cb42:	5099      	str	r1, [r3, r2]
}
 800cb44:	46c0      	nop			@ (mov r8, r8)
 800cb46:	46bd      	mov	sp, r7
 800cb48:	b00a      	add	sp, #40	@ 0x28
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	ff7fffff 	.word	0xff7fffff

0800cb50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b08e      	sub	sp, #56	@ 0x38
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb58:	f3ef 8310 	mrs	r3, PRIMASK
 800cb5c:	617b      	str	r3, [r7, #20]
  return(result);
 800cb5e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb60:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb62:	2301      	movs	r3, #1
 800cb64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb66:	69bb      	ldr	r3, [r7, #24]
 800cb68:	f383 8810 	msr	PRIMASK, r3
}
 800cb6c:	46c0      	nop			@ (mov r8, r8)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4926      	ldr	r1, [pc, #152]	@ (800cc14 <UART_EndRxTransfer+0xc4>)
 800cb7a:	400a      	ands	r2, r1
 800cb7c:	601a      	str	r2, [r3, #0]
 800cb7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb82:	69fb      	ldr	r3, [r7, #28]
 800cb84:	f383 8810 	msr	PRIMASK, r3
}
 800cb88:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb8a:	f3ef 8310 	mrs	r3, PRIMASK
 800cb8e:	623b      	str	r3, [r7, #32]
  return(result);
 800cb90:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb92:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb94:	2301      	movs	r3, #1
 800cb96:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb9a:	f383 8810 	msr	PRIMASK, r3
}
 800cb9e:	46c0      	nop			@ (mov r8, r8)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	689a      	ldr	r2, [r3, #8]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	491b      	ldr	r1, [pc, #108]	@ (800cc18 <UART_EndRxTransfer+0xc8>)
 800cbac:	400a      	ands	r2, r1
 800cbae:	609a      	str	r2, [r3, #8]
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb6:	f383 8810 	msr	PRIMASK, r3
}
 800cbba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d118      	bne.n	800cbf6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbc4:	f3ef 8310 	mrs	r3, PRIMASK
 800cbc8:	60bb      	str	r3, [r7, #8]
  return(result);
 800cbca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cbce:	2301      	movs	r3, #1
 800cbd0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	f383 8810 	msr	PRIMASK, r3
}
 800cbd8:	46c0      	nop			@ (mov r8, r8)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2110      	movs	r1, #16
 800cbe6:	438a      	bics	r2, r1
 800cbe8:	601a      	str	r2, [r3, #0]
 800cbea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	f383 8810 	msr	PRIMASK, r3
}
 800cbf4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	228c      	movs	r2, #140	@ 0x8c
 800cbfa:	2120      	movs	r1, #32
 800cbfc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2200      	movs	r2, #0
 800cc02:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2200      	movs	r2, #0
 800cc08:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cc0a:	46c0      	nop			@ (mov r8, r8)
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	b00e      	add	sp, #56	@ 0x38
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	46c0      	nop			@ (mov r8, r8)
 800cc14:	fffffedf 	.word	0xfffffedf
 800cc18:	effffffe 	.word	0xeffffffe

0800cc1c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b094      	sub	sp, #80	@ 0x50
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc28:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2220      	movs	r2, #32
 800cc32:	4013      	ands	r3, r2
 800cc34:	d16f      	bne.n	800cd16 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800cc36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc38:	225e      	movs	r2, #94	@ 0x5e
 800cc3a:	2100      	movs	r1, #0
 800cc3c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc3e:	f3ef 8310 	mrs	r3, PRIMASK
 800cc42:	61bb      	str	r3, [r7, #24]
  return(result);
 800cc44:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc46:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc48:	2301      	movs	r3, #1
 800cc4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc4c:	69fb      	ldr	r3, [r7, #28]
 800cc4e:	f383 8810 	msr	PRIMASK, r3
}
 800cc52:	46c0      	nop			@ (mov r8, r8)
 800cc54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	493b      	ldr	r1, [pc, #236]	@ (800cd4c <UART_DMAReceiveCplt+0x130>)
 800cc60:	400a      	ands	r2, r1
 800cc62:	601a      	str	r2, [r3, #0]
 800cc64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc68:	6a3b      	ldr	r3, [r7, #32]
 800cc6a:	f383 8810 	msr	PRIMASK, r3
}
 800cc6e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc70:	f3ef 8310 	mrs	r3, PRIMASK
 800cc74:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800cc76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc78:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc80:	f383 8810 	msr	PRIMASK, r3
}
 800cc84:	46c0      	nop			@ (mov r8, r8)
 800cc86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	689a      	ldr	r2, [r3, #8]
 800cc8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	2101      	movs	r1, #1
 800cc92:	438a      	bics	r2, r1
 800cc94:	609a      	str	r2, [r3, #8]
 800cc96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc9c:	f383 8810 	msr	PRIMASK, r3
}
 800cca0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cca2:	f3ef 8310 	mrs	r3, PRIMASK
 800cca6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800cca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ccaa:	643b      	str	r3, [r7, #64]	@ 0x40
 800ccac:	2301      	movs	r3, #1
 800ccae:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccb2:	f383 8810 	msr	PRIMASK, r3
}
 800ccb6:	46c0      	nop			@ (mov r8, r8)
 800ccb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	689a      	ldr	r2, [r3, #8]
 800ccbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	2140      	movs	r1, #64	@ 0x40
 800ccc4:	438a      	bics	r2, r1
 800ccc6:	609a      	str	r2, [r3, #8]
 800ccc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ccca:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccce:	f383 8810 	msr	PRIMASK, r3
}
 800ccd2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ccd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccd6:	228c      	movs	r2, #140	@ 0x8c
 800ccd8:	2120      	movs	r1, #32
 800ccda:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d118      	bne.n	800cd16 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cce4:	f3ef 8310 	mrs	r3, PRIMASK
 800cce8:	60fb      	str	r3, [r7, #12]
  return(result);
 800ccea:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccee:	2301      	movs	r3, #1
 800ccf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	f383 8810 	msr	PRIMASK, r3
}
 800ccf8:	46c0      	nop			@ (mov r8, r8)
 800ccfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	2110      	movs	r1, #16
 800cd06:	438a      	bics	r2, r1
 800cd08:	601a      	str	r2, [r3, #0]
 800cd0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	f383 8810 	msr	PRIMASK, r3
}
 800cd14:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd18:	2200      	movs	r2, #0
 800cd1a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d109      	bne.n	800cd38 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800cd24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd26:	22c0      	movs	r2, #192	@ 0xc0
 800cd28:	589b      	ldr	r3, [r3, r2]
 800cd2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cd2c:	215c      	movs	r1, #92	@ 0x5c
 800cd2e:	5a51      	ldrh	r1, [r2, r1]
 800cd30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cd32:	0010      	movs	r0, r2
 800cd34:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd36:	e005      	b.n	800cd44 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800cd38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd3a:	22a0      	movs	r2, #160	@ 0xa0
 800cd3c:	589b      	ldr	r3, [r3, r2]
 800cd3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cd40:	0010      	movs	r0, r2
 800cd42:	4798      	blx	r3
}
 800cd44:	46c0      	nop			@ (mov r8, r8)
 800cd46:	46bd      	mov	sp, r7
 800cd48:	b014      	add	sp, #80	@ 0x50
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	fffffeff 	.word	0xfffffeff

0800cd50 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd5c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2201      	movs	r2, #1
 800cd62:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d10b      	bne.n	800cd84 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	22c0      	movs	r2, #192	@ 0xc0
 800cd70:	589b      	ldr	r3, [r3, r2]
 800cd72:	68fa      	ldr	r2, [r7, #12]
 800cd74:	215c      	movs	r1, #92	@ 0x5c
 800cd76:	5a52      	ldrh	r2, [r2, r1]
 800cd78:	0852      	lsrs	r2, r2, #1
 800cd7a:	b291      	uxth	r1, r2
 800cd7c:	68fa      	ldr	r2, [r7, #12]
 800cd7e:	0010      	movs	r0, r2
 800cd80:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd82:	e005      	b.n	800cd90 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	229c      	movs	r2, #156	@ 0x9c
 800cd88:	589b      	ldr	r3, [r3, r2]
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	0010      	movs	r0, r2
 800cd8e:	4798      	blx	r3
}
 800cd90:	46c0      	nop			@ (mov r8, r8)
 800cd92:	46bd      	mov	sp, r7
 800cd94:	b004      	add	sp, #16
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b086      	sub	sp, #24
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cda4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	2288      	movs	r2, #136	@ 0x88
 800cdaa:	589b      	ldr	r3, [r3, r2]
 800cdac:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	228c      	movs	r2, #140	@ 0x8c
 800cdb2:	589b      	ldr	r3, [r3, r2]
 800cdb4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	689b      	ldr	r3, [r3, #8]
 800cdbc:	2280      	movs	r2, #128	@ 0x80
 800cdbe:	4013      	ands	r3, r2
 800cdc0:	2b80      	cmp	r3, #128	@ 0x80
 800cdc2:	d10a      	bne.n	800cdda <UART_DMAError+0x42>
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	2b21      	cmp	r3, #33	@ 0x21
 800cdc8:	d107      	bne.n	800cdda <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	2256      	movs	r2, #86	@ 0x56
 800cdce:	2100      	movs	r1, #0
 800cdd0:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	0018      	movs	r0, r3
 800cdd6:	f7ff fe7b 	bl	800cad0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	689b      	ldr	r3, [r3, #8]
 800cde0:	2240      	movs	r2, #64	@ 0x40
 800cde2:	4013      	ands	r3, r2
 800cde4:	2b40      	cmp	r3, #64	@ 0x40
 800cde6:	d10a      	bne.n	800cdfe <UART_DMAError+0x66>
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2b22      	cmp	r3, #34	@ 0x22
 800cdec:	d107      	bne.n	800cdfe <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	225e      	movs	r2, #94	@ 0x5e
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	0018      	movs	r0, r3
 800cdfa:	f7ff fea9 	bl	800cb50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	2290      	movs	r2, #144	@ 0x90
 800ce02:	589b      	ldr	r3, [r3, r2]
 800ce04:	2210      	movs	r2, #16
 800ce06:	431a      	orrs	r2, r3
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	2190      	movs	r1, #144	@ 0x90
 800ce0c:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	22a4      	movs	r2, #164	@ 0xa4
 800ce12:	589b      	ldr	r3, [r3, r2]
 800ce14:	697a      	ldr	r2, [r7, #20]
 800ce16:	0010      	movs	r0, r2
 800ce18:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce1a:	46c0      	nop			@ (mov r8, r8)
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	b006      	add	sp, #24
 800ce20:	bd80      	pop	{r7, pc}

0800ce22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b084      	sub	sp, #16
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	225e      	movs	r2, #94	@ 0x5e
 800ce34:	2100      	movs	r1, #0
 800ce36:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2256      	movs	r2, #86	@ 0x56
 800ce3c:	2100      	movs	r1, #0
 800ce3e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	22a4      	movs	r2, #164	@ 0xa4
 800ce44:	589b      	ldr	r3, [r3, r2]
 800ce46:	68fa      	ldr	r2, [r7, #12]
 800ce48:	0010      	movs	r0, r2
 800ce4a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce4c:	46c0      	nop			@ (mov r8, r8)
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	b004      	add	sp, #16
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b086      	sub	sp, #24
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce5c:	f3ef 8310 	mrs	r3, PRIMASK
 800ce60:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce62:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ce64:	617b      	str	r3, [r7, #20]
 800ce66:	2301      	movs	r3, #1
 800ce68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f383 8810 	msr	PRIMASK, r3
}
 800ce70:	46c0      	nop			@ (mov r8, r8)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	2140      	movs	r1, #64	@ 0x40
 800ce7e:	438a      	bics	r2, r1
 800ce80:	601a      	str	r2, [r3, #0]
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	f383 8810 	msr	PRIMASK, r3
}
 800ce8c:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2288      	movs	r2, #136	@ 0x88
 800ce92:	2120      	movs	r1, #32
 800ce94:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2298      	movs	r2, #152	@ 0x98
 800cea0:	589b      	ldr	r3, [r3, r2]
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	0010      	movs	r0, r2
 800cea6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cea8:	46c0      	nop			@ (mov r8, r8)
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	b006      	add	sp, #24
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ceb8:	46c0      	nop			@ (mov r8, r8)
 800ceba:	46bd      	mov	sp, r7
 800cebc:	b002      	add	sp, #8
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cec8:	46c0      	nop			@ (mov r8, r8)
 800ceca:	46bd      	mov	sp, r7
 800cecc:	b002      	add	sp, #8
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ced8:	46c0      	nop			@ (mov r8, r8)
 800ceda:	46bd      	mov	sp, r7
 800cedc:	b002      	add	sp, #8
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <memset>:
 800cee0:	0003      	movs	r3, r0
 800cee2:	1882      	adds	r2, r0, r2
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d100      	bne.n	800ceea <memset+0xa>
 800cee8:	4770      	bx	lr
 800ceea:	7019      	strb	r1, [r3, #0]
 800ceec:	3301      	adds	r3, #1
 800ceee:	e7f9      	b.n	800cee4 <memset+0x4>

0800cef0 <__libc_init_array>:
 800cef0:	b570      	push	{r4, r5, r6, lr}
 800cef2:	2600      	movs	r6, #0
 800cef4:	4c0c      	ldr	r4, [pc, #48]	@ (800cf28 <__libc_init_array+0x38>)
 800cef6:	4d0d      	ldr	r5, [pc, #52]	@ (800cf2c <__libc_init_array+0x3c>)
 800cef8:	1b64      	subs	r4, r4, r5
 800cefa:	10a4      	asrs	r4, r4, #2
 800cefc:	42a6      	cmp	r6, r4
 800cefe:	d109      	bne.n	800cf14 <__libc_init_array+0x24>
 800cf00:	2600      	movs	r6, #0
 800cf02:	f000 f823 	bl	800cf4c <_init>
 800cf06:	4c0a      	ldr	r4, [pc, #40]	@ (800cf30 <__libc_init_array+0x40>)
 800cf08:	4d0a      	ldr	r5, [pc, #40]	@ (800cf34 <__libc_init_array+0x44>)
 800cf0a:	1b64      	subs	r4, r4, r5
 800cf0c:	10a4      	asrs	r4, r4, #2
 800cf0e:	42a6      	cmp	r6, r4
 800cf10:	d105      	bne.n	800cf1e <__libc_init_array+0x2e>
 800cf12:	bd70      	pop	{r4, r5, r6, pc}
 800cf14:	00b3      	lsls	r3, r6, #2
 800cf16:	58eb      	ldr	r3, [r5, r3]
 800cf18:	4798      	blx	r3
 800cf1a:	3601      	adds	r6, #1
 800cf1c:	e7ee      	b.n	800cefc <__libc_init_array+0xc>
 800cf1e:	00b3      	lsls	r3, r6, #2
 800cf20:	58eb      	ldr	r3, [r5, r3]
 800cf22:	4798      	blx	r3
 800cf24:	3601      	adds	r6, #1
 800cf26:	e7f2      	b.n	800cf0e <__libc_init_array+0x1e>
 800cf28:	0800d9dc 	.word	0x0800d9dc
 800cf2c:	0800d9dc 	.word	0x0800d9dc
 800cf30:	0800d9e0 	.word	0x0800d9e0
 800cf34:	0800d9dc 	.word	0x0800d9dc

0800cf38 <memcpy>:
 800cf38:	2300      	movs	r3, #0
 800cf3a:	b510      	push	{r4, lr}
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d100      	bne.n	800cf42 <memcpy+0xa>
 800cf40:	bd10      	pop	{r4, pc}
 800cf42:	5ccc      	ldrb	r4, [r1, r3]
 800cf44:	54c4      	strb	r4, [r0, r3]
 800cf46:	3301      	adds	r3, #1
 800cf48:	e7f8      	b.n	800cf3c <memcpy+0x4>
	...

0800cf4c <_init>:
 800cf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4e:	46c0      	nop			@ (mov r8, r8)
 800cf50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf52:	bc08      	pop	{r3}
 800cf54:	469e      	mov	lr, r3
 800cf56:	4770      	bx	lr

0800cf58 <_fini>:
 800cf58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf5a:	46c0      	nop			@ (mov r8, r8)
 800cf5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf5e:	bc08      	pop	{r3}
 800cf60:	469e      	mov	lr, r3
 800cf62:	4770      	bx	lr
