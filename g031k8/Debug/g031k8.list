
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d340  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a88  0800d400  0800d400  0000e400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de88  0800de88  0000f4d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800de88  0800de88  0000ee88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de90  0800de90  0000f4d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de90  0800de90  0000ee90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800de94  0800de94  0000ee94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004d4  20000000  0800de98  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000008ac  200004d4  0800e36c  0000f4d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d80  0800e36c  0000fd80  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f4d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002139c  00000000  00000000  0000f4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ad5  00000000  00000000  00030898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  00035370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001359  00000000  00000000  00036c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001626f  00000000  00000000  00037fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000880a  00000000  00000000  0004e240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00056a4a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005934  00000000  00000000  00056a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000054  00000000  00000000  0005c3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004d4 	.word	0x200004d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d3d4 	.word	0x0800d3d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004d8 	.word	0x200004d8
 8000104:	0800d3d4 	.word	0x0800d3d4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <Initialise_Preset_Arrays>:
volatile enum Validate user_presets_used_array[NUM_PRESETS] = {(enum Validate)NO};

volatile uint8_t CC_array[5] = {0};

//FUNCTION DEFINITIONS
uint8_t Initialise_Preset_Arrays(void){
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 8000452:	1dfb      	adds	r3, r7, #7
 8000454:	2200      	movs	r2, #0
 8000456:	701a      	strb	r2, [r3, #0]
 8000458:	e047      	b.n	80004ea <Initialise_Preset_Arrays+0x9e>

		if(i == 0){
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d10c      	bne.n	800047c <Initialise_Preset_Arrays+0x30>
			factory_presets_array[i] = &factory_preset_0;
 8000462:	1dfb      	adds	r3, r7, #7
 8000464:	781a      	ldrb	r2, [r3, #0]
 8000466:	4b25      	ldr	r3, [pc, #148]	@ (80004fc <Initialise_Preset_Arrays+0xb0>)
 8000468:	0092      	lsls	r2, r2, #2
 800046a:	4925      	ldr	r1, [pc, #148]	@ (8000500 <Initialise_Preset_Arrays+0xb4>)
 800046c:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_0;
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	781a      	ldrb	r2, [r3, #0]
 8000472:	4b24      	ldr	r3, [pc, #144]	@ (8000504 <Initialise_Preset_Arrays+0xb8>)
 8000474:	0092      	lsls	r2, r2, #2
 8000476:	4924      	ldr	r1, [pc, #144]	@ (8000508 <Initialise_Preset_Arrays+0xbc>)
 8000478:	50d1      	str	r1, [r2, r3]
 800047a:	e031      	b.n	80004e0 <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 1){
 800047c:	1dfb      	adds	r3, r7, #7
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d10c      	bne.n	800049e <Initialise_Preset_Arrays+0x52>
			factory_presets_array[i] = &factory_preset_1;
 8000484:	1dfb      	adds	r3, r7, #7
 8000486:	781a      	ldrb	r2, [r3, #0]
 8000488:	4b1c      	ldr	r3, [pc, #112]	@ (80004fc <Initialise_Preset_Arrays+0xb0>)
 800048a:	0092      	lsls	r2, r2, #2
 800048c:	491f      	ldr	r1, [pc, #124]	@ (800050c <Initialise_Preset_Arrays+0xc0>)
 800048e:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_1;
 8000490:	1dfb      	adds	r3, r7, #7
 8000492:	781a      	ldrb	r2, [r3, #0]
 8000494:	4b1b      	ldr	r3, [pc, #108]	@ (8000504 <Initialise_Preset_Arrays+0xb8>)
 8000496:	0092      	lsls	r2, r2, #2
 8000498:	491d      	ldr	r1, [pc, #116]	@ (8000510 <Initialise_Preset_Arrays+0xc4>)
 800049a:	50d1      	str	r1, [r2, r3]
 800049c:	e020      	b.n	80004e0 <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 2){
 800049e:	1dfb      	adds	r3, r7, #7
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2b02      	cmp	r3, #2
 80004a4:	d10c      	bne.n	80004c0 <Initialise_Preset_Arrays+0x74>
			factory_presets_array[i] = &factory_preset_2;
 80004a6:	1dfb      	adds	r3, r7, #7
 80004a8:	781a      	ldrb	r2, [r3, #0]
 80004aa:	4b14      	ldr	r3, [pc, #80]	@ (80004fc <Initialise_Preset_Arrays+0xb0>)
 80004ac:	0092      	lsls	r2, r2, #2
 80004ae:	4919      	ldr	r1, [pc, #100]	@ (8000514 <Initialise_Preset_Arrays+0xc8>)
 80004b0:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_2;
 80004b2:	1dfb      	adds	r3, r7, #7
 80004b4:	781a      	ldrb	r2, [r3, #0]
 80004b6:	4b13      	ldr	r3, [pc, #76]	@ (8000504 <Initialise_Preset_Arrays+0xb8>)
 80004b8:	0092      	lsls	r2, r2, #2
 80004ba:	4917      	ldr	r1, [pc, #92]	@ (8000518 <Initialise_Preset_Arrays+0xcc>)
 80004bc:	50d1      	str	r1, [r2, r3]
 80004be:	e00f      	b.n	80004e0 <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 3){
 80004c0:	1dfb      	adds	r3, r7, #7
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b03      	cmp	r3, #3
 80004c6:	d10b      	bne.n	80004e0 <Initialise_Preset_Arrays+0x94>
			factory_presets_array[i] = &factory_preset_3;
 80004c8:	1dfb      	adds	r3, r7, #7
 80004ca:	781a      	ldrb	r2, [r3, #0]
 80004cc:	4b0b      	ldr	r3, [pc, #44]	@ (80004fc <Initialise_Preset_Arrays+0xb0>)
 80004ce:	0092      	lsls	r2, r2, #2
 80004d0:	4912      	ldr	r1, [pc, #72]	@ (800051c <Initialise_Preset_Arrays+0xd0>)
 80004d2:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_3;
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	781a      	ldrb	r2, [r3, #0]
 80004d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000504 <Initialise_Preset_Arrays+0xb8>)
 80004da:	0092      	lsls	r2, r2, #2
 80004dc:	4910      	ldr	r1, [pc, #64]	@ (8000520 <Initialise_Preset_Arrays+0xd4>)
 80004de:	50d1      	str	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	781a      	ldrb	r2, [r3, #0]
 80004e4:	1dfb      	adds	r3, r7, #7
 80004e6:	3201      	adds	r2, #1
 80004e8:	701a      	strb	r2, [r3, #0]
 80004ea:	1dfb      	adds	r3, r7, #7
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b0f      	cmp	r3, #15
 80004f0:	d9b3      	bls.n	800045a <Initialise_Preset_Arrays+0xe>
		}
	}

	return 1;
 80004f2:	2301      	movs	r3, #1
}
 80004f4:	0018      	movs	r0, r3
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b002      	add	sp, #8
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	200004f8 	.word	0x200004f8
 8000500:	0800d410 	.word	0x0800d410
 8000504:	20000508 	.word	0x20000508
 8000508:	20000000 	.word	0x20000000
 800050c:	0800d418 	.word	0x0800d418
 8000510:	20000008 	.word	0x20000008
 8000514:	0800d420 	.word	0x0800d420
 8000518:	20000010 	.word	0x20000010
 800051c:	0800d428 	.word	0x0800d428
 8000520:	20000018 	.word	0x20000018

08000524 <Update_Params_Based_On_Mode_Selected>:

uint8_t Update_Params_Based_On_Mode_Selected(void){
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0

	if(waveshape_fsm.current_state == MANUAL_MODE){
 8000528:	4b68      	ldr	r3, [pc, #416]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1a8>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	2b01      	cmp	r3, #1
 8000530:	d104      	bne.n	800053c <Update_Params_Based_On_Mode_Selected+0x18>
		params.waveshape = params_manual.waveshape;
 8000532:	4b67      	ldr	r3, [pc, #412]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000534:	799b      	ldrb	r3, [r3, #6]
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b66      	ldr	r3, [pc, #408]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800053a:	719a      	strb	r2, [r3, #6]
	}
	if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 800053c:	4b66      	ldr	r3, [pc, #408]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	b2db      	uxtb	r3, r3
 8000542:	2b01      	cmp	r3, #1
 8000544:	d104      	bne.n	8000550 <Update_Params_Based_On_Mode_Selected+0x2c>
		params.speed = params_manual.speed;
 8000546:	4b62      	ldr	r3, [pc, #392]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000548:	891b      	ldrh	r3, [r3, #8]
 800054a:	b29a      	uxth	r2, r3
 800054c:	4b61      	ldr	r3, [pc, #388]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800054e:	811a      	strh	r2, [r3, #8]
	}
	if(depth_fsm.current_state == MANUAL_MODE){
 8000550:	4b62      	ldr	r3, [pc, #392]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1b8>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b2db      	uxtb	r3, r3
 8000556:	2b01      	cmp	r3, #1
 8000558:	d104      	bne.n	8000564 <Update_Params_Based_On_Mode_Selected+0x40>
		params.depth = params_manual.depth;
 800055a:	4b5d      	ldr	r3, [pc, #372]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 800055c:	7a9b      	ldrb	r3, [r3, #10]
 800055e:	b2da      	uxtb	r2, r3
 8000560:	4b5c      	ldr	r3, [pc, #368]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000562:	729a      	strb	r2, [r3, #10]
	}
	if(symmetry_fsm.current_state == MANUAL_MODE){
 8000564:	4b5e      	ldr	r3, [pc, #376]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	2b01      	cmp	r3, #1
 800056c:	d104      	bne.n	8000578 <Update_Params_Based_On_Mode_Selected+0x54>
		params.symmetry = params_manual.symmetry;
 800056e:	4b58      	ldr	r3, [pc, #352]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000570:	899b      	ldrh	r3, [r3, #12]
 8000572:	b29a      	uxth	r2, r3
 8000574:	4b57      	ldr	r3, [pc, #348]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000576:	819a      	strh	r2, [r3, #12]
	}
	if(phase_fsm.current_state == MANUAL_MODE){
 8000578:	4b5a      	ldr	r3, [pc, #360]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2b01      	cmp	r3, #1
 8000580:	d104      	bne.n	800058c <Update_Params_Based_On_Mode_Selected+0x68>
		params.duty_delay_line_read_pointer_offset = params_manual.duty_delay_line_read_pointer_offset;
 8000582:	4b53      	ldr	r3, [pc, #332]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000584:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000586:	b29a      	uxth	r2, r3
 8000588:	4b52      	ldr	r3, [pc, #328]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800058a:	845a      	strh	r2, [r3, #34]	@ 0x22
	}

	if(waveshape_fsm.current_state == PC_MODE){
 800058c:	4b4f      	ldr	r3, [pc, #316]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1a8>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	2b03      	cmp	r3, #3
 8000594:	d10e      	bne.n	80005b4 <Update_Params_Based_On_Mode_Selected+0x90>
		Update_Waveshape_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000596:	4b54      	ldr	r3, [pc, #336]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	b2db      	uxtb	r3, r3
 800059c:	1e5a      	subs	r2, r3, #1
 800059e:	0013      	movs	r3, r2
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	189b      	adds	r3, r3, r2
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	4a51      	ldr	r2, [pc, #324]	@ (80006ec <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005a8:	189b      	adds	r3, r3, r2
 80005aa:	4a4a      	ldr	r2, [pc, #296]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005ac:	0011      	movs	r1, r2
 80005ae:	0018      	movs	r0, r3
 80005b0:	f000 f8d1 	bl	8000756 <Update_Waveshape_with_Converted_Preset_Value>
	}
	if(speed_fsm.current_state.shared_state == PC_MODE){
 80005b4:	4b48      	ldr	r3, [pc, #288]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2b03      	cmp	r3, #3
 80005bc:	d10e      	bne.n	80005dc <Update_Params_Based_On_Mode_Selected+0xb8>
		Update_Speed_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005be:	4b4a      	ldr	r3, [pc, #296]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	1e5a      	subs	r2, r3, #1
 80005c6:	0013      	movs	r3, r2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	189b      	adds	r3, r3, r2
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	4a47      	ldr	r2, [pc, #284]	@ (80006ec <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005d0:	189b      	adds	r3, r3, r2
 80005d2:	4a40      	ldr	r2, [pc, #256]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005d4:	0011      	movs	r1, r2
 80005d6:	0018      	movs	r0, r3
 80005d8:	f000 f8e6 	bl	80007a8 <Update_Speed_with_Converted_Preset_Value>
	}
	if(depth_fsm.current_state == PC_MODE){
 80005dc:	4b3f      	ldr	r3, [pc, #252]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1b8>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	d10e      	bne.n	8000604 <Update_Params_Based_On_Mode_Selected+0xe0>
		Update_Depth_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005e6:	4b40      	ldr	r3, [pc, #256]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	1e5a      	subs	r2, r3, #1
 80005ee:	0013      	movs	r3, r2
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	189b      	adds	r3, r3, r2
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	4a3d      	ldr	r2, [pc, #244]	@ (80006ec <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005f8:	189b      	adds	r3, r3, r2
 80005fa:	4a36      	ldr	r2, [pc, #216]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005fc:	0011      	movs	r1, r2
 80005fe:	0018      	movs	r0, r3
 8000600:	f000 f8e1 	bl	80007c6 <Update_Depth_with_Converted_Preset_Value>
	}
	if(symmetry_fsm.current_state == PC_MODE){
 8000604:	4b36      	ldr	r3, [pc, #216]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	2b03      	cmp	r3, #3
 800060c:	d10e      	bne.n	800062c <Update_Params_Based_On_Mode_Selected+0x108>
		Update_Symmetry_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 800060e:	4b36      	ldr	r3, [pc, #216]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	1e5a      	subs	r2, r3, #1
 8000616:	0013      	movs	r3, r2
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	189b      	adds	r3, r3, r2
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	4a33      	ldr	r2, [pc, #204]	@ (80006ec <Update_Params_Based_On_Mode_Selected+0x1c8>)
 8000620:	189b      	adds	r3, r3, r2
 8000622:	4a2c      	ldr	r2, [pc, #176]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000624:	0011      	movs	r1, r2
 8000626:	0018      	movs	r0, r3
 8000628:	f000 f8dc 	bl	80007e4 <Update_Symmetry_with_Converted_Preset_Value>
	}
	if(phase_fsm.current_state == PC_MODE){
 800062c:	4b2d      	ldr	r3, [pc, #180]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b03      	cmp	r3, #3
 8000634:	d10e      	bne.n	8000654 <Update_Params_Based_On_Mode_Selected+0x130>
		Update_Phase_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000636:	4b2c      	ldr	r3, [pc, #176]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	1e5a      	subs	r2, r3, #1
 800063e:	0013      	movs	r3, r2
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	189b      	adds	r3, r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	4a29      	ldr	r2, [pc, #164]	@ (80006ec <Update_Params_Based_On_Mode_Selected+0x1c8>)
 8000648:	189b      	adds	r3, r3, r2
 800064a:	4a22      	ldr	r2, [pc, #136]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800064c:	0011      	movs	r1, r2
 800064e:	0018      	movs	r0, r3
 8000650:	f000 f8d7 	bl	8000802 <Update_Phase_with_Converted_Preset_Value>
	}


	if(waveshape_fsm.current_state == CC_MODE){
 8000654:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	2b02      	cmp	r3, #2
 800065c:	d105      	bne.n	800066a <Update_Params_Based_On_Mode_Selected+0x146>
		Update_Waveshape_with_CC_Value(&CC_array[WAVESHAPE_ARR], &params);
 800065e:	4a1d      	ldr	r2, [pc, #116]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000660:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <Update_Params_Based_On_Mode_Selected+0x1cc>)
 8000662:	0011      	movs	r1, r2
 8000664:	0018      	movs	r0, r3
 8000666:	f000 faa7 	bl	8000bb8 <Update_Waveshape_with_CC_Value>
	}
	if(speed_fsm.current_state.shared_state == CC_MODE){
 800066a:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2b02      	cmp	r3, #2
 8000672:	d105      	bne.n	8000680 <Update_Params_Based_On_Mode_Selected+0x15c>
		Update_Speed_with_CC_Value(&CC_array[SPEED_ARR], &params);
 8000674:	4a17      	ldr	r2, [pc, #92]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000676:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <Update_Params_Based_On_Mode_Selected+0x1d0>)
 8000678:	0011      	movs	r1, r2
 800067a:	0018      	movs	r0, r3
 800067c:	f000 fac1 	bl	8000c02 <Update_Speed_with_CC_Value>
	}
	if(depth_fsm.current_state == CC_MODE){
 8000680:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1b8>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b02      	cmp	r3, #2
 8000688:	d105      	bne.n	8000696 <Update_Params_Based_On_Mode_Selected+0x172>
		Update_Depth_with_CC_Value(&CC_array[DEPTH_ARR], &params);
 800068a:	4a12      	ldr	r2, [pc, #72]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800068c:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <Update_Params_Based_On_Mode_Selected+0x1d4>)
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f000 facf 	bl	8000c34 <Update_Depth_with_CC_Value>
	}
	if(symmetry_fsm.current_state == CC_MODE){
 8000696:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b02      	cmp	r3, #2
 800069e:	d105      	bne.n	80006ac <Update_Params_Based_On_Mode_Selected+0x188>
		Update_Symmetry_with_CC_Value(&CC_array[SYMMETRY_ARR], &params);
 80006a0:	4a0c      	ldr	r2, [pc, #48]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006a2:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <Update_Params_Based_On_Mode_Selected+0x1d8>)
 80006a4:	0011      	movs	r1, r2
 80006a6:	0018      	movs	r0, r3
 80006a8:	f000 fad7 	bl	8000c5a <Update_Symmetry_with_CC_Value>
	}
	if(phase_fsm.current_state == CC_MODE){
 80006ac:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	d105      	bne.n	80006c2 <Update_Params_Based_On_Mode_Selected+0x19e>
		Update_Phase_with_CC_Value(&CC_array[PHASE_ARR], &params);
 80006b6:	4a07      	ldr	r2, [pc, #28]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006b8:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <Update_Params_Based_On_Mode_Selected+0x1dc>)
 80006ba:	0011      	movs	r1, r2
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 fae5 	bl	8000c8c <Update_Phase_with_CC_Value>
	}

	return 1;
 80006c2:	2301      	movs	r3, #1
}
 80006c4:	0018      	movs	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	20000430 	.word	0x20000430
 80006d0:	20000cf0 	.word	0x20000cf0
 80006d4:	20000ccc 	.word	0x20000ccc
 80006d8:	20000428 	.word	0x20000428
 80006dc:	2000042c 	.word	0x2000042c
 80006e0:	20000434 	.word	0x20000434
 80006e4:	20000438 	.word	0x20000438
 80006e8:	20000540 	.word	0x20000540
 80006ec:	20000518 	.word	0x20000518
 80006f0:	20000548 	.word	0x20000548
 80006f4:	20000549 	.word	0x20000549
 80006f8:	2000054a 	.word	0x2000054a
 80006fc:	2000054b 	.word	0x2000054b
 8000700:	2000054c 	.word	0x2000054c

08000704 <Convert_All_Preset_Values>:


uint8_t Convert_All_Preset_Values(volatile struct Preset* preset_ptr, volatile struct Preset_Converted* preset_converted_ptr){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]

	preset_converted_ptr->waveshape = preset_ptr->waveshape; //7-bit copy
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b2da      	uxtb	r2, r3
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	701a      	strb	r2, [r3, #0]
	preset_converted_ptr->speed = (preset_ptr->speed) << 3; //convert to 10-bit
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	785b      	ldrb	r3, [r3, #1]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	b29a      	uxth	r2, r3
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	805a      	strh	r2, [r3, #2]
	preset_converted_ptr->depth = preset_ptr->depth; //7-bit copy
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	789b      	ldrb	r3, [r3, #2]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	711a      	strb	r2, [r3, #4]
	preset_converted_ptr->symmetry = (preset_ptr->symmetry) << 1; //convert to 8-bit
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	78db      	ldrb	r3, [r3, #3]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	18db      	adds	r3, r3, r3
 8000738:	b29a      	uxth	r2, r3
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	80da      	strh	r2, [r3, #6]
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	791b      	ldrb	r3, [r3, #4]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	b29a      	uxth	r2, r3
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	811a      	strh	r2, [r3, #8]

	return 1;
 800074c:	2301      	movs	r3, #1
}
 800074e:	0018      	movs	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	b002      	add	sp, #8
 8000754:	bd80      	pop	{r7, pc}

08000756 <Update_Waveshape_with_Converted_Preset_Value>:
	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;

	return 1;
}

uint8_t Update_Waveshape_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000756:	b580      	push	{r7, lr}
 8000758:	b084      	sub	sp, #16
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
 800075e:	6039      	str	r1, [r7, #0]

	uint8_t waveshape = preset_converted_ptr->waveshape;
 8000760:	210f      	movs	r1, #15
 8000762:	187b      	adds	r3, r7, r1
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	7812      	ldrb	r2, [r2, #0]
 8000768:	701a      	strb	r2, [r3, #0]

	if(waveshape <= TRIANGLE_MODE_ADC_THRESHOLD){
 800076a:	187b      	adds	r3, r7, r1
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000770:	d803      	bhi.n	800077a <Update_Waveshape_with_Converted_Preset_Value+0x24>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	2200      	movs	r2, #0
 8000776:	719a      	strb	r2, [r3, #6]
 8000778:	e011      	b.n	800079e <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SINE_MODE_ADC_THRESHOLD){
 800077a:	230f      	movs	r3, #15
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b55      	cmp	r3, #85	@ 0x55
 8000782:	d803      	bhi.n	800078c <Update_Waveshape_with_Converted_Preset_Value+0x36>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	2201      	movs	r2, #1
 8000788:	719a      	strb	r2, [r3, #6]
 800078a:	e008      	b.n	800079e <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SQUARE_MODE_ADC_THRESHOLD){
 800078c:	230f      	movs	r3, #15
 800078e:	18fb      	adds	r3, r7, r3
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b25b      	sxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	db02      	blt.n	800079e <Update_Waveshape_with_Converted_Preset_Value+0x48>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	2202      	movs	r2, #2
 800079c:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 800079e:	2301      	movs	r3, #1
}
 80007a0:	0018      	movs	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b004      	add	sp, #16
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <Update_Speed_with_Converted_Preset_Value>:

uint8_t Update_Speed_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]

	params_ptr->speed = preset_converted_ptr->speed;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	885b      	ldrh	r3, [r3, #2]
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	811a      	strh	r2, [r3, #8]

	return 1;
 80007bc:	2301      	movs	r3, #1
}
 80007be:	0018      	movs	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b002      	add	sp, #8
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <Update_Depth_with_Converted_Preset_Value>:

uint8_t Update_Depth_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
 80007ce:	6039      	str	r1, [r7, #0]

	params_ptr->depth = preset_converted_ptr->depth;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	791b      	ldrb	r3, [r3, #4]
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	729a      	strb	r2, [r3, #10]

	return 1;
 80007da:	2301      	movs	r3, #1
}
 80007dc:	0018      	movs	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	b002      	add	sp, #8
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <Update_Symmetry_with_Converted_Preset_Value>:

uint8_t Update_Symmetry_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]

	params_ptr->symmetry = preset_converted_ptr->symmetry;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	88db      	ldrh	r3, [r3, #6]
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	819a      	strh	r2, [r3, #12]

	return 1;
 80007f8:	2301      	movs	r3, #1
}
 80007fa:	0018      	movs	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b002      	add	sp, #8
 8000800:	bd80      	pop	{r7, pc}

08000802 <Update_Phase_with_Converted_Preset_Value>:

uint8_t Update_Phase_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
 800080a:	6039      	str	r1, [r7, #0]

	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	891b      	ldrh	r3, [r3, #8]
 8000810:	b29a      	uxth	r2, r3
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8000816:	2301      	movs	r3, #1
}
 8000818:	0018      	movs	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	b002      	add	sp, #8
 800081e:	bd80      	pop	{r7, pc}

08000820 <Pack_Preset_Into_Doubleword>:
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit

	return 1;
}

uint8_t Pack_Preset_Into_Doubleword(struct Preset* preset_ptr, uint64_t *Doubleword_ptr){
 8000820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000822:	b089      	sub	sp, #36	@ 0x24
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]

	uint64_t packed = 0;
 800082a:	2000      	movs	r0, #0
 800082c:	2100      	movs	r1, #0
 800082e:	61b8      	str	r0, [r7, #24]
 8000830:	61f9      	str	r1, [r7, #28]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){
 8000832:	210f      	movs	r1, #15
 8000834:	2008      	movs	r0, #8
 8000836:	1809      	adds	r1, r1, r0
 8000838:	19c9      	adds	r1, r1, r7
 800083a:	2000      	movs	r0, #0
 800083c:	7008      	strb	r0, [r1, #0]
 800083e:	e037      	b.n	80008b0 <Pack_Preset_Into_Doubleword+0x90>

		packed |= ((uint64_t)*(((uint8_t *)preset_ptr)+i) << (i << 3)); //<< (i*8)
 8000840:	260f      	movs	r6, #15
 8000842:	2108      	movs	r1, #8
 8000844:	1870      	adds	r0, r6, r1
 8000846:	19c1      	adds	r1, r0, r7
 8000848:	7809      	ldrb	r1, [r1, #0]
 800084a:	68f8      	ldr	r0, [r7, #12]
 800084c:	1841      	adds	r1, r0, r1
 800084e:	7809      	ldrb	r1, [r1, #0]
 8000850:	000c      	movs	r4, r1
 8000852:	2100      	movs	r1, #0
 8000854:	000d      	movs	r5, r1
 8000856:	2108      	movs	r1, #8
 8000858:	1871      	adds	r1, r6, r1
 800085a:	19c9      	adds	r1, r1, r7
 800085c:	7809      	ldrb	r1, [r1, #0]
 800085e:	00c9      	lsls	r1, r1, #3
 8000860:	0008      	movs	r0, r1
 8000862:	3820      	subs	r0, #32
 8000864:	2800      	cmp	r0, #0
 8000866:	db03      	blt.n	8000870 <Pack_Preset_Into_Doubleword+0x50>
 8000868:	0026      	movs	r6, r4
 800086a:	4086      	lsls	r6, r0
 800086c:	0033      	movs	r3, r6
 800086e:	e008      	b.n	8000882 <Pack_Preset_Into_Doubleword+0x62>
 8000870:	2020      	movs	r0, #32
 8000872:	1a40      	subs	r0, r0, r1
 8000874:	0026      	movs	r6, r4
 8000876:	40c6      	lsrs	r6, r0
 8000878:	0030      	movs	r0, r6
 800087a:	002e      	movs	r6, r5
 800087c:	408e      	lsls	r6, r1
 800087e:	0033      	movs	r3, r6
 8000880:	4303      	orrs	r3, r0
 8000882:	0020      	movs	r0, r4
 8000884:	4088      	lsls	r0, r1
 8000886:	0002      	movs	r2, r0
 8000888:	69b9      	ldr	r1, [r7, #24]
 800088a:	4311      	orrs	r1, r2
 800088c:	6039      	str	r1, [r7, #0]
 800088e:	69f9      	ldr	r1, [r7, #28]
 8000890:	4319      	orrs	r1, r3
 8000892:	6079      	str	r1, [r7, #4]
 8000894:	6838      	ldr	r0, [r7, #0]
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	61b8      	str	r0, [r7, #24]
 800089a:	61f9      	str	r1, [r7, #28]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){
 800089c:	260f      	movs	r6, #15
 800089e:	2108      	movs	r1, #8
 80008a0:	1870      	adds	r0, r6, r1
 80008a2:	19c1      	adds	r1, r0, r7
 80008a4:	7808      	ldrb	r0, [r1, #0]
 80008a6:	2108      	movs	r1, #8
 80008a8:	1871      	adds	r1, r6, r1
 80008aa:	19c9      	adds	r1, r1, r7
 80008ac:	3001      	adds	r0, #1
 80008ae:	7008      	strb	r0, [r1, #0]
 80008b0:	210f      	movs	r1, #15
 80008b2:	2008      	movs	r0, #8
 80008b4:	1809      	adds	r1, r1, r0
 80008b6:	19c9      	adds	r1, r1, r7
 80008b8:	7809      	ldrb	r1, [r1, #0]
 80008ba:	2904      	cmp	r1, #4
 80008bc:	d9c0      	bls.n	8000840 <Pack_Preset_Into_Doubleword+0x20>
	}

	*Doubleword_ptr = packed;
 80008be:	68b9      	ldr	r1, [r7, #8]
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	600a      	str	r2, [r1, #0]
 80008c6:	604b      	str	r3, [r1, #4]

	return 1;
 80008c8:	2301      	movs	r3, #1
}
 80008ca:	0018      	movs	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b009      	add	sp, #36	@ 0x24
 80008d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008d2 <Read_and_Interpret_Preset_From_Flash>:

uint8_t Read_and_Interpret_Preset_From_Flash(uint32_t address_val, volatile struct Preset* preset_ptr){
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b086      	sub	sp, #24
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
 80008da:	6039      	str	r1, [r7, #0]

	uint8_t *flash = (uint8_t *)address_val;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	613b      	str	r3, [r7, #16]
	uint8_t *preset = (uint8_t *)preset_ptr;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 80008e4:	2317      	movs	r3, #23
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
 80008ec:	e020      	b.n	8000930 <Read_and_Interpret_Preset_From_Flash+0x5e>

		if(*(flash + i) > 0x7F){ //127
 80008ee:	2117      	movs	r1, #23
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	18d3      	adds	r3, r2, r3
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b25b      	sxtb	r3, r3
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	da06      	bge.n	800090e <Read_and_Interpret_Preset_From_Flash+0x3c>
			*(preset + i) = 0x7F;
 8000900:	187b      	adds	r3, r7, r1
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	68fa      	ldr	r2, [r7, #12]
 8000906:	18d3      	adds	r3, r2, r3
 8000908:	227f      	movs	r2, #127	@ 0x7f
 800090a:	701a      	strb	r2, [r3, #0]
 800090c:	e00a      	b.n	8000924 <Read_and_Interpret_Preset_From_Flash+0x52>
		}
		else{
			*(preset + i) = *(flash + i);
 800090e:	2117      	movs	r1, #23
 8000910:	187b      	adds	r3, r7, r1
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	18d2      	adds	r2, r2, r3
 8000918:	187b      	adds	r3, r7, r1
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	68f9      	ldr	r1, [r7, #12]
 800091e:	18cb      	adds	r3, r1, r3
 8000920:	7812      	ldrb	r2, [r2, #0]
 8000922:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 8000924:	2117      	movs	r1, #23
 8000926:	187b      	adds	r3, r7, r1
 8000928:	781a      	ldrb	r2, [r3, #0]
 800092a:	187b      	adds	r3, r7, r1
 800092c:	3201      	adds	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	2317      	movs	r3, #23
 8000932:	18fb      	adds	r3, r7, r3
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b04      	cmp	r3, #4
 8000938:	d9d9      	bls.n	80008ee <Read_and_Interpret_Preset_From_Flash+0x1c>
		}
	}

	return 1;
 800093a:	2301      	movs	r3, #1
}
 800093c:	0018      	movs	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	b006      	add	sp, #24
 8000942:	bd80      	pop	{r7, pc}

08000944 <Read_and_Interpret_Misc_From_Flash>:
	*Doubleword_ptr = packed;

	return 1;
}

uint8_t Read_and_Interpret_Misc_From_Flash(uint32_t address_val, volatile enum Validate *user_presets_used_array_ptr, volatile uint32_t *statuses_ptr, volatile enum MIDI_Channel *MIDI_basic_channel_ptr, uint8_t num_presets){
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
 8000950:	603b      	str	r3, [r7, #0]

	uint8_t *address = (uint8_t *)address_val;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	61bb      	str	r3, [r7, #24]

	volatile uint8_t interpretted_value = 0;
 8000956:	2316      	movs	r3, #22
 8000958:	18fb      	adds	r3, r7, r3
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]

	//PRESETS
	for(uint8_t i = 0; i < num_presets; i++){
 800095e:	231f      	movs	r3, #31
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
 8000966:	e02c      	b.n	80009c2 <Read_and_Interpret_Misc_From_Flash+0x7e>

		interpretted_value = *(address + i);
 8000968:	211f      	movs	r1, #31
 800096a:	187b      	adds	r3, r7, r1
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	69ba      	ldr	r2, [r7, #24]
 8000970:	18d3      	adds	r3, r2, r3
 8000972:	781a      	ldrb	r2, [r3, #0]
 8000974:	2016      	movs	r0, #22
 8000976:	183b      	adds	r3, r7, r0
 8000978:	701a      	strb	r2, [r3, #0]

		if(interpretted_value == (enum Validate)YES){
 800097a:	183b      	adds	r3, r7, r0
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2b01      	cmp	r3, #1
 8000982:	d106      	bne.n	8000992 <Read_and_Interpret_Misc_From_Flash+0x4e>

			*(user_presets_used_array_ptr + i) = (enum Validate)YES;
 8000984:	187b      	adds	r3, r7, r1
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	68ba      	ldr	r2, [r7, #8]
 800098a:	18d3      	adds	r3, r2, r3
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]
 8000990:	e011      	b.n	80009b6 <Read_and_Interpret_Misc_From_Flash+0x72>
		}
		else if((interpretted_value == 0xFF) || (interpretted_value == (enum Validate)NO)){
 8000992:	2216      	movs	r2, #22
 8000994:	18bb      	adds	r3, r7, r2
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2bff      	cmp	r3, #255	@ 0xff
 800099c:	d004      	beq.n	80009a8 <Read_and_Interpret_Misc_From_Flash+0x64>
 800099e:	18bb      	adds	r3, r7, r2
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d106      	bne.n	80009b6 <Read_and_Interpret_Misc_From_Flash+0x72>

			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
 80009a8:	231f      	movs	r3, #31
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	18d3      	adds	r3, r2, r3
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < num_presets; i++){
 80009b6:	211f      	movs	r1, #31
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	3201      	adds	r2, #1
 80009c0:	701a      	strb	r2, [r3, #0]
 80009c2:	231f      	movs	r3, #31
 80009c4:	18fa      	adds	r2, r7, r3
 80009c6:	2128      	movs	r1, #40	@ 0x28
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	7812      	ldrb	r2, [r2, #0]
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d3ca      	bcc.n	8000968 <Read_and_Interpret_Misc_From_Flash+0x24>
		}
	}

	//START REQUIRED BEFORE SYNC MODE
	interpretted_value = *(address + num_presets);
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	18d3      	adds	r3, r2, r3
 80009da:	781a      	ldrb	r2, [r3, #0]
 80009dc:	2116      	movs	r1, #22
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)NO){
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d105      	bne.n	80009f8 <Read_and_Interpret_Misc_From_Flash+0xb4>
		Clear_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2180      	movs	r1, #128	@ 0x80
 80009f0:	0018      	movs	r0, r3
 80009f2:	f005 f901 	bl	8005bf8 <Clear_Status_Bit>
 80009f6:	e00f      	b.n	8000a18 <Read_and_Interpret_Misc_From_Flash+0xd4>
	}
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 80009f8:	2216      	movs	r2, #22
 80009fa:	18bb      	adds	r3, r7, r2
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d004      	beq.n	8000a0e <Read_and_Interpret_Misc_From_Flash+0xca>
 8000a04:	18bb      	adds	r3, r7, r2
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2bff      	cmp	r3, #255	@ 0xff
 8000a0c:	d104      	bne.n	8000a18 <Read_and_Interpret_Misc_From_Flash+0xd4>
		Set_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2180      	movs	r1, #128	@ 0x80
 8000a12:	0018      	movs	r0, r3
 8000a14:	f005 f8de 	bl	8005bd4 <Set_Status_Bit>
	}

	//OMNI ON/OFF
	interpretted_value = *(address + num_presets + 1);
 8000a18:	2328      	movs	r3, #40	@ 0x28
 8000a1a:	18fb      	adds	r3, r7, r3
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	18d3      	adds	r3, r2, r3
 8000a24:	781a      	ldrb	r2, [r3, #0]
 8000a26:	2116      	movs	r1, #22
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)YES){
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d107      	bne.n	8000a46 <Read_and_Interpret_Misc_From_Flash+0x102>
		Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI ON
 8000a36:	2380      	movs	r3, #128	@ 0x80
 8000a38:	00da      	lsls	r2, r3, #3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	0011      	movs	r1, r2
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f005 f8c8 	bl	8005bd4 <Set_Status_Bit>
 8000a44:	e011      	b.n	8000a6a <Read_and_Interpret_Misc_From_Flash+0x126>
	}
	else if((interpretted_value == (enum Validate)NO) || (interpretted_value == 0xFF)){
 8000a46:	2216      	movs	r2, #22
 8000a48:	18bb      	adds	r3, r7, r2
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d004      	beq.n	8000a5c <Read_and_Interpret_Misc_From_Flash+0x118>
 8000a52:	18bb      	adds	r3, r7, r2
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2bff      	cmp	r3, #255	@ 0xff
 8000a5a:	d106      	bne.n	8000a6a <Read_and_Interpret_Misc_From_Flash+0x126>
		Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI OFF
 8000a5c:	2380      	movs	r3, #128	@ 0x80
 8000a5e:	00da      	lsls	r2, r3, #3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	0011      	movs	r1, r2
 8000a64:	0018      	movs	r0, r3
 8000a66:	f005 f8c7 	bl	8005bf8 <Clear_Status_Bit>
	}

	//BASIC CHANNEL
	interpretted_value = *(address + num_presets + 2);
 8000a6a:	2328      	movs	r3, #40	@ 0x28
 8000a6c:	18fb      	adds	r3, r7, r3
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	3302      	adds	r3, #2
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	18d3      	adds	r3, r2, r3
 8000a76:	781a      	ldrb	r2, [r3, #0]
 8000a78:	2116      	movs	r1, #22
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	701a      	strb	r2, [r3, #0]

	if(interpretted_value > (uint8_t)MIDI_CH_SIXTEEN){
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d908      	bls.n	8000a9a <Read_and_Interpret_Misc_From_Flash+0x156>

		uint8_t midi_channel_default = MIDI_BASIC_CHANNEL_DEFAULT;
 8000a88:	2117      	movs	r1, #23
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)midi_channel_default;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	187a      	adds	r2, r7, r1
 8000a94:	7812      	ldrb	r2, [r2, #0]
 8000a96:	701a      	strb	r2, [r3, #0]
 8000a98:	e005      	b.n	8000aa6 <Read_and_Interpret_Misc_From_Flash+0x162>
	}
	else{

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)interpretted_value;
 8000a9a:	2316      	movs	r3, #22
 8000a9c:	18fb      	adds	r3, r7, r3
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8000aa6:	2301      	movs	r3, #1
}
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b008      	add	sp, #32
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>:

uint8_t Update_Converted_Preset_Array_with_User_or_Factory_Presets(volatile struct Preset_Converted* presets_converted_array_ptr,
																	volatile enum Validate *user_presets_used_array_ptr,
																	const struct Preset **factory_presets_array_ptr,
																	volatile struct Preset **user_presets_array_ptr,
																	uint8_t size_of_factory_and_user_arrays){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
 8000abc:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000abe:	2317      	movs	r3, #23
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e03c      	b.n	8000b42 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x92>

		if(*(user_presets_used_array_ptr + i) == (enum Validate)YES){
 8000ac8:	2117      	movs	r1, #23
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	18d3      	adds	r3, r2, r3
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d112      	bne.n	8000b00 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x50>
			Convert_All_Preset_Values(*(user_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	683a      	ldr	r2, [r7, #0]
 8000ae2:	18d3      	adds	r3, r2, r3
 8000ae4:	6818      	ldr	r0, [r3, #0]
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	781a      	ldrb	r2, [r3, #0]
 8000aea:	0013      	movs	r3, r2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	189b      	adds	r3, r3, r2
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	001a      	movs	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	189b      	adds	r3, r3, r2
 8000af8:	0019      	movs	r1, r3
 8000afa:	f7ff fe03 	bl	8000704 <Convert_All_Preset_Values>
 8000afe:	e01a      	b.n	8000b36 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
		}
		else if(*(user_presets_used_array_ptr + i) == (enum Validate)NO){
 8000b00:	2117      	movs	r1, #23
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	18d3      	adds	r3, r2, r3
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d111      	bne.n	8000b36 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
			Convert_All_Preset_Values((struct Preset *) *(factory_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	18d3      	adds	r3, r2, r3
 8000b1c:	6818      	ldr	r0, [r3, #0]
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	781a      	ldrb	r2, [r3, #0]
 8000b22:	0013      	movs	r3, r2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	189b      	adds	r3, r3, r2
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	001a      	movs	r2, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	189b      	adds	r3, r3, r2
 8000b30:	0019      	movs	r1, r3
 8000b32:	f7ff fde7 	bl	8000704 <Convert_All_Preset_Values>
	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000b36:	2117      	movs	r1, #23
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	781a      	ldrb	r2, [r3, #0]
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	3201      	adds	r2, #1
 8000b40:	701a      	strb	r2, [r3, #0]
 8000b42:	2317      	movs	r3, #23
 8000b44:	18fa      	adds	r2, r7, r3
 8000b46:	2320      	movs	r3, #32
 8000b48:	18fb      	adds	r3, r7, r3
 8000b4a:	7812      	ldrb	r2, [r2, #0]
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d3ba      	bcc.n	8000ac8 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x18>
		}
	}

	return 1;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	0018      	movs	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b006      	add	sp, #24
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <Read_and_Interpret_User_Presets_From_Flash>:

uint8_t Read_and_Interpret_User_Presets_From_Flash(void){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &user_preset_0);
 8000b60:	4b0d      	ldr	r3, [pc, #52]	@ (8000b98 <Read_and_Interpret_User_Presets_From_Flash+0x3c>)
 8000b62:	4a0e      	ldr	r2, [pc, #56]	@ (8000b9c <Read_and_Interpret_User_Presets_From_Flash+0x40>)
 8000b64:	0019      	movs	r1, r3
 8000b66:	0010      	movs	r0, r2
 8000b68:	f7ff feb3 	bl	80008d2 <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &user_preset_1);
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <Read_and_Interpret_User_Presets_From_Flash+0x44>)
 8000b6e:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba4 <Read_and_Interpret_User_Presets_From_Flash+0x48>)
 8000b70:	0019      	movs	r1, r3
 8000b72:	0010      	movs	r0, r2
 8000b74:	f7ff fead 	bl	80008d2 <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &user_preset_2);
 8000b78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <Read_and_Interpret_User_Presets_From_Flash+0x4c>)
 8000b7a:	4a0c      	ldr	r2, [pc, #48]	@ (8000bac <Read_and_Interpret_User_Presets_From_Flash+0x50>)
 8000b7c:	0019      	movs	r1, r3
 8000b7e:	0010      	movs	r0, r2
 8000b80:	f7ff fea7 	bl	80008d2 <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &user_preset_3);
 8000b84:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <Read_and_Interpret_User_Presets_From_Flash+0x54>)
 8000b86:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb4 <Read_and_Interpret_User_Presets_From_Flash+0x58>)
 8000b88:	0019      	movs	r1, r3
 8000b8a:	0010      	movs	r0, r2
 8000b8c:	f7ff fea1 	bl	80008d2 <Read_and_Interpret_Preset_From_Flash>

	return 1;
 8000b90:	2301      	movs	r3, #1
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	0800f800 	.word	0x0800f800
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	0800f808 	.word	0x0800f808
 8000ba8:	20000010 	.word	0x20000010
 8000bac:	0800f810 	.word	0x0800f810
 8000bb0:	20000018 	.word	0x20000018
 8000bb4:	0800f818 	.word	0x0800f818

08000bb8 <Update_Waveshape_with_CC_Value>:

uint8_t Update_Waveshape_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]

	if(*data <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bca:	d803      	bhi.n	8000bd4 <Update_Waveshape_with_CC_Value+0x1c>
		params_ptr->waveshape = TRIANGLE_MODE;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	719a      	strb	r2, [r3, #6]
 8000bd2:	e011      	b.n	8000bf8 <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SINE_MODE_ADC_THRESHOLD){
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b55      	cmp	r3, #85	@ 0x55
 8000bdc:	d803      	bhi.n	8000be6 <Update_Waveshape_with_CC_Value+0x2e>
		params_ptr->waveshape = SINE_MODE;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	2201      	movs	r2, #1
 8000be2:	719a      	strb	r2, [r3, #6]
 8000be4:	e008      	b.n	8000bf8 <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SQUARE_MODE_ADC_THRESHOLD){
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	b25b      	sxtb	r3, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	db02      	blt.n	8000bf8 <Update_Waveshape_with_CC_Value+0x40>
		params_ptr->waveshape = SQUARE_MODE;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 8000bf8:	2301      	movs	r3, #1
}
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <Update_Speed_with_CC_Value>:

uint8_t Update_Speed_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b084      	sub	sp, #16
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	6039      	str	r1, [r7, #0]

	uint16_t speed = (uint16_t)*data;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	210e      	movs	r1, #14
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	801a      	strh	r2, [r3, #0]

	speed <<= 3; //convert to 10-bit
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	187a      	adds	r2, r7, r1
 8000c1c:	8812      	ldrh	r2, [r2, #0]
 8000c1e:	00d2      	lsls	r2, r2, #3
 8000c20:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = speed;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	187a      	adds	r2, r7, r1
 8000c26:	8812      	ldrh	r2, [r2, #0]
 8000c28:	811a      	strh	r2, [r3, #8]

	return 1;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b004      	add	sp, #16
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <Update_Depth_with_CC_Value>:

uint8_t Update_Depth_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]

	uint8_t depth = (uint8_t)*data;
 8000c3e:	210f      	movs	r1, #15
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	7812      	ldrb	r2, [r2, #0]
 8000c46:	701a      	strb	r2, [r3, #0]
	params_ptr->depth = depth;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	187a      	adds	r2, r7, r1
 8000c4c:	7812      	ldrb	r2, [r2, #0]
 8000c4e:	729a      	strb	r2, [r3, #10]

	return 1;
 8000c50:	2301      	movs	r3, #1
}
 8000c52:	0018      	movs	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b004      	add	sp, #16
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <Update_Symmetry_with_CC_Value>:

uint8_t Update_Symmetry_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b084      	sub	sp, #16
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	6039      	str	r1, [r7, #0]

	uint8_t symmetry = (uint8_t)*data;
 8000c64:	210f      	movs	r1, #15
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	7812      	ldrb	r2, [r2, #0]
 8000c6c:	701a      	strb	r2, [r3, #0]

	symmetry <<= 1; //convert to 8-bit
 8000c6e:	187a      	adds	r2, r7, r1
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	18db      	adds	r3, r3, r3
 8000c76:	7013      	strb	r3, [r2, #0]
	params_ptr->symmetry = symmetry;
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	819a      	strh	r2, [r3, #12]

	return 1;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	0018      	movs	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b004      	add	sp, #16
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <Update_Phase_with_CC_Value>:

uint8_t Update_Phase_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]

	uint8_t phase = (uint8_t)*data;
 8000c96:	210f      	movs	r1, #15
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	7812      	ldrb	r2, [r2, #0]
 8000c9e:	701a      	strb	r2, [r3, #0]

	phase <<= 2; //convert to 9-bit
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	187a      	adds	r2, r7, r1
 8000ca4:	7812      	ldrb	r2, [r2, #0]
 8000ca6:	0092      	lsls	r2, r2, #2
 8000ca8:	701a      	strb	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = phase;
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8000cb4:	2301      	movs	r3, #1
}
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b004      	add	sp, #16
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <Set_Waveshape_to_CC_Mode_and_Value>:

uint8_t Set_Waveshape_to_CC_Mode_and_Value(uint8_t *data){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000cc8:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b07      	ldr	r3, [pc, #28]	@ (8000cec <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000cd0:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = CC_MODE;
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	701a      	strb	r2, [r3, #0]

	CC_array[WAVESHAPE_ARR] = *data;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	4b04      	ldr	r3, [pc, #16]	@ (8000cf0 <Set_Waveshape_to_CC_Mode_and_Value+0x30>)
 8000cde:	701a      	strb	r2, [r3, #0]

	return 1;
 8000ce0:	2301      	movs	r3, #1
}
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b002      	add	sp, #8
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	20000430 	.word	0x20000430
 8000cf0:	20000548 	.word	0x20000548

08000cf4 <Set_Speed_to_CC_Mode_and_Value>:

uint8_t Set_Speed_to_CC_Mode_and_Value(uint8_t *data){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000cfc:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000d04:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000d08:	2202      	movs	r2, #2
 8000d0a:	701a      	strb	r2, [r3, #0]

	CC_array[SPEED_ARR] = *data;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	781a      	ldrb	r2, [r3, #0]
 8000d10:	4b04      	ldr	r3, [pc, #16]	@ (8000d24 <Set_Speed_to_CC_Mode_and_Value+0x30>)
 8000d12:	705a      	strb	r2, [r3, #1]

	return 1;
 8000d14:	2301      	movs	r3, #1
}
 8000d16:	0018      	movs	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b002      	add	sp, #8
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	20000428 	.word	0x20000428
 8000d24:	20000548 	.word	0x20000548

08000d28 <Set_Depth_to_CC_Mode_and_Value>:

uint8_t Set_Depth_to_CC_Mode_and_Value(uint8_t *data){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000d38:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = CC_MODE;
 8000d3a:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	701a      	strb	r2, [r3, #0]

	CC_array[DEPTH_ARR] = *data;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	781a      	ldrb	r2, [r3, #0]
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <Set_Depth_to_CC_Mode_and_Value+0x30>)
 8000d46:	709a      	strb	r2, [r3, #2]

	return 1;
 8000d48:	2301      	movs	r3, #1
}
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b002      	add	sp, #8
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	2000042c 	.word	0x2000042c
 8000d58:	20000548 	.word	0x20000548

08000d5c <Set_Symmetry_to_CC_Mode_and_Value>:

uint8_t Set_Symmetry_to_CC_Mode_and_Value(uint8_t *data){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000d64:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4b07      	ldr	r3, [pc, #28]	@ (8000d88 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000d6c:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = CC_MODE;
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000d70:	2202      	movs	r2, #2
 8000d72:	701a      	strb	r2, [r3, #0]

	CC_array[SYMMETRY_ARR] = *data;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	781a      	ldrb	r2, [r3, #0]
 8000d78:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <Set_Symmetry_to_CC_Mode_and_Value+0x30>)
 8000d7a:	70da      	strb	r2, [r3, #3]

	return 1;
 8000d7c:	2301      	movs	r3, #1
}
 8000d7e:	0018      	movs	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b002      	add	sp, #8
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			@ (mov r8, r8)
 8000d88:	20000434 	.word	0x20000434
 8000d8c:	20000548 	.word	0x20000548

08000d90 <Set_Phase_to_CC_Mode_and_Value>:

uint8_t Set_Phase_to_CC_Mode_and_Value(uint8_t *data){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000d98:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b07      	ldr	r3, [pc, #28]	@ (8000dbc <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000da0:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = CC_MODE;
 8000da2:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000da4:	2202      	movs	r2, #2
 8000da6:	701a      	strb	r2, [r3, #0]

	CC_array[PHASE_ARR] = *data;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	781a      	ldrb	r2, [r3, #0]
 8000dac:	4b04      	ldr	r3, [pc, #16]	@ (8000dc0 <Set_Phase_to_CC_Mode_and_Value+0x30>)
 8000dae:	711a      	strb	r2, [r3, #4]

	return 1;
 8000db0:	2301      	movs	r3, #1
}
 8000db2:	0018      	movs	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b002      	add	sp, #8
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	20000438 	.word	0x20000438
 8000dc0:	20000548 	.word	0x20000548

08000dc4 <Set_All_Pots_to_PC_Mode>:

uint8_t Set_All_Pots_to_PC_Mode(void){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000dc8:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <Set_All_Pots_to_PC_Mode+0x5c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <Set_All_Pots_to_PC_Mode+0x5c>)
 8000dd0:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = PC_MODE;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	@ (8000e20 <Set_All_Pots_to_PC_Mode+0x5c>)
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	701a      	strb	r2, [r3, #0]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <Set_All_Pots_to_PC_Mode+0x60>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <Set_All_Pots_to_PC_Mode+0x60>)
 8000de0:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.shared_state = PC_MODE;
 8000de2:	4b10      	ldr	r3, [pc, #64]	@ (8000e24 <Set_All_Pots_to_PC_Mode+0x60>)
 8000de4:	2203      	movs	r2, #3
 8000de6:	701a      	strb	r2, [r3, #0]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e28 <Set_All_Pots_to_PC_Mode+0x64>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <Set_All_Pots_to_PC_Mode+0x64>)
 8000df0:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = PC_MODE;
 8000df2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e28 <Set_All_Pots_to_PC_Mode+0x64>)
 8000df4:	2203      	movs	r2, #3
 8000df6:	701a      	strb	r2, [r3, #0]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <Set_All_Pots_to_PC_Mode+0x68>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000e2c <Set_All_Pots_to_PC_Mode+0x68>)
 8000e00:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = PC_MODE;
 8000e02:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <Set_All_Pots_to_PC_Mode+0x68>)
 8000e04:	2203      	movs	r2, #3
 8000e06:	701a      	strb	r2, [r3, #0]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000e08:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <Set_All_Pots_to_PC_Mode+0x6c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <Set_All_Pots_to_PC_Mode+0x6c>)
 8000e10:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = PC_MODE;
 8000e12:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <Set_All_Pots_to_PC_Mode+0x6c>)
 8000e14:	2203      	movs	r2, #3
 8000e16:	701a      	strb	r2, [r3, #0]

	return 1;
 8000e18:	2301      	movs	r3, #1
}
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000430 	.word	0x20000430
 8000e24:	20000428 	.word	0x20000428
 8000e28:	2000042c 	.word	0x2000042c
 8000e2c:	20000434 	.word	0x20000434
 8000e30:	20000438 	.word	0x20000438

08000e34 <Is_Status_Byte>:
volatile uint8_t active_status_byte;
volatile uint8_t running_status_byte;
volatile struct MIDI_Data MIDI_data = {.MIDI_data_buffer = 0};

//FUNCTION DEFINITIONS
enum Validate Is_Status_Byte(volatile uint8_t *data){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000e3c:	210f      	movs	r1, #15
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	7812      	ldrb	r2, [r2, #0]
 8000e44:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	187a      	adds	r2, r7, r1
 8000e4a:	7812      	ldrb	r2, [r2, #0]
 8000e4c:	09d2      	lsrs	r2, r2, #7
 8000e4e:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <Is_Status_Byte+0x28>

		return (enum Validate)YES;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e000      	b.n	8000e5e <Is_Status_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)NO;
 8000e5c:	2300      	movs	r3, #0
	}
}
 8000e5e:	0018      	movs	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b004      	add	sp, #16
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <Is_Data_Byte>:

enum Validate Is_Data_Byte(volatile uint8_t *data){
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b084      	sub	sp, #16
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000e6e:	210f      	movs	r1, #15
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	7812      	ldrb	r2, [r2, #0]
 8000e76:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	187a      	adds	r2, r7, r1
 8000e7c:	7812      	ldrb	r2, [r2, #0]
 8000e7e:	09d2      	lsrs	r2, r2, #7
 8000e80:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <Is_Data_Byte+0x28>

		return (enum Validate)NO;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <Is_Data_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)YES;
 8000e8e:	2301      	movs	r3, #1
	}
}
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b004      	add	sp, #16
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <Is_PC_Status_Byte>:

enum Validate Is_PC_Status_Byte(volatile uint8_t *data){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_PROGRAM_CHANGE >> 4;
 8000ea0:	210f      	movs	r1, #15
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	220c      	movs	r2, #12
 8000ea6:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	200e      	movs	r0, #14
 8000eb0:	183b      	adds	r3, r7, r0
 8000eb2:	0912      	lsrs	r2, r2, #4
 8000eb4:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000eb6:	183a      	adds	r2, r7, r0
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	7812      	ldrb	r2, [r2, #0]
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d101      	bne.n	8000ec6 <Is_PC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <Is_PC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000ec6:	2300      	movs	r3, #0
	}
}
 8000ec8:	0018      	movs	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b004      	add	sp, #16
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <Is_CC_Status_Byte>:

enum Validate Is_CC_Status_Byte(volatile uint8_t *data){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_CONTROL_CHANGE >> 4;
 8000ed8:	210f      	movs	r1, #15
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	220b      	movs	r2, #11
 8000ede:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	200e      	movs	r0, #14
 8000ee8:	183b      	adds	r3, r7, r0
 8000eea:	0912      	lsrs	r2, r2, #4
 8000eec:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000eee:	183a      	adds	r2, r7, r0
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	7812      	ldrb	r2, [r2, #0]
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d101      	bne.n	8000efe <Is_CC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <Is_CC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000efe:	2300      	movs	r3, #0
	}
}
 8000f00:	0018      	movs	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b004      	add	sp, #16
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>:

enum Validate Is_Utilised_Channel_Mode_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b77      	cmp	r3, #119	@ 0x77
 8000f18:	d91d      	bls.n	8000f56 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4e>

		if(*first_data_byte == RESET_ALL_CONTROLLERS){ //put all pots into CC mode and set to 50%
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b79      	cmp	r3, #121	@ 0x79
 8000f22:	d101      	bne.n	8000f28 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x20>

			return (enum Validate)YES;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e017      	b.n	8000f58 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == LOCAL_CONTROL){
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b7a      	cmp	r3, #122	@ 0x7a
 8000f30:	d101      	bne.n	8000f36 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x2e>

			return (enum Validate)YES;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e010      	b.n	8000f58 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_ON){
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b7d      	cmp	r3, #125	@ 0x7d
 8000f3e:	d101      	bne.n	8000f44 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x3c>

			return (enum Validate)YES;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e009      	b.n	8000f58 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_OFF){
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b7c      	cmp	r3, #124	@ 0x7c
 8000f4c:	d101      	bne.n	8000f52 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4a>

			return (enum Validate)YES;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e002      	b.n	8000f58 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else{

			return (enum Validate)NO;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
	}
	else{

		return (enum Validate)NO;
 8000f56:	2300      	movs	r3, #0
	}
}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b002      	add	sp, #8
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <Is_Utilised_CC_First_Data_Byte>:

enum Validate Is_Utilised_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b77      	cmp	r3, #119	@ 0x77
 8000f70:	d901      	bls.n	8000f76 <Is_Utilised_CC_First_Data_Byte+0x16>

		return (enum Validate)NO;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e023      	b.n	8000fbe <Is_Utilised_CC_First_Data_Byte+0x5e>
	}
	else{

		if(*first_data_byte == WAVESHAPE_CC){
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b14      	cmp	r3, #20
 8000f7e:	d101      	bne.n	8000f84 <Is_Utilised_CC_First_Data_Byte+0x24>

			return (enum Validate)YES;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e01c      	b.n	8000fbe <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SPEED_CC){
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b15      	cmp	r3, #21
 8000f8c:	d101      	bne.n	8000f92 <Is_Utilised_CC_First_Data_Byte+0x32>

			return (enum Validate)YES;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e015      	b.n	8000fbe <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == DEPTH_CC){
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b16      	cmp	r3, #22
 8000f9a:	d101      	bne.n	8000fa0 <Is_Utilised_CC_First_Data_Byte+0x40>

			return (enum Validate)YES;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e00e      	b.n	8000fbe <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SYMMETRY_CC){
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b17      	cmp	r3, #23
 8000fa8:	d101      	bne.n	8000fae <Is_Utilised_CC_First_Data_Byte+0x4e>

			return (enum Validate)YES;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e007      	b.n	8000fbe <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == PHASE_CC){
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b18      	cmp	r3, #24
 8000fb6:	d101      	bne.n	8000fbc <Is_Utilised_CC_First_Data_Byte+0x5c>

			return (enum Validate)YES;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e000      	b.n	8000fbe <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else{

			return (enum Validate)NO;
 8000fbc:	2300      	movs	r3, #0
		}
	}
}
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b002      	add	sp, #8
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>:

enum Validate Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(volatile uint8_t *first_data_byte, volatile uint8_t *second_data_byte){
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	6039      	str	r1, [r7, #0]

	if(*first_data_byte == RESET_ALL_CONTROLLERS){
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b79      	cmp	r3, #121	@ 0x79
 8000fd8:	d108      	bne.n	8000fec <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x26>

		if(*second_data_byte == 0){
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x22>

			return (enum Validate)YES;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e031      	b.n	800104c <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e02f      	b.n	800104c <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == LOCAL_CONTROL){
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b7a      	cmp	r3, #122	@ 0x7a
 8000ff4:	d10d      	bne.n	8001012 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x4c>

		if((*second_data_byte == 0) || (*second_data_byte == 127)){
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d004      	beq.n	800100a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x44>
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b7f      	cmp	r3, #127	@ 0x7f
 8001008:	d101      	bne.n	800100e <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x48>

			return (enum Validate)YES;
 800100a:	2301      	movs	r3, #1
 800100c:	e01e      	b.n	800104c <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 800100e:	2300      	movs	r3, #0
 8001010:	e01c      	b.n	800104c <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_OFF){
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b7c      	cmp	r3, #124	@ 0x7c
 800101a:	d108      	bne.n	800102e <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x68>

		if((*second_data_byte == 0)){
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x64>

			return (enum Validate)YES;
 8001026:	2301      	movs	r3, #1
 8001028:	e010      	b.n	800104c <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 800102a:	2300      	movs	r3, #0
 800102c:	e00e      	b.n	800104c <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_ON){
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b7d      	cmp	r3, #125	@ 0x7d
 8001036:	d108      	bne.n	800104a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x84>

		if((*second_data_byte == 0)){
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x80>

			return (enum Validate)YES;
 8001042:	2301      	movs	r3, #1
 8001044:	e002      	b.n	800104c <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8001046:	2300      	movs	r3, #0
 8001048:	e000      	b.n	800104c <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else{

		return (enum Validate)NO; //should not even be called if first data byte is always valid
 800104a:	2300      	movs	r3, #0
	}
}
 800104c:	0018      	movs	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	b002      	add	sp, #8
 8001052:	bd80      	pop	{r7, pc}

08001054 <Is_Sysex_Start_Status_Byte>:
	}

	return 1;
}

enum Validate Is_Sysex_Start_Status_Byte(volatile uint8_t *data){
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

	if(*data == (uint8_t)SYSTEM_EXCLUSIVE_START){
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2bf0      	cmp	r3, #240	@ 0xf0
 8001064:	d101      	bne.n	800106a <Is_Sysex_Start_Status_Byte+0x16>

		return (enum Validate)YES;
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <Is_Sysex_Start_Status_Byte+0x18>
	}
	else{

		return (enum Validate)NO;
 800106a:	2300      	movs	r3, #0
	}
}
 800106c:	0018      	movs	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	b002      	add	sp, #8
 8001072:	bd80      	pop	{r7, pc}

08001074 <Is_Channelised_Status_Byte_On_Basic_Channel>:

		return (enum Validate)NO;
	}
}

enum Validate Is_Channelised_Status_Byte_On_Basic_Channel(volatile uint8_t *data, volatile enum MIDI_Channel MIDI_basic_channel){
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	000a      	movs	r2, r1
 800107e:	1cfb      	adds	r3, r7, #3
 8001080:	701a      	strb	r2, [r3, #0]

	uint8_t ch = *data & 0x0F;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	200f      	movs	r0, #15
 800108a:	183b      	adds	r3, r7, r0
 800108c:	210f      	movs	r1, #15
 800108e:	400a      	ands	r2, r1
 8001090:	701a      	strb	r2, [r3, #0]
	uint8_t b_ch = (uint8_t)MIDI_basic_channel;
 8001092:	210e      	movs	r1, #14
 8001094:	187b      	adds	r3, r7, r1
 8001096:	1cfa      	adds	r2, r7, #3
 8001098:	7812      	ldrb	r2, [r2, #0]
 800109a:	701a      	strb	r2, [r3, #0]

	if(ch == b_ch){
 800109c:	183a      	adds	r2, r7, r0
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	7812      	ldrb	r2, [r2, #0]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d101      	bne.n	80010ac <Is_Channelised_Status_Byte_On_Basic_Channel+0x38>

		return (enum Validate)YES;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <Is_Channelised_Status_Byte_On_Basic_Channel+0x3a>
	}
	else{

		return (enum Validate)NO;
 80010ac:	2300      	movs	r3, #0
	}
}
 80010ae:	0018      	movs	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b004      	add	sp, #16
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <Is_Data_Buffer_Empty>:

enum Validate Is_Data_Buffer_Empty(volatile struct MIDI_Data *MIDI_data_struct){
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b084      	sub	sp, #16
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]

	uint16_t sum = 0;
 80010be:	230e      	movs	r3, #14
 80010c0:	18fb      	adds	r3, r7, r3
 80010c2:	2200      	movs	r2, #0
 80010c4:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 80010c6:	230d      	movs	r3, #13
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
 80010ce:	e011      	b.n	80010f4 <Is_Data_Buffer_Empty+0x3e>

		sum += MIDI_data_struct->MIDI_data_buffer[i];
 80010d0:	200d      	movs	r0, #13
 80010d2:	183b      	adds	r3, r7, r0
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	5cd3      	ldrb	r3, [r2, r3]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	0019      	movs	r1, r3
 80010de:	220e      	movs	r2, #14
 80010e0:	18bb      	adds	r3, r7, r2
 80010e2:	18ba      	adds	r2, r7, r2
 80010e4:	8812      	ldrh	r2, [r2, #0]
 80010e6:	188a      	adds	r2, r1, r2
 80010e8:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 80010ea:	183b      	adds	r3, r7, r0
 80010ec:	781a      	ldrb	r2, [r3, #0]
 80010ee:	183b      	adds	r3, r7, r0
 80010f0:	3201      	adds	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	230d      	movs	r3, #13
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b09      	cmp	r3, #9
 80010fc:	d9e8      	bls.n	80010d0 <Is_Data_Buffer_Empty+0x1a>
	}

	if(sum == 0){
 80010fe:	230e      	movs	r3, #14
 8001100:	18fb      	adds	r3, r7, r3
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <Is_Data_Buffer_Empty+0x56>

		return (enum Validate)YES;
 8001108:	2301      	movs	r3, #1
 800110a:	e000      	b.n	800110e <Is_Data_Buffer_Empty+0x58>
	}
	else{

		return (enum Validate)NO;
 800110c:	2300      	movs	r3, #0
	}
}
 800110e:	0018      	movs	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	b004      	add	sp, #16
 8001114:	bd80      	pop	{r7, pc}

08001116 <Clear_Data_Buffer>:
			return 1;
		}
	}
}

uint8_t Clear_Data_Buffer(volatile struct MIDI_Data *MIDI_data_struct){
 8001116:	b580      	push	{r7, lr}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 800111e:	230f      	movs	r3, #15
 8001120:	18fb      	adds	r3, r7, r3
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	e00a      	b.n	800113e <Clear_Data_Buffer+0x28>

		MIDI_data_struct->MIDI_data_buffer[i] = 0;
 8001128:	200f      	movs	r0, #15
 800112a:	183b      	adds	r3, r7, r0
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	2100      	movs	r1, #0
 8001132:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001134:	183b      	adds	r3, r7, r0
 8001136:	781a      	ldrb	r2, [r3, #0]
 8001138:	183b      	adds	r3, r7, r0
 800113a:	3201      	adds	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	230f      	movs	r3, #15
 8001140:	18fb      	adds	r3, r7, r3
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b09      	cmp	r3, #9
 8001146:	d9ef      	bls.n	8001128 <Clear_Data_Buffer+0x12>
	}

	return 1;
 8001148:	2301      	movs	r3, #1
}
 800114a:	0018      	movs	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	b004      	add	sp, #16
 8001150:	bd80      	pop	{r7, pc}

08001152 <Is_Program_Change_Data_Byte_In_Range>:

enum Validate Is_Program_Change_Data_Byte_In_Range(volatile uint8_t *PC_data, uint8_t size_of_factory_or_user_array){
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	000a      	movs	r2, r1
 800115c:	1cfb      	adds	r3, r7, #3
 800115e:	701a      	strb	r2, [r3, #0]

	if(*PC_data < size_of_factory_or_user_array){
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	1cfa      	adds	r2, r7, #3
 8001168:	7812      	ldrb	r2, [r2, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	d901      	bls.n	8001172 <Is_Program_Change_Data_Byte_In_Range+0x20>

		return (enum Validate)YES;
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <Is_Program_Change_Data_Byte_In_Range+0x22>
	}
	else{

		return (enum Validate)NO;
 8001172:	2300      	movs	r3, #0
	}
}
 8001174:	0018      	movs	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	b002      	add	sp, #8
 800117a:	bd80      	pop	{r7, pc}

0800117c <Is_System_Real_Time_Status_Byte>:

enum Validate Is_System_Real_Time_Status_Byte(volatile uint8_t *data){
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

	if(*data == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2bf8      	cmp	r3, #248	@ 0xf8
 800118c:	d101      	bne.n	8001192 <Is_System_Real_Time_Status_Byte+0x16>
		return (enum Validate)YES;
 800118e:	2301      	movs	r3, #1
 8001190:	e023      	b.n	80011da <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_START){
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2bfa      	cmp	r3, #250	@ 0xfa
 800119a:	d101      	bne.n	80011a0 <Is_System_Real_Time_Status_Byte+0x24>
		return (enum Validate)YES;
 800119c:	2301      	movs	r3, #1
 800119e:	e01c      	b.n	80011da <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_CONTINUE){
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2bfb      	cmp	r3, #251	@ 0xfb
 80011a8:	d101      	bne.n	80011ae <Is_System_Real_Time_Status_Byte+0x32>
		return (enum Validate)YES;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e015      	b.n	80011da <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_STOP){
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2bfc      	cmp	r3, #252	@ 0xfc
 80011b6:	d101      	bne.n	80011bc <Is_System_Real_Time_Status_Byte+0x40>
		return (enum Validate)YES;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e00e      	b.n	80011da <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_ACTIVE_SENSING){
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2bfe      	cmp	r3, #254	@ 0xfe
 80011c4:	d101      	bne.n	80011ca <Is_System_Real_Time_Status_Byte+0x4e>
		return (enum Validate)YES;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e007      	b.n	80011da <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_RESET){
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2bff      	cmp	r3, #255	@ 0xff
 80011d2:	d101      	bne.n	80011d8 <Is_System_Real_Time_Status_Byte+0x5c>
		return (enum Validate)YES;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e000      	b.n	80011da <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else{
		return (enum Validate)NO;
 80011d8:	2300      	movs	r3, #0
	}
}
 80011da:	0018      	movs	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	b002      	add	sp, #8
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <Is_OMNI_On>:

enum Validate Is_OMNI_On(volatile uint32_t *statuses_ptr){
 80011e2:	b5b0      	push	{r4, r5, r7, lr}
 80011e4:	b084      	sub	sp, #16
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]

	uint8_t omni_mode = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 80011ea:	250f      	movs	r5, #15
 80011ec:	197c      	adds	r4, r7, r5
 80011ee:	2380      	movs	r3, #128	@ 0x80
 80011f0:	00da      	lsls	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	0011      	movs	r1, r2
 80011f6:	0018      	movs	r0, r3
 80011f8:	f004 fcd8 	bl	8005bac <Get_Status_Bit>
 80011fc:	0003      	movs	r3, r0
 80011fe:	7023      	strb	r3, [r4, #0]

	if(omni_mode == 1){
 8001200:	197b      	adds	r3, r7, r5
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d101      	bne.n	800120c <Is_OMNI_On+0x2a>

		return (enum Validate)YES;
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <Is_OMNI_On+0x2c>
	}
	else{

		return (enum Validate)NO;
 800120c:	2300      	movs	r3, #0
	}
}
 800120e:	0018      	movs	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	b004      	add	sp, #16
 8001214:	bdb0      	pop	{r4, r5, r7, pc}

08001216 <Reset_and_Stop_MIDI_Software_Timer>:

uint8_t Reset_and_Stop_MIDI_Software_Timer(uint32_t *midi_counter_ptr, volatile uint32_t *statuses_ptr){
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	6039      	str	r1, [r7, #0]

	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Is_Running);
 8001220:	2380      	movs	r3, #128	@ 0x80
 8001222:	005a      	lsls	r2, r3, #1
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	0011      	movs	r1, r2
 8001228:	0018      	movs	r0, r3
 800122a:	f004 fce5 	bl	8005bf8 <Clear_Status_Bit>
	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Has_Timed_Out);
 800122e:	2380      	movs	r3, #128	@ 0x80
 8001230:	009a      	lsls	r2, r3, #2
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	0011      	movs	r1, r2
 8001236:	0018      	movs	r0, r3
 8001238:	f004 fcde 	bl	8005bf8 <Clear_Status_Bit>
	*midi_counter_ptr = 0;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]

	return 1;
 8001242:	2301      	movs	r3, #1
}
 8001244:	0018      	movs	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	b002      	add	sp, #8
 800124a:	bd80      	pop	{r7, pc}

0800124c <Reset_All_Controllers>:

uint8_t Reset_All_Controllers(struct Params *params_ptr, struct Delay_Line* delay_line_ptr){
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8001256:	4b24      	ldr	r3, [pc, #144]	@ (80012e8 <Reset_All_Controllers+0x9c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	4b22      	ldr	r3, [pc, #136]	@ (80012e8 <Reset_All_Controllers+0x9c>)
 800125e:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8001260:	4b22      	ldr	r3, [pc, #136]	@ (80012ec <Reset_All_Controllers+0xa0>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b21      	ldr	r3, [pc, #132]	@ (80012ec <Reset_All_Controllers+0xa0>)
 8001268:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 800126a:	4b21      	ldr	r3, [pc, #132]	@ (80012f0 <Reset_All_Controllers+0xa4>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <Reset_All_Controllers+0xa4>)
 8001272:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8001274:	4b1f      	ldr	r3, [pc, #124]	@ (80012f4 <Reset_All_Controllers+0xa8>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b1e      	ldr	r3, [pc, #120]	@ (80012f4 <Reset_All_Controllers+0xa8>)
 800127c:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 800127e:	4b1e      	ldr	r3, [pc, #120]	@ (80012f8 <Reset_All_Controllers+0xac>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	4b1c      	ldr	r3, [pc, #112]	@ (80012f8 <Reset_All_Controllers+0xac>)
 8001286:	705a      	strb	r2, [r3, #1]

	//Put all pots into CC mode
	waveshape_fsm.current_state = CC_MODE;
 8001288:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <Reset_All_Controllers+0x9c>)
 800128a:	2202      	movs	r2, #2
 800128c:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 800128e:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <Reset_All_Controllers+0xa0>)
 8001290:	2202      	movs	r2, #2
 8001292:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = CC_MODE;
 8001294:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <Reset_All_Controllers+0xa4>)
 8001296:	2202      	movs	r2, #2
 8001298:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = CC_MODE;
 800129a:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <Reset_All_Controllers+0xa8>)
 800129c:	2202      	movs	r2, #2
 800129e:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = CC_MODE;
 80012a0:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <Reset_All_Controllers+0xac>)
 80012a2:	2202      	movs	r2, #2
 80012a4:	701a      	strb	r2, [r3, #0]

	uint8_t data = 127 >> 1;
 80012a6:	230e      	movs	r3, #14
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	223f      	movs	r2, #63	@ 0x3f
 80012ac:	701a      	strb	r2, [r3, #0]

	for(uint8_t index = 0; index < NUM_POTS; index++){
 80012ae:	230f      	movs	r3, #15
 80012b0:	18fb      	adds	r3, r7, r3
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
 80012b6:	e00c      	b.n	80012d2 <Reset_All_Controllers+0x86>

		CC_array[index] = data;
 80012b8:	200f      	movs	r0, #15
 80012ba:	183b      	adds	r3, r7, r0
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	4a0f      	ldr	r2, [pc, #60]	@ (80012fc <Reset_All_Controllers+0xb0>)
 80012c0:	210e      	movs	r1, #14
 80012c2:	1879      	adds	r1, r7, r1
 80012c4:	7809      	ldrb	r1, [r1, #0]
 80012c6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t index = 0; index < NUM_POTS; index++){
 80012c8:	183b      	adds	r3, r7, r0
 80012ca:	781a      	ldrb	r2, [r3, #0]
 80012cc:	183b      	adds	r3, r7, r0
 80012ce:	3201      	adds	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]
 80012d2:	230f      	movs	r3, #15
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d9ed      	bls.n	80012b8 <Reset_All_Controllers+0x6c>
	}

	return 1;
 80012dc:	2301      	movs	r3, #1
}
 80012de:	0018      	movs	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b004      	add	sp, #16
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	20000430 	.word	0x20000430
 80012ec:	20000428 	.word	0x20000428
 80012f0:	2000042c 	.word	0x2000042c
 80012f4:	20000434 	.word	0x20000434
 80012f8:	20000438 	.word	0x20000438
 80012fc:	20000548 	.word	0x20000548

08001300 <Set_Local_Control>:

uint8_t Set_Local_Control(){
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8001304:	4b15      	ldr	r3, [pc, #84]	@ (800135c <Set_Local_Control+0x5c>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4b14      	ldr	r3, [pc, #80]	@ (800135c <Set_Local_Control+0x5c>)
 800130c:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 800130e:	4b14      	ldr	r3, [pc, #80]	@ (8001360 <Set_Local_Control+0x60>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <Set_Local_Control+0x60>)
 8001316:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8001318:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <Set_Local_Control+0x64>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <Set_Local_Control+0x64>)
 8001320:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <Set_Local_Control+0x68>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <Set_Local_Control+0x68>)
 800132a:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 800132c:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <Set_Local_Control+0x6c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <Set_Local_Control+0x6c>)
 8001334:	705a      	strb	r2, [r3, #1]

	//Put all pots into manual mode
	waveshape_fsm.current_state = MANUAL_MODE;
 8001336:	4b09      	ldr	r3, [pc, #36]	@ (800135c <Set_Local_Control+0x5c>)
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = MANUAL_MODE;
 800133c:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <Set_Local_Control+0x60>)
 800133e:	2201      	movs	r2, #1
 8001340:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = MANUAL_MODE;
 8001342:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <Set_Local_Control+0x64>)
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = MANUAL_MODE;
 8001348:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <Set_Local_Control+0x68>)
 800134a:	2201      	movs	r2, #1
 800134c:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = MANUAL_MODE;
 800134e:	4b07      	ldr	r3, [pc, #28]	@ (800136c <Set_Local_Control+0x6c>)
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]

	return 1;
 8001354:	2301      	movs	r3, #1
}
 8001356:	0018      	movs	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000430 	.word	0x20000430
 8001360:	20000428 	.word	0x20000428
 8001364:	2000042c 	.word	0x2000042c
 8001368:	20000434 	.word	0x20000434
 800136c:	20000438 	.word	0x20000438

08001370 <Set_OMNI_Off>:

uint8_t Set_OMNI_Off(volatile uint32_t *statuses_ptr){
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]

	//Clear status bit
	Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001378:	2380      	movs	r3, #128	@ 0x80
 800137a:	00da      	lsls	r2, r3, #3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	0011      	movs	r1, r2
 8001380:	0018      	movs	r0, r3
 8001382:	f004 fc39 	bl	8005bf8 <Clear_Status_Bit>

	return 1;
 8001386:	2301      	movs	r3, #1
}
 8001388:	0018      	movs	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	b002      	add	sp, #8
 800138e:	bd80      	pop	{r7, pc}

08001390 <Set_OMNI_On>:

uint8_t Set_OMNI_On(volatile uint32_t *statuses_ptr){
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

	//Set status bit
	Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001398:	2380      	movs	r3, #128	@ 0x80
 800139a:	00da      	lsls	r2, r3, #3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	0011      	movs	r1, r2
 80013a0:	0018      	movs	r0, r3
 80013a2:	f004 fc17 	bl	8005bd4 <Set_Status_Bit>

	return 1;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	0018      	movs	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b002      	add	sp, #8
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <Start_UART_Receive>:
//VARIABLE DEFINITIONS
volatile uint8_t rx_buffer[1] = {0};
volatile enum Validate UART_DMA_TX_is_complete = YES;

//FUNCTION DEFINITIONS
uint8_t Start_UART_Receive(void){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0

	//START UART RECEIVE
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 80013b4:	4904      	ldr	r1, [pc, #16]	@ (80013c8 <Start_UART_Receive+0x18>)
 80013b6:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <Start_UART_Receive+0x1c>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	0018      	movs	r0, r3
 80013bc:	f00a fcb2 	bl	800bd24 <HAL_UART_Receive_DMA>

	return 1;
 80013c0:	2301      	movs	r3, #1
}
 80013c2:	0018      	movs	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	2000055c 	.word	0x2000055c
 80013cc:	20000ac8 	.word	0x20000ac8

080013d0 <Pot_Check>:
volatile uint8_t symmetry_pot_adc_measurement_num = 0;
volatile uint8_t phase_pot_adc_measurement_num = 0;
volatile uint8_t pots_counter = 0;

//FUNCTION DEFINITIONS
uint8_t Pot_Check(volatile uint16_t* ADCResults_arr, enum Pot_Type pot_type){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	@ 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	000a      	movs	r2, r1
 80013da:	1cfb      	adds	r3, r7, #3
 80013dc:	701a      	strb	r2, [r3, #0]
	static uint16_t second_symmetry_measurement;

	static uint16_t first_phase_measurement;
	static uint16_t second_phase_measurement;

	uint16_t *first_measurement_ptr = NULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t *second_measurement_ptr = NULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
	volatile uint8_t *measurement_num_ptr = NULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
	void *measurement_ptr = NULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
	uint8_t tolerance = 0;
 80013ee:	2117      	movs	r1, #23
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
	volatile struct Normal_FSM* normal_fsm_ptr = NULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]

	if(pot_type == WAVESHAPE_POT){
 80013fe:	1cfb      	adds	r3, r7, #3
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10d      	bne.n	8001422 <Pot_Check+0x52>

		first_measurement_ptr = &first_waveshape_measurement;
 8001406:	4b6d      	ldr	r3, [pc, #436]	@ (80015bc <Pot_Check+0x1ec>)
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_waveshape_measurement;
 800140a:	4b6d      	ldr	r3, [pc, #436]	@ (80015c0 <Pot_Check+0x1f0>)
 800140c:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &waveshape_pot_adc_measurement_num;
 800140e:	4b6d      	ldr	r3, [pc, #436]	@ (80015c4 <Pot_Check+0x1f4>)
 8001410:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + WAVESHAPE_ADC_RESULT_INDEX);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	61bb      	str	r3, [r7, #24]
		tolerance = WAVESHAPE_TOLERANCE;
 8001416:	187b      	adds	r3, r7, r1
 8001418:	2246      	movs	r2, #70	@ 0x46
 800141a:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &waveshape_fsm;
 800141c:	4b6a      	ldr	r3, [pc, #424]	@ (80015c8 <Pot_Check+0x1f8>)
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	e04e      	b.n	80014c0 <Pot_Check+0xf0>
	}
	else if(pot_type == SPEED_POT){
 8001422:	1cfb      	adds	r3, r7, #3
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d10f      	bne.n	800144a <Pot_Check+0x7a>

		first_measurement_ptr = &first_speed_measurement;
 800142a:	4b68      	ldr	r3, [pc, #416]	@ (80015cc <Pot_Check+0x1fc>)
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_speed_measurement;
 800142e:	4b68      	ldr	r3, [pc, #416]	@ (80015d0 <Pot_Check+0x200>)
 8001430:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &speed_pot_adc_measurement_num;
 8001432:	4b68      	ldr	r3, [pc, #416]	@ (80015d4 <Pot_Check+0x204>)
 8001434:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SPEED_ADC_RESULT_INDEX);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3302      	adds	r3, #2
 800143a:	61bb      	str	r3, [r7, #24]
		tolerance = SPEED_TOLERANCE;
 800143c:	2317      	movs	r3, #23
 800143e:	18fb      	adds	r3, r7, r3
 8001440:	2246      	movs	r2, #70	@ 0x46
 8001442:	701a      	strb	r2, [r3, #0]
		speed_fsm_ptr = &speed_fsm;
 8001444:	4b64      	ldr	r3, [pc, #400]	@ (80015d8 <Pot_Check+0x208>)
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	e03a      	b.n	80014c0 <Pot_Check+0xf0>
	}
	else if(pot_type == DEPTH_POT){
 800144a:	1cfb      	adds	r3, r7, #3
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d10f      	bne.n	8001472 <Pot_Check+0xa2>

		first_measurement_ptr = &first_depth_measurement;
 8001452:	4b62      	ldr	r3, [pc, #392]	@ (80015dc <Pot_Check+0x20c>)
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_depth_measurement;
 8001456:	4b62      	ldr	r3, [pc, #392]	@ (80015e0 <Pot_Check+0x210>)
 8001458:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &depth_pot_adc_measurement_num;
 800145a:	4b62      	ldr	r3, [pc, #392]	@ (80015e4 <Pot_Check+0x214>)
 800145c:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DEPTH_ADC_RESULT_INDEX);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3304      	adds	r3, #4
 8001462:	61bb      	str	r3, [r7, #24]
		tolerance = DEPTH_TOLERANCE;
 8001464:	2317      	movs	r3, #23
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	2246      	movs	r2, #70	@ 0x46
 800146a:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &depth_fsm;
 800146c:	4b5e      	ldr	r3, [pc, #376]	@ (80015e8 <Pot_Check+0x218>)
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	e026      	b.n	80014c0 <Pot_Check+0xf0>
	}
	else if(pot_type == SYMMETRY_POT){
 8001472:	1cfb      	adds	r3, r7, #3
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b03      	cmp	r3, #3
 8001478:	d10f      	bne.n	800149a <Pot_Check+0xca>

		first_measurement_ptr = &first_symmetry_measurement;
 800147a:	4b5c      	ldr	r3, [pc, #368]	@ (80015ec <Pot_Check+0x21c>)
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_symmetry_measurement;
 800147e:	4b5c      	ldr	r3, [pc, #368]	@ (80015f0 <Pot_Check+0x220>)
 8001480:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &symmetry_pot_adc_measurement_num;
 8001482:	4b5c      	ldr	r3, [pc, #368]	@ (80015f4 <Pot_Check+0x224>)
 8001484:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SYMMETRY_ADC_RESULT_INDEX);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3306      	adds	r3, #6
 800148a:	61bb      	str	r3, [r7, #24]
		tolerance = SYMMETRY_TOLERANCE;
 800148c:	2317      	movs	r3, #23
 800148e:	18fb      	adds	r3, r7, r3
 8001490:	2246      	movs	r2, #70	@ 0x46
 8001492:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &symmetry_fsm;
 8001494:	4b58      	ldr	r3, [pc, #352]	@ (80015f8 <Pot_Check+0x228>)
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	e012      	b.n	80014c0 <Pot_Check+0xf0>
	}
	else if(pot_type == PHASE_POT){
 800149a:	1cfb      	adds	r3, r7, #3
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b04      	cmp	r3, #4
 80014a0:	d10e      	bne.n	80014c0 <Pot_Check+0xf0>

		first_measurement_ptr = &first_phase_measurement;
 80014a2:	4b56      	ldr	r3, [pc, #344]	@ (80015fc <Pot_Check+0x22c>)
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_phase_measurement;
 80014a6:	4b56      	ldr	r3, [pc, #344]	@ (8001600 <Pot_Check+0x230>)
 80014a8:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &phase_pot_adc_measurement_num;
 80014aa:	4b56      	ldr	r3, [pc, #344]	@ (8001604 <Pot_Check+0x234>)
 80014ac:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3308      	adds	r3, #8
 80014b2:	61bb      	str	r3, [r7, #24]
		tolerance = PHASE_TOLERANCE;
 80014b4:	2317      	movs	r3, #23
 80014b6:	18fb      	adds	r3, r7, r3
 80014b8:	2246      	movs	r2, #70	@ 0x46
 80014ba:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &phase_fsm;
 80014bc:	4b52      	ldr	r3, [pc, #328]	@ (8001608 <Pot_Check+0x238>)
 80014be:	613b      	str	r3, [r7, #16]
	}

	if(*measurement_num_ptr == 0){
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10b      	bne.n	80014e2 <Pot_Check+0x112>

		*first_measurement_ptr = *((uint16_t*)measurement_ptr);
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	881a      	ldrh	r2, [r3, #0]
 80014ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d0:	801a      	strh	r2, [r3, #0]

			(*measurement_num_ptr)++;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	3301      	adds	r3, #1
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	e066      	b.n	80015b0 <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 1){
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d10b      	bne.n	8001504 <Pot_Check+0x134>

		*second_measurement_ptr = *((uint16_t*)measurement_ptr);
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	881a      	ldrh	r2, [r3, #0]
 80014f0:	6a3b      	ldr	r3, [r7, #32]
 80014f2:	801a      	strh	r2, [r3, #0]

		(*measurement_num_ptr)++;
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	3301      	adds	r3, #1
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	701a      	strb	r2, [r3, #0]
 8001502:	e055      	b.n	80015b0 <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 2){
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d150      	bne.n	80015b0 <Pot_Check+0x1e0>

		*measurement_num_ptr = 0;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]

		uint16_t diff = 0;
 8001514:	200a      	movs	r0, #10
 8001516:	183b      	adds	r3, r7, r0
 8001518:	2200      	movs	r2, #0
 800151a:	801a      	strh	r2, [r3, #0]

		if(*first_measurement_ptr > *second_measurement_ptr){
 800151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151e:	881a      	ldrh	r2, [r3, #0]
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d907      	bls.n	8001538 <Pot_Check+0x168>

			diff = *first_measurement_ptr - *second_measurement_ptr;
 8001528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152a:	8819      	ldrh	r1, [r3, #0]
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	881a      	ldrh	r2, [r3, #0]
 8001530:	183b      	adds	r3, r7, r0
 8001532:	1a8a      	subs	r2, r1, r2
 8001534:	801a      	strh	r2, [r3, #0]
 8001536:	e00d      	b.n	8001554 <Pot_Check+0x184>

		}
		else if(*second_measurement_ptr > *first_measurement_ptr){
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	881a      	ldrh	r2, [r3, #0]
 800153c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d907      	bls.n	8001554 <Pot_Check+0x184>

			diff = *second_measurement_ptr - *first_measurement_ptr;
 8001544:	6a3b      	ldr	r3, [r7, #32]
 8001546:	8819      	ldrh	r1, [r3, #0]
 8001548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154a:	881a      	ldrh	r2, [r3, #0]
 800154c:	230a      	movs	r3, #10
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	1a8a      	subs	r2, r1, r2
 8001552:	801a      	strh	r2, [r3, #0]
		/*else{

			diff = 0
		}*/

		if(diff > tolerance){
 8001554:	2317      	movs	r3, #23
 8001556:	18fb      	adds	r3, r7, r3
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	b29b      	uxth	r3, r3
 800155c:	220a      	movs	r2, #10
 800155e:	18ba      	adds	r2, r7, r2
 8001560:	8812      	ldrh	r2, [r2, #0]
 8001562:	429a      	cmp	r2, r3
 8001564:	d924      	bls.n	80015b0 <Pot_Check+0x1e0>

			if(normal_fsm_ptr != NULL){
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d008      	beq.n	800157e <Pot_Check+0x1ae>

				normal_fsm_ptr->prev_state = normal_fsm_ptr->current_state;
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	705a      	strb	r2, [r3, #1]
				normal_fsm_ptr->current_state = MANUAL_MODE;
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	e018      	b.n	80015b0 <Pot_Check+0x1e0>

			}
			else if(speed_fsm_ptr != NULL){
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d015      	beq.n	80015b0 <Pot_Check+0x1e0>

				speed_fsm_ptr->prev_state = speed_fsm_ptr->current_state;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	7812      	ldrb	r2, [r2, #0]
 800158a:	705a      	strb	r2, [r3, #1]
				speed_fsm_ptr->current_state.shared_state = MANUAL_MODE;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2201      	movs	r2, #1
 8001590:	701a      	strb	r2, [r3, #0]
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8001592:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <Pot_Check+0x23c>)
 8001594:	2120      	movs	r1, #32
 8001596:	0018      	movs	r0, r3
 8001598:	f004 fb2e 	bl	8005bf8 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800159c:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <Pot_Check+0x23c>)
 800159e:	2140      	movs	r1, #64	@ 0x40
 80015a0:	0018      	movs	r0, r3
 80015a2:	f004 fb29 	bl	8005bf8 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, First_Sync_Complete);
 80015a6:	4b19      	ldr	r3, [pc, #100]	@ (800160c <Pot_Check+0x23c>)
 80015a8:	2108      	movs	r1, #8
 80015aa:	0018      	movs	r0, r3
 80015ac:	f004 fb24 	bl	8005bf8 <Clear_Status_Bit>
			}
		}
	}

	return 1;
 80015b0:	2301      	movs	r3, #1
}
 80015b2:	0018      	movs	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b00a      	add	sp, #40	@ 0x28
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	46c0      	nop			@ (mov r8, r8)
 80015bc:	20000564 	.word	0x20000564
 80015c0:	20000566 	.word	0x20000566
 80015c4:	2000055d 	.word	0x2000055d
 80015c8:	20000430 	.word	0x20000430
 80015cc:	20000568 	.word	0x20000568
 80015d0:	2000056a 	.word	0x2000056a
 80015d4:	2000055e 	.word	0x2000055e
 80015d8:	20000428 	.word	0x20000428
 80015dc:	2000056c 	.word	0x2000056c
 80015e0:	2000056e 	.word	0x2000056e
 80015e4:	2000055f 	.word	0x2000055f
 80015e8:	2000042c 	.word	0x2000042c
 80015ec:	20000570 	.word	0x20000570
 80015f0:	20000572 	.word	0x20000572
 80015f4:	20000560 	.word	0x20000560
 80015f8:	20000434 	.word	0x20000434
 80015fc:	20000574 	.word	0x20000574
 8001600:	20000576 	.word	0x20000576
 8001604:	20000561 	.word	0x20000561
 8001608:	20000438 	.word	0x20000438
 800160c:	20000cb4 	.word	0x20000cb4

08001610 <Check_Tap_Tempo_Switch_State>:

uint8_t Check_Tap_Tempo_Switch_State(volatile struct Tap_Tempo_Switch_States *tap_tempo_switch_states_ptr){
 8001610:	b5b0      	push	{r4, r5, r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

	static uint8_t extend_rising_edge = 0;
	static uint8_t tap_tempo_switch_state_counter = TAP_TEMPO_SWITCH_CONFIDENCE_COUNT;

	uint8_t switch_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8001618:	250f      	movs	r5, #15
 800161a:	197c      	adds	r4, r7, r5
 800161c:	2380      	movs	r3, #128	@ 0x80
 800161e:	00da      	lsls	r2, r3, #3
 8001620:	23a0      	movs	r3, #160	@ 0xa0
 8001622:	05db      	lsls	r3, r3, #23
 8001624:	0011      	movs	r1, r2
 8001626:	0018      	movs	r0, r3
 8001628:	f006 fd0c 	bl	8008044 <HAL_GPIO_ReadPin>
 800162c:	0003      	movs	r3, r0
 800162e:	7023      	strb	r3, [r4, #0]

	if(switch_state == 0){
 8001630:	197b      	adds	r3, r7, r5
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10a      	bne.n	800164e <Check_Tap_Tempo_Switch_State+0x3e>

		if(tap_tempo_switch_state_counter != 0){
 8001638:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <Check_Tap_Tempo_Switch_State+0x98>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d01e      	beq.n	800167e <Check_Tap_Tempo_Switch_State+0x6e>

			tap_tempo_switch_state_counter--;
 8001640:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <Check_Tap_Tempo_Switch_State+0x98>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	3b01      	subs	r3, #1
 8001646:	b2da      	uxtb	r2, r3
 8001648:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <Check_Tap_Tempo_Switch_State+0x98>)
 800164a:	701a      	strb	r2, [r3, #0]
 800164c:	e017      	b.n	800167e <Check_Tap_Tempo_Switch_State+0x6e>
		}
	}
	else{

		if(tap_tempo_switch_state_counter != TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 800164e:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <Check_Tap_Tempo_Switch_State+0x98>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b0e      	cmp	r3, #14
 8001654:	d013      	beq.n	800167e <Check_Tap_Tempo_Switch_State+0x6e>

			if(extend_rising_edge == COUNT_TO_DELAY_RISING_TAP_TEMPO_EDGE){
 8001656:	4b15      	ldr	r3, [pc, #84]	@ (80016ac <Check_Tap_Tempo_Switch_State+0x9c>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b04      	cmp	r3, #4
 800165c:	d109      	bne.n	8001672 <Check_Tap_Tempo_Switch_State+0x62>

				tap_tempo_switch_state_counter++;
 800165e:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <Check_Tap_Tempo_Switch_State+0x98>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	3301      	adds	r3, #1
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b10      	ldr	r3, [pc, #64]	@ (80016a8 <Check_Tap_Tempo_Switch_State+0x98>)
 8001668:	701a      	strb	r2, [r3, #0]
				extend_rising_edge = 0;
 800166a:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <Check_Tap_Tempo_Switch_State+0x9c>)
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
 8001670:	e005      	b.n	800167e <Check_Tap_Tempo_Switch_State+0x6e>
			}
			else{
				extend_rising_edge++;
 8001672:	4b0e      	ldr	r3, [pc, #56]	@ (80016ac <Check_Tap_Tempo_Switch_State+0x9c>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	3301      	adds	r3, #1
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <Check_Tap_Tempo_Switch_State+0x9c>)
 800167c:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(tap_tempo_switch_state_counter == 0){
 800167e:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <Check_Tap_Tempo_Switch_State+0x98>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d103      	bne.n	800168e <Check_Tap_Tempo_Switch_State+0x7e>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
 800168c:	e006      	b.n	800169c <Check_Tap_Tempo_Switch_State+0x8c>
	}
	else if(tap_tempo_switch_state_counter == TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <Check_Tap_Tempo_Switch_State+0x98>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b0e      	cmp	r3, #14
 8001694:	d102      	bne.n	800169c <Check_Tap_Tempo_Switch_State+0x8c>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = NOT_DEPRESSED;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 800169c:	2301      	movs	r3, #1
}
 800169e:	0018      	movs	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b004      	add	sp, #16
 80016a4:	bdb0      	pop	{r4, r5, r7, pc}
 80016a6:	46c0      	nop			@ (mov r8, r8)
 80016a8:	2000001d 	.word	0x2000001d
 80016ac:	20000578 	.word	0x20000578

080016b0 <SystemClock_Config>:

LPTIM_HandleTypeDef hlptim1;

//FUNCTIONS
void SystemClock_Config(void)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b093      	sub	sp, #76	@ 0x4c
 80016b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b6:	2410      	movs	r4, #16
 80016b8:	193b      	adds	r3, r7, r4
 80016ba:	0018      	movs	r0, r3
 80016bc:	2338      	movs	r3, #56	@ 0x38
 80016be:	001a      	movs	r2, r3
 80016c0:	2100      	movs	r1, #0
 80016c2:	f00b fe51 	bl	800d368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c6:	003b      	movs	r3, r7
 80016c8:	0018      	movs	r0, r3
 80016ca:	2310      	movs	r3, #16
 80016cc:	001a      	movs	r2, r3
 80016ce:	2100      	movs	r1, #0
 80016d0:	f00b fe4a 	bl	800d368 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016d4:	2380      	movs	r3, #128	@ 0x80
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	0018      	movs	r0, r3
 80016da:	f007 f925 	bl	8008928 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016de:	193b      	adds	r3, r7, r4
 80016e0:	2202      	movs	r2, #2
 80016e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e4:	193b      	adds	r3, r7, r4
 80016e6:	2280      	movs	r2, #128	@ 0x80
 80016e8:	0052      	lsls	r2, r2, #1
 80016ea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80016ec:	0021      	movs	r1, r4
 80016ee:	187b      	adds	r3, r7, r1
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	2240      	movs	r2, #64	@ 0x40
 80016f8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fa:	187b      	adds	r3, r7, r1
 80016fc:	2202      	movs	r2, #2
 80016fe:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001700:	187b      	adds	r3, r7, r1
 8001702:	2202      	movs	r2, #2
 8001704:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001706:	187b      	adds	r3, r7, r1
 8001708:	2200      	movs	r2, #0
 800170a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800170c:	187b      	adds	r3, r7, r1
 800170e:	2208      	movs	r2, #8
 8001710:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001712:	187b      	adds	r3, r7, r1
 8001714:	2280      	movs	r2, #128	@ 0x80
 8001716:	0292      	lsls	r2, r2, #10
 8001718:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800171a:	187b      	adds	r3, r7, r1
 800171c:	22c0      	movs	r2, #192	@ 0xc0
 800171e:	04d2      	lsls	r2, r2, #19
 8001720:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001722:	187b      	adds	r3, r7, r1
 8001724:	2280      	movs	r2, #128	@ 0x80
 8001726:	0592      	lsls	r2, r2, #22
 8001728:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172a:	187b      	adds	r3, r7, r1
 800172c:	0018      	movs	r0, r3
 800172e:	f007 f947 	bl	80089c0 <HAL_RCC_OscConfig>
 8001732:	1e03      	subs	r3, r0, #0
 8001734:	d001      	beq.n	800173a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001736:	f000 fdb1 	bl	800229c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800173a:	003b      	movs	r3, r7
 800173c:	2207      	movs	r2, #7
 800173e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001740:	003b      	movs	r3, r7
 8001742:	2202      	movs	r2, #2
 8001744:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001746:	003b      	movs	r3, r7
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800174c:	003b      	movs	r3, r7
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001752:	003b      	movs	r3, r7
 8001754:	2102      	movs	r1, #2
 8001756:	0018      	movs	r0, r3
 8001758:	f007 fc4c 	bl	8008ff4 <HAL_RCC_ClockConfig>
 800175c:	1e03      	subs	r3, r0, #0
 800175e:	d001      	beq.n	8001764 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001760:	f000 fd9c 	bl	800229c <Error_Handler>
  }
}
 8001764:	46c0      	nop			@ (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	b013      	add	sp, #76	@ 0x4c
 800176a:	bd90      	pop	{r4, r7, pc}

0800176c <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	0018      	movs	r0, r3
 8001776:	230c      	movs	r3, #12
 8001778:	001a      	movs	r2, r3
 800177a:	2100      	movs	r1, #0
 800177c:	f00b fdf4 	bl	800d368 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001780:	4b54      	ldr	r3, [pc, #336]	@ (80018d4 <MX_ADC1_Init+0x168>)
 8001782:	4a55      	ldr	r2, [pc, #340]	@ (80018d8 <MX_ADC1_Init+0x16c>)
 8001784:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001786:	4b53      	ldr	r3, [pc, #332]	@ (80018d4 <MX_ADC1_Init+0x168>)
 8001788:	2280      	movs	r2, #128	@ 0x80
 800178a:	05d2      	lsls	r2, r2, #23
 800178c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800178e:	4b51      	ldr	r3, [pc, #324]	@ (80018d4 <MX_ADC1_Init+0x168>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001794:	4b4f      	ldr	r3, [pc, #316]	@ (80018d4 <MX_ADC1_Init+0x168>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800179a:	4b4e      	ldr	r3, [pc, #312]	@ (80018d4 <MX_ADC1_Init+0x168>)
 800179c:	2280      	movs	r2, #128	@ 0x80
 800179e:	0392      	lsls	r2, r2, #14
 80017a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80017a2:	4b4c      	ldr	r3, [pc, #304]	@ (80018d4 <MX_ADC1_Init+0x168>)
 80017a4:	2208      	movs	r2, #8
 80017a6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017a8:	4b4a      	ldr	r3, [pc, #296]	@ (80018d4 <MX_ADC1_Init+0x168>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80017ae:	4b49      	ldr	r3, [pc, #292]	@ (80018d4 <MX_ADC1_Init+0x168>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017b4:	4b47      	ldr	r3, [pc, #284]	@ (80018d4 <MX_ADC1_Init+0x168>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 80017ba:	4b46      	ldr	r3, [pc, #280]	@ (80018d4 <MX_ADC1_Init+0x168>)
 80017bc:	2205      	movs	r2, #5
 80017be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017c0:	4b44      	ldr	r3, [pc, #272]	@ (80018d4 <MX_ADC1_Init+0x168>)
 80017c2:	2220      	movs	r2, #32
 80017c4:	2100      	movs	r1, #0
 80017c6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017c8:	4b42      	ldr	r3, [pc, #264]	@ (80018d4 <MX_ADC1_Init+0x168>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017ce:	4b41      	ldr	r3, [pc, #260]	@ (80018d4 <MX_ADC1_Init+0x168>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017d4:	4b3f      	ldr	r3, [pc, #252]	@ (80018d4 <MX_ADC1_Init+0x168>)
 80017d6:	222c      	movs	r2, #44	@ 0x2c
 80017d8:	2100      	movs	r1, #0
 80017da:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017dc:	4b3d      	ldr	r3, [pc, #244]	@ (80018d4 <MX_ADC1_Init+0x168>)
 80017de:	2200      	movs	r2, #0
 80017e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80017e2:	4b3c      	ldr	r3, [pc, #240]	@ (80018d4 <MX_ADC1_Init+0x168>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80017e8:	4b3a      	ldr	r3, [pc, #232]	@ (80018d4 <MX_ADC1_Init+0x168>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80017ee:	4b39      	ldr	r3, [pc, #228]	@ (80018d4 <MX_ADC1_Init+0x168>)
 80017f0:	223c      	movs	r2, #60	@ 0x3c
 80017f2:	2100      	movs	r1, #0
 80017f4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80017f6:	4b37      	ldr	r3, [pc, #220]	@ (80018d4 <MX_ADC1_Init+0x168>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017fc:	4b35      	ldr	r3, [pc, #212]	@ (80018d4 <MX_ADC1_Init+0x168>)
 80017fe:	0018      	movs	r0, r3
 8001800:	f004 fc28 	bl	8006054 <HAL_ADC_Init>
 8001804:	1e03      	subs	r3, r0, #0
 8001806:	d001      	beq.n	800180c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001808:	f000 fd48 	bl	800229c <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	2201      	movs	r2, #1
 8001810:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	2200      	movs	r2, #0
 8001816:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800181e:	1d3a      	adds	r2, r7, #4
 8001820:	4b2c      	ldr	r3, [pc, #176]	@ (80018d4 <MX_ADC1_Init+0x168>)
 8001822:	0011      	movs	r1, r2
 8001824:	0018      	movs	r0, r3
 8001826:	f004 ff99 	bl	800675c <HAL_ADC_ConfigChannel>
 800182a:	1e03      	subs	r3, r0, #0
 800182c:	d001      	beq.n	8001832 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800182e:	f000 fd35 	bl	800229c <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	4a29      	ldr	r2, [pc, #164]	@ (80018dc <MX_ADC1_Init+0x170>)
 8001836:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	2204      	movs	r2, #4
 800183c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001844:	1d3a      	adds	r2, r7, #4
 8001846:	4b23      	ldr	r3, [pc, #140]	@ (80018d4 <MX_ADC1_Init+0x168>)
 8001848:	0011      	movs	r1, r2
 800184a:	0018      	movs	r0, r3
 800184c:	f004 ff86 	bl	800675c <HAL_ADC_ConfigChannel>
 8001850:	1e03      	subs	r3, r0, #0
 8001852:	d001      	beq.n	8001858 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001854:	f000 fd22 	bl	800229c <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	4a21      	ldr	r2, [pc, #132]	@ (80018e0 <MX_ADC1_Init+0x174>)
 800185c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	2208      	movs	r2, #8
 8001862:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800186a:	1d3a      	adds	r2, r7, #4
 800186c:	4b19      	ldr	r3, [pc, #100]	@ (80018d4 <MX_ADC1_Init+0x168>)
 800186e:	0011      	movs	r1, r2
 8001870:	0018      	movs	r0, r3
 8001872:	f004 ff73 	bl	800675c <HAL_ADC_ConfigChannel>
 8001876:	1e03      	subs	r3, r0, #0
 8001878:	d001      	beq.n	800187e <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 800187a:	f000 fd0f 	bl	800229c <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	4a18      	ldr	r2, [pc, #96]	@ (80018e4 <MX_ADC1_Init+0x178>)
 8001882:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	220c      	movs	r2, #12
 8001888:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001890:	1d3a      	adds	r2, r7, #4
 8001892:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <MX_ADC1_Init+0x168>)
 8001894:	0011      	movs	r1, r2
 8001896:	0018      	movs	r0, r3
 8001898:	f004 ff60 	bl	800675c <HAL_ADC_ConfigChannel>
 800189c:	1e03      	subs	r3, r0, #0
 800189e:	d001      	beq.n	80018a4 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80018a0:	f000 fcfc 	bl	800229c <Error_Handler>
  }

  /** Configure Channel 6
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	4a10      	ldr	r2, [pc, #64]	@ (80018e8 <MX_ADC1_Init+0x17c>)
 80018a8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2210      	movs	r2, #16
 80018ae:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b6:	1d3a      	adds	r2, r7, #4
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <MX_ADC1_Init+0x168>)
 80018ba:	0011      	movs	r1, r2
 80018bc:	0018      	movs	r0, r3
 80018be:	f004 ff4d 	bl	800675c <HAL_ADC_ConfigChannel>
 80018c2:	1e03      	subs	r3, r0, #0
 80018c4:	d001      	beq.n	80018ca <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 80018c6:	f000 fce9 	bl	800229c <Error_Handler>
  }
}
 80018ca:	46c0      	nop			@ (mov r8, r8)
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b004      	add	sp, #16
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	46c0      	nop			@ (mov r8, r8)
 80018d4:	2000057c 	.word	0x2000057c
 80018d8:	40012400 	.word	0x40012400
 80018dc:	04000002 	.word	0x04000002
 80018e0:	10000010 	.word	0x10000010
 80018e4:	14000020 	.word	0x14000020
 80018e8:	18000040 	.word	0x18000040

080018ec <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b094      	sub	sp, #80	@ 0x50
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f2:	2334      	movs	r3, #52	@ 0x34
 80018f4:	18fb      	adds	r3, r7, r3
 80018f6:	0018      	movs	r0, r3
 80018f8:	231c      	movs	r3, #28
 80018fa:	001a      	movs	r2, r3
 80018fc:	2100      	movs	r1, #0
 80018fe:	f00b fd33 	bl	800d368 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001902:	003b      	movs	r3, r7
 8001904:	0018      	movs	r0, r3
 8001906:	2334      	movs	r3, #52	@ 0x34
 8001908:	001a      	movs	r2, r3
 800190a:	2100      	movs	r1, #0
 800190c:	f00b fd2c 	bl	800d368 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001910:	4b3a      	ldr	r3, [pc, #232]	@ (80019fc <MX_TIM16_Init+0x110>)
 8001912:	4a3b      	ldr	r2, [pc, #236]	@ (8001a00 <MX_TIM16_Init+0x114>)
 8001914:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001916:	4b39      	ldr	r3, [pc, #228]	@ (80019fc <MX_TIM16_Init+0x110>)
 8001918:	2200      	movs	r2, #0
 800191a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191c:	4b37      	ldr	r3, [pc, #220]	@ (80019fc <MX_TIM16_Init+0x110>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 8001922:	4b36      	ldr	r3, [pc, #216]	@ (80019fc <MX_TIM16_Init+0x110>)
 8001924:	22ff      	movs	r2, #255	@ 0xff
 8001926:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001928:	4b34      	ldr	r3, [pc, #208]	@ (80019fc <MX_TIM16_Init+0x110>)
 800192a:	2280      	movs	r2, #128	@ 0x80
 800192c:	0092      	lsls	r2, r2, #2
 800192e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001930:	4b32      	ldr	r3, [pc, #200]	@ (80019fc <MX_TIM16_Init+0x110>)
 8001932:	2200      	movs	r2, #0
 8001934:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001936:	4b31      	ldr	r3, [pc, #196]	@ (80019fc <MX_TIM16_Init+0x110>)
 8001938:	2280      	movs	r2, #128	@ 0x80
 800193a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800193c:	4b2f      	ldr	r3, [pc, #188]	@ (80019fc <MX_TIM16_Init+0x110>)
 800193e:	0018      	movs	r0, r3
 8001940:	f007 fe7c 	bl	800963c <HAL_TIM_Base_Init>
 8001944:	1e03      	subs	r3, r0, #0
 8001946:	d001      	beq.n	800194c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8001948:	f000 fca8 	bl	800229c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 800194c:	4b2b      	ldr	r3, [pc, #172]	@ (80019fc <MX_TIM16_Init+0x110>)
 800194e:	0018      	movs	r0, r3
 8001950:	f007 ff7a 	bl	8009848 <HAL_TIM_OC_Init>
 8001954:	1e03      	subs	r3, r0, #0
 8001956:	d001      	beq.n	800195c <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8001958:	f000 fca0 	bl	800229c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800195c:	2134      	movs	r1, #52	@ 0x34
 800195e:	187b      	adds	r3, r7, r1
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 8001964:	187b      	adds	r3, r7, r1
 8001966:	22ff      	movs	r2, #255	@ 0xff
 8001968:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800196a:	187b      	adds	r3, r7, r1
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001970:	187b      	adds	r3, r7, r1
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001976:	187b      	adds	r3, r7, r1
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800197c:	187b      	adds	r3, r7, r1
 800197e:	2200      	movs	r2, #0
 8001980:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001982:	187b      	adds	r3, r7, r1
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001988:	1879      	adds	r1, r7, r1
 800198a:	4b1c      	ldr	r3, [pc, #112]	@ (80019fc <MX_TIM16_Init+0x110>)
 800198c:	2200      	movs	r2, #0
 800198e:	0018      	movs	r0, r3
 8001990:	f008 fdce 	bl	800a530 <HAL_TIM_OC_ConfigChannel>
 8001994:	1e03      	subs	r3, r0, #0
 8001996:	d001      	beq.n	800199c <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8001998:	f000 fc80 	bl	800229c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 800199c:	4b17      	ldr	r3, [pc, #92]	@ (80019fc <MX_TIM16_Init+0x110>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	699a      	ldr	r2, [r3, #24]
 80019a2:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <MX_TIM16_Init+0x110>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2108      	movs	r1, #8
 80019a8:	438a      	bics	r2, r1
 80019aa:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019ac:	003b      	movs	r3, r7
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019b2:	003b      	movs	r3, r7
 80019b4:	2200      	movs	r2, #0
 80019b6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019b8:	003b      	movs	r3, r7
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019be:	003b      	movs	r3, r7
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019c4:	003b      	movs	r3, r7
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019ca:	003b      	movs	r3, r7
 80019cc:	2280      	movs	r2, #128	@ 0x80
 80019ce:	0192      	lsls	r2, r2, #6
 80019d0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019d2:	003b      	movs	r3, r7
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019d8:	003b      	movs	r3, r7
 80019da:	2200      	movs	r2, #0
 80019dc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80019de:	003a      	movs	r2, r7
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <MX_TIM16_Init+0x110>)
 80019e2:	0011      	movs	r1, r2
 80019e4:	0018      	movs	r0, r3
 80019e6:	f009 ffc9 	bl	800b97c <HAL_TIMEx_ConfigBreakDeadTime>
 80019ea:	1e03      	subs	r3, r0, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 80019ee:	f000 fc55 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 80019f2:	46c0      	nop			@ (mov r8, r8)
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b014      	add	sp, #80	@ 0x50
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			@ (mov r8, r8)
 80019fc:	200007d8 	.word	0x200007d8
 8001a00:	40014400 	.word	0x40014400

08001a04 <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08c      	sub	sp, #48	@ 0x30
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a0a:	2320      	movs	r3, #32
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	0018      	movs	r0, r3
 8001a10:	2310      	movs	r3, #16
 8001a12:	001a      	movs	r2, r3
 8001a14:	2100      	movs	r1, #0
 8001a16:	f00b fca7 	bl	800d368 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1a:	2314      	movs	r3, #20
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	0018      	movs	r0, r3
 8001a20:	230c      	movs	r3, #12
 8001a22:	001a      	movs	r2, r3
 8001a24:	2100      	movs	r1, #0
 8001a26:	f00b fc9f 	bl	800d368 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	2310      	movs	r3, #16
 8001a30:	001a      	movs	r2, r3
 8001a32:	2100      	movs	r1, #0
 8001a34:	f00b fc98 	bl	800d368 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a38:	4b2e      	ldr	r3, [pc, #184]	@ (8001af4 <MX_TIM2_Init+0xf0>)
 8001a3a:	2280      	movs	r2, #128	@ 0x80
 8001a3c:	05d2      	lsls	r2, r2, #23
 8001a3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 8001a40:	4b2c      	ldr	r3, [pc, #176]	@ (8001af4 <MX_TIM2_Init+0xf0>)
 8001a42:	223f      	movs	r2, #63	@ 0x3f
 8001a44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a46:	4b2b      	ldr	r3, [pc, #172]	@ (8001af4 <MX_TIM2_Init+0xf0>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2097152 - 1;
 8001a4c:	4b29      	ldr	r3, [pc, #164]	@ (8001af4 <MX_TIM2_Init+0xf0>)
 8001a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8001af8 <MX_TIM2_Init+0xf4>)
 8001a50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001a52:	4b28      	ldr	r3, [pc, #160]	@ (8001af4 <MX_TIM2_Init+0xf0>)
 8001a54:	2280      	movs	r2, #128	@ 0x80
 8001a56:	0092      	lsls	r2, r2, #2
 8001a58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a5a:	4b26      	ldr	r3, [pc, #152]	@ (8001af4 <MX_TIM2_Init+0xf0>)
 8001a5c:	2280      	movs	r2, #128	@ 0x80
 8001a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a60:	4b24      	ldr	r3, [pc, #144]	@ (8001af4 <MX_TIM2_Init+0xf0>)
 8001a62:	0018      	movs	r0, r3
 8001a64:	f007 fdea 	bl	800963c <HAL_TIM_Base_Init>
 8001a68:	1e03      	subs	r3, r0, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001a6c:	f000 fc16 	bl	800229c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a70:	2120      	movs	r1, #32
 8001a72:	187b      	adds	r3, r7, r1
 8001a74:	2280      	movs	r2, #128	@ 0x80
 8001a76:	0152      	lsls	r2, r2, #5
 8001a78:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a7a:	187a      	adds	r2, r7, r1
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <MX_TIM2_Init+0xf0>)
 8001a7e:	0011      	movs	r1, r2
 8001a80:	0018      	movs	r0, r3
 8001a82:	f008 ff59 	bl	800a938 <HAL_TIM_ConfigClockSource>
 8001a86:	1e03      	subs	r3, r0, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001a8a:	f000 fc07 	bl	800229c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001a8e:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <MX_TIM2_Init+0xf0>)
 8001a90:	0018      	movs	r0, r3
 8001a92:	f008 fa85 	bl	8009fa0 <HAL_TIM_IC_Init>
 8001a96:	1e03      	subs	r3, r0, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001a9a:	f000 fbff 	bl	800229c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9e:	2114      	movs	r1, #20
 8001aa0:	187b      	adds	r3, r7, r1
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa6:	187b      	adds	r3, r7, r1
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aac:	187a      	adds	r2, r7, r1
 8001aae:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <MX_TIM2_Init+0xf0>)
 8001ab0:	0011      	movs	r1, r2
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f009 fefa 	bl	800b8ac <HAL_TIMEx_MasterConfigSynchronization>
 8001ab8:	1e03      	subs	r3, r0, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001abc:	f000 fbee 	bl	800229c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2201      	movs	r2, #1
 8001aca:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ad8:	1d39      	adds	r1, r7, #4
 8001ada:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <MX_TIM2_Init+0xf0>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f008 fd86 	bl	800a5f0 <HAL_TIM_IC_ConfigChannel>
 8001ae4:	1e03      	subs	r3, r0, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001ae8:	f000 fbd8 	bl	800229c <Error_Handler>

  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aec:	46c0      	nop			@ (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b00c      	add	sp, #48	@ 0x30
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000894 	.word	0x20000894
 8001af8:	001fffff 	.word	0x001fffff

08001afc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08e      	sub	sp, #56	@ 0x38
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b02:	2328      	movs	r3, #40	@ 0x28
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	0018      	movs	r0, r3
 8001b08:	2310      	movs	r3, #16
 8001b0a:	001a      	movs	r2, r3
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	f00b fc2b 	bl	800d368 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b12:	231c      	movs	r3, #28
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	0018      	movs	r0, r3
 8001b18:	230c      	movs	r3, #12
 8001b1a:	001a      	movs	r2, r3
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	f00b fc23 	bl	800d368 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b22:	003b      	movs	r3, r7
 8001b24:	0018      	movs	r0, r3
 8001b26:	231c      	movs	r3, #28
 8001b28:	001a      	movs	r2, r3
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	f00b fc1c 	bl	800d368 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b30:	4b32      	ldr	r3, [pc, #200]	@ (8001bfc <MX_TIM3_Init+0x100>)
 8001b32:	4a33      	ldr	r2, [pc, #204]	@ (8001c00 <MX_TIM3_Init+0x104>)
 8001b34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 8001b36:	4b31      	ldr	r3, [pc, #196]	@ (8001bfc <MX_TIM3_Init+0x100>)
 8001b38:	4a32      	ldr	r2, [pc, #200]	@ (8001c04 <MX_TIM3_Init+0x108>)
 8001b3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001bfc <MX_TIM3_Init+0x100>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8001b42:	4b2e      	ldr	r3, [pc, #184]	@ (8001bfc <MX_TIM3_Init+0x100>)
 8001b44:	4a30      	ldr	r2, [pc, #192]	@ (8001c08 <MX_TIM3_Init+0x10c>)
 8001b46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001b48:	4b2c      	ldr	r3, [pc, #176]	@ (8001bfc <MX_TIM3_Init+0x100>)
 8001b4a:	2280      	movs	r2, #128	@ 0x80
 8001b4c:	0092      	lsls	r2, r2, #2
 8001b4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b50:	4b2a      	ldr	r3, [pc, #168]	@ (8001bfc <MX_TIM3_Init+0x100>)
 8001b52:	2280      	movs	r2, #128	@ 0x80
 8001b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b56:	4b29      	ldr	r3, [pc, #164]	@ (8001bfc <MX_TIM3_Init+0x100>)
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f007 fd6f 	bl	800963c <HAL_TIM_Base_Init>
 8001b5e:	1e03      	subs	r3, r0, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001b62:	f000 fb9b 	bl	800229c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b66:	2128      	movs	r1, #40	@ 0x28
 8001b68:	187b      	adds	r3, r7, r1
 8001b6a:	2280      	movs	r2, #128	@ 0x80
 8001b6c:	0152      	lsls	r2, r2, #5
 8001b6e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b70:	187a      	adds	r2, r7, r1
 8001b72:	4b22      	ldr	r3, [pc, #136]	@ (8001bfc <MX_TIM3_Init+0x100>)
 8001b74:	0011      	movs	r1, r2
 8001b76:	0018      	movs	r0, r3
 8001b78:	f008 fede 	bl	800a938 <HAL_TIM_ConfigClockSource>
 8001b7c:	1e03      	subs	r3, r0, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001b80:	f000 fb8c 	bl	800229c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001b84:	4b1d      	ldr	r3, [pc, #116]	@ (8001bfc <MX_TIM3_Init+0x100>)
 8001b86:	0018      	movs	r0, r3
 8001b88:	f007 fe5e 	bl	8009848 <HAL_TIM_OC_Init>
 8001b8c:	1e03      	subs	r3, r0, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001b90:	f000 fb84 	bl	800229c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b94:	211c      	movs	r1, #28
 8001b96:	187b      	adds	r3, r7, r1
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9c:	187b      	adds	r3, r7, r1
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ba2:	187a      	adds	r2, r7, r1
 8001ba4:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <MX_TIM3_Init+0x100>)
 8001ba6:	0011      	movs	r1, r2
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f009 fe7f 	bl	800b8ac <HAL_TIMEx_MasterConfigSynchronization>
 8001bae:	1e03      	subs	r3, r0, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001bb2:	f000 fb73 	bl	800229c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001bb6:	003b      	movs	r3, r7
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001bbc:	003b      	movs	r3, r7
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bc2:	003b      	movs	r3, r7
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc8:	003b      	movs	r3, r7
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bce:	0039      	movs	r1, r7
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <MX_TIM3_Init+0x100>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f008 fcab 	bl	800a530 <HAL_TIM_OC_ConfigChannel>
 8001bda:	1e03      	subs	r3, r0, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001bde:	f000 fb5d 	bl	800229c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001be2:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <MX_TIM3_Init+0x100>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699a      	ldr	r2, [r3, #24]
 8001be8:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <MX_TIM3_Init+0x100>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2108      	movs	r1, #8
 8001bee:	438a      	bics	r2, r1
 8001bf0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bf2:	46c0      	nop			@ (mov r8, r8)
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	b00e      	add	sp, #56	@ 0x38
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	46c0      	nop			@ (mov r8, r8)
 8001bfc:	20000950 	.word	0x20000950
 8001c00:	40000400 	.word	0x40000400
 8001c04:	00007fff 	.word	0x00007fff
 8001c08:	00000fff 	.word	0x00000fff

08001c0c <MX_TIM1_Init>:

void MX_TIM1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b09c      	sub	sp, #112	@ 0x70
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c12:	2360      	movs	r3, #96	@ 0x60
 8001c14:	18fb      	adds	r3, r7, r3
 8001c16:	0018      	movs	r0, r3
 8001c18:	2310      	movs	r3, #16
 8001c1a:	001a      	movs	r2, r3
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	f00b fba3 	bl	800d368 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c22:	2354      	movs	r3, #84	@ 0x54
 8001c24:	18fb      	adds	r3, r7, r3
 8001c26:	0018      	movs	r0, r3
 8001c28:	230c      	movs	r3, #12
 8001c2a:	001a      	movs	r2, r3
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	f00b fb9b 	bl	800d368 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c32:	2338      	movs	r3, #56	@ 0x38
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	0018      	movs	r0, r3
 8001c38:	231c      	movs	r3, #28
 8001c3a:	001a      	movs	r2, r3
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	f00b fb93 	bl	800d368 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	0018      	movs	r0, r3
 8001c46:	2334      	movs	r3, #52	@ 0x34
 8001c48:	001a      	movs	r2, r3
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	f00b fb8c 	bl	800d368 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c50:	4b5f      	ldr	r3, [pc, #380]	@ (8001dd0 <MX_TIM1_Init+0x1c4>)
 8001c52:	4a60      	ldr	r2, [pc, #384]	@ (8001dd4 <MX_TIM1_Init+0x1c8>)
 8001c54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c56:	4b5e      	ldr	r3, [pc, #376]	@ (8001dd0 <MX_TIM1_Init+0x1c4>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5c:	4b5c      	ldr	r3, [pc, #368]	@ (8001dd0 <MX_TIM1_Init+0x1c4>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024 - 1;
 8001c62:	4b5b      	ldr	r3, [pc, #364]	@ (8001dd0 <MX_TIM1_Init+0x1c4>)
 8001c64:	4a5c      	ldr	r2, [pc, #368]	@ (8001dd8 <MX_TIM1_Init+0x1cc>)
 8001c66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001c68:	4b59      	ldr	r3, [pc, #356]	@ (8001dd0 <MX_TIM1_Init+0x1c4>)
 8001c6a:	2280      	movs	r2, #128	@ 0x80
 8001c6c:	0052      	lsls	r2, r2, #1
 8001c6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c70:	4b57      	ldr	r3, [pc, #348]	@ (8001dd0 <MX_TIM1_Init+0x1c4>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c76:	4b56      	ldr	r3, [pc, #344]	@ (8001dd0 <MX_TIM1_Init+0x1c4>)
 8001c78:	2280      	movs	r2, #128	@ 0x80
 8001c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c7c:	4b54      	ldr	r3, [pc, #336]	@ (8001dd0 <MX_TIM1_Init+0x1c4>)
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f007 fcdc 	bl	800963c <HAL_TIM_Base_Init>
 8001c84:	1e03      	subs	r3, r0, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001c88:	f000 fb08 	bl	800229c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c8c:	2160      	movs	r1, #96	@ 0x60
 8001c8e:	187b      	adds	r3, r7, r1
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	0152      	lsls	r2, r2, #5
 8001c94:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c96:	187a      	adds	r2, r7, r1
 8001c98:	4b4d      	ldr	r3, [pc, #308]	@ (8001dd0 <MX_TIM1_Init+0x1c4>)
 8001c9a:	0011      	movs	r1, r2
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f008 fe4b 	bl	800a938 <HAL_TIM_ConfigClockSource>
 8001ca2:	1e03      	subs	r3, r0, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001ca6:	f000 faf9 	bl	800229c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001caa:	4b49      	ldr	r3, [pc, #292]	@ (8001dd0 <MX_TIM1_Init+0x1c4>)
 8001cac:	0018      	movs	r0, r3
 8001cae:	f008 f82b 	bl	8009d08 <HAL_TIM_PWM_Init>
 8001cb2:	1e03      	subs	r3, r0, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8001cb6:	f000 faf1 	bl	800229c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cba:	2154      	movs	r1, #84	@ 0x54
 8001cbc:	187b      	adds	r3, r7, r1
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cc2:	187b      	adds	r3, r7, r1
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc8:	187b      	adds	r3, r7, r1
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cce:	187a      	adds	r2, r7, r1
 8001cd0:	4b3f      	ldr	r3, [pc, #252]	@ (8001dd0 <MX_TIM1_Init+0x1c4>)
 8001cd2:	0011      	movs	r1, r2
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f009 fde9 	bl	800b8ac <HAL_TIMEx_MasterConfigSynchronization>
 8001cda:	1e03      	subs	r3, r0, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001cde:	f000 fadd 	bl	800229c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce2:	2138      	movs	r1, #56	@ 0x38
 8001ce4:	187b      	adds	r3, r7, r1
 8001ce6:	2260      	movs	r2, #96	@ 0x60
 8001ce8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	2200      	movs	r2, #0
 8001cee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf0:	187b      	adds	r3, r7, r1
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cf6:	187b      	adds	r3, r7, r1
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cfc:	187b      	adds	r3, r7, r1
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d02:	187b      	adds	r3, r7, r1
 8001d04:	2200      	movs	r2, #0
 8001d06:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d08:	187b      	adds	r3, r7, r1
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d0e:	1879      	adds	r1, r7, r1
 8001d10:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd0 <MX_TIM1_Init+0x1c4>)
 8001d12:	2204      	movs	r2, #4
 8001d14:	0018      	movs	r0, r3
 8001d16:	f008 fd0f 	bl	800a738 <HAL_TIM_PWM_ConfigChannel>
 8001d1a:	1e03      	subs	r3, r0, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001d1e:	f000 fabd 	bl	800229c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8001d22:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd0 <MX_TIM1_Init+0x1c4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	699a      	ldr	r2, [r3, #24]
 8001d28:	4b29      	ldr	r3, [pc, #164]	@ (8001dd0 <MX_TIM1_Init+0x1c4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	492b      	ldr	r1, [pc, #172]	@ (8001ddc <MX_TIM1_Init+0x1d0>)
 8001d2e:	400a      	ands	r2, r1
 8001d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d32:	2338      	movs	r3, #56	@ 0x38
 8001d34:	18f9      	adds	r1, r7, r3
 8001d36:	4b26      	ldr	r3, [pc, #152]	@ (8001dd0 <MX_TIM1_Init+0x1c4>)
 8001d38:	220c      	movs	r2, #12
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f008 fcfc 	bl	800a738 <HAL_TIM_PWM_ConfigChannel>
 8001d40:	1e03      	subs	r3, r0, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001d44:	f000 faaa 	bl	800229c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8001d48:	4b21      	ldr	r3, [pc, #132]	@ (8001dd0 <MX_TIM1_Init+0x1c4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	69da      	ldr	r2, [r3, #28]
 8001d4e:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <MX_TIM1_Init+0x1c4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4922      	ldr	r1, [pc, #136]	@ (8001ddc <MX_TIM1_Init+0x1d0>)
 8001d54:	400a      	ands	r2, r1
 8001d56:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	2280      	movs	r2, #128	@ 0x80
 8001d7a:	0192      	lsls	r2, r2, #6
 8001d7c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	2200      	movs	r2, #0
 8001d82:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	2200      	movs	r2, #0
 8001d88:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	2280      	movs	r2, #128	@ 0x80
 8001d94:	0492      	lsls	r2, r2, #18
 8001d96:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	2200      	movs	r2, #0
 8001da2:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	2200      	movs	r2, #0
 8001da8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001daa:	1d3a      	adds	r2, r7, #4
 8001dac:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <MX_TIM1_Init+0x1c4>)
 8001dae:	0011      	movs	r1, r2
 8001db0:	0018      	movs	r0, r3
 8001db2:	f009 fde3 	bl	800b97c <HAL_TIMEx_ConfigBreakDeadTime>
 8001db6:	1e03      	subs	r3, r0, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM1_Init+0x1b2>
  {
    Error_Handler();
 8001dba:	f000 fa6f 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001dbe:	4b04      	ldr	r3, [pc, #16]	@ (8001dd0 <MX_TIM1_Init+0x1c4>)
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f003 f89f 	bl	8004f04 <HAL_TIM_MspPostInit>

}
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b01c      	add	sp, #112	@ 0x70
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	20000a0c 	.word	0x20000a0c
 8001dd4:	40012c00 	.word	0x40012c00
 8001dd8:	000003ff 	.word	0x000003ff
 8001ddc:	fffff7ff 	.word	0xfffff7ff

08001de0 <MX_TIM17_Init>:

void MX_TIM17_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b094      	sub	sp, #80	@ 0x50
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001de6:	2334      	movs	r3, #52	@ 0x34
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	0018      	movs	r0, r3
 8001dec:	231c      	movs	r3, #28
 8001dee:	001a      	movs	r2, r3
 8001df0:	2100      	movs	r1, #0
 8001df2:	f00b fab9 	bl	800d368 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001df6:	003b      	movs	r3, r7
 8001df8:	0018      	movs	r0, r3
 8001dfa:	2334      	movs	r3, #52	@ 0x34
 8001dfc:	001a      	movs	r2, r3
 8001dfe:	2100      	movs	r1, #0
 8001e00:	f00b fab2 	bl	800d368 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001e04:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef0 <MX_TIM17_Init+0x110>)
 8001e06:	4a3b      	ldr	r2, [pc, #236]	@ (8001ef4 <MX_TIM17_Init+0x114>)
 8001e08:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 8001e0a:	4b39      	ldr	r3, [pc, #228]	@ (8001ef0 <MX_TIM17_Init+0x110>)
 8001e0c:	4a3a      	ldr	r2, [pc, #232]	@ (8001ef8 <MX_TIM17_Init+0x118>)
 8001e0e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e10:	4b37      	ldr	r3, [pc, #220]	@ (8001ef0 <MX_TIM17_Init+0x110>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 0;
 8001e16:	4b36      	ldr	r3, [pc, #216]	@ (8001ef0 <MX_TIM17_Init+0x110>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001e1c:	4b34      	ldr	r3, [pc, #208]	@ (8001ef0 <MX_TIM17_Init+0x110>)
 8001e1e:	2280      	movs	r2, #128	@ 0x80
 8001e20:	0092      	lsls	r2, r2, #2
 8001e22:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001e24:	4b32      	ldr	r3, [pc, #200]	@ (8001ef0 <MX_TIM17_Init+0x110>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e2a:	4b31      	ldr	r3, [pc, #196]	@ (8001ef0 <MX_TIM17_Init+0x110>)
 8001e2c:	2280      	movs	r2, #128	@ 0x80
 8001e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001e30:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef0 <MX_TIM17_Init+0x110>)
 8001e32:	0018      	movs	r0, r3
 8001e34:	f007 fc02 	bl	800963c <HAL_TIM_Base_Init>
 8001e38:	1e03      	subs	r3, r0, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001e3c:	f000 fa2e 	bl	800229c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001e40:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef0 <MX_TIM17_Init+0x110>)
 8001e42:	0018      	movs	r0, r3
 8001e44:	f007 fd00 	bl	8009848 <HAL_TIM_OC_Init>
 8001e48:	1e03      	subs	r3, r0, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8001e4c:	f000 fa26 	bl	800229c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001e50:	2134      	movs	r1, #52	@ 0x34
 8001e52:	187b      	adds	r3, r7, r1
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001e58:	187b      	adds	r3, r7, r1
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e5e:	187b      	adds	r3, r7, r1
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e64:	187b      	adds	r3, r7, r1
 8001e66:	2200      	movs	r2, #0
 8001e68:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e6a:	187b      	adds	r3, r7, r1
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e70:	187b      	adds	r3, r7, r1
 8001e72:	2200      	movs	r2, #0
 8001e74:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e76:	187b      	adds	r3, r7, r1
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e7c:	1879      	adds	r1, r7, r1
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef0 <MX_TIM17_Init+0x110>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	0018      	movs	r0, r3
 8001e84:	f008 fb54 	bl	800a530 <HAL_TIM_OC_ConfigChannel>
 8001e88:	1e03      	subs	r3, r0, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 8001e8c:	f000 fa06 	bl	800229c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8001e90:	4b17      	ldr	r3, [pc, #92]	@ (8001ef0 <MX_TIM17_Init+0x110>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699a      	ldr	r2, [r3, #24]
 8001e96:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <MX_TIM17_Init+0x110>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2108      	movs	r1, #8
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ea0:	003b      	movs	r3, r7
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ea6:	003b      	movs	r3, r7
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001eac:	003b      	movs	r3, r7
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eb2:	003b      	movs	r3, r7
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eb8:	003b      	movs	r3, r7
 8001eba:	2200      	movs	r2, #0
 8001ebc:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ebe:	003b      	movs	r3, r7
 8001ec0:	2280      	movs	r2, #128	@ 0x80
 8001ec2:	0192      	lsls	r2, r2, #6
 8001ec4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ec6:	003b      	movs	r3, r7
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ecc:	003b      	movs	r3, r7
 8001ece:	2200      	movs	r2, #0
 8001ed0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001ed2:	003a      	movs	r2, r7
 8001ed4:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <MX_TIM17_Init+0x110>)
 8001ed6:	0011      	movs	r1, r2
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f009 fd4f 	bl	800b97c <HAL_TIMEx_ConfigBreakDeadTime>
 8001ede:	1e03      	subs	r3, r0, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 8001ee2:	f000 f9db 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001ee6:	46c0      	nop			@ (mov r8, r8)
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	b014      	add	sp, #80	@ 0x50
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	46c0      	nop			@ (mov r8, r8)
 8001ef0:	2000071c 	.word	0x2000071c
 8001ef4:	40014800 	.word	0x40014800
 8001ef8:	00007fff 	.word	0x00007fff

08001efc <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPTIM1_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001f00:	4b17      	ldr	r3, [pc, #92]	@ (8001f60 <MX_LPTIM1_Init+0x64>)
 8001f02:	4a18      	ldr	r2, [pc, #96]	@ (8001f64 <MX_LPTIM1_Init+0x68>)
 8001f04:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001f06:	4b16      	ldr	r3, [pc, #88]	@ (8001f60 <MX_LPTIM1_Init+0x64>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8001f0c:	4b14      	ldr	r3, [pc, #80]	@ (8001f60 <MX_LPTIM1_Init+0x64>)
 8001f0e:	22e0      	movs	r2, #224	@ 0xe0
 8001f10:	0112      	lsls	r2, r2, #4
 8001f12:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001f14:	4b12      	ldr	r3, [pc, #72]	@ (8001f60 <MX_LPTIM1_Init+0x64>)
 8001f16:	4a14      	ldr	r2, [pc, #80]	@ (8001f68 <MX_LPTIM1_Init+0x6c>)
 8001f18:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001f1a:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <MX_LPTIM1_Init+0x64>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8001f20:	4b0f      	ldr	r3, [pc, #60]	@ (8001f60 <MX_LPTIM1_Init+0x64>)
 8001f22:	2280      	movs	r2, #128	@ 0x80
 8001f24:	03d2      	lsls	r2, r2, #15
 8001f26:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001f28:	4b0d      	ldr	r3, [pc, #52]	@ (8001f60 <MX_LPTIM1_Init+0x64>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f60 <MX_LPTIM1_Init+0x64>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001f34:	4b0a      	ldr	r3, [pc, #40]	@ (8001f60 <MX_LPTIM1_Init+0x64>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001f3a:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <MX_LPTIM1_Init+0x64>)
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f006 f8e5 	bl	800810c <HAL_LPTIM_Init>
 8001f42:	1e03      	subs	r3, r0, #0
 8001f44:	d001      	beq.n	8001f4a <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8001f46:	f000 f9a9 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

  HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 2);
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	2102      	movs	r1, #2
 8001f4e:	2011      	movs	r0, #17
 8001f50:	f005 fa0e 	bl	8007370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001f54:	2011      	movs	r0, #17
 8001f56:	f005 fa20 	bl	800739a <HAL_NVIC_EnableIRQ>
}
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000c4c 	.word	0x20000c4c
 8001f64:	40007c00 	.word	0x40007c00
 8001f68:	0000ffff 	.word	0x0000ffff

08001f6c <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	0018      	movs	r0, r3
 8001f76:	231c      	movs	r3, #28
 8001f78:	001a      	movs	r2, r3
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	f00b f9f4 	bl	800d368 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001f80:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <MX_TIM14_Init+0x90>)
 8001f82:	4a1f      	ldr	r2, [pc, #124]	@ (8002000 <MX_TIM14_Init+0x94>)
 8001f84:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (512 * 64) - 1;
 8001f86:	4b1d      	ldr	r3, [pc, #116]	@ (8001ffc <MX_TIM14_Init+0x90>)
 8001f88:	4a1e      	ldr	r2, [pc, #120]	@ (8002004 <MX_TIM14_Init+0x98>)
 8001f8a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ffc <MX_TIM14_Init+0x90>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0;
 8001f92:	4b1a      	ldr	r3, [pc, #104]	@ (8001ffc <MX_TIM14_Init+0x90>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001f98:	4b18      	ldr	r3, [pc, #96]	@ (8001ffc <MX_TIM14_Init+0x90>)
 8001f9a:	2280      	movs	r2, #128	@ 0x80
 8001f9c:	0092      	lsls	r2, r2, #2
 8001f9e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa0:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <MX_TIM14_Init+0x90>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001fa6:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <MX_TIM14_Init+0x90>)
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f007 fb47 	bl	800963c <HAL_TIM_Base_Init>
 8001fae:	1e03      	subs	r3, r0, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 8001fb2:	f000 f973 	bl	800229c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8001fb6:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <MX_TIM14_Init+0x90>)
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f007 fc45 	bl	8009848 <HAL_TIM_OC_Init>
 8001fbe:	1e03      	subs	r3, r0, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 8001fc2:	f000 f96b 	bl	800229c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001fcc:	1d3b      	adds	r3, r7, #4
 8001fce:	2200      	movs	r2, #0
 8001fd0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fde:	1d39      	adds	r1, r7, #4
 8001fe0:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <MX_TIM14_Init+0x90>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f008 faa3 	bl	800a530 <HAL_TIM_OC_ConfigChannel>
 8001fea:	1e03      	subs	r3, r0, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8001fee:	f000 f955 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001ff2:	46c0      	nop			@ (mov r8, r8)
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b008      	add	sp, #32
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			@ (mov r8, r8)
 8001ffc:	20000660 	.word	0x20000660
 8002000:	40002000 	.word	0x40002000
 8002004:	00007fff 	.word	0x00007fff

08002008 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 800200c:	4b15      	ldr	r3, [pc, #84]	@ (8002064 <MX_USART2_UART_Init+0x5c>)
 800200e:	4a16      	ldr	r2, [pc, #88]	@ (8002068 <MX_USART2_UART_Init+0x60>)
 8002010:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 8002012:	4b14      	ldr	r3, [pc, #80]	@ (8002064 <MX_USART2_UART_Init+0x5c>)
 8002014:	4a15      	ldr	r2, [pc, #84]	@ (800206c <MX_USART2_UART_Init+0x64>)
 8002016:	605a      	str	r2, [r3, #4]
  //huart2.Init.BaudRate = 57600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002018:	4b12      	ldr	r3, [pc, #72]	@ (8002064 <MX_USART2_UART_Init+0x5c>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800201e:	4b11      	ldr	r3, [pc, #68]	@ (8002064 <MX_USART2_UART_Init+0x5c>)
 8002020:	2200      	movs	r2, #0
 8002022:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002024:	4b0f      	ldr	r3, [pc, #60]	@ (8002064 <MX_USART2_UART_Init+0x5c>)
 8002026:	2200      	movs	r2, #0
 8002028:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800202a:	4b0e      	ldr	r3, [pc, #56]	@ (8002064 <MX_USART2_UART_Init+0x5c>)
 800202c:	220c      	movs	r2, #12
 800202e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002030:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <MX_USART2_UART_Init+0x5c>)
 8002032:	2200      	movs	r2, #0
 8002034:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002036:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <MX_USART2_UART_Init+0x5c>)
 8002038:	2200      	movs	r2, #0
 800203a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800203c:	4b09      	ldr	r3, [pc, #36]	@ (8002064 <MX_USART2_UART_Init+0x5c>)
 800203e:	2200      	movs	r2, #0
 8002040:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002042:	4b08      	ldr	r3, [pc, #32]	@ (8002064 <MX_USART2_UART_Init+0x5c>)
 8002044:	2200      	movs	r2, #0
 8002046:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002048:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <MX_USART2_UART_Init+0x5c>)
 800204a:	2200      	movs	r2, #0
 800204c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800204e:	4b05      	ldr	r3, [pc, #20]	@ (8002064 <MX_USART2_UART_Init+0x5c>)
 8002050:	0018      	movs	r0, r3
 8002052:	f009 fd4f 	bl	800baf4 <HAL_UART_Init>
 8002056:	1e03      	subs	r3, r0, #0
 8002058:	d001      	beq.n	800205e <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800205a:	f000 f91f 	bl	800229c <Error_Handler>
  }
}
 800205e:	46c0      	nop			@ (mov r8, r8)
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000ac8 	.word	0x20000ac8
 8002068:	40004400 	.word	0x40004400
 800206c:	00007a12 	.word	0x00007a12

08002070 <MX_DMA_Init>:
    Error_Handler();
  }
}

void MX_DMA_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002076:	4b10      	ldr	r3, [pc, #64]	@ (80020b8 <MX_DMA_Init+0x48>)
 8002078:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800207a:	4b0f      	ldr	r3, [pc, #60]	@ (80020b8 <MX_DMA_Init+0x48>)
 800207c:	2101      	movs	r1, #1
 800207e:	430a      	orrs	r2, r1
 8002080:	639a      	str	r2, [r3, #56]	@ 0x38
 8002082:	4b0d      	ldr	r3, [pc, #52]	@ (80020b8 <MX_DMA_Init+0x48>)
 8002084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002086:	2201      	movs	r2, #1
 8002088:	4013      	ands	r3, r2
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */ // - ADC
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	2100      	movs	r1, #0
 8002092:	2009      	movs	r0, #9
 8002094:	f005 f96c 	bl	8007370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002098:	2009      	movs	r0, #9
 800209a:	f005 f97e 	bl	800739a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */ // - UART RX is ch2, TX is ch3
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 2);
 800209e:	2202      	movs	r2, #2
 80020a0:	2102      	movs	r1, #2
 80020a2:	200a      	movs	r0, #10
 80020a4:	f005 f964 	bl	8007370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80020a8:	200a      	movs	r0, #10
 80020aa:	f005 f976 	bl	800739a <HAL_NVIC_EnableIRQ>

}
 80020ae:	46c0      	nop			@ (mov r8, r8)
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b002      	add	sp, #8
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	46c0      	nop			@ (mov r8, r8)
 80020b8:	40021000 	.word	0x40021000

080020bc <MX_GPIO_Init>:


void MX_GPIO_Init(void)
{
 80020bc:	b590      	push	{r4, r7, lr}
 80020be:	b08b      	sub	sp, #44	@ 0x2c
 80020c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c2:	2414      	movs	r4, #20
 80020c4:	193b      	adds	r3, r7, r4
 80020c6:	0018      	movs	r0, r3
 80020c8:	2314      	movs	r3, #20
 80020ca:	001a      	movs	r2, r3
 80020cc:	2100      	movs	r1, #0
 80020ce:	f00b f94b 	bl	800d368 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d2:	4b6e      	ldr	r3, [pc, #440]	@ (800228c <MX_GPIO_Init+0x1d0>)
 80020d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020d6:	4b6d      	ldr	r3, [pc, #436]	@ (800228c <MX_GPIO_Init+0x1d0>)
 80020d8:	2104      	movs	r1, #4
 80020da:	430a      	orrs	r2, r1
 80020dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80020de:	4b6b      	ldr	r3, [pc, #428]	@ (800228c <MX_GPIO_Init+0x1d0>)
 80020e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020e2:	2204      	movs	r2, #4
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020ea:	4b68      	ldr	r3, [pc, #416]	@ (800228c <MX_GPIO_Init+0x1d0>)
 80020ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020ee:	4b67      	ldr	r3, [pc, #412]	@ (800228c <MX_GPIO_Init+0x1d0>)
 80020f0:	2120      	movs	r1, #32
 80020f2:	430a      	orrs	r2, r1
 80020f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80020f6:	4b65      	ldr	r3, [pc, #404]	@ (800228c <MX_GPIO_Init+0x1d0>)
 80020f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020fa:	2220      	movs	r2, #32
 80020fc:	4013      	ands	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002102:	4b62      	ldr	r3, [pc, #392]	@ (800228c <MX_GPIO_Init+0x1d0>)
 8002104:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002106:	4b61      	ldr	r3, [pc, #388]	@ (800228c <MX_GPIO_Init+0x1d0>)
 8002108:	2101      	movs	r1, #1
 800210a:	430a      	orrs	r2, r1
 800210c:	635a      	str	r2, [r3, #52]	@ 0x34
 800210e:	4b5f      	ldr	r3, [pc, #380]	@ (800228c <MX_GPIO_Init+0x1d0>)
 8002110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002112:	2201      	movs	r2, #1
 8002114:	4013      	ands	r3, r2
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800211a:	4b5c      	ldr	r3, [pc, #368]	@ (800228c <MX_GPIO_Init+0x1d0>)
 800211c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800211e:	4b5b      	ldr	r3, [pc, #364]	@ (800228c <MX_GPIO_Init+0x1d0>)
 8002120:	2102      	movs	r1, #2
 8002122:	430a      	orrs	r2, r1
 8002124:	635a      	str	r2, [r3, #52]	@ 0x34
 8002126:	4b59      	ldr	r3, [pc, #356]	@ (800228c <MX_GPIO_Init+0x1d0>)
 8002128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800212a:	2202      	movs	r2, #2
 800212c:	4013      	ands	r3, r2
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  /*HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, GPIO_PIN_RESET);*/

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002132:	4b57      	ldr	r3, [pc, #348]	@ (8002290 <MX_GPIO_Init+0x1d4>)
 8002134:	2200      	movs	r2, #0
 8002136:	2140      	movs	r1, #64	@ 0x40
 8002138:	0018      	movs	r0, r3
 800213a:	f005 ffa0 	bl	800807e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 800213e:	193b      	adds	r3, r7, r4
 8002140:	2204      	movs	r2, #4
 8002142:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002144:	193b      	adds	r3, r7, r4
 8002146:	2288      	movs	r2, #136	@ 0x88
 8002148:	0352      	lsls	r2, r2, #13
 800214a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	193b      	adds	r3, r7, r4
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8002152:	193b      	adds	r3, r7, r4
 8002154:	4a4f      	ldr	r2, [pc, #316]	@ (8002294 <MX_GPIO_Init+0x1d8>)
 8002156:	0019      	movs	r1, r3
 8002158:	0010      	movs	r0, r2
 800215a:	f005 fe0f 	bl	8007d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_OUT_Pin */
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 800215e:	0021      	movs	r1, r4
 8002160:	193b      	adds	r3, r7, r4
 8002162:	2280      	movs	r2, #128	@ 0x80
 8002164:	0092      	lsls	r2, r2, #2
 8002166:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002168:	000c      	movs	r4, r1
 800216a:	193b      	adds	r3, r7, r4
 800216c:	2201      	movs	r2, #1
 800216e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	193b      	adds	r3, r7, r4
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002176:	193b      	adds	r3, r7, r4
 8002178:	2200      	movs	r2, #0
 800217a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 800217c:	193a      	adds	r2, r7, r4
 800217e:	23a0      	movs	r3, #160	@ 0xa0
 8002180:	05db      	lsls	r3, r3, #23
 8002182:	0011      	movs	r1, r2
 8002184:	0018      	movs	r0, r3
 8002186:	f005 fdf9 	bl	8007d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800218a:	193b      	adds	r3, r7, r4
 800218c:	2240      	movs	r2, #64	@ 0x40
 800218e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002190:	193b      	adds	r3, r7, r4
 8002192:	2201      	movs	r2, #1
 8002194:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	193b      	adds	r3, r7, r4
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	193b      	adds	r3, r7, r4
 800219e:	2200      	movs	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80021a2:	193b      	adds	r3, r7, r4
 80021a4:	4a3a      	ldr	r2, [pc, #232]	@ (8002290 <MX_GPIO_Init+0x1d4>)
 80021a6:	0019      	movs	r1, r3
 80021a8:	0010      	movs	r0, r2
 80021aa:	f005 fde7 	bl	8007d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_IN_Pin */
  GPIO_InitStruct.Pin = SW_IN_Pin;
 80021ae:	193b      	adds	r3, r7, r4
 80021b0:	2280      	movs	r2, #128	@ 0x80
 80021b2:	00d2      	lsls	r2, r2, #3
 80021b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b6:	193b      	adds	r3, r7, r4
 80021b8:	2200      	movs	r2, #0
 80021ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021bc:	193b      	adds	r3, r7, r4
 80021be:	2201      	movs	r2, #1
 80021c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 80021c2:	193a      	adds	r2, r7, r4
 80021c4:	23a0      	movs	r3, #160	@ 0xa0
 80021c6:	05db      	lsls	r3, r3, #23
 80021c8:	0011      	movs	r1, r2
 80021ca:	0018      	movs	r0, r3
 80021cc:	f005 fdd6 	bl	8007d7c <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_Pin;
 80021d0:	193b      	adds	r3, r7, r4
 80021d2:	2240      	movs	r2, #64	@ 0x40
 80021d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d6:	193b      	adds	r3, r7, r4
 80021d8:	2201      	movs	r2, #1
 80021da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	193b      	adds	r3, r7, r4
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e2:	193b      	adds	r3, r7, r4
 80021e4:	2200      	movs	r2, #0
 80021e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 80021e8:	193b      	adds	r3, r7, r4
 80021ea:	4a2b      	ldr	r2, [pc, #172]	@ (8002298 <MX_GPIO_Init+0x1dc>)
 80021ec:	0019      	movs	r1, r3
 80021ee:	0010      	movs	r0, r2
 80021f0:	f005 fdc4 	bl	8007d7c <HAL_GPIO_Init>

  //Configure CLK IN Pin - i.e. dedicated clock inputs to use this pin rather than the Tap-tempo switch debouncing SW IN pin
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80021f4:	0021      	movs	r1, r4
 80021f6:	187b      	adds	r3, r7, r1
 80021f8:	2280      	movs	r2, #128	@ 0x80
 80021fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80021fc:	187b      	adds	r3, r7, r1
 80021fe:	22c4      	movs	r2, #196	@ 0xc4
 8002200:	0392      	lsls	r2, r2, #14
 8002202:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; //seems to improve stuff for CLK IN??
 8002204:	000c      	movs	r4, r1
 8002206:	193b      	adds	r3, r7, r4
 8002208:	2202      	movs	r2, #2
 800220a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	193b      	adds	r3, r7, r4
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8002212:	193b      	adds	r3, r7, r4
 8002214:	4a20      	ldr	r2, [pc, #128]	@ (8002298 <MX_GPIO_Init+0x1dc>)
 8002216:	0019      	movs	r1, r3
 8002218:	0010      	movs	r0, r2
 800221a:	f005 fdaf 	bl	8007d7c <HAL_GPIO_Init>

  //Configure hacked on pot high leg -> i.e. it is to be set high
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 800221e:	0021      	movs	r1, r4
 8002220:	187b      	adds	r3, r7, r1
 8002222:	2280      	movs	r2, #128	@ 0x80
 8002224:	0152      	lsls	r2, r2, #5
 8002226:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002228:	000c      	movs	r4, r1
 800222a:	193b      	adds	r3, r7, r4
 800222c:	2201      	movs	r2, #1
 800222e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	193b      	adds	r3, r7, r4
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	193b      	adds	r3, r7, r4
 8002238:	2200      	movs	r2, #0
 800223a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 800223c:	193a      	adds	r2, r7, r4
 800223e:	23a0      	movs	r3, #160	@ 0xa0
 8002240:	05db      	lsls	r3, r3, #23
 8002242:	0011      	movs	r1, r2
 8002244:	0018      	movs	r0, r3
 8002246:	f005 fd99 	bl	8007d7c <HAL_GPIO_Init>

  //Configure hacked on pot low leg -> i.e. it is to be set low
  GPIO_InitStruct.Pin = HACK_POT_LOW_Pin;
 800224a:	0021      	movs	r1, r4
 800224c:	187b      	adds	r3, r7, r1
 800224e:	2280      	movs	r2, #128	@ 0x80
 8002250:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002252:	187b      	adds	r3, r7, r1
 8002254:	2201      	movs	r2, #1
 8002256:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	187b      	adds	r3, r7, r1
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	187b      	adds	r3, r7, r1
 8002260:	2200      	movs	r2, #0
 8002262:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_LOW_GPIO_Port, &GPIO_InitStruct);
 8002264:	187a      	adds	r2, r7, r1
 8002266:	23a0      	movs	r3, #160	@ 0xa0
 8002268:	05db      	lsls	r3, r3, #23
 800226a:	0011      	movs	r1, r2
 800226c:	0018      	movs	r0, r3
 800226e:	f005 fd85 	bl	8007d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 2);
 8002272:	2202      	movs	r2, #2
 8002274:	2102      	movs	r1, #2
 8002276:	2007      	movs	r0, #7
 8002278:	f005 f87a 	bl	8007370 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800227c:	2007      	movs	r0, #7
 800227e:	f005 f88c 	bl	800739a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002282:	46c0      	nop			@ (mov r8, r8)
 8002284:	46bd      	mov	sp, r7
 8002286:	b00b      	add	sp, #44	@ 0x2c
 8002288:	bd90      	pop	{r4, r7, pc}
 800228a:	46c0      	nop			@ (mov r8, r8)
 800228c:	40021000 	.word	0x40021000
 8002290:	50000800 	.word	0x50000800
 8002294:	50001400 	.word	0x50001400
 8002298:	50000400 	.word	0x50000400

0800229c <Error_Handler>:

void Error_Handler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022a0:	b672      	cpsid	i
}
 80022a2:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022a4:	46c0      	nop			@ (mov r8, r8)
 80022a6:	e7fd      	b.n	80022a4 <Error_Handler+0x8>

080022a8 <System_Init>:
  {

  }
}

void System_Init(void){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80022ac:	f003 fce2 	bl	8005c74 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80022b0:	f7ff f9fe 	bl	80016b0 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80022b4:	f7ff ff02 	bl	80020bc <MX_GPIO_Init>
	MX_DMA_Init();
 80022b8:	f7ff feda 	bl	8002070 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80022bc:	f7ff fea4 	bl	8002008 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80022c0:	f7ff fa54 	bl	800176c <MX_ADC1_Init>
	MX_TIM16_Init(); //Frequency Gen.
 80022c4:	f7ff fb12 	bl	80018ec <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement is TIM2_ch1
 80022c8:	f7ff fb9c 	bl	8001a04 <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse is TIM3_ch1
 80022cc:	f7ff fc16 	bl	8001afc <MX_TIM3_Init>
	MX_TIM1_Init(); //PWM Gen. Main/Secondary Oscillator on ch2/ch4
 80022d0:	f7ff fc9c 	bl	8001c0c <MX_TIM1_Init>
	MX_TIM17_Init();
 80022d4:	f7ff fd84 	bl	8001de0 <MX_TIM17_Init>
	MX_TIM14_Init();
 80022d8:	f7ff fe48 	bl	8001f6c <MX_TIM14_Init>
	//MX_IWDG_Init(); fucks up stuff - to be config'd
	MX_LPTIM1_Init(); //Tap Tempo checking/debouncing timer
 80022dc:	f7ff fe0e 	bl	8001efc <MX_LPTIM1_Init>

	//Calibrate ADC - DO NOT MOVE TO BEFORE OTHER CONFIG ABOVE
	HAL_ADCEx_Calibration_Start(&hadc1);
 80022e0:	4b21      	ldr	r3, [pc, #132]	@ (8002368 <System_Init+0xc0>)
 80022e2:	0018      	movs	r0, r3
 80022e4:	f004 fe62 	bl	8006fac <HAL_ADCEx_Calibration_Start>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM16_callback);
 80022e8:	4a20      	ldr	r2, [pc, #128]	@ (800236c <System_Init+0xc4>)
 80022ea:	4b21      	ldr	r3, [pc, #132]	@ (8002370 <System_Init+0xc8>)
 80022ec:	210e      	movs	r1, #14
 80022ee:	0018      	movs	r0, r3
 80022f0:	f008 fc7c 	bl	800abec <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 80022f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002374 <System_Init+0xcc>)
 80022f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002368 <System_Init+0xc0>)
 80022f8:	2100      	movs	r1, #0
 80022fa:	0018      	movs	r0, r3
 80022fc:	f004 f882 	bl	8006404 <HAL_ADC_RegisterCallback>

	//Set custom callback function for I/P capture input falling edge event
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, &TIM2_ch1_IP_capture_callback);
 8002300:	4a1d      	ldr	r2, [pc, #116]	@ (8002378 <System_Init+0xd0>)
 8002302:	4b1e      	ldr	r3, [pc, #120]	@ (800237c <System_Init+0xd4>)
 8002304:	2112      	movs	r1, #18
 8002306:	0018      	movs	r0, r3
 8002308:	f008 fc70 	bl	800abec <HAL_TIM_RegisterCallback>

	//Set custom callback function for I/P capture timer overflow (Update event/overflow)
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM2_ch1_overflow_callback);
 800230c:	4a1c      	ldr	r2, [pc, #112]	@ (8002380 <System_Init+0xd8>)
 800230e:	4b1b      	ldr	r3, [pc, #108]	@ (800237c <System_Init+0xd4>)
 8002310:	210e      	movs	r1, #14
 8002312:	0018      	movs	r0, r3
 8002314:	f008 fc6a 	bl	800abec <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM3_ch1 (Measurement Re-Elapse) (CCR match)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM3_ch1_IP_capture_measurement_reelapse_callback);
 8002318:	4a1a      	ldr	r2, [pc, #104]	@ (8002384 <System_Init+0xdc>)
 800231a:	4b1b      	ldr	r3, [pc, #108]	@ (8002388 <System_Init+0xe0>)
 800231c:	2114      	movs	r1, #20
 800231e:	0018      	movs	r0, r3
 8002320:	f008 fc64 	bl	800abec <HAL_TIM_RegisterCallback>

	//Set custom callback function for DMA TX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID, &UART2_TX_transfer_complete_callback);
 8002324:	4a19      	ldr	r2, [pc, #100]	@ (800238c <System_Init+0xe4>)
 8002326:	4b1a      	ldr	r3, [pc, #104]	@ (8002390 <System_Init+0xe8>)
 8002328:	2101      	movs	r1, #1
 800232a:	0018      	movs	r0, r3
 800232c:	f009 fc4a 	bl	800bbc4 <HAL_UART_RegisterCallback>

	//Set custom callback function for DMA RX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, &UART2_RX_transfer_complete_callback);
 8002330:	4a18      	ldr	r2, [pc, #96]	@ (8002394 <System_Init+0xec>)
 8002332:	4b17      	ldr	r3, [pc, #92]	@ (8002390 <System_Init+0xe8>)
 8002334:	2103      	movs	r1, #3
 8002336:	0018      	movs	r0, r3
 8002338:	f009 fc44 	bl	800bbc4 <HAL_UART_RegisterCallback>

	//Set custom callback for LPTIM1 (Tap Tempo SW state check)
	HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, &LPTIM1_callback);
 800233c:	4a16      	ldr	r2, [pc, #88]	@ (8002398 <System_Init+0xf0>)
 800233e:	4b17      	ldr	r3, [pc, #92]	@ (800239c <System_Init+0xf4>)
 8002340:	2102      	movs	r1, #2
 8002342:	0018      	movs	r0, r3
 8002344:	f006 f908 	bl	8008558 <HAL_LPTIM_RegisterCallback>

	//Set custom callback function for TIM17
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback);
 8002348:	4a15      	ldr	r2, [pc, #84]	@ (80023a0 <System_Init+0xf8>)
 800234a:	4b16      	ldr	r3, [pc, #88]	@ (80023a4 <System_Init+0xfc>)
 800234c:	2114      	movs	r1, #20
 800234e:	0018      	movs	r0, r3
 8002350:	f008 fc4c 	bl	800abec <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM14
	HAL_TIM_RegisterCallback(&htim14, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM14_callback);
 8002354:	4a14      	ldr	r2, [pc, #80]	@ (80023a8 <System_Init+0x100>)
 8002356:	4b15      	ldr	r3, [pc, #84]	@ (80023ac <System_Init+0x104>)
 8002358:	2114      	movs	r1, #20
 800235a:	0018      	movs	r0, r3
 800235c:	f008 fc46 	bl	800abec <HAL_TIM_RegisterCallback>
}
 8002360:	46c0      	nop			@ (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			@ (mov r8, r8)
 8002368:	2000057c 	.word	0x2000057c
 800236c:	080023b1 	.word	0x080023b1
 8002370:	200007d8 	.word	0x200007d8
 8002374:	08002405 	.word	0x08002405
 8002378:	08002499 	.word	0x08002499
 800237c:	20000894 	.word	0x20000894
 8002380:	080025b5 	.word	0x080025b5
 8002384:	080026c1 	.word	0x080026c1
 8002388:	20000950 	.word	0x20000950
 800238c:	080027fd 	.word	0x080027fd
 8002390:	20000ac8 	.word	0x20000ac8
 8002394:	0800280d 	.word	0x0800280d
 8002398:	08003bed 	.word	0x08003bed
 800239c:	20000c4c 	.word	0x20000c4c
 80023a0:	08003f8d 	.word	0x08003f8d
 80023a4:	2000071c 	.word	0x2000071c
 80023a8:	08003f9d 	.word	0x08003f9d
 80023ac:	20000660 	.word	0x20000660

080023b0 <TIM16_callback>:
#include "custom_callbacks.h"

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Set_Oscillator_Values(&params);
 80023b8:	4b0d      	ldr	r3, [pc, #52]	@ (80023f0 <TIM16_callback+0x40>)
 80023ba:	0018      	movs	r0, r3
 80023bc:	f001 fffe 	bl	80043bc <Set_Oscillator_Values>
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 80023c0:	4b0b      	ldr	r3, [pc, #44]	@ (80023f0 <TIM16_callback+0x40>)
 80023c2:	2100      	movs	r1, #0
 80023c4:	0018      	movs	r0, r3
 80023c6:	f002 f825 	bl	8004414 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80023ca:	4a0a      	ldr	r2, [pc, #40]	@ (80023f4 <TIM16_callback+0x44>)
 80023cc:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <TIM16_callback+0x40>)
 80023ce:	0011      	movs	r1, r2
 80023d0:	0018      	movs	r0, r3
 80023d2:	f002 f915 	bl	8004600 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 80023d6:	4b08      	ldr	r3, [pc, #32]	@ (80023f8 <TIM16_callback+0x48>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	001a      	movs	r2, r3
 80023dc:	4907      	ldr	r1, [pc, #28]	@ (80023fc <TIM16_callback+0x4c>)
 80023de:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <TIM16_callback+0x50>)
 80023e0:	0018      	movs	r0, r3
 80023e2:	f004 f89b 	bl	800651c <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80023e6:	46c0      	nop			@ (mov r8, r8)
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b002      	add	sp, #8
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	46c0      	nop			@ (mov r8, r8)
 80023f0:	20000ccc 	.word	0x20000ccc
 80023f4:	20000020 	.word	0x20000020
 80023f8:	0800dc38 	.word	0x0800dc38
 80023fc:	20000cc0 	.word	0x20000cc0
 8002400:	2000057c 	.word	0x2000057c

08002404 <ADC_DMA_conversion_complete_callback>:

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 8002404:	b5b0      	push	{r4, r5, r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	0018      	movs	r0, r3
 8002410:	f004 f912 	bl	8006638 <HAL_ADC_Stop_DMA>
	Process_ADC_Conversion_Values(&params_manual, ADCResultsDMA);
 8002414:	4a1b      	ldr	r2, [pc, #108]	@ (8002484 <ADC_DMA_conversion_complete_callback+0x80>)
 8002416:	4b1c      	ldr	r3, [pc, #112]	@ (8002488 <ADC_DMA_conversion_complete_callback+0x84>)
 8002418:	0011      	movs	r1, r2
 800241a:	0018      	movs	r0, r3
 800241c:	f002 f986 	bl	800472c <Process_ADC_Conversion_Values>

	//copies into running params based on mode
	Update_Params_Based_On_Mode_Selected();
 8002420:	f7fe f880 	bl	8000524 <Update_Params_Based_On_Mode_Selected>

	enum Validate first_sync_complete = Get_Status_Bit(&statuses, First_Sync_Complete);
 8002424:	250f      	movs	r5, #15
 8002426:	197c      	adds	r4, r7, r5
 8002428:	4b18      	ldr	r3, [pc, #96]	@ (800248c <ADC_DMA_conversion_complete_callback+0x88>)
 800242a:	2108      	movs	r1, #8
 800242c:	0018      	movs	r0, r3
 800242e:	f003 fbbd 	bl	8005bac <Get_Status_Bit>
 8002432:	0003      	movs	r3, r0
 8002434:	7023      	strb	r3, [r4, #0]

	//overwrites raw speed values if a sync has completed
	if(first_sync_complete == YES){
 8002436:	197b      	adds	r3, r7, r5
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d10a      	bne.n	8002454 <ADC_DMA_conversion_complete_callback+0x50>

		params.raw_start_value = params_working.raw_start_value;
 800243e:	4b14      	ldr	r3, [pc, #80]	@ (8002490 <ADC_DMA_conversion_complete_callback+0x8c>)
 8002440:	8a5b      	ldrh	r3, [r3, #18]
 8002442:	b29a      	uxth	r2, r3
 8002444:	4b13      	ldr	r3, [pc, #76]	@ (8002494 <ADC_DMA_conversion_complete_callback+0x90>)
 8002446:	825a      	strh	r2, [r3, #18]
		params.raw_prescaler = params_working.raw_prescaler;
 8002448:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <ADC_DMA_conversion_complete_callback+0x8c>)
 800244a:	8b5b      	ldrh	r3, [r3, #26]
 800244c:	b29a      	uxth	r2, r3
 800244e:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <ADC_DMA_conversion_complete_callback+0x90>)
 8002450:	835a      	strh	r2, [r3, #26]
 8002452:	e003      	b.n	800245c <ADC_DMA_conversion_complete_callback+0x58>
	}
	else{

		Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(&params);
 8002454:	4b0f      	ldr	r3, [pc, #60]	@ (8002494 <ADC_DMA_conversion_complete_callback+0x90>)
 8002456:	0018      	movs	r0, r3
 8002458:	f001 ff7a 	bl	8004350 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	}

	Process_TIM16_Final_Start_Value_and_Final_Prescaler(&params);
 800245c:	4b0d      	ldr	r3, [pc, #52]	@ (8002494 <ADC_DMA_conversion_complete_callback+0x90>)
 800245e:	0018      	movs	r0, r3
 8002460:	f002 ff16 	bl	8005290 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//after initial conversion is complete, set the conversion complete flag - leave this after raw/final value processing rather than actually when ADC values are converted for startup routine reasons.
	if(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){
 8002464:	4b09      	ldr	r3, [pc, #36]	@ (800248c <ADC_DMA_conversion_complete_callback+0x88>)
 8002466:	2110      	movs	r1, #16
 8002468:	0018      	movs	r0, r3
 800246a:	f003 fb9f 	bl	8005bac <Get_Status_Bit>
 800246e:	1e03      	subs	r3, r0, #0
 8002470:	d104      	bne.n	800247c <ADC_DMA_conversion_complete_callback+0x78>
		Set_Status_Bit(&statuses, Initial_ADC_Conversion_Complete);
 8002472:	4b06      	ldr	r3, [pc, #24]	@ (800248c <ADC_DMA_conversion_complete_callback+0x88>)
 8002474:	2110      	movs	r1, #16
 8002476:	0018      	movs	r0, r3
 8002478:	f003 fbac 	bl	8005bd4 <Set_Status_Bit>
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 800247c:	46c0      	nop			@ (mov r8, r8)
 800247e:	46bd      	mov	sp, r7
 8002480:	b004      	add	sp, #16
 8002482:	bdb0      	pop	{r4, r5, r7, pc}
 8002484:	20000cc0 	.word	0x20000cc0
 8002488:	20000cf0 	.word	0x20000cf0
 800248c:	20000cb4 	.word	0x20000cb4
 8002490:	20000d38 	.word	0x20000d38
 8002494:	20000ccc 	.word	0x20000ccc

08002498 <TIM2_ch1_IP_capture_callback>:

void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2100      	movs	r1, #0
 80024a4:	0018      	movs	r0, r3
 80024a6:	f008 fb1d 	bl	800aae4 <HAL_TIM_ReadCapturedValue>
 80024aa:	0002      	movs	r2, r0
 80024ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x100>)
 80024ae:	601a      	str	r2, [r3, #0]

	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 80024b0:	4b39      	ldr	r3, [pc, #228]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x100>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	0a5b      	lsrs	r3, r3, #9
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	4b38      	ldr	r3, [pc, #224]	@ (800259c <TIM2_ch1_IP_capture_callback+0x104>)
 80024ba:	801a      	strh	r2, [r3, #0]

	//since the input capture measurement is z, and this is 512x the interrupt period, we just use the interrupt
	//period = z/512 as the 'elapse period value' if we also set the elapse timer prescaler to 512x less than the
	//input capture measurement timer

	if(IP_CAP_fsm.current_state == IDLE){
 80024bc:	4b38      	ldr	r3, [pc, #224]	@ (80025a0 <TIM2_ch1_IP_capture_callback+0x108>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d108      	bne.n	80024d8 <TIM2_ch1_IP_capture_callback+0x40>

		Begin_Input_Capture_Measurement();
 80024c6:	f001 fe57 	bl	8004178 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 80024ca:	4b35      	ldr	r3, [pc, #212]	@ (80025a0 <TIM2_ch1_IP_capture_callback+0x108>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = IDLE;
 80024d0:	4b33      	ldr	r3, [pc, #204]	@ (80025a0 <TIM2_ch1_IP_capture_callback+0x108>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	705a      	strb	r2, [r3, #1]
		//BEGIN PROCESSING
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80024d6:	e05b      	b.n	8002590 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){ //second edge
 80024d8:	4b31      	ldr	r3, [pc, #196]	@ (80025a0 <TIM2_ch1_IP_capture_callback+0x108>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d124      	bne.n	800252c <TIM2_ch1_IP_capture_callback+0x94>
		if(interrupt_period >= HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is >= than 129
 80024e2:	4b2e      	ldr	r3, [pc, #184]	@ (800259c <TIM2_ch1_IP_capture_callback+0x104>)
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2b80      	cmp	r3, #128	@ 0x80
 80024ea:	d951      	bls.n	8002590 <TIM2_ch1_IP_capture_callback+0xf8>
				Start_Measurement_Reelapse_Timer();
 80024ec:	f001 fe26 	bl	800413c <Start_Measurement_Reelapse_Timer>
			IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 80024f0:	4b2b      	ldr	r3, [pc, #172]	@ (80025a0 <TIM2_ch1_IP_capture_callback+0x108>)
 80024f2:	2202      	movs	r2, #2
 80024f4:	701a      	strb	r2, [r3, #0]
			IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 80024f6:	4b2a      	ldr	r3, [pc, #168]	@ (80025a0 <TIM2_ch1_IP_capture_callback+0x108>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	705a      	strb	r2, [r3, #1]
			Copy_Params_Structs(&params, &params_to_be_loaded);
 80024fc:	4a29      	ldr	r2, [pc, #164]	@ (80025a4 <TIM2_ch1_IP_capture_callback+0x10c>)
 80024fe:	4b2a      	ldr	r3, [pc, #168]	@ (80025a8 <TIM2_ch1_IP_capture_callback+0x110>)
 8002500:	0011      	movs	r1, r2
 8002502:	0018      	movs	r0, r3
 8002504:	f001 fe08 	bl	8004118 <Copy_Params_Structs>
			if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8002508:	4b28      	ldr	r3, [pc, #160]	@ (80025ac <TIM2_ch1_IP_capture_callback+0x114>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b05      	cmp	r3, #5
 8002510:	d004      	beq.n	800251c <TIM2_ch1_IP_capture_callback+0x84>
 8002512:	4b26      	ldr	r3, [pc, #152]	@ (80025ac <TIM2_ch1_IP_capture_callback+0x114>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b07      	cmp	r3, #7
 800251a:	d101      	bne.n	8002520 <TIM2_ch1_IP_capture_callback+0x88>
				Advance_Pending_States();
 800251c:	f002 fa8e 	bl	8004a3c <Advance_Pending_States>
			Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 8002520:	4b23      	ldr	r3, [pc, #140]	@ (80025b0 <TIM2_ch1_IP_capture_callback+0x118>)
 8002522:	2104      	movs	r1, #4
 8002524:	0018      	movs	r0, r3
 8002526:	f003 fb55 	bl	8005bd4 <Set_Status_Bit>
}
 800252a:	e031      	b.n	8002590 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){ //first edge
 800252c:	4b1c      	ldr	r3, [pc, #112]	@ (80025a0 <TIM2_ch1_IP_capture_callback+0x108>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d108      	bne.n	8002548 <TIM2_ch1_IP_capture_callback+0xb0>
		Begin_Input_Capture_Measurement();
 8002536:	f001 fe1f 	bl	8004178 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 800253a:	4b19      	ldr	r3, [pc, #100]	@ (80025a0 <TIM2_ch1_IP_capture_callback+0x108>)
 800253c:	2203      	movs	r2, #3
 800253e:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8002540:	4b17      	ldr	r3, [pc, #92]	@ (80025a0 <TIM2_ch1_IP_capture_callback+0x108>)
 8002542:	2202      	movs	r2, #2
 8002544:	705a      	strb	r2, [r3, #1]
}
 8002546:	e023      	b.n	8002590 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){ //second edge
 8002548:	4b15      	ldr	r3, [pc, #84]	@ (80025a0 <TIM2_ch1_IP_capture_callback+0x108>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b03      	cmp	r3, #3
 8002550:	d11e      	bne.n	8002590 <TIM2_ch1_IP_capture_callback+0xf8>
			Start_Measurement_Reelapse_Timer();
 8002552:	f001 fdf3 	bl	800413c <Start_Measurement_Reelapse_Timer>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8002556:	4b12      	ldr	r3, [pc, #72]	@ (80025a0 <TIM2_ch1_IP_capture_callback+0x108>)
 8002558:	2202      	movs	r2, #2
 800255a:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 800255c:	4b10      	ldr	r3, [pc, #64]	@ (80025a0 <TIM2_ch1_IP_capture_callback+0x108>)
 800255e:	2203      	movs	r2, #3
 8002560:	705a      	strb	r2, [r3, #1]
		Copy_Params_Structs(&params, &params_to_be_loaded);
 8002562:	4a10      	ldr	r2, [pc, #64]	@ (80025a4 <TIM2_ch1_IP_capture_callback+0x10c>)
 8002564:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <TIM2_ch1_IP_capture_callback+0x110>)
 8002566:	0011      	movs	r1, r2
 8002568:	0018      	movs	r0, r3
 800256a:	f001 fdd5 	bl	8004118 <Copy_Params_Structs>
		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 800256e:	4b0f      	ldr	r3, [pc, #60]	@ (80025ac <TIM2_ch1_IP_capture_callback+0x114>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b05      	cmp	r3, #5
 8002576:	d004      	beq.n	8002582 <TIM2_ch1_IP_capture_callback+0xea>
 8002578:	4b0c      	ldr	r3, [pc, #48]	@ (80025ac <TIM2_ch1_IP_capture_callback+0x114>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b07      	cmp	r3, #7
 8002580:	d101      	bne.n	8002586 <TIM2_ch1_IP_capture_callback+0xee>
			Advance_Pending_States();
 8002582:	f002 fa5b 	bl	8004a3c <Advance_Pending_States>
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 8002586:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <TIM2_ch1_IP_capture_callback+0x118>)
 8002588:	2104      	movs	r1, #4
 800258a:	0018      	movs	r0, r3
 800258c:	f003 fb22 	bl	8005bd4 <Set_Status_Bit>
}
 8002590:	46c0      	nop			@ (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	b002      	add	sp, #8
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000cac 	.word	0x20000cac
 800259c:	20000cb0 	.word	0x20000cb0
 80025a0:	2000043c 	.word	0x2000043c
 80025a4:	20000d14 	.word	0x20000d14
 80025a8:	20000ccc 	.word	0x20000ccc
 80025ac:	20000428 	.word	0x20000428
 80025b0:	20000cb4 	.word	0x20000cb4

080025b4 <TIM2_ch1_overflow_callback>:


void TIM2_ch1_overflow_callback(TIM_HandleTypeDef *htim){
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

	union Speed_FSM_States previous = speed_fsm.prev_state;
 80025bc:	240c      	movs	r4, #12
 80025be:	193b      	adds	r3, r7, r4
 80025c0:	4a3a      	ldr	r2, [pc, #232]	@ (80026ac <TIM2_ch1_overflow_callback+0xf8>)
 80025c2:	7852      	ldrb	r2, [r2, #1]
 80025c4:	701a      	strb	r2, [r3, #0]

	if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){
 80025c6:	4b3a      	ldr	r3, [pc, #232]	@ (80026b0 <TIM2_ch1_overflow_callback+0xfc>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d131      	bne.n	8002634 <TIM2_ch1_overflow_callback+0x80>

		IP_CAP_fsm.current_state = IDLE;
 80025d0:	4b37      	ldr	r3, [pc, #220]	@ (80026b0 <TIM2_ch1_overflow_callback+0xfc>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 80025d6:	4b36      	ldr	r3, [pc, #216]	@ (80026b0 <TIM2_ch1_overflow_callback+0xfc>)
 80025d8:	2201      	movs	r2, #1
 80025da:	705a      	strb	r2, [r3, #1]

		MIDI_CLK_fsm = NOT_COMPILING;
 80025dc:	4b35      	ldr	r3, [pc, #212]	@ (80026b4 <TIM2_ch1_overflow_callback+0x100>)
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 80025e2:	4b35      	ldr	r3, [pc, #212]	@ (80026b8 <TIM2_ch1_overflow_callback+0x104>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80025e8:	2380      	movs	r3, #128	@ 0x80
 80025ea:	0099      	lsls	r1, r3, #2
 80025ec:	23a0      	movs	r3, #160	@ 0xa0
 80025ee:	05db      	lsls	r3, r3, #23
 80025f0:	2201      	movs	r2, #1
 80025f2:	0018      	movs	r0, r3
 80025f4:	f005 fd43 	bl	800807e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80025f8:	4b30      	ldr	r3, [pc, #192]	@ (80026bc <TIM2_ch1_overflow_callback+0x108>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	2140      	movs	r1, #64	@ 0x40
 80025fe:	0018      	movs	r0, r3
 8002600:	f005 fd3d 	bl	800807e <HAL_GPIO_WritePin>

		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002604:	4b29      	ldr	r3, [pc, #164]	@ (80026ac <TIM2_ch1_overflow_callback+0xf8>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b04      	cmp	r3, #4
 800260c:	d049      	beq.n	80026a2 <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 800260e:	4b27      	ldr	r3, [pc, #156]	@ (80026ac <TIM2_ch1_overflow_callback+0xf8>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b06      	cmp	r3, #6
 8002616:	d044      	beq.n	80026a2 <TIM2_ch1_overflow_callback+0xee>
 8002618:	4b24      	ldr	r3, [pc, #144]	@ (80026ac <TIM2_ch1_overflow_callback+0xf8>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 800261e:	2b08      	cmp	r3, #8
 8002620:	d03f      	beq.n	80026a2 <TIM2_ch1_overflow_callback+0xee>

			speed_fsm.prev_state = speed_fsm.current_state;
 8002622:	4b22      	ldr	r3, [pc, #136]	@ (80026ac <TIM2_ch1_overflow_callback+0xf8>)
 8002624:	4a21      	ldr	r2, [pc, #132]	@ (80026ac <TIM2_ch1_overflow_callback+0xf8>)
 8002626:	7812      	ldrb	r2, [r2, #0]
 8002628:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 800262a:	4b20      	ldr	r3, [pc, #128]	@ (80026ac <TIM2_ch1_overflow_callback+0xf8>)
 800262c:	193a      	adds	r2, r7, r4
 800262e:	7812      	ldrb	r2, [r2, #0]
 8002630:	701a      	strb	r2, [r3, #0]

			speed_fsm.prev_state = speed_fsm.current_state;
			speed_fsm.current_state = previous;
		}
	}
}
 8002632:	e036      	b.n	80026a2 <TIM2_ch1_overflow_callback+0xee>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8002634:	4b1e      	ldr	r3, [pc, #120]	@ (80026b0 <TIM2_ch1_overflow_callback+0xfc>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b03      	cmp	r3, #3
 800263c:	d131      	bne.n	80026a2 <TIM2_ch1_overflow_callback+0xee>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 800263e:	4b1c      	ldr	r3, [pc, #112]	@ (80026b0 <TIM2_ch1_overflow_callback+0xfc>)
 8002640:	2202      	movs	r2, #2
 8002642:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002644:	4b1a      	ldr	r3, [pc, #104]	@ (80026b0 <TIM2_ch1_overflow_callback+0xfc>)
 8002646:	2203      	movs	r2, #3
 8002648:	705a      	strb	r2, [r3, #1]
		MIDI_CLK_fsm = NOT_COMPILING;
 800264a:	4b1a      	ldr	r3, [pc, #104]	@ (80026b4 <TIM2_ch1_overflow_callback+0x100>)
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 8002650:	4b19      	ldr	r3, [pc, #100]	@ (80026b8 <TIM2_ch1_overflow_callback+0x104>)
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002656:	2380      	movs	r3, #128	@ 0x80
 8002658:	0099      	lsls	r1, r3, #2
 800265a:	23a0      	movs	r3, #160	@ 0xa0
 800265c:	05db      	lsls	r3, r3, #23
 800265e:	2201      	movs	r2, #1
 8002660:	0018      	movs	r0, r3
 8002662:	f005 fd0c 	bl	800807e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002666:	4b15      	ldr	r3, [pc, #84]	@ (80026bc <TIM2_ch1_overflow_callback+0x108>)
 8002668:	2200      	movs	r2, #0
 800266a:	2140      	movs	r1, #64	@ 0x40
 800266c:	0018      	movs	r0, r3
 800266e:	f005 fd06 	bl	800807e <HAL_GPIO_WritePin>
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002672:	4b0e      	ldr	r3, [pc, #56]	@ (80026ac <TIM2_ch1_overflow_callback+0xf8>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b04      	cmp	r3, #4
 800267a:	d012      	beq.n	80026a2 <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 800267c:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <TIM2_ch1_overflow_callback+0xf8>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b06      	cmp	r3, #6
 8002684:	d00d      	beq.n	80026a2 <TIM2_ch1_overflow_callback+0xee>
 8002686:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <TIM2_ch1_overflow_callback+0xf8>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 800268c:	2b08      	cmp	r3, #8
 800268e:	d008      	beq.n	80026a2 <TIM2_ch1_overflow_callback+0xee>
			speed_fsm.prev_state = speed_fsm.current_state;
 8002690:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <TIM2_ch1_overflow_callback+0xf8>)
 8002692:	4a06      	ldr	r2, [pc, #24]	@ (80026ac <TIM2_ch1_overflow_callback+0xf8>)
 8002694:	7812      	ldrb	r2, [r2, #0]
 8002696:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002698:	4b04      	ldr	r3, [pc, #16]	@ (80026ac <TIM2_ch1_overflow_callback+0xf8>)
 800269a:	220c      	movs	r2, #12
 800269c:	18ba      	adds	r2, r7, r2
 800269e:	7812      	ldrb	r2, [r2, #0]
 80026a0:	701a      	strb	r2, [r3, #0]
}
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b005      	add	sp, #20
 80026a8:	bd90      	pop	{r4, r7, pc}
 80026aa:	46c0      	nop			@ (mov r8, r8)
 80026ac:	20000428 	.word	0x20000428
 80026b0:	2000043c 	.word	0x2000043c
 80026b4:	20000d5c 	.word	0x20000d5c
 80026b8:	20000cb2 	.word	0x20000cb2
 80026bc:	50000800 	.word	0x50000800

080026c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback>:

void TIM3_ch1_IP_capture_measurement_reelapse_callback(TIM_HandleTypeDef *htim){
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 80026c8:	4b41      	ldr	r3, [pc, #260]	@ (80027d0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b0b      	cmp	r3, #11
 80026d0:	d01c      	beq.n	800270c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 80026d2:	4b3f      	ldr	r3, [pc, #252]	@ (80027d0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b0c      	cmp	r3, #12
 80026da:	d017      	beq.n	800270c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 80026dc:	4b3c      	ldr	r3, [pc, #240]	@ (80027d0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b0d      	cmp	r3, #13
 80026e4:	d012      	beq.n	800270c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 80026e6:	4b3a      	ldr	r3, [pc, #232]	@ (80027d0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b10      	cmp	r3, #16
 80026ee:	d00d      	beq.n	800270c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 80026f0:	4b37      	ldr	r3, [pc, #220]	@ (80027d0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b11      	cmp	r3, #17
 80026f8:	d008      	beq.n	800270c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 80026fa:	4b35      	ldr	r3, [pc, #212]	@ (80027d0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002700:	2b12      	cmp	r3, #18
 8002702:	d003      	beq.n	800270c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>

		// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
		Set_Oscillator_Values(&params_to_be_loaded);
 8002704:	4b33      	ldr	r3, [pc, #204]	@ (80027d4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002706:	0018      	movs	r0, r3
 8002708:	f001 fe58 	bl	80043bc <Set_Oscillator_Values>
	}

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 800270c:	4b32      	ldr	r3, [pc, #200]	@ (80027d8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x118>)
 800270e:	2100      	movs	r1, #0
 8002710:	0018      	movs	r0, r3
 8002712:	f003 f9e4 	bl	8005ade <Stop_OC_TIM>

	if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){
 8002716:	4b31      	ldr	r3, [pc, #196]	@ (80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d106      	bne.n	800272e <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x6e>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = IDLE;
 8002720:	4b2e      	ldr	r3, [pc, #184]	@ (80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8002726:	4b2d      	ldr	r3, [pc, #180]	@ (80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002728:	2202      	movs	r2, #2
 800272a:	705a      	strb	r2, [r3, #1]
 800272c:	e00a      	b.n	8002744 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>
	}
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 800272e:	4b2b      	ldr	r3, [pc, #172]	@ (80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b03      	cmp	r3, #3
 8002736:	d105      	bne.n	8002744 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8002738:	4b28      	ldr	r3, [pc, #160]	@ (80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 800273e:	4b27      	ldr	r3, [pc, #156]	@ (80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002740:	2203      	movs	r2, #3
 8002742:	705a      	strb	r2, [r3, #1]
	}

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002744:	4b22      	ldr	r3, [pc, #136]	@ (80027d0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b0b      	cmp	r3, #11
 800274c:	d03c      	beq.n	80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 800274e:	4b20      	ldr	r3, [pc, #128]	@ (80027d0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b0c      	cmp	r3, #12
 8002756:	d037      	beq.n	80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8002758:	4b1d      	ldr	r3, [pc, #116]	@ (80027d0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b0d      	cmp	r3, #13
 8002760:	d032      	beq.n	80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 8002762:	4b1b      	ldr	r3, [pc, #108]	@ (80027d0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b10      	cmp	r3, #16
 800276a:	d02d      	beq.n	80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 800276c:	4b18      	ldr	r3, [pc, #96]	@ (80027d0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b11      	cmp	r3, #17
 8002774:	d028      	beq.n	80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8002776:	4b16      	ldr	r3, [pc, #88]	@ (80027d0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 800277c:	2b12      	cmp	r3, #18
 800277e:	d023      	beq.n	80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>

		Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002780:	4a17      	ldr	r2, [pc, #92]	@ (80027e0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x120>)
 8002782:	4b14      	ldr	r3, [pc, #80]	@ (80027d4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002784:	0011      	movs	r1, r2
 8002786:	0018      	movs	r0, r3
 8002788:	f001 fcc6 	bl	8004118 <Copy_Params_Structs>
		Copy_Params_Structs(&params_to_be_loaded, &params);
 800278c:	4a15      	ldr	r2, [pc, #84]	@ (80027e4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 800278e:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002790:	0011      	movs	r1, r2
 8002792:	0018      	movs	r0, r3
 8002794:	f001 fcc0 	bl	8004118 <Copy_Params_Structs>

		Set_Status_Bit(&statuses, First_Sync_Complete);
 8002798:	4b13      	ldr	r3, [pc, #76]	@ (80027e8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x128>)
 800279a:	2108      	movs	r1, #8
 800279c:	0018      	movs	r0, r3
 800279e:	f003 fa19 	bl	8005bd4 <Set_Status_Bit>

		Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 80027a2:	4b10      	ldr	r3, [pc, #64]	@ (80027e4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 80027a4:	2100      	movs	r1, #0
 80027a6:	0018      	movs	r0, r3
 80027a8:	f001 fe34 	bl	8004414 <Calculate_Next_Main_Oscillator_Values>
		Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80027ac:	4a0f      	ldr	r2, [pc, #60]	@ (80027ec <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x12c>)
 80027ae:	4b0d      	ldr	r3, [pc, #52]	@ (80027e4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 80027b0:	0011      	movs	r1, r2
 80027b2:	0018      	movs	r0, r3
 80027b4:	f001 ff24 	bl	8004600 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 80027b8:	4b0d      	ldr	r3, [pc, #52]	@ (80027f0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x130>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	001a      	movs	r2, r3
 80027be:	490d      	ldr	r1, [pc, #52]	@ (80027f4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x134>)
 80027c0:	4b0d      	ldr	r3, [pc, #52]	@ (80027f8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x138>)
 80027c2:	0018      	movs	r0, r3
 80027c4:	f003 feaa 	bl	800651c <HAL_ADC_Start_DMA>

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80027c8:	46c0      	nop			@ (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b002      	add	sp, #8
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000428 	.word	0x20000428
 80027d4:	20000d14 	.word	0x20000d14
 80027d8:	20000950 	.word	0x20000950
 80027dc:	2000043c 	.word	0x2000043c
 80027e0:	20000d38 	.word	0x20000d38
 80027e4:	20000ccc 	.word	0x20000ccc
 80027e8:	20000cb4 	.word	0x20000cb4
 80027ec:	20000020 	.word	0x20000020
 80027f0:	0800dc38 	.word	0x0800dc38
 80027f4:	20000cc0 	.word	0x20000cc0
 80027f8:	2000057c 	.word	0x2000057c

080027fc <UART2_TX_transfer_complete_callback>:

void UART2_TX_transfer_complete_callback(UART_HandleTypeDef *huart){
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]

	//UART_DMA_TX_is_complete = YES;
}
 8002804:	46c0      	nop			@ (mov r8, r8)
 8002806:	46bd      	mov	sp, r7
 8002808:	b002      	add	sp, #8
 800280a:	bd80      	pop	{r7, pc}

0800280c <UART2_RX_transfer_complete_callback>:

void UART2_RX_transfer_complete_callback(UART_HandleTypeDef *huart){
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

	if(Is_System_Real_Time_Status_Byte(rx_buffer) == YES){
 8002814:	4bbe      	ldr	r3, [pc, #760]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x304>)
 8002816:	0018      	movs	r0, r3
 8002818:	f7fe fcb0 	bl	800117c <Is_System_Real_Time_Status_Byte>
 800281c:	0003      	movs	r3, r0
 800281e:	2b01      	cmp	r3, #1
 8002820:	d001      	beq.n	8002826 <UART2_RX_transfer_complete_callback+0x1a>
 8002822:	f000 fc0c 	bl	800303e <UART2_RX_transfer_complete_callback+0x832>

		if(Get_Status_Bit(&statuses, Start_Required_Before_Sync_Mode) == YES){
 8002826:	4bbb      	ldr	r3, [pc, #748]	@ (8002b14 <UART2_RX_transfer_complete_callback+0x308>)
 8002828:	2180      	movs	r1, #128	@ 0x80
 800282a:	0018      	movs	r0, r3
 800282c:	f003 f9be 	bl	8005bac <Get_Status_Bit>
 8002830:	0003      	movs	r3, r0
 8002832:	2b01      	cmp	r3, #1
 8002834:	d001      	beq.n	800283a <UART2_RX_transfer_complete_callback+0x2e>
 8002836:	f001 f895 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

			if((MIDI_CLK_fsm == NOT_COMPILING) && (IP_CAP_fsm.current_state == IDLE)
 800283a:	4bb7      	ldr	r3, [pc, #732]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x30c>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d159      	bne.n	80028f8 <UART2_RX_transfer_complete_callback+0xec>
 8002844:	4bb5      	ldr	r3, [pc, #724]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x310>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d154      	bne.n	80028f8 <UART2_RX_transfer_complete_callback+0xec>
					&& ((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 800284e:	4bb4      	ldr	r3, [pc, #720]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x314>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b04      	cmp	r3, #4
 8002856:	d013      	beq.n	8002880 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == MANUAL_MODE)
 8002858:	4bb1      	ldr	r3, [pc, #708]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x314>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b01      	cmp	r3, #1
 8002860:	d00e      	beq.n	8002880 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE)
 8002862:	4baf      	ldr	r3, [pc, #700]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x314>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b06      	cmp	r3, #6
 800286a:	d009      	beq.n	8002880 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == PC_MODE)
 800286c:	4bac      	ldr	r3, [pc, #688]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x314>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b03      	cmp	r3, #3
 8002874:	d004      	beq.n	8002880 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == CC_MODE))){
 8002876:	4baa      	ldr	r3, [pc, #680]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x314>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d13b      	bne.n	80028f8 <UART2_RX_transfer_complete_callback+0xec>

				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002880:	4ba3      	ldr	r3, [pc, #652]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x304>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2bfa      	cmp	r3, #250	@ 0xfa
 8002888:	d10b      	bne.n	80028a2 <UART2_RX_transfer_complete_callback+0x96>

					speed_fsm.prev_state = speed_fsm.current_state;
 800288a:	4ba5      	ldr	r3, [pc, #660]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x314>)
 800288c:	4aa4      	ldr	r2, [pc, #656]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x314>)
 800288e:	7812      	ldrb	r2, [r2, #0]
 8002890:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A0_MODE;
 8002892:	4ba3      	ldr	r3, [pc, #652]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x314>)
 8002894:	2209      	movs	r2, #9
 8002896:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 8002898:	4ba2      	ldr	r3, [pc, #648]	@ (8002b24 <UART2_RX_transfer_complete_callback+0x318>)
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 800289e:	f001 f85e 	bl	800395e <UART2_RX_transfer_complete_callback+0x1152>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80028a2:	4b9b      	ldr	r3, [pc, #620]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x304>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2bf8      	cmp	r3, #248	@ 0xf8
 80028aa:	d001      	beq.n	80028b0 <UART2_RX_transfer_complete_callback+0xa4>
 80028ac:	f001 f857 	bl	800395e <UART2_RX_transfer_complete_callback+0x1152>

					speed_fsm.prev_state = speed_fsm.current_state;
 80028b0:	4b9b      	ldr	r3, [pc, #620]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x314>)
 80028b2:	4a9b      	ldr	r2, [pc, #620]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x314>)
 80028b4:	7812      	ldrb	r2, [r2, #0]
 80028b6:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B0_MODE;
 80028b8:	4b99      	ldr	r3, [pc, #612]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x314>)
 80028ba:	220b      	movs	r2, #11
 80028bc:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 80028be:	4b99      	ldr	r3, [pc, #612]	@ (8002b24 <UART2_RX_transfer_complete_callback+0x318>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80028c4:	2380      	movs	r3, #128	@ 0x80
 80028c6:	0099      	lsls	r1, r3, #2
 80028c8:	23a0      	movs	r3, #160	@ 0xa0
 80028ca:	05db      	lsls	r3, r3, #23
 80028cc:	2200      	movs	r2, #0
 80028ce:	0018      	movs	r0, r3
 80028d0:	f005 fbd5 	bl	800807e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80028d4:	4b94      	ldr	r3, [pc, #592]	@ (8002b28 <UART2_RX_transfer_complete_callback+0x31c>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	2140      	movs	r1, #64	@ 0x40
 80028da:	0018      	movs	r0, r3
 80028dc:	f005 fbcf 	bl	800807e <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 80028e0:	4b8d      	ldr	r3, [pc, #564]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x30c>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80028e6:	4b8f      	ldr	r3, [pc, #572]	@ (8002b24 <UART2_RX_transfer_complete_callback+0x318>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	3301      	adds	r3, #1
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	4b8c      	ldr	r3, [pc, #560]	@ (8002b24 <UART2_RX_transfer_complete_callback+0x318>)
 80028f2:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80028f4:	f001 f833 	bl	800395e <UART2_RX_transfer_complete_callback+0x1152>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A0_MODE){
 80028f8:	4b89      	ldr	r3, [pc, #548]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x314>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b09      	cmp	r3, #9
 8002900:	d123      	bne.n	800294a <UART2_RX_transfer_complete_callback+0x13e>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002902:	4b83      	ldr	r3, [pc, #524]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x304>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2bf8      	cmp	r3, #248	@ 0xf8
 800290a:	d001      	beq.n	8002910 <UART2_RX_transfer_complete_callback+0x104>
 800290c:	f001 f82a 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002910:	2380      	movs	r3, #128	@ 0x80
 8002912:	0099      	lsls	r1, r3, #2
 8002914:	23a0      	movs	r3, #160	@ 0xa0
 8002916:	05db      	lsls	r3, r3, #23
 8002918:	2200      	movs	r2, #0
 800291a:	0018      	movs	r0, r3
 800291c:	f005 fbaf 	bl	800807e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002920:	4b81      	ldr	r3, [pc, #516]	@ (8002b28 <UART2_RX_transfer_complete_callback+0x31c>)
 8002922:	2201      	movs	r2, #1
 8002924:	2140      	movs	r1, #64	@ 0x40
 8002926:	0018      	movs	r0, r3
 8002928:	f005 fba9 	bl	800807e <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 800292c:	4b7a      	ldr	r3, [pc, #488]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x30c>)
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002932:	4b7c      	ldr	r3, [pc, #496]	@ (8002b24 <UART2_RX_transfer_complete_callback+0x318>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	3301      	adds	r3, #1
 800293a:	b2da      	uxtb	r2, r3
 800293c:	4b79      	ldr	r3, [pc, #484]	@ (8002b24 <UART2_RX_transfer_complete_callback+0x318>)
 800293e:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8002940:	4b77      	ldr	r3, [pc, #476]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x314>)
 8002942:	220a      	movs	r2, #10
 8002944:	701a      	strb	r2, [r3, #0]
 8002946:	f001 f80d 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A1_MODE){
 800294a:	4b75      	ldr	r3, [pc, #468]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x314>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b0a      	cmp	r3, #10
 8002952:	d145      	bne.n	80029e0 <UART2_RX_transfer_complete_callback+0x1d4>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002954:	4b6e      	ldr	r3, [pc, #440]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x304>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2bf8      	cmp	r3, #248	@ 0xf8
 800295c:	d001      	beq.n	8002962 <UART2_RX_transfer_complete_callback+0x156>
 800295e:	f001 f801 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002962:	4b6d      	ldr	r3, [pc, #436]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x30c>)
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002968:	4b6e      	ldr	r3, [pc, #440]	@ (8002b24 <UART2_RX_transfer_complete_callback+0x318>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	3301      	adds	r3, #1
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4b6c      	ldr	r3, [pc, #432]	@ (8002b24 <UART2_RX_transfer_complete_callback+0x318>)
 8002974:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002976:	4b6b      	ldr	r3, [pc, #428]	@ (8002b24 <UART2_RX_transfer_complete_callback+0x318>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b0b      	cmp	r3, #11
 800297e:	d80f      	bhi.n	80029a0 <UART2_RX_transfer_complete_callback+0x194>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002980:	2380      	movs	r3, #128	@ 0x80
 8002982:	0099      	lsls	r1, r3, #2
 8002984:	23a0      	movs	r3, #160	@ 0xa0
 8002986:	05db      	lsls	r3, r3, #23
 8002988:	2200      	movs	r2, #0
 800298a:	0018      	movs	r0, r3
 800298c:	f005 fb77 	bl	800807e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002990:	4b65      	ldr	r3, [pc, #404]	@ (8002b28 <UART2_RX_transfer_complete_callback+0x31c>)
 8002992:	2201      	movs	r2, #1
 8002994:	2140      	movs	r1, #64	@ 0x40
 8002996:	0018      	movs	r0, r3
 8002998:	f005 fb71 	bl	800807e <HAL_GPIO_WritePin>
 800299c:	f000 ffe2 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 80029a0:	4b60      	ldr	r3, [pc, #384]	@ (8002b24 <UART2_RX_transfer_complete_callback+0x318>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b18      	cmp	r3, #24
 80029a8:	d80f      	bhi.n	80029ca <UART2_RX_transfer_complete_callback+0x1be>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80029aa:	2380      	movs	r3, #128	@ 0x80
 80029ac:	0099      	lsls	r1, r3, #2
 80029ae:	23a0      	movs	r3, #160	@ 0xa0
 80029b0:	05db      	lsls	r3, r3, #23
 80029b2:	2201      	movs	r2, #1
 80029b4:	0018      	movs	r0, r3
 80029b6:	f005 fb62 	bl	800807e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80029ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002b28 <UART2_RX_transfer_complete_callback+0x31c>)
 80029bc:	2200      	movs	r2, #0
 80029be:	2140      	movs	r1, #64	@ 0x40
 80029c0:	0018      	movs	r0, r3
 80029c2:	f005 fb5c 	bl	800807e <HAL_GPIO_WritePin>
 80029c6:	f000 ffcd 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 80029ca:	4b55      	ldr	r3, [pc, #340]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x314>)
 80029cc:	220a      	movs	r2, #10
 80029ce:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 80029d0:	4b53      	ldr	r3, [pc, #332]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x314>)
 80029d2:	2208      	movs	r2, #8
 80029d4:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 80029d6:	4b53      	ldr	r3, [pc, #332]	@ (8002b24 <UART2_RX_transfer_complete_callback+0x318>)
 80029d8:	2201      	movs	r2, #1
 80029da:	701a      	strb	r2, [r3, #0]
 80029dc:	f000 ffc2 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE){
 80029e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x314>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b0b      	cmp	r3, #11
 80029e8:	d142      	bne.n	8002a70 <UART2_RX_transfer_complete_callback+0x264>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80029ea:	4b49      	ldr	r3, [pc, #292]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x304>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2bf8      	cmp	r3, #248	@ 0xf8
 80029f2:	d001      	beq.n	80029f8 <UART2_RX_transfer_complete_callback+0x1ec>
 80029f4:	f000 ffb6 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 80029f8:	4b47      	ldr	r3, [pc, #284]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x30c>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80029fe:	4b49      	ldr	r3, [pc, #292]	@ (8002b24 <UART2_RX_transfer_complete_callback+0x318>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	3301      	adds	r3, #1
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	4b46      	ldr	r3, [pc, #280]	@ (8002b24 <UART2_RX_transfer_complete_callback+0x318>)
 8002a0a:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002a0c:	4b45      	ldr	r3, [pc, #276]	@ (8002b24 <UART2_RX_transfer_complete_callback+0x318>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b0b      	cmp	r3, #11
 8002a14:	d80f      	bhi.n	8002a36 <UART2_RX_transfer_complete_callback+0x22a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002a16:	2380      	movs	r3, #128	@ 0x80
 8002a18:	0099      	lsls	r1, r3, #2
 8002a1a:	23a0      	movs	r3, #160	@ 0xa0
 8002a1c:	05db      	lsls	r3, r3, #23
 8002a1e:	2200      	movs	r2, #0
 8002a20:	0018      	movs	r0, r3
 8002a22:	f005 fb2c 	bl	800807e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002a26:	4b40      	ldr	r3, [pc, #256]	@ (8002b28 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a28:	2201      	movs	r2, #1
 8002a2a:	2140      	movs	r1, #64	@ 0x40
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f005 fb26 	bl	800807e <HAL_GPIO_WritePin>
 8002a32:	f000 ff97 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002a36:	4b3b      	ldr	r3, [pc, #236]	@ (8002b24 <UART2_RX_transfer_complete_callback+0x318>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b18      	cmp	r3, #24
 8002a3e:	d80f      	bhi.n	8002a60 <UART2_RX_transfer_complete_callback+0x254>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002a40:	2380      	movs	r3, #128	@ 0x80
 8002a42:	0099      	lsls	r1, r3, #2
 8002a44:	23a0      	movs	r3, #160	@ 0xa0
 8002a46:	05db      	lsls	r3, r3, #23
 8002a48:	2201      	movs	r2, #1
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f005 fb17 	bl	800807e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002a50:	4b35      	ldr	r3, [pc, #212]	@ (8002b28 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	2140      	movs	r1, #64	@ 0x40
 8002a56:	0018      	movs	r0, r3
 8002a58:	f005 fb11 	bl	800807e <HAL_GPIO_WritePin>
 8002a5c:	f000 ff82 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002a60:	4b30      	ldr	r3, [pc, #192]	@ (8002b24 <UART2_RX_transfer_complete_callback+0x318>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B1_MODE;
 8002a66:	4b2e      	ldr	r3, [pc, #184]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x314>)
 8002a68:	220c      	movs	r2, #12
 8002a6a:	701a      	strb	r2, [r3, #0]
 8002a6c:	f000 ff7a 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE){
 8002a70:	4b2b      	ldr	r3, [pc, #172]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x314>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b0c      	cmp	r3, #12
 8002a78:	d158      	bne.n	8002b2c <UART2_RX_transfer_complete_callback+0x320>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002a7a:	4b25      	ldr	r3, [pc, #148]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x304>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2bf8      	cmp	r3, #248	@ 0xf8
 8002a82:	d138      	bne.n	8002af6 <UART2_RX_transfer_complete_callback+0x2ea>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002a84:	4b24      	ldr	r3, [pc, #144]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x30c>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002a8a:	4b26      	ldr	r3, [pc, #152]	@ (8002b24 <UART2_RX_transfer_complete_callback+0x318>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	3301      	adds	r3, #1
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	4b23      	ldr	r3, [pc, #140]	@ (8002b24 <UART2_RX_transfer_complete_callback+0x318>)
 8002a96:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002a98:	4b22      	ldr	r3, [pc, #136]	@ (8002b24 <UART2_RX_transfer_complete_callback+0x318>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b0b      	cmp	r3, #11
 8002aa0:	d80f      	bhi.n	8002ac2 <UART2_RX_transfer_complete_callback+0x2b6>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002aa2:	2380      	movs	r3, #128	@ 0x80
 8002aa4:	0099      	lsls	r1, r3, #2
 8002aa6:	23a0      	movs	r3, #160	@ 0xa0
 8002aa8:	05db      	lsls	r3, r3, #23
 8002aaa:	2200      	movs	r2, #0
 8002aac:	0018      	movs	r0, r3
 8002aae:	f005 fae6 	bl	800807e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8002b28 <UART2_RX_transfer_complete_callback+0x31c>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	2140      	movs	r1, #64	@ 0x40
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f005 fae0 	bl	800807e <HAL_GPIO_WritePin>
 8002abe:	f000 ff51 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002ac2:	4b18      	ldr	r3, [pc, #96]	@ (8002b24 <UART2_RX_transfer_complete_callback+0x318>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b18      	cmp	r3, #24
 8002aca:	d80f      	bhi.n	8002aec <UART2_RX_transfer_complete_callback+0x2e0>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002acc:	2380      	movs	r3, #128	@ 0x80
 8002ace:	0099      	lsls	r1, r3, #2
 8002ad0:	23a0      	movs	r3, #160	@ 0xa0
 8002ad2:	05db      	lsls	r3, r3, #23
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f005 fad1 	bl	800807e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002adc:	4b12      	ldr	r3, [pc, #72]	@ (8002b28 <UART2_RX_transfer_complete_callback+0x31c>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2140      	movs	r1, #64	@ 0x40
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f005 facb 	bl	800807e <HAL_GPIO_WritePin>
 8002ae8:	f000 ff3c 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002aec:	4b0d      	ldr	r3, [pc, #52]	@ (8002b24 <UART2_RX_transfer_complete_callback+0x318>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	f000 ff37 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002af6:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x304>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2bfa      	cmp	r3, #250	@ 0xfa
 8002afe:	d001      	beq.n	8002b04 <UART2_RX_transfer_complete_callback+0x2f8>
 8002b00:	f000 ff30 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002b04:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x314>)
 8002b06:	220d      	movs	r2, #13
 8002b08:	701a      	strb	r2, [r3, #0]
 8002b0a:	f000 ff2b 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
 8002b0e:	46c0      	nop			@ (mov r8, r8)
 8002b10:	2000055c 	.word	0x2000055c
 8002b14:	20000cb4 	.word	0x20000cb4
 8002b18:	20000d5c 	.word	0x20000d5c
 8002b1c:	2000043c 	.word	0x2000043c
 8002b20:	20000428 	.word	0x20000428
 8002b24:	20000cb2 	.word	0x20000cb2
 8002b28:	50000800 	.word	0x50000800
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE){
 8002b2c:	4bdc      	ldr	r3, [pc, #880]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x694>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b0d      	cmp	r3, #13
 8002b34:	d160      	bne.n	8002bf8 <UART2_RX_transfer_complete_callback+0x3ec>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002b36:	4bdb      	ldr	r3, [pc, #876]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x698>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2bf8      	cmp	r3, #248	@ 0xf8
 8002b3e:	d001      	beq.n	8002b44 <UART2_RX_transfer_complete_callback+0x338>
 8002b40:	f000 ff10 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8002b44:	4bd8      	ldr	r3, [pc, #864]	@ (8002ea8 <UART2_RX_transfer_complete_callback+0x69c>)
 8002b46:	0018      	movs	r0, r3
 8002b48:	f001 fc38 	bl	80043bc <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002b4c:	2380      	movs	r3, #128	@ 0x80
 8002b4e:	0099      	lsls	r1, r3, #2
 8002b50:	23a0      	movs	r3, #160	@ 0xa0
 8002b52:	05db      	lsls	r3, r3, #23
 8002b54:	2201      	movs	r2, #1
 8002b56:	0018      	movs	r0, r3
 8002b58:	f005 fa91 	bl	800807e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002b5c:	4bd3      	ldr	r3, [pc, #844]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a0>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2140      	movs	r1, #64	@ 0x40
 8002b62:	0018      	movs	r0, r3
 8002b64:	f005 fa8b 	bl	800807e <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002b68:	2380      	movs	r3, #128	@ 0x80
 8002b6a:	0099      	lsls	r1, r3, #2
 8002b6c:	23a0      	movs	r3, #160	@ 0xa0
 8002b6e:	05db      	lsls	r3, r3, #23
 8002b70:	2200      	movs	r2, #0
 8002b72:	0018      	movs	r0, r3
 8002b74:	f005 fa83 	bl	800807e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002b78:	4bcc      	ldr	r3, [pc, #816]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a0>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	2140      	movs	r1, #64	@ 0x40
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f005 fa7d 	bl	800807e <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002b84:	4bca      	ldr	r3, [pc, #808]	@ (8002eb0 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 1;
 8002b8a:	4bca      	ldr	r3, [pc, #808]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002b90:	4bc3      	ldr	r3, [pc, #780]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x694>)
 8002b92:	220d      	movs	r2, #13
 8002b94:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002b96:	4bc2      	ldr	r3, [pc, #776]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x694>)
 8002b98:	2208      	movs	r2, #8
 8002b9a:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8002b9c:	4bc6      	ldr	r3, [pc, #792]	@ (8002eb8 <UART2_RX_transfer_complete_callback+0x6ac>)
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f002 ff9c 	bl	8005ade <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8002ba6:	4bc5      	ldr	r3, [pc, #788]	@ (8002ebc <UART2_RX_transfer_complete_callback+0x6b0>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002bac:	4ac4      	ldr	r2, [pc, #784]	@ (8002ec0 <UART2_RX_transfer_complete_callback+0x6b4>)
 8002bae:	4bbe      	ldr	r3, [pc, #760]	@ (8002ea8 <UART2_RX_transfer_complete_callback+0x69c>)
 8002bb0:	0011      	movs	r1, r2
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f001 fab0 	bl	8004118 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8002bb8:	4ac2      	ldr	r2, [pc, #776]	@ (8002ec4 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002bba:	4bbb      	ldr	r3, [pc, #748]	@ (8002ea8 <UART2_RX_transfer_complete_callback+0x69c>)
 8002bbc:	0011      	movs	r1, r2
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f001 faaa 	bl	8004118 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8002bc4:	4bc0      	ldr	r3, [pc, #768]	@ (8002ec8 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002bc6:	2108      	movs	r1, #8
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f003 f803 	bl	8005bd4 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002bce:	4bbd      	ldr	r3, [pc, #756]	@ (8002ec4 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f001 fc1e 	bl	8004414 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002bd8:	4abc      	ldr	r2, [pc, #752]	@ (8002ecc <UART2_RX_transfer_complete_callback+0x6c0>)
 8002bda:	4bba      	ldr	r3, [pc, #744]	@ (8002ec4 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002bdc:	0011      	movs	r1, r2
 8002bde:	0018      	movs	r0, r3
 8002be0:	f001 fd0e 	bl	8004600 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002be4:	4bba      	ldr	r3, [pc, #744]	@ (8002ed0 <UART2_RX_transfer_complete_callback+0x6c4>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	001a      	movs	r2, r3
 8002bea:	49ba      	ldr	r1, [pc, #744]	@ (8002ed4 <UART2_RX_transfer_complete_callback+0x6c8>)
 8002bec:	4bba      	ldr	r3, [pc, #744]	@ (8002ed8 <UART2_RX_transfer_complete_callback+0x6cc>)
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f003 fc94 	bl	800651c <HAL_ADC_Start_DMA>
 8002bf4:	f000 feb6 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == NO)){
 8002bf8:	4ba9      	ldr	r3, [pc, #676]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x694>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d146      	bne.n	8002c90 <UART2_RX_transfer_complete_callback+0x484>
 8002c02:	4bb1      	ldr	r3, [pc, #708]	@ (8002ec8 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c04:	2120      	movs	r1, #32
 8002c06:	0018      	movs	r0, r3
 8002c08:	f002 ffd0 	bl	8005bac <Get_Status_Bit>
 8002c0c:	1e03      	subs	r3, r0, #0
 8002c0e:	d13f      	bne.n	8002c90 <UART2_RX_transfer_complete_callback+0x484>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c10:	4ba4      	ldr	r3, [pc, #656]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x698>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2bf8      	cmp	r3, #248	@ 0xf8
 8002c18:	d001      	beq.n	8002c1e <UART2_RX_transfer_complete_callback+0x412>
 8002c1a:	f000 fea3 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002c1e:	4ba4      	ldr	r3, [pc, #656]	@ (8002eb0 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002c24:	4ba3      	ldr	r3, [pc, #652]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	4ba1      	ldr	r3, [pc, #644]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c30:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002c32:	4ba0      	ldr	r3, [pc, #640]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b0b      	cmp	r3, #11
 8002c3a:	d80f      	bhi.n	8002c5c <UART2_RX_transfer_complete_callback+0x450>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002c3c:	2380      	movs	r3, #128	@ 0x80
 8002c3e:	0099      	lsls	r1, r3, #2
 8002c40:	23a0      	movs	r3, #160	@ 0xa0
 8002c42:	05db      	lsls	r3, r3, #23
 8002c44:	2200      	movs	r2, #0
 8002c46:	0018      	movs	r0, r3
 8002c48:	f005 fa19 	bl	800807e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002c4c:	4b97      	ldr	r3, [pc, #604]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a0>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	2140      	movs	r1, #64	@ 0x40
 8002c52:	0018      	movs	r0, r3
 8002c54:	f005 fa13 	bl	800807e <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c58:	f000 fe84 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002c5c:	4b95      	ldr	r3, [pc, #596]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b18      	cmp	r3, #24
 8002c64:	d80f      	bhi.n	8002c86 <UART2_RX_transfer_complete_callback+0x47a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002c66:	2380      	movs	r3, #128	@ 0x80
 8002c68:	0099      	lsls	r1, r3, #2
 8002c6a:	23a0      	movs	r3, #160	@ 0xa0
 8002c6c:	05db      	lsls	r3, r3, #23
 8002c6e:	2201      	movs	r2, #1
 8002c70:	0018      	movs	r0, r3
 8002c72:	f005 fa04 	bl	800807e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002c76:	4b8d      	ldr	r3, [pc, #564]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a0>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2140      	movs	r1, #64	@ 0x40
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f005 f9fe 	bl	800807e <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c82:	f000 fe6f 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002c86:	4b8b      	ldr	r3, [pc, #556]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c8c:	f000 fe6a 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8002c90:	4b83      	ldr	r3, [pc, #524]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x694>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d14c      	bne.n	8002d34 <UART2_RX_transfer_complete_callback+0x528>
 8002c9a:	4b88      	ldr	r3, [pc, #544]	@ (8002ebc <UART2_RX_transfer_complete_callback+0x6b0>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d147      	bne.n	8002d34 <UART2_RX_transfer_complete_callback+0x528>
 8002ca4:	4b88      	ldr	r3, [pc, #544]	@ (8002ec8 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002ca6:	2120      	movs	r1, #32
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f002 ff7f 	bl	8005bac <Get_Status_Bit>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d13f      	bne.n	8002d34 <UART2_RX_transfer_complete_callback+0x528>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002cb4:	4b7b      	ldr	r3, [pc, #492]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x698>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2bf8      	cmp	r3, #248	@ 0xf8
 8002cbc:	d11e      	bne.n	8002cfc <UART2_RX_transfer_complete_callback+0x4f0>

					MIDI_CLK_tag = 0; //just in case
 8002cbe:	4b7d      	ldr	r3, [pc, #500]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002cc4:	4b7b      	ldr	r3, [pc, #492]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	4b79      	ldr	r3, [pc, #484]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cd0:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_fsm = COMPILING;
 8002cd2:	4b77      	ldr	r3, [pc, #476]	@ (8002eb0 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B0_MODE;
 8002cd8:	4b71      	ldr	r3, [pc, #452]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x694>)
 8002cda:	2210      	movs	r2, #16
 8002cdc:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002cde:	4b70      	ldr	r3, [pc, #448]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x694>)
 8002ce0:	2208      	movs	r2, #8
 8002ce2:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002ce4:	4b78      	ldr	r3, [pc, #480]	@ (8002ec8 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002ce6:	2120      	movs	r1, #32
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f002 ff85 	bl	8005bf8 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002cee:	4b76      	ldr	r3, [pc, #472]	@ (8002ec8 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002cf0:	2140      	movs	r1, #64	@ 0x40
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f002 ff80 	bl	8005bf8 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002cf8:	f000 fe33 	bl	8003962 <UART2_RX_transfer_complete_callback+0x1156>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002cfc:	4b69      	ldr	r3, [pc, #420]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x698>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2bfa      	cmp	r3, #250	@ 0xfa
 8002d04:	d001      	beq.n	8002d0a <UART2_RX_transfer_complete_callback+0x4fe>
 8002d06:	f000 fe2c 	bl	8003962 <UART2_RX_transfer_complete_callback+0x1156>

					MIDI_CLK_tag = 0; //just in case
 8002d0a:	4b6a      	ldr	r3, [pc, #424]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A0_MODE;
 8002d10:	4b63      	ldr	r3, [pc, #396]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x694>)
 8002d12:	220e      	movs	r2, #14
 8002d14:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002d16:	4b62      	ldr	r3, [pc, #392]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x694>)
 8002d18:	2208      	movs	r2, #8
 8002d1a:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002d1c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ec8 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002d1e:	2120      	movs	r1, #32
 8002d20:	0018      	movs	r0, r3
 8002d22:	f002 ff69 	bl	8005bf8 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002d26:	4b68      	ldr	r3, [pc, #416]	@ (8002ec8 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002d28:	2140      	movs	r1, #64	@ 0x40
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f002 ff64 	bl	8005bf8 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d30:	f000 fe17 	bl	8003962 <UART2_RX_transfer_complete_callback+0x1156>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A0_MODE){
 8002d34:	4b5a      	ldr	r3, [pc, #360]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x694>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b0e      	cmp	r3, #14
 8002d3c:	d123      	bne.n	8002d86 <UART2_RX_transfer_complete_callback+0x57a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d3e:	4b59      	ldr	r3, [pc, #356]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x698>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2bf8      	cmp	r3, #248	@ 0xf8
 8002d46:	d001      	beq.n	8002d4c <UART2_RX_transfer_complete_callback+0x540>
 8002d48:	f000 fe0c 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002d4c:	2380      	movs	r3, #128	@ 0x80
 8002d4e:	0099      	lsls	r1, r3, #2
 8002d50:	23a0      	movs	r3, #160	@ 0xa0
 8002d52:	05db      	lsls	r3, r3, #23
 8002d54:	2200      	movs	r2, #0
 8002d56:	0018      	movs	r0, r3
 8002d58:	f005 f991 	bl	800807e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002d5c:	4b53      	ldr	r3, [pc, #332]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a0>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	2140      	movs	r1, #64	@ 0x40
 8002d62:	0018      	movs	r0, r3
 8002d64:	f005 f98b 	bl	800807e <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002d68:	4b51      	ldr	r3, [pc, #324]	@ (8002eb0 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002d6e:	4b51      	ldr	r3, [pc, #324]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	3301      	adds	r3, #1
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	4b4e      	ldr	r3, [pc, #312]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d7a:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002d7c:	4b48      	ldr	r3, [pc, #288]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x694>)
 8002d7e:	220f      	movs	r2, #15
 8002d80:	701a      	strb	r2, [r3, #0]
 8002d82:	f000 fdef 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A1_MODE){
 8002d86:	4b46      	ldr	r3, [pc, #280]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x694>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b0f      	cmp	r3, #15
 8002d8e:	d142      	bne.n	8002e16 <UART2_RX_transfer_complete_callback+0x60a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d90:	4b44      	ldr	r3, [pc, #272]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x698>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2bf8      	cmp	r3, #248	@ 0xf8
 8002d98:	d001      	beq.n	8002d9e <UART2_RX_transfer_complete_callback+0x592>
 8002d9a:	f000 fde3 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_tag++;
 8002d9e:	4b45      	ldr	r3, [pc, #276]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	3301      	adds	r3, #1
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	4b42      	ldr	r3, [pc, #264]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002daa:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002dac:	4b41      	ldr	r3, [pc, #260]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b0b      	cmp	r3, #11
 8002db4:	d80f      	bhi.n	8002dd6 <UART2_RX_transfer_complete_callback+0x5ca>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002db6:	2380      	movs	r3, #128	@ 0x80
 8002db8:	0099      	lsls	r1, r3, #2
 8002dba:	23a0      	movs	r3, #160	@ 0xa0
 8002dbc:	05db      	lsls	r3, r3, #23
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f005 f95c 	bl	800807e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002dc6:	4b39      	ldr	r3, [pc, #228]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a0>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	2140      	movs	r1, #64	@ 0x40
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f005 f956 	bl	800807e <HAL_GPIO_WritePin>
 8002dd2:	f000 fdc7 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002dd6:	4b37      	ldr	r3, [pc, #220]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b18      	cmp	r3, #24
 8002dde:	d80f      	bhi.n	8002e00 <UART2_RX_transfer_complete_callback+0x5f4>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002de0:	2380      	movs	r3, #128	@ 0x80
 8002de2:	0099      	lsls	r1, r3, #2
 8002de4:	23a0      	movs	r3, #160	@ 0xa0
 8002de6:	05db      	lsls	r3, r3, #23
 8002de8:	2201      	movs	r2, #1
 8002dea:	0018      	movs	r0, r3
 8002dec:	f005 f947 	bl	800807e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002df0:	4b2e      	ldr	r3, [pc, #184]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a0>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	2140      	movs	r1, #64	@ 0x40
 8002df6:	0018      	movs	r0, r3
 8002df8:	f005 f941 	bl	800807e <HAL_GPIO_WritePin>
 8002dfc:	f000 fdb2 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002e00:	4b27      	ldr	r3, [pc, #156]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x694>)
 8002e02:	220f      	movs	r2, #15
 8002e04:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002e06:	4b26      	ldr	r3, [pc, #152]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x694>)
 8002e08:	2208      	movs	r2, #8
 8002e0a:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8002e0c:	4b29      	ldr	r3, [pc, #164]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	701a      	strb	r2, [r3, #0]
 8002e12:	f000 fda7 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE){
 8002e16:	4b22      	ldr	r3, [pc, #136]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x694>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	d15d      	bne.n	8002edc <UART2_RX_transfer_complete_callback+0x6d0>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002e20:	4b20      	ldr	r3, [pc, #128]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x698>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2bf8      	cmp	r3, #248	@ 0xf8
 8002e28:	d001      	beq.n	8002e2e <UART2_RX_transfer_complete_callback+0x622>
 8002e2a:	f000 fd9b 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

					//when sftwre timer times out the midi clk tag is reset to 0
					MIDI_CLK_tag++;
 8002e2e:	4b21      	ldr	r3, [pc, #132]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	3301      	adds	r3, #1
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e3a:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b0b      	cmp	r3, #11
 8002e44:	d80f      	bhi.n	8002e66 <UART2_RX_transfer_complete_callback+0x65a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002e46:	2380      	movs	r3, #128	@ 0x80
 8002e48:	0099      	lsls	r1, r3, #2
 8002e4a:	23a0      	movs	r3, #160	@ 0xa0
 8002e4c:	05db      	lsls	r3, r3, #23
 8002e4e:	2200      	movs	r2, #0
 8002e50:	0018      	movs	r0, r3
 8002e52:	f005 f914 	bl	800807e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002e56:	4b15      	ldr	r3, [pc, #84]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a0>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	2140      	movs	r1, #64	@ 0x40
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f005 f90e 	bl	800807e <HAL_GPIO_WritePin>
 8002e62:	f000 fd7f 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002e66:	4b13      	ldr	r3, [pc, #76]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b18      	cmp	r3, #24
 8002e6e:	d80f      	bhi.n	8002e90 <UART2_RX_transfer_complete_callback+0x684>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002e70:	2380      	movs	r3, #128	@ 0x80
 8002e72:	0099      	lsls	r1, r3, #2
 8002e74:	23a0      	movs	r3, #160	@ 0xa0
 8002e76:	05db      	lsls	r3, r3, #23
 8002e78:	2201      	movs	r2, #1
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f005 f8ff 	bl	800807e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002e80:	4b0a      	ldr	r3, [pc, #40]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a0>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	2140      	movs	r1, #64	@ 0x40
 8002e86:	0018      	movs	r0, r3
 8002e88:	f005 f8f9 	bl	800807e <HAL_GPIO_WritePin>
 8002e8c:	f000 fd6a 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B1_MODE;
 8002e90:	4b03      	ldr	r3, [pc, #12]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x694>)
 8002e92:	2211      	movs	r2, #17
 8002e94:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						MIDI_CLK_tag = 1;
 8002e96:	4b07      	ldr	r3, [pc, #28]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	701a      	strb	r2, [r3, #0]
 8002e9c:	f000 fd62 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
 8002ea0:	20000428 	.word	0x20000428
 8002ea4:	2000055c 	.word	0x2000055c
 8002ea8:	20000d14 	.word	0x20000d14
 8002eac:	50000800 	.word	0x50000800
 8002eb0:	20000d5c 	.word	0x20000d5c
 8002eb4:	20000cb2 	.word	0x20000cb2
 8002eb8:	20000950 	.word	0x20000950
 8002ebc:	2000043c 	.word	0x2000043c
 8002ec0:	20000d38 	.word	0x20000d38
 8002ec4:	20000ccc 	.word	0x20000ccc
 8002ec8:	20000cb4 	.word	0x20000cb4
 8002ecc:	20000020 	.word	0x20000020
 8002ed0:	0800dc38 	.word	0x0800dc38
 8002ed4:	20000cc0 	.word	0x20000cc0
 8002ed8:	2000057c 	.word	0x2000057c
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE){
 8002edc:	4bed      	ldr	r3, [pc, #948]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa88>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b11      	cmp	r3, #17
 8002ee4:	d146      	bne.n	8002f74 <UART2_RX_transfer_complete_callback+0x768>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002ee6:	4bec      	ldr	r3, [pc, #944]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2bf8      	cmp	r3, #248	@ 0xf8
 8002eee:	d135      	bne.n	8002f5c <UART2_RX_transfer_complete_callback+0x750>

					MIDI_CLK_tag++;
 8002ef0:	4bea      	ldr	r3, [pc, #936]	@ (800329c <UART2_RX_transfer_complete_callback+0xa90>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	4be8      	ldr	r3, [pc, #928]	@ (800329c <UART2_RX_transfer_complete_callback+0xa90>)
 8002efc:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002efe:	4be7      	ldr	r3, [pc, #924]	@ (800329c <UART2_RX_transfer_complete_callback+0xa90>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b0b      	cmp	r3, #11
 8002f06:	d80f      	bhi.n	8002f28 <UART2_RX_transfer_complete_callback+0x71c>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002f08:	2380      	movs	r3, #128	@ 0x80
 8002f0a:	0099      	lsls	r1, r3, #2
 8002f0c:	23a0      	movs	r3, #160	@ 0xa0
 8002f0e:	05db      	lsls	r3, r3, #23
 8002f10:	2200      	movs	r2, #0
 8002f12:	0018      	movs	r0, r3
 8002f14:	f005 f8b3 	bl	800807e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002f18:	4be1      	ldr	r3, [pc, #900]	@ (80032a0 <UART2_RX_transfer_complete_callback+0xa94>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	2140      	movs	r1, #64	@ 0x40
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f005 f8ad 	bl	800807e <HAL_GPIO_WritePin>
 8002f24:	f000 fd1e 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002f28:	4bdc      	ldr	r3, [pc, #880]	@ (800329c <UART2_RX_transfer_complete_callback+0xa90>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b18      	cmp	r3, #24
 8002f30:	d80f      	bhi.n	8002f52 <UART2_RX_transfer_complete_callback+0x746>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002f32:	2380      	movs	r3, #128	@ 0x80
 8002f34:	0099      	lsls	r1, r3, #2
 8002f36:	23a0      	movs	r3, #160	@ 0xa0
 8002f38:	05db      	lsls	r3, r3, #23
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f005 f89e 	bl	800807e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002f42:	4bd7      	ldr	r3, [pc, #860]	@ (80032a0 <UART2_RX_transfer_complete_callback+0xa94>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	2140      	movs	r1, #64	@ 0x40
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f005 f898 	bl	800807e <HAL_GPIO_WritePin>
 8002f4e:	f000 fd09 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002f52:	4bd2      	ldr	r3, [pc, #840]	@ (800329c <UART2_RX_transfer_complete_callback+0xa90>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	701a      	strb	r2, [r3, #0]
 8002f58:	f000 fd04 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002f5c:	4bce      	ldr	r3, [pc, #824]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2bfa      	cmp	r3, #250	@ 0xfa
 8002f64:	d001      	beq.n	8002f6a <UART2_RX_transfer_complete_callback+0x75e>
 8002f66:	f000 fcfd 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 8002f6a:	4bca      	ldr	r3, [pc, #808]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa88>)
 8002f6c:	2212      	movs	r2, #18
 8002f6e:	701a      	strb	r2, [r3, #0]
 8002f70:	f000 fcf8 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE){
 8002f74:	4bc7      	ldr	r3, [pc, #796]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa88>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b12      	cmp	r3, #18
 8002f7c:	d001      	beq.n	8002f82 <UART2_RX_transfer_complete_callback+0x776>
 8002f7e:	f000 fcf1 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002f82:	4bc5      	ldr	r3, [pc, #788]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2bf8      	cmp	r3, #248	@ 0xf8
 8002f8a:	d001      	beq.n	8002f90 <UART2_RX_transfer_complete_callback+0x784>
 8002f8c:	f000 fcea 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8002f90:	4bc4      	ldr	r3, [pc, #784]	@ (80032a4 <UART2_RX_transfer_complete_callback+0xa98>)
 8002f92:	0018      	movs	r0, r3
 8002f94:	f001 fa12 	bl	80043bc <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002f98:	2380      	movs	r3, #128	@ 0x80
 8002f9a:	0099      	lsls	r1, r3, #2
 8002f9c:	23a0      	movs	r3, #160	@ 0xa0
 8002f9e:	05db      	lsls	r3, r3, #23
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f005 f86b 	bl	800807e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002fa8:	4bbd      	ldr	r3, [pc, #756]	@ (80032a0 <UART2_RX_transfer_complete_callback+0xa94>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	2140      	movs	r1, #64	@ 0x40
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f005 f865 	bl	800807e <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002fb4:	2380      	movs	r3, #128	@ 0x80
 8002fb6:	0099      	lsls	r1, r3, #2
 8002fb8:	23a0      	movs	r3, #160	@ 0xa0
 8002fba:	05db      	lsls	r3, r3, #23
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f005 f85d 	bl	800807e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002fc4:	4bb6      	ldr	r3, [pc, #728]	@ (80032a0 <UART2_RX_transfer_complete_callback+0xa94>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	2140      	movs	r1, #64	@ 0x40
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f005 f857 	bl	800807e <HAL_GPIO_WritePin>

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 8002fd0:	4bb0      	ldr	r3, [pc, #704]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa88>)
 8002fd2:	2212      	movs	r2, #18
 8002fd4:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002fd6:	4baf      	ldr	r3, [pc, #700]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa88>)
 8002fd8:	2208      	movs	r2, #8
 8002fda:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 1;
 8002fdc:	4baf      	ldr	r3, [pc, #700]	@ (800329c <UART2_RX_transfer_complete_callback+0xa90>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8002fe2:	4bb1      	ldr	r3, [pc, #708]	@ (80032a8 <UART2_RX_transfer_complete_callback+0xa9c>)
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f002 fd79 	bl	8005ade <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8002fec:	4baf      	ldr	r3, [pc, #700]	@ (80032ac <UART2_RX_transfer_complete_callback+0xaa0>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002ff2:	4aaf      	ldr	r2, [pc, #700]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaa4>)
 8002ff4:	4bab      	ldr	r3, [pc, #684]	@ (80032a4 <UART2_RX_transfer_complete_callback+0xa98>)
 8002ff6:	0011      	movs	r1, r2
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f001 f88d 	bl	8004118 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8002ffe:	4aad      	ldr	r2, [pc, #692]	@ (80032b4 <UART2_RX_transfer_complete_callback+0xaa8>)
 8003000:	4ba8      	ldr	r3, [pc, #672]	@ (80032a4 <UART2_RX_transfer_complete_callback+0xa98>)
 8003002:	0011      	movs	r1, r2
 8003004:	0018      	movs	r0, r3
 8003006:	f001 f887 	bl	8004118 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 800300a:	4bab      	ldr	r3, [pc, #684]	@ (80032b8 <UART2_RX_transfer_complete_callback+0xaac>)
 800300c:	2108      	movs	r1, #8
 800300e:	0018      	movs	r0, r3
 8003010:	f002 fde0 	bl	8005bd4 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8003014:	4ba7      	ldr	r3, [pc, #668]	@ (80032b4 <UART2_RX_transfer_complete_callback+0xaa8>)
 8003016:	2100      	movs	r1, #0
 8003018:	0018      	movs	r0, r3
 800301a:	f001 f9fb 	bl	8004414 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 800301e:	4aa7      	ldr	r2, [pc, #668]	@ (80032bc <UART2_RX_transfer_complete_callback+0xab0>)
 8003020:	4ba4      	ldr	r3, [pc, #656]	@ (80032b4 <UART2_RX_transfer_complete_callback+0xaa8>)
 8003022:	0011      	movs	r1, r2
 8003024:	0018      	movs	r0, r3
 8003026:	f001 faeb 	bl	8004600 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 800302a:	4ba5      	ldr	r3, [pc, #660]	@ (80032c0 <UART2_RX_transfer_complete_callback+0xab4>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	001a      	movs	r2, r3
 8003030:	49a4      	ldr	r1, [pc, #656]	@ (80032c4 <UART2_RX_transfer_complete_callback+0xab8>)
 8003032:	4ba5      	ldr	r3, [pc, #660]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xabc>)
 8003034:	0018      	movs	r0, r3
 8003036:	f003 fa71 	bl	800651c <HAL_ADC_Start_DMA>
 800303a:	f000 fc93 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>
		}
	}
	//not a realtime status byte
	else{

		if(active_status_byte == 0){
 800303e:	4ba3      	ldr	r3, [pc, #652]	@ (80032cc <UART2_RX_transfer_complete_callback+0xac0>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d000      	beq.n	800304a <UART2_RX_transfer_complete_callback+0x83e>
 8003048:	e29e      	b.n	8003588 <UART2_RX_transfer_complete_callback+0xd7c>

			if(running_status_byte == 0){
 800304a:	4ba1      	ldr	r3, [pc, #644]	@ (80032d0 <UART2_RX_transfer_complete_callback+0xac4>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d000      	beq.n	8003056 <UART2_RX_transfer_complete_callback+0x84a>
 8003054:	e0a3      	b.n	800319e <UART2_RX_transfer_complete_callback+0x992>

				if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003056:	4b9f      	ldr	r3, [pc, #636]	@ (80032d4 <UART2_RX_transfer_complete_callback+0xac8>)
 8003058:	0018      	movs	r0, r3
 800305a:	f7fe f82c 	bl	80010b6 <Is_Data_Buffer_Empty>
 800305e:	0003      	movs	r3, r0
 8003060:	2b01      	cmp	r3, #1
 8003062:	d001      	beq.n	8003068 <UART2_RX_transfer_complete_callback+0x85c>
 8003064:	f000 fc7e 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

					if(Is_Status_Byte(rx_buffer) == YES){
 8003068:	4b8b      	ldr	r3, [pc, #556]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa8c>)
 800306a:	0018      	movs	r0, r3
 800306c:	f7fd fee2 	bl	8000e34 <Is_Status_Byte>
 8003070:	0003      	movs	r3, r0
 8003072:	2b01      	cmp	r3, #1
 8003074:	d001      	beq.n	800307a <UART2_RX_transfer_complete_callback+0x86e>
 8003076:	f000 fc75 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_PC_Status_Byte(rx_buffer) == YES){
 800307a:	4b87      	ldr	r3, [pc, #540]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa8c>)
 800307c:	0018      	movs	r0, r3
 800307e:	f7fd ff0b 	bl	8000e98 <Is_PC_Status_Byte>
 8003082:	0003      	movs	r3, r0
 8003084:	2b01      	cmp	r3, #1
 8003086:	d134      	bne.n	80030f2 <UART2_RX_transfer_complete_callback+0x8e6>

							running_status_byte = (uint8_t)*rx_buffer;
 8003088:	4b83      	ldr	r3, [pc, #524]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa8c>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	b2da      	uxtb	r2, r3
 800308e:	4b90      	ldr	r3, [pc, #576]	@ (80032d0 <UART2_RX_transfer_complete_callback+0xac4>)
 8003090:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003092:	4b91      	ldr	r3, [pc, #580]	@ (80032d8 <UART2_RX_transfer_complete_callback+0xacc>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	b2da      	uxtb	r2, r3
 8003098:	4b7f      	ldr	r3, [pc, #508]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa8c>)
 800309a:	0011      	movs	r1, r2
 800309c:	0018      	movs	r0, r3
 800309e:	f7fd ffe9 	bl	8001074 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80030a2:	0003      	movs	r3, r0
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d10d      	bne.n	80030c4 <UART2_RX_transfer_complete_callback+0x8b8>

								active_status_byte = (uint8_t)*rx_buffer;
 80030a8:	4b7b      	ldr	r3, [pc, #492]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa8c>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	4b87      	ldr	r3, [pc, #540]	@ (80032cc <UART2_RX_transfer_complete_callback+0xac0>)
 80030b0:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80030b2:	2380      	movs	r3, #128	@ 0x80
 80030b4:	005a      	lsls	r2, r3, #1
 80030b6:	4b80      	ldr	r3, [pc, #512]	@ (80032b8 <UART2_RX_transfer_complete_callback+0xaac>)
 80030b8:	0011      	movs	r1, r2
 80030ba:	0018      	movs	r0, r3
 80030bc:	f002 fd8a 	bl	8005bd4 <Set_Status_Bit>
 80030c0:	f000 fc50 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 80030c4:	4b7c      	ldr	r3, [pc, #496]	@ (80032b8 <UART2_RX_transfer_complete_callback+0xaac>)
 80030c6:	0018      	movs	r0, r3
 80030c8:	f7fe f88b 	bl	80011e2 <Is_OMNI_On>
 80030cc:	0003      	movs	r3, r0
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d001      	beq.n	80030d6 <UART2_RX_transfer_complete_callback+0x8ca>
 80030d2:	f000 fc47 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 80030d6:	4b70      	ldr	r3, [pc, #448]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa8c>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	4b7b      	ldr	r3, [pc, #492]	@ (80032cc <UART2_RX_transfer_complete_callback+0xac0>)
 80030de:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80030e0:	2380      	movs	r3, #128	@ 0x80
 80030e2:	005a      	lsls	r2, r3, #1
 80030e4:	4b74      	ldr	r3, [pc, #464]	@ (80032b8 <UART2_RX_transfer_complete_callback+0xaac>)
 80030e6:	0011      	movs	r1, r2
 80030e8:	0018      	movs	r0, r3
 80030ea:	f002 fd73 	bl	8005bd4 <Set_Status_Bit>
 80030ee:	f000 fc39 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80030f2:	4b69      	ldr	r3, [pc, #420]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa8c>)
 80030f4:	0018      	movs	r0, r3
 80030f6:	f7fd feeb 	bl	8000ed0 <Is_CC_Status_Byte>
 80030fa:	0003      	movs	r3, r0
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d134      	bne.n	800316a <UART2_RX_transfer_complete_callback+0x95e>

							running_status_byte = (uint8_t)*rx_buffer;
 8003100:	4b65      	ldr	r3, [pc, #404]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	4b72      	ldr	r3, [pc, #456]	@ (80032d0 <UART2_RX_transfer_complete_callback+0xac4>)
 8003108:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 800310a:	4b73      	ldr	r3, [pc, #460]	@ (80032d8 <UART2_RX_transfer_complete_callback+0xacc>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	b2da      	uxtb	r2, r3
 8003110:	4b61      	ldr	r3, [pc, #388]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003112:	0011      	movs	r1, r2
 8003114:	0018      	movs	r0, r3
 8003116:	f7fd ffad 	bl	8001074 <Is_Channelised_Status_Byte_On_Basic_Channel>
 800311a:	0003      	movs	r3, r0
 800311c:	2b01      	cmp	r3, #1
 800311e:	d10d      	bne.n	800313c <UART2_RX_transfer_complete_callback+0x930>

								active_status_byte = (uint8_t)*rx_buffer;
 8003120:	4b5d      	ldr	r3, [pc, #372]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	b2da      	uxtb	r2, r3
 8003126:	4b69      	ldr	r3, [pc, #420]	@ (80032cc <UART2_RX_transfer_complete_callback+0xac0>)
 8003128:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800312a:	2380      	movs	r3, #128	@ 0x80
 800312c:	005a      	lsls	r2, r3, #1
 800312e:	4b62      	ldr	r3, [pc, #392]	@ (80032b8 <UART2_RX_transfer_complete_callback+0xaac>)
 8003130:	0011      	movs	r1, r2
 8003132:	0018      	movs	r0, r3
 8003134:	f002 fd4e 	bl	8005bd4 <Set_Status_Bit>
 8003138:	f000 fc14 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 800313c:	4b5e      	ldr	r3, [pc, #376]	@ (80032b8 <UART2_RX_transfer_complete_callback+0xaac>)
 800313e:	0018      	movs	r0, r3
 8003140:	f7fe f84f 	bl	80011e2 <Is_OMNI_On>
 8003144:	0003      	movs	r3, r0
 8003146:	2b01      	cmp	r3, #1
 8003148:	d001      	beq.n	800314e <UART2_RX_transfer_complete_callback+0x942>
 800314a:	f000 fc0b 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 800314e:	4b52      	ldr	r3, [pc, #328]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	b2da      	uxtb	r2, r3
 8003154:	4b5d      	ldr	r3, [pc, #372]	@ (80032cc <UART2_RX_transfer_complete_callback+0xac0>)
 8003156:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003158:	2380      	movs	r3, #128	@ 0x80
 800315a:	005a      	lsls	r2, r3, #1
 800315c:	4b56      	ldr	r3, [pc, #344]	@ (80032b8 <UART2_RX_transfer_complete_callback+0xaac>)
 800315e:	0011      	movs	r1, r2
 8003160:	0018      	movs	r0, r3
 8003162:	f002 fd37 	bl	8005bd4 <Set_Status_Bit>
 8003166:	f000 fbfd 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 800316a:	4b4b      	ldr	r3, [pc, #300]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa8c>)
 800316c:	0018      	movs	r0, r3
 800316e:	f7fd ff71 	bl	8001054 <Is_Sysex_Start_Status_Byte>
 8003172:	0003      	movs	r3, r0
 8003174:	2b01      	cmp	r3, #1
 8003176:	d001      	beq.n	800317c <UART2_RX_transfer_complete_callback+0x970>
 8003178:	f000 fbf4 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

							active_status_byte = (uint8_t)*rx_buffer;
 800317c:	4b46      	ldr	r3, [pc, #280]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa8c>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	b2da      	uxtb	r2, r3
 8003182:	4b52      	ldr	r3, [pc, #328]	@ (80032cc <UART2_RX_transfer_complete_callback+0xac0>)
 8003184:	701a      	strb	r2, [r3, #0]
							running_status_byte = 0;
 8003186:	4b52      	ldr	r3, [pc, #328]	@ (80032d0 <UART2_RX_transfer_complete_callback+0xac4>)
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800318c:	2380      	movs	r3, #128	@ 0x80
 800318e:	005a      	lsls	r2, r3, #1
 8003190:	4b49      	ldr	r3, [pc, #292]	@ (80032b8 <UART2_RX_transfer_complete_callback+0xaac>)
 8003192:	0011      	movs	r1, r2
 8003194:	0018      	movs	r0, r3
 8003196:	f002 fd1d 	bl	8005bd4 <Set_Status_Bit>
 800319a:	f000 fbe3 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

						}
					}
				}
			}
			else if(running_status_byte != 0){
 800319e:	4b4c      	ldr	r3, [pc, #304]	@ (80032d0 <UART2_RX_transfer_complete_callback+0xac4>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <UART2_RX_transfer_complete_callback+0x9a0>
 80031a8:	f000 fbdc 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

				if(Is_Data_Byte(rx_buffer) == YES){
 80031ac:	4b3a      	ldr	r3, [pc, #232]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031ae:	0018      	movs	r0, r3
 80031b0:	f7fd fe59 	bl	8000e66 <Is_Data_Byte>
 80031b4:	0003      	movs	r3, r0
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d000      	beq.n	80031bc <UART2_RX_transfer_complete_callback+0x9b0>
 80031ba:	e151      	b.n	8003460 <UART2_RX_transfer_complete_callback+0xc54>

					Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80031bc:	2380      	movs	r3, #128	@ 0x80
 80031be:	005a      	lsls	r2, r3, #1
 80031c0:	4b3d      	ldr	r3, [pc, #244]	@ (80032b8 <UART2_RX_transfer_complete_callback+0xaac>)
 80031c2:	0011      	movs	r1, r2
 80031c4:	0018      	movs	r0, r3
 80031c6:	f002 fd05 	bl	8005bd4 <Set_Status_Bit>

					if(Is_PC_Status_Byte(&running_status_byte) == YES){
 80031ca:	4b41      	ldr	r3, [pc, #260]	@ (80032d0 <UART2_RX_transfer_complete_callback+0xac4>)
 80031cc:	0018      	movs	r0, r3
 80031ce:	f7fd fe63 	bl	8000e98 <Is_PC_Status_Byte>
 80031d2:	0003      	movs	r3, r0
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d143      	bne.n	8003260 <UART2_RX_transfer_complete_callback+0xa54>

						if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 80031d8:	4b3f      	ldr	r3, [pc, #252]	@ (80032d8 <UART2_RX_transfer_complete_callback+0xacc>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	4b3c      	ldr	r3, [pc, #240]	@ (80032d0 <UART2_RX_transfer_complete_callback+0xac4>)
 80031e0:	0011      	movs	r1, r2
 80031e2:	0018      	movs	r0, r3
 80031e4:	f7fd ff46 	bl	8001074 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80031e8:	0003      	movs	r3, r0
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d008      	beq.n	8003200 <UART2_RX_transfer_complete_callback+0x9f4>
																|| (Is_OMNI_On(&statuses) == YES)){
 80031ee:	4b32      	ldr	r3, [pc, #200]	@ (80032b8 <UART2_RX_transfer_complete_callback+0xaac>)
 80031f0:	0018      	movs	r0, r3
 80031f2:	f7fd fff6 	bl	80011e2 <Is_OMNI_On>
 80031f6:	0003      	movs	r3, r0
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d001      	beq.n	8003200 <UART2_RX_transfer_complete_callback+0x9f4>
 80031fc:	f000 fbb2 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

							if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003200:	4b34      	ldr	r3, [pc, #208]	@ (80032d4 <UART2_RX_transfer_complete_callback+0xac8>)
 8003202:	0018      	movs	r0, r3
 8003204:	f7fd ff57 	bl	80010b6 <Is_Data_Buffer_Empty>
 8003208:	0003      	movs	r3, r0
 800320a:	2b01      	cmp	r3, #1
 800320c:	d001      	beq.n	8003212 <UART2_RX_transfer_complete_callback+0xa06>
 800320e:	f000 fba9 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

								//first data byte received
								if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 8003212:	4b21      	ldr	r3, [pc, #132]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003214:	2104      	movs	r1, #4
 8003216:	0018      	movs	r0, r3
 8003218:	f7fd ff9b 	bl	8001152 <Is_Program_Change_Data_Byte_In_Range>
 800321c:	0003      	movs	r3, r0
 800321e:	2b01      	cmp	r3, #1
 8003220:	d10f      	bne.n	8003242 <UART2_RX_transfer_complete_callback+0xa36>

									Set_All_Pots_to_PC_Mode();
 8003222:	f7fd fdcf 	bl	8000dc4 <Set_All_Pots_to_PC_Mode>
									preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 8003226:	4b1c      	ldr	r3, [pc, #112]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	b2db      	uxtb	r3, r3
 800322c:	3301      	adds	r3, #1
 800322e:	b2da      	uxtb	r2, r3
 8003230:	4b2a      	ldr	r3, [pc, #168]	@ (80032dc <UART2_RX_transfer_complete_callback+0xad0>)
 8003232:	701a      	strb	r2, [r3, #0]
									Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 8003234:	f7fd f976 	bl	8000524 <Update_Params_Based_On_Mode_Selected>
									Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003238:	4b1f      	ldr	r3, [pc, #124]	@ (80032b8 <UART2_RX_transfer_complete_callback+0xaac>)
 800323a:	2108      	movs	r1, #8
 800323c:	0018      	movs	r0, r3
 800323e:	f002 fcdb 	bl	8005bf8 <Clear_Status_Bit>
								}

								//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
								Clear_Data_Buffer(&MIDI_data);
 8003242:	4b24      	ldr	r3, [pc, #144]	@ (80032d4 <UART2_RX_transfer_complete_callback+0xac8>)
 8003244:	0018      	movs	r0, r3
 8003246:	f7fd ff66 	bl	8001116 <Clear_Data_Buffer>
								active_status_byte = 0;
 800324a:	4b20      	ldr	r3, [pc, #128]	@ (80032cc <UART2_RX_transfer_complete_callback+0xac0>)
 800324c:	2200      	movs	r2, #0
 800324e:	701a      	strb	r2, [r3, #0]

								//not really required
								Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003250:	4a19      	ldr	r2, [pc, #100]	@ (80032b8 <UART2_RX_transfer_complete_callback+0xaac>)
 8003252:	4b23      	ldr	r3, [pc, #140]	@ (80032e0 <UART2_RX_transfer_complete_callback+0xad4>)
 8003254:	0011      	movs	r1, r2
 8003256:	0018      	movs	r0, r3
 8003258:	f7fd ffdd 	bl	8001216 <Reset_and_Stop_MIDI_Software_Timer>
 800325c:	f000 fb82 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(&running_status_byte) == YES){
 8003260:	4b1b      	ldr	r3, [pc, #108]	@ (80032d0 <UART2_RX_transfer_complete_callback+0xac4>)
 8003262:	0018      	movs	r0, r3
 8003264:	f7fd fe34 	bl	8000ed0 <Is_CC_Status_Byte>
 8003268:	0003      	movs	r3, r0
 800326a:	2b01      	cmp	r3, #1
 800326c:	d001      	beq.n	8003272 <UART2_RX_transfer_complete_callback+0xa66>
 800326e:	f000 fb79 	bl	8003964 <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003272:	4b18      	ldr	r3, [pc, #96]	@ (80032d4 <UART2_RX_transfer_complete_callback+0xac8>)
 8003274:	0018      	movs	r0, r3
 8003276:	f7fd ff1e 	bl	80010b6 <Is_Data_Buffer_Empty>
 800327a:	0003      	movs	r3, r0
 800327c:	2b01      	cmp	r3, #1
 800327e:	d131      	bne.n	80032e4 <UART2_RX_transfer_complete_callback+0xad8>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8003280:	4b05      	ldr	r3, [pc, #20]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	b2da      	uxtb	r2, r3
 8003286:	4b13      	ldr	r3, [pc, #76]	@ (80032d4 <UART2_RX_transfer_complete_callback+0xac8>)
 8003288:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 800328a:	4b15      	ldr	r3, [pc, #84]	@ (80032e0 <UART2_RX_transfer_complete_callback+0xad4>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	e368      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>
 8003292:	46c0      	nop			@ (mov r8, r8)
 8003294:	20000428 	.word	0x20000428
 8003298:	2000055c 	.word	0x2000055c
 800329c:	20000cb2 	.word	0x20000cb2
 80032a0:	50000800 	.word	0x50000800
 80032a4:	20000d14 	.word	0x20000d14
 80032a8:	20000950 	.word	0x20000950
 80032ac:	2000043c 	.word	0x2000043c
 80032b0:	20000d38 	.word	0x20000d38
 80032b4:	20000ccc 	.word	0x20000ccc
 80032b8:	20000cb4 	.word	0x20000cb4
 80032bc:	20000020 	.word	0x20000020
 80032c0:	0800dc38 	.word	0x0800dc38
 80032c4:	20000cc0 	.word	0x20000cc0
 80032c8:	2000057c 	.word	0x2000057c
 80032cc:	2000054e 	.word	0x2000054e
 80032d0:	2000054f 	.word	0x2000054f
 80032d4:	20000550 	.word	0x20000550
 80032d8:	2000054d 	.word	0x2000054d
 80032dc:	20000540 	.word	0x20000540
 80032e0:	20000cbc 	.word	0x20000cbc

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 80032e4:	4bd6      	ldr	r3, [pc, #856]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe34>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	4bd6      	ldr	r3, [pc, #856]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe38>)
 80032ec:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80032ee:	4ad6      	ldr	r2, [pc, #856]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe3c>)
 80032f0:	4bd6      	ldr	r3, [pc, #856]	@ (800364c <UART2_RX_transfer_complete_callback+0xe40>)
 80032f2:	0011      	movs	r1, r2
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7fd ff8e 	bl	8001216 <Reset_and_Stop_MIDI_Software_Timer>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80032fa:	4bd2      	ldr	r3, [pc, #840]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe38>)
 80032fc:	0018      	movs	r0, r3
 80032fe:	f7fd fe03 	bl	8000f08 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 8003302:	0003      	movs	r3, r0
 8003304:	2b01      	cmp	r3, #1
 8003306:	d14c      	bne.n	80033a2 <UART2_RX_transfer_complete_callback+0xb96>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES){
 8003308:	4bd1      	ldr	r3, [pc, #836]	@ (8003650 <UART2_RX_transfer_complete_callback+0xe44>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	4bd1      	ldr	r3, [pc, #836]	@ (8003654 <UART2_RX_transfer_complete_callback+0xe48>)
 8003310:	0011      	movs	r1, r2
 8003312:	0018      	movs	r0, r3
 8003314:	f7fd feae 	bl	8001074 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003318:	0003      	movs	r3, r0
 800331a:	2b01      	cmp	r3, #1
 800331c:	d139      	bne.n	8003392 <UART2_RX_transfer_complete_callback+0xb86>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 800331e:	4ace      	ldr	r2, [pc, #824]	@ (8003658 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003320:	4bc8      	ldr	r3, [pc, #800]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe38>)
 8003322:	0011      	movs	r1, r2
 8003324:	0018      	movs	r0, r3
 8003326:	f7fd fe4e 	bl	8000fc6 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 800332a:	0003      	movs	r3, r0
 800332c:	2b01      	cmp	r3, #1
 800332e:	d130      	bne.n	8003392 <UART2_RX_transfer_complete_callback+0xb86>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 8003330:	4bc4      	ldr	r3, [pc, #784]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe38>)
 8003332:	785b      	ldrb	r3, [r3, #1]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b79      	cmp	r3, #121	@ 0x79
 8003338:	d10b      	bne.n	8003352 <UART2_RX_transfer_complete_callback+0xb46>

											Reset_All_Controllers(&params, &delay_line);
 800333a:	4ac8      	ldr	r2, [pc, #800]	@ (800365c <UART2_RX_transfer_complete_callback+0xe50>)
 800333c:	4bc8      	ldr	r3, [pc, #800]	@ (8003660 <UART2_RX_transfer_complete_callback+0xe54>)
 800333e:	0011      	movs	r1, r2
 8003340:	0018      	movs	r0, r3
 8003342:	f7fd ff83 	bl	800124c <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003346:	4bc0      	ldr	r3, [pc, #768]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003348:	2108      	movs	r1, #8
 800334a:	0018      	movs	r0, r3
 800334c:	f002 fc54 	bl	8005bf8 <Clear_Status_Bit>
 8003350:	e01f      	b.n	8003392 <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 8003352:	4bbc      	ldr	r3, [pc, #752]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe38>)
 8003354:	785b      	ldrb	r3, [r3, #1]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b7a      	cmp	r3, #122	@ 0x7a
 800335a:	d107      	bne.n	800336c <UART2_RX_transfer_complete_callback+0xb60>

											Set_Local_Control();
 800335c:	f7fd ffd0 	bl	8001300 <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003360:	4bb9      	ldr	r3, [pc, #740]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003362:	2108      	movs	r1, #8
 8003364:	0018      	movs	r0, r3
 8003366:	f002 fc47 	bl	8005bf8 <Clear_Status_Bit>
 800336a:	e012      	b.n	8003392 <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 800336c:	4bb5      	ldr	r3, [pc, #724]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe38>)
 800336e:	785b      	ldrb	r3, [r3, #1]
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b7c      	cmp	r3, #124	@ 0x7c
 8003374:	d104      	bne.n	8003380 <UART2_RX_transfer_complete_callback+0xb74>

											Set_OMNI_Off(&statuses);
 8003376:	4bb4      	ldr	r3, [pc, #720]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003378:	0018      	movs	r0, r3
 800337a:	f7fd fff9 	bl	8001370 <Set_OMNI_Off>
 800337e:	e008      	b.n	8003392 <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003380:	4bb0      	ldr	r3, [pc, #704]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe38>)
 8003382:	785b      	ldrb	r3, [r3, #1]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b7d      	cmp	r3, #125	@ 0x7d
 8003388:	d103      	bne.n	8003392 <UART2_RX_transfer_complete_callback+0xb86>

											Set_OMNI_On(&statuses);
 800338a:	4baf      	ldr	r3, [pc, #700]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe3c>)
 800338c:	0018      	movs	r0, r3
 800338e:	f7fd ffff 	bl	8001390 <Set_OMNI_On>
										}
									}
								}

								//not required
								active_status_byte = 0;
 8003392:	4bb4      	ldr	r3, [pc, #720]	@ (8003664 <UART2_RX_transfer_complete_callback+0xe58>)
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003398:	4baa      	ldr	r3, [pc, #680]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe38>)
 800339a:	0018      	movs	r0, r3
 800339c:	f7fd febb 	bl	8001116 <Clear_Data_Buffer>
 80033a0:	e2e0      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80033a2:	4ba8      	ldr	r3, [pc, #672]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe38>)
 80033a4:	0018      	movs	r0, r3
 80033a6:	f7fd fddb 	bl	8000f60 <Is_Utilised_CC_First_Data_Byte>
 80033aa:	0003      	movs	r3, r0
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d14f      	bne.n	8003450 <UART2_RX_transfer_complete_callback+0xc44>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 80033b0:	4ba7      	ldr	r3, [pc, #668]	@ (8003650 <UART2_RX_transfer_complete_callback+0xe44>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	4ba7      	ldr	r3, [pc, #668]	@ (8003654 <UART2_RX_transfer_complete_callback+0xe48>)
 80033b8:	0011      	movs	r1, r2
 80033ba:	0018      	movs	r0, r3
 80033bc:	f7fd fe5a 	bl	8001074 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80033c0:	0003      	movs	r3, r0
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d006      	beq.n	80033d4 <UART2_RX_transfer_complete_callback+0xbc8>
										|| (Is_OMNI_On(&statuses) == YES)){
 80033c6:	4ba0      	ldr	r3, [pc, #640]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe3c>)
 80033c8:	0018      	movs	r0, r3
 80033ca:	f7fd ff0a 	bl	80011e2 <Is_OMNI_On>
 80033ce:	0003      	movs	r3, r0
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d135      	bne.n	8003440 <UART2_RX_transfer_complete_callback+0xc34>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 80033d4:	4b9b      	ldr	r3, [pc, #620]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe38>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b14      	cmp	r3, #20
 80033dc:	d104      	bne.n	80033e8 <UART2_RX_transfer_complete_callback+0xbdc>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80033de:	4b9e      	ldr	r3, [pc, #632]	@ (8003658 <UART2_RX_transfer_complete_callback+0xe4c>)
 80033e0:	0018      	movs	r0, r3
 80033e2:	f7fd fc6d 	bl	8000cc0 <Set_Waveshape_to_CC_Mode_and_Value>
 80033e6:	e02b      	b.n	8003440 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 80033e8:	4b96      	ldr	r3, [pc, #600]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe38>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b15      	cmp	r3, #21
 80033f0:	d109      	bne.n	8003406 <UART2_RX_transfer_complete_callback+0xbfa>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80033f2:	4b99      	ldr	r3, [pc, #612]	@ (8003658 <UART2_RX_transfer_complete_callback+0xe4c>)
 80033f4:	0018      	movs	r0, r3
 80033f6:	f7fd fc7d 	bl	8000cf4 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80033fa:	4b93      	ldr	r3, [pc, #588]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe3c>)
 80033fc:	2108      	movs	r1, #8
 80033fe:	0018      	movs	r0, r3
 8003400:	f002 fbfa 	bl	8005bf8 <Clear_Status_Bit>
 8003404:	e01c      	b.n	8003440 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8003406:	4b8f      	ldr	r3, [pc, #572]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe38>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b16      	cmp	r3, #22
 800340e:	d104      	bne.n	800341a <UART2_RX_transfer_complete_callback+0xc0e>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003410:	4b91      	ldr	r3, [pc, #580]	@ (8003658 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003412:	0018      	movs	r0, r3
 8003414:	f7fd fc88 	bl	8000d28 <Set_Depth_to_CC_Mode_and_Value>
 8003418:	e012      	b.n	8003440 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 800341a:	4b8a      	ldr	r3, [pc, #552]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe38>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b17      	cmp	r3, #23
 8003422:	d104      	bne.n	800342e <UART2_RX_transfer_complete_callback+0xc22>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003424:	4b8c      	ldr	r3, [pc, #560]	@ (8003658 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003426:	0018      	movs	r0, r3
 8003428:	f7fd fc98 	bl	8000d5c <Set_Symmetry_to_CC_Mode_and_Value>
 800342c:	e008      	b.n	8003440 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 800342e:	4b85      	ldr	r3, [pc, #532]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe38>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b18      	cmp	r3, #24
 8003436:	d103      	bne.n	8003440 <UART2_RX_transfer_complete_callback+0xc34>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003438:	4b87      	ldr	r3, [pc, #540]	@ (8003658 <UART2_RX_transfer_complete_callback+0xe4c>)
 800343a:	0018      	movs	r0, r3
 800343c:	f7fd fca8 	bl	8000d90 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 8003440:	4b88      	ldr	r3, [pc, #544]	@ (8003664 <UART2_RX_transfer_complete_callback+0xe58>)
 8003442:	2200      	movs	r2, #0
 8003444:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003446:	4b7f      	ldr	r3, [pc, #508]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe38>)
 8003448:	0018      	movs	r0, r3
 800344a:	f7fd fe64 	bl	8001116 <Clear_Data_Buffer>
 800344e:	e289      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 8003450:	4b84      	ldr	r3, [pc, #528]	@ (8003664 <UART2_RX_transfer_complete_callback+0xe58>)
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003456:	4b7b      	ldr	r3, [pc, #492]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe38>)
 8003458:	0018      	movs	r0, r3
 800345a:	f7fd fe5c 	bl	8001116 <Clear_Data_Buffer>
 800345e:	e281      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>
					}
					//don't need to check Sysex with running status, as not supported by MIDI
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8003460:	4b78      	ldr	r3, [pc, #480]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe38>)
 8003462:	0018      	movs	r0, r3
 8003464:	f7fd fe57 	bl	8001116 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003468:	4a77      	ldr	r2, [pc, #476]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe3c>)
 800346a:	4b78      	ldr	r3, [pc, #480]	@ (800364c <UART2_RX_transfer_complete_callback+0xe40>)
 800346c:	0011      	movs	r1, r2
 800346e:	0018      	movs	r0, r3
 8003470:	f7fd fed1 	bl	8001216 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003474:	4b72      	ldr	r3, [pc, #456]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe34>)
 8003476:	0018      	movs	r0, r3
 8003478:	f7fd fd0e 	bl	8000e98 <Is_PC_Status_Byte>
 800347c:	0003      	movs	r3, r0
 800347e:	2b01      	cmp	r3, #1
 8003480:	d131      	bne.n	80034e6 <UART2_RX_transfer_complete_callback+0xcda>

						running_status_byte = (uint8_t)*rx_buffer;
 8003482:	4b6f      	ldr	r3, [pc, #444]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe34>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	b2da      	uxtb	r2, r3
 8003488:	4b72      	ldr	r3, [pc, #456]	@ (8003654 <UART2_RX_transfer_complete_callback+0xe48>)
 800348a:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 800348c:	4b70      	ldr	r3, [pc, #448]	@ (8003650 <UART2_RX_transfer_complete_callback+0xe44>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	4b6b      	ldr	r3, [pc, #428]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe34>)
 8003494:	0011      	movs	r1, r2
 8003496:	0018      	movs	r0, r3
 8003498:	f7fd fdec 	bl	8001074 <Is_Channelised_Status_Byte_On_Basic_Channel>
 800349c:	0003      	movs	r3, r0
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d10c      	bne.n	80034bc <UART2_RX_transfer_complete_callback+0xcb0>

							active_status_byte = (uint8_t)*rx_buffer;
 80034a2:	4b67      	ldr	r3, [pc, #412]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe34>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	4b6e      	ldr	r3, [pc, #440]	@ (8003664 <UART2_RX_transfer_complete_callback+0xe58>)
 80034aa:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80034ac:	2380      	movs	r3, #128	@ 0x80
 80034ae:	005a      	lsls	r2, r3, #1
 80034b0:	4b65      	ldr	r3, [pc, #404]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe3c>)
 80034b2:	0011      	movs	r1, r2
 80034b4:	0018      	movs	r0, r3
 80034b6:	f002 fb8d 	bl	8005bd4 <Set_Status_Bit>
 80034ba:	e253      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 80034bc:	4b62      	ldr	r3, [pc, #392]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe3c>)
 80034be:	0018      	movs	r0, r3
 80034c0:	f7fd fe8f 	bl	80011e2 <Is_OMNI_On>
 80034c4:	0003      	movs	r3, r0
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d000      	beq.n	80034cc <UART2_RX_transfer_complete_callback+0xcc0>
 80034ca:	e24b      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 80034cc:	4b5c      	ldr	r3, [pc, #368]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe34>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	4b64      	ldr	r3, [pc, #400]	@ (8003664 <UART2_RX_transfer_complete_callback+0xe58>)
 80034d4:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80034d6:	2380      	movs	r3, #128	@ 0x80
 80034d8:	005a      	lsls	r2, r3, #1
 80034da:	4b5b      	ldr	r3, [pc, #364]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe3c>)
 80034dc:	0011      	movs	r1, r2
 80034de:	0018      	movs	r0, r3
 80034e0:	f002 fb78 	bl	8005bd4 <Set_Status_Bit>
 80034e4:	e23e      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80034e6:	4b56      	ldr	r3, [pc, #344]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe34>)
 80034e8:	0018      	movs	r0, r3
 80034ea:	f7fd fcf1 	bl	8000ed0 <Is_CC_Status_Byte>
 80034ee:	0003      	movs	r3, r0
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d131      	bne.n	8003558 <UART2_RX_transfer_complete_callback+0xd4c>

						running_status_byte = (uint8_t)*rx_buffer;
 80034f4:	4b52      	ldr	r3, [pc, #328]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe34>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	4b56      	ldr	r3, [pc, #344]	@ (8003654 <UART2_RX_transfer_complete_callback+0xe48>)
 80034fc:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80034fe:	4b54      	ldr	r3, [pc, #336]	@ (8003650 <UART2_RX_transfer_complete_callback+0xe44>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	b2da      	uxtb	r2, r3
 8003504:	4b4e      	ldr	r3, [pc, #312]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe34>)
 8003506:	0011      	movs	r1, r2
 8003508:	0018      	movs	r0, r3
 800350a:	f7fd fdb3 	bl	8001074 <Is_Channelised_Status_Byte_On_Basic_Channel>
 800350e:	0003      	movs	r3, r0
 8003510:	2b01      	cmp	r3, #1
 8003512:	d10c      	bne.n	800352e <UART2_RX_transfer_complete_callback+0xd22>

							active_status_byte = (uint8_t)*rx_buffer;
 8003514:	4b4a      	ldr	r3, [pc, #296]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe34>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	b2da      	uxtb	r2, r3
 800351a:	4b52      	ldr	r3, [pc, #328]	@ (8003664 <UART2_RX_transfer_complete_callback+0xe58>)
 800351c:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800351e:	2380      	movs	r3, #128	@ 0x80
 8003520:	005a      	lsls	r2, r3, #1
 8003522:	4b49      	ldr	r3, [pc, #292]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003524:	0011      	movs	r1, r2
 8003526:	0018      	movs	r0, r3
 8003528:	f002 fb54 	bl	8005bd4 <Set_Status_Bit>
 800352c:	e21a      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 800352e:	4b46      	ldr	r3, [pc, #280]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003530:	0018      	movs	r0, r3
 8003532:	f7fd fe56 	bl	80011e2 <Is_OMNI_On>
 8003536:	0003      	movs	r3, r0
 8003538:	2b01      	cmp	r3, #1
 800353a:	d000      	beq.n	800353e <UART2_RX_transfer_complete_callback+0xd32>
 800353c:	e212      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 800353e:	4b40      	ldr	r3, [pc, #256]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe34>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	b2da      	uxtb	r2, r3
 8003544:	4b47      	ldr	r3, [pc, #284]	@ (8003664 <UART2_RX_transfer_complete_callback+0xe58>)
 8003546:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003548:	2380      	movs	r3, #128	@ 0x80
 800354a:	005a      	lsls	r2, r3, #1
 800354c:	4b3e      	ldr	r3, [pc, #248]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe3c>)
 800354e:	0011      	movs	r1, r2
 8003550:	0018      	movs	r0, r3
 8003552:	f002 fb3f 	bl	8005bd4 <Set_Status_Bit>
 8003556:	e205      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003558:	4b39      	ldr	r3, [pc, #228]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe34>)
 800355a:	0018      	movs	r0, r3
 800355c:	f7fd fd7a 	bl	8001054 <Is_Sysex_Start_Status_Byte>
 8003560:	0003      	movs	r3, r0
 8003562:	2b01      	cmp	r3, #1
 8003564:	d000      	beq.n	8003568 <UART2_RX_transfer_complete_callback+0xd5c>
 8003566:	e1fd      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8003568:	4b35      	ldr	r3, [pc, #212]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe34>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	b2da      	uxtb	r2, r3
 800356e:	4b3d      	ldr	r3, [pc, #244]	@ (8003664 <UART2_RX_transfer_complete_callback+0xe58>)
 8003570:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003572:	4b38      	ldr	r3, [pc, #224]	@ (8003654 <UART2_RX_transfer_complete_callback+0xe48>)
 8003574:	2200      	movs	r2, #0
 8003576:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003578:	2380      	movs	r3, #128	@ 0x80
 800357a:	005a      	lsls	r2, r3, #1
 800357c:	4b32      	ldr	r3, [pc, #200]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe3c>)
 800357e:	0011      	movs	r1, r2
 8003580:	0018      	movs	r0, r3
 8003582:	f002 fb27 	bl	8005bd4 <Set_Status_Bit>
 8003586:	e1ed      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
			}
		}
		else if(active_status_byte != 0){ //CC/PC only called if on basic channel or omni ON
 8003588:	4b36      	ldr	r3, [pc, #216]	@ (8003664 <UART2_RX_transfer_complete_callback+0xe58>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d100      	bne.n	8003594 <UART2_RX_transfer_complete_callback+0xd88>
 8003592:	e1e7      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>

			if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out) == YES){
 8003594:	2380      	movs	r3, #128	@ 0x80
 8003596:	009a      	lsls	r2, r3, #2
 8003598:	4b2b      	ldr	r3, [pc, #172]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe3c>)
 800359a:	0011      	movs	r1, r2
 800359c:	0018      	movs	r0, r3
 800359e:	f002 fb05 	bl	8005bac <Get_Status_Bit>
 80035a2:	0003      	movs	r3, r0
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d10d      	bne.n	80035c4 <UART2_RX_transfer_complete_callback+0xdb8>

				active_status_byte = 0;
 80035a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003664 <UART2_RX_transfer_complete_callback+0xe58>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 80035ae:	4b25      	ldr	r3, [pc, #148]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe38>)
 80035b0:	0018      	movs	r0, r3
 80035b2:	f7fd fdb0 	bl	8001116 <Clear_Data_Buffer>
				//running status is kept

				Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80035b6:	4a24      	ldr	r2, [pc, #144]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe3c>)
 80035b8:	4b24      	ldr	r3, [pc, #144]	@ (800364c <UART2_RX_transfer_complete_callback+0xe40>)
 80035ba:	0011      	movs	r1, r2
 80035bc:	0018      	movs	r0, r3
 80035be:	f7fd fe2a 	bl	8001216 <Reset_and_Stop_MIDI_Software_Timer>
 80035c2:	e1cf      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>
				//In this condition, the data bytes haven't been received in enough time, so any subsequent data bytes
				//sent after this are simply ignored
			}
			else{ //not timed out

				if(Is_Data_Byte(rx_buffer) == YES){
 80035c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe34>)
 80035c6:	0018      	movs	r0, r3
 80035c8:	f7fd fc4d 	bl	8000e66 <Is_Data_Byte>
 80035cc:	0003      	movs	r3, r0
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d000      	beq.n	80035d4 <UART2_RX_transfer_complete_callback+0xdc8>
 80035d2:	e133      	b.n	800383c <UART2_RX_transfer_complete_callback+0x1030>

					if(Is_PC_Status_Byte(&active_status_byte) == YES){
 80035d4:	4b23      	ldr	r3, [pc, #140]	@ (8003664 <UART2_RX_transfer_complete_callback+0xe58>)
 80035d6:	0018      	movs	r0, r3
 80035d8:	f7fd fc5e 	bl	8000e98 <Is_PC_Status_Byte>
 80035dc:	0003      	movs	r3, r0
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d144      	bne.n	800366c <UART2_RX_transfer_complete_callback+0xe60>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80035e2:	4b18      	ldr	r3, [pc, #96]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe38>)
 80035e4:	0018      	movs	r0, r3
 80035e6:	f7fd fd66 	bl	80010b6 <Is_Data_Buffer_Empty>
 80035ea:	0003      	movs	r3, r0
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d000      	beq.n	80035f2 <UART2_RX_transfer_complete_callback+0xde6>
 80035f0:	e1b8      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>

							//first data byte received
							if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 80035f2:	4b13      	ldr	r3, [pc, #76]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe34>)
 80035f4:	2104      	movs	r1, #4
 80035f6:	0018      	movs	r0, r3
 80035f8:	f7fd fdab 	bl	8001152 <Is_Program_Change_Data_Byte_In_Range>
 80035fc:	0003      	movs	r3, r0
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d10f      	bne.n	8003622 <UART2_RX_transfer_complete_callback+0xe16>

								Set_All_Pots_to_PC_Mode();
 8003602:	f7fd fbdf 	bl	8000dc4 <Set_All_Pots_to_PC_Mode>
								preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 8003606:	4b0e      	ldr	r3, [pc, #56]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe34>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	3301      	adds	r3, #1
 800360e:	b2da      	uxtb	r2, r3
 8003610:	4b15      	ldr	r3, [pc, #84]	@ (8003668 <UART2_RX_transfer_complete_callback+0xe5c>)
 8003612:	701a      	strb	r2, [r3, #0]
								Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 8003614:	f7fc ff86 	bl	8000524 <Update_Params_Based_On_Mode_Selected>
								Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003618:	4b0b      	ldr	r3, [pc, #44]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe3c>)
 800361a:	2108      	movs	r1, #8
 800361c:	0018      	movs	r0, r3
 800361e:	f002 faeb 	bl	8005bf8 <Clear_Status_Bit>
							}

							//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
							Clear_Data_Buffer(&MIDI_data);
 8003622:	4b08      	ldr	r3, [pc, #32]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe38>)
 8003624:	0018      	movs	r0, r3
 8003626:	f7fd fd76 	bl	8001116 <Clear_Data_Buffer>
							active_status_byte = 0;
 800362a:	4b0e      	ldr	r3, [pc, #56]	@ (8003664 <UART2_RX_transfer_complete_callback+0xe58>)
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]

							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003630:	4a05      	ldr	r2, [pc, #20]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003632:	4b06      	ldr	r3, [pc, #24]	@ (800364c <UART2_RX_transfer_complete_callback+0xe40>)
 8003634:	0011      	movs	r1, r2
 8003636:	0018      	movs	r0, r3
 8003638:	f7fd fded 	bl	8001216 <Reset_and_Stop_MIDI_Software_Timer>
 800363c:	e192      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>
 800363e:	46c0      	nop			@ (mov r8, r8)
 8003640:	2000055c 	.word	0x2000055c
 8003644:	20000550 	.word	0x20000550
 8003648:	20000cb4 	.word	0x20000cb4
 800364c:	20000cbc 	.word	0x20000cbc
 8003650:	2000054d 	.word	0x2000054d
 8003654:	2000054f 	.word	0x2000054f
 8003658:	20000551 	.word	0x20000551
 800365c:	20000020 	.word	0x20000020
 8003660:	20000ccc 	.word	0x20000ccc
 8003664:	2000054e 	.word	0x2000054e
 8003668:	20000540 	.word	0x20000540

						}
					}
					else if(Is_CC_Status_Byte(&active_status_byte) == YES){
 800366c:	4bc4      	ldr	r3, [pc, #784]	@ (8003980 <UART2_RX_transfer_complete_callback+0x1174>)
 800366e:	0018      	movs	r0, r3
 8003670:	f7fd fc2e 	bl	8000ed0 <Is_CC_Status_Byte>
 8003674:	0003      	movs	r3, r0
 8003676:	2b01      	cmp	r3, #1
 8003678:	d000      	beq.n	800367c <UART2_RX_transfer_complete_callback+0xe70>
 800367a:	e0d2      	b.n	8003822 <UART2_RX_transfer_complete_callback+0x1016>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800367c:	4bc1      	ldr	r3, [pc, #772]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1178>)
 800367e:	0018      	movs	r0, r3
 8003680:	f7fd fd19 	bl	80010b6 <Is_Data_Buffer_Empty>
 8003684:	0003      	movs	r3, r0
 8003686:	2b01      	cmp	r3, #1
 8003688:	d108      	bne.n	800369c <UART2_RX_transfer_complete_callback+0xe90>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 800368a:	4bbf      	ldr	r3, [pc, #764]	@ (8003988 <UART2_RX_transfer_complete_callback+0x117c>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	b2da      	uxtb	r2, r3
 8003690:	4bbc      	ldr	r3, [pc, #752]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1178>)
 8003692:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 8003694:	4bbd      	ldr	r3, [pc, #756]	@ (800398c <UART2_RX_transfer_complete_callback+0x1180>)
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	e163      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 800369c:	4bba      	ldr	r3, [pc, #744]	@ (8003988 <UART2_RX_transfer_complete_callback+0x117c>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	4bb8      	ldr	r3, [pc, #736]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1178>)
 80036a4:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80036a6:	4aba      	ldr	r2, [pc, #744]	@ (8003990 <UART2_RX_transfer_complete_callback+0x1184>)
 80036a8:	4bb8      	ldr	r3, [pc, #736]	@ (800398c <UART2_RX_transfer_complete_callback+0x1180>)
 80036aa:	0011      	movs	r1, r2
 80036ac:	0018      	movs	r0, r3
 80036ae:	f7fd fdb2 	bl	8001216 <Reset_and_Stop_MIDI_Software_Timer>
							Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80036b2:	4bb7      	ldr	r3, [pc, #732]	@ (8003990 <UART2_RX_transfer_complete_callback+0x1184>)
 80036b4:	2108      	movs	r1, #8
 80036b6:	0018      	movs	r0, r3
 80036b8:	f002 fa9e 	bl	8005bf8 <Clear_Status_Bit>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80036bc:	4bb1      	ldr	r3, [pc, #708]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1178>)
 80036be:	0018      	movs	r0, r3
 80036c0:	f7fd fc22 	bl	8000f08 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 80036c4:	0003      	movs	r3, r0
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d14c      	bne.n	8003764 <UART2_RX_transfer_complete_callback+0xf58>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES){
 80036ca:	4bb2      	ldr	r3, [pc, #712]	@ (8003994 <UART2_RX_transfer_complete_callback+0x1188>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	4bab      	ldr	r3, [pc, #684]	@ (8003980 <UART2_RX_transfer_complete_callback+0x1174>)
 80036d2:	0011      	movs	r1, r2
 80036d4:	0018      	movs	r0, r3
 80036d6:	f7fd fccd 	bl	8001074 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80036da:	0003      	movs	r3, r0
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d139      	bne.n	8003754 <UART2_RX_transfer_complete_callback+0xf48>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 80036e0:	4aad      	ldr	r2, [pc, #692]	@ (8003998 <UART2_RX_transfer_complete_callback+0x118c>)
 80036e2:	4ba8      	ldr	r3, [pc, #672]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1178>)
 80036e4:	0011      	movs	r1, r2
 80036e6:	0018      	movs	r0, r3
 80036e8:	f7fd fc6d 	bl	8000fc6 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 80036ec:	0003      	movs	r3, r0
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d130      	bne.n	8003754 <UART2_RX_transfer_complete_callback+0xf48>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 80036f2:	4ba4      	ldr	r3, [pc, #656]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1178>)
 80036f4:	785b      	ldrb	r3, [r3, #1]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b79      	cmp	r3, #121	@ 0x79
 80036fa:	d10b      	bne.n	8003714 <UART2_RX_transfer_complete_callback+0xf08>

											Reset_All_Controllers(&params, &delay_line);
 80036fc:	4aa7      	ldr	r2, [pc, #668]	@ (800399c <UART2_RX_transfer_complete_callback+0x1190>)
 80036fe:	4ba8      	ldr	r3, [pc, #672]	@ (80039a0 <UART2_RX_transfer_complete_callback+0x1194>)
 8003700:	0011      	movs	r1, r2
 8003702:	0018      	movs	r0, r3
 8003704:	f7fd fda2 	bl	800124c <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003708:	4ba1      	ldr	r3, [pc, #644]	@ (8003990 <UART2_RX_transfer_complete_callback+0x1184>)
 800370a:	2108      	movs	r1, #8
 800370c:	0018      	movs	r0, r3
 800370e:	f002 fa73 	bl	8005bf8 <Clear_Status_Bit>
 8003712:	e01f      	b.n	8003754 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 8003714:	4b9b      	ldr	r3, [pc, #620]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1178>)
 8003716:	785b      	ldrb	r3, [r3, #1]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b7a      	cmp	r3, #122	@ 0x7a
 800371c:	d107      	bne.n	800372e <UART2_RX_transfer_complete_callback+0xf22>

											Set_Local_Control();
 800371e:	f7fd fdef 	bl	8001300 <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003722:	4b9b      	ldr	r3, [pc, #620]	@ (8003990 <UART2_RX_transfer_complete_callback+0x1184>)
 8003724:	2108      	movs	r1, #8
 8003726:	0018      	movs	r0, r3
 8003728:	f002 fa66 	bl	8005bf8 <Clear_Status_Bit>
 800372c:	e012      	b.n	8003754 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 800372e:	4b95      	ldr	r3, [pc, #596]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1178>)
 8003730:	785b      	ldrb	r3, [r3, #1]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b7c      	cmp	r3, #124	@ 0x7c
 8003736:	d104      	bne.n	8003742 <UART2_RX_transfer_complete_callback+0xf36>

											Set_OMNI_Off(&statuses);
 8003738:	4b95      	ldr	r3, [pc, #596]	@ (8003990 <UART2_RX_transfer_complete_callback+0x1184>)
 800373a:	0018      	movs	r0, r3
 800373c:	f7fd fe18 	bl	8001370 <Set_OMNI_Off>
 8003740:	e008      	b.n	8003754 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003742:	4b90      	ldr	r3, [pc, #576]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1178>)
 8003744:	785b      	ldrb	r3, [r3, #1]
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b7d      	cmp	r3, #125	@ 0x7d
 800374a:	d103      	bne.n	8003754 <UART2_RX_transfer_complete_callback+0xf48>

											Set_OMNI_On(&statuses);
 800374c:	4b90      	ldr	r3, [pc, #576]	@ (8003990 <UART2_RX_transfer_complete_callback+0x1184>)
 800374e:	0018      	movs	r0, r3
 8003750:	f7fd fe1e 	bl	8001390 <Set_OMNI_On>
										}
									}
								}

								active_status_byte = 0;
 8003754:	4b8a      	ldr	r3, [pc, #552]	@ (8003980 <UART2_RX_transfer_complete_callback+0x1174>)
 8003756:	2200      	movs	r2, #0
 8003758:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 800375a:	4b8a      	ldr	r3, [pc, #552]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1178>)
 800375c:	0018      	movs	r0, r3
 800375e:	f7fd fcda 	bl	8001116 <Clear_Data_Buffer>
 8003762:	e0ff      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003764:	4b87      	ldr	r3, [pc, #540]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1178>)
 8003766:	0018      	movs	r0, r3
 8003768:	f7fd fbfa 	bl	8000f60 <Is_Utilised_CC_First_Data_Byte>
 800376c:	0003      	movs	r3, r0
 800376e:	2b01      	cmp	r3, #1
 8003770:	d14f      	bne.n	8003812 <UART2_RX_transfer_complete_callback+0x1006>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES)
 8003772:	4b88      	ldr	r3, [pc, #544]	@ (8003994 <UART2_RX_transfer_complete_callback+0x1188>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	b2da      	uxtb	r2, r3
 8003778:	4b81      	ldr	r3, [pc, #516]	@ (8003980 <UART2_RX_transfer_complete_callback+0x1174>)
 800377a:	0011      	movs	r1, r2
 800377c:	0018      	movs	r0, r3
 800377e:	f7fd fc79 	bl	8001074 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003782:	0003      	movs	r3, r0
 8003784:	2b01      	cmp	r3, #1
 8003786:	d006      	beq.n	8003796 <UART2_RX_transfer_complete_callback+0xf8a>
										|| (Is_OMNI_On(&statuses) == YES)){
 8003788:	4b81      	ldr	r3, [pc, #516]	@ (8003990 <UART2_RX_transfer_complete_callback+0x1184>)
 800378a:	0018      	movs	r0, r3
 800378c:	f7fd fd29 	bl	80011e2 <Is_OMNI_On>
 8003790:	0003      	movs	r3, r0
 8003792:	2b01      	cmp	r3, #1
 8003794:	d135      	bne.n	8003802 <UART2_RX_transfer_complete_callback+0xff6>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 8003796:	4b7b      	ldr	r3, [pc, #492]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1178>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b14      	cmp	r3, #20
 800379e:	d104      	bne.n	80037aa <UART2_RX_transfer_complete_callback+0xf9e>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80037a0:	4b7d      	ldr	r3, [pc, #500]	@ (8003998 <UART2_RX_transfer_complete_callback+0x118c>)
 80037a2:	0018      	movs	r0, r3
 80037a4:	f7fd fa8c 	bl	8000cc0 <Set_Waveshape_to_CC_Mode_and_Value>
 80037a8:	e02b      	b.n	8003802 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 80037aa:	4b76      	ldr	r3, [pc, #472]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1178>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b15      	cmp	r3, #21
 80037b2:	d109      	bne.n	80037c8 <UART2_RX_transfer_complete_callback+0xfbc>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80037b4:	4b78      	ldr	r3, [pc, #480]	@ (8003998 <UART2_RX_transfer_complete_callback+0x118c>)
 80037b6:	0018      	movs	r0, r3
 80037b8:	f7fd fa9c 	bl	8000cf4 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80037bc:	4b74      	ldr	r3, [pc, #464]	@ (8003990 <UART2_RX_transfer_complete_callback+0x1184>)
 80037be:	2108      	movs	r1, #8
 80037c0:	0018      	movs	r0, r3
 80037c2:	f002 fa19 	bl	8005bf8 <Clear_Status_Bit>
 80037c6:	e01c      	b.n	8003802 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 80037c8:	4b6e      	ldr	r3, [pc, #440]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1178>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b16      	cmp	r3, #22
 80037d0:	d104      	bne.n	80037dc <UART2_RX_transfer_complete_callback+0xfd0>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80037d2:	4b71      	ldr	r3, [pc, #452]	@ (8003998 <UART2_RX_transfer_complete_callback+0x118c>)
 80037d4:	0018      	movs	r0, r3
 80037d6:	f7fd faa7 	bl	8000d28 <Set_Depth_to_CC_Mode_and_Value>
 80037da:	e012      	b.n	8003802 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 80037dc:	4b69      	ldr	r3, [pc, #420]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1178>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b17      	cmp	r3, #23
 80037e4:	d104      	bne.n	80037f0 <UART2_RX_transfer_complete_callback+0xfe4>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80037e6:	4b6c      	ldr	r3, [pc, #432]	@ (8003998 <UART2_RX_transfer_complete_callback+0x118c>)
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7fd fab7 	bl	8000d5c <Set_Symmetry_to_CC_Mode_and_Value>
 80037ee:	e008      	b.n	8003802 <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 80037f0:	4b64      	ldr	r3, [pc, #400]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1178>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b18      	cmp	r3, #24
 80037f8:	d103      	bne.n	8003802 <UART2_RX_transfer_complete_callback+0xff6>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80037fa:	4b67      	ldr	r3, [pc, #412]	@ (8003998 <UART2_RX_transfer_complete_callback+0x118c>)
 80037fc:	0018      	movs	r0, r3
 80037fe:	f7fd fac7 	bl	8000d90 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 8003802:	4b5f      	ldr	r3, [pc, #380]	@ (8003980 <UART2_RX_transfer_complete_callback+0x1174>)
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003808:	4b5e      	ldr	r3, [pc, #376]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1178>)
 800380a:	0018      	movs	r0, r3
 800380c:	f7fd fc83 	bl	8001116 <Clear_Data_Buffer>
 8003810:	e0a8      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 8003812:	4b5b      	ldr	r3, [pc, #364]	@ (8003980 <UART2_RX_transfer_complete_callback+0x1174>)
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003818:	4b5a      	ldr	r3, [pc, #360]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1178>)
 800381a:	0018      	movs	r0, r3
 800381c:	f7fd fc7b 	bl	8001116 <Clear_Data_Buffer>
 8003820:	e0a0      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>
							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(&active_status_byte) == YES){
 8003822:	4b57      	ldr	r3, [pc, #348]	@ (8003980 <UART2_RX_transfer_complete_callback+0x1174>)
 8003824:	0018      	movs	r0, r3
 8003826:	f7fd fc15 	bl	8001054 <Is_Sysex_Start_Status_Byte>
 800382a:	0003      	movs	r3, r0
 800382c:	2b01      	cmp	r3, #1
 800382e:	d000      	beq.n	8003832 <UART2_RX_transfer_complete_callback+0x1026>
 8003830:	e098      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>

						//@TODO

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003832:	4b54      	ldr	r3, [pc, #336]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1178>)
 8003834:	0018      	movs	r0, r3
 8003836:	f7fd fc3e 	bl	80010b6 <Is_Data_Buffer_Empty>
 800383a:	e093      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 800383c:	4b51      	ldr	r3, [pc, #324]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1178>)
 800383e:	0018      	movs	r0, r3
 8003840:	f7fd fc69 	bl	8001116 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003844:	4a52      	ldr	r2, [pc, #328]	@ (8003990 <UART2_RX_transfer_complete_callback+0x1184>)
 8003846:	4b51      	ldr	r3, [pc, #324]	@ (800398c <UART2_RX_transfer_complete_callback+0x1180>)
 8003848:	0011      	movs	r1, r2
 800384a:	0018      	movs	r0, r3
 800384c:	f7fd fce3 	bl	8001216 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003850:	4b4d      	ldr	r3, [pc, #308]	@ (8003988 <UART2_RX_transfer_complete_callback+0x117c>)
 8003852:	0018      	movs	r0, r3
 8003854:	f7fd fb20 	bl	8000e98 <Is_PC_Status_Byte>
 8003858:	0003      	movs	r3, r0
 800385a:	2b01      	cmp	r3, #1
 800385c:	d130      	bne.n	80038c0 <UART2_RX_transfer_complete_callback+0x10b4>

						running_status_byte = (uint8_t)*rx_buffer;
 800385e:	4b4a      	ldr	r3, [pc, #296]	@ (8003988 <UART2_RX_transfer_complete_callback+0x117c>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	b2da      	uxtb	r2, r3
 8003864:	4b4f      	ldr	r3, [pc, #316]	@ (80039a4 <UART2_RX_transfer_complete_callback+0x1198>)
 8003866:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003868:	4b4a      	ldr	r3, [pc, #296]	@ (8003994 <UART2_RX_transfer_complete_callback+0x1188>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	b2da      	uxtb	r2, r3
 800386e:	4b46      	ldr	r3, [pc, #280]	@ (8003988 <UART2_RX_transfer_complete_callback+0x117c>)
 8003870:	0011      	movs	r1, r2
 8003872:	0018      	movs	r0, r3
 8003874:	f7fd fbfe 	bl	8001074 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003878:	0003      	movs	r3, r0
 800387a:	2b01      	cmp	r3, #1
 800387c:	d10c      	bne.n	8003898 <UART2_RX_transfer_complete_callback+0x108c>

							active_status_byte = (uint8_t)*rx_buffer;
 800387e:	4b42      	ldr	r3, [pc, #264]	@ (8003988 <UART2_RX_transfer_complete_callback+0x117c>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	b2da      	uxtb	r2, r3
 8003884:	4b3e      	ldr	r3, [pc, #248]	@ (8003980 <UART2_RX_transfer_complete_callback+0x1174>)
 8003886:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003888:	2380      	movs	r3, #128	@ 0x80
 800388a:	005a      	lsls	r2, r3, #1
 800388c:	4b40      	ldr	r3, [pc, #256]	@ (8003990 <UART2_RX_transfer_complete_callback+0x1184>)
 800388e:	0011      	movs	r1, r2
 8003890:	0018      	movs	r0, r3
 8003892:	f002 f99f 	bl	8005bd4 <Set_Status_Bit>
 8003896:	e065      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003898:	4b3d      	ldr	r3, [pc, #244]	@ (8003990 <UART2_RX_transfer_complete_callback+0x1184>)
 800389a:	0018      	movs	r0, r3
 800389c:	f7fd fca1 	bl	80011e2 <Is_OMNI_On>
 80038a0:	0003      	movs	r3, r0
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d15e      	bne.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 80038a6:	4b38      	ldr	r3, [pc, #224]	@ (8003988 <UART2_RX_transfer_complete_callback+0x117c>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	4b34      	ldr	r3, [pc, #208]	@ (8003980 <UART2_RX_transfer_complete_callback+0x1174>)
 80038ae:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80038b0:	2380      	movs	r3, #128	@ 0x80
 80038b2:	005a      	lsls	r2, r3, #1
 80038b4:	4b36      	ldr	r3, [pc, #216]	@ (8003990 <UART2_RX_transfer_complete_callback+0x1184>)
 80038b6:	0011      	movs	r1, r2
 80038b8:	0018      	movs	r0, r3
 80038ba:	f002 f98b 	bl	8005bd4 <Set_Status_Bit>
 80038be:	e051      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80038c0:	4b31      	ldr	r3, [pc, #196]	@ (8003988 <UART2_RX_transfer_complete_callback+0x117c>)
 80038c2:	0018      	movs	r0, r3
 80038c4:	f7fd fb04 	bl	8000ed0 <Is_CC_Status_Byte>
 80038c8:	0003      	movs	r3, r0
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d130      	bne.n	8003930 <UART2_RX_transfer_complete_callback+0x1124>

						running_status_byte = (uint8_t)*rx_buffer;
 80038ce:	4b2e      	ldr	r3, [pc, #184]	@ (8003988 <UART2_RX_transfer_complete_callback+0x117c>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	4b33      	ldr	r3, [pc, #204]	@ (80039a4 <UART2_RX_transfer_complete_callback+0x1198>)
 80038d6:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80038d8:	4b2e      	ldr	r3, [pc, #184]	@ (8003994 <UART2_RX_transfer_complete_callback+0x1188>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	4b2a      	ldr	r3, [pc, #168]	@ (8003988 <UART2_RX_transfer_complete_callback+0x117c>)
 80038e0:	0011      	movs	r1, r2
 80038e2:	0018      	movs	r0, r3
 80038e4:	f7fd fbc6 	bl	8001074 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80038e8:	0003      	movs	r3, r0
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d10c      	bne.n	8003908 <UART2_RX_transfer_complete_callback+0x10fc>

							active_status_byte = (uint8_t)*rx_buffer;
 80038ee:	4b26      	ldr	r3, [pc, #152]	@ (8003988 <UART2_RX_transfer_complete_callback+0x117c>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	4b22      	ldr	r3, [pc, #136]	@ (8003980 <UART2_RX_transfer_complete_callback+0x1174>)
 80038f6:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80038f8:	2380      	movs	r3, #128	@ 0x80
 80038fa:	005a      	lsls	r2, r3, #1
 80038fc:	4b24      	ldr	r3, [pc, #144]	@ (8003990 <UART2_RX_transfer_complete_callback+0x1184>)
 80038fe:	0011      	movs	r1, r2
 8003900:	0018      	movs	r0, r3
 8003902:	f002 f967 	bl	8005bd4 <Set_Status_Bit>
 8003906:	e02d      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003908:	4b21      	ldr	r3, [pc, #132]	@ (8003990 <UART2_RX_transfer_complete_callback+0x1184>)
 800390a:	0018      	movs	r0, r3
 800390c:	f7fd fc69 	bl	80011e2 <Is_OMNI_On>
 8003910:	0003      	movs	r3, r0
 8003912:	2b01      	cmp	r3, #1
 8003914:	d126      	bne.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003916:	4b1c      	ldr	r3, [pc, #112]	@ (8003988 <UART2_RX_transfer_complete_callback+0x117c>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	b2da      	uxtb	r2, r3
 800391c:	4b18      	ldr	r3, [pc, #96]	@ (8003980 <UART2_RX_transfer_complete_callback+0x1174>)
 800391e:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003920:	2380      	movs	r3, #128	@ 0x80
 8003922:	005a      	lsls	r2, r3, #1
 8003924:	4b1a      	ldr	r3, [pc, #104]	@ (8003990 <UART2_RX_transfer_complete_callback+0x1184>)
 8003926:	0011      	movs	r1, r2
 8003928:	0018      	movs	r0, r3
 800392a:	f002 f953 	bl	8005bd4 <Set_Status_Bit>
 800392e:	e019      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003930:	4b15      	ldr	r3, [pc, #84]	@ (8003988 <UART2_RX_transfer_complete_callback+0x117c>)
 8003932:	0018      	movs	r0, r3
 8003934:	f7fd fb8e 	bl	8001054 <Is_Sysex_Start_Status_Byte>
 8003938:	0003      	movs	r3, r0
 800393a:	2b01      	cmp	r3, #1
 800393c:	d112      	bne.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 800393e:	4b12      	ldr	r3, [pc, #72]	@ (8003988 <UART2_RX_transfer_complete_callback+0x117c>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	b2da      	uxtb	r2, r3
 8003944:	4b0e      	ldr	r3, [pc, #56]	@ (8003980 <UART2_RX_transfer_complete_callback+0x1174>)
 8003946:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003948:	4b16      	ldr	r3, [pc, #88]	@ (80039a4 <UART2_RX_transfer_complete_callback+0x1198>)
 800394a:	2200      	movs	r2, #0
 800394c:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800394e:	2380      	movs	r3, #128	@ 0x80
 8003950:	005a      	lsls	r2, r3, #1
 8003952:	4b0f      	ldr	r3, [pc, #60]	@ (8003990 <UART2_RX_transfer_complete_callback+0x1184>)
 8003954:	0011      	movs	r1, r2
 8003956:	0018      	movs	r0, r3
 8003958:	f002 f93c 	bl	8005bd4 <Set_Status_Bit>
 800395c:	e002      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 800395e:	46c0      	nop			@ (mov r8, r8)
 8003960:	e000      	b.n	8003964 <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003962:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}

	*rx_buffer = 0;
 8003964:	4b08      	ldr	r3, [pc, #32]	@ (8003988 <UART2_RX_transfer_complete_callback+0x117c>)
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 800396a:	4907      	ldr	r1, [pc, #28]	@ (8003988 <UART2_RX_transfer_complete_callback+0x117c>)
 800396c:	4b0e      	ldr	r3, [pc, #56]	@ (80039a8 <UART2_RX_transfer_complete_callback+0x119c>)
 800396e:	2201      	movs	r2, #1
 8003970:	0018      	movs	r0, r3
 8003972:	f008 f9d7 	bl	800bd24 <HAL_UART_Receive_DMA>
}
 8003976:	46c0      	nop			@ (mov r8, r8)
 8003978:	46bd      	mov	sp, r7
 800397a:	b002      	add	sp, #8
 800397c:	bd80      	pop	{r7, pc}
 800397e:	46c0      	nop			@ (mov r8, r8)
 8003980:	2000054e 	.word	0x2000054e
 8003984:	20000550 	.word	0x20000550
 8003988:	2000055c 	.word	0x2000055c
 800398c:	20000cbc 	.word	0x20000cbc
 8003990:	20000cb4 	.word	0x20000cb4
 8003994:	2000054d 	.word	0x2000054d
 8003998:	20000551 	.word	0x20000551
 800399c:	20000020 	.word	0x20000020
 80039a0:	20000ccc 	.word	0x20000ccc
 80039a4:	2000054f 	.word	0x2000054f
 80039a8:	20000ac8 	.word	0x20000ac8

080039ac <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	0002      	movs	r2, r0
 80039b4:	1dbb      	adds	r3, r7, #6
 80039b6:	801a      	strh	r2, [r3, #0]

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with falling interrupt
 80039b8:	1dbb      	adds	r3, r7, #6
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	2b80      	cmp	r3, #128	@ 0x80
 80039be:	d117      	bne.n	80039f0 <HAL_GPIO_EXTI_Falling_Callback+0x44>

		if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 80039c0:	4b0d      	ldr	r3, [pc, #52]	@ (80039f8 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b06      	cmp	r3, #6
 80039c8:	d004      	beq.n	80039d4 <HAL_GPIO_EXTI_Falling_Callback+0x28>
 80039ca:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b07      	cmp	r3, #7
 80039d2:	d10d      	bne.n	80039f0 <HAL_GPIO_EXTI_Falling_Callback+0x44>

			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80039d4:	2380      	movs	r3, #128	@ 0x80
 80039d6:	0099      	lsls	r1, r3, #2
 80039d8:	23a0      	movs	r3, #160	@ 0xa0
 80039da:	05db      	lsls	r3, r3, #23
 80039dc:	2201      	movs	r2, #1
 80039de:	0018      	movs	r0, r3
 80039e0:	f004 fb4d 	bl	800807e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80039e4:	4b05      	ldr	r3, [pc, #20]	@ (80039fc <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	2140      	movs	r1, #64	@ 0x40
 80039ea:	0018      	movs	r0, r3
 80039ec:	f004 fb47 	bl	800807e <HAL_GPIO_WritePin>
		}
	}
}
 80039f0:	46c0      	nop			@ (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b002      	add	sp, #8
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20000428 	.word	0x20000428
 80039fc:	50000800 	.word	0x50000800

08003a00 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	0002      	movs	r2, r0
 8003a08:	1dbb      	adds	r3, r7, #6
 8003a0a:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with rising interrupt
 8003a0c:	1dbb      	adds	r3, r7, #6
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	2b80      	cmp	r3, #128	@ 0x80
 8003a12:	d000      	beq.n	8003a16 <HAL_GPIO_EXTI_Rising_Callback+0x16>
 8003a14:	e0dd      	b.n	8003bd2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>

		if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8003a16:	4b71      	ldr	r3, [pc, #452]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d114      	bne.n	8003a4a <HAL_GPIO_EXTI_Rising_Callback+0x4a>

			//Set SW OUT
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003a20:	2380      	movs	r3, #128	@ 0x80
 8003a22:	0099      	lsls	r1, r3, #2
 8003a24:	23a0      	movs	r3, #160	@ 0xa0
 8003a26:	05db      	lsls	r3, r3, #23
 8003a28:	2200      	movs	r2, #0
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f004 fb27 	bl	800807e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003a30:	4b6b      	ldr	r3, [pc, #428]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	2140      	movs	r1, #64	@ 0x40
 8003a36:	0018      	movs	r0, r3
 8003a38:	f004 fb21 	bl	800807e <HAL_GPIO_WritePin>

			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003a3c:	4b67      	ldr	r3, [pc, #412]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003a42:	4b66      	ldr	r3, [pc, #408]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a44:	2207      	movs	r2, #7
 8003a46:	701a      	strb	r2, [r3, #0]
		}

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8003a48:	e0c3      	b.n	8003bd2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == PC_MODE){
 8003a4a:	4b64      	ldr	r3, [pc, #400]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d114      	bne.n	8003a7e <HAL_GPIO_EXTI_Rising_Callback+0x7e>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003a54:	2380      	movs	r3, #128	@ 0x80
 8003a56:	0099      	lsls	r1, r3, #2
 8003a58:	23a0      	movs	r3, #160	@ 0xa0
 8003a5a:	05db      	lsls	r3, r3, #23
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f004 fb0d 	bl	800807e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003a64:	4b5e      	ldr	r3, [pc, #376]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	2140      	movs	r1, #64	@ 0x40
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f004 fb07 	bl	800807e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = PC_MODE;
 8003a70:	4b5a      	ldr	r3, [pc, #360]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a72:	2203      	movs	r2, #3
 8003a74:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003a76:	4b59      	ldr	r3, [pc, #356]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a78:	2207      	movs	r2, #7
 8003a7a:	701a      	strb	r2, [r3, #0]
}
 8003a7c:	e0a9      	b.n	8003bd2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == CC_MODE){
 8003a7e:	4b57      	ldr	r3, [pc, #348]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d114      	bne.n	8003ab2 <HAL_GPIO_EXTI_Rising_Callback+0xb2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003a88:	2380      	movs	r3, #128	@ 0x80
 8003a8a:	0099      	lsls	r1, r3, #2
 8003a8c:	23a0      	movs	r3, #160	@ 0xa0
 8003a8e:	05db      	lsls	r3, r3, #23
 8003a90:	2200      	movs	r2, #0
 8003a92:	0018      	movs	r0, r3
 8003a94:	f004 faf3 	bl	800807e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003a98:	4b51      	ldr	r3, [pc, #324]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	2140      	movs	r1, #64	@ 0x40
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f004 faed 	bl	800807e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = CC_MODE;
 8003aa4:	4b4d      	ldr	r3, [pc, #308]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003aaa:	4b4c      	ldr	r3, [pc, #304]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003aac:	2207      	movs	r2, #7
 8003aae:	701a      	strb	r2, [r3, #0]
}
 8003ab0:	e08f      	b.n	8003bd2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003ab2:	4b4a      	ldr	r3, [pc, #296]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d12b      	bne.n	8003b14 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8003abc:	4b49      	ldr	r3, [pc, #292]	@ (8003be4 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d126      	bne.n	8003b14 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8003ac6:	4b48      	ldr	r3, [pc, #288]	@ (8003be8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003ac8:	2120      	movs	r1, #32
 8003aca:	0018      	movs	r0, r3
 8003acc:	f002 f86e 	bl	8005bac <Get_Status_Bit>
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d11e      	bne.n	8003b14 <HAL_GPIO_EXTI_Rising_Callback+0x114>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003ad6:	2380      	movs	r3, #128	@ 0x80
 8003ad8:	0099      	lsls	r1, r3, #2
 8003ada:	23a0      	movs	r3, #160	@ 0xa0
 8003adc:	05db      	lsls	r3, r3, #23
 8003ade:	2200      	movs	r2, #0
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f004 facc 	bl	800807e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	2140      	movs	r1, #64	@ 0x40
 8003aec:	0018      	movs	r0, r3
 8003aee:	f004 fac6 	bl	800807e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = TAP_MODE;
 8003af2:	4b3a      	ldr	r3, [pc, #232]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003af4:	2204      	movs	r2, #4
 8003af6:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003af8:	4b38      	ldr	r3, [pc, #224]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003afa:	2207      	movs	r2, #7
 8003afc:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003afe:	4b3a      	ldr	r3, [pc, #232]	@ (8003be8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003b00:	2120      	movs	r1, #32
 8003b02:	0018      	movs	r0, r3
 8003b04:	f002 f878 	bl	8005bf8 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003b08:	4b37      	ldr	r3, [pc, #220]	@ (8003be8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003b0a:	2140      	movs	r1, #64	@ 0x40
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f002 f873 	bl	8005bf8 <Clear_Status_Bit>
 8003b12:	e05e      	b.n	8003bd2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003b14:	4b31      	ldr	r3, [pc, #196]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d12b      	bne.n	8003b76 <HAL_GPIO_EXTI_Rising_Callback+0x176>
 8003b1e:	4b31      	ldr	r3, [pc, #196]	@ (8003be4 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d126      	bne.n	8003b76 <HAL_GPIO_EXTI_Rising_Callback+0x176>
 8003b28:	4b2f      	ldr	r3, [pc, #188]	@ (8003be8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003b2a:	2120      	movs	r1, #32
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f002 f83d 	bl	8005bac <Get_Status_Bit>
 8003b32:	0003      	movs	r3, r0
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d11e      	bne.n	8003b76 <HAL_GPIO_EXTI_Rising_Callback+0x176>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003b38:	2380      	movs	r3, #128	@ 0x80
 8003b3a:	0099      	lsls	r1, r3, #2
 8003b3c:	23a0      	movs	r3, #160	@ 0xa0
 8003b3e:	05db      	lsls	r3, r3, #23
 8003b40:	2200      	movs	r2, #0
 8003b42:	0018      	movs	r0, r3
 8003b44:	f004 fa9b 	bl	800807e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003b48:	4b25      	ldr	r3, [pc, #148]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	2140      	movs	r1, #64	@ 0x40
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f004 fa95 	bl	800807e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003b54:	4b21      	ldr	r3, [pc, #132]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b56:	2208      	movs	r2, #8
 8003b58:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003b5a:	4b20      	ldr	r3, [pc, #128]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b5c:	2207      	movs	r2, #7
 8003b5e:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003b60:	4b21      	ldr	r3, [pc, #132]	@ (8003be8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003b62:	2120      	movs	r1, #32
 8003b64:	0018      	movs	r0, r3
 8003b66:	f002 f847 	bl	8005bf8 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8003be8 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003b6c:	2140      	movs	r1, #64	@ 0x40
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f002 f842 	bl	8005bf8 <Clear_Status_Bit>
 8003b74:	e02d      	b.n	8003bd2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){ //second edge
 8003b76:	4b19      	ldr	r3, [pc, #100]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b07      	cmp	r3, #7
 8003b7e:	d114      	bne.n	8003baa <HAL_GPIO_EXTI_Rising_Callback+0x1aa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003b80:	2380      	movs	r3, #128	@ 0x80
 8003b82:	0099      	lsls	r1, r3, #2
 8003b84:	23a0      	movs	r3, #160	@ 0xa0
 8003b86:	05db      	lsls	r3, r3, #23
 8003b88:	2200      	movs	r2, #0
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f004 fa77 	bl	800807e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003b90:	4b13      	ldr	r3, [pc, #76]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	2140      	movs	r1, #64	@ 0x40
 8003b96:	0018      	movs	r0, r3
 8003b98:	f004 fa71 	bl	800807e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b9e:	2207      	movs	r2, #7
 8003ba0:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8003ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003ba4:	2206      	movs	r2, #6
 8003ba6:	701a      	strb	r2, [r3, #0]
}
 8003ba8:	e013      	b.n	8003bd2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE){
 8003baa:	4b0c      	ldr	r3, [pc, #48]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b06      	cmp	r3, #6
 8003bb2:	d10e      	bne.n	8003bd2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003bb4:	2380      	movs	r3, #128	@ 0x80
 8003bb6:	0099      	lsls	r1, r3, #2
 8003bb8:	23a0      	movs	r3, #160	@ 0xa0
 8003bba:	05db      	lsls	r3, r3, #23
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f004 fa5d 	bl	800807e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003bc4:	4b06      	ldr	r3, [pc, #24]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	2140      	movs	r1, #64	@ 0x40
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f004 fa57 	bl	800807e <HAL_GPIO_WritePin>
}
 8003bd0:	e7ff      	b.n	8003bd2 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b002      	add	sp, #8
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	46c0      	nop			@ (mov r8, r8)
 8003bdc:	20000428 	.word	0x20000428
 8003be0:	50000800 	.word	0x50000800
 8003be4:	2000043c 	.word	0x2000043c
 8003be8:	20000cb4 	.word	0x20000cb4

08003bec <LPTIM1_callback>:

void LPTIM1_callback(LPTIM_HandleTypeDef *hlptim){
 8003bec:	b5b0      	push	{r4, r5, r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]

	static volatile struct Tap_Tempo_Switch_States tap_tempo_switch_states = {0};

	//CHECK IF NEED TO TAP_PENDING TRANSITION

	uint8_t pin_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8003bf4:	250f      	movs	r5, #15
 8003bf6:	197c      	adds	r4, r7, r5
 8003bf8:	2380      	movs	r3, #128	@ 0x80
 8003bfa:	00da      	lsls	r2, r3, #3
 8003bfc:	23a0      	movs	r3, #160	@ 0xa0
 8003bfe:	05db      	lsls	r3, r3, #23
 8003c00:	0011      	movs	r1, r2
 8003c02:	0018      	movs	r0, r3
 8003c04:	f004 fa1e 	bl	8008044 <HAL_GPIO_ReadPin>
 8003c08:	0003      	movs	r3, r0
 8003c0a:	7023      	strb	r3, [r4, #0]

	if((speed_fsm.current_state.shared_state == MANUAL_MODE) && (pin_state == 0)){
 8003c0c:	4bc7      	ldr	r3, [pc, #796]	@ (8003f2c <LPTIM1_callback+0x340>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d10a      	bne.n	8003c2c <LPTIM1_callback+0x40>
 8003c16:	197b      	adds	r3, r7, r5
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <LPTIM1_callback+0x40>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003c1e:	4bc3      	ldr	r3, [pc, #780]	@ (8003f2c <LPTIM1_callback+0x340>)
 8003c20:	2205      	movs	r2, #5
 8003c22:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003c24:	4bc1      	ldr	r3, [pc, #772]	@ (8003f2c <LPTIM1_callback+0x340>)
 8003c26:	2201      	movs	r2, #1
 8003c28:	705a      	strb	r2, [r3, #1]
 8003c2a:	e070      	b.n	8003d0e <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.shared_state == CC_MODE) && (pin_state == 0)){
 8003c2c:	4bbf      	ldr	r3, [pc, #764]	@ (8003f2c <LPTIM1_callback+0x340>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d10b      	bne.n	8003c4e <LPTIM1_callback+0x62>
 8003c36:	230f      	movs	r3, #15
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d106      	bne.n	8003c4e <LPTIM1_callback+0x62>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003c40:	4bba      	ldr	r3, [pc, #744]	@ (8003f2c <LPTIM1_callback+0x340>)
 8003c42:	2205      	movs	r2, #5
 8003c44:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = CC_MODE;
 8003c46:	4bb9      	ldr	r3, [pc, #740]	@ (8003f2c <LPTIM1_callback+0x340>)
 8003c48:	2202      	movs	r2, #2
 8003c4a:	705a      	strb	r2, [r3, #1]
 8003c4c:	e05f      	b.n	8003d0e <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.shared_state == PC_MODE) && (pin_state == 0)){
 8003c4e:	4bb7      	ldr	r3, [pc, #732]	@ (8003f2c <LPTIM1_callback+0x340>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d10b      	bne.n	8003c70 <LPTIM1_callback+0x84>
 8003c58:	230f      	movs	r3, #15
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <LPTIM1_callback+0x84>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003c62:	4bb2      	ldr	r3, [pc, #712]	@ (8003f2c <LPTIM1_callback+0x340>)
 8003c64:	2205      	movs	r2, #5
 8003c66:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = PC_MODE;
 8003c68:	4bb0      	ldr	r3, [pc, #704]	@ (8003f2c <LPTIM1_callback+0x340>)
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	705a      	strb	r2, [r3, #1]
 8003c6e:	e04e      	b.n	8003d0e <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003c70:	4bae      	ldr	r3, [pc, #696]	@ (8003f2c <LPTIM1_callback+0x340>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b06      	cmp	r3, #6
 8003c78:	d122      	bne.n	8003cc0 <LPTIM1_callback+0xd4>
 8003c7a:	230f      	movs	r3, #15
 8003c7c:	18fb      	adds	r3, r7, r3
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d11d      	bne.n	8003cc0 <LPTIM1_callback+0xd4>
 8003c84:	4baa      	ldr	r3, [pc, #680]	@ (8003f30 <LPTIM1_callback+0x344>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d118      	bne.n	8003cc0 <LPTIM1_callback+0xd4>
 8003c8e:	4ba9      	ldr	r3, [pc, #676]	@ (8003f34 <LPTIM1_callback+0x348>)
 8003c90:	2120      	movs	r1, #32
 8003c92:	0018      	movs	r0, r3
 8003c94:	f001 ff8a 	bl	8005bac <Get_Status_Bit>
 8003c98:	0003      	movs	r3, r0
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d110      	bne.n	8003cc0 <LPTIM1_callback+0xd4>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003c9e:	4ba3      	ldr	r3, [pc, #652]	@ (8003f2c <LPTIM1_callback+0x340>)
 8003ca0:	2205      	movs	r2, #5
 8003ca2:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.speed_exclusive_state = CLK_IN_MODE;
 8003ca4:	4ba1      	ldr	r3, [pc, #644]	@ (8003f2c <LPTIM1_callback+0x340>)
 8003ca6:	2206      	movs	r2, #6
 8003ca8:	705a      	strb	r2, [r3, #1]

		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003caa:	4ba2      	ldr	r3, [pc, #648]	@ (8003f34 <LPTIM1_callback+0x348>)
 8003cac:	2120      	movs	r1, #32
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f001 ffa2 	bl	8005bf8 <Clear_Status_Bit>
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003cb4:	4b9f      	ldr	r3, [pc, #636]	@ (8003f34 <LPTIM1_callback+0x348>)
 8003cb6:	2140      	movs	r1, #64	@ 0x40
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f001 ff9d 	bl	8005bf8 <Clear_Status_Bit>
 8003cbe:	e026      	b.n	8003d0e <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003cc0:	4b9a      	ldr	r3, [pc, #616]	@ (8003f2c <LPTIM1_callback+0x340>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d121      	bne.n	8003d0e <LPTIM1_callback+0x122>
 8003cca:	230f      	movs	r3, #15
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d11c      	bne.n	8003d0e <LPTIM1_callback+0x122>
 8003cd4:	4b96      	ldr	r3, [pc, #600]	@ (8003f30 <LPTIM1_callback+0x344>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d117      	bne.n	8003d0e <LPTIM1_callback+0x122>
 8003cde:	4b95      	ldr	r3, [pc, #596]	@ (8003f34 <LPTIM1_callback+0x348>)
 8003ce0:	2120      	movs	r1, #32
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f001 ff62 	bl	8005bac <Get_Status_Bit>
 8003ce8:	0003      	movs	r3, r0
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d10f      	bne.n	8003d0e <LPTIM1_callback+0x122>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003cee:	4b8f      	ldr	r3, [pc, #572]	@ (8003f2c <LPTIM1_callback+0x340>)
 8003cf0:	2205      	movs	r2, #5
 8003cf2:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003cf4:	4b8d      	ldr	r3, [pc, #564]	@ (8003f2c <LPTIM1_callback+0x340>)
 8003cf6:	2208      	movs	r2, #8
 8003cf8:	705a      	strb	r2, [r3, #1]

		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003cfa:	4b8e      	ldr	r3, [pc, #568]	@ (8003f34 <LPTIM1_callback+0x348>)
 8003cfc:	2120      	movs	r1, #32
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f001 ff7a 	bl	8005bf8 <Clear_Status_Bit>
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003d04:	4b8b      	ldr	r3, [pc, #556]	@ (8003f34 <LPTIM1_callback+0x348>)
 8003d06:	2140      	movs	r1, #64	@ 0x40
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f001 ff75 	bl	8005bf8 <Clear_Status_Bit>
	}

	//CHECK TAP TEMPO STATE
	if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == TAP_MODE)){
 8003d0e:	4b87      	ldr	r3, [pc, #540]	@ (8003f2c <LPTIM1_callback+0x340>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b05      	cmp	r3, #5
 8003d16:	d004      	beq.n	8003d22 <LPTIM1_callback+0x136>
 8003d18:	4b84      	ldr	r3, [pc, #528]	@ (8003f2c <LPTIM1_callback+0x340>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d12a      	bne.n	8003d78 <LPTIM1_callback+0x18c>

		Check_Tap_Tempo_Switch_State(&tap_tempo_switch_states);
 8003d22:	4b85      	ldr	r3, [pc, #532]	@ (8003f38 <LPTIM1_callback+0x34c>)
 8003d24:	0018      	movs	r0, r3
 8003d26:	f7fd fc73 	bl	8001610 <Check_Tap_Tempo_Switch_State>

		if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8003d2a:	4b83      	ldr	r3, [pc, #524]	@ (8003f38 <LPTIM1_callback+0x34c>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d10e      	bne.n	8003d52 <LPTIM1_callback+0x166>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003d34:	2380      	movs	r3, #128	@ 0x80
 8003d36:	0099      	lsls	r1, r3, #2
 8003d38:	23a0      	movs	r3, #160	@ 0xa0
 8003d3a:	05db      	lsls	r3, r3, #23
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f004 f99d 	bl	800807e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003d44:	4b7d      	ldr	r3, [pc, #500]	@ (8003f3c <LPTIM1_callback+0x350>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	2140      	movs	r1, #64	@ 0x40
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f004 f997 	bl	800807e <HAL_GPIO_WritePin>
 8003d50:	e012      	b.n	8003d78 <LPTIM1_callback+0x18c>

		}
		else if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 8003d52:	4b79      	ldr	r3, [pc, #484]	@ (8003f38 <LPTIM1_callback+0x34c>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10d      	bne.n	8003d78 <LPTIM1_callback+0x18c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003d5c:	2380      	movs	r3, #128	@ 0x80
 8003d5e:	0099      	lsls	r1, r3, #2
 8003d60:	23a0      	movs	r3, #160	@ 0xa0
 8003d62:	05db      	lsls	r3, r3, #23
 8003d64:	2201      	movs	r2, #1
 8003d66:	0018      	movs	r0, r3
 8003d68:	f004 f989 	bl	800807e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003d6c:	4b73      	ldr	r3, [pc, #460]	@ (8003f3c <LPTIM1_callback+0x350>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	2140      	movs	r1, #64	@ 0x40
 8003d72:	0018      	movs	r0, r3
 8003d74:	f004 f983 	bl	800807e <HAL_GPIO_WritePin>
	}

	//SET PREVIOUS STATE TO CURRENT STATE
	//tap_tempo_switch_states.tap_tempo_switch_prev_state = tap_tempo_switch_states.tap_tempo_switch_state;

	if(Get_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out) == YES){
 8003d78:	2380      	movs	r3, #128	@ 0x80
 8003d7a:	011a      	lsls	r2, r3, #4
 8003d7c:	4b6d      	ldr	r3, [pc, #436]	@ (8003f34 <LPTIM1_callback+0x348>)
 8003d7e:	0011      	movs	r1, r2
 8003d80:	0018      	movs	r0, r3
 8003d82:	f001 ff13 	bl	8005bac <Get_Status_Bit>
 8003d86:	0003      	movs	r3, r0
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d000      	beq.n	8003d8e <LPTIM1_callback+0x1a2>
 8003d8c:	e0c0      	b.n	8003f10 <LPTIM1_callback+0x324>

		Clear_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8003d8e:	2380      	movs	r3, #128	@ 0x80
 8003d90:	011a      	lsls	r2, r3, #4
 8003d92:	4b68      	ldr	r3, [pc, #416]	@ (8003f34 <LPTIM1_callback+0x348>)
 8003d94:	0011      	movs	r1, r2
 8003d96:	0018      	movs	r0, r3
 8003d98:	f001 ff2e 	bl	8005bf8 <Clear_Status_Bit>

		pots_counter = 0;
 8003d9c:	4b68      	ldr	r3, [pc, #416]	@ (8003f40 <LPTIM1_callback+0x354>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	701a      	strb	r2, [r3, #0]

		//PERFORM SPEED POT CHECKING
		if((speed_fsm.current_state.shared_state == PC_MODE) || (speed_fsm.current_state.shared_state == CC_MODE)){
 8003da2:	4b62      	ldr	r3, [pc, #392]	@ (8003f2c <LPTIM1_callback+0x340>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d004      	beq.n	8003db6 <LPTIM1_callback+0x1ca>
 8003dac:	4b5f      	ldr	r3, [pc, #380]	@ (8003f2c <LPTIM1_callback+0x340>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d105      	bne.n	8003dc2 <LPTIM1_callback+0x1d6>

			Pot_Check(ADCResultsDMA, SPEED_POT);
 8003db6:	4b63      	ldr	r3, [pc, #396]	@ (8003f44 <LPTIM1_callback+0x358>)
 8003db8:	2101      	movs	r1, #1
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f7fd fb08 	bl	80013d0 <Pot_Check>
 8003dc0:	e069      	b.n	8003e96 <LPTIM1_callback+0x2aa>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003dc2:	4b5a      	ldr	r3, [pc, #360]	@ (8003f2c <LPTIM1_callback+0x340>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b06      	cmp	r3, #6
 8003dca:	d117      	bne.n	8003dfc <LPTIM1_callback+0x210>
 8003dcc:	4b58      	ldr	r3, [pc, #352]	@ (8003f30 <LPTIM1_callback+0x344>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d112      	bne.n	8003dfc <LPTIM1_callback+0x210>

			Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003dd6:	4b57      	ldr	r3, [pc, #348]	@ (8003f34 <LPTIM1_callback+0x348>)
 8003dd8:	2140      	movs	r1, #64	@ 0x40
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f001 fefa 	bl	8005bd4 <Set_Status_Bit>

			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003de0:	4b54      	ldr	r3, [pc, #336]	@ (8003f34 <LPTIM1_callback+0x348>)
 8003de2:	2120      	movs	r1, #32
 8003de4:	0018      	movs	r0, r3
 8003de6:	f001 fee1 	bl	8005bac <Get_Status_Bit>
 8003dea:	0003      	movs	r3, r0
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d152      	bne.n	8003e96 <LPTIM1_callback+0x2aa>

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003df0:	4b54      	ldr	r3, [pc, #336]	@ (8003f44 <LPTIM1_callback+0x358>)
 8003df2:	2101      	movs	r1, #1
 8003df4:	0018      	movs	r0, r3
 8003df6:	f7fd faeb 	bl	80013d0 <Pot_Check>
			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003dfa:	e04c      	b.n	8003e96 <LPTIM1_callback+0x2aa>
			}
		}
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003dfc:	4b4b      	ldr	r3, [pc, #300]	@ (8003f2c <LPTIM1_callback+0x340>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d12b      	bne.n	8003e5e <LPTIM1_callback+0x272>
 8003e06:	4b4a      	ldr	r3, [pc, #296]	@ (8003f30 <LPTIM1_callback+0x344>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d126      	bne.n	8003e5e <LPTIM1_callback+0x272>

			Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003e10:	4b48      	ldr	r3, [pc, #288]	@ (8003f34 <LPTIM1_callback+0x348>)
 8003e12:	2140      	movs	r1, #64	@ 0x40
 8003e14:	0018      	movs	r0, r3
 8003e16:	f001 fedd 	bl	8005bd4 <Set_Status_Bit>

			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003e1a:	4b46      	ldr	r3, [pc, #280]	@ (8003f34 <LPTIM1_callback+0x348>)
 8003e1c:	2120      	movs	r1, #32
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f001 fec4 	bl	8005bac <Get_Status_Bit>
 8003e24:	0003      	movs	r3, r0
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d135      	bne.n	8003e96 <LPTIM1_callback+0x2aa>

				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003e2a:	2380      	movs	r3, #128	@ 0x80
 8003e2c:	0099      	lsls	r1, r3, #2
 8003e2e:	23a0      	movs	r3, #160	@ 0xa0
 8003e30:	05db      	lsls	r3, r3, #23
 8003e32:	2201      	movs	r2, #1
 8003e34:	0018      	movs	r0, r3
 8003e36:	f004 f922 	bl	800807e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003e3a:	4b40      	ldr	r3, [pc, #256]	@ (8003f3c <LPTIM1_callback+0x350>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2140      	movs	r1, #64	@ 0x40
 8003e40:	0018      	movs	r0, r3
 8003e42:	f004 f91c 	bl	800807e <HAL_GPIO_WritePin>

				MIDI_CLK_fsm = NOT_COMPILING;
 8003e46:	4b40      	ldr	r3, [pc, #256]	@ (8003f48 <LPTIM1_callback+0x35c>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	701a      	strb	r2, [r3, #0]
				MIDI_CLK_tag = 0;
 8003e4c:	4b3f      	ldr	r3, [pc, #252]	@ (8003f4c <LPTIM1_callback+0x360>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	701a      	strb	r2, [r3, #0]

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003e52:	4b3c      	ldr	r3, [pc, #240]	@ (8003f44 <LPTIM1_callback+0x358>)
 8003e54:	2101      	movs	r1, #1
 8003e56:	0018      	movs	r0, r3
 8003e58:	f7fd faba 	bl	80013d0 <Pot_Check>
			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003e5c:	e01b      	b.n	8003e96 <LPTIM1_callback+0x2aa>
			}
		}
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003e5e:	4b33      	ldr	r3, [pc, #204]	@ (8003f2c <LPTIM1_callback+0x340>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d116      	bne.n	8003e96 <LPTIM1_callback+0x2aa>
 8003e68:	4b31      	ldr	r3, [pc, #196]	@ (8003f30 <LPTIM1_callback+0x344>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d111      	bne.n	8003e96 <LPTIM1_callback+0x2aa>

			Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003e72:	4b30      	ldr	r3, [pc, #192]	@ (8003f34 <LPTIM1_callback+0x348>)
 8003e74:	2140      	movs	r1, #64	@ 0x40
 8003e76:	0018      	movs	r0, r3
 8003e78:	f001 feac 	bl	8005bd4 <Set_Status_Bit>

			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8003f34 <LPTIM1_callback+0x348>)
 8003e7e:	2120      	movs	r1, #32
 8003e80:	0018      	movs	r0, r3
 8003e82:	f001 fe93 	bl	8005bac <Get_Status_Bit>
 8003e86:	0003      	movs	r3, r0
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d104      	bne.n	8003e96 <LPTIM1_callback+0x2aa>

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003f44 <LPTIM1_callback+0x358>)
 8003e8e:	2101      	movs	r1, #1
 8003e90:	0018      	movs	r0, r3
 8003e92:	f7fd fa9d 	bl	80013d0 <Pot_Check>
			}
		}

		if((waveshape_fsm.current_state == PC_MODE) || (waveshape_fsm.current_state == CC_MODE)){
 8003e96:	4b2e      	ldr	r3, [pc, #184]	@ (8003f50 <LPTIM1_callback+0x364>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d004      	beq.n	8003eaa <LPTIM1_callback+0x2be>
 8003ea0:	4b2b      	ldr	r3, [pc, #172]	@ (8003f50 <LPTIM1_callback+0x364>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d104      	bne.n	8003eb4 <LPTIM1_callback+0x2c8>
			Pot_Check(ADCResultsDMA, WAVESHAPE_POT);
 8003eaa:	4b26      	ldr	r3, [pc, #152]	@ (8003f44 <LPTIM1_callback+0x358>)
 8003eac:	2100      	movs	r1, #0
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f7fd fa8e 	bl	80013d0 <Pot_Check>
		}
		if((depth_fsm.current_state == PC_MODE) || (depth_fsm.current_state == CC_MODE)){
 8003eb4:	4b27      	ldr	r3, [pc, #156]	@ (8003f54 <LPTIM1_callback+0x368>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d004      	beq.n	8003ec8 <LPTIM1_callback+0x2dc>
 8003ebe:	4b25      	ldr	r3, [pc, #148]	@ (8003f54 <LPTIM1_callback+0x368>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d104      	bne.n	8003ed2 <LPTIM1_callback+0x2e6>
			Pot_Check(ADCResultsDMA, DEPTH_POT);
 8003ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f44 <LPTIM1_callback+0x358>)
 8003eca:	2102      	movs	r1, #2
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f7fd fa7f 	bl	80013d0 <Pot_Check>
		}
		if((symmetry_fsm.current_state == PC_MODE) || (symmetry_fsm.current_state == CC_MODE)){
 8003ed2:	4b21      	ldr	r3, [pc, #132]	@ (8003f58 <LPTIM1_callback+0x36c>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d004      	beq.n	8003ee6 <LPTIM1_callback+0x2fa>
 8003edc:	4b1e      	ldr	r3, [pc, #120]	@ (8003f58 <LPTIM1_callback+0x36c>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d104      	bne.n	8003ef0 <LPTIM1_callback+0x304>
			Pot_Check(ADCResultsDMA, SYMMETRY_POT);
 8003ee6:	4b17      	ldr	r3, [pc, #92]	@ (8003f44 <LPTIM1_callback+0x358>)
 8003ee8:	2103      	movs	r1, #3
 8003eea:	0018      	movs	r0, r3
 8003eec:	f7fd fa70 	bl	80013d0 <Pot_Check>
		}
		if((phase_fsm.current_state == PC_MODE) || (phase_fsm.current_state == CC_MODE)){
 8003ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8003f5c <LPTIM1_callback+0x370>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	d004      	beq.n	8003f04 <LPTIM1_callback+0x318>
 8003efa:	4b18      	ldr	r3, [pc, #96]	@ (8003f5c <LPTIM1_callback+0x370>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d134      	bne.n	8003f6e <LPTIM1_callback+0x382>
			Pot_Check(ADCResultsDMA, PHASE_POT);
 8003f04:	4b0f      	ldr	r3, [pc, #60]	@ (8003f44 <LPTIM1_callback+0x358>)
 8003f06:	2104      	movs	r1, #4
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f7fd fa61 	bl	80013d0 <Pot_Check>
 8003f0e:	e02e      	b.n	8003f6e <LPTIM1_callback+0x382>
		}

	}
	else{
		if(pots_counter == POT_COUNTER_COUNT){
 8003f10:	4b0b      	ldr	r3, [pc, #44]	@ (8003f40 <LPTIM1_callback+0x354>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b40      	cmp	r3, #64	@ 0x40
 8003f18:	d122      	bne.n	8003f60 <LPTIM1_callback+0x374>

			Set_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8003f1a:	2380      	movs	r3, #128	@ 0x80
 8003f1c:	011a      	lsls	r2, r3, #4
 8003f1e:	4b05      	ldr	r3, [pc, #20]	@ (8003f34 <LPTIM1_callback+0x348>)
 8003f20:	0011      	movs	r1, r2
 8003f22:	0018      	movs	r0, r3
 8003f24:	f001 fe56 	bl	8005bd4 <Set_Status_Bit>
 8003f28:	e021      	b.n	8003f6e <LPTIM1_callback+0x382>
 8003f2a:	46c0      	nop			@ (mov r8, r8)
 8003f2c:	20000428 	.word	0x20000428
 8003f30:	2000043c 	.word	0x2000043c
 8003f34:	20000cb4 	.word	0x20000cb4
 8003f38:	20000ca8 	.word	0x20000ca8
 8003f3c:	50000800 	.word	0x50000800
 8003f40:	20000562 	.word	0x20000562
 8003f44:	20000cc0 	.word	0x20000cc0
 8003f48:	20000d5c 	.word	0x20000d5c
 8003f4c:	20000cb2 	.word	0x20000cb2
 8003f50:	20000430 	.word	0x20000430
 8003f54:	2000042c 	.word	0x2000042c
 8003f58:	20000434 	.word	0x20000434
 8003f5c:	20000438 	.word	0x20000438
		}
		else{

			pots_counter++;
 8003f60:	4b08      	ldr	r3, [pc, #32]	@ (8003f84 <LPTIM1_callback+0x398>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	3301      	adds	r3, #1
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <LPTIM1_callback+0x398>)
 8003f6c:	701a      	strb	r2, [r3, #0]
		}
	}

	//SET TIMER TRIGGER
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8003f6e:	4b06      	ldr	r3, [pc, #24]	@ (8003f88 <LPTIM1_callback+0x39c>)
 8003f70:	22fa      	movs	r2, #250	@ 0xfa
 8003f72:	21fa      	movs	r1, #250	@ 0xfa
 8003f74:	0018      	movs	r0, r3
 8003f76:	f004 f979 	bl	800826c <HAL_LPTIM_SetOnce_Start_IT>

}
 8003f7a:	46c0      	nop			@ (mov r8, r8)
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b004      	add	sp, #16
 8003f80:	bdb0      	pop	{r4, r5, r7, pc}
 8003f82:	46c0      	nop			@ (mov r8, r8)
 8003f84:	20000562 	.word	0x20000562
 8003f88:	20000c4c 	.word	0x20000c4c

08003f8c <TIM17_callback>:

void TIM17_callback(TIM_HandleTypeDef *htim){
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]


}
 8003f94:	46c0      	nop			@ (mov r8, r8)
 8003f96:	46bd      	mov	sp, r7
 8003f98:	b002      	add	sp, #8
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <TIM14_callback>:

void TIM14_callback(TIM_HandleTypeDef *htim){
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]


}
 8003fa4:	46c0      	nop			@ (mov r8, r8)
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b002      	add	sp, #8
 8003faa:	bd80      	pop	{r7, pc}

08003fac <Input_Capture_Processing>:
volatile uint32_t TIM2_ch1_input_capture_value;
volatile uint16_t interrupt_period = 0;
volatile uint8_t MIDI_CLK_tag = 0;

//FUNCTION DEFINITIONS
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params *params_ptr){
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	6039      	str	r1, [r7, #0]
 8003fb6:	1dbb      	adds	r3, r7, #6
 8003fb8:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Clear_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started); //reset flag
 8003fba:	4b34      	ldr	r3, [pc, #208]	@ (800408c <Input_Capture_Processing+0xe0>)
 8003fbc:	2104      	movs	r1, #4
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f001 fe1a 	bl	8005bf8 <Clear_Status_Bit>

	//DETERMINE WHAT TO SET THE RAW_START_VALUE AND BASE_PRESCALER TO BASED ON THE I/P CAPTURE VALUE
	//CHECK FOR PRIMALITY
	if(isPrime(interrupt_period_value) == YES){
 8003fc4:	1dbb      	adds	r3, r7, #6
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f001 fda3 	bl	8005b16 <isPrime>
 8003fd0:	0003      	movs	r3, r0
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d106      	bne.n	8003fe4 <Input_Capture_Processing+0x38>

		interrupt_period_value += 1;
 8003fd6:	1dbb      	adds	r3, r7, #6
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3301      	adds	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	1dbb      	adds	r3, r7, #6
 8003fe2:	801a      	strh	r2, [r3, #0]
	}

	//START FINDING FACTORS
	uint32_t N = interrupt_period_value << 6; //calculate the N-value which is prescaler_meas * interrupt_period_meas. The measurement prescaler is used which is 64. (TIM2 has a prescaler of 64*512, but since we divide this value by 512, the prescaler is then just 64).
 8003fe4:	1dbb      	adds	r3, r7, #6
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	019b      	lsls	r3, r3, #6
 8003fec:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8003fee:	2317      	movs	r3, #23
 8003ff0:	18fb      	adds	r3, r7, r3
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	701a      	strb	r2, [r3, #0]
 8003ff6:	e02d      	b.n	8004054 <Input_Capture_Processing+0xa8>

		interrupt_period_value = 256 - i;
 8003ff8:	2317      	movs	r3, #23
 8003ffa:	18fb      	adds	r3, r7, r3
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	2280      	movs	r2, #128	@ 0x80
 8004002:	0052      	lsls	r2, r2, #1
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	b29a      	uxth	r2, r3
 8004008:	1dbb      	adds	r3, r7, #6
 800400a:	801a      	strh	r2, [r3, #0]
		uint16_t remainder = N % interrupt_period_value;
 800400c:	1dbb      	adds	r3, r7, #6
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	b29b      	uxth	r3, r3
 8004012:	001a      	movs	r2, r3
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	0011      	movs	r1, r2
 8004018:	0018      	movs	r0, r3
 800401a:	f7fc f8fb 	bl	8000214 <__aeabi_uidivmod>
 800401e:	000b      	movs	r3, r1
 8004020:	001a      	movs	r2, r3
 8004022:	210e      	movs	r1, #14
 8004024:	187b      	adds	r3, r7, r1
 8004026:	801a      	strh	r2, [r3, #0]

		if(remainder == 0){ //check if no remainder -> integer
 8004028:	187b      	adds	r3, r7, r1
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10b      	bne.n	8004048 <Input_Capture_Processing+0x9c>

			params_ptr->raw_prescaler = N / interrupt_period_value;
 8004030:	1dbb      	adds	r3, r7, #6
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	b29b      	uxth	r3, r3
 8004036:	0019      	movs	r1, r3
 8004038:	6938      	ldr	r0, [r7, #16]
 800403a:	f7fc f865 	bl	8000108 <__udivsi3>
 800403e:	0003      	movs	r3, r0
 8004040:	b29a      	uxth	r2, r3
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	835a      	strh	r2, [r3, #26]
			break;
 8004046:	e00a      	b.n	800405e <Input_Capture_Processing+0xb2>
	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8004048:	2117      	movs	r1, #23
 800404a:	187b      	adds	r3, r7, r1
 800404c:	781a      	ldrb	r2, [r3, #0]
 800404e:	187b      	adds	r3, r7, r1
 8004050:	3201      	adds	r2, #1
 8004052:	701a      	strb	r2, [r3, #0]
 8004054:	2317      	movs	r3, #23
 8004056:	18fb      	adds	r3, r7, r3
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b80      	cmp	r3, #128	@ 0x80
 800405c:	d9cc      	bls.n	8003ff8 <Input_Capture_Processing+0x4c>
		}
	}

	params_ptr->raw_start_value = 256 - interrupt_period_value;
 800405e:	1dbb      	adds	r3, r7, #6
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	b29b      	uxth	r3, r3
 8004064:	2280      	movs	r2, #128	@ 0x80
 8004066:	0052      	lsls	r2, r2, #1
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	b29a      	uxth	r2, r3
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	825a      	strh	r2, [r3, #18]

	Calculate_Next_Main_Oscillator_Values(params_ptr, (enum Next_Values_Processing_Mode)IP_CAPTURE_MODE);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2101      	movs	r1, #1
 8004074:	0018      	movs	r0, r3
 8004076:	f000 f9cd 	bl	8004414 <Calculate_Next_Main_Oscillator_Values>
	Process_TIM16_Final_Start_Value_and_Final_Prescaler(params_ptr);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	0018      	movs	r0, r3
 800407e:	f001 f907 	bl	8005290 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);

	return 1;
 8004082:	2301      	movs	r3, #1
}
 8004084:	0018      	movs	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	b006      	add	sp, #24
 800408a:	bd80      	pop	{r7, pc}
 800408c:	20000cb4 	.word	0x20000cb4

08004090 <Start_Input_Capture_Timer>:

uint8_t Start_Input_Capture_Timer(void){
 8004090:	b590      	push	{r4, r7, lr}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0

	uint8_t ok = Start_IC_TIM(&htim2, TIM_CHANNEL_1);
 8004096:	1dfc      	adds	r4, r7, #7
 8004098:	4b09      	ldr	r3, [pc, #36]	@ (80040c0 <Start_Input_Capture_Timer+0x30>)
 800409a:	2100      	movs	r1, #0
 800409c:	0018      	movs	r0, r3
 800409e:	f000 f811 	bl	80040c4 <Start_IC_TIM>
 80040a2:	0003      	movs	r3, r0
 80040a4:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 80040a6:	1dfb      	adds	r3, r7, #7
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <Start_Input_Capture_Timer+0x22>

		Error_Handler();
 80040ae:	f7fe f8f5 	bl	800229c <Error_Handler>
	}

	return ok;
 80040b2:	1dfb      	adds	r3, r7, #7
 80040b4:	781b      	ldrb	r3, [r3, #0]
}
 80040b6:	0018      	movs	r0, r3
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b003      	add	sp, #12
 80040bc:	bd90      	pop	{r4, r7, pc}
 80040be:	46c0      	nop			@ (mov r8, r8)
 80040c0:	20000894 	.word	0x20000894

080040c4 <Start_IC_TIM>:

uint8_t Start_IC_TIM(TIM_HandleTypeDef *TIM, uint32_t IC_TIM_channel){
 80040c4:	b5b0      	push	{r4, r5, r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]

	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 80040ce:	250f      	movs	r5, #15
 80040d0:	197c      	adds	r4, r7, r5
 80040d2:	4b10      	ldr	r3, [pc, #64]	@ (8004114 <Start_IC_TIM+0x50>)
 80040d4:	0018      	movs	r0, r3
 80040d6:	f005 fb63 	bl	80097a0 <HAL_TIM_Base_Start_IT>
 80040da:	0003      	movs	r3, r0
 80040dc:	7023      	strb	r3, [r4, #0]
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004114 <Start_IC_TIM+0x50>)
 80040e2:	0011      	movs	r1, r2
 80040e4:	0018      	movs	r0, r3
 80040e6:	f005 ffc9 	bl	800a07c <HAL_TIM_IC_Start_IT>
 80040ea:	0003      	movs	r3, r0
 80040ec:	0019      	movs	r1, r3
 80040ee:	197b      	adds	r3, r7, r5
 80040f0:	197a      	adds	r2, r7, r5
 80040f2:	7812      	ldrb	r2, [r2, #0]
 80040f4:	400a      	ands	r2, r1
 80040f6:	701a      	strb	r2, [r3, #0]

	if(ok_AND != HAL_OK){
 80040f8:	197b      	adds	r3, r7, r5
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <Start_IC_TIM+0x40>

		Error_Handler();
 8004100:	f7fe f8cc 	bl	800229c <Error_Handler>
	}

	return ok_AND;
 8004104:	230f      	movs	r3, #15
 8004106:	18fb      	adds	r3, r7, r3
 8004108:	781b      	ldrb	r3, [r3, #0]
}
 800410a:	0018      	movs	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	b004      	add	sp, #16
 8004110:	bdb0      	pop	{r4, r5, r7, pc}
 8004112:	46c0      	nop			@ (mov r8, r8)
 8004114:	20000894 	.word	0x20000894

08004118 <Copy_Params_Structs>:

uint8_t Copy_Params_Structs(struct Params *src_ptr, struct Params *dst_ptr){
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]

	*dst_ptr = *src_ptr;
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	0010      	movs	r0, r2
 8004128:	0019      	movs	r1, r3
 800412a:	2324      	movs	r3, #36	@ 0x24
 800412c:	001a      	movs	r2, r3
 800412e:	f009 f947 	bl	800d3c0 <memcpy>

	return 1;
 8004132:	2301      	movs	r3, #1
}
 8004134:	0018      	movs	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	b002      	add	sp, #8
 800413a:	bd80      	pop	{r7, pc}

0800413c <Start_Measurement_Reelapse_Timer>:

uint8_t Start_Measurement_Reelapse_Timer(void){
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8004140:	4b0b      	ldr	r3, [pc, #44]	@ (8004170 <Start_Measurement_Reelapse_Timer+0x34>)
 8004142:	2100      	movs	r1, #0
 8004144:	0018      	movs	r0, r3
 8004146:	f001 fcca 	bl	8005ade <Stop_OC_TIM>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800414a:	4b09      	ldr	r3, [pc, #36]	@ (8004170 <Start_Measurement_Reelapse_Timer+0x34>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2200      	movs	r2, #0
 8004150:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 8004152:	4b08      	ldr	r3, [pc, #32]	@ (8004174 <Start_Measurement_Reelapse_Timer+0x38>)
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	b29a      	uxth	r2, r3
 8004158:	4b05      	ldr	r3, [pc, #20]	@ (8004170 <Start_Measurement_Reelapse_Timer+0x34>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	635a      	str	r2, [r3, #52]	@ 0x34
	Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 800415e:	4b04      	ldr	r3, [pc, #16]	@ (8004170 <Start_Measurement_Reelapse_Timer+0x34>)
 8004160:	2100      	movs	r1, #0
 8004162:	0018      	movs	r0, r3
 8004164:	f001 fc9f 	bl	8005aa6 <Start_OC_TIM>

	return 1;
 8004168:	2301      	movs	r3, #1
}
 800416a:	0018      	movs	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	20000950 	.word	0x20000950
 8004174:	20000cb0 	.word	0x20000cb0

08004178 <Begin_Input_Capture_Measurement>:

uint8_t Begin_Input_Capture_Measurement(void){
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0

	__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 800417c:	4b03      	ldr	r3, [pc, #12]	@ (800418c <Begin_Input_Capture_Measurement+0x14>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2200      	movs	r2, #0
 8004182:	625a      	str	r2, [r3, #36]	@ 0x24

	return 1;
 8004184:	2301      	movs	r3, #1
}
 8004186:	0018      	movs	r0, r3
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	20000894 	.word	0x20000894

08004190 <main>:
//INCLUDES
#include "main.h"
#include "main_vars.h"

int main(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
	//SYSTEM INIT
	System_Init();
 8004194:	f7fe f888 	bl	80022a8 <System_Init>

	//STARTUP
	Startup();
 8004198:	f000 fb32 	bl	8004800 <Startup>

	while (1)
	{
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 800419c:	4b39      	ldr	r3, [pc, #228]	@ (8004284 <main+0xf4>)
 800419e:	2104      	movs	r1, #4
 80041a0:	0018      	movs	r0, r3
 80041a2:	f001 fd03 	bl	8005bac <Get_Status_Bit>
 80041a6:	0003      	movs	r3, r0
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d107      	bne.n	80041bc <main+0x2c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

			Input_Capture_Processing(interrupt_period, &params_to_be_loaded);
 80041ac:	4b36      	ldr	r3, [pc, #216]	@ (8004288 <main+0xf8>)
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	4a36      	ldr	r2, [pc, #216]	@ (800428c <main+0xfc>)
 80041b4:	0011      	movs	r1, r2
 80041b6:	0018      	movs	r0, r3
 80041b8:	f7ff fef8 	bl	8003fac <Input_Capture_Processing>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
		}

		if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running) == YES){
 80041bc:	4b31      	ldr	r3, [pc, #196]	@ (8004284 <main+0xf4>)
 80041be:	2140      	movs	r1, #64	@ 0x40
 80041c0:	0018      	movs	r0, r3
 80041c2:	f001 fcf3 	bl	8005bac <Get_Status_Bit>
 80041c6:	0003      	movs	r3, r0
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d12b      	bne.n	8004224 <main+0x94>

			if(idle_counter < IDLE_COUNT){
 80041cc:	4b30      	ldr	r3, [pc, #192]	@ (8004290 <main+0x100>)
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	23fa      	movs	r3, #250	@ 0xfa
 80041d2:	01db      	lsls	r3, r3, #7
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d218      	bcs.n	800420a <main+0x7a>

				if(IP_CAP_fsm.current_state != IDLE){
 80041d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004294 <main+0x104>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00d      	beq.n	80041fe <main+0x6e>

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80041e2:	4b28      	ldr	r3, [pc, #160]	@ (8004284 <main+0xf4>)
 80041e4:	2140      	movs	r1, #64	@ 0x40
 80041e6:	0018      	movs	r0, r3
 80041e8:	f001 fd06 	bl	8005bf8 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80041ec:	4b25      	ldr	r3, [pc, #148]	@ (8004284 <main+0xf4>)
 80041ee:	2120      	movs	r1, #32
 80041f0:	0018      	movs	r0, r3
 80041f2:	f001 fd01 	bl	8005bf8 <Clear_Status_Bit>
					idle_counter = 0;
 80041f6:	4b26      	ldr	r3, [pc, #152]	@ (8004290 <main+0x100>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	e012      	b.n	8004224 <main+0x94>
				}
				else{

					idle_counter++;
 80041fe:	4b24      	ldr	r3, [pc, #144]	@ (8004290 <main+0x100>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	4b22      	ldr	r3, [pc, #136]	@ (8004290 <main+0x100>)
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	e00c      	b.n	8004224 <main+0x94>
				}
			}
			else{

				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800420a:	4b1e      	ldr	r3, [pc, #120]	@ (8004284 <main+0xf4>)
 800420c:	2140      	movs	r1, #64	@ 0x40
 800420e:	0018      	movs	r0, r3
 8004210:	f001 fcf2 	bl	8005bf8 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004214:	4b1b      	ldr	r3, [pc, #108]	@ (8004284 <main+0xf4>)
 8004216:	2120      	movs	r1, #32
 8004218:	0018      	movs	r0, r3
 800421a:	f001 fcdb 	bl	8005bd4 <Set_Status_Bit>
				idle_counter = 0;
 800421e:	4b1c      	ldr	r3, [pc, #112]	@ (8004290 <main+0x100>)
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
			}
		}
		if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running) == YES){
 8004224:	2380      	movs	r3, #128	@ 0x80
 8004226:	005a      	lsls	r2, r3, #1
 8004228:	4b16      	ldr	r3, [pc, #88]	@ (8004284 <main+0xf4>)
 800422a:	0011      	movs	r1, r2
 800422c:	0018      	movs	r0, r3
 800422e:	f001 fcbd 	bl	8005bac <Get_Status_Bit>
 8004232:	0003      	movs	r3, r0
 8004234:	2b01      	cmp	r3, #1
 8004236:	d1b1      	bne.n	800419c <main+0xc>

			if(midi_counter < MIDI_COUNT){
 8004238:	4b17      	ldr	r3, [pc, #92]	@ (8004298 <main+0x108>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	23fa      	movs	r3, #250	@ 0xfa
 800423e:	01db      	lsls	r3, r3, #7
 8004240:	429a      	cmp	r2, r3
 8004242:	d205      	bcs.n	8004250 <main+0xc0>

				midi_counter++;
 8004244:	4b14      	ldr	r3, [pc, #80]	@ (8004298 <main+0x108>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	4b13      	ldr	r3, [pc, #76]	@ (8004298 <main+0x108>)
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	e7a5      	b.n	800419c <main+0xc>
			}
			else{

				Clear_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8004250:	2380      	movs	r3, #128	@ 0x80
 8004252:	005a      	lsls	r2, r3, #1
 8004254:	4b0b      	ldr	r3, [pc, #44]	@ (8004284 <main+0xf4>)
 8004256:	0011      	movs	r1, r2
 8004258:	0018      	movs	r0, r3
 800425a:	f001 fccd 	bl	8005bf8 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out);
 800425e:	2380      	movs	r3, #128	@ 0x80
 8004260:	009a      	lsls	r2, r3, #2
 8004262:	4b08      	ldr	r3, [pc, #32]	@ (8004284 <main+0xf4>)
 8004264:	0011      	movs	r1, r2
 8004266:	0018      	movs	r0, r3
 8004268:	f001 fcb4 	bl	8005bd4 <Set_Status_Bit>
				active_status_byte = 0;
 800426c:	4b0b      	ldr	r3, [pc, #44]	@ (800429c <main+0x10c>)
 800426e:	2200      	movs	r2, #0
 8004270:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 8004272:	4b0b      	ldr	r3, [pc, #44]	@ (80042a0 <main+0x110>)
 8004274:	0018      	movs	r0, r3
 8004276:	f7fc ff4e 	bl	8001116 <Clear_Data_Buffer>
				midi_counter = 0;
 800427a:	4b07      	ldr	r3, [pc, #28]	@ (8004298 <main+0x108>)
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 8004280:	e78c      	b.n	800419c <main+0xc>
 8004282:	46c0      	nop			@ (mov r8, r8)
 8004284:	20000cb4 	.word	0x20000cb4
 8004288:	20000cb0 	.word	0x20000cb0
 800428c:	20000d14 	.word	0x20000d14
 8004290:	20000cb8 	.word	0x20000cb8
 8004294:	2000043c 	.word	0x2000043c
 8004298:	20000cbc 	.word	0x20000cbc
 800429c:	2000054e 	.word	0x2000054e
 80042a0:	20000550 	.word	0x20000550

080042a4 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>:
								.duty_delay_line_start_offset = 1,  //initial value is 1st index - to give us space to fill index 0
								.duty_delay_line_finish_offset = FINAL_INDEX + 1}; //initial value is 512th index, one larger than the index of the final sample

//FUNCTION DEFINITIONS
uint8_t Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel_1, uint32_t PWM_TIM_channel_2)
{
 80042a4:	b590      	push	{r4, r7, lr}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
	uint8_t ok_OR = 0;
 80042b0:	2417      	movs	r4, #23
 80042b2:	193b      	adds	r3, r7, r4
 80042b4:	2200      	movs	r2, #0
 80042b6:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_Base_Start(TIM);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	0018      	movs	r0, r3
 80042bc:	f005 fa24 	bl	8009708 <HAL_TIM_Base_Start>
 80042c0:	0003      	movs	r3, r0
 80042c2:	0019      	movs	r1, r3
 80042c4:	193b      	adds	r3, r7, r4
 80042c6:	193a      	adds	r2, r7, r4
 80042c8:	7812      	ldrb	r2, [r2, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	0011      	movs	r1, r2
 80042d4:	0018      	movs	r0, r3
 80042d6:	f005 fd85 	bl	8009de4 <HAL_TIM_PWM_Start>
 80042da:	0003      	movs	r3, r0
 80042dc:	0019      	movs	r1, r3
 80042de:	193b      	adds	r3, r7, r4
 80042e0:	193a      	adds	r2, r7, r4
 80042e2:	7812      	ldrb	r2, [r2, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	0011      	movs	r1, r2
 80042ee:	0018      	movs	r0, r3
 80042f0:	f005 fd78 	bl	8009de4 <HAL_TIM_PWM_Start>
 80042f4:	0003      	movs	r3, r0
 80042f6:	0019      	movs	r1, r3
 80042f8:	193b      	adds	r3, r7, r4
 80042fa:	193a      	adds	r2, r7, r4
 80042fc:	7812      	ldrb	r2, [r2, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	701a      	strb	r2, [r3, #0]

	if(ok_OR != HAL_OK){
 8004302:	193b      	adds	r3, r7, r4
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x6a>

		Error_Handler();
 800430a:	f7fd ffc7 	bl	800229c <Error_Handler>
	}

	return ok_OR;
 800430e:	2317      	movs	r3, #23
 8004310:	18fb      	adds	r3, r7, r3
 8004312:	781b      	ldrb	r3, [r3, #0]
}
 8004314:	0018      	movs	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	b007      	add	sp, #28
 800431a:	bd90      	pop	{r4, r7, pc}

0800431c <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 800431c:	b590      	push	{r4, r7, lr}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 8004322:	1dfc      	adds	r4, r7, #7
 8004324:	4b09      	ldr	r3, [pc, #36]	@ (800434c <Start_Freq_Gen_Timer+0x30>)
 8004326:	2100      	movs	r1, #0
 8004328:	0018      	movs	r0, r3
 800432a:	f001 fbbc 	bl	8005aa6 <Start_OC_TIM>
 800432e:	0003      	movs	r3, r0
 8004330:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8004332:	1dfb      	adds	r3, r7, #7
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <Start_Freq_Gen_Timer+0x22>

		Error_Handler();
 800433a:	f7fd ffaf 	bl	800229c <Error_Handler>
	}

	return ok;
 800433e:	1dfb      	adds	r3, r7, #7
 8004340:	781b      	ldrb	r3, [r3, #0]
}
 8004342:	0018      	movs	r0, r3
 8004344:	46bd      	mov	sp, r7
 8004346:	b003      	add	sp, #12
 8004348:	bd90      	pop	{r4, r7, pc}
 800434a:	46c0      	nop			@ (mov r8, r8)
 800434c:	200007d8 	.word	0x200007d8

08004350 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:

uint8_t Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(struct Params* params_ptr){
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]

	uint32_t speed_control = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
	uint8_t how_many_128 = 0;
 800435c:	210b      	movs	r1, #11
 800435e:	187b      	adds	r3, r7, r1
 8004360:	2200      	movs	r2, #0
 8004362:	701a      	strb	r2, [r3, #0]

    //speed_control = (speed_adc_10_bit/1024)*'range macro'
    speed_control = params_ptr->speed * NUMBER_OF_FREQUENCY_STEPS;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	891b      	ldrh	r3, [r3, #8]
 8004368:	b29b      	uxth	r3, r3
 800436a:	001a      	movs	r2, r3
 800436c:	0013      	movs	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	189b      	adds	r3, r3, r2
 8004372:	019b      	lsls	r3, r3, #6
 8004374:	189b      	adds	r3, r3, r2
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	189b      	adds	r3, r3, r2
 800437a:	60fb      	str	r3, [r7, #12]
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	0a9b      	lsrs	r3, r3, #10
 8004380:	60fb      	str	r3, [r7, #12]

    how_many_128 = (uint8_t)(speed_control >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	09da      	lsrs	r2, r3, #7
 8004386:	187b      	adds	r3, r7, r1
 8004388:	701a      	strb	r2, [r3, #0]
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	b29a      	uxth	r2, r3
 800438e:	187b      	adds	r3, r7, r1
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	b29b      	uxth	r3, r3
 8004394:	01db      	lsls	r3, r3, #7
 8004396:	b29b      	uxth	r3, r3
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	b29a      	uxth	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	825a      	strh	r2, [r3, #18]
    params_ptr->raw_prescaler = SLOWEST_SPEED_PRESCALER >> how_many_128;
 80043a0:	187b      	adds	r3, r7, r1
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2280      	movs	r2, #128	@ 0x80
 80043a6:	00d2      	lsls	r2, r2, #3
 80043a8:	411a      	asrs	r2, r3
 80043aa:	0013      	movs	r3, r2
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	835a      	strh	r2, [r3, #26]

    return 1;
 80043b2:	2301      	movs	r3, #1
}
 80043b4:	0018      	movs	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b004      	add	sp, #16
 80043ba:	bd80      	pop	{r7, pc}

080043bc <Set_Oscillator_Values>:

uint8_t Set_Oscillator_Values(struct Params* params_ptr){
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]

	////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE MAIN OSCILLATOR//
	////////////////////////////////////////////////////////
	__HAL_TIM_SET_AUTORELOAD(&htim16, params_ptr->final_ARR);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	8b1b      	ldrh	r3, [r3, #24]
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	4b10      	ldr	r3, [pc, #64]	@ (800440c <Set_Oscillator_Values+0x50>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8b1b      	ldrh	r3, [r3, #24]
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	001a      	movs	r2, r3
 80043d8:	4b0c      	ldr	r3, [pc, #48]	@ (800440c <Set_Oscillator_Values+0x50>)
 80043da:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_PRESCALER(&htim16, params_ptr->final_prescaler_minus_one); //have to take one off the divisor
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	8bdb      	ldrh	r3, [r3, #30]
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	4b0a      	ldr	r3, [pc, #40]	@ (800440c <Set_Oscillator_Values+0x50>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	629a      	str	r2, [r3, #40]	@ 0x28

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, params_ptr->prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	885b      	ldrh	r3, [r3, #2]
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	4b08      	ldr	r3, [pc, #32]	@ (8004410 <Set_Oscillator_Values+0x54>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	639a      	str	r2, [r3, #56]	@ 0x38

	/////////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE SECONDARY OSCILLATOR//
	/////////////////////////////////////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	889b      	ldrh	r3, [r3, #4]
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	4b05      	ldr	r3, [pc, #20]	@ (8004410 <Set_Oscillator_Values+0x54>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	641a      	str	r2, [r3, #64]	@ 0x40

	return 1;
 8004400:	2301      	movs	r3, #1
}
 8004402:	0018      	movs	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	b002      	add	sp, #8
 8004408:	bd80      	pop	{r7, pc}
 800440a:	46c0      	nop			@ (mov r8, r8)
 800440c:	200007d8 	.word	0x200007d8
 8004410:	20000a0c 	.word	0x20000a0c

08004414 <Calculate_Next_Main_Oscillator_Values>:

uint8_t Calculate_Next_Main_Oscillator_Values(struct Params* params_ptr, enum Next_Values_Processing_Mode mode){
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	000a      	movs	r2, r1
 800441e:	1cfb      	adds	r3, r7, #3
 8004420:	701a      	strb	r2, [r3, #0]

	if(mode == REGULAR_MODE){
 8004422:	1cfb      	adds	r3, r7, #3
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d144      	bne.n	80044b4 <Calculate_Next_Main_Oscillator_Values+0xa0>

		params_ptr->index++;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	89db      	ldrh	r3, [r3, #14]
 800442e:	b29b      	uxth	r3, r3
 8004430:	3301      	adds	r3, #1
 8004432:	b29a      	uxth	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	81da      	strh	r2, [r3, #14]

		if(params_ptr->index == FINAL_INDEX + 1){
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	89db      	ldrh	r3, [r3, #14]
 800443c:	b29a      	uxth	r2, r3
 800443e:	2380      	movs	r3, #128	@ 0x80
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	429a      	cmp	r2, r3
 8004444:	d102      	bne.n	800444c <Calculate_Next_Main_Oscillator_Values+0x38>
			params_ptr->index = 0;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	81da      	strh	r2, [r3, #14]
		}

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	89db      	ldrh	r3, [r3, #14]
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <Calculate_Next_Main_Oscillator_Values+0x50>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	741a      	strb	r2, [r3, #16]
 8004462:	e05a      	b.n	800451a <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == SECOND_QUADRANT_START_INDEX){
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	89db      	ldrh	r3, [r3, #14]
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b80      	cmp	r3, #128	@ 0x80
 800446c:	d106      	bne.n	800447c <Calculate_Next_Main_Oscillator_Values+0x68>
			params_ptr->quadrant = SECOND_QUADRANT;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	741a      	strb	r2, [r3, #16]
 800447a:	e04e      	b.n	800451a <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == THIRD_QUADRANT_START_INDEX){
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	89db      	ldrh	r3, [r3, #14]
 8004480:	b29a      	uxth	r2, r3
 8004482:	2380      	movs	r3, #128	@ 0x80
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	429a      	cmp	r2, r3
 8004488:	d106      	bne.n	8004498 <Calculate_Next_Main_Oscillator_Values+0x84>
			params_ptr->quadrant = FIRST_QUADRANT;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	741a      	strb	r2, [r3, #16]
 8004496:	e040      	b.n	800451a <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == FOURTH_QUADRANT_START_INDEX){
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	89db      	ldrh	r3, [r3, #14]
 800449c:	b29a      	uxth	r2, r3
 800449e:	23c0      	movs	r3, #192	@ 0xc0
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d139      	bne.n	800451a <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = SECOND_QUADRANT;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	741a      	strb	r2, [r3, #16]
 80044b2:	e032      	b.n	800451a <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == IP_CAPTURE_MODE){
 80044b4:	1cfb      	adds	r3, r7, #3
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d11f      	bne.n	80044fc <Calculate_Next_Main_Oscillator_Values+0xe8>

		if(params_ptr->waveshape == SINE_MODE || params_ptr->waveshape == TRIANGLE_MODE){
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	799b      	ldrb	r3, [r3, #6]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d004      	beq.n	80044d0 <Calculate_Next_Main_Oscillator_Values+0xbc>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	799b      	ldrb	r3, [r3, #6]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10a      	bne.n	80044e6 <Calculate_Next_Main_Oscillator_Values+0xd2>

			params_ptr->index = SINE_OR_TRIANGLE_WAVE_TEMPO_PERCEIVED_APEX_INDEX;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	22a7      	movs	r2, #167	@ 0xa7
 80044d4:	0052      	lsls	r2, r2, #1
 80044d6:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SINE_OR_TRI_SYNCED;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SINE_OR_TRI_SYNCED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	741a      	strb	r2, [r3, #16]
 80044e4:	e019      	b.n	800451a <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else{

			params_ptr->index = SQUARE_WAVE_TEMPO_APEX_INDEX;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2280      	movs	r2, #128	@ 0x80
 80044ea:	0052      	lsls	r2, r2, #1
 80044ec:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SQUARE_SYNCED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SQUARE_SYNCED;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	741a      	strb	r2, [r3, #16]
 80044fa:	e00e      	b.n	800451a <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == STARTUP_MODE){
 80044fc:	1cfb      	adds	r3, r7, #3
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b02      	cmp	r3, #2
 8004502:	d10a      	bne.n	800451a <Calculate_Next_Main_Oscillator_Values+0x106>

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	89db      	ldrh	r3, [r3, #14]
 8004508:	b29b      	uxth	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d105      	bne.n	800451a <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = FIRST_QUADRANT;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	741a      	strb	r2, [r3, #16]
		}
	}

	//ONCE INDEX IS SET, FIND THE DUTY VALUE
	if(params_ptr->waveshape == TRIANGLE_MODE){
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	799b      	ldrb	r3, [r3, #6]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d109      	bne.n	8004538 <Calculate_Next_Main_Oscillator_Values+0x124>
		params_ptr->duty = tri_wavetable[params_ptr->index];
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	89db      	ldrh	r3, [r3, #14]
 8004528:	b29b      	uxth	r3, r3
 800452a:	001a      	movs	r2, r3
 800452c:	4b31      	ldr	r3, [pc, #196]	@ (80045f4 <Calculate_Next_Main_Oscillator_Values+0x1e0>)
 800452e:	0052      	lsls	r2, r2, #1
 8004530:	5ad2      	ldrh	r2, [r2, r3]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	801a      	strh	r2, [r3, #0]
 8004536:	e029      	b.n	800458c <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if(params_ptr->waveshape == SINE_MODE){
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	799b      	ldrb	r3, [r3, #6]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b01      	cmp	r3, #1
 8004540:	d109      	bne.n	8004556 <Calculate_Next_Main_Oscillator_Values+0x142>
		params_ptr->duty = sine_wavetable[params_ptr->index];
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	89db      	ldrh	r3, [r3, #14]
 8004546:	b29b      	uxth	r3, r3
 8004548:	001a      	movs	r2, r3
 800454a:	4b2b      	ldr	r3, [pc, #172]	@ (80045f8 <Calculate_Next_Main_Oscillator_Values+0x1e4>)
 800454c:	0052      	lsls	r2, r2, #1
 800454e:	5ad2      	ldrh	r2, [r2, r3]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	801a      	strh	r2, [r3, #0]
 8004554:	e01a      	b.n	800458c <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	799b      	ldrb	r3, [r3, #6]
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d108      	bne.n	8004572 <Calculate_Next_Main_Oscillator_Values+0x15e>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	89db      	ldrh	r3, [r3, #14]
 8004564:	b29b      	uxth	r3, r3
 8004566:	2bff      	cmp	r3, #255	@ 0xff
 8004568:	d803      	bhi.n	8004572 <Calculate_Next_Main_Oscillator_Values+0x15e>
		params_ptr->duty = PWM_DUTY_VALUE_MAX;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a23      	ldr	r2, [pc, #140]	@ (80045fc <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 800456e:	801a      	strh	r2, [r3, #0]
 8004570:	e00c      	b.n	800458c <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index >= THIRD_QUADRANT_START_INDEX)){
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	799b      	ldrb	r3, [r3, #6]
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d107      	bne.n	800458c <Calculate_Next_Main_Oscillator_Values+0x178>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	89db      	ldrh	r3, [r3, #14]
 8004580:	b29b      	uxth	r3, r3
 8004582:	2bff      	cmp	r3, #255	@ 0xff
 8004584:	d902      	bls.n	800458c <Calculate_Next_Main_Oscillator_Values+0x178>
		params_ptr->duty = PWM_DUTY_VALUE_MIN;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	801a      	strh	r2, [r3, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(params_ptr->depth == ((1 << DEPTH_ADC_RESOLUTION) - 1)){ //255
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	7a9b      	ldrb	r3, [r3, #10]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b7f      	cmp	r3, #127	@ 0x7f
 8004594:	d108      	bne.n	80045a8 <Calculate_Next_Main_Oscillator_Values+0x194>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	b29b      	uxth	r3, r3
 800459c:	4a17      	ldr	r2, [pc, #92]	@ (80045fc <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	801a      	strh	r2, [r3, #0]
 80045a6:	e01b      	b.n	80045e0 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else if(params_ptr->depth != 0){
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	7a9b      	ldrb	r3, [r3, #10]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d013      	beq.n	80045da <Calculate_Next_Main_Oscillator_Values+0x1c6>

			//duty = 1023 - duty*(current_depth >> 8);
			uint32_t multiply_product = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
			multiply_product = (params_ptr->duty) * (params_ptr->depth);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	001a      	movs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	7a9b      	ldrb	r3, [r3, #10]
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	4353      	muls	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
			params_ptr->duty = PWM_DUTY_VALUE_MAX - (multiply_product >> DEPTH_ADC_RESOLUTION);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	09db      	lsrs	r3, r3, #7
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	4a0b      	ldr	r2, [pc, #44]	@ (80045fc <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	801a      	strh	r2, [r3, #0]
 80045d8:	e002      	b.n	80045e0 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else{
			params_ptr->duty = PWM_DUTY_VALUE_MAX; //if depth is 0, just output 1023
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a07      	ldr	r2, [pc, #28]	@ (80045fc <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 80045de:	801a      	strh	r2, [r3, #0]
		}

	#endif

	//SET THE NEXT VALUE FOR THE MAIN OSCILLATOR
	params_ptr->prev_duty = params_ptr->duty;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	805a      	strh	r2, [r3, #2]

	return 1;
 80045ea:	2301      	movs	r3, #1
}
 80045ec:	0018      	movs	r0, r3
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b004      	add	sp, #16
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	0800d838 	.word	0x0800d838
 80045f8:	0800d438 	.word	0x0800d438
 80045fc:	000003ff 	.word	0x000003ff

08004600 <Write_Next_Main_Oscillator_Values_to_Delay_Line>:

uint8_t Write_Next_Main_Oscillator_Values_to_Delay_Line(struct Params* params_ptr, struct Delay_Line* delay_line_ptr){
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]

	//STORE THE VALUES IN THE APPROPRIATE '0TH - 1' INDEX RELATIVE TO THE START POINTER
		if(delay_line_ptr->duty_delay_line_start_offset != 0){
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	4a44      	ldr	r2, [pc, #272]	@ (8004720 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800460e:	5a9b      	ldrh	r3, [r3, r2]
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00b      	beq.n	800462e <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x2e>
			delay_line_ptr->duty_delay_line_storage_array[delay_line_ptr->duty_delay_line_start_offset - 1] = params_ptr->duty;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	4a41      	ldr	r2, [pc, #260]	@ (8004720 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800461a:	5a9b      	ldrh	r3, [r3, r2]
 800461c:	b29b      	uxth	r3, r3
 800461e:	1e5a      	subs	r2, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	b299      	uxth	r1, r3
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	0052      	lsls	r2, r2, #1
 800462a:	52d1      	strh	r1, [r2, r3]
 800462c:	e006      	b.n	800463c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x3c>
		}
		else{
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	b299      	uxth	r1, r3
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	2380      	movs	r3, #128	@ 0x80
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	52d1      	strh	r1, [r2, r3]
		}

		//DECREMENT THE START AND FINISH POINTERS
		if(delay_line_ptr->duty_delay_line_start_offset == 0){
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	4a38      	ldr	r2, [pc, #224]	@ (8004720 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004640:	5a9b      	ldrh	r3, [r3, r2]
 8004642:	b29b      	uxth	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10e      	bne.n	8004666 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x66>
			delay_line_ptr->duty_delay_line_start_offset = FINAL_INDEX + 1;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	4a35      	ldr	r2, [pc, #212]	@ (8004720 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800464c:	2180      	movs	r1, #128	@ 0x80
 800464e:	0089      	lsls	r1, r1, #2
 8004650:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	4a33      	ldr	r2, [pc, #204]	@ (8004724 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004656:	5a9b      	ldrh	r3, [r3, r2]
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b299      	uxth	r1, r3
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	4a30      	ldr	r2, [pc, #192]	@ (8004724 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004662:	5299      	strh	r1, [r3, r2]
 8004664:	e026      	b.n	80046b4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else if(delay_line_ptr->duty_delay_line_finish_offset == 0){
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	4a2e      	ldr	r2, [pc, #184]	@ (8004724 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 800466a:	5a9b      	ldrh	r3, [r3, r2]
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10e      	bne.n	8004690 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x90>
			delay_line_ptr->duty_delay_line_finish_offset = FINAL_INDEX + 1;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	4a2b      	ldr	r2, [pc, #172]	@ (8004724 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004676:	2180      	movs	r1, #128	@ 0x80
 8004678:	0089      	lsls	r1, r1, #2
 800467a:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	4a28      	ldr	r2, [pc, #160]	@ (8004720 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004680:	5a9b      	ldrh	r3, [r3, r2]
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b299      	uxth	r1, r3
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	4a25      	ldr	r2, [pc, #148]	@ (8004720 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800468c:	5299      	strh	r1, [r3, r2]
 800468e:	e011      	b.n	80046b4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else{
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	4a23      	ldr	r2, [pc, #140]	@ (8004720 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004694:	5a9b      	ldrh	r3, [r3, r2]
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b299      	uxth	r1, r3
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	4a20      	ldr	r2, [pc, #128]	@ (8004720 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80046a0:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004724 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 80046a6:	5a9b      	ldrh	r3, [r3, r2]
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b299      	uxth	r1, r3
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004724 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 80046b2:	5299      	strh	r1, [r3, r2]
		}

		//DETERMINE THE DELAYED WAVE'S VALUES
		if(delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004720 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80046b8:	5a9b      	ldrh	r3, [r3, r2]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	001a      	movs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	18d2      	adds	r2, r2, r3
 80046c6:	2380      	movs	r3, #128	@ 0x80
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	429a      	cmp	r2, r3
 80046cc:	dd13      	ble.n	80046f6 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xf6>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + (delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	4913      	ldr	r1, [pc, #76]	@ (8004720 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80046d4:	5a5b      	ldrh	r3, [r3, r1]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	0019      	movs	r1, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80046de:	b29b      	uxth	r3, r3
 80046e0:	18cb      	adds	r3, r1, r3
 80046e2:	4911      	ldr	r1, [pc, #68]	@ (8004728 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x128>)
 80046e4:	468c      	mov	ip, r1
 80046e6:	4463      	add	r3, ip
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	18d3      	adds	r3, r2, r3
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	809a      	strh	r2, [r3, #4]
 80046f4:	e00f      	b.n	8004716 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x116>
		}
		else{
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset);
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	4909      	ldr	r1, [pc, #36]	@ (8004720 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80046fc:	5a5b      	ldrh	r3, [r3, r1]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	0019      	movs	r1, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004706:	b29b      	uxth	r3, r3
 8004708:	18cb      	adds	r3, r1, r3
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	18d3      	adds	r3, r2, r3
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	b29a      	uxth	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	809a      	strh	r2, [r3, #4]
		}

	return 1;
 8004716:	2301      	movs	r3, #1
}
 8004718:	0018      	movs	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	b002      	add	sp, #8
 800471e:	bd80      	pop	{r7, pc}
 8004720:	00000402 	.word	0x00000402
 8004724:	00000404 	.word	0x00000404
 8004728:	7ffffe00 	.word	0x7ffffe00

0800472c <Process_ADC_Conversion_Values>:

uint8_t Process_ADC_Conversion_Values(struct Params* params_ptr, volatile uint16_t* ADCResultsDMA_ptr){
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA_ptr[WAVESHAPE_ADC_RESULT_INDEX] >> 5; //set ADC_Result to waveshape index value, truncate to 7-bit
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	b29a      	uxth	r2, r3
 800473c:	2116      	movs	r1, #22
 800473e:	187b      	adds	r3, r7, r1
 8004740:	0952      	lsrs	r2, r2, #5
 8004742:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8004744:	187b      	adds	r3, r7, r1
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	2b2a      	cmp	r3, #42	@ 0x2a
 800474a:	d803      	bhi.n	8004754 <Process_ADC_Conversion_Values+0x28>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	719a      	strb	r2, [r3, #6]
 8004752:	e010      	b.n	8004776 <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8004754:	2316      	movs	r3, #22
 8004756:	18fb      	adds	r3, r7, r3
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	2b55      	cmp	r3, #85	@ 0x55
 800475c:	d803      	bhi.n	8004766 <Process_ADC_Conversion_Values+0x3a>
		params_ptr->waveshape = SINE_MODE; //sine wave
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	719a      	strb	r2, [r3, #6]
 8004764:	e007      	b.n	8004776 <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 8004766:	2316      	movs	r3, #22
 8004768:	18fb      	adds	r3, r7, r3
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	2b7f      	cmp	r3, #127	@ 0x7f
 800476e:	d802      	bhi.n	8004776 <Process_ADC_Conversion_Values+0x4a>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	719a      	strb	r2, [r3, #6]
	}

	//GET SPEED
	uint16_t temp_speed = ADCResultsDMA_ptr[SPEED_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	3302      	adds	r3, #2
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	b29a      	uxth	r2, r3
 800477e:	2114      	movs	r1, #20
 8004780:	187b      	adds	r3, r7, r1
 8004782:	0952      	lsrs	r2, r2, #5
 8004784:	801a      	strh	r2, [r3, #0]
	temp_speed <<= 3; //convert to 10-bit
 8004786:	187b      	adds	r3, r7, r1
 8004788:	187a      	adds	r2, r7, r1
 800478a:	8812      	ldrh	r2, [r2, #0]
 800478c:	00d2      	lsls	r2, r2, #3
 800478e:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = temp_speed;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	187a      	adds	r2, r7, r1
 8004794:	8812      	ldrh	r2, [r2, #0]
 8004796:	811a      	strh	r2, [r3, #8]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON

		uint8_t temp_depth = ADCResultsDMA_ptr[DEPTH_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	3304      	adds	r3, #4
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	2113      	movs	r1, #19
 80047a6:	187b      	adds	r3, r7, r1
 80047a8:	701a      	strb	r2, [r3, #0]
		params_ptr->depth = temp_depth;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	187a      	adds	r2, r7, r1
 80047ae:	7812      	ldrb	r2, [r2, #0]
 80047b0:	729a      	strb	r2, [r3, #10]
	#endif

	//GET SYMMETRY
	#if SYMMETRY_ON_OR_OFF == ON

		uint16_t temp_symmetry = ADCResultsDMA_ptr[SYMMETRY_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	3306      	adds	r3, #6
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	2110      	movs	r1, #16
 80047bc:	187b      	adds	r3, r7, r1
 80047be:	0952      	lsrs	r2, r2, #5
 80047c0:	801a      	strh	r2, [r3, #0]
		temp_symmetry <<= 1; //convert to 8-bit
 80047c2:	187a      	adds	r2, r7, r1
 80047c4:	187b      	adds	r3, r7, r1
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	18db      	adds	r3, r3, r3
 80047ca:	8013      	strh	r3, [r2, #0]
		params_ptr->symmetry = temp_symmetry;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	187a      	adds	r2, r7, r1
 80047d0:	8812      	ldrh	r2, [r2, #0]
 80047d2:	819a      	strh	r2, [r3, #12]

	#endif

	//GET DELAY LINE READ POINTER OFFSET

	uint16_t temp_delay = ADCResultsDMA_ptr[DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	3308      	adds	r3, #8
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29a      	uxth	r2, r3
 80047dc:	210e      	movs	r1, #14
 80047de:	187b      	adds	r3, r7, r1
 80047e0:	0952      	lsrs	r2, r2, #5
 80047e2:	801a      	strh	r2, [r3, #0]
	temp_delay <<= 2; //convert to 9-bit
 80047e4:	187b      	adds	r3, r7, r1
 80047e6:	187a      	adds	r2, r7, r1
 80047e8:	8812      	ldrh	r2, [r2, #0]
 80047ea:	0092      	lsls	r2, r2, #2
 80047ec:	801a      	strh	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = temp_delay;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	187a      	adds	r2, r7, r1
 80047f2:	8812      	ldrh	r2, [r2, #0]
 80047f4:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 80047f6:	2301      	movs	r3, #1
}
 80047f8:	0018      	movs	r0, r3
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b006      	add	sp, #24
 80047fe:	bd80      	pop	{r7, pc}

08004800 <Startup>:
#include "stm32g0xx_ll_lptim.h"
#include "stm32g0xx_hal_flash.h"

#include "CC_and_PC.h" //for some reason compiler shits itself if this is included in startup.h

uint8_t __attribute__((optimize("O0")))Startup(void){
 8004800:	b5b0      	push	{r4, r5, r7, lr}
 8004802:	b090      	sub	sp, #64	@ 0x40
 8004804:	af02      	add	r7, sp, #8

	//Shouldn't be required now we have a default state set below, even in case flash not programmed //Set_Status_Bit(&statuses, Start_Required_Before_Sync_Mode); //set default mode to requiring START MIDI message before beginning a sync

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8004806:	2007      	movs	r0, #7
 8004808:	f002 fdd7 	bl	80073ba <HAL_NVIC_DisableIRQ>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 800480c:	4b76      	ldr	r3, [pc, #472]	@ (80049e8 <Startup+0x1e8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	4b75      	ldr	r3, [pc, #468]	@ (80049e8 <Startup+0x1e8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2101      	movs	r1, #1
 8004818:	430a      	orrs	r2, r1
 800481a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM16
 800481c:	4b73      	ldr	r3, [pc, #460]	@ (80049ec <Startup+0x1ec>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	4b72      	ldr	r3, [pc, #456]	@ (80049ec <Startup+0x1ec>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2101      	movs	r1, #1
 8004828:	430a      	orrs	r2, r1
 800482a:	60da      	str	r2, [r3, #12]

	//SET DEFAULT PIN STATES
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 800482c:	2380      	movs	r3, #128	@ 0x80
 800482e:	0099      	lsls	r1, r3, #2
 8004830:	23a0      	movs	r3, #160	@ 0xa0
 8004832:	05db      	lsls	r3, r3, #23
 8004834:	2201      	movs	r2, #1
 8004836:	0018      	movs	r0, r3
 8004838:	f003 fc21 	bl	800807e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_HIGH_GPIO_Port, HACK_POT_HIGH_Pin, 1);
 800483c:	2380      	movs	r3, #128	@ 0x80
 800483e:	0159      	lsls	r1, r3, #5
 8004840:	23a0      	movs	r3, #160	@ 0xa0
 8004842:	05db      	lsls	r3, r3, #23
 8004844:	2201      	movs	r2, #1
 8004846:	0018      	movs	r0, r3
 8004848:	f003 fc19 	bl	800807e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_LOW_GPIO_Port, HACK_POT_LOW_Pin, 0);
 800484c:	23a0      	movs	r3, #160	@ 0xa0
 800484e:	05db      	lsls	r3, r3, #23
 8004850:	2200      	movs	r2, #0
 8004852:	2180      	movs	r1, #128	@ 0x80
 8004854:	0018      	movs	r0, r3
 8004856:	f003 fc12 	bl	800807e <HAL_GPIO_WritePin>

	//Point Arrays to Presets
	Initialise_Preset_Arrays();
 800485a:	f7fb fdf7 	bl	800044c <Initialise_Preset_Arrays>

	//TEST
	uint64_t preset_packed = 0;
 800485e:	2200      	movs	r2, #0
 8004860:	2300      	movs	r3, #0
 8004862:	623a      	str	r2, [r7, #32]
 8004864:	627b      	str	r3, [r7, #36]	@ 0x24
	Pack_Preset_Into_Doubleword((struct Preset*)&test_preset_0, &preset_packed);
 8004866:	2320      	movs	r3, #32
 8004868:	18fa      	adds	r2, r7, r3
 800486a:	4b61      	ldr	r3, [pc, #388]	@ (80049f0 <Startup+0x1f0>)
 800486c:	0011      	movs	r1, r2
 800486e:	0018      	movs	r0, r3
 8004870:	f7fb ffd6 	bl	8000820 <Pack_Preset_Into_Doubleword>


	uint64_t *test_preset_val = (uint64_t*)0x0800F800;
 8004874:	4b5f      	ldr	r3, [pc, #380]	@ (80049f4 <Startup+0x1f4>)
 8004876:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t errors = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef erase_config = {.TypeErase = FLASH_CR_PER, .Banks = FLASH_CR_MER1, .Page = 31, .NbPages = 1};
 800487c:	250c      	movs	r5, #12
 800487e:	197b      	adds	r3, r7, r5
 8004880:	4a5d      	ldr	r2, [pc, #372]	@ (80049f8 <Startup+0x1f8>)
 8004882:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004884:	c313      	stmia	r3!, {r0, r1, r4}
 8004886:	6812      	ldr	r2, [r2, #0]
 8004888:	601a      	str	r2, [r3, #0]
	HAL_FLASH_Unlock();
 800488a:	f003 f91f 	bl	8007acc <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&erase_config, &errors); //all 0xF is no errors
 800488e:	231c      	movs	r3, #28
 8004890:	18fa      	adds	r2, r7, r3
 8004892:	197b      	adds	r3, r7, r5
 8004894:	0011      	movs	r1, r2
 8004896:	0018      	movs	r0, r3
 8004898:	f003 f9cc 	bl	8007c34 <HAL_FLASHEx_Erase>


	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 800489c:	6a3a      	ldr	r2, [r7, #32]
 800489e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a0:	4954      	ldr	r1, [pc, #336]	@ (80049f4 <Startup+0x1f4>)
 80048a2:	2001      	movs	r0, #1
 80048a4:	f003 f8c4 	bl	8007a30 <HAL_FLASH_Program>
	uint64_t value = *test_preset_val;
 80048a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	62ba      	str	r2, [r7, #40]	@ 0x28
 80048b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &test_preset_1);
 80048b2:	4b52      	ldr	r3, [pc, #328]	@ (80049fc <Startup+0x1fc>)
 80048b4:	4a4f      	ldr	r2, [pc, #316]	@ (80049f4 <Startup+0x1f4>)
 80048b6:	0019      	movs	r1, r3
 80048b8:	0010      	movs	r0, r2
 80048ba:	f7fc f80a 	bl	80008d2 <Read_and_Interpret_Preset_From_Flash>

	struct Preset read_preset = test_preset_1;
 80048be:	1d3a      	adds	r2, r7, #4
 80048c0:	4b4e      	ldr	r3, [pc, #312]	@ (80049fc <Startup+0x1fc>)
 80048c2:	0010      	movs	r0, r2
 80048c4:	0019      	movs	r1, r3
 80048c6:	2305      	movs	r3, #5
 80048c8:	001a      	movs	r2, r3
 80048ca:	f008 fd79 	bl	800d3c0 <memcpy>

	HAL_FLASH_Lock();
 80048ce:	f003 f921 	bl	8007b14 <HAL_FLASH_Lock>
	//TEST

	//Read User Presets From Flash, regardless of whether they have been written to before
	Read_and_Interpret_User_Presets_From_Flash();
 80048d2:	f7fc f943 	bl	8000b5c <Read_and_Interpret_User_Presets_From_Flash>

	//Read 'User Preset Used' Bytes, 'Start Required Before MIDI CLK' Byte, MIDI Omni On/Off Status Bit, and MIDI Basic Channel
	Read_and_Interpret_Misc_From_Flash(MISC_FLASH_MEMORY_ADDRESS, user_presets_used_array, &statuses, &MIDI_basic_channel, NUM_PRESETS);
 80048d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004a00 <Startup+0x200>)
 80048d8:	4a4a      	ldr	r2, [pc, #296]	@ (8004a04 <Startup+0x204>)
 80048da:	494b      	ldr	r1, [pc, #300]	@ (8004a08 <Startup+0x208>)
 80048dc:	4c4b      	ldr	r4, [pc, #300]	@ (8004a0c <Startup+0x20c>)
 80048de:	2004      	movs	r0, #4
 80048e0:	9000      	str	r0, [sp, #0]
 80048e2:	0020      	movs	r0, r4
 80048e4:	f7fc f82e 	bl	8000944 <Read_and_Interpret_Misc_From_Flash>

	//Set the Converted Preset Array to the Relevant Factory/User Preset depending upon the 'User Preset Used' Byte read from Flash
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array,
 80048e8:	4b49      	ldr	r3, [pc, #292]	@ (8004a10 <Startup+0x210>)
 80048ea:	4a4a      	ldr	r2, [pc, #296]	@ (8004a14 <Startup+0x214>)
 80048ec:	4946      	ldr	r1, [pc, #280]	@ (8004a08 <Startup+0x208>)
 80048ee:	484a      	ldr	r0, [pc, #296]	@ (8004a18 <Startup+0x218>)
 80048f0:	2404      	movs	r4, #4
 80048f2:	9400      	str	r4, [sp, #0]
 80048f4:	f7fc f8dc 	bl	8000ab0 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
												  	  	  	  factory_presets_array,
															  user_presets_array,
															  NUM_PRESETS);

	//GET ADC VALUES
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 80048f8:	4b48      	ldr	r3, [pc, #288]	@ (8004a1c <Startup+0x21c>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	001a      	movs	r2, r3
 80048fe:	4948      	ldr	r1, [pc, #288]	@ (8004a20 <Startup+0x220>)
 8004900:	4b48      	ldr	r3, [pc, #288]	@ (8004a24 <Startup+0x224>)
 8004902:	0018      	movs	r0, r3
 8004904:	f001 fe0a 	bl	800651c <HAL_ADC_Start_DMA>

	//WAIT
	while(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){}; //wait while first ADC conversion is ongoing - raw and final values will be computed within this time
 8004908:	46c0      	nop			@ (mov r8, r8)
 800490a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a04 <Startup+0x204>)
 800490c:	2110      	movs	r1, #16
 800490e:	0018      	movs	r0, r3
 8004910:	f001 f94c 	bl	8005bac <Get_Status_Bit>
 8004914:	1e03      	subs	r3, r0, #0
 8004916:	d0f8      	beq.n	800490a <Startup+0x10a>

	// re-initialise all values in delay line storage array to middle value of wave (if sine/triangle mode) or bottom of wave if square mode, as they are initialised to 0 on startup
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8004918:	2336      	movs	r3, #54	@ 0x36
 800491a:	18fb      	adds	r3, r7, r3
 800491c:	2200      	movs	r2, #0
 800491e:	801a      	strh	r2, [r3, #0]
 8004920:	e02f      	b.n	8004982 <Startup+0x182>

		if(params.waveshape == SQUARE_MODE){
 8004922:	4b41      	ldr	r3, [pc, #260]	@ (8004a28 <Startup+0x228>)
 8004924:	799b      	ldrb	r3, [r3, #6]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d112      	bne.n	8004952 <Startup+0x152>

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
 800492c:	4b3e      	ldr	r3, [pc, #248]	@ (8004a28 <Startup+0x228>)
 800492e:	7a9b      	ldrb	r3, [r3, #10]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	001a      	movs	r2, r3
 8004934:	0013      	movs	r3, r2
 8004936:	029b      	lsls	r3, r3, #10
 8004938:	1a9b      	subs	r3, r3, r2
 800493a:	11db      	asrs	r3, r3, #7
 800493c:	b29b      	uxth	r3, r3
 800493e:	2236      	movs	r2, #54	@ 0x36
 8004940:	18ba      	adds	r2, r7, r2
 8004942:	8812      	ldrh	r2, [r2, #0]
 8004944:	4939      	ldr	r1, [pc, #228]	@ (8004a2c <Startup+0x22c>)
 8004946:	1acb      	subs	r3, r1, r3
 8004948:	b299      	uxth	r1, r3
 800494a:	4b39      	ldr	r3, [pc, #228]	@ (8004a30 <Startup+0x230>)
 800494c:	0052      	lsls	r2, r2, #1
 800494e:	52d1      	strh	r1, [r2, r3]
 8004950:	e011      	b.n	8004976 <Startup+0x176>
		}
		else{

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - (((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION) >> 1);
 8004952:	4b35      	ldr	r3, [pc, #212]	@ (8004a28 <Startup+0x228>)
 8004954:	7a9b      	ldrb	r3, [r3, #10]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	001a      	movs	r2, r3
 800495a:	0013      	movs	r3, r2
 800495c:	029b      	lsls	r3, r3, #10
 800495e:	1a9b      	subs	r3, r3, r2
 8004960:	121b      	asrs	r3, r3, #8
 8004962:	b29b      	uxth	r3, r3
 8004964:	2236      	movs	r2, #54	@ 0x36
 8004966:	18ba      	adds	r2, r7, r2
 8004968:	8812      	ldrh	r2, [r2, #0]
 800496a:	4930      	ldr	r1, [pc, #192]	@ (8004a2c <Startup+0x22c>)
 800496c:	1acb      	subs	r3, r1, r3
 800496e:	b299      	uxth	r1, r3
 8004970:	4b2f      	ldr	r3, [pc, #188]	@ (8004a30 <Startup+0x230>)
 8004972:	0052      	lsls	r2, r2, #1
 8004974:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8004976:	2136      	movs	r1, #54	@ 0x36
 8004978:	187b      	adds	r3, r7, r1
 800497a:	881a      	ldrh	r2, [r3, #0]
 800497c:	187b      	adds	r3, r7, r1
 800497e:	3201      	adds	r2, #1
 8004980:	801a      	strh	r2, [r3, #0]
 8004982:	2336      	movs	r3, #54	@ 0x36
 8004984:	18fb      	adds	r3, r7, r3
 8004986:	881a      	ldrh	r2, [r3, #0]
 8004988:	2380      	movs	r3, #128	@ 0x80
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	429a      	cmp	r2, r3
 800498e:	d9c8      	bls.n	8004922 <Startup+0x122>
		}
	}

	//PREPARE OSCILLATORS
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)STARTUP_MODE);
 8004990:	4b25      	ldr	r3, [pc, #148]	@ (8004a28 <Startup+0x228>)
 8004992:	2102      	movs	r1, #2
 8004994:	0018      	movs	r0, r3
 8004996:	f7ff fd3d 	bl	8004414 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 800499a:	4a25      	ldr	r2, [pc, #148]	@ (8004a30 <Startup+0x230>)
 800499c:	4b22      	ldr	r3, [pc, #136]	@ (8004a28 <Startup+0x228>)
 800499e:	0011      	movs	r1, r2
 80049a0:	0018      	movs	r0, r3
 80049a2:	f7ff fe2d 	bl	8004600 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	Set_Oscillator_Values(&params);
 80049a6:	4b20      	ldr	r3, [pc, #128]	@ (8004a28 <Startup+0x228>)
 80049a8:	0018      	movs	r0, r3
 80049aa:	f7ff fd07 	bl	80043bc <Set_Oscillator_Values>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(&htim1, TIM_CHANNEL_2, TIM_CHANNEL_4);
 80049ae:	4b21      	ldr	r3, [pc, #132]	@ (8004a34 <Startup+0x234>)
 80049b0:	220c      	movs	r2, #12
 80049b2:	2104      	movs	r1, #4
 80049b4:	0018      	movs	r0, r3
 80049b6:	f7ff fc75 	bl	80042a4 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>
	Start_Freq_Gen_Timer();
 80049ba:	f7ff fcaf 	bl	800431c <Start_Freq_Gen_Timer>

	//START UART RECEIVE
	Start_UART_Receive();
 80049be:	f7fc fcf7 	bl	80013b0 <Start_UART_Receive>

	//START IP CAP
	Start_Input_Capture_Timer();
 80049c2:	f7ff fb65 	bl	8004090 <Start_Input_Capture_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 80049c6:	f001 f8e9 	bl	8005b9c <Global_Interrupt_Enable>

	//ENABLE TAP-TEMPO SWITCH CHECKING
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 80049ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004a38 <Startup+0x238>)
 80049cc:	22fa      	movs	r2, #250	@ 0xfa
 80049ce:	21fa      	movs	r1, #250	@ 0xfa
 80049d0:	0018      	movs	r0, r3
 80049d2:	f003 fc4b 	bl	800826c <HAL_LPTIM_SetOnce_Start_IT>

	//ENABLE EXTI
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80049d6:	2007      	movs	r0, #7
 80049d8:	f002 fcdf 	bl	800739a <HAL_NVIC_EnableIRQ>

	return 1;
 80049dc:	2301      	movs	r3, #1
}
 80049de:	0018      	movs	r0, r3
 80049e0:	46bd      	mov	sp, r7
 80049e2:	b00e      	add	sp, #56	@ 0x38
 80049e4:	bdb0      	pop	{r4, r5, r7, pc}
 80049e6:	46c0      	nop			@ (mov r8, r8)
 80049e8:	20000894 	.word	0x20000894
 80049ec:	200007d8 	.word	0x200007d8
 80049f0:	0800d430 	.word	0x0800d430
 80049f4:	0800f800 	.word	0x0800f800
 80049f8:	0800d400 	.word	0x0800d400
 80049fc:	200004f0 	.word	0x200004f0
 8004a00:	2000054d 	.word	0x2000054d
 8004a04:	20000cb4 	.word	0x20000cb4
 8004a08:	20000544 	.word	0x20000544
 8004a0c:	0800f820 	.word	0x0800f820
 8004a10:	20000508 	.word	0x20000508
 8004a14:	200004f8 	.word	0x200004f8
 8004a18:	20000518 	.word	0x20000518
 8004a1c:	0800dc38 	.word	0x0800dc38
 8004a20:	20000cc0 	.word	0x20000cc0
 8004a24:	2000057c 	.word	0x2000057c
 8004a28:	20000ccc 	.word	0x20000ccc
 8004a2c:	000003ff 	.word	0x000003ff
 8004a30:	20000020 	.word	0x20000020
 8004a34:	20000a0c 	.word	0x20000a0c
 8004a38:	20000c4c 	.word	0x20000c4c

08004a3c <Advance_Pending_States>:
volatile struct Normal_FSM phase_fsm = {.current_state = MANUAL_MODE, .prev_state = NONE};
volatile struct IP_CAP_FSM IP_CAP_fsm = {.current_state = IDLE, .prev_state = IP_CAP_NONE};
volatile enum MIDI_CLK_FSM_State MIDI_CLK_fsm = NOT_COMPILING;

//FUNCTION DEFINITIONS
uint8_t Advance_Pending_States(void){
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0

	//UPDATE SPEED FSM
	union Speed_FSM_States current_state = speed_fsm.current_state;
 8004a42:	1d3b      	adds	r3, r7, #4
 8004a44:	4a12      	ldr	r2, [pc, #72]	@ (8004a90 <Advance_Pending_States+0x54>)
 8004a46:	7812      	ldrb	r2, [r2, #0]
 8004a48:	701a      	strb	r2, [r3, #0]

	if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8004a4a:	4b11      	ldr	r3, [pc, #68]	@ (8004a90 <Advance_Pending_States+0x54>)
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b05      	cmp	r3, #5
 8004a52:	d103      	bne.n	8004a5c <Advance_Pending_States+0x20>

		speed_fsm.current_state.speed_exclusive_state = TAP_MODE;
 8004a54:	4b0e      	ldr	r3, [pc, #56]	@ (8004a90 <Advance_Pending_States+0x54>)
 8004a56:	2204      	movs	r2, #4
 8004a58:	701a      	strb	r2, [r3, #0]
 8004a5a:	e007      	b.n	8004a6c <Advance_Pending_States+0x30>
	}
	else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){
 8004a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a90 <Advance_Pending_States+0x54>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b07      	cmp	r3, #7
 8004a64:	d102      	bne.n	8004a6c <Advance_Pending_States+0x30>

		speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8004a66:	4b0a      	ldr	r3, [pc, #40]	@ (8004a90 <Advance_Pending_States+0x54>)
 8004a68:	2206      	movs	r2, #6
 8004a6a:	701a      	strb	r2, [r3, #0]
	}

	//DON'T ADD MIDI CLK CODE


	if(!((current_state.speed_exclusive_state == CLK_IN_MODE) || (current_state.speed_exclusive_state == TAP_MODE))){
 8004a6c:	1d3b      	adds	r3, r7, #4
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b06      	cmp	r3, #6
 8004a72:	d007      	beq.n	8004a84 <Advance_Pending_States+0x48>
 8004a74:	1d3b      	adds	r3, r7, #4
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d003      	beq.n	8004a84 <Advance_Pending_States+0x48>

		speed_fsm.prev_state = current_state;
 8004a7c:	4b04      	ldr	r3, [pc, #16]	@ (8004a90 <Advance_Pending_States+0x54>)
 8004a7e:	1d3a      	adds	r2, r7, #4
 8004a80:	7812      	ldrb	r2, [r2, #0]
 8004a82:	705a      	strb	r2, [r3, #1]
	}

	return 1;
 8004a84:	2301      	movs	r3, #1
}
 8004a86:	0018      	movs	r0, r3
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	b002      	add	sp, #8
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	46c0      	nop			@ (mov r8, r8)
 8004a90:	20000428 	.word	0x20000428

08004a94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad8 <HAL_MspInit+0x44>)
 8004a9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad8 <HAL_MspInit+0x44>)
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	641a      	str	r2, [r3, #64]	@ 0x40
 8004aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad8 <HAL_MspInit+0x44>)
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aaa:	2201      	movs	r2, #1
 8004aac:	4013      	ands	r3, r2
 8004aae:	607b      	str	r3, [r7, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ab2:	4b09      	ldr	r3, [pc, #36]	@ (8004ad8 <HAL_MspInit+0x44>)
 8004ab4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ab6:	4b08      	ldr	r3, [pc, #32]	@ (8004ad8 <HAL_MspInit+0x44>)
 8004ab8:	2180      	movs	r1, #128	@ 0x80
 8004aba:	0549      	lsls	r1, r1, #21
 8004abc:	430a      	orrs	r2, r1
 8004abe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004ac0:	4b05      	ldr	r3, [pc, #20]	@ (8004ad8 <HAL_MspInit+0x44>)
 8004ac2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ac4:	2380      	movs	r3, #128	@ 0x80
 8004ac6:	055b      	lsls	r3, r3, #21
 8004ac8:	4013      	ands	r3, r2
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ace:	46c0      	nop			@ (mov r8, r8)
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	b002      	add	sp, #8
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	46c0      	nop			@ (mov r8, r8)
 8004ad8:	40021000 	.word	0x40021000

08004adc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004adc:	b590      	push	{r4, r7, lr}
 8004ade:	b08b      	sub	sp, #44	@ 0x2c
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae4:	2414      	movs	r4, #20
 8004ae6:	193b      	adds	r3, r7, r4
 8004ae8:	0018      	movs	r0, r3
 8004aea:	2314      	movs	r3, #20
 8004aec:	001a      	movs	r2, r3
 8004aee:	2100      	movs	r1, #0
 8004af0:	f008 fc3a 	bl	800d368 <memset>
  if(hadc->Instance==ADC1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a2e      	ldr	r2, [pc, #184]	@ (8004bb4 <HAL_ADC_MspInit+0xd8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d155      	bne.n	8004baa <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004afe:	4b2e      	ldr	r3, [pc, #184]	@ (8004bb8 <HAL_ADC_MspInit+0xdc>)
 8004b00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b02:	4b2d      	ldr	r3, [pc, #180]	@ (8004bb8 <HAL_ADC_MspInit+0xdc>)
 8004b04:	2180      	movs	r1, #128	@ 0x80
 8004b06:	0349      	lsls	r1, r1, #13
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8004b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8004bb8 <HAL_ADC_MspInit+0xdc>)
 8004b0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b10:	2380      	movs	r3, #128	@ 0x80
 8004b12:	035b      	lsls	r3, r3, #13
 8004b14:	4013      	ands	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b1a:	4b27      	ldr	r3, [pc, #156]	@ (8004bb8 <HAL_ADC_MspInit+0xdc>)
 8004b1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b1e:	4b26      	ldr	r3, [pc, #152]	@ (8004bb8 <HAL_ADC_MspInit+0xdc>)
 8004b20:	2101      	movs	r1, #1
 8004b22:	430a      	orrs	r2, r1
 8004b24:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b26:	4b24      	ldr	r3, [pc, #144]	@ (8004bb8 <HAL_ADC_MspInit+0xdc>)
 8004b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004b32:	193b      	adds	r3, r7, r4
 8004b34:	2273      	movs	r2, #115	@ 0x73
 8004b36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b38:	193b      	adds	r3, r7, r4
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b3e:	193b      	adds	r3, r7, r4
 8004b40:	2200      	movs	r2, #0
 8004b42:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b44:	193a      	adds	r2, r7, r4
 8004b46:	23a0      	movs	r3, #160	@ 0xa0
 8004b48:	05db      	lsls	r3, r3, #23
 8004b4a:	0011      	movs	r1, r2
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f003 f915 	bl	8007d7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004b52:	4b1a      	ldr	r3, [pc, #104]	@ (8004bbc <HAL_ADC_MspInit+0xe0>)
 8004b54:	4a1a      	ldr	r2, [pc, #104]	@ (8004bc0 <HAL_ADC_MspInit+0xe4>)
 8004b56:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004b58:	4b18      	ldr	r3, [pc, #96]	@ (8004bbc <HAL_ADC_MspInit+0xe0>)
 8004b5a:	2205      	movs	r2, #5
 8004b5c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b5e:	4b17      	ldr	r3, [pc, #92]	@ (8004bbc <HAL_ADC_MspInit+0xe0>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b64:	4b15      	ldr	r3, [pc, #84]	@ (8004bbc <HAL_ADC_MspInit+0xe0>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004b6a:	4b14      	ldr	r3, [pc, #80]	@ (8004bbc <HAL_ADC_MspInit+0xe0>)
 8004b6c:	2280      	movs	r2, #128	@ 0x80
 8004b6e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004b70:	4b12      	ldr	r3, [pc, #72]	@ (8004bbc <HAL_ADC_MspInit+0xe0>)
 8004b72:	2280      	movs	r2, #128	@ 0x80
 8004b74:	0052      	lsls	r2, r2, #1
 8004b76:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004b78:	4b10      	ldr	r3, [pc, #64]	@ (8004bbc <HAL_ADC_MspInit+0xe0>)
 8004b7a:	2280      	movs	r2, #128	@ 0x80
 8004b7c:	00d2      	lsls	r2, r2, #3
 8004b7e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004b80:	4b0e      	ldr	r3, [pc, #56]	@ (8004bbc <HAL_ADC_MspInit+0xe0>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8004b86:	4b0d      	ldr	r3, [pc, #52]	@ (8004bbc <HAL_ADC_MspInit+0xe0>)
 8004b88:	2280      	movs	r2, #128	@ 0x80
 8004b8a:	0192      	lsls	r2, r2, #6
 8004b8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bbc <HAL_ADC_MspInit+0xe0>)
 8004b90:	0018      	movs	r0, r3
 8004b92:	f002 fc2f 	bl	80073f4 <HAL_DMA_Init>
 8004b96:	1e03      	subs	r3, r0, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8004b9a:	f7fd fb7f 	bl	800229c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a06      	ldr	r2, [pc, #24]	@ (8004bbc <HAL_ADC_MspInit+0xe0>)
 8004ba2:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ba4:	4b05      	ldr	r3, [pc, #20]	@ (8004bbc <HAL_ADC_MspInit+0xe0>)
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004baa:	46c0      	nop			@ (mov r8, r8)
 8004bac:	46bd      	mov	sp, r7
 8004bae:	b00b      	add	sp, #44	@ 0x2c
 8004bb0:	bd90      	pop	{r4, r7, pc}
 8004bb2:	46c0      	nop			@ (mov r8, r8)
 8004bb4:	40012400 	.word	0x40012400
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	20000604 	.word	0x20000604
 8004bc0:	40020008 	.word	0x40020008

08004bc4 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8004bc4:	b590      	push	{r4, r7, lr}
 8004bc6:	b097      	sub	sp, #92	@ 0x5c
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bcc:	2344      	movs	r3, #68	@ 0x44
 8004bce:	18fb      	adds	r3, r7, r3
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	2314      	movs	r3, #20
 8004bd4:	001a      	movs	r2, r3
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	f008 fbc6 	bl	800d368 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004bdc:	241c      	movs	r4, #28
 8004bde:	193b      	adds	r3, r7, r4
 8004be0:	0018      	movs	r0, r3
 8004be2:	2328      	movs	r3, #40	@ 0x28
 8004be4:	001a      	movs	r2, r3
 8004be6:	2100      	movs	r1, #0
 8004be8:	f008 fbbe 	bl	800d368 <memset>
  if(hlptim->Instance==LPTIM1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a46      	ldr	r2, [pc, #280]	@ (8004d0c <HAL_LPTIM_MspInit+0x148>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d13e      	bne.n	8004c74 <HAL_LPTIM_MspInit+0xb0>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8004bf6:	193b      	adds	r3, r7, r4
 8004bf8:	2280      	movs	r2, #128	@ 0x80
 8004bfa:	0092      	lsls	r2, r2, #2
 8004bfc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 8004bfe:	193b      	adds	r3, r7, r4
 8004c00:	2200      	movs	r2, #0
 8004c02:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c04:	193b      	adds	r3, r7, r4
 8004c06:	0018      	movs	r0, r3
 8004c08:	f004 fb9e 	bl	8009348 <HAL_RCCEx_PeriphCLKConfig>
 8004c0c:	1e03      	subs	r3, r0, #0
 8004c0e:	d001      	beq.n	8004c14 <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 8004c10:	f7fd fb44 	bl	800229c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8004c14:	4b3e      	ldr	r3, [pc, #248]	@ (8004d10 <HAL_LPTIM_MspInit+0x14c>)
 8004c16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c18:	4b3d      	ldr	r3, [pc, #244]	@ (8004d10 <HAL_LPTIM_MspInit+0x14c>)
 8004c1a:	2180      	movs	r1, #128	@ 0x80
 8004c1c:	0609      	lsls	r1, r1, #24
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004c22:	4b3b      	ldr	r3, [pc, #236]	@ (8004d10 <HAL_LPTIM_MspInit+0x14c>)
 8004c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c26:	0fdb      	lsrs	r3, r3, #31
 8004c28:	07db      	lsls	r3, r3, #31
 8004c2a:	61bb      	str	r3, [r7, #24]
 8004c2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c2e:	4b38      	ldr	r3, [pc, #224]	@ (8004d10 <HAL_LPTIM_MspInit+0x14c>)
 8004c30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c32:	4b37      	ldr	r3, [pc, #220]	@ (8004d10 <HAL_LPTIM_MspInit+0x14c>)
 8004c34:	2102      	movs	r1, #2
 8004c36:	430a      	orrs	r2, r1
 8004c38:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c3a:	4b35      	ldr	r3, [pc, #212]	@ (8004d10 <HAL_LPTIM_MspInit+0x14c>)
 8004c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c3e:	2202      	movs	r2, #2
 8004c40:	4013      	ands	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	697b      	ldr	r3, [r7, #20]
    /**LPTIM1 GPIO Configuration
    PB0     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004c46:	2144      	movs	r1, #68	@ 0x44
 8004c48:	187b      	adds	r3, r7, r1
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c4e:	187b      	adds	r3, r7, r1
 8004c50:	2202      	movs	r2, #2
 8004c52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c54:	187b      	adds	r3, r7, r1
 8004c56:	2200      	movs	r2, #0
 8004c58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c5a:	187b      	adds	r3, r7, r1
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM1;
 8004c60:	187b      	adds	r3, r7, r1
 8004c62:	2205      	movs	r2, #5
 8004c64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c66:	187b      	adds	r3, r7, r1
 8004c68:	4a2a      	ldr	r2, [pc, #168]	@ (8004d14 <HAL_LPTIM_MspInit+0x150>)
 8004c6a:	0019      	movs	r1, r3
 8004c6c:	0010      	movs	r0, r2
 8004c6e:	f003 f885 	bl	8007d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8004c72:	e046      	b.n	8004d02 <HAL_LPTIM_MspInit+0x13e>
  else if(hlptim->Instance==LPTIM2)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a27      	ldr	r2, [pc, #156]	@ (8004d18 <HAL_LPTIM_MspInit+0x154>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d141      	bne.n	8004d02 <HAL_LPTIM_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8004c7e:	211c      	movs	r1, #28
 8004c80:	187b      	adds	r3, r7, r1
 8004c82:	2280      	movs	r2, #128	@ 0x80
 8004c84:	00d2      	lsls	r2, r2, #3
 8004c86:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK1;
 8004c88:	187b      	adds	r3, r7, r1
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c8e:	187b      	adds	r3, r7, r1
 8004c90:	0018      	movs	r0, r3
 8004c92:	f004 fb59 	bl	8009348 <HAL_RCCEx_PeriphCLKConfig>
 8004c96:	1e03      	subs	r3, r0, #0
 8004c98:	d001      	beq.n	8004c9e <HAL_LPTIM_MspInit+0xda>
      Error_Handler();
 8004c9a:	f7fd faff 	bl	800229c <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8004c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8004d10 <HAL_LPTIM_MspInit+0x14c>)
 8004ca0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8004d10 <HAL_LPTIM_MspInit+0x14c>)
 8004ca4:	2180      	movs	r1, #128	@ 0x80
 8004ca6:	05c9      	lsls	r1, r1, #23
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004cac:	4b18      	ldr	r3, [pc, #96]	@ (8004d10 <HAL_LPTIM_MspInit+0x14c>)
 8004cae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cb0:	2380      	movs	r3, #128	@ 0x80
 8004cb2:	05db      	lsls	r3, r3, #23
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
 8004cb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cba:	4b15      	ldr	r3, [pc, #84]	@ (8004d10 <HAL_LPTIM_MspInit+0x14c>)
 8004cbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cbe:	4b14      	ldr	r3, [pc, #80]	@ (8004d10 <HAL_LPTIM_MspInit+0x14c>)
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	635a      	str	r2, [r3, #52]	@ 0x34
 8004cc6:	4b12      	ldr	r3, [pc, #72]	@ (8004d10 <HAL_LPTIM_MspInit+0x14c>)
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cca:	2201      	movs	r2, #1
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004cd2:	2144      	movs	r1, #68	@ 0x44
 8004cd4:	187b      	adds	r3, r7, r1
 8004cd6:	2280      	movs	r2, #128	@ 0x80
 8004cd8:	0052      	lsls	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cdc:	187b      	adds	r3, r7, r1
 8004cde:	2202      	movs	r2, #2
 8004ce0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce2:	187b      	adds	r3, r7, r1
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ce8:	187b      	adds	r3, r7, r1
 8004cea:	2200      	movs	r2, #0
 8004cec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM2;
 8004cee:	187b      	adds	r3, r7, r1
 8004cf0:	2205      	movs	r2, #5
 8004cf2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cf4:	187a      	adds	r2, r7, r1
 8004cf6:	23a0      	movs	r3, #160	@ 0xa0
 8004cf8:	05db      	lsls	r3, r3, #23
 8004cfa:	0011      	movs	r1, r2
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	f003 f83d 	bl	8007d7c <HAL_GPIO_Init>
}
 8004d02:	46c0      	nop			@ (mov r8, r8)
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b017      	add	sp, #92	@ 0x5c
 8004d08:	bd90      	pop	{r4, r7, pc}
 8004d0a:	46c0      	nop			@ (mov r8, r8)
 8004d0c:	40007c00 	.word	0x40007c00
 8004d10:	40021000 	.word	0x40021000
 8004d14:	50000400 	.word	0x50000400
 8004d18:	40009400 	.word	0x40009400

08004d1c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d1c:	b590      	push	{r4, r7, lr}
 8004d1e:	b099      	sub	sp, #100	@ 0x64
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d24:	234c      	movs	r3, #76	@ 0x4c
 8004d26:	18fb      	adds	r3, r7, r3
 8004d28:	0018      	movs	r0, r3
 8004d2a:	2314      	movs	r3, #20
 8004d2c:	001a      	movs	r2, r3
 8004d2e:	2100      	movs	r1, #0
 8004d30:	f008 fb1a 	bl	800d368 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d34:	2424      	movs	r4, #36	@ 0x24
 8004d36:	193b      	adds	r3, r7, r4
 8004d38:	0018      	movs	r0, r3
 8004d3a:	2328      	movs	r3, #40	@ 0x28
 8004d3c:	001a      	movs	r2, r3
 8004d3e:	2100      	movs	r1, #0
 8004d40:	f008 fb12 	bl	800d368 <memset>
  if(htim_base->Instance==TIM1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a68      	ldr	r2, [pc, #416]	@ (8004eec <HAL_TIM_Base_MspInit+0x1d0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d11d      	bne.n	8004d8a <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8004d4e:	193b      	adds	r3, r7, r4
 8004d50:	2280      	movs	r2, #128	@ 0x80
 8004d52:	0392      	lsls	r2, r2, #14
 8004d54:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8004d56:	193b      	adds	r3, r7, r4
 8004d58:	2200      	movs	r2, #0
 8004d5a:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d5c:	193b      	adds	r3, r7, r4
 8004d5e:	0018      	movs	r0, r3
 8004d60:	f004 faf2 	bl	8009348 <HAL_RCCEx_PeriphCLKConfig>
 8004d64:	1e03      	subs	r3, r0, #0
 8004d66:	d001      	beq.n	8004d6c <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 8004d68:	f7fd fa98 	bl	800229c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d6c:	4b60      	ldr	r3, [pc, #384]	@ (8004ef0 <HAL_TIM_Base_MspInit+0x1d4>)
 8004d6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d70:	4b5f      	ldr	r3, [pc, #380]	@ (8004ef0 <HAL_TIM_Base_MspInit+0x1d4>)
 8004d72:	2180      	movs	r1, #128	@ 0x80
 8004d74:	0109      	lsls	r1, r1, #4
 8004d76:	430a      	orrs	r2, r1
 8004d78:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d7a:	4b5d      	ldr	r3, [pc, #372]	@ (8004ef0 <HAL_TIM_Base_MspInit+0x1d4>)
 8004d7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d7e:	2380      	movs	r3, #128	@ 0x80
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	4013      	ands	r3, r2
 8004d84:	623b      	str	r3, [r7, #32]
 8004d86:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }

}
 8004d88:	e0ab      	b.n	8004ee2 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM2)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	2380      	movs	r3, #128	@ 0x80
 8004d90:	05db      	lsls	r3, r3, #23
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d138      	bne.n	8004e08 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d96:	4b56      	ldr	r3, [pc, #344]	@ (8004ef0 <HAL_TIM_Base_MspInit+0x1d4>)
 8004d98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d9a:	4b55      	ldr	r3, [pc, #340]	@ (8004ef0 <HAL_TIM_Base_MspInit+0x1d4>)
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004da2:	4b53      	ldr	r3, [pc, #332]	@ (8004ef0 <HAL_TIM_Base_MspInit+0x1d4>)
 8004da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004da6:	2201      	movs	r2, #1
 8004da8:	4013      	ands	r3, r2
 8004daa:	61fb      	str	r3, [r7, #28]
 8004dac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dae:	4b50      	ldr	r3, [pc, #320]	@ (8004ef0 <HAL_TIM_Base_MspInit+0x1d4>)
 8004db0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004db2:	4b4f      	ldr	r3, [pc, #316]	@ (8004ef0 <HAL_TIM_Base_MspInit+0x1d4>)
 8004db4:	2101      	movs	r1, #1
 8004db6:	430a      	orrs	r2, r1
 8004db8:	635a      	str	r2, [r3, #52]	@ 0x34
 8004dba:	4b4d      	ldr	r3, [pc, #308]	@ (8004ef0 <HAL_TIM_Base_MspInit+0x1d4>)
 8004dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	61bb      	str	r3, [r7, #24]
 8004dc4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 8004dc6:	214c      	movs	r1, #76	@ 0x4c
 8004dc8:	187b      	adds	r3, r7, r1
 8004dca:	2280      	movs	r2, #128	@ 0x80
 8004dcc:	0212      	lsls	r2, r2, #8
 8004dce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd0:	187b      	adds	r3, r7, r1
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP; //even though we do not 'technically' need a pullup as a push-pull O/P will be driving the I/P cap pin, I think it is better to ensure the I/P cap input properly idles
 8004dd6:	187b      	adds	r3, r7, r1
 8004dd8:	2201      	movs	r2, #1
 8004dda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ddc:	187b      	adds	r3, r7, r1
 8004dde:	2200      	movs	r2, #0
 8004de0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004de2:	187b      	adds	r3, r7, r1
 8004de4:	2202      	movs	r2, #2
 8004de6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 8004de8:	187a      	adds	r2, r7, r1
 8004dea:	23a0      	movs	r3, #160	@ 0xa0
 8004dec:	05db      	lsls	r3, r3, #23
 8004dee:	0011      	movs	r1, r2
 8004df0:	0018      	movs	r0, r3
 8004df2:	f002 ffc3 	bl	8007d7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 2);
 8004df6:	2202      	movs	r2, #2
 8004df8:	2102      	movs	r1, #2
 8004dfa:	200f      	movs	r0, #15
 8004dfc:	f002 fab8 	bl	8007370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004e00:	200f      	movs	r0, #15
 8004e02:	f002 faca 	bl	800739a <HAL_NVIC_EnableIRQ>
}
 8004e06:	e06c      	b.n	8004ee2 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM3)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a39      	ldr	r2, [pc, #228]	@ (8004ef4 <HAL_TIM_Base_MspInit+0x1d8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d114      	bne.n	8004e3c <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e12:	4b37      	ldr	r3, [pc, #220]	@ (8004ef0 <HAL_TIM_Base_MspInit+0x1d4>)
 8004e14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e16:	4b36      	ldr	r3, [pc, #216]	@ (8004ef0 <HAL_TIM_Base_MspInit+0x1d4>)
 8004e18:	2102      	movs	r1, #2
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004e1e:	4b34      	ldr	r3, [pc, #208]	@ (8004ef0 <HAL_TIM_Base_MspInit+0x1d4>)
 8004e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e22:	2202      	movs	r2, #2
 8004e24:	4013      	ands	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	2010      	movs	r0, #16
 8004e30:	f002 fa9e 	bl	8007370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004e34:	2010      	movs	r0, #16
 8004e36:	f002 fab0 	bl	800739a <HAL_NVIC_EnableIRQ>
}
 8004e3a:	e052      	b.n	8004ee2 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM16)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a2d      	ldr	r2, [pc, #180]	@ (8004ef8 <HAL_TIM_Base_MspInit+0x1dc>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d116      	bne.n	8004e74 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004e46:	4b2a      	ldr	r3, [pc, #168]	@ (8004ef0 <HAL_TIM_Base_MspInit+0x1d4>)
 8004e48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e4a:	4b29      	ldr	r3, [pc, #164]	@ (8004ef0 <HAL_TIM_Base_MspInit+0x1d4>)
 8004e4c:	2180      	movs	r1, #128	@ 0x80
 8004e4e:	0289      	lsls	r1, r1, #10
 8004e50:	430a      	orrs	r2, r1
 8004e52:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e54:	4b26      	ldr	r3, [pc, #152]	@ (8004ef0 <HAL_TIM_Base_MspInit+0x1d4>)
 8004e56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e58:	2380      	movs	r3, #128	@ 0x80
 8004e5a:	029b      	lsls	r3, r3, #10
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004e62:	2200      	movs	r2, #0
 8004e64:	2100      	movs	r1, #0
 8004e66:	2015      	movs	r0, #21
 8004e68:	f002 fa82 	bl	8007370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004e6c:	2015      	movs	r0, #21
 8004e6e:	f002 fa94 	bl	800739a <HAL_NVIC_EnableIRQ>
}
 8004e72:	e036      	b.n	8004ee2 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM17)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a20      	ldr	r2, [pc, #128]	@ (8004efc <HAL_TIM_Base_MspInit+0x1e0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d116      	bne.n	8004eac <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ef0 <HAL_TIM_Base_MspInit+0x1d4>)
 8004e80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e82:	4b1b      	ldr	r3, [pc, #108]	@ (8004ef0 <HAL_TIM_Base_MspInit+0x1d4>)
 8004e84:	2180      	movs	r1, #128	@ 0x80
 8004e86:	02c9      	lsls	r1, r1, #11
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e8c:	4b18      	ldr	r3, [pc, #96]	@ (8004ef0 <HAL_TIM_Base_MspInit+0x1d4>)
 8004e8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e90:	2380      	movs	r3, #128	@ 0x80
 8004e92:	02db      	lsls	r3, r3, #11
 8004e94:	4013      	ands	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 8004e9a:	2203      	movs	r2, #3
 8004e9c:	2103      	movs	r1, #3
 8004e9e:	2016      	movs	r0, #22
 8004ea0:	f002 fa66 	bl	8007370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8004ea4:	2016      	movs	r0, #22
 8004ea6:	f002 fa78 	bl	800739a <HAL_NVIC_EnableIRQ>
}
 8004eaa:	e01a      	b.n	8004ee2 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM14)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a13      	ldr	r2, [pc, #76]	@ (8004f00 <HAL_TIM_Base_MspInit+0x1e4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d115      	bne.n	8004ee2 <HAL_TIM_Base_MspInit+0x1c6>
      __HAL_RCC_TIM14_CLK_ENABLE();
 8004eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef0 <HAL_TIM_Base_MspInit+0x1d4>)
 8004eb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004eba:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef0 <HAL_TIM_Base_MspInit+0x1d4>)
 8004ebc:	2180      	movs	r1, #128	@ 0x80
 8004ebe:	0209      	lsls	r1, r1, #8
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef0 <HAL_TIM_Base_MspInit+0x1d4>)
 8004ec6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ec8:	2380      	movs	r3, #128	@ 0x80
 8004eca:	021b      	lsls	r3, r3, #8
 8004ecc:	4013      	ands	r3, r2
 8004ece:	60bb      	str	r3, [r7, #8]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8004ed2:	2203      	movs	r2, #3
 8004ed4:	2103      	movs	r1, #3
 8004ed6:	2013      	movs	r0, #19
 8004ed8:	f002 fa4a 	bl	8007370 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8004edc:	2013      	movs	r0, #19
 8004ede:	f002 fa5c 	bl	800739a <HAL_NVIC_EnableIRQ>
}
 8004ee2:	46c0      	nop			@ (mov r8, r8)
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	b019      	add	sp, #100	@ 0x64
 8004ee8:	bd90      	pop	{r4, r7, pc}
 8004eea:	46c0      	nop			@ (mov r8, r8)
 8004eec:	40012c00 	.word	0x40012c00
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	40000400 	.word	0x40000400
 8004ef8:	40014400 	.word	0x40014400
 8004efc:	40014800 	.word	0x40014800
 8004f00:	40002000 	.word	0x40002000

08004f04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004f04:	b590      	push	{r4, r7, lr}
 8004f06:	b08b      	sub	sp, #44	@ 0x2c
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f0c:	2414      	movs	r4, #20
 8004f0e:	193b      	adds	r3, r7, r4
 8004f10:	0018      	movs	r0, r3
 8004f12:	2314      	movs	r3, #20
 8004f14:	001a      	movs	r2, r3
 8004f16:	2100      	movs	r1, #0
 8004f18:	f008 fa26 	bl	800d368 <memset>
  if(htim->Instance==TIM1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a25      	ldr	r2, [pc, #148]	@ (8004fb8 <HAL_TIM_MspPostInit+0xb4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d144      	bne.n	8004fb0 <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f26:	4b25      	ldr	r3, [pc, #148]	@ (8004fbc <HAL_TIM_MspPostInit+0xb8>)
 8004f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f2a:	4b24      	ldr	r3, [pc, #144]	@ (8004fbc <HAL_TIM_MspPostInit+0xb8>)
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f32:	4b22      	ldr	r3, [pc, #136]	@ (8004fbc <HAL_TIM_MspPostInit+0xb8>)
 8004f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f36:	2201      	movs	r2, #1
 8004f38:	4013      	ands	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8004fbc <HAL_TIM_MspPostInit+0xb8>)
 8004f40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f42:	4b1e      	ldr	r3, [pc, #120]	@ (8004fbc <HAL_TIM_MspPostInit+0xb8>)
 8004f44:	2102      	movs	r1, #2
 8004f46:	430a      	orrs	r2, r1
 8004f48:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004fbc <HAL_TIM_MspPostInit+0xb8>)
 8004f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f4e:	2202      	movs	r2, #2
 8004f50:	4013      	ands	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11 [PA9]     ------> TIM1_CH4
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
 8004f56:	193b      	adds	r3, r7, r4
 8004f58:	2280      	movs	r2, #128	@ 0x80
 8004f5a:	0112      	lsls	r2, r2, #4
 8004f5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f5e:	193b      	adds	r3, r7, r4
 8004f60:	2202      	movs	r2, #2
 8004f62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f64:	193b      	adds	r3, r7, r4
 8004f66:	2200      	movs	r2, #0
 8004f68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f6a:	193b      	adds	r3, r7, r4
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004f70:	193b      	adds	r3, r7, r4
 8004f72:	2202      	movs	r2, #2
 8004f74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8004f76:	193a      	adds	r2, r7, r4
 8004f78:	23a0      	movs	r3, #160	@ 0xa0
 8004f7a:	05db      	lsls	r3, r3, #23
 8004f7c:	0011      	movs	r1, r2
 8004f7e:	0018      	movs	r0, r3
 8004f80:	f002 fefc 	bl	8007d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAIN_OSCILLATOR_Pin;
 8004f84:	0021      	movs	r1, r4
 8004f86:	187b      	adds	r3, r7, r1
 8004f88:	2208      	movs	r2, #8
 8004f8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f8c:	187b      	adds	r3, r7, r1
 8004f8e:	2202      	movs	r2, #2
 8004f90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f92:	187b      	adds	r3, r7, r1
 8004f94:	2200      	movs	r2, #0
 8004f96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f98:	187b      	adds	r3, r7, r1
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004f9e:	187b      	adds	r3, r7, r1
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8004fa4:	187b      	adds	r3, r7, r1
 8004fa6:	4a06      	ldr	r2, [pc, #24]	@ (8004fc0 <HAL_TIM_MspPostInit+0xbc>)
 8004fa8:	0019      	movs	r1, r3
 8004faa:	0010      	movs	r0, r2
 8004fac:	f002 fee6 	bl	8007d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004fb0:	46c0      	nop			@ (mov r8, r8)
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	b00b      	add	sp, #44	@ 0x2c
 8004fb6:	bd90      	pop	{r4, r7, pc}
 8004fb8:	40012c00 	.word	0x40012c00
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	50000400 	.word	0x50000400

08004fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004fc4:	b590      	push	{r4, r7, lr}
 8004fc6:	b08b      	sub	sp, #44	@ 0x2c
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fcc:	2414      	movs	r4, #20
 8004fce:	193b      	adds	r3, r7, r4
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	2314      	movs	r3, #20
 8004fd4:	001a      	movs	r2, r3
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	f008 f9c6 	bl	800d368 <memset>
  if(huart->Instance==USART2)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a4a      	ldr	r2, [pc, #296]	@ (800510c <HAL_UART_MspInit+0x148>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d000      	beq.n	8004fe8 <HAL_UART_MspInit+0x24>
 8004fe6:	e08d      	b.n	8005104 <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004fe8:	4b49      	ldr	r3, [pc, #292]	@ (8005110 <HAL_UART_MspInit+0x14c>)
 8004fea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fec:	4b48      	ldr	r3, [pc, #288]	@ (8005110 <HAL_UART_MspInit+0x14c>)
 8004fee:	2180      	movs	r1, #128	@ 0x80
 8004ff0:	0289      	lsls	r1, r1, #10
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004ff6:	4b46      	ldr	r3, [pc, #280]	@ (8005110 <HAL_UART_MspInit+0x14c>)
 8004ff8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ffa:	2380      	movs	r3, #128	@ 0x80
 8004ffc:	029b      	lsls	r3, r3, #10
 8004ffe:	4013      	ands	r3, r2
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005004:	4b42      	ldr	r3, [pc, #264]	@ (8005110 <HAL_UART_MspInit+0x14c>)
 8005006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005008:	4b41      	ldr	r3, [pc, #260]	@ (8005110 <HAL_UART_MspInit+0x14c>)
 800500a:	2101      	movs	r1, #1
 800500c:	430a      	orrs	r2, r1
 800500e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005010:	4b3f      	ldr	r3, [pc, #252]	@ (8005110 <HAL_UART_MspInit+0x14c>)
 8005012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005014:	2201      	movs	r2, #1
 8005016:	4013      	ands	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 800501c:	0021      	movs	r1, r4
 800501e:	187b      	adds	r3, r7, r1
 8005020:	220c      	movs	r2, #12
 8005022:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005024:	187b      	adds	r3, r7, r1
 8005026:	2202      	movs	r2, #2
 8005028:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800502a:	187b      	adds	r3, r7, r1
 800502c:	2201      	movs	r2, #1
 800502e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005030:	187b      	adds	r3, r7, r1
 8005032:	2200      	movs	r2, #0
 8005034:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005036:	187b      	adds	r3, r7, r1
 8005038:	2201      	movs	r2, #1
 800503a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800503c:	187a      	adds	r2, r7, r1
 800503e:	23a0      	movs	r3, #160	@ 0xa0
 8005040:	05db      	lsls	r3, r3, #23
 8005042:	0011      	movs	r1, r2
 8005044:	0018      	movs	r0, r3
 8005046:	f002 fe99 	bl	8007d7c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800504a:	4b32      	ldr	r3, [pc, #200]	@ (8005114 <HAL_UART_MspInit+0x150>)
 800504c:	4a32      	ldr	r2, [pc, #200]	@ (8005118 <HAL_UART_MspInit+0x154>)
 800504e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005050:	4b30      	ldr	r3, [pc, #192]	@ (8005114 <HAL_UART_MspInit+0x150>)
 8005052:	2234      	movs	r2, #52	@ 0x34
 8005054:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005056:	4b2f      	ldr	r3, [pc, #188]	@ (8005114 <HAL_UART_MspInit+0x150>)
 8005058:	2200      	movs	r2, #0
 800505a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800505c:	4b2d      	ldr	r3, [pc, #180]	@ (8005114 <HAL_UART_MspInit+0x150>)
 800505e:	2200      	movs	r2, #0
 8005060:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005062:	4b2c      	ldr	r3, [pc, #176]	@ (8005114 <HAL_UART_MspInit+0x150>)
 8005064:	2280      	movs	r2, #128	@ 0x80
 8005066:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005068:	4b2a      	ldr	r3, [pc, #168]	@ (8005114 <HAL_UART_MspInit+0x150>)
 800506a:	2200      	movs	r2, #0
 800506c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800506e:	4b29      	ldr	r3, [pc, #164]	@ (8005114 <HAL_UART_MspInit+0x150>)
 8005070:	2200      	movs	r2, #0
 8005072:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005074:	4b27      	ldr	r3, [pc, #156]	@ (8005114 <HAL_UART_MspInit+0x150>)
 8005076:	2200      	movs	r2, #0
 8005078:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800507a:	4b26      	ldr	r3, [pc, #152]	@ (8005114 <HAL_UART_MspInit+0x150>)
 800507c:	2280      	movs	r2, #128	@ 0x80
 800507e:	0152      	lsls	r2, r2, #5
 8005080:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005082:	4b24      	ldr	r3, [pc, #144]	@ (8005114 <HAL_UART_MspInit+0x150>)
 8005084:	0018      	movs	r0, r3
 8005086:	f002 f9b5 	bl	80073f4 <HAL_DMA_Init>
 800508a:	1e03      	subs	r3, r0, #0
 800508c:	d001      	beq.n	8005092 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800508e:	f7fd f905 	bl	800229c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2180      	movs	r1, #128	@ 0x80
 8005096:	4a1f      	ldr	r2, [pc, #124]	@ (8005114 <HAL_UART_MspInit+0x150>)
 8005098:	505a      	str	r2, [r3, r1]
 800509a:	4b1e      	ldr	r3, [pc, #120]	@ (8005114 <HAL_UART_MspInit+0x150>)
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 80050a0:	4b1e      	ldr	r3, [pc, #120]	@ (800511c <HAL_UART_MspInit+0x158>)
 80050a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005120 <HAL_UART_MspInit+0x15c>)
 80050a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80050a6:	4b1d      	ldr	r3, [pc, #116]	@ (800511c <HAL_UART_MspInit+0x158>)
 80050a8:	2235      	movs	r2, #53	@ 0x35
 80050aa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050ac:	4b1b      	ldr	r3, [pc, #108]	@ (800511c <HAL_UART_MspInit+0x158>)
 80050ae:	2210      	movs	r2, #16
 80050b0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050b2:	4b1a      	ldr	r3, [pc, #104]	@ (800511c <HAL_UART_MspInit+0x158>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80050b8:	4b18      	ldr	r3, [pc, #96]	@ (800511c <HAL_UART_MspInit+0x158>)
 80050ba:	2280      	movs	r2, #128	@ 0x80
 80050bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050be:	4b17      	ldr	r3, [pc, #92]	@ (800511c <HAL_UART_MspInit+0x158>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050c4:	4b15      	ldr	r3, [pc, #84]	@ (800511c <HAL_UART_MspInit+0x158>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80050ca:	4b14      	ldr	r3, [pc, #80]	@ (800511c <HAL_UART_MspInit+0x158>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80050d0:	4b12      	ldr	r3, [pc, #72]	@ (800511c <HAL_UART_MspInit+0x158>)
 80050d2:	2280      	movs	r2, #128	@ 0x80
 80050d4:	0152      	lsls	r2, r2, #5
 80050d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80050d8:	4b10      	ldr	r3, [pc, #64]	@ (800511c <HAL_UART_MspInit+0x158>)
 80050da:	0018      	movs	r0, r3
 80050dc:	f002 f98a 	bl	80073f4 <HAL_DMA_Init>
 80050e0:	1e03      	subs	r3, r0, #0
 80050e2:	d001      	beq.n	80050e8 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 80050e4:	f7fd f8da 	bl	800229c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a0c      	ldr	r2, [pc, #48]	@ (800511c <HAL_UART_MspInit+0x158>)
 80050ec:	67da      	str	r2, [r3, #124]	@ 0x7c
 80050ee:	4b0b      	ldr	r3, [pc, #44]	@ (800511c <HAL_UART_MspInit+0x158>)
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 80050f4:	2201      	movs	r2, #1
 80050f6:	2101      	movs	r1, #1
 80050f8:	201c      	movs	r0, #28
 80050fa:	f002 f939 	bl	8007370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80050fe:	201c      	movs	r0, #28
 8005100:	f002 f94b 	bl	800739a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8005104:	46c0      	nop			@ (mov r8, r8)
 8005106:	46bd      	mov	sp, r7
 8005108:	b00b      	add	sp, #44	@ 0x2c
 800510a:	bd90      	pop	{r4, r7, pc}
 800510c:	40004400 	.word	0x40004400
 8005110:	40021000 	.word	0x40021000
 8005114:	20000b94 	.word	0x20000b94
 8005118:	4002001c 	.word	0x4002001c
 800511c:	20000bf0 	.word	0x20000bf0
 8005120:	40020030 	.word	0x40020030

08005124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005128:	46c0      	nop			@ (mov r8, r8)
 800512a:	e7fd      	b.n	8005128 <NMI_Handler+0x4>

0800512c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005130:	46c0      	nop			@ (mov r8, r8)
 8005132:	e7fd      	b.n	8005130 <HardFault_Handler+0x4>

08005134 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005138:	46c0      	nop			@ (mov r8, r8)
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005142:	46c0      	nop			@ (mov r8, r8)
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800514c:	f000 fdfc 	bl	8005d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005150:	46c0      	nop			@ (mov r8, r8)
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(CLK_IN_Pin);
 800515a:	2080      	movs	r0, #128	@ 0x80
 800515c:	f002 ffac 	bl	80080b8 <HAL_GPIO_EXTI_IRQHandler>
	//HAL_GPIO_EXTI_IRQHandler(SW_IN_Pin);

  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005160:	46c0      	nop			@ (mov r8, r8)
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800516c:	4b03      	ldr	r3, [pc, #12]	@ (800517c <DMA1_Channel1_IRQHandler+0x14>)
 800516e:	0018      	movs	r0, r3
 8005170:	f002 fb1c 	bl	80077ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005174:	46c0      	nop			@ (mov r8, r8)
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	46c0      	nop			@ (mov r8, r8)
 800517c:	20000604 	.word	0x20000604

08005180 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005184:	4b05      	ldr	r3, [pc, #20]	@ (800519c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8005186:	0018      	movs	r0, r3
 8005188:	f002 fb10 	bl	80077ac <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800518c:	4b04      	ldr	r3, [pc, #16]	@ (80051a0 <DMA1_Channel2_3_IRQHandler+0x20>)
 800518e:	0018      	movs	r0, r3
 8005190:	f002 fb0c 	bl	80077ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005194:	46c0      	nop			@ (mov r8, r8)
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	46c0      	nop			@ (mov r8, r8)
 800519c:	20000b94 	.word	0x20000b94
 80051a0:	20000bf0 	.word	0x20000bf0

080051a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80051a8:	4b03      	ldr	r3, [pc, #12]	@ (80051b8 <TIM2_IRQHandler+0x14>)
 80051aa:	0018      	movs	r0, r3
 80051ac:	f005 f896 	bl	800a2dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80051b0:	46c0      	nop			@ (mov r8, r8)
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	46c0      	nop			@ (mov r8, r8)
 80051b8:	20000894 	.word	0x20000894

080051bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80051c0:	4b03      	ldr	r3, [pc, #12]	@ (80051d0 <TIM3_IRQHandler+0x14>)
 80051c2:	0018      	movs	r0, r3
 80051c4:	f005 f88a 	bl	800a2dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80051c8:	46c0      	nop			@ (mov r8, r8)
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	46c0      	nop			@ (mov r8, r8)
 80051d0:	20000950 	.word	0x20000950

080051d4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80051d8:	4b03      	ldr	r3, [pc, #12]	@ (80051e8 <TIM16_IRQHandler+0x14>)
 80051da:	0018      	movs	r0, r3
 80051dc:	f005 f87e 	bl	800a2dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80051e0:	46c0      	nop			@ (mov r8, r8)
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	46c0      	nop			@ (mov r8, r8)
 80051e8:	200007d8 	.word	0x200007d8

080051ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80051f0:	4b03      	ldr	r3, [pc, #12]	@ (8005200 <USART2_IRQHandler+0x14>)
 80051f2:	0018      	movs	r0, r3
 80051f4:	f006 fdf4 	bl	800bde0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80051f8:	46c0      	nop			@ (mov r8, r8)
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	46c0      	nop			@ (mov r8, r8)
 8005200:	20000ac8 	.word	0x20000ac8

08005204 <LPTIM1_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void LPTIM1_IRQHandler(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
  HAL_LPTIM_IRQHandler(&hlptim1);
 8005208:	4b03      	ldr	r3, [pc, #12]	@ (8005218 <LPTIM1_IRQHandler+0x14>)
 800520a:	0018      	movs	r0, r3
 800520c:	f003 f8c2 	bl	8008394 <HAL_LPTIM_IRQHandler>
}
 8005210:	46c0      	nop			@ (mov r8, r8)
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	46c0      	nop			@ (mov r8, r8)
 8005218:	20000c4c 	.word	0x20000c4c

0800521c <TIM17_IRQHandler>:


void TIM17_IRQHandler(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005220:	4b03      	ldr	r3, [pc, #12]	@ (8005230 <TIM17_IRQHandler+0x14>)
 8005222:	0018      	movs	r0, r3
 8005224:	f005 f85a 	bl	800a2dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8005228:	46c0      	nop			@ (mov r8, r8)
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	46c0      	nop			@ (mov r8, r8)
 8005230:	2000071c 	.word	0x2000071c

08005234 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005238:	4b03      	ldr	r3, [pc, #12]	@ (8005248 <TIM14_IRQHandler+0x14>)
 800523a:	0018      	movs	r0, r3
 800523c:	f005 f84e 	bl	800a2dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8005240:	46c0      	nop			@ (mov r8, r8)
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	46c0      	nop			@ (mov r8, r8)
 8005248:	20000660 	.word	0x20000660

0800524c <Adjust_TIM16_Prescaler>:
#include "symmetry_adjustment.h"


uint8_t Adjust_TIM16_Prescaler(struct Params* params_ptr){
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]

    if(params_ptr->prescaler_adjust == MULTIPLY_BY_TWO){
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2220      	movs	r2, #32
 8005258:	5c9b      	ldrb	r3, [r3, r2]
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b01      	cmp	r3, #1
 800525e:	d107      	bne.n	8005270 <Adjust_TIM16_Prescaler+0x24>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler << 1;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	8b5b      	ldrh	r3, [r3, #26]
 8005264:	b29b      	uxth	r3, r3
 8005266:	18db      	adds	r3, r3, r3
 8005268:	b29a      	uxth	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	839a      	strh	r2, [r3, #28]
 800526e:	e00a      	b.n	8005286 <Adjust_TIM16_Prescaler+0x3a>
    }
    else if(params_ptr->prescaler_adjust == DO_NOTHING){
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	5c9b      	ldrb	r3, [r3, r2]
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	d104      	bne.n	8005286 <Adjust_TIM16_Prescaler+0x3a>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	8b5b      	ldrh	r3, [r3, #26]
 8005280:	b29a      	uxth	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	839a      	strh	r2, [r3, #28]
    }
    return 1;
 8005286:	2301      	movs	r3, #1
}
 8005288:	0018      	movs	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	b002      	add	sp, #8
 800528e:	bd80      	pop	{r7, pc}

08005290 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>:

uint8_t Process_TIM16_Final_Start_Value_and_Final_Prescaler(struct Params* params_ptr){
 8005290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]

    #if SYMMETRY_ON_OR_OFF == ON

	enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005298:	2317      	movs	r3, #23
 800529a:	18fb      	adds	r3, r7, r3
 800529c:	2200      	movs	r2, #0
 800529e:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 80052a0:	2316      	movs	r3, #22
 80052a2:	18fb      	adds	r3, r7, r3
 80052a4:	2200      	movs	r2, #0
 80052a6:	701a      	strb	r2, [r3, #0]

			uint8_t pot_rotation_corrected = 0;
 80052a8:	2315      	movs	r3, #21
 80052aa:	18fb      	adds	r3, r7, r3
 80052ac:	2200      	movs	r2, #0
 80052ae:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Status symmetry_status = CW;
 80052b0:	2114      	movs	r1, #20
 80052b2:	187b      	adds	r3, r7, r1
 80052b4:	2200      	movs	r2, #0
 80052b6:	701a      	strb	r2, [r3, #0]

			//DETERMINE IF CW OR CCW SYMMETRY POT ROTATION
			if(params_ptr->symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	899b      	ldrh	r3, [r3, #12]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b7f      	cmp	r3, #127	@ 0x7f
 80052c0:	d803      	bhi.n	80052ca <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3a>
				symmetry_status = CW;
 80052c2:	187b      	adds	r3, r7, r1
 80052c4:	2200      	movs	r2, #0
 80052c6:	701a      	strb	r2, [r3, #0]
 80052c8:	e003      	b.n	80052d2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x42>
			}
			else{ //adc is 128-255
				symmetry_status = CCW;
 80052ca:	2314      	movs	r3, #20
 80052cc:	18fb      	adds	r3, r7, r3
 80052ce:	2201      	movs	r2, #1
 80052d0:	701a      	strb	r2, [r3, #0]
			}

			//DETERMINE WHETHER TO SHORTEN OR LENGTHEN BASED ON CURRENT INDEX AND SYMMETRY POT POSITION
			if((params_ptr->waveshape == SINE_MODE) || (params_ptr->waveshape == TRIANGLE_MODE)){
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	799b      	ldrb	r3, [r3, #6]
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d004      	beq.n	80052e6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x56>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	799b      	ldrb	r3, [r3, #6]
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d146      	bne.n	8005374 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe4>

				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	7c1b      	ldrb	r3, [r3, #16]
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d104      	bne.n	80052fa <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6a>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	7c5b      	ldrb	r3, [r3, #17]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d009      	beq.n	800530e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	7c1b      	ldrb	r3, [r3, #16]
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b01      	cmp	r3, #1
 8005302:	d113      	bne.n	800532c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	7c5b      	ldrb	r3, [r3, #17]
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b01      	cmp	r3, #1
 800530c:	d10e      	bne.n	800532c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>

					if(symmetry_status == CW){
 800530e:	2314      	movs	r3, #20
 8005310:	18fb      	adds	r3, r7, r3
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d104      	bne.n	8005322 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x92>

						symmetry_type_for_halfcycle = LENGTHEN;
 8005318:	2316      	movs	r3, #22
 800531a:	18fb      	adds	r3, r7, r3
 800531c:	2201      	movs	r2, #1
 800531e:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 8005320:	e027      	b.n	8005372 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 8005322:	2316      	movs	r3, #22
 8005324:	18fb      	adds	r3, r7, r3
 8005326:	2200      	movs	r2, #0
 8005328:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 800532a:	e022      	b.n	8005372 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
				}
				else if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT)){
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	7c1b      	ldrb	r3, [r3, #16]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d104      	bne.n	8005340 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xb0>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	7c5b      	ldrb	r3, [r3, #17]
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b01      	cmp	r3, #1
 800533e:	d009      	beq.n	8005354 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xc4>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	7c1b      	ldrb	r3, [r3, #16]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b01      	cmp	r3, #1
 8005348:	d13c      	bne.n	80053c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	7c5b      	ldrb	r3, [r3, #17]
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d137      	bne.n	80053c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>

					if(symmetry_status == CW){
 8005354:	2314      	movs	r3, #20
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d104      	bne.n	8005368 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd8>

						symmetry_type_for_halfcycle = SHORTEN;
 800535e:	2316      	movs	r3, #22
 8005360:	18fb      	adds	r3, r7, r3
 8005362:	2200      	movs	r2, #0
 8005364:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005366:	e02d      	b.n	80053c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 8005368:	2316      	movs	r3, #22
 800536a:	18fb      	adds	r3, r7, r3
 800536c:	2201      	movs	r2, #1
 800536e:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005370:	e028      	b.n	80053c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 8005372:	e027      	b.n	80053c4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
				}
			}
			else if(params_ptr->waveshape == SQUARE_MODE){
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	799b      	ldrb	r3, [r3, #6]
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d123      	bne.n	80053c6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>

				if(params_ptr->halfcycle == FIRST_HALFCYCLE){
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	7c1b      	ldrb	r3, [r3, #16]
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10e      	bne.n	80053a6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x116>

					if(symmetry_status == CW){
 8005388:	2314      	movs	r3, #20
 800538a:	18fb      	adds	r3, r7, r3
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d104      	bne.n	800539c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x10c>

						symmetry_type_for_halfcycle = LENGTHEN;
 8005392:	2316      	movs	r3, #22
 8005394:	18fb      	adds	r3, r7, r3
 8005396:	2201      	movs	r2, #1
 8005398:	701a      	strb	r2, [r3, #0]
 800539a:	e014      	b.n	80053c6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 800539c:	2316      	movs	r3, #22
 800539e:	18fb      	adds	r3, r7, r3
 80053a0:	2200      	movs	r2, #0
 80053a2:	701a      	strb	r2, [r3, #0]
 80053a4:	e00f      	b.n	80053c6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
				}
				else{

					if(symmetry_status == CW){
 80053a6:	2314      	movs	r3, #20
 80053a8:	18fb      	adds	r3, r7, r3
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d104      	bne.n	80053ba <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x12a>

						symmetry_type_for_halfcycle = SHORTEN;
 80053b0:	2316      	movs	r3, #22
 80053b2:	18fb      	adds	r3, r7, r3
 80053b4:	2200      	movs	r2, #0
 80053b6:	701a      	strb	r2, [r3, #0]
 80053b8:	e005      	b.n	80053c6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 80053ba:	2316      	movs	r3, #22
 80053bc:	18fb      	adds	r3, r7, r3
 80053be:	2201      	movs	r2, #1
 80053c0:	701a      	strb	r2, [r3, #0]
 80053c2:	e000      	b.n	80053c6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 80053c4:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			if(symmetry_status == CW){
 80053c6:	2314      	movs	r3, #20
 80053c8:	18fb      	adds	r3, r7, r3
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d109      	bne.n	80053e4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x154>

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - params_ptr->symmetry;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	899b      	ldrh	r3, [r3, #12]
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	2315      	movs	r3, #21
 80053da:	18fb      	adds	r3, r7, r3
 80053dc:	217f      	movs	r1, #127	@ 0x7f
 80053de:	1a8a      	subs	r2, r1, r2
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	e007      	b.n	80053f4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x164>
			}
			else{ //CCW

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	899b      	ldrh	r3, [r3, #12]
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	2315      	movs	r3, #21
 80053ee:	18fb      	adds	r3, r7, r3
 80053f0:	3a80      	subs	r2, #128	@ 0x80
 80053f2:	701a      	strb	r2, [r3, #0]
			}

			//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - params_ptr->raw_start_value;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	8a5b      	ldrh	r3, [r3, #18]
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	200e      	movs	r0, #14
 80053fc:	183b      	adds	r3, r7, r0
 80053fe:	2180      	movs	r1, #128	@ 0x80
 8005400:	0049      	lsls	r1, r1, #1
 8005402:	1a8a      	subs	r2, r1, r2
 8005404:	801a      	strh	r2, [r3, #0]

			//uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = (two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected);
			//COMMENT LINE BELOW IN AND LINE ABOVE OUT TO EXPERIMENT WITH MORE EXTREME SYMMETRY ADJUSTMENT
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = ((two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected) * 12) >> 3; //x(12/8) - 12/8 is the absolute maximum we can get away with
 8005406:	0001      	movs	r1, r0
 8005408:	187b      	adds	r3, r7, r1
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	2215      	movs	r2, #21
 800540e:	18ba      	adds	r2, r7, r2
 8005410:	7812      	ldrb	r2, [r2, #0]
 8005412:	435a      	muls	r2, r3
 8005414:	0013      	movs	r3, r2
 8005416:	005b      	lsls	r3, r3, #1
 8005418:	189b      	adds	r3, r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	10da      	asrs	r2, r3, #3
 800541e:	240c      	movs	r4, #12
 8005420:	193b      	adds	r3, r7, r4
 8005422:	801a      	strh	r2, [r3, #0]

			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 8005424:	250a      	movs	r5, #10
 8005426:	197b      	adds	r3, r7, r5
 8005428:	193a      	adds	r2, r7, r4
 800542a:	8812      	ldrh	r2, [r2, #0]
 800542c:	0a12      	lsrs	r2, r2, #8
 800542e:	801a      	strh	r2, [r3, #0]


			//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8005430:	2312      	movs	r3, #18
 8005432:	18fb      	adds	r3, r7, r3
 8005434:	0008      	movs	r0, r1
 8005436:	1879      	adds	r1, r7, r1
 8005438:	197a      	adds	r2, r7, r5
 800543a:	8809      	ldrh	r1, [r1, #0]
 800543c:	8812      	ldrh	r2, [r2, #0]
 800543e:	1a8a      	subs	r2, r1, r2
 8005440:	801a      	strh	r2, [r3, #0]

			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 8005442:	2610      	movs	r6, #16
 8005444:	19bb      	adds	r3, r7, r6
 8005446:	1839      	adds	r1, r7, r0
 8005448:	197a      	adds	r2, r7, r5
 800544a:	8809      	ldrh	r1, [r1, #0]
 800544c:	8812      	ldrh	r2, [r2, #0]
 800544e:	188a      	adds	r2, r1, r2
 8005450:	801a      	strh	r2, [r3, #0]


			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 8005452:	19bb      	adds	r3, r7, r6
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	2bff      	cmp	r3, #255	@ 0xff
 8005458:	d90f      	bls.n	800547a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 800545a:	19bb      	adds	r3, r7, r6
 800545c:	881a      	ldrh	r2, [r3, #0]
 800545e:	2380      	movs	r3, #128	@ 0x80
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	429a      	cmp	r2, r3
 8005464:	d000      	beq.n	8005468 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1d8>
 8005466:	e0b0      	b.n	80055ca <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>
 8005468:	193b      	adds	r3, r7, r4
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	2108      	movs	r1, #8
 800546e:	0018      	movs	r0, r3
 8005470:	f000 fb80 	bl	8005b74 <unsigned_bitwise_modulo>
 8005474:	1e03      	subs	r3, r0, #0
 8005476:	d000      	beq.n	800547a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 8005478:	e0a7      	b.n	80055ca <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 800547a:	230c      	movs	r3, #12
 800547c:	18fb      	adds	r3, r7, r3
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	2108      	movs	r1, #8
 8005482:	0018      	movs	r0, r3
 8005484:	f000 fb76 	bl	8005b74 <unsigned_bitwise_modulo>
 8005488:	0003      	movs	r3, r0
 800548a:	2b80      	cmp	r3, #128	@ 0x80
 800548c:	d117      	bne.n	80054be <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x22e>
					//remainder is 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in 0.5

					//manipulated_period_shorten should oscillate over the halfperiod between manipulated_period_shorten and manipulated_period_shorten - 1; //DONE
					//manipulated_period_lengthen should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1; //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 800548e:	2316      	movs	r3, #22
 8005490:	18fb      	adds	r3, r7, r3
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d104      	bne.n	80054a2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x212>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_DOWNWARDS;
 8005498:	2317      	movs	r3, #23
 800549a:	18fb      	adds	r3, r7, r3
 800549c:	2202      	movs	r2, #2
 800549e:	701a      	strb	r2, [r3, #0]
 80054a0:	e008      	b.n	80054b4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80054a2:	2316      	movs	r3, #22
 80054a4:	18fb      	adds	r3, r7, r3
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d103      	bne.n	80054b4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80054ac:	2317      	movs	r3, #23
 80054ae:	18fb      	adds	r3, r7, r3
 80054b0:	2201      	movs	r2, #1
 80054b2:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2220      	movs	r2, #32
 80054b8:	2100      	movs	r1, #0
 80054ba:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80054bc:	e21f      	b.n	80058fe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 80054be:	230c      	movs	r3, #12
 80054c0:	18fb      	adds	r3, r7, r3
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	2108      	movs	r1, #8
 80054c6:	0018      	movs	r0, r3
 80054c8:	f000 fb54 	bl	8005b74 <unsigned_bitwise_modulo>
 80054cc:	1e03      	subs	r3, r0, #0
 80054ce:	d121      	bne.n	8005514 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x284>

					//remainder is zero, which means both shortened and lengthened manipulated periods have no no remainder

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 80054d0:	2212      	movs	r2, #18
 80054d2:	18bb      	adds	r3, r7, r2
 80054d4:	18ba      	adds	r2, r7, r2
 80054d6:	8812      	ldrh	r2, [r2, #0]
 80054d8:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 80054da:	2210      	movs	r2, #16
 80054dc:	18bb      	adds	r3, r7, r2
 80054de:	18ba      	adds	r2, r7, r2
 80054e0:	8812      	ldrh	r2, [r2, #0]
 80054e2:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 80054e4:	2316      	movs	r3, #22
 80054e6:	18fb      	adds	r3, r7, r3
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d104      	bne.n	80054f8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x268>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80054ee:	2317      	movs	r3, #23
 80054f0:	18fb      	adds	r3, r7, r3
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	e008      	b.n	800550a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80054f8:	2316      	movs	r3, #22
 80054fa:	18fb      	adds	r3, r7, r3
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d103      	bne.n	800550a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005502:	2317      	movs	r3, #23
 8005504:	18fb      	adds	r3, r7, r3
 8005506:	2200      	movs	r2, #0
 8005508:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	2100      	movs	r1, #0
 8005510:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005512:	e1f4      	b.n	80058fe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8005514:	230c      	movs	r3, #12
 8005516:	18fb      	adds	r3, r7, r3
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	2108      	movs	r1, #8
 800551c:	0018      	movs	r0, r3
 800551e:	f000 fb29 	bl	8005b74 <unsigned_bitwise_modulo>
 8005522:	0003      	movs	r3, r0
 8005524:	2b7f      	cmp	r3, #127	@ 0x7f
 8005526:	d821      	bhi.n	800556c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2dc>

					//remainder is less than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in less than 0.5

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 8005528:	2212      	movs	r2, #18
 800552a:	18bb      	adds	r3, r7, r2
 800552c:	18ba      	adds	r2, r7, r2
 800552e:	8812      	ldrh	r2, [r2, #0]
 8005530:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8005532:	2210      	movs	r2, #16
 8005534:	18bb      	adds	r3, r7, r2
 8005536:	18ba      	adds	r2, r7, r2
 8005538:	8812      	ldrh	r2, [r2, #0]
 800553a:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 800553c:	2316      	movs	r3, #22
 800553e:	18fb      	adds	r3, r7, r3
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d104      	bne.n	8005550 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2c0>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005546:	2317      	movs	r3, #23
 8005548:	18fb      	adds	r3, r7, r3
 800554a:	2200      	movs	r2, #0
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	e008      	b.n	8005562 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005550:	2316      	movs	r3, #22
 8005552:	18fb      	adds	r3, r7, r3
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d103      	bne.n	8005562 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800555a:	2317      	movs	r3, #23
 800555c:	18fb      	adds	r3, r7, r3
 800555e:	2200      	movs	r2, #0
 8005560:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2220      	movs	r2, #32
 8005566:	2100      	movs	r1, #0
 8005568:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 800556a:	e1c8      	b.n	80058fe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 800556c:	230c      	movs	r3, #12
 800556e:	18fb      	adds	r3, r7, r3
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	2108      	movs	r1, #8
 8005574:	0018      	movs	r0, r3
 8005576:	f000 fafd 	bl	8005b74 <unsigned_bitwise_modulo>
 800557a:	0003      	movs	r3, r0
 800557c:	2b80      	cmp	r3, #128	@ 0x80
 800557e:	d800      	bhi.n	8005582 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2f2>
 8005580:	e1bd      	b.n	80058fe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>

					//remainder is greater than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in more than 0.5

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8005582:	2212      	movs	r2, #18
 8005584:	18bb      	adds	r3, r7, r2
 8005586:	18ba      	adds	r2, r7, r2
 8005588:	8812      	ldrh	r2, [r2, #0]
 800558a:	3a01      	subs	r2, #1
 800558c:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 800558e:	2210      	movs	r2, #16
 8005590:	18bb      	adds	r3, r7, r2
 8005592:	18ba      	adds	r2, r7, r2
 8005594:	8812      	ldrh	r2, [r2, #0]
 8005596:	3201      	adds	r2, #1
 8005598:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 800559a:	2316      	movs	r3, #22
 800559c:	18fb      	adds	r3, r7, r3
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d104      	bne.n	80055ae <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x31e>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80055a4:	2317      	movs	r3, #23
 80055a6:	18fb      	adds	r3, r7, r3
 80055a8:	2200      	movs	r2, #0
 80055aa:	701a      	strb	r2, [r3, #0]
 80055ac:	e008      	b.n	80055c0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80055ae:	2316      	movs	r3, #22
 80055b0:	18fb      	adds	r3, r7, r3
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d103      	bne.n	80055c0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80055b8:	2317      	movs	r3, #23
 80055ba:	18fb      	adds	r3, r7, r3
 80055bc:	2200      	movs	r2, #0
 80055be:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	2100      	movs	r1, #0
 80055c6:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80055c8:	e199      	b.n	80058fe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
			}

			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 80055ca:	2110      	movs	r1, #16
 80055cc:	187b      	adds	r3, r7, r1
 80055ce:	881a      	ldrh	r2, [r3, #0]
 80055d0:	2380      	movs	r3, #128	@ 0x80
 80055d2:	005b      	lsls	r3, r3, #1
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d810      	bhi.n	80055fa <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 80055d8:	187b      	adds	r3, r7, r1
 80055da:	881a      	ldrh	r2, [r3, #0]
 80055dc:	2380      	movs	r3, #128	@ 0x80
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d000      	beq.n	80055e6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x356>
 80055e4:	e18c      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 80055e6:	230c      	movs	r3, #12
 80055e8:	18fb      	adds	r3, r7, r3
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	2108      	movs	r1, #8
 80055ee:	0018      	movs	r0, r3
 80055f0:	f000 fac0 	bl	8005b74 <unsigned_bitwise_modulo>
 80055f4:	1e03      	subs	r3, r0, #0
 80055f6:	d100      	bne.n	80055fa <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 80055f8:	e182      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80055fa:	230c      	movs	r3, #12
 80055fc:	18fb      	adds	r3, r7, r3
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	2108      	movs	r1, #8
 8005602:	0018      	movs	r0, r3
 8005604:	f000 fab6 	bl	8005b74 <unsigned_bitwise_modulo>
 8005608:	0003      	movs	r3, r0
 800560a:	2b80      	cmp	r3, #128	@ 0x80
 800560c:	d159      	bne.n	80056c2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x432>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 800560e:	2212      	movs	r2, #18
 8005610:	18bb      	adds	r3, r7, r2
 8005612:	18ba      	adds	r2, r7, r2
 8005614:	8812      	ldrh	r2, [r2, #0]
 8005616:	3a01      	subs	r2, #1
 8005618:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 800561a:	2110      	movs	r1, #16
 800561c:	187b      	adds	r3, r7, r1
 800561e:	187a      	adds	r2, r7, r1
 8005620:	8812      	ldrh	r2, [r2, #0]
 8005622:	3201      	adds	r2, #1
 8005624:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005626:	000c      	movs	r4, r1
 8005628:	187b      	adds	r3, r7, r1
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	2101      	movs	r1, #1
 800562e:	0018      	movs	r0, r3
 8005630:	f000 faa0 	bl	8005b74 <unsigned_bitwise_modulo>
 8005634:	1e03      	subs	r3, r0, #0
 8005636:	d121      	bne.n	800567c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ec>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005638:	193b      	adds	r3, r7, r4
 800563a:	193a      	adds	r2, r7, r4
 800563c:	8812      	ldrh	r2, [r2, #0]
 800563e:	0852      	lsrs	r2, r2, #1
 8005640:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005642:	2316      	movs	r3, #22
 8005644:	18fb      	adds	r3, r7, r3
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d108      	bne.n	800565e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ce>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800564c:	2317      	movs	r3, #23
 800564e:	18fb      	adds	r3, r7, r3
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	2100      	movs	r1, #0
 800565a:	5499      	strb	r1, [r3, r2]
 800565c:	e150      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800565e:	2316      	movs	r3, #22
 8005660:	18fb      	adds	r3, r7, r3
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d000      	beq.n	800566a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3da>
 8005668:	e14a      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800566a:	2317      	movs	r3, #23
 800566c:	18fb      	adds	r3, r7, r3
 800566e:	2200      	movs	r2, #0
 8005670:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2220      	movs	r2, #32
 8005676:	2101      	movs	r1, #1
 8005678:	5499      	strb	r1, [r3, r2]
 800567a:	e141      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 800567c:	2210      	movs	r2, #16
 800567e:	18bb      	adds	r3, r7, r2
 8005680:	18ba      	adds	r2, r7, r2
 8005682:	8812      	ldrh	r2, [r2, #0]
 8005684:	0852      	lsrs	r2, r2, #1
 8005686:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005688:	2316      	movs	r3, #22
 800568a:	18fb      	adds	r3, r7, r3
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d108      	bne.n	80056a4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x414>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005692:	2317      	movs	r3, #23
 8005694:	18fb      	adds	r3, r7, r3
 8005696:	2200      	movs	r2, #0
 8005698:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2220      	movs	r2, #32
 800569e:	2100      	movs	r1, #0
 80056a0:	5499      	strb	r1, [r3, r2]
 80056a2:	e12d      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80056a4:	2316      	movs	r3, #22
 80056a6:	18fb      	adds	r3, r7, r3
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d000      	beq.n	80056b0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x420>
 80056ae:	e127      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80056b0:	2317      	movs	r3, #23
 80056b2:	18fb      	adds	r3, r7, r3
 80056b4:	2201      	movs	r2, #1
 80056b6:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	2101      	movs	r1, #1
 80056be:	5499      	strb	r1, [r3, r2]
 80056c0:	e11e      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 80056c2:	230c      	movs	r3, #12
 80056c4:	18fb      	adds	r3, r7, r3
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	2108      	movs	r1, #8
 80056ca:	0018      	movs	r0, r3
 80056cc:	f000 fa52 	bl	8005b74 <unsigned_bitwise_modulo>
 80056d0:	1e03      	subs	r3, r0, #0
 80056d2:	d152      	bne.n	800577a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4ea>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 80056d4:	2212      	movs	r2, #18
 80056d6:	18bb      	adds	r3, r7, r2
 80056d8:	18ba      	adds	r2, r7, r2
 80056da:	8812      	ldrh	r2, [r2, #0]
 80056dc:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80056de:	2410      	movs	r4, #16
 80056e0:	193b      	adds	r3, r7, r4
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	2101      	movs	r1, #1
 80056e6:	0018      	movs	r0, r3
 80056e8:	f000 fa44 	bl	8005b74 <unsigned_bitwise_modulo>
 80056ec:	1e03      	subs	r3, r0, #0
 80056ee:	d121      	bne.n	8005734 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4a4>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80056f0:	193b      	adds	r3, r7, r4
 80056f2:	193a      	adds	r2, r7, r4
 80056f4:	8812      	ldrh	r2, [r2, #0]
 80056f6:	0852      	lsrs	r2, r2, #1
 80056f8:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80056fa:	2316      	movs	r3, #22
 80056fc:	18fb      	adds	r3, r7, r3
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d108      	bne.n	8005716 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x486>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005704:	2317      	movs	r3, #23
 8005706:	18fb      	adds	r3, r7, r3
 8005708:	2200      	movs	r2, #0
 800570a:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2220      	movs	r2, #32
 8005710:	2100      	movs	r1, #0
 8005712:	5499      	strb	r1, [r3, r2]
 8005714:	e0f4      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005716:	2316      	movs	r3, #22
 8005718:	18fb      	adds	r3, r7, r3
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d000      	beq.n	8005722 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x492>
 8005720:	e0ee      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005722:	2317      	movs	r3, #23
 8005724:	18fb      	adds	r3, r7, r3
 8005726:	2200      	movs	r2, #0
 8005728:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2220      	movs	r2, #32
 800572e:	2101      	movs	r1, #1
 8005730:	5499      	strb	r1, [r3, r2]
 8005732:	e0e5      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005734:	2210      	movs	r2, #16
 8005736:	18bb      	adds	r3, r7, r2
 8005738:	18ba      	adds	r2, r7, r2
 800573a:	8812      	ldrh	r2, [r2, #0]
 800573c:	0852      	lsrs	r2, r2, #1
 800573e:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005740:	2316      	movs	r3, #22
 8005742:	18fb      	adds	r3, r7, r3
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d108      	bne.n	800575c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4cc>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800574a:	2317      	movs	r3, #23
 800574c:	18fb      	adds	r3, r7, r3
 800574e:	2200      	movs	r2, #0
 8005750:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	2100      	movs	r1, #0
 8005758:	5499      	strb	r1, [r3, r2]
 800575a:	e0d1      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800575c:	2316      	movs	r3, #22
 800575e:	18fb      	adds	r3, r7, r3
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d000      	beq.n	8005768 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4d8>
 8005766:	e0cb      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005768:	2317      	movs	r3, #23
 800576a:	18fb      	adds	r3, r7, r3
 800576c:	2201      	movs	r2, #1
 800576e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2220      	movs	r2, #32
 8005774:	2101      	movs	r1, #1
 8005776:	5499      	strb	r1, [r3, r2]
 8005778:	e0c2      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 800577a:	230c      	movs	r3, #12
 800577c:	18fb      	adds	r3, r7, r3
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	2108      	movs	r1, #8
 8005782:	0018      	movs	r0, r3
 8005784:	f000 f9f6 	bl	8005b74 <unsigned_bitwise_modulo>
 8005788:	0003      	movs	r3, r0
 800578a:	2b7f      	cmp	r3, #127	@ 0x7f
 800578c:	d856      	bhi.n	800583c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x5ac>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 800578e:	2212      	movs	r2, #18
 8005790:	18bb      	adds	r3, r7, r2
 8005792:	18ba      	adds	r2, r7, r2
 8005794:	8812      	ldrh	r2, [r2, #0]
 8005796:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8005798:	2410      	movs	r4, #16
 800579a:	193b      	adds	r3, r7, r4
 800579c:	193a      	adds	r2, r7, r4
 800579e:	8812      	ldrh	r2, [r2, #0]
 80057a0:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80057a2:	193b      	adds	r3, r7, r4
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	2101      	movs	r1, #1
 80057a8:	0018      	movs	r0, r3
 80057aa:	f000 f9e3 	bl	8005b74 <unsigned_bitwise_modulo>
 80057ae:	1e03      	subs	r3, r0, #0
 80057b0:	d121      	bne.n	80057f6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x566>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80057b2:	193b      	adds	r3, r7, r4
 80057b4:	193a      	adds	r2, r7, r4
 80057b6:	8812      	ldrh	r2, [r2, #0]
 80057b8:	0852      	lsrs	r2, r2, #1
 80057ba:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80057bc:	2316      	movs	r3, #22
 80057be:	18fb      	adds	r3, r7, r3
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d108      	bne.n	80057d8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x548>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80057c6:	2317      	movs	r3, #23
 80057c8:	18fb      	adds	r3, r7, r3
 80057ca:	2200      	movs	r2, #0
 80057cc:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2220      	movs	r2, #32
 80057d2:	2100      	movs	r1, #0
 80057d4:	5499      	strb	r1, [r3, r2]
 80057d6:	e093      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80057d8:	2316      	movs	r3, #22
 80057da:	18fb      	adds	r3, r7, r3
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d000      	beq.n	80057e4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x554>
 80057e2:	e08d      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80057e4:	2317      	movs	r3, #23
 80057e6:	18fb      	adds	r3, r7, r3
 80057e8:	2200      	movs	r2, #0
 80057ea:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2220      	movs	r2, #32
 80057f0:	2101      	movs	r1, #1
 80057f2:	5499      	strb	r1, [r3, r2]
 80057f4:	e084      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80057f6:	2210      	movs	r2, #16
 80057f8:	18bb      	adds	r3, r7, r2
 80057fa:	18ba      	adds	r2, r7, r2
 80057fc:	8812      	ldrh	r2, [r2, #0]
 80057fe:	0852      	lsrs	r2, r2, #1
 8005800:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005802:	2316      	movs	r3, #22
 8005804:	18fb      	adds	r3, r7, r3
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d108      	bne.n	800581e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x58e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800580c:	2317      	movs	r3, #23
 800580e:	18fb      	adds	r3, r7, r3
 8005810:	2200      	movs	r2, #0
 8005812:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2220      	movs	r2, #32
 8005818:	2100      	movs	r1, #0
 800581a:	5499      	strb	r1, [r3, r2]
 800581c:	e070      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800581e:	2316      	movs	r3, #22
 8005820:	18fb      	adds	r3, r7, r3
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d000      	beq.n	800582a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x59a>
 8005828:	e06a      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 800582a:	2317      	movs	r3, #23
 800582c:	18fb      	adds	r3, r7, r3
 800582e:	2201      	movs	r2, #1
 8005830:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2220      	movs	r2, #32
 8005836:	2101      	movs	r1, #1
 8005838:	5499      	strb	r1, [r3, r2]
 800583a:	e061      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 800583c:	230c      	movs	r3, #12
 800583e:	18fb      	adds	r3, r7, r3
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	2108      	movs	r1, #8
 8005844:	0018      	movs	r0, r3
 8005846:	f000 f995 	bl	8005b74 <unsigned_bitwise_modulo>
 800584a:	0003      	movs	r3, r0
 800584c:	2b80      	cmp	r3, #128	@ 0x80
 800584e:	d957      	bls.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8005850:	2212      	movs	r2, #18
 8005852:	18bb      	adds	r3, r7, r2
 8005854:	18ba      	adds	r2, r7, r2
 8005856:	8812      	ldrh	r2, [r2, #0]
 8005858:	3a01      	subs	r2, #1
 800585a:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 800585c:	2410      	movs	r4, #16
 800585e:	193b      	adds	r3, r7, r4
 8005860:	193a      	adds	r2, r7, r4
 8005862:	8812      	ldrh	r2, [r2, #0]
 8005864:	3201      	adds	r2, #1
 8005866:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005868:	193b      	adds	r3, r7, r4
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	2101      	movs	r1, #1
 800586e:	0018      	movs	r0, r3
 8005870:	f000 f980 	bl	8005b74 <unsigned_bitwise_modulo>
 8005874:	1e03      	subs	r3, r0, #0
 8005876:	d120      	bne.n	80058ba <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x62a>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005878:	193b      	adds	r3, r7, r4
 800587a:	193a      	adds	r2, r7, r4
 800587c:	8812      	ldrh	r2, [r2, #0]
 800587e:	0852      	lsrs	r2, r2, #1
 8005880:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005882:	2316      	movs	r3, #22
 8005884:	18fb      	adds	r3, r7, r3
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d108      	bne.n	800589e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x60e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800588c:	2317      	movs	r3, #23
 800588e:	18fb      	adds	r3, r7, r3
 8005890:	2200      	movs	r2, #0
 8005892:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2220      	movs	r2, #32
 8005898:	2100      	movs	r1, #0
 800589a:	5499      	strb	r1, [r3, r2]
 800589c:	e030      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800589e:	2316      	movs	r3, #22
 80058a0:	18fb      	adds	r3, r7, r3
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d12b      	bne.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80058a8:	2317      	movs	r3, #23
 80058aa:	18fb      	adds	r3, r7, r3
 80058ac:	2200      	movs	r2, #0
 80058ae:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2220      	movs	r2, #32
 80058b4:	2101      	movs	r1, #1
 80058b6:	5499      	strb	r1, [r3, r2]
 80058b8:	e022      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80058ba:	2210      	movs	r2, #16
 80058bc:	18bb      	adds	r3, r7, r2
 80058be:	18ba      	adds	r2, r7, r2
 80058c0:	8812      	ldrh	r2, [r2, #0]
 80058c2:	0852      	lsrs	r2, r2, #1
 80058c4:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80058c6:	2316      	movs	r3, #22
 80058c8:	18fb      	adds	r3, r7, r3
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d108      	bne.n	80058e2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x652>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80058d0:	2317      	movs	r3, #23
 80058d2:	18fb      	adds	r3, r7, r3
 80058d4:	2200      	movs	r2, #0
 80058d6:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	2100      	movs	r1, #0
 80058de:	5499      	strb	r1, [r3, r2]
 80058e0:	e00e      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80058e2:	2316      	movs	r3, #22
 80058e4:	18fb      	adds	r3, r7, r3
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d109      	bne.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80058ec:	2317      	movs	r3, #23
 80058ee:	18fb      	adds	r3, r7, r3
 80058f0:	2201      	movs	r2, #1
 80058f2:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2220      	movs	r2, #32
 80058f8:	2101      	movs	r1, #1
 80058fa:	5499      	strb	r1, [r3, r2]
 80058fc:	e000      	b.n	8005900 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80058fe:	46c0      	nop			@ (mov r8, r8)
			}

	        //DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	        //NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	        //ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8005900:	2316      	movs	r3, #22
 8005902:	18fb      	adds	r3, r7, r3
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d152      	bne.n	80059b0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x720>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 800590a:	2317      	movs	r3, #23
 800590c:	18fb      	adds	r3, r7, r3
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d109      	bne.n	8005928 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x698>

	                params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8005914:	2312      	movs	r3, #18
 8005916:	18fb      	adds	r3, r7, r3
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	2280      	movs	r2, #128	@ 0x80
 800591c:	0052      	lsls	r2, r2, #1
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	b29a      	uxth	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	829a      	strh	r2, [r3, #20]
 8005926:	e099      	b.n	8005a5c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8005928:	2317      	movs	r3, #23
 800592a:	18fb      	adds	r3, r7, r3
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d11b      	bne.n	800596a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6da>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	89db      	ldrh	r3, [r3, #14]
 8005936:	b29b      	uxth	r3, r3
 8005938:	2101      	movs	r1, #1
 800593a:	0018      	movs	r0, r3
 800593c:	f000 f91a 	bl	8005b74 <unsigned_bitwise_modulo>
 8005940:	1e03      	subs	r3, r0, #0
 8005942:	d109      	bne.n	8005958 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6c8>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8005944:	2312      	movs	r3, #18
 8005946:	18fb      	adds	r3, r7, r3
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	2280      	movs	r2, #128	@ 0x80
 800594c:	0052      	lsls	r2, r2, #1
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	b29a      	uxth	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	829a      	strh	r2, [r3, #20]
 8005956:	e081      	b.n	8005a5c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten - 1;
 8005958:	2312      	movs	r3, #18
 800595a:	18fb      	adds	r3, r7, r3
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	22ff      	movs	r2, #255	@ 0xff
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	b29a      	uxth	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	829a      	strh	r2, [r3, #20]
 8005968:	e078      	b.n	8005a5c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 800596a:	2317      	movs	r3, #23
 800596c:	18fb      	adds	r3, r7, r3
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b02      	cmp	r3, #2
 8005972:	d000      	beq.n	8005976 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6e6>
 8005974:	e072      	b.n	8005a5c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	89db      	ldrh	r3, [r3, #14]
 800597a:	b29b      	uxth	r3, r3
 800597c:	2101      	movs	r1, #1
 800597e:	0018      	movs	r0, r3
 8005980:	f000 f8f8 	bl	8005b74 <unsigned_bitwise_modulo>
 8005984:	1e03      	subs	r3, r0, #0
 8005986:	d109      	bne.n	800599c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x70c>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8005988:	2312      	movs	r3, #18
 800598a:	18fb      	adds	r3, r7, r3
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	2280      	movs	r2, #128	@ 0x80
 8005990:	0052      	lsls	r2, r2, #1
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	b29a      	uxth	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	829a      	strh	r2, [r3, #20]
 800599a:	e05f      	b.n	8005a5c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten + 1;
 800599c:	2312      	movs	r3, #18
 800599e:	18fb      	adds	r3, r7, r3
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	2202      	movs	r2, #2
 80059a4:	32ff      	adds	r2, #255	@ 0xff
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	829a      	strh	r2, [r3, #20]
 80059ae:	e055      	b.n	8005a5c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	        }
	        else if(symmetry_type_for_halfcycle == LENGTHEN){
 80059b0:	2316      	movs	r3, #22
 80059b2:	18fb      	adds	r3, r7, r3
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d150      	bne.n	8005a5c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 80059ba:	2317      	movs	r3, #23
 80059bc:	18fb      	adds	r3, r7, r3
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d109      	bne.n	80059d8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x748>

	                params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 80059c4:	2310      	movs	r3, #16
 80059c6:	18fb      	adds	r3, r7, r3
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	2280      	movs	r2, #128	@ 0x80
 80059cc:	0052      	lsls	r2, r2, #1
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	829a      	strh	r2, [r3, #20]
 80059d6:	e041      	b.n	8005a5c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 80059d8:	2317      	movs	r3, #23
 80059da:	18fb      	adds	r3, r7, r3
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d11b      	bne.n	8005a1a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x78a>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	89db      	ldrh	r3, [r3, #14]
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	2101      	movs	r1, #1
 80059ea:	0018      	movs	r0, r3
 80059ec:	f000 f8c2 	bl	8005b74 <unsigned_bitwise_modulo>
 80059f0:	1e03      	subs	r3, r0, #0
 80059f2:	d109      	bne.n	8005a08 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x778>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 80059f4:	2310      	movs	r3, #16
 80059f6:	18fb      	adds	r3, r7, r3
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	2280      	movs	r2, #128	@ 0x80
 80059fc:	0052      	lsls	r2, r2, #1
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	829a      	strh	r2, [r3, #20]
 8005a06:	e029      	b.n	8005a5c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 8005a08:	2310      	movs	r3, #16
 8005a0a:	18fb      	adds	r3, r7, r3
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	22ff      	movs	r2, #255	@ 0xff
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	829a      	strh	r2, [r3, #20]
 8005a18:	e020      	b.n	8005a5c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8005a1a:	2317      	movs	r3, #23
 8005a1c:	18fb      	adds	r3, r7, r3
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d11b      	bne.n	8005a5c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	89db      	ldrh	r3, [r3, #14]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	f000 f8a1 	bl	8005b74 <unsigned_bitwise_modulo>
 8005a32:	1e03      	subs	r3, r0, #0
 8005a34:	d109      	bne.n	8005a4a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7ba>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8005a36:	2310      	movs	r3, #16
 8005a38:	18fb      	adds	r3, r7, r3
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	2280      	movs	r2, #128	@ 0x80
 8005a3e:	0052      	lsls	r2, r2, #1
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	829a      	strh	r2, [r3, #20]
 8005a48:	e008      	b.n	8005a5c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen + 1;
 8005a4a:	2310      	movs	r3, #16
 8005a4c:	18fb      	adds	r3, r7, r3
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	2202      	movs	r2, #2
 8005a52:	32ff      	adds	r2, #255	@ 0xff
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	829a      	strh	r2, [r3, #20]
	                }
	            }
	        }

	        Adjust_TIM16_Prescaler(params_ptr);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	0018      	movs	r0, r3
 8005a60:	f7ff fbf4 	bl	800524c <Adjust_TIM16_Prescaler>
		params_ptr->final_start_value = params_ptr->raw_start_value;
		params_ptr->prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(params_ptr);
    #endif

    params_ptr->final_period = 256 - params_ptr->final_start_value;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	8a9b      	ldrh	r3, [r3, #20]
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2280      	movs	r2, #128	@ 0x80
 8005a6c:	0052      	lsls	r2, r2, #1
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	82da      	strh	r2, [r3, #22]
    params_ptr->final_ARR = params_ptr->final_period - 1;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	8adb      	ldrh	r3, [r3, #22]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	831a      	strh	r2, [r3, #24]
    params_ptr->final_prescaler_minus_one = params_ptr->final_prescaler - 1;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	8b9b      	ldrh	r3, [r3, #28]
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	83da      	strh	r2, [r3, #30]

    return 1;
 8005a92:	2301      	movs	r3, #1
}
 8005a94:	0018      	movs	r0, r3
 8005a96:	46bd      	mov	sp, r7
 8005a98:	b007      	add	sp, #28
 8005a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005aa0:	46c0      	nop			@ (mov r8, r8)
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <Start_OC_TIM>:
//INCLUDES
#include "timers.h"

//FUNCTION DEFINITIONS
uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8005aa6:	b5b0      	push	{r4, r5, r7, lr}
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
 8005aae:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 8005ab0:	250f      	movs	r5, #15
 8005ab2:	197c      	adds	r4, r7, r5
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	0011      	movs	r1, r2
 8005aba:	0018      	movs	r0, r3
 8005abc:	f003 ff32 	bl	8009924 <HAL_TIM_OC_Start_IT>
 8005ac0:	0003      	movs	r3, r0
 8005ac2:	7023      	strb	r3, [r4, #0]
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 8005ac4:	197b      	adds	r3, r7, r5
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <Start_OC_TIM+0x2a>

		Error_Handler();
 8005acc:	f7fc fbe6 	bl	800229c <Error_Handler>
	}

	return ok;
 8005ad0:	230f      	movs	r3, #15
 8005ad2:	18fb      	adds	r3, r7, r3
 8005ad4:	781b      	ldrb	r3, [r3, #0]
}
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	b004      	add	sp, #16
 8005adc:	bdb0      	pop	{r4, r5, r7, pc}

08005ade <Stop_OC_TIM>:

uint8_t Stop_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8005ade:	b5b0      	push	{r4, r5, r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Stop_IT(TIM, OC_TIM_channel);
 8005ae8:	250f      	movs	r5, #15
 8005aea:	197c      	adds	r4, r7, r5
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	0011      	movs	r1, r2
 8005af2:	0018      	movs	r0, r3
 8005af4:	f004 f83a 	bl	8009b6c <HAL_TIM_OC_Stop_IT>
 8005af8:	0003      	movs	r3, r0
 8005afa:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8005afc:	197b      	adds	r3, r7, r5
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <Stop_OC_TIM+0x2a>

		Error_Handler();
 8005b04:	f7fc fbca 	bl	800229c <Error_Handler>
	}

	return ok;
 8005b08:	230f      	movs	r3, #15
 8005b0a:	18fb      	adds	r3, r7, r3
 8005b0c:	781b      	ldrb	r3, [r3, #0]
}
 8005b0e:	0018      	movs	r0, r3
 8005b10:	46bd      	mov	sp, r7
 8005b12:	b004      	add	sp, #16
 8005b14:	bdb0      	pop	{r4, r5, r7, pc}

08005b16 <isPrime>:
#include "utility.h"

enum Validate isPrime(uint16_t x){
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b084      	sub	sp, #16
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	0002      	movs	r2, r0
 8005b1e:	1dbb      	adds	r3, r7, #6
 8005b20:	801a      	strh	r2, [r3, #0]
    for (uint16_t d = 2; d * d <= x; d++) {
 8005b22:	230e      	movs	r3, #14
 8005b24:	18fb      	adds	r3, r7, r3
 8005b26:	2202      	movs	r2, #2
 8005b28:	801a      	strh	r2, [r3, #0]
 8005b2a:	e014      	b.n	8005b56 <isPrime+0x40>
        if (x % d == 0)
 8005b2c:	1dba      	adds	r2, r7, #6
 8005b2e:	230e      	movs	r3, #14
 8005b30:	18fb      	adds	r3, r7, r3
 8005b32:	8812      	ldrh	r2, [r2, #0]
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	0019      	movs	r1, r3
 8005b38:	0010      	movs	r0, r2
 8005b3a:	f7fa fb6b 	bl	8000214 <__aeabi_uidivmod>
 8005b3e:	000b      	movs	r3, r1
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <isPrime+0x34>
            return NO;
 8005b46:	2300      	movs	r3, #0
 8005b48:	e010      	b.n	8005b6c <isPrime+0x56>
    for (uint16_t d = 2; d * d <= x; d++) {
 8005b4a:	210e      	movs	r1, #14
 8005b4c:	187b      	adds	r3, r7, r1
 8005b4e:	881a      	ldrh	r2, [r3, #0]
 8005b50:	187b      	adds	r3, r7, r1
 8005b52:	3201      	adds	r2, #1
 8005b54:	801a      	strh	r2, [r3, #0]
 8005b56:	220e      	movs	r2, #14
 8005b58:	18bb      	adds	r3, r7, r2
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	18ba      	adds	r2, r7, r2
 8005b5e:	8812      	ldrh	r2, [r2, #0]
 8005b60:	435a      	muls	r2, r3
 8005b62:	1dbb      	adds	r3, r7, #6
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	dde0      	ble.n	8005b2c <isPrime+0x16>
    }
    return YES;
 8005b6a:	2301      	movs	r3, #1
}
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	b004      	add	sp, #16
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	000a      	movs	r2, r1
 8005b7e:	1cfb      	adds	r3, r7, #3
 8005b80:	701a      	strb	r2, [r3, #0]

    return dividend & ((1 << base_2_exponent) - 1);
 8005b82:	1cfb      	adds	r3, r7, #3
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2201      	movs	r2, #1
 8005b88:	409a      	lsls	r2, r3
 8005b8a:	0013      	movs	r3, r2
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	001a      	movs	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4013      	ands	r3, r2
}
 8005b94:	0018      	movs	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	b002      	add	sp, #8
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <Global_Interrupt_Enable>:

uint8_t Global_Interrupt_Enable(void){
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8005ba0:	b662      	cpsie	i
}
 8005ba2:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
	return 1;
 8005ba4:	2301      	movs	r3, #1
}
 8005ba6:	0018      	movs	r0, r3
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <Get_Status_Bit>:

	__disable_irq();
	return 1;
}

enum Validate Get_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	000a      	movs	r2, r1
 8005bb6:	1cbb      	adds	r3, r7, #2
 8005bb8:	801a      	strh	r2, [r3, #0]

    if(*bits & bit){
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	1cba      	adds	r2, r7, #2
 8005bc0:	8812      	ldrh	r2, [r2, #0]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d001      	beq.n	8005bca <Get_Status_Bit+0x1e>

        return (enum Validate) YES;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e000      	b.n	8005bcc <Get_Status_Bit+0x20>
    }

    else{

        return (enum Validate) NO;
 8005bca:	2300      	movs	r3, #0
    }
}
 8005bcc:	0018      	movs	r0, r3
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	b002      	add	sp, #8
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <Set_Status_Bit>:

void Set_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	000a      	movs	r2, r1
 8005bde:	1cbb      	adds	r3, r7, #2
 8005be0:	801a      	strh	r2, [r3, #0]

	*bits |= bit;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	1cbb      	adds	r3, r7, #2
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	601a      	str	r2, [r3, #0]
}
 8005bf0:	46c0      	nop			@ (mov r8, r8)
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	b002      	add	sp, #8
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <Clear_Status_Bit>:

void Clear_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	000a      	movs	r2, r1
 8005c02:	1cbb      	adds	r3, r7, #2
 8005c04:	801a      	strh	r2, [r3, #0]

	*bits &= ~bit;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	1cba      	adds	r2, r7, #2
 8005c0c:	8812      	ldrh	r2, [r2, #0]
 8005c0e:	43d2      	mvns	r2, r2
 8005c10:	401a      	ands	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	601a      	str	r2, [r3, #0]
}
 8005c16:	46c0      	nop			@ (mov r8, r8)
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	b002      	add	sp, #8
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005c20:	480d      	ldr	r0, [pc, #52]	@ (8005c58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005c22:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005c24:	f7ff ff3a 	bl	8005a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005c28:	480c      	ldr	r0, [pc, #48]	@ (8005c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8005c2a:	490d      	ldr	r1, [pc, #52]	@ (8005c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8005c64 <LoopForever+0xe>)
  movs r3, #0
 8005c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c30:	e002      	b.n	8005c38 <LoopCopyDataInit>

08005c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c36:	3304      	adds	r3, #4

08005c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c3c:	d3f9      	bcc.n	8005c32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005c40:	4c0a      	ldr	r4, [pc, #40]	@ (8005c6c <LoopForever+0x16>)
  movs r3, #0
 8005c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c44:	e001      	b.n	8005c4a <LoopFillZerobss>

08005c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c48:	3204      	adds	r2, #4

08005c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c4c:	d3fb      	bcc.n	8005c46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005c4e:	f007 fb93 	bl	800d378 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005c52:	f7fe fa9d 	bl	8004190 <main>

08005c56 <LoopForever>:

LoopForever:
  b LoopForever
 8005c56:	e7fe      	b.n	8005c56 <LoopForever>
  ldr   r0, =_estack
 8005c58:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005c60:	200004d4 	.word	0x200004d4
  ldr r2, =_sidata
 8005c64:	0800de98 	.word	0x0800de98
  ldr r2, =_sbss
 8005c68:	200004d4 	.word	0x200004d4
  ldr r4, =_ebss
 8005c6c:	20000d80 	.word	0x20000d80

08005c70 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005c70:	e7fe      	b.n	8005c70 <ADC1_IRQHandler>
	...

08005c74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005c7a:	1dfb      	adds	r3, r7, #7
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005c80:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb0 <HAL_Init+0x3c>)
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb0 <HAL_Init+0x3c>)
 8005c86:	2180      	movs	r1, #128	@ 0x80
 8005c88:	0049      	lsls	r1, r1, #1
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005c8e:	2000      	movs	r0, #0
 8005c90:	f000 f810 	bl	8005cb4 <HAL_InitTick>
 8005c94:	1e03      	subs	r3, r0, #0
 8005c96:	d003      	beq.n	8005ca0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005c98:	1dfb      	adds	r3, r7, #7
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	701a      	strb	r2, [r3, #0]
 8005c9e:	e001      	b.n	8005ca4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005ca0:	f7fe fef8 	bl	8004a94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005ca4:	1dfb      	adds	r3, r7, #7
 8005ca6:	781b      	ldrb	r3, [r3, #0]
}
 8005ca8:	0018      	movs	r0, r3
 8005caa:	46bd      	mov	sp, r7
 8005cac:	b002      	add	sp, #8
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	40022000 	.word	0x40022000

08005cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005cb4:	b590      	push	{r4, r7, lr}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005cbc:	230f      	movs	r3, #15
 8005cbe:	18fb      	adds	r3, r7, r3
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8005d3c <HAL_InitTick+0x88>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d02b      	beq.n	8005d24 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8005d40 <HAL_InitTick+0x8c>)
 8005cce:	681c      	ldr	r4, [r3, #0]
 8005cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d3c <HAL_InitTick+0x88>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	0019      	movs	r1, r3
 8005cd6:	23fa      	movs	r3, #250	@ 0xfa
 8005cd8:	0098      	lsls	r0, r3, #2
 8005cda:	f7fa fa15 	bl	8000108 <__udivsi3>
 8005cde:	0003      	movs	r3, r0
 8005ce0:	0019      	movs	r1, r3
 8005ce2:	0020      	movs	r0, r4
 8005ce4:	f7fa fa10 	bl	8000108 <__udivsi3>
 8005ce8:	0003      	movs	r3, r0
 8005cea:	0018      	movs	r0, r3
 8005cec:	f001 fb75 	bl	80073da <HAL_SYSTICK_Config>
 8005cf0:	1e03      	subs	r3, r0, #0
 8005cf2:	d112      	bne.n	8005d1a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d80a      	bhi.n	8005d10 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	425b      	negs	r3, r3
 8005d00:	2200      	movs	r2, #0
 8005d02:	0018      	movs	r0, r3
 8005d04:	f001 fb34 	bl	8007370 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005d08:	4b0e      	ldr	r3, [pc, #56]	@ (8005d44 <HAL_InitTick+0x90>)
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	e00d      	b.n	8005d2c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005d10:	230f      	movs	r3, #15
 8005d12:	18fb      	adds	r3, r7, r3
 8005d14:	2201      	movs	r2, #1
 8005d16:	701a      	strb	r2, [r3, #0]
 8005d18:	e008      	b.n	8005d2c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005d1a:	230f      	movs	r3, #15
 8005d1c:	18fb      	adds	r3, r7, r3
 8005d1e:	2201      	movs	r2, #1
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	e003      	b.n	8005d2c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005d24:	230f      	movs	r3, #15
 8005d26:	18fb      	adds	r3, r7, r3
 8005d28:	2201      	movs	r2, #1
 8005d2a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005d2c:	230f      	movs	r3, #15
 8005d2e:	18fb      	adds	r3, r7, r3
 8005d30:	781b      	ldrb	r3, [r3, #0]
}
 8005d32:	0018      	movs	r0, r3
 8005d34:	46bd      	mov	sp, r7
 8005d36:	b005      	add	sp, #20
 8005d38:	bd90      	pop	{r4, r7, pc}
 8005d3a:	46c0      	nop			@ (mov r8, r8)
 8005d3c:	20000448 	.word	0x20000448
 8005d40:	20000440 	.word	0x20000440
 8005d44:	20000444 	.word	0x20000444

08005d48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005d4c:	4b05      	ldr	r3, [pc, #20]	@ (8005d64 <HAL_IncTick+0x1c>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	001a      	movs	r2, r3
 8005d52:	4b05      	ldr	r3, [pc, #20]	@ (8005d68 <HAL_IncTick+0x20>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	18d2      	adds	r2, r2, r3
 8005d58:	4b03      	ldr	r3, [pc, #12]	@ (8005d68 <HAL_IncTick+0x20>)
 8005d5a:	601a      	str	r2, [r3, #0]
}
 8005d5c:	46c0      	nop			@ (mov r8, r8)
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	46c0      	nop			@ (mov r8, r8)
 8005d64:	20000448 	.word	0x20000448
 8005d68:	20000d60 	.word	0x20000d60

08005d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8005d70:	4b02      	ldr	r3, [pc, #8]	@ (8005d7c <HAL_GetTick+0x10>)
 8005d72:	681b      	ldr	r3, [r3, #0]
}
 8005d74:	0018      	movs	r0, r3
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	46c0      	nop			@ (mov r8, r8)
 8005d7c:	20000d60 	.word	0x20000d60

08005d80 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a05      	ldr	r2, [pc, #20]	@ (8005da4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005d90:	401a      	ands	r2, r3
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	601a      	str	r2, [r3, #0]
}
 8005d9a:	46c0      	nop			@ (mov r8, r8)
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	b002      	add	sp, #8
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	46c0      	nop			@ (mov r8, r8)
 8005da4:	fe3fffff 	.word	0xfe3fffff

08005da8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	23e0      	movs	r3, #224	@ 0xe0
 8005db6:	045b      	lsls	r3, r3, #17
 8005db8:	4013      	ands	r3, r2
}
 8005dba:	0018      	movs	r0, r3
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	b002      	add	sp, #8
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	60f8      	str	r0, [r7, #12]
 8005dca:	60b9      	str	r1, [r7, #8]
 8005dcc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	2104      	movs	r1, #4
 8005dd6:	400a      	ands	r2, r1
 8005dd8:	2107      	movs	r1, #7
 8005dda:	4091      	lsls	r1, r2
 8005ddc:	000a      	movs	r2, r1
 8005dde:	43d2      	mvns	r2, r2
 8005de0:	401a      	ands	r2, r3
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2104      	movs	r1, #4
 8005de6:	400b      	ands	r3, r1
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	4099      	lsls	r1, r3
 8005dec:	000b      	movs	r3, r1
 8005dee:	431a      	orrs	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005df4:	46c0      	nop			@ (mov r8, r8)
 8005df6:	46bd      	mov	sp, r7
 8005df8:	b004      	add	sp, #16
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	2104      	movs	r1, #4
 8005e0e:	400a      	ands	r2, r1
 8005e10:	2107      	movs	r1, #7
 8005e12:	4091      	lsls	r1, r2
 8005e14:	000a      	movs	r2, r1
 8005e16:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2104      	movs	r1, #4
 8005e1c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005e1e:	40da      	lsrs	r2, r3
 8005e20:	0013      	movs	r3, r2
}
 8005e22:	0018      	movs	r0, r3
 8005e24:	46bd      	mov	sp, r7
 8005e26:	b002      	add	sp, #8
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	23c0      	movs	r3, #192	@ 0xc0
 8005e38:	011b      	lsls	r3, r3, #4
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	d101      	bne.n	8005e42 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e000      	b.n	8005e44 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	0018      	movs	r0, r3
 8005e46:	46bd      	mov	sp, r7
 8005e48:	b002      	add	sp, #8
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	211f      	movs	r1, #31
 8005e60:	400a      	ands	r2, r1
 8005e62:	210f      	movs	r1, #15
 8005e64:	4091      	lsls	r1, r2
 8005e66:	000a      	movs	r2, r1
 8005e68:	43d2      	mvns	r2, r2
 8005e6a:	401a      	ands	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	0e9b      	lsrs	r3, r3, #26
 8005e70:	210f      	movs	r1, #15
 8005e72:	4019      	ands	r1, r3
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	201f      	movs	r0, #31
 8005e78:	4003      	ands	r3, r0
 8005e7a:	4099      	lsls	r1, r3
 8005e7c:	000b      	movs	r3, r1
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005e84:	46c0      	nop			@ (mov r8, r8)
 8005e86:	46bd      	mov	sp, r7
 8005e88:	b004      	add	sp, #16
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	035b      	lsls	r3, r3, #13
 8005e9e:	0b5b      	lsrs	r3, r3, #13
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005ea6:	46c0      	nop			@ (mov r8, r8)
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	b002      	add	sp, #8
 8005eac:	bd80      	pop	{r7, pc}

08005eae <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b082      	sub	sp, #8
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	0352      	lsls	r2, r2, #13
 8005ec0:	0b52      	lsrs	r2, r2, #13
 8005ec2:	43d2      	mvns	r2, r2
 8005ec4:	401a      	ands	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005eca:	46c0      	nop			@ (mov r8, r8)
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	b002      	add	sp, #8
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	0212      	lsls	r2, r2, #8
 8005ee8:	43d2      	mvns	r2, r2
 8005eea:	401a      	ands	r2, r3
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	021b      	lsls	r3, r3, #8
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	400b      	ands	r3, r1
 8005ef4:	4904      	ldr	r1, [pc, #16]	@ (8005f08 <LL_ADC_SetChannelSamplingTime+0x34>)
 8005ef6:	400b      	ands	r3, r1
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005efe:	46c0      	nop			@ (mov r8, r8)
 8005f00:	46bd      	mov	sp, r7
 8005f02:	b004      	add	sp, #16
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	46c0      	nop			@ (mov r8, r8)
 8005f08:	07ffff00 	.word	0x07ffff00

08005f0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	4a05      	ldr	r2, [pc, #20]	@ (8005f30 <LL_ADC_EnableInternalRegulator+0x24>)
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	2280      	movs	r2, #128	@ 0x80
 8005f1e:	0552      	lsls	r2, r2, #21
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005f26:	46c0      	nop			@ (mov r8, r8)
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	b002      	add	sp, #8
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	46c0      	nop			@ (mov r8, r8)
 8005f30:	6fffffe8 	.word	0x6fffffe8

08005f34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	2380      	movs	r3, #128	@ 0x80
 8005f42:	055b      	lsls	r3, r3, #21
 8005f44:	401a      	ands	r2, r3
 8005f46:	2380      	movs	r3, #128	@ 0x80
 8005f48:	055b      	lsls	r3, r3, #21
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d101      	bne.n	8005f52 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e000      	b.n	8005f54 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	0018      	movs	r0, r3
 8005f56:	46bd      	mov	sp, r7
 8005f58:	b002      	add	sp, #8
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	4a04      	ldr	r2, [pc, #16]	@ (8005f7c <LL_ADC_Enable+0x20>)
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005f74:	46c0      	nop			@ (mov r8, r8)
 8005f76:	46bd      	mov	sp, r7
 8005f78:	b002      	add	sp, #8
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	7fffffe8 	.word	0x7fffffe8

08005f80 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	4a04      	ldr	r2, [pc, #16]	@ (8005fa0 <LL_ADC_Disable+0x20>)
 8005f8e:	4013      	ands	r3, r2
 8005f90:	2202      	movs	r2, #2
 8005f92:	431a      	orrs	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005f98:	46c0      	nop			@ (mov r8, r8)
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	b002      	add	sp, #8
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	7fffffe8 	.word	0x7fffffe8

08005fa4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <LL_ADC_IsEnabled+0x18>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e000      	b.n	8005fbe <LL_ADC_IsEnabled+0x1a>
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	0018      	movs	r0, r3
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	b002      	add	sp, #8
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b082      	sub	sp, #8
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d101      	bne.n	8005fde <LL_ADC_IsDisableOngoing+0x18>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e000      	b.n	8005fe0 <LL_ADC_IsDisableOngoing+0x1a>
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	b002      	add	sp, #8
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	4a04      	ldr	r2, [pc, #16]	@ (8006008 <LL_ADC_REG_StartConversion+0x20>)
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	2204      	movs	r2, #4
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006000:	46c0      	nop			@ (mov r8, r8)
 8006002:	46bd      	mov	sp, r7
 8006004:	b002      	add	sp, #8
 8006006:	bd80      	pop	{r7, pc}
 8006008:	7fffffe8 	.word	0x7fffffe8

0800600c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	4a04      	ldr	r2, [pc, #16]	@ (800602c <LL_ADC_REG_StopConversion+0x20>)
 800601a:	4013      	ands	r3, r2
 800601c:	2210      	movs	r2, #16
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006024:	46c0      	nop			@ (mov r8, r8)
 8006026:	46bd      	mov	sp, r7
 8006028:	b002      	add	sp, #8
 800602a:	bd80      	pop	{r7, pc}
 800602c:	7fffffe8 	.word	0x7fffffe8

08006030 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	2204      	movs	r2, #4
 800603e:	4013      	ands	r3, r2
 8006040:	2b04      	cmp	r3, #4
 8006042:	d101      	bne.n	8006048 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006044:	2301      	movs	r3, #1
 8006046:	e000      	b.n	800604a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006048:	2300      	movs	r3, #0
}
 800604a:	0018      	movs	r0, r3
 800604c:	46bd      	mov	sp, r7
 800604e:	b002      	add	sp, #8
 8006050:	bd80      	pop	{r7, pc}
	...

08006054 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b088      	sub	sp, #32
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800605c:	231f      	movs	r3, #31
 800605e:	18fb      	adds	r3, r7, r3
 8006060:	2200      	movs	r2, #0
 8006062:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8006064:	2300      	movs	r3, #0
 8006066:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8006068:	2300      	movs	r3, #0
 800606a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800606c:	2300      	movs	r3, #0
 800606e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e19f      	b.n	80063ba <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800607e:	2b00      	cmp	r3, #0
 8006080:	d12a      	bne.n	80060d8 <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4acf      	ldr	r2, [pc, #828]	@ (80063c4 <HAL_ADC_Init+0x370>)
 8006086:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4acf      	ldr	r2, [pc, #828]	@ (80063c8 <HAL_ADC_Init+0x374>)
 800608c:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4ace      	ldr	r2, [pc, #824]	@ (80063cc <HAL_ADC_Init+0x378>)
 8006092:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4ace      	ldr	r2, [pc, #824]	@ (80063d0 <HAL_ADC_Init+0x37c>)
 8006098:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4acd      	ldr	r2, [pc, #820]	@ (80063d4 <HAL_ADC_Init+0x380>)
 800609e:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4acd      	ldr	r2, [pc, #820]	@ (80063d8 <HAL_ADC_Init+0x384>)
 80060a4:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4acc      	ldr	r2, [pc, #816]	@ (80063dc <HAL_ADC_Init+0x388>)
 80060aa:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (hadc->MspInitCallback == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2280      	movs	r2, #128	@ 0x80
 80060b0:	589b      	ldr	r3, [r3, r2]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d103      	bne.n	80060be <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2180      	movs	r1, #128	@ 0x80
 80060ba:	4ac9      	ldr	r2, [pc, #804]	@ (80063e0 <HAL_ADC_Init+0x38c>)
 80060bc:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2280      	movs	r2, #128	@ 0x80
 80060c2:	589b      	ldr	r3, [r3, r2]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	0010      	movs	r0, r2
 80060c8:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2254      	movs	r2, #84	@ 0x54
 80060d4:	2100      	movs	r1, #0
 80060d6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	0018      	movs	r0, r3
 80060de:	f7ff ff29 	bl	8005f34 <LL_ADC_IsInternalRegulatorEnabled>
 80060e2:	1e03      	subs	r3, r0, #0
 80060e4:	d115      	bne.n	8006112 <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	0018      	movs	r0, r3
 80060ec:	f7ff ff0e 	bl	8005f0c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80060f0:	4bbc      	ldr	r3, [pc, #752]	@ (80063e4 <HAL_ADC_Init+0x390>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	49bc      	ldr	r1, [pc, #752]	@ (80063e8 <HAL_ADC_Init+0x394>)
 80060f6:	0018      	movs	r0, r3
 80060f8:	f7fa f806 	bl	8000108 <__udivsi3>
 80060fc:	0003      	movs	r3, r0
 80060fe:	3301      	adds	r3, #1
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006104:	e002      	b.n	800610c <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	3b01      	subs	r3, #1
 800610a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1f9      	bne.n	8006106 <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	0018      	movs	r0, r3
 8006118:	f7ff ff0c 	bl	8005f34 <LL_ADC_IsInternalRegulatorEnabled>
 800611c:	1e03      	subs	r3, r0, #0
 800611e:	d10f      	bne.n	8006140 <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006124:	2210      	movs	r2, #16
 8006126:	431a      	orrs	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006130:	2201      	movs	r2, #1
 8006132:	431a      	orrs	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006138:	231f      	movs	r3, #31
 800613a:	18fb      	adds	r3, r7, r3
 800613c:	2201      	movs	r2, #1
 800613e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	0018      	movs	r0, r3
 8006146:	f7ff ff73 	bl	8006030 <LL_ADC_REG_IsConversionOngoing>
 800614a:	0003      	movs	r3, r0
 800614c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006152:	2210      	movs	r2, #16
 8006154:	4013      	ands	r3, r2
 8006156:	d000      	beq.n	800615a <HAL_ADC_Init+0x106>
 8006158:	e122      	b.n	80063a0 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d000      	beq.n	8006162 <HAL_ADC_Init+0x10e>
 8006160:	e11e      	b.n	80063a0 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006166:	4aa1      	ldr	r2, [pc, #644]	@ (80063ec <HAL_ADC_Init+0x398>)
 8006168:	4013      	ands	r3, r2
 800616a:	2202      	movs	r2, #2
 800616c:	431a      	orrs	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	0018      	movs	r0, r3
 8006178:	f7ff ff14 	bl	8005fa4 <LL_ADC_IsEnabled>
 800617c:	1e03      	subs	r3, r0, #0
 800617e:	d000      	beq.n	8006182 <HAL_ADC_Init+0x12e>
 8006180:	e0ad      	b.n	80062de <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	7e1b      	ldrb	r3, [r3, #24]
 800618a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800618c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	7e5b      	ldrb	r3, [r3, #25]
 8006192:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006194:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	7e9b      	ldrb	r3, [r3, #26]
 800619a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800619c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <HAL_ADC_Init+0x158>
 80061a6:	2380      	movs	r3, #128	@ 0x80
 80061a8:	015b      	lsls	r3, r3, #5
 80061aa:	e000      	b.n	80061ae <HAL_ADC_Init+0x15a>
 80061ac:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80061ae:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80061b4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	da04      	bge.n	80061c8 <HAL_ADC_Init+0x174>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	085b      	lsrs	r3, r3, #1
 80061c6:	e001      	b.n	80061cc <HAL_ADC_Init+0x178>
 80061c8:	2380      	movs	r3, #128	@ 0x80
 80061ca:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80061cc:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	212c      	movs	r1, #44	@ 0x2c
 80061d2:	5c5b      	ldrb	r3, [r3, r1]
 80061d4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80061d6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	4313      	orrs	r3, r2
 80061dc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2220      	movs	r2, #32
 80061e2:	5c9b      	ldrb	r3, [r3, r2]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d115      	bne.n	8006214 <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	7e9b      	ldrb	r3, [r3, #26]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d105      	bne.n	80061fc <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	2280      	movs	r2, #128	@ 0x80
 80061f4:	0252      	lsls	r2, r2, #9
 80061f6:	4313      	orrs	r3, r2
 80061f8:	61bb      	str	r3, [r7, #24]
 80061fa:	e00b      	b.n	8006214 <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006200:	2220      	movs	r2, #32
 8006202:	431a      	orrs	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800620c:	2201      	movs	r2, #1
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00a      	beq.n	8006232 <HAL_ADC_Init+0x1de>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006220:	23e0      	movs	r3, #224	@ 0xe0
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800622a:	4313      	orrs	r3, r2
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	4313      	orrs	r3, r2
 8006230:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	4a6d      	ldr	r2, [pc, #436]	@ (80063f0 <HAL_ADC_Init+0x39c>)
 800623a:	4013      	ands	r3, r2
 800623c:	0019      	movs	r1, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	430a      	orrs	r2, r1
 8006246:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	0f9b      	lsrs	r3, r3, #30
 800624e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006254:	4313      	orrs	r3, r2
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4313      	orrs	r3, r2
 800625a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	223c      	movs	r2, #60	@ 0x3c
 8006260:	5c9b      	ldrb	r3, [r3, r2]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d111      	bne.n	800628a <HAL_ADC_Init+0x236>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	0f9b      	lsrs	r3, r3, #30
 800626c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006272:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8006278:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800627e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	2201      	movs	r2, #1
 8006286:	4313      	orrs	r3, r2
 8006288:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	4a58      	ldr	r2, [pc, #352]	@ (80063f4 <HAL_ADC_Init+0x3a0>)
 8006292:	4013      	ands	r3, r2
 8006294:	0019      	movs	r1, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	430a      	orrs	r2, r1
 800629e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	23c0      	movs	r3, #192	@ 0xc0
 80062a6:	061b      	lsls	r3, r3, #24
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d018      	beq.n	80062de <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80062b0:	2380      	movs	r3, #128	@ 0x80
 80062b2:	05db      	lsls	r3, r3, #23
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d012      	beq.n	80062de <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80062bc:	2380      	movs	r3, #128	@ 0x80
 80062be:	061b      	lsls	r3, r3, #24
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d00c      	beq.n	80062de <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80062c4:	4b4c      	ldr	r3, [pc, #304]	@ (80063f8 <HAL_ADC_Init+0x3a4>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a4c      	ldr	r2, [pc, #304]	@ (80063fc <HAL_ADC_Init+0x3a8>)
 80062ca:	4013      	ands	r3, r2
 80062cc:	0019      	movs	r1, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	23f0      	movs	r3, #240	@ 0xf0
 80062d4:	039b      	lsls	r3, r3, #14
 80062d6:	401a      	ands	r2, r3
 80062d8:	4b47      	ldr	r3, [pc, #284]	@ (80063f8 <HAL_ADC_Init+0x3a4>)
 80062da:	430a      	orrs	r2, r1
 80062dc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6818      	ldr	r0, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062e6:	001a      	movs	r2, r3
 80062e8:	2100      	movs	r1, #0
 80062ea:	f7ff fd6a 	bl	8005dc2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6818      	ldr	r0, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f6:	4942      	ldr	r1, [pc, #264]	@ (8006400 <HAL_ADC_Init+0x3ac>)
 80062f8:	001a      	movs	r2, r3
 80062fa:	f7ff fd62 	bl	8005dc2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d109      	bne.n	800631a <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2110      	movs	r1, #16
 8006312:	4249      	negs	r1, r1
 8006314:	430a      	orrs	r2, r1
 8006316:	629a      	str	r2, [r3, #40]	@ 0x28
 8006318:	e018      	b.n	800634c <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691a      	ldr	r2, [r3, #16]
 800631e:	2380      	movs	r3, #128	@ 0x80
 8006320:	039b      	lsls	r3, r3, #14
 8006322:	429a      	cmp	r2, r3
 8006324:	d112      	bne.n	800634c <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	3b01      	subs	r3, #1
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	221c      	movs	r2, #28
 8006336:	4013      	ands	r3, r2
 8006338:	2210      	movs	r2, #16
 800633a:	4252      	negs	r2, r2
 800633c:	409a      	lsls	r2, r3
 800633e:	0011      	movs	r1, r2
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2100      	movs	r1, #0
 8006352:	0018      	movs	r0, r3
 8006354:	f7ff fd52 	bl	8005dfc <LL_ADC_GetSamplingTimeCommonChannels>
 8006358:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800635e:	429a      	cmp	r2, r3
 8006360:	d10b      	bne.n	800637a <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800636c:	2203      	movs	r2, #3
 800636e:	4393      	bics	r3, r2
 8006370:	2201      	movs	r2, #1
 8006372:	431a      	orrs	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006378:	e01c      	b.n	80063b4 <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800637e:	2212      	movs	r2, #18
 8006380:	4393      	bics	r3, r2
 8006382:	2210      	movs	r2, #16
 8006384:	431a      	orrs	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800638e:	2201      	movs	r2, #1
 8006390:	431a      	orrs	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8006396:	231f      	movs	r3, #31
 8006398:	18fb      	adds	r3, r7, r3
 800639a:	2201      	movs	r2, #1
 800639c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800639e:	e009      	b.n	80063b4 <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063a4:	2210      	movs	r2, #16
 80063a6:	431a      	orrs	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80063ac:	231f      	movs	r3, #31
 80063ae:	18fb      	adds	r3, r7, r3
 80063b0:	2201      	movs	r2, #1
 80063b2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80063b4:	231f      	movs	r3, #31
 80063b6:	18fb      	adds	r3, r7, r3
 80063b8:	781b      	ldrb	r3, [r3, #0]
}
 80063ba:	0018      	movs	r0, r3
 80063bc:	46bd      	mov	sp, r7
 80063be:	b008      	add	sp, #32
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	46c0      	nop			@ (mov r8, r8)
 80063c4:	0800671d 	.word	0x0800671d
 80063c8:	0800672d 	.word	0x0800672d
 80063cc:	0800673d 	.word	0x0800673d
 80063d0:	0800674d 	.word	0x0800674d
 80063d4:	080071a5 	.word	0x080071a5
 80063d8:	080071b5 	.word	0x080071b5
 80063dc:	080071c5 	.word	0x080071c5
 80063e0:	08004add 	.word	0x08004add
 80063e4:	20000440 	.word	0x20000440
 80063e8:	00030d40 	.word	0x00030d40
 80063ec:	fffffefd 	.word	0xfffffefd
 80063f0:	ffde0201 	.word	0xffde0201
 80063f4:	1ffffc02 	.word	0x1ffffc02
 80063f8:	40012708 	.word	0x40012708
 80063fc:	ffc3ffff 	.word	0xffc3ffff
 8006400:	07ffff04 	.word	0x07ffff04

08006404 <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	607a      	str	r2, [r7, #4]
 800640e:	230b      	movs	r3, #11
 8006410:	18fb      	adds	r3, r7, r3
 8006412:	1c0a      	adds	r2, r1, #0
 8006414:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006416:	2317      	movs	r3, #23
 8006418:	18fb      	adds	r3, r7, r3
 800641a:	2200      	movs	r2, #0
 800641c:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d107      	bne.n	8006434 <HAL_ADC_RegisterCallback+0x30>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006428:	2210      	movs	r2, #16
 800642a:	431a      	orrs	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	65da      	str	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e06d      	b.n	8006510 <HAL_ADC_RegisterCallback+0x10c>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006438:	2201      	movs	r2, #1
 800643a:	4013      	ands	r3, r2
 800643c:	d03a      	beq.n	80064b4 <HAL_ADC_RegisterCallback+0xb0>
  {
    switch (CallbackID)
 800643e:	230b      	movs	r3, #11
 8006440:	18fb      	adds	r3, r7, r3
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	2b0a      	cmp	r3, #10
 8006446:	d82a      	bhi.n	800649e <HAL_ADC_RegisterCallback+0x9a>
 8006448:	009a      	lsls	r2, r3, #2
 800644a:	4b33      	ldr	r3, [pc, #204]	@ (8006518 <HAL_ADC_RegisterCallback+0x114>)
 800644c:	18d3      	adds	r3, r2, r3
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	469f      	mov	pc, r3
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006458:	e057      	b.n	800650a <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8006460:	e053      	b.n	800650a <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006468:	e04f      	b.n	800650a <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8006470:	e04b      	b.n	800650a <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006478:	e047      	b.n	800650a <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8006480:	e043      	b.n	800650a <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006488:	e03f      	b.n	800650a <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2180      	movs	r1, #128	@ 0x80
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	505a      	str	r2, [r3, r1]
        break;
 8006492:	e03a      	b.n	800650a <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2184      	movs	r1, #132	@ 0x84
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	505a      	str	r2, [r3, r1]
        break;
 800649c:	e035      	b.n	800650a <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064a2:	2210      	movs	r2, #16
 80064a4:	431a      	orrs	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 80064aa:	2317      	movs	r3, #23
 80064ac:	18fb      	adds	r3, r7, r3
 80064ae:	2201      	movs	r2, #1
 80064b0:	701a      	strb	r2, [r3, #0]
        break;
 80064b2:	e02a      	b.n	800650a <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d11c      	bne.n	80064f6 <HAL_ADC_RegisterCallback+0xf2>
  {
    switch (CallbackID)
 80064bc:	230b      	movs	r3, #11
 80064be:	18fb      	adds	r3, r7, r3
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b09      	cmp	r3, #9
 80064c4:	d002      	beq.n	80064cc <HAL_ADC_RegisterCallback+0xc8>
 80064c6:	2b0a      	cmp	r3, #10
 80064c8:	d005      	beq.n	80064d6 <HAL_ADC_RegisterCallback+0xd2>
 80064ca:	e009      	b.n	80064e0 <HAL_ADC_RegisterCallback+0xdc>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2180      	movs	r1, #128	@ 0x80
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	505a      	str	r2, [r3, r1]
        break;
 80064d4:	e019      	b.n	800650a <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2184      	movs	r1, #132	@ 0x84
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	505a      	str	r2, [r3, r1]
        break;
 80064de:	e014      	b.n	800650a <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064e4:	2210      	movs	r2, #16
 80064e6:	431a      	orrs	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 80064ec:	2317      	movs	r3, #23
 80064ee:	18fb      	adds	r3, r7, r3
 80064f0:	2201      	movs	r2, #1
 80064f2:	701a      	strb	r2, [r3, #0]
        break;
 80064f4:	e009      	b.n	800650a <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064fa:	2210      	movs	r2, #16
 80064fc:	431a      	orrs	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Return error status */
    status =  HAL_ERROR;
 8006502:	2317      	movs	r3, #23
 8006504:	18fb      	adds	r3, r7, r3
 8006506:	2201      	movs	r2, #1
 8006508:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800650a:	2317      	movs	r3, #23
 800650c:	18fb      	adds	r3, r7, r3
 800650e:	781b      	ldrb	r3, [r3, #0]
}
 8006510:	0018      	movs	r0, r3
 8006512:	46bd      	mov	sp, r7
 8006514:	b006      	add	sp, #24
 8006516:	bd80      	pop	{r7, pc}
 8006518:	0800dc9c 	.word	0x0800dc9c

0800651c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800651c:	b5b0      	push	{r4, r5, r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	0018      	movs	r0, r3
 800652e:	f7ff fd7f 	bl	8006030 <LL_ADC_REG_IsConversionOngoing>
 8006532:	1e03      	subs	r3, r0, #0
 8006534:	d16c      	bne.n	8006610 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2254      	movs	r2, #84	@ 0x54
 800653a:	5c9b      	ldrb	r3, [r3, r2]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d101      	bne.n	8006544 <HAL_ADC_Start_DMA+0x28>
 8006540:	2302      	movs	r3, #2
 8006542:	e06c      	b.n	800661e <HAL_ADC_Start_DMA+0x102>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2254      	movs	r2, #84	@ 0x54
 8006548:	2101      	movs	r1, #1
 800654a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	2201      	movs	r2, #1
 8006554:	4013      	ands	r3, r2
 8006556:	d113      	bne.n	8006580 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	0018      	movs	r0, r3
 800655e:	f7ff fd21 	bl	8005fa4 <LL_ADC_IsEnabled>
 8006562:	1e03      	subs	r3, r0, #0
 8006564:	d004      	beq.n	8006570 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	0018      	movs	r0, r3
 800656c:	f7ff fd08 	bl	8005f80 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2101      	movs	r1, #1
 800657c:	430a      	orrs	r2, r1
 800657e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006580:	2517      	movs	r5, #23
 8006582:	197c      	adds	r4, r7, r5
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	0018      	movs	r0, r3
 8006588:	f000 fb02 	bl	8006b90 <ADC_Enable>
 800658c:	0003      	movs	r3, r0
 800658e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006590:	002c      	movs	r4, r5
 8006592:	193b      	adds	r3, r7, r4
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d13e      	bne.n	8006618 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800659e:	4a22      	ldr	r2, [pc, #136]	@ (8006628 <HAL_ADC_Start_DMA+0x10c>)
 80065a0:	4013      	ands	r3, r2
 80065a2:	2280      	movs	r2, #128	@ 0x80
 80065a4:	0052      	lsls	r2, r2, #1
 80065a6:	431a      	orrs	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065b6:	4a1d      	ldr	r2, [pc, #116]	@ (800662c <HAL_ADC_Start_DMA+0x110>)
 80065b8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065be:	4a1c      	ldr	r2, [pc, #112]	@ (8006630 <HAL_ADC_Start_DMA+0x114>)
 80065c0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065c6:	4a1b      	ldr	r2, [pc, #108]	@ (8006634 <HAL_ADC_Start_DMA+0x118>)
 80065c8:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	221c      	movs	r2, #28
 80065d0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2254      	movs	r2, #84	@ 0x54
 80065d6:	2100      	movs	r1, #0
 80065d8:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2110      	movs	r1, #16
 80065e6:	430a      	orrs	r2, r1
 80065e8:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3340      	adds	r3, #64	@ 0x40
 80065f4:	0019      	movs	r1, r3
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	193c      	adds	r4, r7, r4
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f000 ff84 	bl	8007508 <HAL_DMA_Start_IT>
 8006600:	0003      	movs	r3, r0
 8006602:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	0018      	movs	r0, r3
 800660a:	f7ff fced 	bl	8005fe8 <LL_ADC_REG_StartConversion>
 800660e:	e003      	b.n	8006618 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006610:	2317      	movs	r3, #23
 8006612:	18fb      	adds	r3, r7, r3
 8006614:	2202      	movs	r2, #2
 8006616:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8006618:	2317      	movs	r3, #23
 800661a:	18fb      	adds	r3, r7, r3
 800661c:	781b      	ldrb	r3, [r3, #0]
}
 800661e:	0018      	movs	r0, r3
 8006620:	46bd      	mov	sp, r7
 8006622:	b006      	add	sp, #24
 8006624:	bdb0      	pop	{r4, r5, r7, pc}
 8006626:	46c0      	nop			@ (mov r8, r8)
 8006628:	fffff0fe 	.word	0xfffff0fe
 800662c:	08006d59 	.word	0x08006d59
 8006630:	08006e25 	.word	0x08006e25
 8006634:	08006e45 	.word	0x08006e45

08006638 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006638:	b5b0      	push	{r4, r5, r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2254      	movs	r2, #84	@ 0x54
 8006644:	5c9b      	ldrb	r3, [r3, r2]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d101      	bne.n	800664e <HAL_ADC_Stop_DMA+0x16>
 800664a:	2302      	movs	r3, #2
 800664c:	e05f      	b.n	800670e <HAL_ADC_Stop_DMA+0xd6>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2254      	movs	r2, #84	@ 0x54
 8006652:	2101      	movs	r1, #1
 8006654:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8006656:	250f      	movs	r5, #15
 8006658:	197c      	adds	r4, r7, r5
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	0018      	movs	r0, r3
 800665e:	f000 fa55 	bl	8006b0c <ADC_ConversionStop>
 8006662:	0003      	movs	r3, r0
 8006664:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006666:	0029      	movs	r1, r5
 8006668:	187b      	adds	r3, r7, r1
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d147      	bne.n	8006700 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006674:	2225      	movs	r2, #37	@ 0x25
 8006676:	5c9b      	ldrb	r3, [r3, r2]
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b02      	cmp	r3, #2
 800667c:	d112      	bne.n	80066a4 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006682:	000d      	movs	r5, r1
 8006684:	187c      	adds	r4, r7, r1
 8006686:	0018      	movs	r0, r3
 8006688:	f000 ffc4 	bl	8007614 <HAL_DMA_Abort>
 800668c:	0003      	movs	r3, r0
 800668e:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006690:	197b      	adds	r3, r7, r5
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d005      	beq.n	80066a4 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800669c:	2240      	movs	r2, #64	@ 0x40
 800669e:	431a      	orrs	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2110      	movs	r1, #16
 80066b0:	438a      	bics	r2, r1
 80066b2:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80066b4:	220f      	movs	r2, #15
 80066b6:	18bb      	adds	r3, r7, r2
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d107      	bne.n	80066ce <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80066be:	18bc      	adds	r4, r7, r2
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	0018      	movs	r0, r3
 80066c4:	f000 faea 	bl	8006c9c <ADC_Disable>
 80066c8:	0003      	movs	r3, r0
 80066ca:	7023      	strb	r3, [r4, #0]
 80066cc:	e003      	b.n	80066d6 <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	0018      	movs	r0, r3
 80066d2:	f000 fae3 	bl	8006c9c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80066d6:	230f      	movs	r3, #15
 80066d8:	18fb      	adds	r3, r7, r3
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d107      	bne.n	80066f0 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066e4:	4a0c      	ldr	r2, [pc, #48]	@ (8006718 <HAL_ADC_Stop_DMA+0xe0>)
 80066e6:	4013      	ands	r3, r2
 80066e8:	2201      	movs	r2, #1
 80066ea:	431a      	orrs	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2101      	movs	r1, #1
 80066fc:	438a      	bics	r2, r1
 80066fe:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2254      	movs	r2, #84	@ 0x54
 8006704:	2100      	movs	r1, #0
 8006706:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006708:	230f      	movs	r3, #15
 800670a:	18fb      	adds	r3, r7, r3
 800670c:	781b      	ldrb	r3, [r3, #0]
}
 800670e:	0018      	movs	r0, r3
 8006710:	46bd      	mov	sp, r7
 8006712:	b004      	add	sp, #16
 8006714:	bdb0      	pop	{r4, r5, r7, pc}
 8006716:	46c0      	nop			@ (mov r8, r8)
 8006718:	fffffefe 	.word	0xfffffefe

0800671c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006724:	46c0      	nop			@ (mov r8, r8)
 8006726:	46bd      	mov	sp, r7
 8006728:	b002      	add	sp, #8
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006734:	46c0      	nop			@ (mov r8, r8)
 8006736:	46bd      	mov	sp, r7
 8006738:	b002      	add	sp, #8
 800673a:	bd80      	pop	{r7, pc}

0800673c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006744:	46c0      	nop			@ (mov r8, r8)
 8006746:	46bd      	mov	sp, r7
 8006748:	b002      	add	sp, #8
 800674a:	bd80      	pop	{r7, pc}

0800674c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006754:	46c0      	nop			@ (mov r8, r8)
 8006756:	46bd      	mov	sp, r7
 8006758:	b002      	add	sp, #8
 800675a:	bd80      	pop	{r7, pc}

0800675c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006766:	2317      	movs	r3, #23
 8006768:	18fb      	adds	r3, r7, r3
 800676a:	2200      	movs	r2, #0
 800676c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800676e:	2300      	movs	r3, #0
 8006770:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2254      	movs	r2, #84	@ 0x54
 8006776:	5c9b      	ldrb	r3, [r3, r2]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_ADC_ConfigChannel+0x24>
 800677c:	2302      	movs	r3, #2
 800677e:	e1c0      	b.n	8006b02 <HAL_ADC_ConfigChannel+0x3a6>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2254      	movs	r2, #84	@ 0x54
 8006784:	2101      	movs	r1, #1
 8006786:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	0018      	movs	r0, r3
 800678e:	f7ff fc4f 	bl	8006030 <LL_ADC_REG_IsConversionOngoing>
 8006792:	1e03      	subs	r3, r0, #0
 8006794:	d000      	beq.n	8006798 <HAL_ADC_ConfigChannel+0x3c>
 8006796:	e1a3      	b.n	8006ae0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	2b02      	cmp	r3, #2
 800679e:	d100      	bne.n	80067a2 <HAL_ADC_ConfigChannel+0x46>
 80067a0:	e143      	b.n	8006a2a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	691a      	ldr	r2, [r3, #16]
 80067a6:	2380      	movs	r3, #128	@ 0x80
 80067a8:	061b      	lsls	r3, r3, #24
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d004      	beq.n	80067b8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80067b2:	4ac1      	ldr	r2, [pc, #772]	@ (8006ab8 <HAL_ADC_ConfigChannel+0x35c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d108      	bne.n	80067ca <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	0019      	movs	r1, r3
 80067c2:	0010      	movs	r0, r2
 80067c4:	f7ff fb62 	bl	8005e8c <LL_ADC_REG_SetSequencerChAdd>
 80067c8:	e0c9      	b.n	800695e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	211f      	movs	r1, #31
 80067d4:	400b      	ands	r3, r1
 80067d6:	210f      	movs	r1, #15
 80067d8:	4099      	lsls	r1, r3
 80067da:	000b      	movs	r3, r1
 80067dc:	43db      	mvns	r3, r3
 80067de:	4013      	ands	r3, r2
 80067e0:	0019      	movs	r1, r3
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	035b      	lsls	r3, r3, #13
 80067e8:	0b5b      	lsrs	r3, r3, #13
 80067ea:	d105      	bne.n	80067f8 <HAL_ADC_ConfigChannel+0x9c>
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	0e9b      	lsrs	r3, r3, #26
 80067f2:	221f      	movs	r2, #31
 80067f4:	4013      	ands	r3, r2
 80067f6:	e098      	b.n	800692a <HAL_ADC_ConfigChannel+0x1ce>
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2201      	movs	r2, #1
 80067fe:	4013      	ands	r3, r2
 8006800:	d000      	beq.n	8006804 <HAL_ADC_ConfigChannel+0xa8>
 8006802:	e091      	b.n	8006928 <HAL_ADC_ConfigChannel+0x1cc>
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2202      	movs	r2, #2
 800680a:	4013      	ands	r3, r2
 800680c:	d000      	beq.n	8006810 <HAL_ADC_ConfigChannel+0xb4>
 800680e:	e089      	b.n	8006924 <HAL_ADC_ConfigChannel+0x1c8>
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2204      	movs	r2, #4
 8006816:	4013      	ands	r3, r2
 8006818:	d000      	beq.n	800681c <HAL_ADC_ConfigChannel+0xc0>
 800681a:	e081      	b.n	8006920 <HAL_ADC_ConfigChannel+0x1c4>
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2208      	movs	r2, #8
 8006822:	4013      	ands	r3, r2
 8006824:	d000      	beq.n	8006828 <HAL_ADC_ConfigChannel+0xcc>
 8006826:	e079      	b.n	800691c <HAL_ADC_ConfigChannel+0x1c0>
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2210      	movs	r2, #16
 800682e:	4013      	ands	r3, r2
 8006830:	d000      	beq.n	8006834 <HAL_ADC_ConfigChannel+0xd8>
 8006832:	e071      	b.n	8006918 <HAL_ADC_ConfigChannel+0x1bc>
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2220      	movs	r2, #32
 800683a:	4013      	ands	r3, r2
 800683c:	d000      	beq.n	8006840 <HAL_ADC_ConfigChannel+0xe4>
 800683e:	e069      	b.n	8006914 <HAL_ADC_ConfigChannel+0x1b8>
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2240      	movs	r2, #64	@ 0x40
 8006846:	4013      	ands	r3, r2
 8006848:	d000      	beq.n	800684c <HAL_ADC_ConfigChannel+0xf0>
 800684a:	e061      	b.n	8006910 <HAL_ADC_ConfigChannel+0x1b4>
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2280      	movs	r2, #128	@ 0x80
 8006852:	4013      	ands	r3, r2
 8006854:	d000      	beq.n	8006858 <HAL_ADC_ConfigChannel+0xfc>
 8006856:	e059      	b.n	800690c <HAL_ADC_ConfigChannel+0x1b0>
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	2380      	movs	r3, #128	@ 0x80
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	4013      	ands	r3, r2
 8006862:	d151      	bne.n	8006908 <HAL_ADC_ConfigChannel+0x1ac>
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	2380      	movs	r3, #128	@ 0x80
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4013      	ands	r3, r2
 800686e:	d149      	bne.n	8006904 <HAL_ADC_ConfigChannel+0x1a8>
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	2380      	movs	r3, #128	@ 0x80
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	4013      	ands	r3, r2
 800687a:	d141      	bne.n	8006900 <HAL_ADC_ConfigChannel+0x1a4>
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	2380      	movs	r3, #128	@ 0x80
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	4013      	ands	r3, r2
 8006886:	d139      	bne.n	80068fc <HAL_ADC_ConfigChannel+0x1a0>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	2380      	movs	r3, #128	@ 0x80
 800688e:	015b      	lsls	r3, r3, #5
 8006890:	4013      	ands	r3, r2
 8006892:	d131      	bne.n	80068f8 <HAL_ADC_ConfigChannel+0x19c>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	2380      	movs	r3, #128	@ 0x80
 800689a:	019b      	lsls	r3, r3, #6
 800689c:	4013      	ands	r3, r2
 800689e:	d129      	bne.n	80068f4 <HAL_ADC_ConfigChannel+0x198>
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	2380      	movs	r3, #128	@ 0x80
 80068a6:	01db      	lsls	r3, r3, #7
 80068a8:	4013      	ands	r3, r2
 80068aa:	d121      	bne.n	80068f0 <HAL_ADC_ConfigChannel+0x194>
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	2380      	movs	r3, #128	@ 0x80
 80068b2:	021b      	lsls	r3, r3, #8
 80068b4:	4013      	ands	r3, r2
 80068b6:	d119      	bne.n	80068ec <HAL_ADC_ConfigChannel+0x190>
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	2380      	movs	r3, #128	@ 0x80
 80068be:	025b      	lsls	r3, r3, #9
 80068c0:	4013      	ands	r3, r2
 80068c2:	d111      	bne.n	80068e8 <HAL_ADC_ConfigChannel+0x18c>
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	2380      	movs	r3, #128	@ 0x80
 80068ca:	029b      	lsls	r3, r3, #10
 80068cc:	4013      	ands	r3, r2
 80068ce:	d109      	bne.n	80068e4 <HAL_ADC_ConfigChannel+0x188>
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	2380      	movs	r3, #128	@ 0x80
 80068d6:	02db      	lsls	r3, r3, #11
 80068d8:	4013      	ands	r3, r2
 80068da:	d001      	beq.n	80068e0 <HAL_ADC_ConfigChannel+0x184>
 80068dc:	2312      	movs	r3, #18
 80068de:	e024      	b.n	800692a <HAL_ADC_ConfigChannel+0x1ce>
 80068e0:	2300      	movs	r3, #0
 80068e2:	e022      	b.n	800692a <HAL_ADC_ConfigChannel+0x1ce>
 80068e4:	2311      	movs	r3, #17
 80068e6:	e020      	b.n	800692a <HAL_ADC_ConfigChannel+0x1ce>
 80068e8:	2310      	movs	r3, #16
 80068ea:	e01e      	b.n	800692a <HAL_ADC_ConfigChannel+0x1ce>
 80068ec:	230f      	movs	r3, #15
 80068ee:	e01c      	b.n	800692a <HAL_ADC_ConfigChannel+0x1ce>
 80068f0:	230e      	movs	r3, #14
 80068f2:	e01a      	b.n	800692a <HAL_ADC_ConfigChannel+0x1ce>
 80068f4:	230d      	movs	r3, #13
 80068f6:	e018      	b.n	800692a <HAL_ADC_ConfigChannel+0x1ce>
 80068f8:	230c      	movs	r3, #12
 80068fa:	e016      	b.n	800692a <HAL_ADC_ConfigChannel+0x1ce>
 80068fc:	230b      	movs	r3, #11
 80068fe:	e014      	b.n	800692a <HAL_ADC_ConfigChannel+0x1ce>
 8006900:	230a      	movs	r3, #10
 8006902:	e012      	b.n	800692a <HAL_ADC_ConfigChannel+0x1ce>
 8006904:	2309      	movs	r3, #9
 8006906:	e010      	b.n	800692a <HAL_ADC_ConfigChannel+0x1ce>
 8006908:	2308      	movs	r3, #8
 800690a:	e00e      	b.n	800692a <HAL_ADC_ConfigChannel+0x1ce>
 800690c:	2307      	movs	r3, #7
 800690e:	e00c      	b.n	800692a <HAL_ADC_ConfigChannel+0x1ce>
 8006910:	2306      	movs	r3, #6
 8006912:	e00a      	b.n	800692a <HAL_ADC_ConfigChannel+0x1ce>
 8006914:	2305      	movs	r3, #5
 8006916:	e008      	b.n	800692a <HAL_ADC_ConfigChannel+0x1ce>
 8006918:	2304      	movs	r3, #4
 800691a:	e006      	b.n	800692a <HAL_ADC_ConfigChannel+0x1ce>
 800691c:	2303      	movs	r3, #3
 800691e:	e004      	b.n	800692a <HAL_ADC_ConfigChannel+0x1ce>
 8006920:	2302      	movs	r3, #2
 8006922:	e002      	b.n	800692a <HAL_ADC_ConfigChannel+0x1ce>
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <HAL_ADC_ConfigChannel+0x1ce>
 8006928:	2300      	movs	r3, #0
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	6852      	ldr	r2, [r2, #4]
 800692e:	201f      	movs	r0, #31
 8006930:	4002      	ands	r2, r0
 8006932:	4093      	lsls	r3, r2
 8006934:	000a      	movs	r2, r1
 8006936:	431a      	orrs	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	089b      	lsrs	r3, r3, #2
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	429a      	cmp	r2, r3
 800694a:	d808      	bhi.n	800695e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6818      	ldr	r0, [r3, #0]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	6859      	ldr	r1, [r3, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	001a      	movs	r2, r3
 800695a:	f7ff fa77 	bl	8005e4c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6818      	ldr	r0, [r3, #0]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	6819      	ldr	r1, [r3, #0]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	001a      	movs	r2, r3
 800696c:	f7ff fab2 	bl	8005ed4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	db00      	blt.n	800697a <HAL_ADC_ConfigChannel+0x21e>
 8006978:	e0bc      	b.n	8006af4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800697a:	4b50      	ldr	r3, [pc, #320]	@ (8006abc <HAL_ADC_ConfigChannel+0x360>)
 800697c:	0018      	movs	r0, r3
 800697e:	f7ff fa13 	bl	8005da8 <LL_ADC_GetCommonPathInternalCh>
 8006982:	0003      	movs	r3, r0
 8006984:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a4d      	ldr	r2, [pc, #308]	@ (8006ac0 <HAL_ADC_ConfigChannel+0x364>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d122      	bne.n	80069d6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	2380      	movs	r3, #128	@ 0x80
 8006994:	041b      	lsls	r3, r3, #16
 8006996:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006998:	d11d      	bne.n	80069d6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	2280      	movs	r2, #128	@ 0x80
 800699e:	0412      	lsls	r2, r2, #16
 80069a0:	4313      	orrs	r3, r2
 80069a2:	4a46      	ldr	r2, [pc, #280]	@ (8006abc <HAL_ADC_ConfigChannel+0x360>)
 80069a4:	0019      	movs	r1, r3
 80069a6:	0010      	movs	r0, r2
 80069a8:	f7ff f9ea 	bl	8005d80 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80069ac:	4b45      	ldr	r3, [pc, #276]	@ (8006ac4 <HAL_ADC_ConfigChannel+0x368>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4945      	ldr	r1, [pc, #276]	@ (8006ac8 <HAL_ADC_ConfigChannel+0x36c>)
 80069b2:	0018      	movs	r0, r3
 80069b4:	f7f9 fba8 	bl	8000108 <__udivsi3>
 80069b8:	0003      	movs	r3, r0
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	0013      	movs	r3, r2
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	189b      	adds	r3, r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80069c6:	e002      	b.n	80069ce <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1f9      	bne.n	80069c8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80069d4:	e08e      	b.n	8006af4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a3c      	ldr	r2, [pc, #240]	@ (8006acc <HAL_ADC_ConfigChannel+0x370>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d10e      	bne.n	80069fe <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	2380      	movs	r3, #128	@ 0x80
 80069e4:	045b      	lsls	r3, r3, #17
 80069e6:	4013      	ands	r3, r2
 80069e8:	d109      	bne.n	80069fe <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	2280      	movs	r2, #128	@ 0x80
 80069ee:	0452      	lsls	r2, r2, #17
 80069f0:	4313      	orrs	r3, r2
 80069f2:	4a32      	ldr	r2, [pc, #200]	@ (8006abc <HAL_ADC_ConfigChannel+0x360>)
 80069f4:	0019      	movs	r1, r3
 80069f6:	0010      	movs	r0, r2
 80069f8:	f7ff f9c2 	bl	8005d80 <LL_ADC_SetCommonPathInternalCh>
 80069fc:	e07a      	b.n	8006af4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a33      	ldr	r2, [pc, #204]	@ (8006ad0 <HAL_ADC_ConfigChannel+0x374>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d000      	beq.n	8006a0a <HAL_ADC_ConfigChannel+0x2ae>
 8006a08:	e074      	b.n	8006af4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	2380      	movs	r3, #128	@ 0x80
 8006a0e:	03db      	lsls	r3, r3, #15
 8006a10:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006a12:	d000      	beq.n	8006a16 <HAL_ADC_ConfigChannel+0x2ba>
 8006a14:	e06e      	b.n	8006af4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	2280      	movs	r2, #128	@ 0x80
 8006a1a:	03d2      	lsls	r2, r2, #15
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	4a27      	ldr	r2, [pc, #156]	@ (8006abc <HAL_ADC_ConfigChannel+0x360>)
 8006a20:	0019      	movs	r1, r3
 8006a22:	0010      	movs	r0, r2
 8006a24:	f7ff f9ac 	bl	8005d80 <LL_ADC_SetCommonPathInternalCh>
 8006a28:	e064      	b.n	8006af4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691a      	ldr	r2, [r3, #16]
 8006a2e:	2380      	movs	r3, #128	@ 0x80
 8006a30:	061b      	lsls	r3, r3, #24
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d004      	beq.n	8006a40 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006a3a:	4a1f      	ldr	r2, [pc, #124]	@ (8006ab8 <HAL_ADC_ConfigChannel+0x35c>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d107      	bne.n	8006a50 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	0019      	movs	r1, r3
 8006a4a:	0010      	movs	r0, r2
 8006a4c:	f7ff fa2f 	bl	8005eae <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	da4d      	bge.n	8006af4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006a58:	4b18      	ldr	r3, [pc, #96]	@ (8006abc <HAL_ADC_ConfigChannel+0x360>)
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f7ff f9a4 	bl	8005da8 <LL_ADC_GetCommonPathInternalCh>
 8006a60:	0003      	movs	r3, r0
 8006a62:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a15      	ldr	r2, [pc, #84]	@ (8006ac0 <HAL_ADC_ConfigChannel+0x364>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d108      	bne.n	8006a80 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	4a18      	ldr	r2, [pc, #96]	@ (8006ad4 <HAL_ADC_ConfigChannel+0x378>)
 8006a72:	4013      	ands	r3, r2
 8006a74:	4a11      	ldr	r2, [pc, #68]	@ (8006abc <HAL_ADC_ConfigChannel+0x360>)
 8006a76:	0019      	movs	r1, r3
 8006a78:	0010      	movs	r0, r2
 8006a7a:	f7ff f981 	bl	8005d80 <LL_ADC_SetCommonPathInternalCh>
 8006a7e:	e039      	b.n	8006af4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a11      	ldr	r2, [pc, #68]	@ (8006acc <HAL_ADC_ConfigChannel+0x370>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d108      	bne.n	8006a9c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	4a12      	ldr	r2, [pc, #72]	@ (8006ad8 <HAL_ADC_ConfigChannel+0x37c>)
 8006a8e:	4013      	ands	r3, r2
 8006a90:	4a0a      	ldr	r2, [pc, #40]	@ (8006abc <HAL_ADC_ConfigChannel+0x360>)
 8006a92:	0019      	movs	r1, r3
 8006a94:	0010      	movs	r0, r2
 8006a96:	f7ff f973 	bl	8005d80 <LL_ADC_SetCommonPathInternalCh>
 8006a9a:	e02b      	b.n	8006af4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8006ad0 <HAL_ADC_ConfigChannel+0x374>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d126      	bne.n	8006af4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	4a0c      	ldr	r2, [pc, #48]	@ (8006adc <HAL_ADC_ConfigChannel+0x380>)
 8006aaa:	4013      	ands	r3, r2
 8006aac:	4a03      	ldr	r2, [pc, #12]	@ (8006abc <HAL_ADC_ConfigChannel+0x360>)
 8006aae:	0019      	movs	r1, r3
 8006ab0:	0010      	movs	r0, r2
 8006ab2:	f7ff f965 	bl	8005d80 <LL_ADC_SetCommonPathInternalCh>
 8006ab6:	e01d      	b.n	8006af4 <HAL_ADC_ConfigChannel+0x398>
 8006ab8:	80000004 	.word	0x80000004
 8006abc:	40012708 	.word	0x40012708
 8006ac0:	b0001000 	.word	0xb0001000
 8006ac4:	20000440 	.word	0x20000440
 8006ac8:	00030d40 	.word	0x00030d40
 8006acc:	b8004000 	.word	0xb8004000
 8006ad0:	b4002000 	.word	0xb4002000
 8006ad4:	ff7fffff 	.word	0xff7fffff
 8006ad8:	feffffff 	.word	0xfeffffff
 8006adc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006aec:	2317      	movs	r3, #23
 8006aee:	18fb      	adds	r3, r7, r3
 8006af0:	2201      	movs	r2, #1
 8006af2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2254      	movs	r2, #84	@ 0x54
 8006af8:	2100      	movs	r1, #0
 8006afa:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006afc:	2317      	movs	r3, #23
 8006afe:	18fb      	adds	r3, r7, r3
 8006b00:	781b      	ldrb	r3, [r3, #0]
}
 8006b02:	0018      	movs	r0, r3
 8006b04:	46bd      	mov	sp, r7
 8006b06:	b006      	add	sp, #24
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	46c0      	nop			@ (mov r8, r8)

08006b0c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	0018      	movs	r0, r3
 8006b1a:	f7ff fa89 	bl	8006030 <LL_ADC_REG_IsConversionOngoing>
 8006b1e:	1e03      	subs	r3, r0, #0
 8006b20:	d031      	beq.n	8006b86 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	0018      	movs	r0, r3
 8006b28:	f7ff fa4d 	bl	8005fc6 <LL_ADC_IsDisableOngoing>
 8006b2c:	1e03      	subs	r3, r0, #0
 8006b2e:	d104      	bne.n	8006b3a <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	0018      	movs	r0, r3
 8006b36:	f7ff fa69 	bl	800600c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006b3a:	f7ff f917 	bl	8005d6c <HAL_GetTick>
 8006b3e:	0003      	movs	r3, r0
 8006b40:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006b42:	e01a      	b.n	8006b7a <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006b44:	f7ff f912 	bl	8005d6c <HAL_GetTick>
 8006b48:	0002      	movs	r2, r0
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d913      	bls.n	8006b7a <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	2204      	movs	r2, #4
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	d00d      	beq.n	8006b7a <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b62:	2210      	movs	r2, #16
 8006b64:	431a      	orrs	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b6e:	2201      	movs	r2, #1
 8006b70:	431a      	orrs	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e006      	b.n	8006b88 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	2204      	movs	r2, #4
 8006b82:	4013      	ands	r3, r2
 8006b84:	d1de      	bne.n	8006b44 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	0018      	movs	r0, r3
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	b004      	add	sp, #16
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	f7ff f9ff 	bl	8005fa4 <LL_ADC_IsEnabled>
 8006ba6:	1e03      	subs	r3, r0, #0
 8006ba8:	d000      	beq.n	8006bac <ADC_Enable+0x1c>
 8006baa:	e069      	b.n	8006c80 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	4a36      	ldr	r2, [pc, #216]	@ (8006c8c <ADC_Enable+0xfc>)
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	d00d      	beq.n	8006bd4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bbc:	2210      	movs	r2, #16
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bc8:	2201      	movs	r2, #1
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e056      	b.n	8006c82 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	0018      	movs	r0, r3
 8006bda:	f7ff f9bf 	bl	8005f5c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8006bde:	4b2c      	ldr	r3, [pc, #176]	@ (8006c90 <ADC_Enable+0x100>)
 8006be0:	0018      	movs	r0, r3
 8006be2:	f7ff f8e1 	bl	8005da8 <LL_ADC_GetCommonPathInternalCh>
 8006be6:	0002      	movs	r2, r0
 8006be8:	2380      	movs	r3, #128	@ 0x80
 8006bea:	041b      	lsls	r3, r3, #16
 8006bec:	4013      	ands	r3, r2
 8006bee:	d00f      	beq.n	8006c10 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006bf0:	4b28      	ldr	r3, [pc, #160]	@ (8006c94 <ADC_Enable+0x104>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4928      	ldr	r1, [pc, #160]	@ (8006c98 <ADC_Enable+0x108>)
 8006bf6:	0018      	movs	r0, r3
 8006bf8:	f7f9 fa86 	bl	8000108 <__udivsi3>
 8006bfc:	0003      	movs	r3, r0
 8006bfe:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8006c00:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006c02:	e002      	b.n	8006c0a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	3b01      	subs	r3, #1
 8006c08:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1f9      	bne.n	8006c04 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	7e5b      	ldrb	r3, [r3, #25]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d033      	beq.n	8006c80 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006c18:	f7ff f8a8 	bl	8005d6c <HAL_GetTick>
 8006c1c:	0003      	movs	r3, r0
 8006c1e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006c20:	e027      	b.n	8006c72 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	0018      	movs	r0, r3
 8006c28:	f7ff f9bc 	bl	8005fa4 <LL_ADC_IsEnabled>
 8006c2c:	1e03      	subs	r3, r0, #0
 8006c2e:	d104      	bne.n	8006c3a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	0018      	movs	r0, r3
 8006c36:	f7ff f991 	bl	8005f5c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006c3a:	f7ff f897 	bl	8005d6c <HAL_GetTick>
 8006c3e:	0002      	movs	r2, r0
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d914      	bls.n	8006c72 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	4013      	ands	r3, r2
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d00d      	beq.n	8006c72 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c5a:	2210      	movs	r2, #16
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c66:	2201      	movs	r2, #1
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e007      	b.n	8006c82 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d1d0      	bne.n	8006c22 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	0018      	movs	r0, r3
 8006c84:	46bd      	mov	sp, r7
 8006c86:	b004      	add	sp, #16
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	46c0      	nop			@ (mov r8, r8)
 8006c8c:	80000017 	.word	0x80000017
 8006c90:	40012708 	.word	0x40012708
 8006c94:	20000440 	.word	0x20000440
 8006c98:	00030d40 	.word	0x00030d40

08006c9c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	0018      	movs	r0, r3
 8006caa:	f7ff f98c 	bl	8005fc6 <LL_ADC_IsDisableOngoing>
 8006cae:	0003      	movs	r3, r0
 8006cb0:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	0018      	movs	r0, r3
 8006cb8:	f7ff f974 	bl	8005fa4 <LL_ADC_IsEnabled>
 8006cbc:	1e03      	subs	r3, r0, #0
 8006cbe:	d046      	beq.n	8006d4e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d143      	bne.n	8006d4e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	2205      	movs	r2, #5
 8006cce:	4013      	ands	r3, r2
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d10d      	bne.n	8006cf0 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	0018      	movs	r0, r3
 8006cda:	f7ff f951 	bl	8005f80 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2203      	movs	r2, #3
 8006ce4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006ce6:	f7ff f841 	bl	8005d6c <HAL_GetTick>
 8006cea:	0003      	movs	r3, r0
 8006cec:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006cee:	e028      	b.n	8006d42 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cf4:	2210      	movs	r2, #16
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d00:	2201      	movs	r2, #1
 8006d02:	431a      	orrs	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e021      	b.n	8006d50 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006d0c:	f7ff f82e 	bl	8005d6c <HAL_GetTick>
 8006d10:	0002      	movs	r2, r0
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d913      	bls.n	8006d42 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	2201      	movs	r2, #1
 8006d22:	4013      	ands	r3, r2
 8006d24:	d00d      	beq.n	8006d42 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d2a:	2210      	movs	r2, #16
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d36:	2201      	movs	r2, #1
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e006      	b.n	8006d50 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	d1de      	bne.n	8006d0c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	0018      	movs	r0, r3
 8006d52:	46bd      	mov	sp, r7
 8006d54:	b004      	add	sp, #16
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d64:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d6a:	2250      	movs	r2, #80	@ 0x50
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	d142      	bne.n	8006df6 <ADC_DMAConvCplt+0x9e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d74:	2280      	movs	r2, #128	@ 0x80
 8006d76:	0092      	lsls	r2, r2, #2
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	0018      	movs	r0, r3
 8006d84:	f7ff f851 	bl	8005e2a <LL_ADC_REG_IsTriggerSourceSWStart>
 8006d88:	1e03      	subs	r3, r0, #0
 8006d8a:	d02e      	beq.n	8006dea <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	7e9b      	ldrb	r3, [r3, #26]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d12a      	bne.n	8006dea <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2208      	movs	r2, #8
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	2b08      	cmp	r3, #8
 8006da0:	d123      	bne.n	8006dea <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	0018      	movs	r0, r3
 8006da8:	f7ff f942 	bl	8006030 <LL_ADC_REG_IsConversionOngoing>
 8006dac:	1e03      	subs	r3, r0, #0
 8006dae:	d110      	bne.n	8006dd2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	210c      	movs	r1, #12
 8006dbc:	438a      	bics	r2, r1
 8006dbe:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dc4:	4a16      	ldr	r2, [pc, #88]	@ (8006e20 <ADC_DMAConvCplt+0xc8>)
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	2201      	movs	r2, #1
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	659a      	str	r2, [r3, #88]	@ 0x58
 8006dd0:	e00b      	b.n	8006dea <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006de2:	2201      	movs	r2, #1
 8006de4:	431a      	orrs	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	0010      	movs	r0, r2
 8006df2:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006df4:	e010      	b.n	8006e18 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dfa:	2210      	movs	r2, #16
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	d005      	beq.n	8006e0c <ADC_DMAConvCplt+0xb4>
      hadc->ErrorCallback(hadc);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	0010      	movs	r0, r2
 8006e08:	4798      	blx	r3
}
 8006e0a:	e005      	b.n	8006e18 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	0010      	movs	r0, r2
 8006e16:	4798      	blx	r3
}
 8006e18:	46c0      	nop			@ (mov r8, r8)
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	b004      	add	sp, #16
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	fffffefe 	.word	0xfffffefe

08006e24 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e30:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	0010      	movs	r0, r2
 8006e3a:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e3c:	46c0      	nop			@ (mov r8, r8)
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	b004      	add	sp, #16
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e50:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e56:	2240      	movs	r2, #64	@ 0x40
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e62:	2204      	movs	r2, #4
 8006e64:	431a      	orrs	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	0010      	movs	r0, r2
 8006e72:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e74:	46c0      	nop			@ (mov r8, r8)
 8006e76:	46bd      	mov	sp, r7
 8006e78:	b004      	add	sp, #16
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <LL_ADC_GetCommonClock>:
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	23f0      	movs	r3, #240	@ 0xf0
 8006e8a:	039b      	lsls	r3, r3, #14
 8006e8c:	4013      	ands	r3, r2
}
 8006e8e:	0018      	movs	r0, r3
 8006e90:	46bd      	mov	sp, r7
 8006e92:	b002      	add	sp, #8
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <LL_ADC_GetClock>:
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b082      	sub	sp, #8
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	0f9b      	lsrs	r3, r3, #30
 8006ea4:	079b      	lsls	r3, r3, #30
}
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	b002      	add	sp, #8
 8006eac:	bd80      	pop	{r7, pc}

08006eae <LL_ADC_SetCalibrationFactor>:
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b082      	sub	sp, #8
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	22b4      	movs	r2, #180	@ 0xb4
 8006ebc:	589b      	ldr	r3, [r3, r2]
 8006ebe:	227f      	movs	r2, #127	@ 0x7f
 8006ec0:	4393      	bics	r3, r2
 8006ec2:	001a      	movs	r2, r3
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	21b4      	movs	r1, #180	@ 0xb4
 8006ecc:	505a      	str	r2, [r3, r1]
}
 8006ece:	46c0      	nop			@ (mov r8, r8)
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	b002      	add	sp, #8
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <LL_ADC_GetCalibrationFactor>:
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b082      	sub	sp, #8
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	22b4      	movs	r2, #180	@ 0xb4
 8006ee2:	589b      	ldr	r3, [r3, r2]
 8006ee4:	227f      	movs	r2, #127	@ 0x7f
 8006ee6:	4013      	ands	r3, r2
}
 8006ee8:	0018      	movs	r0, r3
 8006eea:	46bd      	mov	sp, r7
 8006eec:	b002      	add	sp, #8
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <LL_ADC_Enable>:
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	4a04      	ldr	r2, [pc, #16]	@ (8006f10 <LL_ADC_Enable+0x20>)
 8006efe:	4013      	ands	r3, r2
 8006f00:	2201      	movs	r2, #1
 8006f02:	431a      	orrs	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	609a      	str	r2, [r3, #8]
}
 8006f08:	46c0      	nop			@ (mov r8, r8)
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	b002      	add	sp, #8
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	7fffffe8 	.word	0x7fffffe8

08006f14 <LL_ADC_Disable>:
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	4a04      	ldr	r2, [pc, #16]	@ (8006f34 <LL_ADC_Disable+0x20>)
 8006f22:	4013      	ands	r3, r2
 8006f24:	2202      	movs	r2, #2
 8006f26:	431a      	orrs	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	609a      	str	r2, [r3, #8]
}
 8006f2c:	46c0      	nop			@ (mov r8, r8)
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	b002      	add	sp, #8
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	7fffffe8 	.word	0x7fffffe8

08006f38 <LL_ADC_IsEnabled>:
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	2201      	movs	r2, #1
 8006f46:	4013      	ands	r3, r2
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d101      	bne.n	8006f50 <LL_ADC_IsEnabled+0x18>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e000      	b.n	8006f52 <LL_ADC_IsEnabled+0x1a>
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	0018      	movs	r0, r3
 8006f54:	46bd      	mov	sp, r7
 8006f56:	b002      	add	sp, #8
 8006f58:	bd80      	pop	{r7, pc}
	...

08006f5c <LL_ADC_StartCalibration>:
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	4a05      	ldr	r2, [pc, #20]	@ (8006f80 <LL_ADC_StartCalibration+0x24>)
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	2280      	movs	r2, #128	@ 0x80
 8006f6e:	0612      	lsls	r2, r2, #24
 8006f70:	431a      	orrs	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	609a      	str	r2, [r3, #8]
}
 8006f76:	46c0      	nop			@ (mov r8, r8)
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	b002      	add	sp, #8
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	46c0      	nop			@ (mov r8, r8)
 8006f80:	7fffffe8 	.word	0x7fffffe8

08006f84 <LL_ADC_IsCalibrationOnGoing>:
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	0fdb      	lsrs	r3, r3, #31
 8006f92:	07da      	lsls	r2, r3, #31
 8006f94:	2380      	movs	r3, #128	@ 0x80
 8006f96:	061b      	lsls	r3, r3, #24
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d101      	bne.n	8006fa0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e000      	b.n	8006fa2 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	0018      	movs	r0, r3
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	b002      	add	sp, #8
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8006fac:	b590      	push	{r4, r7, lr}
 8006fae:	b08b      	sub	sp, #44	@ 0x2c
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2254      	movs	r2, #84	@ 0x54
 8006fc0:	5c9b      	ldrb	r3, [r3, r2]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d101      	bne.n	8006fca <HAL_ADCEx_Calibration_Start+0x1e>
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	e0dd      	b.n	8007186 <HAL_ADCEx_Calibration_Start+0x1da>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2254      	movs	r2, #84	@ 0x54
 8006fce:	2101      	movs	r1, #1
 8006fd0:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006fd2:	231f      	movs	r3, #31
 8006fd4:	18fc      	adds	r4, r7, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	0018      	movs	r0, r3
 8006fda:	f7ff fe5f 	bl	8006c9c <ADC_Disable>
 8006fde:	0003      	movs	r3, r0
 8006fe0:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	0018      	movs	r0, r3
 8006fe8:	f7ff ffa6 	bl	8006f38 <LL_ADC_IsEnabled>
 8006fec:	1e03      	subs	r3, r0, #0
 8006fee:	d000      	beq.n	8006ff2 <HAL_ADCEx_Calibration_Start+0x46>
 8006ff0:	e0bc      	b.n	800716c <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ff6:	4a66      	ldr	r2, [pc, #408]	@ (8007190 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	4a62      	ldr	r2, [pc, #392]	@ (8007194 <HAL_ADCEx_Calibration_Start+0x1e8>)
 800700a:	4013      	ands	r3, r2
 800700c:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68da      	ldr	r2, [r3, #12]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	495f      	ldr	r1, [pc, #380]	@ (8007198 <HAL_ADCEx_Calibration_Start+0x1ec>)
 800701a:	400a      	ands	r2, r1
 800701c:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800701e:	2300      	movs	r3, #0
 8007020:	627b      	str	r3, [r7, #36]	@ 0x24
 8007022:	e02d      	b.n	8007080 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	0018      	movs	r0, r3
 800702a:	f7ff ff97 	bl	8006f5c <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800702e:	e014      	b.n	800705a <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	3301      	adds	r3, #1
 8007034:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4a58      	ldr	r2, [pc, #352]	@ (800719c <HAL_ADCEx_Calibration_Start+0x1f0>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d90d      	bls.n	800705a <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007042:	2212      	movs	r2, #18
 8007044:	4393      	bics	r3, r2
 8007046:	2210      	movs	r2, #16
 8007048:	431a      	orrs	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2254      	movs	r2, #84	@ 0x54
 8007052:	2100      	movs	r1, #0
 8007054:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e095      	b.n	8007186 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	0018      	movs	r0, r3
 8007060:	f7ff ff90 	bl	8006f84 <LL_ADC_IsCalibrationOnGoing>
 8007064:	1e03      	subs	r3, r0, #0
 8007066:	d1e3      	bne.n	8007030 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	0018      	movs	r0, r3
 800706e:	f7ff ff32 	bl	8006ed6 <LL_ADC_GetCalibrationFactor>
 8007072:	0002      	movs	r2, r0
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	189b      	adds	r3, r3, r2
 8007078:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800707a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707c:	3301      	adds	r3, #1
 800707e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007082:	2b07      	cmp	r3, #7
 8007084:	d9ce      	bls.n	8007024 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8007086:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007088:	6a38      	ldr	r0, [r7, #32]
 800708a:	f7f9 f83d 	bl	8000108 <__udivsi3>
 800708e:	0003      	movs	r3, r0
 8007090:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	0018      	movs	r0, r3
 8007098:	f7ff ff2a 	bl	8006ef0 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	0018      	movs	r0, r3
 80070a2:	f7ff fef8 	bl	8006e96 <LL_ADC_GetClock>
 80070a6:	1e03      	subs	r3, r0, #0
 80070a8:	d11b      	bne.n	80070e2 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80070aa:	4b3d      	ldr	r3, [pc, #244]	@ (80071a0 <HAL_ADCEx_Calibration_Start+0x1f4>)
 80070ac:	0018      	movs	r0, r3
 80070ae:	f7ff fee5 	bl	8006e7c <LL_ADC_GetCommonClock>
 80070b2:	0003      	movs	r3, r0
 80070b4:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	23e0      	movs	r3, #224	@ 0xe0
 80070ba:	035b      	lsls	r3, r3, #13
 80070bc:	429a      	cmp	r2, r3
 80070be:	d310      	bcc.n	80070e2 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	0c9b      	lsrs	r3, r3, #18
 80070c4:	3b03      	subs	r3, #3
 80070c6:	2201      	movs	r2, #1
 80070c8:	409a      	lsls	r2, r3
 80070ca:	0013      	movs	r3, r2
 80070cc:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	085b      	lsrs	r3, r3, #1
 80070d2:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 80070d4:	e002      	b.n	80070dc <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	3b01      	subs	r3, #1
 80070da:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1f9      	bne.n	80070d6 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6a3a      	ldr	r2, [r7, #32]
 80070e8:	0011      	movs	r1, r2
 80070ea:	0018      	movs	r0, r3
 80070ec:	f7ff fedf 	bl	8006eae <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	0018      	movs	r0, r3
 80070f6:	f7ff ff0d 	bl	8006f14 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80070fa:	f7fe fe37 	bl	8005d6c <HAL_GetTick>
 80070fe:	0003      	movs	r3, r0
 8007100:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007102:	e01b      	b.n	800713c <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007104:	f7fe fe32 	bl	8005d6c <HAL_GetTick>
 8007108:	0002      	movs	r2, r0
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b02      	cmp	r3, #2
 8007110:	d914      	bls.n	800713c <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	0018      	movs	r0, r3
 8007118:	f7ff ff0e 	bl	8006f38 <LL_ADC_IsEnabled>
 800711c:	1e03      	subs	r3, r0, #0
 800711e:	d00d      	beq.n	800713c <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007124:	2210      	movs	r2, #16
 8007126:	431a      	orrs	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007130:	2201      	movs	r2, #1
 8007132:	431a      	orrs	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e024      	b.n	8007186 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	0018      	movs	r0, r3
 8007142:	f7ff fef9 	bl	8006f38 <LL_ADC_IsEnabled>
 8007146:	1e03      	subs	r3, r0, #0
 8007148:	d1dc      	bne.n	8007104 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68d9      	ldr	r1, [r3, #12]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	430a      	orrs	r2, r1
 8007158:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800715e:	2203      	movs	r2, #3
 8007160:	4393      	bics	r3, r2
 8007162:	2201      	movs	r2, #1
 8007164:	431a      	orrs	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	659a      	str	r2, [r3, #88]	@ 0x58
 800716a:	e005      	b.n	8007178 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007170:	2210      	movs	r2, #16
 8007172:	431a      	orrs	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2254      	movs	r2, #84	@ 0x54
 800717c:	2100      	movs	r1, #0
 800717e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8007180:	231f      	movs	r3, #31
 8007182:	18fb      	adds	r3, r7, r3
 8007184:	781b      	ldrb	r3, [r3, #0]
}
 8007186:	0018      	movs	r0, r3
 8007188:	46bd      	mov	sp, r7
 800718a:	b00b      	add	sp, #44	@ 0x2c
 800718c:	bd90      	pop	{r4, r7, pc}
 800718e:	46c0      	nop			@ (mov r8, r8)
 8007190:	fffffefd 	.word	0xfffffefd
 8007194:	00008003 	.word	0x00008003
 8007198:	ffff7ffc 	.word	0xffff7ffc
 800719c:	0002f1ff 	.word	0x0002f1ff
 80071a0:	40012708 	.word	0x40012708

080071a4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80071ac:	46c0      	nop			@ (mov r8, r8)
 80071ae:	46bd      	mov	sp, r7
 80071b0:	b002      	add	sp, #8
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80071bc:	46c0      	nop			@ (mov r8, r8)
 80071be:	46bd      	mov	sp, r7
 80071c0:	b002      	add	sp, #8
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80071cc:	46c0      	nop			@ (mov r8, r8)
 80071ce:	46bd      	mov	sp, r7
 80071d0:	b002      	add	sp, #8
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	0002      	movs	r2, r0
 80071dc:	1dfb      	adds	r3, r7, #7
 80071de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80071e0:	1dfb      	adds	r3, r7, #7
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80071e6:	d809      	bhi.n	80071fc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071e8:	1dfb      	adds	r3, r7, #7
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	001a      	movs	r2, r3
 80071ee:	231f      	movs	r3, #31
 80071f0:	401a      	ands	r2, r3
 80071f2:	4b04      	ldr	r3, [pc, #16]	@ (8007204 <__NVIC_EnableIRQ+0x30>)
 80071f4:	2101      	movs	r1, #1
 80071f6:	4091      	lsls	r1, r2
 80071f8:	000a      	movs	r2, r1
 80071fa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80071fc:	46c0      	nop			@ (mov r8, r8)
 80071fe:	46bd      	mov	sp, r7
 8007200:	b002      	add	sp, #8
 8007202:	bd80      	pop	{r7, pc}
 8007204:	e000e100 	.word	0xe000e100

08007208 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	0002      	movs	r2, r0
 8007210:	1dfb      	adds	r3, r7, #7
 8007212:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007214:	1dfb      	adds	r3, r7, #7
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	2b7f      	cmp	r3, #127	@ 0x7f
 800721a:	d810      	bhi.n	800723e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800721c:	1dfb      	adds	r3, r7, #7
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	001a      	movs	r2, r3
 8007222:	231f      	movs	r3, #31
 8007224:	4013      	ands	r3, r2
 8007226:	4908      	ldr	r1, [pc, #32]	@ (8007248 <__NVIC_DisableIRQ+0x40>)
 8007228:	2201      	movs	r2, #1
 800722a:	409a      	lsls	r2, r3
 800722c:	0013      	movs	r3, r2
 800722e:	2280      	movs	r2, #128	@ 0x80
 8007230:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007232:	f3bf 8f4f 	dsb	sy
}
 8007236:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8007238:	f3bf 8f6f 	isb	sy
}
 800723c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800723e:	46c0      	nop			@ (mov r8, r8)
 8007240:	46bd      	mov	sp, r7
 8007242:	b002      	add	sp, #8
 8007244:	bd80      	pop	{r7, pc}
 8007246:	46c0      	nop			@ (mov r8, r8)
 8007248:	e000e100 	.word	0xe000e100

0800724c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800724c:	b590      	push	{r4, r7, lr}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	0002      	movs	r2, r0
 8007254:	6039      	str	r1, [r7, #0]
 8007256:	1dfb      	adds	r3, r7, #7
 8007258:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800725a:	1dfb      	adds	r3, r7, #7
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007260:	d828      	bhi.n	80072b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007262:	4a2f      	ldr	r2, [pc, #188]	@ (8007320 <__NVIC_SetPriority+0xd4>)
 8007264:	1dfb      	adds	r3, r7, #7
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	b25b      	sxtb	r3, r3
 800726a:	089b      	lsrs	r3, r3, #2
 800726c:	33c0      	adds	r3, #192	@ 0xc0
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	589b      	ldr	r3, [r3, r2]
 8007272:	1dfa      	adds	r2, r7, #7
 8007274:	7812      	ldrb	r2, [r2, #0]
 8007276:	0011      	movs	r1, r2
 8007278:	2203      	movs	r2, #3
 800727a:	400a      	ands	r2, r1
 800727c:	00d2      	lsls	r2, r2, #3
 800727e:	21ff      	movs	r1, #255	@ 0xff
 8007280:	4091      	lsls	r1, r2
 8007282:	000a      	movs	r2, r1
 8007284:	43d2      	mvns	r2, r2
 8007286:	401a      	ands	r2, r3
 8007288:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	019b      	lsls	r3, r3, #6
 800728e:	22ff      	movs	r2, #255	@ 0xff
 8007290:	401a      	ands	r2, r3
 8007292:	1dfb      	adds	r3, r7, #7
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	0018      	movs	r0, r3
 8007298:	2303      	movs	r3, #3
 800729a:	4003      	ands	r3, r0
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80072a0:	481f      	ldr	r0, [pc, #124]	@ (8007320 <__NVIC_SetPriority+0xd4>)
 80072a2:	1dfb      	adds	r3, r7, #7
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	b25b      	sxtb	r3, r3
 80072a8:	089b      	lsrs	r3, r3, #2
 80072aa:	430a      	orrs	r2, r1
 80072ac:	33c0      	adds	r3, #192	@ 0xc0
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80072b2:	e031      	b.n	8007318 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80072b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007324 <__NVIC_SetPriority+0xd8>)
 80072b6:	1dfb      	adds	r3, r7, #7
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	0019      	movs	r1, r3
 80072bc:	230f      	movs	r3, #15
 80072be:	400b      	ands	r3, r1
 80072c0:	3b08      	subs	r3, #8
 80072c2:	089b      	lsrs	r3, r3, #2
 80072c4:	3306      	adds	r3, #6
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	18d3      	adds	r3, r2, r3
 80072ca:	3304      	adds	r3, #4
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	1dfa      	adds	r2, r7, #7
 80072d0:	7812      	ldrb	r2, [r2, #0]
 80072d2:	0011      	movs	r1, r2
 80072d4:	2203      	movs	r2, #3
 80072d6:	400a      	ands	r2, r1
 80072d8:	00d2      	lsls	r2, r2, #3
 80072da:	21ff      	movs	r1, #255	@ 0xff
 80072dc:	4091      	lsls	r1, r2
 80072de:	000a      	movs	r2, r1
 80072e0:	43d2      	mvns	r2, r2
 80072e2:	401a      	ands	r2, r3
 80072e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	019b      	lsls	r3, r3, #6
 80072ea:	22ff      	movs	r2, #255	@ 0xff
 80072ec:	401a      	ands	r2, r3
 80072ee:	1dfb      	adds	r3, r7, #7
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	0018      	movs	r0, r3
 80072f4:	2303      	movs	r3, #3
 80072f6:	4003      	ands	r3, r0
 80072f8:	00db      	lsls	r3, r3, #3
 80072fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80072fc:	4809      	ldr	r0, [pc, #36]	@ (8007324 <__NVIC_SetPriority+0xd8>)
 80072fe:	1dfb      	adds	r3, r7, #7
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	001c      	movs	r4, r3
 8007304:	230f      	movs	r3, #15
 8007306:	4023      	ands	r3, r4
 8007308:	3b08      	subs	r3, #8
 800730a:	089b      	lsrs	r3, r3, #2
 800730c:	430a      	orrs	r2, r1
 800730e:	3306      	adds	r3, #6
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	18c3      	adds	r3, r0, r3
 8007314:	3304      	adds	r3, #4
 8007316:	601a      	str	r2, [r3, #0]
}
 8007318:	46c0      	nop			@ (mov r8, r8)
 800731a:	46bd      	mov	sp, r7
 800731c:	b003      	add	sp, #12
 800731e:	bd90      	pop	{r4, r7, pc}
 8007320:	e000e100 	.word	0xe000e100
 8007324:	e000ed00 	.word	0xe000ed00

08007328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	1e5a      	subs	r2, r3, #1
 8007334:	2380      	movs	r3, #128	@ 0x80
 8007336:	045b      	lsls	r3, r3, #17
 8007338:	429a      	cmp	r2, r3
 800733a:	d301      	bcc.n	8007340 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800733c:	2301      	movs	r3, #1
 800733e:	e010      	b.n	8007362 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007340:	4b0a      	ldr	r3, [pc, #40]	@ (800736c <SysTick_Config+0x44>)
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	3a01      	subs	r2, #1
 8007346:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007348:	2301      	movs	r3, #1
 800734a:	425b      	negs	r3, r3
 800734c:	2103      	movs	r1, #3
 800734e:	0018      	movs	r0, r3
 8007350:	f7ff ff7c 	bl	800724c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007354:	4b05      	ldr	r3, [pc, #20]	@ (800736c <SysTick_Config+0x44>)
 8007356:	2200      	movs	r2, #0
 8007358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800735a:	4b04      	ldr	r3, [pc, #16]	@ (800736c <SysTick_Config+0x44>)
 800735c:	2207      	movs	r2, #7
 800735e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007360:	2300      	movs	r3, #0
}
 8007362:	0018      	movs	r0, r3
 8007364:	46bd      	mov	sp, r7
 8007366:	b002      	add	sp, #8
 8007368:	bd80      	pop	{r7, pc}
 800736a:	46c0      	nop			@ (mov r8, r8)
 800736c:	e000e010 	.word	0xe000e010

08007370 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	607a      	str	r2, [r7, #4]
 800737a:	210f      	movs	r1, #15
 800737c:	187b      	adds	r3, r7, r1
 800737e:	1c02      	adds	r2, r0, #0
 8007380:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	187b      	adds	r3, r7, r1
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	b25b      	sxtb	r3, r3
 800738a:	0011      	movs	r1, r2
 800738c:	0018      	movs	r0, r3
 800738e:	f7ff ff5d 	bl	800724c <__NVIC_SetPriority>
}
 8007392:	46c0      	nop			@ (mov r8, r8)
 8007394:	46bd      	mov	sp, r7
 8007396:	b004      	add	sp, #16
 8007398:	bd80      	pop	{r7, pc}

0800739a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b082      	sub	sp, #8
 800739e:	af00      	add	r7, sp, #0
 80073a0:	0002      	movs	r2, r0
 80073a2:	1dfb      	adds	r3, r7, #7
 80073a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80073a6:	1dfb      	adds	r3, r7, #7
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	b25b      	sxtb	r3, r3
 80073ac:	0018      	movs	r0, r3
 80073ae:	f7ff ff11 	bl	80071d4 <__NVIC_EnableIRQ>
}
 80073b2:	46c0      	nop			@ (mov r8, r8)
 80073b4:	46bd      	mov	sp, r7
 80073b6:	b002      	add	sp, #8
 80073b8:	bd80      	pop	{r7, pc}

080073ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b082      	sub	sp, #8
 80073be:	af00      	add	r7, sp, #0
 80073c0:	0002      	movs	r2, r0
 80073c2:	1dfb      	adds	r3, r7, #7
 80073c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80073c6:	1dfb      	adds	r3, r7, #7
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	b25b      	sxtb	r3, r3
 80073cc:	0018      	movs	r0, r3
 80073ce:	f7ff ff1b 	bl	8007208 <__NVIC_DisableIRQ>
}
 80073d2:	46c0      	nop			@ (mov r8, r8)
 80073d4:	46bd      	mov	sp, r7
 80073d6:	b002      	add	sp, #8
 80073d8:	bd80      	pop	{r7, pc}

080073da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b082      	sub	sp, #8
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	0018      	movs	r0, r3
 80073e6:	f7ff ff9f 	bl	8007328 <SysTick_Config>
 80073ea:	0003      	movs	r3, r0
}
 80073ec:	0018      	movs	r0, r3
 80073ee:	46bd      	mov	sp, r7
 80073f0:	b002      	add	sp, #8
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e077      	b.n	80074f6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a3d      	ldr	r2, [pc, #244]	@ (8007500 <HAL_DMA_Init+0x10c>)
 800740c:	4694      	mov	ip, r2
 800740e:	4463      	add	r3, ip
 8007410:	2114      	movs	r1, #20
 8007412:	0018      	movs	r0, r3
 8007414:	f7f8 fe78 	bl	8000108 <__udivsi3>
 8007418:	0003      	movs	r3, r0
 800741a:	009a      	lsls	r2, r3, #2
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2225      	movs	r2, #37	@ 0x25
 8007424:	2102      	movs	r1, #2
 8007426:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4934      	ldr	r1, [pc, #208]	@ (8007504 <HAL_DMA_Init+0x110>)
 8007434:	400a      	ands	r2, r1
 8007436:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6819      	ldr	r1, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	689a      	ldr	r2, [r3, #8]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	431a      	orrs	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	431a      	orrs	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	431a      	orrs	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	431a      	orrs	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	431a      	orrs	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	0018      	movs	r0, r3
 8007472:	f000 fa8d 	bl	8007990 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	689a      	ldr	r2, [r3, #8]
 800747a:	2380      	movs	r3, #128	@ 0x80
 800747c:	01db      	lsls	r3, r3, #7
 800747e:	429a      	cmp	r2, r3
 8007480:	d102      	bne.n	8007488 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007490:	213f      	movs	r1, #63	@ 0x3f
 8007492:	400a      	ands	r2, r1
 8007494:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800749e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d011      	beq.n	80074cc <HAL_DMA_Init+0xd8>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	2b04      	cmp	r3, #4
 80074ae:	d80d      	bhi.n	80074cc <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	0018      	movs	r0, r3
 80074b4:	f000 fa98 	bl	80079e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074bc:	2200      	movs	r2, #0
 80074be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80074c8:	605a      	str	r2, [r3, #4]
 80074ca:	e008      	b.n	80074de <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2225      	movs	r2, #37	@ 0x25
 80074e8:	2101      	movs	r1, #1
 80074ea:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2224      	movs	r2, #36	@ 0x24
 80074f0:	2100      	movs	r1, #0
 80074f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	0018      	movs	r0, r3
 80074f8:	46bd      	mov	sp, r7
 80074fa:	b002      	add	sp, #8
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	46c0      	nop			@ (mov r8, r8)
 8007500:	bffdfff8 	.word	0xbffdfff8
 8007504:	ffff800f 	.word	0xffff800f

08007508 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
 8007514:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007516:	2317      	movs	r3, #23
 8007518:	18fb      	adds	r3, r7, r3
 800751a:	2200      	movs	r2, #0
 800751c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2224      	movs	r2, #36	@ 0x24
 8007522:	5c9b      	ldrb	r3, [r3, r2]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d101      	bne.n	800752c <HAL_DMA_Start_IT+0x24>
 8007528:	2302      	movs	r3, #2
 800752a:	e06f      	b.n	800760c <HAL_DMA_Start_IT+0x104>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2224      	movs	r2, #36	@ 0x24
 8007530:	2101      	movs	r1, #1
 8007532:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2225      	movs	r2, #37	@ 0x25
 8007538:	5c9b      	ldrb	r3, [r3, r2]
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b01      	cmp	r3, #1
 800753e:	d157      	bne.n	80075f0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2225      	movs	r2, #37	@ 0x25
 8007544:	2102      	movs	r1, #2
 8007546:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2101      	movs	r1, #1
 800755a:	438a      	bics	r2, r1
 800755c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	68b9      	ldr	r1, [r7, #8]
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 f9d3 	bl	8007910 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800756e:	2b00      	cmp	r3, #0
 8007570:	d008      	beq.n	8007584 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	210e      	movs	r1, #14
 800757e:	430a      	orrs	r2, r1
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	e00f      	b.n	80075a4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2104      	movs	r1, #4
 8007590:	438a      	bics	r2, r1
 8007592:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	210a      	movs	r1, #10
 80075a0:	430a      	orrs	r2, r1
 80075a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	2380      	movs	r3, #128	@ 0x80
 80075ac:	025b      	lsls	r3, r3, #9
 80075ae:	4013      	ands	r3, r2
 80075b0:	d008      	beq.n	80075c4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075bc:	2180      	movs	r1, #128	@ 0x80
 80075be:	0049      	lsls	r1, r1, #1
 80075c0:	430a      	orrs	r2, r1
 80075c2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d008      	beq.n	80075de <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075d6:	2180      	movs	r1, #128	@ 0x80
 80075d8:	0049      	lsls	r1, r1, #1
 80075da:	430a      	orrs	r2, r1
 80075dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2101      	movs	r1, #1
 80075ea:	430a      	orrs	r2, r1
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	e00a      	b.n	8007606 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2280      	movs	r2, #128	@ 0x80
 80075f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2224      	movs	r2, #36	@ 0x24
 80075fa:	2100      	movs	r1, #0
 80075fc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80075fe:	2317      	movs	r3, #23
 8007600:	18fb      	adds	r3, r7, r3
 8007602:	2201      	movs	r2, #1
 8007604:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007606:	2317      	movs	r3, #23
 8007608:	18fb      	adds	r3, r7, r3
 800760a:	781b      	ldrb	r3, [r3, #0]
}
 800760c:	0018      	movs	r0, r3
 800760e:	46bd      	mov	sp, r7
 8007610:	b006      	add	sp, #24
 8007612:	bd80      	pop	{r7, pc}

08007614 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e050      	b.n	80076c8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2225      	movs	r2, #37	@ 0x25
 800762a:	5c9b      	ldrb	r3, [r3, r2]
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b02      	cmp	r3, #2
 8007630:	d008      	beq.n	8007644 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2204      	movs	r2, #4
 8007636:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2224      	movs	r2, #36	@ 0x24
 800763c:	2100      	movs	r1, #0
 800763e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e041      	b.n	80076c8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	210e      	movs	r1, #14
 8007650:	438a      	bics	r2, r1
 8007652:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800765e:	491c      	ldr	r1, [pc, #112]	@ (80076d0 <HAL_DMA_Abort+0xbc>)
 8007660:	400a      	ands	r2, r1
 8007662:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2101      	movs	r1, #1
 8007670:	438a      	bics	r2, r1
 8007672:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8007674:	4b17      	ldr	r3, [pc, #92]	@ (80076d4 <HAL_DMA_Abort+0xc0>)
 8007676:	6859      	ldr	r1, [r3, #4]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800767c:	221c      	movs	r2, #28
 800767e:	4013      	ands	r3, r2
 8007680:	2201      	movs	r2, #1
 8007682:	409a      	lsls	r2, r3
 8007684:	4b13      	ldr	r3, [pc, #76]	@ (80076d4 <HAL_DMA_Abort+0xc0>)
 8007686:	430a      	orrs	r2, r1
 8007688:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007692:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00c      	beq.n	80076b6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076a6:	490a      	ldr	r1, [pc, #40]	@ (80076d0 <HAL_DMA_Abort+0xbc>)
 80076a8:	400a      	ands	r2, r1
 80076aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80076b4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2225      	movs	r2, #37	@ 0x25
 80076ba:	2101      	movs	r1, #1
 80076bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2224      	movs	r2, #36	@ 0x24
 80076c2:	2100      	movs	r1, #0
 80076c4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	0018      	movs	r0, r3
 80076ca:	46bd      	mov	sp, r7
 80076cc:	b002      	add	sp, #8
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	fffffeff 	.word	0xfffffeff
 80076d4:	40020000 	.word	0x40020000

080076d8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076e0:	210f      	movs	r1, #15
 80076e2:	187b      	adds	r3, r7, r1
 80076e4:	2200      	movs	r2, #0
 80076e6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2225      	movs	r2, #37	@ 0x25
 80076ec:	5c9b      	ldrb	r3, [r3, r2]
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d006      	beq.n	8007702 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2204      	movs	r2, #4
 80076f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80076fa:	187b      	adds	r3, r7, r1
 80076fc:	2201      	movs	r2, #1
 80076fe:	701a      	strb	r2, [r3, #0]
 8007700:	e049      	b.n	8007796 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	210e      	movs	r1, #14
 800770e:	438a      	bics	r2, r1
 8007710:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2101      	movs	r1, #1
 800771e:	438a      	bics	r2, r1
 8007720:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800772c:	491d      	ldr	r1, [pc, #116]	@ (80077a4 <HAL_DMA_Abort_IT+0xcc>)
 800772e:	400a      	ands	r2, r1
 8007730:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8007732:	4b1d      	ldr	r3, [pc, #116]	@ (80077a8 <HAL_DMA_Abort_IT+0xd0>)
 8007734:	6859      	ldr	r1, [r3, #4]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800773a:	221c      	movs	r2, #28
 800773c:	4013      	ands	r3, r2
 800773e:	2201      	movs	r2, #1
 8007740:	409a      	lsls	r2, r3
 8007742:	4b19      	ldr	r3, [pc, #100]	@ (80077a8 <HAL_DMA_Abort_IT+0xd0>)
 8007744:	430a      	orrs	r2, r1
 8007746:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007750:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00c      	beq.n	8007774 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007764:	490f      	ldr	r1, [pc, #60]	@ (80077a4 <HAL_DMA_Abort_IT+0xcc>)
 8007766:	400a      	ands	r2, r1
 8007768:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007772:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2225      	movs	r2, #37	@ 0x25
 8007778:	2101      	movs	r1, #1
 800777a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2224      	movs	r2, #36	@ 0x24
 8007780:	2100      	movs	r1, #0
 8007782:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007788:	2b00      	cmp	r3, #0
 800778a:	d004      	beq.n	8007796 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	0010      	movs	r0, r2
 8007794:	4798      	blx	r3
    }
  }
  return status;
 8007796:	230f      	movs	r3, #15
 8007798:	18fb      	adds	r3, r7, r3
 800779a:	781b      	ldrb	r3, [r3, #0]
}
 800779c:	0018      	movs	r0, r3
 800779e:	46bd      	mov	sp, r7
 80077a0:	b004      	add	sp, #16
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	fffffeff 	.word	0xfffffeff
 80077a8:	40020000 	.word	0x40020000

080077ac <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80077b4:	4b55      	ldr	r3, [pc, #340]	@ (800790c <HAL_DMA_IRQHandler+0x160>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c6:	221c      	movs	r2, #28
 80077c8:	4013      	ands	r3, r2
 80077ca:	2204      	movs	r2, #4
 80077cc:	409a      	lsls	r2, r3
 80077ce:	0013      	movs	r3, r2
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	4013      	ands	r3, r2
 80077d4:	d027      	beq.n	8007826 <HAL_DMA_IRQHandler+0x7a>
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	2204      	movs	r2, #4
 80077da:	4013      	ands	r3, r2
 80077dc:	d023      	beq.n	8007826 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2220      	movs	r2, #32
 80077e6:	4013      	ands	r3, r2
 80077e8:	d107      	bne.n	80077fa <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2104      	movs	r1, #4
 80077f6:	438a      	bics	r2, r1
 80077f8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80077fa:	4b44      	ldr	r3, [pc, #272]	@ (800790c <HAL_DMA_IRQHandler+0x160>)
 80077fc:	6859      	ldr	r1, [r3, #4]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007802:	221c      	movs	r2, #28
 8007804:	4013      	ands	r3, r2
 8007806:	2204      	movs	r2, #4
 8007808:	409a      	lsls	r2, r3
 800780a:	4b40      	ldr	r3, [pc, #256]	@ (800790c <HAL_DMA_IRQHandler+0x160>)
 800780c:	430a      	orrs	r2, r1
 800780e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007814:	2b00      	cmp	r3, #0
 8007816:	d100      	bne.n	800781a <HAL_DMA_IRQHandler+0x6e>
 8007818:	e073      	b.n	8007902 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	0010      	movs	r0, r2
 8007822:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8007824:	e06d      	b.n	8007902 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782a:	221c      	movs	r2, #28
 800782c:	4013      	ands	r3, r2
 800782e:	2202      	movs	r2, #2
 8007830:	409a      	lsls	r2, r3
 8007832:	0013      	movs	r3, r2
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	4013      	ands	r3, r2
 8007838:	d02e      	beq.n	8007898 <HAL_DMA_IRQHandler+0xec>
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	2202      	movs	r2, #2
 800783e:	4013      	ands	r3, r2
 8007840:	d02a      	beq.n	8007898 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2220      	movs	r2, #32
 800784a:	4013      	ands	r3, r2
 800784c:	d10b      	bne.n	8007866 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	210a      	movs	r1, #10
 800785a:	438a      	bics	r2, r1
 800785c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2225      	movs	r2, #37	@ 0x25
 8007862:	2101      	movs	r1, #1
 8007864:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8007866:	4b29      	ldr	r3, [pc, #164]	@ (800790c <HAL_DMA_IRQHandler+0x160>)
 8007868:	6859      	ldr	r1, [r3, #4]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800786e:	221c      	movs	r2, #28
 8007870:	4013      	ands	r3, r2
 8007872:	2202      	movs	r2, #2
 8007874:	409a      	lsls	r2, r3
 8007876:	4b25      	ldr	r3, [pc, #148]	@ (800790c <HAL_DMA_IRQHandler+0x160>)
 8007878:	430a      	orrs	r2, r1
 800787a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2224      	movs	r2, #36	@ 0x24
 8007880:	2100      	movs	r1, #0
 8007882:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007888:	2b00      	cmp	r3, #0
 800788a:	d03a      	beq.n	8007902 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	0010      	movs	r0, r2
 8007894:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8007896:	e034      	b.n	8007902 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800789c:	221c      	movs	r2, #28
 800789e:	4013      	ands	r3, r2
 80078a0:	2208      	movs	r2, #8
 80078a2:	409a      	lsls	r2, r3
 80078a4:	0013      	movs	r3, r2
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	4013      	ands	r3, r2
 80078aa:	d02b      	beq.n	8007904 <HAL_DMA_IRQHandler+0x158>
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2208      	movs	r2, #8
 80078b0:	4013      	ands	r3, r2
 80078b2:	d027      	beq.n	8007904 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	210e      	movs	r1, #14
 80078c0:	438a      	bics	r2, r1
 80078c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80078c4:	4b11      	ldr	r3, [pc, #68]	@ (800790c <HAL_DMA_IRQHandler+0x160>)
 80078c6:	6859      	ldr	r1, [r3, #4]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078cc:	221c      	movs	r2, #28
 80078ce:	4013      	ands	r3, r2
 80078d0:	2201      	movs	r2, #1
 80078d2:	409a      	lsls	r2, r3
 80078d4:	4b0d      	ldr	r3, [pc, #52]	@ (800790c <HAL_DMA_IRQHandler+0x160>)
 80078d6:	430a      	orrs	r2, r1
 80078d8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2225      	movs	r2, #37	@ 0x25
 80078e4:	2101      	movs	r1, #1
 80078e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2224      	movs	r2, #36	@ 0x24
 80078ec:	2100      	movs	r1, #0
 80078ee:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d005      	beq.n	8007904 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	0010      	movs	r0, r2
 8007900:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007902:	46c0      	nop			@ (mov r8, r8)
 8007904:	46c0      	nop			@ (mov r8, r8)
}
 8007906:	46bd      	mov	sp, r7
 8007908:	b004      	add	sp, #16
 800790a:	bd80      	pop	{r7, pc}
 800790c:	40020000 	.word	0x40020000

08007910 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
 800791c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007926:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800792c:	2b00      	cmp	r3, #0
 800792e:	d004      	beq.n	800793a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007938:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800793a:	4b14      	ldr	r3, [pc, #80]	@ (800798c <DMA_SetConfig+0x7c>)
 800793c:	6859      	ldr	r1, [r3, #4]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007942:	221c      	movs	r2, #28
 8007944:	4013      	ands	r3, r2
 8007946:	2201      	movs	r2, #1
 8007948:	409a      	lsls	r2, r3
 800794a:	4b10      	ldr	r3, [pc, #64]	@ (800798c <DMA_SetConfig+0x7c>)
 800794c:	430a      	orrs	r2, r1
 800794e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	683a      	ldr	r2, [r7, #0]
 8007956:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	2b10      	cmp	r3, #16
 800795e:	d108      	bne.n	8007972 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007970:	e007      	b.n	8007982 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	60da      	str	r2, [r3, #12]
}
 8007982:	46c0      	nop			@ (mov r8, r8)
 8007984:	46bd      	mov	sp, r7
 8007986:	b004      	add	sp, #16
 8007988:	bd80      	pop	{r7, pc}
 800798a:	46c0      	nop			@ (mov r8, r8)
 800798c:	40020000 	.word	0x40020000

08007990 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800799c:	089b      	lsrs	r3, r3, #2
 800799e:	4a10      	ldr	r2, [pc, #64]	@ (80079e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80079a0:	4694      	mov	ip, r2
 80079a2:	4463      	add	r3, ip
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	001a      	movs	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	001a      	movs	r2, r3
 80079b2:	23ff      	movs	r3, #255	@ 0xff
 80079b4:	4013      	ands	r3, r2
 80079b6:	3b08      	subs	r3, #8
 80079b8:	2114      	movs	r1, #20
 80079ba:	0018      	movs	r0, r3
 80079bc:	f7f8 fba4 	bl	8000108 <__udivsi3>
 80079c0:	0003      	movs	r3, r0
 80079c2:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a07      	ldr	r2, [pc, #28]	@ (80079e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80079c8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	221f      	movs	r2, #31
 80079ce:	4013      	ands	r3, r2
 80079d0:	2201      	movs	r2, #1
 80079d2:	409a      	lsls	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80079d8:	46c0      	nop			@ (mov r8, r8)
 80079da:	46bd      	mov	sp, r7
 80079dc:	b004      	add	sp, #16
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	10008200 	.word	0x10008200
 80079e4:	40020880 	.word	0x40020880

080079e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	223f      	movs	r2, #63	@ 0x3f
 80079f6:	4013      	ands	r3, r2
 80079f8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80079fe:	4694      	mov	ip, r2
 8007a00:	4463      	add	r3, ip
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	001a      	movs	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a07      	ldr	r2, [pc, #28]	@ (8007a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007a0e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	3b01      	subs	r3, #1
 8007a14:	2203      	movs	r2, #3
 8007a16:	4013      	ands	r3, r2
 8007a18:	2201      	movs	r2, #1
 8007a1a:	409a      	lsls	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8007a20:	46c0      	nop			@ (mov r8, r8)
 8007a22:	46bd      	mov	sp, r7
 8007a24:	b004      	add	sp, #16
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	1000823f 	.word	0x1000823f
 8007a2c:	40020940 	.word	0x40020940

08007a30 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007a30:	b5b0      	push	{r4, r5, r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	603a      	str	r2, [r7, #0]
 8007a3c:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007a3e:	4b21      	ldr	r3, [pc, #132]	@ (8007ac4 <HAL_FLASH_Program+0x94>)
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d101      	bne.n	8007a4a <HAL_FLASH_Program+0x1a>
 8007a46:	2302      	movs	r3, #2
 8007a48:	e038      	b.n	8007abc <HAL_FLASH_Program+0x8c>
 8007a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8007ac4 <HAL_FLASH_Program+0x94>)
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007a50:	4b1c      	ldr	r3, [pc, #112]	@ (8007ac4 <HAL_FLASH_Program+0x94>)
 8007a52:	2200      	movs	r2, #0
 8007a54:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007a56:	2517      	movs	r5, #23
 8007a58:	197c      	adds	r4, r7, r5
 8007a5a:	23fa      	movs	r3, #250	@ 0xfa
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	0018      	movs	r0, r3
 8007a60:	f000 f87a 	bl	8007b58 <FLASH_WaitForLastOperation>
 8007a64:	0003      	movs	r3, r0
 8007a66:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8007a68:	197b      	adds	r3, r7, r5
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d11f      	bne.n	8007ab0 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d106      	bne.n	8007a84 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8007a76:	683a      	ldr	r2, [r7, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68b9      	ldr	r1, [r7, #8]
 8007a7c:	0008      	movs	r0, r1
 8007a7e:	f000 f8b9 	bl	8007bf4 <FLASH_Program_DoubleWord>
 8007a82:	e005      	b.n	8007a90 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	0011      	movs	r1, r2
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	f005 fcb0 	bl	800d3f0 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007a90:	2317      	movs	r3, #23
 8007a92:	18fc      	adds	r4, r7, r3
 8007a94:	23fa      	movs	r3, #250	@ 0xfa
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	0018      	movs	r0, r3
 8007a9a:	f000 f85d 	bl	8007b58 <FLASH_WaitForLastOperation>
 8007a9e:	0003      	movs	r3, r0
 8007aa0:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8007aa2:	4b09      	ldr	r3, [pc, #36]	@ (8007ac8 <HAL_FLASH_Program+0x98>)
 8007aa4:	695a      	ldr	r2, [r3, #20]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	43d9      	mvns	r1, r3
 8007aaa:	4b07      	ldr	r3, [pc, #28]	@ (8007ac8 <HAL_FLASH_Program+0x98>)
 8007aac:	400a      	ands	r2, r1
 8007aae:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007ab0:	4b04      	ldr	r3, [pc, #16]	@ (8007ac4 <HAL_FLASH_Program+0x94>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8007ab6:	2317      	movs	r3, #23
 8007ab8:	18fb      	adds	r3, r7, r3
 8007aba:	781b      	ldrb	r3, [r3, #0]
}
 8007abc:	0018      	movs	r0, r3
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	b006      	add	sp, #24
 8007ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8007ac4:	20000d64 	.word	0x20000d64
 8007ac8:	40022000 	.word	0x40022000

08007acc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007ad2:	1dfb      	adds	r3, r7, #7
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8007ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8007b08 <HAL_FLASH_Unlock+0x3c>)
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	da0c      	bge.n	8007afa <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007ae0:	4b09      	ldr	r3, [pc, #36]	@ (8007b08 <HAL_FLASH_Unlock+0x3c>)
 8007ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8007b0c <HAL_FLASH_Unlock+0x40>)
 8007ae4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007ae6:	4b08      	ldr	r3, [pc, #32]	@ (8007b08 <HAL_FLASH_Unlock+0x3c>)
 8007ae8:	4a09      	ldr	r2, [pc, #36]	@ (8007b10 <HAL_FLASH_Unlock+0x44>)
 8007aea:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8007aec:	4b06      	ldr	r3, [pc, #24]	@ (8007b08 <HAL_FLASH_Unlock+0x3c>)
 8007aee:	695b      	ldr	r3, [r3, #20]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	da02      	bge.n	8007afa <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8007af4:	1dfb      	adds	r3, r7, #7
 8007af6:	2201      	movs	r2, #1
 8007af8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8007afa:	1dfb      	adds	r3, r7, #7
 8007afc:	781b      	ldrb	r3, [r3, #0]
}
 8007afe:	0018      	movs	r0, r3
 8007b00:	46bd      	mov	sp, r7
 8007b02:	b002      	add	sp, #8
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	46c0      	nop			@ (mov r8, r8)
 8007b08:	40022000 	.word	0x40022000
 8007b0c:	45670123 	.word	0x45670123
 8007b10:	cdef89ab 	.word	0xcdef89ab

08007b14 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8007b1a:	1dfb      	adds	r3, r7, #7
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007b20:	23fa      	movs	r3, #250	@ 0xfa
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	0018      	movs	r0, r3
 8007b26:	f000 f817 	bl	8007b58 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8007b54 <HAL_FLASH_Lock+0x40>)
 8007b2c:	695a      	ldr	r2, [r3, #20]
 8007b2e:	4b09      	ldr	r3, [pc, #36]	@ (8007b54 <HAL_FLASH_Lock+0x40>)
 8007b30:	2180      	movs	r1, #128	@ 0x80
 8007b32:	0609      	lsls	r1, r1, #24
 8007b34:	430a      	orrs	r2, r1
 8007b36:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8007b38:	4b06      	ldr	r3, [pc, #24]	@ (8007b54 <HAL_FLASH_Lock+0x40>)
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	da02      	bge.n	8007b46 <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8007b40:	1dfb      	adds	r3, r7, #7
 8007b42:	2200      	movs	r2, #0
 8007b44:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007b46:	1dfb      	adds	r3, r7, #7
 8007b48:	781b      	ldrb	r3, [r3, #0]
}
 8007b4a:	0018      	movs	r0, r3
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	b002      	add	sp, #8
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	46c0      	nop			@ (mov r8, r8)
 8007b54:	40022000 	.word	0x40022000

08007b58 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8007b60:	f7fe f904 	bl	8005d6c <HAL_GetTick>
 8007b64:	0003      	movs	r3, r0
 8007b66:	60fb      	str	r3, [r7, #12]
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8007b68:	2380      	movs	r3, #128	@ 0x80
 8007b6a:	025b      	lsls	r3, r3, #9
 8007b6c:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8007b6e:	e00c      	b.n	8007b8a <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	3301      	adds	r3, #1
 8007b74:	d009      	beq.n	8007b8a <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8007b76:	f7fe f8f9 	bl	8005d6c <HAL_GetTick>
 8007b7a:	0002      	movs	r2, r0
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d801      	bhi.n	8007b8a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e028      	b.n	8007bdc <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 8007b8a:	4b16      	ldr	r3, [pc, #88]	@ (8007be4 <FLASH_WaitForLastOperation+0x8c>)
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	4013      	ands	r3, r2
 8007b92:	d1ed      	bne.n	8007b70 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8007b94:	4b13      	ldr	r3, [pc, #76]	@ (8007be4 <FLASH_WaitForLastOperation+0x8c>)
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	4a13      	ldr	r2, [pc, #76]	@ (8007be8 <FLASH_WaitForLastOperation+0x90>)
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8007b9e:	4b11      	ldr	r3, [pc, #68]	@ (8007be4 <FLASH_WaitForLastOperation+0x8c>)
 8007ba0:	4a12      	ldr	r2, [pc, #72]	@ (8007bec <FLASH_WaitForLastOperation+0x94>)
 8007ba2:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d011      	beq.n	8007bce <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8007baa:	4b11      	ldr	r3, [pc, #68]	@ (8007bf0 <FLASH_WaitForLastOperation+0x98>)
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e013      	b.n	8007bdc <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	d009      	beq.n	8007bce <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8007bba:	f7fe f8d7 	bl	8005d6c <HAL_GetTick>
 8007bbe:	0002      	movs	r2, r0
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d801      	bhi.n	8007bce <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e006      	b.n	8007bdc <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8007bce:	4b05      	ldr	r3, [pc, #20]	@ (8007be4 <FLASH_WaitForLastOperation+0x8c>)
 8007bd0:	691a      	ldr	r2, [r3, #16]
 8007bd2:	2380      	movs	r3, #128	@ 0x80
 8007bd4:	02db      	lsls	r3, r3, #11
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	d1ec      	bne.n	8007bb4 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	0018      	movs	r0, r3
 8007bde:	46bd      	mov	sp, r7
 8007be0:	b004      	add	sp, #16
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	40022000 	.word	0x40022000
 8007be8:	0000c3fa 	.word	0x0000c3fa
 8007bec:	0000c3fb 	.word	0x0000c3fb
 8007bf0:	20000d64 	.word	0x20000d64

08007bf4 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007bf4:	b5b0      	push	{r4, r5, r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	603a      	str	r2, [r7, #0]
 8007bfe:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007c00:	4b0b      	ldr	r3, [pc, #44]	@ (8007c30 <FLASH_Program_DoubleWord+0x3c>)
 8007c02:	695a      	ldr	r2, [r3, #20]
 8007c04:	4b0a      	ldr	r3, [pc, #40]	@ (8007c30 <FLASH_Program_DoubleWord+0x3c>)
 8007c06:	2101      	movs	r1, #1
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007c12:	f3bf 8f6f 	isb	sy
}
 8007c16:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	001c      	movs	r4, r3
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	001d      	movs	r5, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3304      	adds	r3, #4
 8007c24:	0022      	movs	r2, r4
 8007c26:	601a      	str	r2, [r3, #0]
}
 8007c28:	46c0      	nop			@ (mov r8, r8)
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	b004      	add	sp, #16
 8007c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8007c30:	40022000 	.word	0x40022000

08007c34 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007c34:	b5b0      	push	{r4, r5, r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007c3e:	4b35      	ldr	r3, [pc, #212]	@ (8007d14 <HAL_FLASHEx_Erase+0xe0>)
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d101      	bne.n	8007c4a <HAL_FLASHEx_Erase+0x16>
 8007c46:	2302      	movs	r3, #2
 8007c48:	e05f      	b.n	8007d0a <HAL_FLASHEx_Erase+0xd6>
 8007c4a:	4b32      	ldr	r3, [pc, #200]	@ (8007d14 <HAL_FLASHEx_Erase+0xe0>)
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007c50:	4b30      	ldr	r3, [pc, #192]	@ (8007d14 <HAL_FLASHEx_Erase+0xe0>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007c56:	250f      	movs	r5, #15
 8007c58:	197c      	adds	r4, r7, r5
 8007c5a:	23fa      	movs	r3, #250	@ 0xfa
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	0018      	movs	r0, r3
 8007c60:	f7ff ff7a 	bl	8007b58 <FLASH_WaitForLastOperation>
 8007c64:	0003      	movs	r3, r0
 8007c66:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8007c68:	002c      	movs	r4, r5
 8007c6a:	193b      	adds	r3, r7, r4
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d145      	bne.n	8007cfe <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2204      	movs	r2, #4
 8007c76:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b04      	cmp	r3, #4
 8007c7e:	d10d      	bne.n	8007c9c <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	0018      	movs	r0, r3
 8007c86:	f000 f849 	bl	8007d1c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007c8a:	193c      	adds	r4, r7, r4
 8007c8c:	23fa      	movs	r3, #250	@ 0xfa
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	0018      	movs	r0, r3
 8007c92:	f7ff ff61 	bl	8007b58 <FLASH_WaitForLastOperation>
 8007c96:	0003      	movs	r3, r0
 8007c98:	7023      	strb	r3, [r4, #0]
 8007c9a:	e030      	b.n	8007cfe <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	4252      	negs	r2, r2
 8007ca2:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	60bb      	str	r3, [r7, #8]
 8007caa:	e01a      	b.n	8007ce2 <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	0011      	movs	r1, r2
 8007cb4:	0018      	movs	r0, r3
 8007cb6:	f000 f845 	bl	8007d44 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007cba:	250f      	movs	r5, #15
 8007cbc:	197c      	adds	r4, r7, r5
 8007cbe:	23fa      	movs	r3, #250	@ 0xfa
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	0018      	movs	r0, r3
 8007cc4:	f7ff ff48 	bl	8007b58 <FLASH_WaitForLastOperation>
 8007cc8:	0003      	movs	r3, r0
 8007cca:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8007ccc:	197b      	adds	r3, r7, r5
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d003      	beq.n	8007cdc <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	601a      	str	r2, [r3, #0]
          break;
 8007cda:	e00a      	b.n	8007cf2 <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	60bb      	str	r3, [r7, #8]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	689a      	ldr	r2, [r3, #8]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	18d3      	adds	r3, r2, r3
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d3dc      	bcc.n	8007cac <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007cf2:	4b09      	ldr	r3, [pc, #36]	@ (8007d18 <HAL_FLASHEx_Erase+0xe4>)
 8007cf4:	695a      	ldr	r2, [r3, #20]
 8007cf6:	4b08      	ldr	r3, [pc, #32]	@ (8007d18 <HAL_FLASHEx_Erase+0xe4>)
 8007cf8:	2102      	movs	r1, #2
 8007cfa:	438a      	bics	r2, r1
 8007cfc:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007cfe:	4b05      	ldr	r3, [pc, #20]	@ (8007d14 <HAL_FLASHEx_Erase+0xe0>)
 8007d00:	2200      	movs	r2, #0
 8007d02:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8007d04:	230f      	movs	r3, #15
 8007d06:	18fb      	adds	r3, r7, r3
 8007d08:	781b      	ldrb	r3, [r3, #0]
}
 8007d0a:	0018      	movs	r0, r3
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	b004      	add	sp, #16
 8007d10:	bdb0      	pop	{r4, r5, r7, pc}
 8007d12:	46c0      	nop			@ (mov r8, r8)
 8007d14:	20000d64 	.word	0x20000d64
 8007d18:	40022000 	.word	0x40022000

08007d1c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8007d24:	4b06      	ldr	r3, [pc, #24]	@ (8007d40 <FLASH_MassErase+0x24>)
 8007d26:	695a      	ldr	r2, [r3, #20]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	431a      	orrs	r2, r3
 8007d2c:	4b04      	ldr	r3, [pc, #16]	@ (8007d40 <FLASH_MassErase+0x24>)
 8007d2e:	2180      	movs	r1, #128	@ 0x80
 8007d30:	0249      	lsls	r1, r1, #9
 8007d32:	430a      	orrs	r2, r1
 8007d34:	615a      	str	r2, [r3, #20]
}
 8007d36:	46c0      	nop			@ (mov r8, r8)
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	b002      	add	sp, #8
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	46c0      	nop			@ (mov r8, r8)
 8007d40:	40022000 	.word	0x40022000

08007d44 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8007d4e:	4b08      	ldr	r3, [pc, #32]	@ (8007d70 <FLASH_PageErase+0x2c>)
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	4a08      	ldr	r2, [pc, #32]	@ (8007d74 <FLASH_PageErase+0x30>)
 8007d54:	4013      	ands	r3, r2
 8007d56:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	00da      	lsls	r2, r3, #3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	431a      	orrs	r2, r3
 8007d60:	4b03      	ldr	r3, [pc, #12]	@ (8007d70 <FLASH_PageErase+0x2c>)
 8007d62:	4905      	ldr	r1, [pc, #20]	@ (8007d78 <FLASH_PageErase+0x34>)
 8007d64:	430a      	orrs	r2, r1
 8007d66:	615a      	str	r2, [r3, #20]
}
 8007d68:	46c0      	nop			@ (mov r8, r8)
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	b004      	add	sp, #16
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	40022000 	.word	0x40022000
 8007d74:	ffffe007 	.word	0xffffe007
 8007d78:	00010002 	.word	0x00010002

08007d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007d86:	2300      	movs	r3, #0
 8007d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007d8a:	e147      	b.n	800801c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2101      	movs	r1, #1
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	4091      	lsls	r1, r2
 8007d96:	000a      	movs	r2, r1
 8007d98:	4013      	ands	r3, r2
 8007d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d100      	bne.n	8007da4 <HAL_GPIO_Init+0x28>
 8007da2:	e138      	b.n	8008016 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	2203      	movs	r2, #3
 8007daa:	4013      	ands	r3, r2
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d005      	beq.n	8007dbc <HAL_GPIO_Init+0x40>
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	2203      	movs	r2, #3
 8007db6:	4013      	ands	r3, r2
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d130      	bne.n	8007e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	2203      	movs	r2, #3
 8007dc8:	409a      	lsls	r2, r3
 8007dca:	0013      	movs	r3, r2
 8007dcc:	43da      	mvns	r2, r3
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	68da      	ldr	r2, [r3, #12]
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	409a      	lsls	r2, r3
 8007dde:	0013      	movs	r3, r2
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007df2:	2201      	movs	r2, #1
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	409a      	lsls	r2, r3
 8007df8:	0013      	movs	r3, r2
 8007dfa:	43da      	mvns	r2, r3
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	091b      	lsrs	r3, r3, #4
 8007e08:	2201      	movs	r2, #1
 8007e0a:	401a      	ands	r2, r3
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	409a      	lsls	r2, r3
 8007e10:	0013      	movs	r3, r2
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	2203      	movs	r2, #3
 8007e24:	4013      	ands	r3, r2
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	d017      	beq.n	8007e5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	005b      	lsls	r3, r3, #1
 8007e34:	2203      	movs	r2, #3
 8007e36:	409a      	lsls	r2, r3
 8007e38:	0013      	movs	r3, r2
 8007e3a:	43da      	mvns	r2, r3
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	4013      	ands	r3, r2
 8007e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	689a      	ldr	r2, [r3, #8]
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	005b      	lsls	r3, r3, #1
 8007e4a:	409a      	lsls	r2, r3
 8007e4c:	0013      	movs	r3, r2
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	2203      	movs	r2, #3
 8007e60:	4013      	ands	r3, r2
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d123      	bne.n	8007eae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	08da      	lsrs	r2, r3, #3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	3208      	adds	r2, #8
 8007e6e:	0092      	lsls	r2, r2, #2
 8007e70:	58d3      	ldr	r3, [r2, r3]
 8007e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	2207      	movs	r2, #7
 8007e78:	4013      	ands	r3, r2
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	220f      	movs	r2, #15
 8007e7e:	409a      	lsls	r2, r3
 8007e80:	0013      	movs	r3, r2
 8007e82:	43da      	mvns	r2, r3
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	4013      	ands	r3, r2
 8007e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	691a      	ldr	r2, [r3, #16]
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	2107      	movs	r1, #7
 8007e92:	400b      	ands	r3, r1
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	409a      	lsls	r2, r3
 8007e98:	0013      	movs	r3, r2
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	08da      	lsrs	r2, r3, #3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3208      	adds	r2, #8
 8007ea8:	0092      	lsls	r2, r2, #2
 8007eaa:	6939      	ldr	r1, [r7, #16]
 8007eac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	005b      	lsls	r3, r3, #1
 8007eb8:	2203      	movs	r2, #3
 8007eba:	409a      	lsls	r2, r3
 8007ebc:	0013      	movs	r3, r2
 8007ebe:	43da      	mvns	r2, r3
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	2203      	movs	r2, #3
 8007ecc:	401a      	ands	r2, r3
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	005b      	lsls	r3, r3, #1
 8007ed2:	409a      	lsls	r2, r3
 8007ed4:	0013      	movs	r3, r2
 8007ed6:	693a      	ldr	r2, [r7, #16]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	23c0      	movs	r3, #192	@ 0xc0
 8007ee8:	029b      	lsls	r3, r3, #10
 8007eea:	4013      	ands	r3, r2
 8007eec:	d100      	bne.n	8007ef0 <HAL_GPIO_Init+0x174>
 8007eee:	e092      	b.n	8008016 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8007ef0:	4a50      	ldr	r2, [pc, #320]	@ (8008034 <HAL_GPIO_Init+0x2b8>)
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	089b      	lsrs	r3, r3, #2
 8007ef6:	3318      	adds	r3, #24
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	589b      	ldr	r3, [r3, r2]
 8007efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	2203      	movs	r2, #3
 8007f02:	4013      	ands	r3, r2
 8007f04:	00db      	lsls	r3, r3, #3
 8007f06:	220f      	movs	r2, #15
 8007f08:	409a      	lsls	r2, r3
 8007f0a:	0013      	movs	r3, r2
 8007f0c:	43da      	mvns	r2, r3
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	4013      	ands	r3, r2
 8007f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	23a0      	movs	r3, #160	@ 0xa0
 8007f18:	05db      	lsls	r3, r3, #23
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d013      	beq.n	8007f46 <HAL_GPIO_Init+0x1ca>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a45      	ldr	r2, [pc, #276]	@ (8008038 <HAL_GPIO_Init+0x2bc>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d00d      	beq.n	8007f42 <HAL_GPIO_Init+0x1c6>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a44      	ldr	r2, [pc, #272]	@ (800803c <HAL_GPIO_Init+0x2c0>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d007      	beq.n	8007f3e <HAL_GPIO_Init+0x1c2>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a43      	ldr	r2, [pc, #268]	@ (8008040 <HAL_GPIO_Init+0x2c4>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d101      	bne.n	8007f3a <HAL_GPIO_Init+0x1be>
 8007f36:	2303      	movs	r3, #3
 8007f38:	e006      	b.n	8007f48 <HAL_GPIO_Init+0x1cc>
 8007f3a:	2305      	movs	r3, #5
 8007f3c:	e004      	b.n	8007f48 <HAL_GPIO_Init+0x1cc>
 8007f3e:	2302      	movs	r3, #2
 8007f40:	e002      	b.n	8007f48 <HAL_GPIO_Init+0x1cc>
 8007f42:	2301      	movs	r3, #1
 8007f44:	e000      	b.n	8007f48 <HAL_GPIO_Init+0x1cc>
 8007f46:	2300      	movs	r3, #0
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	2103      	movs	r1, #3
 8007f4c:	400a      	ands	r2, r1
 8007f4e:	00d2      	lsls	r2, r2, #3
 8007f50:	4093      	lsls	r3, r2
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8007f58:	4936      	ldr	r1, [pc, #216]	@ (8008034 <HAL_GPIO_Init+0x2b8>)
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	089b      	lsrs	r3, r3, #2
 8007f5e:	3318      	adds	r3, #24
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f66:	4b33      	ldr	r3, [pc, #204]	@ (8008034 <HAL_GPIO_Init+0x2b8>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	43da      	mvns	r2, r3
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	4013      	ands	r3, r2
 8007f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	2380      	movs	r3, #128	@ 0x80
 8007f7c:	035b      	lsls	r3, r3, #13
 8007f7e:	4013      	ands	r3, r2
 8007f80:	d003      	beq.n	8007f8a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8007f82:	693a      	ldr	r2, [r7, #16]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8008034 <HAL_GPIO_Init+0x2b8>)
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8007f90:	4b28      	ldr	r3, [pc, #160]	@ (8008034 <HAL_GPIO_Init+0x2b8>)
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	43da      	mvns	r2, r3
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	2380      	movs	r3, #128	@ 0x80
 8007fa6:	039b      	lsls	r3, r3, #14
 8007fa8:	4013      	ands	r3, r2
 8007faa:	d003      	beq.n	8007fb4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8008034 <HAL_GPIO_Init+0x2b8>)
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007fba:	4a1e      	ldr	r2, [pc, #120]	@ (8008034 <HAL_GPIO_Init+0x2b8>)
 8007fbc:	2384      	movs	r3, #132	@ 0x84
 8007fbe:	58d3      	ldr	r3, [r2, r3]
 8007fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	43da      	mvns	r2, r3
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	4013      	ands	r3, r2
 8007fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	2380      	movs	r3, #128	@ 0x80
 8007fd2:	029b      	lsls	r3, r3, #10
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	d003      	beq.n	8007fe0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007fe0:	4914      	ldr	r1, [pc, #80]	@ (8008034 <HAL_GPIO_Init+0x2b8>)
 8007fe2:	2284      	movs	r2, #132	@ 0x84
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8007fe8:	4a12      	ldr	r2, [pc, #72]	@ (8008034 <HAL_GPIO_Init+0x2b8>)
 8007fea:	2380      	movs	r3, #128	@ 0x80
 8007fec:	58d3      	ldr	r3, [r2, r3]
 8007fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	43da      	mvns	r2, r3
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	2380      	movs	r3, #128	@ 0x80
 8008000:	025b      	lsls	r3, r3, #9
 8008002:	4013      	ands	r3, r2
 8008004:	d003      	beq.n	800800e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4313      	orrs	r3, r2
 800800c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800800e:	4909      	ldr	r1, [pc, #36]	@ (8008034 <HAL_GPIO_Init+0x2b8>)
 8008010:	2280      	movs	r2, #128	@ 0x80
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	3301      	adds	r3, #1
 800801a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	40da      	lsrs	r2, r3
 8008024:	1e13      	subs	r3, r2, #0
 8008026:	d000      	beq.n	800802a <HAL_GPIO_Init+0x2ae>
 8008028:	e6b0      	b.n	8007d8c <HAL_GPIO_Init+0x10>
  }
}
 800802a:	46c0      	nop			@ (mov r8, r8)
 800802c:	46c0      	nop			@ (mov r8, r8)
 800802e:	46bd      	mov	sp, r7
 8008030:	b006      	add	sp, #24
 8008032:	bd80      	pop	{r7, pc}
 8008034:	40021800 	.word	0x40021800
 8008038:	50000400 	.word	0x50000400
 800803c:	50000800 	.word	0x50000800
 8008040:	50000c00 	.word	0x50000c00

08008044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	000a      	movs	r2, r1
 800804e:	1cbb      	adds	r3, r7, #2
 8008050:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	1cba      	adds	r2, r7, #2
 8008058:	8812      	ldrh	r2, [r2, #0]
 800805a:	4013      	ands	r3, r2
 800805c:	d004      	beq.n	8008068 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800805e:	230f      	movs	r3, #15
 8008060:	18fb      	adds	r3, r7, r3
 8008062:	2201      	movs	r2, #1
 8008064:	701a      	strb	r2, [r3, #0]
 8008066:	e003      	b.n	8008070 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008068:	230f      	movs	r3, #15
 800806a:	18fb      	adds	r3, r7, r3
 800806c:	2200      	movs	r2, #0
 800806e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8008070:	230f      	movs	r3, #15
 8008072:	18fb      	adds	r3, r7, r3
 8008074:	781b      	ldrb	r3, [r3, #0]
}
 8008076:	0018      	movs	r0, r3
 8008078:	46bd      	mov	sp, r7
 800807a:	b004      	add	sp, #16
 800807c:	bd80      	pop	{r7, pc}

0800807e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b082      	sub	sp, #8
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	0008      	movs	r0, r1
 8008088:	0011      	movs	r1, r2
 800808a:	1cbb      	adds	r3, r7, #2
 800808c:	1c02      	adds	r2, r0, #0
 800808e:	801a      	strh	r2, [r3, #0]
 8008090:	1c7b      	adds	r3, r7, #1
 8008092:	1c0a      	adds	r2, r1, #0
 8008094:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008096:	1c7b      	adds	r3, r7, #1
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d004      	beq.n	80080a8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800809e:	1cbb      	adds	r3, r7, #2
 80080a0:	881a      	ldrh	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80080a6:	e003      	b.n	80080b0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80080a8:	1cbb      	adds	r3, r7, #2
 80080aa:	881a      	ldrh	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80080b0:	46c0      	nop			@ (mov r8, r8)
 80080b2:	46bd      	mov	sp, r7
 80080b4:	b002      	add	sp, #8
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	0002      	movs	r2, r0
 80080c0:	1dbb      	adds	r3, r7, #6
 80080c2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80080c4:	4b10      	ldr	r3, [pc, #64]	@ (8008108 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	1dba      	adds	r2, r7, #6
 80080ca:	8812      	ldrh	r2, [r2, #0]
 80080cc:	4013      	ands	r3, r2
 80080ce:	d008      	beq.n	80080e2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80080d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008108 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80080d2:	1dba      	adds	r2, r7, #6
 80080d4:	8812      	ldrh	r2, [r2, #0]
 80080d6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80080d8:	1dbb      	adds	r3, r7, #6
 80080da:	881b      	ldrh	r3, [r3, #0]
 80080dc:	0018      	movs	r0, r3
 80080de:	f7fb fc8f 	bl	8003a00 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80080e2:	4b09      	ldr	r3, [pc, #36]	@ (8008108 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	1dba      	adds	r2, r7, #6
 80080e8:	8812      	ldrh	r2, [r2, #0]
 80080ea:	4013      	ands	r3, r2
 80080ec:	d008      	beq.n	8008100 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80080ee:	4b06      	ldr	r3, [pc, #24]	@ (8008108 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80080f0:	1dba      	adds	r2, r7, #6
 80080f2:	8812      	ldrh	r2, [r2, #0]
 80080f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80080f6:	1dbb      	adds	r3, r7, #6
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	0018      	movs	r0, r3
 80080fc:	f7fb fc56 	bl	80039ac <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8008100:	46c0      	nop			@ (mov r8, r8)
 8008102:	46bd      	mov	sp, r7
 8008104:	b002      	add	sp, #8
 8008106:	bd80      	pop	{r7, pc}
 8008108:	40021800 	.word	0x40021800

0800810c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d101      	bne.n	800811e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e097      	b.n	800824e <HAL_LPTIM_Init+0x142>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2236      	movs	r2, #54	@ 0x36
 8008122:	5c9b      	ldrb	r3, [r3, r2]
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d113      	bne.n	8008152 <HAL_LPTIM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2235      	movs	r2, #53	@ 0x35
 800812e:	2100      	movs	r1, #0
 8008130:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    LPTIM_ResetCallback(hlptim);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	0018      	movs	r0, r3
 8008136:	f000 fa8f 	bl	8008658 <LPTIM_ResetCallback>

    if (hlptim->MspInitCallback == NULL)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813e:	2b00      	cmp	r3, #0
 8008140:	d102      	bne.n	8008148 <HAL_LPTIM_Init+0x3c>
    {
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a44      	ldr	r2, [pc, #272]	@ (8008258 <HAL_LPTIM_Init+0x14c>)
 8008146:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	0010      	movs	r0, r2
 8008150:	4798      	blx	r3
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2236      	movs	r2, #54	@ 0x36
 8008156:	2102      	movs	r1, #2
 8008158:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d005      	beq.n	8008176 <HAL_LPTIM_Init+0x6a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800816e:	2380      	movs	r3, #128	@ 0x80
 8008170:	041b      	lsls	r3, r3, #16
 8008172:	429a      	cmp	r2, r3
 8008174:	d103      	bne.n	800817e <HAL_LPTIM_Init+0x72>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	221e      	movs	r2, #30
 800817a:	4393      	bics	r3, r2
 800817c:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	4a36      	ldr	r2, [pc, #216]	@ (800825c <HAL_LPTIM_Init+0x150>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d003      	beq.n	8008190 <HAL_LPTIM_Init+0x84>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	4a35      	ldr	r2, [pc, #212]	@ (8008260 <HAL_LPTIM_Init+0x154>)
 800818c:	4013      	ands	r3, r2
 800818e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4a34      	ldr	r2, [pc, #208]	@ (8008264 <HAL_LPTIM_Init+0x158>)
 8008194:	4013      	ands	r3, r2
 8008196:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80081a0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80081a6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 80081ac:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 80081b2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d107      	bne.n	80081d2 <HAL_LPTIM_Init+0xc6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80081ca:	4313      	orrs	r3, r2
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d005      	beq.n	80081e6 <HAL_LPTIM_Init+0xda>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80081de:	2380      	movs	r3, #128	@ 0x80
 80081e0:	041b      	lsls	r3, r3, #16
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d107      	bne.n	80081f6 <HAL_LPTIM_Init+0xea>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80081ee:	4313      	orrs	r3, r2
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	4a18      	ldr	r2, [pc, #96]	@ (800825c <HAL_LPTIM_Init+0x150>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d00a      	beq.n	8008216 <HAL_LPTIM_Init+0x10a>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008208:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800820e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	4313      	orrs	r3, r2
 8008214:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a11      	ldr	r2, [pc, #68]	@ (8008268 <HAL_LPTIM_Init+0x15c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d108      	bne.n	800823a <HAL_LPTIM_Init+0x12e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	430a      	orrs	r2, r1
 8008236:	625a      	str	r2, [r3, #36]	@ 0x24
 8008238:	e004      	b.n	8008244 <HAL_LPTIM_Init+0x138>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008242:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2236      	movs	r2, #54	@ 0x36
 8008248:	2101      	movs	r1, #1
 800824a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	0018      	movs	r0, r3
 8008250:	46bd      	mov	sp, r7
 8008252:	b004      	add	sp, #16
 8008254:	bd80      	pop	{r7, pc}
 8008256:	46c0      	nop			@ (mov r8, r8)
 8008258:	08004bc5 	.word	0x08004bc5
 800825c:	0000ffff 	.word	0x0000ffff
 8008260:	ffff1f3f 	.word	0xffff1f3f
 8008264:	ff19f1fe 	.word	0xff19f1fe
 8008268:	40007c00 	.word	0x40007c00

0800826c <HAL_LPTIM_SetOnce_Start_IT>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_SetOnce_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2236      	movs	r2, #54	@ 0x36
 800827c:	2102      	movs	r1, #2
 800827e:	5499      	strb	r1, [r3, r2]

  /* Set WAVE bit to enable the set once mode */
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68da      	ldr	r2, [r3, #12]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2180      	movs	r1, #128	@ 0x80
 800828c:	0349      	lsls	r1, r1, #13
 800828e:	430a      	orrs	r2, r1
 8008290:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	691a      	ldr	r2, [r3, #16]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2101      	movs	r1, #1
 800829e:	430a      	orrs	r2, r1
 80082a0:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2210      	movs	r2, #16
 80082a8:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2110      	movs	r1, #16
 80082b6:	0018      	movs	r0, r3
 80082b8:	f000 f9fa 	bl	80086b0 <LPTIM_WaitForFlag>
 80082bc:	0003      	movs	r3, r0
 80082be:	2b03      	cmp	r3, #3
 80082c0:	d101      	bne.n	80082c6 <HAL_LPTIM_SetOnce_Start_IT+0x5a>
  {
    return HAL_TIMEOUT;
 80082c2:	2303      	movs	r3, #3
 80082c4:	e060      	b.n	8008388 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2208      	movs	r2, #8
 80082cc:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2108      	movs	r1, #8
 80082da:	0018      	movs	r0, r3
 80082dc:	f000 f9e8 	bl	80086b0 <LPTIM_WaitForFlag>
 80082e0:	0003      	movs	r3, r0
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d101      	bne.n	80082ea <HAL_LPTIM_SetOnce_Start_IT+0x7e>
  {
    return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e04e      	b.n	8008388 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	0018      	movs	r0, r3
 80082ee:	f000 fa17 	bl	8008720 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	0018      	movs	r0, r3
 80082f6:	f000 f9a3 	bl	8008640 <HAL_LPTIM_GetState>
 80082fa:	0003      	movs	r3, r0
 80082fc:	2b03      	cmp	r3, #3
 80082fe:	d101      	bne.n	8008304 <HAL_LPTIM_SetOnce_Start_IT+0x98>
  {
    return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e041      	b.n	8008388 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689a      	ldr	r2, [r3, #8]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2110      	movs	r1, #16
 8008310:	430a      	orrs	r2, r1
 8008312:	609a      	str	r2, [r3, #8]

  /* Enable Compare write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	689a      	ldr	r2, [r3, #8]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2108      	movs	r1, #8
 8008320:	430a      	orrs	r2, r1
 8008322:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	689a      	ldr	r2, [r3, #8]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2102      	movs	r1, #2
 8008330:	430a      	orrs	r2, r1
 8008332:	609a      	str	r2, [r3, #8]

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689a      	ldr	r2, [r3, #8]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2101      	movs	r1, #1
 8008340:	430a      	orrs	r2, r1
 8008342:	609a      	str	r2, [r3, #8]

  /* If external trigger source is used, then enable external trigger interrupt */
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	4a11      	ldr	r2, [pc, #68]	@ (8008390 <HAL_LPTIM_SetOnce_Start_IT+0x124>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d007      	beq.n	800835e <HAL_LPTIM_SetOnce_Start_IT+0xf2>
  {
    /* Enable external trigger interrupt */
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	689a      	ldr	r2, [r3, #8]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2104      	movs	r1, #4
 800835a:	430a      	orrs	r2, r1
 800835c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	691a      	ldr	r2, [r3, #16]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2101      	movs	r1, #1
 800836a:	430a      	orrs	r2, r1
 800836c:	611a      	str	r2, [r3, #16]

  /* Start timer in single (one shot) mode */
  __HAL_LPTIM_START_SINGLE(hlptim);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	691a      	ldr	r2, [r3, #16]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2102      	movs	r1, #2
 800837a:	430a      	orrs	r2, r1
 800837c:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2236      	movs	r2, #54	@ 0x36
 8008382:	2101      	movs	r1, #1
 8008384:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	0018      	movs	r0, r3
 800838a:	46bd      	mov	sp, r7
 800838c:	b004      	add	sp, #16
 800838e:	bd80      	pop	{r7, pc}
 8008390:	0000ffff 	.word	0x0000ffff

08008394 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2201      	movs	r2, #1
 80083a4:	4013      	ands	r3, r2
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d10f      	bne.n	80083ca <HAL_LPTIM_IRQHandler+0x36>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	2201      	movs	r2, #1
 80083b2:	4013      	ands	r3, r2
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d108      	bne.n	80083ca <HAL_LPTIM_IRQHandler+0x36>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2201      	movs	r2, #1
 80083be:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	0010      	movs	r0, r2
 80083c8:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2202      	movs	r2, #2
 80083d2:	4013      	ands	r3, r2
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d10f      	bne.n	80083f8 <HAL_LPTIM_IRQHandler+0x64>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	2202      	movs	r2, #2
 80083e0:	4013      	ands	r3, r2
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d108      	bne.n	80083f8 <HAL_LPTIM_IRQHandler+0x64>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2202      	movs	r2, #2
 80083ec:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	0010      	movs	r0, r2
 80083f6:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2204      	movs	r2, #4
 8008400:	4013      	ands	r3, r2
 8008402:	2b04      	cmp	r3, #4
 8008404:	d10f      	bne.n	8008426 <HAL_LPTIM_IRQHandler+0x92>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	2204      	movs	r2, #4
 800840e:	4013      	ands	r3, r2
 8008410:	2b04      	cmp	r3, #4
 8008412:	d108      	bne.n	8008426 <HAL_LPTIM_IRQHandler+0x92>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2204      	movs	r2, #4
 800841a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	0010      	movs	r0, r2
 8008424:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2208      	movs	r2, #8
 800842e:	4013      	ands	r3, r2
 8008430:	2b08      	cmp	r3, #8
 8008432:	d10f      	bne.n	8008454 <HAL_LPTIM_IRQHandler+0xc0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	2208      	movs	r2, #8
 800843c:	4013      	ands	r3, r2
 800843e:	2b08      	cmp	r3, #8
 8008440:	d108      	bne.n	8008454 <HAL_LPTIM_IRQHandler+0xc0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2208      	movs	r2, #8
 8008448:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	0010      	movs	r0, r2
 8008452:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2210      	movs	r2, #16
 800845c:	4013      	ands	r3, r2
 800845e:	2b10      	cmp	r3, #16
 8008460:	d10f      	bne.n	8008482 <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	2210      	movs	r2, #16
 800846a:	4013      	ands	r3, r2
 800846c:	2b10      	cmp	r3, #16
 800846e:	d108      	bne.n	8008482 <HAL_LPTIM_IRQHandler+0xee>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2210      	movs	r2, #16
 8008476:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	0010      	movs	r0, r2
 8008480:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2220      	movs	r2, #32
 800848a:	4013      	ands	r3, r2
 800848c:	2b20      	cmp	r3, #32
 800848e:	d10f      	bne.n	80084b0 <HAL_LPTIM_IRQHandler+0x11c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	2220      	movs	r2, #32
 8008498:	4013      	ands	r3, r2
 800849a:	2b20      	cmp	r3, #32
 800849c:	d108      	bne.n	80084b0 <HAL_LPTIM_IRQHandler+0x11c>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2220      	movs	r2, #32
 80084a4:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	0010      	movs	r0, r2
 80084ae:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2240      	movs	r2, #64	@ 0x40
 80084b8:	4013      	ands	r3, r2
 80084ba:	2b40      	cmp	r3, #64	@ 0x40
 80084bc:	d10f      	bne.n	80084de <HAL_LPTIM_IRQHandler+0x14a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	2240      	movs	r2, #64	@ 0x40
 80084c6:	4013      	ands	r3, r2
 80084c8:	2b40      	cmp	r3, #64	@ 0x40
 80084ca:	d108      	bne.n	80084de <HAL_LPTIM_IRQHandler+0x14a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2240      	movs	r2, #64	@ 0x40
 80084d2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	0010      	movs	r0, r2
 80084dc:	4798      	blx	r3
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80084de:	46c0      	nop			@ (mov r8, r8)
 80084e0:	46bd      	mov	sp, r7
 80084e2:	b002      	add	sp, #8
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80084ee:	46c0      	nop			@ (mov r8, r8)
 80084f0:	46bd      	mov	sp, r7
 80084f2:	b002      	add	sp, #8
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b082      	sub	sp, #8
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80084fe:	46c0      	nop			@ (mov r8, r8)
 8008500:	46bd      	mov	sp, r7
 8008502:	b002      	add	sp, #8
 8008504:	bd80      	pop	{r7, pc}

08008506 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b082      	sub	sp, #8
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800850e:	46c0      	nop			@ (mov r8, r8)
 8008510:	46bd      	mov	sp, r7
 8008512:	b002      	add	sp, #8
 8008514:	bd80      	pop	{r7, pc}

08008516 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b082      	sub	sp, #8
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800851e:	46c0      	nop			@ (mov r8, r8)
 8008520:	46bd      	mov	sp, r7
 8008522:	b002      	add	sp, #8
 8008524:	bd80      	pop	{r7, pc}

08008526 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b082      	sub	sp, #8
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800852e:	46c0      	nop			@ (mov r8, r8)
 8008530:	46bd      	mov	sp, r7
 8008532:	b002      	add	sp, #8
 8008534:	bd80      	pop	{r7, pc}

08008536 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b082      	sub	sp, #8
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800853e:	46c0      	nop			@ (mov r8, r8)
 8008540:	46bd      	mov	sp, r7
 8008542:	b002      	add	sp, #8
 8008544:	bd80      	pop	{r7, pc}

08008546 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b082      	sub	sp, #8
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800854e:	46c0      	nop			@ (mov r8, r8)
 8008550:	46bd      	mov	sp, r7
 8008552:	b002      	add	sp, #8
 8008554:	bd80      	pop	{r7, pc}
	...

08008558 <HAL_LPTIM_RegisterCallback>:
  * @retval status
  */
HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef        *hlptim,
                                             HAL_LPTIM_CallbackIDTypeDef CallbackID,
                                             pLPTIM_CallbackTypeDef      pCallback)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	607a      	str	r2, [r7, #4]
 8008562:	230b      	movs	r3, #11
 8008564:	18fb      	adds	r3, r7, r3
 8008566:	1c0a      	adds	r2, r1, #0
 8008568:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800856a:	2317      	movs	r3, #23
 800856c:	18fb      	adds	r3, r7, r3
 800856e:	2200      	movs	r2, #0
 8008570:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d101      	bne.n	800857c <HAL_LPTIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e05a      	b.n	8008632 <HAL_LPTIM_RegisterCallback+0xda>
  }

  if (hlptim->State == HAL_LPTIM_STATE_READY)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2236      	movs	r2, #54	@ 0x36
 8008580:	5c9b      	ldrb	r3, [r3, r2]
 8008582:	b2db      	uxtb	r3, r3
 8008584:	2b01      	cmp	r3, #1
 8008586:	d132      	bne.n	80085ee <HAL_LPTIM_RegisterCallback+0x96>
  {
    switch (CallbackID)
 8008588:	230b      	movs	r3, #11
 800858a:	18fb      	adds	r3, r7, r3
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	2b08      	cmp	r3, #8
 8008590:	d828      	bhi.n	80085e4 <HAL_LPTIM_RegisterCallback+0x8c>
 8008592:	009a      	lsls	r2, r3, #2
 8008594:	4b29      	ldr	r3, [pc, #164]	@ (800863c <HAL_LPTIM_RegisterCallback+0xe4>)
 8008596:	18d3      	adds	r3, r2, r3
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	469f      	mov	pc, r3
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80085a2:	e043      	b.n	800862c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 80085aa:	e03f      	b.n	800862c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_MATCH_CB_ID :
        hlptim->CompareMatchCallback = pCallback;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 80085b2:	e03b      	b.n	800862c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_MATCH_CB_ID :
        hlptim->AutoReloadMatchCallback = pCallback;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 80085ba:	e037      	b.n	800862c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_TRIGGER_CB_ID :
        hlptim->TriggerCallback = pCallback;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 80085c2:	e033      	b.n	800862c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_WRITE_CB_ID :
        hlptim->CompareWriteCallback = pCallback;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80085ca:	e02f      	b.n	800862c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_WRITE_CB_ID :
        hlptim->AutoReloadWriteCallback = pCallback;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80085d2:	e02b      	b.n	800862c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_UP_CB_ID :
        hlptim->DirectionUpCallback = pCallback;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80085da:	e027      	b.n	800862c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
        hlptim->DirectionDownCallback = pCallback;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80085e2:	e023      	b.n	800862c <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 80085e4:	2317      	movs	r3, #23
 80085e6:	18fb      	adds	r3, r7, r3
 80085e8:	2201      	movs	r2, #1
 80085ea:	701a      	strb	r2, [r3, #0]
        break;
 80085ec:	e01e      	b.n	800862c <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2236      	movs	r2, #54	@ 0x36
 80085f2:	5c9b      	ldrb	r3, [r3, r2]
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d114      	bne.n	8008624 <HAL_LPTIM_RegisterCallback+0xcc>
  {
    switch (CallbackID)
 80085fa:	230b      	movs	r3, #11
 80085fc:	18fb      	adds	r3, r7, r3
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d002      	beq.n	800860a <HAL_LPTIM_RegisterCallback+0xb2>
 8008604:	2b01      	cmp	r3, #1
 8008606:	d004      	beq.n	8008612 <HAL_LPTIM_RegisterCallback+0xba>
 8008608:	e007      	b.n	800861a <HAL_LPTIM_RegisterCallback+0xc2>
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8008610:	e00c      	b.n	800862c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8008618:	e008      	b.n	800862c <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 800861a:	2317      	movs	r3, #23
 800861c:	18fb      	adds	r3, r7, r3
 800861e:	2201      	movs	r2, #1
 8008620:	701a      	strb	r2, [r3, #0]
        break;
 8008622:	e003      	b.n	800862c <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8008624:	2317      	movs	r3, #23
 8008626:	18fb      	adds	r3, r7, r3
 8008628:	2201      	movs	r2, #1
 800862a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800862c:	2317      	movs	r3, #23
 800862e:	18fb      	adds	r3, r7, r3
 8008630:	781b      	ldrb	r3, [r3, #0]
}
 8008632:	0018      	movs	r0, r3
 8008634:	46bd      	mov	sp, r7
 8008636:	b006      	add	sp, #24
 8008638:	bd80      	pop	{r7, pc}
 800863a:	46c0      	nop			@ (mov r8, r8)
 800863c:	0800dcc8 	.word	0x0800dcc8

08008640 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2236      	movs	r2, #54	@ 0x36
 800864c:	5c9b      	ldrb	r3, [r3, r2]
 800864e:	b2db      	uxtb	r3, r3
}
 8008650:	0018      	movs	r0, r3
 8008652:	46bd      	mov	sp, r7
 8008654:	b002      	add	sp, #8
 8008656:	bd80      	pop	{r7, pc}

08008658 <LPTIM_ResetCallback>:
  * @param  lptim pointer to a LPTIM_HandleTypeDef structure that contains
  *                the configuration information for LPTIM module.
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a0c      	ldr	r2, [pc, #48]	@ (8008694 <LPTIM_ResetCallback+0x3c>)
 8008664:	641a      	str	r2, [r3, #64]	@ 0x40
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a0b      	ldr	r2, [pc, #44]	@ (8008698 <LPTIM_ResetCallback+0x40>)
 800866a:	645a      	str	r2, [r3, #68]	@ 0x44
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a0b      	ldr	r2, [pc, #44]	@ (800869c <LPTIM_ResetCallback+0x44>)
 8008670:	649a      	str	r2, [r3, #72]	@ 0x48
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a0a      	ldr	r2, [pc, #40]	@ (80086a0 <LPTIM_ResetCallback+0x48>)
 8008676:	64da      	str	r2, [r3, #76]	@ 0x4c
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a0a      	ldr	r2, [pc, #40]	@ (80086a4 <LPTIM_ResetCallback+0x4c>)
 800867c:	651a      	str	r2, [r3, #80]	@ 0x50
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a09      	ldr	r2, [pc, #36]	@ (80086a8 <LPTIM_ResetCallback+0x50>)
 8008682:	655a      	str	r2, [r3, #84]	@ 0x54
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a09      	ldr	r2, [pc, #36]	@ (80086ac <LPTIM_ResetCallback+0x54>)
 8008688:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800868a:	46c0      	nop			@ (mov r8, r8)
 800868c:	46bd      	mov	sp, r7
 800868e:	b002      	add	sp, #8
 8008690:	bd80      	pop	{r7, pc}
 8008692:	46c0      	nop			@ (mov r8, r8)
 8008694:	080084e7 	.word	0x080084e7
 8008698:	080084f7 	.word	0x080084f7
 800869c:	08008507 	.word	0x08008507
 80086a0:	08008517 	.word	0x08008517
 80086a4:	08008527 	.word	0x08008527
 80086a8:	08008537 	.word	0x08008537
 80086ac:	08008547 	.word	0x08008547

080086b0 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80086ba:	230f      	movs	r3, #15
 80086bc:	18fb      	adds	r3, r7, r3
 80086be:	2200      	movs	r2, #0
 80086c0:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80086c2:	4b15      	ldr	r3, [pc, #84]	@ (8008718 <LPTIM_WaitForFlag+0x68>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4915      	ldr	r1, [pc, #84]	@ (800871c <LPTIM_WaitForFlag+0x6c>)
 80086c8:	0018      	movs	r0, r3
 80086ca:	f7f7 fd1d 	bl	8000108 <__udivsi3>
 80086ce:	0003      	movs	r3, r0
 80086d0:	001a      	movs	r2, r3
 80086d2:	0013      	movs	r3, r2
 80086d4:	015b      	lsls	r3, r3, #5
 80086d6:	1a9b      	subs	r3, r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	189b      	adds	r3, r3, r2
 80086dc:	00db      	lsls	r3, r3, #3
 80086de:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	3b01      	subs	r3, #1
 80086e4:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d103      	bne.n	80086f4 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 80086ec:	230f      	movs	r3, #15
 80086ee:	18fb      	adds	r3, r7, r3
 80086f0:	2203      	movs	r2, #3
 80086f2:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	4013      	ands	r3, r2
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	429a      	cmp	r2, r3
 8008702:	d002      	beq.n	800870a <LPTIM_WaitForFlag+0x5a>
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1ea      	bne.n	80086e0 <LPTIM_WaitForFlag+0x30>

  return result;
 800870a:	230f      	movs	r3, #15
 800870c:	18fb      	adds	r3, r7, r3
 800870e:	781b      	ldrb	r3, [r3, #0]
}
 8008710:	0018      	movs	r0, r3
 8008712:	46bd      	mov	sp, r7
 8008714:	b004      	add	sp, #16
 8008716:	bd80      	pop	{r7, pc}
 8008718:	20000440 	.word	0x20000440
 800871c:	00004e20 	.word	0x00004e20

08008720 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b08c      	sub	sp, #48	@ 0x30
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8008728:	2300      	movs	r3, #0
 800872a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800872c:	f3ef 8310 	mrs	r3, PRIMASK
 8008730:	60fb      	str	r3, [r7, #12]
  return(result);
 8008732:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8008734:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008736:	2301      	movs	r3, #1
 8008738:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	f383 8810 	msr	PRIMASK, r3
}
 8008740:	46c0      	nop			@ (mov r8, r8)
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a72      	ldr	r2, [pc, #456]	@ (8008910 <LPTIM_Disable+0x1f0>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d003      	beq.n	8008754 <LPTIM_Disable+0x34>
 800874c:	4a71      	ldr	r2, [pc, #452]	@ (8008914 <LPTIM_Disable+0x1f4>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d007      	beq.n	8008762 <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8008752:	e00d      	b.n	8008770 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008754:	4b70      	ldr	r3, [pc, #448]	@ (8008918 <LPTIM_Disable+0x1f8>)
 8008756:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008758:	23c0      	movs	r3, #192	@ 0xc0
 800875a:	031b      	lsls	r3, r3, #12
 800875c:	4013      	ands	r3, r2
 800875e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8008760:	e006      	b.n	8008770 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008762:	4b6d      	ldr	r3, [pc, #436]	@ (8008918 <LPTIM_Disable+0x1f8>)
 8008764:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008766:	23c0      	movs	r3, #192	@ 0xc0
 8008768:	039b      	lsls	r3, r3, #14
 800876a:	4013      	ands	r3, r2
 800876c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800876e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008796:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a5c      	ldr	r2, [pc, #368]	@ (8008910 <LPTIM_Disable+0x1f0>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d003      	beq.n	80087aa <LPTIM_Disable+0x8a>
 80087a2:	4a5c      	ldr	r2, [pc, #368]	@ (8008914 <LPTIM_Disable+0x1f4>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d00e      	beq.n	80087c6 <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 80087a8:	e01b      	b.n	80087e2 <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80087aa:	4b5b      	ldr	r3, [pc, #364]	@ (8008918 <LPTIM_Disable+0x1f8>)
 80087ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ae:	4b5a      	ldr	r3, [pc, #360]	@ (8008918 <LPTIM_Disable+0x1f8>)
 80087b0:	2180      	movs	r1, #128	@ 0x80
 80087b2:	0609      	lsls	r1, r1, #24
 80087b4:	430a      	orrs	r2, r1
 80087b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80087b8:	4b57      	ldr	r3, [pc, #348]	@ (8008918 <LPTIM_Disable+0x1f8>)
 80087ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087bc:	4b56      	ldr	r3, [pc, #344]	@ (8008918 <LPTIM_Disable+0x1f8>)
 80087be:	0052      	lsls	r2, r2, #1
 80087c0:	0852      	lsrs	r2, r2, #1
 80087c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 80087c4:	e00d      	b.n	80087e2 <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80087c6:	4b54      	ldr	r3, [pc, #336]	@ (8008918 <LPTIM_Disable+0x1f8>)
 80087c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ca:	4b53      	ldr	r3, [pc, #332]	@ (8008918 <LPTIM_Disable+0x1f8>)
 80087cc:	2180      	movs	r1, #128	@ 0x80
 80087ce:	05c9      	lsls	r1, r1, #23
 80087d0:	430a      	orrs	r2, r1
 80087d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80087d4:	4b50      	ldr	r3, [pc, #320]	@ (8008918 <LPTIM_Disable+0x1f8>)
 80087d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087d8:	4b4f      	ldr	r3, [pc, #316]	@ (8008918 <LPTIM_Disable+0x1f8>)
 80087da:	4950      	ldr	r1, [pc, #320]	@ (800891c <LPTIM_Disable+0x1fc>)
 80087dc:	400a      	ands	r2, r1
 80087de:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 80087e0:	46c0      	nop			@ (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d103      	bne.n	80087f0 <LPTIM_Disable+0xd0>
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d100      	bne.n	80087f0 <LPTIM_Disable+0xd0>
 80087ee:	e071      	b.n	80088d4 <LPTIM_Disable+0x1b4>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a46      	ldr	r2, [pc, #280]	@ (8008910 <LPTIM_Disable+0x1f0>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d003      	beq.n	8008802 <LPTIM_Disable+0xe2>
 80087fa:	4a46      	ldr	r2, [pc, #280]	@ (8008914 <LPTIM_Disable+0x1f4>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d007      	beq.n	8008810 <LPTIM_Disable+0xf0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8008800:	e00d      	b.n	800881e <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8008802:	4b45      	ldr	r3, [pc, #276]	@ (8008918 <LPTIM_Disable+0x1f8>)
 8008804:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008806:	4b44      	ldr	r3, [pc, #272]	@ (8008918 <LPTIM_Disable+0x1f8>)
 8008808:	4945      	ldr	r1, [pc, #276]	@ (8008920 <LPTIM_Disable+0x200>)
 800880a:	400a      	ands	r2, r1
 800880c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800880e:	e006      	b.n	800881e <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8008810:	4b41      	ldr	r3, [pc, #260]	@ (8008918 <LPTIM_Disable+0x1f8>)
 8008812:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008814:	4b40      	ldr	r3, [pc, #256]	@ (8008918 <LPTIM_Disable+0x1f8>)
 8008816:	4943      	ldr	r1, [pc, #268]	@ (8008924 <LPTIM_Disable+0x204>)
 8008818:	400a      	ands	r2, r1
 800881a:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800881c:	46c0      	nop			@ (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d01b      	beq.n	800885c <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	691a      	ldr	r2, [r3, #16]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2101      	movs	r1, #1
 8008830:	430a      	orrs	r2, r1
 8008832:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	69fa      	ldr	r2, [r7, #28]
 800883a:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2108      	movs	r1, #8
 8008840:	0018      	movs	r0, r3
 8008842:	f7ff ff35 	bl	80086b0 <LPTIM_WaitForFlag>
 8008846:	0003      	movs	r3, r0
 8008848:	2b03      	cmp	r3, #3
 800884a:	d103      	bne.n	8008854 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2236      	movs	r2, #54	@ 0x36
 8008850:	2103      	movs	r1, #3
 8008852:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2208      	movs	r2, #8
 800885a:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d01b      	beq.n	800889a <LPTIM_Disable+0x17a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	691a      	ldr	r2, [r3, #16]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2101      	movs	r1, #1
 800886e:	430a      	orrs	r2, r1
 8008870:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	69ba      	ldr	r2, [r7, #24]
 8008878:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2110      	movs	r1, #16
 800887e:	0018      	movs	r0, r3
 8008880:	f7ff ff16 	bl	80086b0 <LPTIM_WaitForFlag>
 8008884:	0003      	movs	r3, r0
 8008886:	2b03      	cmp	r3, #3
 8008888:	d103      	bne.n	8008892 <LPTIM_Disable+0x172>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2236      	movs	r2, #54	@ 0x36
 800888e:	2103      	movs	r1, #3
 8008890:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2210      	movs	r2, #16
 8008898:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a1c      	ldr	r2, [pc, #112]	@ (8008910 <LPTIM_Disable+0x1f0>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d003      	beq.n	80088ac <LPTIM_Disable+0x18c>
 80088a4:	4a1b      	ldr	r2, [pc, #108]	@ (8008914 <LPTIM_Disable+0x1f4>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d00a      	beq.n	80088c0 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80088aa:	e013      	b.n	80088d4 <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80088ac:	4b1a      	ldr	r3, [pc, #104]	@ (8008918 <LPTIM_Disable+0x1f8>)
 80088ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088b0:	4a1b      	ldr	r2, [pc, #108]	@ (8008920 <LPTIM_Disable+0x200>)
 80088b2:	4013      	ands	r3, r2
 80088b4:	0019      	movs	r1, r3
 80088b6:	4b18      	ldr	r3, [pc, #96]	@ (8008918 <LPTIM_Disable+0x1f8>)
 80088b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088ba:	430a      	orrs	r2, r1
 80088bc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80088be:	e009      	b.n	80088d4 <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80088c0:	4b15      	ldr	r3, [pc, #84]	@ (8008918 <LPTIM_Disable+0x1f8>)
 80088c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088c4:	4a17      	ldr	r2, [pc, #92]	@ (8008924 <LPTIM_Disable+0x204>)
 80088c6:	4013      	ands	r3, r2
 80088c8:	0019      	movs	r1, r3
 80088ca:	4b13      	ldr	r3, [pc, #76]	@ (8008918 <LPTIM_Disable+0x1f8>)
 80088cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088ce:	430a      	orrs	r2, r1
 80088d0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80088d2:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	691a      	ldr	r2, [r3, #16]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2101      	movs	r1, #1
 80088e0:	438a      	bics	r2, r1
 80088e2:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088ea:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6a3a      	ldr	r2, [r7, #32]
 80088f2:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	697a      	ldr	r2, [r7, #20]
 80088fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80088fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	f383 8810 	msr	PRIMASK, r3
}
 8008906:	46c0      	nop			@ (mov r8, r8)

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8008908:	46c0      	nop			@ (mov r8, r8)
 800890a:	46bd      	mov	sp, r7
 800890c:	b00c      	add	sp, #48	@ 0x30
 800890e:	bd80      	pop	{r7, pc}
 8008910:	40007c00 	.word	0x40007c00
 8008914:	40009400 	.word	0x40009400
 8008918:	40021000 	.word	0x40021000
 800891c:	bfffffff 	.word	0xbfffffff
 8008920:	fff3ffff 	.word	0xfff3ffff
 8008924:	ffcfffff 	.word	0xffcfffff

08008928 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008930:	4b19      	ldr	r3, [pc, #100]	@ (8008998 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a19      	ldr	r2, [pc, #100]	@ (800899c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8008936:	4013      	ands	r3, r2
 8008938:	0019      	movs	r1, r3
 800893a:	4b17      	ldr	r3, [pc, #92]	@ (8008998 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	430a      	orrs	r2, r1
 8008940:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	2380      	movs	r3, #128	@ 0x80
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	429a      	cmp	r2, r3
 800894a:	d11f      	bne.n	800898c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800894c:	4b14      	ldr	r3, [pc, #80]	@ (80089a0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	0013      	movs	r3, r2
 8008952:	005b      	lsls	r3, r3, #1
 8008954:	189b      	adds	r3, r3, r2
 8008956:	005b      	lsls	r3, r3, #1
 8008958:	4912      	ldr	r1, [pc, #72]	@ (80089a4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800895a:	0018      	movs	r0, r3
 800895c:	f7f7 fbd4 	bl	8000108 <__udivsi3>
 8008960:	0003      	movs	r3, r0
 8008962:	3301      	adds	r3, #1
 8008964:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008966:	e008      	b.n	800897a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d003      	beq.n	8008976 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	3b01      	subs	r3, #1
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	e001      	b.n	800897a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8008976:	2303      	movs	r3, #3
 8008978:	e009      	b.n	800898e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800897a:	4b07      	ldr	r3, [pc, #28]	@ (8008998 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800897c:	695a      	ldr	r2, [r3, #20]
 800897e:	2380      	movs	r3, #128	@ 0x80
 8008980:	00db      	lsls	r3, r3, #3
 8008982:	401a      	ands	r2, r3
 8008984:	2380      	movs	r3, #128	@ 0x80
 8008986:	00db      	lsls	r3, r3, #3
 8008988:	429a      	cmp	r2, r3
 800898a:	d0ed      	beq.n	8008968 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	0018      	movs	r0, r3
 8008990:	46bd      	mov	sp, r7
 8008992:	b004      	add	sp, #16
 8008994:	bd80      	pop	{r7, pc}
 8008996:	46c0      	nop			@ (mov r8, r8)
 8008998:	40007000 	.word	0x40007000
 800899c:	fffff9ff 	.word	0xfffff9ff
 80089a0:	20000440 	.word	0x20000440
 80089a4:	000f4240 	.word	0x000f4240

080089a8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80089ac:	4b03      	ldr	r3, [pc, #12]	@ (80089bc <LL_RCC_GetAPB1Prescaler+0x14>)
 80089ae:	689a      	ldr	r2, [r3, #8]
 80089b0:	23e0      	movs	r3, #224	@ 0xe0
 80089b2:	01db      	lsls	r3, r3, #7
 80089b4:	4013      	ands	r3, r2
}
 80089b6:	0018      	movs	r0, r3
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	40021000 	.word	0x40021000

080089c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b088      	sub	sp, #32
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d101      	bne.n	80089d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e2fe      	b.n	8008fd0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2201      	movs	r2, #1
 80089d8:	4013      	ands	r3, r2
 80089da:	d100      	bne.n	80089de <HAL_RCC_OscConfig+0x1e>
 80089dc:	e07c      	b.n	8008ad8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089de:	4bc3      	ldr	r3, [pc, #780]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	2238      	movs	r2, #56	@ 0x38
 80089e4:	4013      	ands	r3, r2
 80089e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80089e8:	4bc0      	ldr	r3, [pc, #768]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	2203      	movs	r2, #3
 80089ee:	4013      	ands	r3, r2
 80089f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	2b10      	cmp	r3, #16
 80089f6:	d102      	bne.n	80089fe <HAL_RCC_OscConfig+0x3e>
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d002      	beq.n	8008a04 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	2b08      	cmp	r3, #8
 8008a02:	d10b      	bne.n	8008a1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a04:	4bb9      	ldr	r3, [pc, #740]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	2380      	movs	r3, #128	@ 0x80
 8008a0a:	029b      	lsls	r3, r3, #10
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	d062      	beq.n	8008ad6 <HAL_RCC_OscConfig+0x116>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d15e      	bne.n	8008ad6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e2d9      	b.n	8008fd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685a      	ldr	r2, [r3, #4]
 8008a20:	2380      	movs	r3, #128	@ 0x80
 8008a22:	025b      	lsls	r3, r3, #9
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d107      	bne.n	8008a38 <HAL_RCC_OscConfig+0x78>
 8008a28:	4bb0      	ldr	r3, [pc, #704]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	4baf      	ldr	r3, [pc, #700]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008a2e:	2180      	movs	r1, #128	@ 0x80
 8008a30:	0249      	lsls	r1, r1, #9
 8008a32:	430a      	orrs	r2, r1
 8008a34:	601a      	str	r2, [r3, #0]
 8008a36:	e020      	b.n	8008a7a <HAL_RCC_OscConfig+0xba>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	23a0      	movs	r3, #160	@ 0xa0
 8008a3e:	02db      	lsls	r3, r3, #11
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d10e      	bne.n	8008a62 <HAL_RCC_OscConfig+0xa2>
 8008a44:	4ba9      	ldr	r3, [pc, #676]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	4ba8      	ldr	r3, [pc, #672]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008a4a:	2180      	movs	r1, #128	@ 0x80
 8008a4c:	02c9      	lsls	r1, r1, #11
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	601a      	str	r2, [r3, #0]
 8008a52:	4ba6      	ldr	r3, [pc, #664]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	4ba5      	ldr	r3, [pc, #660]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008a58:	2180      	movs	r1, #128	@ 0x80
 8008a5a:	0249      	lsls	r1, r1, #9
 8008a5c:	430a      	orrs	r2, r1
 8008a5e:	601a      	str	r2, [r3, #0]
 8008a60:	e00b      	b.n	8008a7a <HAL_RCC_OscConfig+0xba>
 8008a62:	4ba2      	ldr	r3, [pc, #648]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	4ba1      	ldr	r3, [pc, #644]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008a68:	49a1      	ldr	r1, [pc, #644]	@ (8008cf0 <HAL_RCC_OscConfig+0x330>)
 8008a6a:	400a      	ands	r2, r1
 8008a6c:	601a      	str	r2, [r3, #0]
 8008a6e:	4b9f      	ldr	r3, [pc, #636]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	4b9e      	ldr	r3, [pc, #632]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008a74:	499f      	ldr	r1, [pc, #636]	@ (8008cf4 <HAL_RCC_OscConfig+0x334>)
 8008a76:	400a      	ands	r2, r1
 8008a78:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d014      	beq.n	8008aac <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a82:	f7fd f973 	bl	8005d6c <HAL_GetTick>
 8008a86:	0003      	movs	r3, r0
 8008a88:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008a8a:	e008      	b.n	8008a9e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a8c:	f7fd f96e 	bl	8005d6c <HAL_GetTick>
 8008a90:	0002      	movs	r2, r0
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	2b64      	cmp	r3, #100	@ 0x64
 8008a98:	d901      	bls.n	8008a9e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e298      	b.n	8008fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008a9e:	4b93      	ldr	r3, [pc, #588]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	2380      	movs	r3, #128	@ 0x80
 8008aa4:	029b      	lsls	r3, r3, #10
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	d0f0      	beq.n	8008a8c <HAL_RCC_OscConfig+0xcc>
 8008aaa:	e015      	b.n	8008ad8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aac:	f7fd f95e 	bl	8005d6c <HAL_GetTick>
 8008ab0:	0003      	movs	r3, r0
 8008ab2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008ab4:	e008      	b.n	8008ac8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ab6:	f7fd f959 	bl	8005d6c <HAL_GetTick>
 8008aba:	0002      	movs	r2, r0
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	1ad3      	subs	r3, r2, r3
 8008ac0:	2b64      	cmp	r3, #100	@ 0x64
 8008ac2:	d901      	bls.n	8008ac8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e283      	b.n	8008fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008ac8:	4b88      	ldr	r3, [pc, #544]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	2380      	movs	r3, #128	@ 0x80
 8008ace:	029b      	lsls	r3, r3, #10
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	d1f0      	bne.n	8008ab6 <HAL_RCC_OscConfig+0xf6>
 8008ad4:	e000      	b.n	8008ad8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ad6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2202      	movs	r2, #2
 8008ade:	4013      	ands	r3, r2
 8008ae0:	d100      	bne.n	8008ae4 <HAL_RCC_OscConfig+0x124>
 8008ae2:	e099      	b.n	8008c18 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ae4:	4b81      	ldr	r3, [pc, #516]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	2238      	movs	r2, #56	@ 0x38
 8008aea:	4013      	ands	r3, r2
 8008aec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008aee:	4b7f      	ldr	r3, [pc, #508]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	2203      	movs	r2, #3
 8008af4:	4013      	ands	r3, r2
 8008af6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	2b10      	cmp	r3, #16
 8008afc:	d102      	bne.n	8008b04 <HAL_RCC_OscConfig+0x144>
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d002      	beq.n	8008b0a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d135      	bne.n	8008b76 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b0a:	4b78      	ldr	r3, [pc, #480]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	2380      	movs	r3, #128	@ 0x80
 8008b10:	00db      	lsls	r3, r3, #3
 8008b12:	4013      	ands	r3, r2
 8008b14:	d005      	beq.n	8008b22 <HAL_RCC_OscConfig+0x162>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d101      	bne.n	8008b22 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e256      	b.n	8008fd0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b22:	4b72      	ldr	r3, [pc, #456]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	4a74      	ldr	r2, [pc, #464]	@ (8008cf8 <HAL_RCC_OscConfig+0x338>)
 8008b28:	4013      	ands	r3, r2
 8008b2a:	0019      	movs	r1, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	021a      	lsls	r2, r3, #8
 8008b32:	4b6e      	ldr	r3, [pc, #440]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008b34:	430a      	orrs	r2, r1
 8008b36:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d112      	bne.n	8008b64 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008b3e:	4b6b      	ldr	r3, [pc, #428]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a6e      	ldr	r2, [pc, #440]	@ (8008cfc <HAL_RCC_OscConfig+0x33c>)
 8008b44:	4013      	ands	r3, r2
 8008b46:	0019      	movs	r1, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	691a      	ldr	r2, [r3, #16]
 8008b4c:	4b67      	ldr	r3, [pc, #412]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008b4e:	430a      	orrs	r2, r1
 8008b50:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008b52:	4b66      	ldr	r3, [pc, #408]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	0adb      	lsrs	r3, r3, #11
 8008b58:	2207      	movs	r2, #7
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	4a68      	ldr	r2, [pc, #416]	@ (8008d00 <HAL_RCC_OscConfig+0x340>)
 8008b5e:	40da      	lsrs	r2, r3
 8008b60:	4b68      	ldr	r3, [pc, #416]	@ (8008d04 <HAL_RCC_OscConfig+0x344>)
 8008b62:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008b64:	4b68      	ldr	r3, [pc, #416]	@ (8008d08 <HAL_RCC_OscConfig+0x348>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	0018      	movs	r0, r3
 8008b6a:	f7fd f8a3 	bl	8005cb4 <HAL_InitTick>
 8008b6e:	1e03      	subs	r3, r0, #0
 8008b70:	d051      	beq.n	8008c16 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e22c      	b.n	8008fd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d030      	beq.n	8008be0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008b7e:	4b5b      	ldr	r3, [pc, #364]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a5e      	ldr	r2, [pc, #376]	@ (8008cfc <HAL_RCC_OscConfig+0x33c>)
 8008b84:	4013      	ands	r3, r2
 8008b86:	0019      	movs	r1, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	691a      	ldr	r2, [r3, #16]
 8008b8c:	4b57      	ldr	r3, [pc, #348]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8008b92:	4b56      	ldr	r3, [pc, #344]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	4b55      	ldr	r3, [pc, #340]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008b98:	2180      	movs	r1, #128	@ 0x80
 8008b9a:	0049      	lsls	r1, r1, #1
 8008b9c:	430a      	orrs	r2, r1
 8008b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ba0:	f7fd f8e4 	bl	8005d6c <HAL_GetTick>
 8008ba4:	0003      	movs	r3, r0
 8008ba6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ba8:	e008      	b.n	8008bbc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008baa:	f7fd f8df 	bl	8005d6c <HAL_GetTick>
 8008bae:	0002      	movs	r2, r0
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d901      	bls.n	8008bbc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e209      	b.n	8008fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008bbc:	4b4b      	ldr	r3, [pc, #300]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	2380      	movs	r3, #128	@ 0x80
 8008bc2:	00db      	lsls	r3, r3, #3
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	d0f0      	beq.n	8008baa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bc8:	4b48      	ldr	r3, [pc, #288]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	4a4a      	ldr	r2, [pc, #296]	@ (8008cf8 <HAL_RCC_OscConfig+0x338>)
 8008bce:	4013      	ands	r3, r2
 8008bd0:	0019      	movs	r1, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	021a      	lsls	r2, r3, #8
 8008bd8:	4b44      	ldr	r3, [pc, #272]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008bda:	430a      	orrs	r2, r1
 8008bdc:	605a      	str	r2, [r3, #4]
 8008bde:	e01b      	b.n	8008c18 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008be0:	4b42      	ldr	r3, [pc, #264]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	4b41      	ldr	r3, [pc, #260]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008be6:	4949      	ldr	r1, [pc, #292]	@ (8008d0c <HAL_RCC_OscConfig+0x34c>)
 8008be8:	400a      	ands	r2, r1
 8008bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bec:	f7fd f8be 	bl	8005d6c <HAL_GetTick>
 8008bf0:	0003      	movs	r3, r0
 8008bf2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008bf4:	e008      	b.n	8008c08 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008bf6:	f7fd f8b9 	bl	8005d6c <HAL_GetTick>
 8008bfa:	0002      	movs	r2, r0
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d901      	bls.n	8008c08 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e1e3      	b.n	8008fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c08:	4b38      	ldr	r3, [pc, #224]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	2380      	movs	r3, #128	@ 0x80
 8008c0e:	00db      	lsls	r3, r3, #3
 8008c10:	4013      	ands	r3, r2
 8008c12:	d1f0      	bne.n	8008bf6 <HAL_RCC_OscConfig+0x236>
 8008c14:	e000      	b.n	8008c18 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c16:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2208      	movs	r2, #8
 8008c1e:	4013      	ands	r3, r2
 8008c20:	d047      	beq.n	8008cb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008c22:	4b32      	ldr	r3, [pc, #200]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	2238      	movs	r2, #56	@ 0x38
 8008c28:	4013      	ands	r3, r2
 8008c2a:	2b18      	cmp	r3, #24
 8008c2c:	d10a      	bne.n	8008c44 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008c2e:	4b2f      	ldr	r3, [pc, #188]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c32:	2202      	movs	r2, #2
 8008c34:	4013      	ands	r3, r2
 8008c36:	d03c      	beq.n	8008cb2 <HAL_RCC_OscConfig+0x2f2>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d138      	bne.n	8008cb2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	e1c5      	b.n	8008fd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d019      	beq.n	8008c80 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008c4c:	4b27      	ldr	r3, [pc, #156]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008c4e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008c50:	4b26      	ldr	r3, [pc, #152]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008c52:	2101      	movs	r1, #1
 8008c54:	430a      	orrs	r2, r1
 8008c56:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c58:	f7fd f888 	bl	8005d6c <HAL_GetTick>
 8008c5c:	0003      	movs	r3, r0
 8008c5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c60:	e008      	b.n	8008c74 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c62:	f7fd f883 	bl	8005d6c <HAL_GetTick>
 8008c66:	0002      	movs	r2, r0
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	1ad3      	subs	r3, r2, r3
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d901      	bls.n	8008c74 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008c70:	2303      	movs	r3, #3
 8008c72:	e1ad      	b.n	8008fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c74:	4b1d      	ldr	r3, [pc, #116]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c78:	2202      	movs	r2, #2
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	d0f1      	beq.n	8008c62 <HAL_RCC_OscConfig+0x2a2>
 8008c7e:	e018      	b.n	8008cb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008c80:	4b1a      	ldr	r3, [pc, #104]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008c82:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008c84:	4b19      	ldr	r3, [pc, #100]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008c86:	2101      	movs	r1, #1
 8008c88:	438a      	bics	r2, r1
 8008c8a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c8c:	f7fd f86e 	bl	8005d6c <HAL_GetTick>
 8008c90:	0003      	movs	r3, r0
 8008c92:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008c94:	e008      	b.n	8008ca8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c96:	f7fd f869 	bl	8005d6c <HAL_GetTick>
 8008c9a:	0002      	movs	r2, r0
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d901      	bls.n	8008ca8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	e193      	b.n	8008fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008ca8:	4b10      	ldr	r3, [pc, #64]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008caa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cac:	2202      	movs	r2, #2
 8008cae:	4013      	ands	r3, r2
 8008cb0:	d1f1      	bne.n	8008c96 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2204      	movs	r2, #4
 8008cb8:	4013      	ands	r3, r2
 8008cba:	d100      	bne.n	8008cbe <HAL_RCC_OscConfig+0x2fe>
 8008cbc:	e0c6      	b.n	8008e4c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cbe:	231f      	movs	r3, #31
 8008cc0:	18fb      	adds	r3, r7, r3
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008cc6:	4b09      	ldr	r3, [pc, #36]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	2238      	movs	r2, #56	@ 0x38
 8008ccc:	4013      	ands	r3, r2
 8008cce:	2b20      	cmp	r3, #32
 8008cd0:	d11e      	bne.n	8008d10 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8008cd2:	4b06      	ldr	r3, [pc, #24]	@ (8008cec <HAL_RCC_OscConfig+0x32c>)
 8008cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	4013      	ands	r3, r2
 8008cda:	d100      	bne.n	8008cde <HAL_RCC_OscConfig+0x31e>
 8008cdc:	e0b6      	b.n	8008e4c <HAL_RCC_OscConfig+0x48c>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d000      	beq.n	8008ce8 <HAL_RCC_OscConfig+0x328>
 8008ce6:	e0b1      	b.n	8008e4c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e171      	b.n	8008fd0 <HAL_RCC_OscConfig+0x610>
 8008cec:	40021000 	.word	0x40021000
 8008cf0:	fffeffff 	.word	0xfffeffff
 8008cf4:	fffbffff 	.word	0xfffbffff
 8008cf8:	ffff80ff 	.word	0xffff80ff
 8008cfc:	ffffc7ff 	.word	0xffffc7ff
 8008d00:	00f42400 	.word	0x00f42400
 8008d04:	20000440 	.word	0x20000440
 8008d08:	20000444 	.word	0x20000444
 8008d0c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008d10:	4bb1      	ldr	r3, [pc, #708]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008d12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d14:	2380      	movs	r3, #128	@ 0x80
 8008d16:	055b      	lsls	r3, r3, #21
 8008d18:	4013      	ands	r3, r2
 8008d1a:	d101      	bne.n	8008d20 <HAL_RCC_OscConfig+0x360>
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e000      	b.n	8008d22 <HAL_RCC_OscConfig+0x362>
 8008d20:	2300      	movs	r3, #0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d011      	beq.n	8008d4a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008d26:	4bac      	ldr	r3, [pc, #688]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008d28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d2a:	4bab      	ldr	r3, [pc, #684]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008d2c:	2180      	movs	r1, #128	@ 0x80
 8008d2e:	0549      	lsls	r1, r1, #21
 8008d30:	430a      	orrs	r2, r1
 8008d32:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008d34:	4ba8      	ldr	r3, [pc, #672]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008d36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d38:	2380      	movs	r3, #128	@ 0x80
 8008d3a:	055b      	lsls	r3, r3, #21
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	60fb      	str	r3, [r7, #12]
 8008d40:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008d42:	231f      	movs	r3, #31
 8008d44:	18fb      	adds	r3, r7, r3
 8008d46:	2201      	movs	r2, #1
 8008d48:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d4a:	4ba4      	ldr	r3, [pc, #656]	@ (8008fdc <HAL_RCC_OscConfig+0x61c>)
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	2380      	movs	r3, #128	@ 0x80
 8008d50:	005b      	lsls	r3, r3, #1
 8008d52:	4013      	ands	r3, r2
 8008d54:	d11a      	bne.n	8008d8c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d56:	4ba1      	ldr	r3, [pc, #644]	@ (8008fdc <HAL_RCC_OscConfig+0x61c>)
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	4ba0      	ldr	r3, [pc, #640]	@ (8008fdc <HAL_RCC_OscConfig+0x61c>)
 8008d5c:	2180      	movs	r1, #128	@ 0x80
 8008d5e:	0049      	lsls	r1, r1, #1
 8008d60:	430a      	orrs	r2, r1
 8008d62:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008d64:	f7fd f802 	bl	8005d6c <HAL_GetTick>
 8008d68:	0003      	movs	r3, r0
 8008d6a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d6c:	e008      	b.n	8008d80 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d6e:	f7fc fffd 	bl	8005d6c <HAL_GetTick>
 8008d72:	0002      	movs	r2, r0
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	d901      	bls.n	8008d80 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e127      	b.n	8008fd0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d80:	4b96      	ldr	r3, [pc, #600]	@ (8008fdc <HAL_RCC_OscConfig+0x61c>)
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	2380      	movs	r3, #128	@ 0x80
 8008d86:	005b      	lsls	r3, r3, #1
 8008d88:	4013      	ands	r3, r2
 8008d8a:	d0f0      	beq.n	8008d6e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d106      	bne.n	8008da2 <HAL_RCC_OscConfig+0x3e2>
 8008d94:	4b90      	ldr	r3, [pc, #576]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008d96:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008d98:	4b8f      	ldr	r3, [pc, #572]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008d9a:	2101      	movs	r1, #1
 8008d9c:	430a      	orrs	r2, r1
 8008d9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008da0:	e01c      	b.n	8008ddc <HAL_RCC_OscConfig+0x41c>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	2b05      	cmp	r3, #5
 8008da8:	d10c      	bne.n	8008dc4 <HAL_RCC_OscConfig+0x404>
 8008daa:	4b8b      	ldr	r3, [pc, #556]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008dac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008dae:	4b8a      	ldr	r3, [pc, #552]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008db0:	2104      	movs	r1, #4
 8008db2:	430a      	orrs	r2, r1
 8008db4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008db6:	4b88      	ldr	r3, [pc, #544]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008db8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008dba:	4b87      	ldr	r3, [pc, #540]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008dbc:	2101      	movs	r1, #1
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008dc2:	e00b      	b.n	8008ddc <HAL_RCC_OscConfig+0x41c>
 8008dc4:	4b84      	ldr	r3, [pc, #528]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008dc6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008dc8:	4b83      	ldr	r3, [pc, #524]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008dca:	2101      	movs	r1, #1
 8008dcc:	438a      	bics	r2, r1
 8008dce:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008dd0:	4b81      	ldr	r3, [pc, #516]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008dd2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008dd4:	4b80      	ldr	r3, [pc, #512]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008dd6:	2104      	movs	r1, #4
 8008dd8:	438a      	bics	r2, r1
 8008dda:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d014      	beq.n	8008e0e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008de4:	f7fc ffc2 	bl	8005d6c <HAL_GetTick>
 8008de8:	0003      	movs	r3, r0
 8008dea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008dec:	e009      	b.n	8008e02 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dee:	f7fc ffbd 	bl	8005d6c <HAL_GetTick>
 8008df2:	0002      	movs	r2, r0
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	4a79      	ldr	r2, [pc, #484]	@ (8008fe0 <HAL_RCC_OscConfig+0x620>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d901      	bls.n	8008e02 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e0e6      	b.n	8008fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e02:	4b75      	ldr	r3, [pc, #468]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e06:	2202      	movs	r2, #2
 8008e08:	4013      	ands	r3, r2
 8008e0a:	d0f0      	beq.n	8008dee <HAL_RCC_OscConfig+0x42e>
 8008e0c:	e013      	b.n	8008e36 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e0e:	f7fc ffad 	bl	8005d6c <HAL_GetTick>
 8008e12:	0003      	movs	r3, r0
 8008e14:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e16:	e009      	b.n	8008e2c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e18:	f7fc ffa8 	bl	8005d6c <HAL_GetTick>
 8008e1c:	0002      	movs	r2, r0
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	4a6f      	ldr	r2, [pc, #444]	@ (8008fe0 <HAL_RCC_OscConfig+0x620>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d901      	bls.n	8008e2c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	e0d1      	b.n	8008fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e2c:	4b6a      	ldr	r3, [pc, #424]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e30:	2202      	movs	r2, #2
 8008e32:	4013      	ands	r3, r2
 8008e34:	d1f0      	bne.n	8008e18 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008e36:	231f      	movs	r3, #31
 8008e38:	18fb      	adds	r3, r7, r3
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d105      	bne.n	8008e4c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008e40:	4b65      	ldr	r3, [pc, #404]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008e42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e44:	4b64      	ldr	r3, [pc, #400]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008e46:	4967      	ldr	r1, [pc, #412]	@ (8008fe4 <HAL_RCC_OscConfig+0x624>)
 8008e48:	400a      	ands	r2, r1
 8008e4a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	69db      	ldr	r3, [r3, #28]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d100      	bne.n	8008e56 <HAL_RCC_OscConfig+0x496>
 8008e54:	e0bb      	b.n	8008fce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008e56:	4b60      	ldr	r3, [pc, #384]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	2238      	movs	r2, #56	@ 0x38
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	2b10      	cmp	r3, #16
 8008e60:	d100      	bne.n	8008e64 <HAL_RCC_OscConfig+0x4a4>
 8008e62:	e07b      	b.n	8008f5c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	69db      	ldr	r3, [r3, #28]
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d156      	bne.n	8008f1a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e6c:	4b5a      	ldr	r3, [pc, #360]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	4b59      	ldr	r3, [pc, #356]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008e72:	495d      	ldr	r1, [pc, #372]	@ (8008fe8 <HAL_RCC_OscConfig+0x628>)
 8008e74:	400a      	ands	r2, r1
 8008e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e78:	f7fc ff78 	bl	8005d6c <HAL_GetTick>
 8008e7c:	0003      	movs	r3, r0
 8008e7e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e80:	e008      	b.n	8008e94 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e82:	f7fc ff73 	bl	8005d6c <HAL_GetTick>
 8008e86:	0002      	movs	r2, r0
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d901      	bls.n	8008e94 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008e90:	2303      	movs	r3, #3
 8008e92:	e09d      	b.n	8008fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e94:	4b50      	ldr	r3, [pc, #320]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	2380      	movs	r3, #128	@ 0x80
 8008e9a:	049b      	lsls	r3, r3, #18
 8008e9c:	4013      	ands	r3, r2
 8008e9e:	d1f0      	bne.n	8008e82 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ea0:	4b4d      	ldr	r3, [pc, #308]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	4a51      	ldr	r2, [pc, #324]	@ (8008fec <HAL_RCC_OscConfig+0x62c>)
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	0019      	movs	r1, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6a1a      	ldr	r2, [r3, #32]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eb2:	431a      	orrs	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb8:	021b      	lsls	r3, r3, #8
 8008eba:	431a      	orrs	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec0:	431a      	orrs	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ec6:	431a      	orrs	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ecc:	431a      	orrs	r2, r3
 8008ece:	4b42      	ldr	r3, [pc, #264]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008ed0:	430a      	orrs	r2, r1
 8008ed2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ed4:	4b40      	ldr	r3, [pc, #256]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	4b3f      	ldr	r3, [pc, #252]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008eda:	2180      	movs	r1, #128	@ 0x80
 8008edc:	0449      	lsls	r1, r1, #17
 8008ede:	430a      	orrs	r2, r1
 8008ee0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008ee2:	4b3d      	ldr	r3, [pc, #244]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008ee4:	68da      	ldr	r2, [r3, #12]
 8008ee6:	4b3c      	ldr	r3, [pc, #240]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008ee8:	2180      	movs	r1, #128	@ 0x80
 8008eea:	0549      	lsls	r1, r1, #21
 8008eec:	430a      	orrs	r2, r1
 8008eee:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ef0:	f7fc ff3c 	bl	8005d6c <HAL_GetTick>
 8008ef4:	0003      	movs	r3, r0
 8008ef6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ef8:	e008      	b.n	8008f0c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008efa:	f7fc ff37 	bl	8005d6c <HAL_GetTick>
 8008efe:	0002      	movs	r2, r0
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d901      	bls.n	8008f0c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e061      	b.n	8008fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f0c:	4b32      	ldr	r3, [pc, #200]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	2380      	movs	r3, #128	@ 0x80
 8008f12:	049b      	lsls	r3, r3, #18
 8008f14:	4013      	ands	r3, r2
 8008f16:	d0f0      	beq.n	8008efa <HAL_RCC_OscConfig+0x53a>
 8008f18:	e059      	b.n	8008fce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	4b2e      	ldr	r3, [pc, #184]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008f20:	4931      	ldr	r1, [pc, #196]	@ (8008fe8 <HAL_RCC_OscConfig+0x628>)
 8008f22:	400a      	ands	r2, r1
 8008f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f26:	f7fc ff21 	bl	8005d6c <HAL_GetTick>
 8008f2a:	0003      	movs	r3, r0
 8008f2c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f2e:	e008      	b.n	8008f42 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f30:	f7fc ff1c 	bl	8005d6c <HAL_GetTick>
 8008f34:	0002      	movs	r2, r0
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d901      	bls.n	8008f42 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e046      	b.n	8008fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f42:	4b25      	ldr	r3, [pc, #148]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	2380      	movs	r3, #128	@ 0x80
 8008f48:	049b      	lsls	r3, r3, #18
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	d1f0      	bne.n	8008f30 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8008f4e:	4b22      	ldr	r3, [pc, #136]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008f50:	68da      	ldr	r2, [r3, #12]
 8008f52:	4b21      	ldr	r3, [pc, #132]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008f54:	4926      	ldr	r1, [pc, #152]	@ (8008ff0 <HAL_RCC_OscConfig+0x630>)
 8008f56:	400a      	ands	r2, r1
 8008f58:	60da      	str	r2, [r3, #12]
 8008f5a:	e038      	b.n	8008fce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	69db      	ldr	r3, [r3, #28]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d101      	bne.n	8008f68 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e033      	b.n	8008fd0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008f68:	4b1b      	ldr	r3, [pc, #108]	@ (8008fd8 <HAL_RCC_OscConfig+0x618>)
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2203      	movs	r2, #3
 8008f72:	401a      	ands	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6a1b      	ldr	r3, [r3, #32]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d126      	bne.n	8008fca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	2270      	movs	r2, #112	@ 0x70
 8008f80:	401a      	ands	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d11f      	bne.n	8008fca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008f8a:	697a      	ldr	r2, [r7, #20]
 8008f8c:	23fe      	movs	r3, #254	@ 0xfe
 8008f8e:	01db      	lsls	r3, r3, #7
 8008f90:	401a      	ands	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f96:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d116      	bne.n	8008fca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008f9c:	697a      	ldr	r2, [r7, #20]
 8008f9e:	23f8      	movs	r3, #248	@ 0xf8
 8008fa0:	039b      	lsls	r3, r3, #14
 8008fa2:	401a      	ands	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d10e      	bne.n	8008fca <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	23e0      	movs	r3, #224	@ 0xe0
 8008fb0:	051b      	lsls	r3, r3, #20
 8008fb2:	401a      	ands	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d106      	bne.n	8008fca <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	0f5b      	lsrs	r3, r3, #29
 8008fc0:	075a      	lsls	r2, r3, #29
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d001      	beq.n	8008fce <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e000      	b.n	8008fd0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	0018      	movs	r0, r3
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	b008      	add	sp, #32
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	40021000 	.word	0x40021000
 8008fdc:	40007000 	.word	0x40007000
 8008fe0:	00001388 	.word	0x00001388
 8008fe4:	efffffff 	.word	0xefffffff
 8008fe8:	feffffff 	.word	0xfeffffff
 8008fec:	11c1808c 	.word	0x11c1808c
 8008ff0:	eefefffc 	.word	0xeefefffc

08008ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e0e9      	b.n	80091dc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009008:	4b76      	ldr	r3, [pc, #472]	@ (80091e4 <HAL_RCC_ClockConfig+0x1f0>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2207      	movs	r2, #7
 800900e:	4013      	ands	r3, r2
 8009010:	683a      	ldr	r2, [r7, #0]
 8009012:	429a      	cmp	r2, r3
 8009014:	d91e      	bls.n	8009054 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009016:	4b73      	ldr	r3, [pc, #460]	@ (80091e4 <HAL_RCC_ClockConfig+0x1f0>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2207      	movs	r2, #7
 800901c:	4393      	bics	r3, r2
 800901e:	0019      	movs	r1, r3
 8009020:	4b70      	ldr	r3, [pc, #448]	@ (80091e4 <HAL_RCC_ClockConfig+0x1f0>)
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	430a      	orrs	r2, r1
 8009026:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009028:	f7fc fea0 	bl	8005d6c <HAL_GetTick>
 800902c:	0003      	movs	r3, r0
 800902e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009030:	e009      	b.n	8009046 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009032:	f7fc fe9b 	bl	8005d6c <HAL_GetTick>
 8009036:	0002      	movs	r2, r0
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	4a6a      	ldr	r2, [pc, #424]	@ (80091e8 <HAL_RCC_ClockConfig+0x1f4>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d901      	bls.n	8009046 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e0ca      	b.n	80091dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009046:	4b67      	ldr	r3, [pc, #412]	@ (80091e4 <HAL_RCC_ClockConfig+0x1f0>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2207      	movs	r2, #7
 800904c:	4013      	ands	r3, r2
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	429a      	cmp	r2, r3
 8009052:	d1ee      	bne.n	8009032 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2202      	movs	r2, #2
 800905a:	4013      	ands	r3, r2
 800905c:	d015      	beq.n	800908a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2204      	movs	r2, #4
 8009064:	4013      	ands	r3, r2
 8009066:	d006      	beq.n	8009076 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8009068:	4b60      	ldr	r3, [pc, #384]	@ (80091ec <HAL_RCC_ClockConfig+0x1f8>)
 800906a:	689a      	ldr	r2, [r3, #8]
 800906c:	4b5f      	ldr	r3, [pc, #380]	@ (80091ec <HAL_RCC_ClockConfig+0x1f8>)
 800906e:	21e0      	movs	r1, #224	@ 0xe0
 8009070:	01c9      	lsls	r1, r1, #7
 8009072:	430a      	orrs	r2, r1
 8009074:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009076:	4b5d      	ldr	r3, [pc, #372]	@ (80091ec <HAL_RCC_ClockConfig+0x1f8>)
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	4a5d      	ldr	r2, [pc, #372]	@ (80091f0 <HAL_RCC_ClockConfig+0x1fc>)
 800907c:	4013      	ands	r3, r2
 800907e:	0019      	movs	r1, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	689a      	ldr	r2, [r3, #8]
 8009084:	4b59      	ldr	r3, [pc, #356]	@ (80091ec <HAL_RCC_ClockConfig+0x1f8>)
 8009086:	430a      	orrs	r2, r1
 8009088:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2201      	movs	r2, #1
 8009090:	4013      	ands	r3, r2
 8009092:	d057      	beq.n	8009144 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d107      	bne.n	80090ac <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800909c:	4b53      	ldr	r3, [pc, #332]	@ (80091ec <HAL_RCC_ClockConfig+0x1f8>)
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	2380      	movs	r3, #128	@ 0x80
 80090a2:	029b      	lsls	r3, r3, #10
 80090a4:	4013      	ands	r3, r2
 80090a6:	d12b      	bne.n	8009100 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	e097      	b.n	80091dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d107      	bne.n	80090c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090b4:	4b4d      	ldr	r3, [pc, #308]	@ (80091ec <HAL_RCC_ClockConfig+0x1f8>)
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	2380      	movs	r3, #128	@ 0x80
 80090ba:	049b      	lsls	r3, r3, #18
 80090bc:	4013      	ands	r3, r2
 80090be:	d11f      	bne.n	8009100 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e08b      	b.n	80091dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d107      	bne.n	80090dc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80090cc:	4b47      	ldr	r3, [pc, #284]	@ (80091ec <HAL_RCC_ClockConfig+0x1f8>)
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	2380      	movs	r3, #128	@ 0x80
 80090d2:	00db      	lsls	r3, r3, #3
 80090d4:	4013      	ands	r3, r2
 80090d6:	d113      	bne.n	8009100 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e07f      	b.n	80091dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	2b03      	cmp	r3, #3
 80090e2:	d106      	bne.n	80090f2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80090e4:	4b41      	ldr	r3, [pc, #260]	@ (80091ec <HAL_RCC_ClockConfig+0x1f8>)
 80090e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090e8:	2202      	movs	r2, #2
 80090ea:	4013      	ands	r3, r2
 80090ec:	d108      	bne.n	8009100 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e074      	b.n	80091dc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80090f2:	4b3e      	ldr	r3, [pc, #248]	@ (80091ec <HAL_RCC_ClockConfig+0x1f8>)
 80090f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090f6:	2202      	movs	r2, #2
 80090f8:	4013      	ands	r3, r2
 80090fa:	d101      	bne.n	8009100 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e06d      	b.n	80091dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009100:	4b3a      	ldr	r3, [pc, #232]	@ (80091ec <HAL_RCC_ClockConfig+0x1f8>)
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	2207      	movs	r2, #7
 8009106:	4393      	bics	r3, r2
 8009108:	0019      	movs	r1, r3
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	685a      	ldr	r2, [r3, #4]
 800910e:	4b37      	ldr	r3, [pc, #220]	@ (80091ec <HAL_RCC_ClockConfig+0x1f8>)
 8009110:	430a      	orrs	r2, r1
 8009112:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009114:	f7fc fe2a 	bl	8005d6c <HAL_GetTick>
 8009118:	0003      	movs	r3, r0
 800911a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800911c:	e009      	b.n	8009132 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800911e:	f7fc fe25 	bl	8005d6c <HAL_GetTick>
 8009122:	0002      	movs	r2, r0
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	4a2f      	ldr	r2, [pc, #188]	@ (80091e8 <HAL_RCC_ClockConfig+0x1f4>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d901      	bls.n	8009132 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800912e:	2303      	movs	r3, #3
 8009130:	e054      	b.n	80091dc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009132:	4b2e      	ldr	r3, [pc, #184]	@ (80091ec <HAL_RCC_ClockConfig+0x1f8>)
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	2238      	movs	r2, #56	@ 0x38
 8009138:	401a      	ands	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	00db      	lsls	r3, r3, #3
 8009140:	429a      	cmp	r2, r3
 8009142:	d1ec      	bne.n	800911e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009144:	4b27      	ldr	r3, [pc, #156]	@ (80091e4 <HAL_RCC_ClockConfig+0x1f0>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2207      	movs	r2, #7
 800914a:	4013      	ands	r3, r2
 800914c:	683a      	ldr	r2, [r7, #0]
 800914e:	429a      	cmp	r2, r3
 8009150:	d21e      	bcs.n	8009190 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009152:	4b24      	ldr	r3, [pc, #144]	@ (80091e4 <HAL_RCC_ClockConfig+0x1f0>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2207      	movs	r2, #7
 8009158:	4393      	bics	r3, r2
 800915a:	0019      	movs	r1, r3
 800915c:	4b21      	ldr	r3, [pc, #132]	@ (80091e4 <HAL_RCC_ClockConfig+0x1f0>)
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	430a      	orrs	r2, r1
 8009162:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009164:	f7fc fe02 	bl	8005d6c <HAL_GetTick>
 8009168:	0003      	movs	r3, r0
 800916a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800916c:	e009      	b.n	8009182 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800916e:	f7fc fdfd 	bl	8005d6c <HAL_GetTick>
 8009172:	0002      	movs	r2, r0
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	4a1b      	ldr	r2, [pc, #108]	@ (80091e8 <HAL_RCC_ClockConfig+0x1f4>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d901      	bls.n	8009182 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	e02c      	b.n	80091dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009182:	4b18      	ldr	r3, [pc, #96]	@ (80091e4 <HAL_RCC_ClockConfig+0x1f0>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2207      	movs	r2, #7
 8009188:	4013      	ands	r3, r2
 800918a:	683a      	ldr	r2, [r7, #0]
 800918c:	429a      	cmp	r2, r3
 800918e:	d1ee      	bne.n	800916e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2204      	movs	r2, #4
 8009196:	4013      	ands	r3, r2
 8009198:	d009      	beq.n	80091ae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800919a:	4b14      	ldr	r3, [pc, #80]	@ (80091ec <HAL_RCC_ClockConfig+0x1f8>)
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	4a15      	ldr	r2, [pc, #84]	@ (80091f4 <HAL_RCC_ClockConfig+0x200>)
 80091a0:	4013      	ands	r3, r2
 80091a2:	0019      	movs	r1, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	68da      	ldr	r2, [r3, #12]
 80091a8:	4b10      	ldr	r3, [pc, #64]	@ (80091ec <HAL_RCC_ClockConfig+0x1f8>)
 80091aa:	430a      	orrs	r2, r1
 80091ac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80091ae:	f000 f829 	bl	8009204 <HAL_RCC_GetSysClockFreq>
 80091b2:	0001      	movs	r1, r0
 80091b4:	4b0d      	ldr	r3, [pc, #52]	@ (80091ec <HAL_RCC_ClockConfig+0x1f8>)
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	0a1b      	lsrs	r3, r3, #8
 80091ba:	220f      	movs	r2, #15
 80091bc:	401a      	ands	r2, r3
 80091be:	4b0e      	ldr	r3, [pc, #56]	@ (80091f8 <HAL_RCC_ClockConfig+0x204>)
 80091c0:	0092      	lsls	r2, r2, #2
 80091c2:	58d3      	ldr	r3, [r2, r3]
 80091c4:	221f      	movs	r2, #31
 80091c6:	4013      	ands	r3, r2
 80091c8:	000a      	movs	r2, r1
 80091ca:	40da      	lsrs	r2, r3
 80091cc:	4b0b      	ldr	r3, [pc, #44]	@ (80091fc <HAL_RCC_ClockConfig+0x208>)
 80091ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80091d0:	4b0b      	ldr	r3, [pc, #44]	@ (8009200 <HAL_RCC_ClockConfig+0x20c>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	0018      	movs	r0, r3
 80091d6:	f7fc fd6d 	bl	8005cb4 <HAL_InitTick>
 80091da:	0003      	movs	r3, r0
}
 80091dc:	0018      	movs	r0, r3
 80091de:	46bd      	mov	sp, r7
 80091e0:	b004      	add	sp, #16
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	40022000 	.word	0x40022000
 80091e8:	00001388 	.word	0x00001388
 80091ec:	40021000 	.word	0x40021000
 80091f0:	fffff0ff 	.word	0xfffff0ff
 80091f4:	ffff8fff 	.word	0xffff8fff
 80091f8:	0800dc3c 	.word	0x0800dc3c
 80091fc:	20000440 	.word	0x20000440
 8009200:	20000444 	.word	0x20000444

08009204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800920a:	4b3c      	ldr	r3, [pc, #240]	@ (80092fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	2238      	movs	r2, #56	@ 0x38
 8009210:	4013      	ands	r3, r2
 8009212:	d10f      	bne.n	8009234 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009214:	4b39      	ldr	r3, [pc, #228]	@ (80092fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	0adb      	lsrs	r3, r3, #11
 800921a:	2207      	movs	r2, #7
 800921c:	4013      	ands	r3, r2
 800921e:	2201      	movs	r2, #1
 8009220:	409a      	lsls	r2, r3
 8009222:	0013      	movs	r3, r2
 8009224:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	4835      	ldr	r0, [pc, #212]	@ (8009300 <HAL_RCC_GetSysClockFreq+0xfc>)
 800922a:	f7f6 ff6d 	bl	8000108 <__udivsi3>
 800922e:	0003      	movs	r3, r0
 8009230:	613b      	str	r3, [r7, #16]
 8009232:	e05d      	b.n	80092f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009234:	4b31      	ldr	r3, [pc, #196]	@ (80092fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	2238      	movs	r2, #56	@ 0x38
 800923a:	4013      	ands	r3, r2
 800923c:	2b08      	cmp	r3, #8
 800923e:	d102      	bne.n	8009246 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009240:	4b30      	ldr	r3, [pc, #192]	@ (8009304 <HAL_RCC_GetSysClockFreq+0x100>)
 8009242:	613b      	str	r3, [r7, #16]
 8009244:	e054      	b.n	80092f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009246:	4b2d      	ldr	r3, [pc, #180]	@ (80092fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	2238      	movs	r2, #56	@ 0x38
 800924c:	4013      	ands	r3, r2
 800924e:	2b10      	cmp	r3, #16
 8009250:	d138      	bne.n	80092c4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8009252:	4b2a      	ldr	r3, [pc, #168]	@ (80092fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	2203      	movs	r2, #3
 8009258:	4013      	ands	r3, r2
 800925a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800925c:	4b27      	ldr	r3, [pc, #156]	@ (80092fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	091b      	lsrs	r3, r3, #4
 8009262:	2207      	movs	r2, #7
 8009264:	4013      	ands	r3, r2
 8009266:	3301      	adds	r3, #1
 8009268:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2b03      	cmp	r3, #3
 800926e:	d10d      	bne.n	800928c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009270:	68b9      	ldr	r1, [r7, #8]
 8009272:	4824      	ldr	r0, [pc, #144]	@ (8009304 <HAL_RCC_GetSysClockFreq+0x100>)
 8009274:	f7f6 ff48 	bl	8000108 <__udivsi3>
 8009278:	0003      	movs	r3, r0
 800927a:	0019      	movs	r1, r3
 800927c:	4b1f      	ldr	r3, [pc, #124]	@ (80092fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	0a1b      	lsrs	r3, r3, #8
 8009282:	227f      	movs	r2, #127	@ 0x7f
 8009284:	4013      	ands	r3, r2
 8009286:	434b      	muls	r3, r1
 8009288:	617b      	str	r3, [r7, #20]
        break;
 800928a:	e00d      	b.n	80092a8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800928c:	68b9      	ldr	r1, [r7, #8]
 800928e:	481c      	ldr	r0, [pc, #112]	@ (8009300 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009290:	f7f6 ff3a 	bl	8000108 <__udivsi3>
 8009294:	0003      	movs	r3, r0
 8009296:	0019      	movs	r1, r3
 8009298:	4b18      	ldr	r3, [pc, #96]	@ (80092fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	0a1b      	lsrs	r3, r3, #8
 800929e:	227f      	movs	r2, #127	@ 0x7f
 80092a0:	4013      	ands	r3, r2
 80092a2:	434b      	muls	r3, r1
 80092a4:	617b      	str	r3, [r7, #20]
        break;
 80092a6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80092a8:	4b14      	ldr	r3, [pc, #80]	@ (80092fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	0f5b      	lsrs	r3, r3, #29
 80092ae:	2207      	movs	r2, #7
 80092b0:	4013      	ands	r3, r2
 80092b2:	3301      	adds	r3, #1
 80092b4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80092b6:	6879      	ldr	r1, [r7, #4]
 80092b8:	6978      	ldr	r0, [r7, #20]
 80092ba:	f7f6 ff25 	bl	8000108 <__udivsi3>
 80092be:	0003      	movs	r3, r0
 80092c0:	613b      	str	r3, [r7, #16]
 80092c2:	e015      	b.n	80092f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80092c4:	4b0d      	ldr	r3, [pc, #52]	@ (80092fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	2238      	movs	r2, #56	@ 0x38
 80092ca:	4013      	ands	r3, r2
 80092cc:	2b20      	cmp	r3, #32
 80092ce:	d103      	bne.n	80092d8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80092d0:	2380      	movs	r3, #128	@ 0x80
 80092d2:	021b      	lsls	r3, r3, #8
 80092d4:	613b      	str	r3, [r7, #16]
 80092d6:	e00b      	b.n	80092f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80092d8:	4b08      	ldr	r3, [pc, #32]	@ (80092fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	2238      	movs	r2, #56	@ 0x38
 80092de:	4013      	ands	r3, r2
 80092e0:	2b18      	cmp	r3, #24
 80092e2:	d103      	bne.n	80092ec <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80092e4:	23fa      	movs	r3, #250	@ 0xfa
 80092e6:	01db      	lsls	r3, r3, #7
 80092e8:	613b      	str	r3, [r7, #16]
 80092ea:	e001      	b.n	80092f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80092ec:	2300      	movs	r3, #0
 80092ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80092f0:	693b      	ldr	r3, [r7, #16]
}
 80092f2:	0018      	movs	r0, r3
 80092f4:	46bd      	mov	sp, r7
 80092f6:	b006      	add	sp, #24
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	46c0      	nop			@ (mov r8, r8)
 80092fc:	40021000 	.word	0x40021000
 8009300:	00f42400 	.word	0x00f42400
 8009304:	007a1200 	.word	0x007a1200

08009308 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800930c:	4b02      	ldr	r3, [pc, #8]	@ (8009318 <HAL_RCC_GetHCLKFreq+0x10>)
 800930e:	681b      	ldr	r3, [r3, #0]
}
 8009310:	0018      	movs	r0, r3
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	46c0      	nop			@ (mov r8, r8)
 8009318:	20000440 	.word	0x20000440

0800931c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800931c:	b5b0      	push	{r4, r5, r7, lr}
 800931e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009320:	f7ff fff2 	bl	8009308 <HAL_RCC_GetHCLKFreq>
 8009324:	0004      	movs	r4, r0
 8009326:	f7ff fb3f 	bl	80089a8 <LL_RCC_GetAPB1Prescaler>
 800932a:	0003      	movs	r3, r0
 800932c:	0b1a      	lsrs	r2, r3, #12
 800932e:	4b05      	ldr	r3, [pc, #20]	@ (8009344 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009330:	0092      	lsls	r2, r2, #2
 8009332:	58d3      	ldr	r3, [r2, r3]
 8009334:	221f      	movs	r2, #31
 8009336:	4013      	ands	r3, r2
 8009338:	40dc      	lsrs	r4, r3
 800933a:	0023      	movs	r3, r4
}
 800933c:	0018      	movs	r0, r3
 800933e:	46bd      	mov	sp, r7
 8009340:	bdb0      	pop	{r4, r5, r7, pc}
 8009342:	46c0      	nop			@ (mov r8, r8)
 8009344:	0800dc7c 	.word	0x0800dc7c

08009348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b086      	sub	sp, #24
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8009350:	2313      	movs	r3, #19
 8009352:	18fb      	adds	r3, r7, r3
 8009354:	2200      	movs	r2, #0
 8009356:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009358:	2312      	movs	r3, #18
 800935a:	18fb      	adds	r3, r7, r3
 800935c:	2200      	movs	r2, #0
 800935e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	2380      	movs	r3, #128	@ 0x80
 8009366:	029b      	lsls	r3, r3, #10
 8009368:	4013      	ands	r3, r2
 800936a:	d100      	bne.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800936c:	e0a3      	b.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800936e:	2011      	movs	r0, #17
 8009370:	183b      	adds	r3, r7, r0
 8009372:	2200      	movs	r2, #0
 8009374:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009376:	4ba5      	ldr	r3, [pc, #660]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009378:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800937a:	2380      	movs	r3, #128	@ 0x80
 800937c:	055b      	lsls	r3, r3, #21
 800937e:	4013      	ands	r3, r2
 8009380:	d110      	bne.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009382:	4ba2      	ldr	r3, [pc, #648]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009384:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009386:	4ba1      	ldr	r3, [pc, #644]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009388:	2180      	movs	r1, #128	@ 0x80
 800938a:	0549      	lsls	r1, r1, #21
 800938c:	430a      	orrs	r2, r1
 800938e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009390:	4b9e      	ldr	r3, [pc, #632]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009392:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009394:	2380      	movs	r3, #128	@ 0x80
 8009396:	055b      	lsls	r3, r3, #21
 8009398:	4013      	ands	r3, r2
 800939a:	60bb      	str	r3, [r7, #8]
 800939c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800939e:	183b      	adds	r3, r7, r0
 80093a0:	2201      	movs	r2, #1
 80093a2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80093a4:	4b9a      	ldr	r3, [pc, #616]	@ (8009610 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	4b99      	ldr	r3, [pc, #612]	@ (8009610 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80093aa:	2180      	movs	r1, #128	@ 0x80
 80093ac:	0049      	lsls	r1, r1, #1
 80093ae:	430a      	orrs	r2, r1
 80093b0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80093b2:	f7fc fcdb 	bl	8005d6c <HAL_GetTick>
 80093b6:	0003      	movs	r3, r0
 80093b8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093ba:	e00b      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093bc:	f7fc fcd6 	bl	8005d6c <HAL_GetTick>
 80093c0:	0002      	movs	r2, r0
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d904      	bls.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80093ca:	2313      	movs	r3, #19
 80093cc:	18fb      	adds	r3, r7, r3
 80093ce:	2203      	movs	r2, #3
 80093d0:	701a      	strb	r2, [r3, #0]
        break;
 80093d2:	e005      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093d4:	4b8e      	ldr	r3, [pc, #568]	@ (8009610 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	2380      	movs	r3, #128	@ 0x80
 80093da:	005b      	lsls	r3, r3, #1
 80093dc:	4013      	ands	r3, r2
 80093de:	d0ed      	beq.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80093e0:	2313      	movs	r3, #19
 80093e2:	18fb      	adds	r3, r7, r3
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d154      	bne.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80093ea:	4b88      	ldr	r3, [pc, #544]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80093ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80093ee:	23c0      	movs	r3, #192	@ 0xc0
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4013      	ands	r3, r2
 80093f4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d019      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009400:	697a      	ldr	r2, [r7, #20]
 8009402:	429a      	cmp	r2, r3
 8009404:	d014      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009406:	4b81      	ldr	r3, [pc, #516]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800940a:	4a82      	ldr	r2, [pc, #520]	@ (8009614 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800940c:	4013      	ands	r3, r2
 800940e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009410:	4b7e      	ldr	r3, [pc, #504]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009412:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009414:	4b7d      	ldr	r3, [pc, #500]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009416:	2180      	movs	r1, #128	@ 0x80
 8009418:	0249      	lsls	r1, r1, #9
 800941a:	430a      	orrs	r2, r1
 800941c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800941e:	4b7b      	ldr	r3, [pc, #492]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009420:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009422:	4b7a      	ldr	r3, [pc, #488]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009424:	497c      	ldr	r1, [pc, #496]	@ (8009618 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009426:	400a      	ands	r2, r1
 8009428:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800942a:	4b78      	ldr	r3, [pc, #480]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	2201      	movs	r2, #1
 8009434:	4013      	ands	r3, r2
 8009436:	d016      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009438:	f7fc fc98 	bl	8005d6c <HAL_GetTick>
 800943c:	0003      	movs	r3, r0
 800943e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009440:	e00c      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009442:	f7fc fc93 	bl	8005d6c <HAL_GetTick>
 8009446:	0002      	movs	r2, r0
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	4a73      	ldr	r2, [pc, #460]	@ (800961c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d904      	bls.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8009452:	2313      	movs	r3, #19
 8009454:	18fb      	adds	r3, r7, r3
 8009456:	2203      	movs	r2, #3
 8009458:	701a      	strb	r2, [r3, #0]
            break;
 800945a:	e004      	b.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800945c:	4b6b      	ldr	r3, [pc, #428]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800945e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009460:	2202      	movs	r2, #2
 8009462:	4013      	ands	r3, r2
 8009464:	d0ed      	beq.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8009466:	2313      	movs	r3, #19
 8009468:	18fb      	adds	r3, r7, r3
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10a      	bne.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009470:	4b66      	ldr	r3, [pc, #408]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009474:	4a67      	ldr	r2, [pc, #412]	@ (8009614 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8009476:	4013      	ands	r3, r2
 8009478:	0019      	movs	r1, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800947e:	4b63      	ldr	r3, [pc, #396]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009480:	430a      	orrs	r2, r1
 8009482:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009484:	e00c      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009486:	2312      	movs	r3, #18
 8009488:	18fb      	adds	r3, r7, r3
 800948a:	2213      	movs	r2, #19
 800948c:	18ba      	adds	r2, r7, r2
 800948e:	7812      	ldrb	r2, [r2, #0]
 8009490:	701a      	strb	r2, [r3, #0]
 8009492:	e005      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009494:	2312      	movs	r3, #18
 8009496:	18fb      	adds	r3, r7, r3
 8009498:	2213      	movs	r2, #19
 800949a:	18ba      	adds	r2, r7, r2
 800949c:	7812      	ldrb	r2, [r2, #0]
 800949e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80094a0:	2311      	movs	r3, #17
 80094a2:	18fb      	adds	r3, r7, r3
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d105      	bne.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80094aa:	4b58      	ldr	r3, [pc, #352]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80094ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094ae:	4b57      	ldr	r3, [pc, #348]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80094b0:	495b      	ldr	r1, [pc, #364]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80094b2:	400a      	ands	r2, r1
 80094b4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2201      	movs	r2, #1
 80094bc:	4013      	ands	r3, r2
 80094be:	d009      	beq.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80094c0:	4b52      	ldr	r3, [pc, #328]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80094c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094c4:	2203      	movs	r2, #3
 80094c6:	4393      	bics	r3, r2
 80094c8:	0019      	movs	r1, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	685a      	ldr	r2, [r3, #4]
 80094ce:	4b4f      	ldr	r3, [pc, #316]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80094d0:	430a      	orrs	r2, r1
 80094d2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2210      	movs	r2, #16
 80094da:	4013      	ands	r3, r2
 80094dc:	d009      	beq.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094de:	4b4b      	ldr	r3, [pc, #300]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80094e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094e2:	4a50      	ldr	r2, [pc, #320]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80094e4:	4013      	ands	r3, r2
 80094e6:	0019      	movs	r1, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	689a      	ldr	r2, [r3, #8]
 80094ec:	4b47      	ldr	r3, [pc, #284]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80094ee:	430a      	orrs	r2, r1
 80094f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	2380      	movs	r3, #128	@ 0x80
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	4013      	ands	r3, r2
 80094fc:	d009      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80094fe:	4b43      	ldr	r3, [pc, #268]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009502:	4a49      	ldr	r2, [pc, #292]	@ (8009628 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8009504:	4013      	ands	r3, r2
 8009506:	0019      	movs	r1, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	695a      	ldr	r2, [r3, #20]
 800950c:	4b3f      	ldr	r3, [pc, #252]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800950e:	430a      	orrs	r2, r1
 8009510:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	2380      	movs	r3, #128	@ 0x80
 8009518:	00db      	lsls	r3, r3, #3
 800951a:	4013      	ands	r3, r2
 800951c:	d009      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800951e:	4b3b      	ldr	r3, [pc, #236]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009522:	4a42      	ldr	r2, [pc, #264]	@ (800962c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8009524:	4013      	ands	r3, r2
 8009526:	0019      	movs	r1, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	699a      	ldr	r2, [r3, #24]
 800952c:	4b37      	ldr	r3, [pc, #220]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800952e:	430a      	orrs	r2, r1
 8009530:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2220      	movs	r2, #32
 8009538:	4013      	ands	r3, r2
 800953a:	d009      	beq.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800953c:	4b33      	ldr	r3, [pc, #204]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800953e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009540:	4a3b      	ldr	r2, [pc, #236]	@ (8009630 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009542:	4013      	ands	r3, r2
 8009544:	0019      	movs	r1, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68da      	ldr	r2, [r3, #12]
 800954a:	4b30      	ldr	r3, [pc, #192]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800954c:	430a      	orrs	r2, r1
 800954e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	2380      	movs	r3, #128	@ 0x80
 8009556:	01db      	lsls	r3, r3, #7
 8009558:	4013      	ands	r3, r2
 800955a:	d015      	beq.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800955c:	4b2b      	ldr	r3, [pc, #172]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800955e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	0899      	lsrs	r1, r3, #2
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	69da      	ldr	r2, [r3, #28]
 8009568:	4b28      	ldr	r3, [pc, #160]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800956a:	430a      	orrs	r2, r1
 800956c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	69da      	ldr	r2, [r3, #28]
 8009572:	2380      	movs	r3, #128	@ 0x80
 8009574:	05db      	lsls	r3, r3, #23
 8009576:	429a      	cmp	r2, r3
 8009578:	d106      	bne.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800957a:	4b24      	ldr	r3, [pc, #144]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800957c:	68da      	ldr	r2, [r3, #12]
 800957e:	4b23      	ldr	r3, [pc, #140]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009580:	2180      	movs	r1, #128	@ 0x80
 8009582:	0249      	lsls	r1, r1, #9
 8009584:	430a      	orrs	r2, r1
 8009586:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	2380      	movs	r3, #128	@ 0x80
 800958e:	039b      	lsls	r3, r3, #14
 8009590:	4013      	ands	r3, r2
 8009592:	d016      	beq.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8009594:	4b1d      	ldr	r3, [pc, #116]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009598:	4a26      	ldr	r2, [pc, #152]	@ (8009634 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800959a:	4013      	ands	r3, r2
 800959c:	0019      	movs	r1, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a1a      	ldr	r2, [r3, #32]
 80095a2:	4b1a      	ldr	r3, [pc, #104]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80095a4:	430a      	orrs	r2, r1
 80095a6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a1a      	ldr	r2, [r3, #32]
 80095ac:	2380      	movs	r3, #128	@ 0x80
 80095ae:	03db      	lsls	r3, r3, #15
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d106      	bne.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80095b4:	4b15      	ldr	r3, [pc, #84]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80095b6:	68da      	ldr	r2, [r3, #12]
 80095b8:	4b14      	ldr	r3, [pc, #80]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80095ba:	2180      	movs	r1, #128	@ 0x80
 80095bc:	0449      	lsls	r1, r1, #17
 80095be:	430a      	orrs	r2, r1
 80095c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	2380      	movs	r3, #128	@ 0x80
 80095c8:	011b      	lsls	r3, r3, #4
 80095ca:	4013      	ands	r3, r2
 80095cc:	d016      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80095ce:	4b0f      	ldr	r3, [pc, #60]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80095d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095d2:	4a19      	ldr	r2, [pc, #100]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80095d4:	4013      	ands	r3, r2
 80095d6:	0019      	movs	r1, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	691a      	ldr	r2, [r3, #16]
 80095dc:	4b0b      	ldr	r3, [pc, #44]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80095de:	430a      	orrs	r2, r1
 80095e0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	691a      	ldr	r2, [r3, #16]
 80095e6:	2380      	movs	r3, #128	@ 0x80
 80095e8:	01db      	lsls	r3, r3, #7
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d106      	bne.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80095ee:	4b07      	ldr	r3, [pc, #28]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80095f0:	68da      	ldr	r2, [r3, #12]
 80095f2:	4b06      	ldr	r3, [pc, #24]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80095f4:	2180      	movs	r1, #128	@ 0x80
 80095f6:	0249      	lsls	r1, r1, #9
 80095f8:	430a      	orrs	r2, r1
 80095fa:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80095fc:	2312      	movs	r3, #18
 80095fe:	18fb      	adds	r3, r7, r3
 8009600:	781b      	ldrb	r3, [r3, #0]
}
 8009602:	0018      	movs	r0, r3
 8009604:	46bd      	mov	sp, r7
 8009606:	b006      	add	sp, #24
 8009608:	bd80      	pop	{r7, pc}
 800960a:	46c0      	nop			@ (mov r8, r8)
 800960c:	40021000 	.word	0x40021000
 8009610:	40007000 	.word	0x40007000
 8009614:	fffffcff 	.word	0xfffffcff
 8009618:	fffeffff 	.word	0xfffeffff
 800961c:	00001388 	.word	0x00001388
 8009620:	efffffff 	.word	0xefffffff
 8009624:	fffff3ff 	.word	0xfffff3ff
 8009628:	fff3ffff 	.word	0xfff3ffff
 800962c:	ffcfffff 	.word	0xffcfffff
 8009630:	ffffcfff 	.word	0xffffcfff
 8009634:	ffbfffff 	.word	0xffbfffff
 8009638:	ffff3fff 	.word	0xffff3fff

0800963c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d101      	bne.n	800964e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e056      	b.n	80096fc <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	223d      	movs	r2, #61	@ 0x3d
 8009652:	5c9b      	ldrb	r3, [r3, r2]
 8009654:	b2db      	uxtb	r3, r3
 8009656:	2b00      	cmp	r3, #0
 8009658:	d113      	bne.n	8009682 <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	223c      	movs	r2, #60	@ 0x3c
 800965e:	2100      	movs	r1, #0
 8009660:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	0018      	movs	r0, r3
 8009666:	f002 f8c5 	bl	800b7f4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800966e:	2b00      	cmp	r3, #0
 8009670:	d102      	bne.n	8009678 <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a23      	ldr	r2, [pc, #140]	@ (8009704 <HAL_TIM_Base_Init+0xc8>)
 8009676:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	0010      	movs	r0, r2
 8009680:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	223d      	movs	r2, #61	@ 0x3d
 8009686:	2102      	movs	r1, #2
 8009688:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	3304      	adds	r3, #4
 8009692:	0019      	movs	r1, r3
 8009694:	0010      	movs	r0, r2
 8009696:	f001 fbaf 	bl	800adf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2248      	movs	r2, #72	@ 0x48
 800969e:	2101      	movs	r1, #1
 80096a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	223e      	movs	r2, #62	@ 0x3e
 80096a6:	2101      	movs	r1, #1
 80096a8:	5499      	strb	r1, [r3, r2]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	223f      	movs	r2, #63	@ 0x3f
 80096ae:	2101      	movs	r1, #1
 80096b0:	5499      	strb	r1, [r3, r2]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2240      	movs	r2, #64	@ 0x40
 80096b6:	2101      	movs	r1, #1
 80096b8:	5499      	strb	r1, [r3, r2]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2241      	movs	r2, #65	@ 0x41
 80096be:	2101      	movs	r1, #1
 80096c0:	5499      	strb	r1, [r3, r2]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2242      	movs	r2, #66	@ 0x42
 80096c6:	2101      	movs	r1, #1
 80096c8:	5499      	strb	r1, [r3, r2]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2243      	movs	r2, #67	@ 0x43
 80096ce:	2101      	movs	r1, #1
 80096d0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2244      	movs	r2, #68	@ 0x44
 80096d6:	2101      	movs	r1, #1
 80096d8:	5499      	strb	r1, [r3, r2]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2245      	movs	r2, #69	@ 0x45
 80096de:	2101      	movs	r1, #1
 80096e0:	5499      	strb	r1, [r3, r2]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2246      	movs	r2, #70	@ 0x46
 80096e6:	2101      	movs	r1, #1
 80096e8:	5499      	strb	r1, [r3, r2]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2247      	movs	r2, #71	@ 0x47
 80096ee:	2101      	movs	r1, #1
 80096f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	223d      	movs	r2, #61	@ 0x3d
 80096f6:	2101      	movs	r1, #1
 80096f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	0018      	movs	r0, r3
 80096fe:	46bd      	mov	sp, r7
 8009700:	b002      	add	sp, #8
 8009702:	bd80      	pop	{r7, pc}
 8009704:	08004d1d 	.word	0x08004d1d

08009708 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	223d      	movs	r2, #61	@ 0x3d
 8009714:	5c9b      	ldrb	r3, [r3, r2]
 8009716:	b2db      	uxtb	r3, r3
 8009718:	2b01      	cmp	r3, #1
 800971a:	d001      	beq.n	8009720 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	e035      	b.n	800978c <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	223d      	movs	r2, #61	@ 0x3d
 8009724:	2102      	movs	r1, #2
 8009726:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a19      	ldr	r2, [pc, #100]	@ (8009794 <HAL_TIM_Base_Start+0x8c>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d00a      	beq.n	8009748 <HAL_TIM_Base_Start+0x40>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	2380      	movs	r3, #128	@ 0x80
 8009738:	05db      	lsls	r3, r3, #23
 800973a:	429a      	cmp	r2, r3
 800973c:	d004      	beq.n	8009748 <HAL_TIM_Base_Start+0x40>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a15      	ldr	r2, [pc, #84]	@ (8009798 <HAL_TIM_Base_Start+0x90>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d116      	bne.n	8009776 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	4a13      	ldr	r2, [pc, #76]	@ (800979c <HAL_TIM_Base_Start+0x94>)
 8009750:	4013      	ands	r3, r2
 8009752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2b06      	cmp	r3, #6
 8009758:	d016      	beq.n	8009788 <HAL_TIM_Base_Start+0x80>
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	2380      	movs	r3, #128	@ 0x80
 800975e:	025b      	lsls	r3, r3, #9
 8009760:	429a      	cmp	r2, r3
 8009762:	d011      	beq.n	8009788 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2101      	movs	r1, #1
 8009770:	430a      	orrs	r2, r1
 8009772:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009774:	e008      	b.n	8009788 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2101      	movs	r1, #1
 8009782:	430a      	orrs	r2, r1
 8009784:	601a      	str	r2, [r3, #0]
 8009786:	e000      	b.n	800978a <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009788:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800978a:	2300      	movs	r3, #0
}
 800978c:	0018      	movs	r0, r3
 800978e:	46bd      	mov	sp, r7
 8009790:	b004      	add	sp, #16
 8009792:	bd80      	pop	{r7, pc}
 8009794:	40012c00 	.word	0x40012c00
 8009798:	40000400 	.word	0x40000400
 800979c:	00010007 	.word	0x00010007

080097a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	223d      	movs	r2, #61	@ 0x3d
 80097ac:	5c9b      	ldrb	r3, [r3, r2]
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d001      	beq.n	80097b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	e03d      	b.n	8009834 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	223d      	movs	r2, #61	@ 0x3d
 80097bc:	2102      	movs	r1, #2
 80097be:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68da      	ldr	r2, [r3, #12]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2101      	movs	r1, #1
 80097cc:	430a      	orrs	r2, r1
 80097ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a19      	ldr	r2, [pc, #100]	@ (800983c <HAL_TIM_Base_Start_IT+0x9c>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d00a      	beq.n	80097f0 <HAL_TIM_Base_Start_IT+0x50>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	2380      	movs	r3, #128	@ 0x80
 80097e0:	05db      	lsls	r3, r3, #23
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d004      	beq.n	80097f0 <HAL_TIM_Base_Start_IT+0x50>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a15      	ldr	r2, [pc, #84]	@ (8009840 <HAL_TIM_Base_Start_IT+0xa0>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d116      	bne.n	800981e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	4a13      	ldr	r2, [pc, #76]	@ (8009844 <HAL_TIM_Base_Start_IT+0xa4>)
 80097f8:	4013      	ands	r3, r2
 80097fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2b06      	cmp	r3, #6
 8009800:	d016      	beq.n	8009830 <HAL_TIM_Base_Start_IT+0x90>
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	2380      	movs	r3, #128	@ 0x80
 8009806:	025b      	lsls	r3, r3, #9
 8009808:	429a      	cmp	r2, r3
 800980a:	d011      	beq.n	8009830 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2101      	movs	r1, #1
 8009818:	430a      	orrs	r2, r1
 800981a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800981c:	e008      	b.n	8009830 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2101      	movs	r1, #1
 800982a:	430a      	orrs	r2, r1
 800982c:	601a      	str	r2, [r3, #0]
 800982e:	e000      	b.n	8009832 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009830:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	0018      	movs	r0, r3
 8009836:	46bd      	mov	sp, r7
 8009838:	b004      	add	sp, #16
 800983a:	bd80      	pop	{r7, pc}
 800983c:	40012c00 	.word	0x40012c00
 8009840:	40000400 	.word	0x40000400
 8009844:	00010007 	.word	0x00010007

08009848 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e056      	b.n	8009908 <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	223d      	movs	r2, #61	@ 0x3d
 800985e:	5c9b      	ldrb	r3, [r3, r2]
 8009860:	b2db      	uxtb	r3, r3
 8009862:	2b00      	cmp	r3, #0
 8009864:	d113      	bne.n	800988e <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	223c      	movs	r2, #60	@ 0x3c
 800986a:	2100      	movs	r1, #0
 800986c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	0018      	movs	r0, r3
 8009872:	f001 ffbf 	bl	800b7f4 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800987a:	2b00      	cmp	r3, #0
 800987c:	d102      	bne.n	8009884 <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4a23      	ldr	r2, [pc, #140]	@ (8009910 <HAL_TIM_OC_Init+0xc8>)
 8009882:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	0010      	movs	r0, r2
 800988c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	223d      	movs	r2, #61	@ 0x3d
 8009892:	2102      	movs	r1, #2
 8009894:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	3304      	adds	r3, #4
 800989e:	0019      	movs	r1, r3
 80098a0:	0010      	movs	r0, r2
 80098a2:	f001 faa9 	bl	800adf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2248      	movs	r2, #72	@ 0x48
 80098aa:	2101      	movs	r1, #1
 80098ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	223e      	movs	r2, #62	@ 0x3e
 80098b2:	2101      	movs	r1, #1
 80098b4:	5499      	strb	r1, [r3, r2]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	223f      	movs	r2, #63	@ 0x3f
 80098ba:	2101      	movs	r1, #1
 80098bc:	5499      	strb	r1, [r3, r2]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2240      	movs	r2, #64	@ 0x40
 80098c2:	2101      	movs	r1, #1
 80098c4:	5499      	strb	r1, [r3, r2]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2241      	movs	r2, #65	@ 0x41
 80098ca:	2101      	movs	r1, #1
 80098cc:	5499      	strb	r1, [r3, r2]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2242      	movs	r2, #66	@ 0x42
 80098d2:	2101      	movs	r1, #1
 80098d4:	5499      	strb	r1, [r3, r2]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2243      	movs	r2, #67	@ 0x43
 80098da:	2101      	movs	r1, #1
 80098dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2244      	movs	r2, #68	@ 0x44
 80098e2:	2101      	movs	r1, #1
 80098e4:	5499      	strb	r1, [r3, r2]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2245      	movs	r2, #69	@ 0x45
 80098ea:	2101      	movs	r1, #1
 80098ec:	5499      	strb	r1, [r3, r2]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2246      	movs	r2, #70	@ 0x46
 80098f2:	2101      	movs	r1, #1
 80098f4:	5499      	strb	r1, [r3, r2]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2247      	movs	r2, #71	@ 0x47
 80098fa:	2101      	movs	r1, #1
 80098fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	223d      	movs	r2, #61	@ 0x3d
 8009902:	2101      	movs	r1, #1
 8009904:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	0018      	movs	r0, r3
 800990a:	46bd      	mov	sp, r7
 800990c:	b002      	add	sp, #8
 800990e:	bd80      	pop	{r7, pc}
 8009910:	08009915 	.word	0x08009915

08009914 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800991c:	46c0      	nop			@ (mov r8, r8)
 800991e:	46bd      	mov	sp, r7
 8009920:	b002      	add	sp, #8
 8009922:	bd80      	pop	{r7, pc}

08009924 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800992e:	230f      	movs	r3, #15
 8009930:	18fb      	adds	r3, r7, r3
 8009932:	2200      	movs	r2, #0
 8009934:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d108      	bne.n	800994e <HAL_TIM_OC_Start_IT+0x2a>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	223e      	movs	r2, #62	@ 0x3e
 8009940:	5c9b      	ldrb	r3, [r3, r2]
 8009942:	b2db      	uxtb	r3, r3
 8009944:	3b01      	subs	r3, #1
 8009946:	1e5a      	subs	r2, r3, #1
 8009948:	4193      	sbcs	r3, r2
 800994a:	b2db      	uxtb	r3, r3
 800994c:	e037      	b.n	80099be <HAL_TIM_OC_Start_IT+0x9a>
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	2b04      	cmp	r3, #4
 8009952:	d108      	bne.n	8009966 <HAL_TIM_OC_Start_IT+0x42>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	223f      	movs	r2, #63	@ 0x3f
 8009958:	5c9b      	ldrb	r3, [r3, r2]
 800995a:	b2db      	uxtb	r3, r3
 800995c:	3b01      	subs	r3, #1
 800995e:	1e5a      	subs	r2, r3, #1
 8009960:	4193      	sbcs	r3, r2
 8009962:	b2db      	uxtb	r3, r3
 8009964:	e02b      	b.n	80099be <HAL_TIM_OC_Start_IT+0x9a>
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	2b08      	cmp	r3, #8
 800996a:	d108      	bne.n	800997e <HAL_TIM_OC_Start_IT+0x5a>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2240      	movs	r2, #64	@ 0x40
 8009970:	5c9b      	ldrb	r3, [r3, r2]
 8009972:	b2db      	uxtb	r3, r3
 8009974:	3b01      	subs	r3, #1
 8009976:	1e5a      	subs	r2, r3, #1
 8009978:	4193      	sbcs	r3, r2
 800997a:	b2db      	uxtb	r3, r3
 800997c:	e01f      	b.n	80099be <HAL_TIM_OC_Start_IT+0x9a>
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	2b0c      	cmp	r3, #12
 8009982:	d108      	bne.n	8009996 <HAL_TIM_OC_Start_IT+0x72>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2241      	movs	r2, #65	@ 0x41
 8009988:	5c9b      	ldrb	r3, [r3, r2]
 800998a:	b2db      	uxtb	r3, r3
 800998c:	3b01      	subs	r3, #1
 800998e:	1e5a      	subs	r2, r3, #1
 8009990:	4193      	sbcs	r3, r2
 8009992:	b2db      	uxtb	r3, r3
 8009994:	e013      	b.n	80099be <HAL_TIM_OC_Start_IT+0x9a>
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	2b10      	cmp	r3, #16
 800999a:	d108      	bne.n	80099ae <HAL_TIM_OC_Start_IT+0x8a>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2242      	movs	r2, #66	@ 0x42
 80099a0:	5c9b      	ldrb	r3, [r3, r2]
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	3b01      	subs	r3, #1
 80099a6:	1e5a      	subs	r2, r3, #1
 80099a8:	4193      	sbcs	r3, r2
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	e007      	b.n	80099be <HAL_TIM_OC_Start_IT+0x9a>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2243      	movs	r2, #67	@ 0x43
 80099b2:	5c9b      	ldrb	r3, [r3, r2]
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	3b01      	subs	r3, #1
 80099b8:	1e5a      	subs	r2, r3, #1
 80099ba:	4193      	sbcs	r3, r2
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 80099c2:	2301      	movs	r3, #1
 80099c4:	e0c4      	b.n	8009b50 <HAL_TIM_OC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d104      	bne.n	80099d6 <HAL_TIM_OC_Start_IT+0xb2>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	223e      	movs	r2, #62	@ 0x3e
 80099d0:	2102      	movs	r1, #2
 80099d2:	5499      	strb	r1, [r3, r2]
 80099d4:	e023      	b.n	8009a1e <HAL_TIM_OC_Start_IT+0xfa>
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	2b04      	cmp	r3, #4
 80099da:	d104      	bne.n	80099e6 <HAL_TIM_OC_Start_IT+0xc2>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	223f      	movs	r2, #63	@ 0x3f
 80099e0:	2102      	movs	r1, #2
 80099e2:	5499      	strb	r1, [r3, r2]
 80099e4:	e01b      	b.n	8009a1e <HAL_TIM_OC_Start_IT+0xfa>
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	2b08      	cmp	r3, #8
 80099ea:	d104      	bne.n	80099f6 <HAL_TIM_OC_Start_IT+0xd2>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2240      	movs	r2, #64	@ 0x40
 80099f0:	2102      	movs	r1, #2
 80099f2:	5499      	strb	r1, [r3, r2]
 80099f4:	e013      	b.n	8009a1e <HAL_TIM_OC_Start_IT+0xfa>
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	2b0c      	cmp	r3, #12
 80099fa:	d104      	bne.n	8009a06 <HAL_TIM_OC_Start_IT+0xe2>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2241      	movs	r2, #65	@ 0x41
 8009a00:	2102      	movs	r1, #2
 8009a02:	5499      	strb	r1, [r3, r2]
 8009a04:	e00b      	b.n	8009a1e <HAL_TIM_OC_Start_IT+0xfa>
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	2b10      	cmp	r3, #16
 8009a0a:	d104      	bne.n	8009a16 <HAL_TIM_OC_Start_IT+0xf2>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2242      	movs	r2, #66	@ 0x42
 8009a10:	2102      	movs	r1, #2
 8009a12:	5499      	strb	r1, [r3, r2]
 8009a14:	e003      	b.n	8009a1e <HAL_TIM_OC_Start_IT+0xfa>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2243      	movs	r2, #67	@ 0x43
 8009a1a:	2102      	movs	r1, #2
 8009a1c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2b0c      	cmp	r3, #12
 8009a22:	d02a      	beq.n	8009a7a <HAL_TIM_OC_Start_IT+0x156>
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	2b0c      	cmp	r3, #12
 8009a28:	d830      	bhi.n	8009a8c <HAL_TIM_OC_Start_IT+0x168>
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	2b08      	cmp	r3, #8
 8009a2e:	d01b      	beq.n	8009a68 <HAL_TIM_OC_Start_IT+0x144>
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	2b08      	cmp	r3, #8
 8009a34:	d82a      	bhi.n	8009a8c <HAL_TIM_OC_Start_IT+0x168>
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d003      	beq.n	8009a44 <HAL_TIM_OC_Start_IT+0x120>
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	2b04      	cmp	r3, #4
 8009a40:	d009      	beq.n	8009a56 <HAL_TIM_OC_Start_IT+0x132>
 8009a42:	e023      	b.n	8009a8c <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68da      	ldr	r2, [r3, #12]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2102      	movs	r1, #2
 8009a50:	430a      	orrs	r2, r1
 8009a52:	60da      	str	r2, [r3, #12]
      break;
 8009a54:	e01f      	b.n	8009a96 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68da      	ldr	r2, [r3, #12]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2104      	movs	r1, #4
 8009a62:	430a      	orrs	r2, r1
 8009a64:	60da      	str	r2, [r3, #12]
      break;
 8009a66:	e016      	b.n	8009a96 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	68da      	ldr	r2, [r3, #12]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2108      	movs	r1, #8
 8009a74:	430a      	orrs	r2, r1
 8009a76:	60da      	str	r2, [r3, #12]
      break;
 8009a78:	e00d      	b.n	8009a96 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68da      	ldr	r2, [r3, #12]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2110      	movs	r1, #16
 8009a86:	430a      	orrs	r2, r1
 8009a88:	60da      	str	r2, [r3, #12]
      break;
 8009a8a:	e004      	b.n	8009a96 <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 8009a8c:	230f      	movs	r3, #15
 8009a8e:	18fb      	adds	r3, r7, r3
 8009a90:	2201      	movs	r2, #1
 8009a92:	701a      	strb	r2, [r3, #0]
      break;
 8009a94:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8009a96:	230f      	movs	r3, #15
 8009a98:	18fb      	adds	r3, r7, r3
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d154      	bne.n	8009b4a <HAL_TIM_OC_Start_IT+0x226>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	6839      	ldr	r1, [r7, #0]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	0018      	movs	r0, r3
 8009aaa:	f001 fe7f 	bl	800b7ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a29      	ldr	r2, [pc, #164]	@ (8009b58 <HAL_TIM_OC_Start_IT+0x234>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d009      	beq.n	8009acc <HAL_TIM_OC_Start_IT+0x1a8>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a27      	ldr	r2, [pc, #156]	@ (8009b5c <HAL_TIM_OC_Start_IT+0x238>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d004      	beq.n	8009acc <HAL_TIM_OC_Start_IT+0x1a8>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a26      	ldr	r2, [pc, #152]	@ (8009b60 <HAL_TIM_OC_Start_IT+0x23c>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d101      	bne.n	8009ad0 <HAL_TIM_OC_Start_IT+0x1ac>
 8009acc:	2301      	movs	r3, #1
 8009ace:	e000      	b.n	8009ad2 <HAL_TIM_OC_Start_IT+0x1ae>
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d008      	beq.n	8009ae8 <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2180      	movs	r1, #128	@ 0x80
 8009ae2:	0209      	lsls	r1, r1, #8
 8009ae4:	430a      	orrs	r2, r1
 8009ae6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a1a      	ldr	r2, [pc, #104]	@ (8009b58 <HAL_TIM_OC_Start_IT+0x234>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d00a      	beq.n	8009b08 <HAL_TIM_OC_Start_IT+0x1e4>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	2380      	movs	r3, #128	@ 0x80
 8009af8:	05db      	lsls	r3, r3, #23
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d004      	beq.n	8009b08 <HAL_TIM_OC_Start_IT+0x1e4>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a18      	ldr	r2, [pc, #96]	@ (8009b64 <HAL_TIM_OC_Start_IT+0x240>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d116      	bne.n	8009b36 <HAL_TIM_OC_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	4a16      	ldr	r2, [pc, #88]	@ (8009b68 <HAL_TIM_OC_Start_IT+0x244>)
 8009b10:	4013      	ands	r3, r2
 8009b12:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	2b06      	cmp	r3, #6
 8009b18:	d016      	beq.n	8009b48 <HAL_TIM_OC_Start_IT+0x224>
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	2380      	movs	r3, #128	@ 0x80
 8009b1e:	025b      	lsls	r3, r3, #9
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d011      	beq.n	8009b48 <HAL_TIM_OC_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2101      	movs	r1, #1
 8009b30:	430a      	orrs	r2, r1
 8009b32:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b34:	e008      	b.n	8009b48 <HAL_TIM_OC_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2101      	movs	r1, #1
 8009b42:	430a      	orrs	r2, r1
 8009b44:	601a      	str	r2, [r3, #0]
 8009b46:	e000      	b.n	8009b4a <HAL_TIM_OC_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b48:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8009b4a:	230f      	movs	r3, #15
 8009b4c:	18fb      	adds	r3, r7, r3
 8009b4e:	781b      	ldrb	r3, [r3, #0]
}
 8009b50:	0018      	movs	r0, r3
 8009b52:	46bd      	mov	sp, r7
 8009b54:	b004      	add	sp, #16
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	40012c00 	.word	0x40012c00
 8009b5c:	40014400 	.word	0x40014400
 8009b60:	40014800 	.word	0x40014800
 8009b64:	40000400 	.word	0x40000400
 8009b68:	00010007 	.word	0x00010007

08009b6c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b76:	230f      	movs	r3, #15
 8009b78:	18fb      	adds	r3, r7, r3
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	2b0c      	cmp	r3, #12
 8009b82:	d02a      	beq.n	8009bda <HAL_TIM_OC_Stop_IT+0x6e>
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	2b0c      	cmp	r3, #12
 8009b88:	d830      	bhi.n	8009bec <HAL_TIM_OC_Stop_IT+0x80>
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	2b08      	cmp	r3, #8
 8009b8e:	d01b      	beq.n	8009bc8 <HAL_TIM_OC_Stop_IT+0x5c>
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	2b08      	cmp	r3, #8
 8009b94:	d82a      	bhi.n	8009bec <HAL_TIM_OC_Stop_IT+0x80>
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d003      	beq.n	8009ba4 <HAL_TIM_OC_Stop_IT+0x38>
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	2b04      	cmp	r3, #4
 8009ba0:	d009      	beq.n	8009bb6 <HAL_TIM_OC_Stop_IT+0x4a>
 8009ba2:	e023      	b.n	8009bec <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	68da      	ldr	r2, [r3, #12]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2102      	movs	r1, #2
 8009bb0:	438a      	bics	r2, r1
 8009bb2:	60da      	str	r2, [r3, #12]
      break;
 8009bb4:	e01f      	b.n	8009bf6 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	68da      	ldr	r2, [r3, #12]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2104      	movs	r1, #4
 8009bc2:	438a      	bics	r2, r1
 8009bc4:	60da      	str	r2, [r3, #12]
      break;
 8009bc6:	e016      	b.n	8009bf6 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68da      	ldr	r2, [r3, #12]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2108      	movs	r1, #8
 8009bd4:	438a      	bics	r2, r1
 8009bd6:	60da      	str	r2, [r3, #12]
      break;
 8009bd8:	e00d      	b.n	8009bf6 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68da      	ldr	r2, [r3, #12]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2110      	movs	r1, #16
 8009be6:	438a      	bics	r2, r1
 8009be8:	60da      	str	r2, [r3, #12]
      break;
 8009bea:	e004      	b.n	8009bf6 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8009bec:	230f      	movs	r3, #15
 8009bee:	18fb      	adds	r3, r7, r3
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	701a      	strb	r2, [r3, #0]
      break;
 8009bf4:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8009bf6:	230f      	movs	r3, #15
 8009bf8:	18fb      	adds	r3, r7, r3
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d000      	beq.n	8009c02 <HAL_TIM_OC_Stop_IT+0x96>
 8009c00:	e06e      	b.n	8009ce0 <HAL_TIM_OC_Stop_IT+0x174>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	6839      	ldr	r1, [r7, #0]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	0018      	movs	r0, r3
 8009c0c:	f001 fdce 	bl	800b7ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a36      	ldr	r2, [pc, #216]	@ (8009cf0 <HAL_TIM_OC_Stop_IT+0x184>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d009      	beq.n	8009c2e <HAL_TIM_OC_Stop_IT+0xc2>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a35      	ldr	r2, [pc, #212]	@ (8009cf4 <HAL_TIM_OC_Stop_IT+0x188>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d004      	beq.n	8009c2e <HAL_TIM_OC_Stop_IT+0xc2>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a33      	ldr	r2, [pc, #204]	@ (8009cf8 <HAL_TIM_OC_Stop_IT+0x18c>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d101      	bne.n	8009c32 <HAL_TIM_OC_Stop_IT+0xc6>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e000      	b.n	8009c34 <HAL_TIM_OC_Stop_IT+0xc8>
 8009c32:	2300      	movs	r3, #0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d013      	beq.n	8009c60 <HAL_TIM_OC_Stop_IT+0xf4>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	4a2f      	ldr	r2, [pc, #188]	@ (8009cfc <HAL_TIM_OC_Stop_IT+0x190>)
 8009c40:	4013      	ands	r3, r2
 8009c42:	d10d      	bne.n	8009c60 <HAL_TIM_OC_Stop_IT+0xf4>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	6a1b      	ldr	r3, [r3, #32]
 8009c4a:	4a2d      	ldr	r2, [pc, #180]	@ (8009d00 <HAL_TIM_OC_Stop_IT+0x194>)
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	d107      	bne.n	8009c60 <HAL_TIM_OC_Stop_IT+0xf4>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	492a      	ldr	r1, [pc, #168]	@ (8009d04 <HAL_TIM_OC_Stop_IT+0x198>)
 8009c5c:	400a      	ands	r2, r1
 8009c5e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	4a25      	ldr	r2, [pc, #148]	@ (8009cfc <HAL_TIM_OC_Stop_IT+0x190>)
 8009c68:	4013      	ands	r3, r2
 8009c6a:	d10d      	bne.n	8009c88 <HAL_TIM_OC_Stop_IT+0x11c>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	6a1b      	ldr	r3, [r3, #32]
 8009c72:	4a23      	ldr	r2, [pc, #140]	@ (8009d00 <HAL_TIM_OC_Stop_IT+0x194>)
 8009c74:	4013      	ands	r3, r2
 8009c76:	d107      	bne.n	8009c88 <HAL_TIM_OC_Stop_IT+0x11c>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2101      	movs	r1, #1
 8009c84:	438a      	bics	r2, r1
 8009c86:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d104      	bne.n	8009c98 <HAL_TIM_OC_Stop_IT+0x12c>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	223e      	movs	r2, #62	@ 0x3e
 8009c92:	2101      	movs	r1, #1
 8009c94:	5499      	strb	r1, [r3, r2]
 8009c96:	e023      	b.n	8009ce0 <HAL_TIM_OC_Stop_IT+0x174>
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	2b04      	cmp	r3, #4
 8009c9c:	d104      	bne.n	8009ca8 <HAL_TIM_OC_Stop_IT+0x13c>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	223f      	movs	r2, #63	@ 0x3f
 8009ca2:	2101      	movs	r1, #1
 8009ca4:	5499      	strb	r1, [r3, r2]
 8009ca6:	e01b      	b.n	8009ce0 <HAL_TIM_OC_Stop_IT+0x174>
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	2b08      	cmp	r3, #8
 8009cac:	d104      	bne.n	8009cb8 <HAL_TIM_OC_Stop_IT+0x14c>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2240      	movs	r2, #64	@ 0x40
 8009cb2:	2101      	movs	r1, #1
 8009cb4:	5499      	strb	r1, [r3, r2]
 8009cb6:	e013      	b.n	8009ce0 <HAL_TIM_OC_Stop_IT+0x174>
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	2b0c      	cmp	r3, #12
 8009cbc:	d104      	bne.n	8009cc8 <HAL_TIM_OC_Stop_IT+0x15c>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2241      	movs	r2, #65	@ 0x41
 8009cc2:	2101      	movs	r1, #1
 8009cc4:	5499      	strb	r1, [r3, r2]
 8009cc6:	e00b      	b.n	8009ce0 <HAL_TIM_OC_Stop_IT+0x174>
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	2b10      	cmp	r3, #16
 8009ccc:	d104      	bne.n	8009cd8 <HAL_TIM_OC_Stop_IT+0x16c>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2242      	movs	r2, #66	@ 0x42
 8009cd2:	2101      	movs	r1, #1
 8009cd4:	5499      	strb	r1, [r3, r2]
 8009cd6:	e003      	b.n	8009ce0 <HAL_TIM_OC_Stop_IT+0x174>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2243      	movs	r2, #67	@ 0x43
 8009cdc:	2101      	movs	r1, #1
 8009cde:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8009ce0:	230f      	movs	r3, #15
 8009ce2:	18fb      	adds	r3, r7, r3
 8009ce4:	781b      	ldrb	r3, [r3, #0]
}
 8009ce6:	0018      	movs	r0, r3
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	b004      	add	sp, #16
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	46c0      	nop			@ (mov r8, r8)
 8009cf0:	40012c00 	.word	0x40012c00
 8009cf4:	40014400 	.word	0x40014400
 8009cf8:	40014800 	.word	0x40014800
 8009cfc:	00001111 	.word	0x00001111
 8009d00:	00000444 	.word	0x00000444
 8009d04:	ffff7fff 	.word	0xffff7fff

08009d08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d101      	bne.n	8009d1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	e056      	b.n	8009dc8 <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	223d      	movs	r2, #61	@ 0x3d
 8009d1e:	5c9b      	ldrb	r3, [r3, r2]
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d113      	bne.n	8009d4e <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	223c      	movs	r2, #60	@ 0x3c
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	0018      	movs	r0, r3
 8009d32:	f001 fd5f 	bl	800b7f4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d102      	bne.n	8009d44 <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a23      	ldr	r2, [pc, #140]	@ (8009dd0 <HAL_TIM_PWM_Init+0xc8>)
 8009d42:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	0010      	movs	r0, r2
 8009d4c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	223d      	movs	r2, #61	@ 0x3d
 8009d52:	2102      	movs	r1, #2
 8009d54:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	3304      	adds	r3, #4
 8009d5e:	0019      	movs	r1, r3
 8009d60:	0010      	movs	r0, r2
 8009d62:	f001 f849 	bl	800adf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2248      	movs	r2, #72	@ 0x48
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	223e      	movs	r2, #62	@ 0x3e
 8009d72:	2101      	movs	r1, #1
 8009d74:	5499      	strb	r1, [r3, r2]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	223f      	movs	r2, #63	@ 0x3f
 8009d7a:	2101      	movs	r1, #1
 8009d7c:	5499      	strb	r1, [r3, r2]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2240      	movs	r2, #64	@ 0x40
 8009d82:	2101      	movs	r1, #1
 8009d84:	5499      	strb	r1, [r3, r2]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2241      	movs	r2, #65	@ 0x41
 8009d8a:	2101      	movs	r1, #1
 8009d8c:	5499      	strb	r1, [r3, r2]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2242      	movs	r2, #66	@ 0x42
 8009d92:	2101      	movs	r1, #1
 8009d94:	5499      	strb	r1, [r3, r2]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2243      	movs	r2, #67	@ 0x43
 8009d9a:	2101      	movs	r1, #1
 8009d9c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2244      	movs	r2, #68	@ 0x44
 8009da2:	2101      	movs	r1, #1
 8009da4:	5499      	strb	r1, [r3, r2]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2245      	movs	r2, #69	@ 0x45
 8009daa:	2101      	movs	r1, #1
 8009dac:	5499      	strb	r1, [r3, r2]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2246      	movs	r2, #70	@ 0x46
 8009db2:	2101      	movs	r1, #1
 8009db4:	5499      	strb	r1, [r3, r2]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2247      	movs	r2, #71	@ 0x47
 8009dba:	2101      	movs	r1, #1
 8009dbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	223d      	movs	r2, #61	@ 0x3d
 8009dc2:	2101      	movs	r1, #1
 8009dc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	0018      	movs	r0, r3
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	b002      	add	sp, #8
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	08009dd5 	.word	0x08009dd5

08009dd4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009ddc:	46c0      	nop			@ (mov r8, r8)
 8009dde:	46bd      	mov	sp, r7
 8009de0:	b002      	add	sp, #8
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d108      	bne.n	8009e06 <HAL_TIM_PWM_Start+0x22>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	223e      	movs	r2, #62	@ 0x3e
 8009df8:	5c9b      	ldrb	r3, [r3, r2]
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	1e5a      	subs	r2, r3, #1
 8009e00:	4193      	sbcs	r3, r2
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	e037      	b.n	8009e76 <HAL_TIM_PWM_Start+0x92>
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	2b04      	cmp	r3, #4
 8009e0a:	d108      	bne.n	8009e1e <HAL_TIM_PWM_Start+0x3a>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	223f      	movs	r2, #63	@ 0x3f
 8009e10:	5c9b      	ldrb	r3, [r3, r2]
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	3b01      	subs	r3, #1
 8009e16:	1e5a      	subs	r2, r3, #1
 8009e18:	4193      	sbcs	r3, r2
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	e02b      	b.n	8009e76 <HAL_TIM_PWM_Start+0x92>
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2b08      	cmp	r3, #8
 8009e22:	d108      	bne.n	8009e36 <HAL_TIM_PWM_Start+0x52>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2240      	movs	r2, #64	@ 0x40
 8009e28:	5c9b      	ldrb	r3, [r3, r2]
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	1e5a      	subs	r2, r3, #1
 8009e30:	4193      	sbcs	r3, r2
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	e01f      	b.n	8009e76 <HAL_TIM_PWM_Start+0x92>
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	2b0c      	cmp	r3, #12
 8009e3a:	d108      	bne.n	8009e4e <HAL_TIM_PWM_Start+0x6a>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2241      	movs	r2, #65	@ 0x41
 8009e40:	5c9b      	ldrb	r3, [r3, r2]
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	3b01      	subs	r3, #1
 8009e46:	1e5a      	subs	r2, r3, #1
 8009e48:	4193      	sbcs	r3, r2
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	e013      	b.n	8009e76 <HAL_TIM_PWM_Start+0x92>
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	2b10      	cmp	r3, #16
 8009e52:	d108      	bne.n	8009e66 <HAL_TIM_PWM_Start+0x82>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2242      	movs	r2, #66	@ 0x42
 8009e58:	5c9b      	ldrb	r3, [r3, r2]
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	1e5a      	subs	r2, r3, #1
 8009e60:	4193      	sbcs	r3, r2
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	e007      	b.n	8009e76 <HAL_TIM_PWM_Start+0x92>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2243      	movs	r2, #67	@ 0x43
 8009e6a:	5c9b      	ldrb	r3, [r3, r2]
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	1e5a      	subs	r2, r3, #1
 8009e72:	4193      	sbcs	r3, r2
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d001      	beq.n	8009e7e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e081      	b.n	8009f82 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d104      	bne.n	8009e8e <HAL_TIM_PWM_Start+0xaa>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	223e      	movs	r2, #62	@ 0x3e
 8009e88:	2102      	movs	r1, #2
 8009e8a:	5499      	strb	r1, [r3, r2]
 8009e8c:	e023      	b.n	8009ed6 <HAL_TIM_PWM_Start+0xf2>
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	2b04      	cmp	r3, #4
 8009e92:	d104      	bne.n	8009e9e <HAL_TIM_PWM_Start+0xba>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	223f      	movs	r2, #63	@ 0x3f
 8009e98:	2102      	movs	r1, #2
 8009e9a:	5499      	strb	r1, [r3, r2]
 8009e9c:	e01b      	b.n	8009ed6 <HAL_TIM_PWM_Start+0xf2>
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	2b08      	cmp	r3, #8
 8009ea2:	d104      	bne.n	8009eae <HAL_TIM_PWM_Start+0xca>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2240      	movs	r2, #64	@ 0x40
 8009ea8:	2102      	movs	r1, #2
 8009eaa:	5499      	strb	r1, [r3, r2]
 8009eac:	e013      	b.n	8009ed6 <HAL_TIM_PWM_Start+0xf2>
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	2b0c      	cmp	r3, #12
 8009eb2:	d104      	bne.n	8009ebe <HAL_TIM_PWM_Start+0xda>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2241      	movs	r2, #65	@ 0x41
 8009eb8:	2102      	movs	r1, #2
 8009eba:	5499      	strb	r1, [r3, r2]
 8009ebc:	e00b      	b.n	8009ed6 <HAL_TIM_PWM_Start+0xf2>
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	2b10      	cmp	r3, #16
 8009ec2:	d104      	bne.n	8009ece <HAL_TIM_PWM_Start+0xea>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2242      	movs	r2, #66	@ 0x42
 8009ec8:	2102      	movs	r1, #2
 8009eca:	5499      	strb	r1, [r3, r2]
 8009ecc:	e003      	b.n	8009ed6 <HAL_TIM_PWM_Start+0xf2>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2243      	movs	r2, #67	@ 0x43
 8009ed2:	2102      	movs	r1, #2
 8009ed4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	6839      	ldr	r1, [r7, #0]
 8009edc:	2201      	movs	r2, #1
 8009ede:	0018      	movs	r0, r3
 8009ee0:	f001 fc64 	bl	800b7ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a28      	ldr	r2, [pc, #160]	@ (8009f8c <HAL_TIM_PWM_Start+0x1a8>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d009      	beq.n	8009f02 <HAL_TIM_PWM_Start+0x11e>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a27      	ldr	r2, [pc, #156]	@ (8009f90 <HAL_TIM_PWM_Start+0x1ac>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d004      	beq.n	8009f02 <HAL_TIM_PWM_Start+0x11e>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a25      	ldr	r2, [pc, #148]	@ (8009f94 <HAL_TIM_PWM_Start+0x1b0>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d101      	bne.n	8009f06 <HAL_TIM_PWM_Start+0x122>
 8009f02:	2301      	movs	r3, #1
 8009f04:	e000      	b.n	8009f08 <HAL_TIM_PWM_Start+0x124>
 8009f06:	2300      	movs	r3, #0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d008      	beq.n	8009f1e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2180      	movs	r1, #128	@ 0x80
 8009f18:	0209      	lsls	r1, r1, #8
 8009f1a:	430a      	orrs	r2, r1
 8009f1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a1a      	ldr	r2, [pc, #104]	@ (8009f8c <HAL_TIM_PWM_Start+0x1a8>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d00a      	beq.n	8009f3e <HAL_TIM_PWM_Start+0x15a>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	2380      	movs	r3, #128	@ 0x80
 8009f2e:	05db      	lsls	r3, r3, #23
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d004      	beq.n	8009f3e <HAL_TIM_PWM_Start+0x15a>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a17      	ldr	r2, [pc, #92]	@ (8009f98 <HAL_TIM_PWM_Start+0x1b4>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d116      	bne.n	8009f6c <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	4a15      	ldr	r2, [pc, #84]	@ (8009f9c <HAL_TIM_PWM_Start+0x1b8>)
 8009f46:	4013      	ands	r3, r2
 8009f48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2b06      	cmp	r3, #6
 8009f4e:	d016      	beq.n	8009f7e <HAL_TIM_PWM_Start+0x19a>
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	2380      	movs	r3, #128	@ 0x80
 8009f54:	025b      	lsls	r3, r3, #9
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d011      	beq.n	8009f7e <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2101      	movs	r1, #1
 8009f66:	430a      	orrs	r2, r1
 8009f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f6a:	e008      	b.n	8009f7e <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2101      	movs	r1, #1
 8009f78:	430a      	orrs	r2, r1
 8009f7a:	601a      	str	r2, [r3, #0]
 8009f7c:	e000      	b.n	8009f80 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f7e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	0018      	movs	r0, r3
 8009f84:	46bd      	mov	sp, r7
 8009f86:	b004      	add	sp, #16
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	46c0      	nop			@ (mov r8, r8)
 8009f8c:	40012c00 	.word	0x40012c00
 8009f90:	40014400 	.word	0x40014400
 8009f94:	40014800 	.word	0x40014800
 8009f98:	40000400 	.word	0x40000400
 8009f9c:	00010007 	.word	0x00010007

08009fa0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d101      	bne.n	8009fb2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e056      	b.n	800a060 <HAL_TIM_IC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	223d      	movs	r2, #61	@ 0x3d
 8009fb6:	5c9b      	ldrb	r3, [r3, r2]
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d113      	bne.n	8009fe6 <HAL_TIM_IC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	223c      	movs	r2, #60	@ 0x3c
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	0018      	movs	r0, r3
 8009fca:	f001 fc13 	bl	800b7f4 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d102      	bne.n	8009fdc <HAL_TIM_IC_Init+0x3c>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4a23      	ldr	r2, [pc, #140]	@ (800a068 <HAL_TIM_IC_Init+0xc8>)
 8009fda:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	0010      	movs	r0, r2
 8009fe4:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	223d      	movs	r2, #61	@ 0x3d
 8009fea:	2102      	movs	r1, #2
 8009fec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	3304      	adds	r3, #4
 8009ff6:	0019      	movs	r1, r3
 8009ff8:	0010      	movs	r0, r2
 8009ffa:	f000 fefd 	bl	800adf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2248      	movs	r2, #72	@ 0x48
 800a002:	2101      	movs	r1, #1
 800a004:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	223e      	movs	r2, #62	@ 0x3e
 800a00a:	2101      	movs	r1, #1
 800a00c:	5499      	strb	r1, [r3, r2]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	223f      	movs	r2, #63	@ 0x3f
 800a012:	2101      	movs	r1, #1
 800a014:	5499      	strb	r1, [r3, r2]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2240      	movs	r2, #64	@ 0x40
 800a01a:	2101      	movs	r1, #1
 800a01c:	5499      	strb	r1, [r3, r2]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2241      	movs	r2, #65	@ 0x41
 800a022:	2101      	movs	r1, #1
 800a024:	5499      	strb	r1, [r3, r2]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2242      	movs	r2, #66	@ 0x42
 800a02a:	2101      	movs	r1, #1
 800a02c:	5499      	strb	r1, [r3, r2]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2243      	movs	r2, #67	@ 0x43
 800a032:	2101      	movs	r1, #1
 800a034:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2244      	movs	r2, #68	@ 0x44
 800a03a:	2101      	movs	r1, #1
 800a03c:	5499      	strb	r1, [r3, r2]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2245      	movs	r2, #69	@ 0x45
 800a042:	2101      	movs	r1, #1
 800a044:	5499      	strb	r1, [r3, r2]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2246      	movs	r2, #70	@ 0x46
 800a04a:	2101      	movs	r1, #1
 800a04c:	5499      	strb	r1, [r3, r2]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2247      	movs	r2, #71	@ 0x47
 800a052:	2101      	movs	r1, #1
 800a054:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	223d      	movs	r2, #61	@ 0x3d
 800a05a:	2101      	movs	r1, #1
 800a05c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	0018      	movs	r0, r3
 800a062:	46bd      	mov	sp, r7
 800a064:	b002      	add	sp, #8
 800a066:	bd80      	pop	{r7, pc}
 800a068:	0800a06d 	.word	0x0800a06d

0800a06c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a074:	46c0      	nop			@ (mov r8, r8)
 800a076:	46bd      	mov	sp, r7
 800a078:	b002      	add	sp, #8
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a086:	230f      	movs	r3, #15
 800a088:	18fb      	adds	r3, r7, r3
 800a08a:	2200      	movs	r2, #0
 800a08c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d104      	bne.n	800a09e <HAL_TIM_IC_Start_IT+0x22>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	223e      	movs	r2, #62	@ 0x3e
 800a098:	5c9b      	ldrb	r3, [r3, r2]
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	e023      	b.n	800a0e6 <HAL_TIM_IC_Start_IT+0x6a>
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2b04      	cmp	r3, #4
 800a0a2:	d104      	bne.n	800a0ae <HAL_TIM_IC_Start_IT+0x32>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	223f      	movs	r2, #63	@ 0x3f
 800a0a8:	5c9b      	ldrb	r3, [r3, r2]
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	e01b      	b.n	800a0e6 <HAL_TIM_IC_Start_IT+0x6a>
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	2b08      	cmp	r3, #8
 800a0b2:	d104      	bne.n	800a0be <HAL_TIM_IC_Start_IT+0x42>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2240      	movs	r2, #64	@ 0x40
 800a0b8:	5c9b      	ldrb	r3, [r3, r2]
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	e013      	b.n	800a0e6 <HAL_TIM_IC_Start_IT+0x6a>
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	2b0c      	cmp	r3, #12
 800a0c2:	d104      	bne.n	800a0ce <HAL_TIM_IC_Start_IT+0x52>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2241      	movs	r2, #65	@ 0x41
 800a0c8:	5c9b      	ldrb	r3, [r3, r2]
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	e00b      	b.n	800a0e6 <HAL_TIM_IC_Start_IT+0x6a>
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	2b10      	cmp	r3, #16
 800a0d2:	d104      	bne.n	800a0de <HAL_TIM_IC_Start_IT+0x62>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2242      	movs	r2, #66	@ 0x42
 800a0d8:	5c9b      	ldrb	r3, [r3, r2]
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	e003      	b.n	800a0e6 <HAL_TIM_IC_Start_IT+0x6a>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2243      	movs	r2, #67	@ 0x43
 800a0e2:	5c9b      	ldrb	r3, [r3, r2]
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	220e      	movs	r2, #14
 800a0e8:	18ba      	adds	r2, r7, r2
 800a0ea:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d104      	bne.n	800a0fc <HAL_TIM_IC_Start_IT+0x80>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2244      	movs	r2, #68	@ 0x44
 800a0f6:	5c9b      	ldrb	r3, [r3, r2]
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	e013      	b.n	800a124 <HAL_TIM_IC_Start_IT+0xa8>
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	2b04      	cmp	r3, #4
 800a100:	d104      	bne.n	800a10c <HAL_TIM_IC_Start_IT+0x90>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2245      	movs	r2, #69	@ 0x45
 800a106:	5c9b      	ldrb	r3, [r3, r2]
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	e00b      	b.n	800a124 <HAL_TIM_IC_Start_IT+0xa8>
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	2b08      	cmp	r3, #8
 800a110:	d104      	bne.n	800a11c <HAL_TIM_IC_Start_IT+0xa0>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2246      	movs	r2, #70	@ 0x46
 800a116:	5c9b      	ldrb	r3, [r3, r2]
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	e003      	b.n	800a124 <HAL_TIM_IC_Start_IT+0xa8>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2247      	movs	r2, #71	@ 0x47
 800a120:	5c9b      	ldrb	r3, [r3, r2]
 800a122:	b2db      	uxtb	r3, r3
 800a124:	210d      	movs	r1, #13
 800a126:	187a      	adds	r2, r7, r1
 800a128:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a12a:	230e      	movs	r3, #14
 800a12c:	18fb      	adds	r3, r7, r3
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	2b01      	cmp	r3, #1
 800a132:	d103      	bne.n	800a13c <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a134:	187b      	adds	r3, r7, r1
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d001      	beq.n	800a140 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 800a13c:	2301      	movs	r3, #1
 800a13e:	e0c3      	b.n	800a2c8 <HAL_TIM_IC_Start_IT+0x24c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d104      	bne.n	800a150 <HAL_TIM_IC_Start_IT+0xd4>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	223e      	movs	r2, #62	@ 0x3e
 800a14a:	2102      	movs	r1, #2
 800a14c:	5499      	strb	r1, [r3, r2]
 800a14e:	e023      	b.n	800a198 <HAL_TIM_IC_Start_IT+0x11c>
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	2b04      	cmp	r3, #4
 800a154:	d104      	bne.n	800a160 <HAL_TIM_IC_Start_IT+0xe4>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	223f      	movs	r2, #63	@ 0x3f
 800a15a:	2102      	movs	r1, #2
 800a15c:	5499      	strb	r1, [r3, r2]
 800a15e:	e01b      	b.n	800a198 <HAL_TIM_IC_Start_IT+0x11c>
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	2b08      	cmp	r3, #8
 800a164:	d104      	bne.n	800a170 <HAL_TIM_IC_Start_IT+0xf4>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2240      	movs	r2, #64	@ 0x40
 800a16a:	2102      	movs	r1, #2
 800a16c:	5499      	strb	r1, [r3, r2]
 800a16e:	e013      	b.n	800a198 <HAL_TIM_IC_Start_IT+0x11c>
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	2b0c      	cmp	r3, #12
 800a174:	d104      	bne.n	800a180 <HAL_TIM_IC_Start_IT+0x104>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2241      	movs	r2, #65	@ 0x41
 800a17a:	2102      	movs	r1, #2
 800a17c:	5499      	strb	r1, [r3, r2]
 800a17e:	e00b      	b.n	800a198 <HAL_TIM_IC_Start_IT+0x11c>
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	2b10      	cmp	r3, #16
 800a184:	d104      	bne.n	800a190 <HAL_TIM_IC_Start_IT+0x114>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2242      	movs	r2, #66	@ 0x42
 800a18a:	2102      	movs	r1, #2
 800a18c:	5499      	strb	r1, [r3, r2]
 800a18e:	e003      	b.n	800a198 <HAL_TIM_IC_Start_IT+0x11c>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2243      	movs	r2, #67	@ 0x43
 800a194:	2102      	movs	r1, #2
 800a196:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d104      	bne.n	800a1a8 <HAL_TIM_IC_Start_IT+0x12c>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2244      	movs	r2, #68	@ 0x44
 800a1a2:	2102      	movs	r1, #2
 800a1a4:	5499      	strb	r1, [r3, r2]
 800a1a6:	e013      	b.n	800a1d0 <HAL_TIM_IC_Start_IT+0x154>
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	2b04      	cmp	r3, #4
 800a1ac:	d104      	bne.n	800a1b8 <HAL_TIM_IC_Start_IT+0x13c>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2245      	movs	r2, #69	@ 0x45
 800a1b2:	2102      	movs	r1, #2
 800a1b4:	5499      	strb	r1, [r3, r2]
 800a1b6:	e00b      	b.n	800a1d0 <HAL_TIM_IC_Start_IT+0x154>
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	2b08      	cmp	r3, #8
 800a1bc:	d104      	bne.n	800a1c8 <HAL_TIM_IC_Start_IT+0x14c>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2246      	movs	r2, #70	@ 0x46
 800a1c2:	2102      	movs	r1, #2
 800a1c4:	5499      	strb	r1, [r3, r2]
 800a1c6:	e003      	b.n	800a1d0 <HAL_TIM_IC_Start_IT+0x154>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2247      	movs	r2, #71	@ 0x47
 800a1cc:	2102      	movs	r1, #2
 800a1ce:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	2b0c      	cmp	r3, #12
 800a1d4:	d02a      	beq.n	800a22c <HAL_TIM_IC_Start_IT+0x1b0>
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b0c      	cmp	r3, #12
 800a1da:	d830      	bhi.n	800a23e <HAL_TIM_IC_Start_IT+0x1c2>
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	2b08      	cmp	r3, #8
 800a1e0:	d01b      	beq.n	800a21a <HAL_TIM_IC_Start_IT+0x19e>
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	2b08      	cmp	r3, #8
 800a1e6:	d82a      	bhi.n	800a23e <HAL_TIM_IC_Start_IT+0x1c2>
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d003      	beq.n	800a1f6 <HAL_TIM_IC_Start_IT+0x17a>
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b04      	cmp	r3, #4
 800a1f2:	d009      	beq.n	800a208 <HAL_TIM_IC_Start_IT+0x18c>
 800a1f4:	e023      	b.n	800a23e <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	68da      	ldr	r2, [r3, #12]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2102      	movs	r1, #2
 800a202:	430a      	orrs	r2, r1
 800a204:	60da      	str	r2, [r3, #12]
      break;
 800a206:	e01f      	b.n	800a248 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	68da      	ldr	r2, [r3, #12]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2104      	movs	r1, #4
 800a214:	430a      	orrs	r2, r1
 800a216:	60da      	str	r2, [r3, #12]
      break;
 800a218:	e016      	b.n	800a248 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	68da      	ldr	r2, [r3, #12]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2108      	movs	r1, #8
 800a226:	430a      	orrs	r2, r1
 800a228:	60da      	str	r2, [r3, #12]
      break;
 800a22a:	e00d      	b.n	800a248 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	68da      	ldr	r2, [r3, #12]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2110      	movs	r1, #16
 800a238:	430a      	orrs	r2, r1
 800a23a:	60da      	str	r2, [r3, #12]
      break;
 800a23c:	e004      	b.n	800a248 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 800a23e:	230f      	movs	r3, #15
 800a240:	18fb      	adds	r3, r7, r3
 800a242:	2201      	movs	r2, #1
 800a244:	701a      	strb	r2, [r3, #0]
      break;
 800a246:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800a248:	230f      	movs	r3, #15
 800a24a:	18fb      	adds	r3, r7, r3
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d137      	bne.n	800a2c2 <HAL_TIM_IC_Start_IT+0x246>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	6839      	ldr	r1, [r7, #0]
 800a258:	2201      	movs	r2, #1
 800a25a:	0018      	movs	r0, r3
 800a25c:	f001 faa6 	bl	800b7ac <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a1a      	ldr	r2, [pc, #104]	@ (800a2d0 <HAL_TIM_IC_Start_IT+0x254>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d00a      	beq.n	800a280 <HAL_TIM_IC_Start_IT+0x204>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	2380      	movs	r3, #128	@ 0x80
 800a270:	05db      	lsls	r3, r3, #23
 800a272:	429a      	cmp	r2, r3
 800a274:	d004      	beq.n	800a280 <HAL_TIM_IC_Start_IT+0x204>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a16      	ldr	r2, [pc, #88]	@ (800a2d4 <HAL_TIM_IC_Start_IT+0x258>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d116      	bne.n	800a2ae <HAL_TIM_IC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	4a14      	ldr	r2, [pc, #80]	@ (800a2d8 <HAL_TIM_IC_Start_IT+0x25c>)
 800a288:	4013      	ands	r3, r2
 800a28a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	2b06      	cmp	r3, #6
 800a290:	d016      	beq.n	800a2c0 <HAL_TIM_IC_Start_IT+0x244>
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	2380      	movs	r3, #128	@ 0x80
 800a296:	025b      	lsls	r3, r3, #9
 800a298:	429a      	cmp	r2, r3
 800a29a:	d011      	beq.n	800a2c0 <HAL_TIM_IC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2101      	movs	r1, #1
 800a2a8:	430a      	orrs	r2, r1
 800a2aa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2ac:	e008      	b.n	800a2c0 <HAL_TIM_IC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2101      	movs	r1, #1
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	601a      	str	r2, [r3, #0]
 800a2be:	e000      	b.n	800a2c2 <HAL_TIM_IC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2c0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800a2c2:	230f      	movs	r3, #15
 800a2c4:	18fb      	adds	r3, r7, r3
 800a2c6:	781b      	ldrb	r3, [r3, #0]
}
 800a2c8:	0018      	movs	r0, r3
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	b004      	add	sp, #16
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	40012c00 	.word	0x40012c00
 800a2d4:	40000400 	.word	0x40000400
 800a2d8:	00010007 	.word	0x00010007

0800a2dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	691b      	ldr	r3, [r3, #16]
 800a2f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	2202      	movs	r2, #2
 800a2f8:	4013      	ands	r3, r2
 800a2fa:	d027      	beq.n	800a34c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2202      	movs	r2, #2
 800a300:	4013      	ands	r3, r2
 800a302:	d023      	beq.n	800a34c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2203      	movs	r2, #3
 800a30a:	4252      	negs	r2, r2
 800a30c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2201      	movs	r2, #1
 800a312:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	699b      	ldr	r3, [r3, #24]
 800a31a:	2203      	movs	r2, #3
 800a31c:	4013      	ands	r3, r2
 800a31e:	d006      	beq.n	800a32e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2294      	movs	r2, #148	@ 0x94
 800a324:	589b      	ldr	r3, [r3, r2]
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	0010      	movs	r0, r2
 800a32a:	4798      	blx	r3
 800a32c:	e00b      	b.n	800a346 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	229c      	movs	r2, #156	@ 0x9c
 800a332:	589b      	ldr	r3, [r3, r2]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	0010      	movs	r0, r2
 800a338:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	22a0      	movs	r2, #160	@ 0xa0
 800a33e:	589b      	ldr	r3, [r3, r2]
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	0010      	movs	r0, r2
 800a344:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	2204      	movs	r2, #4
 800a350:	4013      	ands	r3, r2
 800a352:	d028      	beq.n	800a3a6 <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2204      	movs	r2, #4
 800a358:	4013      	ands	r3, r2
 800a35a:	d024      	beq.n	800a3a6 <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2205      	movs	r2, #5
 800a362:	4252      	negs	r2, r2
 800a364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2202      	movs	r2, #2
 800a36a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	699a      	ldr	r2, [r3, #24]
 800a372:	23c0      	movs	r3, #192	@ 0xc0
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	4013      	ands	r3, r2
 800a378:	d006      	beq.n	800a388 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2294      	movs	r2, #148	@ 0x94
 800a37e:	589b      	ldr	r3, [r3, r2]
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	0010      	movs	r0, r2
 800a384:	4798      	blx	r3
 800a386:	e00b      	b.n	800a3a0 <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	229c      	movs	r2, #156	@ 0x9c
 800a38c:	589b      	ldr	r3, [r3, r2]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	0010      	movs	r0, r2
 800a392:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	22a0      	movs	r2, #160	@ 0xa0
 800a398:	589b      	ldr	r3, [r3, r2]
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	0010      	movs	r0, r2
 800a39e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	2208      	movs	r2, #8
 800a3aa:	4013      	ands	r3, r2
 800a3ac:	d027      	beq.n	800a3fe <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2208      	movs	r2, #8
 800a3b2:	4013      	ands	r3, r2
 800a3b4:	d023      	beq.n	800a3fe <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2209      	movs	r2, #9
 800a3bc:	4252      	negs	r2, r2
 800a3be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2204      	movs	r2, #4
 800a3c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	69db      	ldr	r3, [r3, #28]
 800a3cc:	2203      	movs	r2, #3
 800a3ce:	4013      	ands	r3, r2
 800a3d0:	d006      	beq.n	800a3e0 <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2294      	movs	r2, #148	@ 0x94
 800a3d6:	589b      	ldr	r3, [r3, r2]
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	0010      	movs	r0, r2
 800a3dc:	4798      	blx	r3
 800a3de:	e00b      	b.n	800a3f8 <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	229c      	movs	r2, #156	@ 0x9c
 800a3e4:	589b      	ldr	r3, [r3, r2]
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	0010      	movs	r0, r2
 800a3ea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	22a0      	movs	r2, #160	@ 0xa0
 800a3f0:	589b      	ldr	r3, [r3, r2]
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	0010      	movs	r0, r2
 800a3f6:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	2210      	movs	r2, #16
 800a402:	4013      	ands	r3, r2
 800a404:	d028      	beq.n	800a458 <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2210      	movs	r2, #16
 800a40a:	4013      	ands	r3, r2
 800a40c:	d024      	beq.n	800a458 <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2211      	movs	r2, #17
 800a414:	4252      	negs	r2, r2
 800a416:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2208      	movs	r2, #8
 800a41c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	69da      	ldr	r2, [r3, #28]
 800a424:	23c0      	movs	r3, #192	@ 0xc0
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	4013      	ands	r3, r2
 800a42a:	d006      	beq.n	800a43a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2294      	movs	r2, #148	@ 0x94
 800a430:	589b      	ldr	r3, [r3, r2]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	0010      	movs	r0, r2
 800a436:	4798      	blx	r3
 800a438:	e00b      	b.n	800a452 <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	229c      	movs	r2, #156	@ 0x9c
 800a43e:	589b      	ldr	r3, [r3, r2]
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	0010      	movs	r0, r2
 800a444:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	22a0      	movs	r2, #160	@ 0xa0
 800a44a:	589b      	ldr	r3, [r3, r2]
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	0010      	movs	r0, r2
 800a450:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	2201      	movs	r2, #1
 800a45c:	4013      	ands	r3, r2
 800a45e:	d00e      	beq.n	800a47e <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2201      	movs	r2, #1
 800a464:	4013      	ands	r3, r2
 800a466:	d00a      	beq.n	800a47e <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2202      	movs	r2, #2
 800a46e:	4252      	negs	r2, r2
 800a470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2284      	movs	r2, #132	@ 0x84
 800a476:	589b      	ldr	r3, [r3, r2]
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	0010      	movs	r0, r2
 800a47c:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	2280      	movs	r2, #128	@ 0x80
 800a482:	4013      	ands	r3, r2
 800a484:	d104      	bne.n	800a490 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	2380      	movs	r3, #128	@ 0x80
 800a48a:	019b      	lsls	r3, r3, #6
 800a48c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a48e:	d00d      	beq.n	800a4ac <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2280      	movs	r2, #128	@ 0x80
 800a494:	4013      	ands	r3, r2
 800a496:	d009      	beq.n	800a4ac <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a22      	ldr	r2, [pc, #136]	@ (800a528 <HAL_TIM_IRQHandler+0x24c>)
 800a49e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	22b4      	movs	r2, #180	@ 0xb4
 800a4a4:	589b      	ldr	r3, [r3, r2]
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	0010      	movs	r0, r2
 800a4aa:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	2380      	movs	r3, #128	@ 0x80
 800a4b0:	005b      	lsls	r3, r3, #1
 800a4b2:	4013      	ands	r3, r2
 800a4b4:	d00d      	beq.n	800a4d2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2280      	movs	r2, #128	@ 0x80
 800a4ba:	4013      	ands	r3, r2
 800a4bc:	d009      	beq.n	800a4d2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a1a      	ldr	r2, [pc, #104]	@ (800a52c <HAL_TIM_IRQHandler+0x250>)
 800a4c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	22b8      	movs	r2, #184	@ 0xb8
 800a4ca:	589b      	ldr	r3, [r3, r2]
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	0010      	movs	r0, r2
 800a4d0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	2240      	movs	r2, #64	@ 0x40
 800a4d6:	4013      	ands	r3, r2
 800a4d8:	d00e      	beq.n	800a4f8 <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2240      	movs	r2, #64	@ 0x40
 800a4de:	4013      	ands	r3, r2
 800a4e0:	d00a      	beq.n	800a4f8 <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2241      	movs	r2, #65	@ 0x41
 800a4e8:	4252      	negs	r2, r2
 800a4ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	228c      	movs	r2, #140	@ 0x8c
 800a4f0:	589b      	ldr	r3, [r3, r2]
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	0010      	movs	r0, r2
 800a4f6:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	2220      	movs	r2, #32
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	d00e      	beq.n	800a51e <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2220      	movs	r2, #32
 800a504:	4013      	ands	r3, r2
 800a506:	d00a      	beq.n	800a51e <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2221      	movs	r2, #33	@ 0x21
 800a50e:	4252      	negs	r2, r2
 800a510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	22ac      	movs	r2, #172	@ 0xac
 800a516:	589b      	ldr	r3, [r3, r2]
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	0010      	movs	r0, r2
 800a51c:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a51e:	46c0      	nop			@ (mov r8, r8)
 800a520:	46bd      	mov	sp, r7
 800a522:	b004      	add	sp, #16
 800a524:	bd80      	pop	{r7, pc}
 800a526:	46c0      	nop			@ (mov r8, r8)
 800a528:	ffffdf7f 	.word	0xffffdf7f
 800a52c:	fffffeff 	.word	0xfffffeff

0800a530 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a53c:	2317      	movs	r3, #23
 800a53e:	18fb      	adds	r3, r7, r3
 800a540:	2200      	movs	r2, #0
 800a542:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	223c      	movs	r2, #60	@ 0x3c
 800a548:	5c9b      	ldrb	r3, [r3, r2]
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d101      	bne.n	800a552 <HAL_TIM_OC_ConfigChannel+0x22>
 800a54e:	2302      	movs	r3, #2
 800a550:	e048      	b.n	800a5e4 <HAL_TIM_OC_ConfigChannel+0xb4>
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	223c      	movs	r2, #60	@ 0x3c
 800a556:	2101      	movs	r1, #1
 800a558:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2b14      	cmp	r3, #20
 800a55e:	d835      	bhi.n	800a5cc <HAL_TIM_OC_ConfigChannel+0x9c>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	009a      	lsls	r2, r3, #2
 800a564:	4b21      	ldr	r3, [pc, #132]	@ (800a5ec <HAL_TIM_OC_ConfigChannel+0xbc>)
 800a566:	18d3      	adds	r3, r2, r3
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68ba      	ldr	r2, [r7, #8]
 800a572:	0011      	movs	r1, r2
 800a574:	0018      	movs	r0, r3
 800a576:	f000 fcc3 	bl	800af00 <TIM_OC1_SetConfig>
      break;
 800a57a:	e02c      	b.n	800a5d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68ba      	ldr	r2, [r7, #8]
 800a582:	0011      	movs	r1, r2
 800a584:	0018      	movs	r0, r3
 800a586:	f000 fd3b 	bl	800b000 <TIM_OC2_SetConfig>
      break;
 800a58a:	e024      	b.n	800a5d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	0011      	movs	r1, r2
 800a594:	0018      	movs	r0, r3
 800a596:	f000 fdb1 	bl	800b0fc <TIM_OC3_SetConfig>
      break;
 800a59a:	e01c      	b.n	800a5d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68ba      	ldr	r2, [r7, #8]
 800a5a2:	0011      	movs	r1, r2
 800a5a4:	0018      	movs	r0, r3
 800a5a6:	f000 fe2b 	bl	800b200 <TIM_OC4_SetConfig>
      break;
 800a5aa:	e014      	b.n	800a5d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	0011      	movs	r1, r2
 800a5b4:	0018      	movs	r0, r3
 800a5b6:	f000 fe87 	bl	800b2c8 <TIM_OC5_SetConfig>
      break;
 800a5ba:	e00c      	b.n	800a5d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	0011      	movs	r1, r2
 800a5c4:	0018      	movs	r0, r3
 800a5c6:	f000 fed9 	bl	800b37c <TIM_OC6_SetConfig>
      break;
 800a5ca:	e004      	b.n	800a5d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a5cc:	2317      	movs	r3, #23
 800a5ce:	18fb      	adds	r3, r7, r3
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	701a      	strb	r2, [r3, #0]
      break;
 800a5d4:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	223c      	movs	r2, #60	@ 0x3c
 800a5da:	2100      	movs	r1, #0
 800a5dc:	5499      	strb	r1, [r3, r2]

  return status;
 800a5de:	2317      	movs	r3, #23
 800a5e0:	18fb      	adds	r3, r7, r3
 800a5e2:	781b      	ldrb	r3, [r3, #0]
}
 800a5e4:	0018      	movs	r0, r3
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	b006      	add	sp, #24
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	0800dcec 	.word	0x0800dcec

0800a5f0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b086      	sub	sp, #24
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5fc:	2317      	movs	r3, #23
 800a5fe:	18fb      	adds	r3, r7, r3
 800a600:	2200      	movs	r2, #0
 800a602:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	223c      	movs	r2, #60	@ 0x3c
 800a608:	5c9b      	ldrb	r3, [r3, r2]
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d101      	bne.n	800a612 <HAL_TIM_IC_ConfigChannel+0x22>
 800a60e:	2302      	movs	r3, #2
 800a610:	e08c      	b.n	800a72c <HAL_TIM_IC_ConfigChannel+0x13c>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	223c      	movs	r2, #60	@ 0x3c
 800a616:	2101      	movs	r1, #1
 800a618:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d11b      	bne.n	800a658 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800a630:	f000 ff02 	bl	800b438 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	699a      	ldr	r2, [r3, #24]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	210c      	movs	r1, #12
 800a640:	438a      	bics	r2, r1
 800a642:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	6999      	ldr	r1, [r3, #24]
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	689a      	ldr	r2, [r3, #8]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	430a      	orrs	r2, r1
 800a654:	619a      	str	r2, [r3, #24]
 800a656:	e062      	b.n	800a71e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b04      	cmp	r3, #4
 800a65c:	d11c      	bne.n	800a698 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800a66e:	f000 ff67 	bl	800b540 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	699a      	ldr	r2, [r3, #24]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	492d      	ldr	r1, [pc, #180]	@ (800a734 <HAL_TIM_IC_ConfigChannel+0x144>)
 800a67e:	400a      	ands	r2, r1
 800a680:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	6999      	ldr	r1, [r3, #24]
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	021a      	lsls	r2, r3, #8
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	430a      	orrs	r2, r1
 800a694:	619a      	str	r2, [r3, #24]
 800a696:	e042      	b.n	800a71e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2b08      	cmp	r3, #8
 800a69c:	d11b      	bne.n	800a6d6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800a6ae:	f000 ffbb 	bl	800b628 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	69da      	ldr	r2, [r3, #28]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	210c      	movs	r1, #12
 800a6be:	438a      	bics	r2, r1
 800a6c0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	69d9      	ldr	r1, [r3, #28]
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	689a      	ldr	r2, [r3, #8]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	430a      	orrs	r2, r1
 800a6d2:	61da      	str	r2, [r3, #28]
 800a6d4:	e023      	b.n	800a71e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2b0c      	cmp	r3, #12
 800a6da:	d11c      	bne.n	800a716 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800a6ec:	f000 ffdc 	bl	800b6a8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	69da      	ldr	r2, [r3, #28]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	490e      	ldr	r1, [pc, #56]	@ (800a734 <HAL_TIM_IC_ConfigChannel+0x144>)
 800a6fc:	400a      	ands	r2, r1
 800a6fe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	69d9      	ldr	r1, [r3, #28]
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	021a      	lsls	r2, r3, #8
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	430a      	orrs	r2, r1
 800a712:	61da      	str	r2, [r3, #28]
 800a714:	e003      	b.n	800a71e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800a716:	2317      	movs	r3, #23
 800a718:	18fb      	adds	r3, r7, r3
 800a71a:	2201      	movs	r2, #1
 800a71c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	223c      	movs	r2, #60	@ 0x3c
 800a722:	2100      	movs	r1, #0
 800a724:	5499      	strb	r1, [r3, r2]

  return status;
 800a726:	2317      	movs	r3, #23
 800a728:	18fb      	adds	r3, r7, r3
 800a72a:	781b      	ldrb	r3, [r3, #0]
}
 800a72c:	0018      	movs	r0, r3
 800a72e:	46bd      	mov	sp, r7
 800a730:	b006      	add	sp, #24
 800a732:	bd80      	pop	{r7, pc}
 800a734:	fffff3ff 	.word	0xfffff3ff

0800a738 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b086      	sub	sp, #24
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a744:	2317      	movs	r3, #23
 800a746:	18fb      	adds	r3, r7, r3
 800a748:	2200      	movs	r2, #0
 800a74a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	223c      	movs	r2, #60	@ 0x3c
 800a750:	5c9b      	ldrb	r3, [r3, r2]
 800a752:	2b01      	cmp	r3, #1
 800a754:	d101      	bne.n	800a75a <HAL_TIM_PWM_ConfigChannel+0x22>
 800a756:	2302      	movs	r3, #2
 800a758:	e0e5      	b.n	800a926 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	223c      	movs	r2, #60	@ 0x3c
 800a75e:	2101      	movs	r1, #1
 800a760:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2b14      	cmp	r3, #20
 800a766:	d900      	bls.n	800a76a <HAL_TIM_PWM_ConfigChannel+0x32>
 800a768:	e0d1      	b.n	800a90e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	009a      	lsls	r2, r3, #2
 800a76e:	4b70      	ldr	r3, [pc, #448]	@ (800a930 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a770:	18d3      	adds	r3, r2, r3
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68ba      	ldr	r2, [r7, #8]
 800a77c:	0011      	movs	r1, r2
 800a77e:	0018      	movs	r0, r3
 800a780:	f000 fbbe 	bl	800af00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	699a      	ldr	r2, [r3, #24]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2108      	movs	r1, #8
 800a790:	430a      	orrs	r2, r1
 800a792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	699a      	ldr	r2, [r3, #24]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2104      	movs	r1, #4
 800a7a0:	438a      	bics	r2, r1
 800a7a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	6999      	ldr	r1, [r3, #24]
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	691a      	ldr	r2, [r3, #16]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	430a      	orrs	r2, r1
 800a7b4:	619a      	str	r2, [r3, #24]
      break;
 800a7b6:	e0af      	b.n	800a918 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68ba      	ldr	r2, [r7, #8]
 800a7be:	0011      	movs	r1, r2
 800a7c0:	0018      	movs	r0, r3
 800a7c2:	f000 fc1d 	bl	800b000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	699a      	ldr	r2, [r3, #24]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2180      	movs	r1, #128	@ 0x80
 800a7d2:	0109      	lsls	r1, r1, #4
 800a7d4:	430a      	orrs	r2, r1
 800a7d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	699a      	ldr	r2, [r3, #24]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4954      	ldr	r1, [pc, #336]	@ (800a934 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a7e4:	400a      	ands	r2, r1
 800a7e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	6999      	ldr	r1, [r3, #24]
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	021a      	lsls	r2, r3, #8
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	430a      	orrs	r2, r1
 800a7fa:	619a      	str	r2, [r3, #24]
      break;
 800a7fc:	e08c      	b.n	800a918 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	0011      	movs	r1, r2
 800a806:	0018      	movs	r0, r3
 800a808:	f000 fc78 	bl	800b0fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	69da      	ldr	r2, [r3, #28]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2108      	movs	r1, #8
 800a818:	430a      	orrs	r2, r1
 800a81a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	69da      	ldr	r2, [r3, #28]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2104      	movs	r1, #4
 800a828:	438a      	bics	r2, r1
 800a82a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	69d9      	ldr	r1, [r3, #28]
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	691a      	ldr	r2, [r3, #16]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	430a      	orrs	r2, r1
 800a83c:	61da      	str	r2, [r3, #28]
      break;
 800a83e:	e06b      	b.n	800a918 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	68ba      	ldr	r2, [r7, #8]
 800a846:	0011      	movs	r1, r2
 800a848:	0018      	movs	r0, r3
 800a84a:	f000 fcd9 	bl	800b200 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	69da      	ldr	r2, [r3, #28]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2180      	movs	r1, #128	@ 0x80
 800a85a:	0109      	lsls	r1, r1, #4
 800a85c:	430a      	orrs	r2, r1
 800a85e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	69da      	ldr	r2, [r3, #28]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4932      	ldr	r1, [pc, #200]	@ (800a934 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a86c:	400a      	ands	r2, r1
 800a86e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	69d9      	ldr	r1, [r3, #28]
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	021a      	lsls	r2, r3, #8
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	430a      	orrs	r2, r1
 800a882:	61da      	str	r2, [r3, #28]
      break;
 800a884:	e048      	b.n	800a918 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68ba      	ldr	r2, [r7, #8]
 800a88c:	0011      	movs	r1, r2
 800a88e:	0018      	movs	r0, r3
 800a890:	f000 fd1a 	bl	800b2c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	2108      	movs	r1, #8
 800a8a0:	430a      	orrs	r2, r1
 800a8a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2104      	movs	r1, #4
 800a8b0:	438a      	bics	r2, r1
 800a8b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	691a      	ldr	r2, [r3, #16]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	430a      	orrs	r2, r1
 800a8c4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a8c6:	e027      	b.n	800a918 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	68ba      	ldr	r2, [r7, #8]
 800a8ce:	0011      	movs	r1, r2
 800a8d0:	0018      	movs	r0, r3
 800a8d2:	f000 fd53 	bl	800b37c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2180      	movs	r1, #128	@ 0x80
 800a8e2:	0109      	lsls	r1, r1, #4
 800a8e4:	430a      	orrs	r2, r1
 800a8e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4910      	ldr	r1, [pc, #64]	@ (800a934 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a8f4:	400a      	ands	r2, r1
 800a8f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	021a      	lsls	r2, r3, #8
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	430a      	orrs	r2, r1
 800a90a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a90c:	e004      	b.n	800a918 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800a90e:	2317      	movs	r3, #23
 800a910:	18fb      	adds	r3, r7, r3
 800a912:	2201      	movs	r2, #1
 800a914:	701a      	strb	r2, [r3, #0]
      break;
 800a916:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	223c      	movs	r2, #60	@ 0x3c
 800a91c:	2100      	movs	r1, #0
 800a91e:	5499      	strb	r1, [r3, r2]

  return status;
 800a920:	2317      	movs	r3, #23
 800a922:	18fb      	adds	r3, r7, r3
 800a924:	781b      	ldrb	r3, [r3, #0]
}
 800a926:	0018      	movs	r0, r3
 800a928:	46bd      	mov	sp, r7
 800a92a:	b006      	add	sp, #24
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	46c0      	nop			@ (mov r8, r8)
 800a930:	0800dd40 	.word	0x0800dd40
 800a934:	fffffbff 	.word	0xfffffbff

0800a938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a942:	230f      	movs	r3, #15
 800a944:	18fb      	adds	r3, r7, r3
 800a946:	2200      	movs	r2, #0
 800a948:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	223c      	movs	r2, #60	@ 0x3c
 800a94e:	5c9b      	ldrb	r3, [r3, r2]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d101      	bne.n	800a958 <HAL_TIM_ConfigClockSource+0x20>
 800a954:	2302      	movs	r3, #2
 800a956:	e0bc      	b.n	800aad2 <HAL_TIM_ConfigClockSource+0x19a>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	223c      	movs	r2, #60	@ 0x3c
 800a95c:	2101      	movs	r1, #1
 800a95e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	223d      	movs	r2, #61	@ 0x3d
 800a964:	2102      	movs	r1, #2
 800a966:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	4a5a      	ldr	r2, [pc, #360]	@ (800aadc <HAL_TIM_ConfigClockSource+0x1a4>)
 800a974:	4013      	ands	r3, r2
 800a976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	4a59      	ldr	r2, [pc, #356]	@ (800aae0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800a97c:	4013      	ands	r3, r2
 800a97e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	68ba      	ldr	r2, [r7, #8]
 800a986:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	2280      	movs	r2, #128	@ 0x80
 800a98e:	0192      	lsls	r2, r2, #6
 800a990:	4293      	cmp	r3, r2
 800a992:	d040      	beq.n	800aa16 <HAL_TIM_ConfigClockSource+0xde>
 800a994:	2280      	movs	r2, #128	@ 0x80
 800a996:	0192      	lsls	r2, r2, #6
 800a998:	4293      	cmp	r3, r2
 800a99a:	d900      	bls.n	800a99e <HAL_TIM_ConfigClockSource+0x66>
 800a99c:	e088      	b.n	800aab0 <HAL_TIM_ConfigClockSource+0x178>
 800a99e:	2280      	movs	r2, #128	@ 0x80
 800a9a0:	0152      	lsls	r2, r2, #5
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d100      	bne.n	800a9a8 <HAL_TIM_ConfigClockSource+0x70>
 800a9a6:	e088      	b.n	800aaba <HAL_TIM_ConfigClockSource+0x182>
 800a9a8:	2280      	movs	r2, #128	@ 0x80
 800a9aa:	0152      	lsls	r2, r2, #5
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d900      	bls.n	800a9b2 <HAL_TIM_ConfigClockSource+0x7a>
 800a9b0:	e07e      	b.n	800aab0 <HAL_TIM_ConfigClockSource+0x178>
 800a9b2:	2b70      	cmp	r3, #112	@ 0x70
 800a9b4:	d018      	beq.n	800a9e8 <HAL_TIM_ConfigClockSource+0xb0>
 800a9b6:	d900      	bls.n	800a9ba <HAL_TIM_ConfigClockSource+0x82>
 800a9b8:	e07a      	b.n	800aab0 <HAL_TIM_ConfigClockSource+0x178>
 800a9ba:	2b60      	cmp	r3, #96	@ 0x60
 800a9bc:	d04f      	beq.n	800aa5e <HAL_TIM_ConfigClockSource+0x126>
 800a9be:	d900      	bls.n	800a9c2 <HAL_TIM_ConfigClockSource+0x8a>
 800a9c0:	e076      	b.n	800aab0 <HAL_TIM_ConfigClockSource+0x178>
 800a9c2:	2b50      	cmp	r3, #80	@ 0x50
 800a9c4:	d03b      	beq.n	800aa3e <HAL_TIM_ConfigClockSource+0x106>
 800a9c6:	d900      	bls.n	800a9ca <HAL_TIM_ConfigClockSource+0x92>
 800a9c8:	e072      	b.n	800aab0 <HAL_TIM_ConfigClockSource+0x178>
 800a9ca:	2b40      	cmp	r3, #64	@ 0x40
 800a9cc:	d057      	beq.n	800aa7e <HAL_TIM_ConfigClockSource+0x146>
 800a9ce:	d900      	bls.n	800a9d2 <HAL_TIM_ConfigClockSource+0x9a>
 800a9d0:	e06e      	b.n	800aab0 <HAL_TIM_ConfigClockSource+0x178>
 800a9d2:	2b30      	cmp	r3, #48	@ 0x30
 800a9d4:	d063      	beq.n	800aa9e <HAL_TIM_ConfigClockSource+0x166>
 800a9d6:	d86b      	bhi.n	800aab0 <HAL_TIM_ConfigClockSource+0x178>
 800a9d8:	2b20      	cmp	r3, #32
 800a9da:	d060      	beq.n	800aa9e <HAL_TIM_ConfigClockSource+0x166>
 800a9dc:	d868      	bhi.n	800aab0 <HAL_TIM_ConfigClockSource+0x178>
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d05d      	beq.n	800aa9e <HAL_TIM_ConfigClockSource+0x166>
 800a9e2:	2b10      	cmp	r3, #16
 800a9e4:	d05b      	beq.n	800aa9e <HAL_TIM_ConfigClockSource+0x166>
 800a9e6:	e063      	b.n	800aab0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a9f8:	f000 feb8 	bl	800b76c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	2277      	movs	r2, #119	@ 0x77
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	68ba      	ldr	r2, [r7, #8]
 800aa12:	609a      	str	r2, [r3, #8]
      break;
 800aa14:	e052      	b.n	800aabc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa26:	f000 fea1 	bl	800b76c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	689a      	ldr	r2, [r3, #8]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2180      	movs	r1, #128	@ 0x80
 800aa36:	01c9      	lsls	r1, r1, #7
 800aa38:	430a      	orrs	r2, r1
 800aa3a:	609a      	str	r2, [r3, #8]
      break;
 800aa3c:	e03e      	b.n	800aabc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa4a:	001a      	movs	r2, r3
 800aa4c:	f000 fd4a 	bl	800b4e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2150      	movs	r1, #80	@ 0x50
 800aa56:	0018      	movs	r0, r3
 800aa58:	f000 fe6c 	bl	800b734 <TIM_ITRx_SetConfig>
      break;
 800aa5c:	e02e      	b.n	800aabc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa6a:	001a      	movs	r2, r3
 800aa6c:	f000 fdaa 	bl	800b5c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2160      	movs	r1, #96	@ 0x60
 800aa76:	0018      	movs	r0, r3
 800aa78:	f000 fe5c 	bl	800b734 <TIM_ITRx_SetConfig>
      break;
 800aa7c:	e01e      	b.n	800aabc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa8a:	001a      	movs	r2, r3
 800aa8c:	f000 fd2a 	bl	800b4e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2140      	movs	r1, #64	@ 0x40
 800aa96:	0018      	movs	r0, r3
 800aa98:	f000 fe4c 	bl	800b734 <TIM_ITRx_SetConfig>
      break;
 800aa9c:	e00e      	b.n	800aabc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	0019      	movs	r1, r3
 800aaa8:	0010      	movs	r0, r2
 800aaaa:	f000 fe43 	bl	800b734 <TIM_ITRx_SetConfig>
      break;
 800aaae:	e005      	b.n	800aabc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800aab0:	230f      	movs	r3, #15
 800aab2:	18fb      	adds	r3, r7, r3
 800aab4:	2201      	movs	r2, #1
 800aab6:	701a      	strb	r2, [r3, #0]
      break;
 800aab8:	e000      	b.n	800aabc <HAL_TIM_ConfigClockSource+0x184>
      break;
 800aaba:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	223d      	movs	r2, #61	@ 0x3d
 800aac0:	2101      	movs	r1, #1
 800aac2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	223c      	movs	r2, #60	@ 0x3c
 800aac8:	2100      	movs	r1, #0
 800aaca:	5499      	strb	r1, [r3, r2]

  return status;
 800aacc:	230f      	movs	r3, #15
 800aace:	18fb      	adds	r3, r7, r3
 800aad0:	781b      	ldrb	r3, [r3, #0]
}
 800aad2:	0018      	movs	r0, r3
 800aad4:	46bd      	mov	sp, r7
 800aad6:	b004      	add	sp, #16
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	46c0      	nop			@ (mov r8, r8)
 800aadc:	ffceff88 	.word	0xffceff88
 800aae0:	ffff00ff 	.word	0xffff00ff

0800aae4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	2b0c      	cmp	r3, #12
 800aaf6:	d01e      	beq.n	800ab36 <HAL_TIM_ReadCapturedValue+0x52>
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	2b0c      	cmp	r3, #12
 800aafc:	d820      	bhi.n	800ab40 <HAL_TIM_ReadCapturedValue+0x5c>
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	2b08      	cmp	r3, #8
 800ab02:	d013      	beq.n	800ab2c <HAL_TIM_ReadCapturedValue+0x48>
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	2b08      	cmp	r3, #8
 800ab08:	d81a      	bhi.n	800ab40 <HAL_TIM_ReadCapturedValue+0x5c>
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d003      	beq.n	800ab18 <HAL_TIM_ReadCapturedValue+0x34>
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	2b04      	cmp	r3, #4
 800ab14:	d005      	beq.n	800ab22 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800ab16:	e013      	b.n	800ab40 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab1e:	60fb      	str	r3, [r7, #12]
      break;
 800ab20:	e00f      	b.n	800ab42 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab28:	60fb      	str	r3, [r7, #12]
      break;
 800ab2a:	e00a      	b.n	800ab42 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab32:	60fb      	str	r3, [r7, #12]
      break;
 800ab34:	e005      	b.n	800ab42 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab3c:	60fb      	str	r3, [r7, #12]
      break;
 800ab3e:	e000      	b.n	800ab42 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 800ab40:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 800ab42:	68fb      	ldr	r3, [r7, #12]
}
 800ab44:	0018      	movs	r0, r3
 800ab46:	46bd      	mov	sp, r7
 800ab48:	b004      	add	sp, #16
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ab54:	46c0      	nop			@ (mov r8, r8)
 800ab56:	46bd      	mov	sp, r7
 800ab58:	b002      	add	sp, #8
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800ab64:	46c0      	nop			@ (mov r8, r8)
 800ab66:	46bd      	mov	sp, r7
 800ab68:	b002      	add	sp, #8
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab74:	46c0      	nop			@ (mov r8, r8)
 800ab76:	46bd      	mov	sp, r7
 800ab78:	b002      	add	sp, #8
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab84:	46c0      	nop			@ (mov r8, r8)
 800ab86:	46bd      	mov	sp, r7
 800ab88:	b002      	add	sp, #8
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800ab94:	46c0      	nop			@ (mov r8, r8)
 800ab96:	46bd      	mov	sp, r7
 800ab98:	b002      	add	sp, #8
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aba4:	46c0      	nop			@ (mov r8, r8)
 800aba6:	46bd      	mov	sp, r7
 800aba8:	b002      	add	sp, #8
 800abaa:	bd80      	pop	{r7, pc}

0800abac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800abb4:	46c0      	nop			@ (mov r8, r8)
 800abb6:	46bd      	mov	sp, r7
 800abb8:	b002      	add	sp, #8
 800abba:	bd80      	pop	{r7, pc}

0800abbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800abc4:	46c0      	nop			@ (mov r8, r8)
 800abc6:	46bd      	mov	sp, r7
 800abc8:	b002      	add	sp, #8
 800abca:	bd80      	pop	{r7, pc}

0800abcc <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800abd4:	46c0      	nop			@ (mov r8, r8)
 800abd6:	46bd      	mov	sp, r7
 800abd8:	b002      	add	sp, #8
 800abda:	bd80      	pop	{r7, pc}

0800abdc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800abe4:	46c0      	nop			@ (mov r8, r8)
 800abe6:	46bd      	mov	sp, r7
 800abe8:	b002      	add	sp, #8
 800abea:	bd80      	pop	{r7, pc}

0800abec <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b086      	sub	sp, #24
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	607a      	str	r2, [r7, #4]
 800abf6:	230b      	movs	r3, #11
 800abf8:	18fb      	adds	r3, r7, r3
 800abfa:	1c0a      	adds	r2, r1, #0
 800abfc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800abfe:	2317      	movs	r3, #23
 800ac00:	18fb      	adds	r3, r7, r3
 800ac02:	2200      	movs	r2, #0
 800ac04:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d101      	bne.n	800ac10 <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e0ea      	b.n	800ade6 <HAL_TIM_RegisterCallback+0x1fa>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	223d      	movs	r2, #61	@ 0x3d
 800ac14:	5c9b      	ldrb	r3, [r3, r2]
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d000      	beq.n	800ac1e <HAL_TIM_RegisterCallback+0x32>
 800ac1c:	e08e      	b.n	800ad3c <HAL_TIM_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800ac1e:	230b      	movs	r3, #11
 800ac20:	18fb      	adds	r3, r7, r3
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	2b1b      	cmp	r3, #27
 800ac26:	d900      	bls.n	800ac2a <HAL_TIM_RegisterCallback+0x3e>
 800ac28:	e083      	b.n	800ad32 <HAL_TIM_RegisterCallback+0x146>
 800ac2a:	009a      	lsls	r2, r3, #2
 800ac2c:	4b70      	ldr	r3, [pc, #448]	@ (800adf0 <HAL_TIM_RegisterCallback+0x204>)
 800ac2e:	18d3      	adds	r3, r2, r3
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800ac3a:	e0d1      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800ac42:	e0cd      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800ac4a:	e0c9      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800ac52:	e0c5      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	687a      	ldr	r2, [r7, #4]
 800ac58:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800ac5a:	e0c1      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800ac62:	e0bd      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800ac6a:	e0b9      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800ac72:	e0b5      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800ac7a:	e0b1      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800ac82:	e0ad      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	687a      	ldr	r2, [r7, #4]
 800ac88:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800ac8a:	e0a9      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800ac92:	e0a5      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800ac9a:	e0a1      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2180      	movs	r1, #128	@ 0x80
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	505a      	str	r2, [r3, r1]
        break;
 800aca4:	e09c      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2184      	movs	r1, #132	@ 0x84
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	505a      	str	r2, [r3, r1]
        break;
 800acae:	e097      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2188      	movs	r1, #136	@ 0x88
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	505a      	str	r2, [r3, r1]
        break;
 800acb8:	e092      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	218c      	movs	r1, #140	@ 0x8c
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	505a      	str	r2, [r3, r1]
        break;
 800acc2:	e08d      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2190      	movs	r1, #144	@ 0x90
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	505a      	str	r2, [r3, r1]
        break;
 800accc:	e088      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2194      	movs	r1, #148	@ 0x94
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	505a      	str	r2, [r3, r1]
        break;
 800acd6:	e083      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2198      	movs	r1, #152	@ 0x98
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	505a      	str	r2, [r3, r1]
        break;
 800ace0:	e07e      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	219c      	movs	r1, #156	@ 0x9c
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	505a      	str	r2, [r3, r1]
        break;
 800acea:	e079      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	21a0      	movs	r1, #160	@ 0xa0
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	505a      	str	r2, [r3, r1]
        break;
 800acf4:	e074      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	21a4      	movs	r1, #164	@ 0xa4
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	505a      	str	r2, [r3, r1]
        break;
 800acfe:	e06f      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	21a8      	movs	r1, #168	@ 0xa8
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	505a      	str	r2, [r3, r1]
        break;
 800ad08:	e06a      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	21ac      	movs	r1, #172	@ 0xac
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	505a      	str	r2, [r3, r1]
        break;
 800ad12:	e065      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	21b0      	movs	r1, #176	@ 0xb0
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	505a      	str	r2, [r3, r1]
        break;
 800ad1c:	e060      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	21b4      	movs	r1, #180	@ 0xb4
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	505a      	str	r2, [r3, r1]
        break;
 800ad26:	e05b      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	21b8      	movs	r1, #184	@ 0xb8
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	505a      	str	r2, [r3, r1]
        break;
 800ad30:	e056      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800ad32:	2317      	movs	r3, #23
 800ad34:	18fb      	adds	r3, r7, r3
 800ad36:	2201      	movs	r2, #1
 800ad38:	701a      	strb	r2, [r3, #0]
        break;
 800ad3a:	e051      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	223d      	movs	r2, #61	@ 0x3d
 800ad40:	5c9b      	ldrb	r3, [r3, r2]
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d147      	bne.n	800add8 <HAL_TIM_RegisterCallback+0x1ec>
  {
    switch (CallbackID)
 800ad48:	230b      	movs	r3, #11
 800ad4a:	18fb      	adds	r3, r7, r3
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	2b0d      	cmp	r3, #13
 800ad50:	d83d      	bhi.n	800adce <HAL_TIM_RegisterCallback+0x1e2>
 800ad52:	009a      	lsls	r2, r3, #2
 800ad54:	4b27      	ldr	r3, [pc, #156]	@ (800adf4 <HAL_TIM_RegisterCallback+0x208>)
 800ad56:	18d3      	adds	r3, r2, r3
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800ad62:	e03d      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800ad6a:	e039      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800ad72:	e035      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800ad7a:	e031      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800ad82:	e02d      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800ad8a:	e029      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800ad92:	e025      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800ad9a:	e021      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800ada2:	e01d      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800adaa:	e019      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800adb2:	e015      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800adba:	e011      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800adc2:	e00d      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2180      	movs	r1, #128	@ 0x80
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	505a      	str	r2, [r3, r1]
        break;
 800adcc:	e008      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800adce:	2317      	movs	r3, #23
 800add0:	18fb      	adds	r3, r7, r3
 800add2:	2201      	movs	r2, #1
 800add4:	701a      	strb	r2, [r3, #0]
        break;
 800add6:	e003      	b.n	800ade0 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800add8:	2317      	movs	r3, #23
 800adda:	18fb      	adds	r3, r7, r3
 800addc:	2201      	movs	r2, #1
 800adde:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800ade0:	2317      	movs	r3, #23
 800ade2:	18fb      	adds	r3, r7, r3
 800ade4:	781b      	ldrb	r3, [r3, #0]
}
 800ade6:	0018      	movs	r0, r3
 800ade8:	46bd      	mov	sp, r7
 800adea:	b006      	add	sp, #24
 800adec:	bd80      	pop	{r7, pc}
 800adee:	46c0      	nop			@ (mov r8, r8)
 800adf0:	0800dd94 	.word	0x0800dd94
 800adf4:	0800de04 	.word	0x0800de04

0800adf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4a37      	ldr	r2, [pc, #220]	@ (800aee8 <TIM_Base_SetConfig+0xf0>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d008      	beq.n	800ae22 <TIM_Base_SetConfig+0x2a>
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	2380      	movs	r3, #128	@ 0x80
 800ae14:	05db      	lsls	r3, r3, #23
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d003      	beq.n	800ae22 <TIM_Base_SetConfig+0x2a>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4a33      	ldr	r2, [pc, #204]	@ (800aeec <TIM_Base_SetConfig+0xf4>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d108      	bne.n	800ae34 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2270      	movs	r2, #112	@ 0x70
 800ae26:	4393      	bics	r3, r2
 800ae28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	4313      	orrs	r3, r2
 800ae32:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	4a2c      	ldr	r2, [pc, #176]	@ (800aee8 <TIM_Base_SetConfig+0xf0>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d014      	beq.n	800ae66 <TIM_Base_SetConfig+0x6e>
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	2380      	movs	r3, #128	@ 0x80
 800ae40:	05db      	lsls	r3, r3, #23
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d00f      	beq.n	800ae66 <TIM_Base_SetConfig+0x6e>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a28      	ldr	r2, [pc, #160]	@ (800aeec <TIM_Base_SetConfig+0xf4>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d00b      	beq.n	800ae66 <TIM_Base_SetConfig+0x6e>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a27      	ldr	r2, [pc, #156]	@ (800aef0 <TIM_Base_SetConfig+0xf8>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d007      	beq.n	800ae66 <TIM_Base_SetConfig+0x6e>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4a26      	ldr	r2, [pc, #152]	@ (800aef4 <TIM_Base_SetConfig+0xfc>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d003      	beq.n	800ae66 <TIM_Base_SetConfig+0x6e>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4a25      	ldr	r2, [pc, #148]	@ (800aef8 <TIM_Base_SetConfig+0x100>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d108      	bne.n	800ae78 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	4a24      	ldr	r2, [pc, #144]	@ (800aefc <TIM_Base_SetConfig+0x104>)
 800ae6a:	4013      	ands	r3, r2
 800ae6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	68fa      	ldr	r2, [r7, #12]
 800ae74:	4313      	orrs	r3, r2
 800ae76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2280      	movs	r2, #128	@ 0x80
 800ae7c:	4393      	bics	r3, r2
 800ae7e:	001a      	movs	r2, r3
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	695b      	ldr	r3, [r3, #20]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	689a      	ldr	r2, [r3, #8]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a11      	ldr	r2, [pc, #68]	@ (800aee8 <TIM_Base_SetConfig+0xf0>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d007      	beq.n	800aeb6 <TIM_Base_SetConfig+0xbe>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a12      	ldr	r2, [pc, #72]	@ (800aef4 <TIM_Base_SetConfig+0xfc>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d003      	beq.n	800aeb6 <TIM_Base_SetConfig+0xbe>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a11      	ldr	r2, [pc, #68]	@ (800aef8 <TIM_Base_SetConfig+0x100>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d103      	bne.n	800aebe <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	691a      	ldr	r2, [r3, #16]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2201      	movs	r2, #1
 800aec2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	2201      	movs	r2, #1
 800aeca:	4013      	ands	r3, r2
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d106      	bne.n	800aede <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	2201      	movs	r2, #1
 800aed6:	4393      	bics	r3, r2
 800aed8:	001a      	movs	r2, r3
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	611a      	str	r2, [r3, #16]
  }
}
 800aede:	46c0      	nop			@ (mov r8, r8)
 800aee0:	46bd      	mov	sp, r7
 800aee2:	b004      	add	sp, #16
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	46c0      	nop			@ (mov r8, r8)
 800aee8:	40012c00 	.word	0x40012c00
 800aeec:	40000400 	.word	0x40000400
 800aef0:	40002000 	.word	0x40002000
 800aef4:	40014400 	.word	0x40014400
 800aef8:	40014800 	.word	0x40014800
 800aefc:	fffffcff 	.word	0xfffffcff

0800af00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6a1b      	ldr	r3, [r3, #32]
 800af0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6a1b      	ldr	r3, [r3, #32]
 800af14:	2201      	movs	r2, #1
 800af16:	4393      	bics	r3, r2
 800af18:	001a      	movs	r2, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	699b      	ldr	r3, [r3, #24]
 800af28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	4a2e      	ldr	r2, [pc, #184]	@ (800afe8 <TIM_OC1_SetConfig+0xe8>)
 800af2e:	4013      	ands	r3, r2
 800af30:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2203      	movs	r2, #3
 800af36:	4393      	bics	r3, r2
 800af38:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	4313      	orrs	r3, r2
 800af42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	2202      	movs	r2, #2
 800af48:	4393      	bics	r3, r2
 800af4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	697a      	ldr	r2, [r7, #20]
 800af52:	4313      	orrs	r3, r2
 800af54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a24      	ldr	r2, [pc, #144]	@ (800afec <TIM_OC1_SetConfig+0xec>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d007      	beq.n	800af6e <TIM_OC1_SetConfig+0x6e>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4a23      	ldr	r2, [pc, #140]	@ (800aff0 <TIM_OC1_SetConfig+0xf0>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d003      	beq.n	800af6e <TIM_OC1_SetConfig+0x6e>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4a22      	ldr	r2, [pc, #136]	@ (800aff4 <TIM_OC1_SetConfig+0xf4>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d10c      	bne.n	800af88 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	2208      	movs	r2, #8
 800af72:	4393      	bics	r3, r2
 800af74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	697a      	ldr	r2, [r7, #20]
 800af7c:	4313      	orrs	r3, r2
 800af7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	2204      	movs	r2, #4
 800af84:	4393      	bics	r3, r2
 800af86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	4a18      	ldr	r2, [pc, #96]	@ (800afec <TIM_OC1_SetConfig+0xec>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d007      	beq.n	800afa0 <TIM_OC1_SetConfig+0xa0>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4a17      	ldr	r2, [pc, #92]	@ (800aff0 <TIM_OC1_SetConfig+0xf0>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d003      	beq.n	800afa0 <TIM_OC1_SetConfig+0xa0>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4a16      	ldr	r2, [pc, #88]	@ (800aff4 <TIM_OC1_SetConfig+0xf4>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d111      	bne.n	800afc4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	4a15      	ldr	r2, [pc, #84]	@ (800aff8 <TIM_OC1_SetConfig+0xf8>)
 800afa4:	4013      	ands	r3, r2
 800afa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	4a14      	ldr	r2, [pc, #80]	@ (800affc <TIM_OC1_SetConfig+0xfc>)
 800afac:	4013      	ands	r3, r2
 800afae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	695b      	ldr	r3, [r3, #20]
 800afb4:	693a      	ldr	r2, [r7, #16]
 800afb6:	4313      	orrs	r3, r2
 800afb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	699b      	ldr	r3, [r3, #24]
 800afbe:	693a      	ldr	r2, [r7, #16]
 800afc0:	4313      	orrs	r3, r2
 800afc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	693a      	ldr	r2, [r7, #16]
 800afc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	68fa      	ldr	r2, [r7, #12]
 800afce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	685a      	ldr	r2, [r3, #4]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	697a      	ldr	r2, [r7, #20]
 800afdc:	621a      	str	r2, [r3, #32]
}
 800afde:	46c0      	nop			@ (mov r8, r8)
 800afe0:	46bd      	mov	sp, r7
 800afe2:	b006      	add	sp, #24
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	46c0      	nop			@ (mov r8, r8)
 800afe8:	fffeff8f 	.word	0xfffeff8f
 800afec:	40012c00 	.word	0x40012c00
 800aff0:	40014400 	.word	0x40014400
 800aff4:	40014800 	.word	0x40014800
 800aff8:	fffffeff 	.word	0xfffffeff
 800affc:	fffffdff 	.word	0xfffffdff

0800b000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b086      	sub	sp, #24
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a1b      	ldr	r3, [r3, #32]
 800b00e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6a1b      	ldr	r3, [r3, #32]
 800b014:	2210      	movs	r2, #16
 800b016:	4393      	bics	r3, r2
 800b018:	001a      	movs	r2, r3
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	699b      	ldr	r3, [r3, #24]
 800b028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	4a2c      	ldr	r2, [pc, #176]	@ (800b0e0 <TIM_OC2_SetConfig+0xe0>)
 800b02e:	4013      	ands	r3, r2
 800b030:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	4a2b      	ldr	r2, [pc, #172]	@ (800b0e4 <TIM_OC2_SetConfig+0xe4>)
 800b036:	4013      	ands	r3, r2
 800b038:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	021b      	lsls	r3, r3, #8
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	4313      	orrs	r3, r2
 800b044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	2220      	movs	r2, #32
 800b04a:	4393      	bics	r3, r2
 800b04c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	011b      	lsls	r3, r3, #4
 800b054:	697a      	ldr	r2, [r7, #20]
 800b056:	4313      	orrs	r3, r2
 800b058:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4a22      	ldr	r2, [pc, #136]	@ (800b0e8 <TIM_OC2_SetConfig+0xe8>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d10d      	bne.n	800b07e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	2280      	movs	r2, #128	@ 0x80
 800b066:	4393      	bics	r3, r2
 800b068:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	011b      	lsls	r3, r3, #4
 800b070:	697a      	ldr	r2, [r7, #20]
 800b072:	4313      	orrs	r3, r2
 800b074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	2240      	movs	r2, #64	@ 0x40
 800b07a:	4393      	bics	r3, r2
 800b07c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4a19      	ldr	r2, [pc, #100]	@ (800b0e8 <TIM_OC2_SetConfig+0xe8>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d007      	beq.n	800b096 <TIM_OC2_SetConfig+0x96>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4a18      	ldr	r2, [pc, #96]	@ (800b0ec <TIM_OC2_SetConfig+0xec>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d003      	beq.n	800b096 <TIM_OC2_SetConfig+0x96>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a17      	ldr	r2, [pc, #92]	@ (800b0f0 <TIM_OC2_SetConfig+0xf0>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d113      	bne.n	800b0be <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	4a16      	ldr	r2, [pc, #88]	@ (800b0f4 <TIM_OC2_SetConfig+0xf4>)
 800b09a:	4013      	ands	r3, r2
 800b09c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	4a15      	ldr	r2, [pc, #84]	@ (800b0f8 <TIM_OC2_SetConfig+0xf8>)
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	695b      	ldr	r3, [r3, #20]
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	693a      	ldr	r2, [r7, #16]
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	699b      	ldr	r3, [r3, #24]
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	693a      	ldr	r2, [r7, #16]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	685a      	ldr	r2, [r3, #4]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	697a      	ldr	r2, [r7, #20]
 800b0d6:	621a      	str	r2, [r3, #32]
}
 800b0d8:	46c0      	nop			@ (mov r8, r8)
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	b006      	add	sp, #24
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	feff8fff 	.word	0xfeff8fff
 800b0e4:	fffffcff 	.word	0xfffffcff
 800b0e8:	40012c00 	.word	0x40012c00
 800b0ec:	40014400 	.word	0x40014400
 800b0f0:	40014800 	.word	0x40014800
 800b0f4:	fffffbff 	.word	0xfffffbff
 800b0f8:	fffff7ff 	.word	0xfffff7ff

0800b0fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b086      	sub	sp, #24
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6a1b      	ldr	r3, [r3, #32]
 800b10a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6a1b      	ldr	r3, [r3, #32]
 800b110:	4a31      	ldr	r2, [pc, #196]	@ (800b1d8 <TIM_OC3_SetConfig+0xdc>)
 800b112:	401a      	ands	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	69db      	ldr	r3, [r3, #28]
 800b122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	4a2d      	ldr	r2, [pc, #180]	@ (800b1dc <TIM_OC3_SetConfig+0xe0>)
 800b128:	4013      	ands	r3, r2
 800b12a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2203      	movs	r2, #3
 800b130:	4393      	bics	r3, r2
 800b132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	4a27      	ldr	r2, [pc, #156]	@ (800b1e0 <TIM_OC3_SetConfig+0xe4>)
 800b142:	4013      	ands	r3, r2
 800b144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	021b      	lsls	r3, r3, #8
 800b14c:	697a      	ldr	r2, [r7, #20]
 800b14e:	4313      	orrs	r3, r2
 800b150:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4a23      	ldr	r2, [pc, #140]	@ (800b1e4 <TIM_OC3_SetConfig+0xe8>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d10d      	bne.n	800b176 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	4a22      	ldr	r2, [pc, #136]	@ (800b1e8 <TIM_OC3_SetConfig+0xec>)
 800b15e:	4013      	ands	r3, r2
 800b160:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	68db      	ldr	r3, [r3, #12]
 800b166:	021b      	lsls	r3, r3, #8
 800b168:	697a      	ldr	r2, [r7, #20]
 800b16a:	4313      	orrs	r3, r2
 800b16c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	4a1e      	ldr	r2, [pc, #120]	@ (800b1ec <TIM_OC3_SetConfig+0xf0>)
 800b172:	4013      	ands	r3, r2
 800b174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4a1a      	ldr	r2, [pc, #104]	@ (800b1e4 <TIM_OC3_SetConfig+0xe8>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d007      	beq.n	800b18e <TIM_OC3_SetConfig+0x92>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a1b      	ldr	r2, [pc, #108]	@ (800b1f0 <TIM_OC3_SetConfig+0xf4>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d003      	beq.n	800b18e <TIM_OC3_SetConfig+0x92>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a1a      	ldr	r2, [pc, #104]	@ (800b1f4 <TIM_OC3_SetConfig+0xf8>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d113      	bne.n	800b1b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	4a19      	ldr	r2, [pc, #100]	@ (800b1f8 <TIM_OC3_SetConfig+0xfc>)
 800b192:	4013      	ands	r3, r2
 800b194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	4a18      	ldr	r2, [pc, #96]	@ (800b1fc <TIM_OC3_SetConfig+0x100>)
 800b19a:	4013      	ands	r3, r2
 800b19c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	695b      	ldr	r3, [r3, #20]
 800b1a2:	011b      	lsls	r3, r3, #4
 800b1a4:	693a      	ldr	r2, [r7, #16]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	699b      	ldr	r3, [r3, #24]
 800b1ae:	011b      	lsls	r3, r3, #4
 800b1b0:	693a      	ldr	r2, [r7, #16]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	693a      	ldr	r2, [r7, #16]
 800b1ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	68fa      	ldr	r2, [r7, #12]
 800b1c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	685a      	ldr	r2, [r3, #4]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	697a      	ldr	r2, [r7, #20]
 800b1ce:	621a      	str	r2, [r3, #32]
}
 800b1d0:	46c0      	nop			@ (mov r8, r8)
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	b006      	add	sp, #24
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	fffffeff 	.word	0xfffffeff
 800b1dc:	fffeff8f 	.word	0xfffeff8f
 800b1e0:	fffffdff 	.word	0xfffffdff
 800b1e4:	40012c00 	.word	0x40012c00
 800b1e8:	fffff7ff 	.word	0xfffff7ff
 800b1ec:	fffffbff 	.word	0xfffffbff
 800b1f0:	40014400 	.word	0x40014400
 800b1f4:	40014800 	.word	0x40014800
 800b1f8:	ffffefff 	.word	0xffffefff
 800b1fc:	ffffdfff 	.word	0xffffdfff

0800b200 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b086      	sub	sp, #24
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a1b      	ldr	r3, [r3, #32]
 800b20e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6a1b      	ldr	r3, [r3, #32]
 800b214:	4a24      	ldr	r2, [pc, #144]	@ (800b2a8 <TIM_OC4_SetConfig+0xa8>)
 800b216:	401a      	ands	r2, r3
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	69db      	ldr	r3, [r3, #28]
 800b226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	4a20      	ldr	r2, [pc, #128]	@ (800b2ac <TIM_OC4_SetConfig+0xac>)
 800b22c:	4013      	ands	r3, r2
 800b22e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	4a1f      	ldr	r2, [pc, #124]	@ (800b2b0 <TIM_OC4_SetConfig+0xb0>)
 800b234:	4013      	ands	r3, r2
 800b236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	021b      	lsls	r3, r3, #8
 800b23e:	68fa      	ldr	r2, [r7, #12]
 800b240:	4313      	orrs	r3, r2
 800b242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	4a1b      	ldr	r2, [pc, #108]	@ (800b2b4 <TIM_OC4_SetConfig+0xb4>)
 800b248:	4013      	ands	r3, r2
 800b24a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	031b      	lsls	r3, r3, #12
 800b252:	693a      	ldr	r2, [r7, #16]
 800b254:	4313      	orrs	r3, r2
 800b256:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4a17      	ldr	r2, [pc, #92]	@ (800b2b8 <TIM_OC4_SetConfig+0xb8>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d007      	beq.n	800b270 <TIM_OC4_SetConfig+0x70>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	4a16      	ldr	r2, [pc, #88]	@ (800b2bc <TIM_OC4_SetConfig+0xbc>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d003      	beq.n	800b270 <TIM_OC4_SetConfig+0x70>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4a15      	ldr	r2, [pc, #84]	@ (800b2c0 <TIM_OC4_SetConfig+0xc0>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d109      	bne.n	800b284 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	4a14      	ldr	r2, [pc, #80]	@ (800b2c4 <TIM_OC4_SetConfig+0xc4>)
 800b274:	4013      	ands	r3, r2
 800b276:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	695b      	ldr	r3, [r3, #20]
 800b27c:	019b      	lsls	r3, r3, #6
 800b27e:	697a      	ldr	r2, [r7, #20]
 800b280:	4313      	orrs	r3, r2
 800b282:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	697a      	ldr	r2, [r7, #20]
 800b288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	685a      	ldr	r2, [r3, #4]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	693a      	ldr	r2, [r7, #16]
 800b29c:	621a      	str	r2, [r3, #32]
}
 800b29e:	46c0      	nop			@ (mov r8, r8)
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	b006      	add	sp, #24
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	46c0      	nop			@ (mov r8, r8)
 800b2a8:	ffffefff 	.word	0xffffefff
 800b2ac:	feff8fff 	.word	0xfeff8fff
 800b2b0:	fffffcff 	.word	0xfffffcff
 800b2b4:	ffffdfff 	.word	0xffffdfff
 800b2b8:	40012c00 	.word	0x40012c00
 800b2bc:	40014400 	.word	0x40014400
 800b2c0:	40014800 	.word	0x40014800
 800b2c4:	ffffbfff 	.word	0xffffbfff

0800b2c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b086      	sub	sp, #24
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6a1b      	ldr	r3, [r3, #32]
 800b2dc:	4a21      	ldr	r2, [pc, #132]	@ (800b364 <TIM_OC5_SetConfig+0x9c>)
 800b2de:	401a      	ands	r2, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	4a1d      	ldr	r2, [pc, #116]	@ (800b368 <TIM_OC5_SetConfig+0xa0>)
 800b2f4:	4013      	ands	r3, r2
 800b2f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	4a19      	ldr	r2, [pc, #100]	@ (800b36c <TIM_OC5_SetConfig+0xa4>)
 800b306:	4013      	ands	r3, r2
 800b308:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	041b      	lsls	r3, r3, #16
 800b310:	693a      	ldr	r2, [r7, #16]
 800b312:	4313      	orrs	r3, r2
 800b314:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4a15      	ldr	r2, [pc, #84]	@ (800b370 <TIM_OC5_SetConfig+0xa8>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d007      	beq.n	800b32e <TIM_OC5_SetConfig+0x66>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a14      	ldr	r2, [pc, #80]	@ (800b374 <TIM_OC5_SetConfig+0xac>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d003      	beq.n	800b32e <TIM_OC5_SetConfig+0x66>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a13      	ldr	r2, [pc, #76]	@ (800b378 <TIM_OC5_SetConfig+0xb0>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d109      	bne.n	800b342 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	4a0c      	ldr	r2, [pc, #48]	@ (800b364 <TIM_OC5_SetConfig+0x9c>)
 800b332:	4013      	ands	r3, r2
 800b334:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	695b      	ldr	r3, [r3, #20]
 800b33a:	021b      	lsls	r3, r3, #8
 800b33c:	697a      	ldr	r2, [r7, #20]
 800b33e:	4313      	orrs	r3, r2
 800b340:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	697a      	ldr	r2, [r7, #20]
 800b346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	685a      	ldr	r2, [r3, #4]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	693a      	ldr	r2, [r7, #16]
 800b35a:	621a      	str	r2, [r3, #32]
}
 800b35c:	46c0      	nop			@ (mov r8, r8)
 800b35e:	46bd      	mov	sp, r7
 800b360:	b006      	add	sp, #24
 800b362:	bd80      	pop	{r7, pc}
 800b364:	fffeffff 	.word	0xfffeffff
 800b368:	fffeff8f 	.word	0xfffeff8f
 800b36c:	fffdffff 	.word	0xfffdffff
 800b370:	40012c00 	.word	0x40012c00
 800b374:	40014400 	.word	0x40014400
 800b378:	40014800 	.word	0x40014800

0800b37c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6a1b      	ldr	r3, [r3, #32]
 800b38a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6a1b      	ldr	r3, [r3, #32]
 800b390:	4a22      	ldr	r2, [pc, #136]	@ (800b41c <TIM_OC6_SetConfig+0xa0>)
 800b392:	401a      	ands	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	4a1e      	ldr	r2, [pc, #120]	@ (800b420 <TIM_OC6_SetConfig+0xa4>)
 800b3a8:	4013      	ands	r3, r2
 800b3aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	021b      	lsls	r3, r3, #8
 800b3b2:	68fa      	ldr	r2, [r7, #12]
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	4a1a      	ldr	r2, [pc, #104]	@ (800b424 <TIM_OC6_SetConfig+0xa8>)
 800b3bc:	4013      	ands	r3, r2
 800b3be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	051b      	lsls	r3, r3, #20
 800b3c6:	693a      	ldr	r2, [r7, #16]
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	4a16      	ldr	r2, [pc, #88]	@ (800b428 <TIM_OC6_SetConfig+0xac>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d007      	beq.n	800b3e4 <TIM_OC6_SetConfig+0x68>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	4a15      	ldr	r2, [pc, #84]	@ (800b42c <TIM_OC6_SetConfig+0xb0>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d003      	beq.n	800b3e4 <TIM_OC6_SetConfig+0x68>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	4a14      	ldr	r2, [pc, #80]	@ (800b430 <TIM_OC6_SetConfig+0xb4>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d109      	bne.n	800b3f8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	4a13      	ldr	r2, [pc, #76]	@ (800b434 <TIM_OC6_SetConfig+0xb8>)
 800b3e8:	4013      	ands	r3, r2
 800b3ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	695b      	ldr	r3, [r3, #20]
 800b3f0:	029b      	lsls	r3, r3, #10
 800b3f2:	697a      	ldr	r2, [r7, #20]
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	697a      	ldr	r2, [r7, #20]
 800b3fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	685a      	ldr	r2, [r3, #4]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	693a      	ldr	r2, [r7, #16]
 800b410:	621a      	str	r2, [r3, #32]
}
 800b412:	46c0      	nop			@ (mov r8, r8)
 800b414:	46bd      	mov	sp, r7
 800b416:	b006      	add	sp, #24
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	46c0      	nop			@ (mov r8, r8)
 800b41c:	ffefffff 	.word	0xffefffff
 800b420:	feff8fff 	.word	0xfeff8fff
 800b424:	ffdfffff 	.word	0xffdfffff
 800b428:	40012c00 	.word	0x40012c00
 800b42c:	40014400 	.word	0x40014400
 800b430:	40014800 	.word	0x40014800
 800b434:	fffbffff 	.word	0xfffbffff

0800b438 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	607a      	str	r2, [r7, #4]
 800b444:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	6a1b      	ldr	r3, [r3, #32]
 800b44a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	6a1b      	ldr	r3, [r3, #32]
 800b450:	2201      	movs	r2, #1
 800b452:	4393      	bics	r3, r2
 800b454:	001a      	movs	r2, r3
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	699b      	ldr	r3, [r3, #24]
 800b45e:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	4a1e      	ldr	r2, [pc, #120]	@ (800b4dc <TIM_TI1_SetConfig+0xa4>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d008      	beq.n	800b47a <TIM_TI1_SetConfig+0x42>
 800b468:	68fa      	ldr	r2, [r7, #12]
 800b46a:	2380      	movs	r3, #128	@ 0x80
 800b46c:	05db      	lsls	r3, r3, #23
 800b46e:	429a      	cmp	r2, r3
 800b470:	d003      	beq.n	800b47a <TIM_TI1_SetConfig+0x42>
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	4a1a      	ldr	r2, [pc, #104]	@ (800b4e0 <TIM_TI1_SetConfig+0xa8>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d101      	bne.n	800b47e <TIM_TI1_SetConfig+0x46>
 800b47a:	2301      	movs	r3, #1
 800b47c:	e000      	b.n	800b480 <TIM_TI1_SetConfig+0x48>
 800b47e:	2300      	movs	r3, #0
 800b480:	2b00      	cmp	r3, #0
 800b482:	d008      	beq.n	800b496 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	2203      	movs	r2, #3
 800b488:	4393      	bics	r3, r2
 800b48a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b48c:	697a      	ldr	r2, [r7, #20]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	4313      	orrs	r3, r2
 800b492:	617b      	str	r3, [r7, #20]
 800b494:	e003      	b.n	800b49e <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	2201      	movs	r2, #1
 800b49a:	4313      	orrs	r3, r2
 800b49c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	22f0      	movs	r2, #240	@ 0xf0
 800b4a2:	4393      	bics	r3, r2
 800b4a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	011b      	lsls	r3, r3, #4
 800b4aa:	22ff      	movs	r2, #255	@ 0xff
 800b4ac:	4013      	ands	r3, r2
 800b4ae:	697a      	ldr	r2, [r7, #20]
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	220a      	movs	r2, #10
 800b4b8:	4393      	bics	r3, r2
 800b4ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	220a      	movs	r2, #10
 800b4c0:	4013      	ands	r3, r2
 800b4c2:	693a      	ldr	r2, [r7, #16]
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	697a      	ldr	r2, [r7, #20]
 800b4cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	693a      	ldr	r2, [r7, #16]
 800b4d2:	621a      	str	r2, [r3, #32]
}
 800b4d4:	46c0      	nop			@ (mov r8, r8)
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	b006      	add	sp, #24
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	40012c00 	.word	0x40012c00
 800b4e0:	40000400 	.word	0x40000400

0800b4e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b086      	sub	sp, #24
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	6a1b      	ldr	r3, [r3, #32]
 800b4f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	6a1b      	ldr	r3, [r3, #32]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	4393      	bics	r3, r2
 800b4fe:	001a      	movs	r2, r3
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	699b      	ldr	r3, [r3, #24]
 800b508:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	22f0      	movs	r2, #240	@ 0xf0
 800b50e:	4393      	bics	r3, r2
 800b510:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	011b      	lsls	r3, r3, #4
 800b516:	693a      	ldr	r2, [r7, #16]
 800b518:	4313      	orrs	r3, r2
 800b51a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	220a      	movs	r2, #10
 800b520:	4393      	bics	r3, r2
 800b522:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b524:	697a      	ldr	r2, [r7, #20]
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	4313      	orrs	r3, r2
 800b52a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	693a      	ldr	r2, [r7, #16]
 800b530:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	697a      	ldr	r2, [r7, #20]
 800b536:	621a      	str	r2, [r3, #32]
}
 800b538:	46c0      	nop			@ (mov r8, r8)
 800b53a:	46bd      	mov	sp, r7
 800b53c:	b006      	add	sp, #24
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b086      	sub	sp, #24
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
 800b54c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	6a1b      	ldr	r3, [r3, #32]
 800b552:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6a1b      	ldr	r3, [r3, #32]
 800b558:	2210      	movs	r2, #16
 800b55a:	4393      	bics	r3, r2
 800b55c:	001a      	movs	r2, r3
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	699b      	ldr	r3, [r3, #24]
 800b566:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	4a14      	ldr	r2, [pc, #80]	@ (800b5bc <TIM_TI2_SetConfig+0x7c>)
 800b56c:	4013      	ands	r3, r2
 800b56e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	021b      	lsls	r3, r3, #8
 800b574:	693a      	ldr	r2, [r7, #16]
 800b576:	4313      	orrs	r3, r2
 800b578:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	4a10      	ldr	r2, [pc, #64]	@ (800b5c0 <TIM_TI2_SetConfig+0x80>)
 800b57e:	4013      	ands	r3, r2
 800b580:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	031b      	lsls	r3, r3, #12
 800b586:	041b      	lsls	r3, r3, #16
 800b588:	0c1b      	lsrs	r3, r3, #16
 800b58a:	693a      	ldr	r2, [r7, #16]
 800b58c:	4313      	orrs	r3, r2
 800b58e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	22a0      	movs	r2, #160	@ 0xa0
 800b594:	4393      	bics	r3, r2
 800b596:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	011b      	lsls	r3, r3, #4
 800b59c:	22a0      	movs	r2, #160	@ 0xa0
 800b59e:	4013      	ands	r3, r2
 800b5a0:	697a      	ldr	r2, [r7, #20]
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	693a      	ldr	r2, [r7, #16]
 800b5aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	697a      	ldr	r2, [r7, #20]
 800b5b0:	621a      	str	r2, [r3, #32]
}
 800b5b2:	46c0      	nop			@ (mov r8, r8)
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	b006      	add	sp, #24
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	46c0      	nop			@ (mov r8, r8)
 800b5bc:	fffffcff 	.word	0xfffffcff
 800b5c0:	ffff0fff 	.word	0xffff0fff

0800b5c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b086      	sub	sp, #24
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	6a1b      	ldr	r3, [r3, #32]
 800b5d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	6a1b      	ldr	r3, [r3, #32]
 800b5da:	2210      	movs	r2, #16
 800b5dc:	4393      	bics	r3, r2
 800b5de:	001a      	movs	r2, r3
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	699b      	ldr	r3, [r3, #24]
 800b5e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	4a0d      	ldr	r2, [pc, #52]	@ (800b624 <TIM_TI2_ConfigInputStage+0x60>)
 800b5ee:	4013      	ands	r3, r2
 800b5f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	031b      	lsls	r3, r3, #12
 800b5f6:	693a      	ldr	r2, [r7, #16]
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	22a0      	movs	r2, #160	@ 0xa0
 800b600:	4393      	bics	r3, r2
 800b602:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	011b      	lsls	r3, r3, #4
 800b608:	697a      	ldr	r2, [r7, #20]
 800b60a:	4313      	orrs	r3, r2
 800b60c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	693a      	ldr	r2, [r7, #16]
 800b612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	697a      	ldr	r2, [r7, #20]
 800b618:	621a      	str	r2, [r3, #32]
}
 800b61a:	46c0      	nop			@ (mov r8, r8)
 800b61c:	46bd      	mov	sp, r7
 800b61e:	b006      	add	sp, #24
 800b620:	bd80      	pop	{r7, pc}
 800b622:	46c0      	nop			@ (mov r8, r8)
 800b624:	ffff0fff 	.word	0xffff0fff

0800b628 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b086      	sub	sp, #24
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]
 800b634:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	6a1b      	ldr	r3, [r3, #32]
 800b63a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	6a1b      	ldr	r3, [r3, #32]
 800b640:	4a17      	ldr	r2, [pc, #92]	@ (800b6a0 <TIM_TI3_SetConfig+0x78>)
 800b642:	401a      	ands	r2, r3
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	69db      	ldr	r3, [r3, #28]
 800b64c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	2203      	movs	r2, #3
 800b652:	4393      	bics	r3, r2
 800b654:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800b656:	693a      	ldr	r2, [r7, #16]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	22f0      	movs	r2, #240	@ 0xf0
 800b662:	4393      	bics	r3, r2
 800b664:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	011b      	lsls	r3, r3, #4
 800b66a:	22ff      	movs	r2, #255	@ 0xff
 800b66c:	4013      	ands	r3, r2
 800b66e:	693a      	ldr	r2, [r7, #16]
 800b670:	4313      	orrs	r3, r2
 800b672:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	4a0b      	ldr	r2, [pc, #44]	@ (800b6a4 <TIM_TI3_SetConfig+0x7c>)
 800b678:	4013      	ands	r3, r2
 800b67a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	021a      	lsls	r2, r3, #8
 800b680:	23a0      	movs	r3, #160	@ 0xa0
 800b682:	011b      	lsls	r3, r3, #4
 800b684:	4013      	ands	r3, r2
 800b686:	697a      	ldr	r2, [r7, #20]
 800b688:	4313      	orrs	r3, r2
 800b68a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	693a      	ldr	r2, [r7, #16]
 800b690:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	697a      	ldr	r2, [r7, #20]
 800b696:	621a      	str	r2, [r3, #32]
}
 800b698:	46c0      	nop			@ (mov r8, r8)
 800b69a:	46bd      	mov	sp, r7
 800b69c:	b006      	add	sp, #24
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	fffffeff 	.word	0xfffffeff
 800b6a4:	fffff5ff 	.word	0xfffff5ff

0800b6a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b086      	sub	sp, #24
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	607a      	str	r2, [r7, #4]
 800b6b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	6a1b      	ldr	r3, [r3, #32]
 800b6ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	6a1b      	ldr	r3, [r3, #32]
 800b6c0:	4a18      	ldr	r2, [pc, #96]	@ (800b724 <TIM_TI4_SetConfig+0x7c>)
 800b6c2:	401a      	ands	r2, r3
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	69db      	ldr	r3, [r3, #28]
 800b6cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	4a15      	ldr	r2, [pc, #84]	@ (800b728 <TIM_TI4_SetConfig+0x80>)
 800b6d2:	4013      	ands	r3, r2
 800b6d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	021b      	lsls	r3, r3, #8
 800b6da:	693a      	ldr	r2, [r7, #16]
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	4a12      	ldr	r2, [pc, #72]	@ (800b72c <TIM_TI4_SetConfig+0x84>)
 800b6e4:	4013      	ands	r3, r2
 800b6e6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	031b      	lsls	r3, r3, #12
 800b6ec:	041b      	lsls	r3, r3, #16
 800b6ee:	0c1b      	lsrs	r3, r3, #16
 800b6f0:	693a      	ldr	r2, [r7, #16]
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	4a0d      	ldr	r2, [pc, #52]	@ (800b730 <TIM_TI4_SetConfig+0x88>)
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	031a      	lsls	r2, r3, #12
 800b702:	23a0      	movs	r3, #160	@ 0xa0
 800b704:	021b      	lsls	r3, r3, #8
 800b706:	4013      	ands	r3, r2
 800b708:	697a      	ldr	r2, [r7, #20]
 800b70a:	4313      	orrs	r3, r2
 800b70c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	693a      	ldr	r2, [r7, #16]
 800b712:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	697a      	ldr	r2, [r7, #20]
 800b718:	621a      	str	r2, [r3, #32]
}
 800b71a:	46c0      	nop			@ (mov r8, r8)
 800b71c:	46bd      	mov	sp, r7
 800b71e:	b006      	add	sp, #24
 800b720:	bd80      	pop	{r7, pc}
 800b722:	46c0      	nop			@ (mov r8, r8)
 800b724:	ffffefff 	.word	0xffffefff
 800b728:	fffffcff 	.word	0xfffffcff
 800b72c:	ffff0fff 	.word	0xffff0fff
 800b730:	ffff5fff 	.word	0xffff5fff

0800b734 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	4a08      	ldr	r2, [pc, #32]	@ (800b768 <TIM_ITRx_SetConfig+0x34>)
 800b748:	4013      	ands	r3, r2
 800b74a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b74c:	683a      	ldr	r2, [r7, #0]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	4313      	orrs	r3, r2
 800b752:	2207      	movs	r2, #7
 800b754:	4313      	orrs	r3, r2
 800b756:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	68fa      	ldr	r2, [r7, #12]
 800b75c:	609a      	str	r2, [r3, #8]
}
 800b75e:	46c0      	nop			@ (mov r8, r8)
 800b760:	46bd      	mov	sp, r7
 800b762:	b004      	add	sp, #16
 800b764:	bd80      	pop	{r7, pc}
 800b766:	46c0      	nop			@ (mov r8, r8)
 800b768:	ffcfff8f 	.word	0xffcfff8f

0800b76c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b086      	sub	sp, #24
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	607a      	str	r2, [r7, #4]
 800b778:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	689b      	ldr	r3, [r3, #8]
 800b77e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	4a09      	ldr	r2, [pc, #36]	@ (800b7a8 <TIM_ETR_SetConfig+0x3c>)
 800b784:	4013      	ands	r3, r2
 800b786:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	021a      	lsls	r2, r3, #8
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	431a      	orrs	r2, r3
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	4313      	orrs	r3, r2
 800b794:	697a      	ldr	r2, [r7, #20]
 800b796:	4313      	orrs	r3, r2
 800b798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	697a      	ldr	r2, [r7, #20]
 800b79e:	609a      	str	r2, [r3, #8]
}
 800b7a0:	46c0      	nop			@ (mov r8, r8)
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	b006      	add	sp, #24
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	ffff00ff 	.word	0xffff00ff

0800b7ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b086      	sub	sp, #24
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	221f      	movs	r2, #31
 800b7bc:	4013      	ands	r3, r2
 800b7be:	2201      	movs	r2, #1
 800b7c0:	409a      	lsls	r2, r3
 800b7c2:	0013      	movs	r3, r2
 800b7c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	6a1b      	ldr	r3, [r3, #32]
 800b7ca:	697a      	ldr	r2, [r7, #20]
 800b7cc:	43d2      	mvns	r2, r2
 800b7ce:	401a      	ands	r2, r3
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	6a1a      	ldr	r2, [r3, #32]
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	211f      	movs	r1, #31
 800b7dc:	400b      	ands	r3, r1
 800b7de:	6879      	ldr	r1, [r7, #4]
 800b7e0:	4099      	lsls	r1, r3
 800b7e2:	000b      	movs	r3, r1
 800b7e4:	431a      	orrs	r2, r3
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	621a      	str	r2, [r3, #32]
}
 800b7ea:	46c0      	nop			@ (mov r8, r8)
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	b006      	add	sp, #24
 800b7f0:	bd80      	pop	{r7, pc}
	...

0800b7f4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2184      	movs	r1, #132	@ 0x84
 800b800:	4a1c      	ldr	r2, [pc, #112]	@ (800b874 <TIM_ResetCallback+0x80>)
 800b802:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2188      	movs	r1, #136	@ 0x88
 800b808:	4a1b      	ldr	r2, [pc, #108]	@ (800b878 <TIM_ResetCallback+0x84>)
 800b80a:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	218c      	movs	r1, #140	@ 0x8c
 800b810:	4a1a      	ldr	r2, [pc, #104]	@ (800b87c <TIM_ResetCallback+0x88>)
 800b812:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2190      	movs	r1, #144	@ 0x90
 800b818:	4a19      	ldr	r2, [pc, #100]	@ (800b880 <TIM_ResetCallback+0x8c>)
 800b81a:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2194      	movs	r1, #148	@ 0x94
 800b820:	4a18      	ldr	r2, [pc, #96]	@ (800b884 <TIM_ResetCallback+0x90>)
 800b822:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2198      	movs	r1, #152	@ 0x98
 800b828:	4a17      	ldr	r2, [pc, #92]	@ (800b888 <TIM_ResetCallback+0x94>)
 800b82a:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	219c      	movs	r1, #156	@ 0x9c
 800b830:	4a16      	ldr	r2, [pc, #88]	@ (800b88c <TIM_ResetCallback+0x98>)
 800b832:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	21a0      	movs	r1, #160	@ 0xa0
 800b838:	4a15      	ldr	r2, [pc, #84]	@ (800b890 <TIM_ResetCallback+0x9c>)
 800b83a:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	21a4      	movs	r1, #164	@ 0xa4
 800b840:	4a14      	ldr	r2, [pc, #80]	@ (800b894 <TIM_ResetCallback+0xa0>)
 800b842:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	21a8      	movs	r1, #168	@ 0xa8
 800b848:	4a13      	ldr	r2, [pc, #76]	@ (800b898 <TIM_ResetCallback+0xa4>)
 800b84a:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	21ac      	movs	r1, #172	@ 0xac
 800b850:	4a12      	ldr	r2, [pc, #72]	@ (800b89c <TIM_ResetCallback+0xa8>)
 800b852:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	21b0      	movs	r1, #176	@ 0xb0
 800b858:	4a11      	ldr	r2, [pc, #68]	@ (800b8a0 <TIM_ResetCallback+0xac>)
 800b85a:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	21b4      	movs	r1, #180	@ 0xb4
 800b860:	4a10      	ldr	r2, [pc, #64]	@ (800b8a4 <TIM_ResetCallback+0xb0>)
 800b862:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	21b8      	movs	r1, #184	@ 0xb8
 800b868:	4a0f      	ldr	r2, [pc, #60]	@ (800b8a8 <TIM_ResetCallback+0xb4>)
 800b86a:	505a      	str	r2, [r3, r1]
}
 800b86c:	46c0      	nop			@ (mov r8, r8)
 800b86e:	46bd      	mov	sp, r7
 800b870:	b002      	add	sp, #8
 800b872:	bd80      	pop	{r7, pc}
 800b874:	0800ab4d 	.word	0x0800ab4d
 800b878:	0800ab5d 	.word	0x0800ab5d
 800b87c:	0800abbd 	.word	0x0800abbd
 800b880:	0800abcd 	.word	0x0800abcd
 800b884:	0800ab7d 	.word	0x0800ab7d
 800b888:	0800ab8d 	.word	0x0800ab8d
 800b88c:	0800ab6d 	.word	0x0800ab6d
 800b890:	0800ab9d 	.word	0x0800ab9d
 800b894:	0800abad 	.word	0x0800abad
 800b898:	0800abdd 	.word	0x0800abdd
 800b89c:	0800bab5 	.word	0x0800bab5
 800b8a0:	0800bac5 	.word	0x0800bac5
 800b8a4:	0800bad5 	.word	0x0800bad5
 800b8a8:	0800bae5 	.word	0x0800bae5

0800b8ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	223c      	movs	r2, #60	@ 0x3c
 800b8ba:	5c9b      	ldrb	r3, [r3, r2]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d101      	bne.n	800b8c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b8c0:	2302      	movs	r3, #2
 800b8c2:	e050      	b.n	800b966 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	223c      	movs	r2, #60	@ 0x3c
 800b8c8:	2101      	movs	r1, #1
 800b8ca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	223d      	movs	r2, #61	@ 0x3d
 800b8d0:	2102      	movs	r1, #2
 800b8d2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a21      	ldr	r2, [pc, #132]	@ (800b970 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d108      	bne.n	800b900 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	4a20      	ldr	r2, [pc, #128]	@ (800b974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b8f2:	4013      	ands	r3, r2
 800b8f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	68fa      	ldr	r2, [r7, #12]
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2270      	movs	r2, #112	@ 0x70
 800b904:	4393      	bics	r3, r2
 800b906:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	68fa      	ldr	r2, [r7, #12]
 800b90e:	4313      	orrs	r3, r2
 800b910:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	68fa      	ldr	r2, [r7, #12]
 800b918:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4a14      	ldr	r2, [pc, #80]	@ (800b970 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b920:	4293      	cmp	r3, r2
 800b922:	d00a      	beq.n	800b93a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	2380      	movs	r3, #128	@ 0x80
 800b92a:	05db      	lsls	r3, r3, #23
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d004      	beq.n	800b93a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a10      	ldr	r2, [pc, #64]	@ (800b978 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d10c      	bne.n	800b954 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	2280      	movs	r2, #128	@ 0x80
 800b93e:	4393      	bics	r3, r2
 800b940:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	68ba      	ldr	r2, [r7, #8]
 800b948:	4313      	orrs	r3, r2
 800b94a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	68ba      	ldr	r2, [r7, #8]
 800b952:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	223d      	movs	r2, #61	@ 0x3d
 800b958:	2101      	movs	r1, #1
 800b95a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	223c      	movs	r2, #60	@ 0x3c
 800b960:	2100      	movs	r1, #0
 800b962:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b964:	2300      	movs	r3, #0
}
 800b966:	0018      	movs	r0, r3
 800b968:	46bd      	mov	sp, r7
 800b96a:	b004      	add	sp, #16
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	46c0      	nop			@ (mov r8, r8)
 800b970:	40012c00 	.word	0x40012c00
 800b974:	ff0fffff 	.word	0xff0fffff
 800b978:	40000400 	.word	0x40000400

0800b97c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b986:	2300      	movs	r3, #0
 800b988:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	223c      	movs	r2, #60	@ 0x3c
 800b98e:	5c9b      	ldrb	r3, [r3, r2]
 800b990:	2b01      	cmp	r3, #1
 800b992:	d101      	bne.n	800b998 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b994:	2302      	movs	r3, #2
 800b996:	e06f      	b.n	800ba78 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	223c      	movs	r2, #60	@ 0x3c
 800b99c:	2101      	movs	r1, #1
 800b99e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	22ff      	movs	r2, #255	@ 0xff
 800b9a4:	4393      	bics	r3, r2
 800b9a6:	001a      	movs	r2, r3
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	4313      	orrs	r3, r2
 800b9ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	4a33      	ldr	r2, [pc, #204]	@ (800ba80 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800b9b4:	401a      	ands	r2, r3
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	689b      	ldr	r3, [r3, #8]
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	4a30      	ldr	r2, [pc, #192]	@ (800ba84 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800b9c2:	401a      	ands	r2, r3
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	4a2e      	ldr	r2, [pc, #184]	@ (800ba88 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800b9d0:	401a      	ands	r2, r3
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	4a2b      	ldr	r2, [pc, #172]	@ (800ba8c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800b9de:	401a      	ands	r2, r3
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	691b      	ldr	r3, [r3, #16]
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	4a29      	ldr	r2, [pc, #164]	@ (800ba90 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800b9ec:	401a      	ands	r2, r3
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	695b      	ldr	r3, [r3, #20]
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	4a26      	ldr	r2, [pc, #152]	@ (800ba94 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800b9fa:	401a      	ands	r2, r3
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba00:	4313      	orrs	r3, r2
 800ba02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	4a24      	ldr	r2, [pc, #144]	@ (800ba98 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800ba08:	401a      	ands	r2, r3
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	699b      	ldr	r3, [r3, #24]
 800ba0e:	041b      	lsls	r3, r3, #16
 800ba10:	4313      	orrs	r3, r2
 800ba12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	4a21      	ldr	r2, [pc, #132]	@ (800ba9c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800ba18:	401a      	ands	r2, r3
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	69db      	ldr	r3, [r3, #28]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a1e      	ldr	r2, [pc, #120]	@ (800baa0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d11c      	bne.n	800ba66 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	4a1d      	ldr	r2, [pc, #116]	@ (800baa4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800ba30:	401a      	ands	r2, r3
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba36:	051b      	lsls	r3, r3, #20
 800ba38:	4313      	orrs	r3, r2
 800ba3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	4a1a      	ldr	r2, [pc, #104]	@ (800baa8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800ba40:	401a      	ands	r2, r3
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	6a1b      	ldr	r3, [r3, #32]
 800ba46:	4313      	orrs	r3, r2
 800ba48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	4a17      	ldr	r2, [pc, #92]	@ (800baac <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800ba4e:	401a      	ands	r2, r3
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba54:	4313      	orrs	r3, r2
 800ba56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	4a15      	ldr	r2, [pc, #84]	@ (800bab0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800ba5c:	401a      	ands	r2, r3
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba62:	4313      	orrs	r3, r2
 800ba64:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	68fa      	ldr	r2, [r7, #12]
 800ba6c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	223c      	movs	r2, #60	@ 0x3c
 800ba72:	2100      	movs	r1, #0
 800ba74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ba76:	2300      	movs	r3, #0
}
 800ba78:	0018      	movs	r0, r3
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	b004      	add	sp, #16
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	fffffcff 	.word	0xfffffcff
 800ba84:	fffffbff 	.word	0xfffffbff
 800ba88:	fffff7ff 	.word	0xfffff7ff
 800ba8c:	ffffefff 	.word	0xffffefff
 800ba90:	ffffdfff 	.word	0xffffdfff
 800ba94:	ffffbfff 	.word	0xffffbfff
 800ba98:	fff0ffff 	.word	0xfff0ffff
 800ba9c:	efffffff 	.word	0xefffffff
 800baa0:	40012c00 	.word	0x40012c00
 800baa4:	ff0fffff 	.word	0xff0fffff
 800baa8:	feffffff 	.word	0xfeffffff
 800baac:	fdffffff 	.word	0xfdffffff
 800bab0:	dfffffff 	.word	0xdfffffff

0800bab4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800babc:	46c0      	nop			@ (mov r8, r8)
 800babe:	46bd      	mov	sp, r7
 800bac0:	b002      	add	sp, #8
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800bacc:	46c0      	nop			@ (mov r8, r8)
 800bace:	46bd      	mov	sp, r7
 800bad0:	b002      	add	sp, #8
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800badc:	46c0      	nop			@ (mov r8, r8)
 800bade:	46bd      	mov	sp, r7
 800bae0:	b002      	add	sp, #8
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800baec:	46c0      	nop			@ (mov r8, r8)
 800baee:	46bd      	mov	sp, r7
 800baf0:	b002      	add	sp, #8
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d101      	bne.n	800bb06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb02:	2301      	movs	r3, #1
 800bb04:	e055      	b.n	800bbb2 <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2288      	movs	r2, #136	@ 0x88
 800bb0a:	589b      	ldr	r3, [r3, r2]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d116      	bne.n	800bb3e <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2284      	movs	r2, #132	@ 0x84
 800bb14:	2100      	movs	r1, #0
 800bb16:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	0018      	movs	r0, r3
 800bb1c:	f000 fce0 	bl	800c4e0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	22c4      	movs	r2, #196	@ 0xc4
 800bb24:	589b      	ldr	r3, [r3, r2]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d103      	bne.n	800bb32 <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	21c4      	movs	r1, #196	@ 0xc4
 800bb2e:	4a23      	ldr	r2, [pc, #140]	@ (800bbbc <HAL_UART_Init+0xc8>)
 800bb30:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	22c4      	movs	r2, #196	@ 0xc4
 800bb36:	589b      	ldr	r3, [r3, r2]
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	0010      	movs	r0, r2
 800bb3c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2288      	movs	r2, #136	@ 0x88
 800bb42:	2124      	movs	r1, #36	@ 0x24
 800bb44:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	2101      	movs	r1, #1
 800bb52:	438a      	bics	r2, r1
 800bb54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d003      	beq.n	800bb66 <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	0018      	movs	r0, r3
 800bb62:	f000 ff85 	bl	800ca70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	0018      	movs	r0, r3
 800bb6a:	f000 fd09 	bl	800c580 <UART_SetConfig>
 800bb6e:	0003      	movs	r3, r0
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	d101      	bne.n	800bb78 <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
 800bb74:	2301      	movs	r3, #1
 800bb76:	e01c      	b.n	800bbb2 <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	685a      	ldr	r2, [r3, #4]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	490f      	ldr	r1, [pc, #60]	@ (800bbc0 <HAL_UART_Init+0xcc>)
 800bb84:	400a      	ands	r2, r1
 800bb86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	689a      	ldr	r2, [r3, #8]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	212a      	movs	r1, #42	@ 0x2a
 800bb94:	438a      	bics	r2, r1
 800bb96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	681a      	ldr	r2, [r3, #0]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2101      	movs	r1, #1
 800bba4:	430a      	orrs	r2, r1
 800bba6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	0018      	movs	r0, r3
 800bbac:	f001 f814 	bl	800cbd8 <UART_CheckIdleState>
 800bbb0:	0003      	movs	r3, r0
}
 800bbb2:	0018      	movs	r0, r3
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	b002      	add	sp, #8
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	46c0      	nop			@ (mov r8, r8)
 800bbbc:	08004fc5 	.word	0x08004fc5
 800bbc0:	ffffb7ff 	.word	0xffffb7ff

0800bbc4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b086      	sub	sp, #24
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	607a      	str	r2, [r7, #4]
 800bbce:	230b      	movs	r3, #11
 800bbd0:	18fb      	adds	r3, r7, r3
 800bbd2:	1c0a      	adds	r2, r1, #0
 800bbd4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bbd6:	2317      	movs	r3, #23
 800bbd8:	18fb      	adds	r3, r7, r3
 800bbda:	2200      	movs	r2, #0
 800bbdc:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d109      	bne.n	800bbf8 <HAL_UART_RegisterCallback+0x34>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2290      	movs	r2, #144	@ 0x90
 800bbe8:	589b      	ldr	r3, [r3, r2]
 800bbea:	2240      	movs	r2, #64	@ 0x40
 800bbec:	431a      	orrs	r2, r3
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2190      	movs	r1, #144	@ 0x90
 800bbf2:	505a      	str	r2, [r3, r1]

    return HAL_ERROR;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	e08f      	b.n	800bd18 <HAL_UART_RegisterCallback+0x154>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2288      	movs	r2, #136	@ 0x88
 800bbfc:	589b      	ldr	r3, [r3, r2]
 800bbfe:	2b20      	cmp	r3, #32
 800bc00:	d157      	bne.n	800bcb2 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800bc02:	230b      	movs	r3, #11
 800bc04:	18fb      	adds	r3, r7, r3
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	2b0c      	cmp	r3, #12
 800bc0a:	d845      	bhi.n	800bc98 <HAL_UART_RegisterCallback+0xd4>
 800bc0c:	009a      	lsls	r2, r3, #2
 800bc0e:	4b44      	ldr	r3, [pc, #272]	@ (800bd20 <HAL_UART_RegisterCallback+0x15c>)
 800bc10:	18d3      	adds	r3, r2, r3
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	469f      	mov	pc, r3
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2194      	movs	r1, #148	@ 0x94
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	505a      	str	r2, [r3, r1]
        break;
 800bc1e:	e078      	b.n	800bd12 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2198      	movs	r1, #152	@ 0x98
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	505a      	str	r2, [r3, r1]
        break;
 800bc28:	e073      	b.n	800bd12 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	219c      	movs	r1, #156	@ 0x9c
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	505a      	str	r2, [r3, r1]
        break;
 800bc32:	e06e      	b.n	800bd12 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	21a0      	movs	r1, #160	@ 0xa0
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	505a      	str	r2, [r3, r1]
        break;
 800bc3c:	e069      	b.n	800bd12 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	21a4      	movs	r1, #164	@ 0xa4
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	505a      	str	r2, [r3, r1]
        break;
 800bc46:	e064      	b.n	800bd12 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	21a8      	movs	r1, #168	@ 0xa8
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	505a      	str	r2, [r3, r1]
        break;
 800bc50:	e05f      	b.n	800bd12 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	21ac      	movs	r1, #172	@ 0xac
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	505a      	str	r2, [r3, r1]
        break;
 800bc5a:	e05a      	b.n	800bd12 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	21b0      	movs	r1, #176	@ 0xb0
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	505a      	str	r2, [r3, r1]
        break;
 800bc64:	e055      	b.n	800bd12 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	21b4      	movs	r1, #180	@ 0xb4
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	505a      	str	r2, [r3, r1]
        break;
 800bc6e:	e050      	b.n	800bd12 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	21b8      	movs	r1, #184	@ 0xb8
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	505a      	str	r2, [r3, r1]
        break;
 800bc78:	e04b      	b.n	800bd12 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	21bc      	movs	r1, #188	@ 0xbc
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	505a      	str	r2, [r3, r1]
        break;
 800bc82:	e046      	b.n	800bd12 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	21c4      	movs	r1, #196	@ 0xc4
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	505a      	str	r2, [r3, r1]
        break;
 800bc8c:	e041      	b.n	800bd12 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	21c8      	movs	r1, #200	@ 0xc8
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	505a      	str	r2, [r3, r1]
        break;
 800bc96:	e03c      	b.n	800bd12 <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2290      	movs	r2, #144	@ 0x90
 800bc9c:	589b      	ldr	r3, [r3, r2]
 800bc9e:	2240      	movs	r2, #64	@ 0x40
 800bca0:	431a      	orrs	r2, r3
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2190      	movs	r1, #144	@ 0x90
 800bca6:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800bca8:	2317      	movs	r3, #23
 800bcaa:	18fb      	adds	r3, r7, r3
 800bcac:	2201      	movs	r2, #1
 800bcae:	701a      	strb	r2, [r3, #0]
        break;
 800bcb0:	e02f      	b.n	800bd12 <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2288      	movs	r2, #136	@ 0x88
 800bcb6:	589b      	ldr	r3, [r3, r2]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d11e      	bne.n	800bcfa <HAL_UART_RegisterCallback+0x136>
  {
    switch (CallbackID)
 800bcbc:	230b      	movs	r3, #11
 800bcbe:	18fb      	adds	r3, r7, r3
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	2b0b      	cmp	r3, #11
 800bcc4:	d002      	beq.n	800bccc <HAL_UART_RegisterCallback+0x108>
 800bcc6:	2b0c      	cmp	r3, #12
 800bcc8:	d005      	beq.n	800bcd6 <HAL_UART_RegisterCallback+0x112>
 800bcca:	e009      	b.n	800bce0 <HAL_UART_RegisterCallback+0x11c>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	21c4      	movs	r1, #196	@ 0xc4
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	505a      	str	r2, [r3, r1]
        break;
 800bcd4:	e01d      	b.n	800bd12 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	21c8      	movs	r1, #200	@ 0xc8
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	505a      	str	r2, [r3, r1]
        break;
 800bcde:	e018      	b.n	800bd12 <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2290      	movs	r2, #144	@ 0x90
 800bce4:	589b      	ldr	r3, [r3, r2]
 800bce6:	2240      	movs	r2, #64	@ 0x40
 800bce8:	431a      	orrs	r2, r3
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2190      	movs	r1, #144	@ 0x90
 800bcee:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800bcf0:	2317      	movs	r3, #23
 800bcf2:	18fb      	adds	r3, r7, r3
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	701a      	strb	r2, [r3, #0]
        break;
 800bcf8:	e00b      	b.n	800bd12 <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2290      	movs	r2, #144	@ 0x90
 800bcfe:	589b      	ldr	r3, [r3, r2]
 800bd00:	2240      	movs	r2, #64	@ 0x40
 800bd02:	431a      	orrs	r2, r3
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2190      	movs	r1, #144	@ 0x90
 800bd08:	505a      	str	r2, [r3, r1]

    status =  HAL_ERROR;
 800bd0a:	2317      	movs	r3, #23
 800bd0c:	18fb      	adds	r3, r7, r3
 800bd0e:	2201      	movs	r2, #1
 800bd10:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800bd12:	2317      	movs	r3, #23
 800bd14:	18fb      	adds	r3, r7, r3
 800bd16:	781b      	ldrb	r3, [r3, #0]
}
 800bd18:	0018      	movs	r0, r3
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	b006      	add	sp, #24
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	0800de54 	.word	0x0800de54

0800bd24 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b088      	sub	sp, #32
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	1dbb      	adds	r3, r7, #6
 800bd30:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	228c      	movs	r2, #140	@ 0x8c
 800bd36:	589b      	ldr	r3, [r3, r2]
 800bd38:	2b20      	cmp	r3, #32
 800bd3a:	d14a      	bne.n	800bdd2 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d003      	beq.n	800bd4a <HAL_UART_Receive_DMA+0x26>
 800bd42:	1dbb      	adds	r3, r7, #6
 800bd44:	881b      	ldrh	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d101      	bne.n	800bd4e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e042      	b.n	800bdd4 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	689a      	ldr	r2, [r3, #8]
 800bd52:	2380      	movs	r3, #128	@ 0x80
 800bd54:	015b      	lsls	r3, r3, #5
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d109      	bne.n	800bd6e <HAL_UART_Receive_DMA+0x4a>
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	691b      	ldr	r3, [r3, #16]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d105      	bne.n	800bd6e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	2201      	movs	r2, #1
 800bd66:	4013      	ands	r3, r2
 800bd68:	d001      	beq.n	800bd6e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e032      	b.n	800bdd4 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2200      	movs	r2, #0
 800bd72:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a18      	ldr	r2, [pc, #96]	@ (800bddc <HAL_UART_Receive_DMA+0xb8>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d020      	beq.n	800bdc0 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	685a      	ldr	r2, [r3, #4]
 800bd84:	2380      	movs	r3, #128	@ 0x80
 800bd86:	041b      	lsls	r3, r3, #16
 800bd88:	4013      	ands	r3, r2
 800bd8a:	d019      	beq.n	800bdc0 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd8c:	f3ef 8310 	mrs	r3, PRIMASK
 800bd90:	613b      	str	r3, [r7, #16]
  return(result);
 800bd92:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd94:	61fb      	str	r3, [r7, #28]
 800bd96:	2301      	movs	r3, #1
 800bd98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	f383 8810 	msr	PRIMASK, r3
}
 800bda0:	46c0      	nop			@ (mov r8, r8)
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	681a      	ldr	r2, [r3, #0]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2180      	movs	r1, #128	@ 0x80
 800bdae:	04c9      	lsls	r1, r1, #19
 800bdb0:	430a      	orrs	r2, r1
 800bdb2:	601a      	str	r2, [r3, #0]
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdb8:	69bb      	ldr	r3, [r7, #24]
 800bdba:	f383 8810 	msr	PRIMASK, r3
}
 800bdbe:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bdc0:	1dbb      	adds	r3, r7, #6
 800bdc2:	881a      	ldrh	r2, [r3, #0]
 800bdc4:	68b9      	ldr	r1, [r7, #8]
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	0018      	movs	r0, r3
 800bdca:	f001 f81f 	bl	800ce0c <UART_Start_Receive_DMA>
 800bdce:	0003      	movs	r3, r0
 800bdd0:	e000      	b.n	800bdd4 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800bdd2:	2302      	movs	r3, #2
  }
}
 800bdd4:	0018      	movs	r0, r3
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	b008      	add	sp, #32
 800bdda:	bd80      	pop	{r7, pc}
 800bddc:	40008000 	.word	0x40008000

0800bde0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bde0:	b5b0      	push	{r4, r5, r7, lr}
 800bde2:	b0aa      	sub	sp, #168	@ 0xa8
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	69db      	ldr	r3, [r3, #28]
 800bdee:	22a4      	movs	r2, #164	@ 0xa4
 800bdf0:	18b9      	adds	r1, r7, r2
 800bdf2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	20a0      	movs	r0, #160	@ 0xa0
 800bdfc:	1839      	adds	r1, r7, r0
 800bdfe:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	689b      	ldr	r3, [r3, #8]
 800be06:	249c      	movs	r4, #156	@ 0x9c
 800be08:	1939      	adds	r1, r7, r4
 800be0a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800be0c:	0011      	movs	r1, r2
 800be0e:	18bb      	adds	r3, r7, r2
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	4aa5      	ldr	r2, [pc, #660]	@ (800c0a8 <HAL_UART_IRQHandler+0x2c8>)
 800be14:	4013      	ands	r3, r2
 800be16:	2298      	movs	r2, #152	@ 0x98
 800be18:	18bd      	adds	r5, r7, r2
 800be1a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800be1c:	18bb      	adds	r3, r7, r2
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d11a      	bne.n	800be5a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800be24:	187b      	adds	r3, r7, r1
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2220      	movs	r2, #32
 800be2a:	4013      	ands	r3, r2
 800be2c:	d015      	beq.n	800be5a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800be2e:	183b      	adds	r3, r7, r0
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2220      	movs	r2, #32
 800be34:	4013      	ands	r3, r2
 800be36:	d105      	bne.n	800be44 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800be38:	193b      	adds	r3, r7, r4
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	2380      	movs	r3, #128	@ 0x80
 800be3e:	055b      	lsls	r3, r3, #21
 800be40:	4013      	ands	r3, r2
 800be42:	d00a      	beq.n	800be5a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d100      	bne.n	800be4e <HAL_UART_IRQHandler+0x6e>
 800be4c:	e2ea      	b.n	800c424 <HAL_UART_IRQHandler+0x644>
      {
        huart->RxISR(huart);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	0010      	movs	r0, r2
 800be56:	4798      	blx	r3
      }
      return;
 800be58:	e2e4      	b.n	800c424 <HAL_UART_IRQHandler+0x644>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800be5a:	2398      	movs	r3, #152	@ 0x98
 800be5c:	18fb      	adds	r3, r7, r3
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d100      	bne.n	800be66 <HAL_UART_IRQHandler+0x86>
 800be64:	e128      	b.n	800c0b8 <HAL_UART_IRQHandler+0x2d8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800be66:	239c      	movs	r3, #156	@ 0x9c
 800be68:	18fb      	adds	r3, r7, r3
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a8f      	ldr	r2, [pc, #572]	@ (800c0ac <HAL_UART_IRQHandler+0x2cc>)
 800be6e:	4013      	ands	r3, r2
 800be70:	d106      	bne.n	800be80 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800be72:	23a0      	movs	r3, #160	@ 0xa0
 800be74:	18fb      	adds	r3, r7, r3
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a8d      	ldr	r2, [pc, #564]	@ (800c0b0 <HAL_UART_IRQHandler+0x2d0>)
 800be7a:	4013      	ands	r3, r2
 800be7c:	d100      	bne.n	800be80 <HAL_UART_IRQHandler+0xa0>
 800be7e:	e11b      	b.n	800c0b8 <HAL_UART_IRQHandler+0x2d8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be80:	23a4      	movs	r3, #164	@ 0xa4
 800be82:	18fb      	adds	r3, r7, r3
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	2201      	movs	r2, #1
 800be88:	4013      	ands	r3, r2
 800be8a:	d012      	beq.n	800beb2 <HAL_UART_IRQHandler+0xd2>
 800be8c:	23a0      	movs	r3, #160	@ 0xa0
 800be8e:	18fb      	adds	r3, r7, r3
 800be90:	681a      	ldr	r2, [r3, #0]
 800be92:	2380      	movs	r3, #128	@ 0x80
 800be94:	005b      	lsls	r3, r3, #1
 800be96:	4013      	ands	r3, r2
 800be98:	d00b      	beq.n	800beb2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	2201      	movs	r2, #1
 800bea0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2290      	movs	r2, #144	@ 0x90
 800bea6:	589b      	ldr	r3, [r3, r2]
 800bea8:	2201      	movs	r2, #1
 800beaa:	431a      	orrs	r2, r3
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2190      	movs	r1, #144	@ 0x90
 800beb0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800beb2:	23a4      	movs	r3, #164	@ 0xa4
 800beb4:	18fb      	adds	r3, r7, r3
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2202      	movs	r2, #2
 800beba:	4013      	ands	r3, r2
 800bebc:	d011      	beq.n	800bee2 <HAL_UART_IRQHandler+0x102>
 800bebe:	239c      	movs	r3, #156	@ 0x9c
 800bec0:	18fb      	adds	r3, r7, r3
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2201      	movs	r2, #1
 800bec6:	4013      	ands	r3, r2
 800bec8:	d00b      	beq.n	800bee2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2202      	movs	r2, #2
 800bed0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2290      	movs	r2, #144	@ 0x90
 800bed6:	589b      	ldr	r3, [r3, r2]
 800bed8:	2204      	movs	r2, #4
 800beda:	431a      	orrs	r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2190      	movs	r1, #144	@ 0x90
 800bee0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bee2:	23a4      	movs	r3, #164	@ 0xa4
 800bee4:	18fb      	adds	r3, r7, r3
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2204      	movs	r2, #4
 800beea:	4013      	ands	r3, r2
 800beec:	d011      	beq.n	800bf12 <HAL_UART_IRQHandler+0x132>
 800beee:	239c      	movs	r3, #156	@ 0x9c
 800bef0:	18fb      	adds	r3, r7, r3
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2201      	movs	r2, #1
 800bef6:	4013      	ands	r3, r2
 800bef8:	d00b      	beq.n	800bf12 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2204      	movs	r2, #4
 800bf00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2290      	movs	r2, #144	@ 0x90
 800bf06:	589b      	ldr	r3, [r3, r2]
 800bf08:	2202      	movs	r2, #2
 800bf0a:	431a      	orrs	r2, r3
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2190      	movs	r1, #144	@ 0x90
 800bf10:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bf12:	23a4      	movs	r3, #164	@ 0xa4
 800bf14:	18fb      	adds	r3, r7, r3
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	2208      	movs	r2, #8
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	d017      	beq.n	800bf4e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bf1e:	23a0      	movs	r3, #160	@ 0xa0
 800bf20:	18fb      	adds	r3, r7, r3
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2220      	movs	r2, #32
 800bf26:	4013      	ands	r3, r2
 800bf28:	d105      	bne.n	800bf36 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bf2a:	239c      	movs	r3, #156	@ 0x9c
 800bf2c:	18fb      	adds	r3, r7, r3
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a5e      	ldr	r2, [pc, #376]	@ (800c0ac <HAL_UART_IRQHandler+0x2cc>)
 800bf32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bf34:	d00b      	beq.n	800bf4e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	2208      	movs	r2, #8
 800bf3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2290      	movs	r2, #144	@ 0x90
 800bf42:	589b      	ldr	r3, [r3, r2]
 800bf44:	2208      	movs	r2, #8
 800bf46:	431a      	orrs	r2, r3
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2190      	movs	r1, #144	@ 0x90
 800bf4c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bf4e:	23a4      	movs	r3, #164	@ 0xa4
 800bf50:	18fb      	adds	r3, r7, r3
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	2380      	movs	r3, #128	@ 0x80
 800bf56:	011b      	lsls	r3, r3, #4
 800bf58:	4013      	ands	r3, r2
 800bf5a:	d013      	beq.n	800bf84 <HAL_UART_IRQHandler+0x1a4>
 800bf5c:	23a0      	movs	r3, #160	@ 0xa0
 800bf5e:	18fb      	adds	r3, r7, r3
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	2380      	movs	r3, #128	@ 0x80
 800bf64:	04db      	lsls	r3, r3, #19
 800bf66:	4013      	ands	r3, r2
 800bf68:	d00c      	beq.n	800bf84 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	2280      	movs	r2, #128	@ 0x80
 800bf70:	0112      	lsls	r2, r2, #4
 800bf72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2290      	movs	r2, #144	@ 0x90
 800bf78:	589b      	ldr	r3, [r3, r2]
 800bf7a:	2220      	movs	r2, #32
 800bf7c:	431a      	orrs	r2, r3
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2190      	movs	r1, #144	@ 0x90
 800bf82:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2290      	movs	r2, #144	@ 0x90
 800bf88:	589b      	ldr	r3, [r3, r2]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d100      	bne.n	800bf90 <HAL_UART_IRQHandler+0x1b0>
 800bf8e:	e24b      	b.n	800c428 <HAL_UART_IRQHandler+0x648>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf90:	23a4      	movs	r3, #164	@ 0xa4
 800bf92:	18fb      	adds	r3, r7, r3
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	2220      	movs	r2, #32
 800bf98:	4013      	ands	r3, r2
 800bf9a:	d015      	beq.n	800bfc8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf9c:	23a0      	movs	r3, #160	@ 0xa0
 800bf9e:	18fb      	adds	r3, r7, r3
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	2220      	movs	r2, #32
 800bfa4:	4013      	ands	r3, r2
 800bfa6:	d106      	bne.n	800bfb6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bfa8:	239c      	movs	r3, #156	@ 0x9c
 800bfaa:	18fb      	adds	r3, r7, r3
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	2380      	movs	r3, #128	@ 0x80
 800bfb0:	055b      	lsls	r3, r3, #21
 800bfb2:	4013      	ands	r3, r2
 800bfb4:	d008      	beq.n	800bfc8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d004      	beq.n	800bfc8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	0010      	movs	r0, r2
 800bfc6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2290      	movs	r2, #144	@ 0x90
 800bfcc:	589b      	ldr	r3, [r3, r2]
 800bfce:	2194      	movs	r1, #148	@ 0x94
 800bfd0:	187a      	adds	r2, r7, r1
 800bfd2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	2240      	movs	r2, #64	@ 0x40
 800bfdc:	4013      	ands	r3, r2
 800bfde:	2b40      	cmp	r3, #64	@ 0x40
 800bfe0:	d004      	beq.n	800bfec <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bfe2:	187b      	adds	r3, r7, r1
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	2228      	movs	r2, #40	@ 0x28
 800bfe8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bfea:	d050      	beq.n	800c08e <HAL_UART_IRQHandler+0x2ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	0018      	movs	r0, r3
 800bff0:	f000 fff2 	bl	800cfd8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	689b      	ldr	r3, [r3, #8]
 800bffa:	2240      	movs	r2, #64	@ 0x40
 800bffc:	4013      	ands	r3, r2
 800bffe:	2b40      	cmp	r3, #64	@ 0x40
 800c000:	d13e      	bne.n	800c080 <HAL_UART_IRQHandler+0x2a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c002:	f3ef 8310 	mrs	r3, PRIMASK
 800c006:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800c008:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c00a:	2090      	movs	r0, #144	@ 0x90
 800c00c:	183a      	adds	r2, r7, r0
 800c00e:	6013      	str	r3, [r2, #0]
 800c010:	2301      	movs	r3, #1
 800c012:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c014:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c016:	f383 8810 	msr	PRIMASK, r3
}
 800c01a:	46c0      	nop			@ (mov r8, r8)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	689a      	ldr	r2, [r3, #8]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2140      	movs	r1, #64	@ 0x40
 800c028:	438a      	bics	r2, r1
 800c02a:	609a      	str	r2, [r3, #8]
 800c02c:	183b      	adds	r3, r7, r0
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c032:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c034:	f383 8810 	msr	PRIMASK, r3
}
 800c038:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2280      	movs	r2, #128	@ 0x80
 800c03e:	589b      	ldr	r3, [r3, r2]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d016      	beq.n	800c072 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2280      	movs	r2, #128	@ 0x80
 800c048:	589b      	ldr	r3, [r3, r2]
 800c04a:	4a1a      	ldr	r2, [pc, #104]	@ (800c0b4 <HAL_UART_IRQHandler+0x2d4>)
 800c04c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2280      	movs	r2, #128	@ 0x80
 800c052:	589b      	ldr	r3, [r3, r2]
 800c054:	0018      	movs	r0, r3
 800c056:	f7fb fb3f 	bl	80076d8 <HAL_DMA_Abort_IT>
 800c05a:	1e03      	subs	r3, r0, #0
 800c05c:	d022      	beq.n	800c0a4 <HAL_UART_IRQHandler+0x2c4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2280      	movs	r2, #128	@ 0x80
 800c062:	589b      	ldr	r3, [r3, r2]
 800c064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	2180      	movs	r1, #128	@ 0x80
 800c06a:	5852      	ldr	r2, [r2, r1]
 800c06c:	0010      	movs	r0, r2
 800c06e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c070:	e018      	b.n	800c0a4 <HAL_UART_IRQHandler+0x2c4>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	22a4      	movs	r2, #164	@ 0xa4
 800c076:	589b      	ldr	r3, [r3, r2]
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	0010      	movs	r0, r2
 800c07c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c07e:	e011      	b.n	800c0a4 <HAL_UART_IRQHandler+0x2c4>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	22a4      	movs	r2, #164	@ 0xa4
 800c084:	589b      	ldr	r3, [r3, r2]
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	0010      	movs	r0, r2
 800c08a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c08c:	e00a      	b.n	800c0a4 <HAL_UART_IRQHandler+0x2c4>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	22a4      	movs	r2, #164	@ 0xa4
 800c092:	589b      	ldr	r3, [r3, r2]
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	0010      	movs	r0, r2
 800c098:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2290      	movs	r2, #144	@ 0x90
 800c09e:	2100      	movs	r1, #0
 800c0a0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800c0a2:	e1c1      	b.n	800c428 <HAL_UART_IRQHandler+0x648>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0a4:	46c0      	nop			@ (mov r8, r8)
    return;
 800c0a6:	e1bf      	b.n	800c428 <HAL_UART_IRQHandler+0x648>
 800c0a8:	0000080f 	.word	0x0000080f
 800c0ac:	10000001 	.word	0x10000001
 800c0b0:	04000120 	.word	0x04000120
 800c0b4:	0800d2ab 	.word	0x0800d2ab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d000      	beq.n	800c0c2 <HAL_UART_IRQHandler+0x2e2>
 800c0c0:	e140      	b.n	800c344 <HAL_UART_IRQHandler+0x564>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c0c2:	23a4      	movs	r3, #164	@ 0xa4
 800c0c4:	18fb      	adds	r3, r7, r3
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	2210      	movs	r2, #16
 800c0ca:	4013      	ands	r3, r2
 800c0cc:	d100      	bne.n	800c0d0 <HAL_UART_IRQHandler+0x2f0>
 800c0ce:	e139      	b.n	800c344 <HAL_UART_IRQHandler+0x564>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c0d0:	23a0      	movs	r3, #160	@ 0xa0
 800c0d2:	18fb      	adds	r3, r7, r3
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2210      	movs	r2, #16
 800c0d8:	4013      	ands	r3, r2
 800c0da:	d100      	bne.n	800c0de <HAL_UART_IRQHandler+0x2fe>
 800c0dc:	e132      	b.n	800c344 <HAL_UART_IRQHandler+0x564>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	2210      	movs	r2, #16
 800c0e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	689b      	ldr	r3, [r3, #8]
 800c0ec:	2240      	movs	r2, #64	@ 0x40
 800c0ee:	4013      	ands	r3, r2
 800c0f0:	2b40      	cmp	r3, #64	@ 0x40
 800c0f2:	d000      	beq.n	800c0f6 <HAL_UART_IRQHandler+0x316>
 800c0f4:	e0a5      	b.n	800c242 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2280      	movs	r2, #128	@ 0x80
 800c0fa:	589b      	ldr	r3, [r3, r2]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	685a      	ldr	r2, [r3, #4]
 800c100:	217e      	movs	r1, #126	@ 0x7e
 800c102:	187b      	adds	r3, r7, r1
 800c104:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800c106:	187b      	adds	r3, r7, r1
 800c108:	881b      	ldrh	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d100      	bne.n	800c110 <HAL_UART_IRQHandler+0x330>
 800c10e:	e18d      	b.n	800c42c <HAL_UART_IRQHandler+0x64c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	225c      	movs	r2, #92	@ 0x5c
 800c114:	5a9b      	ldrh	r3, [r3, r2]
 800c116:	187a      	adds	r2, r7, r1
 800c118:	8812      	ldrh	r2, [r2, #0]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d300      	bcc.n	800c120 <HAL_UART_IRQHandler+0x340>
 800c11e:	e185      	b.n	800c42c <HAL_UART_IRQHandler+0x64c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	187a      	adds	r2, r7, r1
 800c124:	215e      	movs	r1, #94	@ 0x5e
 800c126:	8812      	ldrh	r2, [r2, #0]
 800c128:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2280      	movs	r2, #128	@ 0x80
 800c12e:	589b      	ldr	r3, [r3, r2]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2220      	movs	r2, #32
 800c136:	4013      	ands	r3, r2
 800c138:	d170      	bne.n	800c21c <HAL_UART_IRQHandler+0x43c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c13a:	f3ef 8310 	mrs	r3, PRIMASK
 800c13e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800c140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c142:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c144:	2301      	movs	r3, #1
 800c146:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c14a:	f383 8810 	msr	PRIMASK, r3
}
 800c14e:	46c0      	nop			@ (mov r8, r8)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	681a      	ldr	r2, [r3, #0]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	49b8      	ldr	r1, [pc, #736]	@ (800c43c <HAL_UART_IRQHandler+0x65c>)
 800c15c:	400a      	ands	r2, r1
 800c15e:	601a      	str	r2, [r3, #0]
 800c160:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c162:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c166:	f383 8810 	msr	PRIMASK, r3
}
 800c16a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c16c:	f3ef 8310 	mrs	r3, PRIMASK
 800c170:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800c172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c174:	677b      	str	r3, [r7, #116]	@ 0x74
 800c176:	2301      	movs	r3, #1
 800c178:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c17a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c17c:	f383 8810 	msr	PRIMASK, r3
}
 800c180:	46c0      	nop			@ (mov r8, r8)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	689a      	ldr	r2, [r3, #8]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2101      	movs	r1, #1
 800c18e:	438a      	bics	r2, r1
 800c190:	609a      	str	r2, [r3, #8]
 800c192:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c194:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c198:	f383 8810 	msr	PRIMASK, r3
}
 800c19c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c19e:	f3ef 8310 	mrs	r3, PRIMASK
 800c1a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800c1a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1a6:	673b      	str	r3, [r7, #112]	@ 0x70
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1ae:	f383 8810 	msr	PRIMASK, r3
}
 800c1b2:	46c0      	nop			@ (mov r8, r8)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	689a      	ldr	r2, [r3, #8]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2140      	movs	r1, #64	@ 0x40
 800c1c0:	438a      	bics	r2, r1
 800c1c2:	609a      	str	r2, [r3, #8]
 800c1c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c1c6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1ca:	f383 8810 	msr	PRIMASK, r3
}
 800c1ce:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	228c      	movs	r2, #140	@ 0x8c
 800c1d4:	2120      	movs	r1, #32
 800c1d6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1de:	f3ef 8310 	mrs	r3, PRIMASK
 800c1e2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800c1e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c1ee:	f383 8810 	msr	PRIMASK, r3
}
 800c1f2:	46c0      	nop			@ (mov r8, r8)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	2110      	movs	r1, #16
 800c200:	438a      	bics	r2, r1
 800c202:	601a      	str	r2, [r3, #0]
 800c204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c206:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c208:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c20a:	f383 8810 	msr	PRIMASK, r3
}
 800c20e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2280      	movs	r2, #128	@ 0x80
 800c214:	589b      	ldr	r3, [r3, r2]
 800c216:	0018      	movs	r0, r3
 800c218:	f7fb f9fc 	bl	8007614 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2202      	movs	r2, #2
 800c220:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	22c0      	movs	r2, #192	@ 0xc0
 800c226:	589b      	ldr	r3, [r3, r2]
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	215c      	movs	r1, #92	@ 0x5c
 800c22c:	5a51      	ldrh	r1, [r2, r1]
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	205e      	movs	r0, #94	@ 0x5e
 800c232:	5a12      	ldrh	r2, [r2, r0]
 800c234:	b292      	uxth	r2, r2
 800c236:	1a8a      	subs	r2, r1, r2
 800c238:	b291      	uxth	r1, r2
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	0010      	movs	r0, r2
 800c23e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c240:	e0f4      	b.n	800c42c <HAL_UART_IRQHandler+0x64c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	225c      	movs	r2, #92	@ 0x5c
 800c246:	5a99      	ldrh	r1, [r3, r2]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	225e      	movs	r2, #94	@ 0x5e
 800c24c:	5a9b      	ldrh	r3, [r3, r2]
 800c24e:	b29a      	uxth	r2, r3
 800c250:	208e      	movs	r0, #142	@ 0x8e
 800c252:	183b      	adds	r3, r7, r0
 800c254:	1a8a      	subs	r2, r1, r2
 800c256:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	225e      	movs	r2, #94	@ 0x5e
 800c25c:	5a9b      	ldrh	r3, [r3, r2]
 800c25e:	b29b      	uxth	r3, r3
 800c260:	2b00      	cmp	r3, #0
 800c262:	d100      	bne.n	800c266 <HAL_UART_IRQHandler+0x486>
 800c264:	e0e4      	b.n	800c430 <HAL_UART_IRQHandler+0x650>
          && (nb_rx_data > 0U))
 800c266:	183b      	adds	r3, r7, r0
 800c268:	881b      	ldrh	r3, [r3, #0]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d100      	bne.n	800c270 <HAL_UART_IRQHandler+0x490>
 800c26e:	e0df      	b.n	800c430 <HAL_UART_IRQHandler+0x650>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c270:	f3ef 8310 	mrs	r3, PRIMASK
 800c274:	60fb      	str	r3, [r7, #12]
  return(result);
 800c276:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c278:	2488      	movs	r4, #136	@ 0x88
 800c27a:	193a      	adds	r2, r7, r4
 800c27c:	6013      	str	r3, [r2, #0]
 800c27e:	2301      	movs	r3, #1
 800c280:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	f383 8810 	msr	PRIMASK, r3
}
 800c288:	46c0      	nop			@ (mov r8, r8)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	496a      	ldr	r1, [pc, #424]	@ (800c440 <HAL_UART_IRQHandler+0x660>)
 800c296:	400a      	ands	r2, r1
 800c298:	601a      	str	r2, [r3, #0]
 800c29a:	193b      	adds	r3, r7, r4
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	f383 8810 	msr	PRIMASK, r3
}
 800c2a6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2a8:	f3ef 8310 	mrs	r3, PRIMASK
 800c2ac:	61bb      	str	r3, [r7, #24]
  return(result);
 800c2ae:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c2b0:	2484      	movs	r4, #132	@ 0x84
 800c2b2:	193a      	adds	r2, r7, r4
 800c2b4:	6013      	str	r3, [r2, #0]
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	f383 8810 	msr	PRIMASK, r3
}
 800c2c0:	46c0      	nop			@ (mov r8, r8)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	689a      	ldr	r2, [r3, #8]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	495d      	ldr	r1, [pc, #372]	@ (800c444 <HAL_UART_IRQHandler+0x664>)
 800c2ce:	400a      	ands	r2, r1
 800c2d0:	609a      	str	r2, [r3, #8]
 800c2d2:	193b      	adds	r3, r7, r4
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2d8:	6a3b      	ldr	r3, [r7, #32]
 800c2da:	f383 8810 	msr	PRIMASK, r3
}
 800c2de:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	228c      	movs	r2, #140	@ 0x8c
 800c2e4:	2120      	movs	r1, #32
 800c2e6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2f4:	f3ef 8310 	mrs	r3, PRIMASK
 800c2f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2fc:	2480      	movs	r4, #128	@ 0x80
 800c2fe:	193a      	adds	r2, r7, r4
 800c300:	6013      	str	r3, [r2, #0]
 800c302:	2301      	movs	r3, #1
 800c304:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c308:	f383 8810 	msr	PRIMASK, r3
}
 800c30c:	46c0      	nop			@ (mov r8, r8)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	681a      	ldr	r2, [r3, #0]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	2110      	movs	r1, #16
 800c31a:	438a      	bics	r2, r1
 800c31c:	601a      	str	r2, [r3, #0]
 800c31e:	193b      	adds	r3, r7, r4
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c326:	f383 8810 	msr	PRIMASK, r3
}
 800c32a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2202      	movs	r2, #2
 800c330:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	22c0      	movs	r2, #192	@ 0xc0
 800c336:	589b      	ldr	r3, [r3, r2]
 800c338:	183a      	adds	r2, r7, r0
 800c33a:	8811      	ldrh	r1, [r2, #0]
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	0010      	movs	r0, r2
 800c340:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c342:	e075      	b.n	800c430 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c344:	23a4      	movs	r3, #164	@ 0xa4
 800c346:	18fb      	adds	r3, r7, r3
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	2380      	movs	r3, #128	@ 0x80
 800c34c:	035b      	lsls	r3, r3, #13
 800c34e:	4013      	ands	r3, r2
 800c350:	d012      	beq.n	800c378 <HAL_UART_IRQHandler+0x598>
 800c352:	239c      	movs	r3, #156	@ 0x9c
 800c354:	18fb      	adds	r3, r7, r3
 800c356:	681a      	ldr	r2, [r3, #0]
 800c358:	2380      	movs	r3, #128	@ 0x80
 800c35a:	03db      	lsls	r3, r3, #15
 800c35c:	4013      	ands	r3, r2
 800c35e:	d00b      	beq.n	800c378 <HAL_UART_IRQHandler+0x598>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2280      	movs	r2, #128	@ 0x80
 800c366:	0352      	lsls	r2, r2, #13
 800c368:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	22b4      	movs	r2, #180	@ 0xb4
 800c36e:	589b      	ldr	r3, [r3, r2]
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	0010      	movs	r0, r2
 800c374:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c376:	e05e      	b.n	800c436 <HAL_UART_IRQHandler+0x656>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c378:	23a4      	movs	r3, #164	@ 0xa4
 800c37a:	18fb      	adds	r3, r7, r3
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2280      	movs	r2, #128	@ 0x80
 800c380:	4013      	ands	r3, r2
 800c382:	d016      	beq.n	800c3b2 <HAL_UART_IRQHandler+0x5d2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c384:	23a0      	movs	r3, #160	@ 0xa0
 800c386:	18fb      	adds	r3, r7, r3
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	2280      	movs	r2, #128	@ 0x80
 800c38c:	4013      	ands	r3, r2
 800c38e:	d106      	bne.n	800c39e <HAL_UART_IRQHandler+0x5be>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c390:	239c      	movs	r3, #156	@ 0x9c
 800c392:	18fb      	adds	r3, r7, r3
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	2380      	movs	r3, #128	@ 0x80
 800c398:	041b      	lsls	r3, r3, #16
 800c39a:	4013      	ands	r3, r2
 800c39c:	d009      	beq.n	800c3b2 <HAL_UART_IRQHandler+0x5d2>
  {
    if (huart->TxISR != NULL)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d046      	beq.n	800c434 <HAL_UART_IRQHandler+0x654>
    {
      huart->TxISR(huart);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	0010      	movs	r0, r2
 800c3ae:	4798      	blx	r3
    }
    return;
 800c3b0:	e040      	b.n	800c434 <HAL_UART_IRQHandler+0x654>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c3b2:	23a4      	movs	r3, #164	@ 0xa4
 800c3b4:	18fb      	adds	r3, r7, r3
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2240      	movs	r2, #64	@ 0x40
 800c3ba:	4013      	ands	r3, r2
 800c3bc:	d00a      	beq.n	800c3d4 <HAL_UART_IRQHandler+0x5f4>
 800c3be:	23a0      	movs	r3, #160	@ 0xa0
 800c3c0:	18fb      	adds	r3, r7, r3
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2240      	movs	r2, #64	@ 0x40
 800c3c6:	4013      	ands	r3, r2
 800c3c8:	d004      	beq.n	800c3d4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	0018      	movs	r0, r3
 800c3ce:	f000 ff85 	bl	800d2dc <UART_EndTransmit_IT>
    return;
 800c3d2:	e030      	b.n	800c436 <HAL_UART_IRQHandler+0x656>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c3d4:	23a4      	movs	r3, #164	@ 0xa4
 800c3d6:	18fb      	adds	r3, r7, r3
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	2380      	movs	r3, #128	@ 0x80
 800c3dc:	041b      	lsls	r3, r3, #16
 800c3de:	4013      	ands	r3, r2
 800c3e0:	d00d      	beq.n	800c3fe <HAL_UART_IRQHandler+0x61e>
 800c3e2:	23a0      	movs	r3, #160	@ 0xa0
 800c3e4:	18fb      	adds	r3, r7, r3
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	2380      	movs	r3, #128	@ 0x80
 800c3ea:	05db      	lsls	r3, r3, #23
 800c3ec:	4013      	ands	r3, r2
 800c3ee:	d006      	beq.n	800c3fe <HAL_UART_IRQHandler+0x61e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	22bc      	movs	r2, #188	@ 0xbc
 800c3f4:	589b      	ldr	r3, [r3, r2]
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	0010      	movs	r0, r2
 800c3fa:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c3fc:	e01b      	b.n	800c436 <HAL_UART_IRQHandler+0x656>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c3fe:	23a4      	movs	r3, #164	@ 0xa4
 800c400:	18fb      	adds	r3, r7, r3
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	2380      	movs	r3, #128	@ 0x80
 800c406:	045b      	lsls	r3, r3, #17
 800c408:	4013      	ands	r3, r2
 800c40a:	d014      	beq.n	800c436 <HAL_UART_IRQHandler+0x656>
 800c40c:	23a0      	movs	r3, #160	@ 0xa0
 800c40e:	18fb      	adds	r3, r7, r3
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	da0f      	bge.n	800c436 <HAL_UART_IRQHandler+0x656>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	22b8      	movs	r2, #184	@ 0xb8
 800c41a:	589b      	ldr	r3, [r3, r2]
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	0010      	movs	r0, r2
 800c420:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c422:	e008      	b.n	800c436 <HAL_UART_IRQHandler+0x656>
      return;
 800c424:	46c0      	nop			@ (mov r8, r8)
 800c426:	e006      	b.n	800c436 <HAL_UART_IRQHandler+0x656>
    return;
 800c428:	46c0      	nop			@ (mov r8, r8)
 800c42a:	e004      	b.n	800c436 <HAL_UART_IRQHandler+0x656>
      return;
 800c42c:	46c0      	nop			@ (mov r8, r8)
 800c42e:	e002      	b.n	800c436 <HAL_UART_IRQHandler+0x656>
      return;
 800c430:	46c0      	nop			@ (mov r8, r8)
 800c432:	e000      	b.n	800c436 <HAL_UART_IRQHandler+0x656>
    return;
 800c434:	46c0      	nop			@ (mov r8, r8)
  }
}
 800c436:	46bd      	mov	sp, r7
 800c438:	b02a      	add	sp, #168	@ 0xa8
 800c43a:	bdb0      	pop	{r4, r5, r7, pc}
 800c43c:	fffffeff 	.word	0xfffffeff
 800c440:	fffffedf 	.word	0xfffffedf
 800c444:	effffffe 	.word	0xeffffffe

0800c448 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c450:	46c0      	nop			@ (mov r8, r8)
 800c452:	46bd      	mov	sp, r7
 800c454:	b002      	add	sp, #8
 800c456:	bd80      	pop	{r7, pc}

0800c458 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c460:	46c0      	nop			@ (mov r8, r8)
 800c462:	46bd      	mov	sp, r7
 800c464:	b002      	add	sp, #8
 800c466:	bd80      	pop	{r7, pc}

0800c468 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c470:	46c0      	nop			@ (mov r8, r8)
 800c472:	46bd      	mov	sp, r7
 800c474:	b002      	add	sp, #8
 800c476:	bd80      	pop	{r7, pc}

0800c478 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b082      	sub	sp, #8
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c480:	46c0      	nop			@ (mov r8, r8)
 800c482:	46bd      	mov	sp, r7
 800c484:	b002      	add	sp, #8
 800c486:	bd80      	pop	{r7, pc}

0800c488 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c490:	46c0      	nop			@ (mov r8, r8)
 800c492:	46bd      	mov	sp, r7
 800c494:	b002      	add	sp, #8
 800c496:	bd80      	pop	{r7, pc}

0800c498 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c4a0:	46c0      	nop			@ (mov r8, r8)
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	b002      	add	sp, #8
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800c4b0:	46c0      	nop			@ (mov r8, r8)
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	b002      	add	sp, #8
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800c4c0:	46c0      	nop			@ (mov r8, r8)
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	b002      	add	sp, #8
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	000a      	movs	r2, r1
 800c4d2:	1cbb      	adds	r3, r7, #2
 800c4d4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c4d6:	46c0      	nop			@ (mov r8, r8)
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	b002      	add	sp, #8
 800c4dc:	bd80      	pop	{r7, pc}
	...

0800c4e0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2194      	movs	r1, #148	@ 0x94
 800c4ec:	4a18      	ldr	r2, [pc, #96]	@ (800c550 <UART_InitCallbacksToDefault+0x70>)
 800c4ee:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2198      	movs	r1, #152	@ 0x98
 800c4f4:	4a17      	ldr	r2, [pc, #92]	@ (800c554 <UART_InitCallbacksToDefault+0x74>)
 800c4f6:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	219c      	movs	r1, #156	@ 0x9c
 800c4fc:	4a16      	ldr	r2, [pc, #88]	@ (800c558 <UART_InitCallbacksToDefault+0x78>)
 800c4fe:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	21a0      	movs	r1, #160	@ 0xa0
 800c504:	4a15      	ldr	r2, [pc, #84]	@ (800c55c <UART_InitCallbacksToDefault+0x7c>)
 800c506:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	21a4      	movs	r1, #164	@ 0xa4
 800c50c:	4a14      	ldr	r2, [pc, #80]	@ (800c560 <UART_InitCallbacksToDefault+0x80>)
 800c50e:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	21a8      	movs	r1, #168	@ 0xa8
 800c514:	4a13      	ldr	r2, [pc, #76]	@ (800c564 <UART_InitCallbacksToDefault+0x84>)
 800c516:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	21ac      	movs	r1, #172	@ 0xac
 800c51c:	4a12      	ldr	r2, [pc, #72]	@ (800c568 <UART_InitCallbacksToDefault+0x88>)
 800c51e:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	21b0      	movs	r1, #176	@ 0xb0
 800c524:	4a11      	ldr	r2, [pc, #68]	@ (800c56c <UART_InitCallbacksToDefault+0x8c>)
 800c526:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	21b4      	movs	r1, #180	@ 0xb4
 800c52c:	4a10      	ldr	r2, [pc, #64]	@ (800c570 <UART_InitCallbacksToDefault+0x90>)
 800c52e:	505a      	str	r2, [r3, r1]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	21b8      	movs	r1, #184	@ 0xb8
 800c534:	4a0f      	ldr	r2, [pc, #60]	@ (800c574 <UART_InitCallbacksToDefault+0x94>)
 800c536:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	21bc      	movs	r1, #188	@ 0xbc
 800c53c:	4a0e      	ldr	r2, [pc, #56]	@ (800c578 <UART_InitCallbacksToDefault+0x98>)
 800c53e:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	21c0      	movs	r1, #192	@ 0xc0
 800c544:	4a0d      	ldr	r2, [pc, #52]	@ (800c57c <UART_InitCallbacksToDefault+0x9c>)
 800c546:	505a      	str	r2, [r3, r1]

}
 800c548:	46c0      	nop			@ (mov r8, r8)
 800c54a:	46bd      	mov	sp, r7
 800c54c:	b002      	add	sp, #8
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	0800c459 	.word	0x0800c459
 800c554:	0800c449 	.word	0x0800c449
 800c558:	0800c479 	.word	0x0800c479
 800c55c:	0800c469 	.word	0x0800c469
 800c560:	0800c489 	.word	0x0800c489
 800c564:	0800c499 	.word	0x0800c499
 800c568:	0800c4a9 	.word	0x0800c4a9
 800c56c:	0800c4b9 	.word	0x0800c4b9
 800c570:	0800d339 	.word	0x0800d339
 800c574:	0800d349 	.word	0x0800d349
 800c578:	0800d359 	.word	0x0800d359
 800c57c:	0800c4c9 	.word	0x0800c4c9

0800c580 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c580:	b5b0      	push	{r4, r5, r7, lr}
 800c582:	b090      	sub	sp, #64	@ 0x40
 800c584:	af00      	add	r7, sp, #0
 800c586:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c588:	231a      	movs	r3, #26
 800c58a:	2220      	movs	r2, #32
 800c58c:	189b      	adds	r3, r3, r2
 800c58e:	19db      	adds	r3, r3, r7
 800c590:	2200      	movs	r2, #0
 800c592:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c596:	689a      	ldr	r2, [r3, #8]
 800c598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c59a:	691b      	ldr	r3, [r3, #16]
 800c59c:	431a      	orrs	r2, r3
 800c59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a0:	695b      	ldr	r3, [r3, #20]
 800c5a2:	431a      	orrs	r2, r3
 800c5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a6:	69db      	ldr	r3, [r3, #28]
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4ac4      	ldr	r2, [pc, #784]	@ (800c8c4 <UART_SetConfig+0x344>)
 800c5b4:	4013      	ands	r3, r2
 800c5b6:	0019      	movs	r1, r3
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5be:	430b      	orrs	r3, r1
 800c5c0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	4abf      	ldr	r2, [pc, #764]	@ (800c8c8 <UART_SetConfig+0x348>)
 800c5ca:	4013      	ands	r3, r2
 800c5cc:	0018      	movs	r0, r3
 800c5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d0:	68d9      	ldr	r1, [r3, #12]
 800c5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	0003      	movs	r3, r0
 800c5d8:	430b      	orrs	r3, r1
 800c5da:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5de:	699b      	ldr	r3, [r3, #24]
 800c5e0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	4ab9      	ldr	r2, [pc, #740]	@ (800c8cc <UART_SetConfig+0x34c>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d004      	beq.n	800c5f6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ee:	6a1b      	ldr	r3, [r3, #32]
 800c5f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	689b      	ldr	r3, [r3, #8]
 800c5fc:	4ab4      	ldr	r2, [pc, #720]	@ (800c8d0 <UART_SetConfig+0x350>)
 800c5fe:	4013      	ands	r3, r2
 800c600:	0019      	movs	r1, r3
 800c602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c604:	681a      	ldr	r2, [r3, #0]
 800c606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c608:	430b      	orrs	r3, r1
 800c60a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c612:	220f      	movs	r2, #15
 800c614:	4393      	bics	r3, r2
 800c616:	0018      	movs	r0, r3
 800c618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c61a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	0003      	movs	r3, r0
 800c622:	430b      	orrs	r3, r1
 800c624:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4aaa      	ldr	r2, [pc, #680]	@ (800c8d4 <UART_SetConfig+0x354>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d131      	bne.n	800c694 <UART_SetConfig+0x114>
 800c630:	4ba9      	ldr	r3, [pc, #676]	@ (800c8d8 <UART_SetConfig+0x358>)
 800c632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c634:	2203      	movs	r2, #3
 800c636:	4013      	ands	r3, r2
 800c638:	2b03      	cmp	r3, #3
 800c63a:	d01d      	beq.n	800c678 <UART_SetConfig+0xf8>
 800c63c:	d823      	bhi.n	800c686 <UART_SetConfig+0x106>
 800c63e:	2b02      	cmp	r3, #2
 800c640:	d00c      	beq.n	800c65c <UART_SetConfig+0xdc>
 800c642:	d820      	bhi.n	800c686 <UART_SetConfig+0x106>
 800c644:	2b00      	cmp	r3, #0
 800c646:	d002      	beq.n	800c64e <UART_SetConfig+0xce>
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d00e      	beq.n	800c66a <UART_SetConfig+0xea>
 800c64c:	e01b      	b.n	800c686 <UART_SetConfig+0x106>
 800c64e:	231b      	movs	r3, #27
 800c650:	2220      	movs	r2, #32
 800c652:	189b      	adds	r3, r3, r2
 800c654:	19db      	adds	r3, r3, r7
 800c656:	2200      	movs	r2, #0
 800c658:	701a      	strb	r2, [r3, #0]
 800c65a:	e071      	b.n	800c740 <UART_SetConfig+0x1c0>
 800c65c:	231b      	movs	r3, #27
 800c65e:	2220      	movs	r2, #32
 800c660:	189b      	adds	r3, r3, r2
 800c662:	19db      	adds	r3, r3, r7
 800c664:	2202      	movs	r2, #2
 800c666:	701a      	strb	r2, [r3, #0]
 800c668:	e06a      	b.n	800c740 <UART_SetConfig+0x1c0>
 800c66a:	231b      	movs	r3, #27
 800c66c:	2220      	movs	r2, #32
 800c66e:	189b      	adds	r3, r3, r2
 800c670:	19db      	adds	r3, r3, r7
 800c672:	2204      	movs	r2, #4
 800c674:	701a      	strb	r2, [r3, #0]
 800c676:	e063      	b.n	800c740 <UART_SetConfig+0x1c0>
 800c678:	231b      	movs	r3, #27
 800c67a:	2220      	movs	r2, #32
 800c67c:	189b      	adds	r3, r3, r2
 800c67e:	19db      	adds	r3, r3, r7
 800c680:	2208      	movs	r2, #8
 800c682:	701a      	strb	r2, [r3, #0]
 800c684:	e05c      	b.n	800c740 <UART_SetConfig+0x1c0>
 800c686:	231b      	movs	r3, #27
 800c688:	2220      	movs	r2, #32
 800c68a:	189b      	adds	r3, r3, r2
 800c68c:	19db      	adds	r3, r3, r7
 800c68e:	2210      	movs	r2, #16
 800c690:	701a      	strb	r2, [r3, #0]
 800c692:	e055      	b.n	800c740 <UART_SetConfig+0x1c0>
 800c694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a90      	ldr	r2, [pc, #576]	@ (800c8dc <UART_SetConfig+0x35c>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d106      	bne.n	800c6ac <UART_SetConfig+0x12c>
 800c69e:	231b      	movs	r3, #27
 800c6a0:	2220      	movs	r2, #32
 800c6a2:	189b      	adds	r3, r3, r2
 800c6a4:	19db      	adds	r3, r3, r7
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	701a      	strb	r2, [r3, #0]
 800c6aa:	e049      	b.n	800c740 <UART_SetConfig+0x1c0>
 800c6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a86      	ldr	r2, [pc, #536]	@ (800c8cc <UART_SetConfig+0x34c>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d13e      	bne.n	800c734 <UART_SetConfig+0x1b4>
 800c6b6:	4b88      	ldr	r3, [pc, #544]	@ (800c8d8 <UART_SetConfig+0x358>)
 800c6b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c6ba:	23c0      	movs	r3, #192	@ 0xc0
 800c6bc:	011b      	lsls	r3, r3, #4
 800c6be:	4013      	ands	r3, r2
 800c6c0:	22c0      	movs	r2, #192	@ 0xc0
 800c6c2:	0112      	lsls	r2, r2, #4
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d027      	beq.n	800c718 <UART_SetConfig+0x198>
 800c6c8:	22c0      	movs	r2, #192	@ 0xc0
 800c6ca:	0112      	lsls	r2, r2, #4
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d82a      	bhi.n	800c726 <UART_SetConfig+0x1a6>
 800c6d0:	2280      	movs	r2, #128	@ 0x80
 800c6d2:	0112      	lsls	r2, r2, #4
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d011      	beq.n	800c6fc <UART_SetConfig+0x17c>
 800c6d8:	2280      	movs	r2, #128	@ 0x80
 800c6da:	0112      	lsls	r2, r2, #4
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d822      	bhi.n	800c726 <UART_SetConfig+0x1a6>
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d004      	beq.n	800c6ee <UART_SetConfig+0x16e>
 800c6e4:	2280      	movs	r2, #128	@ 0x80
 800c6e6:	00d2      	lsls	r2, r2, #3
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d00e      	beq.n	800c70a <UART_SetConfig+0x18a>
 800c6ec:	e01b      	b.n	800c726 <UART_SetConfig+0x1a6>
 800c6ee:	231b      	movs	r3, #27
 800c6f0:	2220      	movs	r2, #32
 800c6f2:	189b      	adds	r3, r3, r2
 800c6f4:	19db      	adds	r3, r3, r7
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	701a      	strb	r2, [r3, #0]
 800c6fa:	e021      	b.n	800c740 <UART_SetConfig+0x1c0>
 800c6fc:	231b      	movs	r3, #27
 800c6fe:	2220      	movs	r2, #32
 800c700:	189b      	adds	r3, r3, r2
 800c702:	19db      	adds	r3, r3, r7
 800c704:	2202      	movs	r2, #2
 800c706:	701a      	strb	r2, [r3, #0]
 800c708:	e01a      	b.n	800c740 <UART_SetConfig+0x1c0>
 800c70a:	231b      	movs	r3, #27
 800c70c:	2220      	movs	r2, #32
 800c70e:	189b      	adds	r3, r3, r2
 800c710:	19db      	adds	r3, r3, r7
 800c712:	2204      	movs	r2, #4
 800c714:	701a      	strb	r2, [r3, #0]
 800c716:	e013      	b.n	800c740 <UART_SetConfig+0x1c0>
 800c718:	231b      	movs	r3, #27
 800c71a:	2220      	movs	r2, #32
 800c71c:	189b      	adds	r3, r3, r2
 800c71e:	19db      	adds	r3, r3, r7
 800c720:	2208      	movs	r2, #8
 800c722:	701a      	strb	r2, [r3, #0]
 800c724:	e00c      	b.n	800c740 <UART_SetConfig+0x1c0>
 800c726:	231b      	movs	r3, #27
 800c728:	2220      	movs	r2, #32
 800c72a:	189b      	adds	r3, r3, r2
 800c72c:	19db      	adds	r3, r3, r7
 800c72e:	2210      	movs	r2, #16
 800c730:	701a      	strb	r2, [r3, #0]
 800c732:	e005      	b.n	800c740 <UART_SetConfig+0x1c0>
 800c734:	231b      	movs	r3, #27
 800c736:	2220      	movs	r2, #32
 800c738:	189b      	adds	r3, r3, r2
 800c73a:	19db      	adds	r3, r3, r7
 800c73c:	2210      	movs	r2, #16
 800c73e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a61      	ldr	r2, [pc, #388]	@ (800c8cc <UART_SetConfig+0x34c>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d000      	beq.n	800c74c <UART_SetConfig+0x1cc>
 800c74a:	e092      	b.n	800c872 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c74c:	231b      	movs	r3, #27
 800c74e:	2220      	movs	r2, #32
 800c750:	189b      	adds	r3, r3, r2
 800c752:	19db      	adds	r3, r3, r7
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	2b08      	cmp	r3, #8
 800c758:	d015      	beq.n	800c786 <UART_SetConfig+0x206>
 800c75a:	dc18      	bgt.n	800c78e <UART_SetConfig+0x20e>
 800c75c:	2b04      	cmp	r3, #4
 800c75e:	d00d      	beq.n	800c77c <UART_SetConfig+0x1fc>
 800c760:	dc15      	bgt.n	800c78e <UART_SetConfig+0x20e>
 800c762:	2b00      	cmp	r3, #0
 800c764:	d002      	beq.n	800c76c <UART_SetConfig+0x1ec>
 800c766:	2b02      	cmp	r3, #2
 800c768:	d005      	beq.n	800c776 <UART_SetConfig+0x1f6>
 800c76a:	e010      	b.n	800c78e <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c76c:	f7fc fdd6 	bl	800931c <HAL_RCC_GetPCLK1Freq>
 800c770:	0003      	movs	r3, r0
 800c772:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c774:	e014      	b.n	800c7a0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c776:	4b5a      	ldr	r3, [pc, #360]	@ (800c8e0 <UART_SetConfig+0x360>)
 800c778:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c77a:	e011      	b.n	800c7a0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c77c:	f7fc fd42 	bl	8009204 <HAL_RCC_GetSysClockFreq>
 800c780:	0003      	movs	r3, r0
 800c782:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c784:	e00c      	b.n	800c7a0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c786:	2380      	movs	r3, #128	@ 0x80
 800c788:	021b      	lsls	r3, r3, #8
 800c78a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c78c:	e008      	b.n	800c7a0 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800c78e:	2300      	movs	r3, #0
 800c790:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800c792:	231a      	movs	r3, #26
 800c794:	2220      	movs	r2, #32
 800c796:	189b      	adds	r3, r3, r2
 800c798:	19db      	adds	r3, r3, r7
 800c79a:	2201      	movs	r2, #1
 800c79c:	701a      	strb	r2, [r3, #0]
        break;
 800c79e:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c7a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d100      	bne.n	800c7a8 <UART_SetConfig+0x228>
 800c7a6:	e147      	b.n	800ca38 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c7ac:	4b4d      	ldr	r3, [pc, #308]	@ (800c8e4 <UART_SetConfig+0x364>)
 800c7ae:	0052      	lsls	r2, r2, #1
 800c7b0:	5ad3      	ldrh	r3, [r2, r3]
 800c7b2:	0019      	movs	r1, r3
 800c7b4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c7b6:	f7f3 fca7 	bl	8000108 <__udivsi3>
 800c7ba:	0003      	movs	r3, r0
 800c7bc:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c0:	685a      	ldr	r2, [r3, #4]
 800c7c2:	0013      	movs	r3, r2
 800c7c4:	005b      	lsls	r3, r3, #1
 800c7c6:	189b      	adds	r3, r3, r2
 800c7c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d305      	bcc.n	800c7da <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c7d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d906      	bls.n	800c7e8 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800c7da:	231a      	movs	r3, #26
 800c7dc:	2220      	movs	r2, #32
 800c7de:	189b      	adds	r3, r3, r2
 800c7e0:	19db      	adds	r3, r3, r7
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	701a      	strb	r2, [r3, #0]
 800c7e6:	e127      	b.n	800ca38 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7ea:	61bb      	str	r3, [r7, #24]
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	61fb      	str	r3, [r7, #28]
 800c7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c7f4:	4b3b      	ldr	r3, [pc, #236]	@ (800c8e4 <UART_SetConfig+0x364>)
 800c7f6:	0052      	lsls	r2, r2, #1
 800c7f8:	5ad3      	ldrh	r3, [r2, r3]
 800c7fa:	613b      	str	r3, [r7, #16]
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	617b      	str	r3, [r7, #20]
 800c800:	693a      	ldr	r2, [r7, #16]
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	69b8      	ldr	r0, [r7, #24]
 800c806:	69f9      	ldr	r1, [r7, #28]
 800c808:	f7f3 fd0a 	bl	8000220 <__aeabi_uldivmod>
 800c80c:	0002      	movs	r2, r0
 800c80e:	000b      	movs	r3, r1
 800c810:	0e11      	lsrs	r1, r2, #24
 800c812:	021d      	lsls	r5, r3, #8
 800c814:	430d      	orrs	r5, r1
 800c816:	0214      	lsls	r4, r2, #8
 800c818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	085b      	lsrs	r3, r3, #1
 800c81e:	60bb      	str	r3, [r7, #8]
 800c820:	2300      	movs	r3, #0
 800c822:	60fb      	str	r3, [r7, #12]
 800c824:	68b8      	ldr	r0, [r7, #8]
 800c826:	68f9      	ldr	r1, [r7, #12]
 800c828:	1900      	adds	r0, r0, r4
 800c82a:	4169      	adcs	r1, r5
 800c82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	603b      	str	r3, [r7, #0]
 800c832:	2300      	movs	r3, #0
 800c834:	607b      	str	r3, [r7, #4]
 800c836:	683a      	ldr	r2, [r7, #0]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f7f3 fcf1 	bl	8000220 <__aeabi_uldivmod>
 800c83e:	0002      	movs	r2, r0
 800c840:	000b      	movs	r3, r1
 800c842:	0013      	movs	r3, r2
 800c844:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c848:	23c0      	movs	r3, #192	@ 0xc0
 800c84a:	009b      	lsls	r3, r3, #2
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d309      	bcc.n	800c864 <UART_SetConfig+0x2e4>
 800c850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c852:	2380      	movs	r3, #128	@ 0x80
 800c854:	035b      	lsls	r3, r3, #13
 800c856:	429a      	cmp	r2, r3
 800c858:	d204      	bcs.n	800c864 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800c85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c860:	60da      	str	r2, [r3, #12]
 800c862:	e0e9      	b.n	800ca38 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800c864:	231a      	movs	r3, #26
 800c866:	2220      	movs	r2, #32
 800c868:	189b      	adds	r3, r3, r2
 800c86a:	19db      	adds	r3, r3, r7
 800c86c:	2201      	movs	r2, #1
 800c86e:	701a      	strb	r2, [r3, #0]
 800c870:	e0e2      	b.n	800ca38 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c874:	69da      	ldr	r2, [r3, #28]
 800c876:	2380      	movs	r3, #128	@ 0x80
 800c878:	021b      	lsls	r3, r3, #8
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d000      	beq.n	800c880 <UART_SetConfig+0x300>
 800c87e:	e083      	b.n	800c988 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800c880:	231b      	movs	r3, #27
 800c882:	2220      	movs	r2, #32
 800c884:	189b      	adds	r3, r3, r2
 800c886:	19db      	adds	r3, r3, r7
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	2b08      	cmp	r3, #8
 800c88c:	d015      	beq.n	800c8ba <UART_SetConfig+0x33a>
 800c88e:	dc2b      	bgt.n	800c8e8 <UART_SetConfig+0x368>
 800c890:	2b04      	cmp	r3, #4
 800c892:	d00d      	beq.n	800c8b0 <UART_SetConfig+0x330>
 800c894:	dc28      	bgt.n	800c8e8 <UART_SetConfig+0x368>
 800c896:	2b00      	cmp	r3, #0
 800c898:	d002      	beq.n	800c8a0 <UART_SetConfig+0x320>
 800c89a:	2b02      	cmp	r3, #2
 800c89c:	d005      	beq.n	800c8aa <UART_SetConfig+0x32a>
 800c89e:	e023      	b.n	800c8e8 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8a0:	f7fc fd3c 	bl	800931c <HAL_RCC_GetPCLK1Freq>
 800c8a4:	0003      	movs	r3, r0
 800c8a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8a8:	e027      	b.n	800c8fa <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c8aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c8e0 <UART_SetConfig+0x360>)
 800c8ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8ae:	e024      	b.n	800c8fa <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c8b0:	f7fc fca8 	bl	8009204 <HAL_RCC_GetSysClockFreq>
 800c8b4:	0003      	movs	r3, r0
 800c8b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8b8:	e01f      	b.n	800c8fa <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8ba:	2380      	movs	r3, #128	@ 0x80
 800c8bc:	021b      	lsls	r3, r3, #8
 800c8be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8c0:	e01b      	b.n	800c8fa <UART_SetConfig+0x37a>
 800c8c2:	46c0      	nop			@ (mov r8, r8)
 800c8c4:	cfff69f3 	.word	0xcfff69f3
 800c8c8:	ffffcfff 	.word	0xffffcfff
 800c8cc:	40008000 	.word	0x40008000
 800c8d0:	11fff4ff 	.word	0x11fff4ff
 800c8d4:	40013800 	.word	0x40013800
 800c8d8:	40021000 	.word	0x40021000
 800c8dc:	40004400 	.word	0x40004400
 800c8e0:	00f42400 	.word	0x00f42400
 800c8e4:	0800de3c 	.word	0x0800de3c
      default:
        pclk = 0U;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800c8ec:	231a      	movs	r3, #26
 800c8ee:	2220      	movs	r2, #32
 800c8f0:	189b      	adds	r3, r3, r2
 800c8f2:	19db      	adds	r3, r3, r7
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	701a      	strb	r2, [r3, #0]
        break;
 800c8f8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c8fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d100      	bne.n	800c902 <UART_SetConfig+0x382>
 800c900:	e09a      	b.n	800ca38 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c904:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c906:	4b58      	ldr	r3, [pc, #352]	@ (800ca68 <UART_SetConfig+0x4e8>)
 800c908:	0052      	lsls	r2, r2, #1
 800c90a:	5ad3      	ldrh	r3, [r2, r3]
 800c90c:	0019      	movs	r1, r3
 800c90e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c910:	f7f3 fbfa 	bl	8000108 <__udivsi3>
 800c914:	0003      	movs	r3, r0
 800c916:	005a      	lsls	r2, r3, #1
 800c918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	085b      	lsrs	r3, r3, #1
 800c91e:	18d2      	adds	r2, r2, r3
 800c920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	0019      	movs	r1, r3
 800c926:	0010      	movs	r0, r2
 800c928:	f7f3 fbee 	bl	8000108 <__udivsi3>
 800c92c:	0003      	movs	r3, r0
 800c92e:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c932:	2b0f      	cmp	r3, #15
 800c934:	d921      	bls.n	800c97a <UART_SetConfig+0x3fa>
 800c936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c938:	2380      	movs	r3, #128	@ 0x80
 800c93a:	025b      	lsls	r3, r3, #9
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d21c      	bcs.n	800c97a <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c942:	b29a      	uxth	r2, r3
 800c944:	200e      	movs	r0, #14
 800c946:	2420      	movs	r4, #32
 800c948:	1903      	adds	r3, r0, r4
 800c94a:	19db      	adds	r3, r3, r7
 800c94c:	210f      	movs	r1, #15
 800c94e:	438a      	bics	r2, r1
 800c950:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c954:	085b      	lsrs	r3, r3, #1
 800c956:	b29b      	uxth	r3, r3
 800c958:	2207      	movs	r2, #7
 800c95a:	4013      	ands	r3, r2
 800c95c:	b299      	uxth	r1, r3
 800c95e:	1903      	adds	r3, r0, r4
 800c960:	19db      	adds	r3, r3, r7
 800c962:	1902      	adds	r2, r0, r4
 800c964:	19d2      	adds	r2, r2, r7
 800c966:	8812      	ldrh	r2, [r2, #0]
 800c968:	430a      	orrs	r2, r1
 800c96a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800c96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	1902      	adds	r2, r0, r4
 800c972:	19d2      	adds	r2, r2, r7
 800c974:	8812      	ldrh	r2, [r2, #0]
 800c976:	60da      	str	r2, [r3, #12]
 800c978:	e05e      	b.n	800ca38 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800c97a:	231a      	movs	r3, #26
 800c97c:	2220      	movs	r2, #32
 800c97e:	189b      	adds	r3, r3, r2
 800c980:	19db      	adds	r3, r3, r7
 800c982:	2201      	movs	r2, #1
 800c984:	701a      	strb	r2, [r3, #0]
 800c986:	e057      	b.n	800ca38 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c988:	231b      	movs	r3, #27
 800c98a:	2220      	movs	r2, #32
 800c98c:	189b      	adds	r3, r3, r2
 800c98e:	19db      	adds	r3, r3, r7
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	2b08      	cmp	r3, #8
 800c994:	d015      	beq.n	800c9c2 <UART_SetConfig+0x442>
 800c996:	dc18      	bgt.n	800c9ca <UART_SetConfig+0x44a>
 800c998:	2b04      	cmp	r3, #4
 800c99a:	d00d      	beq.n	800c9b8 <UART_SetConfig+0x438>
 800c99c:	dc15      	bgt.n	800c9ca <UART_SetConfig+0x44a>
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d002      	beq.n	800c9a8 <UART_SetConfig+0x428>
 800c9a2:	2b02      	cmp	r3, #2
 800c9a4:	d005      	beq.n	800c9b2 <UART_SetConfig+0x432>
 800c9a6:	e010      	b.n	800c9ca <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9a8:	f7fc fcb8 	bl	800931c <HAL_RCC_GetPCLK1Freq>
 800c9ac:	0003      	movs	r3, r0
 800c9ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c9b0:	e014      	b.n	800c9dc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c9b2:	4b2e      	ldr	r3, [pc, #184]	@ (800ca6c <UART_SetConfig+0x4ec>)
 800c9b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c9b6:	e011      	b.n	800c9dc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c9b8:	f7fc fc24 	bl	8009204 <HAL_RCC_GetSysClockFreq>
 800c9bc:	0003      	movs	r3, r0
 800c9be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c9c0:	e00c      	b.n	800c9dc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9c2:	2380      	movs	r3, #128	@ 0x80
 800c9c4:	021b      	lsls	r3, r3, #8
 800c9c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c9c8:	e008      	b.n	800c9dc <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800c9ce:	231a      	movs	r3, #26
 800c9d0:	2220      	movs	r2, #32
 800c9d2:	189b      	adds	r3, r3, r2
 800c9d4:	19db      	adds	r3, r3, r7
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	701a      	strb	r2, [r3, #0]
        break;
 800c9da:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800c9dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d02a      	beq.n	800ca38 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c9e6:	4b20      	ldr	r3, [pc, #128]	@ (800ca68 <UART_SetConfig+0x4e8>)
 800c9e8:	0052      	lsls	r2, r2, #1
 800c9ea:	5ad3      	ldrh	r3, [r2, r3]
 800c9ec:	0019      	movs	r1, r3
 800c9ee:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c9f0:	f7f3 fb8a 	bl	8000108 <__udivsi3>
 800c9f4:	0003      	movs	r3, r0
 800c9f6:	001a      	movs	r2, r3
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	085b      	lsrs	r3, r3, #1
 800c9fe:	18d2      	adds	r2, r2, r3
 800ca00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	0019      	movs	r1, r3
 800ca06:	0010      	movs	r0, r2
 800ca08:	f7f3 fb7e 	bl	8000108 <__udivsi3>
 800ca0c:	0003      	movs	r3, r0
 800ca0e:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca12:	2b0f      	cmp	r3, #15
 800ca14:	d90a      	bls.n	800ca2c <UART_SetConfig+0x4ac>
 800ca16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca18:	2380      	movs	r3, #128	@ 0x80
 800ca1a:	025b      	lsls	r3, r3, #9
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d205      	bcs.n	800ca2c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ca20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca22:	b29a      	uxth	r2, r3
 800ca24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	60da      	str	r2, [r3, #12]
 800ca2a:	e005      	b.n	800ca38 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800ca2c:	231a      	movs	r3, #26
 800ca2e:	2220      	movs	r2, #32
 800ca30:	189b      	adds	r3, r3, r2
 800ca32:	19db      	adds	r3, r3, r7
 800ca34:	2201      	movs	r2, #1
 800ca36:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ca38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca3a:	226a      	movs	r2, #106	@ 0x6a
 800ca3c:	2101      	movs	r1, #1
 800ca3e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800ca40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca42:	2268      	movs	r2, #104	@ 0x68
 800ca44:	2101      	movs	r1, #1
 800ca46:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ca48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ca4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca50:	2200      	movs	r2, #0
 800ca52:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ca54:	231a      	movs	r3, #26
 800ca56:	2220      	movs	r2, #32
 800ca58:	189b      	adds	r3, r3, r2
 800ca5a:	19db      	adds	r3, r3, r7
 800ca5c:	781b      	ldrb	r3, [r3, #0]
}
 800ca5e:	0018      	movs	r0, r3
 800ca60:	46bd      	mov	sp, r7
 800ca62:	b010      	add	sp, #64	@ 0x40
 800ca64:	bdb0      	pop	{r4, r5, r7, pc}
 800ca66:	46c0      	nop			@ (mov r8, r8)
 800ca68:	0800de3c 	.word	0x0800de3c
 800ca6c:	00f42400 	.word	0x00f42400

0800ca70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b082      	sub	sp, #8
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca7c:	2208      	movs	r2, #8
 800ca7e:	4013      	ands	r3, r2
 800ca80:	d00b      	beq.n	800ca9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	4a4a      	ldr	r2, [pc, #296]	@ (800cbb4 <UART_AdvFeatureConfig+0x144>)
 800ca8a:	4013      	ands	r3, r2
 800ca8c:	0019      	movs	r1, r3
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	430a      	orrs	r2, r1
 800ca98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca9e:	2201      	movs	r2, #1
 800caa0:	4013      	ands	r3, r2
 800caa2:	d00b      	beq.n	800cabc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	4a43      	ldr	r2, [pc, #268]	@ (800cbb8 <UART_AdvFeatureConfig+0x148>)
 800caac:	4013      	ands	r3, r2
 800caae:	0019      	movs	r1, r3
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	430a      	orrs	r2, r1
 800caba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cac0:	2202      	movs	r2, #2
 800cac2:	4013      	ands	r3, r2
 800cac4:	d00b      	beq.n	800cade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	4a3b      	ldr	r2, [pc, #236]	@ (800cbbc <UART_AdvFeatureConfig+0x14c>)
 800cace:	4013      	ands	r3, r2
 800cad0:	0019      	movs	r1, r3
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	430a      	orrs	r2, r1
 800cadc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cae2:	2204      	movs	r2, #4
 800cae4:	4013      	ands	r3, r2
 800cae6:	d00b      	beq.n	800cb00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	4a34      	ldr	r2, [pc, #208]	@ (800cbc0 <UART_AdvFeatureConfig+0x150>)
 800caf0:	4013      	ands	r3, r2
 800caf2:	0019      	movs	r1, r3
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	430a      	orrs	r2, r1
 800cafe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb04:	2210      	movs	r2, #16
 800cb06:	4013      	ands	r3, r2
 800cb08:	d00b      	beq.n	800cb22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	689b      	ldr	r3, [r3, #8]
 800cb10:	4a2c      	ldr	r2, [pc, #176]	@ (800cbc4 <UART_AdvFeatureConfig+0x154>)
 800cb12:	4013      	ands	r3, r2
 800cb14:	0019      	movs	r1, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	430a      	orrs	r2, r1
 800cb20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb26:	2220      	movs	r2, #32
 800cb28:	4013      	ands	r3, r2
 800cb2a:	d00b      	beq.n	800cb44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	689b      	ldr	r3, [r3, #8]
 800cb32:	4a25      	ldr	r2, [pc, #148]	@ (800cbc8 <UART_AdvFeatureConfig+0x158>)
 800cb34:	4013      	ands	r3, r2
 800cb36:	0019      	movs	r1, r3
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	430a      	orrs	r2, r1
 800cb42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb48:	2240      	movs	r2, #64	@ 0x40
 800cb4a:	4013      	ands	r3, r2
 800cb4c:	d01d      	beq.n	800cb8a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	685b      	ldr	r3, [r3, #4]
 800cb54:	4a1d      	ldr	r2, [pc, #116]	@ (800cbcc <UART_AdvFeatureConfig+0x15c>)
 800cb56:	4013      	ands	r3, r2
 800cb58:	0019      	movs	r1, r3
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	430a      	orrs	r2, r1
 800cb64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb6a:	2380      	movs	r3, #128	@ 0x80
 800cb6c:	035b      	lsls	r3, r3, #13
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d10b      	bne.n	800cb8a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	4a15      	ldr	r2, [pc, #84]	@ (800cbd0 <UART_AdvFeatureConfig+0x160>)
 800cb7a:	4013      	ands	r3, r2
 800cb7c:	0019      	movs	r1, r3
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	430a      	orrs	r2, r1
 800cb88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb8e:	2280      	movs	r2, #128	@ 0x80
 800cb90:	4013      	ands	r3, r2
 800cb92:	d00b      	beq.n	800cbac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	4a0e      	ldr	r2, [pc, #56]	@ (800cbd4 <UART_AdvFeatureConfig+0x164>)
 800cb9c:	4013      	ands	r3, r2
 800cb9e:	0019      	movs	r1, r3
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	430a      	orrs	r2, r1
 800cbaa:	605a      	str	r2, [r3, #4]
  }
}
 800cbac:	46c0      	nop			@ (mov r8, r8)
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	b002      	add	sp, #8
 800cbb2:	bd80      	pop	{r7, pc}
 800cbb4:	ffff7fff 	.word	0xffff7fff
 800cbb8:	fffdffff 	.word	0xfffdffff
 800cbbc:	fffeffff 	.word	0xfffeffff
 800cbc0:	fffbffff 	.word	0xfffbffff
 800cbc4:	ffffefff 	.word	0xffffefff
 800cbc8:	ffffdfff 	.word	0xffffdfff
 800cbcc:	ffefffff 	.word	0xffefffff
 800cbd0:	ff9fffff 	.word	0xff9fffff
 800cbd4:	fff7ffff 	.word	0xfff7ffff

0800cbd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b092      	sub	sp, #72	@ 0x48
 800cbdc:	af02      	add	r7, sp, #8
 800cbde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2290      	movs	r2, #144	@ 0x90
 800cbe4:	2100      	movs	r1, #0
 800cbe6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cbe8:	f7f9 f8c0 	bl	8005d6c <HAL_GetTick>
 800cbec:	0003      	movs	r3, r0
 800cbee:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	2208      	movs	r2, #8
 800cbf8:	4013      	ands	r3, r2
 800cbfa:	2b08      	cmp	r3, #8
 800cbfc:	d12d      	bne.n	800cc5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cbfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc00:	2280      	movs	r2, #128	@ 0x80
 800cc02:	0391      	lsls	r1, r2, #14
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	4a47      	ldr	r2, [pc, #284]	@ (800cd24 <UART_CheckIdleState+0x14c>)
 800cc08:	9200      	str	r2, [sp, #0]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	f000 f88e 	bl	800cd2c <UART_WaitOnFlagUntilTimeout>
 800cc10:	1e03      	subs	r3, r0, #0
 800cc12:	d022      	beq.n	800cc5a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc14:	f3ef 8310 	mrs	r3, PRIMASK
 800cc18:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800cc1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cc1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cc1e:	2301      	movs	r3, #1
 800cc20:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc24:	f383 8810 	msr	PRIMASK, r3
}
 800cc28:	46c0      	nop			@ (mov r8, r8)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2180      	movs	r1, #128	@ 0x80
 800cc36:	438a      	bics	r2, r1
 800cc38:	601a      	str	r2, [r3, #0]
 800cc3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc40:	f383 8810 	msr	PRIMASK, r3
}
 800cc44:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2288      	movs	r2, #136	@ 0x88
 800cc4a:	2120      	movs	r1, #32
 800cc4c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2284      	movs	r2, #132	@ 0x84
 800cc52:	2100      	movs	r1, #0
 800cc54:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc56:	2303      	movs	r3, #3
 800cc58:	e060      	b.n	800cd1c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2204      	movs	r2, #4
 800cc62:	4013      	ands	r3, r2
 800cc64:	2b04      	cmp	r3, #4
 800cc66:	d146      	bne.n	800ccf6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc6a:	2280      	movs	r2, #128	@ 0x80
 800cc6c:	03d1      	lsls	r1, r2, #15
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	4a2c      	ldr	r2, [pc, #176]	@ (800cd24 <UART_CheckIdleState+0x14c>)
 800cc72:	9200      	str	r2, [sp, #0]
 800cc74:	2200      	movs	r2, #0
 800cc76:	f000 f859 	bl	800cd2c <UART_WaitOnFlagUntilTimeout>
 800cc7a:	1e03      	subs	r3, r0, #0
 800cc7c:	d03b      	beq.n	800ccf6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc7e:	f3ef 8310 	mrs	r3, PRIMASK
 800cc82:	60fb      	str	r3, [r7, #12]
  return(result);
 800cc84:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc86:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc88:	2301      	movs	r3, #1
 800cc8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	f383 8810 	msr	PRIMASK, r3
}
 800cc92:	46c0      	nop			@ (mov r8, r8)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4922      	ldr	r1, [pc, #136]	@ (800cd28 <UART_CheckIdleState+0x150>)
 800cca0:	400a      	ands	r2, r1
 800cca2:	601a      	str	r2, [r3, #0]
 800cca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cca6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	f383 8810 	msr	PRIMASK, r3
}
 800ccae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccb0:	f3ef 8310 	mrs	r3, PRIMASK
 800ccb4:	61bb      	str	r3, [r7, #24]
  return(result);
 800ccb6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccb8:	633b      	str	r3, [r7, #48]	@ 0x30
 800ccba:	2301      	movs	r3, #1
 800ccbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	f383 8810 	msr	PRIMASK, r3
}
 800ccc4:	46c0      	nop			@ (mov r8, r8)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	689a      	ldr	r2, [r3, #8]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	2101      	movs	r1, #1
 800ccd2:	438a      	bics	r2, r1
 800ccd4:	609a      	str	r2, [r3, #8]
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccda:	6a3b      	ldr	r3, [r7, #32]
 800ccdc:	f383 8810 	msr	PRIMASK, r3
}
 800cce0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	228c      	movs	r2, #140	@ 0x8c
 800cce6:	2120      	movs	r1, #32
 800cce8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2284      	movs	r2, #132	@ 0x84
 800ccee:	2100      	movs	r1, #0
 800ccf0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ccf2:	2303      	movs	r3, #3
 800ccf4:	e012      	b.n	800cd1c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2288      	movs	r2, #136	@ 0x88
 800ccfa:	2120      	movs	r1, #32
 800ccfc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	228c      	movs	r2, #140	@ 0x8c
 800cd02:	2120      	movs	r1, #32
 800cd04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2284      	movs	r2, #132	@ 0x84
 800cd16:	2100      	movs	r1, #0
 800cd18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cd1a:	2300      	movs	r3, #0
}
 800cd1c:	0018      	movs	r0, r3
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	b010      	add	sp, #64	@ 0x40
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	01ffffff 	.word	0x01ffffff
 800cd28:	fffffedf 	.word	0xfffffedf

0800cd2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	603b      	str	r3, [r7, #0]
 800cd38:	1dfb      	adds	r3, r7, #7
 800cd3a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd3c:	e051      	b.n	800cde2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd3e:	69bb      	ldr	r3, [r7, #24]
 800cd40:	3301      	adds	r3, #1
 800cd42:	d04e      	beq.n	800cde2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd44:	f7f9 f812 	bl	8005d6c <HAL_GetTick>
 800cd48:	0002      	movs	r2, r0
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	1ad3      	subs	r3, r2, r3
 800cd4e:	69ba      	ldr	r2, [r7, #24]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d302      	bcc.n	800cd5a <UART_WaitOnFlagUntilTimeout+0x2e>
 800cd54:	69bb      	ldr	r3, [r7, #24]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d101      	bne.n	800cd5e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800cd5a:	2303      	movs	r3, #3
 800cd5c:	e051      	b.n	800ce02 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	2204      	movs	r2, #4
 800cd66:	4013      	ands	r3, r2
 800cd68:	d03b      	beq.n	800cde2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	2b80      	cmp	r3, #128	@ 0x80
 800cd6e:	d038      	beq.n	800cde2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	2b40      	cmp	r3, #64	@ 0x40
 800cd74:	d035      	beq.n	800cde2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	69db      	ldr	r3, [r3, #28]
 800cd7c:	2208      	movs	r2, #8
 800cd7e:	4013      	ands	r3, r2
 800cd80:	2b08      	cmp	r3, #8
 800cd82:	d111      	bne.n	800cda8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	2208      	movs	r2, #8
 800cd8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	0018      	movs	r0, r3
 800cd90:	f000 f922 	bl	800cfd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	2290      	movs	r2, #144	@ 0x90
 800cd98:	2108      	movs	r1, #8
 800cd9a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2284      	movs	r2, #132	@ 0x84
 800cda0:	2100      	movs	r1, #0
 800cda2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800cda4:	2301      	movs	r3, #1
 800cda6:	e02c      	b.n	800ce02 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	69da      	ldr	r2, [r3, #28]
 800cdae:	2380      	movs	r3, #128	@ 0x80
 800cdb0:	011b      	lsls	r3, r3, #4
 800cdb2:	401a      	ands	r2, r3
 800cdb4:	2380      	movs	r3, #128	@ 0x80
 800cdb6:	011b      	lsls	r3, r3, #4
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d112      	bne.n	800cde2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	2280      	movs	r2, #128	@ 0x80
 800cdc2:	0112      	lsls	r2, r2, #4
 800cdc4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	0018      	movs	r0, r3
 800cdca:	f000 f905 	bl	800cfd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2290      	movs	r2, #144	@ 0x90
 800cdd2:	2120      	movs	r1, #32
 800cdd4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	2284      	movs	r2, #132	@ 0x84
 800cdda:	2100      	movs	r1, #0
 800cddc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800cdde:	2303      	movs	r3, #3
 800cde0:	e00f      	b.n	800ce02 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	69db      	ldr	r3, [r3, #28]
 800cde8:	68ba      	ldr	r2, [r7, #8]
 800cdea:	4013      	ands	r3, r2
 800cdec:	68ba      	ldr	r2, [r7, #8]
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	425a      	negs	r2, r3
 800cdf2:	4153      	adcs	r3, r2
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	001a      	movs	r2, r3
 800cdf8:	1dfb      	adds	r3, r7, #7
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d09e      	beq.n	800cd3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ce00:	2300      	movs	r3, #0
}
 800ce02:	0018      	movs	r0, r3
 800ce04:	46bd      	mov	sp, r7
 800ce06:	b004      	add	sp, #16
 800ce08:	bd80      	pop	{r7, pc}
	...

0800ce0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b090      	sub	sp, #64	@ 0x40
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	1dbb      	adds	r3, r7, #6
 800ce18:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	68ba      	ldr	r2, [r7, #8]
 800ce1e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	1dba      	adds	r2, r7, #6
 800ce24:	215c      	movs	r1, #92	@ 0x5c
 800ce26:	8812      	ldrh	r2, [r2, #0]
 800ce28:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	2290      	movs	r2, #144	@ 0x90
 800ce2e:	2100      	movs	r1, #0
 800ce30:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	228c      	movs	r2, #140	@ 0x8c
 800ce36:	2122      	movs	r1, #34	@ 0x22
 800ce38:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2280      	movs	r2, #128	@ 0x80
 800ce3e:	589b      	ldr	r3, [r3, r2]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d02d      	beq.n	800cea0 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2280      	movs	r2, #128	@ 0x80
 800ce48:	589b      	ldr	r3, [r3, r2]
 800ce4a:	4a40      	ldr	r2, [pc, #256]	@ (800cf4c <UART_Start_Receive_DMA+0x140>)
 800ce4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	2280      	movs	r2, #128	@ 0x80
 800ce52:	589b      	ldr	r3, [r3, r2]
 800ce54:	4a3e      	ldr	r2, [pc, #248]	@ (800cf50 <UART_Start_Receive_DMA+0x144>)
 800ce56:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2280      	movs	r2, #128	@ 0x80
 800ce5c:	589b      	ldr	r3, [r3, r2]
 800ce5e:	4a3d      	ldr	r2, [pc, #244]	@ (800cf54 <UART_Start_Receive_DMA+0x148>)
 800ce60:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2280      	movs	r2, #128	@ 0x80
 800ce66:	589b      	ldr	r3, [r3, r2]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2280      	movs	r2, #128	@ 0x80
 800ce70:	5898      	ldr	r0, [r3, r2]
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	3324      	adds	r3, #36	@ 0x24
 800ce78:	0019      	movs	r1, r3
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce7e:	001a      	movs	r2, r3
 800ce80:	1dbb      	adds	r3, r7, #6
 800ce82:	881b      	ldrh	r3, [r3, #0]
 800ce84:	f7fa fb40 	bl	8007508 <HAL_DMA_Start_IT>
 800ce88:	1e03      	subs	r3, r0, #0
 800ce8a:	d009      	beq.n	800cea0 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	2290      	movs	r2, #144	@ 0x90
 800ce90:	2110      	movs	r1, #16
 800ce92:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	228c      	movs	r2, #140	@ 0x8c
 800ce98:	2120      	movs	r1, #32
 800ce9a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	e050      	b.n	800cf42 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	691b      	ldr	r3, [r3, #16]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d019      	beq.n	800cedc <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cea8:	f3ef 8310 	mrs	r3, PRIMASK
 800ceac:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800ceae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ceb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ceb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceb8:	f383 8810 	msr	PRIMASK, r3
}
 800cebc:	46c0      	nop			@ (mov r8, r8)
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	2180      	movs	r1, #128	@ 0x80
 800ceca:	0049      	lsls	r1, r1, #1
 800cecc:	430a      	orrs	r2, r1
 800cece:	601a      	str	r2, [r3, #0]
 800ced0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ced2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ced4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced6:	f383 8810 	msr	PRIMASK, r3
}
 800ceda:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cedc:	f3ef 8310 	mrs	r3, PRIMASK
 800cee0:	613b      	str	r3, [r7, #16]
  return(result);
 800cee2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cee4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cee6:	2301      	movs	r3, #1
 800cee8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	f383 8810 	msr	PRIMASK, r3
}
 800cef0:	46c0      	nop			@ (mov r8, r8)
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	689a      	ldr	r2, [r3, #8]
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	2101      	movs	r1, #1
 800cefe:	430a      	orrs	r2, r1
 800cf00:	609a      	str	r2, [r3, #8]
 800cf02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf06:	69bb      	ldr	r3, [r7, #24]
 800cf08:	f383 8810 	msr	PRIMASK, r3
}
 800cf0c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf0e:	f3ef 8310 	mrs	r3, PRIMASK
 800cf12:	61fb      	str	r3, [r7, #28]
  return(result);
 800cf14:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf16:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf18:	2301      	movs	r3, #1
 800cf1a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf1c:	6a3b      	ldr	r3, [r7, #32]
 800cf1e:	f383 8810 	msr	PRIMASK, r3
}
 800cf22:	46c0      	nop			@ (mov r8, r8)
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	689a      	ldr	r2, [r3, #8]
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	2140      	movs	r1, #64	@ 0x40
 800cf30:	430a      	orrs	r2, r1
 800cf32:	609a      	str	r2, [r3, #8]
 800cf34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf36:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf3a:	f383 8810 	msr	PRIMASK, r3
}
 800cf3e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800cf40:	2300      	movs	r3, #0
}
 800cf42:	0018      	movs	r0, r3
 800cf44:	46bd      	mov	sp, r7
 800cf46:	b010      	add	sp, #64	@ 0x40
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	46c0      	nop			@ (mov r8, r8)
 800cf4c:	0800d0a5 	.word	0x0800d0a5
 800cf50:	0800d1d9 	.word	0x0800d1d9
 800cf54:	0800d221 	.word	0x0800d221

0800cf58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b08a      	sub	sp, #40	@ 0x28
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf60:	f3ef 8310 	mrs	r3, PRIMASK
 800cf64:	60bb      	str	r3, [r7, #8]
  return(result);
 800cf66:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cf68:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f383 8810 	msr	PRIMASK, r3
}
 800cf74:	46c0      	nop			@ (mov r8, r8)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	21c0      	movs	r1, #192	@ 0xc0
 800cf82:	438a      	bics	r2, r1
 800cf84:	601a      	str	r2, [r3, #0]
 800cf86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	f383 8810 	msr	PRIMASK, r3
}
 800cf90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf92:	f3ef 8310 	mrs	r3, PRIMASK
 800cf96:	617b      	str	r3, [r7, #20]
  return(result);
 800cf98:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cf9a:	623b      	str	r3, [r7, #32]
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfa0:	69bb      	ldr	r3, [r7, #24]
 800cfa2:	f383 8810 	msr	PRIMASK, r3
}
 800cfa6:	46c0      	nop			@ (mov r8, r8)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	689a      	ldr	r2, [r3, #8]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	4908      	ldr	r1, [pc, #32]	@ (800cfd4 <UART_EndTxTransfer+0x7c>)
 800cfb4:	400a      	ands	r2, r1
 800cfb6:	609a      	str	r2, [r3, #8]
 800cfb8:	6a3b      	ldr	r3, [r7, #32]
 800cfba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfbc:	69fb      	ldr	r3, [r7, #28]
 800cfbe:	f383 8810 	msr	PRIMASK, r3
}
 800cfc2:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2288      	movs	r2, #136	@ 0x88
 800cfc8:	2120      	movs	r1, #32
 800cfca:	5099      	str	r1, [r3, r2]
}
 800cfcc:	46c0      	nop			@ (mov r8, r8)
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	b00a      	add	sp, #40	@ 0x28
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	ff7fffff 	.word	0xff7fffff

0800cfd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b08e      	sub	sp, #56	@ 0x38
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfe0:	f3ef 8310 	mrs	r3, PRIMASK
 800cfe4:	617b      	str	r3, [r7, #20]
  return(result);
 800cfe6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cfe8:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfea:	2301      	movs	r3, #1
 800cfec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfee:	69bb      	ldr	r3, [r7, #24]
 800cff0:	f383 8810 	msr	PRIMASK, r3
}
 800cff4:	46c0      	nop			@ (mov r8, r8)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4926      	ldr	r1, [pc, #152]	@ (800d09c <UART_EndRxTransfer+0xc4>)
 800d002:	400a      	ands	r2, r1
 800d004:	601a      	str	r2, [r3, #0]
 800d006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d008:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d00a:	69fb      	ldr	r3, [r7, #28]
 800d00c:	f383 8810 	msr	PRIMASK, r3
}
 800d010:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d012:	f3ef 8310 	mrs	r3, PRIMASK
 800d016:	623b      	str	r3, [r7, #32]
  return(result);
 800d018:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d01a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d01c:	2301      	movs	r3, #1
 800d01e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d022:	f383 8810 	msr	PRIMASK, r3
}
 800d026:	46c0      	nop			@ (mov r8, r8)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	689a      	ldr	r2, [r3, #8]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	491b      	ldr	r1, [pc, #108]	@ (800d0a0 <UART_EndRxTransfer+0xc8>)
 800d034:	400a      	ands	r2, r1
 800d036:	609a      	str	r2, [r3, #8]
 800d038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d03a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d03c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d03e:	f383 8810 	msr	PRIMASK, r3
}
 800d042:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d118      	bne.n	800d07e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d04c:	f3ef 8310 	mrs	r3, PRIMASK
 800d050:	60bb      	str	r3, [r7, #8]
  return(result);
 800d052:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d054:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d056:	2301      	movs	r3, #1
 800d058:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f383 8810 	msr	PRIMASK, r3
}
 800d060:	46c0      	nop			@ (mov r8, r8)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	2110      	movs	r1, #16
 800d06e:	438a      	bics	r2, r1
 800d070:	601a      	str	r2, [r3, #0]
 800d072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d074:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	f383 8810 	msr	PRIMASK, r3
}
 800d07c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	228c      	movs	r2, #140	@ 0x8c
 800d082:	2120      	movs	r1, #32
 800d084:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2200      	movs	r2, #0
 800d08a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2200      	movs	r2, #0
 800d090:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d092:	46c0      	nop			@ (mov r8, r8)
 800d094:	46bd      	mov	sp, r7
 800d096:	b00e      	add	sp, #56	@ 0x38
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	46c0      	nop			@ (mov r8, r8)
 800d09c:	fffffedf 	.word	0xfffffedf
 800d0a0:	effffffe 	.word	0xeffffffe

0800d0a4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b094      	sub	sp, #80	@ 0x50
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0b0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2220      	movs	r2, #32
 800d0ba:	4013      	ands	r3, r2
 800d0bc:	d16f      	bne.n	800d19e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800d0be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0c0:	225e      	movs	r2, #94	@ 0x5e
 800d0c2:	2100      	movs	r1, #0
 800d0c4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0c6:	f3ef 8310 	mrs	r3, PRIMASK
 800d0ca:	61bb      	str	r3, [r7, #24]
  return(result);
 800d0cc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0d4:	69fb      	ldr	r3, [r7, #28]
 800d0d6:	f383 8810 	msr	PRIMASK, r3
}
 800d0da:	46c0      	nop			@ (mov r8, r8)
 800d0dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	493b      	ldr	r1, [pc, #236]	@ (800d1d4 <UART_DMAReceiveCplt+0x130>)
 800d0e8:	400a      	ands	r2, r1
 800d0ea:	601a      	str	r2, [r3, #0]
 800d0ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d0ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0f0:	6a3b      	ldr	r3, [r7, #32]
 800d0f2:	f383 8810 	msr	PRIMASK, r3
}
 800d0f6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0f8:	f3ef 8310 	mrs	r3, PRIMASK
 800d0fc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d100:	647b      	str	r3, [r7, #68]	@ 0x44
 800d102:	2301      	movs	r3, #1
 800d104:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d108:	f383 8810 	msr	PRIMASK, r3
}
 800d10c:	46c0      	nop			@ (mov r8, r8)
 800d10e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	689a      	ldr	r2, [r3, #8]
 800d114:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	2101      	movs	r1, #1
 800d11a:	438a      	bics	r2, r1
 800d11c:	609a      	str	r2, [r3, #8]
 800d11e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d120:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d124:	f383 8810 	msr	PRIMASK, r3
}
 800d128:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d12a:	f3ef 8310 	mrs	r3, PRIMASK
 800d12e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800d130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d132:	643b      	str	r3, [r7, #64]	@ 0x40
 800d134:	2301      	movs	r3, #1
 800d136:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d13a:	f383 8810 	msr	PRIMASK, r3
}
 800d13e:	46c0      	nop			@ (mov r8, r8)
 800d140:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	689a      	ldr	r2, [r3, #8]
 800d146:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2140      	movs	r1, #64	@ 0x40
 800d14c:	438a      	bics	r2, r1
 800d14e:	609a      	str	r2, [r3, #8]
 800d150:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d152:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d156:	f383 8810 	msr	PRIMASK, r3
}
 800d15a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d15c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d15e:	228c      	movs	r2, #140	@ 0x8c
 800d160:	2120      	movs	r1, #32
 800d162:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d118      	bne.n	800d19e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d16c:	f3ef 8310 	mrs	r3, PRIMASK
 800d170:	60fb      	str	r3, [r7, #12]
  return(result);
 800d172:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d174:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d176:	2301      	movs	r3, #1
 800d178:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	f383 8810 	msr	PRIMASK, r3
}
 800d180:	46c0      	nop			@ (mov r8, r8)
 800d182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	2110      	movs	r1, #16
 800d18e:	438a      	bics	r2, r1
 800d190:	601a      	str	r2, [r3, #0]
 800d192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d194:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	f383 8810 	msr	PRIMASK, r3
}
 800d19c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d19e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1a8:	2b01      	cmp	r3, #1
 800d1aa:	d109      	bne.n	800d1c0 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800d1ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1ae:	22c0      	movs	r2, #192	@ 0xc0
 800d1b0:	589b      	ldr	r3, [r3, r2]
 800d1b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d1b4:	215c      	movs	r1, #92	@ 0x5c
 800d1b6:	5a51      	ldrh	r1, [r2, r1]
 800d1b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d1ba:	0010      	movs	r0, r2
 800d1bc:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d1be:	e005      	b.n	800d1cc <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800d1c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1c2:	22a0      	movs	r2, #160	@ 0xa0
 800d1c4:	589b      	ldr	r3, [r3, r2]
 800d1c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d1c8:	0010      	movs	r0, r2
 800d1ca:	4798      	blx	r3
}
 800d1cc:	46c0      	nop			@ (mov r8, r8)
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	b014      	add	sp, #80	@ 0x50
 800d1d2:	bd80      	pop	{r7, pc}
 800d1d4:	fffffeff 	.word	0xfffffeff

0800d1d8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1e4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d10b      	bne.n	800d20c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	22c0      	movs	r2, #192	@ 0xc0
 800d1f8:	589b      	ldr	r3, [r3, r2]
 800d1fa:	68fa      	ldr	r2, [r7, #12]
 800d1fc:	215c      	movs	r1, #92	@ 0x5c
 800d1fe:	5a52      	ldrh	r2, [r2, r1]
 800d200:	0852      	lsrs	r2, r2, #1
 800d202:	b291      	uxth	r1, r2
 800d204:	68fa      	ldr	r2, [r7, #12]
 800d206:	0010      	movs	r0, r2
 800d208:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d20a:	e005      	b.n	800d218 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	229c      	movs	r2, #156	@ 0x9c
 800d210:	589b      	ldr	r3, [r3, r2]
 800d212:	68fa      	ldr	r2, [r7, #12]
 800d214:	0010      	movs	r0, r2
 800d216:	4798      	blx	r3
}
 800d218:	46c0      	nop			@ (mov r8, r8)
 800d21a:	46bd      	mov	sp, r7
 800d21c:	b004      	add	sp, #16
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b086      	sub	sp, #24
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d22c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	2288      	movs	r2, #136	@ 0x88
 800d232:	589b      	ldr	r3, [r3, r2]
 800d234:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	228c      	movs	r2, #140	@ 0x8c
 800d23a:	589b      	ldr	r3, [r3, r2]
 800d23c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	689b      	ldr	r3, [r3, #8]
 800d244:	2280      	movs	r2, #128	@ 0x80
 800d246:	4013      	ands	r3, r2
 800d248:	2b80      	cmp	r3, #128	@ 0x80
 800d24a:	d10a      	bne.n	800d262 <UART_DMAError+0x42>
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	2b21      	cmp	r3, #33	@ 0x21
 800d250:	d107      	bne.n	800d262 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	2256      	movs	r2, #86	@ 0x56
 800d256:	2100      	movs	r1, #0
 800d258:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	0018      	movs	r0, r3
 800d25e:	f7ff fe7b 	bl	800cf58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	689b      	ldr	r3, [r3, #8]
 800d268:	2240      	movs	r2, #64	@ 0x40
 800d26a:	4013      	ands	r3, r2
 800d26c:	2b40      	cmp	r3, #64	@ 0x40
 800d26e:	d10a      	bne.n	800d286 <UART_DMAError+0x66>
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2b22      	cmp	r3, #34	@ 0x22
 800d274:	d107      	bne.n	800d286 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	225e      	movs	r2, #94	@ 0x5e
 800d27a:	2100      	movs	r1, #0
 800d27c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	0018      	movs	r0, r3
 800d282:	f7ff fea9 	bl	800cfd8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	2290      	movs	r2, #144	@ 0x90
 800d28a:	589b      	ldr	r3, [r3, r2]
 800d28c:	2210      	movs	r2, #16
 800d28e:	431a      	orrs	r2, r3
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	2190      	movs	r1, #144	@ 0x90
 800d294:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	22a4      	movs	r2, #164	@ 0xa4
 800d29a:	589b      	ldr	r3, [r3, r2]
 800d29c:	697a      	ldr	r2, [r7, #20]
 800d29e:	0010      	movs	r0, r2
 800d2a0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d2a2:	46c0      	nop			@ (mov r8, r8)
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	b006      	add	sp, #24
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b084      	sub	sp, #16
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	225e      	movs	r2, #94	@ 0x5e
 800d2bc:	2100      	movs	r1, #0
 800d2be:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2256      	movs	r2, #86	@ 0x56
 800d2c4:	2100      	movs	r1, #0
 800d2c6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	22a4      	movs	r2, #164	@ 0xa4
 800d2cc:	589b      	ldr	r3, [r3, r2]
 800d2ce:	68fa      	ldr	r2, [r7, #12]
 800d2d0:	0010      	movs	r0, r2
 800d2d2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d2d4:	46c0      	nop			@ (mov r8, r8)
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	b004      	add	sp, #16
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b086      	sub	sp, #24
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2e4:	f3ef 8310 	mrs	r3, PRIMASK
 800d2e8:	60bb      	str	r3, [r7, #8]
  return(result);
 800d2ea:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d2ec:	617b      	str	r3, [r7, #20]
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f383 8810 	msr	PRIMASK, r3
}
 800d2f8:	46c0      	nop			@ (mov r8, r8)
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	2140      	movs	r1, #64	@ 0x40
 800d306:	438a      	bics	r2, r1
 800d308:	601a      	str	r2, [r3, #0]
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	f383 8810 	msr	PRIMASK, r3
}
 800d314:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2288      	movs	r2, #136	@ 0x88
 800d31a:	2120      	movs	r1, #32
 800d31c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2200      	movs	r2, #0
 800d322:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2298      	movs	r2, #152	@ 0x98
 800d328:	589b      	ldr	r3, [r3, r2]
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	0010      	movs	r0, r2
 800d32e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d330:	46c0      	nop			@ (mov r8, r8)
 800d332:	46bd      	mov	sp, r7
 800d334:	b006      	add	sp, #24
 800d336:	bd80      	pop	{r7, pc}

0800d338 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d340:	46c0      	nop			@ (mov r8, r8)
 800d342:	46bd      	mov	sp, r7
 800d344:	b002      	add	sp, #8
 800d346:	bd80      	pop	{r7, pc}

0800d348 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b082      	sub	sp, #8
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d350:	46c0      	nop			@ (mov r8, r8)
 800d352:	46bd      	mov	sp, r7
 800d354:	b002      	add	sp, #8
 800d356:	bd80      	pop	{r7, pc}

0800d358 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d360:	46c0      	nop			@ (mov r8, r8)
 800d362:	46bd      	mov	sp, r7
 800d364:	b002      	add	sp, #8
 800d366:	bd80      	pop	{r7, pc}

0800d368 <memset>:
 800d368:	0003      	movs	r3, r0
 800d36a:	1882      	adds	r2, r0, r2
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d100      	bne.n	800d372 <memset+0xa>
 800d370:	4770      	bx	lr
 800d372:	7019      	strb	r1, [r3, #0]
 800d374:	3301      	adds	r3, #1
 800d376:	e7f9      	b.n	800d36c <memset+0x4>

0800d378 <__libc_init_array>:
 800d378:	b570      	push	{r4, r5, r6, lr}
 800d37a:	2600      	movs	r6, #0
 800d37c:	4c0c      	ldr	r4, [pc, #48]	@ (800d3b0 <__libc_init_array+0x38>)
 800d37e:	4d0d      	ldr	r5, [pc, #52]	@ (800d3b4 <__libc_init_array+0x3c>)
 800d380:	1b64      	subs	r4, r4, r5
 800d382:	10a4      	asrs	r4, r4, #2
 800d384:	42a6      	cmp	r6, r4
 800d386:	d109      	bne.n	800d39c <__libc_init_array+0x24>
 800d388:	2600      	movs	r6, #0
 800d38a:	f000 f823 	bl	800d3d4 <_init>
 800d38e:	4c0a      	ldr	r4, [pc, #40]	@ (800d3b8 <__libc_init_array+0x40>)
 800d390:	4d0a      	ldr	r5, [pc, #40]	@ (800d3bc <__libc_init_array+0x44>)
 800d392:	1b64      	subs	r4, r4, r5
 800d394:	10a4      	asrs	r4, r4, #2
 800d396:	42a6      	cmp	r6, r4
 800d398:	d105      	bne.n	800d3a6 <__libc_init_array+0x2e>
 800d39a:	bd70      	pop	{r4, r5, r6, pc}
 800d39c:	00b3      	lsls	r3, r6, #2
 800d39e:	58eb      	ldr	r3, [r5, r3]
 800d3a0:	4798      	blx	r3
 800d3a2:	3601      	adds	r6, #1
 800d3a4:	e7ee      	b.n	800d384 <__libc_init_array+0xc>
 800d3a6:	00b3      	lsls	r3, r6, #2
 800d3a8:	58eb      	ldr	r3, [r5, r3]
 800d3aa:	4798      	blx	r3
 800d3ac:	3601      	adds	r6, #1
 800d3ae:	e7f2      	b.n	800d396 <__libc_init_array+0x1e>
 800d3b0:	0800de90 	.word	0x0800de90
 800d3b4:	0800de90 	.word	0x0800de90
 800d3b8:	0800de94 	.word	0x0800de94
 800d3bc:	0800de90 	.word	0x0800de90

0800d3c0 <memcpy>:
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	b510      	push	{r4, lr}
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d100      	bne.n	800d3ca <memcpy+0xa>
 800d3c8:	bd10      	pop	{r4, pc}
 800d3ca:	5ccc      	ldrb	r4, [r1, r3]
 800d3cc:	54c4      	strb	r4, [r0, r3]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	e7f8      	b.n	800d3c4 <memcpy+0x4>
	...

0800d3d4 <_init>:
 800d3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3d6:	46c0      	nop			@ (mov r8, r8)
 800d3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3da:	bc08      	pop	{r3}
 800d3dc:	469e      	mov	lr, r3
 800d3de:	4770      	bx	lr

0800d3e0 <_fini>:
 800d3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e2:	46c0      	nop			@ (mov r8, r8)
 800d3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3e6:	bc08      	pop	{r3}
 800d3e8:	469e      	mov	lr, r3
 800d3ea:	4770      	bx	lr
 800d3ec:	0000      	movs	r0, r0
	...

0800d3f0 <__FLASH_Program_Fast_veneer>:
 800d3f0:	b401      	push	{r0}
 800d3f2:	4802      	ldr	r0, [pc, #8]	@ (800d3fc <__FLASH_Program_Fast_veneer+0xc>)
 800d3f4:	4684      	mov	ip, r0
 800d3f6:	bc01      	pop	{r0}
 800d3f8:	4760      	bx	ip
 800d3fa:	bf00      	nop
 800d3fc:	2000044d 	.word	0x2000044d

Disassembly of section .data:

20000000 <user_preset_0>:
20000000:	407f6e7f 00000000                       .n.@....

20000008 <user_preset_1>:
20000008:	40402840 00000040                       @(@@@...

20000010 <user_preset_2>:
20000010:	007f4000 00000020                       .@.. ...

20000018 <user_preset_3>:
20000018:	7f7f4040                                 @@..d

2000001d <tap_tempo_switch_state_counter.1>:
2000001d:	                                         ...

20000020 <delay_line>:
	...
20000420:	00010000 00000200                       ........

20000428 <speed_fsm>:
20000428:	00000001                                ....

2000042c <depth_fsm>:
2000042c:	00000001                                ....

20000430 <waveshape_fsm>:
20000430:	00000001                                ....

20000434 <symmetry_fsm>:
20000434:	00000001                                ....

20000438 <phase_fsm>:
20000438:	00000001                                ....

2000043c <IP_CAP_fsm>:
2000043c:	00000400                                ....

20000440 <SystemCoreClock>:
20000440:	00f42400                                .$..

20000444 <uwTickPrio>:
20000444:	00000004                                ....

20000448 <uwTickFreq>:
20000448:	00000001                                ....

2000044c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
2000044c:	b580      	push	{r7, lr}
2000044e:	b088      	sub	sp, #32
20000450:	af00      	add	r7, sp, #0
20000452:	6078      	str	r0, [r7, #4]
20000454:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20000456:	231f      	movs	r3, #31
20000458:	18fb      	adds	r3, r7, r3
2000045a:	2200      	movs	r2, #0
2000045c:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000045e:	687b      	ldr	r3, [r7, #4]
20000460:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000462:	683b      	ldr	r3, [r7, #0]
20000464:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000466:	4b1a      	ldr	r3, [pc, #104]	@ (200004d0 <FLASH_Program_Fast+0x84>)
20000468:	695a      	ldr	r2, [r3, #20]
2000046a:	4b19      	ldr	r3, [pc, #100]	@ (200004d0 <FLASH_Program_Fast+0x84>)
2000046c:	2180      	movs	r1, #128	@ 0x80
2000046e:	02c9      	lsls	r1, r1, #11
20000470:	430a      	orrs	r2, r1
20000472:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000474:	f3ef 8310 	mrs	r3, PRIMASK
20000478:	60fb      	str	r3, [r7, #12]
  return(result);
2000047a:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000047c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000047e:	b672      	cpsid	i
}
20000480:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
20000482:	e00f      	b.n	200004a4 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000484:	697a      	ldr	r2, [r7, #20]
20000486:	69bb      	ldr	r3, [r7, #24]
20000488:	6812      	ldr	r2, [r2, #0]
2000048a:	601a      	str	r2, [r3, #0]
    src += 4U;
2000048c:	697b      	ldr	r3, [r7, #20]
2000048e:	3304      	adds	r3, #4
20000490:	617b      	str	r3, [r7, #20]
    dest += 4U;
20000492:	69bb      	ldr	r3, [r7, #24]
20000494:	3304      	adds	r3, #4
20000496:	61bb      	str	r3, [r7, #24]
    index++;
20000498:	211f      	movs	r1, #31
2000049a:	187b      	adds	r3, r7, r1
2000049c:	781a      	ldrb	r2, [r3, #0]
2000049e:	187b      	adds	r3, r7, r1
200004a0:	3201      	adds	r2, #1
200004a2:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200004a4:	231f      	movs	r3, #31
200004a6:	18fb      	adds	r3, r7, r3
200004a8:	781b      	ldrb	r3, [r3, #0]
200004aa:	2b3f      	cmp	r3, #63	@ 0x3f
200004ac:	d9ea      	bls.n	20000484 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200004ae:	46c0      	nop			@ (mov r8, r8)
200004b0:	4b07      	ldr	r3, [pc, #28]	@ (200004d0 <FLASH_Program_Fast+0x84>)
200004b2:	691a      	ldr	r2, [r3, #16]
200004b4:	2380      	movs	r3, #128	@ 0x80
200004b6:	025b      	lsls	r3, r3, #9
200004b8:	4013      	ands	r3, r2
200004ba:	d1f9      	bne.n	200004b0 <FLASH_Program_Fast+0x64>
200004bc:	693b      	ldr	r3, [r7, #16]
200004be:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200004c0:	68bb      	ldr	r3, [r7, #8]
200004c2:	f383 8810 	msr	PRIMASK, r3
}
200004c6:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200004c8:	46c0      	nop			@ (mov r8, r8)
200004ca:	46bd      	mov	sp, r7
200004cc:	b008      	add	sp, #32
200004ce:	bd80      	pop	{r7, pc}
200004d0:	40022000 	.word	0x40022000
