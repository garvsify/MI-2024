
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004560  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800461c  0800461c  0000561c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800473c  0800473c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  0800473c  0800473c  0000573c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004744  08004744  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004744  08004744  00005744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004748  08004748  00005748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800474c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000000c  08004758  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08004758  000061cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111d3  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000227a  00000000  00000000  00017207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  00019488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c6f  00000000  00000000  0001a450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170ac  00000000  00000000  0001b0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012124  00000000  00000000  0003216b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099532  00000000  00000000  0004428f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd7c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039cc  00000000  00000000  000dd804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000e11d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004604 	.word	0x08004604

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004604 	.word	0x08004604

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044c:	f000 fc24 	bl	8000c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000450:	f000 f80c 	bl	800046c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000454:	f000 fa0e 	bl	8000874 <MX_GPIO_Init>
  MX_DMA_Init();
 8000458:	f000 f9ee 	bl	8000838 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800045c:	f000 f9b8 	bl	80007d0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000460:	f000 f862 	bl	8000528 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000464:	f000 f8ca 	bl	80005fc <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000468:	46c0      	nop			@ (mov r8, r8)
 800046a:	e7fd      	b.n	8000468 <main+0x20>

0800046c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046c:	b590      	push	{r4, r7, lr}
 800046e:	b093      	sub	sp, #76	@ 0x4c
 8000470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000472:	2410      	movs	r4, #16
 8000474:	193b      	adds	r3, r7, r4
 8000476:	0018      	movs	r0, r3
 8000478:	2338      	movs	r3, #56	@ 0x38
 800047a:	001a      	movs	r2, r3
 800047c:	2100      	movs	r1, #0
 800047e:	f004 f895 	bl	80045ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000482:	003b      	movs	r3, r7
 8000484:	0018      	movs	r0, r3
 8000486:	2310      	movs	r3, #16
 8000488:	001a      	movs	r2, r3
 800048a:	2100      	movs	r1, #0
 800048c:	f004 f88e 	bl	80045ac <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000490:	2380      	movs	r3, #128	@ 0x80
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	0018      	movs	r0, r3
 8000496:	f001 fcef 	bl	8001e78 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800049a:	193b      	adds	r3, r7, r4
 800049c:	2202      	movs	r2, #2
 800049e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	2280      	movs	r2, #128	@ 0x80
 80004a4:	0052      	lsls	r2, r2, #1
 80004a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004a8:	0021      	movs	r1, r4
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2240      	movs	r2, #64	@ 0x40
 80004b4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	2202      	movs	r2, #2
 80004ba:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	2202      	movs	r2, #2
 80004c0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	2200      	movs	r2, #0
 80004c6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	2208      	movs	r2, #8
 80004cc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	2280      	movs	r2, #128	@ 0x80
 80004d2:	0292      	lsls	r2, r2, #10
 80004d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	22c0      	movs	r2, #192	@ 0xc0
 80004da:	04d2      	lsls	r2, r2, #19
 80004dc:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2280      	movs	r2, #128	@ 0x80
 80004e2:	0592      	lsls	r2, r2, #22
 80004e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	0018      	movs	r0, r3
 80004ea:	f001 fd11 	bl	8001f10 <HAL_RCC_OscConfig>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80004f2:	f000 fa21 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f6:	003b      	movs	r3, r7
 80004f8:	2207      	movs	r2, #7
 80004fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004fc:	003b      	movs	r3, r7
 80004fe:	2202      	movs	r2, #2
 8000500:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000502:	003b      	movs	r3, r7
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000508:	003b      	movs	r3, r7
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800050e:	003b      	movs	r3, r7
 8000510:	2102      	movs	r1, #2
 8000512:	0018      	movs	r0, r3
 8000514:	f002 f816 	bl	8002544 <HAL_RCC_ClockConfig>
 8000518:	1e03      	subs	r3, r0, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800051c:	f000 fa0c 	bl	8000938 <Error_Handler>
  }
}
 8000520:	46c0      	nop			@ (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	b013      	add	sp, #76	@ 0x4c
 8000526:	bd90      	pop	{r4, r7, pc}

08000528 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	0018      	movs	r0, r3
 8000532:	230c      	movs	r3, #12
 8000534:	001a      	movs	r2, r3
 8000536:	2100      	movs	r1, #0
 8000538:	f004 f838 	bl	80045ac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800053c:	4b2d      	ldr	r3, [pc, #180]	@ (80005f4 <MX_ADC1_Init+0xcc>)
 800053e:	4a2e      	ldr	r2, [pc, #184]	@ (80005f8 <MX_ADC1_Init+0xd0>)
 8000540:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000542:	4b2c      	ldr	r3, [pc, #176]	@ (80005f4 <MX_ADC1_Init+0xcc>)
 8000544:	2280      	movs	r2, #128	@ 0x80
 8000546:	05d2      	lsls	r2, r2, #23
 8000548:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800054a:	4b2a      	ldr	r3, [pc, #168]	@ (80005f4 <MX_ADC1_Init+0xcc>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000550:	4b28      	ldr	r3, [pc, #160]	@ (80005f4 <MX_ADC1_Init+0xcc>)
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000556:	4b27      	ldr	r3, [pc, #156]	@ (80005f4 <MX_ADC1_Init+0xcc>)
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055c:	4b25      	ldr	r3, [pc, #148]	@ (80005f4 <MX_ADC1_Init+0xcc>)
 800055e:	2204      	movs	r2, #4
 8000560:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000562:	4b24      	ldr	r3, [pc, #144]	@ (80005f4 <MX_ADC1_Init+0xcc>)
 8000564:	2200      	movs	r2, #0
 8000566:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000568:	4b22      	ldr	r3, [pc, #136]	@ (80005f4 <MX_ADC1_Init+0xcc>)
 800056a:	2200      	movs	r2, #0
 800056c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800056e:	4b21      	ldr	r3, [pc, #132]	@ (80005f4 <MX_ADC1_Init+0xcc>)
 8000570:	2200      	movs	r2, #0
 8000572:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000574:	4b1f      	ldr	r3, [pc, #124]	@ (80005f4 <MX_ADC1_Init+0xcc>)
 8000576:	2201      	movs	r2, #1
 8000578:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800057a:	4b1e      	ldr	r3, [pc, #120]	@ (80005f4 <MX_ADC1_Init+0xcc>)
 800057c:	2220      	movs	r2, #32
 800057e:	2100      	movs	r1, #0
 8000580:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000582:	4b1c      	ldr	r3, [pc, #112]	@ (80005f4 <MX_ADC1_Init+0xcc>)
 8000584:	2200      	movs	r2, #0
 8000586:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000588:	4b1a      	ldr	r3, [pc, #104]	@ (80005f4 <MX_ADC1_Init+0xcc>)
 800058a:	2200      	movs	r2, #0
 800058c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800058e:	4b19      	ldr	r3, [pc, #100]	@ (80005f4 <MX_ADC1_Init+0xcc>)
 8000590:	222c      	movs	r2, #44	@ 0x2c
 8000592:	2100      	movs	r1, #0
 8000594:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000596:	4b17      	ldr	r3, [pc, #92]	@ (80005f4 <MX_ADC1_Init+0xcc>)
 8000598:	2200      	movs	r2, #0
 800059a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800059c:	4b15      	ldr	r3, [pc, #84]	@ (80005f4 <MX_ADC1_Init+0xcc>)
 800059e:	2200      	movs	r2, #0
 80005a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80005a2:	4b14      	ldr	r3, [pc, #80]	@ (80005f4 <MX_ADC1_Init+0xcc>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80005a8:	4b12      	ldr	r3, [pc, #72]	@ (80005f4 <MX_ADC1_Init+0xcc>)
 80005aa:	223c      	movs	r2, #60	@ 0x3c
 80005ac:	2100      	movs	r1, #0
 80005ae:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80005b0:	4b10      	ldr	r3, [pc, #64]	@ (80005f4 <MX_ADC1_Init+0xcc>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005b6:	4b0f      	ldr	r3, [pc, #60]	@ (80005f4 <MX_ADC1_Init+0xcc>)
 80005b8:	0018      	movs	r0, r3
 80005ba:	f000 fcf1 	bl	8000fa0 <HAL_ADC_Init>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80005c2:	f000 f9b9 	bl	8000938 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2201      	movs	r2, #1
 80005ca:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2200      	movs	r2, #0
 80005d0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d8:	1d3a      	adds	r2, r7, #4
 80005da:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <MX_ADC1_Init+0xcc>)
 80005dc:	0011      	movs	r1, r2
 80005de:	0018      	movs	r0, r3
 80005e0:	f000 fe86 	bl	80012f0 <HAL_ADC_ConfigChannel>
 80005e4:	1e03      	subs	r3, r0, #0
 80005e6:	d001      	beq.n	80005ec <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80005e8:	f000 f9a6 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005ec:	46c0      	nop			@ (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b004      	add	sp, #16
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000028 	.word	0x20000028
 80005f8:	40012400 	.word	0x40012400

080005fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b09c      	sub	sp, #112	@ 0x70
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000602:	2360      	movs	r3, #96	@ 0x60
 8000604:	18fb      	adds	r3, r7, r3
 8000606:	0018      	movs	r0, r3
 8000608:	2310      	movs	r3, #16
 800060a:	001a      	movs	r2, r3
 800060c:	2100      	movs	r1, #0
 800060e:	f003 ffcd 	bl	80045ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000612:	2354      	movs	r3, #84	@ 0x54
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	0018      	movs	r0, r3
 8000618:	230c      	movs	r3, #12
 800061a:	001a      	movs	r2, r3
 800061c:	2100      	movs	r1, #0
 800061e:	f003 ffc5 	bl	80045ac <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000622:	2338      	movs	r3, #56	@ 0x38
 8000624:	18fb      	adds	r3, r7, r3
 8000626:	0018      	movs	r0, r3
 8000628:	231c      	movs	r3, #28
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f003 ffbd 	bl	80045ac <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	0018      	movs	r0, r3
 8000636:	2334      	movs	r3, #52	@ 0x34
 8000638:	001a      	movs	r2, r3
 800063a:	2100      	movs	r1, #0
 800063c:	f003 ffb6 	bl	80045ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000640:	4b60      	ldr	r3, [pc, #384]	@ (80007c4 <MX_TIM1_Init+0x1c8>)
 8000642:	4a61      	ldr	r2, [pc, #388]	@ (80007c8 <MX_TIM1_Init+0x1cc>)
 8000644:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000646:	4b5f      	ldr	r3, [pc, #380]	@ (80007c4 <MX_TIM1_Init+0x1c8>)
 8000648:	2201      	movs	r2, #1
 800064a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064c:	4b5d      	ldr	r3, [pc, #372]	@ (80007c4 <MX_TIM1_Init+0x1c8>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000652:	4b5c      	ldr	r3, [pc, #368]	@ (80007c4 <MX_TIM1_Init+0x1c8>)
 8000654:	4a5d      	ldr	r2, [pc, #372]	@ (80007cc <MX_TIM1_Init+0x1d0>)
 8000656:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000658:	4b5a      	ldr	r3, [pc, #360]	@ (80007c4 <MX_TIM1_Init+0x1c8>)
 800065a:	2280      	movs	r2, #128	@ 0x80
 800065c:	0052      	lsls	r2, r2, #1
 800065e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000660:	4b58      	ldr	r3, [pc, #352]	@ (80007c4 <MX_TIM1_Init+0x1c8>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000666:	4b57      	ldr	r3, [pc, #348]	@ (80007c4 <MX_TIM1_Init+0x1c8>)
 8000668:	2280      	movs	r2, #128	@ 0x80
 800066a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800066c:	4b55      	ldr	r3, [pc, #340]	@ (80007c4 <MX_TIM1_Init+0x1c8>)
 800066e:	0018      	movs	r0, r3
 8000670:	f002 fa8c 	bl	8002b8c <HAL_TIM_Base_Init>
 8000674:	1e03      	subs	r3, r0, #0
 8000676:	d001      	beq.n	800067c <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000678:	f000 f95e 	bl	8000938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800067c:	2160      	movs	r1, #96	@ 0x60
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2280      	movs	r2, #128	@ 0x80
 8000682:	0152      	lsls	r2, r2, #5
 8000684:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000686:	187a      	adds	r2, r7, r1
 8000688:	4b4e      	ldr	r3, [pc, #312]	@ (80007c4 <MX_TIM1_Init+0x1c8>)
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f002 fcf5 	bl	800307c <HAL_TIM_ConfigClockSource>
 8000692:	1e03      	subs	r3, r0, #0
 8000694:	d001      	beq.n	800069a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000696:	f000 f94f 	bl	8000938 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800069a:	4b4a      	ldr	r3, [pc, #296]	@ (80007c4 <MX_TIM1_Init+0x1c8>)
 800069c:	0018      	movs	r0, r3
 800069e:	f002 fb2d 	bl	8002cfc <HAL_TIM_PWM_Init>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80006a6:	f000 f947 	bl	8000938 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80006aa:	4b46      	ldr	r3, [pc, #280]	@ (80007c4 <MX_TIM1_Init+0x1c8>)
 80006ac:	0018      	movs	r0, r3
 80006ae:	f002 fac5 	bl	8002c3c <HAL_TIM_OC_Init>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80006b6:	f000 f93f 	bl	8000938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ba:	2154      	movs	r1, #84	@ 0x54
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006ce:	187a      	adds	r2, r7, r1
 80006d0:	4b3c      	ldr	r3, [pc, #240]	@ (80007c4 <MX_TIM1_Init+0x1c8>)
 80006d2:	0011      	movs	r1, r2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f003 f963 	bl	80039a0 <HAL_TIMEx_MasterConfigSynchronization>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 80006de:	f000 f92b 	bl	8000938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006e2:	2138      	movs	r1, #56	@ 0x38
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2260      	movs	r2, #96	@ 0x60
 80006e8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2200      	movs	r2, #0
 80006ee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000708:	1879      	adds	r1, r7, r1
 800070a:	4b2e      	ldr	r3, [pc, #184]	@ (80007c4 <MX_TIM1_Init+0x1c8>)
 800070c:	220c      	movs	r2, #12
 800070e:	0018      	movs	r0, r3
 8000710:	f002 fbb4 	bl	8002e7c <HAL_TIM_PWM_ConfigChannel>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000718:	f000 f90e 	bl	8000938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800071c:	2138      	movs	r1, #56	@ 0x38
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2230      	movs	r2, #48	@ 0x30
 8000722:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 65535;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	4a29      	ldr	r2, [pc, #164]	@ (80007cc <MX_TIM1_Init+0x1d0>)
 8000728:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 800072a:	1879      	adds	r1, r7, r1
 800072c:	4b25      	ldr	r3, [pc, #148]	@ (80007c4 <MX_TIM1_Init+0x1c8>)
 800072e:	2210      	movs	r2, #16
 8000730:	0018      	movs	r0, r3
 8000732:	f002 fb43 	bl	8002dbc <HAL_TIM_OC_ConfigChannel>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800073a:	f000 f8fd 	bl	8000938 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_5);
 800073e:	4b21      	ldr	r3, [pc, #132]	@ (80007c4 <MX_TIM1_Init+0x1c8>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000744:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <MX_TIM1_Init+0x1c8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2108      	movs	r1, #8
 800074a:	430a      	orrs	r2, r1
 800074c:	655a      	str	r2, [r3, #84]	@ 0x54
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2280      	movs	r2, #128	@ 0x80
 8000770:	0192      	lsls	r2, r2, #6
 8000772:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2280      	movs	r2, #128	@ 0x80
 800078a:	0492      	lsls	r2, r2, #18
 800078c:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2200      	movs	r2, #0
 8000792:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2200      	movs	r2, #0
 8000798:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007a0:	1d3a      	adds	r2, r7, #4
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <MX_TIM1_Init+0x1c8>)
 80007a4:	0011      	movs	r1, r2
 80007a6:	0018      	movs	r0, r3
 80007a8:	f003 f962 	bl	8003a70 <HAL_TIMEx_ConfigBreakDeadTime>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0x1b8>
  {
    Error_Handler();
 80007b0:	f000 f8c2 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007b4:	4b03      	ldr	r3, [pc, #12]	@ (80007c4 <MX_TIM1_Init+0x1c8>)
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 f990 	bl	8000adc <HAL_TIM_MspPostInit>

}
 80007bc:	46c0      	nop			@ (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b01c      	add	sp, #112	@ 0x70
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200000e8 	.word	0x200000e8
 80007c8:	40012c00 	.word	0x40012c00
 80007cc:	0000ffff 	.word	0x0000ffff

080007d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d4:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <MX_USART2_UART_Init+0x60>)
 80007d6:	4a17      	ldr	r2, [pc, #92]	@ (8000834 <MX_USART2_UART_Init+0x64>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007da:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <MX_USART2_UART_Init+0x60>)
 80007dc:	22e1      	movs	r2, #225	@ 0xe1
 80007de:	0252      	lsls	r2, r2, #9
 80007e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <MX_USART2_UART_Init+0x60>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_USART2_UART_Init+0x60>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <MX_USART2_UART_Init+0x60>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_USART2_UART_Init+0x60>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <MX_USART2_UART_Init+0x60>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <MX_USART2_UART_Init+0x60>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000806:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <MX_USART2_UART_Init+0x60>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800080c:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <MX_USART2_UART_Init+0x60>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000812:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <MX_USART2_UART_Init+0x60>)
 8000814:	2200      	movs	r2, #0
 8000816:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000818:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <MX_USART2_UART_Init+0x60>)
 800081a:	0018      	movs	r0, r3
 800081c:	f003 f9c4 	bl	8003ba8 <HAL_UART_Init>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000824:	f000 f888 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000828:	46c0      	nop			@ (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	20000134 	.word	0x20000134
 8000834:	40004400 	.word	0x40004400

08000838 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800083e:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <MX_DMA_Init+0x38>)
 8000840:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <MX_DMA_Init+0x38>)
 8000844:	2101      	movs	r1, #1
 8000846:	430a      	orrs	r2, r1
 8000848:	639a      	str	r2, [r3, #56]	@ 0x38
 800084a:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <MX_DMA_Init+0x38>)
 800084c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800084e:	2201      	movs	r2, #1
 8000850:	4013      	ands	r3, r2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	2009      	movs	r0, #9
 800085c:	f000 ffcc 	bl	80017f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000860:	2009      	movs	r0, #9
 8000862:	f000 ffde 	bl	8001822 <HAL_NVIC_EnableIRQ>

}
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b002      	add	sp, #8
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	40021000 	.word	0x40021000

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b089      	sub	sp, #36	@ 0x24
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	240c      	movs	r4, #12
 800087c:	193b      	adds	r3, r7, r4
 800087e:	0018      	movs	r0, r3
 8000880:	2314      	movs	r3, #20
 8000882:	001a      	movs	r2, r3
 8000884:	2100      	movs	r1, #0
 8000886:	f003 fe91 	bl	80045ac <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	4b28      	ldr	r3, [pc, #160]	@ (800092c <MX_GPIO_Init+0xb8>)
 800088c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800088e:	4b27      	ldr	r3, [pc, #156]	@ (800092c <MX_GPIO_Init+0xb8>)
 8000890:	2104      	movs	r1, #4
 8000892:	430a      	orrs	r2, r1
 8000894:	635a      	str	r2, [r3, #52]	@ 0x34
 8000896:	4b25      	ldr	r3, [pc, #148]	@ (800092c <MX_GPIO_Init+0xb8>)
 8000898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800089a:	2204      	movs	r2, #4
 800089c:	4013      	ands	r3, r2
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008a2:	4b22      	ldr	r3, [pc, #136]	@ (800092c <MX_GPIO_Init+0xb8>)
 80008a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008a6:	4b21      	ldr	r3, [pc, #132]	@ (800092c <MX_GPIO_Init+0xb8>)
 80008a8:	2120      	movs	r1, #32
 80008aa:	430a      	orrs	r2, r1
 80008ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80008ae:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <MX_GPIO_Init+0xb8>)
 80008b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008b2:	2220      	movs	r2, #32
 80008b4:	4013      	ands	r3, r2
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <MX_GPIO_Init+0xb8>)
 80008bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008be:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <MX_GPIO_Init+0xb8>)
 80008c0:	2101      	movs	r1, #1
 80008c2:	430a      	orrs	r2, r1
 80008c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80008c6:	4b19      	ldr	r3, [pc, #100]	@ (800092c <MX_GPIO_Init+0xb8>)
 80008c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008ca:	2201      	movs	r2, #1
 80008cc:	4013      	ands	r3, r2
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008d2:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <MX_GPIO_Init+0xbc>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	2140      	movs	r1, #64	@ 0x40
 80008d8:	0018      	movs	r0, r3
 80008da:	f001 faaf 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	2204      	movs	r2, #4
 80008e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	2288      	movs	r2, #136	@ 0x88
 80008e8:	0352      	lsls	r2, r2, #13
 80008ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000934 <MX_GPIO_Init+0xc0>)
 80008f6:	0019      	movs	r1, r3
 80008f8:	0010      	movs	r0, r2
 80008fa:	f001 f93b 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80008fe:	0021      	movs	r1, r4
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2240      	movs	r2, #64	@ 0x40
 8000904:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2201      	movs	r2, #1
 800090a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000918:	187b      	adds	r3, r7, r1
 800091a:	4a05      	ldr	r2, [pc, #20]	@ (8000930 <MX_GPIO_Init+0xbc>)
 800091c:	0019      	movs	r1, r3
 800091e:	0010      	movs	r0, r2
 8000920:	f001 f928 	bl	8001b74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000924:	46c0      	nop			@ (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b009      	add	sp, #36	@ 0x24
 800092a:	bd90      	pop	{r4, r7, pc}
 800092c:	40021000 	.word	0x40021000
 8000930:	50000800 	.word	0x50000800
 8000934:	50001400 	.word	0x50001400

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	46c0      	nop			@ (mov r8, r8)
 8000942:	e7fd      	b.n	8000940 <Error_Handler+0x8>

08000944 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <HAL_MspInit+0x44>)
 800094c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800094e:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <HAL_MspInit+0x44>)
 8000950:	2101      	movs	r1, #1
 8000952:	430a      	orrs	r2, r1
 8000954:	641a      	str	r2, [r3, #64]	@ 0x40
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <HAL_MspInit+0x44>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	2201      	movs	r2, #1
 800095c:	4013      	ands	r3, r2
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <HAL_MspInit+0x44>)
 8000964:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000966:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <HAL_MspInit+0x44>)
 8000968:	2180      	movs	r1, #128	@ 0x80
 800096a:	0549      	lsls	r1, r1, #21
 800096c:	430a      	orrs	r2, r1
 800096e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000970:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <HAL_MspInit+0x44>)
 8000972:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000974:	2380      	movs	r3, #128	@ 0x80
 8000976:	055b      	lsls	r3, r3, #21
 8000978:	4013      	ands	r3, r2
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b002      	add	sp, #8
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b08b      	sub	sp, #44	@ 0x2c
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	2414      	movs	r4, #20
 8000996:	193b      	adds	r3, r7, r4
 8000998:	0018      	movs	r0, r3
 800099a:	2314      	movs	r3, #20
 800099c:	001a      	movs	r2, r3
 800099e:	2100      	movs	r1, #0
 80009a0:	f003 fe04 	bl	80045ac <memset>
  if(hadc->Instance==ADC1)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a2d      	ldr	r2, [pc, #180]	@ (8000a60 <HAL_ADC_MspInit+0xd4>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d154      	bne.n	8000a58 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000a64 <HAL_ADC_MspInit+0xd8>)
 80009b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a64 <HAL_ADC_MspInit+0xd8>)
 80009b4:	2180      	movs	r1, #128	@ 0x80
 80009b6:	0349      	lsls	r1, r1, #13
 80009b8:	430a      	orrs	r2, r1
 80009ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80009bc:	4b29      	ldr	r3, [pc, #164]	@ (8000a64 <HAL_ADC_MspInit+0xd8>)
 80009be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009c0:	2380      	movs	r3, #128	@ 0x80
 80009c2:	035b      	lsls	r3, r3, #13
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b26      	ldr	r3, [pc, #152]	@ (8000a64 <HAL_ADC_MspInit+0xd8>)
 80009cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009ce:	4b25      	ldr	r3, [pc, #148]	@ (8000a64 <HAL_ADC_MspInit+0xd8>)
 80009d0:	2101      	movs	r1, #1
 80009d2:	430a      	orrs	r2, r1
 80009d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80009d6:	4b23      	ldr	r3, [pc, #140]	@ (8000a64 <HAL_ADC_MspInit+0xd8>)
 80009d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009da:	2201      	movs	r2, #1
 80009dc:	4013      	ands	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	2233      	movs	r2, #51	@ 0x33
 80009e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	2203      	movs	r2, #3
 80009ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	193a      	adds	r2, r7, r4
 80009f6:	23a0      	movs	r3, #160	@ 0xa0
 80009f8:	05db      	lsls	r3, r3, #23
 80009fa:	0011      	movs	r1, r2
 80009fc:	0018      	movs	r0, r3
 80009fe:	f001 f8b9 	bl	8001b74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a02:	4b19      	ldr	r3, [pc, #100]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a04:	4a19      	ldr	r2, [pc, #100]	@ (8000a6c <HAL_ADC_MspInit+0xe0>)
 8000a06:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a08:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a0a:	2205      	movs	r2, #5
 8000a0c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a0e:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a14:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a20:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a22:	2280      	movs	r2, #128	@ 0x80
 8000a24:	0052      	lsls	r2, r2, #1
 8000a26:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a2a:	2280      	movs	r2, #128	@ 0x80
 8000a2c:	00d2      	lsls	r2, r2, #3
 8000a2e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000a30:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 ff0c 	bl	800185c <HAL_DMA_Init>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d001      	beq.n	8000a4c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000a48:	f7ff ff76 	bl	8000938 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a06      	ldr	r2, [pc, #24]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a50:	651a      	str	r2, [r3, #80]	@ 0x50
 8000a52:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a58:	46c0      	nop			@ (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b00b      	add	sp, #44	@ 0x2c
 8000a5e:	bd90      	pop	{r4, r7, pc}
 8000a60:	40012400 	.word	0x40012400
 8000a64:	40021000 	.word	0x40021000
 8000a68:	2000008c 	.word	0x2000008c
 8000a6c:	40020008 	.word	0x40020008

08000a70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b08f      	sub	sp, #60	@ 0x3c
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a78:	2410      	movs	r4, #16
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	2328      	movs	r3, #40	@ 0x28
 8000a80:	001a      	movs	r2, r3
 8000a82:	2100      	movs	r1, #0
 8000a84:	f003 fd92 	bl	80045ac <memset>
  if(htim_base->Instance==TIM1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a11      	ldr	r2, [pc, #68]	@ (8000ad4 <HAL_TIM_Base_MspInit+0x64>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d11c      	bne.n	8000acc <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2280      	movs	r2, #128	@ 0x80
 8000a96:	0392      	lsls	r2, r2, #14
 8000a98:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f001 fef8 	bl	8002898 <HAL_RCCEx_PeriphCLKConfig>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8000aac:	f7ff ff44 	bl	8000938 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ab0:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <HAL_TIM_Base_MspInit+0x68>)
 8000ab2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ab4:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <HAL_TIM_Base_MspInit+0x68>)
 8000ab6:	2180      	movs	r1, #128	@ 0x80
 8000ab8:	0109      	lsls	r1, r1, #4
 8000aba:	430a      	orrs	r2, r1
 8000abc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000abe:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <HAL_TIM_Base_MspInit+0x68>)
 8000ac0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ac2:	2380      	movs	r3, #128	@ 0x80
 8000ac4:	011b      	lsls	r3, r3, #4
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000acc:	46c0      	nop			@ (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b00f      	add	sp, #60	@ 0x3c
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	40012c00 	.word	0x40012c00
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b089      	sub	sp, #36	@ 0x24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	240c      	movs	r4, #12
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	0018      	movs	r0, r3
 8000aea:	2314      	movs	r3, #20
 8000aec:	001a      	movs	r2, r3
 8000aee:	2100      	movs	r1, #0
 8000af0:	f003 fd5c 	bl	80045ac <memset>
  if(htim->Instance==TIM1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a15      	ldr	r2, [pc, #84]	@ (8000b50 <HAL_TIM_MspPostInit+0x74>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d123      	bne.n	8000b46 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <HAL_TIM_MspPostInit+0x78>)
 8000b00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b02:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <HAL_TIM_MspPostInit+0x78>)
 8000b04:	2101      	movs	r1, #1
 8000b06:	430a      	orrs	r2, r1
 8000b08:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b0a:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <HAL_TIM_MspPostInit+0x78>)
 8000b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11 [PA9]     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	2280      	movs	r2, #128	@ 0x80
 8000b1a:	0112      	lsls	r2, r2, #4
 8000b1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	0021      	movs	r1, r4
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2202      	movs	r2, #2
 8000b24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2202      	movs	r2, #2
 8000b36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	187a      	adds	r2, r7, r1
 8000b3a:	23a0      	movs	r3, #160	@ 0xa0
 8000b3c:	05db      	lsls	r3, r3, #23
 8000b3e:	0011      	movs	r1, r2
 8000b40:	0018      	movs	r0, r3
 8000b42:	f001 f817 	bl	8001b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b009      	add	sp, #36	@ 0x24
 8000b4c:	bd90      	pop	{r4, r7, pc}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	40012c00 	.word	0x40012c00
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b08b      	sub	sp, #44	@ 0x2c
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	2414      	movs	r4, #20
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	0018      	movs	r0, r3
 8000b66:	2314      	movs	r3, #20
 8000b68:	001a      	movs	r2, r3
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	f003 fd1e 	bl	80045ac <memset>
  if(huart->Instance==USART2)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a1b      	ldr	r2, [pc, #108]	@ (8000be4 <HAL_UART_MspInit+0x8c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d130      	bne.n	8000bdc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <HAL_UART_MspInit+0x90>)
 8000b7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000be8 <HAL_UART_MspInit+0x90>)
 8000b80:	2180      	movs	r1, #128	@ 0x80
 8000b82:	0289      	lsls	r1, r1, #10
 8000b84:	430a      	orrs	r2, r1
 8000b86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b88:	4b17      	ldr	r3, [pc, #92]	@ (8000be8 <HAL_UART_MspInit+0x90>)
 8000b8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b8c:	2380      	movs	r3, #128	@ 0x80
 8000b8e:	029b      	lsls	r3, r3, #10
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <HAL_UART_MspInit+0x90>)
 8000b98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b9a:	4b13      	ldr	r3, [pc, #76]	@ (8000be8 <HAL_UART_MspInit+0x90>)
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <HAL_UART_MspInit+0x90>)
 8000ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000bae:	0021      	movs	r1, r4
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2202      	movs	r2, #2
 8000bba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2201      	movs	r2, #1
 8000bcc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	187a      	adds	r2, r7, r1
 8000bd0:	23a0      	movs	r3, #160	@ 0xa0
 8000bd2:	05db      	lsls	r3, r3, #23
 8000bd4:	0011      	movs	r1, r2
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 ffcc 	bl	8001b74 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bdc:	46c0      	nop			@ (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b00b      	add	sp, #44	@ 0x2c
 8000be2:	bd90      	pop	{r4, r7, pc}
 8000be4:	40004400 	.word	0x40004400
 8000be8:	40021000 	.word	0x40021000

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf0:	46c0      	nop			@ (mov r8, r8)
 8000bf2:	e7fd      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf8:	46c0      	nop			@ (mov r8, r8)
 8000bfa:	e7fd      	b.n	8000bf8 <HardFault_Handler+0x4>

08000bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c00:	46c0      	nop			@ (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0a:	46c0      	nop			@ (mov r8, r8)
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c14:	f000 f8aa 	bl	8000d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c18:	46c0      	nop			@ (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c24:	4b03      	ldr	r3, [pc, #12]	@ (8000c34 <DMA1_Channel1_IRQHandler+0x14>)
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 fea2 	bl	8001970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c2c:	46c0      	nop			@ (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	2000008c 	.word	0x2000008c

08000c38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	46c0      	nop			@ (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c44:	480d      	ldr	r0, [pc, #52]	@ (8000c7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c48:	f7ff fff6 	bl	8000c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c4c:	480c      	ldr	r0, [pc, #48]	@ (8000c80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c4e:	490d      	ldr	r1, [pc, #52]	@ (8000c84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c50:	4a0d      	ldr	r2, [pc, #52]	@ (8000c88 <LoopForever+0xe>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c64:	4c0a      	ldr	r4, [pc, #40]	@ (8000c90 <LoopForever+0x16>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c72:	f003 fca3 	bl	80045bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c76:	f7ff fbe7 	bl	8000448 <main>

08000c7a <LoopForever>:

LoopForever:
  b LoopForever
 8000c7a:	e7fe      	b.n	8000c7a <LoopForever>
  ldr   r0, =_estack
 8000c7c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c88:	0800474c 	.word	0x0800474c
  ldr r2, =_sbss
 8000c8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c90:	200001cc 	.word	0x200001cc

08000c94 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC1_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <HAL_Init+0x3c>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <HAL_Init+0x3c>)
 8000caa:	2180      	movs	r1, #128	@ 0x80
 8000cac:	0049      	lsls	r1, r1, #1
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 f810 	bl	8000cd8 <HAL_InitTick>
 8000cb8:	1e03      	subs	r3, r0, #0
 8000cba:	d003      	beq.n	8000cc4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cbc:	1dfb      	adds	r3, r7, #7
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
 8000cc2:	e001      	b.n	8000cc8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000cc4:	f7ff fe3e 	bl	8000944 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc8:	1dfb      	adds	r3, r7, #7
 8000cca:	781b      	ldrb	r3, [r3, #0]
}
 8000ccc:	0018      	movs	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b002      	add	sp, #8
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40022000 	.word	0x40022000

08000cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce0:	230f      	movs	r3, #15
 8000ce2:	18fb      	adds	r3, r7, r3
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d60 <HAL_InitTick+0x88>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d02b      	beq.n	8000d48 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <HAL_InitTick+0x8c>)
 8000cf2:	681c      	ldr	r4, [r3, #0]
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <HAL_InitTick+0x88>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	23fa      	movs	r3, #250	@ 0xfa
 8000cfc:	0098      	lsls	r0, r3, #2
 8000cfe:	f7ff fa01 	bl	8000104 <__udivsi3>
 8000d02:	0003      	movs	r3, r0
 8000d04:	0019      	movs	r1, r3
 8000d06:	0020      	movs	r0, r4
 8000d08:	f7ff f9fc 	bl	8000104 <__udivsi3>
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f000 fd97 	bl	8001842 <HAL_SYSTICK_Config>
 8000d14:	1e03      	subs	r3, r0, #0
 8000d16:	d112      	bne.n	8000d3e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	d80a      	bhi.n	8000d34 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	2301      	movs	r3, #1
 8000d22:	425b      	negs	r3, r3
 8000d24:	2200      	movs	r2, #0
 8000d26:	0018      	movs	r0, r3
 8000d28:	f000 fd66 	bl	80017f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <HAL_InitTick+0x90>)
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	e00d      	b.n	8000d50 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d34:	230f      	movs	r3, #15
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
 8000d3c:	e008      	b.n	8000d50 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d3e:	230f      	movs	r3, #15
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
 8000d46:	e003      	b.n	8000d50 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d48:	230f      	movs	r3, #15
 8000d4a:	18fb      	adds	r3, r7, r3
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d50:	230f      	movs	r3, #15
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	781b      	ldrb	r3, [r3, #0]
}
 8000d56:	0018      	movs	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b005      	add	sp, #20
 8000d5c:	bd90      	pop	{r4, r7, pc}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000004 	.word	0x20000004

08000d6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d70:	4b05      	ldr	r3, [pc, #20]	@ (8000d88 <HAL_IncTick+0x1c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	001a      	movs	r2, r3
 8000d76:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <HAL_IncTick+0x20>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	18d2      	adds	r2, r2, r3
 8000d7c:	4b03      	ldr	r3, [pc, #12]	@ (8000d8c <HAL_IncTick+0x20>)
 8000d7e:	601a      	str	r2, [r3, #0]
}
 8000d80:	46c0      	nop			@ (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			@ (mov r8, r8)
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	200001c8 	.word	0x200001c8

08000d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b02      	ldr	r3, [pc, #8]	@ (8000da0 <HAL_GetTick+0x10>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	0018      	movs	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	200001c8 	.word	0x200001c8

08000da4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a05      	ldr	r2, [pc, #20]	@ (8000dc8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000db4:	401a      	ands	r2, r3
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	431a      	orrs	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	601a      	str	r2, [r3, #0]
}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b002      	add	sp, #8
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			@ (mov r8, r8)
 8000dc8:	fe3fffff 	.word	0xfe3fffff

08000dcc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	23e0      	movs	r3, #224	@ 0xe0
 8000dda:	045b      	lsls	r3, r3, #17
 8000ddc:	4013      	ands	r3, r2
}
 8000dde:	0018      	movs	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b002      	add	sp, #8
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b084      	sub	sp, #16
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	2104      	movs	r1, #4
 8000dfa:	400a      	ands	r2, r1
 8000dfc:	2107      	movs	r1, #7
 8000dfe:	4091      	lsls	r1, r2
 8000e00:	000a      	movs	r2, r1
 8000e02:	43d2      	mvns	r2, r2
 8000e04:	401a      	ands	r2, r3
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	2104      	movs	r1, #4
 8000e0a:	400b      	ands	r3, r1
 8000e0c:	6879      	ldr	r1, [r7, #4]
 8000e0e:	4099      	lsls	r1, r3
 8000e10:	000b      	movs	r3, r1
 8000e12:	431a      	orrs	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000e18:	46c0      	nop			@ (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b004      	add	sp, #16
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	683a      	ldr	r2, [r7, #0]
 8000e30:	2104      	movs	r1, #4
 8000e32:	400a      	ands	r2, r1
 8000e34:	2107      	movs	r1, #7
 8000e36:	4091      	lsls	r1, r2
 8000e38:	000a      	movs	r2, r1
 8000e3a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	2104      	movs	r1, #4
 8000e40:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e42:	40da      	lsrs	r2, r3
 8000e44:	0013      	movs	r3, r2
}
 8000e46:	0018      	movs	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b002      	add	sp, #8
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	60f8      	str	r0, [r7, #12]
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	211f      	movs	r1, #31
 8000e62:	400a      	ands	r2, r1
 8000e64:	210f      	movs	r1, #15
 8000e66:	4091      	lsls	r1, r2
 8000e68:	000a      	movs	r2, r1
 8000e6a:	43d2      	mvns	r2, r2
 8000e6c:	401a      	ands	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	0e9b      	lsrs	r3, r3, #26
 8000e72:	210f      	movs	r1, #15
 8000e74:	4019      	ands	r1, r3
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	201f      	movs	r0, #31
 8000e7a:	4003      	ands	r3, r0
 8000e7c:	4099      	lsls	r1, r3
 8000e7e:	000b      	movs	r3, r1
 8000e80:	431a      	orrs	r2, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e86:	46c0      	nop			@ (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b004      	add	sp, #16
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	035b      	lsls	r3, r3, #13
 8000ea0:	0b5b      	lsrs	r3, r3, #13
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ea8:	46c0      	nop			@ (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b002      	add	sp, #8
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	0352      	lsls	r2, r2, #13
 8000ec2:	0b52      	lsrs	r2, r2, #13
 8000ec4:	43d2      	mvns	r2, r2
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	68ba      	ldr	r2, [r7, #8]
 8000ee6:	0212      	lsls	r2, r2, #8
 8000ee8:	43d2      	mvns	r2, r2
 8000eea:	401a      	ands	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	400b      	ands	r3, r1
 8000ef4:	4904      	ldr	r1, [pc, #16]	@ (8000f08 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000ef6:	400b      	ands	r3, r1
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000efe:	46c0      	nop			@ (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b004      	add	sp, #16
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	46c0      	nop			@ (mov r8, r8)
 8000f08:	07ffff00 	.word	0x07ffff00

08000f0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	4a05      	ldr	r2, [pc, #20]	@ (8000f30 <LL_ADC_EnableInternalRegulator+0x24>)
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	2280      	movs	r2, #128	@ 0x80
 8000f1e:	0552      	lsls	r2, r2, #21
 8000f20:	431a      	orrs	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f26:	46c0      	nop			@ (mov r8, r8)
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b002      	add	sp, #8
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	46c0      	nop			@ (mov r8, r8)
 8000f30:	6fffffe8 	.word	0x6fffffe8

08000f34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	2380      	movs	r3, #128	@ 0x80
 8000f42:	055b      	lsls	r3, r3, #21
 8000f44:	401a      	ands	r2, r3
 8000f46:	2380      	movs	r3, #128	@ 0x80
 8000f48:	055b      	lsls	r3, r3, #21
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d101      	bne.n	8000f52 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	0018      	movs	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b002      	add	sp, #8
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d101      	bne.n	8000f74 <LL_ADC_IsEnabled+0x18>
 8000f70:	2301      	movs	r3, #1
 8000f72:	e000      	b.n	8000f76 <LL_ADC_IsEnabled+0x1a>
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	0018      	movs	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b002      	add	sp, #8
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d101      	bne.n	8000f96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	0018      	movs	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b002      	add	sp, #8
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fa8:	231f      	movs	r3, #31
 8000faa:	18fb      	adds	r3, r7, r3
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e17f      	b.n	80012c6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10a      	bne.n	8000fe4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f7ff fcdb 	bl	800098c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2254      	movs	r2, #84	@ 0x54
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f7ff ffa3 	bl	8000f34 <LL_ADC_IsInternalRegulatorEnabled>
 8000fee:	1e03      	subs	r3, r0, #0
 8000ff0:	d115      	bne.n	800101e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f7ff ff88 	bl	8000f0c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000ffc:	4bb4      	ldr	r3, [pc, #720]	@ (80012d0 <HAL_ADC_Init+0x330>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	49b4      	ldr	r1, [pc, #720]	@ (80012d4 <HAL_ADC_Init+0x334>)
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff f87e 	bl	8000104 <__udivsi3>
 8001008:	0003      	movs	r3, r0
 800100a:	3301      	adds	r3, #1
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001010:	e002      	b.n	8001018 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	3b01      	subs	r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f9      	bne.n	8001012 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	0018      	movs	r0, r3
 8001024:	f7ff ff86 	bl	8000f34 <LL_ADC_IsInternalRegulatorEnabled>
 8001028:	1e03      	subs	r3, r0, #0
 800102a:	d10f      	bne.n	800104c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001030:	2210      	movs	r2, #16
 8001032:	431a      	orrs	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800103c:	2201      	movs	r2, #1
 800103e:	431a      	orrs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001044:	231f      	movs	r3, #31
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	0018      	movs	r0, r3
 8001052:	f7ff ff94 	bl	8000f7e <LL_ADC_REG_IsConversionOngoing>
 8001056:	0003      	movs	r3, r0
 8001058:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105e:	2210      	movs	r2, #16
 8001060:	4013      	ands	r3, r2
 8001062:	d000      	beq.n	8001066 <HAL_ADC_Init+0xc6>
 8001064:	e122      	b.n	80012ac <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d000      	beq.n	800106e <HAL_ADC_Init+0xce>
 800106c:	e11e      	b.n	80012ac <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001072:	4a99      	ldr	r2, [pc, #612]	@ (80012d8 <HAL_ADC_Init+0x338>)
 8001074:	4013      	ands	r3, r2
 8001076:	2202      	movs	r2, #2
 8001078:	431a      	orrs	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	0018      	movs	r0, r3
 8001084:	f7ff ff6a 	bl	8000f5c <LL_ADC_IsEnabled>
 8001088:	1e03      	subs	r3, r0, #0
 800108a:	d000      	beq.n	800108e <HAL_ADC_Init+0xee>
 800108c:	e0ad      	b.n	80011ea <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	7e1b      	ldrb	r3, [r3, #24]
 8001096:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001098:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	7e5b      	ldrb	r3, [r3, #25]
 800109e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80010a0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	7e9b      	ldrb	r3, [r3, #26]
 80010a6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80010a8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d002      	beq.n	80010b8 <HAL_ADC_Init+0x118>
 80010b2:	2380      	movs	r3, #128	@ 0x80
 80010b4:	015b      	lsls	r3, r3, #5
 80010b6:	e000      	b.n	80010ba <HAL_ADC_Init+0x11a>
 80010b8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80010ba:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80010c0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	da04      	bge.n	80010d4 <HAL_ADC_Init+0x134>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	085b      	lsrs	r3, r3, #1
 80010d2:	e001      	b.n	80010d8 <HAL_ADC_Init+0x138>
 80010d4:	2380      	movs	r3, #128	@ 0x80
 80010d6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80010d8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	212c      	movs	r1, #44	@ 0x2c
 80010de:	5c5b      	ldrb	r3, [r3, r1]
 80010e0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80010e2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2220      	movs	r2, #32
 80010ee:	5c9b      	ldrb	r3, [r3, r2]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d115      	bne.n	8001120 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	7e9b      	ldrb	r3, [r3, #26]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d105      	bne.n	8001108 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	2280      	movs	r2, #128	@ 0x80
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
 8001106:	e00b      	b.n	8001120 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110c:	2220      	movs	r2, #32
 800110e:	431a      	orrs	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001118:	2201      	movs	r2, #1
 800111a:	431a      	orrs	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00a      	beq.n	800113e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800112c:	23e0      	movs	r3, #224	@ 0xe0
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001136:	4313      	orrs	r3, r2
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	4a65      	ldr	r2, [pc, #404]	@ (80012dc <HAL_ADC_Init+0x33c>)
 8001146:	4013      	ands	r3, r2
 8001148:	0019      	movs	r1, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	430a      	orrs	r2, r1
 8001152:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	0f9b      	lsrs	r3, r3, #30
 800115a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001160:	4313      	orrs	r3, r2
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4313      	orrs	r3, r2
 8001166:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	223c      	movs	r2, #60	@ 0x3c
 800116c:	5c9b      	ldrb	r3, [r3, r2]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d111      	bne.n	8001196 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	0f9b      	lsrs	r3, r3, #30
 8001178:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800117e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001184:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800118a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	4313      	orrs	r3, r2
 8001190:	2201      	movs	r2, #1
 8001192:	4313      	orrs	r3, r2
 8001194:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	4a50      	ldr	r2, [pc, #320]	@ (80012e0 <HAL_ADC_Init+0x340>)
 800119e:	4013      	ands	r3, r2
 80011a0:	0019      	movs	r1, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	23c0      	movs	r3, #192	@ 0xc0
 80011b2:	061b      	lsls	r3, r3, #24
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d018      	beq.n	80011ea <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80011bc:	2380      	movs	r3, #128	@ 0x80
 80011be:	05db      	lsls	r3, r3, #23
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d012      	beq.n	80011ea <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80011c8:	2380      	movs	r3, #128	@ 0x80
 80011ca:	061b      	lsls	r3, r3, #24
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d00c      	beq.n	80011ea <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80011d0:	4b44      	ldr	r3, [pc, #272]	@ (80012e4 <HAL_ADC_Init+0x344>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a44      	ldr	r2, [pc, #272]	@ (80012e8 <HAL_ADC_Init+0x348>)
 80011d6:	4013      	ands	r3, r2
 80011d8:	0019      	movs	r1, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	23f0      	movs	r3, #240	@ 0xf0
 80011e0:	039b      	lsls	r3, r3, #14
 80011e2:	401a      	ands	r2, r3
 80011e4:	4b3f      	ldr	r3, [pc, #252]	@ (80012e4 <HAL_ADC_Init+0x344>)
 80011e6:	430a      	orrs	r2, r1
 80011e8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6818      	ldr	r0, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011f2:	001a      	movs	r2, r3
 80011f4:	2100      	movs	r1, #0
 80011f6:	f7ff fdf6 	bl	8000de6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6818      	ldr	r0, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001202:	493a      	ldr	r1, [pc, #232]	@ (80012ec <HAL_ADC_Init+0x34c>)
 8001204:	001a      	movs	r2, r3
 8001206:	f7ff fdee 	bl	8000de6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d109      	bne.n	8001226 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2110      	movs	r1, #16
 800121e:	4249      	negs	r1, r1
 8001220:	430a      	orrs	r2, r1
 8001222:	629a      	str	r2, [r3, #40]	@ 0x28
 8001224:	e018      	b.n	8001258 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691a      	ldr	r2, [r3, #16]
 800122a:	2380      	movs	r3, #128	@ 0x80
 800122c:	039b      	lsls	r3, r3, #14
 800122e:	429a      	cmp	r2, r3
 8001230:	d112      	bne.n	8001258 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	3b01      	subs	r3, #1
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	221c      	movs	r2, #28
 8001242:	4013      	ands	r3, r2
 8001244:	2210      	movs	r2, #16
 8001246:	4252      	negs	r2, r2
 8001248:	409a      	lsls	r2, r3
 800124a:	0011      	movs	r1, r2
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	430a      	orrs	r2, r1
 8001256:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2100      	movs	r1, #0
 800125e:	0018      	movs	r0, r3
 8001260:	f7ff fdde 	bl	8000e20 <LL_ADC_GetSamplingTimeCommonChannels>
 8001264:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800126a:	429a      	cmp	r2, r3
 800126c:	d10b      	bne.n	8001286 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001278:	2203      	movs	r2, #3
 800127a:	4393      	bics	r3, r2
 800127c:	2201      	movs	r2, #1
 800127e:	431a      	orrs	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001284:	e01c      	b.n	80012c0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128a:	2212      	movs	r2, #18
 800128c:	4393      	bics	r3, r2
 800128e:	2210      	movs	r2, #16
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800129a:	2201      	movs	r2, #1
 800129c:	431a      	orrs	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80012a2:	231f      	movs	r3, #31
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80012aa:	e009      	b.n	80012c0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b0:	2210      	movs	r2, #16
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80012b8:	231f      	movs	r3, #31
 80012ba:	18fb      	adds	r3, r7, r3
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80012c0:	231f      	movs	r3, #31
 80012c2:	18fb      	adds	r3, r7, r3
 80012c4:	781b      	ldrb	r3, [r3, #0]
}
 80012c6:	0018      	movs	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b008      	add	sp, #32
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	46c0      	nop			@ (mov r8, r8)
 80012d0:	20000000 	.word	0x20000000
 80012d4:	00030d40 	.word	0x00030d40
 80012d8:	fffffefd 	.word	0xfffffefd
 80012dc:	ffde0201 	.word	0xffde0201
 80012e0:	1ffffc02 	.word	0x1ffffc02
 80012e4:	40012708 	.word	0x40012708
 80012e8:	ffc3ffff 	.word	0xffc3ffff
 80012ec:	07ffff04 	.word	0x07ffff04

080012f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012fa:	2317      	movs	r3, #23
 80012fc:	18fb      	adds	r3, r7, r3
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2254      	movs	r2, #84	@ 0x54
 800130a:	5c9b      	ldrb	r3, [r3, r2]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d101      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x24>
 8001310:	2302      	movs	r3, #2
 8001312:	e1c0      	b.n	8001696 <HAL_ADC_ConfigChannel+0x3a6>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2254      	movs	r2, #84	@ 0x54
 8001318:	2101      	movs	r1, #1
 800131a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	0018      	movs	r0, r3
 8001322:	f7ff fe2c 	bl	8000f7e <LL_ADC_REG_IsConversionOngoing>
 8001326:	1e03      	subs	r3, r0, #0
 8001328:	d000      	beq.n	800132c <HAL_ADC_ConfigChannel+0x3c>
 800132a:	e1a3      	b.n	8001674 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d100      	bne.n	8001336 <HAL_ADC_ConfigChannel+0x46>
 8001334:	e143      	b.n	80015be <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691a      	ldr	r2, [r3, #16]
 800133a:	2380      	movs	r3, #128	@ 0x80
 800133c:	061b      	lsls	r3, r3, #24
 800133e:	429a      	cmp	r2, r3
 8001340:	d004      	beq.n	800134c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001346:	4ac1      	ldr	r2, [pc, #772]	@ (800164c <HAL_ADC_ConfigChannel+0x35c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d108      	bne.n	800135e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	0019      	movs	r1, r3
 8001356:	0010      	movs	r0, r2
 8001358:	f7ff fd99 	bl	8000e8e <LL_ADC_REG_SetSequencerChAdd>
 800135c:	e0c9      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	211f      	movs	r1, #31
 8001368:	400b      	ands	r3, r1
 800136a:	210f      	movs	r1, #15
 800136c:	4099      	lsls	r1, r3
 800136e:	000b      	movs	r3, r1
 8001370:	43db      	mvns	r3, r3
 8001372:	4013      	ands	r3, r2
 8001374:	0019      	movs	r1, r3
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	035b      	lsls	r3, r3, #13
 800137c:	0b5b      	lsrs	r3, r3, #13
 800137e:	d105      	bne.n	800138c <HAL_ADC_ConfigChannel+0x9c>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	0e9b      	lsrs	r3, r3, #26
 8001386:	221f      	movs	r2, #31
 8001388:	4013      	ands	r3, r2
 800138a:	e098      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ce>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2201      	movs	r2, #1
 8001392:	4013      	ands	r3, r2
 8001394:	d000      	beq.n	8001398 <HAL_ADC_ConfigChannel+0xa8>
 8001396:	e091      	b.n	80014bc <HAL_ADC_ConfigChannel+0x1cc>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2202      	movs	r2, #2
 800139e:	4013      	ands	r3, r2
 80013a0:	d000      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0xb4>
 80013a2:	e089      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x1c8>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2204      	movs	r2, #4
 80013aa:	4013      	ands	r3, r2
 80013ac:	d000      	beq.n	80013b0 <HAL_ADC_ConfigChannel+0xc0>
 80013ae:	e081      	b.n	80014b4 <HAL_ADC_ConfigChannel+0x1c4>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2208      	movs	r2, #8
 80013b6:	4013      	ands	r3, r2
 80013b8:	d000      	beq.n	80013bc <HAL_ADC_ConfigChannel+0xcc>
 80013ba:	e079      	b.n	80014b0 <HAL_ADC_ConfigChannel+0x1c0>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2210      	movs	r2, #16
 80013c2:	4013      	ands	r3, r2
 80013c4:	d000      	beq.n	80013c8 <HAL_ADC_ConfigChannel+0xd8>
 80013c6:	e071      	b.n	80014ac <HAL_ADC_ConfigChannel+0x1bc>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2220      	movs	r2, #32
 80013ce:	4013      	ands	r3, r2
 80013d0:	d000      	beq.n	80013d4 <HAL_ADC_ConfigChannel+0xe4>
 80013d2:	e069      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x1b8>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2240      	movs	r2, #64	@ 0x40
 80013da:	4013      	ands	r3, r2
 80013dc:	d000      	beq.n	80013e0 <HAL_ADC_ConfigChannel+0xf0>
 80013de:	e061      	b.n	80014a4 <HAL_ADC_ConfigChannel+0x1b4>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2280      	movs	r2, #128	@ 0x80
 80013e6:	4013      	ands	r3, r2
 80013e8:	d000      	beq.n	80013ec <HAL_ADC_ConfigChannel+0xfc>
 80013ea:	e059      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x1b0>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	2380      	movs	r3, #128	@ 0x80
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4013      	ands	r3, r2
 80013f6:	d151      	bne.n	800149c <HAL_ADC_ConfigChannel+0x1ac>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	2380      	movs	r3, #128	@ 0x80
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4013      	ands	r3, r2
 8001402:	d149      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x1a8>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	2380      	movs	r3, #128	@ 0x80
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	4013      	ands	r3, r2
 800140e:	d141      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x1a4>
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	2380      	movs	r3, #128	@ 0x80
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	4013      	ands	r3, r2
 800141a:	d139      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x1a0>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	2380      	movs	r3, #128	@ 0x80
 8001422:	015b      	lsls	r3, r3, #5
 8001424:	4013      	ands	r3, r2
 8001426:	d131      	bne.n	800148c <HAL_ADC_ConfigChannel+0x19c>
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	2380      	movs	r3, #128	@ 0x80
 800142e:	019b      	lsls	r3, r3, #6
 8001430:	4013      	ands	r3, r2
 8001432:	d129      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x198>
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	2380      	movs	r3, #128	@ 0x80
 800143a:	01db      	lsls	r3, r3, #7
 800143c:	4013      	ands	r3, r2
 800143e:	d121      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x194>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	2380      	movs	r3, #128	@ 0x80
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	4013      	ands	r3, r2
 800144a:	d119      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x190>
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	2380      	movs	r3, #128	@ 0x80
 8001452:	025b      	lsls	r3, r3, #9
 8001454:	4013      	ands	r3, r2
 8001456:	d111      	bne.n	800147c <HAL_ADC_ConfigChannel+0x18c>
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	2380      	movs	r3, #128	@ 0x80
 800145e:	029b      	lsls	r3, r3, #10
 8001460:	4013      	ands	r3, r2
 8001462:	d109      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x188>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	2380      	movs	r3, #128	@ 0x80
 800146a:	02db      	lsls	r3, r3, #11
 800146c:	4013      	ands	r3, r2
 800146e:	d001      	beq.n	8001474 <HAL_ADC_ConfigChannel+0x184>
 8001470:	2312      	movs	r3, #18
 8001472:	e024      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ce>
 8001474:	2300      	movs	r3, #0
 8001476:	e022      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ce>
 8001478:	2311      	movs	r3, #17
 800147a:	e020      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ce>
 800147c:	2310      	movs	r3, #16
 800147e:	e01e      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ce>
 8001480:	230f      	movs	r3, #15
 8001482:	e01c      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ce>
 8001484:	230e      	movs	r3, #14
 8001486:	e01a      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ce>
 8001488:	230d      	movs	r3, #13
 800148a:	e018      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ce>
 800148c:	230c      	movs	r3, #12
 800148e:	e016      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ce>
 8001490:	230b      	movs	r3, #11
 8001492:	e014      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ce>
 8001494:	230a      	movs	r3, #10
 8001496:	e012      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ce>
 8001498:	2309      	movs	r3, #9
 800149a:	e010      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ce>
 800149c:	2308      	movs	r3, #8
 800149e:	e00e      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ce>
 80014a0:	2307      	movs	r3, #7
 80014a2:	e00c      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ce>
 80014a4:	2306      	movs	r3, #6
 80014a6:	e00a      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ce>
 80014a8:	2305      	movs	r3, #5
 80014aa:	e008      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ce>
 80014ac:	2304      	movs	r3, #4
 80014ae:	e006      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ce>
 80014b0:	2303      	movs	r3, #3
 80014b2:	e004      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ce>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e002      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ce>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <HAL_ADC_ConfigChannel+0x1ce>
 80014bc:	2300      	movs	r3, #0
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	6852      	ldr	r2, [r2, #4]
 80014c2:	201f      	movs	r0, #31
 80014c4:	4002      	ands	r2, r0
 80014c6:	4093      	lsls	r3, r2
 80014c8:	000a      	movs	r2, r1
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	089b      	lsrs	r3, r3, #2
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d808      	bhi.n	80014f2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6818      	ldr	r0, [r3, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	6859      	ldr	r1, [r3, #4]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	001a      	movs	r2, r3
 80014ee:	f7ff fcae 	bl	8000e4e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	6819      	ldr	r1, [r3, #0]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	001a      	movs	r2, r3
 8001500:	f7ff fce8 	bl	8000ed4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	db00      	blt.n	800150e <HAL_ADC_ConfigChannel+0x21e>
 800150c:	e0bc      	b.n	8001688 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800150e:	4b50      	ldr	r3, [pc, #320]	@ (8001650 <HAL_ADC_ConfigChannel+0x360>)
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff fc5b 	bl	8000dcc <LL_ADC_GetCommonPathInternalCh>
 8001516:	0003      	movs	r3, r0
 8001518:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a4d      	ldr	r2, [pc, #308]	@ (8001654 <HAL_ADC_ConfigChannel+0x364>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d122      	bne.n	800156a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	2380      	movs	r3, #128	@ 0x80
 8001528:	041b      	lsls	r3, r3, #16
 800152a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800152c:	d11d      	bne.n	800156a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	2280      	movs	r2, #128	@ 0x80
 8001532:	0412      	lsls	r2, r2, #16
 8001534:	4313      	orrs	r3, r2
 8001536:	4a46      	ldr	r2, [pc, #280]	@ (8001650 <HAL_ADC_ConfigChannel+0x360>)
 8001538:	0019      	movs	r1, r3
 800153a:	0010      	movs	r0, r2
 800153c:	f7ff fc32 	bl	8000da4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001540:	4b45      	ldr	r3, [pc, #276]	@ (8001658 <HAL_ADC_ConfigChannel+0x368>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4945      	ldr	r1, [pc, #276]	@ (800165c <HAL_ADC_ConfigChannel+0x36c>)
 8001546:	0018      	movs	r0, r3
 8001548:	f7fe fddc 	bl	8000104 <__udivsi3>
 800154c:	0003      	movs	r3, r0
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	0013      	movs	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	189b      	adds	r3, r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800155a:	e002      	b.n	8001562 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	3b01      	subs	r3, #1
 8001560:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f9      	bne.n	800155c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001568:	e08e      	b.n	8001688 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a3c      	ldr	r2, [pc, #240]	@ (8001660 <HAL_ADC_ConfigChannel+0x370>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d10e      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	2380      	movs	r3, #128	@ 0x80
 8001578:	045b      	lsls	r3, r3, #17
 800157a:	4013      	ands	r3, r2
 800157c:	d109      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	2280      	movs	r2, #128	@ 0x80
 8001582:	0452      	lsls	r2, r2, #17
 8001584:	4313      	orrs	r3, r2
 8001586:	4a32      	ldr	r2, [pc, #200]	@ (8001650 <HAL_ADC_ConfigChannel+0x360>)
 8001588:	0019      	movs	r1, r3
 800158a:	0010      	movs	r0, r2
 800158c:	f7ff fc0a 	bl	8000da4 <LL_ADC_SetCommonPathInternalCh>
 8001590:	e07a      	b.n	8001688 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a33      	ldr	r2, [pc, #204]	@ (8001664 <HAL_ADC_ConfigChannel+0x374>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d000      	beq.n	800159e <HAL_ADC_ConfigChannel+0x2ae>
 800159c:	e074      	b.n	8001688 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	2380      	movs	r3, #128	@ 0x80
 80015a2:	03db      	lsls	r3, r3, #15
 80015a4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80015a6:	d000      	beq.n	80015aa <HAL_ADC_ConfigChannel+0x2ba>
 80015a8:	e06e      	b.n	8001688 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	2280      	movs	r2, #128	@ 0x80
 80015ae:	03d2      	lsls	r2, r2, #15
 80015b0:	4313      	orrs	r3, r2
 80015b2:	4a27      	ldr	r2, [pc, #156]	@ (8001650 <HAL_ADC_ConfigChannel+0x360>)
 80015b4:	0019      	movs	r1, r3
 80015b6:	0010      	movs	r0, r2
 80015b8:	f7ff fbf4 	bl	8000da4 <LL_ADC_SetCommonPathInternalCh>
 80015bc:	e064      	b.n	8001688 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691a      	ldr	r2, [r3, #16]
 80015c2:	2380      	movs	r3, #128	@ 0x80
 80015c4:	061b      	lsls	r3, r3, #24
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d004      	beq.n	80015d4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015ce:	4a1f      	ldr	r2, [pc, #124]	@ (800164c <HAL_ADC_ConfigChannel+0x35c>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d107      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	0019      	movs	r1, r3
 80015de:	0010      	movs	r0, r2
 80015e0:	f7ff fc66 	bl	8000eb0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	da4d      	bge.n	8001688 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015ec:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <HAL_ADC_ConfigChannel+0x360>)
 80015ee:	0018      	movs	r0, r3
 80015f0:	f7ff fbec 	bl	8000dcc <LL_ADC_GetCommonPathInternalCh>
 80015f4:	0003      	movs	r3, r0
 80015f6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a15      	ldr	r2, [pc, #84]	@ (8001654 <HAL_ADC_ConfigChannel+0x364>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d108      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4a18      	ldr	r2, [pc, #96]	@ (8001668 <HAL_ADC_ConfigChannel+0x378>)
 8001606:	4013      	ands	r3, r2
 8001608:	4a11      	ldr	r2, [pc, #68]	@ (8001650 <HAL_ADC_ConfigChannel+0x360>)
 800160a:	0019      	movs	r1, r3
 800160c:	0010      	movs	r0, r2
 800160e:	f7ff fbc9 	bl	8000da4 <LL_ADC_SetCommonPathInternalCh>
 8001612:	e039      	b.n	8001688 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a11      	ldr	r2, [pc, #68]	@ (8001660 <HAL_ADC_ConfigChannel+0x370>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d108      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	4a12      	ldr	r2, [pc, #72]	@ (800166c <HAL_ADC_ConfigChannel+0x37c>)
 8001622:	4013      	ands	r3, r2
 8001624:	4a0a      	ldr	r2, [pc, #40]	@ (8001650 <HAL_ADC_ConfigChannel+0x360>)
 8001626:	0019      	movs	r1, r3
 8001628:	0010      	movs	r0, r2
 800162a:	f7ff fbbb 	bl	8000da4 <LL_ADC_SetCommonPathInternalCh>
 800162e:	e02b      	b.n	8001688 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0b      	ldr	r2, [pc, #44]	@ (8001664 <HAL_ADC_ConfigChannel+0x374>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d126      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4a0c      	ldr	r2, [pc, #48]	@ (8001670 <HAL_ADC_ConfigChannel+0x380>)
 800163e:	4013      	ands	r3, r2
 8001640:	4a03      	ldr	r2, [pc, #12]	@ (8001650 <HAL_ADC_ConfigChannel+0x360>)
 8001642:	0019      	movs	r1, r3
 8001644:	0010      	movs	r0, r2
 8001646:	f7ff fbad 	bl	8000da4 <LL_ADC_SetCommonPathInternalCh>
 800164a:	e01d      	b.n	8001688 <HAL_ADC_ConfigChannel+0x398>
 800164c:	80000004 	.word	0x80000004
 8001650:	40012708 	.word	0x40012708
 8001654:	b0001000 	.word	0xb0001000
 8001658:	20000000 	.word	0x20000000
 800165c:	00030d40 	.word	0x00030d40
 8001660:	b8004000 	.word	0xb8004000
 8001664:	b4002000 	.word	0xb4002000
 8001668:	ff7fffff 	.word	0xff7fffff
 800166c:	feffffff 	.word	0xfeffffff
 8001670:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001678:	2220      	movs	r2, #32
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001680:	2317      	movs	r3, #23
 8001682:	18fb      	adds	r3, r7, r3
 8001684:	2201      	movs	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2254      	movs	r2, #84	@ 0x54
 800168c:	2100      	movs	r1, #0
 800168e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001690:	2317      	movs	r3, #23
 8001692:	18fb      	adds	r3, r7, r3
 8001694:	781b      	ldrb	r3, [r3, #0]
}
 8001696:	0018      	movs	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	b006      	add	sp, #24
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			@ (mov r8, r8)

080016a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	0002      	movs	r2, r0
 80016a8:	1dfb      	adds	r3, r7, #7
 80016aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016ac:	1dfb      	adds	r3, r7, #7
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80016b2:	d809      	bhi.n	80016c8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b4:	1dfb      	adds	r3, r7, #7
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	001a      	movs	r2, r3
 80016ba:	231f      	movs	r3, #31
 80016bc:	401a      	ands	r2, r3
 80016be:	4b04      	ldr	r3, [pc, #16]	@ (80016d0 <__NVIC_EnableIRQ+0x30>)
 80016c0:	2101      	movs	r1, #1
 80016c2:	4091      	lsls	r1, r2
 80016c4:	000a      	movs	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80016c8:	46c0      	nop			@ (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b002      	add	sp, #8
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	e000e100 	.word	0xe000e100

080016d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	0002      	movs	r2, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	1dfb      	adds	r3, r7, #7
 80016e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016e2:	1dfb      	adds	r3, r7, #7
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80016e8:	d828      	bhi.n	800173c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016ea:	4a2f      	ldr	r2, [pc, #188]	@ (80017a8 <__NVIC_SetPriority+0xd4>)
 80016ec:	1dfb      	adds	r3, r7, #7
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	089b      	lsrs	r3, r3, #2
 80016f4:	33c0      	adds	r3, #192	@ 0xc0
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	589b      	ldr	r3, [r3, r2]
 80016fa:	1dfa      	adds	r2, r7, #7
 80016fc:	7812      	ldrb	r2, [r2, #0]
 80016fe:	0011      	movs	r1, r2
 8001700:	2203      	movs	r2, #3
 8001702:	400a      	ands	r2, r1
 8001704:	00d2      	lsls	r2, r2, #3
 8001706:	21ff      	movs	r1, #255	@ 0xff
 8001708:	4091      	lsls	r1, r2
 800170a:	000a      	movs	r2, r1
 800170c:	43d2      	mvns	r2, r2
 800170e:	401a      	ands	r2, r3
 8001710:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	019b      	lsls	r3, r3, #6
 8001716:	22ff      	movs	r2, #255	@ 0xff
 8001718:	401a      	ands	r2, r3
 800171a:	1dfb      	adds	r3, r7, #7
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	0018      	movs	r0, r3
 8001720:	2303      	movs	r3, #3
 8001722:	4003      	ands	r3, r0
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001728:	481f      	ldr	r0, [pc, #124]	@ (80017a8 <__NVIC_SetPriority+0xd4>)
 800172a:	1dfb      	adds	r3, r7, #7
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	b25b      	sxtb	r3, r3
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	430a      	orrs	r2, r1
 8001734:	33c0      	adds	r3, #192	@ 0xc0
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800173a:	e031      	b.n	80017a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800173c:	4a1b      	ldr	r2, [pc, #108]	@ (80017ac <__NVIC_SetPriority+0xd8>)
 800173e:	1dfb      	adds	r3, r7, #7
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	0019      	movs	r1, r3
 8001744:	230f      	movs	r3, #15
 8001746:	400b      	ands	r3, r1
 8001748:	3b08      	subs	r3, #8
 800174a:	089b      	lsrs	r3, r3, #2
 800174c:	3306      	adds	r3, #6
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	18d3      	adds	r3, r2, r3
 8001752:	3304      	adds	r3, #4
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	1dfa      	adds	r2, r7, #7
 8001758:	7812      	ldrb	r2, [r2, #0]
 800175a:	0011      	movs	r1, r2
 800175c:	2203      	movs	r2, #3
 800175e:	400a      	ands	r2, r1
 8001760:	00d2      	lsls	r2, r2, #3
 8001762:	21ff      	movs	r1, #255	@ 0xff
 8001764:	4091      	lsls	r1, r2
 8001766:	000a      	movs	r2, r1
 8001768:	43d2      	mvns	r2, r2
 800176a:	401a      	ands	r2, r3
 800176c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	019b      	lsls	r3, r3, #6
 8001772:	22ff      	movs	r2, #255	@ 0xff
 8001774:	401a      	ands	r2, r3
 8001776:	1dfb      	adds	r3, r7, #7
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	0018      	movs	r0, r3
 800177c:	2303      	movs	r3, #3
 800177e:	4003      	ands	r3, r0
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001784:	4809      	ldr	r0, [pc, #36]	@ (80017ac <__NVIC_SetPriority+0xd8>)
 8001786:	1dfb      	adds	r3, r7, #7
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	001c      	movs	r4, r3
 800178c:	230f      	movs	r3, #15
 800178e:	4023      	ands	r3, r4
 8001790:	3b08      	subs	r3, #8
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	430a      	orrs	r2, r1
 8001796:	3306      	adds	r3, #6
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	18c3      	adds	r3, r0, r3
 800179c:	3304      	adds	r3, #4
 800179e:	601a      	str	r2, [r3, #0]
}
 80017a0:	46c0      	nop			@ (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b003      	add	sp, #12
 80017a6:	bd90      	pop	{r4, r7, pc}
 80017a8:	e000e100 	.word	0xe000e100
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	1e5a      	subs	r2, r3, #1
 80017bc:	2380      	movs	r3, #128	@ 0x80
 80017be:	045b      	lsls	r3, r3, #17
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d301      	bcc.n	80017c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017c4:	2301      	movs	r3, #1
 80017c6:	e010      	b.n	80017ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c8:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <SysTick_Config+0x44>)
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	3a01      	subs	r2, #1
 80017ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d0:	2301      	movs	r3, #1
 80017d2:	425b      	negs	r3, r3
 80017d4:	2103      	movs	r1, #3
 80017d6:	0018      	movs	r0, r3
 80017d8:	f7ff ff7c 	bl	80016d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017dc:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <SysTick_Config+0x44>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e2:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <SysTick_Config+0x44>)
 80017e4:	2207      	movs	r2, #7
 80017e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	0018      	movs	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b002      	add	sp, #8
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	46c0      	nop			@ (mov r8, r8)
 80017f4:	e000e010 	.word	0xe000e010

080017f8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
 8001802:	210f      	movs	r1, #15
 8001804:	187b      	adds	r3, r7, r1
 8001806:	1c02      	adds	r2, r0, #0
 8001808:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	187b      	adds	r3, r7, r1
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	b25b      	sxtb	r3, r3
 8001812:	0011      	movs	r1, r2
 8001814:	0018      	movs	r0, r3
 8001816:	f7ff ff5d 	bl	80016d4 <__NVIC_SetPriority>
}
 800181a:	46c0      	nop			@ (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	b004      	add	sp, #16
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	0002      	movs	r2, r0
 800182a:	1dfb      	adds	r3, r7, #7
 800182c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800182e:	1dfb      	adds	r3, r7, #7
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	b25b      	sxtb	r3, r3
 8001834:	0018      	movs	r0, r3
 8001836:	f7ff ff33 	bl	80016a0 <__NVIC_EnableIRQ>
}
 800183a:	46c0      	nop			@ (mov r8, r8)
 800183c:	46bd      	mov	sp, r7
 800183e:	b002      	add	sp, #8
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	0018      	movs	r0, r3
 800184e:	f7ff ffaf 	bl	80017b0 <SysTick_Config>
 8001852:	0003      	movs	r3, r0
}
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	b002      	add	sp, #8
 800185a:	bd80      	pop	{r7, pc}

0800185c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e077      	b.n	800195e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a3d      	ldr	r2, [pc, #244]	@ (8001968 <HAL_DMA_Init+0x10c>)
 8001874:	4694      	mov	ip, r2
 8001876:	4463      	add	r3, ip
 8001878:	2114      	movs	r1, #20
 800187a:	0018      	movs	r0, r3
 800187c:	f7fe fc42 	bl	8000104 <__udivsi3>
 8001880:	0003      	movs	r3, r0
 8001882:	009a      	lsls	r2, r3, #2
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2225      	movs	r2, #37	@ 0x25
 800188c:	2102      	movs	r1, #2
 800188e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4934      	ldr	r1, [pc, #208]	@ (800196c <HAL_DMA_Init+0x110>)
 800189c:	400a      	ands	r2, r1
 800189e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6819      	ldr	r1, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	0018      	movs	r0, r3
 80018da:	f000 f8fb 	bl	8001ad4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	2380      	movs	r3, #128	@ 0x80
 80018e4:	01db      	lsls	r3, r3, #7
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d102      	bne.n	80018f0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f8:	213f      	movs	r1, #63	@ 0x3f
 80018fa:	400a      	ands	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001906:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d011      	beq.n	8001934 <HAL_DMA_Init+0xd8>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b04      	cmp	r3, #4
 8001916:	d80d      	bhi.n	8001934 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	0018      	movs	r0, r3
 800191c:	f000 f906 	bl	8001b2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	e008      	b.n	8001946 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2225      	movs	r2, #37	@ 0x25
 8001950:	2101      	movs	r1, #1
 8001952:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2224      	movs	r2, #36	@ 0x24
 8001958:	2100      	movs	r1, #0
 800195a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	0018      	movs	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	b002      	add	sp, #8
 8001964:	bd80      	pop	{r7, pc}
 8001966:	46c0      	nop			@ (mov r8, r8)
 8001968:	bffdfff8 	.word	0xbffdfff8
 800196c:	ffff800f 	.word	0xffff800f

08001970 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001978:	4b55      	ldr	r3, [pc, #340]	@ (8001ad0 <HAL_DMA_IRQHandler+0x160>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	221c      	movs	r2, #28
 800198c:	4013      	ands	r3, r2
 800198e:	2204      	movs	r2, #4
 8001990:	409a      	lsls	r2, r3
 8001992:	0013      	movs	r3, r2
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4013      	ands	r3, r2
 8001998:	d027      	beq.n	80019ea <HAL_DMA_IRQHandler+0x7a>
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2204      	movs	r2, #4
 800199e:	4013      	ands	r3, r2
 80019a0:	d023      	beq.n	80019ea <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2220      	movs	r2, #32
 80019aa:	4013      	ands	r3, r2
 80019ac:	d107      	bne.n	80019be <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2104      	movs	r1, #4
 80019ba:	438a      	bics	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80019be:	4b44      	ldr	r3, [pc, #272]	@ (8001ad0 <HAL_DMA_IRQHandler+0x160>)
 80019c0:	6859      	ldr	r1, [r3, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	221c      	movs	r2, #28
 80019c8:	4013      	ands	r3, r2
 80019ca:	2204      	movs	r2, #4
 80019cc:	409a      	lsls	r2, r3
 80019ce:	4b40      	ldr	r3, [pc, #256]	@ (8001ad0 <HAL_DMA_IRQHandler+0x160>)
 80019d0:	430a      	orrs	r2, r1
 80019d2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d100      	bne.n	80019de <HAL_DMA_IRQHandler+0x6e>
 80019dc:	e073      	b.n	8001ac6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	0010      	movs	r0, r2
 80019e6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80019e8:	e06d      	b.n	8001ac6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ee:	221c      	movs	r2, #28
 80019f0:	4013      	ands	r3, r2
 80019f2:	2202      	movs	r2, #2
 80019f4:	409a      	lsls	r2, r3
 80019f6:	0013      	movs	r3, r2
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	4013      	ands	r3, r2
 80019fc:	d02e      	beq.n	8001a5c <HAL_DMA_IRQHandler+0xec>
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2202      	movs	r2, #2
 8001a02:	4013      	ands	r3, r2
 8001a04:	d02a      	beq.n	8001a5c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d10b      	bne.n	8001a2a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	210a      	movs	r1, #10
 8001a1e:	438a      	bics	r2, r1
 8001a20:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2225      	movs	r2, #37	@ 0x25
 8001a26:	2101      	movs	r1, #1
 8001a28:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001a2a:	4b29      	ldr	r3, [pc, #164]	@ (8001ad0 <HAL_DMA_IRQHandler+0x160>)
 8001a2c:	6859      	ldr	r1, [r3, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	221c      	movs	r2, #28
 8001a34:	4013      	ands	r3, r2
 8001a36:	2202      	movs	r2, #2
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	4b25      	ldr	r3, [pc, #148]	@ (8001ad0 <HAL_DMA_IRQHandler+0x160>)
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2224      	movs	r2, #36	@ 0x24
 8001a44:	2100      	movs	r1, #0
 8001a46:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d03a      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	0010      	movs	r0, r2
 8001a58:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001a5a:	e034      	b.n	8001ac6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a60:	221c      	movs	r2, #28
 8001a62:	4013      	ands	r3, r2
 8001a64:	2208      	movs	r2, #8
 8001a66:	409a      	lsls	r2, r3
 8001a68:	0013      	movs	r3, r2
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d02b      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0x158>
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2208      	movs	r2, #8
 8001a74:	4013      	ands	r3, r2
 8001a76:	d027      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	210e      	movs	r1, #14
 8001a84:	438a      	bics	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001a88:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <HAL_DMA_IRQHandler+0x160>)
 8001a8a:	6859      	ldr	r1, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	221c      	movs	r2, #28
 8001a92:	4013      	ands	r3, r2
 8001a94:	2201      	movs	r2, #1
 8001a96:	409a      	lsls	r2, r3
 8001a98:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad0 <HAL_DMA_IRQHandler+0x160>)
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2225      	movs	r2, #37	@ 0x25
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2224      	movs	r2, #36	@ 0x24
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	0010      	movs	r0, r2
 8001ac4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ac6:	46c0      	nop			@ (mov r8, r8)
 8001ac8:	46c0      	nop			@ (mov r8, r8)
}
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b004      	add	sp, #16
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40020000 	.word	0x40020000

08001ad4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	4a10      	ldr	r2, [pc, #64]	@ (8001b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001ae4:	4694      	mov	ip, r2
 8001ae6:	4463      	add	r3, ip
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	001a      	movs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	001a      	movs	r2, r3
 8001af6:	23ff      	movs	r3, #255	@ 0xff
 8001af8:	4013      	ands	r3, r2
 8001afa:	3b08      	subs	r3, #8
 8001afc:	2114      	movs	r1, #20
 8001afe:	0018      	movs	r0, r3
 8001b00:	f7fe fb00 	bl	8000104 <__udivsi3>
 8001b04:	0003      	movs	r3, r0
 8001b06:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a07      	ldr	r2, [pc, #28]	@ (8001b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001b0c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	221f      	movs	r2, #31
 8001b12:	4013      	ands	r3, r2
 8001b14:	2201      	movs	r2, #1
 8001b16:	409a      	lsls	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001b1c:	46c0      	nop			@ (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b004      	add	sp, #16
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	10008200 	.word	0x10008200
 8001b28:	40020880 	.word	0x40020880

08001b2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	223f      	movs	r2, #63	@ 0x3f
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001b42:	4694      	mov	ip, r2
 8001b44:	4463      	add	r3, ip
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	001a      	movs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a07      	ldr	r2, [pc, #28]	@ (8001b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001b52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	2203      	movs	r2, #3
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001b64:	46c0      	nop			@ (mov r8, r8)
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b004      	add	sp, #16
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	1000823f 	.word	0x1000823f
 8001b70:	40020940 	.word	0x40020940

08001b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b82:	e147      	b.n	8001e14 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2101      	movs	r1, #1
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4091      	lsls	r1, r2
 8001b8e:	000a      	movs	r2, r1
 8001b90:	4013      	ands	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d100      	bne.n	8001b9c <HAL_GPIO_Init+0x28>
 8001b9a:	e138      	b.n	8001e0e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d005      	beq.n	8001bb4 <HAL_GPIO_Init+0x40>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2203      	movs	r2, #3
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d130      	bne.n	8001c16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	0013      	movs	r3, r2
 8001bc4:	43da      	mvns	r2, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	0013      	movs	r3, r2
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bea:	2201      	movs	r2, #1
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	0013      	movs	r3, r2
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	091b      	lsrs	r3, r3, #4
 8001c00:	2201      	movs	r2, #1
 8001c02:	401a      	ands	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	409a      	lsls	r2, r3
 8001c08:	0013      	movs	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d017      	beq.n	8001c52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	0013      	movs	r3, r2
 8001c32:	43da      	mvns	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	409a      	lsls	r2, r3
 8001c44:	0013      	movs	r3, r2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2203      	movs	r2, #3
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d123      	bne.n	8001ca6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	08da      	lsrs	r2, r3, #3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3208      	adds	r2, #8
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	58d3      	ldr	r3, [r2, r3]
 8001c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2207      	movs	r2, #7
 8001c70:	4013      	ands	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	220f      	movs	r2, #15
 8001c76:	409a      	lsls	r2, r3
 8001c78:	0013      	movs	r3, r2
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2107      	movs	r1, #7
 8001c8a:	400b      	ands	r3, r1
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	0013      	movs	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	08da      	lsrs	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3208      	adds	r2, #8
 8001ca0:	0092      	lsls	r2, r2, #2
 8001ca2:	6939      	ldr	r1, [r7, #16]
 8001ca4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	0013      	movs	r3, r2
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	401a      	ands	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	0013      	movs	r3, r2
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	23c0      	movs	r3, #192	@ 0xc0
 8001ce0:	029b      	lsls	r3, r3, #10
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d100      	bne.n	8001ce8 <HAL_GPIO_Init+0x174>
 8001ce6:	e092      	b.n	8001e0e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001ce8:	4a50      	ldr	r2, [pc, #320]	@ (8001e2c <HAL_GPIO_Init+0x2b8>)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3318      	adds	r3, #24
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	589b      	ldr	r3, [r3, r2]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	220f      	movs	r2, #15
 8001d00:	409a      	lsls	r2, r3
 8001d02:	0013      	movs	r3, r2
 8001d04:	43da      	mvns	r2, r3
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	23a0      	movs	r3, #160	@ 0xa0
 8001d10:	05db      	lsls	r3, r3, #23
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d013      	beq.n	8001d3e <HAL_GPIO_Init+0x1ca>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a45      	ldr	r2, [pc, #276]	@ (8001e30 <HAL_GPIO_Init+0x2bc>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d00d      	beq.n	8001d3a <HAL_GPIO_Init+0x1c6>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a44      	ldr	r2, [pc, #272]	@ (8001e34 <HAL_GPIO_Init+0x2c0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d007      	beq.n	8001d36 <HAL_GPIO_Init+0x1c2>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a43      	ldr	r2, [pc, #268]	@ (8001e38 <HAL_GPIO_Init+0x2c4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d101      	bne.n	8001d32 <HAL_GPIO_Init+0x1be>
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e006      	b.n	8001d40 <HAL_GPIO_Init+0x1cc>
 8001d32:	2305      	movs	r3, #5
 8001d34:	e004      	b.n	8001d40 <HAL_GPIO_Init+0x1cc>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e002      	b.n	8001d40 <HAL_GPIO_Init+0x1cc>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_GPIO_Init+0x1cc>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	2103      	movs	r1, #3
 8001d44:	400a      	ands	r2, r1
 8001d46:	00d2      	lsls	r2, r2, #3
 8001d48:	4093      	lsls	r3, r2
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001d50:	4936      	ldr	r1, [pc, #216]	@ (8001e2c <HAL_GPIO_Init+0x2b8>)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	3318      	adds	r3, #24
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d5e:	4b33      	ldr	r3, [pc, #204]	@ (8001e2c <HAL_GPIO_Init+0x2b8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	43da      	mvns	r2, r3
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	2380      	movs	r3, #128	@ 0x80
 8001d74:	035b      	lsls	r3, r3, #13
 8001d76:	4013      	ands	r3, r2
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d82:	4b2a      	ldr	r3, [pc, #168]	@ (8001e2c <HAL_GPIO_Init+0x2b8>)
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001d88:	4b28      	ldr	r3, [pc, #160]	@ (8001e2c <HAL_GPIO_Init+0x2b8>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	43da      	mvns	r2, r3
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	2380      	movs	r3, #128	@ 0x80
 8001d9e:	039b      	lsls	r3, r3, #14
 8001da0:	4013      	ands	r3, r2
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dac:	4b1f      	ldr	r3, [pc, #124]	@ (8001e2c <HAL_GPIO_Init+0x2b8>)
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001db2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e2c <HAL_GPIO_Init+0x2b8>)
 8001db4:	2384      	movs	r3, #132	@ 0x84
 8001db6:	58d3      	ldr	r3, [r2, r3]
 8001db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	43da      	mvns	r2, r3
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	2380      	movs	r3, #128	@ 0x80
 8001dca:	029b      	lsls	r3, r3, #10
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dd8:	4914      	ldr	r1, [pc, #80]	@ (8001e2c <HAL_GPIO_Init+0x2b8>)
 8001dda:	2284      	movs	r2, #132	@ 0x84
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001de0:	4a12      	ldr	r2, [pc, #72]	@ (8001e2c <HAL_GPIO_Init+0x2b8>)
 8001de2:	2380      	movs	r3, #128	@ 0x80
 8001de4:	58d3      	ldr	r3, [r2, r3]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	43da      	mvns	r2, r3
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	2380      	movs	r3, #128	@ 0x80
 8001df8:	025b      	lsls	r3, r3, #9
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e06:	4909      	ldr	r1, [pc, #36]	@ (8001e2c <HAL_GPIO_Init+0x2b8>)
 8001e08:	2280      	movs	r2, #128	@ 0x80
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	3301      	adds	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	40da      	lsrs	r2, r3
 8001e1c:	1e13      	subs	r3, r2, #0
 8001e1e:	d000      	beq.n	8001e22 <HAL_GPIO_Init+0x2ae>
 8001e20:	e6b0      	b.n	8001b84 <HAL_GPIO_Init+0x10>
  }
}
 8001e22:	46c0      	nop			@ (mov r8, r8)
 8001e24:	46c0      	nop			@ (mov r8, r8)
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b006      	add	sp, #24
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021800 	.word	0x40021800
 8001e30:	50000400 	.word	0x50000400
 8001e34:	50000800 	.word	0x50000800
 8001e38:	50000c00 	.word	0x50000c00

08001e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	0008      	movs	r0, r1
 8001e46:	0011      	movs	r1, r2
 8001e48:	1cbb      	adds	r3, r7, #2
 8001e4a:	1c02      	adds	r2, r0, #0
 8001e4c:	801a      	strh	r2, [r3, #0]
 8001e4e:	1c7b      	adds	r3, r7, #1
 8001e50:	1c0a      	adds	r2, r1, #0
 8001e52:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e54:	1c7b      	adds	r3, r7, #1
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d004      	beq.n	8001e66 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e5c:	1cbb      	adds	r3, r7, #2
 8001e5e:	881a      	ldrh	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e64:	e003      	b.n	8001e6e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e66:	1cbb      	adds	r3, r7, #2
 8001e68:	881a      	ldrh	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e6e:	46c0      	nop			@ (mov r8, r8)
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b002      	add	sp, #8
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001e80:	4b19      	ldr	r3, [pc, #100]	@ (8001ee8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a19      	ldr	r2, [pc, #100]	@ (8001eec <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001e86:	4013      	ands	r3, r2
 8001e88:	0019      	movs	r1, r3
 8001e8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ee8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	2380      	movs	r3, #128	@ 0x80
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d11f      	bne.n	8001edc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001e9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	0013      	movs	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	189b      	adds	r3, r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	4912      	ldr	r1, [pc, #72]	@ (8001ef4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001eaa:	0018      	movs	r0, r3
 8001eac:	f7fe f92a 	bl	8000104 <__udivsi3>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eb6:	e008      	b.n	8001eca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	e001      	b.n	8001eca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e009      	b.n	8001ede <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eca:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ecc:	695a      	ldr	r2, [r3, #20]
 8001ece:	2380      	movs	r3, #128	@ 0x80
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	2380      	movs	r3, #128	@ 0x80
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d0ed      	beq.n	8001eb8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	0018      	movs	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b004      	add	sp, #16
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			@ (mov r8, r8)
 8001ee8:	40007000 	.word	0x40007000
 8001eec:	fffff9ff 	.word	0xfffff9ff
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	000f4240 	.word	0x000f4240

08001ef8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001efc:	4b03      	ldr	r3, [pc, #12]	@ (8001f0c <LL_RCC_GetAPB1Prescaler+0x14>)
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	23e0      	movs	r3, #224	@ 0xe0
 8001f02:	01db      	lsls	r3, r3, #7
 8001f04:	4013      	ands	r3, r2
}
 8001f06:	0018      	movs	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40021000 	.word	0x40021000

08001f10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e2fe      	b.n	8002520 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2201      	movs	r2, #1
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d100      	bne.n	8001f2e <HAL_RCC_OscConfig+0x1e>
 8001f2c:	e07c      	b.n	8002028 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f2e:	4bc3      	ldr	r3, [pc, #780]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2238      	movs	r2, #56	@ 0x38
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f38:	4bc0      	ldr	r3, [pc, #768]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	4013      	ands	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	2b10      	cmp	r3, #16
 8001f46:	d102      	bne.n	8001f4e <HAL_RCC_OscConfig+0x3e>
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d002      	beq.n	8001f54 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d10b      	bne.n	8001f6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f54:	4bb9      	ldr	r3, [pc, #740]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2380      	movs	r3, #128	@ 0x80
 8001f5a:	029b      	lsls	r3, r3, #10
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d062      	beq.n	8002026 <HAL_RCC_OscConfig+0x116>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d15e      	bne.n	8002026 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e2d9      	b.n	8002520 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	2380      	movs	r3, #128	@ 0x80
 8001f72:	025b      	lsls	r3, r3, #9
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d107      	bne.n	8001f88 <HAL_RCC_OscConfig+0x78>
 8001f78:	4bb0      	ldr	r3, [pc, #704]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4baf      	ldr	r3, [pc, #700]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8001f7e:	2180      	movs	r1, #128	@ 0x80
 8001f80:	0249      	lsls	r1, r1, #9
 8001f82:	430a      	orrs	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	e020      	b.n	8001fca <HAL_RCC_OscConfig+0xba>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	23a0      	movs	r3, #160	@ 0xa0
 8001f8e:	02db      	lsls	r3, r3, #11
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d10e      	bne.n	8001fb2 <HAL_RCC_OscConfig+0xa2>
 8001f94:	4ba9      	ldr	r3, [pc, #676]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4ba8      	ldr	r3, [pc, #672]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8001f9a:	2180      	movs	r1, #128	@ 0x80
 8001f9c:	02c9      	lsls	r1, r1, #11
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	4ba6      	ldr	r3, [pc, #664]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	4ba5      	ldr	r3, [pc, #660]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8001fa8:	2180      	movs	r1, #128	@ 0x80
 8001faa:	0249      	lsls	r1, r1, #9
 8001fac:	430a      	orrs	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	e00b      	b.n	8001fca <HAL_RCC_OscConfig+0xba>
 8001fb2:	4ba2      	ldr	r3, [pc, #648]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	4ba1      	ldr	r3, [pc, #644]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8001fb8:	49a1      	ldr	r1, [pc, #644]	@ (8002240 <HAL_RCC_OscConfig+0x330>)
 8001fba:	400a      	ands	r2, r1
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	4b9f      	ldr	r3, [pc, #636]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4b9e      	ldr	r3, [pc, #632]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8001fc4:	499f      	ldr	r1, [pc, #636]	@ (8002244 <HAL_RCC_OscConfig+0x334>)
 8001fc6:	400a      	ands	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d014      	beq.n	8001ffc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd2:	f7fe fedd 	bl	8000d90 <HAL_GetTick>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fdc:	f7fe fed8 	bl	8000d90 <HAL_GetTick>
 8001fe0:	0002      	movs	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b64      	cmp	r3, #100	@ 0x64
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e298      	b.n	8002520 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fee:	4b93      	ldr	r3, [pc, #588]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	2380      	movs	r3, #128	@ 0x80
 8001ff4:	029b      	lsls	r3, r3, #10
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0xcc>
 8001ffa:	e015      	b.n	8002028 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffc:	f7fe fec8 	bl	8000d90 <HAL_GetTick>
 8002000:	0003      	movs	r3, r0
 8002002:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002006:	f7fe fec3 	bl	8000d90 <HAL_GetTick>
 800200a:	0002      	movs	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b64      	cmp	r3, #100	@ 0x64
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e283      	b.n	8002520 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002018:	4b88      	ldr	r3, [pc, #544]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2380      	movs	r3, #128	@ 0x80
 800201e:	029b      	lsls	r3, r3, #10
 8002020:	4013      	ands	r3, r2
 8002022:	d1f0      	bne.n	8002006 <HAL_RCC_OscConfig+0xf6>
 8002024:	e000      	b.n	8002028 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002026:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2202      	movs	r2, #2
 800202e:	4013      	ands	r3, r2
 8002030:	d100      	bne.n	8002034 <HAL_RCC_OscConfig+0x124>
 8002032:	e099      	b.n	8002168 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002034:	4b81      	ldr	r3, [pc, #516]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2238      	movs	r2, #56	@ 0x38
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800203e:	4b7f      	ldr	r3, [pc, #508]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	2203      	movs	r2, #3
 8002044:	4013      	ands	r3, r2
 8002046:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2b10      	cmp	r3, #16
 800204c:	d102      	bne.n	8002054 <HAL_RCC_OscConfig+0x144>
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d002      	beq.n	800205a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d135      	bne.n	80020c6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800205a:	4b78      	ldr	r3, [pc, #480]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	2380      	movs	r3, #128	@ 0x80
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4013      	ands	r3, r2
 8002064:	d005      	beq.n	8002072 <HAL_RCC_OscConfig+0x162>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e256      	b.n	8002520 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002072:	4b72      	ldr	r3, [pc, #456]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4a74      	ldr	r2, [pc, #464]	@ (8002248 <HAL_RCC_OscConfig+0x338>)
 8002078:	4013      	ands	r3, r2
 800207a:	0019      	movs	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	021a      	lsls	r2, r3, #8
 8002082:	4b6e      	ldr	r3, [pc, #440]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8002084:	430a      	orrs	r2, r1
 8002086:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d112      	bne.n	80020b4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800208e:	4b6b      	ldr	r3, [pc, #428]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a6e      	ldr	r2, [pc, #440]	@ (800224c <HAL_RCC_OscConfig+0x33c>)
 8002094:	4013      	ands	r3, r2
 8002096:	0019      	movs	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	4b67      	ldr	r3, [pc, #412]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 800209e:	430a      	orrs	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80020a2:	4b66      	ldr	r3, [pc, #408]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	0adb      	lsrs	r3, r3, #11
 80020a8:	2207      	movs	r2, #7
 80020aa:	4013      	ands	r3, r2
 80020ac:	4a68      	ldr	r2, [pc, #416]	@ (8002250 <HAL_RCC_OscConfig+0x340>)
 80020ae:	40da      	lsrs	r2, r3
 80020b0:	4b68      	ldr	r3, [pc, #416]	@ (8002254 <HAL_RCC_OscConfig+0x344>)
 80020b2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020b4:	4b68      	ldr	r3, [pc, #416]	@ (8002258 <HAL_RCC_OscConfig+0x348>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	0018      	movs	r0, r3
 80020ba:	f7fe fe0d 	bl	8000cd8 <HAL_InitTick>
 80020be:	1e03      	subs	r3, r0, #0
 80020c0:	d051      	beq.n	8002166 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e22c      	b.n	8002520 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d030      	beq.n	8002130 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020ce:	4b5b      	ldr	r3, [pc, #364]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a5e      	ldr	r2, [pc, #376]	@ (800224c <HAL_RCC_OscConfig+0x33c>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	0019      	movs	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	4b57      	ldr	r3, [pc, #348]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 80020de:	430a      	orrs	r2, r1
 80020e0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80020e2:	4b56      	ldr	r3, [pc, #344]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	4b55      	ldr	r3, [pc, #340]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 80020e8:	2180      	movs	r1, #128	@ 0x80
 80020ea:	0049      	lsls	r1, r1, #1
 80020ec:	430a      	orrs	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f0:	f7fe fe4e 	bl	8000d90 <HAL_GetTick>
 80020f4:	0003      	movs	r3, r0
 80020f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020fa:	f7fe fe49 	bl	8000d90 <HAL_GetTick>
 80020fe:	0002      	movs	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e209      	b.n	8002520 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800210c:	4b4b      	ldr	r3, [pc, #300]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	2380      	movs	r3, #128	@ 0x80
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4013      	ands	r3, r2
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002118:	4b48      	ldr	r3, [pc, #288]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4a4a      	ldr	r2, [pc, #296]	@ (8002248 <HAL_RCC_OscConfig+0x338>)
 800211e:	4013      	ands	r3, r2
 8002120:	0019      	movs	r1, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	021a      	lsls	r2, r3, #8
 8002128:	4b44      	ldr	r3, [pc, #272]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 800212a:	430a      	orrs	r2, r1
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	e01b      	b.n	8002168 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002130:	4b42      	ldr	r3, [pc, #264]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b41      	ldr	r3, [pc, #260]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8002136:	4949      	ldr	r1, [pc, #292]	@ (800225c <HAL_RCC_OscConfig+0x34c>)
 8002138:	400a      	ands	r2, r1
 800213a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7fe fe28 	bl	8000d90 <HAL_GetTick>
 8002140:	0003      	movs	r3, r0
 8002142:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002146:	f7fe fe23 	bl	8000d90 <HAL_GetTick>
 800214a:	0002      	movs	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e1e3      	b.n	8002520 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002158:	4b38      	ldr	r3, [pc, #224]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	2380      	movs	r3, #128	@ 0x80
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4013      	ands	r3, r2
 8002162:	d1f0      	bne.n	8002146 <HAL_RCC_OscConfig+0x236>
 8002164:	e000      	b.n	8002168 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002166:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2208      	movs	r2, #8
 800216e:	4013      	ands	r3, r2
 8002170:	d047      	beq.n	8002202 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002172:	4b32      	ldr	r3, [pc, #200]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2238      	movs	r2, #56	@ 0x38
 8002178:	4013      	ands	r3, r2
 800217a:	2b18      	cmp	r3, #24
 800217c:	d10a      	bne.n	8002194 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800217e:	4b2f      	ldr	r3, [pc, #188]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8002180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002182:	2202      	movs	r2, #2
 8002184:	4013      	ands	r3, r2
 8002186:	d03c      	beq.n	8002202 <HAL_RCC_OscConfig+0x2f2>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d138      	bne.n	8002202 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e1c5      	b.n	8002520 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d019      	beq.n	80021d0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800219c:	4b27      	ldr	r3, [pc, #156]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 800219e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021a0:	4b26      	ldr	r3, [pc, #152]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 80021a2:	2101      	movs	r1, #1
 80021a4:	430a      	orrs	r2, r1
 80021a6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe fdf2 	bl	8000d90 <HAL_GetTick>
 80021ac:	0003      	movs	r3, r0
 80021ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b2:	f7fe fded 	bl	8000d90 <HAL_GetTick>
 80021b6:	0002      	movs	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e1ad      	b.n	8002520 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021c4:	4b1d      	ldr	r3, [pc, #116]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 80021c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c8:	2202      	movs	r2, #2
 80021ca:	4013      	ands	r3, r2
 80021cc:	d0f1      	beq.n	80021b2 <HAL_RCC_OscConfig+0x2a2>
 80021ce:	e018      	b.n	8002202 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80021d0:	4b1a      	ldr	r3, [pc, #104]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 80021d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021d4:	4b19      	ldr	r3, [pc, #100]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 80021d6:	2101      	movs	r1, #1
 80021d8:	438a      	bics	r2, r1
 80021da:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7fe fdd8 	bl	8000d90 <HAL_GetTick>
 80021e0:	0003      	movs	r3, r0
 80021e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e6:	f7fe fdd3 	bl	8000d90 <HAL_GetTick>
 80021ea:	0002      	movs	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e193      	b.n	8002520 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021f8:	4b10      	ldr	r3, [pc, #64]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 80021fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021fc:	2202      	movs	r2, #2
 80021fe:	4013      	ands	r3, r2
 8002200:	d1f1      	bne.n	80021e6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2204      	movs	r2, #4
 8002208:	4013      	ands	r3, r2
 800220a:	d100      	bne.n	800220e <HAL_RCC_OscConfig+0x2fe>
 800220c:	e0c6      	b.n	800239c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800220e:	231f      	movs	r3, #31
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002216:	4b09      	ldr	r3, [pc, #36]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2238      	movs	r2, #56	@ 0x38
 800221c:	4013      	ands	r3, r2
 800221e:	2b20      	cmp	r3, #32
 8002220:	d11e      	bne.n	8002260 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <HAL_RCC_OscConfig+0x32c>)
 8002224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002226:	2202      	movs	r2, #2
 8002228:	4013      	ands	r3, r2
 800222a:	d100      	bne.n	800222e <HAL_RCC_OscConfig+0x31e>
 800222c:	e0b6      	b.n	800239c <HAL_RCC_OscConfig+0x48c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d000      	beq.n	8002238 <HAL_RCC_OscConfig+0x328>
 8002236:	e0b1      	b.n	800239c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e171      	b.n	8002520 <HAL_RCC_OscConfig+0x610>
 800223c:	40021000 	.word	0x40021000
 8002240:	fffeffff 	.word	0xfffeffff
 8002244:	fffbffff 	.word	0xfffbffff
 8002248:	ffff80ff 	.word	0xffff80ff
 800224c:	ffffc7ff 	.word	0xffffc7ff
 8002250:	00f42400 	.word	0x00f42400
 8002254:	20000000 	.word	0x20000000
 8002258:	20000004 	.word	0x20000004
 800225c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002260:	4bb1      	ldr	r3, [pc, #708]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 8002262:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002264:	2380      	movs	r3, #128	@ 0x80
 8002266:	055b      	lsls	r3, r3, #21
 8002268:	4013      	ands	r3, r2
 800226a:	d101      	bne.n	8002270 <HAL_RCC_OscConfig+0x360>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <HAL_RCC_OscConfig+0x362>
 8002270:	2300      	movs	r3, #0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d011      	beq.n	800229a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	4bac      	ldr	r3, [pc, #688]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 8002278:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800227a:	4bab      	ldr	r3, [pc, #684]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 800227c:	2180      	movs	r1, #128	@ 0x80
 800227e:	0549      	lsls	r1, r1, #21
 8002280:	430a      	orrs	r2, r1
 8002282:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002284:	4ba8      	ldr	r3, [pc, #672]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 8002286:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002288:	2380      	movs	r3, #128	@ 0x80
 800228a:	055b      	lsls	r3, r3, #21
 800228c:	4013      	ands	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002292:	231f      	movs	r3, #31
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	2201      	movs	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800229a:	4ba4      	ldr	r3, [pc, #656]	@ (800252c <HAL_RCC_OscConfig+0x61c>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	2380      	movs	r3, #128	@ 0x80
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4013      	ands	r3, r2
 80022a4:	d11a      	bne.n	80022dc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022a6:	4ba1      	ldr	r3, [pc, #644]	@ (800252c <HAL_RCC_OscConfig+0x61c>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	4ba0      	ldr	r3, [pc, #640]	@ (800252c <HAL_RCC_OscConfig+0x61c>)
 80022ac:	2180      	movs	r1, #128	@ 0x80
 80022ae:	0049      	lsls	r1, r1, #1
 80022b0:	430a      	orrs	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80022b4:	f7fe fd6c 	bl	8000d90 <HAL_GetTick>
 80022b8:	0003      	movs	r3, r0
 80022ba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022be:	f7fe fd67 	bl	8000d90 <HAL_GetTick>
 80022c2:	0002      	movs	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e127      	b.n	8002520 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d0:	4b96      	ldr	r3, [pc, #600]	@ (800252c <HAL_RCC_OscConfig+0x61c>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	2380      	movs	r3, #128	@ 0x80
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4013      	ands	r3, r2
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d106      	bne.n	80022f2 <HAL_RCC_OscConfig+0x3e2>
 80022e4:	4b90      	ldr	r3, [pc, #576]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 80022e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022e8:	4b8f      	ldr	r3, [pc, #572]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 80022ea:	2101      	movs	r1, #1
 80022ec:	430a      	orrs	r2, r1
 80022ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022f0:	e01c      	b.n	800232c <HAL_RCC_OscConfig+0x41c>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b05      	cmp	r3, #5
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0x404>
 80022fa:	4b8b      	ldr	r3, [pc, #556]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 80022fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022fe:	4b8a      	ldr	r3, [pc, #552]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 8002300:	2104      	movs	r1, #4
 8002302:	430a      	orrs	r2, r1
 8002304:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002306:	4b88      	ldr	r3, [pc, #544]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 8002308:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800230a:	4b87      	ldr	r3, [pc, #540]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 800230c:	2101      	movs	r1, #1
 800230e:	430a      	orrs	r2, r1
 8002310:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002312:	e00b      	b.n	800232c <HAL_RCC_OscConfig+0x41c>
 8002314:	4b84      	ldr	r3, [pc, #528]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 8002316:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002318:	4b83      	ldr	r3, [pc, #524]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 800231a:	2101      	movs	r1, #1
 800231c:	438a      	bics	r2, r1
 800231e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002320:	4b81      	ldr	r3, [pc, #516]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 8002322:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002324:	4b80      	ldr	r3, [pc, #512]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 8002326:	2104      	movs	r1, #4
 8002328:	438a      	bics	r2, r1
 800232a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d014      	beq.n	800235e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7fe fd2c 	bl	8000d90 <HAL_GetTick>
 8002338:	0003      	movs	r3, r0
 800233a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800233c:	e009      	b.n	8002352 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233e:	f7fe fd27 	bl	8000d90 <HAL_GetTick>
 8002342:	0002      	movs	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	4a79      	ldr	r2, [pc, #484]	@ (8002530 <HAL_RCC_OscConfig+0x620>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e0e6      	b.n	8002520 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002352:	4b75      	ldr	r3, [pc, #468]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 8002354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002356:	2202      	movs	r2, #2
 8002358:	4013      	ands	r3, r2
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x42e>
 800235c:	e013      	b.n	8002386 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235e:	f7fe fd17 	bl	8000d90 <HAL_GetTick>
 8002362:	0003      	movs	r3, r0
 8002364:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002366:	e009      	b.n	800237c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002368:	f7fe fd12 	bl	8000d90 <HAL_GetTick>
 800236c:	0002      	movs	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	4a6f      	ldr	r2, [pc, #444]	@ (8002530 <HAL_RCC_OscConfig+0x620>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e0d1      	b.n	8002520 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800237c:	4b6a      	ldr	r3, [pc, #424]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 800237e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002380:	2202      	movs	r2, #2
 8002382:	4013      	ands	r3, r2
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002386:	231f      	movs	r3, #31
 8002388:	18fb      	adds	r3, r7, r3
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d105      	bne.n	800239c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002390:	4b65      	ldr	r3, [pc, #404]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 8002392:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002394:	4b64      	ldr	r3, [pc, #400]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 8002396:	4967      	ldr	r1, [pc, #412]	@ (8002534 <HAL_RCC_OscConfig+0x624>)
 8002398:	400a      	ands	r2, r1
 800239a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d100      	bne.n	80023a6 <HAL_RCC_OscConfig+0x496>
 80023a4:	e0bb      	b.n	800251e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023a6:	4b60      	ldr	r3, [pc, #384]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2238      	movs	r2, #56	@ 0x38
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b10      	cmp	r3, #16
 80023b0:	d100      	bne.n	80023b4 <HAL_RCC_OscConfig+0x4a4>
 80023b2:	e07b      	b.n	80024ac <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d156      	bne.n	800246a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023bc:	4b5a      	ldr	r3, [pc, #360]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4b59      	ldr	r3, [pc, #356]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 80023c2:	495d      	ldr	r1, [pc, #372]	@ (8002538 <HAL_RCC_OscConfig+0x628>)
 80023c4:	400a      	ands	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7fe fce2 	bl	8000d90 <HAL_GetTick>
 80023cc:	0003      	movs	r3, r0
 80023ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d2:	f7fe fcdd 	bl	8000d90 <HAL_GetTick>
 80023d6:	0002      	movs	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e09d      	b.n	8002520 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e4:	4b50      	ldr	r3, [pc, #320]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2380      	movs	r3, #128	@ 0x80
 80023ea:	049b      	lsls	r3, r3, #18
 80023ec:	4013      	ands	r3, r2
 80023ee:	d1f0      	bne.n	80023d2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4a51      	ldr	r2, [pc, #324]	@ (800253c <HAL_RCC_OscConfig+0x62c>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	0019      	movs	r1, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1a      	ldr	r2, [r3, #32]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002408:	021b      	lsls	r3, r3, #8
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800241c:	431a      	orrs	r2, r3
 800241e:	4b42      	ldr	r3, [pc, #264]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 8002420:	430a      	orrs	r2, r1
 8002422:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002424:	4b40      	ldr	r3, [pc, #256]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b3f      	ldr	r3, [pc, #252]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 800242a:	2180      	movs	r1, #128	@ 0x80
 800242c:	0449      	lsls	r1, r1, #17
 800242e:	430a      	orrs	r2, r1
 8002430:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002432:	4b3d      	ldr	r3, [pc, #244]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	4b3c      	ldr	r3, [pc, #240]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 8002438:	2180      	movs	r1, #128	@ 0x80
 800243a:	0549      	lsls	r1, r1, #21
 800243c:	430a      	orrs	r2, r1
 800243e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7fe fca6 	bl	8000d90 <HAL_GetTick>
 8002444:	0003      	movs	r3, r0
 8002446:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244a:	f7fe fca1 	bl	8000d90 <HAL_GetTick>
 800244e:	0002      	movs	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e061      	b.n	8002520 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800245c:	4b32      	ldr	r3, [pc, #200]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	2380      	movs	r3, #128	@ 0x80
 8002462:	049b      	lsls	r3, r3, #18
 8002464:	4013      	ands	r3, r2
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0x53a>
 8002468:	e059      	b.n	800251e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246a:	4b2f      	ldr	r3, [pc, #188]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4b2e      	ldr	r3, [pc, #184]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 8002470:	4931      	ldr	r1, [pc, #196]	@ (8002538 <HAL_RCC_OscConfig+0x628>)
 8002472:	400a      	ands	r2, r1
 8002474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002476:	f7fe fc8b 	bl	8000d90 <HAL_GetTick>
 800247a:	0003      	movs	r3, r0
 800247c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002480:	f7fe fc86 	bl	8000d90 <HAL_GetTick>
 8002484:	0002      	movs	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e046      	b.n	8002520 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002492:	4b25      	ldr	r3, [pc, #148]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	2380      	movs	r3, #128	@ 0x80
 8002498:	049b      	lsls	r3, r3, #18
 800249a:	4013      	ands	r3, r2
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800249e:	4b22      	ldr	r3, [pc, #136]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	4b21      	ldr	r3, [pc, #132]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 80024a4:	4926      	ldr	r1, [pc, #152]	@ (8002540 <HAL_RCC_OscConfig+0x630>)
 80024a6:	400a      	ands	r2, r1
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	e038      	b.n	800251e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e033      	b.n	8002520 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80024b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002528 <HAL_RCC_OscConfig+0x618>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2203      	movs	r2, #3
 80024c2:	401a      	ands	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d126      	bne.n	800251a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2270      	movs	r2, #112	@ 0x70
 80024d0:	401a      	ands	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d11f      	bne.n	800251a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	23fe      	movs	r3, #254	@ 0xfe
 80024de:	01db      	lsls	r3, r3, #7
 80024e0:	401a      	ands	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d116      	bne.n	800251a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	23f8      	movs	r3, #248	@ 0xf8
 80024f0:	039b      	lsls	r3, r3, #14
 80024f2:	401a      	ands	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d10e      	bne.n	800251a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	23e0      	movs	r3, #224	@ 0xe0
 8002500:	051b      	lsls	r3, r3, #20
 8002502:	401a      	ands	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002508:	429a      	cmp	r2, r3
 800250a:	d106      	bne.n	800251a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	0f5b      	lsrs	r3, r3, #29
 8002510:	075a      	lsls	r2, r3, #29
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002516:	429a      	cmp	r2, r3
 8002518:	d001      	beq.n	800251e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	0018      	movs	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	b008      	add	sp, #32
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000
 800252c:	40007000 	.word	0x40007000
 8002530:	00001388 	.word	0x00001388
 8002534:	efffffff 	.word	0xefffffff
 8002538:	feffffff 	.word	0xfeffffff
 800253c:	11c1808c 	.word	0x11c1808c
 8002540:	eefefffc 	.word	0xeefefffc

08002544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0e9      	b.n	800272c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002558:	4b76      	ldr	r3, [pc, #472]	@ (8002734 <HAL_RCC_ClockConfig+0x1f0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2207      	movs	r2, #7
 800255e:	4013      	ands	r3, r2
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d91e      	bls.n	80025a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002566:	4b73      	ldr	r3, [pc, #460]	@ (8002734 <HAL_RCC_ClockConfig+0x1f0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2207      	movs	r2, #7
 800256c:	4393      	bics	r3, r2
 800256e:	0019      	movs	r1, r3
 8002570:	4b70      	ldr	r3, [pc, #448]	@ (8002734 <HAL_RCC_ClockConfig+0x1f0>)
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002578:	f7fe fc0a 	bl	8000d90 <HAL_GetTick>
 800257c:	0003      	movs	r3, r0
 800257e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002580:	e009      	b.n	8002596 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002582:	f7fe fc05 	bl	8000d90 <HAL_GetTick>
 8002586:	0002      	movs	r2, r0
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	4a6a      	ldr	r2, [pc, #424]	@ (8002738 <HAL_RCC_ClockConfig+0x1f4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e0ca      	b.n	800272c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002596:	4b67      	ldr	r3, [pc, #412]	@ (8002734 <HAL_RCC_ClockConfig+0x1f0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2207      	movs	r2, #7
 800259c:	4013      	ands	r3, r2
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d1ee      	bne.n	8002582 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2202      	movs	r2, #2
 80025aa:	4013      	ands	r3, r2
 80025ac:	d015      	beq.n	80025da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2204      	movs	r2, #4
 80025b4:	4013      	ands	r3, r2
 80025b6:	d006      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025b8:	4b60      	ldr	r3, [pc, #384]	@ (800273c <HAL_RCC_ClockConfig+0x1f8>)
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	4b5f      	ldr	r3, [pc, #380]	@ (800273c <HAL_RCC_ClockConfig+0x1f8>)
 80025be:	21e0      	movs	r1, #224	@ 0xe0
 80025c0:	01c9      	lsls	r1, r1, #7
 80025c2:	430a      	orrs	r2, r1
 80025c4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c6:	4b5d      	ldr	r3, [pc, #372]	@ (800273c <HAL_RCC_ClockConfig+0x1f8>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	4a5d      	ldr	r2, [pc, #372]	@ (8002740 <HAL_RCC_ClockConfig+0x1fc>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	0019      	movs	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	4b59      	ldr	r3, [pc, #356]	@ (800273c <HAL_RCC_ClockConfig+0x1f8>)
 80025d6:	430a      	orrs	r2, r1
 80025d8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2201      	movs	r2, #1
 80025e0:	4013      	ands	r3, r2
 80025e2:	d057      	beq.n	8002694 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ec:	4b53      	ldr	r3, [pc, #332]	@ (800273c <HAL_RCC_ClockConfig+0x1f8>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	2380      	movs	r3, #128	@ 0x80
 80025f2:	029b      	lsls	r3, r3, #10
 80025f4:	4013      	ands	r3, r2
 80025f6:	d12b      	bne.n	8002650 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e097      	b.n	800272c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d107      	bne.n	8002614 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002604:	4b4d      	ldr	r3, [pc, #308]	@ (800273c <HAL_RCC_ClockConfig+0x1f8>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2380      	movs	r3, #128	@ 0x80
 800260a:	049b      	lsls	r3, r3, #18
 800260c:	4013      	ands	r3, r2
 800260e:	d11f      	bne.n	8002650 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e08b      	b.n	800272c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d107      	bne.n	800262c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800261c:	4b47      	ldr	r3, [pc, #284]	@ (800273c <HAL_RCC_ClockConfig+0x1f8>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	2380      	movs	r3, #128	@ 0x80
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4013      	ands	r3, r2
 8002626:	d113      	bne.n	8002650 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e07f      	b.n	800272c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d106      	bne.n	8002642 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002634:	4b41      	ldr	r3, [pc, #260]	@ (800273c <HAL_RCC_ClockConfig+0x1f8>)
 8002636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002638:	2202      	movs	r2, #2
 800263a:	4013      	ands	r3, r2
 800263c:	d108      	bne.n	8002650 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e074      	b.n	800272c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002642:	4b3e      	ldr	r3, [pc, #248]	@ (800273c <HAL_RCC_ClockConfig+0x1f8>)
 8002644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002646:	2202      	movs	r2, #2
 8002648:	4013      	ands	r3, r2
 800264a:	d101      	bne.n	8002650 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e06d      	b.n	800272c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002650:	4b3a      	ldr	r3, [pc, #232]	@ (800273c <HAL_RCC_ClockConfig+0x1f8>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2207      	movs	r2, #7
 8002656:	4393      	bics	r3, r2
 8002658:	0019      	movs	r1, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	4b37      	ldr	r3, [pc, #220]	@ (800273c <HAL_RCC_ClockConfig+0x1f8>)
 8002660:	430a      	orrs	r2, r1
 8002662:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002664:	f7fe fb94 	bl	8000d90 <HAL_GetTick>
 8002668:	0003      	movs	r3, r0
 800266a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266c:	e009      	b.n	8002682 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800266e:	f7fe fb8f 	bl	8000d90 <HAL_GetTick>
 8002672:	0002      	movs	r2, r0
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	4a2f      	ldr	r2, [pc, #188]	@ (8002738 <HAL_RCC_ClockConfig+0x1f4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e054      	b.n	800272c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	4b2e      	ldr	r3, [pc, #184]	@ (800273c <HAL_RCC_ClockConfig+0x1f8>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2238      	movs	r2, #56	@ 0x38
 8002688:	401a      	ands	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	429a      	cmp	r2, r3
 8002692:	d1ec      	bne.n	800266e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002694:	4b27      	ldr	r3, [pc, #156]	@ (8002734 <HAL_RCC_ClockConfig+0x1f0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2207      	movs	r2, #7
 800269a:	4013      	ands	r3, r2
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d21e      	bcs.n	80026e0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b24      	ldr	r3, [pc, #144]	@ (8002734 <HAL_RCC_ClockConfig+0x1f0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2207      	movs	r2, #7
 80026a8:	4393      	bics	r3, r2
 80026aa:	0019      	movs	r1, r3
 80026ac:	4b21      	ldr	r3, [pc, #132]	@ (8002734 <HAL_RCC_ClockConfig+0x1f0>)
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026b4:	f7fe fb6c 	bl	8000d90 <HAL_GetTick>
 80026b8:	0003      	movs	r3, r0
 80026ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026bc:	e009      	b.n	80026d2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026be:	f7fe fb67 	bl	8000d90 <HAL_GetTick>
 80026c2:	0002      	movs	r2, r0
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002738 <HAL_RCC_ClockConfig+0x1f4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e02c      	b.n	800272c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026d2:	4b18      	ldr	r3, [pc, #96]	@ (8002734 <HAL_RCC_ClockConfig+0x1f0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2207      	movs	r2, #7
 80026d8:	4013      	ands	r3, r2
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d1ee      	bne.n	80026be <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2204      	movs	r2, #4
 80026e6:	4013      	ands	r3, r2
 80026e8:	d009      	beq.n	80026fe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026ea:	4b14      	ldr	r3, [pc, #80]	@ (800273c <HAL_RCC_ClockConfig+0x1f8>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	4a15      	ldr	r2, [pc, #84]	@ (8002744 <HAL_RCC_ClockConfig+0x200>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	0019      	movs	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	4b10      	ldr	r3, [pc, #64]	@ (800273c <HAL_RCC_ClockConfig+0x1f8>)
 80026fa:	430a      	orrs	r2, r1
 80026fc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80026fe:	f000 f829 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 8002702:	0001      	movs	r1, r0
 8002704:	4b0d      	ldr	r3, [pc, #52]	@ (800273c <HAL_RCC_ClockConfig+0x1f8>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	220f      	movs	r2, #15
 800270c:	401a      	ands	r2, r3
 800270e:	4b0e      	ldr	r3, [pc, #56]	@ (8002748 <HAL_RCC_ClockConfig+0x204>)
 8002710:	0092      	lsls	r2, r2, #2
 8002712:	58d3      	ldr	r3, [r2, r3]
 8002714:	221f      	movs	r2, #31
 8002716:	4013      	ands	r3, r2
 8002718:	000a      	movs	r2, r1
 800271a:	40da      	lsrs	r2, r3
 800271c:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <HAL_RCC_ClockConfig+0x208>)
 800271e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002720:	4b0b      	ldr	r3, [pc, #44]	@ (8002750 <HAL_RCC_ClockConfig+0x20c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	0018      	movs	r0, r3
 8002726:	f7fe fad7 	bl	8000cd8 <HAL_InitTick>
 800272a:	0003      	movs	r3, r0
}
 800272c:	0018      	movs	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	b004      	add	sp, #16
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40022000 	.word	0x40022000
 8002738:	00001388 	.word	0x00001388
 800273c:	40021000 	.word	0x40021000
 8002740:	fffff0ff 	.word	0xfffff0ff
 8002744:	ffff8fff 	.word	0xffff8fff
 8002748:	0800461c 	.word	0x0800461c
 800274c:	20000000 	.word	0x20000000
 8002750:	20000004 	.word	0x20000004

08002754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800275a:	4b3c      	ldr	r3, [pc, #240]	@ (800284c <HAL_RCC_GetSysClockFreq+0xf8>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2238      	movs	r2, #56	@ 0x38
 8002760:	4013      	ands	r3, r2
 8002762:	d10f      	bne.n	8002784 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002764:	4b39      	ldr	r3, [pc, #228]	@ (800284c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	0adb      	lsrs	r3, r3, #11
 800276a:	2207      	movs	r2, #7
 800276c:	4013      	ands	r3, r2
 800276e:	2201      	movs	r2, #1
 8002770:	409a      	lsls	r2, r3
 8002772:	0013      	movs	r3, r2
 8002774:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002776:	6839      	ldr	r1, [r7, #0]
 8002778:	4835      	ldr	r0, [pc, #212]	@ (8002850 <HAL_RCC_GetSysClockFreq+0xfc>)
 800277a:	f7fd fcc3 	bl	8000104 <__udivsi3>
 800277e:	0003      	movs	r3, r0
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	e05d      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002784:	4b31      	ldr	r3, [pc, #196]	@ (800284c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2238      	movs	r2, #56	@ 0x38
 800278a:	4013      	ands	r3, r2
 800278c:	2b08      	cmp	r3, #8
 800278e:	d102      	bne.n	8002796 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002790:	4b30      	ldr	r3, [pc, #192]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x100>)
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	e054      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002796:	4b2d      	ldr	r3, [pc, #180]	@ (800284c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2238      	movs	r2, #56	@ 0x38
 800279c:	4013      	ands	r3, r2
 800279e:	2b10      	cmp	r3, #16
 80027a0:	d138      	bne.n	8002814 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80027a2:	4b2a      	ldr	r3, [pc, #168]	@ (800284c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2203      	movs	r2, #3
 80027a8:	4013      	ands	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027ac:	4b27      	ldr	r3, [pc, #156]	@ (800284c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	2207      	movs	r2, #7
 80027b4:	4013      	ands	r3, r2
 80027b6:	3301      	adds	r3, #1
 80027b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d10d      	bne.n	80027dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	4824      	ldr	r0, [pc, #144]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x100>)
 80027c4:	f7fd fc9e 	bl	8000104 <__udivsi3>
 80027c8:	0003      	movs	r3, r0
 80027ca:	0019      	movs	r1, r3
 80027cc:	4b1f      	ldr	r3, [pc, #124]	@ (800284c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	0a1b      	lsrs	r3, r3, #8
 80027d2:	227f      	movs	r2, #127	@ 0x7f
 80027d4:	4013      	ands	r3, r2
 80027d6:	434b      	muls	r3, r1
 80027d8:	617b      	str	r3, [r7, #20]
        break;
 80027da:	e00d      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	481c      	ldr	r0, [pc, #112]	@ (8002850 <HAL_RCC_GetSysClockFreq+0xfc>)
 80027e0:	f7fd fc90 	bl	8000104 <__udivsi3>
 80027e4:	0003      	movs	r3, r0
 80027e6:	0019      	movs	r1, r3
 80027e8:	4b18      	ldr	r3, [pc, #96]	@ (800284c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	0a1b      	lsrs	r3, r3, #8
 80027ee:	227f      	movs	r2, #127	@ 0x7f
 80027f0:	4013      	ands	r3, r2
 80027f2:	434b      	muls	r3, r1
 80027f4:	617b      	str	r3, [r7, #20]
        break;
 80027f6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80027f8:	4b14      	ldr	r3, [pc, #80]	@ (800284c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	0f5b      	lsrs	r3, r3, #29
 80027fe:	2207      	movs	r2, #7
 8002800:	4013      	ands	r3, r2
 8002802:	3301      	adds	r3, #1
 8002804:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	6978      	ldr	r0, [r7, #20]
 800280a:	f7fd fc7b 	bl	8000104 <__udivsi3>
 800280e:	0003      	movs	r3, r0
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	e015      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002814:	4b0d      	ldr	r3, [pc, #52]	@ (800284c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2238      	movs	r2, #56	@ 0x38
 800281a:	4013      	ands	r3, r2
 800281c:	2b20      	cmp	r3, #32
 800281e:	d103      	bne.n	8002828 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002820:	2380      	movs	r3, #128	@ 0x80
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	e00b      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002828:	4b08      	ldr	r3, [pc, #32]	@ (800284c <HAL_RCC_GetSysClockFreq+0xf8>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2238      	movs	r2, #56	@ 0x38
 800282e:	4013      	ands	r3, r2
 8002830:	2b18      	cmp	r3, #24
 8002832:	d103      	bne.n	800283c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002834:	23fa      	movs	r3, #250	@ 0xfa
 8002836:	01db      	lsls	r3, r3, #7
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	e001      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002840:	693b      	ldr	r3, [r7, #16]
}
 8002842:	0018      	movs	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	b006      	add	sp, #24
 8002848:	bd80      	pop	{r7, pc}
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	40021000 	.word	0x40021000
 8002850:	00f42400 	.word	0x00f42400
 8002854:	007a1200 	.word	0x007a1200

08002858 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800285c:	4b02      	ldr	r3, [pc, #8]	@ (8002868 <HAL_RCC_GetHCLKFreq+0x10>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	0018      	movs	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			@ (mov r8, r8)
 8002868:	20000000 	.word	0x20000000

0800286c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800286c:	b5b0      	push	{r4, r5, r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002870:	f7ff fff2 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 8002874:	0004      	movs	r4, r0
 8002876:	f7ff fb3f 	bl	8001ef8 <LL_RCC_GetAPB1Prescaler>
 800287a:	0003      	movs	r3, r0
 800287c:	0b1a      	lsrs	r2, r3, #12
 800287e:	4b05      	ldr	r3, [pc, #20]	@ (8002894 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002880:	0092      	lsls	r2, r2, #2
 8002882:	58d3      	ldr	r3, [r2, r3]
 8002884:	221f      	movs	r2, #31
 8002886:	4013      	ands	r3, r2
 8002888:	40dc      	lsrs	r4, r3
 800288a:	0023      	movs	r3, r4
}
 800288c:	0018      	movs	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	bdb0      	pop	{r4, r5, r7, pc}
 8002892:	46c0      	nop			@ (mov r8, r8)
 8002894:	0800465c 	.word	0x0800465c

08002898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80028a0:	2313      	movs	r3, #19
 80028a2:	18fb      	adds	r3, r7, r3
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028a8:	2312      	movs	r3, #18
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	2380      	movs	r3, #128	@ 0x80
 80028b6:	029b      	lsls	r3, r3, #10
 80028b8:	4013      	ands	r3, r2
 80028ba:	d100      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x26>
 80028bc:	e0a3      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028be:	2011      	movs	r0, #17
 80028c0:	183b      	adds	r3, r7, r0
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c6:	4ba5      	ldr	r3, [pc, #660]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028ca:	2380      	movs	r3, #128	@ 0x80
 80028cc:	055b      	lsls	r3, r3, #21
 80028ce:	4013      	ands	r3, r2
 80028d0:	d110      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d2:	4ba2      	ldr	r3, [pc, #648]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028d6:	4ba1      	ldr	r3, [pc, #644]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028d8:	2180      	movs	r1, #128	@ 0x80
 80028da:	0549      	lsls	r1, r1, #21
 80028dc:	430a      	orrs	r2, r1
 80028de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028e0:	4b9e      	ldr	r3, [pc, #632]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028e4:	2380      	movs	r3, #128	@ 0x80
 80028e6:	055b      	lsls	r3, r3, #21
 80028e8:	4013      	ands	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ee:	183b      	adds	r3, r7, r0
 80028f0:	2201      	movs	r2, #1
 80028f2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028f4:	4b9a      	ldr	r3, [pc, #616]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4b99      	ldr	r3, [pc, #612]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80028fa:	2180      	movs	r1, #128	@ 0x80
 80028fc:	0049      	lsls	r1, r1, #1
 80028fe:	430a      	orrs	r2, r1
 8002900:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002902:	f7fe fa45 	bl	8000d90 <HAL_GetTick>
 8002906:	0003      	movs	r3, r0
 8002908:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800290a:	e00b      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800290c:	f7fe fa40 	bl	8000d90 <HAL_GetTick>
 8002910:	0002      	movs	r2, r0
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d904      	bls.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800291a:	2313      	movs	r3, #19
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	2203      	movs	r2, #3
 8002920:	701a      	strb	r2, [r3, #0]
        break;
 8002922:	e005      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002924:	4b8e      	ldr	r3, [pc, #568]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	2380      	movs	r3, #128	@ 0x80
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	4013      	ands	r3, r2
 800292e:	d0ed      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002930:	2313      	movs	r3, #19
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d154      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800293a:	4b88      	ldr	r3, [pc, #544]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800293c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800293e:	23c0      	movs	r3, #192	@ 0xc0
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4013      	ands	r3, r2
 8002944:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d019      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	429a      	cmp	r2, r3
 8002954:	d014      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002956:	4b81      	ldr	r3, [pc, #516]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295a:	4a82      	ldr	r2, [pc, #520]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800295c:	4013      	ands	r3, r2
 800295e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002960:	4b7e      	ldr	r3, [pc, #504]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002962:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002964:	4b7d      	ldr	r3, [pc, #500]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002966:	2180      	movs	r1, #128	@ 0x80
 8002968:	0249      	lsls	r1, r1, #9
 800296a:	430a      	orrs	r2, r1
 800296c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800296e:	4b7b      	ldr	r3, [pc, #492]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002970:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002972:	4b7a      	ldr	r3, [pc, #488]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002974:	497c      	ldr	r1, [pc, #496]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002976:	400a      	ands	r2, r1
 8002978:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800297a:	4b78      	ldr	r3, [pc, #480]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2201      	movs	r2, #1
 8002984:	4013      	ands	r3, r2
 8002986:	d016      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe fa02 	bl	8000d90 <HAL_GetTick>
 800298c:	0003      	movs	r3, r0
 800298e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002990:	e00c      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002992:	f7fe f9fd 	bl	8000d90 <HAL_GetTick>
 8002996:	0002      	movs	r2, r0
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	4a73      	ldr	r2, [pc, #460]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d904      	bls.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80029a2:	2313      	movs	r3, #19
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	2203      	movs	r2, #3
 80029a8:	701a      	strb	r2, [r3, #0]
            break;
 80029aa:	e004      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ac:	4b6b      	ldr	r3, [pc, #428]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b0:	2202      	movs	r2, #2
 80029b2:	4013      	ands	r3, r2
 80029b4:	d0ed      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80029b6:	2313      	movs	r3, #19
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10a      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029c0:	4b66      	ldr	r3, [pc, #408]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c4:	4a67      	ldr	r2, [pc, #412]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	0019      	movs	r1, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029ce:	4b63      	ldr	r3, [pc, #396]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029d0:	430a      	orrs	r2, r1
 80029d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029d4:	e00c      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029d6:	2312      	movs	r3, #18
 80029d8:	18fb      	adds	r3, r7, r3
 80029da:	2213      	movs	r2, #19
 80029dc:	18ba      	adds	r2, r7, r2
 80029de:	7812      	ldrb	r2, [r2, #0]
 80029e0:	701a      	strb	r2, [r3, #0]
 80029e2:	e005      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e4:	2312      	movs	r3, #18
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	2213      	movs	r2, #19
 80029ea:	18ba      	adds	r2, r7, r2
 80029ec:	7812      	ldrb	r2, [r2, #0]
 80029ee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029f0:	2311      	movs	r3, #17
 80029f2:	18fb      	adds	r3, r7, r3
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d105      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029fa:	4b58      	ldr	r3, [pc, #352]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029fe:	4b57      	ldr	r3, [pc, #348]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a00:	495b      	ldr	r1, [pc, #364]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002a02:	400a      	ands	r2, r1
 8002a04:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d009      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a10:	4b52      	ldr	r3, [pc, #328]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a14:	2203      	movs	r2, #3
 8002a16:	4393      	bics	r3, r2
 8002a18:	0019      	movs	r1, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	4b4f      	ldr	r3, [pc, #316]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a20:	430a      	orrs	r2, r1
 8002a22:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2210      	movs	r2, #16
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d009      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a2e:	4b4b      	ldr	r3, [pc, #300]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a32:	4a50      	ldr	r2, [pc, #320]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	0019      	movs	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	4b47      	ldr	r3, [pc, #284]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	2380      	movs	r3, #128	@ 0x80
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a4e:	4b43      	ldr	r3, [pc, #268]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a52:	4a49      	ldr	r2, [pc, #292]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	0019      	movs	r1, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	2380      	movs	r3, #128	@ 0x80
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d009      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a72:	4a42      	ldr	r2, [pc, #264]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	0019      	movs	r1, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699a      	ldr	r2, [r3, #24]
 8002a7c:	4b37      	ldr	r3, [pc, #220]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2220      	movs	r2, #32
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d009      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a8c:	4b33      	ldr	r3, [pc, #204]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a90:	4a3b      	ldr	r2, [pc, #236]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	0019      	movs	r1, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	4b30      	ldr	r3, [pc, #192]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	2380      	movs	r3, #128	@ 0x80
 8002aa6:	01db      	lsls	r3, r3, #7
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d015      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002aac:	4b2b      	ldr	r3, [pc, #172]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	0899      	lsrs	r1, r3, #2
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69da      	ldr	r2, [r3, #28]
 8002ab8:	4b28      	ldr	r3, [pc, #160]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002aba:	430a      	orrs	r2, r1
 8002abc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69da      	ldr	r2, [r3, #28]
 8002ac2:	2380      	movs	r3, #128	@ 0x80
 8002ac4:	05db      	lsls	r3, r3, #23
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d106      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002aca:	4b24      	ldr	r3, [pc, #144]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	4b23      	ldr	r3, [pc, #140]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ad0:	2180      	movs	r1, #128	@ 0x80
 8002ad2:	0249      	lsls	r1, r1, #9
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	2380      	movs	r3, #128	@ 0x80
 8002ade:	039b      	lsls	r3, r3, #14
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d016      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae8:	4a26      	ldr	r2, [pc, #152]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1a      	ldr	r2, [r3, #32]
 8002af2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002af4:	430a      	orrs	r2, r1
 8002af6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1a      	ldr	r2, [r3, #32]
 8002afc:	2380      	movs	r3, #128	@ 0x80
 8002afe:	03db      	lsls	r3, r3, #15
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d106      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b04:	4b15      	ldr	r3, [pc, #84]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	4b14      	ldr	r3, [pc, #80]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b0a:	2180      	movs	r1, #128	@ 0x80
 8002b0c:	0449      	lsls	r1, r1, #17
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	2380      	movs	r3, #128	@ 0x80
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d016      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b22:	4a19      	ldr	r2, [pc, #100]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	0019      	movs	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691a      	ldr	r2, [r3, #16]
 8002b36:	2380      	movs	r3, #128	@ 0x80
 8002b38:	01db      	lsls	r3, r3, #7
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d106      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b3e:	4b07      	ldr	r3, [pc, #28]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	4b06      	ldr	r3, [pc, #24]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b44:	2180      	movs	r1, #128	@ 0x80
 8002b46:	0249      	lsls	r1, r1, #9
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002b4c:	2312      	movs	r3, #18
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	781b      	ldrb	r3, [r3, #0]
}
 8002b52:	0018      	movs	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b006      	add	sp, #24
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	46c0      	nop			@ (mov r8, r8)
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40007000 	.word	0x40007000
 8002b64:	fffffcff 	.word	0xfffffcff
 8002b68:	fffeffff 	.word	0xfffeffff
 8002b6c:	00001388 	.word	0x00001388
 8002b70:	efffffff 	.word	0xefffffff
 8002b74:	fffff3ff 	.word	0xfffff3ff
 8002b78:	fff3ffff 	.word	0xfff3ffff
 8002b7c:	ffcfffff 	.word	0xffcfffff
 8002b80:	ffffcfff 	.word	0xffffcfff
 8002b84:	ffbfffff 	.word	0xffbfffff
 8002b88:	ffff3fff 	.word	0xffff3fff

08002b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e04a      	b.n	8002c34 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	223d      	movs	r2, #61	@ 0x3d
 8002ba2:	5c9b      	ldrb	r3, [r3, r2]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d107      	bne.n	8002bba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	223c      	movs	r2, #60	@ 0x3c
 8002bae:	2100      	movs	r1, #0
 8002bb0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f7fd ff5b 	bl	8000a70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	223d      	movs	r2, #61	@ 0x3d
 8002bbe:	2102      	movs	r1, #2
 8002bc0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	0019      	movs	r1, r3
 8002bcc:	0010      	movs	r0, r2
 8002bce:	f000 fb2b 	bl	8003228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2248      	movs	r2, #72	@ 0x48
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	223e      	movs	r2, #62	@ 0x3e
 8002bde:	2101      	movs	r1, #1
 8002be0:	5499      	strb	r1, [r3, r2]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	223f      	movs	r2, #63	@ 0x3f
 8002be6:	2101      	movs	r1, #1
 8002be8:	5499      	strb	r1, [r3, r2]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2240      	movs	r2, #64	@ 0x40
 8002bee:	2101      	movs	r1, #1
 8002bf0:	5499      	strb	r1, [r3, r2]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2241      	movs	r2, #65	@ 0x41
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	5499      	strb	r1, [r3, r2]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2242      	movs	r2, #66	@ 0x42
 8002bfe:	2101      	movs	r1, #1
 8002c00:	5499      	strb	r1, [r3, r2]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2243      	movs	r2, #67	@ 0x43
 8002c06:	2101      	movs	r1, #1
 8002c08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2244      	movs	r2, #68	@ 0x44
 8002c0e:	2101      	movs	r1, #1
 8002c10:	5499      	strb	r1, [r3, r2]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2245      	movs	r2, #69	@ 0x45
 8002c16:	2101      	movs	r1, #1
 8002c18:	5499      	strb	r1, [r3, r2]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2246      	movs	r2, #70	@ 0x46
 8002c1e:	2101      	movs	r1, #1
 8002c20:	5499      	strb	r1, [r3, r2]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2247      	movs	r2, #71	@ 0x47
 8002c26:	2101      	movs	r1, #1
 8002c28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	223d      	movs	r2, #61	@ 0x3d
 8002c2e:	2101      	movs	r1, #1
 8002c30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b002      	add	sp, #8
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e04a      	b.n	8002ce4 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	223d      	movs	r2, #61	@ 0x3d
 8002c52:	5c9b      	ldrb	r3, [r3, r2]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d107      	bne.n	8002c6a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	223c      	movs	r2, #60	@ 0x3c
 8002c5e:	2100      	movs	r1, #0
 8002c60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	0018      	movs	r0, r3
 8002c66:	f000 f841 	bl	8002cec <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	223d      	movs	r2, #61	@ 0x3d
 8002c6e:	2102      	movs	r1, #2
 8002c70:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	0019      	movs	r1, r3
 8002c7c:	0010      	movs	r0, r2
 8002c7e:	f000 fad3 	bl	8003228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2248      	movs	r2, #72	@ 0x48
 8002c86:	2101      	movs	r1, #1
 8002c88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	223e      	movs	r2, #62	@ 0x3e
 8002c8e:	2101      	movs	r1, #1
 8002c90:	5499      	strb	r1, [r3, r2]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	223f      	movs	r2, #63	@ 0x3f
 8002c96:	2101      	movs	r1, #1
 8002c98:	5499      	strb	r1, [r3, r2]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2240      	movs	r2, #64	@ 0x40
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	5499      	strb	r1, [r3, r2]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2241      	movs	r2, #65	@ 0x41
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	5499      	strb	r1, [r3, r2]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2242      	movs	r2, #66	@ 0x42
 8002cae:	2101      	movs	r1, #1
 8002cb0:	5499      	strb	r1, [r3, r2]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2243      	movs	r2, #67	@ 0x43
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2244      	movs	r2, #68	@ 0x44
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	5499      	strb	r1, [r3, r2]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2245      	movs	r2, #69	@ 0x45
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	5499      	strb	r1, [r3, r2]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2246      	movs	r2, #70	@ 0x46
 8002cce:	2101      	movs	r1, #1
 8002cd0:	5499      	strb	r1, [r3, r2]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2247      	movs	r2, #71	@ 0x47
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	223d      	movs	r2, #61	@ 0x3d
 8002cde:	2101      	movs	r1, #1
 8002ce0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b002      	add	sp, #8
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002cf4:	46c0      	nop			@ (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e04a      	b.n	8002da4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	223d      	movs	r2, #61	@ 0x3d
 8002d12:	5c9b      	ldrb	r3, [r3, r2]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d107      	bne.n	8002d2a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	223c      	movs	r2, #60	@ 0x3c
 8002d1e:	2100      	movs	r1, #0
 8002d20:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	0018      	movs	r0, r3
 8002d26:	f000 f841 	bl	8002dac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	223d      	movs	r2, #61	@ 0x3d
 8002d2e:	2102      	movs	r1, #2
 8002d30:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	0010      	movs	r0, r2
 8002d3e:	f000 fa73 	bl	8003228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2248      	movs	r2, #72	@ 0x48
 8002d46:	2101      	movs	r1, #1
 8002d48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	223e      	movs	r2, #62	@ 0x3e
 8002d4e:	2101      	movs	r1, #1
 8002d50:	5499      	strb	r1, [r3, r2]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	223f      	movs	r2, #63	@ 0x3f
 8002d56:	2101      	movs	r1, #1
 8002d58:	5499      	strb	r1, [r3, r2]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2240      	movs	r2, #64	@ 0x40
 8002d5e:	2101      	movs	r1, #1
 8002d60:	5499      	strb	r1, [r3, r2]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2241      	movs	r2, #65	@ 0x41
 8002d66:	2101      	movs	r1, #1
 8002d68:	5499      	strb	r1, [r3, r2]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2242      	movs	r2, #66	@ 0x42
 8002d6e:	2101      	movs	r1, #1
 8002d70:	5499      	strb	r1, [r3, r2]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2243      	movs	r2, #67	@ 0x43
 8002d76:	2101      	movs	r1, #1
 8002d78:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2244      	movs	r2, #68	@ 0x44
 8002d7e:	2101      	movs	r1, #1
 8002d80:	5499      	strb	r1, [r3, r2]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2245      	movs	r2, #69	@ 0x45
 8002d86:	2101      	movs	r1, #1
 8002d88:	5499      	strb	r1, [r3, r2]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2246      	movs	r2, #70	@ 0x46
 8002d8e:	2101      	movs	r1, #1
 8002d90:	5499      	strb	r1, [r3, r2]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2247      	movs	r2, #71	@ 0x47
 8002d96:	2101      	movs	r1, #1
 8002d98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	223d      	movs	r2, #61	@ 0x3d
 8002d9e:	2101      	movs	r1, #1
 8002da0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b002      	add	sp, #8
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002db4:	46c0      	nop			@ (mov r8, r8)
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b002      	add	sp, #8
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc8:	2317      	movs	r3, #23
 8002dca:	18fb      	adds	r3, r7, r3
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	223c      	movs	r2, #60	@ 0x3c
 8002dd4:	5c9b      	ldrb	r3, [r3, r2]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_TIM_OC_ConfigChannel+0x22>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e048      	b.n	8002e70 <HAL_TIM_OC_ConfigChannel+0xb4>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	223c      	movs	r2, #60	@ 0x3c
 8002de2:	2101      	movs	r1, #1
 8002de4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b14      	cmp	r3, #20
 8002dea:	d835      	bhi.n	8002e58 <HAL_TIM_OC_ConfigChannel+0x9c>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	009a      	lsls	r2, r3, #2
 8002df0:	4b21      	ldr	r3, [pc, #132]	@ (8002e78 <HAL_TIM_OC_ConfigChannel+0xbc>)
 8002df2:	18d3      	adds	r3, r2, r3
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	0011      	movs	r1, r2
 8002e00:	0018      	movs	r0, r3
 8002e02:	f000 fa95 	bl	8003330 <TIM_OC1_SetConfig>
      break;
 8002e06:	e02c      	b.n	8002e62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	0011      	movs	r1, r2
 8002e10:	0018      	movs	r0, r3
 8002e12:	f000 fb0d 	bl	8003430 <TIM_OC2_SetConfig>
      break;
 8002e16:	e024      	b.n	8002e62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	0011      	movs	r1, r2
 8002e20:	0018      	movs	r0, r3
 8002e22:	f000 fb83 	bl	800352c <TIM_OC3_SetConfig>
      break;
 8002e26:	e01c      	b.n	8002e62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	0011      	movs	r1, r2
 8002e30:	0018      	movs	r0, r3
 8002e32:	f000 fbfd 	bl	8003630 <TIM_OC4_SetConfig>
      break;
 8002e36:	e014      	b.n	8002e62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	0011      	movs	r1, r2
 8002e40:	0018      	movs	r0, r3
 8002e42:	f000 fc59 	bl	80036f8 <TIM_OC5_SetConfig>
      break;
 8002e46:	e00c      	b.n	8002e62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	0011      	movs	r1, r2
 8002e50:	0018      	movs	r0, r3
 8002e52:	f000 fcab 	bl	80037ac <TIM_OC6_SetConfig>
      break;
 8002e56:	e004      	b.n	8002e62 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002e58:	2317      	movs	r3, #23
 8002e5a:	18fb      	adds	r3, r7, r3
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	701a      	strb	r2, [r3, #0]
      break;
 8002e60:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	223c      	movs	r2, #60	@ 0x3c
 8002e66:	2100      	movs	r1, #0
 8002e68:	5499      	strb	r1, [r3, r2]

  return status;
 8002e6a:	2317      	movs	r3, #23
 8002e6c:	18fb      	adds	r3, r7, r3
 8002e6e:	781b      	ldrb	r3, [r3, #0]
}
 8002e70:	0018      	movs	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b006      	add	sp, #24
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	0800467c 	.word	0x0800467c

08002e7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e88:	2317      	movs	r3, #23
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	223c      	movs	r2, #60	@ 0x3c
 8002e94:	5c9b      	ldrb	r3, [r3, r2]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_TIM_PWM_ConfigChannel+0x22>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e0e5      	b.n	800306a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	223c      	movs	r2, #60	@ 0x3c
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b14      	cmp	r3, #20
 8002eaa:	d900      	bls.n	8002eae <HAL_TIM_PWM_ConfigChannel+0x32>
 8002eac:	e0d1      	b.n	8003052 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	009a      	lsls	r2, r3, #2
 8002eb2:	4b70      	ldr	r3, [pc, #448]	@ (8003074 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002eb4:	18d3      	adds	r3, r2, r3
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	0011      	movs	r1, r2
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f000 fa34 	bl	8003330 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699a      	ldr	r2, [r3, #24]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2108      	movs	r1, #8
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2104      	movs	r1, #4
 8002ee4:	438a      	bics	r2, r1
 8002ee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6999      	ldr	r1, [r3, #24]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	619a      	str	r2, [r3, #24]
      break;
 8002efa:	e0af      	b.n	800305c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	0011      	movs	r1, r2
 8002f04:	0018      	movs	r0, r3
 8002f06:	f000 fa93 	bl	8003430 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699a      	ldr	r2, [r3, #24]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2180      	movs	r1, #128	@ 0x80
 8002f16:	0109      	lsls	r1, r1, #4
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4954      	ldr	r1, [pc, #336]	@ (8003078 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002f28:	400a      	ands	r2, r1
 8002f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6999      	ldr	r1, [r3, #24]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	021a      	lsls	r2, r3, #8
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	619a      	str	r2, [r3, #24]
      break;
 8002f40:	e08c      	b.n	800305c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	0011      	movs	r1, r2
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f000 faee 	bl	800352c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	69da      	ldr	r2, [r3, #28]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2108      	movs	r1, #8
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	69da      	ldr	r2, [r3, #28]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2104      	movs	r1, #4
 8002f6c:	438a      	bics	r2, r1
 8002f6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	69d9      	ldr	r1, [r3, #28]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	61da      	str	r2, [r3, #28]
      break;
 8002f82:	e06b      	b.n	800305c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	0011      	movs	r1, r2
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f000 fb4f 	bl	8003630 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69da      	ldr	r2, [r3, #28]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2180      	movs	r1, #128	@ 0x80
 8002f9e:	0109      	lsls	r1, r1, #4
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69da      	ldr	r2, [r3, #28]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4932      	ldr	r1, [pc, #200]	@ (8003078 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002fb0:	400a      	ands	r2, r1
 8002fb2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	69d9      	ldr	r1, [r3, #28]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	021a      	lsls	r2, r3, #8
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	61da      	str	r2, [r3, #28]
      break;
 8002fc8:	e048      	b.n	800305c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	0011      	movs	r1, r2
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f000 fb90 	bl	80036f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2108      	movs	r1, #8
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2104      	movs	r1, #4
 8002ff4:	438a      	bics	r2, r1
 8002ff6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800300a:	e027      	b.n	800305c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	0011      	movs	r1, r2
 8003014:	0018      	movs	r0, r3
 8003016:	f000 fbc9 	bl	80037ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2180      	movs	r1, #128	@ 0x80
 8003026:	0109      	lsls	r1, r1, #4
 8003028:	430a      	orrs	r2, r1
 800302a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4910      	ldr	r1, [pc, #64]	@ (8003078 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003038:	400a      	ands	r2, r1
 800303a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	021a      	lsls	r2, r3, #8
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003050:	e004      	b.n	800305c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003052:	2317      	movs	r3, #23
 8003054:	18fb      	adds	r3, r7, r3
 8003056:	2201      	movs	r2, #1
 8003058:	701a      	strb	r2, [r3, #0]
      break;
 800305a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	223c      	movs	r2, #60	@ 0x3c
 8003060:	2100      	movs	r1, #0
 8003062:	5499      	strb	r1, [r3, r2]

  return status;
 8003064:	2317      	movs	r3, #23
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	781b      	ldrb	r3, [r3, #0]
}
 800306a:	0018      	movs	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	b006      	add	sp, #24
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	080046d0 	.word	0x080046d0
 8003078:	fffffbff 	.word	0xfffffbff

0800307c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003086:	230f      	movs	r3, #15
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	223c      	movs	r2, #60	@ 0x3c
 8003092:	5c9b      	ldrb	r3, [r3, r2]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_TIM_ConfigClockSource+0x20>
 8003098:	2302      	movs	r3, #2
 800309a:	e0bc      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x19a>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	223c      	movs	r2, #60	@ 0x3c
 80030a0:	2101      	movs	r1, #1
 80030a2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	223d      	movs	r2, #61	@ 0x3d
 80030a8:	2102      	movs	r1, #2
 80030aa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4a5a      	ldr	r2, [pc, #360]	@ (8003220 <HAL_TIM_ConfigClockSource+0x1a4>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4a59      	ldr	r2, [pc, #356]	@ (8003224 <HAL_TIM_ConfigClockSource+0x1a8>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2280      	movs	r2, #128	@ 0x80
 80030d2:	0192      	lsls	r2, r2, #6
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d040      	beq.n	800315a <HAL_TIM_ConfigClockSource+0xde>
 80030d8:	2280      	movs	r2, #128	@ 0x80
 80030da:	0192      	lsls	r2, r2, #6
 80030dc:	4293      	cmp	r3, r2
 80030de:	d900      	bls.n	80030e2 <HAL_TIM_ConfigClockSource+0x66>
 80030e0:	e088      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x178>
 80030e2:	2280      	movs	r2, #128	@ 0x80
 80030e4:	0152      	lsls	r2, r2, #5
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d100      	bne.n	80030ec <HAL_TIM_ConfigClockSource+0x70>
 80030ea:	e088      	b.n	80031fe <HAL_TIM_ConfigClockSource+0x182>
 80030ec:	2280      	movs	r2, #128	@ 0x80
 80030ee:	0152      	lsls	r2, r2, #5
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d900      	bls.n	80030f6 <HAL_TIM_ConfigClockSource+0x7a>
 80030f4:	e07e      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x178>
 80030f6:	2b70      	cmp	r3, #112	@ 0x70
 80030f8:	d018      	beq.n	800312c <HAL_TIM_ConfigClockSource+0xb0>
 80030fa:	d900      	bls.n	80030fe <HAL_TIM_ConfigClockSource+0x82>
 80030fc:	e07a      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x178>
 80030fe:	2b60      	cmp	r3, #96	@ 0x60
 8003100:	d04f      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0x126>
 8003102:	d900      	bls.n	8003106 <HAL_TIM_ConfigClockSource+0x8a>
 8003104:	e076      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x178>
 8003106:	2b50      	cmp	r3, #80	@ 0x50
 8003108:	d03b      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0x106>
 800310a:	d900      	bls.n	800310e <HAL_TIM_ConfigClockSource+0x92>
 800310c:	e072      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x178>
 800310e:	2b40      	cmp	r3, #64	@ 0x40
 8003110:	d057      	beq.n	80031c2 <HAL_TIM_ConfigClockSource+0x146>
 8003112:	d900      	bls.n	8003116 <HAL_TIM_ConfigClockSource+0x9a>
 8003114:	e06e      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x178>
 8003116:	2b30      	cmp	r3, #48	@ 0x30
 8003118:	d063      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0x166>
 800311a:	d86b      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x178>
 800311c:	2b20      	cmp	r3, #32
 800311e:	d060      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0x166>
 8003120:	d868      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x178>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d05d      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0x166>
 8003126:	2b10      	cmp	r3, #16
 8003128:	d05b      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0x166>
 800312a:	e063      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800313c:	f000 fc10 	bl	8003960 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2277      	movs	r2, #119	@ 0x77
 800314c:	4313      	orrs	r3, r2
 800314e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	609a      	str	r2, [r3, #8]
      break;
 8003158:	e052      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800316a:	f000 fbf9 	bl	8003960 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2180      	movs	r1, #128	@ 0x80
 800317a:	01c9      	lsls	r1, r1, #7
 800317c:	430a      	orrs	r2, r1
 800317e:	609a      	str	r2, [r3, #8]
      break;
 8003180:	e03e      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800318e:	001a      	movs	r2, r3
 8003190:	f000 fb6a 	bl	8003868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2150      	movs	r1, #80	@ 0x50
 800319a:	0018      	movs	r0, r3
 800319c:	f000 fbc4 	bl	8003928 <TIM_ITRx_SetConfig>
      break;
 80031a0:	e02e      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ae:	001a      	movs	r2, r3
 80031b0:	f000 fb88 	bl	80038c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2160      	movs	r1, #96	@ 0x60
 80031ba:	0018      	movs	r0, r3
 80031bc:	f000 fbb4 	bl	8003928 <TIM_ITRx_SetConfig>
      break;
 80031c0:	e01e      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ce:	001a      	movs	r2, r3
 80031d0:	f000 fb4a 	bl	8003868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2140      	movs	r1, #64	@ 0x40
 80031da:	0018      	movs	r0, r3
 80031dc:	f000 fba4 	bl	8003928 <TIM_ITRx_SetConfig>
      break;
 80031e0:	e00e      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	0019      	movs	r1, r3
 80031ec:	0010      	movs	r0, r2
 80031ee:	f000 fb9b 	bl	8003928 <TIM_ITRx_SetConfig>
      break;
 80031f2:	e005      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80031f4:	230f      	movs	r3, #15
 80031f6:	18fb      	adds	r3, r7, r3
 80031f8:	2201      	movs	r2, #1
 80031fa:	701a      	strb	r2, [r3, #0]
      break;
 80031fc:	e000      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80031fe:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	223d      	movs	r2, #61	@ 0x3d
 8003204:	2101      	movs	r1, #1
 8003206:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	223c      	movs	r2, #60	@ 0x3c
 800320c:	2100      	movs	r1, #0
 800320e:	5499      	strb	r1, [r3, r2]

  return status;
 8003210:	230f      	movs	r3, #15
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	781b      	ldrb	r3, [r3, #0]
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b004      	add	sp, #16
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			@ (mov r8, r8)
 8003220:	ffceff88 	.word	0xffceff88
 8003224:	ffff00ff 	.word	0xffff00ff

08003228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a37      	ldr	r2, [pc, #220]	@ (8003318 <TIM_Base_SetConfig+0xf0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d008      	beq.n	8003252 <TIM_Base_SetConfig+0x2a>
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	2380      	movs	r3, #128	@ 0x80
 8003244:	05db      	lsls	r3, r3, #23
 8003246:	429a      	cmp	r2, r3
 8003248:	d003      	beq.n	8003252 <TIM_Base_SetConfig+0x2a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a33      	ldr	r2, [pc, #204]	@ (800331c <TIM_Base_SetConfig+0xf4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d108      	bne.n	8003264 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2270      	movs	r2, #112	@ 0x70
 8003256:	4393      	bics	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a2c      	ldr	r2, [pc, #176]	@ (8003318 <TIM_Base_SetConfig+0xf0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d014      	beq.n	8003296 <TIM_Base_SetConfig+0x6e>
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	2380      	movs	r3, #128	@ 0x80
 8003270:	05db      	lsls	r3, r3, #23
 8003272:	429a      	cmp	r2, r3
 8003274:	d00f      	beq.n	8003296 <TIM_Base_SetConfig+0x6e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a28      	ldr	r2, [pc, #160]	@ (800331c <TIM_Base_SetConfig+0xf4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00b      	beq.n	8003296 <TIM_Base_SetConfig+0x6e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a27      	ldr	r2, [pc, #156]	@ (8003320 <TIM_Base_SetConfig+0xf8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d007      	beq.n	8003296 <TIM_Base_SetConfig+0x6e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a26      	ldr	r2, [pc, #152]	@ (8003324 <TIM_Base_SetConfig+0xfc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d003      	beq.n	8003296 <TIM_Base_SetConfig+0x6e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a25      	ldr	r2, [pc, #148]	@ (8003328 <TIM_Base_SetConfig+0x100>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d108      	bne.n	80032a8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4a24      	ldr	r2, [pc, #144]	@ (800332c <TIM_Base_SetConfig+0x104>)
 800329a:	4013      	ands	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2280      	movs	r2, #128	@ 0x80
 80032ac:	4393      	bics	r3, r2
 80032ae:	001a      	movs	r2, r3
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a11      	ldr	r2, [pc, #68]	@ (8003318 <TIM_Base_SetConfig+0xf0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d007      	beq.n	80032e6 <TIM_Base_SetConfig+0xbe>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a12      	ldr	r2, [pc, #72]	@ (8003324 <TIM_Base_SetConfig+0xfc>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d003      	beq.n	80032e6 <TIM_Base_SetConfig+0xbe>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a11      	ldr	r2, [pc, #68]	@ (8003328 <TIM_Base_SetConfig+0x100>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d103      	bne.n	80032ee <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	2201      	movs	r2, #1
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d106      	bne.n	800330e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	2201      	movs	r2, #1
 8003306:	4393      	bics	r3, r2
 8003308:	001a      	movs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	611a      	str	r2, [r3, #16]
  }
}
 800330e:	46c0      	nop			@ (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b004      	add	sp, #16
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			@ (mov r8, r8)
 8003318:	40012c00 	.word	0x40012c00
 800331c:	40000400 	.word	0x40000400
 8003320:	40002000 	.word	0x40002000
 8003324:	40014400 	.word	0x40014400
 8003328:	40014800 	.word	0x40014800
 800332c:	fffffcff 	.word	0xfffffcff

08003330 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	2201      	movs	r2, #1
 8003346:	4393      	bics	r3, r2
 8003348:	001a      	movs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4a2e      	ldr	r2, [pc, #184]	@ (8003418 <TIM_OC1_SetConfig+0xe8>)
 800335e:	4013      	ands	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2203      	movs	r2, #3
 8003366:	4393      	bics	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4313      	orrs	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2202      	movs	r2, #2
 8003378:	4393      	bics	r3, r2
 800337a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a24      	ldr	r2, [pc, #144]	@ (800341c <TIM_OC1_SetConfig+0xec>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d007      	beq.n	800339e <TIM_OC1_SetConfig+0x6e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a23      	ldr	r2, [pc, #140]	@ (8003420 <TIM_OC1_SetConfig+0xf0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d003      	beq.n	800339e <TIM_OC1_SetConfig+0x6e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a22      	ldr	r2, [pc, #136]	@ (8003424 <TIM_OC1_SetConfig+0xf4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d10c      	bne.n	80033b8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2208      	movs	r2, #8
 80033a2:	4393      	bics	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2204      	movs	r2, #4
 80033b4:	4393      	bics	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a18      	ldr	r2, [pc, #96]	@ (800341c <TIM_OC1_SetConfig+0xec>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d007      	beq.n	80033d0 <TIM_OC1_SetConfig+0xa0>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a17      	ldr	r2, [pc, #92]	@ (8003420 <TIM_OC1_SetConfig+0xf0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d003      	beq.n	80033d0 <TIM_OC1_SetConfig+0xa0>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a16      	ldr	r2, [pc, #88]	@ (8003424 <TIM_OC1_SetConfig+0xf4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d111      	bne.n	80033f4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	4a15      	ldr	r2, [pc, #84]	@ (8003428 <TIM_OC1_SetConfig+0xf8>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	4a14      	ldr	r2, [pc, #80]	@ (800342c <TIM_OC1_SetConfig+0xfc>)
 80033dc:	4013      	ands	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	621a      	str	r2, [r3, #32]
}
 800340e:	46c0      	nop			@ (mov r8, r8)
 8003410:	46bd      	mov	sp, r7
 8003412:	b006      	add	sp, #24
 8003414:	bd80      	pop	{r7, pc}
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	fffeff8f 	.word	0xfffeff8f
 800341c:	40012c00 	.word	0x40012c00
 8003420:	40014400 	.word	0x40014400
 8003424:	40014800 	.word	0x40014800
 8003428:	fffffeff 	.word	0xfffffeff
 800342c:	fffffdff 	.word	0xfffffdff

08003430 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	2210      	movs	r2, #16
 8003446:	4393      	bics	r3, r2
 8003448:	001a      	movs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4a2c      	ldr	r2, [pc, #176]	@ (8003510 <TIM_OC2_SetConfig+0xe0>)
 800345e:	4013      	ands	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4a2b      	ldr	r2, [pc, #172]	@ (8003514 <TIM_OC2_SetConfig+0xe4>)
 8003466:	4013      	ands	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	021b      	lsls	r3, r3, #8
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2220      	movs	r2, #32
 800347a:	4393      	bics	r3, r2
 800347c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	4313      	orrs	r3, r2
 8003488:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a22      	ldr	r2, [pc, #136]	@ (8003518 <TIM_OC2_SetConfig+0xe8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d10d      	bne.n	80034ae <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2280      	movs	r2, #128	@ 0x80
 8003496:	4393      	bics	r3, r2
 8003498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2240      	movs	r2, #64	@ 0x40
 80034aa:	4393      	bics	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a19      	ldr	r2, [pc, #100]	@ (8003518 <TIM_OC2_SetConfig+0xe8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d007      	beq.n	80034c6 <TIM_OC2_SetConfig+0x96>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a18      	ldr	r2, [pc, #96]	@ (800351c <TIM_OC2_SetConfig+0xec>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d003      	beq.n	80034c6 <TIM_OC2_SetConfig+0x96>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a17      	ldr	r2, [pc, #92]	@ (8003520 <TIM_OC2_SetConfig+0xf0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d113      	bne.n	80034ee <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4a16      	ldr	r2, [pc, #88]	@ (8003524 <TIM_OC2_SetConfig+0xf4>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4a15      	ldr	r2, [pc, #84]	@ (8003528 <TIM_OC2_SetConfig+0xf8>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	621a      	str	r2, [r3, #32]
}
 8003508:	46c0      	nop			@ (mov r8, r8)
 800350a:	46bd      	mov	sp, r7
 800350c:	b006      	add	sp, #24
 800350e:	bd80      	pop	{r7, pc}
 8003510:	feff8fff 	.word	0xfeff8fff
 8003514:	fffffcff 	.word	0xfffffcff
 8003518:	40012c00 	.word	0x40012c00
 800351c:	40014400 	.word	0x40014400
 8003520:	40014800 	.word	0x40014800
 8003524:	fffffbff 	.word	0xfffffbff
 8003528:	fffff7ff 	.word	0xfffff7ff

0800352c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	4a31      	ldr	r2, [pc, #196]	@ (8003608 <TIM_OC3_SetConfig+0xdc>)
 8003542:	401a      	ands	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4a2d      	ldr	r2, [pc, #180]	@ (800360c <TIM_OC3_SetConfig+0xe0>)
 8003558:	4013      	ands	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2203      	movs	r2, #3
 8003560:	4393      	bics	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	4a27      	ldr	r2, [pc, #156]	@ (8003610 <TIM_OC3_SetConfig+0xe4>)
 8003572:	4013      	ands	r3, r2
 8003574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a23      	ldr	r2, [pc, #140]	@ (8003614 <TIM_OC3_SetConfig+0xe8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d10d      	bne.n	80035a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	4a22      	ldr	r2, [pc, #136]	@ (8003618 <TIM_OC3_SetConfig+0xec>)
 800358e:	4013      	ands	r3, r2
 8003590:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	4a1e      	ldr	r2, [pc, #120]	@ (800361c <TIM_OC3_SetConfig+0xf0>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a1a      	ldr	r2, [pc, #104]	@ (8003614 <TIM_OC3_SetConfig+0xe8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d007      	beq.n	80035be <TIM_OC3_SetConfig+0x92>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003620 <TIM_OC3_SetConfig+0xf4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d003      	beq.n	80035be <TIM_OC3_SetConfig+0x92>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003624 <TIM_OC3_SetConfig+0xf8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d113      	bne.n	80035e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4a19      	ldr	r2, [pc, #100]	@ (8003628 <TIM_OC3_SetConfig+0xfc>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4a18      	ldr	r2, [pc, #96]	@ (800362c <TIM_OC3_SetConfig+0x100>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	621a      	str	r2, [r3, #32]
}
 8003600:	46c0      	nop			@ (mov r8, r8)
 8003602:	46bd      	mov	sp, r7
 8003604:	b006      	add	sp, #24
 8003606:	bd80      	pop	{r7, pc}
 8003608:	fffffeff 	.word	0xfffffeff
 800360c:	fffeff8f 	.word	0xfffeff8f
 8003610:	fffffdff 	.word	0xfffffdff
 8003614:	40012c00 	.word	0x40012c00
 8003618:	fffff7ff 	.word	0xfffff7ff
 800361c:	fffffbff 	.word	0xfffffbff
 8003620:	40014400 	.word	0x40014400
 8003624:	40014800 	.word	0x40014800
 8003628:	ffffefff 	.word	0xffffefff
 800362c:	ffffdfff 	.word	0xffffdfff

08003630 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	4a24      	ldr	r2, [pc, #144]	@ (80036d8 <TIM_OC4_SetConfig+0xa8>)
 8003646:	401a      	ands	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4a20      	ldr	r2, [pc, #128]	@ (80036dc <TIM_OC4_SetConfig+0xac>)
 800365c:	4013      	ands	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4a1f      	ldr	r2, [pc, #124]	@ (80036e0 <TIM_OC4_SetConfig+0xb0>)
 8003664:	4013      	ands	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	021b      	lsls	r3, r3, #8
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4313      	orrs	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4a1b      	ldr	r2, [pc, #108]	@ (80036e4 <TIM_OC4_SetConfig+0xb4>)
 8003678:	4013      	ands	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	031b      	lsls	r3, r3, #12
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a17      	ldr	r2, [pc, #92]	@ (80036e8 <TIM_OC4_SetConfig+0xb8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d007      	beq.n	80036a0 <TIM_OC4_SetConfig+0x70>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a16      	ldr	r2, [pc, #88]	@ (80036ec <TIM_OC4_SetConfig+0xbc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d003      	beq.n	80036a0 <TIM_OC4_SetConfig+0x70>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a15      	ldr	r2, [pc, #84]	@ (80036f0 <TIM_OC4_SetConfig+0xc0>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d109      	bne.n	80036b4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	4a14      	ldr	r2, [pc, #80]	@ (80036f4 <TIM_OC4_SetConfig+0xc4>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	019b      	lsls	r3, r3, #6
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	621a      	str	r2, [r3, #32]
}
 80036ce:	46c0      	nop			@ (mov r8, r8)
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b006      	add	sp, #24
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	46c0      	nop			@ (mov r8, r8)
 80036d8:	ffffefff 	.word	0xffffefff
 80036dc:	feff8fff 	.word	0xfeff8fff
 80036e0:	fffffcff 	.word	0xfffffcff
 80036e4:	ffffdfff 	.word	0xffffdfff
 80036e8:	40012c00 	.word	0x40012c00
 80036ec:	40014400 	.word	0x40014400
 80036f0:	40014800 	.word	0x40014800
 80036f4:	ffffbfff 	.word	0xffffbfff

080036f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	4a21      	ldr	r2, [pc, #132]	@ (8003794 <TIM_OC5_SetConfig+0x9c>)
 800370e:	401a      	ands	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4a1d      	ldr	r2, [pc, #116]	@ (8003798 <TIM_OC5_SetConfig+0xa0>)
 8003724:	4013      	ands	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4a19      	ldr	r2, [pc, #100]	@ (800379c <TIM_OC5_SetConfig+0xa4>)
 8003736:	4013      	ands	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	041b      	lsls	r3, r3, #16
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a15      	ldr	r2, [pc, #84]	@ (80037a0 <TIM_OC5_SetConfig+0xa8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d007      	beq.n	800375e <TIM_OC5_SetConfig+0x66>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a14      	ldr	r2, [pc, #80]	@ (80037a4 <TIM_OC5_SetConfig+0xac>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d003      	beq.n	800375e <TIM_OC5_SetConfig+0x66>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a13      	ldr	r2, [pc, #76]	@ (80037a8 <TIM_OC5_SetConfig+0xb0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d109      	bne.n	8003772 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	4a0c      	ldr	r2, [pc, #48]	@ (8003794 <TIM_OC5_SetConfig+0x9c>)
 8003762:	4013      	ands	r3, r2
 8003764:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	621a      	str	r2, [r3, #32]
}
 800378c:	46c0      	nop			@ (mov r8, r8)
 800378e:	46bd      	mov	sp, r7
 8003790:	b006      	add	sp, #24
 8003792:	bd80      	pop	{r7, pc}
 8003794:	fffeffff 	.word	0xfffeffff
 8003798:	fffeff8f 	.word	0xfffeff8f
 800379c:	fffdffff 	.word	0xfffdffff
 80037a0:	40012c00 	.word	0x40012c00
 80037a4:	40014400 	.word	0x40014400
 80037a8:	40014800 	.word	0x40014800

080037ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	4a22      	ldr	r2, [pc, #136]	@ (800384c <TIM_OC6_SetConfig+0xa0>)
 80037c2:	401a      	ands	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003850 <TIM_OC6_SetConfig+0xa4>)
 80037d8:	4013      	ands	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	021b      	lsls	r3, r3, #8
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003854 <TIM_OC6_SetConfig+0xa8>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	051b      	lsls	r3, r3, #20
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a16      	ldr	r2, [pc, #88]	@ (8003858 <TIM_OC6_SetConfig+0xac>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d007      	beq.n	8003814 <TIM_OC6_SetConfig+0x68>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a15      	ldr	r2, [pc, #84]	@ (800385c <TIM_OC6_SetConfig+0xb0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d003      	beq.n	8003814 <TIM_OC6_SetConfig+0x68>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a14      	ldr	r2, [pc, #80]	@ (8003860 <TIM_OC6_SetConfig+0xb4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d109      	bne.n	8003828 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	4a13      	ldr	r2, [pc, #76]	@ (8003864 <TIM_OC6_SetConfig+0xb8>)
 8003818:	4013      	ands	r3, r2
 800381a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	029b      	lsls	r3, r3, #10
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	621a      	str	r2, [r3, #32]
}
 8003842:	46c0      	nop			@ (mov r8, r8)
 8003844:	46bd      	mov	sp, r7
 8003846:	b006      	add	sp, #24
 8003848:	bd80      	pop	{r7, pc}
 800384a:	46c0      	nop			@ (mov r8, r8)
 800384c:	ffefffff 	.word	0xffefffff
 8003850:	feff8fff 	.word	0xfeff8fff
 8003854:	ffdfffff 	.word	0xffdfffff
 8003858:	40012c00 	.word	0x40012c00
 800385c:	40014400 	.word	0x40014400
 8003860:	40014800 	.word	0x40014800
 8003864:	fffbffff 	.word	0xfffbffff

08003868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	2201      	movs	r2, #1
 8003880:	4393      	bics	r3, r2
 8003882:	001a      	movs	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	22f0      	movs	r2, #240	@ 0xf0
 8003892:	4393      	bics	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	220a      	movs	r2, #10
 80038a4:	4393      	bics	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	621a      	str	r2, [r3, #32]
}
 80038bc:	46c0      	nop			@ (mov r8, r8)
 80038be:	46bd      	mov	sp, r7
 80038c0:	b006      	add	sp, #24
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	2210      	movs	r2, #16
 80038dc:	4393      	bics	r3, r2
 80038de:	001a      	movs	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003924 <TIM_TI2_ConfigInputStage+0x60>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	031b      	lsls	r3, r3, #12
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	22a0      	movs	r2, #160	@ 0xa0
 8003900:	4393      	bics	r3, r2
 8003902:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	621a      	str	r2, [r3, #32]
}
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	46bd      	mov	sp, r7
 800391e:	b006      	add	sp, #24
 8003920:	bd80      	pop	{r7, pc}
 8003922:	46c0      	nop			@ (mov r8, r8)
 8003924:	ffff0fff 	.word	0xffff0fff

08003928 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4a08      	ldr	r2, [pc, #32]	@ (800395c <TIM_ITRx_SetConfig+0x34>)
 800393c:	4013      	ands	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4313      	orrs	r3, r2
 8003946:	2207      	movs	r2, #7
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	609a      	str	r2, [r3, #8]
}
 8003952:	46c0      	nop			@ (mov r8, r8)
 8003954:	46bd      	mov	sp, r7
 8003956:	b004      	add	sp, #16
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			@ (mov r8, r8)
 800395c:	ffcfff8f 	.word	0xffcfff8f

08003960 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	4a09      	ldr	r2, [pc, #36]	@ (800399c <TIM_ETR_SetConfig+0x3c>)
 8003978:	4013      	ands	r3, r2
 800397a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	021a      	lsls	r2, r3, #8
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	431a      	orrs	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4313      	orrs	r3, r2
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	609a      	str	r2, [r3, #8]
}
 8003994:	46c0      	nop			@ (mov r8, r8)
 8003996:	46bd      	mov	sp, r7
 8003998:	b006      	add	sp, #24
 800399a:	bd80      	pop	{r7, pc}
 800399c:	ffff00ff 	.word	0xffff00ff

080039a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	223c      	movs	r2, #60	@ 0x3c
 80039ae:	5c9b      	ldrb	r3, [r3, r2]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e050      	b.n	8003a5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	223c      	movs	r2, #60	@ 0x3c
 80039bc:	2101      	movs	r1, #1
 80039be:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	223d      	movs	r2, #61	@ 0x3d
 80039c4:	2102      	movs	r1, #2
 80039c6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a21      	ldr	r2, [pc, #132]	@ (8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d108      	bne.n	80039f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4a20      	ldr	r2, [pc, #128]	@ (8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2270      	movs	r2, #112	@ 0x70
 80039f8:	4393      	bics	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a14      	ldr	r2, [pc, #80]	@ (8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00a      	beq.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	2380      	movs	r3, #128	@ 0x80
 8003a1e:	05db      	lsls	r3, r3, #23
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d004      	beq.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a10      	ldr	r2, [pc, #64]	@ (8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d10c      	bne.n	8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2280      	movs	r2, #128	@ 0x80
 8003a32:	4393      	bics	r3, r2
 8003a34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	223d      	movs	r2, #61	@ 0x3d
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	223c      	movs	r2, #60	@ 0x3c
 8003a54:	2100      	movs	r1, #0
 8003a56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b004      	add	sp, #16
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	46c0      	nop			@ (mov r8, r8)
 8003a64:	40012c00 	.word	0x40012c00
 8003a68:	ff0fffff 	.word	0xff0fffff
 8003a6c:	40000400 	.word	0x40000400

08003a70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	223c      	movs	r2, #60	@ 0x3c
 8003a82:	5c9b      	ldrb	r3, [r3, r2]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e06f      	b.n	8003b6c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	223c      	movs	r2, #60	@ 0x3c
 8003a90:	2101      	movs	r1, #1
 8003a92:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	22ff      	movs	r2, #255	@ 0xff
 8003a98:	4393      	bics	r3, r2
 8003a9a:	001a      	movs	r2, r3
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4a33      	ldr	r2, [pc, #204]	@ (8003b74 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003aa8:	401a      	ands	r2, r3
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4a30      	ldr	r2, [pc, #192]	@ (8003b78 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003ab6:	401a      	ands	r2, r3
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4a2e      	ldr	r2, [pc, #184]	@ (8003b7c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003ac4:	401a      	ands	r2, r3
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b80 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003ad2:	401a      	ands	r2, r3
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4a29      	ldr	r2, [pc, #164]	@ (8003b84 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003ae0:	401a      	ands	r2, r3
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4a26      	ldr	r2, [pc, #152]	@ (8003b88 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003aee:	401a      	ands	r2, r3
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a24      	ldr	r2, [pc, #144]	@ (8003b8c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003afc:	401a      	ands	r2, r3
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	041b      	lsls	r3, r3, #16
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4a21      	ldr	r2, [pc, #132]	@ (8003b90 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003b0c:	401a      	ands	r2, r3
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003b94 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d11c      	bne.n	8003b5a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4a1d      	ldr	r2, [pc, #116]	@ (8003b98 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003b24:	401a      	ands	r2, r3
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2a:	051b      	lsls	r3, r3, #20
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a1a      	ldr	r2, [pc, #104]	@ (8003b9c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003b34:	401a      	ands	r2, r3
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4a17      	ldr	r2, [pc, #92]	@ (8003ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003b42:	401a      	ands	r2, r3
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4a15      	ldr	r2, [pc, #84]	@ (8003ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003b50:	401a      	ands	r2, r3
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	223c      	movs	r2, #60	@ 0x3c
 8003b66:	2100      	movs	r1, #0
 8003b68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b004      	add	sp, #16
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	fffffcff 	.word	0xfffffcff
 8003b78:	fffffbff 	.word	0xfffffbff
 8003b7c:	fffff7ff 	.word	0xfffff7ff
 8003b80:	ffffefff 	.word	0xffffefff
 8003b84:	ffffdfff 	.word	0xffffdfff
 8003b88:	ffffbfff 	.word	0xffffbfff
 8003b8c:	fff0ffff 	.word	0xfff0ffff
 8003b90:	efffffff 	.word	0xefffffff
 8003b94:	40012c00 	.word	0x40012c00
 8003b98:	ff0fffff 	.word	0xff0fffff
 8003b9c:	feffffff 	.word	0xfeffffff
 8003ba0:	fdffffff 	.word	0xfdffffff
 8003ba4:	dfffffff 	.word	0xdfffffff

08003ba8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e046      	b.n	8003c48 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2288      	movs	r2, #136	@ 0x88
 8003bbe:	589b      	ldr	r3, [r3, r2]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d107      	bne.n	8003bd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2284      	movs	r2, #132	@ 0x84
 8003bc8:	2100      	movs	r1, #0
 8003bca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f7fc ffc2 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2288      	movs	r2, #136	@ 0x88
 8003bd8:	2124      	movs	r1, #36	@ 0x24
 8003bda:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2101      	movs	r1, #1
 8003be8:	438a      	bics	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f000 faa4 	bl	8004144 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f000 f828 	bl	8003c54 <UART_SetConfig>
 8003c04:	0003      	movs	r3, r0
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e01c      	b.n	8003c48 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	490d      	ldr	r1, [pc, #52]	@ (8003c50 <HAL_UART_Init+0xa8>)
 8003c1a:	400a      	ands	r2, r1
 8003c1c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	212a      	movs	r1, #42	@ 0x2a
 8003c2a:	438a      	bics	r2, r1
 8003c2c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2101      	movs	r1, #1
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	0018      	movs	r0, r3
 8003c42:	f000 fb33 	bl	80042ac <UART_CheckIdleState>
 8003c46:	0003      	movs	r3, r0
}
 8003c48:	0018      	movs	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b002      	add	sp, #8
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	ffffb7ff 	.word	0xffffb7ff

08003c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c54:	b5b0      	push	{r4, r5, r7, lr}
 8003c56:	b090      	sub	sp, #64	@ 0x40
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c5c:	231a      	movs	r3, #26
 8003c5e:	2220      	movs	r2, #32
 8003c60:	189b      	adds	r3, r3, r2
 8003c62:	19db      	adds	r3, r3, r7
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	431a      	orrs	r2, r3
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	431a      	orrs	r2, r3
 8003c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4ac4      	ldr	r2, [pc, #784]	@ (8003f98 <UART_SetConfig+0x344>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	0019      	movs	r1, r3
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c92:	430b      	orrs	r3, r1
 8003c94:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	4abf      	ldr	r2, [pc, #764]	@ (8003f9c <UART_SetConfig+0x348>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca4:	68d9      	ldr	r1, [r3, #12]
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	0003      	movs	r3, r0
 8003cac:	430b      	orrs	r3, r1
 8003cae:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4ab9      	ldr	r2, [pc, #740]	@ (8003fa0 <UART_SetConfig+0x34c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d004      	beq.n	8003cca <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	4ab4      	ldr	r2, [pc, #720]	@ (8003fa4 <UART_SetConfig+0x350>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	0019      	movs	r1, r3
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce6:	220f      	movs	r2, #15
 8003ce8:	4393      	bics	r3, r2
 8003cea:	0018      	movs	r0, r3
 8003cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cee:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	430b      	orrs	r3, r1
 8003cf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4aaa      	ldr	r2, [pc, #680]	@ (8003fa8 <UART_SetConfig+0x354>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d131      	bne.n	8003d68 <UART_SetConfig+0x114>
 8003d04:	4ba9      	ldr	r3, [pc, #676]	@ (8003fac <UART_SetConfig+0x358>)
 8003d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d08:	2203      	movs	r2, #3
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d01d      	beq.n	8003d4c <UART_SetConfig+0xf8>
 8003d10:	d823      	bhi.n	8003d5a <UART_SetConfig+0x106>
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d00c      	beq.n	8003d30 <UART_SetConfig+0xdc>
 8003d16:	d820      	bhi.n	8003d5a <UART_SetConfig+0x106>
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <UART_SetConfig+0xce>
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d00e      	beq.n	8003d3e <UART_SetConfig+0xea>
 8003d20:	e01b      	b.n	8003d5a <UART_SetConfig+0x106>
 8003d22:	231b      	movs	r3, #27
 8003d24:	2220      	movs	r2, #32
 8003d26:	189b      	adds	r3, r3, r2
 8003d28:	19db      	adds	r3, r3, r7
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	701a      	strb	r2, [r3, #0]
 8003d2e:	e071      	b.n	8003e14 <UART_SetConfig+0x1c0>
 8003d30:	231b      	movs	r3, #27
 8003d32:	2220      	movs	r2, #32
 8003d34:	189b      	adds	r3, r3, r2
 8003d36:	19db      	adds	r3, r3, r7
 8003d38:	2202      	movs	r2, #2
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	e06a      	b.n	8003e14 <UART_SetConfig+0x1c0>
 8003d3e:	231b      	movs	r3, #27
 8003d40:	2220      	movs	r2, #32
 8003d42:	189b      	adds	r3, r3, r2
 8003d44:	19db      	adds	r3, r3, r7
 8003d46:	2204      	movs	r2, #4
 8003d48:	701a      	strb	r2, [r3, #0]
 8003d4a:	e063      	b.n	8003e14 <UART_SetConfig+0x1c0>
 8003d4c:	231b      	movs	r3, #27
 8003d4e:	2220      	movs	r2, #32
 8003d50:	189b      	adds	r3, r3, r2
 8003d52:	19db      	adds	r3, r3, r7
 8003d54:	2208      	movs	r2, #8
 8003d56:	701a      	strb	r2, [r3, #0]
 8003d58:	e05c      	b.n	8003e14 <UART_SetConfig+0x1c0>
 8003d5a:	231b      	movs	r3, #27
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	189b      	adds	r3, r3, r2
 8003d60:	19db      	adds	r3, r3, r7
 8003d62:	2210      	movs	r2, #16
 8003d64:	701a      	strb	r2, [r3, #0]
 8003d66:	e055      	b.n	8003e14 <UART_SetConfig+0x1c0>
 8003d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a90      	ldr	r2, [pc, #576]	@ (8003fb0 <UART_SetConfig+0x35c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d106      	bne.n	8003d80 <UART_SetConfig+0x12c>
 8003d72:	231b      	movs	r3, #27
 8003d74:	2220      	movs	r2, #32
 8003d76:	189b      	adds	r3, r3, r2
 8003d78:	19db      	adds	r3, r3, r7
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	e049      	b.n	8003e14 <UART_SetConfig+0x1c0>
 8003d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a86      	ldr	r2, [pc, #536]	@ (8003fa0 <UART_SetConfig+0x34c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d13e      	bne.n	8003e08 <UART_SetConfig+0x1b4>
 8003d8a:	4b88      	ldr	r3, [pc, #544]	@ (8003fac <UART_SetConfig+0x358>)
 8003d8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d8e:	23c0      	movs	r3, #192	@ 0xc0
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	4013      	ands	r3, r2
 8003d94:	22c0      	movs	r2, #192	@ 0xc0
 8003d96:	0112      	lsls	r2, r2, #4
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d027      	beq.n	8003dec <UART_SetConfig+0x198>
 8003d9c:	22c0      	movs	r2, #192	@ 0xc0
 8003d9e:	0112      	lsls	r2, r2, #4
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d82a      	bhi.n	8003dfa <UART_SetConfig+0x1a6>
 8003da4:	2280      	movs	r2, #128	@ 0x80
 8003da6:	0112      	lsls	r2, r2, #4
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d011      	beq.n	8003dd0 <UART_SetConfig+0x17c>
 8003dac:	2280      	movs	r2, #128	@ 0x80
 8003dae:	0112      	lsls	r2, r2, #4
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d822      	bhi.n	8003dfa <UART_SetConfig+0x1a6>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d004      	beq.n	8003dc2 <UART_SetConfig+0x16e>
 8003db8:	2280      	movs	r2, #128	@ 0x80
 8003dba:	00d2      	lsls	r2, r2, #3
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00e      	beq.n	8003dde <UART_SetConfig+0x18a>
 8003dc0:	e01b      	b.n	8003dfa <UART_SetConfig+0x1a6>
 8003dc2:	231b      	movs	r3, #27
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	189b      	adds	r3, r3, r2
 8003dc8:	19db      	adds	r3, r3, r7
 8003dca:	2200      	movs	r2, #0
 8003dcc:	701a      	strb	r2, [r3, #0]
 8003dce:	e021      	b.n	8003e14 <UART_SetConfig+0x1c0>
 8003dd0:	231b      	movs	r3, #27
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	189b      	adds	r3, r3, r2
 8003dd6:	19db      	adds	r3, r3, r7
 8003dd8:	2202      	movs	r2, #2
 8003dda:	701a      	strb	r2, [r3, #0]
 8003ddc:	e01a      	b.n	8003e14 <UART_SetConfig+0x1c0>
 8003dde:	231b      	movs	r3, #27
 8003de0:	2220      	movs	r2, #32
 8003de2:	189b      	adds	r3, r3, r2
 8003de4:	19db      	adds	r3, r3, r7
 8003de6:	2204      	movs	r2, #4
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	e013      	b.n	8003e14 <UART_SetConfig+0x1c0>
 8003dec:	231b      	movs	r3, #27
 8003dee:	2220      	movs	r2, #32
 8003df0:	189b      	adds	r3, r3, r2
 8003df2:	19db      	adds	r3, r3, r7
 8003df4:	2208      	movs	r2, #8
 8003df6:	701a      	strb	r2, [r3, #0]
 8003df8:	e00c      	b.n	8003e14 <UART_SetConfig+0x1c0>
 8003dfa:	231b      	movs	r3, #27
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	189b      	adds	r3, r3, r2
 8003e00:	19db      	adds	r3, r3, r7
 8003e02:	2210      	movs	r2, #16
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	e005      	b.n	8003e14 <UART_SetConfig+0x1c0>
 8003e08:	231b      	movs	r3, #27
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	189b      	adds	r3, r3, r2
 8003e0e:	19db      	adds	r3, r3, r7
 8003e10:	2210      	movs	r2, #16
 8003e12:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a61      	ldr	r2, [pc, #388]	@ (8003fa0 <UART_SetConfig+0x34c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d000      	beq.n	8003e20 <UART_SetConfig+0x1cc>
 8003e1e:	e092      	b.n	8003f46 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e20:	231b      	movs	r3, #27
 8003e22:	2220      	movs	r2, #32
 8003e24:	189b      	adds	r3, r3, r2
 8003e26:	19db      	adds	r3, r3, r7
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d015      	beq.n	8003e5a <UART_SetConfig+0x206>
 8003e2e:	dc18      	bgt.n	8003e62 <UART_SetConfig+0x20e>
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d00d      	beq.n	8003e50 <UART_SetConfig+0x1fc>
 8003e34:	dc15      	bgt.n	8003e62 <UART_SetConfig+0x20e>
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <UART_SetConfig+0x1ec>
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d005      	beq.n	8003e4a <UART_SetConfig+0x1f6>
 8003e3e:	e010      	b.n	8003e62 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e40:	f7fe fd14 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8003e44:	0003      	movs	r3, r0
 8003e46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e48:	e014      	b.n	8003e74 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e4a:	4b5a      	ldr	r3, [pc, #360]	@ (8003fb4 <UART_SetConfig+0x360>)
 8003e4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e4e:	e011      	b.n	8003e74 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e50:	f7fe fc80 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 8003e54:	0003      	movs	r3, r0
 8003e56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e58:	e00c      	b.n	8003e74 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e5a:	2380      	movs	r3, #128	@ 0x80
 8003e5c:	021b      	lsls	r3, r3, #8
 8003e5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e60:	e008      	b.n	8003e74 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003e66:	231a      	movs	r3, #26
 8003e68:	2220      	movs	r2, #32
 8003e6a:	189b      	adds	r3, r3, r2
 8003e6c:	19db      	adds	r3, r3, r7
 8003e6e:	2201      	movs	r2, #1
 8003e70:	701a      	strb	r2, [r3, #0]
        break;
 8003e72:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d100      	bne.n	8003e7c <UART_SetConfig+0x228>
 8003e7a:	e147      	b.n	800410c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e80:	4b4d      	ldr	r3, [pc, #308]	@ (8003fb8 <UART_SetConfig+0x364>)
 8003e82:	0052      	lsls	r2, r2, #1
 8003e84:	5ad3      	ldrh	r3, [r2, r3]
 8003e86:	0019      	movs	r1, r3
 8003e88:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003e8a:	f7fc f93b 	bl	8000104 <__udivsi3>
 8003e8e:	0003      	movs	r3, r0
 8003e90:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	0013      	movs	r3, r2
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	189b      	adds	r3, r3, r2
 8003e9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d305      	bcc.n	8003eae <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ea8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d906      	bls.n	8003ebc <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8003eae:	231a      	movs	r3, #26
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	189b      	adds	r3, r3, r2
 8003eb4:	19db      	adds	r3, r3, r7
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	e127      	b.n	800410c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ebe:	61bb      	str	r3, [r7, #24]
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61fb      	str	r3, [r7, #28]
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8003fb8 <UART_SetConfig+0x364>)
 8003eca:	0052      	lsls	r2, r2, #1
 8003ecc:	5ad3      	ldrh	r3, [r2, r3]
 8003ece:	613b      	str	r3, [r7, #16]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	69b8      	ldr	r0, [r7, #24]
 8003eda:	69f9      	ldr	r1, [r7, #28]
 8003edc:	f7fc f99e 	bl	800021c <__aeabi_uldivmod>
 8003ee0:	0002      	movs	r2, r0
 8003ee2:	000b      	movs	r3, r1
 8003ee4:	0e11      	lsrs	r1, r2, #24
 8003ee6:	021d      	lsls	r5, r3, #8
 8003ee8:	430d      	orrs	r5, r1
 8003eea:	0214      	lsls	r4, r2, #8
 8003eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	085b      	lsrs	r3, r3, #1
 8003ef2:	60bb      	str	r3, [r7, #8]
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	68b8      	ldr	r0, [r7, #8]
 8003efa:	68f9      	ldr	r1, [r7, #12]
 8003efc:	1900      	adds	r0, r0, r4
 8003efe:	4169      	adcs	r1, r5
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	2300      	movs	r3, #0
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f7fc f985 	bl	800021c <__aeabi_uldivmod>
 8003f12:	0002      	movs	r2, r0
 8003f14:	000b      	movs	r3, r1
 8003f16:	0013      	movs	r3, r2
 8003f18:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f1c:	23c0      	movs	r3, #192	@ 0xc0
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d309      	bcc.n	8003f38 <UART_SetConfig+0x2e4>
 8003f24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f26:	2380      	movs	r3, #128	@ 0x80
 8003f28:	035b      	lsls	r3, r3, #13
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d204      	bcs.n	8003f38 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f34:	60da      	str	r2, [r3, #12]
 8003f36:	e0e9      	b.n	800410c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8003f38:	231a      	movs	r3, #26
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	189b      	adds	r3, r3, r2
 8003f3e:	19db      	adds	r3, r3, r7
 8003f40:	2201      	movs	r2, #1
 8003f42:	701a      	strb	r2, [r3, #0]
 8003f44:	e0e2      	b.n	800410c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f48:	69da      	ldr	r2, [r3, #28]
 8003f4a:	2380      	movs	r3, #128	@ 0x80
 8003f4c:	021b      	lsls	r3, r3, #8
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d000      	beq.n	8003f54 <UART_SetConfig+0x300>
 8003f52:	e083      	b.n	800405c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003f54:	231b      	movs	r3, #27
 8003f56:	2220      	movs	r2, #32
 8003f58:	189b      	adds	r3, r3, r2
 8003f5a:	19db      	adds	r3, r3, r7
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d015      	beq.n	8003f8e <UART_SetConfig+0x33a>
 8003f62:	dc2b      	bgt.n	8003fbc <UART_SetConfig+0x368>
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d00d      	beq.n	8003f84 <UART_SetConfig+0x330>
 8003f68:	dc28      	bgt.n	8003fbc <UART_SetConfig+0x368>
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <UART_SetConfig+0x320>
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d005      	beq.n	8003f7e <UART_SetConfig+0x32a>
 8003f72:	e023      	b.n	8003fbc <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f74:	f7fe fc7a 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f7c:	e027      	b.n	8003fce <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb4 <UART_SetConfig+0x360>)
 8003f80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f82:	e024      	b.n	8003fce <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f84:	f7fe fbe6 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 8003f88:	0003      	movs	r3, r0
 8003f8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f8c:	e01f      	b.n	8003fce <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f8e:	2380      	movs	r3, #128	@ 0x80
 8003f90:	021b      	lsls	r3, r3, #8
 8003f92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f94:	e01b      	b.n	8003fce <UART_SetConfig+0x37a>
 8003f96:	46c0      	nop			@ (mov r8, r8)
 8003f98:	cfff69f3 	.word	0xcfff69f3
 8003f9c:	ffffcfff 	.word	0xffffcfff
 8003fa0:	40008000 	.word	0x40008000
 8003fa4:	11fff4ff 	.word	0x11fff4ff
 8003fa8:	40013800 	.word	0x40013800
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	40004400 	.word	0x40004400
 8003fb4:	00f42400 	.word	0x00f42400
 8003fb8:	08004724 	.word	0x08004724
      default:
        pclk = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003fc0:	231a      	movs	r3, #26
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	189b      	adds	r3, r3, r2
 8003fc6:	19db      	adds	r3, r3, r7
 8003fc8:	2201      	movs	r2, #1
 8003fca:	701a      	strb	r2, [r3, #0]
        break;
 8003fcc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d100      	bne.n	8003fd6 <UART_SetConfig+0x382>
 8003fd4:	e09a      	b.n	800410c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fda:	4b58      	ldr	r3, [pc, #352]	@ (800413c <UART_SetConfig+0x4e8>)
 8003fdc:	0052      	lsls	r2, r2, #1
 8003fde:	5ad3      	ldrh	r3, [r2, r3]
 8003fe0:	0019      	movs	r1, r3
 8003fe2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003fe4:	f7fc f88e 	bl	8000104 <__udivsi3>
 8003fe8:	0003      	movs	r3, r0
 8003fea:	005a      	lsls	r2, r3, #1
 8003fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	085b      	lsrs	r3, r3, #1
 8003ff2:	18d2      	adds	r2, r2, r3
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	0019      	movs	r1, r3
 8003ffa:	0010      	movs	r0, r2
 8003ffc:	f7fc f882 	bl	8000104 <__udivsi3>
 8004000:	0003      	movs	r3, r0
 8004002:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004006:	2b0f      	cmp	r3, #15
 8004008:	d921      	bls.n	800404e <UART_SetConfig+0x3fa>
 800400a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800400c:	2380      	movs	r3, #128	@ 0x80
 800400e:	025b      	lsls	r3, r3, #9
 8004010:	429a      	cmp	r2, r3
 8004012:	d21c      	bcs.n	800404e <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004016:	b29a      	uxth	r2, r3
 8004018:	200e      	movs	r0, #14
 800401a:	2420      	movs	r4, #32
 800401c:	1903      	adds	r3, r0, r4
 800401e:	19db      	adds	r3, r3, r7
 8004020:	210f      	movs	r1, #15
 8004022:	438a      	bics	r2, r1
 8004024:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004028:	085b      	lsrs	r3, r3, #1
 800402a:	b29b      	uxth	r3, r3
 800402c:	2207      	movs	r2, #7
 800402e:	4013      	ands	r3, r2
 8004030:	b299      	uxth	r1, r3
 8004032:	1903      	adds	r3, r0, r4
 8004034:	19db      	adds	r3, r3, r7
 8004036:	1902      	adds	r2, r0, r4
 8004038:	19d2      	adds	r2, r2, r7
 800403a:	8812      	ldrh	r2, [r2, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	1902      	adds	r2, r0, r4
 8004046:	19d2      	adds	r2, r2, r7
 8004048:	8812      	ldrh	r2, [r2, #0]
 800404a:	60da      	str	r2, [r3, #12]
 800404c:	e05e      	b.n	800410c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800404e:	231a      	movs	r3, #26
 8004050:	2220      	movs	r2, #32
 8004052:	189b      	adds	r3, r3, r2
 8004054:	19db      	adds	r3, r3, r7
 8004056:	2201      	movs	r2, #1
 8004058:	701a      	strb	r2, [r3, #0]
 800405a:	e057      	b.n	800410c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800405c:	231b      	movs	r3, #27
 800405e:	2220      	movs	r2, #32
 8004060:	189b      	adds	r3, r3, r2
 8004062:	19db      	adds	r3, r3, r7
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b08      	cmp	r3, #8
 8004068:	d015      	beq.n	8004096 <UART_SetConfig+0x442>
 800406a:	dc18      	bgt.n	800409e <UART_SetConfig+0x44a>
 800406c:	2b04      	cmp	r3, #4
 800406e:	d00d      	beq.n	800408c <UART_SetConfig+0x438>
 8004070:	dc15      	bgt.n	800409e <UART_SetConfig+0x44a>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <UART_SetConfig+0x428>
 8004076:	2b02      	cmp	r3, #2
 8004078:	d005      	beq.n	8004086 <UART_SetConfig+0x432>
 800407a:	e010      	b.n	800409e <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800407c:	f7fe fbf6 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8004080:	0003      	movs	r3, r0
 8004082:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004084:	e014      	b.n	80040b0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004086:	4b2e      	ldr	r3, [pc, #184]	@ (8004140 <UART_SetConfig+0x4ec>)
 8004088:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800408a:	e011      	b.n	80040b0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800408c:	f7fe fb62 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 8004090:	0003      	movs	r3, r0
 8004092:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004094:	e00c      	b.n	80040b0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004096:	2380      	movs	r3, #128	@ 0x80
 8004098:	021b      	lsls	r3, r3, #8
 800409a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800409c:	e008      	b.n	80040b0 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80040a2:	231a      	movs	r3, #26
 80040a4:	2220      	movs	r2, #32
 80040a6:	189b      	adds	r3, r3, r2
 80040a8:	19db      	adds	r3, r3, r7
 80040aa:	2201      	movs	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
        break;
 80040ae:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80040b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d02a      	beq.n	800410c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040ba:	4b20      	ldr	r3, [pc, #128]	@ (800413c <UART_SetConfig+0x4e8>)
 80040bc:	0052      	lsls	r2, r2, #1
 80040be:	5ad3      	ldrh	r3, [r2, r3]
 80040c0:	0019      	movs	r1, r3
 80040c2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80040c4:	f7fc f81e 	bl	8000104 <__udivsi3>
 80040c8:	0003      	movs	r3, r0
 80040ca:	001a      	movs	r2, r3
 80040cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	085b      	lsrs	r3, r3, #1
 80040d2:	18d2      	adds	r2, r2, r3
 80040d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	0019      	movs	r1, r3
 80040da:	0010      	movs	r0, r2
 80040dc:	f7fc f812 	bl	8000104 <__udivsi3>
 80040e0:	0003      	movs	r3, r0
 80040e2:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e6:	2b0f      	cmp	r3, #15
 80040e8:	d90a      	bls.n	8004100 <UART_SetConfig+0x4ac>
 80040ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040ec:	2380      	movs	r3, #128	@ 0x80
 80040ee:	025b      	lsls	r3, r3, #9
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d205      	bcs.n	8004100 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	e005      	b.n	800410c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004100:	231a      	movs	r3, #26
 8004102:	2220      	movs	r2, #32
 8004104:	189b      	adds	r3, r3, r2
 8004106:	19db      	adds	r3, r3, r7
 8004108:	2201      	movs	r2, #1
 800410a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800410c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410e:	226a      	movs	r2, #106	@ 0x6a
 8004110:	2101      	movs	r1, #1
 8004112:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004116:	2268      	movs	r2, #104	@ 0x68
 8004118:	2101      	movs	r1, #1
 800411a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	2200      	movs	r2, #0
 8004120:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004124:	2200      	movs	r2, #0
 8004126:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004128:	231a      	movs	r3, #26
 800412a:	2220      	movs	r2, #32
 800412c:	189b      	adds	r3, r3, r2
 800412e:	19db      	adds	r3, r3, r7
 8004130:	781b      	ldrb	r3, [r3, #0]
}
 8004132:	0018      	movs	r0, r3
 8004134:	46bd      	mov	sp, r7
 8004136:	b010      	add	sp, #64	@ 0x40
 8004138:	bdb0      	pop	{r4, r5, r7, pc}
 800413a:	46c0      	nop			@ (mov r8, r8)
 800413c:	08004724 	.word	0x08004724
 8004140:	00f42400 	.word	0x00f42400

08004144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004150:	2208      	movs	r2, #8
 8004152:	4013      	ands	r3, r2
 8004154:	d00b      	beq.n	800416e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	4a4a      	ldr	r2, [pc, #296]	@ (8004288 <UART_AdvFeatureConfig+0x144>)
 800415e:	4013      	ands	r3, r2
 8004160:	0019      	movs	r1, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004172:	2201      	movs	r2, #1
 8004174:	4013      	ands	r3, r2
 8004176:	d00b      	beq.n	8004190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	4a43      	ldr	r2, [pc, #268]	@ (800428c <UART_AdvFeatureConfig+0x148>)
 8004180:	4013      	ands	r3, r2
 8004182:	0019      	movs	r1, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004194:	2202      	movs	r2, #2
 8004196:	4013      	ands	r3, r2
 8004198:	d00b      	beq.n	80041b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	4a3b      	ldr	r2, [pc, #236]	@ (8004290 <UART_AdvFeatureConfig+0x14c>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	0019      	movs	r1, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b6:	2204      	movs	r2, #4
 80041b8:	4013      	ands	r3, r2
 80041ba:	d00b      	beq.n	80041d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	4a34      	ldr	r2, [pc, #208]	@ (8004294 <UART_AdvFeatureConfig+0x150>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	0019      	movs	r1, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d8:	2210      	movs	r2, #16
 80041da:	4013      	ands	r3, r2
 80041dc:	d00b      	beq.n	80041f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	4a2c      	ldr	r2, [pc, #176]	@ (8004298 <UART_AdvFeatureConfig+0x154>)
 80041e6:	4013      	ands	r3, r2
 80041e8:	0019      	movs	r1, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fa:	2220      	movs	r2, #32
 80041fc:	4013      	ands	r3, r2
 80041fe:	d00b      	beq.n	8004218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	4a25      	ldr	r2, [pc, #148]	@ (800429c <UART_AdvFeatureConfig+0x158>)
 8004208:	4013      	ands	r3, r2
 800420a:	0019      	movs	r1, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421c:	2240      	movs	r2, #64	@ 0x40
 800421e:	4013      	ands	r3, r2
 8004220:	d01d      	beq.n	800425e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	4a1d      	ldr	r2, [pc, #116]	@ (80042a0 <UART_AdvFeatureConfig+0x15c>)
 800422a:	4013      	ands	r3, r2
 800422c:	0019      	movs	r1, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800423e:	2380      	movs	r3, #128	@ 0x80
 8004240:	035b      	lsls	r3, r3, #13
 8004242:	429a      	cmp	r2, r3
 8004244:	d10b      	bne.n	800425e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a15      	ldr	r2, [pc, #84]	@ (80042a4 <UART_AdvFeatureConfig+0x160>)
 800424e:	4013      	ands	r3, r2
 8004250:	0019      	movs	r1, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004262:	2280      	movs	r2, #128	@ 0x80
 8004264:	4013      	ands	r3, r2
 8004266:	d00b      	beq.n	8004280 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4a0e      	ldr	r2, [pc, #56]	@ (80042a8 <UART_AdvFeatureConfig+0x164>)
 8004270:	4013      	ands	r3, r2
 8004272:	0019      	movs	r1, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	605a      	str	r2, [r3, #4]
  }
}
 8004280:	46c0      	nop			@ (mov r8, r8)
 8004282:	46bd      	mov	sp, r7
 8004284:	b002      	add	sp, #8
 8004286:	bd80      	pop	{r7, pc}
 8004288:	ffff7fff 	.word	0xffff7fff
 800428c:	fffdffff 	.word	0xfffdffff
 8004290:	fffeffff 	.word	0xfffeffff
 8004294:	fffbffff 	.word	0xfffbffff
 8004298:	ffffefff 	.word	0xffffefff
 800429c:	ffffdfff 	.word	0xffffdfff
 80042a0:	ffefffff 	.word	0xffefffff
 80042a4:	ff9fffff 	.word	0xff9fffff
 80042a8:	fff7ffff 	.word	0xfff7ffff

080042ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b092      	sub	sp, #72	@ 0x48
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2290      	movs	r2, #144	@ 0x90
 80042b8:	2100      	movs	r1, #0
 80042ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042bc:	f7fc fd68 	bl	8000d90 <HAL_GetTick>
 80042c0:	0003      	movs	r3, r0
 80042c2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2208      	movs	r2, #8
 80042cc:	4013      	ands	r3, r2
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d12d      	bne.n	800432e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042d4:	2280      	movs	r2, #128	@ 0x80
 80042d6:	0391      	lsls	r1, r2, #14
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	4a47      	ldr	r2, [pc, #284]	@ (80043f8 <UART_CheckIdleState+0x14c>)
 80042dc:	9200      	str	r2, [sp, #0]
 80042de:	2200      	movs	r2, #0
 80042e0:	f000 f88e 	bl	8004400 <UART_WaitOnFlagUntilTimeout>
 80042e4:	1e03      	subs	r3, r0, #0
 80042e6:	d022      	beq.n	800432e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042e8:	f3ef 8310 	mrs	r3, PRIMASK
 80042ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80042f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042f2:	2301      	movs	r3, #1
 80042f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f8:	f383 8810 	msr	PRIMASK, r3
}
 80042fc:	46c0      	nop			@ (mov r8, r8)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2180      	movs	r1, #128	@ 0x80
 800430a:	438a      	bics	r2, r1
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004314:	f383 8810 	msr	PRIMASK, r3
}
 8004318:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2288      	movs	r2, #136	@ 0x88
 800431e:	2120      	movs	r1, #32
 8004320:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2284      	movs	r2, #132	@ 0x84
 8004326:	2100      	movs	r1, #0
 8004328:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e060      	b.n	80043f0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2204      	movs	r2, #4
 8004336:	4013      	ands	r3, r2
 8004338:	2b04      	cmp	r3, #4
 800433a:	d146      	bne.n	80043ca <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800433c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800433e:	2280      	movs	r2, #128	@ 0x80
 8004340:	03d1      	lsls	r1, r2, #15
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	4a2c      	ldr	r2, [pc, #176]	@ (80043f8 <UART_CheckIdleState+0x14c>)
 8004346:	9200      	str	r2, [sp, #0]
 8004348:	2200      	movs	r2, #0
 800434a:	f000 f859 	bl	8004400 <UART_WaitOnFlagUntilTimeout>
 800434e:	1e03      	subs	r3, r0, #0
 8004350:	d03b      	beq.n	80043ca <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004352:	f3ef 8310 	mrs	r3, PRIMASK
 8004356:	60fb      	str	r3, [r7, #12]
  return(result);
 8004358:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800435a:	637b      	str	r3, [r7, #52]	@ 0x34
 800435c:	2301      	movs	r3, #1
 800435e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f383 8810 	msr	PRIMASK, r3
}
 8004366:	46c0      	nop			@ (mov r8, r8)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4922      	ldr	r1, [pc, #136]	@ (80043fc <UART_CheckIdleState+0x150>)
 8004374:	400a      	ands	r2, r1
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800437a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f383 8810 	msr	PRIMASK, r3
}
 8004382:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004384:	f3ef 8310 	mrs	r3, PRIMASK
 8004388:	61bb      	str	r3, [r7, #24]
  return(result);
 800438a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438c:	633b      	str	r3, [r7, #48]	@ 0x30
 800438e:	2301      	movs	r3, #1
 8004390:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	f383 8810 	msr	PRIMASK, r3
}
 8004398:	46c0      	nop			@ (mov r8, r8)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2101      	movs	r1, #1
 80043a6:	438a      	bics	r2, r1
 80043a8:	609a      	str	r2, [r3, #8]
 80043aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	f383 8810 	msr	PRIMASK, r3
}
 80043b4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	228c      	movs	r2, #140	@ 0x8c
 80043ba:	2120      	movs	r1, #32
 80043bc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2284      	movs	r2, #132	@ 0x84
 80043c2:	2100      	movs	r1, #0
 80043c4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e012      	b.n	80043f0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2288      	movs	r2, #136	@ 0x88
 80043ce:	2120      	movs	r1, #32
 80043d0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	228c      	movs	r2, #140	@ 0x8c
 80043d6:	2120      	movs	r1, #32
 80043d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2284      	movs	r2, #132	@ 0x84
 80043ea:	2100      	movs	r1, #0
 80043ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	0018      	movs	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b010      	add	sp, #64	@ 0x40
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	01ffffff 	.word	0x01ffffff
 80043fc:	fffffedf 	.word	0xfffffedf

08004400 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	603b      	str	r3, [r7, #0]
 800440c:	1dfb      	adds	r3, r7, #7
 800440e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004410:	e051      	b.n	80044b6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	3301      	adds	r3, #1
 8004416:	d04e      	beq.n	80044b6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004418:	f7fc fcba 	bl	8000d90 <HAL_GetTick>
 800441c:	0002      	movs	r2, r0
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	429a      	cmp	r2, r3
 8004426:	d302      	bcc.n	800442e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e051      	b.n	80044d6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2204      	movs	r2, #4
 800443a:	4013      	ands	r3, r2
 800443c:	d03b      	beq.n	80044b6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b80      	cmp	r3, #128	@ 0x80
 8004442:	d038      	beq.n	80044b6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b40      	cmp	r3, #64	@ 0x40
 8004448:	d035      	beq.n	80044b6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	2208      	movs	r2, #8
 8004452:	4013      	ands	r3, r2
 8004454:	2b08      	cmp	r3, #8
 8004456:	d111      	bne.n	800447c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2208      	movs	r2, #8
 800445e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	0018      	movs	r0, r3
 8004464:	f000 f83c 	bl	80044e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2290      	movs	r2, #144	@ 0x90
 800446c:	2108      	movs	r1, #8
 800446e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2284      	movs	r2, #132	@ 0x84
 8004474:	2100      	movs	r1, #0
 8004476:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e02c      	b.n	80044d6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69da      	ldr	r2, [r3, #28]
 8004482:	2380      	movs	r3, #128	@ 0x80
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	401a      	ands	r2, r3
 8004488:	2380      	movs	r3, #128	@ 0x80
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	429a      	cmp	r2, r3
 800448e:	d112      	bne.n	80044b6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2280      	movs	r2, #128	@ 0x80
 8004496:	0112      	lsls	r2, r2, #4
 8004498:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	0018      	movs	r0, r3
 800449e:	f000 f81f 	bl	80044e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2290      	movs	r2, #144	@ 0x90
 80044a6:	2120      	movs	r1, #32
 80044a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2284      	movs	r2, #132	@ 0x84
 80044ae:	2100      	movs	r1, #0
 80044b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e00f      	b.n	80044d6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	4013      	ands	r3, r2
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	425a      	negs	r2, r3
 80044c6:	4153      	adcs	r3, r2
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	001a      	movs	r2, r3
 80044cc:	1dfb      	adds	r3, r7, #7
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d09e      	beq.n	8004412 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	0018      	movs	r0, r3
 80044d8:	46bd      	mov	sp, r7
 80044da:	b004      	add	sp, #16
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08e      	sub	sp, #56	@ 0x38
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044e8:	f3ef 8310 	mrs	r3, PRIMASK
 80044ec:	617b      	str	r3, [r7, #20]
  return(result);
 80044ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80044f2:	2301      	movs	r3, #1
 80044f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	f383 8810 	msr	PRIMASK, r3
}
 80044fc:	46c0      	nop			@ (mov r8, r8)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4926      	ldr	r1, [pc, #152]	@ (80045a4 <UART_EndRxTransfer+0xc4>)
 800450a:	400a      	ands	r2, r1
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004510:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	f383 8810 	msr	PRIMASK, r3
}
 8004518:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800451a:	f3ef 8310 	mrs	r3, PRIMASK
 800451e:	623b      	str	r3, [r7, #32]
  return(result);
 8004520:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004522:	633b      	str	r3, [r7, #48]	@ 0x30
 8004524:	2301      	movs	r3, #1
 8004526:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452a:	f383 8810 	msr	PRIMASK, r3
}
 800452e:	46c0      	nop			@ (mov r8, r8)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	491b      	ldr	r1, [pc, #108]	@ (80045a8 <UART_EndRxTransfer+0xc8>)
 800453c:	400a      	ands	r2, r1
 800453e:	609a      	str	r2, [r3, #8]
 8004540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004542:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004546:	f383 8810 	msr	PRIMASK, r3
}
 800454a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004550:	2b01      	cmp	r3, #1
 8004552:	d118      	bne.n	8004586 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004554:	f3ef 8310 	mrs	r3, PRIMASK
 8004558:	60bb      	str	r3, [r7, #8]
  return(result);
 800455a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800455c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800455e:	2301      	movs	r3, #1
 8004560:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f383 8810 	msr	PRIMASK, r3
}
 8004568:	46c0      	nop			@ (mov r8, r8)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2110      	movs	r1, #16
 8004576:	438a      	bics	r2, r1
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800457c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f383 8810 	msr	PRIMASK, r3
}
 8004584:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	228c      	movs	r2, #140	@ 0x8c
 800458a:	2120      	movs	r1, #32
 800458c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800459a:	46c0      	nop			@ (mov r8, r8)
 800459c:	46bd      	mov	sp, r7
 800459e:	b00e      	add	sp, #56	@ 0x38
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	46c0      	nop			@ (mov r8, r8)
 80045a4:	fffffedf 	.word	0xfffffedf
 80045a8:	effffffe 	.word	0xeffffffe

080045ac <memset>:
 80045ac:	0003      	movs	r3, r0
 80045ae:	1882      	adds	r2, r0, r2
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d100      	bne.n	80045b6 <memset+0xa>
 80045b4:	4770      	bx	lr
 80045b6:	7019      	strb	r1, [r3, #0]
 80045b8:	3301      	adds	r3, #1
 80045ba:	e7f9      	b.n	80045b0 <memset+0x4>

080045bc <__libc_init_array>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	2600      	movs	r6, #0
 80045c0:	4c0c      	ldr	r4, [pc, #48]	@ (80045f4 <__libc_init_array+0x38>)
 80045c2:	4d0d      	ldr	r5, [pc, #52]	@ (80045f8 <__libc_init_array+0x3c>)
 80045c4:	1b64      	subs	r4, r4, r5
 80045c6:	10a4      	asrs	r4, r4, #2
 80045c8:	42a6      	cmp	r6, r4
 80045ca:	d109      	bne.n	80045e0 <__libc_init_array+0x24>
 80045cc:	2600      	movs	r6, #0
 80045ce:	f000 f819 	bl	8004604 <_init>
 80045d2:	4c0a      	ldr	r4, [pc, #40]	@ (80045fc <__libc_init_array+0x40>)
 80045d4:	4d0a      	ldr	r5, [pc, #40]	@ (8004600 <__libc_init_array+0x44>)
 80045d6:	1b64      	subs	r4, r4, r5
 80045d8:	10a4      	asrs	r4, r4, #2
 80045da:	42a6      	cmp	r6, r4
 80045dc:	d105      	bne.n	80045ea <__libc_init_array+0x2e>
 80045de:	bd70      	pop	{r4, r5, r6, pc}
 80045e0:	00b3      	lsls	r3, r6, #2
 80045e2:	58eb      	ldr	r3, [r5, r3]
 80045e4:	4798      	blx	r3
 80045e6:	3601      	adds	r6, #1
 80045e8:	e7ee      	b.n	80045c8 <__libc_init_array+0xc>
 80045ea:	00b3      	lsls	r3, r6, #2
 80045ec:	58eb      	ldr	r3, [r5, r3]
 80045ee:	4798      	blx	r3
 80045f0:	3601      	adds	r6, #1
 80045f2:	e7f2      	b.n	80045da <__libc_init_array+0x1e>
 80045f4:	08004744 	.word	0x08004744
 80045f8:	08004744 	.word	0x08004744
 80045fc:	08004748 	.word	0x08004748
 8004600:	08004744 	.word	0x08004744

08004604 <_init>:
 8004604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004606:	46c0      	nop			@ (mov r8, r8)
 8004608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460a:	bc08      	pop	{r3}
 800460c:	469e      	mov	lr, r3
 800460e:	4770      	bx	lr

08004610 <_fini>:
 8004610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004612:	46c0      	nop			@ (mov r8, r8)
 8004614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004616:	bc08      	pop	{r3}
 8004618:	469e      	mov	lr, r3
 800461a:	4770      	bx	lr
