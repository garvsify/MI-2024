
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093d0  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c70  08009490  08009490  0000a490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a100  0800a100  0000c494  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a100  0800a100  0000b100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a108  0800a108  0000c494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a108  0800a108  0000b108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a10c  0800a10c  0000b10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000494  20000000  0800a110  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000008f8  20000498  0800a5a4  0000c498  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d90  0800a5a4  0000cd90  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c494  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ad73  00000000  00000000  0000c4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005784  00000000  00000000  0003722f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001007c  00000000  00000000  0003c9b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f0  00000000  00000000  0004ca30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000146f  00000000  00000000  0004e120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001edd4  00000000  00000000  0004f58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008aa8  00000000  00000000  0006e363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00076e0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ab8  00000000  00000000  00076e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0007a908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000498 	.word	0x20000498
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009464 	.word	0x08009464

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000049c 	.word	0x2000049c
 8000104:	08009464 	.word	0x08009464

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <Initialise_Preset_Arrays>:
volatile uint8_t CC_array[5] = {0};

//FUNCTION DEFINITIONS
uint8_t Initialise_Preset_Arrays(void){

	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 800044c:	490e      	ldr	r1, [pc, #56]	@ (8000488 <Initialise_Preset_Arrays+0x3c>)
 800044e:	4b0f      	ldr	r3, [pc, #60]	@ (800048c <Initialise_Preset_Arrays+0x40>)
 8000450:	60cb      	str	r3, [r1, #12]
 8000452:	4a0f      	ldr	r2, [pc, #60]	@ (8000490 <Initialise_Preset_Arrays+0x44>)
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <Initialise_Preset_Arrays+0x48>)
 8000456:	60d3      	str	r3, [r2, #12]
 8000458:	4b0f      	ldr	r3, [pc, #60]	@ (8000498 <Initialise_Preset_Arrays+0x4c>)
 800045a:	4810      	ldr	r0, [pc, #64]	@ (800049c <Initialise_Preset_Arrays+0x50>)
 800045c:	60d8      	str	r0, [r3, #12]
 800045e:	4810      	ldr	r0, [pc, #64]	@ (80004a0 <Initialise_Preset_Arrays+0x54>)
 8000460:	6088      	str	r0, [r1, #8]
 8000462:	4810      	ldr	r0, [pc, #64]	@ (80004a4 <Initialise_Preset_Arrays+0x58>)
 8000464:	6090      	str	r0, [r2, #8]
 8000466:	4810      	ldr	r0, [pc, #64]	@ (80004a8 <Initialise_Preset_Arrays+0x5c>)
 8000468:	6098      	str	r0, [r3, #8]
 800046a:	4810      	ldr	r0, [pc, #64]	@ (80004ac <Initialise_Preset_Arrays+0x60>)
 800046c:	6048      	str	r0, [r1, #4]
 800046e:	4810      	ldr	r0, [pc, #64]	@ (80004b0 <Initialise_Preset_Arrays+0x64>)
 8000470:	6050      	str	r0, [r2, #4]
 8000472:	4810      	ldr	r0, [pc, #64]	@ (80004b4 <Initialise_Preset_Arrays+0x68>)
 8000474:	6058      	str	r0, [r3, #4]
 8000476:	4810      	ldr	r0, [pc, #64]	@ (80004b8 <Initialise_Preset_Arrays+0x6c>)
 8000478:	6008      	str	r0, [r1, #0]
 800047a:	4910      	ldr	r1, [pc, #64]	@ (80004bc <Initialise_Preset_Arrays+0x70>)
 800047c:	6011      	str	r1, [r2, #0]
 800047e:	4a10      	ldr	r2, [pc, #64]	@ (80004c0 <Initialise_Preset_Arrays+0x74>)
 8000480:	601a      	str	r2, [r3, #0]
			storage_user_presets_array[i] = &storage_user_preset_3;
		}
	}

	return 1;
}
 8000482:	2001      	movs	r0, #1
 8000484:	4770      	bx	lr
 8000486:	46c0      	nop			@ (mov r8, r8)
 8000488:	200004e0 	.word	0x200004e0
 800048c:	200004c0 	.word	0x200004c0
 8000490:	20000518 	.word	0x20000518
 8000494:	20000000 	.word	0x20000000
 8000498:	20000528 	.word	0x20000528
 800049c:	080094a0 	.word	0x080094a0
 80004a0:	200004c8 	.word	0x200004c8
 80004a4:	20000008 	.word	0x20000008
 80004a8:	080094a8 	.word	0x080094a8
 80004ac:	200004d0 	.word	0x200004d0
 80004b0:	20000010 	.word	0x20000010
 80004b4:	080094b0 	.word	0x080094b0
 80004b8:	200004d8 	.word	0x200004d8
 80004bc:	20000018 	.word	0x20000018
 80004c0:	080094b8 	.word	0x080094b8

080004c4 <Convert_All_Preset_Values>:
}


uint8_t Convert_All_Preset_Values(volatile struct Preset* preset_ptr, volatile struct Preset_Converted* preset_converted_ptr){

	preset_converted_ptr->waveshape = preset_ptr->waveshape; //7-bit copy
 80004c4:	7803      	ldrb	r3, [r0, #0]
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	700b      	strb	r3, [r1, #0]
	preset_converted_ptr->speed = (preset_ptr->speed) << 3; //convert to 10-bit
 80004ca:	7843      	ldrb	r3, [r0, #1]
 80004cc:	00db      	lsls	r3, r3, #3
 80004ce:	804b      	strh	r3, [r1, #2]
	preset_converted_ptr->depth = preset_ptr->depth; //7-bit copy
 80004d0:	7883      	ldrb	r3, [r0, #2]
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	710b      	strb	r3, [r1, #4]
	preset_converted_ptr->symmetry = (preset_ptr->symmetry) << 1; //convert to 8-bit
 80004d6:	78c3      	ldrb	r3, [r0, #3]
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	80cb      	strh	r3, [r1, #6]
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit
 80004dc:	7903      	ldrb	r3, [r0, #4]
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	810b      	strh	r3, [r1, #8]

	return 1;
}
 80004e2:	2001      	movs	r0, #1
 80004e4:	4770      	bx	lr

080004e6 <Convert_All_Params_Values_for_Preset>:

uint8_t Convert_All_Params_Values_for_Preset(volatile struct Params *params_ptr, volatile struct Preset* preset_ptr){

	preset_ptr->waveshape = params_ptr->waveshape; //7-bit copy
 80004e6:	7a03      	ldrb	r3, [r0, #8]
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	700b      	strb	r3, [r1, #0]
	preset_ptr->speed = params_ptr->speed >> 3; //convert from 10-bit to 7-bit
 80004ec:	8943      	ldrh	r3, [r0, #10]
 80004ee:	08db      	lsrs	r3, r3, #3
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	704b      	strb	r3, [r1, #1]
	preset_ptr->depth = params_ptr->depth; //7-bit copy
 80004f4:	7b03      	ldrb	r3, [r0, #12]
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	708b      	strb	r3, [r1, #2]
	preset_ptr->symmetry = params_ptr->symmetry >> 1; //convert from 8-bit to 7-bit
 80004fa:	89c3      	ldrh	r3, [r0, #14]
 80004fc:	085b      	lsrs	r3, r3, #1
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	70cb      	strb	r3, [r1, #3]
	preset_ptr->phase = params_ptr->duty_delay_line_read_pointer_offset >> 2; //convert from 9-bit to 7-bit
 8000502:	8c83      	ldrh	r3, [r0, #36]	@ 0x24
 8000504:	089b      	lsrs	r3, r3, #2
 8000506:	b2db      	uxtb	r3, r3
 8000508:	710b      	strb	r3, [r1, #4]

	return 1;
}
 800050a:	2001      	movs	r0, #1
 800050c:	4770      	bx	lr

0800050e <Pack_Preset_Into_Doubleword>:
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit

	return 1;
}

uint8_t Pack_Preset_Into_Doubleword(volatile struct Preset* preset_ptr, uint64_t *Doubleword_ptr){
 800050e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000510:	46c6      	mov	lr, r8
 8000512:	b500      	push	{lr}
 8000514:	4688      	mov	r8, r1
 8000516:	2200      	movs	r2, #0

	uint64_t packed = 0;
 8000518:	2700      	movs	r7, #0
 800051a:	2600      	movs	r6, #0

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){

		packed |= ((uint64_t)*(((uint8_t *)preset_ptr)+i) << (i << 3)); //<< (i*8)
 800051c:	2320      	movs	r3, #32
 800051e:	469c      	mov	ip, r3
 8000520:	e00c      	b.n	800053c <Pack_Preset_Into_Doubleword+0x2e>
 8000522:	4661      	mov	r1, ip
 8000524:	1b0d      	subs	r5, r1, r4
 8000526:	0019      	movs	r1, r3
 8000528:	40e9      	lsrs	r1, r5
 800052a:	000d      	movs	r5, r1
 800052c:	40a3      	lsls	r3, r4
 800052e:	433b      	orrs	r3, r7
 8000530:	4335      	orrs	r5, r6
 8000532:	001f      	movs	r7, r3
 8000534:	002e      	movs	r6, r5
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){
 8000536:	3201      	adds	r2, #1
 8000538:	2a05      	cmp	r2, #5
 800053a:	d008      	beq.n	800054e <Pack_Preset_Into_Doubleword+0x40>
		packed |= ((uint64_t)*(((uint8_t *)preset_ptr)+i) << (i << 3)); //<< (i*8)
 800053c:	5c83      	ldrb	r3, [r0, r2]
 800053e:	00d4      	lsls	r4, r2, #3
 8000540:	0025      	movs	r5, r4
 8000542:	3d20      	subs	r5, #32
 8000544:	d4ed      	bmi.n	8000522 <Pack_Preset_Into_Doubleword+0x14>
 8000546:	0019      	movs	r1, r3
 8000548:	40a9      	lsls	r1, r5
 800054a:	000d      	movs	r5, r1
 800054c:	e7ee      	b.n	800052c <Pack_Preset_Into_Doubleword+0x1e>
	}

	*Doubleword_ptr = packed;
 800054e:	4642      	mov	r2, r8
 8000550:	6013      	str	r3, [r2, #0]
 8000552:	6055      	str	r5, [r2, #4]

	return 1;
}
 8000554:	2001      	movs	r0, #1
 8000556:	bc80      	pop	{r7}
 8000558:	46b8      	mov	r8, r7
 800055a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800055c <Read_and_Interpret_Preset_From_Flash>:

uint8_t Read_and_Interpret_Preset_From_Flash(uint32_t address_val, volatile struct Preset* preset_ptr){
 800055c:	b530      	push	{r4, r5, lr}

	uint8_t *flash = (uint8_t *)address_val;
	uint8_t *preset = (uint8_t *)preset_ptr;

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 800055e:	1d4c      	adds	r4, r1, #5
uint8_t Read_and_Interpret_Preset_From_Flash(uint32_t address_val, volatile struct Preset* preset_ptr){
 8000560:	000b      	movs	r3, r1

		if(*(flash + i) > 0x7F){ //127
 8000562:	1a41      	subs	r1, r0, r1
			*(preset + i) = 0x7F;
 8000564:	257f      	movs	r5, #127	@ 0x7f
 8000566:	e003      	b.n	8000570 <Read_and_Interpret_Preset_From_Flash+0x14>
 8000568:	701d      	strb	r5, [r3, #0]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 800056a:	3301      	adds	r3, #1
 800056c:	42a3      	cmp	r3, r4
 800056e:	d005      	beq.n	800057c <Read_and_Interpret_Preset_From_Flash+0x20>
		if(*(flash + i) > 0x7F){ //127
 8000570:	5cc8      	ldrb	r0, [r1, r3]
 8000572:	56ca      	ldrsb	r2, [r1, r3]
 8000574:	2a00      	cmp	r2, #0
 8000576:	dbf7      	blt.n	8000568 <Read_and_Interpret_Preset_From_Flash+0xc>
		}
		else{
			*(preset + i) = *(flash + i);
 8000578:	7018      	strb	r0, [r3, #0]
 800057a:	e7f6      	b.n	800056a <Read_and_Interpret_Preset_From_Flash+0xe>
		}
	}

	return 1;
}
 800057c:	2001      	movs	r0, #1
 800057e:	bd30      	pop	{r4, r5, pc}

08000580 <Pack_Misc_Into_Doubleword>:

uint8_t Pack_Misc_Into_Doubleword(volatile enum Validate *user_presets_used_array_ptr, volatile uint32_t *statuses_ptr, volatile enum MIDI_Channel *MIDI_basic_channel_ptr, uint64_t *Doubleword_ptr, uint8_t num_presets){
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	46de      	mov	lr, fp
 8000584:	4657      	mov	r7, sl
 8000586:	464e      	mov	r6, r9
 8000588:	4645      	mov	r5, r8
 800058a:	b5e0      	push	{r5, r6, r7, lr}
 800058c:	b083      	sub	sp, #12
 800058e:	4689      	mov	r9, r1
 8000590:	4692      	mov	sl, r2
 8000592:	4698      	mov	r8, r3
 8000594:	ab0c      	add	r3, sp, #48	@ 0x30
 8000596:	781d      	ldrb	r5, [r3, #0]
	//This function will break if presets are bigger than 5

	uint64_t packed = 0;

	//USER PRESETS USED ARRAY
	for(uint8_t i = 0; i < num_presets; i++){
 8000598:	2d00      	cmp	r5, #0
 800059a:	d01f      	beq.n	80005dc <Pack_Misc_Into_Doubleword+0x5c>
 800059c:	2300      	movs	r3, #0
	uint64_t packed = 0;
 800059e:	2700      	movs	r7, #0
 80005a0:	2200      	movs	r2, #0
 80005a2:	9201      	str	r2, [sp, #4]

		packed |= ((uint64_t)user_presets_used_array_ptr[i] << (i << 3)); //<< (i*8)
 80005a4:	3220      	adds	r2, #32
 80005a6:	4694      	mov	ip, r2
 80005a8:	e00d      	b.n	80005c6 <Pack_Misc_Into_Doubleword+0x46>
 80005aa:	4661      	mov	r1, ip
 80005ac:	1a89      	subs	r1, r1, r2
 80005ae:	0026      	movs	r6, r4
 80005b0:	40ce      	lsrs	r6, r1
 80005b2:	0031      	movs	r1, r6
 80005b4:	4094      	lsls	r4, r2
 80005b6:	4327      	orrs	r7, r4
 80005b8:	9a01      	ldr	r2, [sp, #4]
 80005ba:	430a      	orrs	r2, r1
 80005bc:	9201      	str	r2, [sp, #4]
	for(uint8_t i = 0; i < num_presets; i++){
 80005be:	3301      	adds	r3, #1
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	4295      	cmp	r5, r2
 80005c4:	d90d      	bls.n	80005e2 <Pack_Misc_Into_Doubleword+0x62>
		packed |= ((uint64_t)user_presets_used_array_ptr[i] << (i << 3)); //<< (i*8)
 80005c6:	18c2      	adds	r2, r0, r3
 80005c8:	7814      	ldrb	r4, [r2, #0]
 80005ca:	b2e4      	uxtb	r4, r4
 80005cc:	00da      	lsls	r2, r3, #3
 80005ce:	0011      	movs	r1, r2
 80005d0:	3920      	subs	r1, #32
 80005d2:	d4ea      	bmi.n	80005aa <Pack_Misc_Into_Doubleword+0x2a>
 80005d4:	0026      	movs	r6, r4
 80005d6:	408e      	lsls	r6, r1
 80005d8:	0031      	movs	r1, r6
 80005da:	e7eb      	b.n	80005b4 <Pack_Misc_Into_Doubleword+0x34>
	uint64_t packed = 0;
 80005dc:	2700      	movs	r7, #0
 80005de:	2300      	movs	r3, #0
 80005e0:	9301      	str	r3, [sp, #4]
	}

	//START REQUIRED BEFORE MIDI CLK
	enum Validate start_required_before_midi_clk_status_bit = Get_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 80005e2:	2180      	movs	r1, #128	@ 0x80
 80005e4:	4648      	mov	r0, r9
 80005e6:	f004 fbfb 	bl	8004de0 <Get_Status_Bit>
 80005ea:	0004      	movs	r4, r0

	uint8_t shift = num_presets << 3; //<< (4 * 8)
 80005ec:	00ed      	lsls	r5, r5, #3
	packed |= (uint64_t)start_required_before_midi_clk_status_bit << shift;
 80005ee:	b2ed      	uxtb	r5, r5
 80005f0:	002b      	movs	r3, r5
 80005f2:	3b20      	subs	r3, #32
 80005f4:	d42e      	bmi.n	8000654 <Pack_Misc_Into_Doubleword+0xd4>
 80005f6:	0002      	movs	r2, r0
 80005f8:	409a      	lsls	r2, r3
 80005fa:	4693      	mov	fp, r2
 80005fc:	40ac      	lsls	r4, r5

	//OMNI ON/OFF (MIDI CHANNEL VOICE MODE)
	enum Validate MIDI_channel_voice_mode_status_bit = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 80005fe:	2180      	movs	r1, #128	@ 0x80
 8000600:	00c9      	lsls	r1, r1, #3
 8000602:	4648      	mov	r0, r9
 8000604:	f004 fbec 	bl	8004de0 <Get_Status_Bit>

	packed |= (uint64_t)MIDI_channel_voice_mode_status_bit << (shift + (1 << 3)); //(8 * 5)

	//MIDI BASIC CHANNEL
	packed |= (uint64_t) *MIDI_basic_channel_ptr << (shift + (2 << 3));
 8000608:	4653      	mov	r3, sl
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	0029      	movs	r1, r5
 8000610:	3110      	adds	r1, #16
 8000612:	002a      	movs	r2, r5
 8000614:	3a10      	subs	r2, #16
 8000616:	d423      	bmi.n	8000660 <Pack_Misc_Into_Doubleword+0xe0>
 8000618:	001e      	movs	r6, r3
 800061a:	4096      	lsls	r6, r2
 800061c:	0032      	movs	r2, r6
 800061e:	408b      	lsls	r3, r1
 8000620:	433b      	orrs	r3, r7
 8000622:	9901      	ldr	r1, [sp, #4]
 8000624:	430a      	orrs	r2, r1
 8000626:	4323      	orrs	r3, r4
 8000628:	4659      	mov	r1, fp
 800062a:	430a      	orrs	r2, r1
	packed |= (uint64_t)MIDI_channel_voice_mode_status_bit << (shift + (1 << 3)); //(8 * 5)
 800062c:	002c      	movs	r4, r5
 800062e:	3408      	adds	r4, #8
 8000630:	3d18      	subs	r5, #24
 8000632:	d41b      	bmi.n	800066c <Pack_Misc_Into_Doubleword+0xec>
 8000634:	0001      	movs	r1, r0
 8000636:	40a9      	lsls	r1, r5
 8000638:	40a0      	lsls	r0, r4
	packed |= (uint64_t) *MIDI_basic_channel_ptr << (shift + (2 << 3));
 800063a:	4318      	orrs	r0, r3
 800063c:	4643      	mov	r3, r8
 800063e:	6018      	str	r0, [r3, #0]
 8000640:	430a      	orrs	r2, r1
 8000642:	605a      	str	r2, [r3, #4]

	*Doubleword_ptr = packed;

	return 1;
}
 8000644:	2001      	movs	r0, #1
 8000646:	b003      	add	sp, #12
 8000648:	bcf0      	pop	{r4, r5, r6, r7}
 800064a:	46bb      	mov	fp, r7
 800064c:	46b2      	mov	sl, r6
 800064e:	46a9      	mov	r9, r5
 8000650:	46a0      	mov	r8, r4
 8000652:	bdf0      	pop	{r4, r5, r6, r7, pc}
	packed |= (uint64_t)start_required_before_midi_clk_status_bit << shift;
 8000654:	2320      	movs	r3, #32
 8000656:	1b5b      	subs	r3, r3, r5
 8000658:	0002      	movs	r2, r0
 800065a:	40da      	lsrs	r2, r3
 800065c:	4693      	mov	fp, r2
 800065e:	e7cd      	b.n	80005fc <Pack_Misc_Into_Doubleword+0x7c>
	packed |= (uint64_t) *MIDI_basic_channel_ptr << (shift + (2 << 3));
 8000660:	2220      	movs	r2, #32
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	001e      	movs	r6, r3
 8000666:	40d6      	lsrs	r6, r2
 8000668:	0032      	movs	r2, r6
 800066a:	e7d8      	b.n	800061e <Pack_Misc_Into_Doubleword+0x9e>
	packed |= (uint64_t)MIDI_channel_voice_mode_status_bit << (shift + (1 << 3)); //(8 * 5)
 800066c:	2120      	movs	r1, #32
 800066e:	1b09      	subs	r1, r1, r4
 8000670:	0005      	movs	r5, r0
 8000672:	40cd      	lsrs	r5, r1
 8000674:	0029      	movs	r1, r5
 8000676:	e7df      	b.n	8000638 <Pack_Misc_Into_Doubleword+0xb8>

08000678 <Store_Single_Preset_In_Flash>:

uint8_t Store_Single_Preset_In_Flash(volatile struct Preset *preset, uint8_t preset_num){
 8000678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067a:	b08d      	sub	sp, #52	@ 0x34
 800067c:	0005      	movs	r5, r0
 800067e:	000e      	movs	r6, r1

	//whole page has to be erased, so first store state of all presets (including one to be overwritten for simplicity)
	//as well as miscellaneous data

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &storage_user_preset_0);
 8000680:	4971      	ldr	r1, [pc, #452]	@ (8000848 <Store_Single_Preset_In_Flash+0x1d0>)
 8000682:	4872      	ldr	r0, [pc, #456]	@ (800084c <Store_Single_Preset_In_Flash+0x1d4>)
 8000684:	f7ff ff6a 	bl	800055c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &storage_user_preset_1);
 8000688:	4971      	ldr	r1, [pc, #452]	@ (8000850 <Store_Single_Preset_In_Flash+0x1d8>)
 800068a:	4872      	ldr	r0, [pc, #456]	@ (8000854 <Store_Single_Preset_In_Flash+0x1dc>)
 800068c:	f7ff ff66 	bl	800055c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &storage_user_preset_2);
 8000690:	4971      	ldr	r1, [pc, #452]	@ (8000858 <Store_Single_Preset_In_Flash+0x1e0>)
 8000692:	4872      	ldr	r0, [pc, #456]	@ (800085c <Store_Single_Preset_In_Flash+0x1e4>)
 8000694:	f7ff ff62 	bl	800055c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &storage_user_preset_3);
 8000698:	4971      	ldr	r1, [pc, #452]	@ (8000860 <Store_Single_Preset_In_Flash+0x1e8>)
 800069a:	4872      	ldr	r0, [pc, #456]	@ (8000864 <Store_Single_Preset_In_Flash+0x1ec>)
 800069c:	f7ff ff5e 	bl	800055c <Read_and_Interpret_Preset_From_Flash>

	uint64_t preset_packed = 0;
	uint64_t misc_packed = 0;
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9208      	str	r2, [sp, #32]
 80006a6:	9309      	str	r3, [sp, #36]	@ 0x24
	uint32_t errors = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	9307      	str	r3, [sp, #28]
	FLASH_EraseInitTypeDef erase_config = {.TypeErase = FLASH_CR_PER, .Banks = FLASH_CR_MER1, .Page = 31, .NbPages = 1};
 80006ac:	ac03      	add	r4, sp, #12
 80006ae:	4b6e      	ldr	r3, [pc, #440]	@ (8000868 <Store_Single_Preset_In_Flash+0x1f0>)
 80006b0:	0022      	movs	r2, r4
 80006b2:	cb83      	ldmia	r3!, {r0, r1, r7}
 80006b4:	c283      	stmia	r2!, {r0, r1, r7}
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Unlock();
 80006ba:	f005 fbe3 	bl	8005e84 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&erase_config, &errors); //all 0xF is no errors
 80006be:	a907      	add	r1, sp, #28
 80006c0:	0020      	movs	r0, r4
 80006c2:	f005 fc85 	bl	8005fd0 <HAL_FLASHEx_Erase>

	if(preset_num == 0){
 80006c6:	2e00      	cmp	r6, #0
 80006c8:	d01a      	beq.n	8000700 <Store_Single_Preset_In_Flash+0x88>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);

		Pack_Preset_Into_Doubleword(&storage_user_preset_3, &preset_packed);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
	}
	else if(preset_num == 1){
 80006ca:	2e01      	cmp	r6, #1
 80006cc:	d041      	beq.n	8000752 <Store_Single_Preset_In_Flash+0xda>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);

		Pack_Preset_Into_Doubleword(&storage_user_preset_3, &preset_packed);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
	}
	else if(preset_num == 2){
 80006ce:	2e02      	cmp	r6, #2
 80006d0:	d100      	bne.n	80006d4 <Store_Single_Preset_In_Flash+0x5c>
 80006d2:	e067      	b.n	80007a4 <Store_Single_Preset_In_Flash+0x12c>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);

		Pack_Preset_Into_Doubleword(&storage_user_preset_3, &preset_packed);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
	}
	else if(preset_num == 3){
 80006d4:	2e03      	cmp	r6, #3
 80006d6:	d100      	bne.n	80006da <Store_Single_Preset_In_Flash+0x62>
 80006d8:	e08d      	b.n	80007f6 <Store_Single_Preset_In_Flash+0x17e>

		Pack_Preset_Into_Doubleword(&storage_user_preset_2, &preset_packed);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
	}

	Pack_Misc_Into_Doubleword(user_presets_used_array, &statuses, &MIDI_basic_channel, &misc_packed, NUM_PRESETS);
 80006da:	4a64      	ldr	r2, [pc, #400]	@ (800086c <Store_Single_Preset_In_Flash+0x1f4>)
 80006dc:	4964      	ldr	r1, [pc, #400]	@ (8000870 <Store_Single_Preset_In_Flash+0x1f8>)
 80006de:	4865      	ldr	r0, [pc, #404]	@ (8000874 <Store_Single_Preset_In_Flash+0x1fc>)
 80006e0:	2304      	movs	r3, #4
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	ab08      	add	r3, sp, #32
 80006e6:	f7ff ff4b 	bl	8000580 <Pack_Misc_Into_Doubleword>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, MISC_FLASH_MEMORY_ADDRESS, misc_packed);
 80006ea:	9a08      	ldr	r2, [sp, #32]
 80006ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80006ee:	4962      	ldr	r1, [pc, #392]	@ (8000878 <Store_Single_Preset_In_Flash+0x200>)
 80006f0:	2001      	movs	r0, #1
 80006f2:	f005 fc15 	bl	8005f20 <HAL_FLASH_Program>

	HAL_FLASH_Lock();
 80006f6:	f005 fc49 	bl	8005f8c <HAL_FLASH_Lock>

	return 1;
}
 80006fa:	2001      	movs	r0, #1
 80006fc:	b00d      	add	sp, #52	@ 0x34
 80006fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 8000700:	a90a      	add	r1, sp, #40	@ 0x28
 8000702:	0028      	movs	r0, r5
 8000704:	f7ff ff03 	bl	800050e <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 8000708:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800070a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800070c:	494f      	ldr	r1, [pc, #316]	@ (800084c <Store_Single_Preset_In_Flash+0x1d4>)
 800070e:	2001      	movs	r0, #1
 8000710:	f005 fc06 	bl	8005f20 <HAL_FLASH_Program>
		Pack_Preset_Into_Doubleword(&storage_user_preset_1, &preset_packed);
 8000714:	484e      	ldr	r0, [pc, #312]	@ (8000850 <Store_Single_Preset_In_Flash+0x1d8>)
 8000716:	a90a      	add	r1, sp, #40	@ 0x28
 8000718:	f7ff fef9 	bl	800050e <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 800071c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800071e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000720:	494c      	ldr	r1, [pc, #304]	@ (8000854 <Store_Single_Preset_In_Flash+0x1dc>)
 8000722:	2001      	movs	r0, #1
 8000724:	f005 fbfc 	bl	8005f20 <HAL_FLASH_Program>
		Pack_Preset_Into_Doubleword(&storage_user_preset_2, &preset_packed);
 8000728:	484b      	ldr	r0, [pc, #300]	@ (8000858 <Store_Single_Preset_In_Flash+0x1e0>)
 800072a:	a90a      	add	r1, sp, #40	@ 0x28
 800072c:	f7ff feef 	bl	800050e <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 8000730:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8000732:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000734:	4949      	ldr	r1, [pc, #292]	@ (800085c <Store_Single_Preset_In_Flash+0x1e4>)
 8000736:	2001      	movs	r0, #1
 8000738:	f005 fbf2 	bl	8005f20 <HAL_FLASH_Program>
		Pack_Preset_Into_Doubleword(&storage_user_preset_3, &preset_packed);
 800073c:	4848      	ldr	r0, [pc, #288]	@ (8000860 <Store_Single_Preset_In_Flash+0x1e8>)
 800073e:	a90a      	add	r1, sp, #40	@ 0x28
 8000740:	f7ff fee5 	bl	800050e <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
 8000744:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8000746:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000748:	4946      	ldr	r1, [pc, #280]	@ (8000864 <Store_Single_Preset_In_Flash+0x1ec>)
 800074a:	2001      	movs	r0, #1
 800074c:	f005 fbe8 	bl	8005f20 <HAL_FLASH_Program>
 8000750:	e7c3      	b.n	80006da <Store_Single_Preset_In_Flash+0x62>
		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 8000752:	a90a      	add	r1, sp, #40	@ 0x28
 8000754:	0028      	movs	r0, r5
 8000756:	f7ff feda 	bl	800050e <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 800075a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800075c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800075e:	493d      	ldr	r1, [pc, #244]	@ (8000854 <Store_Single_Preset_In_Flash+0x1dc>)
 8000760:	2001      	movs	r0, #1
 8000762:	f005 fbdd 	bl	8005f20 <HAL_FLASH_Program>
		Pack_Preset_Into_Doubleword(&storage_user_preset_0, &preset_packed);
 8000766:	4838      	ldr	r0, [pc, #224]	@ (8000848 <Store_Single_Preset_In_Flash+0x1d0>)
 8000768:	a90a      	add	r1, sp, #40	@ 0x28
 800076a:	f7ff fed0 	bl	800050e <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 800076e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8000770:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000772:	4936      	ldr	r1, [pc, #216]	@ (800084c <Store_Single_Preset_In_Flash+0x1d4>)
 8000774:	2001      	movs	r0, #1
 8000776:	f005 fbd3 	bl	8005f20 <HAL_FLASH_Program>
		Pack_Preset_Into_Doubleword(&storage_user_preset_2, &preset_packed);
 800077a:	4837      	ldr	r0, [pc, #220]	@ (8000858 <Store_Single_Preset_In_Flash+0x1e0>)
 800077c:	a90a      	add	r1, sp, #40	@ 0x28
 800077e:	f7ff fec6 	bl	800050e <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 8000782:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8000784:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000786:	4935      	ldr	r1, [pc, #212]	@ (800085c <Store_Single_Preset_In_Flash+0x1e4>)
 8000788:	2001      	movs	r0, #1
 800078a:	f005 fbc9 	bl	8005f20 <HAL_FLASH_Program>
		Pack_Preset_Into_Doubleword(&storage_user_preset_3, &preset_packed);
 800078e:	4834      	ldr	r0, [pc, #208]	@ (8000860 <Store_Single_Preset_In_Flash+0x1e8>)
 8000790:	a90a      	add	r1, sp, #40	@ 0x28
 8000792:	f7ff febc 	bl	800050e <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
 8000796:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8000798:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800079a:	4932      	ldr	r1, [pc, #200]	@ (8000864 <Store_Single_Preset_In_Flash+0x1ec>)
 800079c:	2001      	movs	r0, #1
 800079e:	f005 fbbf 	bl	8005f20 <HAL_FLASH_Program>
 80007a2:	e79a      	b.n	80006da <Store_Single_Preset_In_Flash+0x62>
		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 80007a4:	a90a      	add	r1, sp, #40	@ 0x28
 80007a6:	0028      	movs	r0, r5
 80007a8:	f7ff feb1 	bl	800050e <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 80007ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80007ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80007b0:	492a      	ldr	r1, [pc, #168]	@ (800085c <Store_Single_Preset_In_Flash+0x1e4>)
 80007b2:	2001      	movs	r0, #1
 80007b4:	f005 fbb4 	bl	8005f20 <HAL_FLASH_Program>
		Pack_Preset_Into_Doubleword(&storage_user_preset_0, &preset_packed);
 80007b8:	4823      	ldr	r0, [pc, #140]	@ (8000848 <Store_Single_Preset_In_Flash+0x1d0>)
 80007ba:	a90a      	add	r1, sp, #40	@ 0x28
 80007bc:	f7ff fea7 	bl	800050e <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 80007c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80007c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80007c4:	4921      	ldr	r1, [pc, #132]	@ (800084c <Store_Single_Preset_In_Flash+0x1d4>)
 80007c6:	2001      	movs	r0, #1
 80007c8:	f005 fbaa 	bl	8005f20 <HAL_FLASH_Program>
		Pack_Preset_Into_Doubleword(&storage_user_preset_1, &preset_packed);
 80007cc:	4820      	ldr	r0, [pc, #128]	@ (8000850 <Store_Single_Preset_In_Flash+0x1d8>)
 80007ce:	a90a      	add	r1, sp, #40	@ 0x28
 80007d0:	f7ff fe9d 	bl	800050e <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 80007d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80007d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80007d8:	491e      	ldr	r1, [pc, #120]	@ (8000854 <Store_Single_Preset_In_Flash+0x1dc>)
 80007da:	2001      	movs	r0, #1
 80007dc:	f005 fba0 	bl	8005f20 <HAL_FLASH_Program>
		Pack_Preset_Into_Doubleword(&storage_user_preset_3, &preset_packed);
 80007e0:	481f      	ldr	r0, [pc, #124]	@ (8000860 <Store_Single_Preset_In_Flash+0x1e8>)
 80007e2:	a90a      	add	r1, sp, #40	@ 0x28
 80007e4:	f7ff fe93 	bl	800050e <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
 80007e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80007ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80007ec:	491d      	ldr	r1, [pc, #116]	@ (8000864 <Store_Single_Preset_In_Flash+0x1ec>)
 80007ee:	2001      	movs	r0, #1
 80007f0:	f005 fb96 	bl	8005f20 <HAL_FLASH_Program>
 80007f4:	e771      	b.n	80006da <Store_Single_Preset_In_Flash+0x62>
		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 80007f6:	a90a      	add	r1, sp, #40	@ 0x28
 80007f8:	0028      	movs	r0, r5
 80007fa:	f7ff fe88 	bl	800050e <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
 80007fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8000800:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000802:	4918      	ldr	r1, [pc, #96]	@ (8000864 <Store_Single_Preset_In_Flash+0x1ec>)
 8000804:	2001      	movs	r0, #1
 8000806:	f005 fb8b 	bl	8005f20 <HAL_FLASH_Program>
		Pack_Preset_Into_Doubleword(&storage_user_preset_0, &preset_packed);
 800080a:	480f      	ldr	r0, [pc, #60]	@ (8000848 <Store_Single_Preset_In_Flash+0x1d0>)
 800080c:	a90a      	add	r1, sp, #40	@ 0x28
 800080e:	f7ff fe7e 	bl	800050e <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 8000812:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8000814:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000816:	490d      	ldr	r1, [pc, #52]	@ (800084c <Store_Single_Preset_In_Flash+0x1d4>)
 8000818:	2001      	movs	r0, #1
 800081a:	f005 fb81 	bl	8005f20 <HAL_FLASH_Program>
		Pack_Preset_Into_Doubleword(&storage_user_preset_1, &preset_packed);
 800081e:	480c      	ldr	r0, [pc, #48]	@ (8000850 <Store_Single_Preset_In_Flash+0x1d8>)
 8000820:	a90a      	add	r1, sp, #40	@ 0x28
 8000822:	f7ff fe74 	bl	800050e <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 8000826:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8000828:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800082a:	490a      	ldr	r1, [pc, #40]	@ (8000854 <Store_Single_Preset_In_Flash+0x1dc>)
 800082c:	2001      	movs	r0, #1
 800082e:	f005 fb77 	bl	8005f20 <HAL_FLASH_Program>
		Pack_Preset_Into_Doubleword(&storage_user_preset_2, &preset_packed);
 8000832:	4809      	ldr	r0, [pc, #36]	@ (8000858 <Store_Single_Preset_In_Flash+0x1e0>)
 8000834:	a90a      	add	r1, sp, #40	@ 0x28
 8000836:	f7ff fe6a 	bl	800050e <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 800083a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800083c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800083e:	4907      	ldr	r1, [pc, #28]	@ (800085c <Store_Single_Preset_In_Flash+0x1e4>)
 8000840:	2001      	movs	r0, #1
 8000842:	f005 fb6d 	bl	8005f20 <HAL_FLASH_Program>
 8000846:	e748      	b.n	80006da <Store_Single_Preset_In_Flash+0x62>
 8000848:	200004d8 	.word	0x200004d8
 800084c:	0800f800 	.word	0x0800f800
 8000850:	200004d0 	.word	0x200004d0
 8000854:	0800f808 	.word	0x0800f808
 8000858:	200004c8 	.word	0x200004c8
 800085c:	0800f810 	.word	0x0800f810
 8000860:	200004c0 	.word	0x200004c0
 8000864:	0800f818 	.word	0x0800f818
 8000868:	08009490 	.word	0x08009490
 800086c:	20000548 	.word	0x20000548
 8000870:	20000cbc 	.word	0x20000cbc
 8000874:	200004bc 	.word	0x200004bc
 8000878:	0800f820 	.word	0x0800f820

0800087c <Read_and_Interpret_Misc_From_Flash>:

uint8_t Read_and_Interpret_Misc_From_Flash(uint32_t address_val,
										   volatile enum Validate *user_presets_used_array_ptr,
										   volatile uint32_t *statuses_ptr,
										   volatile enum MIDI_Channel *MIDI_basic_channel_ptr,
										   uint8_t num_presets){
 800087c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087e:	46d6      	mov	lr, sl
 8000880:	464f      	mov	r7, r9
 8000882:	4646      	mov	r6, r8
 8000884:	b5c0      	push	{r6, r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	4680      	mov	r8, r0
 800088a:	4691      	mov	r9, r2
 800088c:	469a      	mov	sl, r3
 800088e:	ab0a      	add	r3, sp, #40	@ 0x28
 8000890:	781f      	ldrb	r7, [r3, #0]

	uint8_t *address = (uint8_t *)address_val;

	volatile uint8_t interpretted_value = 0;
 8000892:	466b      	mov	r3, sp
 8000894:	2200      	movs	r2, #0
 8000896:	71da      	strb	r2, [r3, #7]

	//PRESETS
	for(uint8_t i = 0; i < num_presets; i++){
 8000898:	2f00      	cmp	r7, #0
 800089a:	d01c      	beq.n	80008d6 <Read_and_Interpret_Misc_From_Flash+0x5a>
 800089c:	000b      	movs	r3, r1
 800089e:	2400      	movs	r4, #0

		interpretted_value = *(address + i);
 80008a0:	1a41      	subs	r1, r0, r1
 80008a2:	466a      	mov	r2, sp
 80008a4:	1dd5      	adds	r5, r2, #7

			*(user_presets_used_array_ptr + i) = (enum Validate)YES;
		}
		else if((interpretted_value == 0xFF) || (interpretted_value == (enum Validate)NO)){

			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
 80008a6:	2200      	movs	r2, #0
			*(user_presets_used_array_ptr + i) = (enum Validate)YES;
 80008a8:	2001      	movs	r0, #1
 80008aa:	e007      	b.n	80008bc <Read_and_Interpret_Misc_From_Flash+0x40>
 80008ac:	7018      	strb	r0, [r3, #0]
 80008ae:	e000      	b.n	80008b2 <Read_and_Interpret_Misc_From_Flash+0x36>
			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
 80008b0:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < num_presets; i++){
 80008b2:	3401      	adds	r4, #1
 80008b4:	b2e4      	uxtb	r4, r4
 80008b6:	3301      	adds	r3, #1
 80008b8:	42a7      	cmp	r7, r4
 80008ba:	d00c      	beq.n	80008d6 <Read_and_Interpret_Misc_From_Flash+0x5a>
		interpretted_value = *(address + i);
 80008bc:	5cce      	ldrb	r6, [r1, r3]
 80008be:	702e      	strb	r6, [r5, #0]
		if(interpretted_value == (enum Validate)YES){
 80008c0:	782e      	ldrb	r6, [r5, #0]
 80008c2:	2e01      	cmp	r6, #1
 80008c4:	d0f2      	beq.n	80008ac <Read_and_Interpret_Misc_From_Flash+0x30>
		else if((interpretted_value == 0xFF) || (interpretted_value == (enum Validate)NO)){
 80008c6:	782e      	ldrb	r6, [r5, #0]
 80008c8:	b2f6      	uxtb	r6, r6
 80008ca:	2eff      	cmp	r6, #255	@ 0xff
 80008cc:	d0f0      	beq.n	80008b0 <Read_and_Interpret_Misc_From_Flash+0x34>
 80008ce:	782e      	ldrb	r6, [r5, #0]
 80008d0:	2e00      	cmp	r6, #0
 80008d2:	d1ee      	bne.n	80008b2 <Read_and_Interpret_Misc_From_Flash+0x36>
 80008d4:	e7ec      	b.n	80008b0 <Read_and_Interpret_Misc_From_Flash+0x34>
		}
	}

	//START REQUIRED BEFORE SYNC MODE
	interpretted_value = *(address + num_presets);
 80008d6:	4643      	mov	r3, r8
 80008d8:	5dda      	ldrb	r2, [r3, r7]
 80008da:	466b      	mov	r3, sp
 80008dc:	71da      	strb	r2, [r3, #7]
 80008de:	3307      	adds	r3, #7

	if(interpretted_value == (enum Validate)NO){
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d036      	beq.n	8000954 <Read_and_Interpret_Misc_From_Flash+0xd8>
		Clear_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
	}
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 80008e6:	466b      	mov	r3, sp
 80008e8:	3307      	adds	r3, #7
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d036      	beq.n	800095e <Read_and_Interpret_Misc_From_Flash+0xe2>
 80008f0:	466b      	mov	r3, sp
 80008f2:	3307      	adds	r3, #7
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2bff      	cmp	r3, #255	@ 0xff
 80008fa:	d030      	beq.n	800095e <Read_and_Interpret_Misc_From_Flash+0xe2>
		Set_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
	}

	//OMNI ON/OFF
	interpretted_value = *(address + num_presets + 1);
 80008fc:	4643      	mov	r3, r8
 80008fe:	19db      	adds	r3, r3, r7
 8000900:	785a      	ldrb	r2, [r3, #1]
 8000902:	466b      	mov	r3, sp
 8000904:	71da      	strb	r2, [r3, #7]
 8000906:	3307      	adds	r3, #7

	if(interpretted_value == (enum Validate)YES){
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d02c      	beq.n	8000968 <Read_and_Interpret_Misc_From_Flash+0xec>
		Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI ON
	}
	else if((interpretted_value == (enum Validate)NO) || (interpretted_value == 0xFF)){
 800090e:	466b      	mov	r3, sp
 8000910:	3307      	adds	r3, #7
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d005      	beq.n	8000924 <Read_and_Interpret_Misc_From_Flash+0xa8>
 8000918:	466b      	mov	r3, sp
 800091a:	3307      	adds	r3, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2bff      	cmp	r3, #255	@ 0xff
 8000922:	d104      	bne.n	800092e <Read_and_Interpret_Misc_From_Flash+0xb2>
		Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI OFF
 8000924:	2180      	movs	r1, #128	@ 0x80
 8000926:	00c9      	lsls	r1, r1, #3
 8000928:	4648      	mov	r0, r9
 800092a:	f004 fa63 	bl	8004df4 <Clear_Status_Bit>
	}

	//BASIC CHANNEL
	interpretted_value = *(address + num_presets + 2);
 800092e:	4447      	add	r7, r8
 8000930:	78ba      	ldrb	r2, [r7, #2]
 8000932:	466b      	mov	r3, sp
 8000934:	71da      	strb	r2, [r3, #7]
 8000936:	3307      	adds	r3, #7

	if(interpretted_value > (uint8_t)MIDI_CH_SIXTEEN){
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b0f      	cmp	r3, #15
 800093e:	d919      	bls.n	8000974 <Read_and_Interpret_Misc_From_Flash+0xf8>

		uint8_t midi_channel_default = MIDI_BASIC_CHANNEL_DEFAULT;

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)midi_channel_default;
 8000940:	2300      	movs	r3, #0
 8000942:	4652      	mov	r2, sl
 8000944:	7013      	strb	r3, [r2, #0]

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)interpretted_value;
	}

	return 1;
}
 8000946:	2001      	movs	r0, #1
 8000948:	b002      	add	sp, #8
 800094a:	bce0      	pop	{r5, r6, r7}
 800094c:	46ba      	mov	sl, r7
 800094e:	46b1      	mov	r9, r6
 8000950:	46a8      	mov	r8, r5
 8000952:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Clear_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	4648      	mov	r0, r9
 8000958:	f004 fa4c 	bl	8004df4 <Clear_Status_Bit>
 800095c:	e7ce      	b.n	80008fc <Read_and_Interpret_Misc_From_Flash+0x80>
		Set_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 800095e:	2180      	movs	r1, #128	@ 0x80
 8000960:	4648      	mov	r0, r9
 8000962:	f004 fa43 	bl	8004dec <Set_Status_Bit>
 8000966:	e7c9      	b.n	80008fc <Read_and_Interpret_Misc_From_Flash+0x80>
		Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI ON
 8000968:	2180      	movs	r1, #128	@ 0x80
 800096a:	00c9      	lsls	r1, r1, #3
 800096c:	4648      	mov	r0, r9
 800096e:	f004 fa3d 	bl	8004dec <Set_Status_Bit>
 8000972:	e7dc      	b.n	800092e <Read_and_Interpret_Misc_From_Flash+0xb2>
		*MIDI_basic_channel_ptr = (enum MIDI_Channel)interpretted_value;
 8000974:	466b      	mov	r3, sp
 8000976:	3307      	adds	r3, #7
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	4652      	mov	r2, sl
 800097e:	7013      	strb	r3, [r2, #0]
 8000980:	e7e1      	b.n	8000946 <Read_and_Interpret_Misc_From_Flash+0xca>

08000982 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>:

uint8_t Update_Converted_Preset_Array_with_User_or_Factory_Presets(volatile struct Preset_Converted* presets_converted_array_ptr,
																	volatile enum Validate *user_presets_used_array_ptr,
																	const struct Preset **factory_presets_array_ptr,
																	volatile struct Preset **user_presets_array_ptr,
																	uint8_t size_of_factory_and_user_arrays){
 8000982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000984:	46ce      	mov	lr, r9
 8000986:	4647      	mov	r7, r8
 8000988:	b580      	push	{r7, lr}
 800098a:	0006      	movs	r6, r0
 800098c:	000d      	movs	r5, r1
 800098e:	0017      	movs	r7, r2
 8000990:	aa08      	add	r2, sp, #32
 8000992:	7812      	ldrb	r2, [r2, #0]
 8000994:	4691      	mov	r9, r2

	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000996:	2a00      	cmp	r2, #0
 8000998:	d01c      	beq.n	80009d4 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x52>
 800099a:	4698      	mov	r8, r3
 800099c:	2400      	movs	r4, #0
 800099e:	e00e      	b.n	80009be <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x3c>

		if(*(user_presets_used_array_ptr + i) == (enum Validate)YES){
			Convert_All_Preset_Values(*(user_presets_array_ptr + i), (presets_converted_array_ptr + i));
 80009a0:	4643      	mov	r3, r8
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	0031      	movs	r1, r6
 80009a6:	f7ff fd8d 	bl	80004c4 <Convert_All_Preset_Values>
	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 80009aa:	3401      	adds	r4, #1
 80009ac:	b2e4      	uxtb	r4, r4
 80009ae:	3501      	adds	r5, #1
 80009b0:	2304      	movs	r3, #4
 80009b2:	469c      	mov	ip, r3
 80009b4:	44e0      	add	r8, ip
 80009b6:	360a      	adds	r6, #10
 80009b8:	3704      	adds	r7, #4
 80009ba:	45a1      	cmp	r9, r4
 80009bc:	d00a      	beq.n	80009d4 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x52>
		if(*(user_presets_used_array_ptr + i) == (enum Validate)YES){
 80009be:	782b      	ldrb	r3, [r5, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d0ed      	beq.n	80009a0 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x1e>
		}
		else if(*(user_presets_used_array_ptr + i) == (enum Validate)NO){
 80009c4:	782b      	ldrb	r3, [r5, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d1ef      	bne.n	80009aa <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x28>
			Convert_All_Preset_Values((struct Preset *) *(factory_presets_array_ptr + i), (presets_converted_array_ptr + i));
 80009ca:	6838      	ldr	r0, [r7, #0]
 80009cc:	0031      	movs	r1, r6
 80009ce:	f7ff fd79 	bl	80004c4 <Convert_All_Preset_Values>
 80009d2:	e7ea      	b.n	80009aa <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x28>
		}
	}

	return 1;
}
 80009d4:	2001      	movs	r0, #1
 80009d6:	bcc0      	pop	{r6, r7}
 80009d8:	46b9      	mov	r9, r7
 80009da:	46b0      	mov	r8, r6
 80009dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080009e0 <Read_and_Interpret_User_Presets_From_Flash>:

uint8_t Read_and_Interpret_User_Presets_From_Flash(void){
 80009e0:	b510      	push	{r4, lr}

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &user_preset_0);
 80009e2:	4909      	ldr	r1, [pc, #36]	@ (8000a08 <Read_and_Interpret_User_Presets_From_Flash+0x28>)
 80009e4:	4809      	ldr	r0, [pc, #36]	@ (8000a0c <Read_and_Interpret_User_Presets_From_Flash+0x2c>)
 80009e6:	f7ff fdb9 	bl	800055c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &user_preset_1);
 80009ea:	4909      	ldr	r1, [pc, #36]	@ (8000a10 <Read_and_Interpret_User_Presets_From_Flash+0x30>)
 80009ec:	4809      	ldr	r0, [pc, #36]	@ (8000a14 <Read_and_Interpret_User_Presets_From_Flash+0x34>)
 80009ee:	f7ff fdb5 	bl	800055c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &user_preset_2);
 80009f2:	4909      	ldr	r1, [pc, #36]	@ (8000a18 <Read_and_Interpret_User_Presets_From_Flash+0x38>)
 80009f4:	4809      	ldr	r0, [pc, #36]	@ (8000a1c <Read_and_Interpret_User_Presets_From_Flash+0x3c>)
 80009f6:	f7ff fdb1 	bl	800055c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &user_preset_3);
 80009fa:	4909      	ldr	r1, [pc, #36]	@ (8000a20 <Read_and_Interpret_User_Presets_From_Flash+0x40>)
 80009fc:	4809      	ldr	r0, [pc, #36]	@ (8000a24 <Read_and_Interpret_User_Presets_From_Flash+0x44>)
 80009fe:	f7ff fdad 	bl	800055c <Read_and_Interpret_Preset_From_Flash>

	return 1;
}
 8000a02:	2001      	movs	r0, #1
 8000a04:	bd10      	pop	{r4, pc}
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	20000018 	.word	0x20000018
 8000a0c:	0800f800 	.word	0x0800f800
 8000a10:	20000010 	.word	0x20000010
 8000a14:	0800f808 	.word	0x0800f808
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	0800f810 	.word	0x0800f810
 8000a20:	20000000 	.word	0x20000000
 8000a24:	0800f818 	.word	0x0800f818

08000a28 <Update_Waveshape_with_CC_Value>:

uint8_t Update_Waveshape_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){

	if(*data <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000a28:	7803      	ldrb	r3, [r0, #0]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a2e:	d803      	bhi.n	8000a38 <Update_Waveshape_with_CC_Value+0x10>
		params_ptr->waveshape = TRIANGLE_MODE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	720b      	strb	r3, [r1, #8]
	else if (*data <= SQUARE_MODE_ADC_THRESHOLD){
		params_ptr->waveshape = SQUARE_MODE;
	}

	return 1;
}
 8000a34:	2001      	movs	r0, #1
 8000a36:	4770      	bx	lr
	else if (*data <= SINE_MODE_ADC_THRESHOLD){
 8000a38:	7803      	ldrb	r3, [r0, #0]
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b55      	cmp	r3, #85	@ 0x55
 8000a3e:	d802      	bhi.n	8000a46 <Update_Waveshape_with_CC_Value+0x1e>
		params_ptr->waveshape = SINE_MODE;
 8000a40:	2301      	movs	r3, #1
 8000a42:	720b      	strb	r3, [r1, #8]
 8000a44:	e7f6      	b.n	8000a34 <Update_Waveshape_with_CC_Value+0xc>
	else if (*data <= SQUARE_MODE_ADC_THRESHOLD){
 8000a46:	7803      	ldrb	r3, [r0, #0]
 8000a48:	b25b      	sxtb	r3, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	dbf2      	blt.n	8000a34 <Update_Waveshape_with_CC_Value+0xc>
		params_ptr->waveshape = SQUARE_MODE;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	720b      	strb	r3, [r1, #8]
 8000a52:	e7ef      	b.n	8000a34 <Update_Waveshape_with_CC_Value+0xc>

08000a54 <Update_Params_Based_On_Mode_Selected>:
uint8_t Update_Params_Based_On_Mode_Selected(void){
 8000a54:	b510      	push	{r4, lr}
	if(waveshape_fsm.current_state == MANUAL_MODE){
 8000a56:	4b61      	ldr	r3, [pc, #388]	@ (8000bdc <Update_Params_Based_On_Mode_Selected+0x188>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d03f      	beq.n	8000ade <Update_Params_Based_On_Mode_Selected+0x8a>
	if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8000a5e:	4b60      	ldr	r3, [pc, #384]	@ (8000be0 <Update_Params_Based_On_Mode_Selected+0x18c>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d041      	beq.n	8000aea <Update_Params_Based_On_Mode_Selected+0x96>
	if(depth_fsm.current_state == MANUAL_MODE){
 8000a66:	4b5f      	ldr	r3, [pc, #380]	@ (8000be4 <Update_Params_Based_On_Mode_Selected+0x190>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d043      	beq.n	8000af6 <Update_Params_Based_On_Mode_Selected+0xa2>
	if(symmetry_fsm.current_state == MANUAL_MODE){
 8000a6e:	4b5e      	ldr	r3, [pc, #376]	@ (8000be8 <Update_Params_Based_On_Mode_Selected+0x194>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d045      	beq.n	8000b02 <Update_Params_Based_On_Mode_Selected+0xae>
	if(phase_fsm.current_state == MANUAL_MODE){
 8000a76:	4b5d      	ldr	r3, [pc, #372]	@ (8000bec <Update_Params_Based_On_Mode_Selected+0x198>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d047      	beq.n	8000b0e <Update_Params_Based_On_Mode_Selected+0xba>
	if(waveshape_fsm.current_state == PC_MODE){
 8000a7e:	4b57      	ldr	r3, [pc, #348]	@ (8000bdc <Update_Params_Based_On_Mode_Selected+0x188>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d049      	beq.n	8000b1a <Update_Params_Based_On_Mode_Selected+0xc6>
	if(speed_fsm.current_state.shared_state == PC_MODE){
 8000a86:	4b56      	ldr	r3, [pc, #344]	@ (8000be0 <Update_Params_Based_On_Mode_Selected+0x18c>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	d051      	beq.n	8000b32 <Update_Params_Based_On_Mode_Selected+0xde>
	if(depth_fsm.current_state == PC_MODE){
 8000a8e:	4b55      	ldr	r3, [pc, #340]	@ (8000be4 <Update_Params_Based_On_Mode_Selected+0x190>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d05a      	beq.n	8000b4c <Update_Params_Based_On_Mode_Selected+0xf8>
	if(symmetry_fsm.current_state == PC_MODE){
 8000a96:	4b54      	ldr	r3, [pc, #336]	@ (8000be8 <Update_Params_Based_On_Mode_Selected+0x194>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d063      	beq.n	8000b66 <Update_Params_Based_On_Mode_Selected+0x112>
	if(phase_fsm.current_state == PC_MODE){
 8000a9e:	4b53      	ldr	r3, [pc, #332]	@ (8000bec <Update_Params_Based_On_Mode_Selected+0x198>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	d100      	bne.n	8000aa8 <Update_Params_Based_On_Mode_Selected+0x54>
 8000aa6:	e06b      	b.n	8000b80 <Update_Params_Based_On_Mode_Selected+0x12c>
	if(waveshape_fsm.current_state == CC_MODE){
 8000aa8:	4b4c      	ldr	r3, [pc, #304]	@ (8000bdc <Update_Params_Based_On_Mode_Selected+0x188>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d100      	bne.n	8000ab2 <Update_Params_Based_On_Mode_Selected+0x5e>
 8000ab0:	e073      	b.n	8000b9a <Update_Params_Based_On_Mode_Selected+0x146>
	if(speed_fsm.current_state.shared_state == CC_MODE){
 8000ab2:	4b4b      	ldr	r3, [pc, #300]	@ (8000be0 <Update_Params_Based_On_Mode_Selected+0x18c>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d100      	bne.n	8000abc <Update_Params_Based_On_Mode_Selected+0x68>
 8000aba:	e073      	b.n	8000ba4 <Update_Params_Based_On_Mode_Selected+0x150>
	if(depth_fsm.current_state == CC_MODE){
 8000abc:	4b49      	ldr	r3, [pc, #292]	@ (8000be4 <Update_Params_Based_On_Mode_Selected+0x190>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d100      	bne.n	8000ac6 <Update_Params_Based_On_Mode_Selected+0x72>
 8000ac4:	e074      	b.n	8000bb0 <Update_Params_Based_On_Mode_Selected+0x15c>
	if(symmetry_fsm.current_state == CC_MODE){
 8000ac6:	4b48      	ldr	r3, [pc, #288]	@ (8000be8 <Update_Params_Based_On_Mode_Selected+0x194>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d100      	bne.n	8000ad0 <Update_Params_Based_On_Mode_Selected+0x7c>
 8000ace:	e075      	b.n	8000bbc <Update_Params_Based_On_Mode_Selected+0x168>
	if(phase_fsm.current_state == CC_MODE){
 8000ad0:	4b46      	ldr	r3, [pc, #280]	@ (8000bec <Update_Params_Based_On_Mode_Selected+0x198>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d100      	bne.n	8000ada <Update_Params_Based_On_Mode_Selected+0x86>
 8000ad8:	e078      	b.n	8000bcc <Update_Params_Based_On_Mode_Selected+0x178>
}
 8000ada:	2001      	movs	r0, #1
 8000adc:	bd10      	pop	{r4, pc}
		params.waveshape = params_manual.waveshape;
 8000ade:	4b44      	ldr	r3, [pc, #272]	@ (8000bf0 <Update_Params_Based_On_Mode_Selected+0x19c>)
 8000ae0:	7a1b      	ldrb	r3, [r3, #8]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	4a43      	ldr	r2, [pc, #268]	@ (8000bf4 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 8000ae6:	7213      	strb	r3, [r2, #8]
 8000ae8:	e7b9      	b.n	8000a5e <Update_Params_Based_On_Mode_Selected+0xa>
		params.speed = params_manual.speed;
 8000aea:	4b41      	ldr	r3, [pc, #260]	@ (8000bf0 <Update_Params_Based_On_Mode_Selected+0x19c>)
 8000aec:	895b      	ldrh	r3, [r3, #10]
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	4a40      	ldr	r2, [pc, #256]	@ (8000bf4 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 8000af2:	8153      	strh	r3, [r2, #10]
 8000af4:	e7b7      	b.n	8000a66 <Update_Params_Based_On_Mode_Selected+0x12>
		params.depth = params_manual.depth;
 8000af6:	4b3e      	ldr	r3, [pc, #248]	@ (8000bf0 <Update_Params_Based_On_Mode_Selected+0x19c>)
 8000af8:	7b1b      	ldrb	r3, [r3, #12]
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	4a3d      	ldr	r2, [pc, #244]	@ (8000bf4 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 8000afe:	7313      	strb	r3, [r2, #12]
 8000b00:	e7b5      	b.n	8000a6e <Update_Params_Based_On_Mode_Selected+0x1a>
		params.symmetry = params_manual.symmetry;
 8000b02:	4b3b      	ldr	r3, [pc, #236]	@ (8000bf0 <Update_Params_Based_On_Mode_Selected+0x19c>)
 8000b04:	89db      	ldrh	r3, [r3, #14]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	4a3a      	ldr	r2, [pc, #232]	@ (8000bf4 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 8000b0a:	81d3      	strh	r3, [r2, #14]
 8000b0c:	e7b3      	b.n	8000a76 <Update_Params_Based_On_Mode_Selected+0x22>
		params.duty_delay_line_read_pointer_offset = params_manual.duty_delay_line_read_pointer_offset;
 8000b0e:	4b38      	ldr	r3, [pc, #224]	@ (8000bf0 <Update_Params_Based_On_Mode_Selected+0x19c>)
 8000b10:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	4a37      	ldr	r2, [pc, #220]	@ (8000bf4 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 8000b16:	8493      	strh	r3, [r2, #36]	@ 0x24
 8000b18:	e7b1      	b.n	8000a7e <Update_Params_Based_On_Mode_Selected+0x2a>
		Update_Waveshape_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000b1a:	4b37      	ldr	r3, [pc, #220]	@ (8000bf8 <Update_Params_Based_On_Mode_Selected+0x1a4>)
 8000b1c:	781a      	ldrb	r2, [r3, #0]
 8000b1e:	3a01      	subs	r2, #1
	params_ptr->waveshape = preset_converted_ptr->waveshape;
 8000b20:	4936      	ldr	r1, [pc, #216]	@ (8000bfc <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000b22:	0093      	lsls	r3, r2, #2
 8000b24:	189b      	adds	r3, r3, r2
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	5c5b      	ldrb	r3, [r3, r1]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	4a31      	ldr	r2, [pc, #196]	@ (8000bf4 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 8000b2e:	7213      	strb	r3, [r2, #8]
	return 1;
 8000b30:	e7a9      	b.n	8000a86 <Update_Params_Based_On_Mode_Selected+0x32>
		Update_Speed_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000b32:	4b31      	ldr	r3, [pc, #196]	@ (8000bf8 <Update_Params_Based_On_Mode_Selected+0x1a4>)
 8000b34:	7819      	ldrb	r1, [r3, #0]
 8000b36:	3901      	subs	r1, #1
	params_ptr->speed = preset_converted_ptr->speed;
 8000b38:	4b30      	ldr	r3, [pc, #192]	@ (8000bfc <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000b3a:	008a      	lsls	r2, r1, #2
 8000b3c:	1852      	adds	r2, r2, r1
 8000b3e:	0052      	lsls	r2, r2, #1
 8000b40:	189b      	adds	r3, r3, r2
 8000b42:	885b      	ldrh	r3, [r3, #2]
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	4a2b      	ldr	r2, [pc, #172]	@ (8000bf4 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 8000b48:	8153      	strh	r3, [r2, #10]
	return 1;
 8000b4a:	e7a0      	b.n	8000a8e <Update_Params_Based_On_Mode_Selected+0x3a>
		Update_Depth_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf8 <Update_Params_Based_On_Mode_Selected+0x1a4>)
 8000b4e:	7819      	ldrb	r1, [r3, #0]
 8000b50:	3901      	subs	r1, #1
	params_ptr->depth = preset_converted_ptr->depth;
 8000b52:	4b2a      	ldr	r3, [pc, #168]	@ (8000bfc <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000b54:	008a      	lsls	r2, r1, #2
 8000b56:	1852      	adds	r2, r2, r1
 8000b58:	0052      	lsls	r2, r2, #1
 8000b5a:	189b      	adds	r3, r3, r2
 8000b5c:	791b      	ldrb	r3, [r3, #4]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	4a24      	ldr	r2, [pc, #144]	@ (8000bf4 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 8000b62:	7313      	strb	r3, [r2, #12]
	return 1;
 8000b64:	e797      	b.n	8000a96 <Update_Params_Based_On_Mode_Selected+0x42>
		Update_Symmetry_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000b66:	4b24      	ldr	r3, [pc, #144]	@ (8000bf8 <Update_Params_Based_On_Mode_Selected+0x1a4>)
 8000b68:	7819      	ldrb	r1, [r3, #0]
 8000b6a:	3901      	subs	r1, #1
	params_ptr->symmetry = preset_converted_ptr->symmetry;
 8000b6c:	4b23      	ldr	r3, [pc, #140]	@ (8000bfc <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000b6e:	008a      	lsls	r2, r1, #2
 8000b70:	1852      	adds	r2, r2, r1
 8000b72:	0052      	lsls	r2, r2, #1
 8000b74:	189b      	adds	r3, r3, r2
 8000b76:	88db      	ldrh	r3, [r3, #6]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000bf4 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 8000b7c:	81d3      	strh	r3, [r2, #14]
	return 1;
 8000b7e:	e78e      	b.n	8000a9e <Update_Params_Based_On_Mode_Selected+0x4a>
		Update_Phase_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000b80:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf8 <Update_Params_Based_On_Mode_Selected+0x1a4>)
 8000b82:	7819      	ldrb	r1, [r3, #0]
 8000b84:	3901      	subs	r1, #1
	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;
 8000b86:	4b1d      	ldr	r3, [pc, #116]	@ (8000bfc <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000b88:	008a      	lsls	r2, r1, #2
 8000b8a:	1852      	adds	r2, r2, r1
 8000b8c:	0052      	lsls	r2, r2, #1
 8000b8e:	189b      	adds	r3, r3, r2
 8000b90:	891b      	ldrh	r3, [r3, #8]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	4a17      	ldr	r2, [pc, #92]	@ (8000bf4 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 8000b96:	8493      	strh	r3, [r2, #36]	@ 0x24
	return 1;
 8000b98:	e786      	b.n	8000aa8 <Update_Params_Based_On_Mode_Selected+0x54>
		Update_Waveshape_with_CC_Value(&CC_array[WAVESHAPE_ARR], &params);
 8000b9a:	4916      	ldr	r1, [pc, #88]	@ (8000bf4 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 8000b9c:	4818      	ldr	r0, [pc, #96]	@ (8000c00 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000b9e:	f7ff ff43 	bl	8000a28 <Update_Waveshape_with_CC_Value>
 8000ba2:	e786      	b.n	8000ab2 <Update_Params_Based_On_Mode_Selected+0x5e>

uint8_t Update_Speed_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){

	uint16_t speed = (uint16_t)*data;
 8000ba4:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000ba6:	785b      	ldrb	r3, [r3, #1]

	speed <<= 3; //convert to 10-bit
 8000ba8:	00db      	lsls	r3, r3, #3
	params_ptr->speed = speed;
 8000baa:	4a12      	ldr	r2, [pc, #72]	@ (8000bf4 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 8000bac:	8153      	strh	r3, [r2, #10]

	return 1;
 8000bae:	e785      	b.n	8000abc <Update_Params_Based_On_Mode_Selected+0x68>
}

uint8_t Update_Depth_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){

	uint8_t depth = (uint8_t)*data;
 8000bb0:	4b13      	ldr	r3, [pc, #76]	@ (8000c00 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000bb2:	789b      	ldrb	r3, [r3, #2]
 8000bb4:	b2db      	uxtb	r3, r3
	params_ptr->depth = depth;
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf4 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 8000bb8:	7313      	strb	r3, [r2, #12]

	return 1;
 8000bba:	e784      	b.n	8000ac6 <Update_Params_Based_On_Mode_Selected+0x72>
}

uint8_t Update_Symmetry_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){

	uint8_t symmetry = (uint8_t)*data;
 8000bbc:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000bbe:	78db      	ldrb	r3, [r3, #3]

	symmetry <<= 1; //convert to 8-bit
 8000bc0:	005b      	lsls	r3, r3, #1
	params_ptr->symmetry = symmetry;
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf4 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 8000bc8:	81d3      	strh	r3, [r2, #14]

	return 1;
 8000bca:	e781      	b.n	8000ad0 <Update_Params_Based_On_Mode_Selected+0x7c>
}

uint8_t Update_Phase_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){

	uint8_t phase = (uint8_t)*data;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000bce:	791b      	ldrb	r3, [r3, #4]

	phase <<= 2; //convert to 9-bit
 8000bd0:	009b      	lsls	r3, r3, #2
	params_ptr->duty_delay_line_read_pointer_offset = phase;
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	4a07      	ldr	r2, [pc, #28]	@ (8000bf4 <Update_Params_Based_On_Mode_Selected+0x1a0>)
 8000bd8:	8493      	strh	r3, [r2, #36]	@ 0x24

	return 1;
 8000bda:	e77e      	b.n	8000ada <Update_Params_Based_On_Mode_Selected+0x86>
 8000bdc:	20000440 	.word	0x20000440
 8000be0:	20000448 	.word	0x20000448
 8000be4:	20000444 	.word	0x20000444
 8000be8:	2000043c 	.word	0x2000043c
 8000bec:	20000438 	.word	0x20000438
 8000bf0:	20000d10 	.word	0x20000d10
 8000bf4:	20000d38 	.word	0x20000d38
 8000bf8:	200004dd 	.word	0x200004dd
 8000bfc:	200004f0 	.word	0x200004f0
 8000c00:	200004b4 	.word	0x200004b4

08000c04 <Set_Waveshape_to_CC_Mode_and_Value>:
}

uint8_t Set_Waveshape_to_CC_Mode_and_Value(uint8_t *data){

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000c04:	4b05      	ldr	r3, [pc, #20]	@ (8000c1c <Set_Waveshape_to_CC_Mode_and_Value+0x18>)
 8000c06:	781a      	ldrb	r2, [r3, #0]
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = CC_MODE;
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	701a      	strb	r2, [r3, #0]

	CC_array[WAVESHAPE_ARR] = *data;
 8000c10:	7802      	ldrb	r2, [r0, #0]
 8000c12:	4b03      	ldr	r3, [pc, #12]	@ (8000c20 <Set_Waveshape_to_CC_Mode_and_Value+0x1c>)
 8000c14:	701a      	strb	r2, [r3, #0]

	return 1;
}
 8000c16:	2001      	movs	r0, #1
 8000c18:	4770      	bx	lr
 8000c1a:	46c0      	nop			@ (mov r8, r8)
 8000c1c:	20000440 	.word	0x20000440
 8000c20:	200004b4 	.word	0x200004b4

08000c24 <Set_Speed_to_CC_Mode_and_Value>:

uint8_t Set_Speed_to_CC_Mode_and_Value(uint8_t *data){

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000c24:	4b05      	ldr	r3, [pc, #20]	@ (8000c3c <Set_Speed_to_CC_Mode_and_Value+0x18>)
 8000c26:	781a      	ldrb	r2, [r3, #0]
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	701a      	strb	r2, [r3, #0]

	CC_array[SPEED_ARR] = *data;
 8000c30:	7802      	ldrb	r2, [r0, #0]
 8000c32:	4b03      	ldr	r3, [pc, #12]	@ (8000c40 <Set_Speed_to_CC_Mode_and_Value+0x1c>)
 8000c34:	705a      	strb	r2, [r3, #1]

	return 1;
}
 8000c36:	2001      	movs	r0, #1
 8000c38:	4770      	bx	lr
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	20000448 	.word	0x20000448
 8000c40:	200004b4 	.word	0x200004b4

08000c44 <Set_Depth_to_CC_Mode_and_Value>:

uint8_t Set_Depth_to_CC_Mode_and_Value(uint8_t *data){

	depth_fsm.prev_state = depth_fsm.current_state;
 8000c44:	4b05      	ldr	r3, [pc, #20]	@ (8000c5c <Set_Depth_to_CC_Mode_and_Value+0x18>)
 8000c46:	781a      	ldrb	r2, [r3, #0]
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = CC_MODE;
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	701a      	strb	r2, [r3, #0]

	CC_array[DEPTH_ARR] = *data;
 8000c50:	7802      	ldrb	r2, [r0, #0]
 8000c52:	4b03      	ldr	r3, [pc, #12]	@ (8000c60 <Set_Depth_to_CC_Mode_and_Value+0x1c>)
 8000c54:	709a      	strb	r2, [r3, #2]

	return 1;
}
 8000c56:	2001      	movs	r0, #1
 8000c58:	4770      	bx	lr
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	20000444 	.word	0x20000444
 8000c60:	200004b4 	.word	0x200004b4

08000c64 <Set_Symmetry_to_CC_Mode_and_Value>:

uint8_t Set_Symmetry_to_CC_Mode_and_Value(uint8_t *data){

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000c64:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <Set_Symmetry_to_CC_Mode_and_Value+0x18>)
 8000c66:	781a      	ldrb	r2, [r3, #0]
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = CC_MODE;
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	701a      	strb	r2, [r3, #0]

	CC_array[SYMMETRY_ARR] = *data;
 8000c70:	7802      	ldrb	r2, [r0, #0]
 8000c72:	4b03      	ldr	r3, [pc, #12]	@ (8000c80 <Set_Symmetry_to_CC_Mode_and_Value+0x1c>)
 8000c74:	70da      	strb	r2, [r3, #3]

	return 1;
}
 8000c76:	2001      	movs	r0, #1
 8000c78:	4770      	bx	lr
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	2000043c 	.word	0x2000043c
 8000c80:	200004b4 	.word	0x200004b4

08000c84 <Set_Phase_to_CC_Mode_and_Value>:

uint8_t Set_Phase_to_CC_Mode_and_Value(uint8_t *data){

	phase_fsm.prev_state = phase_fsm.current_state;
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <Set_Phase_to_CC_Mode_and_Value+0x18>)
 8000c86:	781a      	ldrb	r2, [r3, #0]
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = CC_MODE;
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	701a      	strb	r2, [r3, #0]

	CC_array[PHASE_ARR] = *data;
 8000c90:	7802      	ldrb	r2, [r0, #0]
 8000c92:	4b03      	ldr	r3, [pc, #12]	@ (8000ca0 <Set_Phase_to_CC_Mode_and_Value+0x1c>)
 8000c94:	711a      	strb	r2, [r3, #4]

	return 1;
}
 8000c96:	2001      	movs	r0, #1
 8000c98:	4770      	bx	lr
 8000c9a:	46c0      	nop			@ (mov r8, r8)
 8000c9c:	20000438 	.word	0x20000438
 8000ca0:	200004b4 	.word	0x200004b4

08000ca4 <Set_All_Pots_to_PC_Mode>:

uint8_t Set_All_Pots_to_PC_Mode(void){

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cdc <Set_All_Pots_to_PC_Mode+0x38>)
 8000ca6:	7813      	ldrb	r3, [r2, #0]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	7053      	strb	r3, [r2, #1]
	waveshape_fsm.current_state = PC_MODE;
 8000cac:	2303      	movs	r3, #3
 8000cae:	7013      	strb	r3, [r2, #0]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce0 <Set_All_Pots_to_PC_Mode+0x3c>)
 8000cb2:	7811      	ldrb	r1, [r2, #0]
 8000cb4:	b2c9      	uxtb	r1, r1
 8000cb6:	7051      	strb	r1, [r2, #1]
	speed_fsm.current_state.shared_state = PC_MODE;
 8000cb8:	7013      	strb	r3, [r2, #0]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000cba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <Set_All_Pots_to_PC_Mode+0x40>)
 8000cbc:	7811      	ldrb	r1, [r2, #0]
 8000cbe:	b2c9      	uxtb	r1, r1
 8000cc0:	7051      	strb	r1, [r2, #1]
	depth_fsm.current_state = PC_MODE;
 8000cc2:	7013      	strb	r3, [r2, #0]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000cc4:	4a08      	ldr	r2, [pc, #32]	@ (8000ce8 <Set_All_Pots_to_PC_Mode+0x44>)
 8000cc6:	7811      	ldrb	r1, [r2, #0]
 8000cc8:	b2c9      	uxtb	r1, r1
 8000cca:	7051      	strb	r1, [r2, #1]
	symmetry_fsm.current_state = PC_MODE;
 8000ccc:	7013      	strb	r3, [r2, #0]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000cce:	4a07      	ldr	r2, [pc, #28]	@ (8000cec <Set_All_Pots_to_PC_Mode+0x48>)
 8000cd0:	7811      	ldrb	r1, [r2, #0]
 8000cd2:	b2c9      	uxtb	r1, r1
 8000cd4:	7051      	strb	r1, [r2, #1]
	phase_fsm.current_state = PC_MODE;
 8000cd6:	7013      	strb	r3, [r2, #0]

	return 1;
}
 8000cd8:	2001      	movs	r0, #1
 8000cda:	4770      	bx	lr
 8000cdc:	20000440 	.word	0x20000440
 8000ce0:	20000448 	.word	0x20000448
 8000ce4:	20000444 	.word	0x20000444
 8000ce8:	2000043c 	.word	0x2000043c
 8000cec:	20000438 	.word	0x20000438

08000cf0 <Store_Params_as_User_Preset>:
uint8_t Store_Params_as_User_Preset(enum Preset_Selected preset,
									volatile struct Params *params_ptr,
									volatile enum Validate *user_presets_used_array_ptr,
									volatile struct Preset **user_presets_array_ptr,
									const struct Preset **factory_presets_array_ptr,
									volatile struct Preset_Converted *presets_converted_array_ptr){
 8000cf0:	b570      	push	{r4, r5, r6, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	0004      	movs	r4, r0
 8000cf6:	0008      	movs	r0, r1
 8000cf8:	0015      	movs	r5, r2
 8000cfa:	001e      	movs	r6, r3

	//this function takes whatever the params for the pots are currently set to, regardless of CC, PC, etc.
	//and stores them to a given preset

	uint8_t preset_index = (uint8_t)preset - 1;
 8000cfc:	3c01      	subs	r4, #1

	*(user_presets_used_array_ptr + preset_index) = YES;
 8000cfe:	b2e4      	uxtb	r4, r4
 8000d00:	1913      	adds	r3, r2, r4
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]

	Convert_All_Params_Values_for_Preset(params_ptr, *(user_presets_array_ptr + preset_index));
 8000d06:	00a4      	lsls	r4, r4, #2
 8000d08:	59a1      	ldr	r1, [r4, r6]
 8000d0a:	f7ff fbec 	bl	80004e6 <Convert_All_Params_Values_for_Preset>
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array_ptr,
 8000d0e:	2304      	movs	r3, #4
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	0033      	movs	r3, r6
 8000d14:	9a06      	ldr	r2, [sp, #24]
 8000d16:	0029      	movs	r1, r5
 8000d18:	9807      	ldr	r0, [sp, #28]
 8000d1a:	f7ff fe32 	bl	8000982 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
																factory_presets_array_ptr,
																user_presets_array_ptr,
																NUM_PRESETS);

	return 1;
}
 8000d1e:	2001      	movs	r0, #1
 8000d20:	b002      	add	sp, #8
 8000d22:	bd70      	pop	{r4, r5, r6, pc}

08000d24 <Set_to_PC_Mode>:

uint8_t Set_to_PC_Mode(enum Preset_Selected preset){
 8000d24:	b510      	push	{r4, lr}

	preset_selected = preset;
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <Set_to_PC_Mode+0x1c>)
 8000d28:	7018      	strb	r0, [r3, #0]
	Set_All_Pots_to_PC_Mode();
 8000d2a:	f7ff ffbb 	bl	8000ca4 <Set_All_Pots_to_PC_Mode>
	Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8000d2e:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <Set_to_PC_Mode+0x20>)
 8000d30:	2108      	movs	r1, #8
 8000d32:	f004 f85f 	bl	8004df4 <Clear_Status_Bit>
	Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 8000d36:	f7ff fe8d 	bl	8000a54 <Update_Params_Based_On_Mode_Selected>

	return 1;
}
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	bd10      	pop	{r4, pc}
 8000d3e:	46c0      	nop			@ (mov r8, r8)
 8000d40:	200004dd 	.word	0x200004dd
 8000d44:	20000cbc 	.word	0x20000cbc

08000d48 <Set_LED_to_State>:

//VARIABLE DEFINITIONS
volatile uint8_t LED_counter = 0;
volatile uint32_t led_blink_period = LED_BLINK_PERIOD;

uint8_t Set_LED_to_State(volatile struct LED_FSM *LED_FSM_ptr, enum LED_States desired_state){
 8000d48:	b530      	push	{r4, r5, lr}

	if(desired_state == LED_CONFIRM){
 8000d4a:	2907      	cmp	r1, #7
 8000d4c:	d015      	beq.n	8000d7a <Set_LED_to_State+0x32>
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, led_blink_period);
		}
	}
	else{

		if(LED_FSM_ptr->current_state != desired_state){
 8000d4e:	7803      	ldrb	r3, [r0, #0]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d00b      	beq.n	8000d6e <Set_LED_to_State+0x26>

			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <Set_LED_to_State+0x54>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	2400      	movs	r4, #0
 8000d5c:	6254      	str	r4, [r2, #36]	@ 0x24
			led_blink_period = LED_BLINK_PERIOD;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <Set_LED_to_State+0x58>)
 8000d60:	2596      	movs	r5, #150	@ 0x96
 8000d62:	006d      	lsls	r5, r5, #1
 8000d64:	601d      	str	r5, [r3, #0]
			LED_counter = 0;
 8000d66:	4d0f      	ldr	r5, [pc, #60]	@ (8000da4 <Set_LED_to_State+0x5c>)
 8000d68:	702c      	strb	r4, [r5, #0]
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, led_blink_period);
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	6353      	str	r3, [r2, #52]	@ 0x34
		}
	}

	LED_FSM_ptr->prev_state = LED_FSM_ptr->current_state;
 8000d6e:	7803      	ldrb	r3, [r0, #0]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	7043      	strb	r3, [r0, #1]
	LED_FSM_ptr->current_state = desired_state;
 8000d74:	7001      	strb	r1, [r0, #0]

	return 1;
}
 8000d76:	2001      	movs	r0, #1
 8000d78:	bd30      	pop	{r4, r5, pc}
		if(LED_fsm.current_state != LED_CONFIRM){
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <Set_LED_to_State+0x60>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b07      	cmp	r3, #7
 8000d80:	d0f5      	beq.n	8000d6e <Set_LED_to_State+0x26>
			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000d82:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <Set_LED_to_State+0x54>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	2400      	movs	r4, #0
 8000d88:	6254      	str	r4, [r2, #36]	@ 0x24
			led_blink_period = LED_BLINK_PERIOD >> 1;
 8000d8a:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <Set_LED_to_State+0x58>)
 8000d8c:	2596      	movs	r5, #150	@ 0x96
 8000d8e:	601d      	str	r5, [r3, #0]
			LED_counter = 0;
 8000d90:	4d04      	ldr	r5, [pc, #16]	@ (8000da4 <Set_LED_to_State+0x5c>)
 8000d92:	702c      	strb	r4, [r5, #0]
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, led_blink_period);
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d98:	e7e9      	b.n	8000d6e <Set_LED_to_State+0x26>
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	20000af4 	.word	0x20000af4
 8000da0:	20000020 	.word	0x20000020
 8000da4:	20000538 	.word	0x20000538
 8000da8:	20000430 	.word	0x20000430

08000dac <Is_Status_Byte>:
volatile struct MIDI_Data MIDI_data = {.MIDI_data_buffer = 0};

//FUNCTION DEFINITIONS
enum Validate Is_Status_Byte(volatile uint8_t *data){

	uint8_t MSB = *data;
 8000dac:	7800      	ldrb	r0, [r0, #0]
	}
	else{ //data byte

		return (enum Validate)NO;
	}
}
 8000dae:	09c0      	lsrs	r0, r0, #7
 8000db0:	4770      	bx	lr

08000db2 <Is_Data_Byte>:

enum Validate Is_Data_Byte(volatile uint8_t *data){

	uint8_t MSB = *data;
 8000db2:	7800      	ldrb	r0, [r0, #0]

	MSB >>= 7;
 8000db4:	09c0      	lsrs	r0, r0, #7
	}
	else{ //data byte

		return (enum Validate)YES;
	}
}
 8000db6:	2301      	movs	r3, #1
 8000db8:	4058      	eors	r0, r3
 8000dba:	4770      	bx	lr

08000dbc <Is_PC_Status_Byte>:

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_PROGRAM_CHANGE >> 4;
	temp_data = *data >> 4;
 8000dbc:	7800      	ldrb	r0, [r0, #0]

	if(temp_data == source){
 8000dbe:	0900      	lsrs	r0, r0, #4
 8000dc0:	380c      	subs	r0, #12
 8000dc2:	4243      	negs	r3, r0
 8000dc4:	4158      	adcs	r0, r3
	}
	else{

		return (enum Validate)NO;
	}
}
 8000dc6:	b2c0      	uxtb	r0, r0
 8000dc8:	4770      	bx	lr

08000dca <Is_CC_Status_Byte>:

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_CONTROL_CHANGE >> 4;
	temp_data = *data >> 4;
 8000dca:	7800      	ldrb	r0, [r0, #0]

	if(temp_data == source){
 8000dcc:	0900      	lsrs	r0, r0, #4
 8000dce:	380b      	subs	r0, #11
 8000dd0:	4243      	negs	r3, r0
 8000dd2:	4158      	adcs	r0, r3
	}
	else{

		return (enum Validate)NO;
	}
}
 8000dd4:	b2c0      	uxtb	r0, r0
 8000dd6:	4770      	bx	lr

08000dd8 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>:

enum Validate Is_Utilised_Channel_Mode_CC_First_Data_Byte(volatile uint8_t *first_data_byte){

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000dd8:	7803      	ldrb	r3, [r0, #0]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b77      	cmp	r3, #119	@ 0x77
 8000dde:	d90e      	bls.n	8000dfe <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x26>

		if(*first_data_byte == RESET_ALL_CONTROLLERS){ //put all pots into CC mode and set to 50%
 8000de0:	7803      	ldrb	r3, [r0, #0]
 8000de2:	2b79      	cmp	r3, #121	@ 0x79
 8000de4:	d00d      	beq.n	8000e02 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x2a>

			return (enum Validate)YES;
		}
		else if(*first_data_byte == LOCAL_CONTROL){
 8000de6:	7803      	ldrb	r3, [r0, #0]
 8000de8:	2b7a      	cmp	r3, #122	@ 0x7a
 8000dea:	d00c      	beq.n	8000e06 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x2e>

			return (enum Validate)YES;
		}
		else if(*first_data_byte == OMNI_MODE_ON){
 8000dec:	7803      	ldrb	r3, [r0, #0]
 8000dee:	2b7d      	cmp	r3, #125	@ 0x7d
 8000df0:	d00b      	beq.n	8000e0a <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x32>

			return (enum Validate)YES;
		}
		else if(*first_data_byte == OMNI_MODE_OFF){
 8000df2:	7800      	ldrb	r0, [r0, #0]
 8000df4:	387c      	subs	r0, #124	@ 0x7c
 8000df6:	4243      	negs	r3, r0
 8000df8:	4158      	adcs	r0, r3
 8000dfa:	b2c0      	uxtb	r0, r0
 8000dfc:	e000      	b.n	8000e00 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x28>
			return (enum Validate)NO;
		}
	}
	else{

		return (enum Validate)NO;
 8000dfe:	2000      	movs	r0, #0
	}
}
 8000e00:	4770      	bx	lr
			return (enum Validate)YES;
 8000e02:	2001      	movs	r0, #1
 8000e04:	e7fc      	b.n	8000e00 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x28>
			return (enum Validate)YES;
 8000e06:	2001      	movs	r0, #1
 8000e08:	e7fa      	b.n	8000e00 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x28>
			return (enum Validate)YES;
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	e7f8      	b.n	8000e00 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x28>

08000e0e <Is_Utilised_CC_First_Data_Byte>:

enum Validate Is_Utilised_CC_First_Data_Byte(volatile uint8_t *first_data_byte){

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000e0e:	7803      	ldrb	r3, [r0, #0]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b77      	cmp	r3, #119	@ 0x77
 8000e14:	d811      	bhi.n	8000e3a <Is_Utilised_CC_First_Data_Byte+0x2c>

		return (enum Validate)NO;
	}
	else{

		if(*first_data_byte == WAVESHAPE_CC){
 8000e16:	7803      	ldrb	r3, [r0, #0]
 8000e18:	2b14      	cmp	r3, #20
 8000e1a:	d010      	beq.n	8000e3e <Is_Utilised_CC_First_Data_Byte+0x30>

			return (enum Validate)YES;
		}
		else if(*first_data_byte == SPEED_CC){
 8000e1c:	7803      	ldrb	r3, [r0, #0]
 8000e1e:	2b15      	cmp	r3, #21
 8000e20:	d00f      	beq.n	8000e42 <Is_Utilised_CC_First_Data_Byte+0x34>

			return (enum Validate)YES;
		}
		else if(*first_data_byte == DEPTH_CC){
 8000e22:	7803      	ldrb	r3, [r0, #0]
 8000e24:	2b16      	cmp	r3, #22
 8000e26:	d00e      	beq.n	8000e46 <Is_Utilised_CC_First_Data_Byte+0x38>

			return (enum Validate)YES;
		}
		else if(*first_data_byte == SYMMETRY_CC){
 8000e28:	7803      	ldrb	r3, [r0, #0]
 8000e2a:	2b17      	cmp	r3, #23
 8000e2c:	d00d      	beq.n	8000e4a <Is_Utilised_CC_First_Data_Byte+0x3c>

			return (enum Validate)YES;
		}
		else if(*first_data_byte == PHASE_CC){
 8000e2e:	7800      	ldrb	r0, [r0, #0]
 8000e30:	3818      	subs	r0, #24
 8000e32:	4243      	negs	r3, r0
 8000e34:	4158      	adcs	r0, r3
 8000e36:	b2c0      	uxtb	r0, r0
 8000e38:	e000      	b.n	8000e3c <Is_Utilised_CC_First_Data_Byte+0x2e>
		return (enum Validate)NO;
 8000e3a:	2000      	movs	r0, #0
		else{

			return (enum Validate)NO;
		}
	}
}
 8000e3c:	4770      	bx	lr
			return (enum Validate)YES;
 8000e3e:	2001      	movs	r0, #1
 8000e40:	e7fc      	b.n	8000e3c <Is_Utilised_CC_First_Data_Byte+0x2e>
			return (enum Validate)YES;
 8000e42:	2001      	movs	r0, #1
 8000e44:	e7fa      	b.n	8000e3c <Is_Utilised_CC_First_Data_Byte+0x2e>
			return (enum Validate)YES;
 8000e46:	2001      	movs	r0, #1
 8000e48:	e7f8      	b.n	8000e3c <Is_Utilised_CC_First_Data_Byte+0x2e>
			return (enum Validate)YES;
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	e7f6      	b.n	8000e3c <Is_Utilised_CC_First_Data_Byte+0x2e>

08000e4e <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>:

enum Validate Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(volatile uint8_t *first_data_byte, volatile uint8_t *second_data_byte){

	if(*first_data_byte == RESET_ALL_CONTROLLERS){
 8000e4e:	7803      	ldrb	r3, [r0, #0]
 8000e50:	2b79      	cmp	r3, #121	@ 0x79
 8000e52:	d00e      	beq.n	8000e72 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x24>
		else{

			return (enum Validate)NO;
		}
	}
	else if(*first_data_byte == LOCAL_CONTROL){
 8000e54:	7803      	ldrb	r3, [r0, #0]
 8000e56:	2b7a      	cmp	r3, #122	@ 0x7a
 8000e58:	d010      	beq.n	8000e7c <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x2e>
		else{

			return (enum Validate)NO;
		}
	}
	else if(*first_data_byte == OMNI_MODE_OFF){
 8000e5a:	7803      	ldrb	r3, [r0, #0]
 8000e5c:	2b7c      	cmp	r3, #124	@ 0x7c
 8000e5e:	d016      	beq.n	8000e8e <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x40>
		else{

			return (enum Validate)NO;
		}
	}
	else if(*first_data_byte == OMNI_MODE_ON){
 8000e60:	7803      	ldrb	r3, [r0, #0]
			return (enum Validate)NO;
		}
	}
	else{

		return (enum Validate)NO; //should not even be called if first data byte is always valid
 8000e62:	2000      	movs	r0, #0
	else if(*first_data_byte == OMNI_MODE_ON){
 8000e64:	2b7d      	cmp	r3, #125	@ 0x7d
 8000e66:	d108      	bne.n	8000e7a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x2c>
		if((*second_data_byte == 0)){
 8000e68:	7808      	ldrb	r0, [r1, #0]
 8000e6a:	4243      	negs	r3, r0
 8000e6c:	4158      	adcs	r0, r3
 8000e6e:	b2c0      	uxtb	r0, r0
 8000e70:	e003      	b.n	8000e7a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x2c>
		if(*second_data_byte == 0){
 8000e72:	7808      	ldrb	r0, [r1, #0]
 8000e74:	4243      	negs	r3, r0
 8000e76:	4158      	adcs	r0, r3
 8000e78:	b2c0      	uxtb	r0, r0
	}
}
 8000e7a:	4770      	bx	lr
		if((*second_data_byte == 0) || (*second_data_byte == 127)){
 8000e7c:	780b      	ldrb	r3, [r1, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00a      	beq.n	8000e98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x4a>
 8000e82:	7808      	ldrb	r0, [r1, #0]
 8000e84:	387f      	subs	r0, #127	@ 0x7f
 8000e86:	4243      	negs	r3, r0
 8000e88:	4158      	adcs	r0, r3
 8000e8a:	b2c0      	uxtb	r0, r0
 8000e8c:	e7f5      	b.n	8000e7a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x2c>
		if((*second_data_byte == 0)){
 8000e8e:	7808      	ldrb	r0, [r1, #0]
 8000e90:	4243      	negs	r3, r0
 8000e92:	4158      	adcs	r0, r3
 8000e94:	b2c0      	uxtb	r0, r0
 8000e96:	e7f0      	b.n	8000e7a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x2c>
			return (enum Validate)YES;
 8000e98:	2001      	movs	r0, #1
 8000e9a:	e7ee      	b.n	8000e7a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x2c>

08000e9c <Is_Sysex_Start_Status_Byte>:
	return 1;
}

enum Validate Is_Sysex_Start_Status_Byte(volatile uint8_t *data){

	if(*data == (uint8_t)SYSTEM_EXCLUSIVE_START){
 8000e9c:	7800      	ldrb	r0, [r0, #0]
 8000e9e:	38f0      	subs	r0, #240	@ 0xf0
 8000ea0:	4243      	negs	r3, r0
 8000ea2:	4158      	adcs	r0, r3
	}
	else{

		return (enum Validate)NO;
	}
}
 8000ea4:	b2c0      	uxtb	r0, r0
 8000ea6:	4770      	bx	lr

08000ea8 <Is_Channelised_Status_Byte_On_Basic_Channel>:

		return (enum Validate)NO;
	}
}

enum Validate Is_Channelised_Status_Byte_On_Basic_Channel(volatile uint8_t *data, volatile enum MIDI_Channel MIDI_basic_channel){
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	466b      	mov	r3, sp
 8000eac:	71d9      	strb	r1, [r3, #7]
 8000eae:	3307      	adds	r3, #7

	uint8_t ch = *data & 0x0F;
 8000eb0:	7800      	ldrb	r0, [r0, #0]
	uint8_t b_ch = (uint8_t)MIDI_basic_channel;
 8000eb2:	781b      	ldrb	r3, [r3, #0]

	if(ch == b_ch){
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	4010      	ands	r0, r2
 8000eb8:	1ac0      	subs	r0, r0, r3
 8000eba:	4243      	negs	r3, r0
 8000ebc:	4158      	adcs	r0, r3
	}
	else{

		return (enum Validate)NO;
	}
}
 8000ebe:	b2c0      	uxtb	r0, r0
 8000ec0:	b002      	add	sp, #8
 8000ec2:	4770      	bx	lr

08000ec4 <Is_Data_Buffer_Empty>:

enum Validate Is_Data_Buffer_Empty(volatile struct MIDI_Data *MIDI_data_struct){
 8000ec4:	2200      	movs	r2, #0

	uint16_t sum = 0;
 8000ec6:	2300      	movs	r3, #0

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){

		sum += MIDI_data_struct->MIDI_data_buffer[i];
 8000ec8:	5c81      	ldrb	r1, [r0, r2]
 8000eca:	18cb      	adds	r3, r1, r3
 8000ecc:	b29b      	uxth	r3, r3
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8000ece:	3201      	adds	r2, #1
 8000ed0:	2a0a      	cmp	r2, #10
 8000ed2:	d1f9      	bne.n	8000ec8 <Is_Data_Buffer_Empty+0x4>
	}

	if(sum == 0){
 8000ed4:	425a      	negs	r2, r3
 8000ed6:	4153      	adcs	r3, r2
	}
	else{

		return (enum Validate)NO;
	}
}
 8000ed8:	b2d8      	uxtb	r0, r3
 8000eda:	4770      	bx	lr

08000edc <Clear_Data_Buffer>:
			return 1;
		}
	}
}

uint8_t Clear_Data_Buffer(volatile struct MIDI_Data *MIDI_data_struct){
 8000edc:	2300      	movs	r3, #0

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){

		MIDI_data_struct->MIDI_data_buffer[i] = 0;
 8000ede:	2200      	movs	r2, #0
 8000ee0:	54c2      	strb	r2, [r0, r3]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	2b0a      	cmp	r3, #10
 8000ee6:	d1fb      	bne.n	8000ee0 <Clear_Data_Buffer+0x4>
	}

	return 1;
}
 8000ee8:	2001      	movs	r0, #1
 8000eea:	4770      	bx	lr

08000eec <Is_Program_Change_Data_Byte_In_Range>:

enum Validate Is_Program_Change_Data_Byte_In_Range(volatile uint8_t *PC_data, uint8_t size_of_factory_or_user_array){

	if(*PC_data < size_of_factory_or_user_array){
 8000eec:	7800      	ldrb	r0, [r0, #0]
 8000eee:	b2c0      	uxtb	r0, r0
	}
	else{

		return (enum Validate)NO;
	}
}
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	4180      	sbcs	r0, r0
 8000ef4:	4240      	negs	r0, r0
 8000ef6:	4770      	bx	lr

08000ef8 <Is_System_Real_Time_Status_Byte>:

enum Validate Is_System_Real_Time_Status_Byte(volatile uint8_t *data){

	if(*data == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8000ef8:	7803      	ldrb	r3, [r0, #0]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2bf8      	cmp	r3, #248	@ 0xf8
 8000efe:	d015      	beq.n	8000f2c <Is_System_Real_Time_Status_Byte+0x34>
		return (enum Validate)YES;
	}
	else if(*data == SYSTEM_REAL_TIME_START){
 8000f00:	7803      	ldrb	r3, [r0, #0]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2bfa      	cmp	r3, #250	@ 0xfa
 8000f06:	d013      	beq.n	8000f30 <Is_System_Real_Time_Status_Byte+0x38>
		return (enum Validate)YES;
	}
	else if(*data == SYSTEM_REAL_TIME_CONTINUE){
 8000f08:	7803      	ldrb	r3, [r0, #0]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2bfb      	cmp	r3, #251	@ 0xfb
 8000f0e:	d011      	beq.n	8000f34 <Is_System_Real_Time_Status_Byte+0x3c>
		return (enum Validate)YES;
	}
	else if(*data == SYSTEM_REAL_TIME_STOP){
 8000f10:	7803      	ldrb	r3, [r0, #0]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2bfc      	cmp	r3, #252	@ 0xfc
 8000f16:	d00f      	beq.n	8000f38 <Is_System_Real_Time_Status_Byte+0x40>
		return (enum Validate)YES;
	}
	else if(*data == SYSTEM_REAL_TIME_ACTIVE_SENSING){
 8000f18:	7803      	ldrb	r3, [r0, #0]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f1e:	d00d      	beq.n	8000f3c <Is_System_Real_Time_Status_Byte+0x44>
		return (enum Validate)YES;
	}
	else if(*data == SYSTEM_REAL_TIME_RESET){
 8000f20:	7800      	ldrb	r0, [r0, #0]
 8000f22:	38ff      	subs	r0, #255	@ 0xff
 8000f24:	4243      	negs	r3, r0
 8000f26:	4158      	adcs	r0, r3
 8000f28:	b2c0      	uxtb	r0, r0
		return (enum Validate)YES;
	}
	else{
		return (enum Validate)NO;
	}
}
 8000f2a:	4770      	bx	lr
		return (enum Validate)YES;
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	e7fc      	b.n	8000f2a <Is_System_Real_Time_Status_Byte+0x32>
		return (enum Validate)YES;
 8000f30:	2001      	movs	r0, #1
 8000f32:	e7fa      	b.n	8000f2a <Is_System_Real_Time_Status_Byte+0x32>
		return (enum Validate)YES;
 8000f34:	2001      	movs	r0, #1
 8000f36:	e7f8      	b.n	8000f2a <Is_System_Real_Time_Status_Byte+0x32>
		return (enum Validate)YES;
 8000f38:	2001      	movs	r0, #1
 8000f3a:	e7f6      	b.n	8000f2a <Is_System_Real_Time_Status_Byte+0x32>
		return (enum Validate)YES;
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	e7f4      	b.n	8000f2a <Is_System_Real_Time_Status_Byte+0x32>

08000f40 <Is_OMNI_On>:

enum Validate Is_OMNI_On(volatile uint32_t *statuses_ptr){
 8000f40:	b510      	push	{r4, lr}

	uint8_t omni_mode = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8000f42:	2180      	movs	r1, #128	@ 0x80
 8000f44:	00c9      	lsls	r1, r1, #3
 8000f46:	f003 ff4b 	bl	8004de0 <Get_Status_Bit>

	if(omni_mode == 1){
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	4243      	negs	r3, r0
 8000f4e:	4158      	adcs	r0, r3
	}
	else{

		return (enum Validate)NO;
	}
}
 8000f50:	b2c0      	uxtb	r0, r0
 8000f52:	bd10      	pop	{r4, pc}

08000f54 <Reset_and_Stop_MIDI_Software_Timer>:

uint8_t Reset_and_Stop_MIDI_Software_Timer(uint32_t *midi_counter_ptr, volatile uint32_t *statuses_ptr){
 8000f54:	b570      	push	{r4, r5, r6, lr}
 8000f56:	0005      	movs	r5, r0
 8000f58:	000c      	movs	r4, r1

	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Is_Running);
 8000f5a:	2180      	movs	r1, #128	@ 0x80
 8000f5c:	0049      	lsls	r1, r1, #1
 8000f5e:	0020      	movs	r0, r4
 8000f60:	f003 ff48 	bl	8004df4 <Clear_Status_Bit>
	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Has_Timed_Out);
 8000f64:	2180      	movs	r1, #128	@ 0x80
 8000f66:	0089      	lsls	r1, r1, #2
 8000f68:	0020      	movs	r0, r4
 8000f6a:	f003 ff43 	bl	8004df4 <Clear_Status_Bit>
	*midi_counter_ptr = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	602b      	str	r3, [r5, #0]

	return 1;
}
 8000f72:	2001      	movs	r0, #1
 8000f74:	bd70      	pop	{r4, r5, r6, pc}
	...

08000f78 <Reset_All_Controllers>:

uint8_t Reset_All_Controllers(struct Params *params_ptr, struct Delay_Line* delay_line_ptr){
 8000f78:	b530      	push	{r4, r5, lr}

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000f7a:	4d11      	ldr	r5, [pc, #68]	@ (8000fc0 <Reset_All_Controllers+0x48>)
 8000f7c:	782b      	ldrb	r3, [r5, #0]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	706b      	strb	r3, [r5, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000f82:	4c10      	ldr	r4, [pc, #64]	@ (8000fc4 <Reset_All_Controllers+0x4c>)
 8000f84:	7823      	ldrb	r3, [r4, #0]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	7063      	strb	r3, [r4, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8000f8a:	480f      	ldr	r0, [pc, #60]	@ (8000fc8 <Reset_All_Controllers+0x50>)
 8000f8c:	7803      	ldrb	r3, [r0, #0]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	7043      	strb	r3, [r0, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000f92:	490e      	ldr	r1, [pc, #56]	@ (8000fcc <Reset_All_Controllers+0x54>)
 8000f94:	780b      	ldrb	r3, [r1, #0]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	704b      	strb	r3, [r1, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 8000f9a:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd0 <Reset_All_Controllers+0x58>)
 8000f9c:	7813      	ldrb	r3, [r2, #0]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	7053      	strb	r3, [r2, #1]

	//Put all pots into CC mode
	waveshape_fsm.current_state = CC_MODE;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	702b      	strb	r3, [r5, #0]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8000fa6:	7023      	strb	r3, [r4, #0]
	depth_fsm.current_state = CC_MODE;
 8000fa8:	7003      	strb	r3, [r0, #0]
	symmetry_fsm.current_state = CC_MODE;
 8000faa:	700b      	strb	r3, [r1, #0]
	phase_fsm.current_state = CC_MODE;
 8000fac:	7013      	strb	r3, [r2, #0]

	uint8_t data = 127 >> 1;

	for(uint8_t index = 0; index < NUM_POTS; index++){

		CC_array[index] = data;
 8000fae:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <Reset_All_Controllers+0x5c>)
 8000fb0:	223f      	movs	r2, #63	@ 0x3f
 8000fb2:	701a      	strb	r2, [r3, #0]
 8000fb4:	705a      	strb	r2, [r3, #1]
 8000fb6:	709a      	strb	r2, [r3, #2]
 8000fb8:	70da      	strb	r2, [r3, #3]
 8000fba:	711a      	strb	r2, [r3, #4]
	}

	return 1;
}
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	bd30      	pop	{r4, r5, pc}
 8000fc0:	20000440 	.word	0x20000440
 8000fc4:	20000448 	.word	0x20000448
 8000fc8:	20000444 	.word	0x20000444
 8000fcc:	2000043c 	.word	0x2000043c
 8000fd0:	20000438 	.word	0x20000438
 8000fd4:	200004b4 	.word	0x200004b4

08000fd8 <Set_Local_Control>:

uint8_t Set_Local_Control(){
 8000fd8:	b530      	push	{r4, r5, lr}

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000fda:	4d0e      	ldr	r5, [pc, #56]	@ (8001014 <Set_Local_Control+0x3c>)
 8000fdc:	782b      	ldrb	r3, [r5, #0]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	706b      	strb	r3, [r5, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000fe2:	4c0d      	ldr	r4, [pc, #52]	@ (8001018 <Set_Local_Control+0x40>)
 8000fe4:	7823      	ldrb	r3, [r4, #0]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	7063      	strb	r3, [r4, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8000fea:	480c      	ldr	r0, [pc, #48]	@ (800101c <Set_Local_Control+0x44>)
 8000fec:	7803      	ldrb	r3, [r0, #0]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	7043      	strb	r3, [r0, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000ff2:	490b      	ldr	r1, [pc, #44]	@ (8001020 <Set_Local_Control+0x48>)
 8000ff4:	780b      	ldrb	r3, [r1, #0]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	704b      	strb	r3, [r1, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <Set_Local_Control+0x4c>)
 8000ffc:	7813      	ldrb	r3, [r2, #0]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	7053      	strb	r3, [r2, #1]

	//Put all pots into manual mode
	waveshape_fsm.current_state = MANUAL_MODE;
 8001002:	2301      	movs	r3, #1
 8001004:	702b      	strb	r3, [r5, #0]
	speed_fsm.current_state.speed_exclusive_state = MANUAL_MODE;
 8001006:	7023      	strb	r3, [r4, #0]
	depth_fsm.current_state = MANUAL_MODE;
 8001008:	7003      	strb	r3, [r0, #0]
	symmetry_fsm.current_state = MANUAL_MODE;
 800100a:	700b      	strb	r3, [r1, #0]
	phase_fsm.current_state = MANUAL_MODE;
 800100c:	7013      	strb	r3, [r2, #0]

	return 1;
}
 800100e:	2001      	movs	r0, #1
 8001010:	bd30      	pop	{r4, r5, pc}
 8001012:	46c0      	nop			@ (mov r8, r8)
 8001014:	20000440 	.word	0x20000440
 8001018:	20000448 	.word	0x20000448
 800101c:	20000444 	.word	0x20000444
 8001020:	2000043c 	.word	0x2000043c
 8001024:	20000438 	.word	0x20000438

08001028 <Set_OMNI_Off>:

uint8_t Set_OMNI_Off(volatile uint32_t *statuses_ptr){
 8001028:	b510      	push	{r4, lr}

	//Clear status bit
	Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 800102a:	2180      	movs	r1, #128	@ 0x80
 800102c:	00c9      	lsls	r1, r1, #3
 800102e:	f003 fee1 	bl	8004df4 <Clear_Status_Bit>

	return 1;
}
 8001032:	2001      	movs	r0, #1
 8001034:	bd10      	pop	{r4, pc}

08001036 <Set_OMNI_On>:

uint8_t Set_OMNI_On(volatile uint32_t *statuses_ptr){
 8001036:	b510      	push	{r4, lr}

	//Set status bit
	Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001038:	2180      	movs	r1, #128	@ 0x80
 800103a:	00c9      	lsls	r1, r1, #3
 800103c:	f003 fed6 	bl	8004dec <Set_Status_Bit>

	return 1;
}
 8001040:	2001      	movs	r0, #1
 8001042:	bd10      	pop	{r4, pc}

08001044 <Start_UART_Receive>:
//VARIABLE DEFINITIONS
volatile uint8_t rx_buffer[1] = {0};
volatile enum Validate UART_DMA_TX_is_complete = YES;

//FUNCTION DEFINITIONS
uint8_t Start_UART_Receive(void){
 8001044:	b510      	push	{r4, lr}

	//START UART RECEIVE
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8001046:	4903      	ldr	r1, [pc, #12]	@ (8001054 <Start_UART_Receive+0x10>)
 8001048:	4803      	ldr	r0, [pc, #12]	@ (8001058 <Start_UART_Receive+0x14>)
 800104a:	2201      	movs	r2, #1
 800104c:	f008 f998 	bl	8009380 <HAL_UART_Receive_DMA>

	return 1;
}
 8001050:	2001      	movs	r0, #1
 8001052:	bd10      	pop	{r4, pc}
 8001054:	2000054c 	.word	0x2000054c
 8001058:	2000067c 	.word	0x2000067c

0800105c <Pot_Check>:
volatile uint8_t symmetry_pot_adc_measurement_num = 0;
volatile uint8_t phase_pot_adc_measurement_num = 0;
volatile uint8_t pots_counter = 0;

//FUNCTION DEFINITIONS
uint8_t Pot_Check(volatile uint16_t* ADCResults_arr, enum Pot_Type pot_type){
 800105c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	void *measurement_ptr = NULL;
	uint8_t tolerance = 0;
	volatile struct Normal_FSM* normal_fsm_ptr = NULL;
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;

	if(pot_type == WAVESHAPE_POT){
 800105e:	2904      	cmp	r1, #4
 8001060:	d803      	bhi.n	800106a <Pot_Check+0xe>
 8001062:	0089      	lsls	r1, r1, #2
 8001064:	4b39      	ldr	r3, [pc, #228]	@ (800114c <Pot_Check+0xf0>)
 8001066:	585b      	ldr	r3, [r3, r1]
 8001068:	469f      	mov	pc, r3
		tolerance = SYMMETRY_TOLERANCE;
		normal_fsm_ptr = &symmetry_fsm;
	}
	else if(pot_type == PHASE_POT){

		first_measurement_ptr = &first_phase_measurement;
 800106a:	2700      	movs	r7, #0
 800106c:	003d      	movs	r5, r7
 800106e:	003e      	movs	r6, r7
 8001070:	0038      	movs	r0, r7
 8001072:	003a      	movs	r2, r7
 8001074:	003c      	movs	r4, r7
 8001076:	0039      	movs	r1, r7
 8001078:	e025      	b.n	80010c6 <Pot_Check+0x6a>
		measurement_ptr = (uint16_t*)(ADCResults_arr + SPEED_ADC_RESULT_INDEX);
 800107a:	3002      	adds	r0, #2
		speed_fsm_ptr = &speed_fsm;
 800107c:	4f34      	ldr	r7, [pc, #208]	@ (8001150 <Pot_Check+0xf4>)
	volatile struct Normal_FSM* normal_fsm_ptr = NULL;
 800107e:	2500      	movs	r5, #0
		tolerance = SPEED_TOLERANCE;
 8001080:	2664      	movs	r6, #100	@ 0x64
		measurement_num_ptr = &speed_pot_adc_measurement_num;
 8001082:	4a34      	ldr	r2, [pc, #208]	@ (8001154 <Pot_Check+0xf8>)
		second_measurement_ptr = &second_speed_measurement;
 8001084:	4c34      	ldr	r4, [pc, #208]	@ (8001158 <Pot_Check+0xfc>)
		first_measurement_ptr = &first_speed_measurement;
 8001086:	4935      	ldr	r1, [pc, #212]	@ (800115c <Pot_Check+0x100>)
 8001088:	e01d      	b.n	80010c6 <Pot_Check+0x6a>
		measurement_ptr = (uint16_t*)(ADCResults_arr + DEPTH_ADC_RESULT_INDEX);
 800108a:	3004      	adds	r0, #4
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 800108c:	2700      	movs	r7, #0
		normal_fsm_ptr = &depth_fsm;
 800108e:	4d34      	ldr	r5, [pc, #208]	@ (8001160 <Pot_Check+0x104>)
		tolerance = DEPTH_TOLERANCE;
 8001090:	2664      	movs	r6, #100	@ 0x64
		measurement_num_ptr = &depth_pot_adc_measurement_num;
 8001092:	4a34      	ldr	r2, [pc, #208]	@ (8001164 <Pot_Check+0x108>)
		second_measurement_ptr = &second_depth_measurement;
 8001094:	4c34      	ldr	r4, [pc, #208]	@ (8001168 <Pot_Check+0x10c>)
		first_measurement_ptr = &first_depth_measurement;
 8001096:	4935      	ldr	r1, [pc, #212]	@ (800116c <Pot_Check+0x110>)
 8001098:	e015      	b.n	80010c6 <Pot_Check+0x6a>
		measurement_ptr = (uint16_t*)(ADCResults_arr + SYMMETRY_ADC_RESULT_INDEX);
 800109a:	3006      	adds	r0, #6
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 800109c:	2700      	movs	r7, #0
		normal_fsm_ptr = &symmetry_fsm;
 800109e:	4d34      	ldr	r5, [pc, #208]	@ (8001170 <Pot_Check+0x114>)
		tolerance = SYMMETRY_TOLERANCE;
 80010a0:	2664      	movs	r6, #100	@ 0x64
		measurement_num_ptr = &symmetry_pot_adc_measurement_num;
 80010a2:	4a34      	ldr	r2, [pc, #208]	@ (8001174 <Pot_Check+0x118>)
		second_measurement_ptr = &second_symmetry_measurement;
 80010a4:	4c34      	ldr	r4, [pc, #208]	@ (8001178 <Pot_Check+0x11c>)
		first_measurement_ptr = &first_symmetry_measurement;
 80010a6:	4935      	ldr	r1, [pc, #212]	@ (800117c <Pot_Check+0x120>)
 80010a8:	e00d      	b.n	80010c6 <Pot_Check+0x6a>
		second_measurement_ptr = &second_phase_measurement;
		measurement_num_ptr = &phase_pot_adc_measurement_num;
		measurement_ptr = (uint16_t*)(ADCResults_arr + DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX);
 80010aa:	3008      	adds	r0, #8
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 80010ac:	2700      	movs	r7, #0
		tolerance = PHASE_TOLERANCE;
		normal_fsm_ptr = &phase_fsm;
 80010ae:	4d34      	ldr	r5, [pc, #208]	@ (8001180 <Pot_Check+0x124>)
		tolerance = PHASE_TOLERANCE;
 80010b0:	2664      	movs	r6, #100	@ 0x64
		measurement_num_ptr = &phase_pot_adc_measurement_num;
 80010b2:	4a34      	ldr	r2, [pc, #208]	@ (8001184 <Pot_Check+0x128>)
		second_measurement_ptr = &second_phase_measurement;
 80010b4:	4c34      	ldr	r4, [pc, #208]	@ (8001188 <Pot_Check+0x12c>)
		first_measurement_ptr = &first_phase_measurement;
 80010b6:	4935      	ldr	r1, [pc, #212]	@ (800118c <Pot_Check+0x130>)
 80010b8:	e005      	b.n	80010c6 <Pot_Check+0x6a>
uint8_t Pot_Check(volatile uint16_t* ADCResults_arr, enum Pot_Type pot_type){
 80010ba:	2700      	movs	r7, #0
 80010bc:	4d34      	ldr	r5, [pc, #208]	@ (8001190 <Pot_Check+0x134>)
 80010be:	2664      	movs	r6, #100	@ 0x64
 80010c0:	4a34      	ldr	r2, [pc, #208]	@ (8001194 <Pot_Check+0x138>)
 80010c2:	4c35      	ldr	r4, [pc, #212]	@ (8001198 <Pot_Check+0x13c>)
 80010c4:	4935      	ldr	r1, [pc, #212]	@ (800119c <Pot_Check+0x140>)
	}

	if(*measurement_num_ptr == 0){
 80010c6:	7813      	ldrb	r3, [r2, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d107      	bne.n	80010dc <Pot_Check+0x80>

		*first_measurement_ptr = *((uint16_t*)measurement_ptr);
 80010cc:	8803      	ldrh	r3, [r0, #0]
 80010ce:	800b      	strh	r3, [r1, #0]

			(*measurement_num_ptr)++;
 80010d0:	7813      	ldrb	r3, [r2, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	7013      	strb	r3, [r2, #0]
			}
		}
	}

	return 1;
}
 80010d8:	2001      	movs	r0, #1
 80010da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(*measurement_num_ptr == 1){
 80010dc:	7813      	ldrb	r3, [r2, #0]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d014      	beq.n	800110c <Pot_Check+0xb0>
	else if(*measurement_num_ptr == 2){
 80010e2:	7813      	ldrb	r3, [r2, #0]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d1f7      	bne.n	80010d8 <Pot_Check+0x7c>
		*measurement_num_ptr = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	7013      	strb	r3, [r2, #0]
		if(*first_measurement_ptr > *second_measurement_ptr){
 80010ec:	880b      	ldrh	r3, [r1, #0]
 80010ee:	8822      	ldrh	r2, [r4, #0]
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d912      	bls.n	800111a <Pot_Check+0xbe>
			diff = *first_measurement_ptr - *second_measurement_ptr;
 80010f4:	1a9b      	subs	r3, r3, r2
 80010f6:	b29b      	uxth	r3, r3
		if(diff > tolerance){
 80010f8:	429e      	cmp	r6, r3
 80010fa:	d2ed      	bcs.n	80010d8 <Pot_Check+0x7c>
			if(normal_fsm_ptr != NULL){
 80010fc:	2d00      	cmp	r5, #0
 80010fe:	d011      	beq.n	8001124 <Pot_Check+0xc8>
				normal_fsm_ptr->prev_state = normal_fsm_ptr->current_state;
 8001100:	782b      	ldrb	r3, [r5, #0]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	706b      	strb	r3, [r5, #1]
				normal_fsm_ptr->current_state = MANUAL_MODE;
 8001106:	2301      	movs	r3, #1
 8001108:	702b      	strb	r3, [r5, #0]
 800110a:	e7e5      	b.n	80010d8 <Pot_Check+0x7c>
		*second_measurement_ptr = *((uint16_t*)measurement_ptr);
 800110c:	8803      	ldrh	r3, [r0, #0]
 800110e:	8023      	strh	r3, [r4, #0]
		(*measurement_num_ptr)++;
 8001110:	7813      	ldrb	r3, [r2, #0]
 8001112:	3301      	adds	r3, #1
 8001114:	b2db      	uxtb	r3, r3
 8001116:	7013      	strb	r3, [r2, #0]
 8001118:	e7de      	b.n	80010d8 <Pot_Check+0x7c>
		else if(*second_measurement_ptr > *first_measurement_ptr){
 800111a:	4293      	cmp	r3, r2
 800111c:	d2dc      	bcs.n	80010d8 <Pot_Check+0x7c>
			diff = *second_measurement_ptr - *first_measurement_ptr;
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	b29b      	uxth	r3, r3
 8001122:	e7e9      	b.n	80010f8 <Pot_Check+0x9c>
			else if(speed_fsm_ptr != NULL){
 8001124:	2f00      	cmp	r7, #0
 8001126:	d0d7      	beq.n	80010d8 <Pot_Check+0x7c>
				speed_fsm_ptr->prev_state = speed_fsm_ptr->current_state;
 8001128:	783b      	ldrb	r3, [r7, #0]
 800112a:	707b      	strb	r3, [r7, #1]
				speed_fsm_ptr->current_state.shared_state = MANUAL_MODE;
 800112c:	2301      	movs	r3, #1
 800112e:	703b      	strb	r3, [r7, #0]
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8001130:	4c1b      	ldr	r4, [pc, #108]	@ (80011a0 <Pot_Check+0x144>)
 8001132:	2120      	movs	r1, #32
 8001134:	0020      	movs	r0, r4
 8001136:	f003 fe5d 	bl	8004df4 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800113a:	2140      	movs	r1, #64	@ 0x40
 800113c:	0020      	movs	r0, r4
 800113e:	f003 fe59 	bl	8004df4 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, First_Sync_Complete);
 8001142:	2108      	movs	r1, #8
 8001144:	0020      	movs	r0, r4
 8001146:	f003 fe55 	bl	8004df4 <Clear_Status_Bit>
 800114a:	e7c5      	b.n	80010d8 <Pot_Check+0x7c>
 800114c:	080094c0 	.word	0x080094c0
 8001150:	20000448 	.word	0x20000448
 8001154:	20000566 	.word	0x20000566
 8001158:	2000055a 	.word	0x2000055a
 800115c:	2000055c 	.word	0x2000055c
 8001160:	20000444 	.word	0x20000444
 8001164:	20000565 	.word	0x20000565
 8001168:	20000556 	.word	0x20000556
 800116c:	20000558 	.word	0x20000558
 8001170:	2000043c 	.word	0x2000043c
 8001174:	20000564 	.word	0x20000564
 8001178:	20000552 	.word	0x20000552
 800117c:	20000554 	.word	0x20000554
 8001180:	20000438 	.word	0x20000438
 8001184:	20000563 	.word	0x20000563
 8001188:	2000054e 	.word	0x2000054e
 800118c:	20000550 	.word	0x20000550
 8001190:	20000440 	.word	0x20000440
 8001194:	20000567 	.word	0x20000567
 8001198:	2000055e 	.word	0x2000055e
 800119c:	20000560 	.word	0x20000560
 80011a0:	20000cbc 	.word	0x20000cbc

080011a4 <Check_Tap_Tempo_Switch_State>:

uint8_t Check_Tap_Tempo_Switch_State(volatile struct Tap_Tempo_Switch_States *tap_tempo_switch_states_ptr){
 80011a4:	b510      	push	{r4, lr}
 80011a6:	0004      	movs	r4, r0

	static uint8_t extend_rising_edge = 0;
	static uint8_t tap_tempo_switch_state_counter = TAP_TEMPO_SWITCH_CONFIDENCE_COUNT;

	uint8_t switch_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 80011a8:	2180      	movs	r1, #128	@ 0x80
 80011aa:	20a0      	movs	r0, #160	@ 0xa0
 80011ac:	00c9      	lsls	r1, r1, #3
 80011ae:	05c0      	lsls	r0, r0, #23
 80011b0:	f005 f848 	bl	8006244 <HAL_GPIO_ReadPin>

	if(switch_state == 0){
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d10f      	bne.n	80011d8 <Check_Tap_Tempo_Switch_State+0x34>

		if(tap_tempo_switch_state_counter != 0){
 80011b8:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <Check_Tap_Tempo_Switch_State+0x64>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d018      	beq.n	80011f2 <Check_Tap_Tempo_Switch_State+0x4e>

			tap_tempo_switch_state_counter--;
 80011c0:	4a11      	ldr	r2, [pc, #68]	@ (8001208 <Check_Tap_Tempo_Switch_State+0x64>)
 80011c2:	3b01      	subs	r3, #1
 80011c4:	7013      	strb	r3, [r2, #0]
				extend_rising_edge++;
			}
		}
	}

	if(tap_tempo_switch_state_counter == 0){
 80011c6:	4b10      	ldr	r3, [pc, #64]	@ (8001208 <Check_Tap_Tempo_Switch_State+0x64>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d011      	beq.n	80011f2 <Check_Tap_Tempo_Switch_State+0x4e>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
	}
	else if(tap_tempo_switch_state_counter == TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 80011ce:	2b0e      	cmp	r3, #14
 80011d0:	d111      	bne.n	80011f6 <Check_Tap_Tempo_Switch_State+0x52>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = NOT_DEPRESSED;
 80011d2:	2300      	movs	r3, #0
 80011d4:	7023      	strb	r3, [r4, #0]
 80011d6:	e00e      	b.n	80011f6 <Check_Tap_Tempo_Switch_State+0x52>
		if(tap_tempo_switch_state_counter != TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 80011d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <Check_Tap_Tempo_Switch_State+0x64>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b0e      	cmp	r3, #14
 80011de:	d0f8      	beq.n	80011d2 <Check_Tap_Tempo_Switch_State+0x2e>
			if(extend_rising_edge == COUNT_TO_DELAY_RISING_TAP_TEMPO_EDGE){
 80011e0:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <Check_Tap_Tempo_Switch_State+0x68>)
 80011e2:	7812      	ldrb	r2, [r2, #0]
 80011e4:	2a04      	cmp	r2, #4
 80011e6:	d008      	beq.n	80011fa <Check_Tap_Tempo_Switch_State+0x56>
				extend_rising_edge++;
 80011e8:	4908      	ldr	r1, [pc, #32]	@ (800120c <Check_Tap_Tempo_Switch_State+0x68>)
 80011ea:	3201      	adds	r2, #1
 80011ec:	700a      	strb	r2, [r1, #0]
	if(tap_tempo_switch_state_counter == 0){
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <Check_Tap_Tempo_Switch_State+0x52>
		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
 80011f2:	2301      	movs	r3, #1
 80011f4:	7023      	strb	r3, [r4, #0]
	}

	return 1;
}
 80011f6:	2001      	movs	r0, #1
 80011f8:	bd10      	pop	{r4, pc}
				tap_tempo_switch_state_counter++;
 80011fa:	4a03      	ldr	r2, [pc, #12]	@ (8001208 <Check_Tap_Tempo_Switch_State+0x64>)
 80011fc:	3301      	adds	r3, #1
 80011fe:	7013      	strb	r3, [r2, #0]
				extend_rising_edge = 0;
 8001200:	4b02      	ldr	r3, [pc, #8]	@ (800120c <Check_Tap_Tempo_Switch_State+0x68>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	e7de      	b.n	80011c6 <Check_Tap_Tempo_Switch_State+0x22>
 8001208:	20000024 	.word	0x20000024
 800120c:	2000054d 	.word	0x2000054d

08001210 <SystemClock_Config>:

LPTIM_HandleTypeDef hlptim1;

//FUNCTIONS
void SystemClock_Config(void)
{
 8001210:	b500      	push	{lr}
 8001212:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001214:	2238      	movs	r2, #56	@ 0x38
 8001216:	2100      	movs	r1, #0
 8001218:	a804      	add	r0, sp, #16
 800121a:	f008 f8ec 	bl	80093f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121e:	2210      	movs	r2, #16
 8001220:	2100      	movs	r1, #0
 8001222:	4668      	mov	r0, sp
 8001224:	f008 f8e7 	bl	80093f6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001228:	2080      	movs	r0, #128	@ 0x80
 800122a:	0080      	lsls	r0, r0, #2
 800122c:	f005 fa96 	bl	800675c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001230:	230a      	movs	r3, #10
 8001232:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001234:	33f6      	adds	r3, #246	@ 0xf6
 8001236:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800123c:	2240      	movs	r2, #64	@ 0x40
 800123e:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001240:	3a3f      	subs	r2, #63	@ 0x3f
 8001242:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001244:	3201      	adds	r2, #1
 8001246:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001248:	920c      	str	r2, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800124a:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 8;
 800124c:	3308      	adds	r3, #8
 800124e:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001250:	2380      	movs	r3, #128	@ 0x80
 8001252:	029b      	lsls	r3, r3, #10
 8001254:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001256:	23c0      	movs	r3, #192	@ 0xc0
 8001258:	04db      	lsls	r3, r3, #19
 800125a:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800125c:	2380      	movs	r3, #128	@ 0x80
 800125e:	059b      	lsls	r3, r3, #22
 8001260:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001262:	a804      	add	r0, sp, #16
 8001264:	f005 faac 	bl	80067c0 <HAL_RCC_OscConfig>
 8001268:	2800      	cmp	r0, #0
 800126a:	d10e      	bne.n	800128a <SystemClock_Config+0x7a>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126c:	2307      	movs	r3, #7
 800126e:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001270:	3b05      	subs	r3, #5
 8001272:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001278:	9303      	str	r3, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800127a:	2102      	movs	r1, #2
 800127c:	4668      	mov	r0, sp
 800127e:	f005 fd8d 	bl	8006d9c <HAL_RCC_ClockConfig>
 8001282:	2800      	cmp	r0, #0
 8001284:	d103      	bne.n	800128e <SystemClock_Config+0x7e>
  {
    Error_Handler();
  }
}
 8001286:	b013      	add	sp, #76	@ 0x4c
 8001288:	bd00      	pop	{pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800128a:	b672      	cpsid	i

void Error_Handler(void)
{
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800128c:	e7fe      	b.n	800128c <SystemClock_Config+0x7c>
 800128e:	b672      	cpsid	i
 8001290:	e7fe      	b.n	8001290 <SystemClock_Config+0x80>
	...

08001294 <MX_ADC1_Init>:
{
 8001294:	b500      	push	{lr}
 8001296:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8001298:	220c      	movs	r2, #12
 800129a:	2100      	movs	r1, #0
 800129c:	a801      	add	r0, sp, #4
 800129e:	f008 f8aa 	bl	80093f6 <memset>
  hadc1.Instance = ADC1;
 80012a2:	4838      	ldr	r0, [pc, #224]	@ (8001384 <MX_ADC1_Init+0xf0>)
 80012a4:	4b38      	ldr	r3, [pc, #224]	@ (8001388 <MX_ADC1_Init+0xf4>)
 80012a6:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012a8:	2380      	movs	r3, #128	@ 0x80
 80012aa:	05db      	lsls	r3, r3, #23
 80012ac:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ae:	2300      	movs	r3, #0
 80012b0:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b2:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	0392      	lsls	r2, r2, #14
 80012b8:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012ba:	2208      	movs	r2, #8
 80012bc:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012be:	7603      	strb	r3, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80012c0:	7643      	strb	r3, [r0, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012c2:	7683      	strb	r3, [r0, #26]
  hadc1.Init.NbrOfConversion = 6;
 80012c4:	3a02      	subs	r2, #2
 80012c6:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012c8:	321a      	adds	r2, #26
 80012ca:	5483      	strb	r3, [r0, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012cc:	6243      	str	r3, [r0, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ce:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012d0:	320c      	adds	r2, #12
 80012d2:	5483      	strb	r3, [r0, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012d4:	6303      	str	r3, [r0, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80012d6:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80012d8:	6383      	str	r3, [r0, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80012da:	3210      	adds	r2, #16
 80012dc:	5483      	strb	r3, [r0, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80012de:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012e0:	f003 fe5a 	bl	8004f98 <HAL_ADC_Init>
 80012e4:	2800      	cmp	r0, #0
 80012e6:	d13e      	bne.n	8001366 <MX_ADC1_Init+0xd2>
  sConfig.Channel = ADC_CHANNEL_0;
 80012e8:	2301      	movs	r3, #1
 80012ea:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80012f0:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f2:	4824      	ldr	r0, [pc, #144]	@ (8001384 <MX_ADC1_Init+0xf0>)
 80012f4:	a901      	add	r1, sp, #4
 80012f6:	f003 ffe3 	bl	80052c0 <HAL_ADC_ConfigChannel>
 80012fa:	2800      	cmp	r0, #0
 80012fc:	d135      	bne.n	800136a <MX_ADC1_Init+0xd6>
  sConfig.Channel = ADC_CHANNEL_1;
 80012fe:	4b23      	ldr	r3, [pc, #140]	@ (800138c <MX_ADC1_Init+0xf8>)
 8001300:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001302:	2304      	movs	r3, #4
 8001304:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001306:	481f      	ldr	r0, [pc, #124]	@ (8001384 <MX_ADC1_Init+0xf0>)
 8001308:	a901      	add	r1, sp, #4
 800130a:	f003 ffd9 	bl	80052c0 <HAL_ADC_ConfigChannel>
 800130e:	2800      	cmp	r0, #0
 8001310:	d12d      	bne.n	800136e <MX_ADC1_Init+0xda>
  sConfig.Channel = ADC_CHANNEL_4;
 8001312:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <MX_ADC1_Init+0xfc>)
 8001314:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001316:	2308      	movs	r3, #8
 8001318:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131a:	481a      	ldr	r0, [pc, #104]	@ (8001384 <MX_ADC1_Init+0xf0>)
 800131c:	a901      	add	r1, sp, #4
 800131e:	f003 ffcf 	bl	80052c0 <HAL_ADC_ConfigChannel>
 8001322:	2800      	cmp	r0, #0
 8001324:	d125      	bne.n	8001372 <MX_ADC1_Init+0xde>
  sConfig.Channel = ADC_CHANNEL_5;
 8001326:	4b1b      	ldr	r3, [pc, #108]	@ (8001394 <MX_ADC1_Init+0x100>)
 8001328:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800132a:	230c      	movs	r3, #12
 800132c:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132e:	4815      	ldr	r0, [pc, #84]	@ (8001384 <MX_ADC1_Init+0xf0>)
 8001330:	a901      	add	r1, sp, #4
 8001332:	f003 ffc5 	bl	80052c0 <HAL_ADC_ConfigChannel>
 8001336:	2800      	cmp	r0, #0
 8001338:	d11d      	bne.n	8001376 <MX_ADC1_Init+0xe2>
  sConfig.Channel = ADC_CHANNEL_6;
 800133a:	4b17      	ldr	r3, [pc, #92]	@ (8001398 <MX_ADC1_Init+0x104>)
 800133c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800133e:	2310      	movs	r3, #16
 8001340:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001342:	4810      	ldr	r0, [pc, #64]	@ (8001384 <MX_ADC1_Init+0xf0>)
 8001344:	a901      	add	r1, sp, #4
 8001346:	f003 ffbb 	bl	80052c0 <HAL_ADC_ConfigChannel>
 800134a:	2800      	cmp	r0, #0
 800134c:	d115      	bne.n	800137a <MX_ADC1_Init+0xe6>
  sConfig.Channel = ADC_CHANNEL_11;
 800134e:	4b13      	ldr	r3, [pc, #76]	@ (800139c <MX_ADC1_Init+0x108>)
 8001350:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001352:	2314      	movs	r3, #20
 8001354:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001356:	480b      	ldr	r0, [pc, #44]	@ (8001384 <MX_ADC1_Init+0xf0>)
 8001358:	a901      	add	r1, sp, #4
 800135a:	f003 ffb1 	bl	80052c0 <HAL_ADC_ConfigChannel>
 800135e:	2800      	cmp	r0, #0
 8001360:	d10d      	bne.n	800137e <MX_ADC1_Init+0xea>
}
 8001362:	b005      	add	sp, #20
 8001364:	bd00      	pop	{pc}
 8001366:	b672      	cpsid	i
  while (1)
 8001368:	e7fe      	b.n	8001368 <MX_ADC1_Init+0xd4>
 800136a:	b672      	cpsid	i
 800136c:	e7fe      	b.n	800136c <MX_ADC1_Init+0xd8>
 800136e:	b672      	cpsid	i
 8001370:	e7fe      	b.n	8001370 <MX_ADC1_Init+0xdc>
 8001372:	b672      	cpsid	i
 8001374:	e7fe      	b.n	8001374 <MX_ADC1_Init+0xe0>
 8001376:	b672      	cpsid	i
 8001378:	e7fe      	b.n	8001378 <MX_ADC1_Init+0xe4>
 800137a:	b672      	cpsid	i
 800137c:	e7fe      	b.n	800137c <MX_ADC1_Init+0xe8>
 800137e:	b672      	cpsid	i
 8001380:	e7fe      	b.n	8001380 <MX_ADC1_Init+0xec>
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	20000c0c 	.word	0x20000c0c
 8001388:	40012400 	.word	0x40012400
 800138c:	04000002 	.word	0x04000002
 8001390:	10000010 	.word	0x10000010
 8001394:	14000020 	.word	0x14000020
 8001398:	18000040 	.word	0x18000040
 800139c:	2c000800 	.word	0x2c000800

080013a0 <MX_TIM16_Init>:
{
 80013a0:	b500      	push	{lr}
 80013a2:	b095      	sub	sp, #84	@ 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013a4:	221c      	movs	r2, #28
 80013a6:	2100      	movs	r1, #0
 80013a8:	a80d      	add	r0, sp, #52	@ 0x34
 80013aa:	f008 f824 	bl	80093f6 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013ae:	2234      	movs	r2, #52	@ 0x34
 80013b0:	2100      	movs	r1, #0
 80013b2:	4668      	mov	r0, sp
 80013b4:	f008 f81f 	bl	80093f6 <memset>
  htim16.Instance = TIM16;
 80013b8:	4823      	ldr	r0, [pc, #140]	@ (8001448 <MX_TIM16_Init+0xa8>)
 80013ba:	4b24      	ldr	r3, [pc, #144]	@ (800144c <MX_TIM16_Init+0xac>)
 80013bc:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c2:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 255;
 80013c4:	22ff      	movs	r2, #255	@ 0xff
 80013c6:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80013c8:	3202      	adds	r2, #2
 80013ca:	32ff      	adds	r2, #255	@ 0xff
 80013cc:	6102      	str	r2, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 80013ce:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013d0:	3380      	adds	r3, #128	@ 0x80
 80013d2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80013d4:	f006 fffa 	bl	80083cc <HAL_TIM_Base_Init>
 80013d8:	2800      	cmp	r0, #0
 80013da:	d12c      	bne.n	8001436 <MX_TIM16_Init+0x96>
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80013dc:	481a      	ldr	r0, [pc, #104]	@ (8001448 <MX_TIM16_Init+0xa8>)
 80013de:	f007 f831 	bl	8008444 <HAL_TIM_OC_Init>
 80013e2:	2800      	cmp	r0, #0
 80013e4:	d129      	bne.n	800143a <MX_TIM16_Init+0x9a>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80013e6:	2300      	movs	r3, #0
 80013e8:	930d      	str	r3, [sp, #52]	@ 0x34
  sConfigOC.Pulse = 255;
 80013ea:	22ff      	movs	r2, #255	@ 0xff
 80013ec:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ee:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013f0:	9310      	str	r3, [sp, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f2:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013f4:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013f6:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f8:	4813      	ldr	r0, [pc, #76]	@ (8001448 <MX_TIM16_Init+0xa8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	a90d      	add	r1, sp, #52	@ 0x34
 80013fe:	f006 faab 	bl	8007958 <HAL_TIM_OC_ConfigChannel>
 8001402:	2800      	cmp	r0, #0
 8001404:	d11b      	bne.n	800143e <MX_TIM16_Init+0x9e>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8001406:	4810      	ldr	r0, [pc, #64]	@ (8001448 <MX_TIM16_Init+0xa8>)
 8001408:	6802      	ldr	r2, [r0, #0]
 800140a:	6993      	ldr	r3, [r2, #24]
 800140c:	2108      	movs	r1, #8
 800140e:	438b      	bics	r3, r1
 8001410:	6193      	str	r3, [r2, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	9300      	str	r3, [sp, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001416:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001418:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800141a:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800141c:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800141e:	2280      	movs	r2, #128	@ 0x80
 8001420:	0192      	lsls	r2, r2, #6
 8001422:	9205      	str	r2, [sp, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001424:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001426:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001428:	4669      	mov	r1, sp
 800142a:	f007 f8fb 	bl	8008624 <HAL_TIMEx_ConfigBreakDeadTime>
 800142e:	2800      	cmp	r0, #0
 8001430:	d107      	bne.n	8001442 <MX_TIM16_Init+0xa2>
}
 8001432:	b015      	add	sp, #84	@ 0x54
 8001434:	bd00      	pop	{pc}
 8001436:	b672      	cpsid	i
  while (1)
 8001438:	e7fe      	b.n	8001438 <MX_TIM16_Init+0x98>
 800143a:	b672      	cpsid	i
 800143c:	e7fe      	b.n	800143c <MX_TIM16_Init+0x9c>
 800143e:	b672      	cpsid	i
 8001440:	e7fe      	b.n	8001440 <MX_TIM16_Init+0xa0>
 8001442:	b672      	cpsid	i
 8001444:	e7fe      	b.n	8001444 <MX_TIM16_Init+0xa4>
 8001446:	46c0      	nop			@ (mov r8, r8)
 8001448:	2000097c 	.word	0x2000097c
 800144c:	40014400 	.word	0x40014400

08001450 <MX_TIM2_Init>:
{
 8001450:	b500      	push	{lr}
 8001452:	b08d      	sub	sp, #52	@ 0x34
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001454:	2210      	movs	r2, #16
 8001456:	2100      	movs	r1, #0
 8001458:	a808      	add	r0, sp, #32
 800145a:	f007 ffcc 	bl	80093f6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145e:	220c      	movs	r2, #12
 8001460:	2100      	movs	r1, #0
 8001462:	a805      	add	r0, sp, #20
 8001464:	f007 ffc7 	bl	80093f6 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001468:	2210      	movs	r2, #16
 800146a:	2100      	movs	r1, #0
 800146c:	a801      	add	r0, sp, #4
 800146e:	f007 ffc2 	bl	80093f6 <memset>
  htim2.Instance = TIM2;
 8001472:	4823      	ldr	r0, [pc, #140]	@ (8001500 <MX_TIM2_Init+0xb0>)
 8001474:	2380      	movs	r3, #128	@ 0x80
 8001476:	05db      	lsls	r3, r3, #23
 8001478:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 64 - 1;
 800147a:	233f      	movs	r3, #63	@ 0x3f
 800147c:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147e:	2300      	movs	r3, #0
 8001480:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 2097152 - 1;
 8001482:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <MX_TIM2_Init+0xb4>)
 8001484:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001486:	2380      	movs	r3, #128	@ 0x80
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800148c:	3b81      	subs	r3, #129	@ 0x81
 800148e:	3bff      	subs	r3, #255	@ 0xff
 8001490:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001492:	f006 ff9b 	bl	80083cc <HAL_TIM_Base_Init>
 8001496:	2800      	cmp	r0, #0
 8001498:	d127      	bne.n	80014ea <MX_TIM2_Init+0x9a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149a:	2380      	movs	r3, #128	@ 0x80
 800149c:	015b      	lsls	r3, r3, #5
 800149e:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014a0:	4817      	ldr	r0, [pc, #92]	@ (8001500 <MX_TIM2_Init+0xb0>)
 80014a2:	a908      	add	r1, sp, #32
 80014a4:	f006 fc24 	bl	8007cf0 <HAL_TIM_ConfigClockSource>
 80014a8:	2800      	cmp	r0, #0
 80014aa:	d120      	bne.n	80014ee <MX_TIM2_Init+0x9e>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80014ac:	4814      	ldr	r0, [pc, #80]	@ (8001500 <MX_TIM2_Init+0xb0>)
 80014ae:	f007 f841 	bl	8008534 <HAL_TIM_IC_Init>
 80014b2:	2800      	cmp	r0, #0
 80014b4:	d11d      	bne.n	80014f2 <MX_TIM2_Init+0xa2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ba:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014bc:	4810      	ldr	r0, [pc, #64]	@ (8001500 <MX_TIM2_Init+0xb0>)
 80014be:	a905      	add	r1, sp, #20
 80014c0:	f007 f874 	bl	80085ac <HAL_TIMEx_MasterConfigSynchronization>
 80014c4:	2800      	cmp	r0, #0
 80014c6:	d116      	bne.n	80014f6 <MX_TIM2_Init+0xa6>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80014c8:	2302      	movs	r3, #2
 80014ca:	9301      	str	r3, [sp, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014cc:	3b01      	subs	r3, #1
 80014ce:	9302      	str	r3, [sp, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	9303      	str	r3, [sp, #12]
  sConfigIC.ICFilter = 15;
 80014d4:	330f      	adds	r3, #15
 80014d6:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014d8:	4809      	ldr	r0, [pc, #36]	@ (8001500 <MX_TIM2_Init+0xb0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	a901      	add	r1, sp, #4
 80014de:	f006 fb3d 	bl	8007b5c <HAL_TIM_IC_ConfigChannel>
 80014e2:	2800      	cmp	r0, #0
 80014e4:	d109      	bne.n	80014fa <MX_TIM2_Init+0xaa>
}
 80014e6:	b00d      	add	sp, #52	@ 0x34
 80014e8:	bd00      	pop	{pc}
 80014ea:	b672      	cpsid	i
  while (1)
 80014ec:	e7fe      	b.n	80014ec <MX_TIM2_Init+0x9c>
 80014ee:	b672      	cpsid	i
 80014f0:	e7fe      	b.n	80014f0 <MX_TIM2_Init+0xa0>
 80014f2:	b672      	cpsid	i
 80014f4:	e7fe      	b.n	80014f4 <MX_TIM2_Init+0xa4>
 80014f6:	b672      	cpsid	i
 80014f8:	e7fe      	b.n	80014f8 <MX_TIM2_Init+0xa8>
 80014fa:	b672      	cpsid	i
 80014fc:	e7fe      	b.n	80014fc <MX_TIM2_Init+0xac>
 80014fe:	46c0      	nop			@ (mov r8, r8)
 8001500:	200008c0 	.word	0x200008c0
 8001504:	001fffff 	.word	0x001fffff

08001508 <MX_TIM3_Init>:
{
 8001508:	b500      	push	{lr}
 800150a:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150c:	2210      	movs	r2, #16
 800150e:	2100      	movs	r1, #0
 8001510:	a80a      	add	r0, sp, #40	@ 0x28
 8001512:	f007 ff70 	bl	80093f6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001516:	220c      	movs	r2, #12
 8001518:	2100      	movs	r1, #0
 800151a:	a807      	add	r0, sp, #28
 800151c:	f007 ff6b 	bl	80093f6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001520:	221c      	movs	r2, #28
 8001522:	2100      	movs	r1, #0
 8001524:	4668      	mov	r0, sp
 8001526:	f007 ff66 	bl	80093f6 <memset>
  htim3.Instance = TIM3;
 800152a:	4824      	ldr	r0, [pc, #144]	@ (80015bc <MX_TIM3_Init+0xb4>)
 800152c:	4b24      	ldr	r3, [pc, #144]	@ (80015c0 <MX_TIM3_Init+0xb8>)
 800152e:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 8001530:	4b24      	ldr	r3, [pc, #144]	@ (80015c4 <MX_TIM3_Init+0xbc>)
 8001532:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001534:	2300      	movs	r3, #0
 8001536:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 4096 - 1;
 8001538:	4b23      	ldr	r3, [pc, #140]	@ (80015c8 <MX_TIM3_Init+0xc0>)
 800153a:	60c3      	str	r3, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800153c:	2380      	movs	r3, #128	@ 0x80
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001542:	3b81      	subs	r3, #129	@ 0x81
 8001544:	3bff      	subs	r3, #255	@ 0xff
 8001546:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001548:	f006 ff40 	bl	80083cc <HAL_TIM_Base_Init>
 800154c:	2800      	cmp	r0, #0
 800154e:	d12a      	bne.n	80015a6 <MX_TIM3_Init+0x9e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001550:	2380      	movs	r3, #128	@ 0x80
 8001552:	015b      	lsls	r3, r3, #5
 8001554:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001556:	4819      	ldr	r0, [pc, #100]	@ (80015bc <MX_TIM3_Init+0xb4>)
 8001558:	a90a      	add	r1, sp, #40	@ 0x28
 800155a:	f006 fbc9 	bl	8007cf0 <HAL_TIM_ConfigClockSource>
 800155e:	2800      	cmp	r0, #0
 8001560:	d123      	bne.n	80015aa <MX_TIM3_Init+0xa2>
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001562:	4816      	ldr	r0, [pc, #88]	@ (80015bc <MX_TIM3_Init+0xb4>)
 8001564:	f006 ff6e 	bl	8008444 <HAL_TIM_OC_Init>
 8001568:	2800      	cmp	r0, #0
 800156a:	d120      	bne.n	80015ae <MX_TIM3_Init+0xa6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156c:	2300      	movs	r3, #0
 800156e:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001570:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001572:	4812      	ldr	r0, [pc, #72]	@ (80015bc <MX_TIM3_Init+0xb4>)
 8001574:	a907      	add	r1, sp, #28
 8001576:	f007 f819 	bl	80085ac <HAL_TIMEx_MasterConfigSynchronization>
 800157a:	2800      	cmp	r0, #0
 800157c:	d119      	bne.n	80015b2 <MX_TIM3_Init+0xaa>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800157e:	2300      	movs	r3, #0
 8001580:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8001582:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001584:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001586:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001588:	480c      	ldr	r0, [pc, #48]	@ (80015bc <MX_TIM3_Init+0xb4>)
 800158a:	2200      	movs	r2, #0
 800158c:	4669      	mov	r1, sp
 800158e:	f006 f9e3 	bl	8007958 <HAL_TIM_OC_ConfigChannel>
 8001592:	2800      	cmp	r0, #0
 8001594:	d10f      	bne.n	80015b6 <MX_TIM3_Init+0xae>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001596:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <MX_TIM3_Init+0xb4>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	6993      	ldr	r3, [r2, #24]
 800159c:	2108      	movs	r1, #8
 800159e:	438b      	bics	r3, r1
 80015a0:	6193      	str	r3, [r2, #24]
}
 80015a2:	b00f      	add	sp, #60	@ 0x3c
 80015a4:	bd00      	pop	{pc}
 80015a6:	b672      	cpsid	i
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <MX_TIM3_Init+0xa0>
 80015aa:	b672      	cpsid	i
 80015ac:	e7fe      	b.n	80015ac <MX_TIM3_Init+0xa4>
 80015ae:	b672      	cpsid	i
 80015b0:	e7fe      	b.n	80015b0 <MX_TIM3_Init+0xa8>
 80015b2:	b672      	cpsid	i
 80015b4:	e7fe      	b.n	80015b4 <MX_TIM3_Init+0xac>
 80015b6:	b672      	cpsid	i
 80015b8:	e7fe      	b.n	80015b8 <MX_TIM3_Init+0xb0>
 80015ba:	46c0      	nop			@ (mov r8, r8)
 80015bc:	20000804 	.word	0x20000804
 80015c0:	40000400 	.word	0x40000400
 80015c4:	00007fff 	.word	0x00007fff
 80015c8:	00000fff 	.word	0x00000fff

080015cc <MX_TIM1_Init>:
{
 80015cc:	b500      	push	{lr}
 80015ce:	b09d      	sub	sp, #116	@ 0x74
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d0:	2210      	movs	r2, #16
 80015d2:	2100      	movs	r1, #0
 80015d4:	a818      	add	r0, sp, #96	@ 0x60
 80015d6:	f007 ff0e 	bl	80093f6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015da:	220c      	movs	r2, #12
 80015dc:	2100      	movs	r1, #0
 80015de:	a815      	add	r0, sp, #84	@ 0x54
 80015e0:	f007 ff09 	bl	80093f6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e4:	221c      	movs	r2, #28
 80015e6:	2100      	movs	r1, #0
 80015e8:	a80e      	add	r0, sp, #56	@ 0x38
 80015ea:	f007 ff04 	bl	80093f6 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015ee:	2234      	movs	r2, #52	@ 0x34
 80015f0:	2100      	movs	r1, #0
 80015f2:	a801      	add	r0, sp, #4
 80015f4:	f007 feff 	bl	80093f6 <memset>
  htim1.Instance = TIM1;
 80015f8:	483a      	ldr	r0, [pc, #232]	@ (80016e4 <MX_TIM1_Init+0x118>)
 80015fa:	4b3b      	ldr	r3, [pc, #236]	@ (80016e8 <MX_TIM1_Init+0x11c>)
 80015fc:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001602:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 1024 - 1;
 8001604:	4a39      	ldr	r2, [pc, #228]	@ (80016ec <MX_TIM1_Init+0x120>)
 8001606:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001608:	2280      	movs	r2, #128	@ 0x80
 800160a:	0052      	lsls	r2, r2, #1
 800160c:	6102      	str	r2, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800160e:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001610:	3380      	adds	r3, #128	@ 0x80
 8001612:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001614:	f006 feda 	bl	80083cc <HAL_TIM_Base_Init>
 8001618:	2800      	cmp	r0, #0
 800161a:	d155      	bne.n	80016c8 <MX_TIM1_Init+0xfc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161c:	2380      	movs	r3, #128	@ 0x80
 800161e:	015b      	lsls	r3, r3, #5
 8001620:	9318      	str	r3, [sp, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001622:	4830      	ldr	r0, [pc, #192]	@ (80016e4 <MX_TIM1_Init+0x118>)
 8001624:	a918      	add	r1, sp, #96	@ 0x60
 8001626:	f006 fb63 	bl	8007cf0 <HAL_TIM_ConfigClockSource>
 800162a:	2800      	cmp	r0, #0
 800162c:	d14e      	bne.n	80016cc <MX_TIM1_Init+0x100>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800162e:	482d      	ldr	r0, [pc, #180]	@ (80016e4 <MX_TIM1_Init+0x118>)
 8001630:	f006 ff44 	bl	80084bc <HAL_TIM_PWM_Init>
 8001634:	2800      	cmp	r0, #0
 8001636:	d14b      	bne.n	80016d0 <MX_TIM1_Init+0x104>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001638:	2300      	movs	r3, #0
 800163a:	9315      	str	r3, [sp, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800163c:	9316      	str	r3, [sp, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163e:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001640:	4828      	ldr	r0, [pc, #160]	@ (80016e4 <MX_TIM1_Init+0x118>)
 8001642:	a915      	add	r1, sp, #84	@ 0x54
 8001644:	f006 ffb2 	bl	80085ac <HAL_TIMEx_MasterConfigSynchronization>
 8001648:	2800      	cmp	r0, #0
 800164a:	d143      	bne.n	80016d4 <MX_TIM1_Init+0x108>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800164c:	2360      	movs	r3, #96	@ 0x60
 800164e:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001654:	9310      	str	r3, [sp, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001656:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001658:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800165a:	9313      	str	r3, [sp, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800165c:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800165e:	4821      	ldr	r0, [pc, #132]	@ (80016e4 <MX_TIM1_Init+0x118>)
 8001660:	2204      	movs	r2, #4
 8001662:	a90e      	add	r1, sp, #56	@ 0x38
 8001664:	f006 f9ae 	bl	80079c4 <HAL_TIM_PWM_ConfigChannel>
 8001668:	2800      	cmp	r0, #0
 800166a:	d135      	bne.n	80016d8 <MX_TIM1_Init+0x10c>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 800166c:	481d      	ldr	r0, [pc, #116]	@ (80016e4 <MX_TIM1_Init+0x118>)
 800166e:	6802      	ldr	r2, [r0, #0]
 8001670:	6993      	ldr	r3, [r2, #24]
 8001672:	491f      	ldr	r1, [pc, #124]	@ (80016f0 <MX_TIM1_Init+0x124>)
 8001674:	400b      	ands	r3, r1
 8001676:	6193      	str	r3, [r2, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001678:	220c      	movs	r2, #12
 800167a:	a90e      	add	r1, sp, #56	@ 0x38
 800167c:	f006 f9a2 	bl	80079c4 <HAL_TIM_PWM_ConfigChannel>
 8001680:	2800      	cmp	r0, #0
 8001682:	d12b      	bne.n	80016dc <MX_TIM1_Init+0x110>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8001684:	4817      	ldr	r0, [pc, #92]	@ (80016e4 <MX_TIM1_Init+0x118>)
 8001686:	6802      	ldr	r2, [r0, #0]
 8001688:	69d3      	ldr	r3, [r2, #28]
 800168a:	4919      	ldr	r1, [pc, #100]	@ (80016f0 <MX_TIM1_Init+0x124>)
 800168c:	400b      	ands	r3, r1
 800168e:	61d3      	str	r3, [r2, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001694:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001696:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001698:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800169a:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800169c:	2280      	movs	r2, #128	@ 0x80
 800169e:	0192      	lsls	r2, r2, #6
 80016a0:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016a2:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80016a4:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016a6:	9309      	str	r3, [sp, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016a8:	2280      	movs	r2, #128	@ 0x80
 80016aa:	0492      	lsls	r2, r2, #18
 80016ac:	920a      	str	r2, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016ae:	930b      	str	r3, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80016b0:	930c      	str	r3, [sp, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016b2:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016b4:	a901      	add	r1, sp, #4
 80016b6:	f006 ffb5 	bl	8008624 <HAL_TIMEx_ConfigBreakDeadTime>
 80016ba:	2800      	cmp	r0, #0
 80016bc:	d110      	bne.n	80016e0 <MX_TIM1_Init+0x114>
  HAL_TIM_MspPostInit(&htim1);
 80016be:	4809      	ldr	r0, [pc, #36]	@ (80016e4 <MX_TIM1_Init+0x118>)
 80016c0:	f003 f896 	bl	80047f0 <HAL_TIM_MspPostInit>
}
 80016c4:	b01d      	add	sp, #116	@ 0x74
 80016c6:	bd00      	pop	{pc}
 80016c8:	b672      	cpsid	i
  while (1)
 80016ca:	e7fe      	b.n	80016ca <MX_TIM1_Init+0xfe>
 80016cc:	b672      	cpsid	i
 80016ce:	e7fe      	b.n	80016ce <MX_TIM1_Init+0x102>
 80016d0:	b672      	cpsid	i
 80016d2:	e7fe      	b.n	80016d2 <MX_TIM1_Init+0x106>
 80016d4:	b672      	cpsid	i
 80016d6:	e7fe      	b.n	80016d6 <MX_TIM1_Init+0x10a>
 80016d8:	b672      	cpsid	i
 80016da:	e7fe      	b.n	80016da <MX_TIM1_Init+0x10e>
 80016dc:	b672      	cpsid	i
 80016de:	e7fe      	b.n	80016de <MX_TIM1_Init+0x112>
 80016e0:	b672      	cpsid	i
 80016e2:	e7fe      	b.n	80016e2 <MX_TIM1_Init+0x116>
 80016e4:	20000748 	.word	0x20000748
 80016e8:	40012c00 	.word	0x40012c00
 80016ec:	000003ff 	.word	0x000003ff
 80016f0:	fffff7ff 	.word	0xfffff7ff

080016f4 <MX_TIM17_Init>:
{
 80016f4:	b500      	push	{lr}
 80016f6:	b095      	sub	sp, #84	@ 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016f8:	221c      	movs	r2, #28
 80016fa:	2100      	movs	r1, #0
 80016fc:	a80d      	add	r0, sp, #52	@ 0x34
 80016fe:	f007 fe7a 	bl	80093f6 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001702:	2234      	movs	r2, #52	@ 0x34
 8001704:	2100      	movs	r1, #0
 8001706:	4668      	mov	r0, sp
 8001708:	f007 fe75 	bl	80093f6 <memset>
  htim17.Instance = TIM17;
 800170c:	4823      	ldr	r0, [pc, #140]	@ (800179c <MX_TIM17_Init+0xa8>)
 800170e:	4b24      	ldr	r3, [pc, #144]	@ (80017a0 <MX_TIM17_Init+0xac>)
 8001710:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 8001712:	4b24      	ldr	r3, [pc, #144]	@ (80017a4 <MX_TIM17_Init+0xb0>)
 8001714:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001716:	2300      	movs	r3, #0
 8001718:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 1024 - 1;
 800171a:	4a23      	ldr	r2, [pc, #140]	@ (80017a8 <MX_TIM17_Init+0xb4>)
 800171c:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800171e:	2280      	movs	r2, #128	@ 0x80
 8001720:	0092      	lsls	r2, r2, #2
 8001722:	6102      	str	r2, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 8001724:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001726:	3380      	adds	r3, #128	@ 0x80
 8001728:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800172a:	f006 fe4f 	bl	80083cc <HAL_TIM_Base_Init>
 800172e:	2800      	cmp	r0, #0
 8001730:	d12c      	bne.n	800178c <MX_TIM17_Init+0x98>
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001732:	481a      	ldr	r0, [pc, #104]	@ (800179c <MX_TIM17_Init+0xa8>)
 8001734:	f006 fe86 	bl	8008444 <HAL_TIM_OC_Init>
 8001738:	2800      	cmp	r0, #0
 800173a:	d129      	bne.n	8001790 <MX_TIM17_Init+0x9c>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800173c:	2300      	movs	r3, #0
 800173e:	930d      	str	r3, [sp, #52]	@ 0x34
  sConfigOC.Pulse = 512 - 1;
 8001740:	4a1a      	ldr	r2, [pc, #104]	@ (80017ac <MX_TIM17_Init+0xb8>)
 8001742:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001744:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001746:	9310      	str	r3, [sp, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001748:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800174a:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800174c:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800174e:	4813      	ldr	r0, [pc, #76]	@ (800179c <MX_TIM17_Init+0xa8>)
 8001750:	2200      	movs	r2, #0
 8001752:	a90d      	add	r1, sp, #52	@ 0x34
 8001754:	f006 f900 	bl	8007958 <HAL_TIM_OC_ConfigChannel>
 8001758:	2800      	cmp	r0, #0
 800175a:	d11b      	bne.n	8001794 <MX_TIM17_Init+0xa0>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 800175c:	480f      	ldr	r0, [pc, #60]	@ (800179c <MX_TIM17_Init+0xa8>)
 800175e:	6802      	ldr	r2, [r0, #0]
 8001760:	6993      	ldr	r3, [r2, #24]
 8001762:	2108      	movs	r1, #8
 8001764:	430b      	orrs	r3, r1
 8001766:	6193      	str	r3, [r2, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	9300      	str	r3, [sp, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800176c:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800176e:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001770:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001772:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001774:	2280      	movs	r2, #128	@ 0x80
 8001776:	0192      	lsls	r2, r2, #6
 8001778:	9205      	str	r2, [sp, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800177a:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800177c:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800177e:	4669      	mov	r1, sp
 8001780:	f006 ff50 	bl	8008624 <HAL_TIMEx_ConfigBreakDeadTime>
 8001784:	2800      	cmp	r0, #0
 8001786:	d107      	bne.n	8001798 <MX_TIM17_Init+0xa4>
}
 8001788:	b015      	add	sp, #84	@ 0x54
 800178a:	bd00      	pop	{pc}
 800178c:	b672      	cpsid	i
  while (1)
 800178e:	e7fe      	b.n	800178e <MX_TIM17_Init+0x9a>
 8001790:	b672      	cpsid	i
 8001792:	e7fe      	b.n	8001792 <MX_TIM17_Init+0x9e>
 8001794:	b672      	cpsid	i
 8001796:	e7fe      	b.n	8001796 <MX_TIM17_Init+0xa2>
 8001798:	b672      	cpsid	i
 800179a:	e7fe      	b.n	800179a <MX_TIM17_Init+0xa6>
 800179c:	20000a38 	.word	0x20000a38
 80017a0:	40014800 	.word	0x40014800
 80017a4:	00007fff 	.word	0x00007fff
 80017a8:	000003ff 	.word	0x000003ff
 80017ac:	000001ff 	.word	0x000001ff

080017b0 <MX_LPTIM1_Init>:
{
 80017b0:	b510      	push	{r4, lr}
  hlptim1.Instance = LPTIM1;
 80017b2:	4810      	ldr	r0, [pc, #64]	@ (80017f4 <MX_LPTIM1_Init+0x44>)
 80017b4:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <MX_LPTIM1_Init+0x48>)
 80017b6:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80017b8:	2300      	movs	r3, #0
 80017ba:	6043      	str	r3, [r0, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 80017bc:	22e0      	movs	r2, #224	@ 0xe0
 80017be:	0112      	lsls	r2, r2, #4
 80017c0:	6082      	str	r2, [r0, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80017c2:	4a0e      	ldr	r2, [pc, #56]	@ (80017fc <MX_LPTIM1_Init+0x4c>)
 80017c4:	6142      	str	r2, [r0, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80017c6:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 80017c8:	2280      	movs	r2, #128	@ 0x80
 80017ca:	03d2      	lsls	r2, r2, #15
 80017cc:	6242      	str	r2, [r0, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80017ce:	6283      	str	r3, [r0, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80017d0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80017d2:	6303      	str	r3, [r0, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80017d4:	f004 fd82 	bl	80062dc <HAL_LPTIM_Init>
 80017d8:	2800      	cmp	r0, #0
 80017da:	d108      	bne.n	80017ee <MX_LPTIM1_Init+0x3e>
  HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 2);
 80017dc:	2202      	movs	r2, #2
 80017de:	2102      	movs	r1, #2
 80017e0:	2011      	movs	r0, #17
 80017e2:	f004 f90f 	bl	8005a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80017e6:	2011      	movs	r0, #17
 80017e8:	f004 f93e 	bl	8005a68 <HAL_NVIC_EnableIRQ>
}
 80017ec:	bd10      	pop	{r4, pc}
 80017ee:	b672      	cpsid	i
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <MX_LPTIM1_Init+0x40>
 80017f2:	46c0      	nop			@ (mov r8, r8)
 80017f4:	20000568 	.word	0x20000568
 80017f8:	40007c00 	.word	0x40007c00
 80017fc:	0000ffff 	.word	0x0000ffff

08001800 <MX_TIM14_Init>:
{
 8001800:	b500      	push	{lr}
 8001802:	b089      	sub	sp, #36	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001804:	221c      	movs	r2, #28
 8001806:	2100      	movs	r1, #0
 8001808:	a801      	add	r0, sp, #4
 800180a:	f007 fdf4 	bl	80093f6 <memset>
  htim14.Instance = TIM14;
 800180e:	4817      	ldr	r0, [pc, #92]	@ (800186c <MX_TIM14_Init+0x6c>)
 8001810:	4b17      	ldr	r3, [pc, #92]	@ (8001870 <MX_TIM14_Init+0x70>)
 8001812:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = (512 * 64) - 1;
 8001814:	4b17      	ldr	r3, [pc, #92]	@ (8001874 <MX_TIM14_Init+0x74>)
 8001816:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001818:	2300      	movs	r3, #0
 800181a:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = led_blink_period;
 800181c:	4a16      	ldr	r2, [pc, #88]	@ (8001878 <MX_TIM14_Init+0x78>)
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001822:	2280      	movs	r2, #128	@ 0x80
 8001824:	0092      	lsls	r2, r2, #2
 8001826:	6102      	str	r2, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001828:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800182a:	f006 fdcf 	bl	80083cc <HAL_TIM_Base_Init>
 800182e:	2800      	cmp	r0, #0
 8001830:	d115      	bne.n	800185e <MX_TIM14_Init+0x5e>
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8001832:	480e      	ldr	r0, [pc, #56]	@ (800186c <MX_TIM14_Init+0x6c>)
 8001834:	f006 fe06 	bl	8008444 <HAL_TIM_OC_Init>
 8001838:	2800      	cmp	r0, #0
 800183a:	d112      	bne.n	8001862 <MX_TIM14_Init+0x62>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800183c:	2300      	movs	r3, #0
 800183e:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = led_blink_period - 1;
 8001840:	4a0d      	ldr	r2, [pc, #52]	@ (8001878 <MX_TIM14_Init+0x78>)
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	3a01      	subs	r2, #1
 8001846:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001848:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800184a:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800184c:	4807      	ldr	r0, [pc, #28]	@ (800186c <MX_TIM14_Init+0x6c>)
 800184e:	2200      	movs	r2, #0
 8001850:	a901      	add	r1, sp, #4
 8001852:	f006 f881 	bl	8007958 <HAL_TIM_OC_ConfigChannel>
 8001856:	2800      	cmp	r0, #0
 8001858:	d105      	bne.n	8001866 <MX_TIM14_Init+0x66>
}
 800185a:	b009      	add	sp, #36	@ 0x24
 800185c:	bd00      	pop	{pc}
 800185e:	b672      	cpsid	i
  while (1)
 8001860:	e7fe      	b.n	8001860 <MX_TIM14_Init+0x60>
 8001862:	b672      	cpsid	i
 8001864:	e7fe      	b.n	8001864 <MX_TIM14_Init+0x64>
 8001866:	b672      	cpsid	i
 8001868:	e7fe      	b.n	8001868 <MX_TIM14_Init+0x68>
 800186a:	46c0      	nop			@ (mov r8, r8)
 800186c:	20000af4 	.word	0x20000af4
 8001870:	40002000 	.word	0x40002000
 8001874:	00007fff 	.word	0x00007fff
 8001878:	20000020 	.word	0x20000020

0800187c <MX_USART2_UART_Init>:
{
 800187c:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800187e:	480b      	ldr	r0, [pc, #44]	@ (80018ac <MX_USART2_UART_Init+0x30>)
 8001880:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <MX_USART2_UART_Init+0x34>)
 8001882:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 31250;
 8001884:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <MX_USART2_UART_Init+0x38>)
 8001886:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001888:	2300      	movs	r3, #0
 800188a:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800188c:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800188e:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001890:	220c      	movs	r2, #12
 8001892:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001894:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001896:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001898:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800189a:	6243      	str	r3, [r0, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800189c:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800189e:	f007 fccf 	bl	8009240 <HAL_UART_Init>
 80018a2:	2800      	cmp	r0, #0
 80018a4:	d100      	bne.n	80018a8 <MX_USART2_UART_Init+0x2c>
}
 80018a6:	bd10      	pop	{r4, pc}
 80018a8:	b672      	cpsid	i
  while (1)
 80018aa:	e7fe      	b.n	80018aa <MX_USART2_UART_Init+0x2e>
 80018ac:	2000067c 	.word	0x2000067c
 80018b0:	40004400 	.word	0x40004400
 80018b4:	00007a12 	.word	0x00007a12

080018b8 <MX_DMA_Init>:
{
 80018b8:	b500      	push	{lr}
 80018ba:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018bc:	4a0d      	ldr	r2, [pc, #52]	@ (80018f4 <MX_DMA_Init+0x3c>)
 80018be:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 80018c0:	2301      	movs	r3, #1
 80018c2:	4319      	orrs	r1, r3
 80018c4:	6391      	str	r1, [r2, #56]	@ 0x38
 80018c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018c8:	4013      	ands	r3, r2
 80018ca:	9301      	str	r3, [sp, #4]
 80018cc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	2009      	movs	r0, #9
 80018d4:	f004 f896 	bl	8005a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018d8:	2009      	movs	r0, #9
 80018da:	f004 f8c5 	bl	8005a68 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 2);
 80018de:	2202      	movs	r2, #2
 80018e0:	2102      	movs	r1, #2
 80018e2:	200a      	movs	r0, #10
 80018e4:	f004 f88e 	bl	8005a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80018e8:	200a      	movs	r0, #10
 80018ea:	f004 f8bd 	bl	8005a68 <HAL_NVIC_EnableIRQ>
}
 80018ee:	b003      	add	sp, #12
 80018f0:	bd00      	pop	{pc}
 80018f2:	46c0      	nop			@ (mov r8, r8)
 80018f4:	40021000 	.word	0x40021000

080018f8 <MX_GPIO_Init>:
{
 80018f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fa:	46d6      	mov	lr, sl
 80018fc:	464f      	mov	r7, r9
 80018fe:	4646      	mov	r6, r8
 8001900:	b5c0      	push	{r6, r7, lr}
 8001902:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	2214      	movs	r2, #20
 8001906:	2100      	movs	r1, #0
 8001908:	a805      	add	r0, sp, #20
 800190a:	f007 fd74 	bl	80093f6 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800190e:	4b44      	ldr	r3, [pc, #272]	@ (8001a20 <MX_GPIO_Init+0x128>)
 8001910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001912:	2404      	movs	r4, #4
 8001914:	4322      	orrs	r2, r4
 8001916:	635a      	str	r2, [r3, #52]	@ 0x34
 8001918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800191a:	4022      	ands	r2, r4
 800191c:	9201      	str	r2, [sp, #4]
 800191e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001920:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001922:	2220      	movs	r2, #32
 8001924:	4311      	orrs	r1, r2
 8001926:	6359      	str	r1, [r3, #52]	@ 0x34
 8001928:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800192a:	400a      	ands	r2, r1
 800192c:	9202      	str	r2, [sp, #8]
 800192e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001930:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001932:	2501      	movs	r5, #1
 8001934:	432a      	orrs	r2, r5
 8001936:	635a      	str	r2, [r3, #52]	@ 0x34
 8001938:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800193a:	402a      	ands	r2, r5
 800193c:	9203      	str	r2, [sp, #12]
 800193e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001940:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001942:	2102      	movs	r1, #2
 8001944:	4688      	mov	r8, r1
 8001946:	430a      	orrs	r2, r1
 8001948:	635a      	str	r2, [r3, #52]	@ 0x34
 800194a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800194c:	400b      	ands	r3, r1
 800194e:	9304      	str	r3, [sp, #16]
 8001950:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, HACK_POT_LOW_Pin|SW_OUT_Pin, GPIO_PIN_RESET);
 8001952:	319e      	adds	r1, #158	@ 0x9e
 8001954:	26a0      	movs	r6, #160	@ 0xa0
 8001956:	05f6      	lsls	r6, r6, #23
 8001958:	2200      	movs	r2, #0
 800195a:	0089      	lsls	r1, r1, #2
 800195c:	0030      	movs	r0, r6
 800195e:	f004 fc77 	bl	8006250 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, HACK_POT_HIGH_Pin, GPIO_PIN_SET);
 8001962:	2180      	movs	r1, #128	@ 0x80
 8001964:	2201      	movs	r2, #1
 8001966:	0149      	lsls	r1, r1, #5
 8001968:	0030      	movs	r0, r6
 800196a:	f004 fc71 	bl	8006250 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800196e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a24 <MX_GPIO_Init+0x12c>)
 8001970:	469a      	mov	sl, r3
 8001972:	2200      	movs	r2, #0
 8001974:	2140      	movs	r1, #64	@ 0x40
 8001976:	0018      	movs	r0, r3
 8001978:	f004 fc6a 	bl	8006250 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MONITOR_2_Pin|MONITOR_Pin, GPIO_PIN_RESET);
 800197c:	4f2a      	ldr	r7, [pc, #168]	@ (8001a28 <MX_GPIO_Init+0x130>)
 800197e:	2200      	movs	r2, #0
 8001980:	2150      	movs	r1, #80	@ 0x50
 8001982:	0038      	movs	r0, r7
 8001984:	f004 fc64 	bl	8006250 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8001988:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800198a:	2388      	movs	r3, #136	@ 0x88
 800198c:	035b      	lsls	r3, r3, #13
 800198e:	4699      	mov	r9, r3
 8001990:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2400      	movs	r4, #0
 8001994:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8001996:	a905      	add	r1, sp, #20
 8001998:	4824      	ldr	r0, [pc, #144]	@ (8001a2c <MX_GPIO_Init+0x134>)
 800199a:	f004 fb67 	bl	800606c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = HACK_POT_LOW_Pin|SW_OUT_Pin|HACK_POT_HIGH_Pin;
 800199e:	2394      	movs	r3, #148	@ 0x94
 80019a0:	015b      	lsls	r3, r3, #5
 80019a2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019aa:	a905      	add	r1, sp, #20
 80019ac:	0030      	movs	r0, r6
 80019ae:	f004 fb5d 	bl	800606c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin;
 80019b2:	2340      	movs	r3, #64	@ 0x40
 80019b4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80019bc:	a905      	add	r1, sp, #20
 80019be:	4650      	mov	r0, sl
 80019c0:	f004 fb54 	bl	800606c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_IN_Pin;
 80019c4:	2380      	movs	r3, #128	@ 0x80
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019ca:	2384      	movs	r3, #132	@ 0x84
 80019cc:	039b      	lsls	r3, r3, #14
 80019ce:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d0:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 80019d2:	a905      	add	r1, sp, #20
 80019d4:	0030      	movs	r0, r6
 80019d6:	f004 fb49 	bl	800606c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MONITOR_2_Pin|MONITOR_Pin;
 80019da:	2350      	movs	r3, #80	@ 0x50
 80019dc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e4:	a905      	add	r1, sp, #20
 80019e6:	0038      	movs	r0, r7
 80019e8:	f004 fb40 	bl	800606c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019f2:	464b      	mov	r3, r9
 80019f4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019f6:	4643      	mov	r3, r8
 80019f8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80019fa:	a905      	add	r1, sp, #20
 80019fc:	0038      	movs	r0, r7
 80019fe:	f004 fb35 	bl	800606c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 2);
 8001a02:	2202      	movs	r2, #2
 8001a04:	2102      	movs	r1, #2
 8001a06:	2007      	movs	r0, #7
 8001a08:	f003 fffc 	bl	8005a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001a0c:	2007      	movs	r0, #7
 8001a0e:	f004 f82b 	bl	8005a68 <HAL_NVIC_EnableIRQ>
}
 8001a12:	b00a      	add	sp, #40	@ 0x28
 8001a14:	bce0      	pop	{r5, r6, r7}
 8001a16:	46ba      	mov	sl, r7
 8001a18:	46b1      	mov	r9, r6
 8001a1a:	46a8      	mov	r8, r5
 8001a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a1e:	46c0      	nop			@ (mov r8, r8)
 8001a20:	40021000 	.word	0x40021000
 8001a24:	50000800 	.word	0x50000800
 8001a28:	50000400 	.word	0x50000400
 8001a2c:	50001400 	.word	0x50001400

08001a30 <Error_Handler>:
 8001a30:	b672      	cpsid	i
  while (1)
 8001a32:	e7fe      	b.n	8001a32 <Error_Handler+0x2>

08001a34 <System_Init>:
  {

  }
}

void System_Init(void){
 8001a34:	b510      	push	{r4, lr}
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a36:	f003 fa33 	bl	8004ea0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8001a3a:	f7ff fbe9 	bl	8001210 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a3e:	f7ff ff5b 	bl	80018f8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001a42:	f7ff ff39 	bl	80018b8 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001a46:	f7ff ff19 	bl	800187c <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8001a4a:	f7ff fc23 	bl	8001294 <MX_ADC1_Init>
	MX_TIM16_Init(); //Frequency Gen.
 8001a4e:	f7ff fca7 	bl	80013a0 <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement is TIM2_ch1
 8001a52:	f7ff fcfd 	bl	8001450 <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse is TIM3_ch1
 8001a56:	f7ff fd57 	bl	8001508 <MX_TIM3_Init>
	MX_TIM1_Init(); //PWM Gen. Main/Secondary Oscillator on ch2/ch4
 8001a5a:	f7ff fdb7 	bl	80015cc <MX_TIM1_Init>
	MX_TIM17_Init();
 8001a5e:	f7ff fe49 	bl	80016f4 <MX_TIM17_Init>
	MX_TIM14_Init();
 8001a62:	f7ff fecd 	bl	8001800 <MX_TIM14_Init>
	//MX_IWDG_Init(); fucks up stuff - to be config'd
	MX_LPTIM1_Init(); //Tap Tempo checking/debouncing timer
 8001a66:	f7ff fea3 	bl	80017b0 <MX_LPTIM1_Init>

	//Calibrate ADC - DO NOT MOVE TO BEFORE OTHER CONFIG ABOVE
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001a6a:	4c1c      	ldr	r4, [pc, #112]	@ (8001adc <System_Init+0xa8>)
 8001a6c:	0020      	movs	r0, r4
 8001a6e:	f003 feef 	bl	8005850 <HAL_ADCEx_Calibration_Start>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM16_callback);
 8001a72:	4a1b      	ldr	r2, [pc, #108]	@ (8001ae0 <System_Init+0xac>)
 8001a74:	481b      	ldr	r0, [pc, #108]	@ (8001ae4 <System_Init+0xb0>)
 8001a76:	210e      	movs	r1, #14
 8001a78:	f005 fdee 	bl	8007658 <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 8001a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae8 <System_Init+0xb4>)
 8001a7e:	2100      	movs	r1, #0
 8001a80:	0020      	movs	r0, r4
 8001a82:	f003 fbcb 	bl	800521c <HAL_ADC_RegisterCallback>

	//Set custom callback function for I/P capture input falling edge event
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, &TIM2_ch1_IP_capture_callback);
 8001a86:	4a19      	ldr	r2, [pc, #100]	@ (8001aec <System_Init+0xb8>)
 8001a88:	4c19      	ldr	r4, [pc, #100]	@ (8001af0 <System_Init+0xbc>)
 8001a8a:	2112      	movs	r1, #18
 8001a8c:	0020      	movs	r0, r4
 8001a8e:	f005 fde3 	bl	8007658 <HAL_TIM_RegisterCallback>

	//Set custom callback function for I/P capture timer overflow (Update event/overflow)
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM2_ch1_overflow_callback);
 8001a92:	4a18      	ldr	r2, [pc, #96]	@ (8001af4 <System_Init+0xc0>)
 8001a94:	210e      	movs	r1, #14
 8001a96:	0020      	movs	r0, r4
 8001a98:	f005 fdde 	bl	8007658 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM3_ch1 (Measurement Re-Elapse) (CCR match)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM3_ch1_IP_capture_measurement_reelapse_callback);
 8001a9c:	4a16      	ldr	r2, [pc, #88]	@ (8001af8 <System_Init+0xc4>)
 8001a9e:	4817      	ldr	r0, [pc, #92]	@ (8001afc <System_Init+0xc8>)
 8001aa0:	2114      	movs	r1, #20
 8001aa2:	f005 fdd9 	bl	8007658 <HAL_TIM_RegisterCallback>

	//Set custom callback function for DMA TX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID, &UART2_TX_transfer_complete_callback);
 8001aa6:	4a16      	ldr	r2, [pc, #88]	@ (8001b00 <System_Init+0xcc>)
 8001aa8:	4c16      	ldr	r4, [pc, #88]	@ (8001b04 <System_Init+0xd0>)
 8001aaa:	2101      	movs	r1, #1
 8001aac:	0020      	movs	r0, r4
 8001aae:	f006 ff0f 	bl	80088d0 <HAL_UART_RegisterCallback>

	//Set custom callback function for DMA RX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, &UART2_RX_transfer_complete_callback);
 8001ab2:	4a15      	ldr	r2, [pc, #84]	@ (8001b08 <System_Init+0xd4>)
 8001ab4:	2103      	movs	r1, #3
 8001ab6:	0020      	movs	r0, r4
 8001ab8:	f006 ff0a 	bl	80088d0 <HAL_UART_RegisterCallback>

	//Set custom callback for LPTIM1 (Tap Tempo SW state check)
	HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, &LPTIM1_callback);
 8001abc:	4a13      	ldr	r2, [pc, #76]	@ (8001b0c <System_Init+0xd8>)
 8001abe:	4814      	ldr	r0, [pc, #80]	@ (8001b10 <System_Init+0xdc>)
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	f004 fce9 	bl	8006498 <HAL_LPTIM_RegisterCallback>

	//Set custom callback function for TIM17
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback);
 8001ac6:	4a13      	ldr	r2, [pc, #76]	@ (8001b14 <System_Init+0xe0>)
 8001ac8:	4813      	ldr	r0, [pc, #76]	@ (8001b18 <System_Init+0xe4>)
 8001aca:	2114      	movs	r1, #20
 8001acc:	f005 fdc4 	bl	8007658 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM14
	HAL_TIM_RegisterCallback(&htim14, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM14_callback);
 8001ad0:	4a12      	ldr	r2, [pc, #72]	@ (8001b1c <System_Init+0xe8>)
 8001ad2:	4813      	ldr	r0, [pc, #76]	@ (8001b20 <System_Init+0xec>)
 8001ad4:	2114      	movs	r1, #20
 8001ad6:	f005 fdbf 	bl	8007658 <HAL_TIM_RegisterCallback>
}
 8001ada:	bd10      	pop	{r4, pc}
 8001adc:	20000c0c 	.word	0x20000c0c
 8001ae0:	080037b1 	.word	0x080037b1
 8001ae4:	2000097c 	.word	0x2000097c
 8001ae8:	08003809 	.word	0x08003809
 8001aec:	0800388d 	.word	0x0800388d
 8001af0:	200008c0 	.word	0x200008c0
 8001af4:	08003975 	.word	0x08003975
 8001af8:	08003a3d 	.word	0x08003a3d
 8001afc:	20000804 	.word	0x20000804
 8001b00:	08003b41 	.word	0x08003b41
 8001b04:	2000067c 	.word	0x2000067c
 8001b08:	08001b25 	.word	0x08001b25
 8001b0c:	08002cc5 	.word	0x08002cc5
 8001b10:	20000568 	.word	0x20000568
 8001b14:	08003d19 	.word	0x08003d19
 8001b18:	20000a38 	.word	0x20000a38
 8001b1c:	080033f5 	.word	0x080033f5
 8001b20:	20000af4 	.word	0x20000af4

08001b24 <UART2_RX_transfer_complete_callback>:
void UART2_TX_transfer_complete_callback(UART_HandleTypeDef *huart){

	//UART_DMA_TX_is_complete = YES;
}

void __attribute__((optimize("O0")))UART2_RX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

	if(Is_System_Real_Time_Status_Byte(rx_buffer) == YES){
 8001b2c:	4bbe      	ldr	r3, [pc, #760]	@ (8001e28 <UART2_RX_transfer_complete_callback+0x304>)
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f7ff f9e2 	bl	8000ef8 <Is_System_Real_Time_Status_Byte>
 8001b34:	0003      	movs	r3, r0
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d001      	beq.n	8001b3e <UART2_RX_transfer_complete_callback+0x1a>
 8001b3a:	f000 fc0c 	bl	8002356 <UART2_RX_transfer_complete_callback+0x832>

		if(Get_Status_Bit(&statuses, Start_Required_Before_Sync_Mode) == YES){
 8001b3e:	4bbb      	ldr	r3, [pc, #748]	@ (8001e2c <UART2_RX_transfer_complete_callback+0x308>)
 8001b40:	2180      	movs	r1, #128	@ 0x80
 8001b42:	0018      	movs	r0, r3
 8001b44:	f003 f94c 	bl	8004de0 <Get_Status_Bit>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d001      	beq.n	8001b52 <UART2_RX_transfer_complete_callback+0x2e>
 8001b4e:	f001 f895 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

			if((MIDI_CLK_fsm == NOT_COMPILING) && (IP_CAP_fsm.current_state == IDLE)
 8001b52:	4bb7      	ldr	r3, [pc, #732]	@ (8001e30 <UART2_RX_transfer_complete_callback+0x30c>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d159      	bne.n	8001c10 <UART2_RX_transfer_complete_callback+0xec>
 8001b5c:	4bb5      	ldr	r3, [pc, #724]	@ (8001e34 <UART2_RX_transfer_complete_callback+0x310>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d154      	bne.n	8001c10 <UART2_RX_transfer_complete_callback+0xec>
					&& ((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8001b66:	4bb4      	ldr	r3, [pc, #720]	@ (8001e38 <UART2_RX_transfer_complete_callback+0x314>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d013      	beq.n	8001b98 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == MANUAL_MODE)
 8001b70:	4bb1      	ldr	r3, [pc, #708]	@ (8001e38 <UART2_RX_transfer_complete_callback+0x314>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d00e      	beq.n	8001b98 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE)
 8001b7a:	4baf      	ldr	r3, [pc, #700]	@ (8001e38 <UART2_RX_transfer_complete_callback+0x314>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b06      	cmp	r3, #6
 8001b82:	d009      	beq.n	8001b98 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == PC_MODE)
 8001b84:	4bac      	ldr	r3, [pc, #688]	@ (8001e38 <UART2_RX_transfer_complete_callback+0x314>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d004      	beq.n	8001b98 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == CC_MODE))){
 8001b8e:	4baa      	ldr	r3, [pc, #680]	@ (8001e38 <UART2_RX_transfer_complete_callback+0x314>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d13b      	bne.n	8001c10 <UART2_RX_transfer_complete_callback+0xec>

				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8001b98:	4ba3      	ldr	r3, [pc, #652]	@ (8001e28 <UART2_RX_transfer_complete_callback+0x304>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2bfa      	cmp	r3, #250	@ 0xfa
 8001ba0:	d10b      	bne.n	8001bba <UART2_RX_transfer_complete_callback+0x96>

					speed_fsm.prev_state = speed_fsm.current_state;
 8001ba2:	4ba5      	ldr	r3, [pc, #660]	@ (8001e38 <UART2_RX_transfer_complete_callback+0x314>)
 8001ba4:	4aa4      	ldr	r2, [pc, #656]	@ (8001e38 <UART2_RX_transfer_complete_callback+0x314>)
 8001ba6:	7812      	ldrb	r2, [r2, #0]
 8001ba8:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A0_MODE;
 8001baa:	4ba3      	ldr	r3, [pc, #652]	@ (8001e38 <UART2_RX_transfer_complete_callback+0x314>)
 8001bac:	2209      	movs	r2, #9
 8001bae:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 8001bb0:	4ba2      	ldr	r3, [pc, #648]	@ (8001e3c <UART2_RX_transfer_complete_callback+0x318>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8001bb6:	f001 f85e 	bl	8002c76 <UART2_RX_transfer_complete_callback+0x1152>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001bba:	4b9b      	ldr	r3, [pc, #620]	@ (8001e28 <UART2_RX_transfer_complete_callback+0x304>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2bf8      	cmp	r3, #248	@ 0xf8
 8001bc2:	d001      	beq.n	8001bc8 <UART2_RX_transfer_complete_callback+0xa4>
 8001bc4:	f001 f857 	bl	8002c76 <UART2_RX_transfer_complete_callback+0x1152>

					speed_fsm.prev_state = speed_fsm.current_state;
 8001bc8:	4b9b      	ldr	r3, [pc, #620]	@ (8001e38 <UART2_RX_transfer_complete_callback+0x314>)
 8001bca:	4a9b      	ldr	r2, [pc, #620]	@ (8001e38 <UART2_RX_transfer_complete_callback+0x314>)
 8001bcc:	7812      	ldrb	r2, [r2, #0]
 8001bce:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B0_MODE;
 8001bd0:	4b99      	ldr	r3, [pc, #612]	@ (8001e38 <UART2_RX_transfer_complete_callback+0x314>)
 8001bd2:	220b      	movs	r2, #11
 8001bd4:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 8001bd6:	4b99      	ldr	r3, [pc, #612]	@ (8001e3c <UART2_RX_transfer_complete_callback+0x318>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8001bdc:	2380      	movs	r3, #128	@ 0x80
 8001bde:	0099      	lsls	r1, r3, #2
 8001be0:	23a0      	movs	r3, #160	@ 0xa0
 8001be2:	05db      	lsls	r3, r3, #23
 8001be4:	2200      	movs	r2, #0
 8001be6:	0018      	movs	r0, r3
 8001be8:	f004 fb32 	bl	8006250 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001bec:	4b94      	ldr	r3, [pc, #592]	@ (8001e40 <UART2_RX_transfer_complete_callback+0x31c>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	2140      	movs	r1, #64	@ 0x40
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f004 fb2c 	bl	8006250 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8001bf8:	4b8d      	ldr	r3, [pc, #564]	@ (8001e30 <UART2_RX_transfer_complete_callback+0x30c>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8001bfe:	4b8f      	ldr	r3, [pc, #572]	@ (8001e3c <UART2_RX_transfer_complete_callback+0x318>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	3301      	adds	r3, #1
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	4b8c      	ldr	r3, [pc, #560]	@ (8001e3c <UART2_RX_transfer_complete_callback+0x318>)
 8001c0a:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8001c0c:	f001 f833 	bl	8002c76 <UART2_RX_transfer_complete_callback+0x1152>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A0_MODE){
 8001c10:	4b89      	ldr	r3, [pc, #548]	@ (8001e38 <UART2_RX_transfer_complete_callback+0x314>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b09      	cmp	r3, #9
 8001c18:	d123      	bne.n	8001c62 <UART2_RX_transfer_complete_callback+0x13e>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001c1a:	4b83      	ldr	r3, [pc, #524]	@ (8001e28 <UART2_RX_transfer_complete_callback+0x304>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2bf8      	cmp	r3, #248	@ 0xf8
 8001c22:	d001      	beq.n	8001c28 <UART2_RX_transfer_complete_callback+0x104>
 8001c24:	f001 f82a 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8001c28:	2380      	movs	r3, #128	@ 0x80
 8001c2a:	0099      	lsls	r1, r3, #2
 8001c2c:	23a0      	movs	r3, #160	@ 0xa0
 8001c2e:	05db      	lsls	r3, r3, #23
 8001c30:	2200      	movs	r2, #0
 8001c32:	0018      	movs	r0, r3
 8001c34:	f004 fb0c 	bl	8006250 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001c38:	4b81      	ldr	r3, [pc, #516]	@ (8001e40 <UART2_RX_transfer_complete_callback+0x31c>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	2140      	movs	r1, #64	@ 0x40
 8001c3e:	0018      	movs	r0, r3
 8001c40:	f004 fb06 	bl	8006250 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8001c44:	4b7a      	ldr	r3, [pc, #488]	@ (8001e30 <UART2_RX_transfer_complete_callback+0x30c>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8001c4a:	4b7c      	ldr	r3, [pc, #496]	@ (8001e3c <UART2_RX_transfer_complete_callback+0x318>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	3301      	adds	r3, #1
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	4b79      	ldr	r3, [pc, #484]	@ (8001e3c <UART2_RX_transfer_complete_callback+0x318>)
 8001c56:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8001c58:	4b77      	ldr	r3, [pc, #476]	@ (8001e38 <UART2_RX_transfer_complete_callback+0x314>)
 8001c5a:	220a      	movs	r2, #10
 8001c5c:	701a      	strb	r2, [r3, #0]
 8001c5e:	f001 f80d 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A1_MODE){
 8001c62:	4b75      	ldr	r3, [pc, #468]	@ (8001e38 <UART2_RX_transfer_complete_callback+0x314>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b0a      	cmp	r3, #10
 8001c6a:	d145      	bne.n	8001cf8 <UART2_RX_transfer_complete_callback+0x1d4>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001c6c:	4b6e      	ldr	r3, [pc, #440]	@ (8001e28 <UART2_RX_transfer_complete_callback+0x304>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2bf8      	cmp	r3, #248	@ 0xf8
 8001c74:	d001      	beq.n	8001c7a <UART2_RX_transfer_complete_callback+0x156>
 8001c76:	f001 f801 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8001c7a:	4b6d      	ldr	r3, [pc, #436]	@ (8001e30 <UART2_RX_transfer_complete_callback+0x30c>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8001c80:	4b6e      	ldr	r3, [pc, #440]	@ (8001e3c <UART2_RX_transfer_complete_callback+0x318>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	3301      	adds	r3, #1
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4b6c      	ldr	r3, [pc, #432]	@ (8001e3c <UART2_RX_transfer_complete_callback+0x318>)
 8001c8c:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8001c8e:	4b6b      	ldr	r3, [pc, #428]	@ (8001e3c <UART2_RX_transfer_complete_callback+0x318>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b0b      	cmp	r3, #11
 8001c96:	d80f      	bhi.n	8001cb8 <UART2_RX_transfer_complete_callback+0x194>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8001c98:	2380      	movs	r3, #128	@ 0x80
 8001c9a:	0099      	lsls	r1, r3, #2
 8001c9c:	23a0      	movs	r3, #160	@ 0xa0
 8001c9e:	05db      	lsls	r3, r3, #23
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f004 fad4 	bl	8006250 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001ca8:	4b65      	ldr	r3, [pc, #404]	@ (8001e40 <UART2_RX_transfer_complete_callback+0x31c>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	2140      	movs	r1, #64	@ 0x40
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f004 face 	bl	8006250 <HAL_GPIO_WritePin>
 8001cb4:	f000 ffe2 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8001cb8:	4b60      	ldr	r3, [pc, #384]	@ (8001e3c <UART2_RX_transfer_complete_callback+0x318>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b18      	cmp	r3, #24
 8001cc0:	d80f      	bhi.n	8001ce2 <UART2_RX_transfer_complete_callback+0x1be>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8001cc2:	2380      	movs	r3, #128	@ 0x80
 8001cc4:	0099      	lsls	r1, r3, #2
 8001cc6:	23a0      	movs	r3, #160	@ 0xa0
 8001cc8:	05db      	lsls	r3, r3, #23
 8001cca:	2201      	movs	r2, #1
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f004 fabf 	bl	8006250 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8001cd2:	4b5b      	ldr	r3, [pc, #364]	@ (8001e40 <UART2_RX_transfer_complete_callback+0x31c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2140      	movs	r1, #64	@ 0x40
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f004 fab9 	bl	8006250 <HAL_GPIO_WritePin>
 8001cde:	f000 ffcd 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8001ce2:	4b55      	ldr	r3, [pc, #340]	@ (8001e38 <UART2_RX_transfer_complete_callback+0x314>)
 8001ce4:	220a      	movs	r2, #10
 8001ce6:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8001ce8:	4b53      	ldr	r3, [pc, #332]	@ (8001e38 <UART2_RX_transfer_complete_callback+0x314>)
 8001cea:	2208      	movs	r2, #8
 8001cec:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8001cee:	4b53      	ldr	r3, [pc, #332]	@ (8001e3c <UART2_RX_transfer_complete_callback+0x318>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	701a      	strb	r2, [r3, #0]
 8001cf4:	f000 ffc2 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE){
 8001cf8:	4b4f      	ldr	r3, [pc, #316]	@ (8001e38 <UART2_RX_transfer_complete_callback+0x314>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b0b      	cmp	r3, #11
 8001d00:	d142      	bne.n	8001d88 <UART2_RX_transfer_complete_callback+0x264>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001d02:	4b49      	ldr	r3, [pc, #292]	@ (8001e28 <UART2_RX_transfer_complete_callback+0x304>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2bf8      	cmp	r3, #248	@ 0xf8
 8001d0a:	d001      	beq.n	8001d10 <UART2_RX_transfer_complete_callback+0x1ec>
 8001d0c:	f000 ffb6 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8001d10:	4b47      	ldr	r3, [pc, #284]	@ (8001e30 <UART2_RX_transfer_complete_callback+0x30c>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8001d16:	4b49      	ldr	r3, [pc, #292]	@ (8001e3c <UART2_RX_transfer_complete_callback+0x318>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	4b46      	ldr	r3, [pc, #280]	@ (8001e3c <UART2_RX_transfer_complete_callback+0x318>)
 8001d22:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8001d24:	4b45      	ldr	r3, [pc, #276]	@ (8001e3c <UART2_RX_transfer_complete_callback+0x318>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b0b      	cmp	r3, #11
 8001d2c:	d80f      	bhi.n	8001d4e <UART2_RX_transfer_complete_callback+0x22a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8001d2e:	2380      	movs	r3, #128	@ 0x80
 8001d30:	0099      	lsls	r1, r3, #2
 8001d32:	23a0      	movs	r3, #160	@ 0xa0
 8001d34:	05db      	lsls	r3, r3, #23
 8001d36:	2200      	movs	r2, #0
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f004 fa89 	bl	8006250 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001d3e:	4b40      	ldr	r3, [pc, #256]	@ (8001e40 <UART2_RX_transfer_complete_callback+0x31c>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	2140      	movs	r1, #64	@ 0x40
 8001d44:	0018      	movs	r0, r3
 8001d46:	f004 fa83 	bl	8006250 <HAL_GPIO_WritePin>
 8001d4a:	f000 ff97 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8001d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e3c <UART2_RX_transfer_complete_callback+0x318>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b18      	cmp	r3, #24
 8001d56:	d80f      	bhi.n	8001d78 <UART2_RX_transfer_complete_callback+0x254>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8001d58:	2380      	movs	r3, #128	@ 0x80
 8001d5a:	0099      	lsls	r1, r3, #2
 8001d5c:	23a0      	movs	r3, #160	@ 0xa0
 8001d5e:	05db      	lsls	r3, r3, #23
 8001d60:	2201      	movs	r2, #1
 8001d62:	0018      	movs	r0, r3
 8001d64:	f004 fa74 	bl	8006250 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8001d68:	4b35      	ldr	r3, [pc, #212]	@ (8001e40 <UART2_RX_transfer_complete_callback+0x31c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2140      	movs	r1, #64	@ 0x40
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f004 fa6e 	bl	8006250 <HAL_GPIO_WritePin>
 8001d74:	f000 ff82 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8001d78:	4b30      	ldr	r3, [pc, #192]	@ (8001e3c <UART2_RX_transfer_complete_callback+0x318>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B1_MODE;
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e38 <UART2_RX_transfer_complete_callback+0x314>)
 8001d80:	220c      	movs	r2, #12
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	f000 ff7a 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE){
 8001d88:	4b2b      	ldr	r3, [pc, #172]	@ (8001e38 <UART2_RX_transfer_complete_callback+0x314>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b0c      	cmp	r3, #12
 8001d90:	d158      	bne.n	8001e44 <UART2_RX_transfer_complete_callback+0x320>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001d92:	4b25      	ldr	r3, [pc, #148]	@ (8001e28 <UART2_RX_transfer_complete_callback+0x304>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2bf8      	cmp	r3, #248	@ 0xf8
 8001d9a:	d138      	bne.n	8001e0e <UART2_RX_transfer_complete_callback+0x2ea>

					MIDI_CLK_fsm = COMPILING; //just in case
 8001d9c:	4b24      	ldr	r3, [pc, #144]	@ (8001e30 <UART2_RX_transfer_complete_callback+0x30c>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8001da2:	4b26      	ldr	r3, [pc, #152]	@ (8001e3c <UART2_RX_transfer_complete_callback+0x318>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	3301      	adds	r3, #1
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	4b23      	ldr	r3, [pc, #140]	@ (8001e3c <UART2_RX_transfer_complete_callback+0x318>)
 8001dae:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8001db0:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <UART2_RX_transfer_complete_callback+0x318>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b0b      	cmp	r3, #11
 8001db8:	d80f      	bhi.n	8001dda <UART2_RX_transfer_complete_callback+0x2b6>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8001dba:	2380      	movs	r3, #128	@ 0x80
 8001dbc:	0099      	lsls	r1, r3, #2
 8001dbe:	23a0      	movs	r3, #160	@ 0xa0
 8001dc0:	05db      	lsls	r3, r3, #23
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f004 fa43 	bl	8006250 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001dca:	4b1d      	ldr	r3, [pc, #116]	@ (8001e40 <UART2_RX_transfer_complete_callback+0x31c>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	2140      	movs	r1, #64	@ 0x40
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f004 fa3d 	bl	8006250 <HAL_GPIO_WritePin>
 8001dd6:	f000 ff51 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8001dda:	4b18      	ldr	r3, [pc, #96]	@ (8001e3c <UART2_RX_transfer_complete_callback+0x318>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b18      	cmp	r3, #24
 8001de2:	d80f      	bhi.n	8001e04 <UART2_RX_transfer_complete_callback+0x2e0>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8001de4:	2380      	movs	r3, #128	@ 0x80
 8001de6:	0099      	lsls	r1, r3, #2
 8001de8:	23a0      	movs	r3, #160	@ 0xa0
 8001dea:	05db      	lsls	r3, r3, #23
 8001dec:	2201      	movs	r2, #1
 8001dee:	0018      	movs	r0, r3
 8001df0:	f004 fa2e 	bl	8006250 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8001df4:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <UART2_RX_transfer_complete_callback+0x31c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	2140      	movs	r1, #64	@ 0x40
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f004 fa28 	bl	8006250 <HAL_GPIO_WritePin>
 8001e00:	f000 ff3c 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8001e04:	4b0d      	ldr	r3, [pc, #52]	@ (8001e3c <UART2_RX_transfer_complete_callback+0x318>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
 8001e0a:	f000 ff37 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8001e0e:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <UART2_RX_transfer_complete_callback+0x304>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2bfa      	cmp	r3, #250	@ 0xfa
 8001e16:	d001      	beq.n	8001e1c <UART2_RX_transfer_complete_callback+0x2f8>
 8001e18:	f000 ff30 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <UART2_RX_transfer_complete_callback+0x314>)
 8001e1e:	220d      	movs	r2, #13
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	f000 ff2b 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
 8001e26:	46c0      	nop			@ (mov r8, r8)
 8001e28:	2000054c 	.word	0x2000054c
 8001e2c:	20000cbc 	.word	0x20000cbc
 8001e30:	20000d6c 	.word	0x20000d6c
 8001e34:	20000434 	.word	0x20000434
 8001e38:	20000448 	.word	0x20000448
 8001e3c:	20000ca8 	.word	0x20000ca8
 8001e40:	50000800 	.word	0x50000800
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE){
 8001e44:	4bdc      	ldr	r3, [pc, #880]	@ (80021b8 <UART2_RX_transfer_complete_callback+0x694>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b0d      	cmp	r3, #13
 8001e4c:	d160      	bne.n	8001f10 <UART2_RX_transfer_complete_callback+0x3ec>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001e4e:	4bdb      	ldr	r3, [pc, #876]	@ (80021bc <UART2_RX_transfer_complete_callback+0x698>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2bf8      	cmp	r3, #248	@ 0xf8
 8001e56:	d001      	beq.n	8001e5c <UART2_RX_transfer_complete_callback+0x338>
 8001e58:	f000 ff10 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8001e5c:	4bd8      	ldr	r3, [pc, #864]	@ (80021c0 <UART2_RX_transfer_complete_callback+0x69c>)
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f002 f8e4 	bl	800402c <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8001e64:	2380      	movs	r3, #128	@ 0x80
 8001e66:	0099      	lsls	r1, r3, #2
 8001e68:	23a0      	movs	r3, #160	@ 0xa0
 8001e6a:	05db      	lsls	r3, r3, #23
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f004 f9ee 	bl	8006250 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8001e74:	4bd3      	ldr	r3, [pc, #844]	@ (80021c4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	2140      	movs	r1, #64	@ 0x40
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f004 f9e8 	bl	8006250 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8001e80:	2380      	movs	r3, #128	@ 0x80
 8001e82:	0099      	lsls	r1, r3, #2
 8001e84:	23a0      	movs	r3, #160	@ 0xa0
 8001e86:	05db      	lsls	r3, r3, #23
 8001e88:	2200      	movs	r2, #0
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f004 f9e0 	bl	8006250 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001e90:	4bcc      	ldr	r3, [pc, #816]	@ (80021c4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	2140      	movs	r1, #64	@ 0x40
 8001e96:	0018      	movs	r0, r3
 8001e98:	f004 f9da 	bl	8006250 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING; //just in case
 8001e9c:	4bca      	ldr	r3, [pc, #808]	@ (80021c8 <UART2_RX_transfer_complete_callback+0x6a4>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 1;
 8001ea2:	4bca      	ldr	r3, [pc, #808]	@ (80021cc <UART2_RX_transfer_complete_callback+0x6a8>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8001ea8:	4bc3      	ldr	r3, [pc, #780]	@ (80021b8 <UART2_RX_transfer_complete_callback+0x694>)
 8001eaa:	220d      	movs	r2, #13
 8001eac:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8001eae:	4bc2      	ldr	r3, [pc, #776]	@ (80021b8 <UART2_RX_transfer_complete_callback+0x694>)
 8001eb0:	2208      	movs	r2, #8
 8001eb2:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8001eb4:	4bc6      	ldr	r3, [pc, #792]	@ (80021d0 <UART2_RX_transfer_complete_callback+0x6ac>)
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f002 ff62 	bl	8004d82 <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8001ebe:	4bc5      	ldr	r3, [pc, #788]	@ (80021d4 <UART2_RX_transfer_complete_callback+0x6b0>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8001ec4:	4ac4      	ldr	r2, [pc, #784]	@ (80021d8 <UART2_RX_transfer_complete_callback+0x6b4>)
 8001ec6:	4bbe      	ldr	r3, [pc, #760]	@ (80021c0 <UART2_RX_transfer_complete_callback+0x69c>)
 8001ec8:	0011      	movs	r1, r2
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f001 ff90 	bl	8003df0 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8001ed0:	4ac2      	ldr	r2, [pc, #776]	@ (80021dc <UART2_RX_transfer_complete_callback+0x6b8>)
 8001ed2:	4bbb      	ldr	r3, [pc, #748]	@ (80021c0 <UART2_RX_transfer_complete_callback+0x69c>)
 8001ed4:	0011      	movs	r1, r2
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f001 ff8a 	bl	8003df0 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8001edc:	4bc0      	ldr	r3, [pc, #768]	@ (80021e0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8001ede:	2108      	movs	r1, #8
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f002 ff83 	bl	8004dec <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8001ee6:	4bbd      	ldr	r3, [pc, #756]	@ (80021dc <UART2_RX_transfer_complete_callback+0x6b8>)
 8001ee8:	2100      	movs	r1, #0
 8001eea:	0018      	movs	r0, r3
 8001eec:	f002 f8b4 	bl	8004058 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8001ef0:	4abc      	ldr	r2, [pc, #752]	@ (80021e4 <UART2_RX_transfer_complete_callback+0x6c0>)
 8001ef2:	4bba      	ldr	r3, [pc, #744]	@ (80021dc <UART2_RX_transfer_complete_callback+0x6b8>)
 8001ef4:	0011      	movs	r1, r2
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f002 f94a 	bl	8004190 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8001efc:	4bba      	ldr	r3, [pc, #744]	@ (80021e8 <UART2_RX_transfer_complete_callback+0x6c4>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	001a      	movs	r2, r3
 8001f02:	49ba      	ldr	r1, [pc, #744]	@ (80021ec <UART2_RX_transfer_complete_callback+0x6c8>)
 8001f04:	4bba      	ldr	r3, [pc, #744]	@ (80021f0 <UART2_RX_transfer_complete_callback+0x6cc>)
 8001f06:	0018      	movs	r0, r3
 8001f08:	f003 fbba 	bl	8005680 <HAL_ADC_Start_DMA>
 8001f0c:	f000 feb6 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == NO)){
 8001f10:	4ba9      	ldr	r3, [pc, #676]	@ (80021b8 <UART2_RX_transfer_complete_callback+0x694>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d146      	bne.n	8001fa8 <UART2_RX_transfer_complete_callback+0x484>
 8001f1a:	4bb1      	ldr	r3, [pc, #708]	@ (80021e0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8001f1c:	2120      	movs	r1, #32
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f002 ff5e 	bl	8004de0 <Get_Status_Bit>
 8001f24:	1e03      	subs	r3, r0, #0
 8001f26:	d13f      	bne.n	8001fa8 <UART2_RX_transfer_complete_callback+0x484>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001f28:	4ba4      	ldr	r3, [pc, #656]	@ (80021bc <UART2_RX_transfer_complete_callback+0x698>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2bf8      	cmp	r3, #248	@ 0xf8
 8001f30:	d001      	beq.n	8001f36 <UART2_RX_transfer_complete_callback+0x412>
 8001f32:	f000 fea3 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8001f36:	4ba4      	ldr	r3, [pc, #656]	@ (80021c8 <UART2_RX_transfer_complete_callback+0x6a4>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8001f3c:	4ba3      	ldr	r3, [pc, #652]	@ (80021cc <UART2_RX_transfer_complete_callback+0x6a8>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	3301      	adds	r3, #1
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4ba1      	ldr	r3, [pc, #644]	@ (80021cc <UART2_RX_transfer_complete_callback+0x6a8>)
 8001f48:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8001f4a:	4ba0      	ldr	r3, [pc, #640]	@ (80021cc <UART2_RX_transfer_complete_callback+0x6a8>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b0b      	cmp	r3, #11
 8001f52:	d80f      	bhi.n	8001f74 <UART2_RX_transfer_complete_callback+0x450>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8001f54:	2380      	movs	r3, #128	@ 0x80
 8001f56:	0099      	lsls	r1, r3, #2
 8001f58:	23a0      	movs	r3, #160	@ 0xa0
 8001f5a:	05db      	lsls	r3, r3, #23
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f004 f976 	bl	8006250 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001f64:	4b97      	ldr	r3, [pc, #604]	@ (80021c4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	2140      	movs	r1, #64	@ 0x40
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f004 f970 	bl	8006250 <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001f70:	f000 fe84 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8001f74:	4b95      	ldr	r3, [pc, #596]	@ (80021cc <UART2_RX_transfer_complete_callback+0x6a8>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b18      	cmp	r3, #24
 8001f7c:	d80f      	bhi.n	8001f9e <UART2_RX_transfer_complete_callback+0x47a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8001f7e:	2380      	movs	r3, #128	@ 0x80
 8001f80:	0099      	lsls	r1, r3, #2
 8001f82:	23a0      	movs	r3, #160	@ 0xa0
 8001f84:	05db      	lsls	r3, r3, #23
 8001f86:	2201      	movs	r2, #1
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f004 f961 	bl	8006250 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8001f8e:	4b8d      	ldr	r3, [pc, #564]	@ (80021c4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	2140      	movs	r1, #64	@ 0x40
 8001f94:	0018      	movs	r0, r3
 8001f96:	f004 f95b 	bl	8006250 <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001f9a:	f000 fe6f 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8001f9e:	4b8b      	ldr	r3, [pc, #556]	@ (80021cc <UART2_RX_transfer_complete_callback+0x6a8>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001fa4:	f000 fe6a 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8001fa8:	4b83      	ldr	r3, [pc, #524]	@ (80021b8 <UART2_RX_transfer_complete_callback+0x694>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d14c      	bne.n	800204c <UART2_RX_transfer_complete_callback+0x528>
 8001fb2:	4b88      	ldr	r3, [pc, #544]	@ (80021d4 <UART2_RX_transfer_complete_callback+0x6b0>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d147      	bne.n	800204c <UART2_RX_transfer_complete_callback+0x528>
 8001fbc:	4b88      	ldr	r3, [pc, #544]	@ (80021e0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8001fbe:	2120      	movs	r1, #32
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f002 ff0d 	bl	8004de0 <Get_Status_Bit>
 8001fc6:	0003      	movs	r3, r0
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d13f      	bne.n	800204c <UART2_RX_transfer_complete_callback+0x528>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8001fcc:	4b7b      	ldr	r3, [pc, #492]	@ (80021bc <UART2_RX_transfer_complete_callback+0x698>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2bf8      	cmp	r3, #248	@ 0xf8
 8001fd4:	d11e      	bne.n	8002014 <UART2_RX_transfer_complete_callback+0x4f0>

					MIDI_CLK_tag = 0; //just in case
 8001fd6:	4b7d      	ldr	r3, [pc, #500]	@ (80021cc <UART2_RX_transfer_complete_callback+0x6a8>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8001fdc:	4b7b      	ldr	r3, [pc, #492]	@ (80021cc <UART2_RX_transfer_complete_callback+0x6a8>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4b79      	ldr	r3, [pc, #484]	@ (80021cc <UART2_RX_transfer_complete_callback+0x6a8>)
 8001fe8:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_fsm = COMPILING;
 8001fea:	4b77      	ldr	r3, [pc, #476]	@ (80021c8 <UART2_RX_transfer_complete_callback+0x6a4>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B0_MODE;
 8001ff0:	4b71      	ldr	r3, [pc, #452]	@ (80021b8 <UART2_RX_transfer_complete_callback+0x694>)
 8001ff2:	2210      	movs	r2, #16
 8001ff4:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8001ff6:	4b70      	ldr	r3, [pc, #448]	@ (80021b8 <UART2_RX_transfer_complete_callback+0x694>)
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8001ffc:	4b78      	ldr	r3, [pc, #480]	@ (80021e0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8001ffe:	2120      	movs	r1, #32
 8002000:	0018      	movs	r0, r3
 8002002:	f002 fef7 	bl	8004df4 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002006:	4b76      	ldr	r3, [pc, #472]	@ (80021e0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002008:	2140      	movs	r1, #64	@ 0x40
 800200a:	0018      	movs	r0, r3
 800200c:	f002 fef2 	bl	8004df4 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002010:	f000 fe33 	bl	8002c7a <UART2_RX_transfer_complete_callback+0x1156>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002014:	4b69      	ldr	r3, [pc, #420]	@ (80021bc <UART2_RX_transfer_complete_callback+0x698>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2bfa      	cmp	r3, #250	@ 0xfa
 800201c:	d001      	beq.n	8002022 <UART2_RX_transfer_complete_callback+0x4fe>
 800201e:	f000 fe2c 	bl	8002c7a <UART2_RX_transfer_complete_callback+0x1156>

					MIDI_CLK_tag = 0; //just in case
 8002022:	4b6a      	ldr	r3, [pc, #424]	@ (80021cc <UART2_RX_transfer_complete_callback+0x6a8>)
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A0_MODE;
 8002028:	4b63      	ldr	r3, [pc, #396]	@ (80021b8 <UART2_RX_transfer_complete_callback+0x694>)
 800202a:	220e      	movs	r2, #14
 800202c:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 800202e:	4b62      	ldr	r3, [pc, #392]	@ (80021b8 <UART2_RX_transfer_complete_callback+0x694>)
 8002030:	2208      	movs	r2, #8
 8002032:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002034:	4b6a      	ldr	r3, [pc, #424]	@ (80021e0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002036:	2120      	movs	r1, #32
 8002038:	0018      	movs	r0, r3
 800203a:	f002 fedb 	bl	8004df4 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800203e:	4b68      	ldr	r3, [pc, #416]	@ (80021e0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002040:	2140      	movs	r1, #64	@ 0x40
 8002042:	0018      	movs	r0, r3
 8002044:	f002 fed6 	bl	8004df4 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002048:	f000 fe17 	bl	8002c7a <UART2_RX_transfer_complete_callback+0x1156>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A0_MODE){
 800204c:	4b5a      	ldr	r3, [pc, #360]	@ (80021b8 <UART2_RX_transfer_complete_callback+0x694>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b0e      	cmp	r3, #14
 8002054:	d123      	bne.n	800209e <UART2_RX_transfer_complete_callback+0x57a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002056:	4b59      	ldr	r3, [pc, #356]	@ (80021bc <UART2_RX_transfer_complete_callback+0x698>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2bf8      	cmp	r3, #248	@ 0xf8
 800205e:	d001      	beq.n	8002064 <UART2_RX_transfer_complete_callback+0x540>
 8002060:	f000 fe0c 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002064:	2380      	movs	r3, #128	@ 0x80
 8002066:	0099      	lsls	r1, r3, #2
 8002068:	23a0      	movs	r3, #160	@ 0xa0
 800206a:	05db      	lsls	r3, r3, #23
 800206c:	2200      	movs	r2, #0
 800206e:	0018      	movs	r0, r3
 8002070:	f004 f8ee 	bl	8006250 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002074:	4b53      	ldr	r3, [pc, #332]	@ (80021c4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002076:	2201      	movs	r2, #1
 8002078:	2140      	movs	r1, #64	@ 0x40
 800207a:	0018      	movs	r0, r3
 800207c:	f004 f8e8 	bl	8006250 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002080:	4b51      	ldr	r3, [pc, #324]	@ (80021c8 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002086:	4b51      	ldr	r3, [pc, #324]	@ (80021cc <UART2_RX_transfer_complete_callback+0x6a8>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	3301      	adds	r3, #1
 800208e:	b2da      	uxtb	r2, r3
 8002090:	4b4e      	ldr	r3, [pc, #312]	@ (80021cc <UART2_RX_transfer_complete_callback+0x6a8>)
 8002092:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002094:	4b48      	ldr	r3, [pc, #288]	@ (80021b8 <UART2_RX_transfer_complete_callback+0x694>)
 8002096:	220f      	movs	r2, #15
 8002098:	701a      	strb	r2, [r3, #0]
 800209a:	f000 fdef 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A1_MODE){
 800209e:	4b46      	ldr	r3, [pc, #280]	@ (80021b8 <UART2_RX_transfer_complete_callback+0x694>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b0f      	cmp	r3, #15
 80020a6:	d142      	bne.n	800212e <UART2_RX_transfer_complete_callback+0x60a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80020a8:	4b44      	ldr	r3, [pc, #272]	@ (80021bc <UART2_RX_transfer_complete_callback+0x698>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2bf8      	cmp	r3, #248	@ 0xf8
 80020b0:	d001      	beq.n	80020b6 <UART2_RX_transfer_complete_callback+0x592>
 80020b2:	f000 fde3 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_tag++;
 80020b6:	4b45      	ldr	r3, [pc, #276]	@ (80021cc <UART2_RX_transfer_complete_callback+0x6a8>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	3301      	adds	r3, #1
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	4b42      	ldr	r3, [pc, #264]	@ (80021cc <UART2_RX_transfer_complete_callback+0x6a8>)
 80020c2:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 80020c4:	4b41      	ldr	r3, [pc, #260]	@ (80021cc <UART2_RX_transfer_complete_callback+0x6a8>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b0b      	cmp	r3, #11
 80020cc:	d80f      	bhi.n	80020ee <UART2_RX_transfer_complete_callback+0x5ca>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80020ce:	2380      	movs	r3, #128	@ 0x80
 80020d0:	0099      	lsls	r1, r3, #2
 80020d2:	23a0      	movs	r3, #160	@ 0xa0
 80020d4:	05db      	lsls	r3, r3, #23
 80020d6:	2200      	movs	r2, #0
 80020d8:	0018      	movs	r0, r3
 80020da:	f004 f8b9 	bl	8006250 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80020de:	4b39      	ldr	r3, [pc, #228]	@ (80021c4 <UART2_RX_transfer_complete_callback+0x6a0>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	2140      	movs	r1, #64	@ 0x40
 80020e4:	0018      	movs	r0, r3
 80020e6:	f004 f8b3 	bl	8006250 <HAL_GPIO_WritePin>
 80020ea:	f000 fdc7 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 80020ee:	4b37      	ldr	r3, [pc, #220]	@ (80021cc <UART2_RX_transfer_complete_callback+0x6a8>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b18      	cmp	r3, #24
 80020f6:	d80f      	bhi.n	8002118 <UART2_RX_transfer_complete_callback+0x5f4>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80020f8:	2380      	movs	r3, #128	@ 0x80
 80020fa:	0099      	lsls	r1, r3, #2
 80020fc:	23a0      	movs	r3, #160	@ 0xa0
 80020fe:	05db      	lsls	r3, r3, #23
 8002100:	2201      	movs	r2, #1
 8002102:	0018      	movs	r0, r3
 8002104:	f004 f8a4 	bl	8006250 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002108:	4b2e      	ldr	r3, [pc, #184]	@ (80021c4 <UART2_RX_transfer_complete_callback+0x6a0>)
 800210a:	2200      	movs	r2, #0
 800210c:	2140      	movs	r1, #64	@ 0x40
 800210e:	0018      	movs	r0, r3
 8002110:	f004 f89e 	bl	8006250 <HAL_GPIO_WritePin>
 8002114:	f000 fdb2 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002118:	4b27      	ldr	r3, [pc, #156]	@ (80021b8 <UART2_RX_transfer_complete_callback+0x694>)
 800211a:	220f      	movs	r2, #15
 800211c:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 800211e:	4b26      	ldr	r3, [pc, #152]	@ (80021b8 <UART2_RX_transfer_complete_callback+0x694>)
 8002120:	2208      	movs	r2, #8
 8002122:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8002124:	4b29      	ldr	r3, [pc, #164]	@ (80021cc <UART2_RX_transfer_complete_callback+0x6a8>)
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	f000 fda7 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE){
 800212e:	4b22      	ldr	r3, [pc, #136]	@ (80021b8 <UART2_RX_transfer_complete_callback+0x694>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b10      	cmp	r3, #16
 8002136:	d15d      	bne.n	80021f4 <UART2_RX_transfer_complete_callback+0x6d0>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002138:	4b20      	ldr	r3, [pc, #128]	@ (80021bc <UART2_RX_transfer_complete_callback+0x698>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2bf8      	cmp	r3, #248	@ 0xf8
 8002140:	d001      	beq.n	8002146 <UART2_RX_transfer_complete_callback+0x622>
 8002142:	f000 fd9b 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

					//when sftwre timer times out the midi clk tag is reset to 0
					MIDI_CLK_tag++;
 8002146:	4b21      	ldr	r3, [pc, #132]	@ (80021cc <UART2_RX_transfer_complete_callback+0x6a8>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	3301      	adds	r3, #1
 800214e:	b2da      	uxtb	r2, r3
 8002150:	4b1e      	ldr	r3, [pc, #120]	@ (80021cc <UART2_RX_transfer_complete_callback+0x6a8>)
 8002152:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002154:	4b1d      	ldr	r3, [pc, #116]	@ (80021cc <UART2_RX_transfer_complete_callback+0x6a8>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b0b      	cmp	r3, #11
 800215c:	d80f      	bhi.n	800217e <UART2_RX_transfer_complete_callback+0x65a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800215e:	2380      	movs	r3, #128	@ 0x80
 8002160:	0099      	lsls	r1, r3, #2
 8002162:	23a0      	movs	r3, #160	@ 0xa0
 8002164:	05db      	lsls	r3, r3, #23
 8002166:	2200      	movs	r2, #0
 8002168:	0018      	movs	r0, r3
 800216a:	f004 f871 	bl	8006250 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800216e:	4b15      	ldr	r3, [pc, #84]	@ (80021c4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002170:	2201      	movs	r2, #1
 8002172:	2140      	movs	r1, #64	@ 0x40
 8002174:	0018      	movs	r0, r3
 8002176:	f004 f86b 	bl	8006250 <HAL_GPIO_WritePin>
 800217a:	f000 fd7f 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 800217e:	4b13      	ldr	r3, [pc, #76]	@ (80021cc <UART2_RX_transfer_complete_callback+0x6a8>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b18      	cmp	r3, #24
 8002186:	d80f      	bhi.n	80021a8 <UART2_RX_transfer_complete_callback+0x684>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002188:	2380      	movs	r3, #128	@ 0x80
 800218a:	0099      	lsls	r1, r3, #2
 800218c:	23a0      	movs	r3, #160	@ 0xa0
 800218e:	05db      	lsls	r3, r3, #23
 8002190:	2201      	movs	r2, #1
 8002192:	0018      	movs	r0, r3
 8002194:	f004 f85c 	bl	8006250 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002198:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <UART2_RX_transfer_complete_callback+0x6a0>)
 800219a:	2200      	movs	r2, #0
 800219c:	2140      	movs	r1, #64	@ 0x40
 800219e:	0018      	movs	r0, r3
 80021a0:	f004 f856 	bl	8006250 <HAL_GPIO_WritePin>
 80021a4:	f000 fd6a 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B1_MODE;
 80021a8:	4b03      	ldr	r3, [pc, #12]	@ (80021b8 <UART2_RX_transfer_complete_callback+0x694>)
 80021aa:	2211      	movs	r2, #17
 80021ac:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						MIDI_CLK_tag = 1;
 80021ae:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <UART2_RX_transfer_complete_callback+0x6a8>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	701a      	strb	r2, [r3, #0]
 80021b4:	f000 fd62 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
 80021b8:	20000448 	.word	0x20000448
 80021bc:	2000054c 	.word	0x2000054c
 80021c0:	20000ce8 	.word	0x20000ce8
 80021c4:	50000800 	.word	0x50000800
 80021c8:	20000d6c 	.word	0x20000d6c
 80021cc:	20000ca8 	.word	0x20000ca8
 80021d0:	20000804 	.word	0x20000804
 80021d4:	20000434 	.word	0x20000434
 80021d8:	20000cc0 	.word	0x20000cc0
 80021dc:	20000d38 	.word	0x20000d38
 80021e0:	20000cbc 	.word	0x20000cbc
 80021e4:	20000028 	.word	0x20000028
 80021e8:	080094d4 	.word	0x080094d4
 80021ec:	20000d60 	.word	0x20000d60
 80021f0:	20000c0c 	.word	0x20000c0c
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE){
 80021f4:	4bed      	ldr	r3, [pc, #948]	@ (80025ac <UART2_RX_transfer_complete_callback+0xa88>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b11      	cmp	r3, #17
 80021fc:	d146      	bne.n	800228c <UART2_RX_transfer_complete_callback+0x768>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80021fe:	4bec      	ldr	r3, [pc, #944]	@ (80025b0 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2bf8      	cmp	r3, #248	@ 0xf8
 8002206:	d135      	bne.n	8002274 <UART2_RX_transfer_complete_callback+0x750>

					MIDI_CLK_tag++;
 8002208:	4bea      	ldr	r3, [pc, #936]	@ (80025b4 <UART2_RX_transfer_complete_callback+0xa90>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	3301      	adds	r3, #1
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4be8      	ldr	r3, [pc, #928]	@ (80025b4 <UART2_RX_transfer_complete_callback+0xa90>)
 8002214:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002216:	4be7      	ldr	r3, [pc, #924]	@ (80025b4 <UART2_RX_transfer_complete_callback+0xa90>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b0b      	cmp	r3, #11
 800221e:	d80f      	bhi.n	8002240 <UART2_RX_transfer_complete_callback+0x71c>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002220:	2380      	movs	r3, #128	@ 0x80
 8002222:	0099      	lsls	r1, r3, #2
 8002224:	23a0      	movs	r3, #160	@ 0xa0
 8002226:	05db      	lsls	r3, r3, #23
 8002228:	2200      	movs	r2, #0
 800222a:	0018      	movs	r0, r3
 800222c:	f004 f810 	bl	8006250 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002230:	4be1      	ldr	r3, [pc, #900]	@ (80025b8 <UART2_RX_transfer_complete_callback+0xa94>)
 8002232:	2201      	movs	r2, #1
 8002234:	2140      	movs	r1, #64	@ 0x40
 8002236:	0018      	movs	r0, r3
 8002238:	f004 f80a 	bl	8006250 <HAL_GPIO_WritePin>
 800223c:	f000 fd1e 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002240:	4bdc      	ldr	r3, [pc, #880]	@ (80025b4 <UART2_RX_transfer_complete_callback+0xa90>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b18      	cmp	r3, #24
 8002248:	d80f      	bhi.n	800226a <UART2_RX_transfer_complete_callback+0x746>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 800224a:	2380      	movs	r3, #128	@ 0x80
 800224c:	0099      	lsls	r1, r3, #2
 800224e:	23a0      	movs	r3, #160	@ 0xa0
 8002250:	05db      	lsls	r3, r3, #23
 8002252:	2201      	movs	r2, #1
 8002254:	0018      	movs	r0, r3
 8002256:	f003 fffb 	bl	8006250 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800225a:	4bd7      	ldr	r3, [pc, #860]	@ (80025b8 <UART2_RX_transfer_complete_callback+0xa94>)
 800225c:	2200      	movs	r2, #0
 800225e:	2140      	movs	r1, #64	@ 0x40
 8002260:	0018      	movs	r0, r3
 8002262:	f003 fff5 	bl	8006250 <HAL_GPIO_WritePin>
 8002266:	f000 fd09 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 800226a:	4bd2      	ldr	r3, [pc, #840]	@ (80025b4 <UART2_RX_transfer_complete_callback+0xa90>)
 800226c:	2201      	movs	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]
 8002270:	f000 fd04 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002274:	4bce      	ldr	r3, [pc, #824]	@ (80025b0 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2bfa      	cmp	r3, #250	@ 0xfa
 800227c:	d001      	beq.n	8002282 <UART2_RX_transfer_complete_callback+0x75e>
 800227e:	f000 fcfd 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 8002282:	4bca      	ldr	r3, [pc, #808]	@ (80025ac <UART2_RX_transfer_complete_callback+0xa88>)
 8002284:	2212      	movs	r2, #18
 8002286:	701a      	strb	r2, [r3, #0]
 8002288:	f000 fcf8 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE){
 800228c:	4bc7      	ldr	r3, [pc, #796]	@ (80025ac <UART2_RX_transfer_complete_callback+0xa88>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b12      	cmp	r3, #18
 8002294:	d001      	beq.n	800229a <UART2_RX_transfer_complete_callback+0x776>
 8002296:	f000 fcf1 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800229a:	4bc5      	ldr	r3, [pc, #788]	@ (80025b0 <UART2_RX_transfer_complete_callback+0xa8c>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2bf8      	cmp	r3, #248	@ 0xf8
 80022a2:	d001      	beq.n	80022a8 <UART2_RX_transfer_complete_callback+0x784>
 80022a4:	f000 fcea 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 80022a8:	4bc4      	ldr	r3, [pc, #784]	@ (80025bc <UART2_RX_transfer_complete_callback+0xa98>)
 80022aa:	0018      	movs	r0, r3
 80022ac:	f001 febe 	bl	800402c <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80022b0:	2380      	movs	r3, #128	@ 0x80
 80022b2:	0099      	lsls	r1, r3, #2
 80022b4:	23a0      	movs	r3, #160	@ 0xa0
 80022b6:	05db      	lsls	r3, r3, #23
 80022b8:	2201      	movs	r2, #1
 80022ba:	0018      	movs	r0, r3
 80022bc:	f003 ffc8 	bl	8006250 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80022c0:	4bbd      	ldr	r3, [pc, #756]	@ (80025b8 <UART2_RX_transfer_complete_callback+0xa94>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	2140      	movs	r1, #64	@ 0x40
 80022c6:	0018      	movs	r0, r3
 80022c8:	f003 ffc2 	bl	8006250 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80022cc:	2380      	movs	r3, #128	@ 0x80
 80022ce:	0099      	lsls	r1, r3, #2
 80022d0:	23a0      	movs	r3, #160	@ 0xa0
 80022d2:	05db      	lsls	r3, r3, #23
 80022d4:	2200      	movs	r2, #0
 80022d6:	0018      	movs	r0, r3
 80022d8:	f003 ffba 	bl	8006250 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80022dc:	4bb6      	ldr	r3, [pc, #728]	@ (80025b8 <UART2_RX_transfer_complete_callback+0xa94>)
 80022de:	2201      	movs	r2, #1
 80022e0:	2140      	movs	r1, #64	@ 0x40
 80022e2:	0018      	movs	r0, r3
 80022e4:	f003 ffb4 	bl	8006250 <HAL_GPIO_WritePin>

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 80022e8:	4bb0      	ldr	r3, [pc, #704]	@ (80025ac <UART2_RX_transfer_complete_callback+0xa88>)
 80022ea:	2212      	movs	r2, #18
 80022ec:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 80022ee:	4baf      	ldr	r3, [pc, #700]	@ (80025ac <UART2_RX_transfer_complete_callback+0xa88>)
 80022f0:	2208      	movs	r2, #8
 80022f2:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 1;
 80022f4:	4baf      	ldr	r3, [pc, #700]	@ (80025b4 <UART2_RX_transfer_complete_callback+0xa90>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 80022fa:	4bb1      	ldr	r3, [pc, #708]	@ (80025c0 <UART2_RX_transfer_complete_callback+0xa9c>)
 80022fc:	2100      	movs	r1, #0
 80022fe:	0018      	movs	r0, r3
 8002300:	f002 fd3f 	bl	8004d82 <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8002304:	4baf      	ldr	r3, [pc, #700]	@ (80025c4 <UART2_RX_transfer_complete_callback+0xaa0>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 800230a:	4aaf      	ldr	r2, [pc, #700]	@ (80025c8 <UART2_RX_transfer_complete_callback+0xaa4>)
 800230c:	4bab      	ldr	r3, [pc, #684]	@ (80025bc <UART2_RX_transfer_complete_callback+0xa98>)
 800230e:	0011      	movs	r1, r2
 8002310:	0018      	movs	r0, r3
 8002312:	f001 fd6d 	bl	8003df0 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8002316:	4aad      	ldr	r2, [pc, #692]	@ (80025cc <UART2_RX_transfer_complete_callback+0xaa8>)
 8002318:	4ba8      	ldr	r3, [pc, #672]	@ (80025bc <UART2_RX_transfer_complete_callback+0xa98>)
 800231a:	0011      	movs	r1, r2
 800231c:	0018      	movs	r0, r3
 800231e:	f001 fd67 	bl	8003df0 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8002322:	4bab      	ldr	r3, [pc, #684]	@ (80025d0 <UART2_RX_transfer_complete_callback+0xaac>)
 8002324:	2108      	movs	r1, #8
 8002326:	0018      	movs	r0, r3
 8002328:	f002 fd60 	bl	8004dec <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 800232c:	4ba7      	ldr	r3, [pc, #668]	@ (80025cc <UART2_RX_transfer_complete_callback+0xaa8>)
 800232e:	2100      	movs	r1, #0
 8002330:	0018      	movs	r0, r3
 8002332:	f001 fe91 	bl	8004058 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002336:	4aa7      	ldr	r2, [pc, #668]	@ (80025d4 <UART2_RX_transfer_complete_callback+0xab0>)
 8002338:	4ba4      	ldr	r3, [pc, #656]	@ (80025cc <UART2_RX_transfer_complete_callback+0xaa8>)
 800233a:	0011      	movs	r1, r2
 800233c:	0018      	movs	r0, r3
 800233e:	f001 ff27 	bl	8004190 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002342:	4ba5      	ldr	r3, [pc, #660]	@ (80025d8 <UART2_RX_transfer_complete_callback+0xab4>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	001a      	movs	r2, r3
 8002348:	49a4      	ldr	r1, [pc, #656]	@ (80025dc <UART2_RX_transfer_complete_callback+0xab8>)
 800234a:	4ba5      	ldr	r3, [pc, #660]	@ (80025e0 <UART2_RX_transfer_complete_callback+0xabc>)
 800234c:	0018      	movs	r0, r3
 800234e:	f003 f997 	bl	8005680 <HAL_ADC_Start_DMA>
 8002352:	f000 fc93 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
		}
	}
	//not a realtime status byte
	else{

		if(active_status_byte == 0){
 8002356:	4ba3      	ldr	r3, [pc, #652]	@ (80025e4 <UART2_RX_transfer_complete_callback+0xac0>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d000      	beq.n	8002362 <UART2_RX_transfer_complete_callback+0x83e>
 8002360:	e29e      	b.n	80028a0 <UART2_RX_transfer_complete_callback+0xd7c>

			if(running_status_byte == 0){
 8002362:	4ba1      	ldr	r3, [pc, #644]	@ (80025e8 <UART2_RX_transfer_complete_callback+0xac4>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d000      	beq.n	800236e <UART2_RX_transfer_complete_callback+0x84a>
 800236c:	e0a3      	b.n	80024b6 <UART2_RX_transfer_complete_callback+0x992>

				if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800236e:	4b9f      	ldr	r3, [pc, #636]	@ (80025ec <UART2_RX_transfer_complete_callback+0xac8>)
 8002370:	0018      	movs	r0, r3
 8002372:	f7fe fda7 	bl	8000ec4 <Is_Data_Buffer_Empty>
 8002376:	0003      	movs	r3, r0
 8002378:	2b01      	cmp	r3, #1
 800237a:	d001      	beq.n	8002380 <UART2_RX_transfer_complete_callback+0x85c>
 800237c:	f000 fc7e 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

					if(Is_Status_Byte(rx_buffer) == YES){
 8002380:	4b8b      	ldr	r3, [pc, #556]	@ (80025b0 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002382:	0018      	movs	r0, r3
 8002384:	f7fe fd12 	bl	8000dac <Is_Status_Byte>
 8002388:	0003      	movs	r3, r0
 800238a:	2b01      	cmp	r3, #1
 800238c:	d001      	beq.n	8002392 <UART2_RX_transfer_complete_callback+0x86e>
 800238e:	f000 fc75 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_PC_Status_Byte(rx_buffer) == YES){
 8002392:	4b87      	ldr	r3, [pc, #540]	@ (80025b0 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002394:	0018      	movs	r0, r3
 8002396:	f7fe fd11 	bl	8000dbc <Is_PC_Status_Byte>
 800239a:	0003      	movs	r3, r0
 800239c:	2b01      	cmp	r3, #1
 800239e:	d134      	bne.n	800240a <UART2_RX_transfer_complete_callback+0x8e6>

							running_status_byte = (uint8_t)*rx_buffer;
 80023a0:	4b83      	ldr	r3, [pc, #524]	@ (80025b0 <UART2_RX_transfer_complete_callback+0xa8c>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4b90      	ldr	r3, [pc, #576]	@ (80025e8 <UART2_RX_transfer_complete_callback+0xac4>)
 80023a8:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80023aa:	4b91      	ldr	r3, [pc, #580]	@ (80025f0 <UART2_RX_transfer_complete_callback+0xacc>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	4b7f      	ldr	r3, [pc, #508]	@ (80025b0 <UART2_RX_transfer_complete_callback+0xa8c>)
 80023b2:	0011      	movs	r1, r2
 80023b4:	0018      	movs	r0, r3
 80023b6:	f7fe fd77 	bl	8000ea8 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80023ba:	0003      	movs	r3, r0
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d10d      	bne.n	80023dc <UART2_RX_transfer_complete_callback+0x8b8>

								active_status_byte = (uint8_t)*rx_buffer;
 80023c0:	4b7b      	ldr	r3, [pc, #492]	@ (80025b0 <UART2_RX_transfer_complete_callback+0xa8c>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4b87      	ldr	r3, [pc, #540]	@ (80025e4 <UART2_RX_transfer_complete_callback+0xac0>)
 80023c8:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80023ca:	2380      	movs	r3, #128	@ 0x80
 80023cc:	005a      	lsls	r2, r3, #1
 80023ce:	4b80      	ldr	r3, [pc, #512]	@ (80025d0 <UART2_RX_transfer_complete_callback+0xaac>)
 80023d0:	0011      	movs	r1, r2
 80023d2:	0018      	movs	r0, r3
 80023d4:	f002 fd0a 	bl	8004dec <Set_Status_Bit>
 80023d8:	f000 fc50 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 80023dc:	4b7c      	ldr	r3, [pc, #496]	@ (80025d0 <UART2_RX_transfer_complete_callback+0xaac>)
 80023de:	0018      	movs	r0, r3
 80023e0:	f7fe fdae 	bl	8000f40 <Is_OMNI_On>
 80023e4:	0003      	movs	r3, r0
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d001      	beq.n	80023ee <UART2_RX_transfer_complete_callback+0x8ca>
 80023ea:	f000 fc47 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 80023ee:	4b70      	ldr	r3, [pc, #448]	@ (80025b0 <UART2_RX_transfer_complete_callback+0xa8c>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	4b7b      	ldr	r3, [pc, #492]	@ (80025e4 <UART2_RX_transfer_complete_callback+0xac0>)
 80023f6:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80023f8:	2380      	movs	r3, #128	@ 0x80
 80023fa:	005a      	lsls	r2, r3, #1
 80023fc:	4b74      	ldr	r3, [pc, #464]	@ (80025d0 <UART2_RX_transfer_complete_callback+0xaac>)
 80023fe:	0011      	movs	r1, r2
 8002400:	0018      	movs	r0, r3
 8002402:	f002 fcf3 	bl	8004dec <Set_Status_Bit>
 8002406:	f000 fc39 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_CC_Status_Byte(rx_buffer) == YES){
 800240a:	4b69      	ldr	r3, [pc, #420]	@ (80025b0 <UART2_RX_transfer_complete_callback+0xa8c>)
 800240c:	0018      	movs	r0, r3
 800240e:	f7fe fcdc 	bl	8000dca <Is_CC_Status_Byte>
 8002412:	0003      	movs	r3, r0
 8002414:	2b01      	cmp	r3, #1
 8002416:	d134      	bne.n	8002482 <UART2_RX_transfer_complete_callback+0x95e>

							running_status_byte = (uint8_t)*rx_buffer;
 8002418:	4b65      	ldr	r3, [pc, #404]	@ (80025b0 <UART2_RX_transfer_complete_callback+0xa8c>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4b72      	ldr	r3, [pc, #456]	@ (80025e8 <UART2_RX_transfer_complete_callback+0xac4>)
 8002420:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8002422:	4b73      	ldr	r3, [pc, #460]	@ (80025f0 <UART2_RX_transfer_complete_callback+0xacc>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	4b61      	ldr	r3, [pc, #388]	@ (80025b0 <UART2_RX_transfer_complete_callback+0xa8c>)
 800242a:	0011      	movs	r1, r2
 800242c:	0018      	movs	r0, r3
 800242e:	f7fe fd3b 	bl	8000ea8 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8002432:	0003      	movs	r3, r0
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10d      	bne.n	8002454 <UART2_RX_transfer_complete_callback+0x930>

								active_status_byte = (uint8_t)*rx_buffer;
 8002438:	4b5d      	ldr	r3, [pc, #372]	@ (80025b0 <UART2_RX_transfer_complete_callback+0xa8c>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4b69      	ldr	r3, [pc, #420]	@ (80025e4 <UART2_RX_transfer_complete_callback+0xac0>)
 8002440:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8002442:	2380      	movs	r3, #128	@ 0x80
 8002444:	005a      	lsls	r2, r3, #1
 8002446:	4b62      	ldr	r3, [pc, #392]	@ (80025d0 <UART2_RX_transfer_complete_callback+0xaac>)
 8002448:	0011      	movs	r1, r2
 800244a:	0018      	movs	r0, r3
 800244c:	f002 fcce 	bl	8004dec <Set_Status_Bit>
 8002450:	f000 fc14 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 8002454:	4b5e      	ldr	r3, [pc, #376]	@ (80025d0 <UART2_RX_transfer_complete_callback+0xaac>)
 8002456:	0018      	movs	r0, r3
 8002458:	f7fe fd72 	bl	8000f40 <Is_OMNI_On>
 800245c:	0003      	movs	r3, r0
 800245e:	2b01      	cmp	r3, #1
 8002460:	d001      	beq.n	8002466 <UART2_RX_transfer_complete_callback+0x942>
 8002462:	f000 fc0b 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 8002466:	4b52      	ldr	r3, [pc, #328]	@ (80025b0 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	b2da      	uxtb	r2, r3
 800246c:	4b5d      	ldr	r3, [pc, #372]	@ (80025e4 <UART2_RX_transfer_complete_callback+0xac0>)
 800246e:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8002470:	2380      	movs	r3, #128	@ 0x80
 8002472:	005a      	lsls	r2, r3, #1
 8002474:	4b56      	ldr	r3, [pc, #344]	@ (80025d0 <UART2_RX_transfer_complete_callback+0xaac>)
 8002476:	0011      	movs	r1, r2
 8002478:	0018      	movs	r0, r3
 800247a:	f002 fcb7 	bl	8004dec <Set_Status_Bit>
 800247e:	f000 fbfd 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8002482:	4b4b      	ldr	r3, [pc, #300]	@ (80025b0 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002484:	0018      	movs	r0, r3
 8002486:	f7fe fd09 	bl	8000e9c <Is_Sysex_Start_Status_Byte>
 800248a:	0003      	movs	r3, r0
 800248c:	2b01      	cmp	r3, #1
 800248e:	d001      	beq.n	8002494 <UART2_RX_transfer_complete_callback+0x970>
 8002490:	f000 fbf4 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

							active_status_byte = (uint8_t)*rx_buffer;
 8002494:	4b46      	ldr	r3, [pc, #280]	@ (80025b0 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	b2da      	uxtb	r2, r3
 800249a:	4b52      	ldr	r3, [pc, #328]	@ (80025e4 <UART2_RX_transfer_complete_callback+0xac0>)
 800249c:	701a      	strb	r2, [r3, #0]
							running_status_byte = 0;
 800249e:	4b52      	ldr	r3, [pc, #328]	@ (80025e8 <UART2_RX_transfer_complete_callback+0xac4>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80024a4:	2380      	movs	r3, #128	@ 0x80
 80024a6:	005a      	lsls	r2, r3, #1
 80024a8:	4b49      	ldr	r3, [pc, #292]	@ (80025d0 <UART2_RX_transfer_complete_callback+0xaac>)
 80024aa:	0011      	movs	r1, r2
 80024ac:	0018      	movs	r0, r3
 80024ae:	f002 fc9d 	bl	8004dec <Set_Status_Bit>
 80024b2:	f000 fbe3 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

						}
					}
				}
			}
			else if(running_status_byte != 0){
 80024b6:	4b4c      	ldr	r3, [pc, #304]	@ (80025e8 <UART2_RX_transfer_complete_callback+0xac4>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <UART2_RX_transfer_complete_callback+0x9a0>
 80024c0:	f000 fbdc 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

				if(Is_Data_Byte(rx_buffer) == YES){
 80024c4:	4b3a      	ldr	r3, [pc, #232]	@ (80025b0 <UART2_RX_transfer_complete_callback+0xa8c>)
 80024c6:	0018      	movs	r0, r3
 80024c8:	f7fe fc73 	bl	8000db2 <Is_Data_Byte>
 80024cc:	0003      	movs	r3, r0
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d000      	beq.n	80024d4 <UART2_RX_transfer_complete_callback+0x9b0>
 80024d2:	e151      	b.n	8002778 <UART2_RX_transfer_complete_callback+0xc54>

					Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80024d4:	2380      	movs	r3, #128	@ 0x80
 80024d6:	005a      	lsls	r2, r3, #1
 80024d8:	4b3d      	ldr	r3, [pc, #244]	@ (80025d0 <UART2_RX_transfer_complete_callback+0xaac>)
 80024da:	0011      	movs	r1, r2
 80024dc:	0018      	movs	r0, r3
 80024de:	f002 fc85 	bl	8004dec <Set_Status_Bit>

					if(Is_PC_Status_Byte(&running_status_byte) == YES){
 80024e2:	4b41      	ldr	r3, [pc, #260]	@ (80025e8 <UART2_RX_transfer_complete_callback+0xac4>)
 80024e4:	0018      	movs	r0, r3
 80024e6:	f7fe fc69 	bl	8000dbc <Is_PC_Status_Byte>
 80024ea:	0003      	movs	r3, r0
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d143      	bne.n	8002578 <UART2_RX_transfer_complete_callback+0xa54>

						if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 80024f0:	4b3f      	ldr	r3, [pc, #252]	@ (80025f0 <UART2_RX_transfer_complete_callback+0xacc>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4b3c      	ldr	r3, [pc, #240]	@ (80025e8 <UART2_RX_transfer_complete_callback+0xac4>)
 80024f8:	0011      	movs	r1, r2
 80024fa:	0018      	movs	r0, r3
 80024fc:	f7fe fcd4 	bl	8000ea8 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8002500:	0003      	movs	r3, r0
 8002502:	2b01      	cmp	r3, #1
 8002504:	d008      	beq.n	8002518 <UART2_RX_transfer_complete_callback+0x9f4>
																|| (Is_OMNI_On(&statuses) == YES)){
 8002506:	4b32      	ldr	r3, [pc, #200]	@ (80025d0 <UART2_RX_transfer_complete_callback+0xaac>)
 8002508:	0018      	movs	r0, r3
 800250a:	f7fe fd19 	bl	8000f40 <Is_OMNI_On>
 800250e:	0003      	movs	r3, r0
 8002510:	2b01      	cmp	r3, #1
 8002512:	d001      	beq.n	8002518 <UART2_RX_transfer_complete_callback+0x9f4>
 8002514:	f000 fbb2 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

							if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8002518:	4b34      	ldr	r3, [pc, #208]	@ (80025ec <UART2_RX_transfer_complete_callback+0xac8>)
 800251a:	0018      	movs	r0, r3
 800251c:	f7fe fcd2 	bl	8000ec4 <Is_Data_Buffer_Empty>
 8002520:	0003      	movs	r3, r0
 8002522:	2b01      	cmp	r3, #1
 8002524:	d001      	beq.n	800252a <UART2_RX_transfer_complete_callback+0xa06>
 8002526:	f000 fba9 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

								//first data byte received
								if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 800252a:	4b21      	ldr	r3, [pc, #132]	@ (80025b0 <UART2_RX_transfer_complete_callback+0xa8c>)
 800252c:	2104      	movs	r1, #4
 800252e:	0018      	movs	r0, r3
 8002530:	f7fe fcdc 	bl	8000eec <Is_Program_Change_Data_Byte_In_Range>
 8002534:	0003      	movs	r3, r0
 8002536:	2b01      	cmp	r3, #1
 8002538:	d10f      	bne.n	800255a <UART2_RX_transfer_complete_callback+0xa36>

									Set_All_Pots_to_PC_Mode();
 800253a:	f7fe fbb3 	bl	8000ca4 <Set_All_Pots_to_PC_Mode>
									preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 800253e:	4b1c      	ldr	r3, [pc, #112]	@ (80025b0 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	3301      	adds	r3, #1
 8002546:	b2da      	uxtb	r2, r3
 8002548:	4b2a      	ldr	r3, [pc, #168]	@ (80025f4 <UART2_RX_transfer_complete_callback+0xad0>)
 800254a:	701a      	strb	r2, [r3, #0]
									Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 800254c:	f7fe fa82 	bl	8000a54 <Update_Params_Based_On_Mode_Selected>
									Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8002550:	4b1f      	ldr	r3, [pc, #124]	@ (80025d0 <UART2_RX_transfer_complete_callback+0xaac>)
 8002552:	2108      	movs	r1, #8
 8002554:	0018      	movs	r0, r3
 8002556:	f002 fc4d 	bl	8004df4 <Clear_Status_Bit>
								}

								//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
								Clear_Data_Buffer(&MIDI_data);
 800255a:	4b24      	ldr	r3, [pc, #144]	@ (80025ec <UART2_RX_transfer_complete_callback+0xac8>)
 800255c:	0018      	movs	r0, r3
 800255e:	f7fe fcbd 	bl	8000edc <Clear_Data_Buffer>
								active_status_byte = 0;
 8002562:	4b20      	ldr	r3, [pc, #128]	@ (80025e4 <UART2_RX_transfer_complete_callback+0xac0>)
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]

								//not really required
								Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8002568:	4a19      	ldr	r2, [pc, #100]	@ (80025d0 <UART2_RX_transfer_complete_callback+0xaac>)
 800256a:	4b23      	ldr	r3, [pc, #140]	@ (80025f8 <UART2_RX_transfer_complete_callback+0xad4>)
 800256c:	0011      	movs	r1, r2
 800256e:	0018      	movs	r0, r3
 8002570:	f7fe fcf0 	bl	8000f54 <Reset_and_Stop_MIDI_Software_Timer>
 8002574:	f000 fb82 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(&running_status_byte) == YES){
 8002578:	4b1b      	ldr	r3, [pc, #108]	@ (80025e8 <UART2_RX_transfer_complete_callback+0xac4>)
 800257a:	0018      	movs	r0, r3
 800257c:	f7fe fc25 	bl	8000dca <Is_CC_Status_Byte>
 8002580:	0003      	movs	r3, r0
 8002582:	2b01      	cmp	r3, #1
 8002584:	d001      	beq.n	800258a <UART2_RX_transfer_complete_callback+0xa66>
 8002586:	f000 fb79 	bl	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800258a:	4b18      	ldr	r3, [pc, #96]	@ (80025ec <UART2_RX_transfer_complete_callback+0xac8>)
 800258c:	0018      	movs	r0, r3
 800258e:	f7fe fc99 	bl	8000ec4 <Is_Data_Buffer_Empty>
 8002592:	0003      	movs	r3, r0
 8002594:	2b01      	cmp	r3, #1
 8002596:	d131      	bne.n	80025fc <UART2_RX_transfer_complete_callback+0xad8>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8002598:	4b05      	ldr	r3, [pc, #20]	@ (80025b0 <UART2_RX_transfer_complete_callback+0xa8c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4b13      	ldr	r3, [pc, #76]	@ (80025ec <UART2_RX_transfer_complete_callback+0xac8>)
 80025a0:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 80025a2:	4b15      	ldr	r3, [pc, #84]	@ (80025f8 <UART2_RX_transfer_complete_callback+0xad4>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	e368      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
 80025aa:	46c0      	nop			@ (mov r8, r8)
 80025ac:	20000448 	.word	0x20000448
 80025b0:	2000054c 	.word	0x2000054c
 80025b4:	20000ca8 	.word	0x20000ca8
 80025b8:	50000800 	.word	0x50000800
 80025bc:	20000ce8 	.word	0x20000ce8
 80025c0:	20000804 	.word	0x20000804
 80025c4:	20000434 	.word	0x20000434
 80025c8:	20000cc0 	.word	0x20000cc0
 80025cc:	20000d38 	.word	0x20000d38
 80025d0:	20000cbc 	.word	0x20000cbc
 80025d4:	20000028 	.word	0x20000028
 80025d8:	080094d4 	.word	0x080094d4
 80025dc:	20000d60 	.word	0x20000d60
 80025e0:	20000c0c 	.word	0x20000c0c
 80025e4:	20000547 	.word	0x20000547
 80025e8:	20000546 	.word	0x20000546
 80025ec:	2000053c 	.word	0x2000053c
 80025f0:	20000548 	.word	0x20000548
 80025f4:	200004dd 	.word	0x200004dd
 80025f8:	20000cb4 	.word	0x20000cb4

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 80025fc:	4bd6      	ldr	r3, [pc, #856]	@ (8002958 <UART2_RX_transfer_complete_callback+0xe34>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4bd6      	ldr	r3, [pc, #856]	@ (800295c <UART2_RX_transfer_complete_callback+0xe38>)
 8002604:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8002606:	4ad6      	ldr	r2, [pc, #856]	@ (8002960 <UART2_RX_transfer_complete_callback+0xe3c>)
 8002608:	4bd6      	ldr	r3, [pc, #856]	@ (8002964 <UART2_RX_transfer_complete_callback+0xe40>)
 800260a:	0011      	movs	r1, r2
 800260c:	0018      	movs	r0, r3
 800260e:	f7fe fca1 	bl	8000f54 <Reset_and_Stop_MIDI_Software_Timer>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8002612:	4bd2      	ldr	r3, [pc, #840]	@ (800295c <UART2_RX_transfer_complete_callback+0xe38>)
 8002614:	0018      	movs	r0, r3
 8002616:	f7fe fbdf 	bl	8000dd8 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 800261a:	0003      	movs	r3, r0
 800261c:	2b01      	cmp	r3, #1
 800261e:	d14c      	bne.n	80026ba <UART2_RX_transfer_complete_callback+0xb96>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES){
 8002620:	4bd1      	ldr	r3, [pc, #836]	@ (8002968 <UART2_RX_transfer_complete_callback+0xe44>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	b2da      	uxtb	r2, r3
 8002626:	4bd1      	ldr	r3, [pc, #836]	@ (800296c <UART2_RX_transfer_complete_callback+0xe48>)
 8002628:	0011      	movs	r1, r2
 800262a:	0018      	movs	r0, r3
 800262c:	f7fe fc3c 	bl	8000ea8 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8002630:	0003      	movs	r3, r0
 8002632:	2b01      	cmp	r3, #1
 8002634:	d139      	bne.n	80026aa <UART2_RX_transfer_complete_callback+0xb86>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 8002636:	4ace      	ldr	r2, [pc, #824]	@ (8002970 <UART2_RX_transfer_complete_callback+0xe4c>)
 8002638:	4bc8      	ldr	r3, [pc, #800]	@ (800295c <UART2_RX_transfer_complete_callback+0xe38>)
 800263a:	0011      	movs	r1, r2
 800263c:	0018      	movs	r0, r3
 800263e:	f7fe fc06 	bl	8000e4e <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 8002642:	0003      	movs	r3, r0
 8002644:	2b01      	cmp	r3, #1
 8002646:	d130      	bne.n	80026aa <UART2_RX_transfer_complete_callback+0xb86>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 8002648:	4bc4      	ldr	r3, [pc, #784]	@ (800295c <UART2_RX_transfer_complete_callback+0xe38>)
 800264a:	785b      	ldrb	r3, [r3, #1]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b79      	cmp	r3, #121	@ 0x79
 8002650:	d10b      	bne.n	800266a <UART2_RX_transfer_complete_callback+0xb46>

											Reset_All_Controllers(&params, &delay_line);
 8002652:	4ac8      	ldr	r2, [pc, #800]	@ (8002974 <UART2_RX_transfer_complete_callback+0xe50>)
 8002654:	4bc8      	ldr	r3, [pc, #800]	@ (8002978 <UART2_RX_transfer_complete_callback+0xe54>)
 8002656:	0011      	movs	r1, r2
 8002658:	0018      	movs	r0, r3
 800265a:	f7fe fc8d 	bl	8000f78 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 800265e:	4bc0      	ldr	r3, [pc, #768]	@ (8002960 <UART2_RX_transfer_complete_callback+0xe3c>)
 8002660:	2108      	movs	r1, #8
 8002662:	0018      	movs	r0, r3
 8002664:	f002 fbc6 	bl	8004df4 <Clear_Status_Bit>
 8002668:	e01f      	b.n	80026aa <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 800266a:	4bbc      	ldr	r3, [pc, #752]	@ (800295c <UART2_RX_transfer_complete_callback+0xe38>)
 800266c:	785b      	ldrb	r3, [r3, #1]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b7a      	cmp	r3, #122	@ 0x7a
 8002672:	d107      	bne.n	8002684 <UART2_RX_transfer_complete_callback+0xb60>

											Set_Local_Control();
 8002674:	f7fe fcb0 	bl	8000fd8 <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8002678:	4bb9      	ldr	r3, [pc, #740]	@ (8002960 <UART2_RX_transfer_complete_callback+0xe3c>)
 800267a:	2108      	movs	r1, #8
 800267c:	0018      	movs	r0, r3
 800267e:	f002 fbb9 	bl	8004df4 <Clear_Status_Bit>
 8002682:	e012      	b.n	80026aa <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 8002684:	4bb5      	ldr	r3, [pc, #724]	@ (800295c <UART2_RX_transfer_complete_callback+0xe38>)
 8002686:	785b      	ldrb	r3, [r3, #1]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b7c      	cmp	r3, #124	@ 0x7c
 800268c:	d104      	bne.n	8002698 <UART2_RX_transfer_complete_callback+0xb74>

											Set_OMNI_Off(&statuses);
 800268e:	4bb4      	ldr	r3, [pc, #720]	@ (8002960 <UART2_RX_transfer_complete_callback+0xe3c>)
 8002690:	0018      	movs	r0, r3
 8002692:	f7fe fcc9 	bl	8001028 <Set_OMNI_Off>
 8002696:	e008      	b.n	80026aa <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8002698:	4bb0      	ldr	r3, [pc, #704]	@ (800295c <UART2_RX_transfer_complete_callback+0xe38>)
 800269a:	785b      	ldrb	r3, [r3, #1]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b7d      	cmp	r3, #125	@ 0x7d
 80026a0:	d103      	bne.n	80026aa <UART2_RX_transfer_complete_callback+0xb86>

											Set_OMNI_On(&statuses);
 80026a2:	4baf      	ldr	r3, [pc, #700]	@ (8002960 <UART2_RX_transfer_complete_callback+0xe3c>)
 80026a4:	0018      	movs	r0, r3
 80026a6:	f7fe fcc6 	bl	8001036 <Set_OMNI_On>
										}
									}
								}

								//not required
								active_status_byte = 0;
 80026aa:	4bb4      	ldr	r3, [pc, #720]	@ (800297c <UART2_RX_transfer_complete_callback+0xe58>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80026b0:	4baa      	ldr	r3, [pc, #680]	@ (800295c <UART2_RX_transfer_complete_callback+0xe38>)
 80026b2:	0018      	movs	r0, r3
 80026b4:	f7fe fc12 	bl	8000edc <Clear_Data_Buffer>
 80026b8:	e2e0      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80026ba:	4ba8      	ldr	r3, [pc, #672]	@ (800295c <UART2_RX_transfer_complete_callback+0xe38>)
 80026bc:	0018      	movs	r0, r3
 80026be:	f7fe fba6 	bl	8000e0e <Is_Utilised_CC_First_Data_Byte>
 80026c2:	0003      	movs	r3, r0
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d14f      	bne.n	8002768 <UART2_RX_transfer_complete_callback+0xc44>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 80026c8:	4ba7      	ldr	r3, [pc, #668]	@ (8002968 <UART2_RX_transfer_complete_callback+0xe44>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4ba7      	ldr	r3, [pc, #668]	@ (800296c <UART2_RX_transfer_complete_callback+0xe48>)
 80026d0:	0011      	movs	r1, r2
 80026d2:	0018      	movs	r0, r3
 80026d4:	f7fe fbe8 	bl	8000ea8 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80026d8:	0003      	movs	r3, r0
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d006      	beq.n	80026ec <UART2_RX_transfer_complete_callback+0xbc8>
										|| (Is_OMNI_On(&statuses) == YES)){
 80026de:	4ba0      	ldr	r3, [pc, #640]	@ (8002960 <UART2_RX_transfer_complete_callback+0xe3c>)
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7fe fc2d 	bl	8000f40 <Is_OMNI_On>
 80026e6:	0003      	movs	r3, r0
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d135      	bne.n	8002758 <UART2_RX_transfer_complete_callback+0xc34>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 80026ec:	4b9b      	ldr	r3, [pc, #620]	@ (800295c <UART2_RX_transfer_complete_callback+0xe38>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b14      	cmp	r3, #20
 80026f4:	d104      	bne.n	8002700 <UART2_RX_transfer_complete_callback+0xbdc>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80026f6:	4b9e      	ldr	r3, [pc, #632]	@ (8002970 <UART2_RX_transfer_complete_callback+0xe4c>)
 80026f8:	0018      	movs	r0, r3
 80026fa:	f7fe fa83 	bl	8000c04 <Set_Waveshape_to_CC_Mode_and_Value>
 80026fe:	e02b      	b.n	8002758 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 8002700:	4b96      	ldr	r3, [pc, #600]	@ (800295c <UART2_RX_transfer_complete_callback+0xe38>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b15      	cmp	r3, #21
 8002708:	d109      	bne.n	800271e <UART2_RX_transfer_complete_callback+0xbfa>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 800270a:	4b99      	ldr	r3, [pc, #612]	@ (8002970 <UART2_RX_transfer_complete_callback+0xe4c>)
 800270c:	0018      	movs	r0, r3
 800270e:	f7fe fa89 	bl	8000c24 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8002712:	4b93      	ldr	r3, [pc, #588]	@ (8002960 <UART2_RX_transfer_complete_callback+0xe3c>)
 8002714:	2108      	movs	r1, #8
 8002716:	0018      	movs	r0, r3
 8002718:	f002 fb6c 	bl	8004df4 <Clear_Status_Bit>
 800271c:	e01c      	b.n	8002758 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 800271e:	4b8f      	ldr	r3, [pc, #572]	@ (800295c <UART2_RX_transfer_complete_callback+0xe38>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b16      	cmp	r3, #22
 8002726:	d104      	bne.n	8002732 <UART2_RX_transfer_complete_callback+0xc0e>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8002728:	4b91      	ldr	r3, [pc, #580]	@ (8002970 <UART2_RX_transfer_complete_callback+0xe4c>)
 800272a:	0018      	movs	r0, r3
 800272c:	f7fe fa8a 	bl	8000c44 <Set_Depth_to_CC_Mode_and_Value>
 8002730:	e012      	b.n	8002758 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8002732:	4b8a      	ldr	r3, [pc, #552]	@ (800295c <UART2_RX_transfer_complete_callback+0xe38>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b17      	cmp	r3, #23
 800273a:	d104      	bne.n	8002746 <UART2_RX_transfer_complete_callback+0xc22>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 800273c:	4b8c      	ldr	r3, [pc, #560]	@ (8002970 <UART2_RX_transfer_complete_callback+0xe4c>)
 800273e:	0018      	movs	r0, r3
 8002740:	f7fe fa90 	bl	8000c64 <Set_Symmetry_to_CC_Mode_and_Value>
 8002744:	e008      	b.n	8002758 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 8002746:	4b85      	ldr	r3, [pc, #532]	@ (800295c <UART2_RX_transfer_complete_callback+0xe38>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b18      	cmp	r3, #24
 800274e:	d103      	bne.n	8002758 <UART2_RX_transfer_complete_callback+0xc34>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8002750:	4b87      	ldr	r3, [pc, #540]	@ (8002970 <UART2_RX_transfer_complete_callback+0xe4c>)
 8002752:	0018      	movs	r0, r3
 8002754:	f7fe fa96 	bl	8000c84 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 8002758:	4b88      	ldr	r3, [pc, #544]	@ (800297c <UART2_RX_transfer_complete_callback+0xe58>)
 800275a:	2200      	movs	r2, #0
 800275c:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 800275e:	4b7f      	ldr	r3, [pc, #508]	@ (800295c <UART2_RX_transfer_complete_callback+0xe38>)
 8002760:	0018      	movs	r0, r3
 8002762:	f7fe fbbb 	bl	8000edc <Clear_Data_Buffer>
 8002766:	e289      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 8002768:	4b84      	ldr	r3, [pc, #528]	@ (800297c <UART2_RX_transfer_complete_callback+0xe58>)
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 800276e:	4b7b      	ldr	r3, [pc, #492]	@ (800295c <UART2_RX_transfer_complete_callback+0xe38>)
 8002770:	0018      	movs	r0, r3
 8002772:	f7fe fbb3 	bl	8000edc <Clear_Data_Buffer>
 8002776:	e281      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
					}
					//don't need to check Sysex with running status, as not supported by MIDI
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8002778:	4b78      	ldr	r3, [pc, #480]	@ (800295c <UART2_RX_transfer_complete_callback+0xe38>)
 800277a:	0018      	movs	r0, r3
 800277c:	f7fe fbae 	bl	8000edc <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8002780:	4a77      	ldr	r2, [pc, #476]	@ (8002960 <UART2_RX_transfer_complete_callback+0xe3c>)
 8002782:	4b78      	ldr	r3, [pc, #480]	@ (8002964 <UART2_RX_transfer_complete_callback+0xe40>)
 8002784:	0011      	movs	r1, r2
 8002786:	0018      	movs	r0, r3
 8002788:	f7fe fbe4 	bl	8000f54 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 800278c:	4b72      	ldr	r3, [pc, #456]	@ (8002958 <UART2_RX_transfer_complete_callback+0xe34>)
 800278e:	0018      	movs	r0, r3
 8002790:	f7fe fb14 	bl	8000dbc <Is_PC_Status_Byte>
 8002794:	0003      	movs	r3, r0
 8002796:	2b01      	cmp	r3, #1
 8002798:	d131      	bne.n	80027fe <UART2_RX_transfer_complete_callback+0xcda>

						running_status_byte = (uint8_t)*rx_buffer;
 800279a:	4b6f      	ldr	r3, [pc, #444]	@ (8002958 <UART2_RX_transfer_complete_callback+0xe34>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	4b72      	ldr	r3, [pc, #456]	@ (800296c <UART2_RX_transfer_complete_callback+0xe48>)
 80027a2:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80027a4:	4b70      	ldr	r3, [pc, #448]	@ (8002968 <UART2_RX_transfer_complete_callback+0xe44>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4b6b      	ldr	r3, [pc, #428]	@ (8002958 <UART2_RX_transfer_complete_callback+0xe34>)
 80027ac:	0011      	movs	r1, r2
 80027ae:	0018      	movs	r0, r3
 80027b0:	f7fe fb7a 	bl	8000ea8 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80027b4:	0003      	movs	r3, r0
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d10c      	bne.n	80027d4 <UART2_RX_transfer_complete_callback+0xcb0>

							active_status_byte = (uint8_t)*rx_buffer;
 80027ba:	4b67      	ldr	r3, [pc, #412]	@ (8002958 <UART2_RX_transfer_complete_callback+0xe34>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	4b6e      	ldr	r3, [pc, #440]	@ (800297c <UART2_RX_transfer_complete_callback+0xe58>)
 80027c2:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80027c4:	2380      	movs	r3, #128	@ 0x80
 80027c6:	005a      	lsls	r2, r3, #1
 80027c8:	4b65      	ldr	r3, [pc, #404]	@ (8002960 <UART2_RX_transfer_complete_callback+0xe3c>)
 80027ca:	0011      	movs	r1, r2
 80027cc:	0018      	movs	r0, r3
 80027ce:	f002 fb0d 	bl	8004dec <Set_Status_Bit>
 80027d2:	e253      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 80027d4:	4b62      	ldr	r3, [pc, #392]	@ (8002960 <UART2_RX_transfer_complete_callback+0xe3c>)
 80027d6:	0018      	movs	r0, r3
 80027d8:	f7fe fbb2 	bl	8000f40 <Is_OMNI_On>
 80027dc:	0003      	movs	r3, r0
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d000      	beq.n	80027e4 <UART2_RX_transfer_complete_callback+0xcc0>
 80027e2:	e24b      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 80027e4:	4b5c      	ldr	r3, [pc, #368]	@ (8002958 <UART2_RX_transfer_complete_callback+0xe34>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4b64      	ldr	r3, [pc, #400]	@ (800297c <UART2_RX_transfer_complete_callback+0xe58>)
 80027ec:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80027ee:	2380      	movs	r3, #128	@ 0x80
 80027f0:	005a      	lsls	r2, r3, #1
 80027f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002960 <UART2_RX_transfer_complete_callback+0xe3c>)
 80027f4:	0011      	movs	r1, r2
 80027f6:	0018      	movs	r0, r3
 80027f8:	f002 faf8 	bl	8004dec <Set_Status_Bit>
 80027fc:	e23e      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80027fe:	4b56      	ldr	r3, [pc, #344]	@ (8002958 <UART2_RX_transfer_complete_callback+0xe34>)
 8002800:	0018      	movs	r0, r3
 8002802:	f7fe fae2 	bl	8000dca <Is_CC_Status_Byte>
 8002806:	0003      	movs	r3, r0
 8002808:	2b01      	cmp	r3, #1
 800280a:	d131      	bne.n	8002870 <UART2_RX_transfer_complete_callback+0xd4c>

						running_status_byte = (uint8_t)*rx_buffer;
 800280c:	4b52      	ldr	r3, [pc, #328]	@ (8002958 <UART2_RX_transfer_complete_callback+0xe34>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4b56      	ldr	r3, [pc, #344]	@ (800296c <UART2_RX_transfer_complete_callback+0xe48>)
 8002814:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8002816:	4b54      	ldr	r3, [pc, #336]	@ (8002968 <UART2_RX_transfer_complete_callback+0xe44>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b2da      	uxtb	r2, r3
 800281c:	4b4e      	ldr	r3, [pc, #312]	@ (8002958 <UART2_RX_transfer_complete_callback+0xe34>)
 800281e:	0011      	movs	r1, r2
 8002820:	0018      	movs	r0, r3
 8002822:	f7fe fb41 	bl	8000ea8 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8002826:	0003      	movs	r3, r0
 8002828:	2b01      	cmp	r3, #1
 800282a:	d10c      	bne.n	8002846 <UART2_RX_transfer_complete_callback+0xd22>

							active_status_byte = (uint8_t)*rx_buffer;
 800282c:	4b4a      	ldr	r3, [pc, #296]	@ (8002958 <UART2_RX_transfer_complete_callback+0xe34>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	4b52      	ldr	r3, [pc, #328]	@ (800297c <UART2_RX_transfer_complete_callback+0xe58>)
 8002834:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8002836:	2380      	movs	r3, #128	@ 0x80
 8002838:	005a      	lsls	r2, r3, #1
 800283a:	4b49      	ldr	r3, [pc, #292]	@ (8002960 <UART2_RX_transfer_complete_callback+0xe3c>)
 800283c:	0011      	movs	r1, r2
 800283e:	0018      	movs	r0, r3
 8002840:	f002 fad4 	bl	8004dec <Set_Status_Bit>
 8002844:	e21a      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8002846:	4b46      	ldr	r3, [pc, #280]	@ (8002960 <UART2_RX_transfer_complete_callback+0xe3c>)
 8002848:	0018      	movs	r0, r3
 800284a:	f7fe fb79 	bl	8000f40 <Is_OMNI_On>
 800284e:	0003      	movs	r3, r0
 8002850:	2b01      	cmp	r3, #1
 8002852:	d000      	beq.n	8002856 <UART2_RX_transfer_complete_callback+0xd32>
 8002854:	e212      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8002856:	4b40      	ldr	r3, [pc, #256]	@ (8002958 <UART2_RX_transfer_complete_callback+0xe34>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b47      	ldr	r3, [pc, #284]	@ (800297c <UART2_RX_transfer_complete_callback+0xe58>)
 800285e:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8002860:	2380      	movs	r3, #128	@ 0x80
 8002862:	005a      	lsls	r2, r3, #1
 8002864:	4b3e      	ldr	r3, [pc, #248]	@ (8002960 <UART2_RX_transfer_complete_callback+0xe3c>)
 8002866:	0011      	movs	r1, r2
 8002868:	0018      	movs	r0, r3
 800286a:	f002 fabf 	bl	8004dec <Set_Status_Bit>
 800286e:	e205      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8002870:	4b39      	ldr	r3, [pc, #228]	@ (8002958 <UART2_RX_transfer_complete_callback+0xe34>)
 8002872:	0018      	movs	r0, r3
 8002874:	f7fe fb12 	bl	8000e9c <Is_Sysex_Start_Status_Byte>
 8002878:	0003      	movs	r3, r0
 800287a:	2b01      	cmp	r3, #1
 800287c:	d000      	beq.n	8002880 <UART2_RX_transfer_complete_callback+0xd5c>
 800287e:	e1fd      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8002880:	4b35      	ldr	r3, [pc, #212]	@ (8002958 <UART2_RX_transfer_complete_callback+0xe34>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	b2da      	uxtb	r2, r3
 8002886:	4b3d      	ldr	r3, [pc, #244]	@ (800297c <UART2_RX_transfer_complete_callback+0xe58>)
 8002888:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 800288a:	4b38      	ldr	r3, [pc, #224]	@ (800296c <UART2_RX_transfer_complete_callback+0xe48>)
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8002890:	2380      	movs	r3, #128	@ 0x80
 8002892:	005a      	lsls	r2, r3, #1
 8002894:	4b32      	ldr	r3, [pc, #200]	@ (8002960 <UART2_RX_transfer_complete_callback+0xe3c>)
 8002896:	0011      	movs	r1, r2
 8002898:	0018      	movs	r0, r3
 800289a:	f002 faa7 	bl	8004dec <Set_Status_Bit>
 800289e:	e1ed      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
			}
		}
		else if(active_status_byte != 0){ //CC/PC only called if on basic channel or omni ON
 80028a0:	4b36      	ldr	r3, [pc, #216]	@ (800297c <UART2_RX_transfer_complete_callback+0xe58>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d100      	bne.n	80028ac <UART2_RX_transfer_complete_callback+0xd88>
 80028aa:	e1e7      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

			if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out) == YES){
 80028ac:	2380      	movs	r3, #128	@ 0x80
 80028ae:	009a      	lsls	r2, r3, #2
 80028b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002960 <UART2_RX_transfer_complete_callback+0xe3c>)
 80028b2:	0011      	movs	r1, r2
 80028b4:	0018      	movs	r0, r3
 80028b6:	f002 fa93 	bl	8004de0 <Get_Status_Bit>
 80028ba:	0003      	movs	r3, r0
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d10d      	bne.n	80028dc <UART2_RX_transfer_complete_callback+0xdb8>

				active_status_byte = 0;
 80028c0:	4b2e      	ldr	r3, [pc, #184]	@ (800297c <UART2_RX_transfer_complete_callback+0xe58>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 80028c6:	4b25      	ldr	r3, [pc, #148]	@ (800295c <UART2_RX_transfer_complete_callback+0xe38>)
 80028c8:	0018      	movs	r0, r3
 80028ca:	f7fe fb07 	bl	8000edc <Clear_Data_Buffer>
				//running status is kept

				Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80028ce:	4a24      	ldr	r2, [pc, #144]	@ (8002960 <UART2_RX_transfer_complete_callback+0xe3c>)
 80028d0:	4b24      	ldr	r3, [pc, #144]	@ (8002964 <UART2_RX_transfer_complete_callback+0xe40>)
 80028d2:	0011      	movs	r1, r2
 80028d4:	0018      	movs	r0, r3
 80028d6:	f7fe fb3d 	bl	8000f54 <Reset_and_Stop_MIDI_Software_Timer>
 80028da:	e1cf      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
				//In this condition, the data bytes haven't been received in enough time, so any subsequent data bytes
				//sent after this are simply ignored
			}
			else{ //not timed out

				if(Is_Data_Byte(rx_buffer) == YES){
 80028dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002958 <UART2_RX_transfer_complete_callback+0xe34>)
 80028de:	0018      	movs	r0, r3
 80028e0:	f7fe fa67 	bl	8000db2 <Is_Data_Byte>
 80028e4:	0003      	movs	r3, r0
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d000      	beq.n	80028ec <UART2_RX_transfer_complete_callback+0xdc8>
 80028ea:	e133      	b.n	8002b54 <UART2_RX_transfer_complete_callback+0x1030>

					if(Is_PC_Status_Byte(&active_status_byte) == YES){
 80028ec:	4b23      	ldr	r3, [pc, #140]	@ (800297c <UART2_RX_transfer_complete_callback+0xe58>)
 80028ee:	0018      	movs	r0, r3
 80028f0:	f7fe fa64 	bl	8000dbc <Is_PC_Status_Byte>
 80028f4:	0003      	movs	r3, r0
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d144      	bne.n	8002984 <UART2_RX_transfer_complete_callback+0xe60>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80028fa:	4b18      	ldr	r3, [pc, #96]	@ (800295c <UART2_RX_transfer_complete_callback+0xe38>)
 80028fc:	0018      	movs	r0, r3
 80028fe:	f7fe fae1 	bl	8000ec4 <Is_Data_Buffer_Empty>
 8002902:	0003      	movs	r3, r0
 8002904:	2b01      	cmp	r3, #1
 8002906:	d000      	beq.n	800290a <UART2_RX_transfer_complete_callback+0xde6>
 8002908:	e1b8      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

							//first data byte received
							if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 800290a:	4b13      	ldr	r3, [pc, #76]	@ (8002958 <UART2_RX_transfer_complete_callback+0xe34>)
 800290c:	2104      	movs	r1, #4
 800290e:	0018      	movs	r0, r3
 8002910:	f7fe faec 	bl	8000eec <Is_Program_Change_Data_Byte_In_Range>
 8002914:	0003      	movs	r3, r0
 8002916:	2b01      	cmp	r3, #1
 8002918:	d10f      	bne.n	800293a <UART2_RX_transfer_complete_callback+0xe16>

								Set_All_Pots_to_PC_Mode();
 800291a:	f7fe f9c3 	bl	8000ca4 <Set_All_Pots_to_PC_Mode>
								preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 800291e:	4b0e      	ldr	r3, [pc, #56]	@ (8002958 <UART2_RX_transfer_complete_callback+0xe34>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	3301      	adds	r3, #1
 8002926:	b2da      	uxtb	r2, r3
 8002928:	4b15      	ldr	r3, [pc, #84]	@ (8002980 <UART2_RX_transfer_complete_callback+0xe5c>)
 800292a:	701a      	strb	r2, [r3, #0]
								Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 800292c:	f7fe f892 	bl	8000a54 <Update_Params_Based_On_Mode_Selected>
								Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8002930:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <UART2_RX_transfer_complete_callback+0xe3c>)
 8002932:	2108      	movs	r1, #8
 8002934:	0018      	movs	r0, r3
 8002936:	f002 fa5d 	bl	8004df4 <Clear_Status_Bit>
							}

							//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
							Clear_Data_Buffer(&MIDI_data);
 800293a:	4b08      	ldr	r3, [pc, #32]	@ (800295c <UART2_RX_transfer_complete_callback+0xe38>)
 800293c:	0018      	movs	r0, r3
 800293e:	f7fe facd 	bl	8000edc <Clear_Data_Buffer>
							active_status_byte = 0;
 8002942:	4b0e      	ldr	r3, [pc, #56]	@ (800297c <UART2_RX_transfer_complete_callback+0xe58>)
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]

							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8002948:	4a05      	ldr	r2, [pc, #20]	@ (8002960 <UART2_RX_transfer_complete_callback+0xe3c>)
 800294a:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <UART2_RX_transfer_complete_callback+0xe40>)
 800294c:	0011      	movs	r1, r2
 800294e:	0018      	movs	r0, r3
 8002950:	f7fe fb00 	bl	8000f54 <Reset_and_Stop_MIDI_Software_Timer>
 8002954:	e192      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	2000054c 	.word	0x2000054c
 800295c:	2000053c 	.word	0x2000053c
 8002960:	20000cbc 	.word	0x20000cbc
 8002964:	20000cb4 	.word	0x20000cb4
 8002968:	20000548 	.word	0x20000548
 800296c:	20000546 	.word	0x20000546
 8002970:	2000053d 	.word	0x2000053d
 8002974:	20000028 	.word	0x20000028
 8002978:	20000d38 	.word	0x20000d38
 800297c:	20000547 	.word	0x20000547
 8002980:	200004dd 	.word	0x200004dd

						}
					}
					else if(Is_CC_Status_Byte(&active_status_byte) == YES){
 8002984:	4bc4      	ldr	r3, [pc, #784]	@ (8002c98 <UART2_RX_transfer_complete_callback+0x1174>)
 8002986:	0018      	movs	r0, r3
 8002988:	f7fe fa1f 	bl	8000dca <Is_CC_Status_Byte>
 800298c:	0003      	movs	r3, r0
 800298e:	2b01      	cmp	r3, #1
 8002990:	d000      	beq.n	8002994 <UART2_RX_transfer_complete_callback+0xe70>
 8002992:	e0d2      	b.n	8002b3a <UART2_RX_transfer_complete_callback+0x1016>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8002994:	4bc1      	ldr	r3, [pc, #772]	@ (8002c9c <UART2_RX_transfer_complete_callback+0x1178>)
 8002996:	0018      	movs	r0, r3
 8002998:	f7fe fa94 	bl	8000ec4 <Is_Data_Buffer_Empty>
 800299c:	0003      	movs	r3, r0
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d108      	bne.n	80029b4 <UART2_RX_transfer_complete_callback+0xe90>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 80029a2:	4bbf      	ldr	r3, [pc, #764]	@ (8002ca0 <UART2_RX_transfer_complete_callback+0x117c>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	4bbc      	ldr	r3, [pc, #752]	@ (8002c9c <UART2_RX_transfer_complete_callback+0x1178>)
 80029aa:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 80029ac:	4bbd      	ldr	r3, [pc, #756]	@ (8002ca4 <UART2_RX_transfer_complete_callback+0x1180>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	e163      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 80029b4:	4bba      	ldr	r3, [pc, #744]	@ (8002ca0 <UART2_RX_transfer_complete_callback+0x117c>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	4bb8      	ldr	r3, [pc, #736]	@ (8002c9c <UART2_RX_transfer_complete_callback+0x1178>)
 80029bc:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80029be:	4aba      	ldr	r2, [pc, #744]	@ (8002ca8 <UART2_RX_transfer_complete_callback+0x1184>)
 80029c0:	4bb8      	ldr	r3, [pc, #736]	@ (8002ca4 <UART2_RX_transfer_complete_callback+0x1180>)
 80029c2:	0011      	movs	r1, r2
 80029c4:	0018      	movs	r0, r3
 80029c6:	f7fe fac5 	bl	8000f54 <Reset_and_Stop_MIDI_Software_Timer>
							Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80029ca:	4bb7      	ldr	r3, [pc, #732]	@ (8002ca8 <UART2_RX_transfer_complete_callback+0x1184>)
 80029cc:	2108      	movs	r1, #8
 80029ce:	0018      	movs	r0, r3
 80029d0:	f002 fa10 	bl	8004df4 <Clear_Status_Bit>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80029d4:	4bb1      	ldr	r3, [pc, #708]	@ (8002c9c <UART2_RX_transfer_complete_callback+0x1178>)
 80029d6:	0018      	movs	r0, r3
 80029d8:	f7fe f9fe 	bl	8000dd8 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 80029dc:	0003      	movs	r3, r0
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d14c      	bne.n	8002a7c <UART2_RX_transfer_complete_callback+0xf58>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES){
 80029e2:	4bb2      	ldr	r3, [pc, #712]	@ (8002cac <UART2_RX_transfer_complete_callback+0x1188>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	4bab      	ldr	r3, [pc, #684]	@ (8002c98 <UART2_RX_transfer_complete_callback+0x1174>)
 80029ea:	0011      	movs	r1, r2
 80029ec:	0018      	movs	r0, r3
 80029ee:	f7fe fa5b 	bl	8000ea8 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80029f2:	0003      	movs	r3, r0
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d139      	bne.n	8002a6c <UART2_RX_transfer_complete_callback+0xf48>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 80029f8:	4aad      	ldr	r2, [pc, #692]	@ (8002cb0 <UART2_RX_transfer_complete_callback+0x118c>)
 80029fa:	4ba8      	ldr	r3, [pc, #672]	@ (8002c9c <UART2_RX_transfer_complete_callback+0x1178>)
 80029fc:	0011      	movs	r1, r2
 80029fe:	0018      	movs	r0, r3
 8002a00:	f7fe fa25 	bl	8000e4e <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 8002a04:	0003      	movs	r3, r0
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d130      	bne.n	8002a6c <UART2_RX_transfer_complete_callback+0xf48>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 8002a0a:	4ba4      	ldr	r3, [pc, #656]	@ (8002c9c <UART2_RX_transfer_complete_callback+0x1178>)
 8002a0c:	785b      	ldrb	r3, [r3, #1]
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b79      	cmp	r3, #121	@ 0x79
 8002a12:	d10b      	bne.n	8002a2c <UART2_RX_transfer_complete_callback+0xf08>

											Reset_All_Controllers(&params, &delay_line);
 8002a14:	4aa7      	ldr	r2, [pc, #668]	@ (8002cb4 <UART2_RX_transfer_complete_callback+0x1190>)
 8002a16:	4ba8      	ldr	r3, [pc, #672]	@ (8002cb8 <UART2_RX_transfer_complete_callback+0x1194>)
 8002a18:	0011      	movs	r1, r2
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f7fe faac 	bl	8000f78 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8002a20:	4ba1      	ldr	r3, [pc, #644]	@ (8002ca8 <UART2_RX_transfer_complete_callback+0x1184>)
 8002a22:	2108      	movs	r1, #8
 8002a24:	0018      	movs	r0, r3
 8002a26:	f002 f9e5 	bl	8004df4 <Clear_Status_Bit>
 8002a2a:	e01f      	b.n	8002a6c <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 8002a2c:	4b9b      	ldr	r3, [pc, #620]	@ (8002c9c <UART2_RX_transfer_complete_callback+0x1178>)
 8002a2e:	785b      	ldrb	r3, [r3, #1]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b7a      	cmp	r3, #122	@ 0x7a
 8002a34:	d107      	bne.n	8002a46 <UART2_RX_transfer_complete_callback+0xf22>

											Set_Local_Control();
 8002a36:	f7fe facf 	bl	8000fd8 <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8002a3a:	4b9b      	ldr	r3, [pc, #620]	@ (8002ca8 <UART2_RX_transfer_complete_callback+0x1184>)
 8002a3c:	2108      	movs	r1, #8
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f002 f9d8 	bl	8004df4 <Clear_Status_Bit>
 8002a44:	e012      	b.n	8002a6c <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 8002a46:	4b95      	ldr	r3, [pc, #596]	@ (8002c9c <UART2_RX_transfer_complete_callback+0x1178>)
 8002a48:	785b      	ldrb	r3, [r3, #1]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b7c      	cmp	r3, #124	@ 0x7c
 8002a4e:	d104      	bne.n	8002a5a <UART2_RX_transfer_complete_callback+0xf36>

											Set_OMNI_Off(&statuses);
 8002a50:	4b95      	ldr	r3, [pc, #596]	@ (8002ca8 <UART2_RX_transfer_complete_callback+0x1184>)
 8002a52:	0018      	movs	r0, r3
 8002a54:	f7fe fae8 	bl	8001028 <Set_OMNI_Off>
 8002a58:	e008      	b.n	8002a6c <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8002a5a:	4b90      	ldr	r3, [pc, #576]	@ (8002c9c <UART2_RX_transfer_complete_callback+0x1178>)
 8002a5c:	785b      	ldrb	r3, [r3, #1]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b7d      	cmp	r3, #125	@ 0x7d
 8002a62:	d103      	bne.n	8002a6c <UART2_RX_transfer_complete_callback+0xf48>

											Set_OMNI_On(&statuses);
 8002a64:	4b90      	ldr	r3, [pc, #576]	@ (8002ca8 <UART2_RX_transfer_complete_callback+0x1184>)
 8002a66:	0018      	movs	r0, r3
 8002a68:	f7fe fae5 	bl	8001036 <Set_OMNI_On>
										}
									}
								}

								active_status_byte = 0;
 8002a6c:	4b8a      	ldr	r3, [pc, #552]	@ (8002c98 <UART2_RX_transfer_complete_callback+0x1174>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8002a72:	4b8a      	ldr	r3, [pc, #552]	@ (8002c9c <UART2_RX_transfer_complete_callback+0x1178>)
 8002a74:	0018      	movs	r0, r3
 8002a76:	f7fe fa31 	bl	8000edc <Clear_Data_Buffer>
 8002a7a:	e0ff      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8002a7c:	4b87      	ldr	r3, [pc, #540]	@ (8002c9c <UART2_RX_transfer_complete_callback+0x1178>)
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f7fe f9c5 	bl	8000e0e <Is_Utilised_CC_First_Data_Byte>
 8002a84:	0003      	movs	r3, r0
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d14f      	bne.n	8002b2a <UART2_RX_transfer_complete_callback+0x1006>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES)
 8002a8a:	4b88      	ldr	r3, [pc, #544]	@ (8002cac <UART2_RX_transfer_complete_callback+0x1188>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	4b81      	ldr	r3, [pc, #516]	@ (8002c98 <UART2_RX_transfer_complete_callback+0x1174>)
 8002a92:	0011      	movs	r1, r2
 8002a94:	0018      	movs	r0, r3
 8002a96:	f7fe fa07 	bl	8000ea8 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d006      	beq.n	8002aae <UART2_RX_transfer_complete_callback+0xf8a>
										|| (Is_OMNI_On(&statuses) == YES)){
 8002aa0:	4b81      	ldr	r3, [pc, #516]	@ (8002ca8 <UART2_RX_transfer_complete_callback+0x1184>)
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f7fe fa4c 	bl	8000f40 <Is_OMNI_On>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d135      	bne.n	8002b1a <UART2_RX_transfer_complete_callback+0xff6>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 8002aae:	4b7b      	ldr	r3, [pc, #492]	@ (8002c9c <UART2_RX_transfer_complete_callback+0x1178>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b14      	cmp	r3, #20
 8002ab6:	d104      	bne.n	8002ac2 <UART2_RX_transfer_complete_callback+0xf9e>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8002ab8:	4b7d      	ldr	r3, [pc, #500]	@ (8002cb0 <UART2_RX_transfer_complete_callback+0x118c>)
 8002aba:	0018      	movs	r0, r3
 8002abc:	f7fe f8a2 	bl	8000c04 <Set_Waveshape_to_CC_Mode_and_Value>
 8002ac0:	e02b      	b.n	8002b1a <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 8002ac2:	4b76      	ldr	r3, [pc, #472]	@ (8002c9c <UART2_RX_transfer_complete_callback+0x1178>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b15      	cmp	r3, #21
 8002aca:	d109      	bne.n	8002ae0 <UART2_RX_transfer_complete_callback+0xfbc>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8002acc:	4b78      	ldr	r3, [pc, #480]	@ (8002cb0 <UART2_RX_transfer_complete_callback+0x118c>)
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7fe f8a8 	bl	8000c24 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8002ad4:	4b74      	ldr	r3, [pc, #464]	@ (8002ca8 <UART2_RX_transfer_complete_callback+0x1184>)
 8002ad6:	2108      	movs	r1, #8
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f002 f98b 	bl	8004df4 <Clear_Status_Bit>
 8002ade:	e01c      	b.n	8002b1a <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8002ae0:	4b6e      	ldr	r3, [pc, #440]	@ (8002c9c <UART2_RX_transfer_complete_callback+0x1178>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b16      	cmp	r3, #22
 8002ae8:	d104      	bne.n	8002af4 <UART2_RX_transfer_complete_callback+0xfd0>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8002aea:	4b71      	ldr	r3, [pc, #452]	@ (8002cb0 <UART2_RX_transfer_complete_callback+0x118c>)
 8002aec:	0018      	movs	r0, r3
 8002aee:	f7fe f8a9 	bl	8000c44 <Set_Depth_to_CC_Mode_and_Value>
 8002af2:	e012      	b.n	8002b1a <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8002af4:	4b69      	ldr	r3, [pc, #420]	@ (8002c9c <UART2_RX_transfer_complete_callback+0x1178>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b17      	cmp	r3, #23
 8002afc:	d104      	bne.n	8002b08 <UART2_RX_transfer_complete_callback+0xfe4>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8002afe:	4b6c      	ldr	r3, [pc, #432]	@ (8002cb0 <UART2_RX_transfer_complete_callback+0x118c>)
 8002b00:	0018      	movs	r0, r3
 8002b02:	f7fe f8af 	bl	8000c64 <Set_Symmetry_to_CC_Mode_and_Value>
 8002b06:	e008      	b.n	8002b1a <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 8002b08:	4b64      	ldr	r3, [pc, #400]	@ (8002c9c <UART2_RX_transfer_complete_callback+0x1178>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b18      	cmp	r3, #24
 8002b10:	d103      	bne.n	8002b1a <UART2_RX_transfer_complete_callback+0xff6>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8002b12:	4b67      	ldr	r3, [pc, #412]	@ (8002cb0 <UART2_RX_transfer_complete_callback+0x118c>)
 8002b14:	0018      	movs	r0, r3
 8002b16:	f7fe f8b5 	bl	8000c84 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 8002b1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002c98 <UART2_RX_transfer_complete_callback+0x1174>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8002b20:	4b5e      	ldr	r3, [pc, #376]	@ (8002c9c <UART2_RX_transfer_complete_callback+0x1178>)
 8002b22:	0018      	movs	r0, r3
 8002b24:	f7fe f9da 	bl	8000edc <Clear_Data_Buffer>
 8002b28:	e0a8      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 8002b2a:	4b5b      	ldr	r3, [pc, #364]	@ (8002c98 <UART2_RX_transfer_complete_callback+0x1174>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8002b30:	4b5a      	ldr	r3, [pc, #360]	@ (8002c9c <UART2_RX_transfer_complete_callback+0x1178>)
 8002b32:	0018      	movs	r0, r3
 8002b34:	f7fe f9d2 	bl	8000edc <Clear_Data_Buffer>
 8002b38:	e0a0      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(&active_status_byte) == YES){
 8002b3a:	4b57      	ldr	r3, [pc, #348]	@ (8002c98 <UART2_RX_transfer_complete_callback+0x1174>)
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f7fe f9ad 	bl	8000e9c <Is_Sysex_Start_Status_Byte>
 8002b42:	0003      	movs	r3, r0
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d000      	beq.n	8002b4a <UART2_RX_transfer_complete_callback+0x1026>
 8002b48:	e098      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

						//@TODO

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8002b4a:	4b54      	ldr	r3, [pc, #336]	@ (8002c9c <UART2_RX_transfer_complete_callback+0x1178>)
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f7fe f9b9 	bl	8000ec4 <Is_Data_Buffer_Empty>
 8002b52:	e093      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8002b54:	4b51      	ldr	r3, [pc, #324]	@ (8002c9c <UART2_RX_transfer_complete_callback+0x1178>)
 8002b56:	0018      	movs	r0, r3
 8002b58:	f7fe f9c0 	bl	8000edc <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8002b5c:	4a52      	ldr	r2, [pc, #328]	@ (8002ca8 <UART2_RX_transfer_complete_callback+0x1184>)
 8002b5e:	4b51      	ldr	r3, [pc, #324]	@ (8002ca4 <UART2_RX_transfer_complete_callback+0x1180>)
 8002b60:	0011      	movs	r1, r2
 8002b62:	0018      	movs	r0, r3
 8002b64:	f7fe f9f6 	bl	8000f54 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8002b68:	4b4d      	ldr	r3, [pc, #308]	@ (8002ca0 <UART2_RX_transfer_complete_callback+0x117c>)
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f7fe f926 	bl	8000dbc <Is_PC_Status_Byte>
 8002b70:	0003      	movs	r3, r0
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d130      	bne.n	8002bd8 <UART2_RX_transfer_complete_callback+0x10b4>

						running_status_byte = (uint8_t)*rx_buffer;
 8002b76:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca0 <UART2_RX_transfer_complete_callback+0x117c>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	4b4f      	ldr	r3, [pc, #316]	@ (8002cbc <UART2_RX_transfer_complete_callback+0x1198>)
 8002b7e:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8002b80:	4b4a      	ldr	r3, [pc, #296]	@ (8002cac <UART2_RX_transfer_complete_callback+0x1188>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4b46      	ldr	r3, [pc, #280]	@ (8002ca0 <UART2_RX_transfer_complete_callback+0x117c>)
 8002b88:	0011      	movs	r1, r2
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f7fe f98c 	bl	8000ea8 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8002b90:	0003      	movs	r3, r0
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d10c      	bne.n	8002bb0 <UART2_RX_transfer_complete_callback+0x108c>

							active_status_byte = (uint8_t)*rx_buffer;
 8002b96:	4b42      	ldr	r3, [pc, #264]	@ (8002ca0 <UART2_RX_transfer_complete_callback+0x117c>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	4b3e      	ldr	r3, [pc, #248]	@ (8002c98 <UART2_RX_transfer_complete_callback+0x1174>)
 8002b9e:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8002ba0:	2380      	movs	r3, #128	@ 0x80
 8002ba2:	005a      	lsls	r2, r3, #1
 8002ba4:	4b40      	ldr	r3, [pc, #256]	@ (8002ca8 <UART2_RX_transfer_complete_callback+0x1184>)
 8002ba6:	0011      	movs	r1, r2
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f002 f91f 	bl	8004dec <Set_Status_Bit>
 8002bae:	e065      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8002bb0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca8 <UART2_RX_transfer_complete_callback+0x1184>)
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f7fe f9c4 	bl	8000f40 <Is_OMNI_On>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d15e      	bne.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8002bbe:	4b38      	ldr	r3, [pc, #224]	@ (8002ca0 <UART2_RX_transfer_complete_callback+0x117c>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	4b34      	ldr	r3, [pc, #208]	@ (8002c98 <UART2_RX_transfer_complete_callback+0x1174>)
 8002bc6:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8002bc8:	2380      	movs	r3, #128	@ 0x80
 8002bca:	005a      	lsls	r2, r3, #1
 8002bcc:	4b36      	ldr	r3, [pc, #216]	@ (8002ca8 <UART2_RX_transfer_complete_callback+0x1184>)
 8002bce:	0011      	movs	r1, r2
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f002 f90b 	bl	8004dec <Set_Status_Bit>
 8002bd6:	e051      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8002bd8:	4b31      	ldr	r3, [pc, #196]	@ (8002ca0 <UART2_RX_transfer_complete_callback+0x117c>)
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f7fe f8f5 	bl	8000dca <Is_CC_Status_Byte>
 8002be0:	0003      	movs	r3, r0
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d130      	bne.n	8002c48 <UART2_RX_transfer_complete_callback+0x1124>

						running_status_byte = (uint8_t)*rx_buffer;
 8002be6:	4b2e      	ldr	r3, [pc, #184]	@ (8002ca0 <UART2_RX_transfer_complete_callback+0x117c>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	4b33      	ldr	r3, [pc, #204]	@ (8002cbc <UART2_RX_transfer_complete_callback+0x1198>)
 8002bee:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8002bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8002cac <UART2_RX_transfer_complete_callback+0x1188>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca0 <UART2_RX_transfer_complete_callback+0x117c>)
 8002bf8:	0011      	movs	r1, r2
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f7fe f954 	bl	8000ea8 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8002c00:	0003      	movs	r3, r0
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d10c      	bne.n	8002c20 <UART2_RX_transfer_complete_callback+0x10fc>

							active_status_byte = (uint8_t)*rx_buffer;
 8002c06:	4b26      	ldr	r3, [pc, #152]	@ (8002ca0 <UART2_RX_transfer_complete_callback+0x117c>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	4b22      	ldr	r3, [pc, #136]	@ (8002c98 <UART2_RX_transfer_complete_callback+0x1174>)
 8002c0e:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8002c10:	2380      	movs	r3, #128	@ 0x80
 8002c12:	005a      	lsls	r2, r3, #1
 8002c14:	4b24      	ldr	r3, [pc, #144]	@ (8002ca8 <UART2_RX_transfer_complete_callback+0x1184>)
 8002c16:	0011      	movs	r1, r2
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f002 f8e7 	bl	8004dec <Set_Status_Bit>
 8002c1e:	e02d      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8002c20:	4b21      	ldr	r3, [pc, #132]	@ (8002ca8 <UART2_RX_transfer_complete_callback+0x1184>)
 8002c22:	0018      	movs	r0, r3
 8002c24:	f7fe f98c 	bl	8000f40 <Is_OMNI_On>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d126      	bne.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8002c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ca0 <UART2_RX_transfer_complete_callback+0x117c>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	4b18      	ldr	r3, [pc, #96]	@ (8002c98 <UART2_RX_transfer_complete_callback+0x1174>)
 8002c36:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8002c38:	2380      	movs	r3, #128	@ 0x80
 8002c3a:	005a      	lsls	r2, r3, #1
 8002c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca8 <UART2_RX_transfer_complete_callback+0x1184>)
 8002c3e:	0011      	movs	r1, r2
 8002c40:	0018      	movs	r0, r3
 8002c42:	f002 f8d3 	bl	8004dec <Set_Status_Bit>
 8002c46:	e019      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8002c48:	4b15      	ldr	r3, [pc, #84]	@ (8002ca0 <UART2_RX_transfer_complete_callback+0x117c>)
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f7fe f926 	bl	8000e9c <Is_Sysex_Start_Status_Byte>
 8002c50:	0003      	movs	r3, r0
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d112      	bne.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8002c56:	4b12      	ldr	r3, [pc, #72]	@ (8002ca0 <UART2_RX_transfer_complete_callback+0x117c>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c98 <UART2_RX_transfer_complete_callback+0x1174>)
 8002c5e:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8002c60:	4b16      	ldr	r3, [pc, #88]	@ (8002cbc <UART2_RX_transfer_complete_callback+0x1198>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8002c66:	2380      	movs	r3, #128	@ 0x80
 8002c68:	005a      	lsls	r2, r3, #1
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <UART2_RX_transfer_complete_callback+0x1184>)
 8002c6c:	0011      	movs	r1, r2
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f002 f8bc 	bl	8004dec <Set_Status_Bit>
 8002c74:	e002      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002c76:	46c0      	nop			@ (mov r8, r8)
 8002c78:	e000      	b.n	8002c7c <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c7a:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}

	*rx_buffer = 0;
 8002c7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ca0 <UART2_RX_transfer_complete_callback+0x117c>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8002c82:	4907      	ldr	r1, [pc, #28]	@ (8002ca0 <UART2_RX_transfer_complete_callback+0x117c>)
 8002c84:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc0 <UART2_RX_transfer_complete_callback+0x119c>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f006 fb79 	bl	8009380 <HAL_UART_Receive_DMA>
}
 8002c8e:	46c0      	nop			@ (mov r8, r8)
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b002      	add	sp, #8
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	46c0      	nop			@ (mov r8, r8)
 8002c98:	20000547 	.word	0x20000547
 8002c9c:	2000053c 	.word	0x2000053c
 8002ca0:	2000054c 	.word	0x2000054c
 8002ca4:	20000cb4 	.word	0x20000cb4
 8002ca8:	20000cbc 	.word	0x20000cbc
 8002cac:	20000548 	.word	0x20000548
 8002cb0:	2000053d 	.word	0x2000053d
 8002cb4:	20000028 	.word	0x20000028
 8002cb8:	20000d38 	.word	0x20000d38
 8002cbc:	20000546 	.word	0x20000546
 8002cc0:	2000067c 	.word	0x2000067c

08002cc4 <LPTIM1_callback>:
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}

void __attribute__((optimize("O0")))LPTIM1_callback(LPTIM_HandleTypeDef *hlptim){
 8002cc4:	b5b0      	push	{r4, r5, r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	6078      	str	r0, [r7, #4]
	static volatile enum Validate preset_select_mode_is_active = NO;
	static volatile enum Validate save_or_preset_mode_engaged = NO;

	//CHECK IF NEED TAP_PENDING TRANSITION

	uint8_t pin_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8002ccc:	250f      	movs	r5, #15
 8002cce:	197c      	adds	r4, r7, r5
 8002cd0:	2380      	movs	r3, #128	@ 0x80
 8002cd2:	00da      	lsls	r2, r3, #3
 8002cd4:	23a0      	movs	r3, #160	@ 0xa0
 8002cd6:	05db      	lsls	r3, r3, #23
 8002cd8:	0011      	movs	r1, r2
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f003 fab2 	bl	8006244 <HAL_GPIO_ReadPin>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	7023      	strb	r3, [r4, #0]

	if(save_or_preset_mode_engaged == NO){
 8002ce4:	4bc2      	ldr	r3, [pc, #776]	@ (8002ff0 <LPTIM1_callback+0x32c>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d000      	beq.n	8002cf0 <LPTIM1_callback+0x2c>
 8002cee:	e1a2      	b.n	8003036 <LPTIM1_callback+0x372>

		if((speed_fsm.current_state.shared_state == MANUAL_MODE) && (pin_state == 0)){
 8002cf0:	4bc0      	ldr	r3, [pc, #768]	@ (8002ff4 <LPTIM1_callback+0x330>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d10a      	bne.n	8002d10 <LPTIM1_callback+0x4c>
 8002cfa:	197b      	adds	r3, r7, r5
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <LPTIM1_callback+0x4c>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8002d02:	4bbc      	ldr	r3, [pc, #752]	@ (8002ff4 <LPTIM1_callback+0x330>)
 8002d04:	2205      	movs	r2, #5
 8002d06:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8002d08:	4bba      	ldr	r3, [pc, #744]	@ (8002ff4 <LPTIM1_callback+0x330>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	705a      	strb	r2, [r3, #1]
 8002d0e:	e070      	b.n	8002df2 <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.shared_state == CC_MODE) && (pin_state == 0)){
 8002d10:	4bb8      	ldr	r3, [pc, #736]	@ (8002ff4 <LPTIM1_callback+0x330>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d10b      	bne.n	8002d32 <LPTIM1_callback+0x6e>
 8002d1a:	230f      	movs	r3, #15
 8002d1c:	18fb      	adds	r3, r7, r3
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d106      	bne.n	8002d32 <LPTIM1_callback+0x6e>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8002d24:	4bb3      	ldr	r3, [pc, #716]	@ (8002ff4 <LPTIM1_callback+0x330>)
 8002d26:	2205      	movs	r2, #5
 8002d28:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = CC_MODE;
 8002d2a:	4bb2      	ldr	r3, [pc, #712]	@ (8002ff4 <LPTIM1_callback+0x330>)
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	705a      	strb	r2, [r3, #1]
 8002d30:	e05f      	b.n	8002df2 <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.shared_state == PC_MODE) && (pin_state == 0)){
 8002d32:	4bb0      	ldr	r3, [pc, #704]	@ (8002ff4 <LPTIM1_callback+0x330>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d10b      	bne.n	8002d54 <LPTIM1_callback+0x90>
 8002d3c:	230f      	movs	r3, #15
 8002d3e:	18fb      	adds	r3, r7, r3
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d106      	bne.n	8002d54 <LPTIM1_callback+0x90>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8002d46:	4bab      	ldr	r3, [pc, #684]	@ (8002ff4 <LPTIM1_callback+0x330>)
 8002d48:	2205      	movs	r2, #5
 8002d4a:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = PC_MODE;
 8002d4c:	4ba9      	ldr	r3, [pc, #676]	@ (8002ff4 <LPTIM1_callback+0x330>)
 8002d4e:	2203      	movs	r2, #3
 8002d50:	705a      	strb	r2, [r3, #1]
 8002d52:	e04e      	b.n	8002df2 <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8002d54:	4ba7      	ldr	r3, [pc, #668]	@ (8002ff4 <LPTIM1_callback+0x330>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b06      	cmp	r3, #6
 8002d5c:	d122      	bne.n	8002da4 <LPTIM1_callback+0xe0>
 8002d5e:	230f      	movs	r3, #15
 8002d60:	18fb      	adds	r3, r7, r3
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d11d      	bne.n	8002da4 <LPTIM1_callback+0xe0>
 8002d68:	4ba3      	ldr	r3, [pc, #652]	@ (8002ff8 <LPTIM1_callback+0x334>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d118      	bne.n	8002da4 <LPTIM1_callback+0xe0>
 8002d72:	4ba2      	ldr	r3, [pc, #648]	@ (8002ffc <LPTIM1_callback+0x338>)
 8002d74:	2120      	movs	r1, #32
 8002d76:	0018      	movs	r0, r3
 8002d78:	f002 f832 	bl	8004de0 <Get_Status_Bit>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d110      	bne.n	8002da4 <LPTIM1_callback+0xe0>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8002d82:	4b9c      	ldr	r3, [pc, #624]	@ (8002ff4 <LPTIM1_callback+0x330>)
 8002d84:	2205      	movs	r2, #5
 8002d86:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_MODE;
 8002d88:	4b9a      	ldr	r3, [pc, #616]	@ (8002ff4 <LPTIM1_callback+0x330>)
 8002d8a:	2206      	movs	r2, #6
 8002d8c:	705a      	strb	r2, [r3, #1]

			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002d8e:	4b9b      	ldr	r3, [pc, #620]	@ (8002ffc <LPTIM1_callback+0x338>)
 8002d90:	2120      	movs	r1, #32
 8002d92:	0018      	movs	r0, r3
 8002d94:	f002 f82e 	bl	8004df4 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002d98:	4b98      	ldr	r3, [pc, #608]	@ (8002ffc <LPTIM1_callback+0x338>)
 8002d9a:	2140      	movs	r1, #64	@ 0x40
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f002 f829 	bl	8004df4 <Clear_Status_Bit>
 8002da2:	e026      	b.n	8002df2 <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8002da4:	4b93      	ldr	r3, [pc, #588]	@ (8002ff4 <LPTIM1_callback+0x330>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d121      	bne.n	8002df2 <LPTIM1_callback+0x12e>
 8002dae:	230f      	movs	r3, #15
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d11c      	bne.n	8002df2 <LPTIM1_callback+0x12e>
 8002db8:	4b8f      	ldr	r3, [pc, #572]	@ (8002ff8 <LPTIM1_callback+0x334>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d117      	bne.n	8002df2 <LPTIM1_callback+0x12e>
 8002dc2:	4b8e      	ldr	r3, [pc, #568]	@ (8002ffc <LPTIM1_callback+0x338>)
 8002dc4:	2120      	movs	r1, #32
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f002 f80a 	bl	8004de0 <Get_Status_Bit>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d10f      	bne.n	8002df2 <LPTIM1_callback+0x12e>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8002dd2:	4b88      	ldr	r3, [pc, #544]	@ (8002ff4 <LPTIM1_callback+0x330>)
 8002dd4:	2205      	movs	r2, #5
 8002dd6:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002dd8:	4b86      	ldr	r3, [pc, #536]	@ (8002ff4 <LPTIM1_callback+0x330>)
 8002dda:	2208      	movs	r2, #8
 8002ddc:	705a      	strb	r2, [r3, #1]

			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002dde:	4b87      	ldr	r3, [pc, #540]	@ (8002ffc <LPTIM1_callback+0x338>)
 8002de0:	2120      	movs	r1, #32
 8002de2:	0018      	movs	r0, r3
 8002de4:	f002 f806 	bl	8004df4 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002de8:	4b84      	ldr	r3, [pc, #528]	@ (8002ffc <LPTIM1_callback+0x338>)
 8002dea:	2140      	movs	r1, #64	@ 0x40
 8002dec:	0018      	movs	r0, r3
 8002dee:	f002 f801 	bl	8004df4 <Clear_Status_Bit>
		}

		//CHECK TAP TEMPO STATE

		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == TAP_MODE)){
 8002df2:	4b80      	ldr	r3, [pc, #512]	@ (8002ff4 <LPTIM1_callback+0x330>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b05      	cmp	r3, #5
 8002dfa:	d004      	beq.n	8002e06 <LPTIM1_callback+0x142>
 8002dfc:	4b7d      	ldr	r3, [pc, #500]	@ (8002ff4 <LPTIM1_callback+0x330>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d11a      	bne.n	8002e3c <LPTIM1_callback+0x178>

			if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8002e06:	4b7e      	ldr	r3, [pc, #504]	@ (8003000 <LPTIM1_callback+0x33c>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d108      	bne.n	8002e22 <LPTIM1_callback+0x15e>

				//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002e10:	2380      	movs	r3, #128	@ 0x80
 8002e12:	0099      	lsls	r1, r3, #2
 8002e14:	23a0      	movs	r3, #160	@ 0xa0
 8002e16:	05db      	lsls	r3, r3, #23
 8002e18:	2200      	movs	r2, #0
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f003 fa18 	bl	8006250 <HAL_GPIO_WritePin>
 8002e20:	e00c      	b.n	8002e3c <LPTIM1_callback+0x178>
				//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);

			}
			else if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 8002e22:	4b77      	ldr	r3, [pc, #476]	@ (8003000 <LPTIM1_callback+0x33c>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d107      	bne.n	8002e3c <LPTIM1_callback+0x178>

				//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8002e2c:	2380      	movs	r3, #128	@ 0x80
 8002e2e:	0099      	lsls	r1, r3, #2
 8002e30:	23a0      	movs	r3, #160	@ 0xa0
 8002e32:	05db      	lsls	r3, r3, #23
 8002e34:	2201      	movs	r2, #1
 8002e36:	0018      	movs	r0, r3
 8002e38:	f003 fa0a 	bl	8006250 <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
			}
		}

		//CHECK FOR SPEED POT CHANGES
		if(Get_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out) == YES){
 8002e3c:	2380      	movs	r3, #128	@ 0x80
 8002e3e:	011a      	lsls	r2, r3, #4
 8002e40:	4b6e      	ldr	r3, [pc, #440]	@ (8002ffc <LPTIM1_callback+0x338>)
 8002e42:	0011      	movs	r1, r2
 8002e44:	0018      	movs	r0, r3
 8002e46:	f001 ffcb 	bl	8004de0 <Get_Status_Bit>
 8002e4a:	0003      	movs	r3, r0
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d000      	beq.n	8002e52 <LPTIM1_callback+0x18e>
 8002e50:	e0c0      	b.n	8002fd4 <LPTIM1_callback+0x310>

			Clear_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8002e52:	2380      	movs	r3, #128	@ 0x80
 8002e54:	011a      	lsls	r2, r3, #4
 8002e56:	4b69      	ldr	r3, [pc, #420]	@ (8002ffc <LPTIM1_callback+0x338>)
 8002e58:	0011      	movs	r1, r2
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f001 ffca 	bl	8004df4 <Clear_Status_Bit>

			pots_counter = 0;
 8002e60:	4b68      	ldr	r3, [pc, #416]	@ (8003004 <LPTIM1_callback+0x340>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]

			//PERFORM SPEED POT CHECKING
			if((speed_fsm.current_state.shared_state == PC_MODE) || (speed_fsm.current_state.shared_state == CC_MODE)){
 8002e66:	4b63      	ldr	r3, [pc, #396]	@ (8002ff4 <LPTIM1_callback+0x330>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d004      	beq.n	8002e7a <LPTIM1_callback+0x1b6>
 8002e70:	4b60      	ldr	r3, [pc, #384]	@ (8002ff4 <LPTIM1_callback+0x330>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d105      	bne.n	8002e86 <LPTIM1_callback+0x1c2>

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8002e7a:	4b63      	ldr	r3, [pc, #396]	@ (8003008 <LPTIM1_callback+0x344>)
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f7fe f8ec 	bl	800105c <Pot_Check>
 8002e84:	e069      	b.n	8002f5a <LPTIM1_callback+0x296>
			}
			else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8002e86:	4b5b      	ldr	r3, [pc, #364]	@ (8002ff4 <LPTIM1_callback+0x330>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b06      	cmp	r3, #6
 8002e8e:	d117      	bne.n	8002ec0 <LPTIM1_callback+0x1fc>
 8002e90:	4b59      	ldr	r3, [pc, #356]	@ (8002ff8 <LPTIM1_callback+0x334>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d112      	bne.n	8002ec0 <LPTIM1_callback+0x1fc>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002e9a:	4b58      	ldr	r3, [pc, #352]	@ (8002ffc <LPTIM1_callback+0x338>)
 8002e9c:	2140      	movs	r1, #64	@ 0x40
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f001 ffa4 	bl	8004dec <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8002ea4:	4b55      	ldr	r3, [pc, #340]	@ (8002ffc <LPTIM1_callback+0x338>)
 8002ea6:	2120      	movs	r1, #32
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f001 ff99 	bl	8004de0 <Get_Status_Bit>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d152      	bne.n	8002f5a <LPTIM1_callback+0x296>

					Pot_Check(ADCResultsDMA, SPEED_POT);
 8002eb4:	4b54      	ldr	r3, [pc, #336]	@ (8003008 <LPTIM1_callback+0x344>)
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f7fe f8cf 	bl	800105c <Pot_Check>
				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8002ebe:	e04c      	b.n	8002f5a <LPTIM1_callback+0x296>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8002ec0:	4b4c      	ldr	r3, [pc, #304]	@ (8002ff4 <LPTIM1_callback+0x330>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d12b      	bne.n	8002f22 <LPTIM1_callback+0x25e>
 8002eca:	4b4b      	ldr	r3, [pc, #300]	@ (8002ff8 <LPTIM1_callback+0x334>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d126      	bne.n	8002f22 <LPTIM1_callback+0x25e>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002ed4:	4b49      	ldr	r3, [pc, #292]	@ (8002ffc <LPTIM1_callback+0x338>)
 8002ed6:	2140      	movs	r1, #64	@ 0x40
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f001 ff87 	bl	8004dec <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8002ede:	4b47      	ldr	r3, [pc, #284]	@ (8002ffc <LPTIM1_callback+0x338>)
 8002ee0:	2120      	movs	r1, #32
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f001 ff7c 	bl	8004de0 <Get_Status_Bit>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d135      	bne.n	8002f5a <LPTIM1_callback+0x296>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8002eee:	2380      	movs	r3, #128	@ 0x80
 8002ef0:	0099      	lsls	r1, r3, #2
 8002ef2:	23a0      	movs	r3, #160	@ 0xa0
 8002ef4:	05db      	lsls	r3, r3, #23
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f003 f9a9 	bl	8006250 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002efe:	4b43      	ldr	r3, [pc, #268]	@ (800300c <LPTIM1_callback+0x348>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	2140      	movs	r1, #64	@ 0x40
 8002f04:	0018      	movs	r0, r3
 8002f06:	f003 f9a3 	bl	8006250 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = NOT_COMPILING;
 8002f0a:	4b41      	ldr	r3, [pc, #260]	@ (8003010 <LPTIM1_callback+0x34c>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 0;
 8002f10:	4b40      	ldr	r3, [pc, #256]	@ (8003014 <LPTIM1_callback+0x350>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	701a      	strb	r2, [r3, #0]

					Pot_Check(ADCResultsDMA, SPEED_POT);
 8002f16:	4b3c      	ldr	r3, [pc, #240]	@ (8003008 <LPTIM1_callback+0x344>)
 8002f18:	2101      	movs	r1, #1
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f7fe f89e 	bl	800105c <Pot_Check>
				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8002f20:	e01b      	b.n	8002f5a <LPTIM1_callback+0x296>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8002f22:	4b34      	ldr	r3, [pc, #208]	@ (8002ff4 <LPTIM1_callback+0x330>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d116      	bne.n	8002f5a <LPTIM1_callback+0x296>
 8002f2c:	4b32      	ldr	r3, [pc, #200]	@ (8002ff8 <LPTIM1_callback+0x334>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d111      	bne.n	8002f5a <LPTIM1_callback+0x296>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002f36:	4b31      	ldr	r3, [pc, #196]	@ (8002ffc <LPTIM1_callback+0x338>)
 8002f38:	2140      	movs	r1, #64	@ 0x40
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f001 ff56 	bl	8004dec <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8002f40:	4b2e      	ldr	r3, [pc, #184]	@ (8002ffc <LPTIM1_callback+0x338>)
 8002f42:	2120      	movs	r1, #32
 8002f44:	0018      	movs	r0, r3
 8002f46:	f001 ff4b 	bl	8004de0 <Get_Status_Bit>
 8002f4a:	0003      	movs	r3, r0
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d104      	bne.n	8002f5a <LPTIM1_callback+0x296>

					Pot_Check(ADCResultsDMA, SPEED_POT);
 8002f50:	4b2d      	ldr	r3, [pc, #180]	@ (8003008 <LPTIM1_callback+0x344>)
 8002f52:	2101      	movs	r1, #1
 8002f54:	0018      	movs	r0, r3
 8002f56:	f7fe f881 	bl	800105c <Pot_Check>
				}
			}

			if((waveshape_fsm.current_state == PC_MODE) || (waveshape_fsm.current_state == CC_MODE)){
 8002f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003018 <LPTIM1_callback+0x354>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d004      	beq.n	8002f6e <LPTIM1_callback+0x2aa>
 8002f64:	4b2c      	ldr	r3, [pc, #176]	@ (8003018 <LPTIM1_callback+0x354>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d104      	bne.n	8002f78 <LPTIM1_callback+0x2b4>
				Pot_Check(ADCResultsDMA, WAVESHAPE_POT);
 8002f6e:	4b26      	ldr	r3, [pc, #152]	@ (8003008 <LPTIM1_callback+0x344>)
 8002f70:	2100      	movs	r1, #0
 8002f72:	0018      	movs	r0, r3
 8002f74:	f7fe f872 	bl	800105c <Pot_Check>
			}
			if((depth_fsm.current_state == PC_MODE) || (depth_fsm.current_state == CC_MODE)){
 8002f78:	4b28      	ldr	r3, [pc, #160]	@ (800301c <LPTIM1_callback+0x358>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d004      	beq.n	8002f8c <LPTIM1_callback+0x2c8>
 8002f82:	4b26      	ldr	r3, [pc, #152]	@ (800301c <LPTIM1_callback+0x358>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d104      	bne.n	8002f96 <LPTIM1_callback+0x2d2>
				Pot_Check(ADCResultsDMA, DEPTH_POT);
 8002f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8003008 <LPTIM1_callback+0x344>)
 8002f8e:	2102      	movs	r1, #2
 8002f90:	0018      	movs	r0, r3
 8002f92:	f7fe f863 	bl	800105c <Pot_Check>
			}
			if((symmetry_fsm.current_state == PC_MODE) || (symmetry_fsm.current_state == CC_MODE)){
 8002f96:	4b22      	ldr	r3, [pc, #136]	@ (8003020 <LPTIM1_callback+0x35c>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d004      	beq.n	8002faa <LPTIM1_callback+0x2e6>
 8002fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8003020 <LPTIM1_callback+0x35c>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d104      	bne.n	8002fb4 <LPTIM1_callback+0x2f0>
				Pot_Check(ADCResultsDMA, SYMMETRY_POT);
 8002faa:	4b17      	ldr	r3, [pc, #92]	@ (8003008 <LPTIM1_callback+0x344>)
 8002fac:	2103      	movs	r1, #3
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f7fe f854 	bl	800105c <Pot_Check>
			}
			if((phase_fsm.current_state == PC_MODE) || (phase_fsm.current_state == CC_MODE)){
 8002fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003024 <LPTIM1_callback+0x360>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d004      	beq.n	8002fc8 <LPTIM1_callback+0x304>
 8002fbe:	4b19      	ldr	r3, [pc, #100]	@ (8003024 <LPTIM1_callback+0x360>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d136      	bne.n	8003036 <LPTIM1_callback+0x372>
				Pot_Check(ADCResultsDMA, PHASE_POT);
 8002fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8003008 <LPTIM1_callback+0x344>)
 8002fca:	2104      	movs	r1, #4
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f7fe f845 	bl	800105c <Pot_Check>
 8002fd2:	e030      	b.n	8003036 <LPTIM1_callback+0x372>
			}

		}
		else{

			if(pots_counter == POT_COUNTER_COUNT){
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003004 <LPTIM1_callback+0x340>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b40      	cmp	r3, #64	@ 0x40
 8002fdc:	d124      	bne.n	8003028 <LPTIM1_callback+0x364>

				Set_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8002fde:	2380      	movs	r3, #128	@ 0x80
 8002fe0:	011a      	lsls	r2, r3, #4
 8002fe2:	4b06      	ldr	r3, [pc, #24]	@ (8002ffc <LPTIM1_callback+0x338>)
 8002fe4:	0011      	movs	r1, r2
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f001 ff00 	bl	8004dec <Set_Status_Bit>
 8002fec:	e023      	b.n	8003036 <LPTIM1_callback+0x372>
 8002fee:	46c0      	nop			@ (mov r8, r8)
 8002ff0:	20000c94 	.word	0x20000c94
 8002ff4:	20000448 	.word	0x20000448
 8002ff8:	20000434 	.word	0x20000434
 8002ffc:	20000cbc 	.word	0x20000cbc
 8003000:	20000c98 	.word	0x20000c98
 8003004:	20000562 	.word	0x20000562
 8003008:	20000d60 	.word	0x20000d60
 800300c:	50000800 	.word	0x50000800
 8003010:	20000d6c 	.word	0x20000d6c
 8003014:	20000ca8 	.word	0x20000ca8
 8003018:	20000440 	.word	0x20000440
 800301c:	20000444 	.word	0x20000444
 8003020:	2000043c 	.word	0x2000043c
 8003024:	20000438 	.word	0x20000438
			}
			else{

				pots_counter++;
 8003028:	4bc3      	ldr	r3, [pc, #780]	@ (8003338 <LPTIM1_callback+0x674>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	3301      	adds	r3, #1
 8003030:	b2da      	uxtb	r2, r3
 8003032:	4bc1      	ldr	r3, [pc, #772]	@ (8003338 <LPTIM1_callback+0x674>)
 8003034:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	//check if tap tempo switch is depressed
	Check_Tap_Tempo_Switch_State(&tap_tempo_switch_states);
 8003036:	4bc1      	ldr	r3, [pc, #772]	@ (800333c <LPTIM1_callback+0x678>)
 8003038:	0018      	movs	r0, r3
 800303a:	f7fe f8b3 	bl	80011a4 <Check_Tap_Tempo_Switch_State>
	static uint64_t depressed_num;
	static enum Preset_Selected preset = PRESET_ONE;
	enum LED_States led_state;
	static enum LED_States led_state_saved;

	led_state = LED_fsm.current_state;
 800303e:	230e      	movs	r3, #14
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	4abf      	ldr	r2, [pc, #764]	@ (8003340 <LPTIM1_callback+0x67c>)
 8003044:	7812      	ldrb	r2, [r2, #0]
 8003046:	701a      	strb	r2, [r3, #0]

	//if preset save timer has timed out, come out of preset save mode
	if(Get_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Has_Timed_Out) == YES){
 8003048:	2380      	movs	r3, #128	@ 0x80
 800304a:	019a      	lsls	r2, r3, #6
 800304c:	4bbd      	ldr	r3, [pc, #756]	@ (8003344 <LPTIM1_callback+0x680>)
 800304e:	0011      	movs	r1, r2
 8003050:	0018      	movs	r0, r3
 8003052:	f001 fec5 	bl	8004de0 <Get_Status_Bit>
 8003056:	0003      	movs	r3, r0
 8003058:	2b01      	cmp	r3, #1
 800305a:	d121      	bne.n	80030a0 <LPTIM1_callback+0x3dc>

		Clear_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Has_Timed_Out);
 800305c:	2380      	movs	r3, #128	@ 0x80
 800305e:	019a      	lsls	r2, r3, #6
 8003060:	4bb8      	ldr	r3, [pc, #736]	@ (8003344 <LPTIM1_callback+0x680>)
 8003062:	0011      	movs	r1, r2
 8003064:	0018      	movs	r0, r3
 8003066:	f001 fec5 	bl	8004df4 <Clear_Status_Bit>

		preset = PRESET_ONE;
 800306a:	4bb7      	ldr	r3, [pc, #732]	@ (8003348 <LPTIM1_callback+0x684>)
 800306c:	2201      	movs	r2, #1
 800306e:	701a      	strb	r2, [r3, #0]
		preset_save_mode_is_active = NO;
 8003070:	4bb6      	ldr	r3, [pc, #728]	@ (800334c <LPTIM1_callback+0x688>)
 8003072:	2200      	movs	r2, #0
 8003074:	701a      	strb	r2, [r3, #0]
		preset_select_mode_is_active = NO;
 8003076:	4bb6      	ldr	r3, [pc, #728]	@ (8003350 <LPTIM1_callback+0x68c>)
 8003078:	2200      	movs	r2, #0
 800307a:	701a      	strb	r2, [r3, #0]
		save_or_preset_mode_engaged = NO;
 800307c:	4bb5      	ldr	r3, [pc, #724]	@ (8003354 <LPTIM1_callback+0x690>)
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
		LED_fsm.prev_state = LED_fsm.current_state;
 8003082:	4baf      	ldr	r3, [pc, #700]	@ (8003340 <LPTIM1_callback+0x67c>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	b2da      	uxtb	r2, r3
 8003088:	4bad      	ldr	r3, [pc, #692]	@ (8003340 <LPTIM1_callback+0x67c>)
 800308a:	705a      	strb	r2, [r3, #1]
		LED_fsm.current_state = led_state_saved;
 800308c:	4bb2      	ldr	r3, [pc, #712]	@ (8003358 <LPTIM1_callback+0x694>)
 800308e:	781a      	ldrb	r2, [r3, #0]
 8003090:	4bab      	ldr	r3, [pc, #684]	@ (8003340 <LPTIM1_callback+0x67c>)
 8003092:	701a      	strb	r2, [r3, #0]
		depressed_num = 0;
 8003094:	49b1      	ldr	r1, [pc, #708]	@ (800335c <LPTIM1_callback+0x698>)
 8003096:	2200      	movs	r2, #0
 8003098:	2300      	movs	r3, #0
 800309a:	600a      	str	r2, [r1, #0]
 800309c:	604b      	str	r3, [r1, #4]
 800309e:	e194      	b.n	80033ca <LPTIM1_callback+0x706>

	}
	else{

		if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 80030a0:	4ba6      	ldr	r3, [pc, #664]	@ (800333c <LPTIM1_callback+0x678>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d000      	beq.n	80030ac <LPTIM1_callback+0x3e8>
 80030aa:	e172      	b.n	8003392 <LPTIM1_callback+0x6ce>

			if((preset_save_mode_is_active == NO) && (preset_select_mode_is_active == NO)){
 80030ac:	4ba7      	ldr	r3, [pc, #668]	@ (800334c <LPTIM1_callback+0x688>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d000      	beq.n	80030b8 <LPTIM1_callback+0x3f4>
 80030b6:	e08a      	b.n	80031ce <LPTIM1_callback+0x50a>
 80030b8:	4ba5      	ldr	r3, [pc, #660]	@ (8003350 <LPTIM1_callback+0x68c>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d000      	beq.n	80030c4 <LPTIM1_callback+0x400>
 80030c2:	e084      	b.n	80031ce <LPTIM1_callback+0x50a>

				if((depressed_num >= TAP_TEMPO_SWITCH_PRESET_SELECT_MODE_ADVANCE_COUNT_MIN) && (depressed_num <  TAP_TEMPO_SWITCH_PRESET_SELECT_MODE_ADVANCE_COUNT_MAX)){
 80030c4:	4ba5      	ldr	r3, [pc, #660]	@ (800335c <LPTIM1_callback+0x698>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d104      	bne.n	80030d8 <LPTIM1_callback+0x414>
 80030ce:	d113      	bne.n	80030f8 <LPTIM1_callback+0x434>
 80030d0:	21fa      	movs	r1, #250	@ 0xfa
 80030d2:	00c9      	lsls	r1, r1, #3
 80030d4:	428a      	cmp	r2, r1
 80030d6:	d30f      	bcc.n	80030f8 <LPTIM1_callback+0x434>
 80030d8:	4ba0      	ldr	r3, [pc, #640]	@ (800335c <LPTIM1_callback+0x698>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10a      	bne.n	80030f8 <LPTIM1_callback+0x434>
 80030e2:	d102      	bne.n	80030ea <LPTIM1_callback+0x426>
 80030e4:	499e      	ldr	r1, [pc, #632]	@ (8003360 <LPTIM1_callback+0x69c>)
 80030e6:	428a      	cmp	r2, r1
 80030e8:	d806      	bhi.n	80030f8 <LPTIM1_callback+0x434>

					preset_select_mode_is_active = YES;
 80030ea:	4b99      	ldr	r3, [pc, #612]	@ (8003350 <LPTIM1_callback+0x68c>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	701a      	strb	r2, [r3, #0]
					save_or_preset_mode_engaged = YES;
 80030f0:	4b98      	ldr	r3, [pc, #608]	@ (8003354 <LPTIM1_callback+0x690>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	701a      	strb	r2, [r3, #0]
 80030f6:	e01b      	b.n	8003130 <LPTIM1_callback+0x46c>

				}
				else if((depressed_num >= TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT_MIN) && (depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT_MAX)){
 80030f8:	4b98      	ldr	r3, [pc, #608]	@ (800335c <LPTIM1_callback+0x698>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d103      	bne.n	800310a <LPTIM1_callback+0x446>
 8003102:	d115      	bne.n	8003130 <LPTIM1_callback+0x46c>
 8003104:	4997      	ldr	r1, [pc, #604]	@ (8003364 <LPTIM1_callback+0x6a0>)
 8003106:	428a      	cmp	r2, r1
 8003108:	d912      	bls.n	8003130 <LPTIM1_callback+0x46c>
 800310a:	4b94      	ldr	r3, [pc, #592]	@ (800335c <LPTIM1_callback+0x698>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10a      	bne.n	800312a <LPTIM1_callback+0x466>
 8003114:	d102      	bne.n	800311c <LPTIM1_callback+0x458>
 8003116:	4994      	ldr	r1, [pc, #592]	@ (8003368 <LPTIM1_callback+0x6a4>)
 8003118:	428a      	cmp	r2, r1
 800311a:	d806      	bhi.n	800312a <LPTIM1_callback+0x466>

					preset_save_mode_is_active = YES;
 800311c:	4b8b      	ldr	r3, [pc, #556]	@ (800334c <LPTIM1_callback+0x688>)
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
					save_or_preset_mode_engaged = YES;
 8003122:	4b8c      	ldr	r3, [pc, #560]	@ (8003354 <LPTIM1_callback+0x690>)
 8003124:	2201      	movs	r2, #1
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	e002      	b.n	8003130 <LPTIM1_callback+0x46c>
				}
				else if((depressed_num >= TAP_TEMPO_SWITCH_FACTORY_RESET_COUNT_MIN) && (depressed_num < TAP_TEMPO_SWITCH_FACTORY_RESET_COUNT_MAX)){
 800312a:	4b8c      	ldr	r3, [pc, #560]	@ (800335c <LPTIM1_callback+0x698>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]

					//@TODO Factory Reset Presets, and user preset used array in flash
				}
				if(save_or_preset_mode_engaged == YES){
 8003130:	4b88      	ldr	r3, [pc, #544]	@ (8003354 <LPTIM1_callback+0x690>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b01      	cmp	r3, #1
 8003138:	d000      	beq.n	800313c <LPTIM1_callback+0x478>
 800313a:	e123      	b.n	8003384 <LPTIM1_callback+0x6c0>

					//start counter
					Set_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running);
 800313c:	2380      	movs	r3, #128	@ 0x80
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	4b80      	ldr	r3, [pc, #512]	@ (8003344 <LPTIM1_callback+0x680>)
 8003142:	0011      	movs	r1, r2
 8003144:	0018      	movs	r0, r3
 8003146:	f001 fe51 	bl	8004dec <Set_Status_Bit>
					//reset counter
					preset_save_idle_counter = 0;
 800314a:	4b88      	ldr	r3, [pc, #544]	@ (800336c <LPTIM1_callback+0x6a8>)
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]

					depressed_num = 0;
 8003150:	4982      	ldr	r1, [pc, #520]	@ (800335c <LPTIM1_callback+0x698>)
 8003152:	2200      	movs	r2, #0
 8003154:	2300      	movs	r3, #0
 8003156:	600a      	str	r2, [r1, #0]
 8003158:	604b      	str	r3, [r1, #4]

					led_state_saved = led_state;
 800315a:	4b7f      	ldr	r3, [pc, #508]	@ (8003358 <LPTIM1_callback+0x694>)
 800315c:	220e      	movs	r2, #14
 800315e:	18ba      	adds	r2, r7, r2
 8003160:	7812      	ldrb	r2, [r2, #0]
 8003162:	701a      	strb	r2, [r3, #0]

					if(preset == PRESET_ONE){
 8003164:	4b78      	ldr	r3, [pc, #480]	@ (8003348 <LPTIM1_callback+0x684>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d108      	bne.n	800317e <LPTIM1_callback+0x4ba>

						Set_LED_to_State(&LED_fsm, LED_ONE_BLINK);
 800316c:	4b74      	ldr	r3, [pc, #464]	@ (8003340 <LPTIM1_callback+0x67c>)
 800316e:	2103      	movs	r1, #3
 8003170:	0018      	movs	r0, r3
 8003172:	f7fd fde9 	bl	8000d48 <Set_LED_to_State>
						preset = PRESET_TWO;
 8003176:	4b74      	ldr	r3, [pc, #464]	@ (8003348 <LPTIM1_callback+0x684>)
 8003178:	2202      	movs	r2, #2
 800317a:	701a      	strb	r2, [r3, #0]
				if(save_or_preset_mode_engaged == YES){
 800317c:	e102      	b.n	8003384 <LPTIM1_callback+0x6c0>
					}
					else if(preset == PRESET_TWO){
 800317e:	4b72      	ldr	r3, [pc, #456]	@ (8003348 <LPTIM1_callback+0x684>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d108      	bne.n	8003198 <LPTIM1_callback+0x4d4>

						Set_LED_to_State(&LED_fsm, LED_TWO_BLINK);
 8003186:	4b6e      	ldr	r3, [pc, #440]	@ (8003340 <LPTIM1_callback+0x67c>)
 8003188:	2104      	movs	r1, #4
 800318a:	0018      	movs	r0, r3
 800318c:	f7fd fddc 	bl	8000d48 <Set_LED_to_State>
						preset = PRESET_THREE;
 8003190:	4b6d      	ldr	r3, [pc, #436]	@ (8003348 <LPTIM1_callback+0x684>)
 8003192:	2203      	movs	r2, #3
 8003194:	701a      	strb	r2, [r3, #0]
				if(save_or_preset_mode_engaged == YES){
 8003196:	e0f5      	b.n	8003384 <LPTIM1_callback+0x6c0>
					}
					else if(preset == PRESET_THREE){
 8003198:	4b6b      	ldr	r3, [pc, #428]	@ (8003348 <LPTIM1_callback+0x684>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b03      	cmp	r3, #3
 800319e:	d108      	bne.n	80031b2 <LPTIM1_callback+0x4ee>

						Set_LED_to_State(&LED_fsm, LED_THREE_BLINK);
 80031a0:	4b67      	ldr	r3, [pc, #412]	@ (8003340 <LPTIM1_callback+0x67c>)
 80031a2:	2105      	movs	r1, #5
 80031a4:	0018      	movs	r0, r3
 80031a6:	f7fd fdcf 	bl	8000d48 <Set_LED_to_State>
						preset = PRESET_FOUR;
 80031aa:	4b67      	ldr	r3, [pc, #412]	@ (8003348 <LPTIM1_callback+0x684>)
 80031ac:	2204      	movs	r2, #4
 80031ae:	701a      	strb	r2, [r3, #0]
				if(save_or_preset_mode_engaged == YES){
 80031b0:	e0e8      	b.n	8003384 <LPTIM1_callback+0x6c0>
					}
					else if(preset == PRESET_FOUR){
 80031b2:	4b65      	ldr	r3, [pc, #404]	@ (8003348 <LPTIM1_callback+0x684>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d000      	beq.n	80031bc <LPTIM1_callback+0x4f8>
 80031ba:	e0e3      	b.n	8003384 <LPTIM1_callback+0x6c0>

						Set_LED_to_State(&LED_fsm, LED_FOUR_BLINK);
 80031bc:	4b60      	ldr	r3, [pc, #384]	@ (8003340 <LPTIM1_callback+0x67c>)
 80031be:	2106      	movs	r1, #6
 80031c0:	0018      	movs	r0, r3
 80031c2:	f7fd fdc1 	bl	8000d48 <Set_LED_to_State>
						preset = PRESET_ONE;
 80031c6:	4b60      	ldr	r3, [pc, #384]	@ (8003348 <LPTIM1_callback+0x684>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	701a      	strb	r2, [r3, #0]
				if(save_or_preset_mode_engaged == YES){
 80031cc:	e0da      	b.n	8003384 <LPTIM1_callback+0x6c0>
					}
				}
			}
			else{ //at least one of preset_save and preset_select active

				if((depressed_num >= TAP_TEMPO_SWITCH_PRESET_SAVE_COUNT_MIN) && (depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_COUNT_MAX)){
 80031ce:	4b63      	ldr	r3, [pc, #396]	@ (800335c <LPTIM1_callback+0x698>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d102      	bne.n	80031de <LPTIM1_callback+0x51a>
 80031d8:	d166      	bne.n	80032a8 <LPTIM1_callback+0x5e4>
 80031da:	2a95      	cmp	r2, #149	@ 0x95
 80031dc:	d964      	bls.n	80032a8 <LPTIM1_callback+0x5e4>
 80031de:	4b5f      	ldr	r3, [pc, #380]	@ (800335c <LPTIM1_callback+0x698>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d15f      	bne.n	80032a8 <LPTIM1_callback+0x5e4>
 80031e8:	d103      	bne.n	80031f2 <LPTIM1_callback+0x52e>
 80031ea:	21fa      	movs	r1, #250	@ 0xfa
 80031ec:	0049      	lsls	r1, r1, #1
 80031ee:	428a      	cmp	r2, r1
 80031f0:	d25a      	bcs.n	80032a8 <LPTIM1_callback+0x5e4>

					//get correct preset, as it will be 'off by one'
					if(preset == PRESET_ONE){
 80031f2:	4b55      	ldr	r3, [pc, #340]	@ (8003348 <LPTIM1_callback+0x684>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d103      	bne.n	8003202 <LPTIM1_callback+0x53e>

						preset = PRESET_FOUR;
 80031fa:	4b53      	ldr	r3, [pc, #332]	@ (8003348 <LPTIM1_callback+0x684>)
 80031fc:	2204      	movs	r2, #4
 80031fe:	701a      	strb	r2, [r3, #0]
 8003200:	e016      	b.n	8003230 <LPTIM1_callback+0x56c>
					}
					else if(preset == PRESET_TWO){
 8003202:	4b51      	ldr	r3, [pc, #324]	@ (8003348 <LPTIM1_callback+0x684>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d103      	bne.n	8003212 <LPTIM1_callback+0x54e>

						preset = PRESET_ONE;
 800320a:	4b4f      	ldr	r3, [pc, #316]	@ (8003348 <LPTIM1_callback+0x684>)
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
 8003210:	e00e      	b.n	8003230 <LPTIM1_callback+0x56c>
					}
					else if(preset == PRESET_THREE){
 8003212:	4b4d      	ldr	r3, [pc, #308]	@ (8003348 <LPTIM1_callback+0x684>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b03      	cmp	r3, #3
 8003218:	d103      	bne.n	8003222 <LPTIM1_callback+0x55e>

						preset = PRESET_TWO;
 800321a:	4b4b      	ldr	r3, [pc, #300]	@ (8003348 <LPTIM1_callback+0x684>)
 800321c:	2202      	movs	r2, #2
 800321e:	701a      	strb	r2, [r3, #0]
 8003220:	e006      	b.n	8003230 <LPTIM1_callback+0x56c>
					}
					else if(preset == PRESET_FOUR){
 8003222:	4b49      	ldr	r3, [pc, #292]	@ (8003348 <LPTIM1_callback+0x684>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b04      	cmp	r3, #4
 8003228:	d102      	bne.n	8003230 <LPTIM1_callback+0x56c>

						preset = PRESET_THREE;
 800322a:	4b47      	ldr	r3, [pc, #284]	@ (8003348 <LPTIM1_callback+0x684>)
 800322c:	2203      	movs	r2, #3
 800322e:	701a      	strb	r2, [r3, #0]
					}

					if(preset_save_mode_is_active == YES){
 8003230:	4b46      	ldr	r3, [pc, #280]	@ (800334c <LPTIM1_callback+0x688>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b01      	cmp	r3, #1
 8003238:	d11b      	bne.n	8003272 <LPTIM1_callback+0x5ae>

						//convert running params to preset, and update user preset and user preset used
						Store_Params_as_User_Preset(preset,
 800323a:	4b43      	ldr	r3, [pc, #268]	@ (8003348 <LPTIM1_callback+0x684>)
 800323c:	7818      	ldrb	r0, [r3, #0]
 800323e:	4c4c      	ldr	r4, [pc, #304]	@ (8003370 <LPTIM1_callback+0x6ac>)
 8003240:	4a4c      	ldr	r2, [pc, #304]	@ (8003374 <LPTIM1_callback+0x6b0>)
 8003242:	494d      	ldr	r1, [pc, #308]	@ (8003378 <LPTIM1_callback+0x6b4>)
 8003244:	4b4d      	ldr	r3, [pc, #308]	@ (800337c <LPTIM1_callback+0x6b8>)
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	4b4d      	ldr	r3, [pc, #308]	@ (8003380 <LPTIM1_callback+0x6bc>)
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	0023      	movs	r3, r4
 800324e:	f7fd fd4f 	bl	8000cf0 <Store_Params_as_User_Preset>
													user_presets_array,
													factory_presets_array,
													presets_converted_array);

						//store presets in flash
						Store_Single_Preset_In_Flash(user_presets_array[(uint8_t)(preset - 1)], (uint8_t)(preset - 1));
 8003252:	4b3d      	ldr	r3, [pc, #244]	@ (8003348 <LPTIM1_callback+0x684>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	3b01      	subs	r3, #1
 8003258:	b2db      	uxtb	r3, r3
 800325a:	001a      	movs	r2, r3
 800325c:	4b44      	ldr	r3, [pc, #272]	@ (8003370 <LPTIM1_callback+0x6ac>)
 800325e:	0092      	lsls	r2, r2, #2
 8003260:	58d2      	ldr	r2, [r2, r3]
 8003262:	4b39      	ldr	r3, [pc, #228]	@ (8003348 <LPTIM1_callback+0x684>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	3b01      	subs	r3, #1
 8003268:	b2db      	uxtb	r3, r3
 800326a:	0019      	movs	r1, r3
 800326c:	0010      	movs	r0, r2
 800326e:	f7fd fa03 	bl	8000678 <Store_Single_Preset_In_Flash>
					}

					Set_to_PC_Mode(preset);
 8003272:	4b35      	ldr	r3, [pc, #212]	@ (8003348 <LPTIM1_callback+0x684>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	0018      	movs	r0, r3
 8003278:	f7fd fd54 	bl	8000d24 <Set_to_PC_Mode>

					//led confirm - overwrite prev state with saved state
					Set_LED_to_State(&LED_fsm, LED_CONFIRM);
 800327c:	4b30      	ldr	r3, [pc, #192]	@ (8003340 <LPTIM1_callback+0x67c>)
 800327e:	2107      	movs	r1, #7
 8003280:	0018      	movs	r0, r3
 8003282:	f7fd fd61 	bl	8000d48 <Set_LED_to_State>
					LED_fsm.prev_state = led_state_saved;
 8003286:	4b34      	ldr	r3, [pc, #208]	@ (8003358 <LPTIM1_callback+0x694>)
 8003288:	781a      	ldrb	r2, [r3, #0]
 800328a:	4b2d      	ldr	r3, [pc, #180]	@ (8003340 <LPTIM1_callback+0x67c>)
 800328c:	705a      	strb	r2, [r3, #1]

					preset = PRESET_ONE;
 800328e:	4b2e      	ldr	r3, [pc, #184]	@ (8003348 <LPTIM1_callback+0x684>)
 8003290:	2201      	movs	r2, #1
 8003292:	701a      	strb	r2, [r3, #0]
					preset_save_mode_is_active = NO;
 8003294:	4b2d      	ldr	r3, [pc, #180]	@ (800334c <LPTIM1_callback+0x688>)
 8003296:	2200      	movs	r2, #0
 8003298:	701a      	strb	r2, [r3, #0]
					preset_select_mode_is_active = NO;
 800329a:	4b2d      	ldr	r3, [pc, #180]	@ (8003350 <LPTIM1_callback+0x68c>)
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
					save_or_preset_mode_engaged = NO;
 80032a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003354 <LPTIM1_callback+0x690>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	e06e      	b.n	8003386 <LPTIM1_callback+0x6c2>

				}
				else if(((depressed_num >= TAP_TEMPO_SWITCH_PRESET_SELECT_MODE_ADVANCE_COUNT_MIN) && (depressed_num < TAP_TEMPO_SWITCH_PRESET_SELECT_MODE_ADVANCE_COUNT_MAX))){
 80032a8:	4b2c      	ldr	r3, [pc, #176]	@ (800335c <LPTIM1_callback+0x698>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d105      	bne.n	80032be <LPTIM1_callback+0x5fa>
 80032b2:	d000      	beq.n	80032b6 <LPTIM1_callback+0x5f2>
 80032b4:	e067      	b.n	8003386 <LPTIM1_callback+0x6c2>
 80032b6:	21fa      	movs	r1, #250	@ 0xfa
 80032b8:	00c9      	lsls	r1, r1, #3
 80032ba:	428a      	cmp	r2, r1
 80032bc:	d363      	bcc.n	8003386 <LPTIM1_callback+0x6c2>
 80032be:	4b27      	ldr	r3, [pc, #156]	@ (800335c <LPTIM1_callback+0x698>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d15e      	bne.n	8003386 <LPTIM1_callback+0x6c2>
 80032c8:	d102      	bne.n	80032d0 <LPTIM1_callback+0x60c>
 80032ca:	4925      	ldr	r1, [pc, #148]	@ (8003360 <LPTIM1_callback+0x69c>)
 80032cc:	428a      	cmp	r2, r1
 80032ce:	d85a      	bhi.n	8003386 <LPTIM1_callback+0x6c2>

					//we want to have advancing through LED blinks, in either preset save or preset select mode, to
					//advance by PRESET_SELECT_MODE_ADVANCE_COUNT

					if(preset == PRESET_ONE){
 80032d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003348 <LPTIM1_callback+0x684>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d108      	bne.n	80032ea <LPTIM1_callback+0x626>

						Set_LED_to_State(&LED_fsm, LED_ONE_BLINK);
 80032d8:	4b19      	ldr	r3, [pc, #100]	@ (8003340 <LPTIM1_callback+0x67c>)
 80032da:	2103      	movs	r1, #3
 80032dc:	0018      	movs	r0, r3
 80032de:	f7fd fd33 	bl	8000d48 <Set_LED_to_State>
						preset = PRESET_TWO;
 80032e2:	4b19      	ldr	r3, [pc, #100]	@ (8003348 <LPTIM1_callback+0x684>)
 80032e4:	2202      	movs	r2, #2
 80032e6:	701a      	strb	r2, [r3, #0]
 80032e8:	e04d      	b.n	8003386 <LPTIM1_callback+0x6c2>
					}
					else if(preset == PRESET_TWO){
 80032ea:	4b17      	ldr	r3, [pc, #92]	@ (8003348 <LPTIM1_callback+0x684>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d108      	bne.n	8003304 <LPTIM1_callback+0x640>

						Set_LED_to_State(&LED_fsm, LED_TWO_BLINK);
 80032f2:	4b13      	ldr	r3, [pc, #76]	@ (8003340 <LPTIM1_callback+0x67c>)
 80032f4:	2104      	movs	r1, #4
 80032f6:	0018      	movs	r0, r3
 80032f8:	f7fd fd26 	bl	8000d48 <Set_LED_to_State>
						preset = PRESET_THREE;
 80032fc:	4b12      	ldr	r3, [pc, #72]	@ (8003348 <LPTIM1_callback+0x684>)
 80032fe:	2203      	movs	r2, #3
 8003300:	701a      	strb	r2, [r3, #0]
 8003302:	e040      	b.n	8003386 <LPTIM1_callback+0x6c2>
					}
					else if(preset == PRESET_THREE){
 8003304:	4b10      	ldr	r3, [pc, #64]	@ (8003348 <LPTIM1_callback+0x684>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b03      	cmp	r3, #3
 800330a:	d108      	bne.n	800331e <LPTIM1_callback+0x65a>

						Set_LED_to_State(&LED_fsm, LED_THREE_BLINK);
 800330c:	4b0c      	ldr	r3, [pc, #48]	@ (8003340 <LPTIM1_callback+0x67c>)
 800330e:	2105      	movs	r1, #5
 8003310:	0018      	movs	r0, r3
 8003312:	f7fd fd19 	bl	8000d48 <Set_LED_to_State>
						preset = PRESET_FOUR;
 8003316:	4b0c      	ldr	r3, [pc, #48]	@ (8003348 <LPTIM1_callback+0x684>)
 8003318:	2204      	movs	r2, #4
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	e033      	b.n	8003386 <LPTIM1_callback+0x6c2>
					}
					else if(preset == PRESET_FOUR){
 800331e:	4b0a      	ldr	r3, [pc, #40]	@ (8003348 <LPTIM1_callback+0x684>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b04      	cmp	r3, #4
 8003324:	d12f      	bne.n	8003386 <LPTIM1_callback+0x6c2>

						Set_LED_to_State(&LED_fsm, LED_FOUR_BLINK);
 8003326:	4b06      	ldr	r3, [pc, #24]	@ (8003340 <LPTIM1_callback+0x67c>)
 8003328:	2106      	movs	r1, #6
 800332a:	0018      	movs	r0, r3
 800332c:	f7fd fd0c 	bl	8000d48 <Set_LED_to_State>
						preset = PRESET_ONE;
 8003330:	4b05      	ldr	r3, [pc, #20]	@ (8003348 <LPTIM1_callback+0x684>)
 8003332:	2201      	movs	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	e026      	b.n	8003386 <LPTIM1_callback+0x6c2>
 8003338:	20000562 	.word	0x20000562
 800333c:	20000c98 	.word	0x20000c98
 8003340:	20000430 	.word	0x20000430
 8003344:	20000cbc 	.word	0x20000cbc
 8003348:	20000025 	.word	0x20000025
 800334c:	20000c9a 	.word	0x20000c9a
 8003350:	20000c9b 	.word	0x20000c9b
 8003354:	20000c94 	.word	0x20000c94
 8003358:	20000c9c 	.word	0x20000c9c
 800335c:	20000ca0 	.word	0x20000ca0
 8003360:	00000dab 	.word	0x00000dab
 8003364:	00001387 	.word	0x00001387
 8003368:	00001b57 	.word	0x00001b57
 800336c:	20000cb0 	.word	0x20000cb0
 8003370:	20000518 	.word	0x20000518
 8003374:	200004bc 	.word	0x200004bc
 8003378:	20000d38 	.word	0x20000d38
 800337c:	200004f0 	.word	0x200004f0
 8003380:	20000528 	.word	0x20000528
				if(save_or_preset_mode_engaged == YES){
 8003384:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			depressed_num = 0;
 8003386:	4916      	ldr	r1, [pc, #88]	@ (80033e0 <LPTIM1_callback+0x71c>)
 8003388:	2200      	movs	r2, #0
 800338a:	2300      	movs	r3, #0
 800338c:	600a      	str	r2, [r1, #0]
 800338e:	604b      	str	r3, [r1, #4]
 8003390:	e01b      	b.n	80033ca <LPTIM1_callback+0x706>
		}
		else if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8003392:	4b14      	ldr	r3, [pc, #80]	@ (80033e4 <LPTIM1_callback+0x720>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b01      	cmp	r3, #1
 800339a:	d116      	bne.n	80033ca <LPTIM1_callback+0x706>

			if(Get_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running) == YES){
 800339c:	2380      	movs	r3, #128	@ 0x80
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	4b11      	ldr	r3, [pc, #68]	@ (80033e8 <LPTIM1_callback+0x724>)
 80033a2:	0011      	movs	r1, r2
 80033a4:	0018      	movs	r0, r3
 80033a6:	f001 fd1b 	bl	8004de0 <Get_Status_Bit>
 80033aa:	0003      	movs	r3, r0
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d102      	bne.n	80033b6 <LPTIM1_callback+0x6f2>

				preset_save_idle_counter = 0;
 80033b0:	4b0e      	ldr	r3, [pc, #56]	@ (80033ec <LPTIM1_callback+0x728>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
			}

			depressed_num++;
 80033b6:	4b0a      	ldr	r3, [pc, #40]	@ (80033e0 <LPTIM1_callback+0x71c>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2001      	movs	r0, #1
 80033be:	2100      	movs	r1, #0
 80033c0:	1812      	adds	r2, r2, r0
 80033c2:	414b      	adcs	r3, r1
 80033c4:	4906      	ldr	r1, [pc, #24]	@ (80033e0 <LPTIM1_callback+0x71c>)
 80033c6:	600a      	str	r2, [r1, #0]
 80033c8:	604b      	str	r3, [r1, #4]
		}
	}

	//SET TIMER TRIGGER
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 80033ca:	4b09      	ldr	r3, [pc, #36]	@ (80033f0 <LPTIM1_callback+0x72c>)
 80033cc:	22fa      	movs	r2, #250	@ 0xfa
 80033ce:	21fa      	movs	r1, #250	@ 0xfa
 80033d0:	0018      	movs	r0, r3
 80033d2:	f003 f967 	bl	80066a4 <HAL_LPTIM_SetOnce_Start_IT>

}
 80033d6:	46c0      	nop			@ (mov r8, r8)
 80033d8:	46bd      	mov	sp, r7
 80033da:	b004      	add	sp, #16
 80033dc:	bdb0      	pop	{r4, r5, r7, pc}
 80033de:	46c0      	nop			@ (mov r8, r8)
 80033e0:	20000ca0 	.word	0x20000ca0
 80033e4:	20000c98 	.word	0x20000c98
 80033e8:	20000cbc 	.word	0x20000cbc
 80033ec:	20000cb0 	.word	0x20000cb0
 80033f0:	20000568 	.word	0x20000568

080033f4 <TIM14_callback>:
void TIM17_callback(TIM_HandleTypeDef *htim){


}

void __attribute__((optimize("O0")))TIM14_callback(TIM_HandleTypeDef *htim){
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]

	if(LED_fsm.current_state == LED_ON){
 80033fc:	4bd1      	ldr	r3, [pc, #836]	@ (8003744 <TIM14_callback+0x350>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d106      	bne.n	8003414 <TIM14_callback+0x20>

		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003406:	4bd0      	ldr	r3, [pc, #832]	@ (8003748 <TIM14_callback+0x354>)
 8003408:	2201      	movs	r2, #1
 800340a:	2140      	movs	r1, #64	@ 0x40
 800340c:	0018      	movs	r0, r3
 800340e:	f002 ff1f 	bl	8006250 <HAL_GPIO_WritePin>

				Set_LED_to_State(&LED_fsm, prev);
			}
		}
	}
}
 8003412:	e1c3      	b.n	800379c <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_OFF){
 8003414:	4bcb      	ldr	r3, [pc, #812]	@ (8003744 <TIM14_callback+0x350>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b01      	cmp	r3, #1
 800341c:	d106      	bne.n	800342c <TIM14_callback+0x38>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800341e:	4bca      	ldr	r3, [pc, #808]	@ (8003748 <TIM14_callback+0x354>)
 8003420:	2200      	movs	r2, #0
 8003422:	2140      	movs	r1, #64	@ 0x40
 8003424:	0018      	movs	r0, r3
 8003426:	f002 ff13 	bl	8006250 <HAL_GPIO_WritePin>
}
 800342a:	e1b7      	b.n	800379c <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_ONE_BLINK){
 800342c:	4bc5      	ldr	r3, [pc, #788]	@ (8003744 <TIM14_callback+0x350>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b03      	cmp	r3, #3
 8003434:	d133      	bne.n	800349e <TIM14_callback+0xaa>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8003436:	4bc5      	ldr	r3, [pc, #788]	@ (800374c <TIM14_callback+0x358>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2200      	movs	r2, #0
 800343c:	625a      	str	r2, [r3, #36]	@ 0x24
		if(LED_counter == 0){
 800343e:	4bc4      	ldr	r3, [pc, #784]	@ (8003750 <TIM14_callback+0x35c>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10d      	bne.n	8003464 <TIM14_callback+0x70>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003448:	4bbf      	ldr	r3, [pc, #764]	@ (8003748 <TIM14_callback+0x354>)
 800344a:	2201      	movs	r2, #1
 800344c:	2140      	movs	r1, #64	@ 0x40
 800344e:	0018      	movs	r0, r3
 8003450:	f002 fefe 	bl	8006250 <HAL_GPIO_WritePin>
			LED_counter++;
 8003454:	4bbe      	ldr	r3, [pc, #760]	@ (8003750 <TIM14_callback+0x35c>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	3301      	adds	r3, #1
 800345c:	b2da      	uxtb	r2, r3
 800345e:	4bbc      	ldr	r3, [pc, #752]	@ (8003750 <TIM14_callback+0x35c>)
 8003460:	701a      	strb	r2, [r3, #0]
}
 8003462:	e19b      	b.n	800379c <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 1)){
 8003464:	4bba      	ldr	r3, [pc, #744]	@ (8003750 <TIM14_callback+0x35c>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b04      	cmp	r3, #4
 800346c:	d900      	bls.n	8003470 <TIM14_callback+0x7c>
 800346e:	e195      	b.n	800379c <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003470:	4bb5      	ldr	r3, [pc, #724]	@ (8003748 <TIM14_callback+0x354>)
 8003472:	2200      	movs	r2, #0
 8003474:	2140      	movs	r1, #64	@ 0x40
 8003476:	0018      	movs	r0, r3
 8003478:	f002 feea 	bl	8006250 <HAL_GPIO_WritePin>
			LED_counter++;
 800347c:	4bb4      	ldr	r3, [pc, #720]	@ (8003750 <TIM14_callback+0x35c>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	3301      	adds	r3, #1
 8003484:	b2da      	uxtb	r2, r3
 8003486:	4bb2      	ldr	r3, [pc, #712]	@ (8003750 <TIM14_callback+0x35c>)
 8003488:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 1){
 800348a:	4bb1      	ldr	r3, [pc, #708]	@ (8003750 <TIM14_callback+0x35c>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b05      	cmp	r3, #5
 8003492:	d000      	beq.n	8003496 <TIM14_callback+0xa2>
 8003494:	e182      	b.n	800379c <TIM14_callback+0x3a8>
				LED_counter = 0;
 8003496:	4bae      	ldr	r3, [pc, #696]	@ (8003750 <TIM14_callback+0x35c>)
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
}
 800349c:	e17e      	b.n	800379c <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_TWO_BLINK){
 800349e:	4ba9      	ldr	r3, [pc, #676]	@ (8003744 <TIM14_callback+0x350>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d156      	bne.n	8003556 <TIM14_callback+0x162>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 80034a8:	4ba8      	ldr	r3, [pc, #672]	@ (800374c <TIM14_callback+0x358>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2200      	movs	r2, #0
 80034ae:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 3) && (LED_counter % 2 == 0)){
 80034b0:	4ba7      	ldr	r3, [pc, #668]	@ (8003750 <TIM14_callback+0x35c>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d815      	bhi.n	80034e6 <TIM14_callback+0xf2>
 80034ba:	4ba5      	ldr	r3, [pc, #660]	@ (8003750 <TIM14_callback+0x35c>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2201      	movs	r2, #1
 80034c2:	4013      	ands	r3, r2
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10d      	bne.n	80034e6 <TIM14_callback+0xf2>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80034ca:	4b9f      	ldr	r3, [pc, #636]	@ (8003748 <TIM14_callback+0x354>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	2140      	movs	r1, #64	@ 0x40
 80034d0:	0018      	movs	r0, r3
 80034d2:	f002 febd 	bl	8006250 <HAL_GPIO_WritePin>
			LED_counter++;
 80034d6:	4b9e      	ldr	r3, [pc, #632]	@ (8003750 <TIM14_callback+0x35c>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	3301      	adds	r3, #1
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	4b9b      	ldr	r3, [pc, #620]	@ (8003750 <TIM14_callback+0x35c>)
 80034e2:	701a      	strb	r2, [r3, #0]
 80034e4:	e15a      	b.n	800379c <TIM14_callback+0x3a8>
		else if((LED_counter < 3) && (LED_counter % 2 == 1)){
 80034e6:	4b9a      	ldr	r3, [pc, #616]	@ (8003750 <TIM14_callback+0x35c>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d815      	bhi.n	800351c <TIM14_callback+0x128>
 80034f0:	4b97      	ldr	r3, [pc, #604]	@ (8003750 <TIM14_callback+0x35c>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2201      	movs	r2, #1
 80034f8:	4013      	ands	r3, r2
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d10d      	bne.n	800351c <TIM14_callback+0x128>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003500:	4b91      	ldr	r3, [pc, #580]	@ (8003748 <TIM14_callback+0x354>)
 8003502:	2200      	movs	r2, #0
 8003504:	2140      	movs	r1, #64	@ 0x40
 8003506:	0018      	movs	r0, r3
 8003508:	f002 fea2 	bl	8006250 <HAL_GPIO_WritePin>
			LED_counter++;
 800350c:	4b90      	ldr	r3, [pc, #576]	@ (8003750 <TIM14_callback+0x35c>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	3301      	adds	r3, #1
 8003514:	b2da      	uxtb	r2, r3
 8003516:	4b8e      	ldr	r3, [pc, #568]	@ (8003750 <TIM14_callback+0x35c>)
 8003518:	701a      	strb	r2, [r3, #0]
 800351a:	e13f      	b.n	800379c <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 3)){
 800351c:	4b8c      	ldr	r3, [pc, #560]	@ (8003750 <TIM14_callback+0x35c>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b06      	cmp	r3, #6
 8003524:	d900      	bls.n	8003528 <TIM14_callback+0x134>
 8003526:	e139      	b.n	800379c <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003528:	4b87      	ldr	r3, [pc, #540]	@ (8003748 <TIM14_callback+0x354>)
 800352a:	2200      	movs	r2, #0
 800352c:	2140      	movs	r1, #64	@ 0x40
 800352e:	0018      	movs	r0, r3
 8003530:	f002 fe8e 	bl	8006250 <HAL_GPIO_WritePin>
			LED_counter++;
 8003534:	4b86      	ldr	r3, [pc, #536]	@ (8003750 <TIM14_callback+0x35c>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	3301      	adds	r3, #1
 800353c:	b2da      	uxtb	r2, r3
 800353e:	4b84      	ldr	r3, [pc, #528]	@ (8003750 <TIM14_callback+0x35c>)
 8003540:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 3){
 8003542:	4b83      	ldr	r3, [pc, #524]	@ (8003750 <TIM14_callback+0x35c>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b07      	cmp	r3, #7
 800354a:	d000      	beq.n	800354e <TIM14_callback+0x15a>
 800354c:	e126      	b.n	800379c <TIM14_callback+0x3a8>
				LED_counter = 0;
 800354e:	4b80      	ldr	r3, [pc, #512]	@ (8003750 <TIM14_callback+0x35c>)
 8003550:	2200      	movs	r2, #0
 8003552:	701a      	strb	r2, [r3, #0]
}
 8003554:	e122      	b.n	800379c <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_THREE_BLINK){
 8003556:	4b7b      	ldr	r3, [pc, #492]	@ (8003744 <TIM14_callback+0x350>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b05      	cmp	r3, #5
 800355e:	d156      	bne.n	800360e <TIM14_callback+0x21a>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8003560:	4b7a      	ldr	r3, [pc, #488]	@ (800374c <TIM14_callback+0x358>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2200      	movs	r2, #0
 8003566:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 5) && (LED_counter % 2 == 0)){
 8003568:	4b79      	ldr	r3, [pc, #484]	@ (8003750 <TIM14_callback+0x35c>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b04      	cmp	r3, #4
 8003570:	d815      	bhi.n	800359e <TIM14_callback+0x1aa>
 8003572:	4b77      	ldr	r3, [pc, #476]	@ (8003750 <TIM14_callback+0x35c>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2201      	movs	r2, #1
 800357a:	4013      	ands	r3, r2
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10d      	bne.n	800359e <TIM14_callback+0x1aa>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003582:	4b71      	ldr	r3, [pc, #452]	@ (8003748 <TIM14_callback+0x354>)
 8003584:	2201      	movs	r2, #1
 8003586:	2140      	movs	r1, #64	@ 0x40
 8003588:	0018      	movs	r0, r3
 800358a:	f002 fe61 	bl	8006250 <HAL_GPIO_WritePin>
			LED_counter++;
 800358e:	4b70      	ldr	r3, [pc, #448]	@ (8003750 <TIM14_callback+0x35c>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	b2db      	uxtb	r3, r3
 8003594:	3301      	adds	r3, #1
 8003596:	b2da      	uxtb	r2, r3
 8003598:	4b6d      	ldr	r3, [pc, #436]	@ (8003750 <TIM14_callback+0x35c>)
 800359a:	701a      	strb	r2, [r3, #0]
 800359c:	e0fe      	b.n	800379c <TIM14_callback+0x3a8>
		else if((LED_counter < 5) && (LED_counter % 2 == 1)){
 800359e:	4b6c      	ldr	r3, [pc, #432]	@ (8003750 <TIM14_callback+0x35c>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d815      	bhi.n	80035d4 <TIM14_callback+0x1e0>
 80035a8:	4b69      	ldr	r3, [pc, #420]	@ (8003750 <TIM14_callback+0x35c>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2201      	movs	r2, #1
 80035b0:	4013      	ands	r3, r2
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d10d      	bne.n	80035d4 <TIM14_callback+0x1e0>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80035b8:	4b63      	ldr	r3, [pc, #396]	@ (8003748 <TIM14_callback+0x354>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	2140      	movs	r1, #64	@ 0x40
 80035be:	0018      	movs	r0, r3
 80035c0:	f002 fe46 	bl	8006250 <HAL_GPIO_WritePin>
			LED_counter++;
 80035c4:	4b62      	ldr	r3, [pc, #392]	@ (8003750 <TIM14_callback+0x35c>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	3301      	adds	r3, #1
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	4b60      	ldr	r3, [pc, #384]	@ (8003750 <TIM14_callback+0x35c>)
 80035d0:	701a      	strb	r2, [r3, #0]
 80035d2:	e0e3      	b.n	800379c <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 5)){
 80035d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003750 <TIM14_callback+0x35c>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d900      	bls.n	80035e0 <TIM14_callback+0x1ec>
 80035de:	e0dd      	b.n	800379c <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80035e0:	4b59      	ldr	r3, [pc, #356]	@ (8003748 <TIM14_callback+0x354>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	2140      	movs	r1, #64	@ 0x40
 80035e6:	0018      	movs	r0, r3
 80035e8:	f002 fe32 	bl	8006250 <HAL_GPIO_WritePin>
			LED_counter++;
 80035ec:	4b58      	ldr	r3, [pc, #352]	@ (8003750 <TIM14_callback+0x35c>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	3301      	adds	r3, #1
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	4b56      	ldr	r3, [pc, #344]	@ (8003750 <TIM14_callback+0x35c>)
 80035f8:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 5){
 80035fa:	4b55      	ldr	r3, [pc, #340]	@ (8003750 <TIM14_callback+0x35c>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b09      	cmp	r3, #9
 8003602:	d000      	beq.n	8003606 <TIM14_callback+0x212>
 8003604:	e0ca      	b.n	800379c <TIM14_callback+0x3a8>
				LED_counter = 0;
 8003606:	4b52      	ldr	r3, [pc, #328]	@ (8003750 <TIM14_callback+0x35c>)
 8003608:	2200      	movs	r2, #0
 800360a:	701a      	strb	r2, [r3, #0]
}
 800360c:	e0c6      	b.n	800379c <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_FOUR_BLINK){
 800360e:	4b4d      	ldr	r3, [pc, #308]	@ (8003744 <TIM14_callback+0x350>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b06      	cmp	r3, #6
 8003616:	d156      	bne.n	80036c6 <TIM14_callback+0x2d2>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8003618:	4b4c      	ldr	r3, [pc, #304]	@ (800374c <TIM14_callback+0x358>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2200      	movs	r2, #0
 800361e:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 7) && (LED_counter % 2 == 0)){
 8003620:	4b4b      	ldr	r3, [pc, #300]	@ (8003750 <TIM14_callback+0x35c>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b06      	cmp	r3, #6
 8003628:	d815      	bhi.n	8003656 <TIM14_callback+0x262>
 800362a:	4b49      	ldr	r3, [pc, #292]	@ (8003750 <TIM14_callback+0x35c>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2201      	movs	r2, #1
 8003632:	4013      	ands	r3, r2
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10d      	bne.n	8003656 <TIM14_callback+0x262>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800363a:	4b43      	ldr	r3, [pc, #268]	@ (8003748 <TIM14_callback+0x354>)
 800363c:	2201      	movs	r2, #1
 800363e:	2140      	movs	r1, #64	@ 0x40
 8003640:	0018      	movs	r0, r3
 8003642:	f002 fe05 	bl	8006250 <HAL_GPIO_WritePin>
			LED_counter++;
 8003646:	4b42      	ldr	r3, [pc, #264]	@ (8003750 <TIM14_callback+0x35c>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	3301      	adds	r3, #1
 800364e:	b2da      	uxtb	r2, r3
 8003650:	4b3f      	ldr	r3, [pc, #252]	@ (8003750 <TIM14_callback+0x35c>)
 8003652:	701a      	strb	r2, [r3, #0]
 8003654:	e0a2      	b.n	800379c <TIM14_callback+0x3a8>
		else if((LED_counter < 7) && (LED_counter % 2 == 1)){
 8003656:	4b3e      	ldr	r3, [pc, #248]	@ (8003750 <TIM14_callback+0x35c>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b06      	cmp	r3, #6
 800365e:	d815      	bhi.n	800368c <TIM14_callback+0x298>
 8003660:	4b3b      	ldr	r3, [pc, #236]	@ (8003750 <TIM14_callback+0x35c>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2201      	movs	r2, #1
 8003668:	4013      	ands	r3, r2
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b01      	cmp	r3, #1
 800366e:	d10d      	bne.n	800368c <TIM14_callback+0x298>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003670:	4b35      	ldr	r3, [pc, #212]	@ (8003748 <TIM14_callback+0x354>)
 8003672:	2200      	movs	r2, #0
 8003674:	2140      	movs	r1, #64	@ 0x40
 8003676:	0018      	movs	r0, r3
 8003678:	f002 fdea 	bl	8006250 <HAL_GPIO_WritePin>
			LED_counter++;
 800367c:	4b34      	ldr	r3, [pc, #208]	@ (8003750 <TIM14_callback+0x35c>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	3301      	adds	r3, #1
 8003684:	b2da      	uxtb	r2, r3
 8003686:	4b32      	ldr	r3, [pc, #200]	@ (8003750 <TIM14_callback+0x35c>)
 8003688:	701a      	strb	r2, [r3, #0]
 800368a:	e087      	b.n	800379c <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 800368c:	4b30      	ldr	r3, [pc, #192]	@ (8003750 <TIM14_callback+0x35c>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b0a      	cmp	r3, #10
 8003694:	d900      	bls.n	8003698 <TIM14_callback+0x2a4>
 8003696:	e081      	b.n	800379c <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003698:	4b2b      	ldr	r3, [pc, #172]	@ (8003748 <TIM14_callback+0x354>)
 800369a:	2200      	movs	r2, #0
 800369c:	2140      	movs	r1, #64	@ 0x40
 800369e:	0018      	movs	r0, r3
 80036a0:	f002 fdd6 	bl	8006250 <HAL_GPIO_WritePin>
			LED_counter++;
 80036a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003750 <TIM14_callback+0x35c>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	3301      	adds	r3, #1
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	4b28      	ldr	r3, [pc, #160]	@ (8003750 <TIM14_callback+0x35c>)
 80036b0:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 7){
 80036b2:	4b27      	ldr	r3, [pc, #156]	@ (8003750 <TIM14_callback+0x35c>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b0b      	cmp	r3, #11
 80036ba:	d000      	beq.n	80036be <TIM14_callback+0x2ca>
 80036bc:	e06e      	b.n	800379c <TIM14_callback+0x3a8>
				LED_counter = 0;
 80036be:	4b24      	ldr	r3, [pc, #144]	@ (8003750 <TIM14_callback+0x35c>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	701a      	strb	r2, [r3, #0]
}
 80036c4:	e06a      	b.n	800379c <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_CONFIRM){
 80036c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003744 <TIM14_callback+0x350>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b07      	cmp	r3, #7
 80036ce:	d165      	bne.n	800379c <TIM14_callback+0x3a8>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 80036d0:	4b1e      	ldr	r3, [pc, #120]	@ (800374c <TIM14_callback+0x358>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2200      	movs	r2, #0
 80036d6:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 7) && (LED_counter % 2 == 0)){
 80036d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003750 <TIM14_callback+0x35c>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b06      	cmp	r3, #6
 80036e0:	d815      	bhi.n	800370e <TIM14_callback+0x31a>
 80036e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003750 <TIM14_callback+0x35c>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2201      	movs	r2, #1
 80036ea:	4013      	ands	r3, r2
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10d      	bne.n	800370e <TIM14_callback+0x31a>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80036f2:	4b15      	ldr	r3, [pc, #84]	@ (8003748 <TIM14_callback+0x354>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	2140      	movs	r1, #64	@ 0x40
 80036f8:	0018      	movs	r0, r3
 80036fa:	f002 fda9 	bl	8006250 <HAL_GPIO_WritePin>
			LED_counter++;
 80036fe:	4b14      	ldr	r3, [pc, #80]	@ (8003750 <TIM14_callback+0x35c>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	b2db      	uxtb	r3, r3
 8003704:	3301      	adds	r3, #1
 8003706:	b2da      	uxtb	r2, r3
 8003708:	4b11      	ldr	r3, [pc, #68]	@ (8003750 <TIM14_callback+0x35c>)
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	e046      	b.n	800379c <TIM14_callback+0x3a8>
		else if((LED_counter < 7) && (LED_counter % 2 == 1)){
 800370e:	4b10      	ldr	r3, [pc, #64]	@ (8003750 <TIM14_callback+0x35c>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b06      	cmp	r3, #6
 8003716:	d81d      	bhi.n	8003754 <TIM14_callback+0x360>
 8003718:	4b0d      	ldr	r3, [pc, #52]	@ (8003750 <TIM14_callback+0x35c>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2201      	movs	r2, #1
 8003720:	4013      	ands	r3, r2
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b01      	cmp	r3, #1
 8003726:	d115      	bne.n	8003754 <TIM14_callback+0x360>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003728:	4b07      	ldr	r3, [pc, #28]	@ (8003748 <TIM14_callback+0x354>)
 800372a:	2200      	movs	r2, #0
 800372c:	2140      	movs	r1, #64	@ 0x40
 800372e:	0018      	movs	r0, r3
 8003730:	f002 fd8e 	bl	8006250 <HAL_GPIO_WritePin>
			LED_counter++;
 8003734:	4b06      	ldr	r3, [pc, #24]	@ (8003750 <TIM14_callback+0x35c>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	3301      	adds	r3, #1
 800373c:	b2da      	uxtb	r2, r3
 800373e:	4b04      	ldr	r3, [pc, #16]	@ (8003750 <TIM14_callback+0x35c>)
 8003740:	701a      	strb	r2, [r3, #0]
 8003742:	e02b      	b.n	800379c <TIM14_callback+0x3a8>
 8003744:	20000430 	.word	0x20000430
 8003748:	50000800 	.word	0x50000800
 800374c:	20000af4 	.word	0x20000af4
 8003750:	20000538 	.word	0x20000538
		else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 8003754:	4b13      	ldr	r3, [pc, #76]	@ (80037a4 <TIM14_callback+0x3b0>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b0a      	cmp	r3, #10
 800375c:	d81e      	bhi.n	800379c <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800375e:	4b12      	ldr	r3, [pc, #72]	@ (80037a8 <TIM14_callback+0x3b4>)
 8003760:	2200      	movs	r2, #0
 8003762:	2140      	movs	r1, #64	@ 0x40
 8003764:	0018      	movs	r0, r3
 8003766:	f002 fd73 	bl	8006250 <HAL_GPIO_WritePin>
			LED_counter++;
 800376a:	4b0e      	ldr	r3, [pc, #56]	@ (80037a4 <TIM14_callback+0x3b0>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	b2db      	uxtb	r3, r3
 8003770:	3301      	adds	r3, #1
 8003772:	b2da      	uxtb	r2, r3
 8003774:	4b0b      	ldr	r3, [pc, #44]	@ (80037a4 <TIM14_callback+0x3b0>)
 8003776:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 7){
 8003778:	4b0a      	ldr	r3, [pc, #40]	@ (80037a4 <TIM14_callback+0x3b0>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b0b      	cmp	r3, #11
 8003780:	d10c      	bne.n	800379c <TIM14_callback+0x3a8>
				enum LED_States prev = LED_fsm.prev_state;
 8003782:	210f      	movs	r1, #15
 8003784:	187b      	adds	r3, r7, r1
 8003786:	4a09      	ldr	r2, [pc, #36]	@ (80037ac <TIM14_callback+0x3b8>)
 8003788:	7852      	ldrb	r2, [r2, #1]
 800378a:	701a      	strb	r2, [r3, #0]
				Set_LED_to_State(&LED_fsm, prev);
 800378c:	187b      	adds	r3, r7, r1
 800378e:	781a      	ldrb	r2, [r3, #0]
 8003790:	4b06      	ldr	r3, [pc, #24]	@ (80037ac <TIM14_callback+0x3b8>)
 8003792:	0011      	movs	r1, r2
 8003794:	0018      	movs	r0, r3
 8003796:	f7fd fad7 	bl	8000d48 <Set_LED_to_State>
}
 800379a:	e7ff      	b.n	800379c <TIM14_callback+0x3a8>
 800379c:	46c0      	nop			@ (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	b004      	add	sp, #16
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000538 	.word	0x20000538
 80037a8:	50000800 	.word	0x50000800
 80037ac:	20000430 	.word	0x20000430

080037b0 <TIM16_callback>:
{
 80037b0:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
 80037b2:	4d0f      	ldr	r5, [pc, #60]	@ (80037f0 <TIM16_callback+0x40>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	2140      	movs	r1, #64	@ 0x40
 80037b8:	0028      	movs	r0, r5
 80037ba:	f002 fd49 	bl	8006250 <HAL_GPIO_WritePin>
	Set_Oscillator_Values(&params);
 80037be:	4c0d      	ldr	r4, [pc, #52]	@ (80037f4 <TIM16_callback+0x44>)
 80037c0:	0020      	movs	r0, r4
 80037c2:	f000 fc33 	bl	800402c <Set_Oscillator_Values>
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 80037c6:	2100      	movs	r1, #0
 80037c8:	0020      	movs	r0, r4
 80037ca:	f000 fc45 	bl	8004058 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80037ce:	490a      	ldr	r1, [pc, #40]	@ (80037f8 <TIM16_callback+0x48>)
 80037d0:	0020      	movs	r0, r4
 80037d2:	f000 fcdd 	bl	8004190 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 80037d6:	4b09      	ldr	r3, [pc, #36]	@ (80037fc <TIM16_callback+0x4c>)
 80037d8:	781a      	ldrb	r2, [r3, #0]
 80037da:	4909      	ldr	r1, [pc, #36]	@ (8003800 <TIM16_callback+0x50>)
 80037dc:	4809      	ldr	r0, [pc, #36]	@ (8003804 <TIM16_callback+0x54>)
 80037de:	f001 ff4f 	bl	8005680 <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
 80037e2:	2200      	movs	r2, #0
 80037e4:	2140      	movs	r1, #64	@ 0x40
 80037e6:	0028      	movs	r0, r5
 80037e8:	f002 fd32 	bl	8006250 <HAL_GPIO_WritePin>
}
 80037ec:	bd70      	pop	{r4, r5, r6, pc}
 80037ee:	46c0      	nop			@ (mov r8, r8)
 80037f0:	50000400 	.word	0x50000400
 80037f4:	20000d38 	.word	0x20000d38
 80037f8:	20000028 	.word	0x20000028
 80037fc:	080094d4 	.word	0x080094d4
 8003800:	20000d60 	.word	0x20000d60
 8003804:	20000c0c 	.word	0x20000c0c

08003808 <ADC_DMA_conversion_complete_callback>:
{
 8003808:	b510      	push	{r4, lr}
 800380a:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(MONITOR_2_GPIO_Port, MONITOR_2_Pin, 1);
 800380c:	2201      	movs	r2, #1
 800380e:	2110      	movs	r1, #16
 8003810:	4818      	ldr	r0, [pc, #96]	@ (8003874 <ADC_DMA_conversion_complete_callback+0x6c>)
 8003812:	f002 fd1d 	bl	8006250 <HAL_GPIO_WritePin>
	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 8003816:	0020      	movs	r0, r4
 8003818:	f001 ffd8 	bl	80057cc <HAL_ADC_Stop_DMA>
	Process_ADC_Conversion_Values(&params_manual, ADCResultsDMA);
 800381c:	4916      	ldr	r1, [pc, #88]	@ (8003878 <ADC_DMA_conversion_complete_callback+0x70>)
 800381e:	4817      	ldr	r0, [pc, #92]	@ (800387c <ADC_DMA_conversion_complete_callback+0x74>)
 8003820:	f000 fd16 	bl	8004250 <Process_ADC_Conversion_Values>
	Update_Params_Based_On_Mode_Selected();
 8003824:	f7fd f916 	bl	8000a54 <Update_Params_Based_On_Mode_Selected>
	enum Validate first_sync_complete = Get_Status_Bit(&statuses, First_Sync_Complete);
 8003828:	4815      	ldr	r0, [pc, #84]	@ (8003880 <ADC_DMA_conversion_complete_callback+0x78>)
 800382a:	2108      	movs	r1, #8
 800382c:	f001 fad8 	bl	8004de0 <Get_Status_Bit>
	if(first_sync_complete == YES){
 8003830:	2801      	cmp	r0, #1
 8003832:	d116      	bne.n	8003862 <ADC_DMA_conversion_complete_callback+0x5a>
		params.raw_start_value = params_working.raw_start_value;
 8003834:	4913      	ldr	r1, [pc, #76]	@ (8003884 <ADC_DMA_conversion_complete_callback+0x7c>)
 8003836:	8a8b      	ldrh	r3, [r1, #20]
 8003838:	b29b      	uxth	r3, r3
 800383a:	4a13      	ldr	r2, [pc, #76]	@ (8003888 <ADC_DMA_conversion_complete_callback+0x80>)
 800383c:	8293      	strh	r3, [r2, #20]
		params.raw_prescaler = params_working.raw_prescaler;
 800383e:	8b8b      	ldrh	r3, [r1, #28]
 8003840:	b29b      	uxth	r3, r3
 8003842:	8393      	strh	r3, [r2, #28]
	Process_TIM16_Final_Start_Value_and_Final_Prescaler(&params);
 8003844:	4810      	ldr	r0, [pc, #64]	@ (8003888 <ADC_DMA_conversion_complete_callback+0x80>)
 8003846:	f001 f8f1 	bl	8004a2c <Process_TIM16_Final_Start_Value_and_Final_Prescaler>
	if(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){
 800384a:	480d      	ldr	r0, [pc, #52]	@ (8003880 <ADC_DMA_conversion_complete_callback+0x78>)
 800384c:	2110      	movs	r1, #16
 800384e:	f001 fac7 	bl	8004de0 <Get_Status_Bit>
 8003852:	2800      	cmp	r0, #0
 8003854:	d009      	beq.n	800386a <ADC_DMA_conversion_complete_callback+0x62>
	HAL_GPIO_WritePin(MONITOR_2_GPIO_Port, MONITOR_2_Pin, 0);
 8003856:	2200      	movs	r2, #0
 8003858:	2110      	movs	r1, #16
 800385a:	4806      	ldr	r0, [pc, #24]	@ (8003874 <ADC_DMA_conversion_complete_callback+0x6c>)
 800385c:	f002 fcf8 	bl	8006250 <HAL_GPIO_WritePin>
}
 8003860:	bd10      	pop	{r4, pc}
		Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(&params);
 8003862:	4809      	ldr	r0, [pc, #36]	@ (8003888 <ADC_DMA_conversion_complete_callback+0x80>)
 8003864:	f000 fbca 	bl	8003ffc <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
 8003868:	e7ec      	b.n	8003844 <ADC_DMA_conversion_complete_callback+0x3c>
		Set_Status_Bit(&statuses, Initial_ADC_Conversion_Complete);
 800386a:	4805      	ldr	r0, [pc, #20]	@ (8003880 <ADC_DMA_conversion_complete_callback+0x78>)
 800386c:	2110      	movs	r1, #16
 800386e:	f001 fabd 	bl	8004dec <Set_Status_Bit>
 8003872:	e7f0      	b.n	8003856 <ADC_DMA_conversion_complete_callback+0x4e>
 8003874:	50000400 	.word	0x50000400
 8003878:	20000d60 	.word	0x20000d60
 800387c:	20000d10 	.word	0x20000d10
 8003880:	20000cbc 	.word	0x20000cbc
 8003884:	20000cc0 	.word	0x20000cc0
 8003888:	20000d38 	.word	0x20000d38

0800388c <TIM2_ch1_IP_capture_callback>:
void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 800388c:	b510      	push	{r4, lr}
	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800388e:	2100      	movs	r1, #0
 8003890:	f003 fec8 	bl	8007624 <HAL_TIM_ReadCapturedValue>
 8003894:	4b30      	ldr	r3, [pc, #192]	@ (8003958 <TIM2_ch1_IP_capture_callback+0xcc>)
 8003896:	6018      	str	r0, [r3, #0]
	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	0a5b      	lsrs	r3, r3, #9
 800389c:	b29b      	uxth	r3, r3
 800389e:	4a2f      	ldr	r2, [pc, #188]	@ (800395c <TIM2_ch1_IP_capture_callback+0xd0>)
 80038a0:	8013      	strh	r3, [r2, #0]
	if(IP_CAP_fsm.current_state == IDLE){
 80038a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003960 <TIM2_ch1_IP_capture_callback+0xd4>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d023      	beq.n	80038f2 <TIM2_ch1_IP_capture_callback+0x66>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){ //second edge
 80038aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003960 <TIM2_ch1_IP_capture_callback+0xd4>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d027      	beq.n	8003902 <TIM2_ch1_IP_capture_callback+0x76>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){ //first edge
 80038b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003960 <TIM2_ch1_IP_capture_callback+0xd4>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d043      	beq.n	8003942 <TIM2_ch1_IP_capture_callback+0xb6>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){ //second edge
 80038ba:	4b29      	ldr	r3, [pc, #164]	@ (8003960 <TIM2_ch1_IP_capture_callback+0xd4>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b03      	cmp	r3, #3
 80038c0:	d11e      	bne.n	8003900 <TIM2_ch1_IP_capture_callback+0x74>
			Start_Measurement_Reelapse_Timer();
 80038c2:	f000 fa9f 	bl	8003e04 <Start_Measurement_Reelapse_Timer>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 80038c6:	4b26      	ldr	r3, [pc, #152]	@ (8003960 <TIM2_ch1_IP_capture_callback+0xd4>)
 80038c8:	2202      	movs	r2, #2
 80038ca:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 80038cc:	3201      	adds	r2, #1
 80038ce:	705a      	strb	r2, [r3, #1]
		Copy_Params_Structs(&params, &params_to_be_loaded);
 80038d0:	4924      	ldr	r1, [pc, #144]	@ (8003964 <TIM2_ch1_IP_capture_callback+0xd8>)
 80038d2:	4825      	ldr	r0, [pc, #148]	@ (8003968 <TIM2_ch1_IP_capture_callback+0xdc>)
 80038d4:	f000 fa8c 	bl	8003df0 <Copy_Params_Structs>
		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 80038d8:	4b24      	ldr	r3, [pc, #144]	@ (800396c <TIM2_ch1_IP_capture_callback+0xe0>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b05      	cmp	r3, #5
 80038de:	d038      	beq.n	8003952 <TIM2_ch1_IP_capture_callback+0xc6>
 80038e0:	4b22      	ldr	r3, [pc, #136]	@ (800396c <TIM2_ch1_IP_capture_callback+0xe0>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b07      	cmp	r3, #7
 80038e6:	d034      	beq.n	8003952 <TIM2_ch1_IP_capture_callback+0xc6>
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 80038e8:	4821      	ldr	r0, [pc, #132]	@ (8003970 <TIM2_ch1_IP_capture_callback+0xe4>)
 80038ea:	2104      	movs	r1, #4
 80038ec:	f001 fa7e 	bl	8004dec <Set_Status_Bit>
}
 80038f0:	e006      	b.n	8003900 <TIM2_ch1_IP_capture_callback+0x74>
		Begin_Input_Capture_Measurement();
 80038f2:	f000 fa9f 	bl	8003e34 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 80038f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003960 <TIM2_ch1_IP_capture_callback+0xd4>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = IDLE;
 80038fc:	2200      	movs	r2, #0
 80038fe:	705a      	strb	r2, [r3, #1]
}
 8003900:	bd10      	pop	{r4, pc}
		if(interrupt_period >= HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is >= than 129
 8003902:	4b16      	ldr	r3, [pc, #88]	@ (800395c <TIM2_ch1_IP_capture_callback+0xd0>)
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b80      	cmp	r3, #128	@ 0x80
 800390a:	d9f9      	bls.n	8003900 <TIM2_ch1_IP_capture_callback+0x74>
				Start_Measurement_Reelapse_Timer();
 800390c:	f000 fa7a 	bl	8003e04 <Start_Measurement_Reelapse_Timer>
			IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8003910:	4b13      	ldr	r3, [pc, #76]	@ (8003960 <TIM2_ch1_IP_capture_callback+0xd4>)
 8003912:	2202      	movs	r2, #2
 8003914:	701a      	strb	r2, [r3, #0]
			IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8003916:	3a01      	subs	r2, #1
 8003918:	705a      	strb	r2, [r3, #1]
			Copy_Params_Structs(&params, &params_to_be_loaded);
 800391a:	4912      	ldr	r1, [pc, #72]	@ (8003964 <TIM2_ch1_IP_capture_callback+0xd8>)
 800391c:	4812      	ldr	r0, [pc, #72]	@ (8003968 <TIM2_ch1_IP_capture_callback+0xdc>)
 800391e:	f000 fa67 	bl	8003df0 <Copy_Params_Structs>
			if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8003922:	4b12      	ldr	r3, [pc, #72]	@ (800396c <TIM2_ch1_IP_capture_callback+0xe0>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	2b05      	cmp	r3, #5
 8003928:	d008      	beq.n	800393c <TIM2_ch1_IP_capture_callback+0xb0>
 800392a:	4b10      	ldr	r3, [pc, #64]	@ (800396c <TIM2_ch1_IP_capture_callback+0xe0>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b07      	cmp	r3, #7
 8003930:	d004      	beq.n	800393c <TIM2_ch1_IP_capture_callback+0xb0>
			Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 8003932:	480f      	ldr	r0, [pc, #60]	@ (8003970 <TIM2_ch1_IP_capture_callback+0xe4>)
 8003934:	2104      	movs	r1, #4
 8003936:	f001 fa59 	bl	8004dec <Set_Status_Bit>
 800393a:	e7e1      	b.n	8003900 <TIM2_ch1_IP_capture_callback+0x74>
				Advance_Pending_States();
 800393c:	f000 fd96 	bl	800446c <Advance_Pending_States>
 8003940:	e7f7      	b.n	8003932 <TIM2_ch1_IP_capture_callback+0xa6>
		Begin_Input_Capture_Measurement();
 8003942:	f000 fa77 	bl	8003e34 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8003946:	4b06      	ldr	r3, [pc, #24]	@ (8003960 <TIM2_ch1_IP_capture_callback+0xd4>)
 8003948:	2203      	movs	r2, #3
 800394a:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 800394c:	3a01      	subs	r2, #1
 800394e:	705a      	strb	r2, [r3, #1]
 8003950:	e7d6      	b.n	8003900 <TIM2_ch1_IP_capture_callback+0x74>
			Advance_Pending_States();
 8003952:	f000 fd8b 	bl	800446c <Advance_Pending_States>
 8003956:	e7c7      	b.n	80038e8 <TIM2_ch1_IP_capture_callback+0x5c>
 8003958:	20000cac 	.word	0x20000cac
 800395c:	20000caa 	.word	0x20000caa
 8003960:	20000434 	.word	0x20000434
 8003964:	20000ce8 	.word	0x20000ce8
 8003968:	20000d38 	.word	0x20000d38
 800396c:	20000448 	.word	0x20000448
 8003970:	20000cbc 	.word	0x20000cbc

08003974 <TIM2_ch1_overflow_callback>:
void TIM2_ch1_overflow_callback(TIM_HandleTypeDef *htim){
 8003974:	b510      	push	{r4, lr}
	union Speed_FSM_States previous = speed_fsm.prev_state;
 8003976:	4b2c      	ldr	r3, [pc, #176]	@ (8003a28 <TIM2_ch1_overflow_callback+0xb4>)
 8003978:	785c      	ldrb	r4, [r3, #1]
	if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){
 800397a:	4b2c      	ldr	r3, [pc, #176]	@ (8003a2c <TIM2_ch1_overflow_callback+0xb8>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d004      	beq.n	800398c <TIM2_ch1_overflow_callback+0x18>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8003982:	4b2a      	ldr	r3, [pc, #168]	@ (8003a2c <TIM2_ch1_overflow_callback+0xb8>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b03      	cmp	r3, #3
 8003988:	d026      	beq.n	80039d8 <TIM2_ch1_overflow_callback+0x64>
}
 800398a:	bd10      	pop	{r4, pc}
		IP_CAP_fsm.current_state = IDLE;
 800398c:	4b27      	ldr	r3, [pc, #156]	@ (8003a2c <TIM2_ch1_overflow_callback+0xb8>)
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8003992:	2101      	movs	r1, #1
 8003994:	7059      	strb	r1, [r3, #1]
		MIDI_CLK_fsm = NOT_COMPILING;
 8003996:	4b26      	ldr	r3, [pc, #152]	@ (8003a30 <TIM2_ch1_overflow_callback+0xbc>)
 8003998:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 800399a:	4b26      	ldr	r3, [pc, #152]	@ (8003a34 <TIM2_ch1_overflow_callback+0xc0>)
 800399c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 800399e:	317f      	adds	r1, #127	@ 0x7f
 80039a0:	20a0      	movs	r0, #160	@ 0xa0
 80039a2:	3201      	adds	r2, #1
 80039a4:	0089      	lsls	r1, r1, #2
 80039a6:	05c0      	lsls	r0, r0, #23
 80039a8:	f002 fc52 	bl	8006250 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80039ac:	2200      	movs	r2, #0
 80039ae:	2140      	movs	r1, #64	@ 0x40
 80039b0:	4821      	ldr	r0, [pc, #132]	@ (8003a38 <TIM2_ch1_overflow_callback+0xc4>)
 80039b2:	f002 fc4d 	bl	8006250 <HAL_GPIO_WritePin>
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80039b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003a28 <TIM2_ch1_overflow_callback+0xb4>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d0e5      	beq.n	800398a <TIM2_ch1_overflow_callback+0x16>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 80039be:	4b1a      	ldr	r3, [pc, #104]	@ (8003a28 <TIM2_ch1_overflow_callback+0xb4>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b06      	cmp	r3, #6
 80039c4:	d0e1      	beq.n	800398a <TIM2_ch1_overflow_callback+0x16>
 80039c6:	4b18      	ldr	r3, [pc, #96]	@ (8003a28 <TIM2_ch1_overflow_callback+0xb4>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d0dd      	beq.n	800398a <TIM2_ch1_overflow_callback+0x16>
			speed_fsm.prev_state = speed_fsm.current_state;
 80039ce:	4b16      	ldr	r3, [pc, #88]	@ (8003a28 <TIM2_ch1_overflow_callback+0xb4>)
 80039d0:	781a      	ldrb	r2, [r3, #0]
 80039d2:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 80039d4:	701c      	strb	r4, [r3, #0]
 80039d6:	e7d8      	b.n	800398a <TIM2_ch1_overflow_callback+0x16>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 80039d8:	4b14      	ldr	r3, [pc, #80]	@ (8003a2c <TIM2_ch1_overflow_callback+0xb8>)
 80039da:	2202      	movs	r2, #2
 80039dc:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 80039de:	3201      	adds	r2, #1
 80039e0:	705a      	strb	r2, [r3, #1]
		MIDI_CLK_fsm = NOT_COMPILING;
 80039e2:	4b13      	ldr	r3, [pc, #76]	@ (8003a30 <TIM2_ch1_overflow_callback+0xbc>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 80039e8:	4b12      	ldr	r3, [pc, #72]	@ (8003a34 <TIM2_ch1_overflow_callback+0xc0>)
 80039ea:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80039ec:	2180      	movs	r1, #128	@ 0x80
 80039ee:	20a0      	movs	r0, #160	@ 0xa0
 80039f0:	3201      	adds	r2, #1
 80039f2:	0089      	lsls	r1, r1, #2
 80039f4:	05c0      	lsls	r0, r0, #23
 80039f6:	f002 fc2b 	bl	8006250 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80039fa:	2200      	movs	r2, #0
 80039fc:	2140      	movs	r1, #64	@ 0x40
 80039fe:	480e      	ldr	r0, [pc, #56]	@ (8003a38 <TIM2_ch1_overflow_callback+0xc4>)
 8003a00:	f002 fc26 	bl	8006250 <HAL_GPIO_WritePin>
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8003a04:	4b08      	ldr	r3, [pc, #32]	@ (8003a28 <TIM2_ch1_overflow_callback+0xb4>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d0be      	beq.n	800398a <TIM2_ch1_overflow_callback+0x16>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 8003a0c:	4b06      	ldr	r3, [pc, #24]	@ (8003a28 <TIM2_ch1_overflow_callback+0xb4>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b06      	cmp	r3, #6
 8003a12:	d0ba      	beq.n	800398a <TIM2_ch1_overflow_callback+0x16>
 8003a14:	4b04      	ldr	r3, [pc, #16]	@ (8003a28 <TIM2_ch1_overflow_callback+0xb4>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d0b6      	beq.n	800398a <TIM2_ch1_overflow_callback+0x16>
			speed_fsm.prev_state = speed_fsm.current_state;
 8003a1c:	4b02      	ldr	r3, [pc, #8]	@ (8003a28 <TIM2_ch1_overflow_callback+0xb4>)
 8003a1e:	781a      	ldrb	r2, [r3, #0]
 8003a20:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8003a22:	701c      	strb	r4, [r3, #0]
}
 8003a24:	e7b1      	b.n	800398a <TIM2_ch1_overflow_callback+0x16>
 8003a26:	46c0      	nop			@ (mov r8, r8)
 8003a28:	20000448 	.word	0x20000448
 8003a2c:	20000434 	.word	0x20000434
 8003a30:	20000d6c 	.word	0x20000d6c
 8003a34:	20000ca8 	.word	0x20000ca8
 8003a38:	50000800 	.word	0x50000800

08003a3c <TIM3_ch1_IP_capture_measurement_reelapse_callback>:
void TIM3_ch1_IP_capture_measurement_reelapse_callback(TIM_HandleTypeDef *htim){
 8003a3c:	b570      	push	{r4, r5, r6, lr}
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8003a3e:	4b35      	ldr	r3, [pc, #212]	@ (8003b14 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xd8>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b0b      	cmp	r3, #11
 8003a44:	d013      	beq.n	8003a6e <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x32>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 8003a46:	4b33      	ldr	r3, [pc, #204]	@ (8003b14 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xd8>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b0c      	cmp	r3, #12
 8003a4c:	d00f      	beq.n	8003a6e <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x32>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8003a4e:	4b31      	ldr	r3, [pc, #196]	@ (8003b14 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xd8>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b0d      	cmp	r3, #13
 8003a54:	d00b      	beq.n	8003a6e <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x32>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 8003a56:	4b2f      	ldr	r3, [pc, #188]	@ (8003b14 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xd8>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b10      	cmp	r3, #16
 8003a5c:	d007      	beq.n	8003a6e <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x32>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 8003a5e:	4b2d      	ldr	r3, [pc, #180]	@ (8003b14 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xd8>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b11      	cmp	r3, #17
 8003a64:	d003      	beq.n	8003a6e <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x32>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8003a66:	4b2b      	ldr	r3, [pc, #172]	@ (8003b14 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xd8>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8003a6a:	2b12      	cmp	r3, #18
 8003a6c:	d124      	bne.n	8003ab8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x7c>
	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8003a6e:	482a      	ldr	r0, [pc, #168]	@ (8003b18 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xdc>)
 8003a70:	2100      	movs	r1, #0
 8003a72:	f001 f986 	bl	8004d82 <Stop_OC_TIM>
	if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){
 8003a76:	4b29      	ldr	r3, [pc, #164]	@ (8003b1c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xe0>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d020      	beq.n	8003ac0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8003a7e:	4b27      	ldr	r3, [pc, #156]	@ (8003b1c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xe0>)
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d022      	beq.n	8003acc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x90>
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8003a86:	4b23      	ldr	r3, [pc, #140]	@ (8003b14 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xd8>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b0b      	cmp	r3, #11
 8003a8c:	d013      	beq.n	8003ab6 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x7a>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 8003a8e:	4b21      	ldr	r3, [pc, #132]	@ (8003b14 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xd8>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b0c      	cmp	r3, #12
 8003a94:	d00f      	beq.n	8003ab6 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x7a>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8003a96:	4b1f      	ldr	r3, [pc, #124]	@ (8003b14 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xd8>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b0d      	cmp	r3, #13
 8003a9c:	d00b      	beq.n	8003ab6 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x7a>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b14 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xd8>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b10      	cmp	r3, #16
 8003aa4:	d007      	beq.n	8003ab6 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x7a>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 8003aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b14 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xd8>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b11      	cmp	r3, #17
 8003aac:	d003      	beq.n	8003ab6 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x7a>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8003aae:	4b19      	ldr	r3, [pc, #100]	@ (8003b14 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xd8>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8003ab2:	2b12      	cmp	r3, #18
 8003ab4:	d110      	bne.n	8003ad8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x9c>
}
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}
		Set_Oscillator_Values(&params_to_be_loaded);
 8003ab8:	4819      	ldr	r0, [pc, #100]	@ (8003b20 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xe4>)
 8003aba:	f000 fab7 	bl	800402c <Set_Oscillator_Values>
 8003abe:	e7d6      	b.n	8003a6e <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x32>
		IP_CAP_fsm.current_state = IDLE;
 8003ac0:	4b16      	ldr	r3, [pc, #88]	@ (8003b1c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xe0>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8003ac6:	3202      	adds	r2, #2
 8003ac8:	705a      	strb	r2, [r3, #1]
 8003aca:	e7dc      	b.n	8003a86 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4a>
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8003acc:	4b13      	ldr	r3, [pc, #76]	@ (8003b1c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xe0>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8003ad2:	3202      	adds	r2, #2
 8003ad4:	705a      	strb	r2, [r3, #1]
 8003ad6:	e7d6      	b.n	8003a86 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4a>
		Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8003ad8:	4912      	ldr	r1, [pc, #72]	@ (8003b24 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xe8>)
 8003ada:	4c11      	ldr	r4, [pc, #68]	@ (8003b20 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xe4>)
 8003adc:	0020      	movs	r0, r4
 8003ade:	f000 f987 	bl	8003df0 <Copy_Params_Structs>
		Copy_Params_Structs(&params_to_be_loaded, &params);
 8003ae2:	4d11      	ldr	r5, [pc, #68]	@ (8003b28 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xec>)
 8003ae4:	0029      	movs	r1, r5
 8003ae6:	0020      	movs	r0, r4
 8003ae8:	f000 f982 	bl	8003df0 <Copy_Params_Structs>
		Set_Status_Bit(&statuses, First_Sync_Complete);
 8003aec:	480f      	ldr	r0, [pc, #60]	@ (8003b2c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xf0>)
 8003aee:	2108      	movs	r1, #8
 8003af0:	f001 f97c 	bl	8004dec <Set_Status_Bit>
		Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8003af4:	2100      	movs	r1, #0
 8003af6:	0028      	movs	r0, r5
 8003af8:	f000 faae 	bl	8004058 <Calculate_Next_Main_Oscillator_Values>
		Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8003afc:	490c      	ldr	r1, [pc, #48]	@ (8003b30 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xf4>)
 8003afe:	0028      	movs	r0, r5
 8003b00:	f000 fb46 	bl	8004190 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8003b04:	4b0b      	ldr	r3, [pc, #44]	@ (8003b34 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xf8>)
 8003b06:	781a      	ldrb	r2, [r3, #0]
 8003b08:	490b      	ldr	r1, [pc, #44]	@ (8003b38 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xfc>)
 8003b0a:	480c      	ldr	r0, [pc, #48]	@ (8003b3c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x100>)
 8003b0c:	f001 fdb8 	bl	8005680 <HAL_ADC_Start_DMA>
}
 8003b10:	e7d1      	b.n	8003ab6 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x7a>
 8003b12:	46c0      	nop			@ (mov r8, r8)
 8003b14:	20000448 	.word	0x20000448
 8003b18:	20000804 	.word	0x20000804
 8003b1c:	20000434 	.word	0x20000434
 8003b20:	20000ce8 	.word	0x20000ce8
 8003b24:	20000cc0 	.word	0x20000cc0
 8003b28:	20000d38 	.word	0x20000d38
 8003b2c:	20000cbc 	.word	0x20000cbc
 8003b30:	20000028 	.word	0x20000028
 8003b34:	080094d4 	.word	0x080094d4
 8003b38:	20000d60 	.word	0x20000d60
 8003b3c:	20000c0c 	.word	0x20000c0c

08003b40 <UART2_TX_transfer_complete_callback>:
}
 8003b40:	4770      	bx	lr
	...

08003b44 <HAL_GPIO_EXTI_Falling_Callback>:
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8003b44:	b510      	push	{r4, lr}
	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with falling interrupt
 8003b46:	2380      	movs	r3, #128	@ 0x80
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	4298      	cmp	r0, r3
 8003b4c:	d000      	beq.n	8003b50 <HAL_GPIO_EXTI_Falling_Callback+0xc>
}
 8003b4e:	bd10      	pop	{r4, pc}
		if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8003b50:	4b0a      	ldr	r3, [pc, #40]	@ (8003b7c <HAL_GPIO_EXTI_Falling_Callback+0x38>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b06      	cmp	r3, #6
 8003b56:	d003      	beq.n	8003b60 <HAL_GPIO_EXTI_Falling_Callback+0x1c>
 8003b58:	4b08      	ldr	r3, [pc, #32]	@ (8003b7c <HAL_GPIO_EXTI_Falling_Callback+0x38>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b07      	cmp	r3, #7
 8003b5e:	d1f6      	bne.n	8003b4e <HAL_GPIO_EXTI_Falling_Callback+0xa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003b60:	2180      	movs	r1, #128	@ 0x80
 8003b62:	20a0      	movs	r0, #160	@ 0xa0
 8003b64:	2201      	movs	r2, #1
 8003b66:	0089      	lsls	r1, r1, #2
 8003b68:	05c0      	lsls	r0, r0, #23
 8003b6a:	f002 fb71 	bl	8006250 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2140      	movs	r1, #64	@ 0x40
 8003b72:	4803      	ldr	r0, [pc, #12]	@ (8003b80 <HAL_GPIO_EXTI_Falling_Callback+0x3c>)
 8003b74:	f002 fb6c 	bl	8006250 <HAL_GPIO_WritePin>
}
 8003b78:	e7e9      	b.n	8003b4e <HAL_GPIO_EXTI_Falling_Callback+0xa>
 8003b7a:	46c0      	nop			@ (mov r8, r8)
 8003b7c:	20000448 	.word	0x20000448
 8003b80:	50000800 	.word	0x50000800

08003b84 <HAL_GPIO_EXTI_Rising_Callback>:
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8003b84:	b510      	push	{r4, lr}
	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with rising interrupt
 8003b86:	2380      	movs	r3, #128	@ 0x80
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	4298      	cmp	r0, r3
 8003b8c:	d000      	beq.n	8003b90 <HAL_GPIO_EXTI_Rising_Callback+0xc>
}
 8003b8e:	bd10      	pop	{r4, pc}
		if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8003b90:	4b5d      	ldr	r3, [pc, #372]	@ (8003d08 <HAL_GPIO_EXTI_Rising_Callback+0x184>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d025      	beq.n	8003be4 <HAL_GPIO_EXTI_Rising_Callback+0x60>
		else if(speed_fsm.current_state.shared_state == PC_MODE){
 8003b98:	4b5b      	ldr	r3, [pc, #364]	@ (8003d08 <HAL_GPIO_EXTI_Rising_Callback+0x184>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d033      	beq.n	8003c08 <HAL_GPIO_EXTI_Rising_Callback+0x84>
		else if(speed_fsm.current_state.shared_state == CC_MODE){
 8003ba0:	4b59      	ldr	r3, [pc, #356]	@ (8003d08 <HAL_GPIO_EXTI_Rising_Callback+0x184>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d041      	beq.n	8003c2c <HAL_GPIO_EXTI_Rising_Callback+0xa8>
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003ba8:	4b57      	ldr	r3, [pc, #348]	@ (8003d08 <HAL_GPIO_EXTI_Rising_Callback+0x184>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d04f      	beq.n	8003c50 <HAL_GPIO_EXTI_Rising_Callback+0xcc>
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003bb0:	4b55      	ldr	r3, [pc, #340]	@ (8003d08 <HAL_GPIO_EXTI_Rising_Callback+0x184>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d070      	beq.n	8003c9a <HAL_GPIO_EXTI_Rising_Callback+0x116>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){ //second edge
 8003bb8:	4b53      	ldr	r3, [pc, #332]	@ (8003d08 <HAL_GPIO_EXTI_Rising_Callback+0x184>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b07      	cmp	r3, #7
 8003bbe:	d100      	bne.n	8003bc2 <HAL_GPIO_EXTI_Rising_Callback+0x3e>
 8003bc0:	e090      	b.n	8003ce4 <HAL_GPIO_EXTI_Rising_Callback+0x160>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE){
 8003bc2:	4b51      	ldr	r3, [pc, #324]	@ (8003d08 <HAL_GPIO_EXTI_Rising_Callback+0x184>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b06      	cmp	r3, #6
 8003bc8:	d1e1      	bne.n	8003b8e <HAL_GPIO_EXTI_Rising_Callback+0xa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003bca:	2180      	movs	r1, #128	@ 0x80
 8003bcc:	20a0      	movs	r0, #160	@ 0xa0
 8003bce:	2200      	movs	r2, #0
 8003bd0:	0089      	lsls	r1, r1, #2
 8003bd2:	05c0      	lsls	r0, r0, #23
 8003bd4:	f002 fb3c 	bl	8006250 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003bd8:	2201      	movs	r2, #1
 8003bda:	2140      	movs	r1, #64	@ 0x40
 8003bdc:	484b      	ldr	r0, [pc, #300]	@ (8003d0c <HAL_GPIO_EXTI_Rising_Callback+0x188>)
 8003bde:	f002 fb37 	bl	8006250 <HAL_GPIO_WritePin>
}
 8003be2:	e7d4      	b.n	8003b8e <HAL_GPIO_EXTI_Rising_Callback+0xa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003be4:	2180      	movs	r1, #128	@ 0x80
 8003be6:	20a0      	movs	r0, #160	@ 0xa0
 8003be8:	2200      	movs	r2, #0
 8003bea:	0089      	lsls	r1, r1, #2
 8003bec:	05c0      	lsls	r0, r0, #23
 8003bee:	f002 fb2f 	bl	8006250 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	2140      	movs	r1, #64	@ 0x40
 8003bf6:	4845      	ldr	r0, [pc, #276]	@ (8003d0c <HAL_GPIO_EXTI_Rising_Callback+0x188>)
 8003bf8:	f002 fb2a 	bl	8006250 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003bfc:	4b42      	ldr	r3, [pc, #264]	@ (8003d08 <HAL_GPIO_EXTI_Rising_Callback+0x184>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003c02:	3206      	adds	r2, #6
 8003c04:	701a      	strb	r2, [r3, #0]
 8003c06:	e7c2      	b.n	8003b8e <HAL_GPIO_EXTI_Rising_Callback+0xa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003c08:	2180      	movs	r1, #128	@ 0x80
 8003c0a:	20a0      	movs	r0, #160	@ 0xa0
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	0089      	lsls	r1, r1, #2
 8003c10:	05c0      	lsls	r0, r0, #23
 8003c12:	f002 fb1d 	bl	8006250 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003c16:	2201      	movs	r2, #1
 8003c18:	2140      	movs	r1, #64	@ 0x40
 8003c1a:	483c      	ldr	r0, [pc, #240]	@ (8003d0c <HAL_GPIO_EXTI_Rising_Callback+0x188>)
 8003c1c:	f002 fb18 	bl	8006250 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = PC_MODE;
 8003c20:	4b39      	ldr	r3, [pc, #228]	@ (8003d08 <HAL_GPIO_EXTI_Rising_Callback+0x184>)
 8003c22:	2203      	movs	r2, #3
 8003c24:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003c26:	3204      	adds	r2, #4
 8003c28:	701a      	strb	r2, [r3, #0]
 8003c2a:	e7b0      	b.n	8003b8e <HAL_GPIO_EXTI_Rising_Callback+0xa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003c2c:	2180      	movs	r1, #128	@ 0x80
 8003c2e:	20a0      	movs	r0, #160	@ 0xa0
 8003c30:	2200      	movs	r2, #0
 8003c32:	0089      	lsls	r1, r1, #2
 8003c34:	05c0      	lsls	r0, r0, #23
 8003c36:	f002 fb0b 	bl	8006250 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	2140      	movs	r1, #64	@ 0x40
 8003c3e:	4833      	ldr	r0, [pc, #204]	@ (8003d0c <HAL_GPIO_EXTI_Rising_Callback+0x188>)
 8003c40:	f002 fb06 	bl	8006250 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = CC_MODE;
 8003c44:	4b30      	ldr	r3, [pc, #192]	@ (8003d08 <HAL_GPIO_EXTI_Rising_Callback+0x184>)
 8003c46:	2202      	movs	r2, #2
 8003c48:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003c4a:	3205      	adds	r2, #5
 8003c4c:	701a      	strb	r2, [r3, #0]
 8003c4e:	e79e      	b.n	8003b8e <HAL_GPIO_EXTI_Rising_Callback+0xa>
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003c50:	4b2f      	ldr	r3, [pc, #188]	@ (8003d10 <HAL_GPIO_EXTI_Rising_Callback+0x18c>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1ab      	bne.n	8003bb0 <HAL_GPIO_EXTI_Rising_Callback+0x2c>
 8003c58:	482e      	ldr	r0, [pc, #184]	@ (8003d14 <HAL_GPIO_EXTI_Rising_Callback+0x190>)
 8003c5a:	2120      	movs	r1, #32
 8003c5c:	f001 f8c0 	bl	8004de0 <Get_Status_Bit>
 8003c60:	2801      	cmp	r0, #1
 8003c62:	d1a5      	bne.n	8003bb0 <HAL_GPIO_EXTI_Rising_Callback+0x2c>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003c64:	2180      	movs	r1, #128	@ 0x80
 8003c66:	309f      	adds	r0, #159	@ 0x9f
 8003c68:	2200      	movs	r2, #0
 8003c6a:	0089      	lsls	r1, r1, #2
 8003c6c:	05c0      	lsls	r0, r0, #23
 8003c6e:	f002 faef 	bl	8006250 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003c72:	2201      	movs	r2, #1
 8003c74:	2140      	movs	r1, #64	@ 0x40
 8003c76:	4825      	ldr	r0, [pc, #148]	@ (8003d0c <HAL_GPIO_EXTI_Rising_Callback+0x188>)
 8003c78:	f002 faea 	bl	8006250 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = TAP_MODE;
 8003c7c:	4b22      	ldr	r3, [pc, #136]	@ (8003d08 <HAL_GPIO_EXTI_Rising_Callback+0x184>)
 8003c7e:	2204      	movs	r2, #4
 8003c80:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003c82:	3203      	adds	r2, #3
 8003c84:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003c86:	4c23      	ldr	r4, [pc, #140]	@ (8003d14 <HAL_GPIO_EXTI_Rising_Callback+0x190>)
 8003c88:	2120      	movs	r1, #32
 8003c8a:	0020      	movs	r0, r4
 8003c8c:	f001 f8b2 	bl	8004df4 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003c90:	2140      	movs	r1, #64	@ 0x40
 8003c92:	0020      	movs	r0, r4
 8003c94:	f001 f8ae 	bl	8004df4 <Clear_Status_Bit>
 8003c98:	e779      	b.n	8003b8e <HAL_GPIO_EXTI_Rising_Callback+0xa>
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003d10 <HAL_GPIO_EXTI_Rising_Callback+0x18c>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d18a      	bne.n	8003bb8 <HAL_GPIO_EXTI_Rising_Callback+0x34>
 8003ca2:	481c      	ldr	r0, [pc, #112]	@ (8003d14 <HAL_GPIO_EXTI_Rising_Callback+0x190>)
 8003ca4:	2120      	movs	r1, #32
 8003ca6:	f001 f89b 	bl	8004de0 <Get_Status_Bit>
 8003caa:	2801      	cmp	r0, #1
 8003cac:	d184      	bne.n	8003bb8 <HAL_GPIO_EXTI_Rising_Callback+0x34>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003cae:	2180      	movs	r1, #128	@ 0x80
 8003cb0:	309f      	adds	r0, #159	@ 0x9f
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	0089      	lsls	r1, r1, #2
 8003cb6:	05c0      	lsls	r0, r0, #23
 8003cb8:	f002 faca 	bl	8006250 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	2140      	movs	r1, #64	@ 0x40
 8003cc0:	4812      	ldr	r0, [pc, #72]	@ (8003d0c <HAL_GPIO_EXTI_Rising_Callback+0x188>)
 8003cc2:	f002 fac5 	bl	8006250 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003cc6:	4b10      	ldr	r3, [pc, #64]	@ (8003d08 <HAL_GPIO_EXTI_Rising_Callback+0x184>)
 8003cc8:	2208      	movs	r2, #8
 8003cca:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003ccc:	3a01      	subs	r2, #1
 8003cce:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003cd0:	4c10      	ldr	r4, [pc, #64]	@ (8003d14 <HAL_GPIO_EXTI_Rising_Callback+0x190>)
 8003cd2:	2120      	movs	r1, #32
 8003cd4:	0020      	movs	r0, r4
 8003cd6:	f001 f88d 	bl	8004df4 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003cda:	2140      	movs	r1, #64	@ 0x40
 8003cdc:	0020      	movs	r0, r4
 8003cde:	f001 f889 	bl	8004df4 <Clear_Status_Bit>
 8003ce2:	e754      	b.n	8003b8e <HAL_GPIO_EXTI_Rising_Callback+0xa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003ce4:	2180      	movs	r1, #128	@ 0x80
 8003ce6:	20a0      	movs	r0, #160	@ 0xa0
 8003ce8:	2200      	movs	r2, #0
 8003cea:	0089      	lsls	r1, r1, #2
 8003cec:	05c0      	lsls	r0, r0, #23
 8003cee:	f002 faaf 	bl	8006250 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	2140      	movs	r1, #64	@ 0x40
 8003cf6:	4805      	ldr	r0, [pc, #20]	@ (8003d0c <HAL_GPIO_EXTI_Rising_Callback+0x188>)
 8003cf8:	f002 faaa 	bl	8006250 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003cfc:	4b02      	ldr	r3, [pc, #8]	@ (8003d08 <HAL_GPIO_EXTI_Rising_Callback+0x184>)
 8003cfe:	2207      	movs	r2, #7
 8003d00:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8003d02:	3a01      	subs	r2, #1
 8003d04:	701a      	strb	r2, [r3, #0]
 8003d06:	e742      	b.n	8003b8e <HAL_GPIO_EXTI_Rising_Callback+0xa>
 8003d08:	20000448 	.word	0x20000448
 8003d0c:	50000800 	.word	0x50000800
 8003d10:	20000434 	.word	0x20000434
 8003d14:	20000cbc 	.word	0x20000cbc

08003d18 <TIM17_callback>:
}
 8003d18:	4770      	bx	lr
	...

08003d1c <Input_Capture_Processing>:
volatile uint32_t TIM2_ch1_input_capture_value;
volatile uint16_t interrupt_period = 0;
volatile uint8_t MIDI_CLK_tag = 0;

//FUNCTION DEFINITIONS
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params *params_ptr){
 8003d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	000f      	movs	r7, r1
 8003d22:	466b      	mov	r3, sp
 8003d24:	1d9c      	adds	r4, r3, #6
 8003d26:	80d8      	strh	r0, [r3, #6]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Clear_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started); //reset flag
 8003d28:	481e      	ldr	r0, [pc, #120]	@ (8003da4 <Input_Capture_Processing+0x88>)
 8003d2a:	2104      	movs	r1, #4
 8003d2c:	f001 f862 	bl	8004df4 <Clear_Status_Bit>

	//DETERMINE WHAT TO SET THE RAW_START_VALUE AND BASE_PRESCALER TO BASED ON THE I/P CAPTURE VALUE
	//CHECK FOR PRIMALITY
	if(isPrime(interrupt_period_value) == YES){
 8003d30:	8820      	ldrh	r0, [r4, #0]
 8003d32:	b280      	uxth	r0, r0
 8003d34:	f001 f82f 	bl	8004d96 <isPrime>
 8003d38:	2801      	cmp	r0, #1
 8003d3a:	d014      	beq.n	8003d66 <Input_Capture_Processing+0x4a>

		interrupt_period_value += 1;
	}

	//START FINDING FACTORS
	uint32_t N = interrupt_period_value << 6; //calculate the N-value which is prescaler_meas * interrupt_period_meas. The measurement prescaler is used which is 64. (TIM2 has a prescaler of 64*512, but since we divide this value by 512, the prescaler is then just 64).
 8003d3c:	466b      	mov	r3, sp
 8003d3e:	88de      	ldrh	r6, [r3, #6]
 8003d40:	01b6      	lsls	r6, r6, #6
 8003d42:	2480      	movs	r4, #128	@ 0x80
 8003d44:	0064      	lsls	r4, r4, #1

	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N

		interrupt_period_value = 256 - i;
 8003d46:	466b      	mov	r3, sp
 8003d48:	1d9d      	adds	r5, r3, #6
 8003d4a:	802c      	strh	r4, [r5, #0]
		uint16_t remainder = N % interrupt_period_value;
 8003d4c:	8829      	ldrh	r1, [r5, #0]
 8003d4e:	b289      	uxth	r1, r1
 8003d50:	0030      	movs	r0, r6
 8003d52:	f7fc fa5f 	bl	8000214 <__aeabi_uidivmod>

		if(remainder == 0){ //check if no remainder -> integer
 8003d56:	b289      	uxth	r1, r1
 8003d58:	2900      	cmp	r1, #0
 8003d5a:	d009      	beq.n	8003d70 <Input_Capture_Processing+0x54>
	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8003d5c:	3c01      	subs	r4, #1
 8003d5e:	b2a4      	uxth	r4, r4
 8003d60:	2c7f      	cmp	r4, #127	@ 0x7f
 8003d62:	d1f2      	bne.n	8003d4a <Input_Capture_Processing+0x2e>
 8003d64:	e00c      	b.n	8003d80 <Input_Capture_Processing+0x64>
		interrupt_period_value += 1;
 8003d66:	8823      	ldrh	r3, [r4, #0]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	8023      	strh	r3, [r4, #0]
 8003d6e:	e7e5      	b.n	8003d3c <Input_Capture_Processing+0x20>

			params_ptr->raw_prescaler = N / interrupt_period_value;
 8003d70:	466b      	mov	r3, sp
 8003d72:	88d9      	ldrh	r1, [r3, #6]
 8003d74:	b289      	uxth	r1, r1
 8003d76:	0030      	movs	r0, r6
 8003d78:	f7fc f9c6 	bl	8000108 <__udivsi3>
 8003d7c:	b280      	uxth	r0, r0
 8003d7e:	83b8      	strh	r0, [r7, #28]
			break;
		}
	}

	params_ptr->raw_start_value = 256 - interrupt_period_value;
 8003d80:	466b      	mov	r3, sp
 8003d82:	88da      	ldrh	r2, [r3, #6]
 8003d84:	2380      	movs	r3, #128	@ 0x80
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	82bb      	strh	r3, [r7, #20]

	Calculate_Next_Main_Oscillator_Values(params_ptr, (enum Next_Values_Processing_Mode)IP_CAPTURE_MODE);
 8003d8e:	2101      	movs	r1, #1
 8003d90:	0038      	movs	r0, r7
 8003d92:	f000 f961 	bl	8004058 <Calculate_Next_Main_Oscillator_Values>
	Process_TIM16_Final_Start_Value_and_Final_Prescaler(params_ptr);
 8003d96:	0038      	movs	r0, r7
 8003d98:	f000 fe48 	bl	8004a2c <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);

	return 1;
}
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	b003      	add	sp, #12
 8003da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003da2:	46c0      	nop			@ (mov r8, r8)
 8003da4:	20000cbc 	.word	0x20000cbc

08003da8 <Start_IC_TIM>:
	}

	return ok;
}

uint8_t Start_IC_TIM(TIM_HandleTypeDef *TIM, uint32_t IC_TIM_channel){
 8003da8:	b570      	push	{r4, r5, r6, lr}
 8003daa:	000d      	movs	r5, r1

	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 8003dac:	4e08      	ldr	r6, [pc, #32]	@ (8003dd0 <Start_IC_TIM+0x28>)
 8003dae:	0030      	movs	r0, r6
 8003db0:	f003 fb42 	bl	8007438 <HAL_TIM_Base_Start_IT>
 8003db4:	0004      	movs	r4, r0
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 8003db6:	0029      	movs	r1, r5
 8003db8:	0030      	movs	r0, r6
 8003dba:	f004 fa1f 	bl	80081fc <HAL_TIM_IC_Start_IT>
 8003dbe:	4004      	ands	r4, r0
 8003dc0:	b2e4      	uxtb	r4, r4

	if(ok_AND != HAL_OK){
 8003dc2:	2c00      	cmp	r4, #0
 8003dc4:	d101      	bne.n	8003dca <Start_IC_TIM+0x22>

		Error_Handler();
	}

	return ok_AND;
}
 8003dc6:	0020      	movs	r0, r4
 8003dc8:	bd70      	pop	{r4, r5, r6, pc}
		Error_Handler();
 8003dca:	f7fd fe31 	bl	8001a30 <Error_Handler>
 8003dce:	e7fa      	b.n	8003dc6 <Start_IC_TIM+0x1e>
 8003dd0:	200008c0 	.word	0x200008c0

08003dd4 <Start_Input_Capture_Timer>:
uint8_t Start_Input_Capture_Timer(void){
 8003dd4:	b510      	push	{r4, lr}
	uint8_t ok = Start_IC_TIM(&htim2, TIM_CHANNEL_1);
 8003dd6:	4805      	ldr	r0, [pc, #20]	@ (8003dec <Start_Input_Capture_Timer+0x18>)
 8003dd8:	2100      	movs	r1, #0
 8003dda:	f7ff ffe5 	bl	8003da8 <Start_IC_TIM>
 8003dde:	1e04      	subs	r4, r0, #0
	if(ok != HAL_OK){
 8003de0:	d101      	bne.n	8003de6 <Start_Input_Capture_Timer+0x12>
}
 8003de2:	0020      	movs	r0, r4
 8003de4:	bd10      	pop	{r4, pc}
		Error_Handler();
 8003de6:	f7fd fe23 	bl	8001a30 <Error_Handler>
 8003dea:	e7fa      	b.n	8003de2 <Start_Input_Capture_Timer+0xe>
 8003dec:	200008c0 	.word	0x200008c0

08003df0 <Copy_Params_Structs>:

uint8_t Copy_Params_Structs(struct Params *src_ptr, struct Params *dst_ptr){
 8003df0:	b510      	push	{r4, lr}
 8003df2:	0003      	movs	r3, r0
 8003df4:	0008      	movs	r0, r1

	*dst_ptr = *src_ptr;
 8003df6:	2226      	movs	r2, #38	@ 0x26
 8003df8:	0019      	movs	r1, r3
 8003dfa:	f005 fb29 	bl	8009450 <memcpy>

	return 1;
}
 8003dfe:	2001      	movs	r0, #1
 8003e00:	bd10      	pop	{r4, pc}
	...

08003e04 <Start_Measurement_Reelapse_Timer>:

uint8_t Start_Measurement_Reelapse_Timer(void){
 8003e04:	b510      	push	{r4, lr}

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8003e06:	4c09      	ldr	r4, [pc, #36]	@ (8003e2c <Start_Measurement_Reelapse_Timer+0x28>)
 8003e08:	2100      	movs	r1, #0
 8003e0a:	0020      	movs	r0, r4
 8003e0c:	f000 ffb9 	bl	8004d82 <Stop_OC_TIM>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003e10:	6822      	ldr	r2, [r4, #0]
 8003e12:	2300      	movs	r3, #0
 8003e14:	6253      	str	r3, [r2, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 8003e16:	4b06      	ldr	r3, [pc, #24]	@ (8003e30 <Start_Measurement_Reelapse_Timer+0x2c>)
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	6353      	str	r3, [r2, #52]	@ 0x34
	Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8003e1e:	2100      	movs	r1, #0
 8003e20:	0020      	movs	r0, r4
 8003e22:	f000 ffa4 	bl	8004d6e <Start_OC_TIM>

	return 1;
}
 8003e26:	2001      	movs	r0, #1
 8003e28:	bd10      	pop	{r4, pc}
 8003e2a:	46c0      	nop			@ (mov r8, r8)
 8003e2c:	20000804 	.word	0x20000804
 8003e30:	20000caa 	.word	0x20000caa

08003e34 <Begin_Input_Capture_Measurement>:

uint8_t Begin_Input_Capture_Measurement(void){

	__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 8003e34:	4b02      	ldr	r3, [pc, #8]	@ (8003e40 <Begin_Input_Capture_Measurement+0xc>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	625a      	str	r2, [r3, #36]	@ 0x24

	return 1;
}
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	4770      	bx	lr
 8003e40:	200008c0 	.word	0x200008c0

08003e44 <main>:
//INCLUDES
#include "main.h"
#include "main_vars.h"

int __attribute__((optimize("O0")))main(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
	//SYSTEM INIT
	System_Init();
 8003e48:	f7fd fdf4 	bl	8001a34 <System_Init>

	//STARTUP
	Startup();
 8003e4c:	f000 fa2c 	bl	80042a8 <Startup>

	while (1)
	{
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 8003e50:	4b4b      	ldr	r3, [pc, #300]	@ (8003f80 <main+0x13c>)
 8003e52:	2104      	movs	r1, #4
 8003e54:	0018      	movs	r0, r3
 8003e56:	f000 ffc3 	bl	8004de0 <Get_Status_Bit>
 8003e5a:	0003      	movs	r3, r0
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d107      	bne.n	8003e70 <main+0x2c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

			Input_Capture_Processing(interrupt_period, &params_to_be_loaded);
 8003e60:	4b48      	ldr	r3, [pc, #288]	@ (8003f84 <main+0x140>)
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	4a48      	ldr	r2, [pc, #288]	@ (8003f88 <main+0x144>)
 8003e68:	0011      	movs	r1, r2
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f7ff ff56 	bl	8003d1c <Input_Capture_Processing>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
		}

		if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running) == YES){
 8003e70:	4b43      	ldr	r3, [pc, #268]	@ (8003f80 <main+0x13c>)
 8003e72:	2140      	movs	r1, #64	@ 0x40
 8003e74:	0018      	movs	r0, r3
 8003e76:	f000 ffb3 	bl	8004de0 <Get_Status_Bit>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d12b      	bne.n	8003ed8 <main+0x94>

			if(idle_counter < IDLE_COUNT){
 8003e80:	4b42      	ldr	r3, [pc, #264]	@ (8003f8c <main+0x148>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	23fa      	movs	r3, #250	@ 0xfa
 8003e86:	01db      	lsls	r3, r3, #7
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d218      	bcs.n	8003ebe <main+0x7a>

				if(IP_CAP_fsm.current_state != IDLE){
 8003e8c:	4b40      	ldr	r3, [pc, #256]	@ (8003f90 <main+0x14c>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00d      	beq.n	8003eb2 <main+0x6e>

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003e96:	4b3a      	ldr	r3, [pc, #232]	@ (8003f80 <main+0x13c>)
 8003e98:	2140      	movs	r1, #64	@ 0x40
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f000 ffaa 	bl	8004df4 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003ea0:	4b37      	ldr	r3, [pc, #220]	@ (8003f80 <main+0x13c>)
 8003ea2:	2120      	movs	r1, #32
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f000 ffa5 	bl	8004df4 <Clear_Status_Bit>
					idle_counter = 0;
 8003eaa:	4b38      	ldr	r3, [pc, #224]	@ (8003f8c <main+0x148>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	e012      	b.n	8003ed8 <main+0x94>
				}
				else{

					idle_counter++;
 8003eb2:	4b36      	ldr	r3, [pc, #216]	@ (8003f8c <main+0x148>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	4b34      	ldr	r3, [pc, #208]	@ (8003f8c <main+0x148>)
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	e00c      	b.n	8003ed8 <main+0x94>
				}
			}
			else{

				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003ebe:	4b30      	ldr	r3, [pc, #192]	@ (8003f80 <main+0x13c>)
 8003ec0:	2140      	movs	r1, #64	@ 0x40
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f000 ff96 	bl	8004df4 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8003f80 <main+0x13c>)
 8003eca:	2120      	movs	r1, #32
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f000 ff8d 	bl	8004dec <Set_Status_Bit>
				idle_counter = 0;
 8003ed2:	4b2e      	ldr	r3, [pc, #184]	@ (8003f8c <main+0x148>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]
			}
		}

		if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running) == YES){
 8003ed8:	2380      	movs	r3, #128	@ 0x80
 8003eda:	005a      	lsls	r2, r3, #1
 8003edc:	4b28      	ldr	r3, [pc, #160]	@ (8003f80 <main+0x13c>)
 8003ede:	0011      	movs	r1, r2
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f000 ff7d 	bl	8004de0 <Get_Status_Bit>
 8003ee6:	0003      	movs	r3, r0
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d122      	bne.n	8003f32 <main+0xee>

			if(midi_counter < MIDI_COUNT){
 8003eec:	4b29      	ldr	r3, [pc, #164]	@ (8003f94 <main+0x150>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a29      	ldr	r2, [pc, #164]	@ (8003f98 <main+0x154>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d805      	bhi.n	8003f02 <main+0xbe>

				midi_counter++;
 8003ef6:	4b27      	ldr	r3, [pc, #156]	@ (8003f94 <main+0x150>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	4b25      	ldr	r3, [pc, #148]	@ (8003f94 <main+0x150>)
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	e017      	b.n	8003f32 <main+0xee>
			}
			else{

				Clear_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003f02:	2380      	movs	r3, #128	@ 0x80
 8003f04:	005a      	lsls	r2, r3, #1
 8003f06:	4b1e      	ldr	r3, [pc, #120]	@ (8003f80 <main+0x13c>)
 8003f08:	0011      	movs	r1, r2
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f000 ff72 	bl	8004df4 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out);
 8003f10:	2380      	movs	r3, #128	@ 0x80
 8003f12:	009a      	lsls	r2, r3, #2
 8003f14:	4b1a      	ldr	r3, [pc, #104]	@ (8003f80 <main+0x13c>)
 8003f16:	0011      	movs	r1, r2
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f000 ff67 	bl	8004dec <Set_Status_Bit>
				active_status_byte = 0;
 8003f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8003f9c <main+0x158>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 8003f24:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa0 <main+0x15c>)
 8003f26:	0018      	movs	r0, r3
 8003f28:	f7fc ffd8 	bl	8000edc <Clear_Data_Buffer>
				midi_counter = 0;
 8003f2c:	4b19      	ldr	r3, [pc, #100]	@ (8003f94 <main+0x150>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
			}
		}
		if(Get_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running) == YES){
 8003f32:	2380      	movs	r3, #128	@ 0x80
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	4b12      	ldr	r3, [pc, #72]	@ (8003f80 <main+0x13c>)
 8003f38:	0011      	movs	r1, r2
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	f000 ff50 	bl	8004de0 <Get_Status_Bit>
 8003f40:	0003      	movs	r3, r0
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d184      	bne.n	8003e50 <main+0xc>

			if(preset_save_idle_counter < PRESET_SAVE_IDLE_COUNT){
 8003f46:	4b17      	ldr	r3, [pc, #92]	@ (8003fa4 <main+0x160>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a17      	ldr	r2, [pc, #92]	@ (8003fa8 <main+0x164>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d805      	bhi.n	8003f5c <main+0x118>

				preset_save_idle_counter++;
 8003f50:	4b14      	ldr	r3, [pc, #80]	@ (8003fa4 <main+0x160>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	4b13      	ldr	r3, [pc, #76]	@ (8003fa4 <main+0x160>)
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	e779      	b.n	8003e50 <main+0xc>
			}
			else{

				Clear_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running);
 8003f5c:	2380      	movs	r3, #128	@ 0x80
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	4b07      	ldr	r3, [pc, #28]	@ (8003f80 <main+0x13c>)
 8003f62:	0011      	movs	r1, r2
 8003f64:	0018      	movs	r0, r3
 8003f66:	f000 ff45 	bl	8004df4 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Has_Timed_Out);
 8003f6a:	2380      	movs	r3, #128	@ 0x80
 8003f6c:	019a      	lsls	r2, r3, #6
 8003f6e:	4b04      	ldr	r3, [pc, #16]	@ (8003f80 <main+0x13c>)
 8003f70:	0011      	movs	r1, r2
 8003f72:	0018      	movs	r0, r3
 8003f74:	f000 ff3a 	bl	8004dec <Set_Status_Bit>
				preset_save_idle_counter = 0;
 8003f78:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa4 <main+0x160>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 8003f7e:	e767      	b.n	8003e50 <main+0xc>
 8003f80:	20000cbc 	.word	0x20000cbc
 8003f84:	20000caa 	.word	0x20000caa
 8003f88:	20000ce8 	.word	0x20000ce8
 8003f8c:	20000cb8 	.word	0x20000cb8
 8003f90:	20000434 	.word	0x20000434
 8003f94:	20000cb4 	.word	0x20000cb4
 8003f98:	00030d3f 	.word	0x00030d3f
 8003f9c:	20000547 	.word	0x20000547
 8003fa0:	2000053c 	.word	0x2000053c
 8003fa4:	20000cb0 	.word	0x20000cb0
 8003fa8:	0038751f 	.word	0x0038751f

08003fac <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>:
								.duty_delay_line_start_offset = 1,  //initial value is 1st index - to give us space to fill index 0
								.duty_delay_line_finish_offset = FINAL_INDEX + 1}; //initial value is 512th index, one larger than the index of the final sample

//FUNCTION DEFINITIONS
uint8_t Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel_1, uint32_t PWM_TIM_channel_2)
{
 8003fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fae:	0005      	movs	r5, r0
 8003fb0:	000f      	movs	r7, r1
 8003fb2:	0016      	movs	r6, r2
	uint8_t ok_OR = 0;
	ok_OR |= HAL_TIM_Base_Start(TIM);
 8003fb4:	f003 fa0e 	bl	80073d4 <HAL_TIM_Base_Start>
 8003fb8:	0004      	movs	r4, r0
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 8003fba:	0039      	movs	r1, r7
 8003fbc:	0028      	movs	r0, r5
 8003fbe:	f004 f88b 	bl	80080d8 <HAL_TIM_PWM_Start>
 8003fc2:	4304      	orrs	r4, r0
 8003fc4:	b2e4      	uxtb	r4, r4
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 8003fc6:	0031      	movs	r1, r6
 8003fc8:	0028      	movs	r0, r5
 8003fca:	f004 f885 	bl	80080d8 <HAL_TIM_PWM_Start>
 8003fce:	4304      	orrs	r4, r0
 8003fd0:	b2e4      	uxtb	r4, r4

	if(ok_OR != HAL_OK){
 8003fd2:	2c00      	cmp	r4, #0
 8003fd4:	d101      	bne.n	8003fda <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x2e>

		Error_Handler();
	}

	return ok_OR;
}
 8003fd6:	0020      	movs	r0, r4
 8003fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Error_Handler();
 8003fda:	f7fd fd29 	bl	8001a30 <Error_Handler>
 8003fde:	e7fa      	b.n	8003fd6 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x2a>

08003fe0 <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 8003fe0:	b510      	push	{r4, lr}
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 8003fe2:	4805      	ldr	r0, [pc, #20]	@ (8003ff8 <Start_Freq_Gen_Timer+0x18>)
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	f000 fec2 	bl	8004d6e <Start_OC_TIM>
 8003fea:	1e04      	subs	r4, r0, #0

	if(ok != HAL_OK){
 8003fec:	d101      	bne.n	8003ff2 <Start_Freq_Gen_Timer+0x12>

		Error_Handler();
	}

	return ok;
}
 8003fee:	0020      	movs	r0, r4
 8003ff0:	bd10      	pop	{r4, pc}
		Error_Handler();
 8003ff2:	f7fd fd1d 	bl	8001a30 <Error_Handler>
 8003ff6:	e7fa      	b.n	8003fee <Start_Freq_Gen_Timer+0xe>
 8003ff8:	2000097c 	.word	0x2000097c

08003ffc <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:

	uint32_t speed_control = 0;
	uint8_t how_many_128 = 0;

    //speed_control = (speed_adc_10_bit/1024)*'range macro'
    speed_control = params_ptr->speed * NUMBER_OF_FREQUENCY_STEPS;
 8003ffc:	8943      	ldrh	r3, [r0, #10]
 8003ffe:	009a      	lsls	r2, r3, #2
 8004000:	189a      	adds	r2, r3, r2
 8004002:	0192      	lsls	r2, r2, #6
 8004004:	189a      	adds	r2, r3, r2
 8004006:	0052      	lsls	r2, r2, #1
 8004008:	189b      	adds	r3, r3, r2
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;

    how_many_128 = (uint8_t)(speed_control >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 800400a:	0c59      	lsrs	r1, r3, #17
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;
 800400c:	0a9b      	lsrs	r3, r3, #10
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 800400e:	b2ca      	uxtb	r2, r1
 8004010:	01d2      	lsls	r2, r2, #7
 8004012:	1a9b      	subs	r3, r3, r2
 8004014:	b29b      	uxth	r3, r3
 8004016:	8283      	strh	r3, [r0, #20]
    params_ptr->raw_prescaler = SLOWEST_SPEED_PRESCALER >> how_many_128;
 8004018:	22ff      	movs	r2, #255	@ 0xff
 800401a:	400a      	ands	r2, r1
 800401c:	2380      	movs	r3, #128	@ 0x80
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	4113      	asrs	r3, r2
 8004022:	b29b      	uxth	r3, r3
 8004024:	8383      	strh	r3, [r0, #28]

    return 1;
}
 8004026:	2001      	movs	r0, #1
 8004028:	4770      	bx	lr
	...

0800402c <Set_Oscillator_Values>:
uint8_t Set_Oscillator_Values(struct Params* params_ptr){

	////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE MAIN OSCILLATOR//
	////////////////////////////////////////////////////////
	__HAL_TIM_SET_AUTORELOAD(&htim16, params_ptr->final_ARR);
 800402c:	8b43      	ldrh	r3, [r0, #26]
 800402e:	b29b      	uxth	r3, r3
 8004030:	4907      	ldr	r1, [pc, #28]	@ (8004050 <Set_Oscillator_Values+0x24>)
 8004032:	680a      	ldr	r2, [r1, #0]
 8004034:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004036:	8b43      	ldrh	r3, [r0, #26]
 8004038:	60cb      	str	r3, [r1, #12]
	__HAL_TIM_SET_PRESCALER(&htim16, params_ptr->final_prescaler_minus_one); //have to take one off the divisor
 800403a:	8c03      	ldrh	r3, [r0, #32]
 800403c:	b29b      	uxth	r3, r3
 800403e:	6293      	str	r3, [r2, #40]	@ 0x28

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, params_ptr->prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8004040:	8883      	ldrh	r3, [r0, #4]
 8004042:	b29b      	uxth	r3, r3
 8004044:	4a03      	ldr	r2, [pc, #12]	@ (8004054 <Set_Oscillator_Values+0x28>)
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	6393      	str	r3, [r2, #56]	@ 0x38
	//SET THE CURRENT(prev) VALUES FOR THE SECONDARY OSCILLATOR//
	/////////////////////////////////////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delay);*/ //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.

	return 1;
}
 800404a:	2001      	movs	r0, #1
 800404c:	4770      	bx	lr
 800404e:	46c0      	nop			@ (mov r8, r8)
 8004050:	2000097c 	.word	0x2000097c
 8004054:	20000748 	.word	0x20000748

08004058 <Calculate_Next_Main_Oscillator_Values>:

uint8_t Calculate_Next_Main_Oscillator_Values(struct Params* params_ptr, enum Next_Values_Processing_Mode mode){

	if(mode == REGULAR_MODE){
 8004058:	2900      	cmp	r1, #0
 800405a:	d148      	bne.n	80040ee <Calculate_Next_Main_Oscillator_Values+0x96>

		params_ptr->index++;
 800405c:	8a03      	ldrh	r3, [r0, #16]
 800405e:	3301      	adds	r3, #1
 8004060:	b29b      	uxth	r3, r3
 8004062:	8203      	strh	r3, [r0, #16]

		if(params_ptr->index == FINAL_INDEX + 1){
 8004064:	8a03      	ldrh	r3, [r0, #16]
 8004066:	b29b      	uxth	r3, r3
 8004068:	2280      	movs	r2, #128	@ 0x80
 800406a:	0092      	lsls	r2, r2, #2
 800406c:	4293      	cmp	r3, r2
 800406e:	d01d      	beq.n	80040ac <Calculate_Next_Main_Oscillator_Values+0x54>
			params_ptr->index = 0;
		}

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8004070:	8a03      	ldrh	r3, [r0, #16]
 8004072:	b29b      	uxth	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d11c      	bne.n	80040b2 <Calculate_Next_Main_Oscillator_Values+0x5a>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004078:	74c3      	strb	r3, [r0, #19]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 800407a:	7483      	strb	r3, [r0, #18]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
		}
	}

	//ONCE INDEX IS SET, FIND THE DUTY VALUE
	if(params_ptr->waveshape == TRIANGLE_MODE){
 800407c:	7a03      	ldrb	r3, [r0, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d156      	bne.n	8004130 <Calculate_Next_Main_Oscillator_Values+0xd8>
		params_ptr->duty = tri_wavetable[params_ptr->index];
 8004082:	8a02      	ldrh	r2, [r0, #16]
 8004084:	4b3f      	ldr	r3, [pc, #252]	@ (8004184 <Calculate_Next_Main_Oscillator_Values+0x12c>)
 8004086:	0052      	lsls	r2, r2, #1
 8004088:	5ad3      	ldrh	r3, [r2, r3]
 800408a:	8003      	strh	r3, [r0, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(params_ptr->depth == ((1 << DEPTH_ADC_RESOLUTION) - 1)){ //255
 800408c:	7b03      	ldrb	r3, [r0, #12]
 800408e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004090:	d06b      	beq.n	800416a <Calculate_Next_Main_Oscillator_Values+0x112>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
		}
		else if(params_ptr->depth != 0){
 8004092:	7b03      	ldrb	r3, [r0, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d100      	bne.n	800409a <Calculate_Next_Main_Oscillator_Values+0x42>
 8004098:	e071      	b.n	800417e <Calculate_Next_Main_Oscillator_Values+0x126>

			//duty = 1023 - duty*(current_depth >> 8);
			uint32_t multiply_product = 0;
			multiply_product = (params_ptr->duty) * (params_ptr->depth);
 800409a:	8803      	ldrh	r3, [r0, #0]
 800409c:	7b02      	ldrb	r2, [r0, #12]
 800409e:	435a      	muls	r2, r3
			params_ptr->duty = PWM_DUTY_VALUE_MAX - (multiply_product >> DEPTH_ADC_RESOLUTION);
 80040a0:	09d2      	lsrs	r2, r2, #7
 80040a2:	4b39      	ldr	r3, [pc, #228]	@ (8004188 <Calculate_Next_Main_Oscillator_Values+0x130>)
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	8003      	strh	r3, [r0, #0]
 80040aa:	e063      	b.n	8004174 <Calculate_Next_Main_Oscillator_Values+0x11c>
			params_ptr->index = 0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	8203      	strh	r3, [r0, #16]
 80040b0:	e7de      	b.n	8004070 <Calculate_Next_Main_Oscillator_Values+0x18>
		else if(params_ptr->index == SECOND_QUADRANT_START_INDEX){
 80040b2:	8a03      	ldrh	r3, [r0, #16]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b80      	cmp	r3, #128	@ 0x80
 80040b8:	d00f      	beq.n	80040da <Calculate_Next_Main_Oscillator_Values+0x82>
		else if(params_ptr->index == THIRD_QUADRANT_START_INDEX){
 80040ba:	8a03      	ldrh	r3, [r0, #16]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2280      	movs	r2, #128	@ 0x80
 80040c0:	0052      	lsls	r2, r2, #1
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d00e      	beq.n	80040e4 <Calculate_Next_Main_Oscillator_Values+0x8c>
		else if(params_ptr->index == FOURTH_QUADRANT_START_INDEX){
 80040c6:	8a03      	ldrh	r3, [r0, #16]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	22c0      	movs	r2, #192	@ 0xc0
 80040cc:	0052      	lsls	r2, r2, #1
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d1d4      	bne.n	800407c <Calculate_Next_Main_Oscillator_Values+0x24>
			params_ptr->quadrant = SECOND_QUADRANT;
 80040d2:	2301      	movs	r3, #1
 80040d4:	74c3      	strb	r3, [r0, #19]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 80040d6:	7483      	strb	r3, [r0, #18]
 80040d8:	e7d0      	b.n	800407c <Calculate_Next_Main_Oscillator_Values+0x24>
			params_ptr->quadrant = SECOND_QUADRANT;
 80040da:	3b7f      	subs	r3, #127	@ 0x7f
 80040dc:	74c3      	strb	r3, [r0, #19]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 80040de:	2300      	movs	r3, #0
 80040e0:	7483      	strb	r3, [r0, #18]
 80040e2:	e7cb      	b.n	800407c <Calculate_Next_Main_Oscillator_Values+0x24>
			params_ptr->quadrant = FIRST_QUADRANT;
 80040e4:	2300      	movs	r3, #0
 80040e6:	74c3      	strb	r3, [r0, #19]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 80040e8:	3301      	adds	r3, #1
 80040ea:	7483      	strb	r3, [r0, #18]
 80040ec:	e7c6      	b.n	800407c <Calculate_Next_Main_Oscillator_Values+0x24>
	else if(mode == IP_CAPTURE_MODE){
 80040ee:	2901      	cmp	r1, #1
 80040f0:	d008      	beq.n	8004104 <Calculate_Next_Main_Oscillator_Values+0xac>
	else if(mode == STARTUP_MODE){
 80040f2:	2902      	cmp	r1, #2
 80040f4:	d1c2      	bne.n	800407c <Calculate_Next_Main_Oscillator_Values+0x24>
		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 80040f6:	8a03      	ldrh	r3, [r0, #16]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1be      	bne.n	800407c <Calculate_Next_Main_Oscillator_Values+0x24>
			params_ptr->quadrant = FIRST_QUADRANT;
 80040fe:	74c3      	strb	r3, [r0, #19]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004100:	7483      	strb	r3, [r0, #18]
 8004102:	e7bb      	b.n	800407c <Calculate_Next_Main_Oscillator_Values+0x24>
		if(params_ptr->waveshape == SINE_MODE || params_ptr->waveshape == TRIANGLE_MODE){
 8004104:	7a03      	ldrb	r3, [r0, #8]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d002      	beq.n	8004110 <Calculate_Next_Main_Oscillator_Values+0xb8>
 800410a:	7a03      	ldrb	r3, [r0, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d107      	bne.n	8004120 <Calculate_Next_Main_Oscillator_Values+0xc8>
			params_ptr->index = SINE_OR_TRIANGLE_WAVE_TEMPO_PERCEIVED_APEX_INDEX;
 8004110:	23a7      	movs	r3, #167	@ 0xa7
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	8203      	strh	r3, [r0, #16]
			params_ptr->quadrant = CURRENT_QUADRANT_SINE_OR_TRI_SYNCED;
 8004116:	2300      	movs	r3, #0
 8004118:	74c3      	strb	r3, [r0, #19]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SINE_OR_TRI_SYNCED;
 800411a:	3301      	adds	r3, #1
 800411c:	7483      	strb	r3, [r0, #18]
 800411e:	e7ad      	b.n	800407c <Calculate_Next_Main_Oscillator_Values+0x24>
			params_ptr->index = SQUARE_WAVE_TEMPO_APEX_INDEX;
 8004120:	2380      	movs	r3, #128	@ 0x80
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	8203      	strh	r3, [r0, #16]
			params_ptr->quadrant = CURRENT_QUADRANT_SQUARE_SYNCED;
 8004126:	2300      	movs	r3, #0
 8004128:	74c3      	strb	r3, [r0, #19]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SQUARE_SYNCED;
 800412a:	3301      	adds	r3, #1
 800412c:	7483      	strb	r3, [r0, #18]
 800412e:	e7a5      	b.n	800407c <Calculate_Next_Main_Oscillator_Values+0x24>
	else if(params_ptr->waveshape == SINE_MODE){
 8004130:	7a03      	ldrb	r3, [r0, #8]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d00c      	beq.n	8004150 <Calculate_Next_Main_Oscillator_Values+0xf8>
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 8004136:	7a03      	ldrb	r3, [r0, #8]
 8004138:	2b02      	cmp	r3, #2
 800413a:	d00f      	beq.n	800415c <Calculate_Next_Main_Oscillator_Values+0x104>
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index >= THIRD_QUADRANT_START_INDEX)){
 800413c:	7a03      	ldrb	r3, [r0, #8]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d1a4      	bne.n	800408c <Calculate_Next_Main_Oscillator_Values+0x34>
 8004142:	8a03      	ldrh	r3, [r0, #16]
 8004144:	b29b      	uxth	r3, r3
 8004146:	2bff      	cmp	r3, #255	@ 0xff
 8004148:	d9a0      	bls.n	800408c <Calculate_Next_Main_Oscillator_Values+0x34>
		params_ptr->duty = PWM_DUTY_VALUE_MIN;
 800414a:	2300      	movs	r3, #0
 800414c:	8003      	strh	r3, [r0, #0]
 800414e:	e79d      	b.n	800408c <Calculate_Next_Main_Oscillator_Values+0x34>
		params_ptr->duty = sine_wavetable[params_ptr->index];
 8004150:	8a02      	ldrh	r2, [r0, #16]
 8004152:	4b0e      	ldr	r3, [pc, #56]	@ (800418c <Calculate_Next_Main_Oscillator_Values+0x134>)
 8004154:	0052      	lsls	r2, r2, #1
 8004156:	5ad3      	ldrh	r3, [r2, r3]
 8004158:	8003      	strh	r3, [r0, #0]
 800415a:	e797      	b.n	800408c <Calculate_Next_Main_Oscillator_Values+0x34>
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 800415c:	8a03      	ldrh	r3, [r0, #16]
 800415e:	b29b      	uxth	r3, r3
 8004160:	2bff      	cmp	r3, #255	@ 0xff
 8004162:	d8eb      	bhi.n	800413c <Calculate_Next_Main_Oscillator_Values+0xe4>
		params_ptr->duty = PWM_DUTY_VALUE_MAX;
 8004164:	4b08      	ldr	r3, [pc, #32]	@ (8004188 <Calculate_Next_Main_Oscillator_Values+0x130>)
 8004166:	8003      	strh	r3, [r0, #0]
 8004168:	e790      	b.n	800408c <Calculate_Next_Main_Oscillator_Values+0x34>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
 800416a:	8802      	ldrh	r2, [r0, #0]
 800416c:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <Calculate_Next_Main_Oscillator_Values+0x130>)
 800416e:	1a9b      	subs	r3, r3, r2
 8004170:	b29b      	uxth	r3, r3
 8004172:	8003      	strh	r3, [r0, #0]
		}

	#endif

	//SET THE NEXT VALUE FOR THE MAIN OSCILLATOR
	params_ptr->prev_duty = params_ptr->duty;
 8004174:	8803      	ldrh	r3, [r0, #0]
 8004176:	b29b      	uxth	r3, r3
 8004178:	8083      	strh	r3, [r0, #4]

	return 1;
}
 800417a:	2001      	movs	r0, #1
 800417c:	4770      	bx	lr
			params_ptr->duty = PWM_DUTY_VALUE_MAX; //if depth is 0, just output 1023
 800417e:	4b02      	ldr	r3, [pc, #8]	@ (8004188 <Calculate_Next_Main_Oscillator_Values+0x130>)
 8004180:	8003      	strh	r3, [r0, #0]
 8004182:	e7f7      	b.n	8004174 <Calculate_Next_Main_Oscillator_Values+0x11c>
 8004184:	080094d8 	.word	0x080094d8
 8004188:	000003ff 	.word	0x000003ff
 800418c:	080098d8 	.word	0x080098d8

08004190 <Write_Next_Main_Oscillator_Values_to_Delay_Line>:

uint8_t Write_Next_Main_Oscillator_Values_to_Delay_Line(struct Params* params_ptr, struct Delay_Line* delay_line_ptr){

	//STORE THE VALUES IN THE APPROPRIATE '0TH - 1' INDEX RELATIVE TO THE START POINTER
		if(delay_line_ptr->duty_delay_line_start_offset != 0){
 8004190:	4b2c      	ldr	r3, [pc, #176]	@ (8004244 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>)
 8004192:	5acb      	ldrh	r3, [r1, r3]
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d02a      	beq.n	80041f0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x60>
			delay_line_ptr->duty_delay_line_storage_array[delay_line_ptr->duty_delay_line_start_offset - 1] = params_ptr->duty;
 800419a:	4b2a      	ldr	r3, [pc, #168]	@ (8004244 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>)
 800419c:	5acb      	ldrh	r3, [r1, r3]
 800419e:	3b01      	subs	r3, #1
 80041a0:	8802      	ldrh	r2, [r0, #0]
 80041a2:	b292      	uxth	r2, r2
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	525a      	strh	r2, [r3, r1]
		else{
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
		}

		//DECREMENT THE START AND FINISH POINTERS
		if(delay_line_ptr->duty_delay_line_start_offset == 0){
 80041a8:	4b26      	ldr	r3, [pc, #152]	@ (8004244 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>)
 80041aa:	5acb      	ldrh	r3, [r1, r3]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d124      	bne.n	80041fc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x6c>
			delay_line_ptr->duty_delay_line_start_offset = FINAL_INDEX + 1;
 80041b2:	4b24      	ldr	r3, [pc, #144]	@ (8004244 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>)
 80041b4:	2280      	movs	r2, #128	@ 0x80
 80041b6:	0092      	lsls	r2, r2, #2
 80041b8:	52ca      	strh	r2, [r1, r3]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 80041ba:	4a23      	ldr	r2, [pc, #140]	@ (8004248 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb8>)
 80041bc:	5a8b      	ldrh	r3, [r1, r2]
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	528b      	strh	r3, [r1, r2]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
		}

		//DETERMINE THE DELAYED WAVE'S VALUES
		if(delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 80041c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004244 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>)
 80041c6:	5aca      	ldrh	r2, [r1, r3]
 80041c8:	8c83      	ldrh	r3, [r0, #36]	@ 0x24
 80041ca:	189b      	adds	r3, r3, r2
 80041cc:	2280      	movs	r2, #128	@ 0x80
 80041ce:	0092      	lsls	r2, r2, #2
 80041d0:	4293      	cmp	r3, r2
 80041d2:	dd2d      	ble.n	8004230 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xa0>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + (delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 80041d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004244 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>)
 80041d6:	5aca      	ldrh	r2, [r1, r3]
 80041d8:	8c83      	ldrh	r3, [r0, #36]	@ 0x24
 80041da:	189b      	adds	r3, r3, r2
 80041dc:	4a1b      	ldr	r2, [pc, #108]	@ (800424c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xbc>)
 80041de:	4694      	mov	ip, r2
 80041e0:	4463      	add	r3, ip
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	18cb      	adds	r3, r1, r3
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	80c3      	strh	r3, [r0, #6]
		else{
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset);
		}

	return 1;
}
 80041ec:	2001      	movs	r0, #1
 80041ee:	4770      	bx	lr
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
 80041f0:	8803      	ldrh	r3, [r0, #0]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2280      	movs	r2, #128	@ 0x80
 80041f6:	00d2      	lsls	r2, r2, #3
 80041f8:	528b      	strh	r3, [r1, r2]
 80041fa:	e7d5      	b.n	80041a8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x18>
		else if(delay_line_ptr->duty_delay_line_finish_offset == 0){
 80041fc:	4b12      	ldr	r3, [pc, #72]	@ (8004248 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb8>)
 80041fe:	5acb      	ldrh	r3, [r1, r3]
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d109      	bne.n	800421a <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x8a>
			delay_line_ptr->duty_delay_line_finish_offset = FINAL_INDEX + 1;
 8004206:	4b10      	ldr	r3, [pc, #64]	@ (8004248 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb8>)
 8004208:	2280      	movs	r2, #128	@ 0x80
 800420a:	0092      	lsls	r2, r2, #2
 800420c:	52ca      	strh	r2, [r1, r3]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 800420e:	4a0d      	ldr	r2, [pc, #52]	@ (8004244 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>)
 8004210:	5a8b      	ldrh	r3, [r1, r2]
 8004212:	3b01      	subs	r3, #1
 8004214:	b29b      	uxth	r3, r3
 8004216:	528b      	strh	r3, [r1, r2]
 8004218:	e7d4      	b.n	80041c4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x34>
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 800421a:	4a0a      	ldr	r2, [pc, #40]	@ (8004244 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>)
 800421c:	5a8b      	ldrh	r3, [r1, r2]
 800421e:	3b01      	subs	r3, #1
 8004220:	b29b      	uxth	r3, r3
 8004222:	528b      	strh	r3, [r1, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 8004224:	4a08      	ldr	r2, [pc, #32]	@ (8004248 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb8>)
 8004226:	5a8b      	ldrh	r3, [r1, r2]
 8004228:	3b01      	subs	r3, #1
 800422a:	b29b      	uxth	r3, r3
 800422c:	528b      	strh	r3, [r1, r2]
 800422e:	e7c9      	b.n	80041c4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x34>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset);
 8004230:	4b04      	ldr	r3, [pc, #16]	@ (8004244 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>)
 8004232:	5aca      	ldrh	r2, [r1, r3]
 8004234:	8c83      	ldrh	r3, [r0, #36]	@ 0x24
 8004236:	189b      	adds	r3, r3, r2
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	18c9      	adds	r1, r1, r3
 800423c:	880b      	ldrh	r3, [r1, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	80c3      	strh	r3, [r0, #6]
 8004242:	e7d3      	b.n	80041ec <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x5c>
 8004244:	00000402 	.word	0x00000402
 8004248:	00000404 	.word	0x00000404
 800424c:	7ffffe00 	.word	0x7ffffe00

08004250 <Process_ADC_Conversion_Values>:

uint8_t Process_ADC_Conversion_Values(struct Params* params_ptr, volatile uint16_t* ADCResultsDMA_ptr){

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA_ptr[WAVESHAPE_ADC_RESULT_INDEX] >> 5; //set ADC_Result to waveshape index value, truncate to 7-bit
 8004250:	880b      	ldrh	r3, [r1, #0]
 8004252:	095b      	lsrs	r3, r3, #5

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8004254:	2b2a      	cmp	r3, #42	@ 0x2a
 8004256:	d81b      	bhi.n	8004290 <Process_ADC_Conversion_Values+0x40>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 8004258:	2300      	movs	r3, #0
 800425a:	7203      	strb	r3, [r0, #8]
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
		params_ptr->waveshape = SQUARE_MODE; //square wave
	}

	//GET SPEED
	uint16_t temp_speed = ADCResultsDMA_ptr[SPEED_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 800425c:	884b      	ldrh	r3, [r1, #2]
 800425e:	095b      	lsrs	r3, r3, #5
	temp_speed <<= 3; //convert to 10-bit
 8004260:	00db      	lsls	r3, r3, #3
	params_ptr->speed = temp_speed;
 8004262:	8143      	strh	r3, [r0, #10]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON

		uint8_t temp_depth = ADCResultsDMA_ptr[DEPTH_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004264:	888b      	ldrh	r3, [r1, #4]
 8004266:	095b      	lsrs	r3, r3, #5
 8004268:	b2db      	uxtb	r3, r3
		params_ptr->depth = temp_depth;
 800426a:	7303      	strb	r3, [r0, #12]
	#endif

	//GET SYMMETRY
	#if SYMMETRY_ON_OR_OFF == ON

		uint16_t temp_symmetry = ADCResultsDMA_ptr[SYMMETRY_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 800426c:	88cb      	ldrh	r3, [r1, #6]
 800426e:	095b      	lsrs	r3, r3, #5
		temp_symmetry <<= 1; //convert to 8-bit
 8004270:	005b      	lsls	r3, r3, #1
		params_ptr->symmetry = temp_symmetry;
 8004272:	81c3      	strh	r3, [r0, #14]

	#endif

	//GET DELAY LINE READ POINTER OFFSET

	uint16_t temp_delay = ADCResultsDMA_ptr[DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004274:	890b      	ldrh	r3, [r1, #8]
 8004276:	095b      	lsrs	r3, r3, #5
	temp_delay <<= 2; //convert to 9-bit
 8004278:	009b      	lsls	r3, r3, #2
	params_ptr->duty_delay_line_read_pointer_offset = temp_delay;
 800427a:	8483      	strh	r3, [r0, #36]	@ 0x24

	uint16_t temp_sample = ADCResultsDMA_ptr[SAMPLE_ADC_RESULT_INDEX];
 800427c:	894b      	ldrh	r3, [r1, #10]
	temp_sample >>= 2; //convert to 10-bit
 800427e:	089b      	lsrs	r3, r3, #2
	params_ptr->sample = temp_sample;
 8004280:	8043      	strh	r3, [r0, #2]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->sample);
 8004282:	8843      	ldrh	r3, [r0, #2]
 8004284:	b29b      	uxth	r3, r3
 8004286:	4a07      	ldr	r2, [pc, #28]	@ (80042a4 <Process_ADC_Conversion_Values+0x54>)
 8004288:	6812      	ldr	r2, [r2, #0]
 800428a:	6413      	str	r3, [r2, #64]	@ 0x40

	return 1;
}
 800428c:	2001      	movs	r0, #1
 800428e:	4770      	bx	lr
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8004290:	2b55      	cmp	r3, #85	@ 0x55
 8004292:	d802      	bhi.n	800429a <Process_ADC_Conversion_Values+0x4a>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8004294:	2301      	movs	r3, #1
 8004296:	7203      	strb	r3, [r0, #8]
 8004298:	e7e0      	b.n	800425c <Process_ADC_Conversion_Values+0xc>
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 800429a:	2b7f      	cmp	r3, #127	@ 0x7f
 800429c:	d8de      	bhi.n	800425c <Process_ADC_Conversion_Values+0xc>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 800429e:	2302      	movs	r3, #2
 80042a0:	7203      	strb	r3, [r0, #8]
 80042a2:	e7db      	b.n	800425c <Process_ADC_Conversion_Values+0xc>
 80042a4:	20000748 	.word	0x20000748

080042a8 <Startup>:
#include "stm32g0xx_ll_lptim.h"
#include "stm32g0xx_hal_flash.h"

#include "CC_and_PC.h" //for some reason compiler shits itself if this is included in startup.h

uint8_t __attribute__((optimize("O0")))Startup(void){
 80042a8:	b590      	push	{r4, r7, lr}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af02      	add	r7, sp, #8

	//Shouldn't be required now we have a default state set below, even in case flash not programmed //Set_Status_Bit(&statuses, Start_Required_Before_Sync_Mode); //set default mode to requiring START MIDI message before beginning a sync

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 80042ae:	2007      	movs	r0, #7
 80042b0:	f001 fbe6 	bl	8005a80 <HAL_NVIC_DisableIRQ>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 80042b4:	4b5a      	ldr	r3, [pc, #360]	@ (8004420 <Startup+0x178>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	4b59      	ldr	r3, [pc, #356]	@ (8004420 <Startup+0x178>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2101      	movs	r1, #1
 80042c0:	430a      	orrs	r2, r1
 80042c2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM16
 80042c4:	4b57      	ldr	r3, [pc, #348]	@ (8004424 <Startup+0x17c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	4b56      	ldr	r3, [pc, #344]	@ (8004424 <Startup+0x17c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2101      	movs	r1, #1
 80042d0:	430a      	orrs	r2, r1
 80042d2:	60da      	str	r2, [r3, #12]

	//SET DEFAULT PIN STATES
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 80042d4:	2380      	movs	r3, #128	@ 0x80
 80042d6:	0099      	lsls	r1, r3, #2
 80042d8:	23a0      	movs	r3, #160	@ 0xa0
 80042da:	05db      	lsls	r3, r3, #23
 80042dc:	2201      	movs	r2, #1
 80042de:	0018      	movs	r0, r3
 80042e0:	f001 ffb6 	bl	8006250 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_HIGH_GPIO_Port, HACK_POT_HIGH_Pin, 1);
 80042e4:	2380      	movs	r3, #128	@ 0x80
 80042e6:	0159      	lsls	r1, r3, #5
 80042e8:	23a0      	movs	r3, #160	@ 0xa0
 80042ea:	05db      	lsls	r3, r3, #23
 80042ec:	2201      	movs	r2, #1
 80042ee:	0018      	movs	r0, r3
 80042f0:	f001 ffae 	bl	8006250 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_LOW_GPIO_Port, HACK_POT_LOW_Pin, 0);
 80042f4:	23a0      	movs	r3, #160	@ 0xa0
 80042f6:	05db      	lsls	r3, r3, #23
 80042f8:	2200      	movs	r2, #0
 80042fa:	2180      	movs	r1, #128	@ 0x80
 80042fc:	0018      	movs	r0, r3
 80042fe:	f001 ffa7 	bl	8006250 <HAL_GPIO_WritePin>

	//Point Arrays to Presets
	Initialise_Preset_Arrays();
 8004302:	f7fc f8a3 	bl	800044c <Initialise_Preset_Arrays>

	//Read User Presets From Flash, regardless of whether they have been written to before
	Read_and_Interpret_User_Presets_From_Flash();
 8004306:	f7fc fb6b 	bl	80009e0 <Read_and_Interpret_User_Presets_From_Flash>

	//Read 'User Preset Used' Bytes, 'Start Required Before MIDI CLK' Byte, MIDI Omni On/Off Status Bit, and MIDI Basic Channel
	Read_and_Interpret_Misc_From_Flash(MISC_FLASH_MEMORY_ADDRESS, user_presets_used_array, &statuses, &MIDI_basic_channel, NUM_PRESETS);
 800430a:	4b47      	ldr	r3, [pc, #284]	@ (8004428 <Startup+0x180>)
 800430c:	4a47      	ldr	r2, [pc, #284]	@ (800442c <Startup+0x184>)
 800430e:	4948      	ldr	r1, [pc, #288]	@ (8004430 <Startup+0x188>)
 8004310:	4c48      	ldr	r4, [pc, #288]	@ (8004434 <Startup+0x18c>)
 8004312:	2004      	movs	r0, #4
 8004314:	9000      	str	r0, [sp, #0]
 8004316:	0020      	movs	r0, r4
 8004318:	f7fc fab0 	bl	800087c <Read_and_Interpret_Misc_From_Flash>

	//Set the Converted Preset Array to the Relevant Factory/User Preset depending upon the 'User Preset Used' Byte read from Flash
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array,
 800431c:	4b46      	ldr	r3, [pc, #280]	@ (8004438 <Startup+0x190>)
 800431e:	4a47      	ldr	r2, [pc, #284]	@ (800443c <Startup+0x194>)
 8004320:	4943      	ldr	r1, [pc, #268]	@ (8004430 <Startup+0x188>)
 8004322:	4847      	ldr	r0, [pc, #284]	@ (8004440 <Startup+0x198>)
 8004324:	2404      	movs	r4, #4
 8004326:	9400      	str	r4, [sp, #0]
 8004328:	f7fc fb2b 	bl	8000982 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
												  	  	  	  factory_presets_array,
															  user_presets_array,
															  NUM_PRESETS);

	//GET ADC VALUES
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 800432c:	4b45      	ldr	r3, [pc, #276]	@ (8004444 <Startup+0x19c>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	001a      	movs	r2, r3
 8004332:	4945      	ldr	r1, [pc, #276]	@ (8004448 <Startup+0x1a0>)
 8004334:	4b45      	ldr	r3, [pc, #276]	@ (800444c <Startup+0x1a4>)
 8004336:	0018      	movs	r0, r3
 8004338:	f001 f9a2 	bl	8005680 <HAL_ADC_Start_DMA>

	//WAIT
	while(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){}; //wait while first ADC conversion is ongoing - raw and final values will be computed within this time
 800433c:	46c0      	nop			@ (mov r8, r8)
 800433e:	4b3b      	ldr	r3, [pc, #236]	@ (800442c <Startup+0x184>)
 8004340:	2110      	movs	r1, #16
 8004342:	0018      	movs	r0, r3
 8004344:	f000 fd4c 	bl	8004de0 <Get_Status_Bit>
 8004348:	1e03      	subs	r3, r0, #0
 800434a:	d0f8      	beq.n	800433e <Startup+0x96>

	// re-initialise all values in delay line storage array to middle value of wave (if sine/triangle mode) or bottom of wave if square mode, as they are initialised to 0 on startup
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 800434c:	1dbb      	adds	r3, r7, #6
 800434e:	2200      	movs	r2, #0
 8004350:	801a      	strh	r2, [r3, #0]
 8004352:	e02c      	b.n	80043ae <Startup+0x106>

		if(params.waveshape == SQUARE_MODE){
 8004354:	4b3e      	ldr	r3, [pc, #248]	@ (8004450 <Startup+0x1a8>)
 8004356:	7a1b      	ldrb	r3, [r3, #8]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d111      	bne.n	8004382 <Startup+0xda>

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
 800435e:	4b3c      	ldr	r3, [pc, #240]	@ (8004450 <Startup+0x1a8>)
 8004360:	7b1b      	ldrb	r3, [r3, #12]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	001a      	movs	r2, r3
 8004366:	0013      	movs	r3, r2
 8004368:	029b      	lsls	r3, r3, #10
 800436a:	1a9b      	subs	r3, r3, r2
 800436c:	11db      	asrs	r3, r3, #7
 800436e:	b29b      	uxth	r3, r3
 8004370:	1dba      	adds	r2, r7, #6
 8004372:	8812      	ldrh	r2, [r2, #0]
 8004374:	4937      	ldr	r1, [pc, #220]	@ (8004454 <Startup+0x1ac>)
 8004376:	1acb      	subs	r3, r1, r3
 8004378:	b299      	uxth	r1, r3
 800437a:	4b37      	ldr	r3, [pc, #220]	@ (8004458 <Startup+0x1b0>)
 800437c:	0052      	lsls	r2, r2, #1
 800437e:	52d1      	strh	r1, [r2, r3]
 8004380:	e010      	b.n	80043a4 <Startup+0xfc>
		}
		else{

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - (((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION) >> 1);
 8004382:	4b33      	ldr	r3, [pc, #204]	@ (8004450 <Startup+0x1a8>)
 8004384:	7b1b      	ldrb	r3, [r3, #12]
 8004386:	b2db      	uxtb	r3, r3
 8004388:	001a      	movs	r2, r3
 800438a:	0013      	movs	r3, r2
 800438c:	029b      	lsls	r3, r3, #10
 800438e:	1a9b      	subs	r3, r3, r2
 8004390:	121b      	asrs	r3, r3, #8
 8004392:	b29b      	uxth	r3, r3
 8004394:	1dba      	adds	r2, r7, #6
 8004396:	8812      	ldrh	r2, [r2, #0]
 8004398:	492e      	ldr	r1, [pc, #184]	@ (8004454 <Startup+0x1ac>)
 800439a:	1acb      	subs	r3, r1, r3
 800439c:	b299      	uxth	r1, r3
 800439e:	4b2e      	ldr	r3, [pc, #184]	@ (8004458 <Startup+0x1b0>)
 80043a0:	0052      	lsls	r2, r2, #1
 80043a2:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 80043a4:	1dbb      	adds	r3, r7, #6
 80043a6:	881a      	ldrh	r2, [r3, #0]
 80043a8:	1dbb      	adds	r3, r7, #6
 80043aa:	3201      	adds	r2, #1
 80043ac:	801a      	strh	r2, [r3, #0]
 80043ae:	1dbb      	adds	r3, r7, #6
 80043b0:	881a      	ldrh	r2, [r3, #0]
 80043b2:	2380      	movs	r3, #128	@ 0x80
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d9cc      	bls.n	8004354 <Startup+0xac>
		}
	}

	//PREPARE OSCILLATORS
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)STARTUP_MODE);
 80043ba:	4b25      	ldr	r3, [pc, #148]	@ (8004450 <Startup+0x1a8>)
 80043bc:	2102      	movs	r1, #2
 80043be:	0018      	movs	r0, r3
 80043c0:	f7ff fe4a 	bl	8004058 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80043c4:	4a24      	ldr	r2, [pc, #144]	@ (8004458 <Startup+0x1b0>)
 80043c6:	4b22      	ldr	r3, [pc, #136]	@ (8004450 <Startup+0x1a8>)
 80043c8:	0011      	movs	r1, r2
 80043ca:	0018      	movs	r0, r3
 80043cc:	f7ff fee0 	bl	8004190 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	Set_Oscillator_Values(&params);
 80043d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004450 <Startup+0x1a8>)
 80043d2:	0018      	movs	r0, r3
 80043d4:	f7ff fe2a 	bl	800402c <Set_Oscillator_Values>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(&htim1, TIM_CHANNEL_2, TIM_CHANNEL_4);
 80043d8:	4b20      	ldr	r3, [pc, #128]	@ (800445c <Startup+0x1b4>)
 80043da:	220c      	movs	r2, #12
 80043dc:	2104      	movs	r1, #4
 80043de:	0018      	movs	r0, r3
 80043e0:	f7ff fde4 	bl	8003fac <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>
	Start_Freq_Gen_Timer();
 80043e4:	f7ff fdfc 	bl	8003fe0 <Start_Freq_Gen_Timer>

	//START UART RECEIVE
	Start_UART_Receive();
 80043e8:	f7fc fe2c 	bl	8001044 <Start_UART_Receive>

	//START IP CAP
	Start_Input_Capture_Timer();
 80043ec:	f7ff fcf2 	bl	8003dd4 <Start_Input_Capture_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 80043f0:	f000 fcf3 	bl	8004dda <Global_Interrupt_Enable>

	//ENABLE TAP-TEMPO SWITCH CHECKING
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 80043f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004460 <Startup+0x1b8>)
 80043f6:	22fa      	movs	r2, #250	@ 0xfa
 80043f8:	21fa      	movs	r1, #250	@ 0xfa
 80043fa:	0018      	movs	r0, r3
 80043fc:	f002 f952 	bl	80066a4 <HAL_LPTIM_SetOnce_Start_IT>

	//TURN LED OFF ON STARTUP
	LED_fsm.current_state = LED_OFF;
 8004400:	4b18      	ldr	r3, [pc, #96]	@ (8004464 <Startup+0x1bc>)
 8004402:	2201      	movs	r2, #1
 8004404:	701a      	strb	r2, [r3, #0]

	//ENABLE LED TIMER
	Start_OC_TIM(&htim14, TIM_CHANNEL_1);
 8004406:	4b18      	ldr	r3, [pc, #96]	@ (8004468 <Startup+0x1c0>)
 8004408:	2100      	movs	r1, #0
 800440a:	0018      	movs	r0, r3
 800440c:	f000 fcaf 	bl	8004d6e <Start_OC_TIM>

	//ENABLE EXTI
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004410:	2007      	movs	r0, #7
 8004412:	f001 fb29 	bl	8005a68 <HAL_NVIC_EnableIRQ>

	return 1;
 8004416:	2301      	movs	r3, #1
}
 8004418:	0018      	movs	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	b003      	add	sp, #12
 800441e:	bd90      	pop	{r4, r7, pc}
 8004420:	200008c0 	.word	0x200008c0
 8004424:	2000097c 	.word	0x2000097c
 8004428:	20000548 	.word	0x20000548
 800442c:	20000cbc 	.word	0x20000cbc
 8004430:	200004bc 	.word	0x200004bc
 8004434:	0800f820 	.word	0x0800f820
 8004438:	20000518 	.word	0x20000518
 800443c:	20000528 	.word	0x20000528
 8004440:	200004f0 	.word	0x200004f0
 8004444:	080094d4 	.word	0x080094d4
 8004448:	20000d60 	.word	0x20000d60
 800444c:	20000c0c 	.word	0x20000c0c
 8004450:	20000d38 	.word	0x20000d38
 8004454:	000003ff 	.word	0x000003ff
 8004458:	20000028 	.word	0x20000028
 800445c:	20000748 	.word	0x20000748
 8004460:	20000568 	.word	0x20000568
 8004464:	20000430 	.word	0x20000430
 8004468:	20000af4 	.word	0x20000af4

0800446c <Advance_Pending_States>:

//FUNCTION DEFINITIONS
uint8_t Advance_Pending_States(void){

	//UPDATE SPEED FSM
	union Speed_FSM_States current_state = speed_fsm.current_state;
 800446c:	4a0d      	ldr	r2, [pc, #52]	@ (80044a4 <Advance_Pending_States+0x38>)
 800446e:	7813      	ldrb	r3, [r2, #0]
 8004470:	b2db      	uxtb	r3, r3

	if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8004472:	7812      	ldrb	r2, [r2, #0]
 8004474:	2a05      	cmp	r2, #5
 8004476:	d00c      	beq.n	8004492 <Advance_Pending_States+0x26>

		speed_fsm.current_state.speed_exclusive_state = TAP_MODE;
	}
	else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){
 8004478:	4a0a      	ldr	r2, [pc, #40]	@ (80044a4 <Advance_Pending_States+0x38>)
 800447a:	7812      	ldrb	r2, [r2, #0]
 800447c:	2a07      	cmp	r2, #7
 800447e:	d00c      	beq.n	800449a <Advance_Pending_States+0x2e>
	}

	//DON'T ADD MIDI CLK CODE


	if(!((current_state.speed_exclusive_state == CLK_IN_MODE) || (current_state.speed_exclusive_state == TAP_MODE))){
 8004480:	2202      	movs	r2, #2
 8004482:	0019      	movs	r1, r3
 8004484:	4391      	bics	r1, r2
 8004486:	2904      	cmp	r1, #4
 8004488:	d001      	beq.n	800448e <Advance_Pending_States+0x22>

		speed_fsm.prev_state = current_state;
 800448a:	4a06      	ldr	r2, [pc, #24]	@ (80044a4 <Advance_Pending_States+0x38>)
 800448c:	7053      	strb	r3, [r2, #1]
	}

	return 1;
}
 800448e:	2001      	movs	r0, #1
 8004490:	4770      	bx	lr
		speed_fsm.current_state.speed_exclusive_state = TAP_MODE;
 8004492:	4a04      	ldr	r2, [pc, #16]	@ (80044a4 <Advance_Pending_States+0x38>)
 8004494:	2104      	movs	r1, #4
 8004496:	7011      	strb	r1, [r2, #0]
 8004498:	e7f2      	b.n	8004480 <Advance_Pending_States+0x14>
		speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 800449a:	4a02      	ldr	r2, [pc, #8]	@ (80044a4 <Advance_Pending_States+0x38>)
 800449c:	2106      	movs	r1, #6
 800449e:	7011      	strb	r1, [r2, #0]
 80044a0:	e7ee      	b.n	8004480 <Advance_Pending_States+0x14>
 80044a2:	46c0      	nop			@ (mov r8, r8)
 80044a4:	20000448 	.word	0x20000448

080044a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044a8:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044aa:	4b0a      	ldr	r3, [pc, #40]	@ (80044d4 <HAL_MspInit+0x2c>)
 80044ac:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80044ae:	2201      	movs	r2, #1
 80044b0:	4311      	orrs	r1, r2
 80044b2:	6419      	str	r1, [r3, #64]	@ 0x40
 80044b4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80044b6:	400a      	ands	r2, r1
 80044b8:	9200      	str	r2, [sp, #0]
 80044ba:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044be:	2180      	movs	r1, #128	@ 0x80
 80044c0:	0549      	lsls	r1, r1, #21
 80044c2:	430a      	orrs	r2, r1
 80044c4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80044c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c8:	400b      	ands	r3, r1
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044ce:	b002      	add	sp, #8
 80044d0:	4770      	bx	lr
 80044d2:	46c0      	nop			@ (mov r8, r8)
 80044d4:	40021000 	.word	0x40021000

080044d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044de:	2214      	movs	r2, #20
 80044e0:	2100      	movs	r1, #0
 80044e2:	a803      	add	r0, sp, #12
 80044e4:	f004 ff87 	bl	80093f6 <memset>
  if(hadc->Instance==ADC1)
 80044e8:	4b26      	ldr	r3, [pc, #152]	@ (8004584 <HAL_ADC_MspInit+0xac>)
 80044ea:	6822      	ldr	r2, [r4, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_ADC_MspInit+0x1c>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80044f0:	b008      	add	sp, #32
 80044f2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 80044f4:	4b24      	ldr	r3, [pc, #144]	@ (8004588 <HAL_ADC_MspInit+0xb0>)
 80044f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044f8:	2180      	movs	r1, #128	@ 0x80
 80044fa:	0349      	lsls	r1, r1, #13
 80044fc:	430a      	orrs	r2, r1
 80044fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8004500:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004502:	400a      	ands	r2, r1
 8004504:	9200      	str	r2, [sp, #0]
 8004506:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004508:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800450a:	2201      	movs	r2, #1
 800450c:	4311      	orrs	r1, r2
 800450e:	6359      	str	r1, [r3, #52]	@ 0x34
 8004510:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004512:	400a      	ands	r2, r1
 8004514:	9201      	str	r2, [sp, #4]
 8004516:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004518:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800451a:	2202      	movs	r2, #2
 800451c:	4311      	orrs	r1, r2
 800451e:	6359      	str	r1, [r3, #52]	@ 0x34
 8004520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004522:	401a      	ands	r2, r3
 8004524:	9202      	str	r2, [sp, #8]
 8004526:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8004528:	2373      	movs	r3, #115	@ 0x73
 800452a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800452c:	2503      	movs	r5, #3
 800452e:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004530:	20a0      	movs	r0, #160	@ 0xa0
 8004532:	a903      	add	r1, sp, #12
 8004534:	05c0      	lsls	r0, r0, #23
 8004536:	f001 fd99 	bl	800606c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800453a:	2680      	movs	r6, #128	@ 0x80
 800453c:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800453e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004540:	2500      	movs	r5, #0
 8004542:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004544:	a903      	add	r1, sp, #12
 8004546:	4811      	ldr	r0, [pc, #68]	@ (800458c <HAL_ADC_MspInit+0xb4>)
 8004548:	f001 fd90 	bl	800606c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800454c:	4810      	ldr	r0, [pc, #64]	@ (8004590 <HAL_ADC_MspInit+0xb8>)
 800454e:	4b11      	ldr	r3, [pc, #68]	@ (8004594 <HAL_ADC_MspInit+0xbc>)
 8004550:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004552:	2305      	movs	r3, #5
 8004554:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004556:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004558:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800455a:	6106      	str	r6, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800455c:	33fb      	adds	r3, #251	@ 0xfb
 800455e:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004560:	2380      	movs	r3, #128	@ 0x80
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004566:	61c5      	str	r5, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8004568:	2380      	movs	r3, #128	@ 0x80
 800456a:	019b      	lsls	r3, r3, #6
 800456c:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800456e:	f001 faf1 	bl	8005b54 <HAL_DMA_Init>
 8004572:	2800      	cmp	r0, #0
 8004574:	d103      	bne.n	800457e <HAL_ADC_MspInit+0xa6>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004576:	4b06      	ldr	r3, [pc, #24]	@ (8004590 <HAL_ADC_MspInit+0xb8>)
 8004578:	6523      	str	r3, [r4, #80]	@ 0x50
 800457a:	629c      	str	r4, [r3, #40]	@ 0x28
}
 800457c:	e7b8      	b.n	80044f0 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 800457e:	f7fd fa57 	bl	8001a30 <Error_Handler>
 8004582:	e7f8      	b.n	8004576 <HAL_ADC_MspInit+0x9e>
 8004584:	40012400 	.word	0x40012400
 8004588:	40021000 	.word	0x40021000
 800458c:	50000400 	.word	0x50000400
 8004590:	20000bb0 	.word	0x20000bb0
 8004594:	40020008 	.word	0x40020008

08004598 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8004598:	b510      	push	{r4, lr}
 800459a:	b094      	sub	sp, #80	@ 0x50
 800459c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800459e:	2214      	movs	r2, #20
 80045a0:	2100      	movs	r1, #0
 80045a2:	a80f      	add	r0, sp, #60	@ 0x3c
 80045a4:	f004 ff27 	bl	80093f6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045a8:	2228      	movs	r2, #40	@ 0x28
 80045aa:	2100      	movs	r1, #0
 80045ac:	a805      	add	r0, sp, #20
 80045ae:	f004 ff22 	bl	80093f6 <memset>
  if(hlptim->Instance==LPTIM1)
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	4a2f      	ldr	r2, [pc, #188]	@ (8004674 <HAL_LPTIM_MspInit+0xdc>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d004      	beq.n	80045c4 <HAL_LPTIM_MspInit+0x2c>

  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
  else if(hlptim->Instance==LPTIM2)
 80045ba:	4a2f      	ldr	r2, [pc, #188]	@ (8004678 <HAL_LPTIM_MspInit+0xe0>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d02c      	beq.n	800461a <HAL_LPTIM_MspInit+0x82>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 80045c0:	b014      	add	sp, #80	@ 0x50
 80045c2:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80045c4:	2380      	movs	r3, #128	@ 0x80
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045ca:	a805      	add	r0, sp, #20
 80045cc:	f002 fcce 	bl	8006f6c <HAL_RCCEx_PeriphCLKConfig>
 80045d0:	2800      	cmp	r0, #0
 80045d2:	d11f      	bne.n	8004614 <HAL_LPTIM_MspInit+0x7c>
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80045d4:	4b29      	ldr	r3, [pc, #164]	@ (800467c <HAL_LPTIM_MspInit+0xe4>)
 80045d6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80045d8:	2280      	movs	r2, #128	@ 0x80
 80045da:	0612      	lsls	r2, r2, #24
 80045dc:	430a      	orrs	r2, r1
 80045de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80045e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045e2:	0fd2      	lsrs	r2, r2, #31
 80045e4:	07d2      	lsls	r2, r2, #31
 80045e6:	9201      	str	r2, [sp, #4]
 80045e8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80045ec:	2202      	movs	r2, #2
 80045ee:	4311      	orrs	r1, r2
 80045f0:	6359      	str	r1, [r3, #52]	@ 0x34
 80045f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045f4:	4013      	ands	r3, r2
 80045f6:	9302      	str	r3, [sp, #8]
 80045f8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80045fa:	2301      	movs	r3, #1
 80045fc:	930f      	str	r3, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045fe:	9210      	str	r2, [sp, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004600:	2300      	movs	r3, #0
 8004602:	9311      	str	r3, [sp, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004604:	9312      	str	r3, [sp, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM1;
 8004606:	3305      	adds	r3, #5
 8004608:	9313      	str	r3, [sp, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800460a:	a90f      	add	r1, sp, #60	@ 0x3c
 800460c:	481c      	ldr	r0, [pc, #112]	@ (8004680 <HAL_LPTIM_MspInit+0xe8>)
 800460e:	f001 fd2d 	bl	800606c <HAL_GPIO_Init>
 8004612:	e7d5      	b.n	80045c0 <HAL_LPTIM_MspInit+0x28>
      Error_Handler();
 8004614:	f7fd fa0c 	bl	8001a30 <Error_Handler>
 8004618:	e7dc      	b.n	80045d4 <HAL_LPTIM_MspInit+0x3c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 800461a:	2380      	movs	r3, #128	@ 0x80
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004620:	a805      	add	r0, sp, #20
 8004622:	f002 fca3 	bl	8006f6c <HAL_RCCEx_PeriphCLKConfig>
 8004626:	2800      	cmp	r0, #0
 8004628:	d121      	bne.n	800466e <HAL_LPTIM_MspInit+0xd6>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800462a:	4b14      	ldr	r3, [pc, #80]	@ (800467c <HAL_LPTIM_MspInit+0xe4>)
 800462c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800462e:	2180      	movs	r1, #128	@ 0x80
 8004630:	05c9      	lsls	r1, r1, #23
 8004632:	430a      	orrs	r2, r1
 8004634:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004636:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004638:	400a      	ands	r2, r1
 800463a:	9203      	str	r2, [sp, #12]
 800463c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800463e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004640:	2201      	movs	r2, #1
 8004642:	4311      	orrs	r1, r2
 8004644:	6359      	str	r1, [r3, #52]	@ 0x34
 8004646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004648:	401a      	ands	r2, r3
 800464a:	9204      	str	r2, [sp, #16]
 800464c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800464e:	2380      	movs	r3, #128	@ 0x80
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	930f      	str	r3, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004654:	3bfe      	subs	r3, #254	@ 0xfe
 8004656:	9310      	str	r3, [sp, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004658:	2300      	movs	r3, #0
 800465a:	9311      	str	r3, [sp, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800465c:	9312      	str	r3, [sp, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM2;
 800465e:	3305      	adds	r3, #5
 8004660:	9313      	str	r3, [sp, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004662:	20a0      	movs	r0, #160	@ 0xa0
 8004664:	a90f      	add	r1, sp, #60	@ 0x3c
 8004666:	05c0      	lsls	r0, r0, #23
 8004668:	f001 fd00 	bl	800606c <HAL_GPIO_Init>
}
 800466c:	e7a8      	b.n	80045c0 <HAL_LPTIM_MspInit+0x28>
      Error_Handler();
 800466e:	f7fd f9df 	bl	8001a30 <Error_Handler>
 8004672:	e7da      	b.n	800462a <HAL_LPTIM_MspInit+0x92>
 8004674:	40007c00 	.word	0x40007c00
 8004678:	40009400 	.word	0x40009400
 800467c:	40021000 	.word	0x40021000
 8004680:	50000400 	.word	0x50000400

08004684 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004684:	b510      	push	{r4, lr}
 8004686:	b096      	sub	sp, #88	@ 0x58
 8004688:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800468a:	2214      	movs	r2, #20
 800468c:	2100      	movs	r1, #0
 800468e:	a811      	add	r0, sp, #68	@ 0x44
 8004690:	f004 feb1 	bl	80093f6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004694:	2228      	movs	r2, #40	@ 0x28
 8004696:	2100      	movs	r1, #0
 8004698:	a807      	add	r0, sp, #28
 800469a:	f004 feac 	bl	80093f6 <memset>
  if(htim_base->Instance==TIM1)
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	4a4d      	ldr	r2, [pc, #308]	@ (80047d8 <HAL_TIM_Base_MspInit+0x154>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d012      	beq.n	80046cc <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80046a6:	2280      	movs	r2, #128	@ 0x80
 80046a8:	05d2      	lsls	r2, r2, #23
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d024      	beq.n	80046f8 <HAL_TIM_Base_MspInit+0x74>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
    }
  else if(htim_base->Instance==TIM3)
 80046ae:	4a4b      	ldr	r2, [pc, #300]	@ (80047dc <HAL_TIM_Base_MspInit+0x158>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d046      	beq.n	8004742 <HAL_TIM_Base_MspInit+0xbe>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 80046b4:	4a4a      	ldr	r2, [pc, #296]	@ (80047e0 <HAL_TIM_Base_MspInit+0x15c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d055      	beq.n	8004766 <HAL_TIM_Base_MspInit+0xe2>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
  else if(htim_base->Instance==TIM17)
 80046ba:	4a4a      	ldr	r2, [pc, #296]	@ (80047e4 <HAL_TIM_Base_MspInit+0x160>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d065      	beq.n	800478c <HAL_TIM_Base_MspInit+0x108>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 80046c0:	4a49      	ldr	r2, [pc, #292]	@ (80047e8 <HAL_TIM_Base_MspInit+0x164>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d100      	bne.n	80046c8 <HAL_TIM_Base_MspInit+0x44>
 80046c6:	e074      	b.n	80047b2 <HAL_TIM_Base_MspInit+0x12e>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }

}
 80046c8:	b016      	add	sp, #88	@ 0x58
 80046ca:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80046cc:	2380      	movs	r3, #128	@ 0x80
 80046ce:	039b      	lsls	r3, r3, #14
 80046d0:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046d2:	a807      	add	r0, sp, #28
 80046d4:	f002 fc4a 	bl	8006f6c <HAL_RCCEx_PeriphCLKConfig>
 80046d8:	2800      	cmp	r0, #0
 80046da:	d10a      	bne.n	80046f2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM1_CLK_ENABLE();
 80046dc:	4b43      	ldr	r3, [pc, #268]	@ (80047ec <HAL_TIM_Base_MspInit+0x168>)
 80046de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046e0:	2180      	movs	r1, #128	@ 0x80
 80046e2:	0109      	lsls	r1, r1, #4
 80046e4:	430a      	orrs	r2, r1
 80046e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80046e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ea:	400b      	ands	r3, r1
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	9b00      	ldr	r3, [sp, #0]
 80046f0:	e7ea      	b.n	80046c8 <HAL_TIM_Base_MspInit+0x44>
      Error_Handler();
 80046f2:	f7fd f99d 	bl	8001a30 <Error_Handler>
 80046f6:	e7f1      	b.n	80046dc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80046f8:	4b3c      	ldr	r3, [pc, #240]	@ (80047ec <HAL_TIM_Base_MspInit+0x168>)
 80046fa:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80046fc:	2201      	movs	r2, #1
 80046fe:	4311      	orrs	r1, r2
 8004700:	63d9      	str	r1, [r3, #60]	@ 0x3c
 8004702:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004704:	4011      	ands	r1, r2
 8004706:	9101      	str	r1, [sp, #4]
 8004708:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800470a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800470c:	4311      	orrs	r1, r2
 800470e:	6359      	str	r1, [r3, #52]	@ 0x34
 8004710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004712:	4013      	ands	r3, r2
 8004714:	9302      	str	r3, [sp, #8]
 8004716:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 8004718:	2380      	movs	r3, #128	@ 0x80
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	9311      	str	r3, [sp, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800471e:	2302      	movs	r3, #2
 8004720:	9312      	str	r3, [sp, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP; //even though we do not 'technically' need a pullup as a push-pull O/P will be driving the I/P cap pin, I think it is better to ensure the I/P cap input properly idles
 8004722:	9213      	str	r2, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004724:	9315      	str	r3, [sp, #84]	@ 0x54
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 8004726:	20a0      	movs	r0, #160	@ 0xa0
 8004728:	a911      	add	r1, sp, #68	@ 0x44
 800472a:	05c0      	lsls	r0, r0, #23
 800472c:	f001 fc9e 	bl	800606c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 2);
 8004730:	2202      	movs	r2, #2
 8004732:	2102      	movs	r1, #2
 8004734:	200f      	movs	r0, #15
 8004736:	f001 f965 	bl	8005a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800473a:	200f      	movs	r0, #15
 800473c:	f001 f994 	bl	8005a68 <HAL_NVIC_EnableIRQ>
 8004740:	e7c2      	b.n	80046c8 <HAL_TIM_Base_MspInit+0x44>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004742:	4a2a      	ldr	r2, [pc, #168]	@ (80047ec <HAL_TIM_Base_MspInit+0x168>)
 8004744:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004746:	2302      	movs	r3, #2
 8004748:	4319      	orrs	r1, r3
 800474a:	63d1      	str	r1, [r2, #60]	@ 0x3c
 800474c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800474e:	4013      	ands	r3, r2
 8004750:	9303      	str	r3, [sp, #12]
 8004752:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004754:	2200      	movs	r2, #0
 8004756:	2100      	movs	r1, #0
 8004758:	2010      	movs	r0, #16
 800475a:	f001 f953 	bl	8005a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800475e:	2010      	movs	r0, #16
 8004760:	f001 f982 	bl	8005a68 <HAL_NVIC_EnableIRQ>
 8004764:	e7b0      	b.n	80046c8 <HAL_TIM_Base_MspInit+0x44>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004766:	4b21      	ldr	r3, [pc, #132]	@ (80047ec <HAL_TIM_Base_MspInit+0x168>)
 8004768:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800476a:	2180      	movs	r1, #128	@ 0x80
 800476c:	0289      	lsls	r1, r1, #10
 800476e:	430a      	orrs	r2, r1
 8004770:	641a      	str	r2, [r3, #64]	@ 0x40
 8004772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004774:	400b      	ands	r3, r1
 8004776:	9304      	str	r3, [sp, #16]
 8004778:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800477a:	2200      	movs	r2, #0
 800477c:	2100      	movs	r1, #0
 800477e:	2015      	movs	r0, #21
 8004780:	f001 f940 	bl	8005a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004784:	2015      	movs	r0, #21
 8004786:	f001 f96f 	bl	8005a68 <HAL_NVIC_EnableIRQ>
 800478a:	e79d      	b.n	80046c8 <HAL_TIM_Base_MspInit+0x44>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800478c:	4b17      	ldr	r3, [pc, #92]	@ (80047ec <HAL_TIM_Base_MspInit+0x168>)
 800478e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004790:	2180      	movs	r1, #128	@ 0x80
 8004792:	02c9      	lsls	r1, r1, #11
 8004794:	430a      	orrs	r2, r1
 8004796:	641a      	str	r2, [r3, #64]	@ 0x40
 8004798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479a:	400b      	ands	r3, r1
 800479c:	9305      	str	r3, [sp, #20]
 800479e:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 80047a0:	2203      	movs	r2, #3
 80047a2:	2103      	movs	r1, #3
 80047a4:	2016      	movs	r0, #22
 80047a6:	f001 f92d 	bl	8005a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80047aa:	2016      	movs	r0, #22
 80047ac:	f001 f95c 	bl	8005a68 <HAL_NVIC_EnableIRQ>
 80047b0:	e78a      	b.n	80046c8 <HAL_TIM_Base_MspInit+0x44>
      __HAL_RCC_TIM14_CLK_ENABLE();
 80047b2:	4b0e      	ldr	r3, [pc, #56]	@ (80047ec <HAL_TIM_Base_MspInit+0x168>)
 80047b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047b6:	2180      	movs	r1, #128	@ 0x80
 80047b8:	0209      	lsls	r1, r1, #8
 80047ba:	430a      	orrs	r2, r1
 80047bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80047be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c0:	400b      	ands	r3, r1
 80047c2:	9306      	str	r3, [sp, #24]
 80047c4:	9b06      	ldr	r3, [sp, #24]
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 80047c6:	2203      	movs	r2, #3
 80047c8:	2103      	movs	r1, #3
 80047ca:	2013      	movs	r0, #19
 80047cc:	f001 f91a 	bl	8005a04 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80047d0:	2013      	movs	r0, #19
 80047d2:	f001 f949 	bl	8005a68 <HAL_NVIC_EnableIRQ>
}
 80047d6:	e777      	b.n	80046c8 <HAL_TIM_Base_MspInit+0x44>
 80047d8:	40012c00 	.word	0x40012c00
 80047dc:	40000400 	.word	0x40000400
 80047e0:	40014400 	.word	0x40014400
 80047e4:	40014800 	.word	0x40014800
 80047e8:	40002000 	.word	0x40002000
 80047ec:	40021000 	.word	0x40021000

080047f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80047f0:	b530      	push	{r4, r5, lr}
 80047f2:	b089      	sub	sp, #36	@ 0x24
 80047f4:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047f6:	2214      	movs	r2, #20
 80047f8:	2100      	movs	r1, #0
 80047fa:	a803      	add	r0, sp, #12
 80047fc:	f004 fdfb 	bl	80093f6 <memset>
  if(htim->Instance==TIM1)
 8004800:	4b16      	ldr	r3, [pc, #88]	@ (800485c <HAL_TIM_MspPostInit+0x6c>)
 8004802:	6822      	ldr	r2, [r4, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d001      	beq.n	800480c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004808:	b009      	add	sp, #36	@ 0x24
 800480a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800480c:	4b14      	ldr	r3, [pc, #80]	@ (8004860 <HAL_TIM_MspPostInit+0x70>)
 800480e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004810:	2501      	movs	r5, #1
 8004812:	432a      	orrs	r2, r5
 8004814:	635a      	str	r2, [r3, #52]	@ 0x34
 8004816:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004818:	402a      	ands	r2, r5
 800481a:	9201      	str	r2, [sp, #4]
 800481c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800481e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004820:	2402      	movs	r4, #2
 8004822:	4322      	orrs	r2, r4
 8004824:	635a      	str	r2, [r3, #52]	@ 0x34
 8004826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004828:	4023      	ands	r3, r4
 800482a:	9302      	str	r3, [sp, #8]
 800482c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
 800482e:	2380      	movs	r3, #128	@ 0x80
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004834:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004836:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8004838:	20a0      	movs	r0, #160	@ 0xa0
 800483a:	a903      	add	r1, sp, #12
 800483c:	05c0      	lsls	r0, r0, #23
 800483e:	f001 fc15 	bl	800606c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MAIN_OSCILLATOR_Pin;
 8004842:	2308      	movs	r3, #8
 8004844:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004846:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004848:	2300      	movs	r3, #0
 800484a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800484c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800484e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8004850:	a903      	add	r1, sp, #12
 8004852:	4804      	ldr	r0, [pc, #16]	@ (8004864 <HAL_TIM_MspPostInit+0x74>)
 8004854:	f001 fc0a 	bl	800606c <HAL_GPIO_Init>
}
 8004858:	e7d6      	b.n	8004808 <HAL_TIM_MspPostInit+0x18>
 800485a:	46c0      	nop			@ (mov r8, r8)
 800485c:	40012c00 	.word	0x40012c00
 8004860:	40021000 	.word	0x40021000
 8004864:	50000400 	.word	0x50000400

08004868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004868:	b510      	push	{r4, lr}
 800486a:	b088      	sub	sp, #32
 800486c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800486e:	2214      	movs	r2, #20
 8004870:	2100      	movs	r1, #0
 8004872:	a803      	add	r0, sp, #12
 8004874:	f004 fdbf 	bl	80093f6 <memset>
  if(huart->Instance==USART2)
 8004878:	4b30      	ldr	r3, [pc, #192]	@ (800493c <HAL_UART_MspInit+0xd4>)
 800487a:	6822      	ldr	r2, [r4, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d001      	beq.n	8004884 <HAL_UART_MspInit+0x1c>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8004880:	b008      	add	sp, #32
 8004882:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8004884:	4b2e      	ldr	r3, [pc, #184]	@ (8004940 <HAL_UART_MspInit+0xd8>)
 8004886:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004888:	2180      	movs	r1, #128	@ 0x80
 800488a:	0289      	lsls	r1, r1, #10
 800488c:	430a      	orrs	r2, r1
 800488e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004890:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004892:	400a      	ands	r2, r1
 8004894:	9201      	str	r2, [sp, #4]
 8004896:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004898:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800489a:	2201      	movs	r2, #1
 800489c:	4311      	orrs	r1, r2
 800489e:	6359      	str	r1, [r3, #52]	@ 0x34
 80048a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048a2:	4013      	ands	r3, r2
 80048a4:	9302      	str	r3, [sp, #8]
 80048a6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 80048a8:	230c      	movs	r3, #12
 80048aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ac:	3b0a      	subs	r3, #10
 80048ae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048b0:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80048b2:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048b4:	20a0      	movs	r0, #160	@ 0xa0
 80048b6:	a903      	add	r1, sp, #12
 80048b8:	05c0      	lsls	r0, r0, #23
 80048ba:	f001 fbd7 	bl	800606c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80048be:	4821      	ldr	r0, [pc, #132]	@ (8004944 <HAL_UART_MspInit+0xdc>)
 80048c0:	4b21      	ldr	r3, [pc, #132]	@ (8004948 <HAL_UART_MspInit+0xe0>)
 80048c2:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80048c4:	2334      	movs	r3, #52	@ 0x34
 80048c6:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048c8:	2300      	movs	r3, #0
 80048ca:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048cc:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048ce:	2280      	movs	r2, #128	@ 0x80
 80048d0:	6102      	str	r2, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048d2:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048d4:	6183      	str	r3, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80048d6:	61c3      	str	r3, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80048d8:	2380      	movs	r3, #128	@ 0x80
 80048da:	015b      	lsls	r3, r3, #5
 80048dc:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80048de:	f001 f939 	bl	8005b54 <HAL_DMA_Init>
 80048e2:	2800      	cmp	r0, #0
 80048e4:	d123      	bne.n	800492e <HAL_UART_MspInit+0xc6>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80048e6:	2280      	movs	r2, #128	@ 0x80
 80048e8:	4b16      	ldr	r3, [pc, #88]	@ (8004944 <HAL_UART_MspInit+0xdc>)
 80048ea:	50a3      	str	r3, [r4, r2]
 80048ec:	629c      	str	r4, [r3, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 80048ee:	4817      	ldr	r0, [pc, #92]	@ (800494c <HAL_UART_MspInit+0xe4>)
 80048f0:	4b17      	ldr	r3, [pc, #92]	@ (8004950 <HAL_UART_MspInit+0xe8>)
 80048f2:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80048f4:	2335      	movs	r3, #53	@ 0x35
 80048f6:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048f8:	3b25      	subs	r3, #37	@ 0x25
 80048fa:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048fc:	2300      	movs	r3, #0
 80048fe:	60c3      	str	r3, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004900:	6102      	str	r2, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004902:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004904:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004906:	61c3      	str	r3, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004908:	2380      	movs	r3, #128	@ 0x80
 800490a:	015b      	lsls	r3, r3, #5
 800490c:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800490e:	f001 f921 	bl	8005b54 <HAL_DMA_Init>
 8004912:	2800      	cmp	r0, #0
 8004914:	d10e      	bne.n	8004934 <HAL_UART_MspInit+0xcc>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004916:	4b0d      	ldr	r3, [pc, #52]	@ (800494c <HAL_UART_MspInit+0xe4>)
 8004918:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800491a:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 800491c:	2201      	movs	r2, #1
 800491e:	2101      	movs	r1, #1
 8004920:	201c      	movs	r0, #28
 8004922:	f001 f86f 	bl	8005a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004926:	201c      	movs	r0, #28
 8004928:	f001 f89e 	bl	8005a68 <HAL_NVIC_EnableIRQ>
}
 800492c:	e7a8      	b.n	8004880 <HAL_UART_MspInit+0x18>
      Error_Handler();
 800492e:	f7fd f87f 	bl	8001a30 <Error_Handler>
 8004932:	e7d8      	b.n	80048e6 <HAL_UART_MspInit+0x7e>
      Error_Handler();
 8004934:	f7fd f87c 	bl	8001a30 <Error_Handler>
 8004938:	e7ed      	b.n	8004916 <HAL_UART_MspInit+0xae>
 800493a:	46c0      	nop			@ (mov r8, r8)
 800493c:	40004400 	.word	0x40004400
 8004940:	40021000 	.word	0x40021000
 8004944:	20000620 	.word	0x20000620
 8004948:	4002001c 	.word	0x4002001c
 800494c:	200005c4 	.word	0x200005c4
 8004950:	40020030 	.word	0x40020030

08004954 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004954:	e7fe      	b.n	8004954 <NMI_Handler>

08004956 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004956:	e7fe      	b.n	8004956 <HardFault_Handler>

08004958 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004958:	4770      	bx	lr

0800495a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800495a:	4770      	bx	lr

0800495c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800495c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800495e:	f000 fab3 	bl	8004ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004962:	bd10      	pop	{r4, pc}

08004964 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004964:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(CLK_IN_Pin);
 8004966:	2080      	movs	r0, #128	@ 0x80
 8004968:	0040      	lsls	r0, r0, #1
 800496a:	f001 fc77 	bl	800625c <HAL_GPIO_EXTI_IRQHandler>
	//HAL_GPIO_EXTI_IRQHandler(SW_IN_Pin);

  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800496e:	bd10      	pop	{r4, pc}

08004970 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004970:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004972:	4802      	ldr	r0, [pc, #8]	@ (800497c <DMA1_Channel1_IRQHandler+0xc>)
 8004974:	f001 fa20 	bl	8005db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004978:	bd10      	pop	{r4, pc}
 800497a:	46c0      	nop			@ (mov r8, r8)
 800497c:	20000bb0 	.word	0x20000bb0

08004980 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004980:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004982:	4803      	ldr	r0, [pc, #12]	@ (8004990 <DMA1_Channel2_3_IRQHandler+0x10>)
 8004984:	f001 fa18 	bl	8005db8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004988:	4802      	ldr	r0, [pc, #8]	@ (8004994 <DMA1_Channel2_3_IRQHandler+0x14>)
 800498a:	f001 fa15 	bl	8005db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800498e:	bd10      	pop	{r4, pc}
 8004990:	20000620 	.word	0x20000620
 8004994:	200005c4 	.word	0x200005c4

08004998 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004998:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800499a:	4802      	ldr	r0, [pc, #8]	@ (80049a4 <TIM2_IRQHandler+0xc>)
 800499c:	f002 fd82 	bl	80074a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80049a0:	bd10      	pop	{r4, pc}
 80049a2:	46c0      	nop			@ (mov r8, r8)
 80049a4:	200008c0 	.word	0x200008c0

080049a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80049a8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80049aa:	4802      	ldr	r0, [pc, #8]	@ (80049b4 <TIM3_IRQHandler+0xc>)
 80049ac:	f002 fd7a 	bl	80074a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80049b0:	bd10      	pop	{r4, pc}
 80049b2:	46c0      	nop			@ (mov r8, r8)
 80049b4:	20000804 	.word	0x20000804

080049b8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80049b8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80049ba:	4802      	ldr	r0, [pc, #8]	@ (80049c4 <TIM16_IRQHandler+0xc>)
 80049bc:	f002 fd72 	bl	80074a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80049c0:	bd10      	pop	{r4, pc}
 80049c2:	46c0      	nop			@ (mov r8, r8)
 80049c4:	2000097c 	.word	0x2000097c

080049c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80049c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80049ca:	4802      	ldr	r0, [pc, #8]	@ (80049d4 <USART2_IRQHandler+0xc>)
 80049cc:	f003 fff0 	bl	80089b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80049d0:	bd10      	pop	{r4, pc}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	2000067c 	.word	0x2000067c

080049d8 <LPTIM1_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void LPTIM1_IRQHandler(void)
{
 80049d8:	b510      	push	{r4, lr}
  HAL_LPTIM_IRQHandler(&hlptim1);
 80049da:	4802      	ldr	r0, [pc, #8]	@ (80049e4 <LPTIM1_IRQHandler+0xc>)
 80049dc:	f001 fd06 	bl	80063ec <HAL_LPTIM_IRQHandler>
}
 80049e0:	bd10      	pop	{r4, pc}
 80049e2:	46c0      	nop			@ (mov r8, r8)
 80049e4:	20000568 	.word	0x20000568

080049e8 <TIM17_IRQHandler>:


void TIM17_IRQHandler(void)
{
 80049e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80049ea:	4802      	ldr	r0, [pc, #8]	@ (80049f4 <TIM17_IRQHandler+0xc>)
 80049ec:	f002 fd5a 	bl	80074a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80049f0:	bd10      	pop	{r4, pc}
 80049f2:	46c0      	nop			@ (mov r8, r8)
 80049f4:	20000a38 	.word	0x20000a38

080049f8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80049f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80049fa:	4802      	ldr	r0, [pc, #8]	@ (8004a04 <TIM14_IRQHandler+0xc>)
 80049fc:	f002 fd52 	bl	80074a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8004a00:	bd10      	pop	{r4, pc}
 8004a02:	46c0      	nop			@ (mov r8, r8)
 8004a04:	20000af4 	.word	0x20000af4

08004a08 <Adjust_TIM16_Prescaler>:
#include "symmetry_adjustment.h"


uint8_t Adjust_TIM16_Prescaler(struct Params* params_ptr){

    if(params_ptr->prescaler_adjust == MULTIPLY_BY_TWO){
 8004a08:	2322      	movs	r3, #34	@ 0x22
 8004a0a:	5cc3      	ldrb	r3, [r0, r3]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d007      	beq.n	8004a20 <Adjust_TIM16_Prescaler+0x18>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler << 1;
    }
    else if(params_ptr->prescaler_adjust == DO_NOTHING){
 8004a10:	2322      	movs	r3, #34	@ 0x22
 8004a12:	5cc3      	ldrb	r3, [r0, r3]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d107      	bne.n	8004a28 <Adjust_TIM16_Prescaler+0x20>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler;
 8004a18:	8b83      	ldrh	r3, [r0, #28]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	83c3      	strh	r3, [r0, #30]
 8004a1e:	e003      	b.n	8004a28 <Adjust_TIM16_Prescaler+0x20>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler << 1;
 8004a20:	8b83      	ldrh	r3, [r0, #28]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	83c3      	strh	r3, [r0, #30]
    }
    return 1;
}
 8004a28:	2001      	movs	r0, #1
 8004a2a:	4770      	bx	lr

08004a2c <Process_TIM16_Final_Start_Value_and_Final_Prescaler>:

uint8_t Process_TIM16_Final_Start_Value_and_Final_Prescaler(struct Params* params_ptr){
 8004a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2e:	46de      	mov	lr, fp
 8004a30:	4657      	mov	r7, sl
 8004a32:	464e      	mov	r6, r9
 8004a34:	4645      	mov	r5, r8
 8004a36:	b5e0      	push	{r5, r6, r7, lr}
 8004a38:	0004      	movs	r4, r0

			uint8_t pot_rotation_corrected = 0;
			enum Symmetry_Status symmetry_status = CW;

			//DETERMINE IF CW OR CCW SYMMETRY POT ROTATION
			if(params_ptr->symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 8004a3a:	89c2      	ldrh	r2, [r0, #14]
 8004a3c:	b292      	uxth	r2, r2
			else{ //adc is 128-255
				symmetry_status = CCW;
			}

			//DETERMINE WHETHER TO SHORTEN OR LENGTHEN BASED ON CURRENT INDEX AND SYMMETRY POT POSITION
			if((params_ptr->waveshape == SINE_MODE) || (params_ptr->waveshape == TRIANGLE_MODE)){
 8004a3e:	7a03      	ldrb	r3, [r0, #8]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d002      	beq.n	8004a4a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1e>
 8004a44:	7a03      	ldrb	r3, [r0, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d160      	bne.n	8004b0c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe0>

				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8004a4a:	7ca3      	ldrb	r3, [r4, #18]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d102      	bne.n	8004a56 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2a>
 8004a50:	7ce3      	ldrb	r3, [r4, #19]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d04d      	beq.n	8004af2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xc6>
 8004a56:	7ca3      	ldrb	r3, [r4, #18]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d047      	beq.n	8004aec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xc0>
					else{

						symmetry_type_for_halfcycle = SHORTEN;
					}
				}
				else if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT)){
 8004a5c:	7ca3      	ldrb	r3, [r4, #18]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d102      	bne.n	8004a68 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3c>
 8004a62:	7ce3      	ldrb	r3, [r4, #19]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d04c      	beq.n	8004b02 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd6>
 8004a68:	7ca3      	ldrb	r3, [r4, #18]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d046      	beq.n	8004afc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd0>
						symmetry_type_for_halfcycle = LENGTHEN;
					}
				}
			}

			if(symmetry_status == CW){
 8004a6e:	2a7f      	cmp	r2, #127	@ 0x7f
 8004a70:	d867      	bhi.n	8004b42 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x116>
 8004a72:	2300      	movs	r3, #0
 8004a74:	4699      	mov	r9, r3

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - params_ptr->symmetry;
 8004a76:	89e3      	ldrh	r3, [r4, #14]
 8004a78:	227f      	movs	r2, #127	@ 0x7f
 8004a7a:	1ad2      	subs	r2, r2, r3
 8004a7c:	b2d2      	uxtb	r2, r2

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
			}

			//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - params_ptr->raw_start_value;
 8004a7e:	8aa1      	ldrh	r1, [r4, #20]
 8004a80:	b28b      	uxth	r3, r1
 8004a82:	469a      	mov	sl, r3
 8004a84:	2380      	movs	r3, #128	@ 0x80
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	1a5b      	subs	r3, r3, r1
 8004a8a:	b29b      	uxth	r3, r3

			//uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = (two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected);
			//COMMENT LINE BELOW IN AND LINE ABOVE OUT TO EXPERIMENT WITH MORE EXTREME SYMMETRY ADJUSTMENT
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = ((two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected) * 12) >> 3; //x(12/8) - 12/8 is the absolute maximum we can get away with
 8004a8c:	435a      	muls	r2, r3
 8004a8e:	0056      	lsls	r6, r2, #1
 8004a90:	18b6      	adds	r6, r6, r2
 8004a92:	1076      	asrs	r6, r6, #1

			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 8004a94:	b2b7      	uxth	r7, r6
 8004a96:	0a3f      	lsrs	r7, r7, #8


			//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8004a98:	1bda      	subs	r2, r3, r7
 8004a9a:	b292      	uxth	r2, r2
 8004a9c:	4690      	mov	r8, r2

			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 8004a9e:	19db      	adds	r3, r3, r7
 8004aa0:	b29d      	uxth	r5, r3


			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 8004aa2:	2dff      	cmp	r5, #255	@ 0xff
 8004aa4:	d95c      	bls.n	8004b60 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 8004aa6:	2380      	movs	r3, #128	@ 0x80
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	429d      	cmp	r5, r3
 8004aac:	d04f      	beq.n	8004b4e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x122>
				}
			}

			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8004aae:	0436      	lsls	r6, r6, #16
 8004ab0:	0c36      	lsrs	r6, r6, #16
 8004ab2:	2108      	movs	r1, #8
 8004ab4:	0030      	movs	r0, r6
 8004ab6:	f000 f98b 	bl	8004dd0 <unsigned_bitwise_modulo>
 8004aba:	2880      	cmp	r0, #128	@ 0x80
 8004abc:	d100      	bne.n	8004ac0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x94>
 8004abe:	e09d      	b.n	8004bfc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1d0>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8004ac0:	2108      	movs	r1, #8
 8004ac2:	0030      	movs	r0, r6
 8004ac4:	f000 f984 	bl	8004dd0 <unsigned_bitwise_modulo>
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	d000      	beq.n	8004ace <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xa2>
 8004acc:	e0f4      	b.n	8004cb8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x28c>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8004ace:	2101      	movs	r1, #1
 8004ad0:	0028      	movs	r0, r5
 8004ad2:	f000 f97d 	bl	8004dd0 <unsigned_bitwise_modulo>
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	d000      	beq.n	8004adc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xb0>
 8004ada:	e0e1      	b.n	8004ca0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x274>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8004adc:	464b      	mov	r3, r9
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d000      	beq.n	8004ae4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xb8>
 8004ae2:	e0d8      	b.n	8004c96 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x26a>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
							params_ptr->prescaler_adjust = DO_NOTHING;
 8004ae4:	3322      	adds	r3, #34	@ 0x22
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	54e2      	strb	r2, [r4, r3]
			}

	        //DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	        //NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	        //ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8004aea:	e099      	b.n	8004c20 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1f4>
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8004aec:	7ce3      	ldrb	r3, [r4, #19]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d1b4      	bne.n	8004a5c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x30>
					if(symmetry_status == CW){
 8004af2:	2a7f      	cmp	r2, #127	@ 0x7f
 8004af4:	d91c      	bls.n	8004b30 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x104>
						symmetry_type_for_halfcycle = SHORTEN;
 8004af6:	2300      	movs	r3, #0
 8004af8:	4699      	mov	r9, r3
 8004afa:	e024      	b.n	8004b46 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x11a>
				else if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT)){
 8004afc:	7ce3      	ldrb	r3, [r4, #19]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1b5      	bne.n	8004a6e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x42>
					if(symmetry_status == CW){
 8004b02:	2a7f      	cmp	r2, #127	@ 0x7f
 8004b04:	d917      	bls.n	8004b36 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x10a>
						symmetry_type_for_halfcycle = LENGTHEN;
 8004b06:	2301      	movs	r3, #1
 8004b08:	4699      	mov	r9, r3
 8004b0a:	e01c      	b.n	8004b46 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x11a>
			else if(params_ptr->waveshape == SQUARE_MODE){
 8004b0c:	7a03      	ldrb	r3, [r0, #8]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d1ad      	bne.n	8004a6e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x42>
				if(params_ptr->halfcycle == FIRST_HALFCYCLE){
 8004b12:	7c83      	ldrb	r3, [r0, #18]
 8004b14:	b2d9      	uxtb	r1, r3
 8004b16:	4689      	mov	r9, r1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d104      	bne.n	8004b26 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xfa>
					if(symmetry_status == CW){
 8004b1c:	2a7f      	cmp	r2, #127	@ 0x7f
 8004b1e:	d812      	bhi.n	8004b46 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x11a>
						symmetry_type_for_halfcycle = LENGTHEN;
 8004b20:	2301      	movs	r3, #1
 8004b22:	4699      	mov	r9, r3
 8004b24:	e7a7      	b.n	8004a76 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4a>
					if(symmetry_status == CW){
 8004b26:	2a7f      	cmp	r2, #127	@ 0x7f
 8004b28:	d908      	bls.n	8004b3c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x110>
						symmetry_type_for_halfcycle = LENGTHEN;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	4699      	mov	r9, r3
 8004b2e:	e00a      	b.n	8004b46 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x11a>
						symmetry_type_for_halfcycle = LENGTHEN;
 8004b30:	2301      	movs	r3, #1
 8004b32:	4699      	mov	r9, r3
 8004b34:	e79f      	b.n	8004a76 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4a>
						symmetry_type_for_halfcycle = SHORTEN;
 8004b36:	2300      	movs	r3, #0
 8004b38:	4699      	mov	r9, r3
 8004b3a:	e79c      	b.n	8004a76 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4a>
						symmetry_type_for_halfcycle = SHORTEN;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	4699      	mov	r9, r3
 8004b40:	e799      	b.n	8004a76 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4a>
 8004b42:	2300      	movs	r3, #0
 8004b44:	4699      	mov	r9, r3
				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
 8004b46:	89e2      	ldrh	r2, [r4, #14]
 8004b48:	3a80      	subs	r2, #128	@ 0x80
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	e797      	b.n	8004a7e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x52>
			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 8004b4e:	0433      	lsls	r3, r6, #16
 8004b50:	0c1b      	lsrs	r3, r3, #16
 8004b52:	469b      	mov	fp, r3
 8004b54:	2108      	movs	r1, #8
 8004b56:	0018      	movs	r0, r3
 8004b58:	f000 f93a 	bl	8004dd0 <unsigned_bitwise_modulo>
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	d146      	bne.n	8004bee <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1c2>
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8004b60:	0436      	lsls	r6, r6, #16
 8004b62:	0c36      	lsrs	r6, r6, #16
 8004b64:	2108      	movs	r1, #8
 8004b66:	0030      	movs	r0, r6
 8004b68:	f000 f932 	bl	8004dd0 <unsigned_bitwise_modulo>
 8004b6c:	2880      	cmp	r0, #128	@ 0x80
 8004b6e:	d112      	bne.n	8004b96 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x16a>
					params_ptr->prescaler_adjust = DO_NOTHING;
 8004b70:	2322      	movs	r3, #34	@ 0x22
 8004b72:	2200      	movs	r2, #0
 8004b74:	54e2      	strb	r2, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8004b76:	464b      	mov	r3, r9
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d000      	beq.n	8004b7e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x152>
 8004b7c:	e07e      	b.n	8004c7c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x250>
	                    params_ptr->final_start_value = 256 - manipulated_period_shorten - 1;
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8004b7e:	8a20      	ldrh	r0, [r4, #16]
 8004b80:	b280      	uxth	r0, r0
 8004b82:	2101      	movs	r1, #1
 8004b84:	f000 f924 	bl	8004dd0 <unsigned_bitwise_modulo>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	d000      	beq.n	8004b8e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x162>
 8004b8c:	e0e3      	b.n	8004d56 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x32a>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8004b8e:	4457      	add	r7, sl
 8004b90:	b2bf      	uxth	r7, r7
 8004b92:	82e7      	strh	r7, [r4, #22]
 8004b94:	e04a      	b.n	8004c2c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x200>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8004b96:	2108      	movs	r1, #8
 8004b98:	0030      	movs	r0, r6
 8004b9a:	f000 f919 	bl	8004dd0 <unsigned_bitwise_modulo>
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	d10b      	bne.n	8004bba <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x18e>
					params_ptr->prescaler_adjust = DO_NOTHING;
 8004ba2:	2322      	movs	r3, #34	@ 0x22
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	54e2      	strb	r2, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8004ba8:	464b      	mov	r3, r9
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d038      	beq.n	8004c20 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1f4>
	        }
	        else if(symmetry_type_for_halfcycle == LENGTHEN){

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){

	                params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8004bae:	2380      	movs	r3, #128	@ 0x80
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	1b5b      	subs	r3, r3, r5
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	82e3      	strh	r3, [r4, #22]
 8004bb8:	e038      	b.n	8004c2c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x200>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8004bba:	2108      	movs	r1, #8
 8004bbc:	0030      	movs	r0, r6
 8004bbe:	f000 f907 	bl	8004dd0 <unsigned_bitwise_modulo>
 8004bc2:	287f      	cmp	r0, #127	@ 0x7f
 8004bc4:	d803      	bhi.n	8004bce <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1a2>
					params_ptr->prescaler_adjust = DO_NOTHING;
 8004bc6:	2322      	movs	r3, #34	@ 0x22
 8004bc8:	2200      	movs	r2, #0
 8004bca:	54e2      	strb	r2, [r4, r3]
 8004bcc:	e7ec      	b.n	8004ba8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x17c>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8004bce:	2108      	movs	r1, #8
 8004bd0:	0030      	movs	r0, r6
 8004bd2:	f000 f8fd 	bl	8004dd0 <unsigned_bitwise_modulo>
 8004bd6:	2880      	cmp	r0, #128	@ 0x80
 8004bd8:	d9e6      	bls.n	8004ba8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x17c>
					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8004bda:	4643      	mov	r3, r8
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	4698      	mov	r8, r3
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8004be2:	3501      	adds	r5, #1
 8004be4:	b2ad      	uxth	r5, r5
					params_ptr->prescaler_adjust = DO_NOTHING;
 8004be6:	2322      	movs	r3, #34	@ 0x22
 8004be8:	2200      	movs	r2, #0
 8004bea:	54e2      	strb	r2, [r4, r3]
 8004bec:	e7dc      	b.n	8004ba8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x17c>
			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 8004bee:	2108      	movs	r1, #8
 8004bf0:	4658      	mov	r0, fp
 8004bf2:	f000 f8ed 	bl	8004dd0 <unsigned_bitwise_modulo>
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	d0d6      	beq.n	8004ba8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x17c>
 8004bfa:	e758      	b.n	8004aae <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x82>
					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8004bfc:	4643      	mov	r3, r8
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	4698      	mov	r8, r3
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8004c04:	3501      	adds	r5, #1
 8004c06:	b2ad      	uxth	r5, r5
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8004c08:	2101      	movs	r1, #1
 8004c0a:	0028      	movs	r0, r5
 8004c0c:	f000 f8e0 	bl	8004dd0 <unsigned_bitwise_modulo>
 8004c10:	2800      	cmp	r0, #0
 8004c12:	d128      	bne.n	8004c66 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x23a>
						if(symmetry_type_for_halfcycle == SHORTEN){
 8004c14:	464b      	mov	r3, r9
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d120      	bne.n	8004c5c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x230>
							params_ptr->prescaler_adjust = DO_NOTHING;
 8004c1a:	3322      	adds	r3, #34	@ 0x22
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	54e2      	strb	r2, [r4, r3]
	                params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8004c20:	2380      	movs	r3, #128	@ 0x80
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	4642      	mov	r2, r8
 8004c26:	1a9b      	subs	r3, r3, r2
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	82e3      	strh	r3, [r4, #22]
	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen + 1;
	                }
	            }
	        }

	        Adjust_TIM16_Prescaler(params_ptr);
 8004c2c:	0020      	movs	r0, r4
 8004c2e:	f7ff feeb 	bl	8004a08 <Adjust_TIM16_Prescaler>
		params_ptr->final_start_value = params_ptr->raw_start_value;
		params_ptr->prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(params_ptr);
    #endif

    params_ptr->final_period = 256 - params_ptr->final_start_value;
 8004c32:	8ae2      	ldrh	r2, [r4, #22]
 8004c34:	2380      	movs	r3, #128	@ 0x80
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	1a9b      	subs	r3, r3, r2
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	8323      	strh	r3, [r4, #24]
    params_ptr->final_ARR = params_ptr->final_period - 1;
 8004c3e:	8b23      	ldrh	r3, [r4, #24]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	8363      	strh	r3, [r4, #26]
    params_ptr->final_prescaler_minus_one = params_ptr->final_prescaler - 1;
 8004c46:	8be3      	ldrh	r3, [r4, #30]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	8423      	strh	r3, [r4, #32]

    return 1;
}
 8004c4e:	2001      	movs	r0, #1
 8004c50:	bcf0      	pop	{r4, r5, r6, r7}
 8004c52:	46bb      	mov	fp, r7
 8004c54:	46b2      	mov	sl, r6
 8004c56:	46a9      	mov	r9, r5
 8004c58:	46a0      	mov	r8, r4
 8004c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8004c5c:	086d      	lsrs	r5, r5, #1
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8004c5e:	2322      	movs	r3, #34	@ 0x22
 8004c60:	2201      	movs	r2, #1
 8004c62:	54e2      	strb	r2, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8004c64:	e7a3      	b.n	8004bae <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x182>
						if(symmetry_type_for_halfcycle == SHORTEN){
 8004c66:	464b      	mov	r3, r9
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d103      	bne.n	8004c74 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x248>
							params_ptr->prescaler_adjust = DO_NOTHING;
 8004c6c:	3322      	adds	r3, #34	@ 0x22
 8004c6e:	2200      	movs	r2, #0
 8004c70:	54e2      	strb	r2, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8004c72:	e7d5      	b.n	8004c20 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1f4>
						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8004c74:	086d      	lsrs	r5, r5, #1
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8004c76:	2322      	movs	r3, #34	@ 0x22
 8004c78:	2201      	movs	r2, #1
 8004c7a:	54e2      	strb	r2, [r4, r3]
	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8004c7c:	8a20      	ldrh	r0, [r4, #16]
 8004c7e:	b280      	uxth	r0, r0
 8004c80:	2101      	movs	r1, #1
 8004c82:	f000 f8a5 	bl	8004dd0 <unsigned_bitwise_modulo>
 8004c86:	2800      	cmp	r0, #0
 8004c88:	d16b      	bne.n	8004d62 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x336>
	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8004c8a:	2380      	movs	r3, #128	@ 0x80
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	1b5b      	subs	r3, r3, r5
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	82e3      	strh	r3, [r4, #22]
 8004c94:	e7ca      	b.n	8004c2c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x200>
						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8004c96:	086d      	lsrs	r5, r5, #1
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8004c98:	2322      	movs	r3, #34	@ 0x22
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	54e2      	strb	r2, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8004c9e:	e786      	b.n	8004bae <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x182>
						if(symmetry_type_for_halfcycle == SHORTEN){
 8004ca0:	464b      	mov	r3, r9
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d103      	bne.n	8004cae <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x282>
							params_ptr->prescaler_adjust = DO_NOTHING;
 8004ca6:	3322      	adds	r3, #34	@ 0x22
 8004ca8:	2200      	movs	r2, #0
 8004caa:	54e2      	strb	r2, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8004cac:	e7b8      	b.n	8004c20 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1f4>
						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8004cae:	086d      	lsrs	r5, r5, #1
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8004cb0:	2322      	movs	r3, #34	@ 0x22
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	54e2      	strb	r2, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8004cb6:	e7e1      	b.n	8004c7c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x250>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8004cb8:	2108      	movs	r1, #8
 8004cba:	0030      	movs	r0, r6
 8004cbc:	f000 f888 	bl	8004dd0 <unsigned_bitwise_modulo>
 8004cc0:	287f      	cmp	r0, #127	@ 0x7f
 8004cc2:	d81d      	bhi.n	8004d00 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d4>
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	0028      	movs	r0, r5
 8004cc8:	f000 f882 	bl	8004dd0 <unsigned_bitwise_modulo>
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	d10b      	bne.n	8004ce8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2bc>
						if(symmetry_type_for_halfcycle == SHORTEN){
 8004cd0:	464b      	mov	r3, r9
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d103      	bne.n	8004cde <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2b2>
							params_ptr->prescaler_adjust = DO_NOTHING;
 8004cd6:	3322      	adds	r3, #34	@ 0x22
 8004cd8:	2200      	movs	r2, #0
 8004cda:	54e2      	strb	r2, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8004cdc:	e7a0      	b.n	8004c20 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1f4>
						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8004cde:	086d      	lsrs	r5, r5, #1
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8004ce0:	2322      	movs	r3, #34	@ 0x22
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	54e2      	strb	r2, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8004ce6:	e762      	b.n	8004bae <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x182>
						if(symmetry_type_for_halfcycle == SHORTEN){
 8004ce8:	464b      	mov	r3, r9
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d103      	bne.n	8004cf6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2ca>
							params_ptr->prescaler_adjust = DO_NOTHING;
 8004cee:	3322      	adds	r3, #34	@ 0x22
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	54e2      	strb	r2, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8004cf4:	e794      	b.n	8004c20 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1f4>
						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8004cf6:	086d      	lsrs	r5, r5, #1
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8004cf8:	2322      	movs	r3, #34	@ 0x22
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	54e2      	strb	r2, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8004cfe:	e7bd      	b.n	8004c7c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x250>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8004d00:	2108      	movs	r1, #8
 8004d02:	0030      	movs	r0, r6
 8004d04:	f000 f864 	bl	8004dd0 <unsigned_bitwise_modulo>
 8004d08:	2880      	cmp	r0, #128	@ 0x80
 8004d0a:	d800      	bhi.n	8004d0e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2e2>
 8004d0c:	e74c      	b.n	8004ba8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x17c>
					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8004d0e:	4643      	mov	r3, r8
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	4698      	mov	r8, r3
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8004d16:	3501      	adds	r5, #1
 8004d18:	b2ad      	uxth	r5, r5
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	0028      	movs	r0, r5
 8004d1e:	f000 f857 	bl	8004dd0 <unsigned_bitwise_modulo>
 8004d22:	2800      	cmp	r0, #0
 8004d24:	d10b      	bne.n	8004d3e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x312>
						if(symmetry_type_for_halfcycle == SHORTEN){
 8004d26:	464b      	mov	r3, r9
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d103      	bne.n	8004d34 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x308>
							params_ptr->prescaler_adjust = DO_NOTHING;
 8004d2c:	3322      	adds	r3, #34	@ 0x22
 8004d2e:	2200      	movs	r2, #0
 8004d30:	54e2      	strb	r2, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8004d32:	e775      	b.n	8004c20 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1f4>
						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8004d34:	086d      	lsrs	r5, r5, #1
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8004d36:	2322      	movs	r3, #34	@ 0x22
 8004d38:	2201      	movs	r2, #1
 8004d3a:	54e2      	strb	r2, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8004d3c:	e737      	b.n	8004bae <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x182>
						if(symmetry_type_for_halfcycle == SHORTEN){
 8004d3e:	464b      	mov	r3, r9
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d103      	bne.n	8004d4c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x320>
							params_ptr->prescaler_adjust = DO_NOTHING;
 8004d44:	3322      	adds	r3, #34	@ 0x22
 8004d46:	2200      	movs	r2, #0
 8004d48:	54e2      	strb	r2, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8004d4a:	e769      	b.n	8004c20 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1f4>
						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8004d4c:	086d      	lsrs	r5, r5, #1
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8004d4e:	2322      	movs	r3, #34	@ 0x22
 8004d50:	2201      	movs	r2, #1
 8004d52:	54e2      	strb	r2, [r4, r3]
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8004d54:	e792      	b.n	8004c7c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x250>
	                    params_ptr->final_start_value = 256 - manipulated_period_shorten + 1;
 8004d56:	4653      	mov	r3, sl
 8004d58:	3301      	adds	r3, #1
 8004d5a:	18ff      	adds	r7, r7, r3
 8004d5c:	b2bf      	uxth	r7, r7
 8004d5e:	82e7      	strh	r7, [r4, #22]
 8004d60:	e764      	b.n	8004c2c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x200>
	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 8004d62:	23ff      	movs	r3, #255	@ 0xff
 8004d64:	1b5b      	subs	r3, r3, r5
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	82e3      	strh	r3, [r4, #22]
 8004d6a:	e75f      	b.n	8004c2c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x200>

08004d6c <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d6c:	4770      	bx	lr

08004d6e <Start_OC_TIM>:
//INCLUDES
#include "timers.h"

//FUNCTION DEFINITIONS
uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8004d6e:	b510      	push	{r4, lr}

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 8004d70:	f003 f88a 	bl	8007e88 <HAL_TIM_OC_Start_IT>
 8004d74:	1e04      	subs	r4, r0, #0
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 8004d76:	d101      	bne.n	8004d7c <Start_OC_TIM+0xe>

		Error_Handler();
	}

	return ok;
}
 8004d78:	0020      	movs	r0, r4
 8004d7a:	bd10      	pop	{r4, pc}
		Error_Handler();
 8004d7c:	f7fc fe58 	bl	8001a30 <Error_Handler>
 8004d80:	e7fa      	b.n	8004d78 <Start_OC_TIM+0xa>

08004d82 <Stop_OC_TIM>:

uint8_t Stop_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8004d82:	b510      	push	{r4, lr}

	uint8_t ok = HAL_TIM_OC_Stop_IT(TIM, OC_TIM_channel);
 8004d84:	f003 f928 	bl	8007fd8 <HAL_TIM_OC_Stop_IT>
 8004d88:	1e04      	subs	r4, r0, #0

	if(ok != HAL_OK){
 8004d8a:	d101      	bne.n	8004d90 <Stop_OC_TIM+0xe>

		Error_Handler();
	}

	return ok;
}
 8004d8c:	0020      	movs	r0, r4
 8004d8e:	bd10      	pop	{r4, pc}
		Error_Handler();
 8004d90:	f7fc fe4e 	bl	8001a30 <Error_Handler>
 8004d94:	e7fa      	b.n	8004d8c <Stop_OC_TIM+0xa>

08004d96 <isPrime>:
#include "utility.h"

enum Validate isPrime(uint16_t x){
 8004d96:	b570      	push	{r4, r5, r6, lr}
 8004d98:	0005      	movs	r5, r0
    for (uint16_t d = 2; d * d <= x; d++) {
 8004d9a:	0006      	movs	r6, r0
 8004d9c:	2803      	cmp	r0, #3
 8004d9e:	d913      	bls.n	8004dc8 <isPrime+0x32>
        if (x % d == 0)
 8004da0:	07c3      	lsls	r3, r0, #31
 8004da2:	d513      	bpl.n	8004dcc <isPrime+0x36>
    for (uint16_t d = 2; d * d <= x; d++) {
 8004da4:	2402      	movs	r4, #2
 8004da6:	3401      	adds	r4, #1
 8004da8:	b2a4      	uxth	r4, r4
 8004daa:	0023      	movs	r3, r4
 8004dac:	4363      	muls	r3, r4
 8004dae:	42b3      	cmp	r3, r6
 8004db0:	dc08      	bgt.n	8004dc4 <isPrime+0x2e>
        if (x % d == 0)
 8004db2:	0021      	movs	r1, r4
 8004db4:	0028      	movs	r0, r5
 8004db6:	f7fb fa2d 	bl	8000214 <__aeabi_uidivmod>
 8004dba:	b289      	uxth	r1, r1
 8004dbc:	2900      	cmp	r1, #0
 8004dbe:	d1f2      	bne.n	8004da6 <isPrime+0x10>
            return NO;
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	e000      	b.n	8004dc6 <isPrime+0x30>
    }
    return YES;
 8004dc4:	2001      	movs	r0, #1
}
 8004dc6:	bd70      	pop	{r4, r5, r6, pc}
    return YES;
 8004dc8:	2001      	movs	r0, #1
 8004dca:	e7fc      	b.n	8004dc6 <isPrime+0x30>
            return NO;
 8004dcc:	2000      	movs	r0, #0
 8004dce:	e7fa      	b.n	8004dc6 <isPrime+0x30>

08004dd0 <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){

    return dividend & ((1 << base_2_exponent) - 1);
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	408b      	lsls	r3, r1
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	4018      	ands	r0, r3
}
 8004dd8:	4770      	bx	lr

08004dda <Global_Interrupt_Enable>:
  __ASM volatile ("cpsie i" : : : "memory");
 8004dda:	b662      	cpsie	i

uint8_t Global_Interrupt_Enable(void){

	__enable_irq();
	return 1;
}
 8004ddc:	2001      	movs	r0, #1
 8004dde:	4770      	bx	lr

08004de0 <Get_Status_Bit>:
	return 1;
}

enum Validate Get_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){

    if(*bits & bit){
 8004de0:	6800      	ldr	r0, [r0, #0]
 8004de2:	4008      	ands	r0, r1
 8004de4:	1e43      	subs	r3, r0, #1
 8004de6:	4198      	sbcs	r0, r3

    else{

        return (enum Validate) NO;
    }
}
 8004de8:	b2c0      	uxtb	r0, r0
 8004dea:	4770      	bx	lr

08004dec <Set_Status_Bit>:

void Set_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){

	*bits |= bit;
 8004dec:	6803      	ldr	r3, [r0, #0]
 8004dee:	4319      	orrs	r1, r3
 8004df0:	6001      	str	r1, [r0, #0]
}
 8004df2:	4770      	bx	lr

08004df4 <Clear_Status_Bit>:

void Clear_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){

	*bits &= ~bit;
 8004df4:	6803      	ldr	r3, [r0, #0]
 8004df6:	438b      	bics	r3, r1
 8004df8:	6003      	str	r3, [r0, #0]
}
 8004dfa:	4770      	bx	lr

08004dfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004dfc:	480d      	ldr	r0, [pc, #52]	@ (8004e34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004dfe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004e00:	f7ff ffb4 	bl	8004d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8004e04:	480c      	ldr	r0, [pc, #48]	@ (8004e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8004e06:	490d      	ldr	r1, [pc, #52]	@ (8004e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004e08:	4a0d      	ldr	r2, [pc, #52]	@ (8004e40 <LoopForever+0xe>)
  movs r3, #0
 8004e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e0c:	e002      	b.n	8004e14 <LoopCopyDataInit>

08004e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e12:	3304      	adds	r3, #4

08004e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e18:	d3f9      	bcc.n	8004e0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004e1c:	4c0a      	ldr	r4, [pc, #40]	@ (8004e48 <LoopForever+0x16>)
  movs r3, #0
 8004e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e20:	e001      	b.n	8004e26 <LoopFillZerobss>

08004e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e24:	3204      	adds	r2, #4

08004e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e28:	d3fb      	bcc.n	8004e22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004e2a:	f004 faed 	bl	8009408 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004e2e:	f7ff f809 	bl	8003e44 <main>

08004e32 <LoopForever>:

LoopForever:
  b LoopForever
 8004e32:	e7fe      	b.n	8004e32 <LoopForever>
  ldr   r0, =_estack
 8004e34:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e3c:	20000494 	.word	0x20000494
  ldr r2, =_sidata
 8004e40:	0800a110 	.word	0x0800a110
  ldr r2, =_sbss
 8004e44:	20000498 	.word	0x20000498
  ldr r4, =_ebss
 8004e48:	20000d90 	.word	0x20000d90

08004e4c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004e4c:	e7fe      	b.n	8004e4c <ADC1_IRQHandler>
	...

08004e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e50:	b570      	push	{r4, r5, r6, lr}
 8004e52:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004e54:	4b0f      	ldr	r3, [pc, #60]	@ (8004e94 <HAL_InitTick+0x44>)
 8004e56:	7819      	ldrb	r1, [r3, #0]
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8004e58:	2001      	movs	r0, #1
  if ((uint32_t)uwTickFreq != 0U)
 8004e5a:	2900      	cmp	r1, #0
 8004e5c:	d100      	bne.n	8004e60 <HAL_InitTick+0x10>
  }

  /* Return function status */
  return status;
}
 8004e5e:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004e60:	4d0d      	ldr	r5, [pc, #52]	@ (8004e98 <HAL_InitTick+0x48>)
 8004e62:	20fa      	movs	r0, #250	@ 0xfa
 8004e64:	0080      	lsls	r0, r0, #2
 8004e66:	f7fb f94f 	bl	8000108 <__udivsi3>
 8004e6a:	0001      	movs	r1, r0
 8004e6c:	6828      	ldr	r0, [r5, #0]
 8004e6e:	f7fb f94b 	bl	8000108 <__udivsi3>
 8004e72:	f000 fe15 	bl	8005aa0 <HAL_SYSTICK_Config>
 8004e76:	0003      	movs	r3, r0
      status = HAL_ERROR;
 8004e78:	2001      	movs	r0, #1
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1ef      	bne.n	8004e5e <HAL_InitTick+0xe>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e7e:	2c03      	cmp	r4, #3
 8004e80:	d8ed      	bhi.n	8004e5e <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e82:	2200      	movs	r2, #0
 8004e84:	0021      	movs	r1, r4
 8004e86:	4240      	negs	r0, r0
 8004e88:	f000 fdbc 	bl	8005a04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e8c:	4b03      	ldr	r3, [pc, #12]	@ (8004e9c <HAL_InitTick+0x4c>)
 8004e8e:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8004e90:	2000      	movs	r0, #0
 8004e92:	e7e4      	b.n	8004e5e <HAL_InitTick+0xe>
 8004e94:	20000450 	.word	0x20000450
 8004e98:	2000044c 	.word	0x2000044c
 8004e9c:	20000454 	.word	0x20000454

08004ea0 <HAL_Init>:
{
 8004ea0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ea2:	4a08      	ldr	r2, [pc, #32]	@ (8004ec4 <HAL_Init+0x24>)
 8004ea4:	6811      	ldr	r1, [r2, #0]
 8004ea6:	2380      	movs	r3, #128	@ 0x80
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	430b      	orrs	r3, r1
 8004eac:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004eae:	2000      	movs	r0, #0
 8004eb0:	f7ff ffce 	bl	8004e50 <HAL_InitTick>
 8004eb4:	1e04      	subs	r4, r0, #0
 8004eb6:	d002      	beq.n	8004ebe <HAL_Init+0x1e>
    status = HAL_ERROR;
 8004eb8:	2401      	movs	r4, #1
}
 8004eba:	0020      	movs	r0, r4
 8004ebc:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8004ebe:	f7ff faf3 	bl	80044a8 <HAL_MspInit>
 8004ec2:	e7fa      	b.n	8004eba <HAL_Init+0x1a>
 8004ec4:	40022000 	.word	0x40022000

08004ec8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8004ec8:	4a03      	ldr	r2, [pc, #12]	@ (8004ed8 <HAL_IncTick+0x10>)
 8004eca:	6811      	ldr	r1, [r2, #0]
 8004ecc:	4b03      	ldr	r3, [pc, #12]	@ (8004edc <HAL_IncTick+0x14>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	185b      	adds	r3, r3, r1
 8004ed2:	6013      	str	r3, [r2, #0]
}
 8004ed4:	4770      	bx	lr
 8004ed6:	46c0      	nop			@ (mov r8, r8)
 8004ed8:	20000d70 	.word	0x20000d70
 8004edc:	20000450 	.word	0x20000450

08004ee0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004ee0:	4b01      	ldr	r3, [pc, #4]	@ (8004ee8 <HAL_GetTick+0x8>)
 8004ee2:	6818      	ldr	r0, [r3, #0]
}
 8004ee4:	4770      	bx	lr
 8004ee6:	46c0      	nop			@ (mov r8, r8)
 8004ee8:	20000d70 	.word	0x20000d70

08004eec <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004eec:	4770      	bx	lr

08004eee <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004eee:	4770      	bx	lr

08004ef0 <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004ef0:	4770      	bx	lr

08004ef2 <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004ef2:	4770      	bx	lr

08004ef4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ef4:	b510      	push	{r4, lr}
 8004ef6:	0003      	movs	r3, r0
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ef8:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004efa:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8004efc:	2150      	movs	r1, #80	@ 0x50
 8004efe:	4211      	tst	r1, r2
 8004f00:	d12a      	bne.n	8004f58 <ADC_DMAConvCplt+0x64>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f02:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8004f04:	2380      	movs	r3, #128	@ 0x80
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	6583      	str	r3, [r0, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f0c:	6803      	ldr	r3, [r0, #0]
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004f0e:	68d9      	ldr	r1, [r3, #12]
 8004f10:	22c0      	movs	r2, #192	@ 0xc0
 8004f12:	0112      	lsls	r2, r2, #4
 8004f14:	4211      	tst	r1, r2
 8004f16:	d113      	bne.n	8004f40 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004f18:	7e82      	ldrb	r2, [r0, #26]
 8004f1a:	2a00      	cmp	r2, #0
 8004f1c:	d110      	bne.n	8004f40 <ADC_DMAConvCplt+0x4c>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	0712      	lsls	r2, r2, #28
 8004f22:	d50d      	bpl.n	8004f40 <ADC_DMAConvCplt+0x4c>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	0752      	lsls	r2, r2, #29
 8004f28:	d40d      	bmi.n	8004f46 <ADC_DMAConvCplt+0x52>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	210c      	movs	r1, #12
 8004f2e:	438a      	bics	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004f32:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8004f34:	4a0e      	ldr	r2, [pc, #56]	@ (8004f70 <ADC_DMAConvCplt+0x7c>)
 8004f36:	4013      	ands	r3, r2
 8004f38:	3204      	adds	r2, #4
 8004f3a:	32ff      	adds	r2, #255	@ 0xff
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	6583      	str	r3, [r0, #88]	@ 0x58
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8004f40:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8004f42:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004f44:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f46:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8004f48:	2220      	movs	r2, #32
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f4e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8004f50:	3a1f      	subs	r2, #31
 8004f52:	4313      	orrs	r3, r2
 8004f54:	65c3      	str	r3, [r0, #92]	@ 0x5c
 8004f56:	e7f3      	b.n	8004f40 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004f58:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8004f5a:	06d2      	lsls	r2, r2, #27
 8004f5c:	d502      	bpl.n	8004f64 <ADC_DMAConvCplt+0x70>
      hadc->ErrorCallback(hadc);
 8004f5e:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8004f60:	4798      	blx	r3
 8004f62:	e7ef      	b.n	8004f44 <ADC_DMAConvCplt+0x50>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f64:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8004f66:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f68:	0018      	movs	r0, r3
 8004f6a:	4790      	blx	r2
}
 8004f6c:	e7ea      	b.n	8004f44 <ADC_DMAConvCplt+0x50>
 8004f6e:	46c0      	nop			@ (mov r8, r8)
 8004f70:	fffffefe 	.word	0xfffffefe

08004f74 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f74:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f76:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8004f78:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8004f7a:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f7c:	bd10      	pop	{r4, pc}

08004f7e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f7e:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f80:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004f82:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8004f84:	2240      	movs	r2, #64	@ 0x40
 8004f86:	4313      	orrs	r3, r2
 8004f88:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004f8a:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8004f8c:	3a3c      	subs	r2, #60	@ 0x3c
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8004f92:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8004f94:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f96:	bd10      	pop	{r4, pc}

08004f98 <HAL_ADC_Init>:
{
 8004f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	d100      	bne.n	8004fa8 <HAL_ADC_Init+0x10>
 8004fa6:	e116      	b.n	80051d6 <HAL_ADC_Init+0x23e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004fa8:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d11a      	bne.n	8004fe4 <HAL_ADC_Init+0x4c>
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8004fae:	4b8b      	ldr	r3, [pc, #556]	@ (80051dc <HAL_ADC_Init+0x244>)
 8004fb0:	6643      	str	r3, [r0, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8004fb2:	4b8b      	ldr	r3, [pc, #556]	@ (80051e0 <HAL_ADC_Init+0x248>)
 8004fb4:	6683      	str	r3, [r0, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8004fb6:	4b8b      	ldr	r3, [pc, #556]	@ (80051e4 <HAL_ADC_Init+0x24c>)
 8004fb8:	66c3      	str	r3, [r0, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8004fba:	4b8b      	ldr	r3, [pc, #556]	@ (80051e8 <HAL_ADC_Init+0x250>)
 8004fbc:	6703      	str	r3, [r0, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8004fbe:	4b8b      	ldr	r3, [pc, #556]	@ (80051ec <HAL_ADC_Init+0x254>)
 8004fc0:	6743      	str	r3, [r0, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8004fc2:	4b8b      	ldr	r3, [pc, #556]	@ (80051f0 <HAL_ADC_Init+0x258>)
 8004fc4:	6783      	str	r3, [r0, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8004fc6:	4b8b      	ldr	r3, [pc, #556]	@ (80051f4 <HAL_ADC_Init+0x25c>)
 8004fc8:	67c3      	str	r3, [r0, #124]	@ 0x7c
    if (hadc->MspInitCallback == NULL)
 8004fca:	2380      	movs	r3, #128	@ 0x80
 8004fcc:	58c3      	ldr	r3, [r0, r3]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d100      	bne.n	8004fd4 <HAL_ADC_Init+0x3c>
 8004fd2:	e0be      	b.n	8005152 <HAL_ADC_Init+0x1ba>
    hadc->MspInitCallback(hadc);
 8004fd4:	2380      	movs	r3, #128	@ 0x80
 8004fd6:	58e3      	ldr	r3, [r4, r3]
 8004fd8:	0020      	movs	r0, r4
 8004fda:	4798      	blx	r3
    ADC_CLEAR_ERRORCODE(hadc);
 8004fdc:	2300      	movs	r3, #0
 8004fde:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8004fe0:	2254      	movs	r2, #84	@ 0x54
 8004fe2:	54a3      	strb	r3, [r4, r2]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004fe4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	00d2      	lsls	r2, r2, #3
 8004fea:	d417      	bmi.n	800501c <HAL_ADC_Init+0x84>
  MODIFY_REG(ADCx->CR,
 8004fec:	6899      	ldr	r1, [r3, #8]
 8004fee:	4a82      	ldr	r2, [pc, #520]	@ (80051f8 <HAL_ADC_Init+0x260>)
 8004ff0:	4011      	ands	r1, r2
 8004ff2:	2280      	movs	r2, #128	@ 0x80
 8004ff4:	0552      	lsls	r2, r2, #21
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	609a      	str	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ffa:	4b80      	ldr	r3, [pc, #512]	@ (80051fc <HAL_ADC_Init+0x264>)
 8004ffc:	6818      	ldr	r0, [r3, #0]
 8004ffe:	4980      	ldr	r1, [pc, #512]	@ (8005200 <HAL_ADC_Init+0x268>)
 8005000:	f7fb f882 	bl	8000108 <__udivsi3>
 8005004:	3001      	adds	r0, #1
 8005006:	0040      	lsls	r0, r0, #1
 8005008:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 800500a:	9b01      	ldr	r3, [sp, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <HAL_ADC_Init+0x84>
      wait_loop_index--;
 8005010:	9b01      	ldr	r3, [sp, #4]
 8005012:	3b01      	subs	r3, #1
 8005014:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005016:	9b01      	ldr	r3, [sp, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1f9      	bne.n	8005010 <HAL_ADC_Init+0x78>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800501c:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800501e:	688b      	ldr	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005020:	2000      	movs	r0, #0
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	d408      	bmi.n	8005038 <HAL_ADC_Init+0xa0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005026:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005028:	2210      	movs	r2, #16
 800502a:	4313      	orrs	r3, r2
 800502c:	65a3      	str	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800502e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005030:	3a0f      	subs	r2, #15
 8005032:	4313      	orrs	r3, r2
 8005034:	65e3      	str	r3, [r4, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
 8005036:	3001      	adds	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005038:	688d      	ldr	r5, [r1, #8]
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800503a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800503c:	2310      	movs	r3, #16
 800503e:	4013      	ands	r3, r2
 8005040:	2204      	movs	r2, #4
 8005042:	402a      	ands	r2, r5
 8005044:	4313      	orrs	r3, r2
 8005046:	d000      	beq.n	800504a <HAL_ADC_Init+0xb2>
 8005048:	e0be      	b.n	80051c8 <HAL_ADC_Init+0x230>
    ADC_STATE_CLR_SET(hadc->State,
 800504a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800504c:	4a6d      	ldr	r2, [pc, #436]	@ (8005204 <HAL_ADC_Init+0x26c>)
 800504e:	4013      	ands	r3, r2
 8005050:	3206      	adds	r2, #6
 8005052:	32ff      	adds	r2, #255	@ 0xff
 8005054:	4313      	orrs	r3, r2
 8005056:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005058:	688b      	ldr	r3, [r1, #8]
 800505a:	07db      	lsls	r3, r3, #31
 800505c:	d44f      	bmi.n	80050fe <HAL_ADC_Init+0x166>
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800505e:	7ea5      	ldrb	r5, [r4, #26]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005060:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8005062:	1e73      	subs	r3, r6, #1
 8005064:	419e      	sbcs	r6, r3
 8005066:	0336      	lsls	r6, r6, #12
 8005068:	68a2      	ldr	r2, [r4, #8]
 800506a:	68e3      	ldr	r3, [r4, #12]
 800506c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800506e:	7e23      	ldrb	r3, [r4, #24]
 8005070:	039b      	lsls	r3, r3, #14
 8005072:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005074:	7e63      	ldrb	r3, [r4, #25]
 8005076:	03db      	lsls	r3, r3, #15
 8005078:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800507a:	036b      	lsls	r3, r5, #13
 800507c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800507e:	6923      	ldr	r3, [r4, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	db6a      	blt.n	800515a <HAL_ADC_Init+0x1c2>
 8005084:	2780      	movs	r7, #128	@ 0x80
 8005086:	03bf      	lsls	r7, r7, #14
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005088:	232c      	movs	r3, #44	@ 0x2c
 800508a:	5ce3      	ldrb	r3, [r4, r3]
 800508c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800508e:	4313      	orrs	r3, r2
 8005090:	4333      	orrs	r3, r6
 8005092:	433b      	orrs	r3, r7
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005094:	2220      	movs	r2, #32
 8005096:	5ca2      	ldrb	r2, [r4, r2]
 8005098:	2a01      	cmp	r2, #1
 800509a:	d061      	beq.n	8005160 <HAL_ADC_Init+0x1c8>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800509c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800509e:	2a00      	cmp	r2, #0
 80050a0:	d005      	beq.n	80050ae <HAL_ADC_Init+0x116>
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80050a2:	25e0      	movs	r5, #224	@ 0xe0
 80050a4:	006d      	lsls	r5, r5, #1
 80050a6:	402a      	ands	r2, r5
 80050a8:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80050aa:	432a      	orrs	r2, r5
 80050ac:	4313      	orrs	r3, r2
      MODIFY_REG(hadc->Instance->CFGR1,
 80050ae:	68ca      	ldr	r2, [r1, #12]
 80050b0:	4d55      	ldr	r5, [pc, #340]	@ (8005208 <HAL_ADC_Init+0x270>)
 80050b2:	402a      	ands	r2, r5
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60cb      	str	r3, [r1, #12]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80050b8:	6863      	ldr	r3, [r4, #4]
 80050ba:	0f9b      	lsrs	r3, r3, #30
 80050bc:	079b      	lsls	r3, r3, #30
 80050be:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 80050c0:	431a      	orrs	r2, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 80050c2:	213c      	movs	r1, #60	@ 0x3c
 80050c4:	5c61      	ldrb	r1, [r4, r1]
 80050c6:	2901      	cmp	r1, #1
 80050c8:	d059      	beq.n	800517e <HAL_ADC_Init+0x1e6>
      MODIFY_REG(hadc->Instance->CFGR2,
 80050ca:	6821      	ldr	r1, [r4, #0]
 80050cc:	690b      	ldr	r3, [r1, #16]
 80050ce:	4d4f      	ldr	r5, [pc, #316]	@ (800520c <HAL_ADC_Init+0x274>)
 80050d0:	402b      	ands	r3, r5
 80050d2:	4313      	orrs	r3, r2
 80050d4:	610b      	str	r3, [r1, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80050d6:	6862      	ldr	r2, [r4, #4]
 80050d8:	0053      	lsls	r3, r2, #1
 80050da:	085b      	lsrs	r3, r3, #1
 80050dc:	2180      	movs	r1, #128	@ 0x80
 80050de:	05c9      	lsls	r1, r1, #23
 80050e0:	428b      	cmp	r3, r1
 80050e2:	d00c      	beq.n	80050fe <HAL_ADC_Init+0x166>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80050e4:	2380      	movs	r3, #128	@ 0x80
 80050e6:	061b      	lsls	r3, r3, #24
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d008      	beq.n	80050fe <HAL_ADC_Init+0x166>
        MODIFY_REG(ADC1_COMMON->CCR,
 80050ec:	4948      	ldr	r1, [pc, #288]	@ (8005210 <HAL_ADC_Init+0x278>)
 80050ee:	680b      	ldr	r3, [r1, #0]
 80050f0:	4d48      	ldr	r5, [pc, #288]	@ (8005214 <HAL_ADC_Init+0x27c>)
 80050f2:	402b      	ands	r3, r5
 80050f4:	25f0      	movs	r5, #240	@ 0xf0
 80050f6:	03ad      	lsls	r5, r5, #14
 80050f8:	402a      	ands	r2, r5
 80050fa:	4313      	orrs	r3, r2
 80050fc:	600b      	str	r3, [r1, #0]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80050fe:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8005100:	6953      	ldr	r3, [r2, #20]
 8005102:	2107      	movs	r1, #7
 8005104:	438b      	bics	r3, r1
 8005106:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005108:	430b      	orrs	r3, r1
 800510a:	6153      	str	r3, [r2, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800510c:	6821      	ldr	r1, [r4, #0]
 800510e:	694a      	ldr	r2, [r1, #20]
 8005110:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	2570      	movs	r5, #112	@ 0x70
 8005116:	43aa      	bics	r2, r5
 8005118:	4313      	orrs	r3, r2
 800511a:	614b      	str	r3, [r1, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800511c:	6923      	ldr	r3, [r4, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d137      	bne.n	8005192 <HAL_ADC_Init+0x1fa>
      SET_BIT(hadc->Instance->CHSELR,
 8005122:	6822      	ldr	r2, [r4, #0]
 8005124:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005126:	3b10      	subs	r3, #16
 8005128:	430b      	orrs	r3, r1
 800512a:	6293      	str	r3, [r2, #40]	@ 0x28
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800512c:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800512e:	695a      	ldr	r2, [r3, #20]
 8005130:	2307      	movs	r3, #7
 8005132:	4013      	ands	r3, r2
 8005134:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005136:	429a      	cmp	r2, r3
 8005138:	d03d      	beq.n	80051b6 <HAL_ADC_Init+0x21e>
      ADC_STATE_CLR_SET(hadc->State,
 800513a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800513c:	2212      	movs	r2, #18
 800513e:	4393      	bics	r3, r2
 8005140:	3a02      	subs	r2, #2
 8005142:	4313      	orrs	r3, r2
 8005144:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005146:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005148:	3a0f      	subs	r2, #15
 800514a:	4313      	orrs	r3, r2
 800514c:	65e3      	str	r3, [r4, #92]	@ 0x5c
      tmp_hal_status = HAL_ERROR;
 800514e:	2001      	movs	r0, #1
 8005150:	e03f      	b.n	80051d2 <HAL_ADC_Init+0x23a>
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8005152:	4b31      	ldr	r3, [pc, #196]	@ (8005218 <HAL_ADC_Init+0x280>)
 8005154:	2280      	movs	r2, #128	@ 0x80
 8005156:	5083      	str	r3, [r0, r2]
 8005158:	e73c      	b.n	8004fd4 <HAL_ADC_Init+0x3c>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	085f      	lsrs	r7, r3, #1
 800515e:	e793      	b.n	8005088 <HAL_ADC_Init+0xf0>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005160:	2d00      	cmp	r5, #0
 8005162:	d103      	bne.n	800516c <HAL_ADC_Init+0x1d4>
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8005164:	2280      	movs	r2, #128	@ 0x80
 8005166:	0252      	lsls	r2, r2, #9
 8005168:	4313      	orrs	r3, r2
 800516a:	e797      	b.n	800509c <HAL_ADC_Init+0x104>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800516c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800516e:	2520      	movs	r5, #32
 8005170:	432a      	orrs	r2, r5
 8005172:	65a2      	str	r2, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005174:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8005176:	3d1f      	subs	r5, #31
 8005178:	432a      	orrs	r2, r5
 800517a:	65e2      	str	r2, [r4, #92]	@ 0x5c
 800517c:	e78e      	b.n	800509c <HAL_ADC_Init+0x104>
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800517e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8005180:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 8005182:	4329      	orrs	r1, r5
 8005184:	430a      	orrs	r2, r1
 8005186:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005188:	430a      	orrs	r2, r1
 800518a:	4313      	orrs	r3, r2
 800518c:	2201      	movs	r2, #1
 800518e:	431a      	orrs	r2, r3
 8005190:	e79b      	b.n	80050ca <HAL_ADC_Init+0x132>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005192:	2280      	movs	r2, #128	@ 0x80
 8005194:	0392      	lsls	r2, r2, #14
 8005196:	4293      	cmp	r3, r2
 8005198:	d1c8      	bne.n	800512c <HAL_ADC_Init+0x194>
      MODIFY_REG(hadc->Instance->CHSELR,
 800519a:	6821      	ldr	r1, [r4, #0]
 800519c:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800519e:	69e3      	ldr	r3, [r4, #28]
 80051a0:	3b01      	subs	r3, #1
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	221c      	movs	r2, #28
 80051a6:	401a      	ands	r2, r3
 80051a8:	2310      	movs	r3, #16
 80051aa:	425b      	negs	r3, r3
 80051ac:	4093      	lsls	r3, r2
 80051ae:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80051b0:	4313      	orrs	r3, r2
 80051b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80051b4:	e7ba      	b.n	800512c <HAL_ADC_Init+0x194>
      ADC_CLEAR_ERRORCODE(hadc);
 80051b6:	2300      	movs	r3, #0
 80051b8:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80051ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051bc:	2203      	movs	r2, #3
 80051be:	4393      	bics	r3, r2
 80051c0:	3a02      	subs	r2, #2
 80051c2:	4313      	orrs	r3, r2
 80051c4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80051c6:	e004      	b.n	80051d2 <HAL_ADC_Init+0x23a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051ca:	2210      	movs	r2, #16
 80051cc:	4313      	orrs	r3, r2
 80051ce:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 80051d0:	2001      	movs	r0, #1
}
 80051d2:	b003      	add	sp, #12
 80051d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80051d6:	2001      	movs	r0, #1
 80051d8:	e7fb      	b.n	80051d2 <HAL_ADC_Init+0x23a>
 80051da:	46c0      	nop			@ (mov r8, r8)
 80051dc:	08004eed 	.word	0x08004eed
 80051e0:	08004eef 	.word	0x08004eef
 80051e4:	08004ef1 	.word	0x08004ef1
 80051e8:	08004ef3 	.word	0x08004ef3
 80051ec:	080059fd 	.word	0x080059fd
 80051f0:	080059ff 	.word	0x080059ff
 80051f4:	08005a01 	.word	0x08005a01
 80051f8:	6fffffe8 	.word	0x6fffffe8
 80051fc:	2000044c 	.word	0x2000044c
 8005200:	00030d40 	.word	0x00030d40
 8005204:	fffffefd 	.word	0xfffffefd
 8005208:	ffde0201 	.word	0xffde0201
 800520c:	1ffffc02 	.word	0x1ffffc02
 8005210:	40012708 	.word	0x40012708
 8005214:	ffc3ffff 	.word	0xffc3ffff
 8005218:	080044d9 	.word	0x080044d9

0800521c <HAL_ADC_RegisterCallback>:
{
 800521c:	b510      	push	{r4, lr}
  if (pCallback == NULL)
 800521e:	2a00      	cmp	r2, #0
 8005220:	d008      	beq.n	8005234 <HAL_ADC_RegisterCallback+0x18>
  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 8005222:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8005224:	07db      	lsls	r3, r3, #31
 8005226:	d52e      	bpl.n	8005286 <HAL_ADC_RegisterCallback+0x6a>
    switch (CallbackID)
 8005228:	290a      	cmp	r1, #10
 800522a:	d826      	bhi.n	800527a <HAL_ADC_RegisterCallback+0x5e>
 800522c:	008b      	lsls	r3, r1, #2
 800522e:	4c23      	ldr	r4, [pc, #140]	@ (80052bc <HAL_ADC_RegisterCallback+0xa0>)
 8005230:	58e3      	ldr	r3, [r4, r3]
 8005232:	469f      	mov	pc, r3
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8005234:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8005236:	3210      	adds	r2, #16
 8005238:	4313      	orrs	r3, r2
 800523a:	65c3      	str	r3, [r0, #92]	@ 0x5c
    return HAL_ERROR;
 800523c:	2001      	movs	r0, #1
 800523e:	e03c      	b.n	80052ba <HAL_ADC_RegisterCallback+0x9e>
        hadc->ConvCpltCallback = pCallback;
 8005240:	6642      	str	r2, [r0, #100]	@ 0x64
  HAL_StatusTypeDef status = HAL_OK;
 8005242:	0008      	movs	r0, r1
        break;
 8005244:	e039      	b.n	80052ba <HAL_ADC_RegisterCallback+0x9e>
        hadc->ConvHalfCpltCallback = pCallback;
 8005246:	6682      	str	r2, [r0, #104]	@ 0x68
  HAL_StatusTypeDef status = HAL_OK;
 8005248:	2000      	movs	r0, #0
        break;
 800524a:	e036      	b.n	80052ba <HAL_ADC_RegisterCallback+0x9e>
        hadc->LevelOutOfWindowCallback = pCallback;
 800524c:	66c2      	str	r2, [r0, #108]	@ 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 800524e:	2000      	movs	r0, #0
        break;
 8005250:	e033      	b.n	80052ba <HAL_ADC_RegisterCallback+0x9e>
        hadc->ErrorCallback = pCallback;
 8005252:	6702      	str	r2, [r0, #112]	@ 0x70
  HAL_StatusTypeDef status = HAL_OK;
 8005254:	2000      	movs	r0, #0
        break;
 8005256:	e030      	b.n	80052ba <HAL_ADC_RegisterCallback+0x9e>
        hadc->LevelOutOfWindow2Callback = pCallback;
 8005258:	6742      	str	r2, [r0, #116]	@ 0x74
  HAL_StatusTypeDef status = HAL_OK;
 800525a:	2000      	movs	r0, #0
        break;
 800525c:	e02d      	b.n	80052ba <HAL_ADC_RegisterCallback+0x9e>
        hadc->LevelOutOfWindow3Callback = pCallback;
 800525e:	6782      	str	r2, [r0, #120]	@ 0x78
  HAL_StatusTypeDef status = HAL_OK;
 8005260:	2000      	movs	r0, #0
        break;
 8005262:	e02a      	b.n	80052ba <HAL_ADC_RegisterCallback+0x9e>
        hadc->EndOfSamplingCallback = pCallback;
 8005264:	67c2      	str	r2, [r0, #124]	@ 0x7c
  HAL_StatusTypeDef status = HAL_OK;
 8005266:	2000      	movs	r0, #0
        break;
 8005268:	e027      	b.n	80052ba <HAL_ADC_RegisterCallback+0x9e>
        hadc->MspInitCallback = pCallback;
 800526a:	2380      	movs	r3, #128	@ 0x80
 800526c:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 800526e:	2000      	movs	r0, #0
        break;
 8005270:	e023      	b.n	80052ba <HAL_ADC_RegisterCallback+0x9e>
        hadc->MspDeInitCallback = pCallback;
 8005272:	2384      	movs	r3, #132	@ 0x84
 8005274:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8005276:	2000      	movs	r0, #0
        break;
 8005278:	e01f      	b.n	80052ba <HAL_ADC_RegisterCallback+0x9e>
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 800527a:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800527c:	2210      	movs	r2, #16
 800527e:	4313      	orrs	r3, r2
 8005280:	65c3      	str	r3, [r0, #92]	@ 0x5c
        status = HAL_ERROR;
 8005282:	2001      	movs	r0, #1
        break;
 8005284:	e019      	b.n	80052ba <HAL_ADC_RegisterCallback+0x9e>
  else if (HAL_ADC_STATE_RESET == hadc->State)
 8005286:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8005288:	2b00      	cmp	r3, #0
 800528a:	d111      	bne.n	80052b0 <HAL_ADC_RegisterCallback+0x94>
    switch (CallbackID)
 800528c:	2909      	cmp	r1, #9
 800528e:	d007      	beq.n	80052a0 <HAL_ADC_RegisterCallback+0x84>
 8005290:	290a      	cmp	r1, #10
 8005292:	d009      	beq.n	80052a8 <HAL_ADC_RegisterCallback+0x8c>
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8005294:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8005296:	2210      	movs	r2, #16
 8005298:	4313      	orrs	r3, r2
 800529a:	65c3      	str	r3, [r0, #92]	@ 0x5c
        status = HAL_ERROR;
 800529c:	2001      	movs	r0, #1
        break;
 800529e:	e00c      	b.n	80052ba <HAL_ADC_RegisterCallback+0x9e>
        hadc->MspInitCallback = pCallback;
 80052a0:	2380      	movs	r3, #128	@ 0x80
 80052a2:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 80052a4:	2000      	movs	r0, #0
        break;
 80052a6:	e008      	b.n	80052ba <HAL_ADC_RegisterCallback+0x9e>
        hadc->MspDeInitCallback = pCallback;
 80052a8:	2384      	movs	r3, #132	@ 0x84
 80052aa:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 80052ac:	2000      	movs	r0, #0
        break;
 80052ae:	e004      	b.n	80052ba <HAL_ADC_RegisterCallback+0x9e>
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80052b0:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80052b2:	2210      	movs	r2, #16
 80052b4:	4313      	orrs	r3, r2
 80052b6:	65c3      	str	r3, [r0, #92]	@ 0x5c
    status =  HAL_ERROR;
 80052b8:	2001      	movs	r0, #1
}
 80052ba:	bd10      	pop	{r4, pc}
 80052bc:	08009d38 	.word	0x08009d38

080052c0 <HAL_ADC_ConfigChannel>:
{
 80052c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052c2:	b083      	sub	sp, #12
 80052c4:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80052ca:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 80052cc:	3354      	adds	r3, #84	@ 0x54
 80052ce:	5cc3      	ldrb	r3, [r0, r3]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d100      	bne.n	80052d6 <HAL_ADC_ConfigChannel+0x16>
 80052d4:	e11e      	b.n	8005514 <HAL_ADC_ConfigChannel+0x254>
 80052d6:	2354      	movs	r3, #84	@ 0x54
 80052d8:	2201      	movs	r2, #1
 80052da:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052dc:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80052de:	6883      	ldr	r3, [r0, #8]
 80052e0:	3203      	adds	r2, #3
 80052e2:	0017      	movs	r7, r2
 80052e4:	401f      	ands	r7, r3
 80052e6:	421a      	tst	r2, r3
 80052e8:	d009      	beq.n	80052fe <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80052ec:	321c      	adds	r2, #28
 80052ee:	4313      	orrs	r3, r2
 80052f0:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 80052f2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80052f4:	2354      	movs	r3, #84	@ 0x54
 80052f6:	2200      	movs	r2, #0
 80052f8:	54e2      	strb	r2, [r4, r3]
}
 80052fa:	b003      	add	sp, #12
 80052fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 80052fe:	684a      	ldr	r2, [r1, #4]
 8005300:	2a02      	cmp	r2, #2
 8005302:	d100      	bne.n	8005306 <HAL_ADC_ConfigChannel+0x46>
 8005304:	e0c4      	b.n	8005490 <HAL_ADC_ConfigChannel+0x1d0>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005306:	2304      	movs	r3, #4
 8005308:	439d      	bics	r5, r3
 800530a:	2680      	movs	r6, #128	@ 0x80
 800530c:	0636      	lsls	r6, r6, #24
 800530e:	42b5      	cmp	r5, r6
 8005310:	d021      	beq.n	8005356 <HAL_ADC_ConfigChannel+0x96>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005312:	231f      	movs	r3, #31
 8005314:	401a      	ands	r2, r3
 8005316:	3b10      	subs	r3, #16
 8005318:	4093      	lsls	r3, r2
 800531a:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 800531c:	439e      	bics	r6, r3
 800531e:	680b      	ldr	r3, [r1, #0]
 8005320:	035d      	lsls	r5, r3, #13
 8005322:	d148      	bne.n	80053b6 <HAL_ADC_ConfigChannel+0xf6>
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	0edf      	lsrs	r7, r3, #27
 8005328:	003b      	movs	r3, r7
 800532a:	4093      	lsls	r3, r2
 800532c:	4333      	orrs	r3, r6
 800532e:	6623      	str	r3, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005330:	684a      	ldr	r2, [r1, #4]
 8005332:	0893      	lsrs	r3, r2, #2
 8005334:	3301      	adds	r3, #1
 8005336:	69e5      	ldr	r5, [r4, #28]
 8005338:	42ab      	cmp	r3, r5
 800533a:	d812      	bhi.n	8005362 <HAL_ADC_ConfigChannel+0xa2>
  MODIFY_REG(ADCx->CHSELR,
 800533c:	6a86      	ldr	r6, [r0, #40]	@ 0x28
 800533e:	251f      	movs	r5, #31
 8005340:	4015      	ands	r5, r2
 8005342:	680b      	ldr	r3, [r1, #0]
 8005344:	0e9b      	lsrs	r3, r3, #26
 8005346:	220f      	movs	r2, #15
 8005348:	4013      	ands	r3, r2
 800534a:	40ab      	lsls	r3, r5
 800534c:	40aa      	lsls	r2, r5
 800534e:	4396      	bics	r6, r2
 8005350:	4333      	orrs	r3, r6
 8005352:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8005354:	e005      	b.n	8005362 <HAL_ADC_ConfigChannel+0xa2>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005356:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8005358:	680b      	ldr	r3, [r1, #0]
 800535a:	035b      	lsls	r3, r3, #13
 800535c:	0b5b      	lsrs	r3, r3, #13
 800535e:	4313      	orrs	r3, r2
 8005360:	6283      	str	r3, [r0, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005362:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8005364:	6968      	ldr	r0, [r5, #20]
 8005366:	680a      	ldr	r2, [r1, #0]
 8005368:	0212      	lsls	r2, r2, #8
 800536a:	688b      	ldr	r3, [r1, #8]
 800536c:	4013      	ands	r3, r2
 800536e:	4e6a      	ldr	r6, [pc, #424]	@ (8005518 <HAL_ADC_ConfigChannel+0x258>)
 8005370:	4033      	ands	r3, r6
 8005372:	4390      	bics	r0, r2
 8005374:	4303      	orrs	r3, r0
 8005376:	616b      	str	r3, [r5, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005378:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800537a:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800537c:	2b00      	cmp	r3, #0
 800537e:	dab9      	bge.n	80052f4 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005380:	4a66      	ldr	r2, [pc, #408]	@ (800551c <HAL_ADC_ConfigChannel+0x25c>)
 8005382:	6812      	ldr	r2, [r2, #0]
 8005384:	25e0      	movs	r5, #224	@ 0xe0
 8005386:	046d      	lsls	r5, r5, #17
 8005388:	4015      	ands	r5, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800538a:	4965      	ldr	r1, [pc, #404]	@ (8005520 <HAL_ADC_ConfigChannel+0x260>)
 800538c:	428b      	cmp	r3, r1
 800538e:	d050      	beq.n	8005432 <HAL_ADC_ConfigChannel+0x172>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005390:	4864      	ldr	r0, [pc, #400]	@ (8005524 <HAL_ADC_ConfigChannel+0x264>)
 8005392:	4283      	cmp	r3, r0
 8005394:	d06e      	beq.n	8005474 <HAL_ADC_ConfigChannel+0x1b4>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005396:	4964      	ldr	r1, [pc, #400]	@ (8005528 <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005398:	2000      	movs	r0, #0
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800539a:	428b      	cmp	r3, r1
 800539c:	d1aa      	bne.n	80052f4 <HAL_ADC_ConfigChannel+0x34>
 800539e:	0252      	lsls	r2, r2, #9
 80053a0:	d4a8      	bmi.n	80052f4 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80053a2:	495e      	ldr	r1, [pc, #376]	@ (800551c <HAL_ADC_ConfigChannel+0x25c>)
 80053a4:	680b      	ldr	r3, [r1, #0]
 80053a6:	4a61      	ldr	r2, [pc, #388]	@ (800552c <HAL_ADC_ConfigChannel+0x26c>)
 80053a8:	4013      	ands	r3, r2
 80053aa:	432b      	orrs	r3, r5
 80053ac:	2280      	movs	r2, #128	@ 0x80
 80053ae:	03d2      	lsls	r2, r2, #15
 80053b0:	4313      	orrs	r3, r2
 80053b2:	600b      	str	r3, [r1, #0]
}
 80053b4:	e79e      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80053b6:	07dd      	lsls	r5, r3, #31
 80053b8:	d4b6      	bmi.n	8005328 <HAL_ADC_ConfigChannel+0x68>
 80053ba:	2701      	movs	r7, #1
 80053bc:	079d      	lsls	r5, r3, #30
 80053be:	d4b3      	bmi.n	8005328 <HAL_ADC_ConfigChannel+0x68>
 80053c0:	3701      	adds	r7, #1
 80053c2:	075d      	lsls	r5, r3, #29
 80053c4:	d4b0      	bmi.n	8005328 <HAL_ADC_ConfigChannel+0x68>
 80053c6:	3701      	adds	r7, #1
 80053c8:	071d      	lsls	r5, r3, #28
 80053ca:	d4ad      	bmi.n	8005328 <HAL_ADC_ConfigChannel+0x68>
 80053cc:	3701      	adds	r7, #1
 80053ce:	06dd      	lsls	r5, r3, #27
 80053d0:	d4aa      	bmi.n	8005328 <HAL_ADC_ConfigChannel+0x68>
 80053d2:	3701      	adds	r7, #1
 80053d4:	069d      	lsls	r5, r3, #26
 80053d6:	d4a7      	bmi.n	8005328 <HAL_ADC_ConfigChannel+0x68>
 80053d8:	3701      	adds	r7, #1
 80053da:	065d      	lsls	r5, r3, #25
 80053dc:	d4a4      	bmi.n	8005328 <HAL_ADC_ConfigChannel+0x68>
 80053de:	3701      	adds	r7, #1
 80053e0:	061d      	lsls	r5, r3, #24
 80053e2:	d4a1      	bmi.n	8005328 <HAL_ADC_ConfigChannel+0x68>
 80053e4:	3701      	adds	r7, #1
 80053e6:	05dd      	lsls	r5, r3, #23
 80053e8:	d49e      	bmi.n	8005328 <HAL_ADC_ConfigChannel+0x68>
 80053ea:	3701      	adds	r7, #1
 80053ec:	059d      	lsls	r5, r3, #22
 80053ee:	d49b      	bmi.n	8005328 <HAL_ADC_ConfigChannel+0x68>
 80053f0:	3701      	adds	r7, #1
 80053f2:	055d      	lsls	r5, r3, #21
 80053f4:	d498      	bmi.n	8005328 <HAL_ADC_ConfigChannel+0x68>
 80053f6:	3701      	adds	r7, #1
 80053f8:	051d      	lsls	r5, r3, #20
 80053fa:	d495      	bmi.n	8005328 <HAL_ADC_ConfigChannel+0x68>
 80053fc:	3701      	adds	r7, #1
 80053fe:	04dd      	lsls	r5, r3, #19
 8005400:	d492      	bmi.n	8005328 <HAL_ADC_ConfigChannel+0x68>
 8005402:	3701      	adds	r7, #1
 8005404:	049d      	lsls	r5, r3, #18
 8005406:	d48f      	bmi.n	8005328 <HAL_ADC_ConfigChannel+0x68>
 8005408:	3701      	adds	r7, #1
 800540a:	045d      	lsls	r5, r3, #17
 800540c:	d48c      	bmi.n	8005328 <HAL_ADC_ConfigChannel+0x68>
 800540e:	3701      	adds	r7, #1
 8005410:	041d      	lsls	r5, r3, #16
 8005412:	d489      	bmi.n	8005328 <HAL_ADC_ConfigChannel+0x68>
 8005414:	3701      	adds	r7, #1
 8005416:	03dd      	lsls	r5, r3, #15
 8005418:	d486      	bmi.n	8005328 <HAL_ADC_ConfigChannel+0x68>
 800541a:	3701      	adds	r7, #1
 800541c:	039d      	lsls	r5, r3, #14
 800541e:	d483      	bmi.n	8005328 <HAL_ADC_ConfigChannel+0x68>
 8005420:	2580      	movs	r5, #128	@ 0x80
 8005422:	02ed      	lsls	r5, r5, #11
 8005424:	001f      	movs	r7, r3
 8005426:	402f      	ands	r7, r5
 8005428:	422b      	tst	r3, r5
 800542a:	d100      	bne.n	800542e <HAL_ADC_ConfigChannel+0x16e>
 800542c:	e77c      	b.n	8005328 <HAL_ADC_ConfigChannel+0x68>
 800542e:	2712      	movs	r7, #18
 8005430:	e77a      	b.n	8005328 <HAL_ADC_ConfigChannel+0x68>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005432:	0212      	lsls	r2, r2, #8
 8005434:	d500      	bpl.n	8005438 <HAL_ADC_ConfigChannel+0x178>
 8005436:	e75d      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005438:	4938      	ldr	r1, [pc, #224]	@ (800551c <HAL_ADC_ConfigChannel+0x25c>)
 800543a:	680b      	ldr	r3, [r1, #0]
 800543c:	4a3b      	ldr	r2, [pc, #236]	@ (800552c <HAL_ADC_ConfigChannel+0x26c>)
 800543e:	4013      	ands	r3, r2
 8005440:	432b      	orrs	r3, r5
 8005442:	2280      	movs	r2, #128	@ 0x80
 8005444:	0412      	lsls	r2, r2, #16
 8005446:	4313      	orrs	r3, r2
 8005448:	600b      	str	r3, [r1, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800544a:	4b39      	ldr	r3, [pc, #228]	@ (8005530 <HAL_ADC_ConfigChannel+0x270>)
 800544c:	6818      	ldr	r0, [r3, #0]
 800544e:	4939      	ldr	r1, [pc, #228]	@ (8005534 <HAL_ADC_ConfigChannel+0x274>)
 8005450:	f7fa fe5a 	bl	8000108 <__udivsi3>
 8005454:	3001      	adds	r0, #1
 8005456:	0043      	lsls	r3, r0, #1
 8005458:	181b      	adds	r3, r3, r0
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800545e:	9b01      	ldr	r3, [sp, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d055      	beq.n	8005510 <HAL_ADC_ConfigChannel+0x250>
            wait_loop_index--;
 8005464:	9b01      	ldr	r3, [sp, #4]
 8005466:	3b01      	subs	r3, #1
 8005468:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800546a:	9b01      	ldr	r3, [sp, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1f9      	bne.n	8005464 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005470:	2000      	movs	r0, #0
 8005472:	e73f      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x34>
 8005474:	2000      	movs	r0, #0
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005476:	01d2      	lsls	r2, r2, #7
 8005478:	d500      	bpl.n	800547c <HAL_ADC_ConfigChannel+0x1bc>
 800547a:	e73b      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x34>
 800547c:	4927      	ldr	r1, [pc, #156]	@ (800551c <HAL_ADC_ConfigChannel+0x25c>)
 800547e:	680b      	ldr	r3, [r1, #0]
 8005480:	4a2a      	ldr	r2, [pc, #168]	@ (800552c <HAL_ADC_ConfigChannel+0x26c>)
 8005482:	4013      	ands	r3, r2
 8005484:	432b      	orrs	r3, r5
 8005486:	2280      	movs	r2, #128	@ 0x80
 8005488:	0452      	lsls	r2, r2, #17
 800548a:	4313      	orrs	r3, r2
 800548c:	600b      	str	r3, [r1, #0]
}
 800548e:	e731      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005490:	2304      	movs	r3, #4
 8005492:	439d      	bics	r5, r3
 8005494:	2380      	movs	r3, #128	@ 0x80
 8005496:	061b      	lsls	r3, r3, #24
 8005498:	429d      	cmp	r5, r3
 800549a:	d01c      	beq.n	80054d6 <HAL_ADC_ConfigChannel+0x216>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800549c:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800549e:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	db00      	blt.n	80054a6 <HAL_ADC_ConfigChannel+0x1e6>
 80054a4:	e726      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80054a6:	4a1d      	ldr	r2, [pc, #116]	@ (800551c <HAL_ADC_ConfigChannel+0x25c>)
 80054a8:	6812      	ldr	r2, [r2, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80054aa:	491d      	ldr	r1, [pc, #116]	@ (8005520 <HAL_ADC_ConfigChannel+0x260>)
 80054ac:	428b      	cmp	r3, r1
 80054ae:	d019      	beq.n	80054e4 <HAL_ADC_ConfigChannel+0x224>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80054b0:	491c      	ldr	r1, [pc, #112]	@ (8005524 <HAL_ADC_ConfigChannel+0x264>)
 80054b2:	428b      	cmp	r3, r1
 80054b4:	d021      	beq.n	80054fa <HAL_ADC_ConfigChannel+0x23a>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80054b6:	491c      	ldr	r1, [pc, #112]	@ (8005528 <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054b8:	2000      	movs	r0, #0
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80054ba:	428b      	cmp	r3, r1
 80054bc:	d000      	beq.n	80054c0 <HAL_ADC_ConfigChannel+0x200>
 80054be:	e719      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80054c0:	4816      	ldr	r0, [pc, #88]	@ (800551c <HAL_ADC_ConfigChannel+0x25c>)
 80054c2:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054c4:	23c0      	movs	r3, #192	@ 0xc0
 80054c6:	045b      	lsls	r3, r3, #17
 80054c8:	4013      	ands	r3, r2
 80054ca:	4a18      	ldr	r2, [pc, #96]	@ (800552c <HAL_ADC_ConfigChannel+0x26c>)
 80054cc:	400a      	ands	r2, r1
 80054ce:	4313      	orrs	r3, r2
 80054d0:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054d2:	2000      	movs	r0, #0
}
 80054d4:	e70e      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x34>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80054d6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80054d8:	680b      	ldr	r3, [r1, #0]
 80054da:	035b      	lsls	r3, r3, #13
 80054dc:	0b5b      	lsrs	r3, r3, #13
 80054de:	439a      	bics	r2, r3
 80054e0:	6282      	str	r2, [r0, #40]	@ 0x28
}
 80054e2:	e7db      	b.n	800549c <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80054e4:	480d      	ldr	r0, [pc, #52]	@ (800551c <HAL_ADC_ConfigChannel+0x25c>)
 80054e6:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054e8:	23a0      	movs	r3, #160	@ 0xa0
 80054ea:	045b      	lsls	r3, r3, #17
 80054ec:	4013      	ands	r3, r2
 80054ee:	4a0f      	ldr	r2, [pc, #60]	@ (800552c <HAL_ADC_ConfigChannel+0x26c>)
 80054f0:	400a      	ands	r2, r1
 80054f2:	4313      	orrs	r3, r2
 80054f4:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054f6:	2000      	movs	r0, #0
}
 80054f8:	e6fc      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80054fa:	4808      	ldr	r0, [pc, #32]	@ (800551c <HAL_ADC_ConfigChannel+0x25c>)
 80054fc:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054fe:	23c0      	movs	r3, #192	@ 0xc0
 8005500:	041b      	lsls	r3, r3, #16
 8005502:	4013      	ands	r3, r2
 8005504:	4a09      	ldr	r2, [pc, #36]	@ (800552c <HAL_ADC_ConfigChannel+0x26c>)
 8005506:	400a      	ands	r2, r1
 8005508:	4313      	orrs	r3, r2
 800550a:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800550c:	2000      	movs	r0, #0
}
 800550e:	e6f1      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x34>
 8005510:	2000      	movs	r0, #0
 8005512:	e6ef      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 8005514:	2002      	movs	r0, #2
 8005516:	e6f0      	b.n	80052fa <HAL_ADC_ConfigChannel+0x3a>
 8005518:	07ffff00 	.word	0x07ffff00
 800551c:	40012708 	.word	0x40012708
 8005520:	b0001000 	.word	0xb0001000
 8005524:	b8004000 	.word	0xb8004000
 8005528:	b4002000 	.word	0xb4002000
 800552c:	fe3fffff 	.word	0xfe3fffff
 8005530:	2000044c 	.word	0x2000044c
 8005534:	00030d40 	.word	0x00030d40

08005538 <ADC_ConversionStop>:
{
 8005538:	b570      	push	{r4, r5, r6, lr}
 800553a:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800553c:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800553e:	6893      	ldr	r3, [r2, #8]
  return HAL_OK;
 8005540:	2000      	movs	r0, #0
 8005542:	075b      	lsls	r3, r3, #29
 8005544:	d529      	bpl.n	800559a <ADC_ConversionStop+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005546:	6893      	ldr	r3, [r2, #8]
 8005548:	079b      	lsls	r3, r3, #30
 800554a:	d405      	bmi.n	8005558 <ADC_ConversionStop+0x20>
  MODIFY_REG(ADCx->CR,
 800554c:	6893      	ldr	r3, [r2, #8]
 800554e:	4914      	ldr	r1, [pc, #80]	@ (80055a0 <ADC_ConversionStop+0x68>)
 8005550:	400b      	ands	r3, r1
 8005552:	2110      	movs	r1, #16
 8005554:	430b      	orrs	r3, r1
 8005556:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005558:	f7ff fcc2 	bl	8004ee0 <HAL_GetTick>
 800555c:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	075b      	lsls	r3, r3, #29
 8005564:	d51a      	bpl.n	800559c <ADC_ConversionStop+0x64>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005566:	2504      	movs	r5, #4
 8005568:	e003      	b.n	8005572 <ADC_ConversionStop+0x3a>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	421d      	tst	r5, r3
 8005570:	d012      	beq.n	8005598 <ADC_ConversionStop+0x60>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005572:	f7ff fcb5 	bl	8004ee0 <HAL_GetTick>
 8005576:	1b80      	subs	r0, r0, r6
 8005578:	2802      	cmp	r0, #2
 800557a:	d9f6      	bls.n	800556a <ADC_ConversionStop+0x32>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	421d      	tst	r5, r3
 8005582:	d0f2      	beq.n	800556a <ADC_ConversionStop+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005584:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005586:	2210      	movs	r2, #16
 8005588:	4313      	orrs	r3, r2
 800558a:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800558c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800558e:	3a0f      	subs	r2, #15
 8005590:	4313      	orrs	r3, r2
 8005592:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8005594:	2001      	movs	r0, #1
 8005596:	e000      	b.n	800559a <ADC_ConversionStop+0x62>
  return HAL_OK;
 8005598:	2000      	movs	r0, #0
}
 800559a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800559c:	2000      	movs	r0, #0
 800559e:	e7fc      	b.n	800559a <ADC_ConversionStop+0x62>
 80055a0:	7fffffe8 	.word	0x7fffffe8

080055a4 <ADC_Enable>:
{
 80055a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055a6:	b083      	sub	sp, #12
 80055a8:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055ae:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055b0:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 80055b2:	2000      	movs	r0, #0
 80055b4:	07d2      	lsls	r2, r2, #31
 80055b6:	d434      	bmi.n	8005622 <ADC_Enable+0x7e>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80055b8:	6899      	ldr	r1, [r3, #8]
 80055ba:	4a2c      	ldr	r2, [pc, #176]	@ (800566c <ADC_Enable+0xc8>)
 80055bc:	4211      	tst	r1, r2
 80055be:	d127      	bne.n	8005610 <ADC_Enable+0x6c>
  MODIFY_REG(ADCx->CR,
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	492b      	ldr	r1, [pc, #172]	@ (8005670 <ADC_Enable+0xcc>)
 80055c4:	400a      	ands	r2, r1
 80055c6:	2101      	movs	r1, #1
 80055c8:	430a      	orrs	r2, r1
 80055ca:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80055cc:	4b29      	ldr	r3, [pc, #164]	@ (8005674 <ADC_Enable+0xd0>)
 80055ce:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80055d0:	021b      	lsls	r3, r3, #8
 80055d2:	d50f      	bpl.n	80055f4 <ADC_Enable+0x50>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80055d4:	4b28      	ldr	r3, [pc, #160]	@ (8005678 <ADC_Enable+0xd4>)
 80055d6:	6818      	ldr	r0, [r3, #0]
 80055d8:	4928      	ldr	r1, [pc, #160]	@ (800567c <ADC_Enable+0xd8>)
 80055da:	f7fa fd95 	bl	8000108 <__udivsi3>
 80055de:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80055e0:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 80055e2:	9b01      	ldr	r3, [sp, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d005      	beq.n	80055f4 <ADC_Enable+0x50>
        wait_loop_index--;
 80055e8:	9b01      	ldr	r3, [sp, #4]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80055ee:	9b01      	ldr	r3, [sp, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1f9      	bne.n	80055e8 <ADC_Enable+0x44>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80055f4:	7e63      	ldrb	r3, [r4, #25]
  return HAL_OK;
 80055f6:	2000      	movs	r0, #0
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d012      	beq.n	8005622 <ADC_Enable+0x7e>
      tickstart = HAL_GetTick();
 80055fc:	f7ff fc70 	bl	8004ee0 <HAL_GetTick>
 8005600:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	07d2      	lsls	r2, r2, #31
 8005608:	d42d      	bmi.n	8005666 <ADC_Enable+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800560a:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 800560c:	4f18      	ldr	r7, [pc, #96]	@ (8005670 <ADC_Enable+0xcc>)
 800560e:	e00e      	b.n	800562e <ADC_Enable+0x8a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005610:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005612:	2210      	movs	r2, #16
 8005614:	4313      	orrs	r3, r2
 8005616:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005618:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800561a:	3a0f      	subs	r2, #15
 800561c:	4313      	orrs	r3, r2
 800561e:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8005620:	3001      	adds	r0, #1
}
 8005622:	b003      	add	sp, #12
 8005624:	bdf0      	pop	{r4, r5, r6, r7, pc}
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	4215      	tst	r5, r2
 800562c:	d119      	bne.n	8005662 <ADC_Enable+0xbe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	4215      	tst	r5, r2
 8005632:	d103      	bne.n	800563c <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 8005634:	689a      	ldr	r2, [r3, #8]
 8005636:	403a      	ands	r2, r7
 8005638:	432a      	orrs	r2, r5
 800563a:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800563c:	f7ff fc50 	bl	8004ee0 <HAL_GetTick>
 8005640:	1b80      	subs	r0, r0, r6
 8005642:	2802      	cmp	r0, #2
 8005644:	d9ef      	bls.n	8005626 <ADC_Enable+0x82>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	421d      	tst	r5, r3
 800564c:	d1eb      	bne.n	8005626 <ADC_Enable+0x82>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800564e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005650:	2210      	movs	r2, #16
 8005652:	4313      	orrs	r3, r2
 8005654:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005656:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005658:	3a0f      	subs	r2, #15
 800565a:	4313      	orrs	r3, r2
 800565c:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 800565e:	2001      	movs	r0, #1
 8005660:	e7df      	b.n	8005622 <ADC_Enable+0x7e>
  return HAL_OK;
 8005662:	2000      	movs	r0, #0
 8005664:	e7dd      	b.n	8005622 <ADC_Enable+0x7e>
 8005666:	2000      	movs	r0, #0
 8005668:	e7db      	b.n	8005622 <ADC_Enable+0x7e>
 800566a:	46c0      	nop			@ (mov r8, r8)
 800566c:	80000017 	.word	0x80000017
 8005670:	7fffffe8 	.word	0x7fffffe8
 8005674:	40012708 	.word	0x40012708
 8005678:	2000044c 	.word	0x2000044c
 800567c:	00030d40 	.word	0x00030d40

08005680 <HAL_ADC_Start_DMA>:
{
 8005680:	b570      	push	{r4, r5, r6, lr}
 8005682:	0004      	movs	r4, r0
 8005684:	000d      	movs	r5, r1
 8005686:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005688:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800568a:	6893      	ldr	r3, [r2, #8]
    tmp_hal_status = HAL_BUSY;
 800568c:	2002      	movs	r0, #2
 800568e:	075b      	lsls	r3, r3, #29
 8005690:	d41c      	bmi.n	80056cc <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 8005692:	2354      	movs	r3, #84	@ 0x54
 8005694:	5ce3      	ldrb	r3, [r4, r3]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d044      	beq.n	8005724 <HAL_ADC_Start_DMA+0xa4>
 800569a:	2301      	movs	r3, #1
 800569c:	2154      	movs	r1, #84	@ 0x54
 800569e:	5463      	strb	r3, [r4, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80056a0:	68d1      	ldr	r1, [r2, #12]
 80056a2:	420b      	tst	r3, r1
 80056a4:	d10d      	bne.n	80056c2 <HAL_ADC_Start_DMA+0x42>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80056a6:	6893      	ldr	r3, [r2, #8]
 80056a8:	07db      	lsls	r3, r3, #31
 80056aa:	d505      	bpl.n	80056b8 <HAL_ADC_Start_DMA+0x38>
  MODIFY_REG(ADCx->CR,
 80056ac:	6893      	ldr	r3, [r2, #8]
 80056ae:	491e      	ldr	r1, [pc, #120]	@ (8005728 <HAL_ADC_Start_DMA+0xa8>)
 80056b0:	400b      	ands	r3, r1
 80056b2:	2102      	movs	r1, #2
 80056b4:	430b      	orrs	r3, r1
 80056b6:	6093      	str	r3, [r2, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80056b8:	6822      	ldr	r2, [r4, #0]
 80056ba:	68d3      	ldr	r3, [r2, #12]
 80056bc:	2101      	movs	r1, #1
 80056be:	430b      	orrs	r3, r1
 80056c0:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 80056c2:	0020      	movs	r0, r4
 80056c4:	f7ff ff6e 	bl	80055a4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80056c8:	2800      	cmp	r0, #0
 80056ca:	d000      	beq.n	80056ce <HAL_ADC_Start_DMA+0x4e>
}
 80056cc:	bd70      	pop	{r4, r5, r6, pc}
      ADC_STATE_CLR_SET(hadc->State,
 80056ce:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80056d0:	4b16      	ldr	r3, [pc, #88]	@ (800572c <HAL_ADC_Start_DMA+0xac>)
 80056d2:	401a      	ands	r2, r3
 80056d4:	2380      	movs	r3, #128	@ 0x80
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	4313      	orrs	r3, r2
 80056da:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 80056dc:	2300      	movs	r3, #0
 80056de:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80056e0:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80056e2:	4913      	ldr	r1, [pc, #76]	@ (8005730 <HAL_ADC_Start_DMA+0xb0>)
 80056e4:	62d1      	str	r1, [r2, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80056e6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80056e8:	4912      	ldr	r1, [pc, #72]	@ (8005734 <HAL_ADC_Start_DMA+0xb4>)
 80056ea:	6311      	str	r1, [r2, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80056ec:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80056ee:	4912      	ldr	r1, [pc, #72]	@ (8005738 <HAL_ADC_Start_DMA+0xb8>)
 80056f0:	6351      	str	r1, [r2, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80056f2:	6822      	ldr	r2, [r4, #0]
 80056f4:	211c      	movs	r1, #28
 80056f6:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 80056f8:	2254      	movs	r2, #84	@ 0x54
 80056fa:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80056fc:	6822      	ldr	r2, [r4, #0]
 80056fe:	6853      	ldr	r3, [r2, #4]
 8005700:	390c      	subs	r1, #12
 8005702:	430b      	orrs	r3, r1
 8005704:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005706:	6821      	ldr	r1, [r4, #0]
 8005708:	3140      	adds	r1, #64	@ 0x40
 800570a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800570c:	0033      	movs	r3, r6
 800570e:	002a      	movs	r2, r5
 8005710:	f000 fa84 	bl	8005c1c <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005714:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8005716:	6893      	ldr	r3, [r2, #8]
 8005718:	4903      	ldr	r1, [pc, #12]	@ (8005728 <HAL_ADC_Start_DMA+0xa8>)
 800571a:	400b      	ands	r3, r1
 800571c:	2104      	movs	r1, #4
 800571e:	430b      	orrs	r3, r1
 8005720:	6093      	str	r3, [r2, #8]
}
 8005722:	e7d3      	b.n	80056cc <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 8005724:	2002      	movs	r0, #2
 8005726:	e7d1      	b.n	80056cc <HAL_ADC_Start_DMA+0x4c>
 8005728:	7fffffe8 	.word	0x7fffffe8
 800572c:	fffff0fe 	.word	0xfffff0fe
 8005730:	08004ef5 	.word	0x08004ef5
 8005734:	08004f75 	.word	0x08004f75
 8005738:	08004f7f 	.word	0x08004f7f

0800573c <ADC_Disable>:
{
 800573c:	b570      	push	{r4, r5, r6, lr}
 800573e:	0004      	movs	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005740:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005742:	6899      	ldr	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005744:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8005746:	2000      	movs	r0, #0
 8005748:	07d2      	lsls	r2, r2, #31
 800574a:	d50f      	bpl.n	800576c <ADC_Disable+0x30>
      && (tmp_adc_is_disable_on_going == 0UL)
 800574c:	0789      	lsls	r1, r1, #30
 800574e:	d40d      	bmi.n	800576c <ADC_Disable+0x30>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005750:	6899      	ldr	r1, [r3, #8]
 8005752:	2205      	movs	r2, #5
 8005754:	400a      	ands	r2, r1
 8005756:	2a01      	cmp	r2, #1
 8005758:	d009      	beq.n	800576e <ADC_Disable+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800575a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800575c:	2210      	movs	r2, #16
 800575e:	4313      	orrs	r3, r2
 8005760:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005762:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005764:	3a0f      	subs	r2, #15
 8005766:	4313      	orrs	r3, r2
 8005768:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 800576a:	2001      	movs	r0, #1
}
 800576c:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	4915      	ldr	r1, [pc, #84]	@ (80057c8 <ADC_Disable+0x8c>)
 8005772:	400a      	ands	r2, r1
 8005774:	2102      	movs	r1, #2
 8005776:	430a      	orrs	r2, r1
 8005778:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	2203      	movs	r2, #3
 800577e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8005780:	f7ff fbae 	bl	8004ee0 <HAL_GetTick>
 8005784:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800578a:	2501      	movs	r5, #1
  return HAL_OK;
 800578c:	2000      	movs	r0, #0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800578e:	07db      	lsls	r3, r3, #31
 8005790:	d404      	bmi.n	800579c <ADC_Disable+0x60>
 8005792:	e7eb      	b.n	800576c <ADC_Disable+0x30>
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	421d      	tst	r5, r3
 800579a:	d012      	beq.n	80057c2 <ADC_Disable+0x86>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800579c:	f7ff fba0 	bl	8004ee0 <HAL_GetTick>
 80057a0:	1b80      	subs	r0, r0, r6
 80057a2:	2802      	cmp	r0, #2
 80057a4:	d9f6      	bls.n	8005794 <ADC_Disable+0x58>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	421d      	tst	r5, r3
 80057ac:	d0f2      	beq.n	8005794 <ADC_Disable+0x58>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80057b0:	2210      	movs	r2, #16
 80057b2:	4313      	orrs	r3, r2
 80057b4:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057b6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80057b8:	3a0f      	subs	r2, #15
 80057ba:	4313      	orrs	r3, r2
 80057bc:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 80057be:	2001      	movs	r0, #1
 80057c0:	e7d4      	b.n	800576c <ADC_Disable+0x30>
  return HAL_OK;
 80057c2:	2000      	movs	r0, #0
 80057c4:	e7d2      	b.n	800576c <ADC_Disable+0x30>
 80057c6:	46c0      	nop			@ (mov r8, r8)
 80057c8:	7fffffe8 	.word	0x7fffffe8

080057cc <HAL_ADC_Stop_DMA>:
{
 80057cc:	b570      	push	{r4, r5, r6, lr}
 80057ce:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80057d0:	2354      	movs	r3, #84	@ 0x54
 80057d2:	5cc3      	ldrb	r3, [r0, r3]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d037      	beq.n	8005848 <HAL_ADC_Stop_DMA+0x7c>
 80057d8:	2354      	movs	r3, #84	@ 0x54
 80057da:	2201      	movs	r2, #1
 80057dc:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80057de:	f7ff feab 	bl	8005538 <ADC_ConversionStop>
 80057e2:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 80057e4:	d12b      	bne.n	800583e <HAL_ADC_Stop_DMA+0x72>
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80057e6:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80057e8:	2325      	movs	r3, #37	@ 0x25
 80057ea:	5cc3      	ldrb	r3, [r0, r3]
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d011      	beq.n	8005814 <HAL_ADC_Stop_DMA+0x48>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80057f0:	6822      	ldr	r2, [r4, #0]
 80057f2:	6853      	ldr	r3, [r2, #4]
 80057f4:	2110      	movs	r1, #16
 80057f6:	438b      	bics	r3, r1
 80057f8:	6053      	str	r3, [r2, #4]
      tmp_hal_status = ADC_Disable(hadc);
 80057fa:	0020      	movs	r0, r4
 80057fc:	f7ff ff9e 	bl	800573c <ADC_Disable>
 8005800:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status == HAL_OK)
 8005802:	d117      	bne.n	8005834 <HAL_ADC_Stop_DMA+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 8005804:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005806:	4a11      	ldr	r2, [pc, #68]	@ (800584c <HAL_ADC_Stop_DMA+0x80>)
 8005808:	4013      	ands	r3, r2
 800580a:	3204      	adds	r2, #4
 800580c:	32ff      	adds	r2, #255	@ 0xff
 800580e:	4313      	orrs	r3, r2
 8005810:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005812:	e00f      	b.n	8005834 <HAL_ADC_Stop_DMA+0x68>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005814:	f000 fa50 	bl	8005cb8 <HAL_DMA_Abort>
 8005818:	1e05      	subs	r5, r0, #0
      if (tmp_hal_status != HAL_OK)
 800581a:	d0e9      	beq.n	80057f0 <HAL_ADC_Stop_DMA+0x24>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800581c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800581e:	2240      	movs	r2, #64	@ 0x40
 8005820:	4313      	orrs	r3, r2
 8005822:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005824:	6822      	ldr	r2, [r4, #0]
 8005826:	6853      	ldr	r3, [r2, #4]
 8005828:	2110      	movs	r1, #16
 800582a:	438b      	bics	r3, r1
 800582c:	6053      	str	r3, [r2, #4]
      (void)ADC_Disable(hadc);
 800582e:	0020      	movs	r0, r4
 8005830:	f7ff ff84 	bl	800573c <ADC_Disable>
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8005834:	6822      	ldr	r2, [r4, #0]
 8005836:	68d3      	ldr	r3, [r2, #12]
 8005838:	2101      	movs	r1, #1
 800583a:	438b      	bics	r3, r1
 800583c:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(hadc);
 800583e:	2354      	movs	r3, #84	@ 0x54
 8005840:	2200      	movs	r2, #0
 8005842:	54e2      	strb	r2, [r4, r3]
}
 8005844:	0028      	movs	r0, r5
 8005846:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8005848:	2502      	movs	r5, #2
 800584a:	e7fb      	b.n	8005844 <HAL_ADC_Stop_DMA+0x78>
 800584c:	fffffefe 	.word	0xfffffefe

08005850 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8005850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005852:	46de      	mov	lr, fp
 8005854:	4657      	mov	r7, sl
 8005856:	464e      	mov	r6, r9
 8005858:	4645      	mov	r5, r8
 800585a:	b5e0      	push	{r5, r6, r7, lr}
 800585c:	b083      	sub	sp, #12
 800585e:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005860:	2300      	movs	r3, #0
 8005862:	9301      	str	r3, [sp, #4]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8005864:	3354      	adds	r3, #84	@ 0x54
 8005866:	5cc3      	ldrb	r3, [r0, r3]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d100      	bne.n	800586e <HAL_ADCEx_Calibration_Start+0x1e>
 800586c:	e0b7      	b.n	80059de <HAL_ADCEx_Calibration_Start+0x18e>
 800586e:	2501      	movs	r5, #1
 8005870:	2354      	movs	r3, #84	@ 0x54
 8005872:	54c5      	strb	r5, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005874:	f7ff ff62 	bl	800573c <ADC_Disable>
 8005878:	4683      	mov	fp, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800587a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800587c:	6899      	ldr	r1, [r3, #8]
 800587e:	002a      	movs	r2, r5
 8005880:	400a      	ands	r2, r1
 8005882:	420d      	tst	r5, r1
 8005884:	d00e      	beq.n	80058a4 <HAL_ADCEx_Calibration_Start+0x54>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005886:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005888:	2210      	movs	r2, #16
 800588a:	4313      	orrs	r3, r2
 800588c:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800588e:	2354      	movs	r3, #84	@ 0x54
 8005890:	2200      	movs	r2, #0
 8005892:	54e2      	strb	r2, [r4, r3]

  return tmp_hal_status;
}
 8005894:	4658      	mov	r0, fp
 8005896:	b003      	add	sp, #12
 8005898:	bcf0      	pop	{r4, r5, r6, r7}
 800589a:	46bb      	mov	fp, r7
 800589c:	46b2      	mov	sl, r6
 800589e:	46a9      	mov	r9, r5
 80058a0:	46a0      	mov	r8, r4
 80058a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80058a4:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80058a6:	484f      	ldr	r0, [pc, #316]	@ (80059e4 <HAL_ADCEx_Calibration_Start+0x194>)
 80058a8:	4001      	ands	r1, r0
 80058aa:	3006      	adds	r0, #6
 80058ac:	30ff      	adds	r0, #255	@ 0xff
 80058ae:	4301      	orrs	r1, r0
 80058b0:	65a1      	str	r1, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80058b2:	68d9      	ldr	r1, [r3, #12]
 80058b4:	4689      	mov	r9, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80058b6:	68d9      	ldr	r1, [r3, #12]
 80058b8:	484b      	ldr	r0, [pc, #300]	@ (80059e8 <HAL_ADCEx_Calibration_Start+0x198>)
 80058ba:	4001      	ands	r1, r0
 80058bc:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 80058be:	0015      	movs	r5, r2
  MODIFY_REG(ADCx->CR,
 80058c0:	4b4a      	ldr	r3, [pc, #296]	@ (80059ec <HAL_ADCEx_Calibration_Start+0x19c>)
 80058c2:	469c      	mov	ip, r3
 80058c4:	2080      	movs	r0, #128	@ 0x80
 80058c6:	0600      	lsls	r0, r0, #24
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80058c8:	4b49      	ldr	r3, [pc, #292]	@ (80059f0 <HAL_ADCEx_Calibration_Start+0x1a0>)
 80058ca:	469a      	mov	sl, r3
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80058cc:	23b4      	movs	r3, #180	@ 0xb4
 80058ce:	4698      	mov	r8, r3
 80058d0:	277f      	movs	r7, #127	@ 0x7f
      LL_ADC_StartCalibration(hadc->Instance);
 80058d2:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80058d4:	688b      	ldr	r3, [r1, #8]
 80058d6:	4666      	mov	r6, ip
 80058d8:	4033      	ands	r3, r6
 80058da:	4303      	orrs	r3, r0
 80058dc:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80058de:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80058e0:	688b      	ldr	r3, [r1, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	db5a      	blt.n	800599c <HAL_ADCEx_Calibration_Start+0x14c>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80058e6:	4643      	mov	r3, r8
 80058e8:	58cb      	ldr	r3, [r1, r3]
 80058ea:	403b      	ands	r3, r7
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80058ec:	18ed      	adds	r5, r5, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80058ee:	3201      	adds	r2, #1
 80058f0:	2a08      	cmp	r2, #8
 80058f2:	d1ee      	bne.n	80058d2 <HAL_ADCEx_Calibration_Start+0x82>
    calibration_factor_accumulated /= calibration_index;
 80058f4:	08ea      	lsrs	r2, r5, #3
  MODIFY_REG(ADCx->CR,
 80058f6:	688b      	ldr	r3, [r1, #8]
 80058f8:	483c      	ldr	r0, [pc, #240]	@ (80059ec <HAL_ADCEx_Calibration_Start+0x19c>)
 80058fa:	4003      	ands	r3, r0
 80058fc:	2001      	movs	r0, #1
 80058fe:	4303      	orrs	r3, r0
 8005900:	608b      	str	r3, [r1, #8]
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8005902:	6821      	ldr	r1, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8005904:	6908      	ldr	r0, [r1, #16]
 8005906:	2380      	movs	r3, #128	@ 0x80
 8005908:	05db      	lsls	r3, r3, #23
 800590a:	4298      	cmp	r0, r3
 800590c:	d219      	bcs.n	8005942 <HAL_ADCEx_Calibration_Start+0xf2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 800590e:	4b39      	ldr	r3, [pc, #228]	@ (80059f4 <HAL_ADCEx_Calibration_Start+0x1a4>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	20f0      	movs	r0, #240	@ 0xf0
 8005914:	0380      	lsls	r0, r0, #14
 8005916:	4003      	ands	r3, r0
      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8005918:	20e0      	movs	r0, #224	@ 0xe0
 800591a:	0340      	lsls	r0, r0, #13
 800591c:	4283      	cmp	r3, r0
 800591e:	d310      	bcc.n	8005942 <HAL_ADCEx_Calibration_Start+0xf2>
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8005920:	0c9b      	lsrs	r3, r3, #18
 8005922:	3b03      	subs	r3, #3
 8005924:	2001      	movs	r0, #1
 8005926:	4098      	lsls	r0, r3
 8005928:	9000      	str	r0, [sp, #0]
        delay_cpu_cycles >>= 1UL;
 800592a:	9b00      	ldr	r3, [sp, #0]
 800592c:	085b      	lsrs	r3, r3, #1
 800592e:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 8005930:	9b00      	ldr	r3, [sp, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d005      	beq.n	8005942 <HAL_ADCEx_Calibration_Start+0xf2>
          delay_cpu_cycles--;
 8005936:	9b00      	ldr	r3, [sp, #0]
 8005938:	3b01      	subs	r3, #1
 800593a:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 800593c:	9b00      	ldr	r3, [sp, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f9      	bne.n	8005936 <HAL_ADCEx_Calibration_Start+0xe6>
  MODIFY_REG(ADCx->CALFACT,
 8005942:	23b4      	movs	r3, #180	@ 0xb4
 8005944:	58cd      	ldr	r5, [r1, r3]
 8005946:	207f      	movs	r0, #127	@ 0x7f
 8005948:	4385      	bics	r5, r0
 800594a:	4315      	orrs	r5, r2
 800594c:	50cd      	str	r5, [r1, r3]
    LL_ADC_Disable(hadc->Instance);
 800594e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8005950:	6893      	ldr	r3, [r2, #8]
 8005952:	4926      	ldr	r1, [pc, #152]	@ (80059ec <HAL_ADCEx_Calibration_Start+0x19c>)
 8005954:	400b      	ands	r3, r1
 8005956:	2102      	movs	r1, #2
 8005958:	430b      	orrs	r3, r1
 800595a:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800595c:	f7ff fac0 	bl	8004ee0 <HAL_GetTick>
 8005960:	0005      	movs	r5, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005962:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	07d2      	lsls	r2, r2, #31
 8005968:	d50b      	bpl.n	8005982 <HAL_ADCEx_Calibration_Start+0x132>
 800596a:	2301      	movs	r3, #1
 800596c:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800596e:	f7ff fab7 	bl	8004ee0 <HAL_GetTick>
 8005972:	1b40      	subs	r0, r0, r5
 8005974:	2802      	cmp	r0, #2
 8005976:	d823      	bhi.n	80059c0 <HAL_ADCEx_Calibration_Start+0x170>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	4641      	mov	r1, r8
 800597e:	4211      	tst	r1, r2
 8005980:	d1f5      	bne.n	800596e <HAL_ADCEx_Calibration_Start+0x11e>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8005982:	68da      	ldr	r2, [r3, #12]
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8005984:	491c      	ldr	r1, [pc, #112]	@ (80059f8 <HAL_ADCEx_Calibration_Start+0x1a8>)
 8005986:	464f      	mov	r7, r9
 8005988:	400f      	ands	r7, r1
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800598a:	4317      	orrs	r7, r2
 800598c:	60df      	str	r7, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800598e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005990:	2203      	movs	r2, #3
 8005992:	4393      	bics	r3, r2
 8005994:	3a02      	subs	r2, #2
 8005996:	4313      	orrs	r3, r2
 8005998:	65a3      	str	r3, [r4, #88]	@ 0x58
 800599a:	e778      	b.n	800588e <HAL_ADCEx_Calibration_Start+0x3e>
        wait_loop_index++;
 800599c:	9b01      	ldr	r3, [sp, #4]
 800599e:	3301      	adds	r3, #1
 80059a0:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80059a2:	9b01      	ldr	r3, [sp, #4]
 80059a4:	4553      	cmp	r3, sl
 80059a6:	d99b      	bls.n	80058e0 <HAL_ADCEx_Calibration_Start+0x90>
          ADC_STATE_CLR_SET(hadc->State,
 80059a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80059aa:	2212      	movs	r2, #18
 80059ac:	4393      	bics	r3, r2
 80059ae:	3a02      	subs	r2, #2
 80059b0:	4313      	orrs	r3, r2
 80059b2:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 80059b4:	2354      	movs	r3, #84	@ 0x54
 80059b6:	2200      	movs	r2, #0
 80059b8:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 80059ba:	3b53      	subs	r3, #83	@ 0x53
 80059bc:	469b      	mov	fp, r3
 80059be:	e769      	b.n	8005894 <HAL_ADCEx_Calibration_Start+0x44>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	07db      	lsls	r3, r3, #31
 80059c6:	d5d7      	bpl.n	8005978 <HAL_ADCEx_Calibration_Start+0x128>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80059ca:	2210      	movs	r2, #16
 80059cc:	4313      	orrs	r3, r2
 80059ce:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059d0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80059d2:	3a0f      	subs	r2, #15
 80059d4:	4313      	orrs	r3, r2
 80059d6:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	469b      	mov	fp, r3
 80059dc:	e75a      	b.n	8005894 <HAL_ADCEx_Calibration_Start+0x44>
  __HAL_LOCK(hadc);
 80059de:	2302      	movs	r3, #2
 80059e0:	469b      	mov	fp, r3
 80059e2:	e757      	b.n	8005894 <HAL_ADCEx_Calibration_Start+0x44>
 80059e4:	fffffefd 	.word	0xfffffefd
 80059e8:	ffff7ffc 	.word	0xffff7ffc
 80059ec:	7fffffe8 	.word	0x7fffffe8
 80059f0:	0002f1ff 	.word	0x0002f1ff
 80059f4:	40012708 	.word	0x40012708
 80059f8:	00008003 	.word	0x00008003

080059fc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80059fc:	4770      	bx	lr

080059fe <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80059fe:	4770      	bx	lr

08005a00 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005a00:	4770      	bx	lr
	...

08005a04 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a04:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8005a06:	2800      	cmp	r0, #0
 8005a08:	db14      	blt.n	8005a34 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a0a:	0884      	lsrs	r4, r0, #2
 8005a0c:	00a4      	lsls	r4, r4, #2
 8005a0e:	4b14      	ldr	r3, [pc, #80]	@ (8005a60 <HAL_NVIC_SetPriority+0x5c>)
 8005a10:	469c      	mov	ip, r3
 8005a12:	4464      	add	r4, ip
 8005a14:	26c0      	movs	r6, #192	@ 0xc0
 8005a16:	00b6      	lsls	r6, r6, #2
 8005a18:	59a5      	ldr	r5, [r4, r6]
 8005a1a:	2203      	movs	r2, #3
 8005a1c:	4002      	ands	r2, r0
 8005a1e:	00d2      	lsls	r2, r2, #3
 8005a20:	23ff      	movs	r3, #255	@ 0xff
 8005a22:	0018      	movs	r0, r3
 8005a24:	4090      	lsls	r0, r2
 8005a26:	4385      	bics	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005a28:	0189      	lsls	r1, r1, #6
 8005a2a:	400b      	ands	r3, r1
 8005a2c:	4093      	lsls	r3, r2
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a2e:	432b      	orrs	r3, r5
 8005a30:	51a3      	str	r3, [r4, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8005a32:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a34:	230f      	movs	r3, #15
 8005a36:	4003      	ands	r3, r0
 8005a38:	3b08      	subs	r3, #8
 8005a3a:	089b      	lsrs	r3, r3, #2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4a09      	ldr	r2, [pc, #36]	@ (8005a64 <HAL_NVIC_SetPriority+0x60>)
 8005a40:	4694      	mov	ip, r2
 8005a42:	4463      	add	r3, ip
 8005a44:	69dc      	ldr	r4, [r3, #28]
 8005a46:	2203      	movs	r2, #3
 8005a48:	4010      	ands	r0, r2
 8005a4a:	00c0      	lsls	r0, r0, #3
 8005a4c:	32fc      	adds	r2, #252	@ 0xfc
 8005a4e:	0015      	movs	r5, r2
 8005a50:	4085      	lsls	r5, r0
 8005a52:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005a54:	0189      	lsls	r1, r1, #6
 8005a56:	400a      	ands	r2, r1
 8005a58:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a5a:	4322      	orrs	r2, r4
 8005a5c:	61da      	str	r2, [r3, #28]
 8005a5e:	e7e8      	b.n	8005a32 <HAL_NVIC_SetPriority+0x2e>
 8005a60:	e000e100 	.word	0xe000e100
 8005a64:	e000ed00 	.word	0xe000ed00

08005a68 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	db05      	blt.n	8005a78 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a6c:	221f      	movs	r2, #31
 8005a6e:	4002      	ands	r2, r0
 8005a70:	2301      	movs	r3, #1
 8005a72:	4093      	lsls	r3, r2
 8005a74:	4a01      	ldr	r2, [pc, #4]	@ (8005a7c <HAL_NVIC_EnableIRQ+0x14>)
 8005a76:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005a78:	4770      	bx	lr
 8005a7a:	46c0      	nop			@ (mov r8, r8)
 8005a7c:	e000e100 	.word	0xe000e100

08005a80 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005a80:	2800      	cmp	r0, #0
 8005a82:	db0a      	blt.n	8005a9a <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a84:	221f      	movs	r2, #31
 8005a86:	4002      	ands	r2, r0
 8005a88:	2301      	movs	r3, #1
 8005a8a:	4093      	lsls	r3, r2
 8005a8c:	4903      	ldr	r1, [pc, #12]	@ (8005a9c <HAL_NVIC_DisableIRQ+0x1c>)
 8005a8e:	2280      	movs	r2, #128	@ 0x80
 8005a90:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005a92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005a96:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8005a9a:	4770      	bx	lr
 8005a9c:	e000e100 	.word	0xe000e100

08005aa0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005aa0:	3801      	subs	r0, #1
 8005aa2:	2380      	movs	r3, #128	@ 0x80
 8005aa4:	045b      	lsls	r3, r3, #17
 8005aa6:	4298      	cmp	r0, r3
 8005aa8:	d20f      	bcs.n	8005aca <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005aaa:	4a09      	ldr	r2, [pc, #36]	@ (8005ad0 <HAL_SYSTICK_Config+0x30>)
 8005aac:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005aae:	4809      	ldr	r0, [pc, #36]	@ (8005ad4 <HAL_SYSTICK_Config+0x34>)
 8005ab0:	6a03      	ldr	r3, [r0, #32]
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	0a1b      	lsrs	r3, r3, #8
 8005ab6:	21c0      	movs	r1, #192	@ 0xc0
 8005ab8:	0609      	lsls	r1, r1, #24
 8005aba:	430b      	orrs	r3, r1
 8005abc:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005abe:	2300      	movs	r3, #0
 8005ac0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ac2:	3307      	adds	r3, #7
 8005ac4:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ac6:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8005ac8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005aca:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 8005acc:	e7fc      	b.n	8005ac8 <HAL_SYSTICK_Config+0x28>
 8005ace:	46c0      	nop			@ (mov r8, r8)
 8005ad0:	e000e010 	.word	0xe000e010
 8005ad4:	e000ed00 	.word	0xe000ed00

08005ad8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ada:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8005adc:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 8005ade:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005ae0:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 8005ae2:	2c00      	cmp	r4, #0
 8005ae4:	d002      	beq.n	8005aec <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ae6:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8005ae8:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8005aea:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005aec:	4e0b      	ldr	r6, [pc, #44]	@ (8005b1c <DMA_SetConfig+0x44>)
 8005aee:	6877      	ldr	r7, [r6, #4]
 8005af0:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8005af2:	241c      	movs	r4, #28
 8005af4:	4025      	ands	r5, r4
 8005af6:	3c1b      	subs	r4, #27
 8005af8:	40ac      	lsls	r4, r5
 8005afa:	433c      	orrs	r4, r7
 8005afc:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005afe:	6804      	ldr	r4, [r0, #0]
 8005b00:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b02:	6883      	ldr	r3, [r0, #8]
 8005b04:	2b10      	cmp	r3, #16
 8005b06:	d004      	beq.n	8005b12 <DMA_SetConfig+0x3a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8005b08:	6803      	ldr	r3, [r0, #0]
 8005b0a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8005b0c:	6803      	ldr	r3, [r0, #0]
 8005b0e:	60da      	str	r2, [r3, #12]
  }
}
 8005b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8005b12:	6803      	ldr	r3, [r0, #0]
 8005b14:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005b16:	6803      	ldr	r3, [r0, #0]
 8005b18:	60d9      	str	r1, [r3, #12]
 8005b1a:	e7f9      	b.n	8005b10 <DMA_SetConfig+0x38>
 8005b1c:	40020000 	.word	0x40020000

08005b20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b20:	b510      	push	{r4, lr}
 8005b22:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005b24:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005b26:	089b      	lsrs	r3, r3, #2
 8005b28:	4a08      	ldr	r2, [pc, #32]	@ (8005b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 8005b2a:	4694      	mov	ip, r2
 8005b2c:	4463      	add	r3, ip
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	6443      	str	r3, [r0, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005b32:	7800      	ldrb	r0, [r0, #0]
 8005b34:	3808      	subs	r0, #8
 8005b36:	2114      	movs	r1, #20
 8005b38:	f7fa fae6 	bl	8000108 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005b3c:	4b04      	ldr	r3, [pc, #16]	@ (8005b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8005b3e:	64a3      	str	r3, [r4, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005b40:	231f      	movs	r3, #31
 8005b42:	4018      	ands	r0, r3
 8005b44:	3b1e      	subs	r3, #30
 8005b46:	4083      	lsls	r3, r0
 8005b48:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 8005b4a:	bd10      	pop	{r4, pc}
 8005b4c:	10008200 	.word	0x10008200
 8005b50:	40020880 	.word	0x40020880

08005b54 <HAL_DMA_Init>:
{
 8005b54:	b570      	push	{r4, r5, r6, lr}
 8005b56:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8005b58:	d055      	beq.n	8005c06 <HAL_DMA_Init+0xb2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b5a:	6805      	ldr	r5, [r0, #0]
 8005b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8005c0c <HAL_DMA_Init+0xb8>)
 8005b5e:	18e8      	adds	r0, r5, r3
 8005b60:	2114      	movs	r1, #20
 8005b62:	f7fa fad1 	bl	8000108 <__udivsi3>
 8005b66:	0080      	lsls	r0, r0, #2
 8005b68:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b6a:	2325      	movs	r3, #37	@ 0x25
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005b70:	682b      	ldr	r3, [r5, #0]
 8005b72:	4a27      	ldr	r2, [pc, #156]	@ (8005c10 <HAL_DMA_Init+0xbc>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005b78:	6822      	ldr	r2, [r4, #0]
 8005b7a:	6811      	ldr	r1, [r2, #0]
 8005b7c:	68a3      	ldr	r3, [r4, #8]
 8005b7e:	68e0      	ldr	r0, [r4, #12]
 8005b80:	4303      	orrs	r3, r0
 8005b82:	6920      	ldr	r0, [r4, #16]
 8005b84:	4303      	orrs	r3, r0
 8005b86:	6960      	ldr	r0, [r4, #20]
 8005b88:	4303      	orrs	r3, r0
 8005b8a:	69a0      	ldr	r0, [r4, #24]
 8005b8c:	4303      	orrs	r3, r0
 8005b8e:	69e0      	ldr	r0, [r4, #28]
 8005b90:	4303      	orrs	r3, r0
 8005b92:	6a20      	ldr	r0, [r4, #32]
 8005b94:	4303      	orrs	r3, r0
 8005b96:	430b      	orrs	r3, r1
 8005b98:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b9a:	0020      	movs	r0, r4
 8005b9c:	f7ff ffc0 	bl	8005b20 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005ba0:	2380      	movs	r3, #128	@ 0x80
 8005ba2:	01db      	lsls	r3, r3, #7
 8005ba4:	68a2      	ldr	r2, [r4, #8]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d018      	beq.n	8005bdc <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005baa:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005bac:	6863      	ldr	r3, [r4, #4]
 8005bae:	213f      	movs	r1, #63	@ 0x3f
 8005bb0:	400b      	ands	r3, r1
 8005bb2:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bb4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8005bb6:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8005bb8:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005bba:	6863      	ldr	r3, [r4, #4]
 8005bbc:	1e5a      	subs	r2, r3, #1
 8005bbe:	2a03      	cmp	r2, #3
 8005bc0:	d90f      	bls.n	8005be2 <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005bc6:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005bc8:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8005bce:	2225      	movs	r2, #37	@ 0x25
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8005bd4:	3a01      	subs	r2, #1
 8005bd6:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8005bd8:	2000      	movs	r0, #0
}
 8005bda:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	6063      	str	r3, [r4, #4]
 8005be0:	e7e3      	b.n	8005baa <HAL_DMA_Init+0x56>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005be2:	223f      	movs	r2, #63	@ 0x3f
 8005be4:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005be6:	4a0b      	ldr	r2, [pc, #44]	@ (8005c14 <HAL_DMA_Init+0xc0>)
 8005be8:	189a      	adds	r2, r3, r2
 8005bea:	0092      	lsls	r2, r2, #2
 8005bec:	6522      	str	r2, [r4, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005bee:	490a      	ldr	r1, [pc, #40]	@ (8005c18 <HAL_DMA_Init+0xc4>)
 8005bf0:	6561      	str	r1, [r4, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	4099      	lsls	r1, r3
 8005bf8:	65a1      	str	r1, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bfe:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005c00:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8005c02:	605a      	str	r2, [r3, #4]
 8005c04:	e7e1      	b.n	8005bca <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 8005c06:	2001      	movs	r0, #1
 8005c08:	e7e7      	b.n	8005bda <HAL_DMA_Init+0x86>
 8005c0a:	46c0      	nop			@ (mov r8, r8)
 8005c0c:	bffdfff8 	.word	0xbffdfff8
 8005c10:	ffff800f 	.word	0xffff800f
 8005c14:	1000823f 	.word	0x1000823f
 8005c18:	40020940 	.word	0x40020940

08005c1c <HAL_DMA_Start_IT>:
{
 8005c1c:	b570      	push	{r4, r5, r6, lr}
 8005c1e:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8005c20:	2024      	movs	r0, #36	@ 0x24
 8005c22:	5c20      	ldrb	r0, [r4, r0]
 8005c24:	2801      	cmp	r0, #1
 8005c26:	d045      	beq.n	8005cb4 <HAL_DMA_Start_IT+0x98>
 8005c28:	2024      	movs	r0, #36	@ 0x24
 8005c2a:	2501      	movs	r5, #1
 8005c2c:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 8005c2e:	3001      	adds	r0, #1
 8005c30:	5c20      	ldrb	r0, [r4, r0]
 8005c32:	2801      	cmp	r0, #1
 8005c34:	d006      	beq.n	8005c44 <HAL_DMA_Start_IT+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005c36:	2380      	movs	r3, #128	@ 0x80
 8005c38:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8005c3a:	3b5c      	subs	r3, #92	@ 0x5c
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	54e2      	strb	r2, [r4, r3]
    status = HAL_ERROR;
 8005c40:	2001      	movs	r0, #1
}
 8005c42:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c44:	3024      	adds	r0, #36	@ 0x24
 8005c46:	3501      	adds	r5, #1
 8005c48:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8005c4e:	6825      	ldr	r5, [r4, #0]
 8005c50:	6828      	ldr	r0, [r5, #0]
 8005c52:	2601      	movs	r6, #1
 8005c54:	43b0      	bics	r0, r6
 8005c56:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c58:	0020      	movs	r0, r4
 8005c5a:	f7ff ff3d 	bl	8005ad8 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8005c5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01c      	beq.n	8005c9e <HAL_DMA_Start_IT+0x82>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c64:	6822      	ldr	r2, [r4, #0]
 8005c66:	6813      	ldr	r3, [r2, #0]
 8005c68:	210e      	movs	r1, #14
 8005c6a:	430b      	orrs	r3, r1
 8005c6c:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005c6e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005c70:	6813      	ldr	r3, [r2, #0]
 8005c72:	03db      	lsls	r3, r3, #15
 8005c74:	d504      	bpl.n	8005c80 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005c76:	6811      	ldr	r1, [r2, #0]
 8005c78:	2380      	movs	r3, #128	@ 0x80
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	430b      	orrs	r3, r1
 8005c7e:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8005c80:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d004      	beq.n	8005c90 <HAL_DMA_Start_IT+0x74>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005c86:	6819      	ldr	r1, [r3, #0]
 8005c88:	2280      	movs	r2, #128	@ 0x80
 8005c8a:	0052      	lsls	r2, r2, #1
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8005c90:	6822      	ldr	r2, [r4, #0]
 8005c92:	6813      	ldr	r3, [r2, #0]
 8005c94:	2101      	movs	r1, #1
 8005c96:	430b      	orrs	r3, r1
 8005c98:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	e7d1      	b.n	8005c42 <HAL_DMA_Start_IT+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c9e:	6822      	ldr	r2, [r4, #0]
 8005ca0:	6813      	ldr	r3, [r2, #0]
 8005ca2:	2104      	movs	r1, #4
 8005ca4:	438b      	bics	r3, r1
 8005ca6:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005ca8:	6822      	ldr	r2, [r4, #0]
 8005caa:	6813      	ldr	r3, [r2, #0]
 8005cac:	3106      	adds	r1, #6
 8005cae:	430b      	orrs	r3, r1
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	e7dc      	b.n	8005c6e <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8005cb4:	2002      	movs	r0, #2
 8005cb6:	e7c4      	b.n	8005c42 <HAL_DMA_Start_IT+0x26>

08005cb8 <HAL_DMA_Abort>:
{
 8005cb8:	b530      	push	{r4, r5, lr}
  if (NULL == hdma)
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	d036      	beq.n	8005d2c <HAL_DMA_Abort+0x74>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005cbe:	2325      	movs	r3, #37	@ 0x25
 8005cc0:	5cc3      	ldrb	r3, [r0, r3]
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d006      	beq.n	8005cd4 <HAL_DMA_Abort+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cc6:	2304      	movs	r3, #4
 8005cc8:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8005cca:	3320      	adds	r3, #32
 8005ccc:	2200      	movs	r2, #0
 8005cce:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8005cd0:	2001      	movs	r0, #1
}
 8005cd2:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cd4:	6802      	ldr	r2, [r0, #0]
 8005cd6:	6813      	ldr	r3, [r2, #0]
 8005cd8:	210e      	movs	r1, #14
 8005cda:	438b      	bics	r3, r1
 8005cdc:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005cde:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8005ce0:	6813      	ldr	r3, [r2, #0]
 8005ce2:	4913      	ldr	r1, [pc, #76]	@ (8005d30 <HAL_DMA_Abort+0x78>)
 8005ce4:	400b      	ands	r3, r1
 8005ce6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005ce8:	6801      	ldr	r1, [r0, #0]
 8005cea:	680a      	ldr	r2, [r1, #0]
 8005cec:	2301      	movs	r3, #1
 8005cee:	439a      	bics	r2, r3
 8005cf0:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8005cf2:	4910      	ldr	r1, [pc, #64]	@ (8005d34 <HAL_DMA_Abort+0x7c>)
 8005cf4:	684c      	ldr	r4, [r1, #4]
 8005cf6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8005cf8:	251c      	movs	r5, #28
 8005cfa:	402a      	ands	r2, r5
 8005cfc:	4093      	lsls	r3, r2
 8005cfe:	4323      	orrs	r3, r4
 8005d00:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d02:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8005d04:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8005d06:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8005d08:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d006      	beq.n	8005d1c <HAL_DMA_Abort+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	4907      	ldr	r1, [pc, #28]	@ (8005d30 <HAL_DMA_Abort+0x78>)
 8005d12:	400a      	ands	r2, r1
 8005d14:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d16:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005d18:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8005d1a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005d1c:	2325      	movs	r3, #37	@ 0x25
 8005d1e:	2201      	movs	r2, #1
 8005d20:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8005d22:	3b01      	subs	r3, #1
 8005d24:	2200      	movs	r2, #0
 8005d26:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8005d28:	2000      	movs	r0, #0
 8005d2a:	e7d2      	b.n	8005cd2 <HAL_DMA_Abort+0x1a>
    return HAL_ERROR;
 8005d2c:	2001      	movs	r0, #1
 8005d2e:	e7d0      	b.n	8005cd2 <HAL_DMA_Abort+0x1a>
 8005d30:	fffffeff 	.word	0xfffffeff
 8005d34:	40020000 	.word	0x40020000

08005d38 <HAL_DMA_Abort_IT>:
{
 8005d38:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005d3a:	2325      	movs	r3, #37	@ 0x25
 8005d3c:	5cc3      	ldrb	r3, [r0, r3]
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d003      	beq.n	8005d4a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d42:	2304      	movs	r3, #4
 8005d44:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8005d46:	2001      	movs	r0, #1
}
 8005d48:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d4a:	6802      	ldr	r2, [r0, #0]
 8005d4c:	6813      	ldr	r3, [r2, #0]
 8005d4e:	210e      	movs	r1, #14
 8005d50:	438b      	bics	r3, r1
 8005d52:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005d54:	6801      	ldr	r1, [r0, #0]
 8005d56:	680a      	ldr	r2, [r1, #0]
 8005d58:	2301      	movs	r3, #1
 8005d5a:	439a      	bics	r2, r3
 8005d5c:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d5e:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8005d60:	680a      	ldr	r2, [r1, #0]
 8005d62:	4c13      	ldr	r4, [pc, #76]	@ (8005db0 <HAL_DMA_Abort_IT+0x78>)
 8005d64:	4022      	ands	r2, r4
 8005d66:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005d68:	4912      	ldr	r1, [pc, #72]	@ (8005db4 <HAL_DMA_Abort_IT+0x7c>)
 8005d6a:	684c      	ldr	r4, [r1, #4]
 8005d6c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8005d6e:	251c      	movs	r5, #28
 8005d70:	402a      	ands	r2, r5
 8005d72:	4093      	lsls	r3, r2
 8005d74:	4323      	orrs	r3, r4
 8005d76:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d78:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8005d7a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8005d7c:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8005d7e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d006      	beq.n	8005d92 <HAL_DMA_Abort_IT+0x5a>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	490a      	ldr	r1, [pc, #40]	@ (8005db0 <HAL_DMA_Abort_IT+0x78>)
 8005d88:	400a      	ands	r2, r1
 8005d8a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d8c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005d8e:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8005d90:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005d92:	2325      	movs	r3, #37	@ 0x25
 8005d94:	2201      	movs	r2, #1
 8005d96:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8005d9e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d002      	beq.n	8005daa <HAL_DMA_Abort_IT+0x72>
      hdma->XferAbortCallback(hdma);
 8005da4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8005da6:	2000      	movs	r0, #0
 8005da8:	e7ce      	b.n	8005d48 <HAL_DMA_Abort_IT+0x10>
 8005daa:	2000      	movs	r0, #0
 8005dac:	e7cc      	b.n	8005d48 <HAL_DMA_Abort_IT+0x10>
 8005dae:	46c0      	nop			@ (mov r8, r8)
 8005db0:	fffffeff 	.word	0xfffffeff
 8005db4:	40020000 	.word	0x40020000

08005db8 <HAL_DMA_IRQHandler>:
{
 8005db8:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 8005dba:	4b31      	ldr	r3, [pc, #196]	@ (8005e80 <HAL_DMA_IRQHandler+0xc8>)
 8005dbc:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005dbe:	6804      	ldr	r4, [r0, #0]
 8005dc0:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005dc2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005dc4:	221c      	movs	r2, #28
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	3a18      	subs	r2, #24
 8005dca:	409a      	lsls	r2, r3
 8005dcc:	4211      	tst	r1, r2
 8005dce:	d016      	beq.n	8005dfe <HAL_DMA_IRQHandler+0x46>
 8005dd0:	076a      	lsls	r2, r5, #29
 8005dd2:	d514      	bpl.n	8005dfe <HAL_DMA_IRQHandler+0x46>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	069b      	lsls	r3, r3, #26
 8005dd8:	d403      	bmi.n	8005de2 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	2204      	movs	r2, #4
 8005dde:	4393      	bics	r3, r2
 8005de0:	6023      	str	r3, [r4, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8005de2:	4927      	ldr	r1, [pc, #156]	@ (8005e80 <HAL_DMA_IRQHandler+0xc8>)
 8005de4:	684c      	ldr	r4, [r1, #4]
 8005de6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8005de8:	231c      	movs	r3, #28
 8005dea:	401a      	ands	r2, r3
 8005dec:	3b18      	subs	r3, #24
 8005dee:	4093      	lsls	r3, r2
 8005df0:	4323      	orrs	r3, r4
 8005df2:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8005df4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d000      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x44>
        hdma->XferHalfCpltCallback(hdma);
 8005dfa:	4798      	blx	r3
}
 8005dfc:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005dfe:	2202      	movs	r2, #2
 8005e00:	409a      	lsls	r2, r3
 8005e02:	4211      	tst	r1, r2
 8005e04:	d01c      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x88>
 8005e06:	07aa      	lsls	r2, r5, #30
 8005e08:	d51a      	bpl.n	8005e40 <HAL_DMA_IRQHandler+0x88>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	069b      	lsls	r3, r3, #26
 8005e0e:	d406      	bmi.n	8005e1e <HAL_DMA_IRQHandler+0x66>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	220a      	movs	r2, #10
 8005e14:	4393      	bics	r3, r2
 8005e16:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8005e18:	2325      	movs	r3, #37	@ 0x25
 8005e1a:	3a09      	subs	r2, #9
 8005e1c:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005e1e:	4918      	ldr	r1, [pc, #96]	@ (8005e80 <HAL_DMA_IRQHandler+0xc8>)
 8005e20:	684c      	ldr	r4, [r1, #4]
 8005e22:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8005e24:	231c      	movs	r3, #28
 8005e26:	401a      	ands	r2, r3
 8005e28:	3b1a      	subs	r3, #26
 8005e2a:	4093      	lsls	r3, r2
 8005e2c:	4323      	orrs	r3, r4
 8005e2e:	604b      	str	r3, [r1, #4]
      __HAL_UNLOCK(hdma);
 8005e30:	2324      	movs	r3, #36	@ 0x24
 8005e32:	2200      	movs	r2, #0
 8005e34:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 8005e36:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0df      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x44>
        hdma->XferCpltCallback(hdma);
 8005e3c:	4798      	blx	r3
 8005e3e:	e7dd      	b.n	8005dfc <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005e40:	2208      	movs	r2, #8
 8005e42:	409a      	lsls	r2, r3
 8005e44:	4211      	tst	r1, r2
 8005e46:	d0d9      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x44>
 8005e48:	072d      	lsls	r5, r5, #28
 8005e4a:	d5d7      	bpl.n	8005dfc <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	220e      	movs	r2, #14
 8005e50:	4393      	bics	r3, r2
 8005e52:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005e54:	490a      	ldr	r1, [pc, #40]	@ (8005e80 <HAL_DMA_IRQHandler+0xc8>)
 8005e56:	684c      	ldr	r4, [r1, #4]
 8005e58:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8005e5a:	231c      	movs	r3, #28
 8005e5c:	401a      	ands	r2, r3
 8005e5e:	3b1b      	subs	r3, #27
 8005e60:	001d      	movs	r5, r3
 8005e62:	4095      	lsls	r5, r2
 8005e64:	002a      	movs	r2, r5
 8005e66:	4322      	orrs	r2, r4
 8005e68:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e6a:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8005e6c:	2225      	movs	r2, #37	@ 0x25
 8005e6e:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8005e70:	3323      	adds	r3, #35	@ 0x23
 8005e72:	2200      	movs	r2, #0
 8005e74:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8005e76:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0bf      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 8005e7c:	4798      	blx	r3
  return;
 8005e7e:	e7bd      	b.n	8005dfc <HAL_DMA_IRQHandler+0x44>
 8005e80:	40020000 	.word	0x40020000

08005e84 <HAL_FLASH_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_OK;

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8005e84:	4b06      	ldr	r3, [pc, #24]	@ (8005ea0 <HAL_FLASH_Unlock+0x1c>)
 8005e86:	695b      	ldr	r3, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8005e88:	2000      	movs	r0, #0
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	db00      	blt.n	8005e90 <HAL_FLASH_Unlock+0xc>
      status = HAL_ERROR;
    }
  }

  return status;
}
 8005e8e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005e90:	4b03      	ldr	r3, [pc, #12]	@ (8005ea0 <HAL_FLASH_Unlock+0x1c>)
 8005e92:	4a04      	ldr	r2, [pc, #16]	@ (8005ea4 <HAL_FLASH_Unlock+0x20>)
 8005e94:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005e96:	4a04      	ldr	r2, [pc, #16]	@ (8005ea8 <HAL_FLASH_Unlock+0x24>)
 8005e98:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8005e9a:	6958      	ldr	r0, [r3, #20]
 8005e9c:	0fc0      	lsrs	r0, r0, #31
 8005e9e:	e7f6      	b.n	8005e8e <HAL_FLASH_Unlock+0xa>
 8005ea0:	40022000 	.word	0x40022000
 8005ea4:	45670123 	.word	0x45670123
 8005ea8:	cdef89ab 	.word	0xcdef89ab

08005eac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	0004      	movs	r4, r0
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005eb0:	f7ff f816 	bl	8004ee0 <HAL_GetTick>
 8005eb4:	0007      	movs	r7, r0
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8005eb6:	4e16      	ldr	r6, [pc, #88]	@ (8005f10 <FLASH_WaitForLastOperation+0x64>)
 8005eb8:	2580      	movs	r5, #128	@ 0x80
 8005eba:	026d      	lsls	r5, r5, #9
 8005ebc:	6933      	ldr	r3, [r6, #16]
 8005ebe:	422b      	tst	r3, r5
 8005ec0:	d008      	beq.n	8005ed4 <FLASH_WaitForLastOperation+0x28>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005ec2:	1c63      	adds	r3, r4, #1
 8005ec4:	d0fa      	beq.n	8005ebc <FLASH_WaitForLastOperation+0x10>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8005ec6:	f7ff f80b 	bl	8004ee0 <HAL_GetTick>
 8005eca:	1bc0      	subs	r0, r0, r7
 8005ecc:	42a0      	cmp	r0, r4
 8005ece:	d3f5      	bcc.n	8005ebc <FLASH_WaitForLastOperation+0x10>
      {
        return HAL_TIMEOUT;
 8005ed0:	2003      	movs	r0, #3
 8005ed2:	e01c      	b.n	8005f0e <FLASH_WaitForLastOperation+0x62>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8005ed4:	490e      	ldr	r1, [pc, #56]	@ (8005f10 <FLASH_WaitForLastOperation+0x64>)
 8005ed6:	690a      	ldr	r2, [r1, #16]
 8005ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8005f14 <FLASH_WaitForLastOperation+0x68>)
 8005eda:	0015      	movs	r5, r2
 8005edc:	401d      	ands	r5, r3

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8005ede:	480e      	ldr	r0, [pc, #56]	@ (8005f18 <FLASH_WaitForLastOperation+0x6c>)
 8005ee0:	6108      	str	r0, [r1, #16]

  if (error != 0x00U)
 8005ee2:	421a      	tst	r2, r3
 8005ee4:	d10e      	bne.n	8005f04 <FLASH_WaitForLastOperation+0x58>
    pFlash.ErrorCode = error;
    return HAL_ERROR;
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8005ee6:	000e      	movs	r6, r1
 8005ee8:	2580      	movs	r5, #128	@ 0x80
 8005eea:	02ed      	lsls	r5, r5, #11
 8005eec:	6933      	ldr	r3, [r6, #16]
 8005eee:	422b      	tst	r3, r5
 8005ef0:	d00c      	beq.n	8005f0c <FLASH_WaitForLastOperation+0x60>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005ef2:	1c63      	adds	r3, r4, #1
 8005ef4:	d0fa      	beq.n	8005eec <FLASH_WaitForLastOperation+0x40>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8005ef6:	f7fe fff3 	bl	8004ee0 <HAL_GetTick>
 8005efa:	1bc0      	subs	r0, r0, r7
 8005efc:	42a0      	cmp	r0, r4
 8005efe:	d3f5      	bcc.n	8005eec <FLASH_WaitForLastOperation+0x40>
      {
        return HAL_TIMEOUT;
 8005f00:	2003      	movs	r0, #3
 8005f02:	e004      	b.n	8005f0e <FLASH_WaitForLastOperation+0x62>
    pFlash.ErrorCode = error;
 8005f04:	4b05      	ldr	r3, [pc, #20]	@ (8005f1c <FLASH_WaitForLastOperation+0x70>)
 8005f06:	605d      	str	r5, [r3, #4]
    return HAL_ERROR;
 8005f08:	2001      	movs	r0, #1
 8005f0a:	e000      	b.n	8005f0e <FLASH_WaitForLastOperation+0x62>
      }
    }
  }

  return HAL_OK;
 8005f0c:	2000      	movs	r0, #0
}
 8005f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f10:	40022000 	.word	0x40022000
 8005f14:	0000c3fa 	.word	0x0000c3fa
 8005f18:	0000c3fb 	.word	0x0000c3fb
 8005f1c:	20000d74 	.word	0x20000d74

08005f20 <HAL_FLASH_Program>:
{
 8005f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f22:	0006      	movs	r6, r0
 8005f24:	000f      	movs	r7, r1
 8005f26:	0014      	movs	r4, r2
 8005f28:	001d      	movs	r5, r3
  __HAL_LOCK(&pFlash);
 8005f2a:	4b16      	ldr	r3, [pc, #88]	@ (8005f84 <HAL_FLASH_Program+0x64>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d026      	beq.n	8005f80 <HAL_FLASH_Program+0x60>
 8005f32:	4b14      	ldr	r3, [pc, #80]	@ (8005f84 <HAL_FLASH_Program+0x64>)
 8005f34:	2201      	movs	r2, #1
 8005f36:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005f38:	2200      	movs	r2, #0
 8005f3a:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005f3c:	20fa      	movs	r0, #250	@ 0xfa
 8005f3e:	0080      	lsls	r0, r0, #2
 8005f40:	f7ff ffb4 	bl	8005eac <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8005f44:	2800      	cmp	r0, #0
 8005f46:	d10d      	bne.n	8005f64 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005f48:	2e01      	cmp	r6, #1
 8005f4a:	d00f      	beq.n	8005f6c <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005f4c:	0021      	movs	r1, r4
 8005f4e:	0038      	movs	r0, r7
 8005f50:	f003 fa96 	bl	8009480 <__FLASH_Program_Fast_veneer>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005f54:	20fa      	movs	r0, #250	@ 0xfa
 8005f56:	0080      	lsls	r0, r0, #2
 8005f58:	f7ff ffa8 	bl	8005eac <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8005f88 <HAL_FLASH_Program+0x68>)
 8005f5e:	6953      	ldr	r3, [r2, #20]
 8005f60:	43b3      	bics	r3, r6
 8005f62:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8005f64:	4b07      	ldr	r3, [pc, #28]	@ (8005f84 <HAL_FLASH_Program+0x64>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	701a      	strb	r2, [r3, #0]
}
 8005f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005f6c:	4a06      	ldr	r2, [pc, #24]	@ (8005f88 <HAL_FLASH_Program+0x68>)
 8005f6e:	6953      	ldr	r3, [r2, #20]
 8005f70:	2101      	movs	r1, #1
 8005f72:	430b      	orrs	r3, r1
 8005f74:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005f76:	603c      	str	r4, [r7, #0]
 8005f78:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005f7c:	607d      	str	r5, [r7, #4]
}
 8005f7e:	e7e9      	b.n	8005f54 <HAL_FLASH_Program+0x34>
  __HAL_LOCK(&pFlash);
 8005f80:	2002      	movs	r0, #2
 8005f82:	e7f2      	b.n	8005f6a <HAL_FLASH_Program+0x4a>
 8005f84:	20000d74 	.word	0x20000d74
 8005f88:	40022000 	.word	0x40022000

08005f8c <HAL_FLASH_Lock>:
{
 8005f8c:	b510      	push	{r4, lr}
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005f8e:	20fa      	movs	r0, #250	@ 0xfa
 8005f90:	0080      	lsls	r0, r0, #2
 8005f92:	f7ff ff8b 	bl	8005eac <FLASH_WaitForLastOperation>
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005f96:	4b05      	ldr	r3, [pc, #20]	@ (8005fac <HAL_FLASH_Lock+0x20>)
 8005f98:	6959      	ldr	r1, [r3, #20]
 8005f9a:	2280      	movs	r2, #128	@ 0x80
 8005f9c:	0612      	lsls	r2, r2, #24
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8005fa2:	6958      	ldr	r0, [r3, #20]
 8005fa4:	43c0      	mvns	r0, r0
  return status;
 8005fa6:	0fc0      	lsrs	r0, r0, #31
}
 8005fa8:	bd10      	pop	{r4, pc}
 8005faa:	46c0      	nop			@ (mov r8, r8)
 8005fac:	40022000 	.word	0x40022000

08005fb0 <FLASH_PageErase>:
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8005fb0:	4a04      	ldr	r2, [pc, #16]	@ (8005fc4 <FLASH_PageErase+0x14>)
 8005fb2:	6953      	ldr	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8005fb4:	00c9      	lsls	r1, r1, #3
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8005fb6:	4804      	ldr	r0, [pc, #16]	@ (8005fc8 <FLASH_PageErase+0x18>)
 8005fb8:	4003      	ands	r3, r0
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8005fba:	4319      	orrs	r1, r3
 8005fbc:	4b03      	ldr	r3, [pc, #12]	@ (8005fcc <FLASH_PageErase+0x1c>)
 8005fbe:	430b      	orrs	r3, r1
 8005fc0:	6153      	str	r3, [r2, #20]
}
 8005fc2:	4770      	bx	lr
 8005fc4:	40022000 	.word	0x40022000
 8005fc8:	ffffe007 	.word	0xffffe007
 8005fcc:	00010002 	.word	0x00010002

08005fd0 <HAL_FLASHEx_Erase>:
{
 8005fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd2:	0004      	movs	r4, r0
 8005fd4:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8005fd6:	4b22      	ldr	r3, [pc, #136]	@ (8006060 <HAL_FLASHEx_Erase+0x90>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d03d      	beq.n	800605a <HAL_FLASHEx_Erase+0x8a>
 8005fde:	4b20      	ldr	r3, [pc, #128]	@ (8006060 <HAL_FLASHEx_Erase+0x90>)
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005fe8:	20fa      	movs	r0, #250	@ 0xfa
 8005fea:	0080      	lsls	r0, r0, #2
 8005fec:	f7ff ff5e 	bl	8005eac <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	d12e      	bne.n	8006052 <HAL_FLASHEx_Erase+0x82>
    pEraseInit->Banks = FLASH_BANK_1;
 8005ff4:	2304      	movs	r3, #4
 8005ff6:	6063      	str	r3, [r4, #4]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d019      	beq.n	8006032 <HAL_FLASHEx_Erase+0x62>
      *PageError = 0xFFFFFFFFU;
 8005ffe:	2301      	movs	r3, #1
 8006000:	425b      	negs	r3, r3
 8006002:	6033      	str	r3, [r6, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8006004:	68a5      	ldr	r5, [r4, #8]
 8006006:	68e3      	ldr	r3, [r4, #12]
 8006008:	18eb      	adds	r3, r5, r3
 800600a:	429d      	cmp	r5, r3
 800600c:	d21c      	bcs.n	8006048 <HAL_FLASHEx_Erase+0x78>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800600e:	27fa      	movs	r7, #250	@ 0xfa
 8006010:	00bf      	lsls	r7, r7, #2
        FLASH_PageErase(pEraseInit->Banks, index);
 8006012:	6860      	ldr	r0, [r4, #4]
 8006014:	0029      	movs	r1, r5
 8006016:	f7ff ffcb 	bl	8005fb0 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800601a:	0038      	movs	r0, r7
 800601c:	f7ff ff46 	bl	8005eac <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8006020:	2800      	cmp	r0, #0
 8006022:	d110      	bne.n	8006046 <HAL_FLASHEx_Erase+0x76>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8006024:	3501      	adds	r5, #1
 8006026:	68a3      	ldr	r3, [r4, #8]
 8006028:	68e2      	ldr	r2, [r4, #12]
 800602a:	189b      	adds	r3, r3, r2
 800602c:	42ab      	cmp	r3, r5
 800602e:	d8f0      	bhi.n	8006012 <HAL_FLASHEx_Erase+0x42>
 8006030:	e00a      	b.n	8006048 <HAL_FLASHEx_Erase+0x78>
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8006032:	4a0c      	ldr	r2, [pc, #48]	@ (8006064 <HAL_FLASHEx_Erase+0x94>)
 8006034:	6951      	ldr	r1, [r2, #20]
 8006036:	4b0c      	ldr	r3, [pc, #48]	@ (8006068 <HAL_FLASHEx_Erase+0x98>)
 8006038:	430b      	orrs	r3, r1
 800603a:	6153      	str	r3, [r2, #20]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800603c:	30fa      	adds	r0, #250	@ 0xfa
 800603e:	0080      	lsls	r0, r0, #2
 8006040:	f7ff ff34 	bl	8005eac <FLASH_WaitForLastOperation>
 8006044:	e005      	b.n	8006052 <HAL_FLASHEx_Erase+0x82>
          *PageError = index;
 8006046:	6035      	str	r5, [r6, #0]
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006048:	4a06      	ldr	r2, [pc, #24]	@ (8006064 <HAL_FLASHEx_Erase+0x94>)
 800604a:	6953      	ldr	r3, [r2, #20]
 800604c:	2102      	movs	r1, #2
 800604e:	438b      	bics	r3, r1
 8006050:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8006052:	4b03      	ldr	r3, [pc, #12]	@ (8006060 <HAL_FLASHEx_Erase+0x90>)
 8006054:	2200      	movs	r2, #0
 8006056:	701a      	strb	r2, [r3, #0]
}
 8006058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 800605a:	2002      	movs	r0, #2
 800605c:	e7fc      	b.n	8006058 <HAL_FLASHEx_Erase+0x88>
 800605e:	46c0      	nop			@ (mov r8, r8)
 8006060:	20000d74 	.word	0x20000d74
 8006064:	40022000 	.word	0x40022000
 8006068:	00010004 	.word	0x00010004

0800606c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800606c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800606e:	46de      	mov	lr, fp
 8006070:	4657      	mov	r7, sl
 8006072:	464e      	mov	r6, r9
 8006074:	4645      	mov	r5, r8
 8006076:	b5e0      	push	{r5, r6, r7, lr}
 8006078:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800607a:	680f      	ldr	r7, [r1, #0]
 800607c:	2f00      	cmp	r7, #0
 800607e:	d100      	bne.n	8006082 <HAL_GPIO_Init+0x16>
 8006080:	e0d1      	b.n	8006226 <HAL_GPIO_Init+0x1ba>
 8006082:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8006084:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006086:	2401      	movs	r4, #1
 8006088:	46a0      	mov	r8, r4

    if (iocurrent != 0x00u)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800608a:	3402      	adds	r4, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800608c:	4d69      	ldr	r5, [pc, #420]	@ (8006234 <HAL_GPIO_Init+0x1c8>)
 800608e:	46ab      	mov	fp, r5
 8006090:	e052      	b.n	8006138 <HAL_GPIO_Init+0xcc>
        temp = GPIOx->OSPEEDR;
 8006092:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006094:	0025      	movs	r5, r4
 8006096:	4095      	lsls	r5, r2
 8006098:	43af      	bics	r7, r5
 800609a:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800609c:	68cf      	ldr	r7, [r1, #12]
 800609e:	4097      	lsls	r7, r2
 80060a0:	464d      	mov	r5, r9
 80060a2:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 80060a4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80060a6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060a8:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060aa:	684e      	ldr	r6, [r1, #4]
 80060ac:	0936      	lsrs	r6, r6, #4
 80060ae:	4645      	mov	r5, r8
 80060b0:	402e      	ands	r6, r5
 80060b2:	409e      	lsls	r6, r3
 80060b4:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80060b6:	6046      	str	r6, [r0, #4]
 80060b8:	e04a      	b.n	8006150 <HAL_GPIO_Init+0xe4>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80060ba:	2600      	movs	r6, #0
 80060bc:	4655      	mov	r5, sl
 80060be:	40ae      	lsls	r6, r5
 80060c0:	464d      	mov	r5, r9
 80060c2:	432e      	orrs	r6, r5
        EXTI->EXTICR[position >> 2u] = temp;
 80060c4:	663e      	str	r6, [r7, #96]	@ 0x60
        temp = EXTI->RTSR1;
 80060c6:	465d      	mov	r5, fp
 80060c8:	682d      	ldr	r5, [r5, #0]
 80060ca:	46aa      	mov	sl, r5
        temp &= ~(iocurrent);
 80060cc:	4665      	mov	r5, ip
 80060ce:	43ed      	mvns	r5, r5
 80060d0:	9501      	str	r5, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80060d2:	684d      	ldr	r5, [r1, #4]
 80060d4:	2680      	movs	r6, #128	@ 0x80
 80060d6:	0376      	lsls	r6, r6, #13
 80060d8:	4235      	tst	r5, r6
 80060da:	d000      	beq.n	80060de <HAL_GPIO_Init+0x72>
 80060dc:	e094      	b.n	8006208 <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 80060de:	4656      	mov	r6, sl
 80060e0:	9d01      	ldr	r5, [sp, #4]
 80060e2:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80060e4:	465d      	mov	r5, fp
 80060e6:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80060e8:	686d      	ldr	r5, [r5, #4]
 80060ea:	46aa      	mov	sl, r5
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80060ec:	684d      	ldr	r5, [r1, #4]
 80060ee:	2680      	movs	r6, #128	@ 0x80
 80060f0:	03b6      	lsls	r6, r6, #14
 80060f2:	4235      	tst	r5, r6
 80060f4:	d000      	beq.n	80060f8 <HAL_GPIO_Init+0x8c>
 80060f6:	e08b      	b.n	8006210 <HAL_GPIO_Init+0x1a4>
        temp &= ~(iocurrent);
 80060f8:	4656      	mov	r6, sl
 80060fa:	9d01      	ldr	r5, [sp, #4]
 80060fc:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80060fe:	465d      	mov	r5, fp
 8006100:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006102:	2684      	movs	r6, #132	@ 0x84
 8006104:	59ae      	ldr	r6, [r5, r6]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006106:	684d      	ldr	r5, [r1, #4]
 8006108:	03ad      	lsls	r5, r5, #14
 800610a:	d500      	bpl.n	800610e <HAL_GPIO_Init+0xa2>
 800610c:	e084      	b.n	8006218 <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 800610e:	9d01      	ldr	r5, [sp, #4]
 8006110:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8006112:	2584      	movs	r5, #132	@ 0x84
 8006114:	465f      	mov	r7, fp
 8006116:	517e      	str	r6, [r7, r5]

        temp = EXTI->IMR1;
 8006118:	2680      	movs	r6, #128	@ 0x80
 800611a:	59be      	ldr	r6, [r7, r6]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800611c:	684d      	ldr	r5, [r1, #4]
 800611e:	03ed      	lsls	r5, r5, #15
 8006120:	d47d      	bmi.n	800621e <HAL_GPIO_Init+0x1b2>
        temp &= ~(iocurrent);
 8006122:	9d01      	ldr	r5, [sp, #4]
 8006124:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8006126:	2780      	movs	r7, #128	@ 0x80
 8006128:	465d      	mov	r5, fp
 800612a:	51ee      	str	r6, [r5, r7]
      }
    }

    position++;
 800612c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800612e:	680f      	ldr	r7, [r1, #0]
 8006130:	3202      	adds	r2, #2
 8006132:	003e      	movs	r6, r7
 8006134:	40de      	lsrs	r6, r3
 8006136:	d076      	beq.n	8006226 <HAL_GPIO_Init+0x1ba>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006138:	4646      	mov	r6, r8
 800613a:	409e      	lsls	r6, r3
 800613c:	003d      	movs	r5, r7
 800613e:	4035      	ands	r5, r6
 8006140:	46ac      	mov	ip, r5
    if (iocurrent != 0x00u)
 8006142:	4237      	tst	r7, r6
 8006144:	d0f2      	beq.n	800612c <HAL_GPIO_Init+0xc0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006146:	684f      	ldr	r7, [r1, #4]
 8006148:	4027      	ands	r7, r4
 800614a:	3f01      	subs	r7, #1
 800614c:	2f01      	cmp	r7, #1
 800614e:	d9a0      	bls.n	8006092 <HAL_GPIO_Init+0x26>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006150:	684e      	ldr	r6, [r1, #4]
 8006152:	4026      	ands	r6, r4
 8006154:	2e03      	cmp	r6, #3
 8006156:	d022      	beq.n	800619e <HAL_GPIO_Init+0x132>
        temp = GPIOx->PUPDR;
 8006158:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800615a:	0026      	movs	r6, r4
 800615c:	4096      	lsls	r6, r2
 800615e:	43b7      	bics	r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006160:	688e      	ldr	r6, [r1, #8]
 8006162:	4096      	lsls	r6, r2
 8006164:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 8006166:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006168:	684e      	ldr	r6, [r1, #4]
 800616a:	4026      	ands	r6, r4
 800616c:	2e02      	cmp	r6, #2
 800616e:	d116      	bne.n	800619e <HAL_GPIO_Init+0x132>
        temp = GPIOx->AFR[position >> 3u];
 8006170:	08de      	lsrs	r6, r3, #3
 8006172:	00b6      	lsls	r6, r6, #2
 8006174:	1985      	adds	r5, r0, r6
 8006176:	9501      	str	r5, [sp, #4]
 8006178:	6a2d      	ldr	r5, [r5, #32]
 800617a:	46aa      	mov	sl, r5
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800617c:	2707      	movs	r7, #7
 800617e:	401f      	ands	r7, r3
 8006180:	00bf      	lsls	r7, r7, #2
 8006182:	250f      	movs	r5, #15
 8006184:	40bd      	lsls	r5, r7
 8006186:	46a9      	mov	r9, r5
 8006188:	4655      	mov	r5, sl
 800618a:	464e      	mov	r6, r9
 800618c:	43b5      	bics	r5, r6
 800618e:	46aa      	mov	sl, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006190:	690d      	ldr	r5, [r1, #16]
 8006192:	40bd      	lsls	r5, r7
 8006194:	002f      	movs	r7, r5
 8006196:	4655      	mov	r5, sl
 8006198:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 800619a:	9d01      	ldr	r5, [sp, #4]
 800619c:	622f      	str	r7, [r5, #32]
      temp = GPIOx->MODER;
 800619e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80061a0:	0026      	movs	r6, r4
 80061a2:	4096      	lsls	r6, r2
 80061a4:	43b7      	bics	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80061a6:	684e      	ldr	r6, [r1, #4]
 80061a8:	4026      	ands	r6, r4
 80061aa:	4096      	lsls	r6, r2
 80061ac:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80061ae:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80061b0:	684e      	ldr	r6, [r1, #4]
 80061b2:	25c0      	movs	r5, #192	@ 0xc0
 80061b4:	02ad      	lsls	r5, r5, #10
 80061b6:	422e      	tst	r6, r5
 80061b8:	d0b8      	beq.n	800612c <HAL_GPIO_Init+0xc0>
        temp = EXTI->EXTICR[position >> 2u];
 80061ba:	089f      	lsrs	r7, r3, #2
 80061bc:	00bf      	lsls	r7, r7, #2
 80061be:	4d1d      	ldr	r5, [pc, #116]	@ (8006234 <HAL_GPIO_Init+0x1c8>)
 80061c0:	46a9      	mov	r9, r5
 80061c2:	444f      	add	r7, r9
 80061c4:	6e3d      	ldr	r5, [r7, #96]	@ 0x60
 80061c6:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80061c8:	0025      	movs	r5, r4
 80061ca:	401d      	ands	r5, r3
 80061cc:	00ed      	lsls	r5, r5, #3
 80061ce:	46aa      	mov	sl, r5
 80061d0:	250f      	movs	r5, #15
 80061d2:	4656      	mov	r6, sl
 80061d4:	40b5      	lsls	r5, r6
 80061d6:	9e01      	ldr	r6, [sp, #4]
 80061d8:	43ae      	bics	r6, r5
 80061da:	46b1      	mov	r9, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80061dc:	25a0      	movs	r5, #160	@ 0xa0
 80061de:	05ed      	lsls	r5, r5, #23
 80061e0:	42a8      	cmp	r0, r5
 80061e2:	d100      	bne.n	80061e6 <HAL_GPIO_Init+0x17a>
 80061e4:	e769      	b.n	80060ba <HAL_GPIO_Init+0x4e>
 80061e6:	4e14      	ldr	r6, [pc, #80]	@ (8006238 <HAL_GPIO_Init+0x1cc>)
 80061e8:	42b0      	cmp	r0, r6
 80061ea:	d009      	beq.n	8006200 <HAL_GPIO_Init+0x194>
 80061ec:	4e13      	ldr	r6, [pc, #76]	@ (800623c <HAL_GPIO_Init+0x1d0>)
 80061ee:	42b0      	cmp	r0, r6
 80061f0:	d008      	beq.n	8006204 <HAL_GPIO_Init+0x198>
 80061f2:	4d13      	ldr	r5, [pc, #76]	@ (8006240 <HAL_GPIO_Init+0x1d4>)
 80061f4:	1946      	adds	r6, r0, r5
 80061f6:	1e75      	subs	r5, r6, #1
 80061f8:	41ae      	sbcs	r6, r5
 80061fa:	0076      	lsls	r6, r6, #1
 80061fc:	3603      	adds	r6, #3
 80061fe:	e75d      	b.n	80060bc <HAL_GPIO_Init+0x50>
 8006200:	2601      	movs	r6, #1
 8006202:	e75b      	b.n	80060bc <HAL_GPIO_Init+0x50>
 8006204:	2602      	movs	r6, #2
 8006206:	e759      	b.n	80060bc <HAL_GPIO_Init+0x50>
          temp |= iocurrent;
 8006208:	4665      	mov	r5, ip
 800620a:	4656      	mov	r6, sl
 800620c:	432e      	orrs	r6, r5
 800620e:	e769      	b.n	80060e4 <HAL_GPIO_Init+0x78>
          temp |= iocurrent;
 8006210:	4665      	mov	r5, ip
 8006212:	4656      	mov	r6, sl
 8006214:	432e      	orrs	r6, r5
 8006216:	e772      	b.n	80060fe <HAL_GPIO_Init+0x92>
          temp |= iocurrent;
 8006218:	4665      	mov	r5, ip
 800621a:	432e      	orrs	r6, r5
 800621c:	e779      	b.n	8006112 <HAL_GPIO_Init+0xa6>
          temp |= iocurrent;
 800621e:	4665      	mov	r5, ip
 8006220:	4335      	orrs	r5, r6
 8006222:	002e      	movs	r6, r5
 8006224:	e77f      	b.n	8006126 <HAL_GPIO_Init+0xba>
  }
}
 8006226:	b003      	add	sp, #12
 8006228:	bcf0      	pop	{r4, r5, r6, r7}
 800622a:	46bb      	mov	fp, r7
 800622c:	46b2      	mov	sl, r6
 800622e:	46a9      	mov	r9, r5
 8006230:	46a0      	mov	r8, r4
 8006232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006234:	40021800 	.word	0x40021800
 8006238:	50000400 	.word	0x50000400
 800623c:	50000800 	.word	0x50000800
 8006240:	affff400 	.word	0xaffff400

08006244 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006244:	6900      	ldr	r0, [r0, #16]
 8006246:	4008      	ands	r0, r1
 8006248:	1e43      	subs	r3, r0, #1
 800624a:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800624c:	b2c0      	uxtb	r0, r0
}
 800624e:	4770      	bx	lr

08006250 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006250:	2a00      	cmp	r2, #0
 8006252:	d001      	beq.n	8006258 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006254:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006256:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006258:	6281      	str	r1, [r0, #40]	@ 0x28
}
 800625a:	e7fc      	b.n	8006256 <HAL_GPIO_WritePin+0x6>

0800625c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800625c:	b510      	push	{r4, lr}
 800625e:	0004      	movs	r4, r0
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8006260:	4b09      	ldr	r3, [pc, #36]	@ (8006288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	4218      	tst	r0, r3
 8006266:	d104      	bne.n	8006272 <HAL_GPIO_EXTI_IRQHandler+0x16>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8006268:	4b07      	ldr	r3, [pc, #28]	@ (8006288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	4223      	tst	r3, r4
 800626e:	d105      	bne.n	800627c <HAL_GPIO_EXTI_IRQHandler+0x20>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
  }
}
 8006270:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8006272:	4b05      	ldr	r3, [pc, #20]	@ (8006288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006274:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8006276:	f7fd fc85 	bl	8003b84 <HAL_GPIO_EXTI_Rising_Callback>
 800627a:	e7f5      	b.n	8006268 <HAL_GPIO_EXTI_IRQHandler+0xc>
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800627c:	4b02      	ldr	r3, [pc, #8]	@ (8006288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800627e:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8006280:	0020      	movs	r0, r4
 8006282:	f7fd fc5f 	bl	8003b44 <HAL_GPIO_EXTI_Falling_Callback>
}
 8006286:	e7f3      	b.n	8006270 <HAL_GPIO_EXTI_IRQHandler+0x14>
 8006288:	40021800 	.word	0x40021800

0800628c <HAL_LPTIM_CompareMatchCallback>:
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800628c:	4770      	bx	lr

0800628e <HAL_LPTIM_AutoReloadMatchCallback>:
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800628e:	4770      	bx	lr

08006290 <HAL_LPTIM_TriggerCallback>:
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8006290:	4770      	bx	lr

08006292 <HAL_LPTIM_CompareWriteCallback>:
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8006292:	4770      	bx	lr

08006294 <HAL_LPTIM_AutoReloadWriteCallback>:
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8006294:	4770      	bx	lr

08006296 <HAL_LPTIM_DirectionUpCallback>:
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8006296:	4770      	bx	lr

08006298 <HAL_LPTIM_DirectionDownCallback>:
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8006298:	4770      	bx	lr
	...

0800629c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800629c:	b570      	push	{r4, r5, r6, lr}
 800629e:	0005      	movs	r5, r0
 80062a0:	000c      	movs	r4, r1
  HAL_StatusTypeDef result = HAL_OK;
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80062a2:	4b0c      	ldr	r3, [pc, #48]	@ (80062d4 <LPTIM_WaitForFlag+0x38>)
 80062a4:	6818      	ldr	r0, [r3, #0]
 80062a6:	490c      	ldr	r1, [pc, #48]	@ (80062d8 <LPTIM_WaitForFlag+0x3c>)
 80062a8:	f7f9 ff2e 	bl	8000108 <__udivsi3>
 80062ac:	0143      	lsls	r3, r0, #5
 80062ae:	1a1b      	subs	r3, r3, r0
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	181b      	adds	r3, r3, r0
 80062b4:	00db      	lsls	r3, r3, #3
  do
  {
    count--;
 80062b6:	3b01      	subs	r3, #1
    if (count == 0UL)
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d006      	beq.n	80062ca <LPTIM_WaitForFlag+0x2e>
    {
      result = HAL_TIMEOUT;
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80062bc:	682a      	ldr	r2, [r5, #0]
 80062be:	6812      	ldr	r2, [r2, #0]
 80062c0:	4022      	ands	r2, r4
 80062c2:	42a2      	cmp	r2, r4
 80062c4:	d1f7      	bne.n	80062b6 <LPTIM_WaitForFlag+0x1a>
 80062c6:	2000      	movs	r0, #0
 80062c8:	e002      	b.n	80062d0 <LPTIM_WaitForFlag+0x34>
 80062ca:	682b      	ldr	r3, [r5, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
      result = HAL_TIMEOUT;
 80062ce:	2003      	movs	r0, #3

  return result;
}
 80062d0:	bd70      	pop	{r4, r5, r6, pc}
 80062d2:	46c0      	nop			@ (mov r8, r8)
 80062d4:	2000044c 	.word	0x2000044c
 80062d8:	00004e20 	.word	0x00004e20

080062dc <HAL_LPTIM_Init>:
{
 80062dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062de:	1e04      	subs	r4, r0, #0
  if (hlptim == NULL)
 80062e0:	d069      	beq.n	80063b6 <HAL_LPTIM_Init+0xda>
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80062e2:	2336      	movs	r3, #54	@ 0x36
 80062e4:	5cc3      	ldrb	r3, [r0, r3]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d02a      	beq.n	8006340 <HAL_LPTIM_Init+0x64>
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80062ea:	2336      	movs	r3, #54	@ 0x36
 80062ec:	2202      	movs	r2, #2
 80062ee:	54e2      	strb	r2, [r4, r3]
  tmpcfgr = hlptim->Instance->CFGR;
 80062f0:	6820      	ldr	r0, [r4, #0]
 80062f2:	68c3      	ldr	r3, [r0, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80062f4:	6865      	ldr	r5, [r4, #4]
 80062f6:	2d01      	cmp	r5, #1
 80062f8:	d004      	beq.n	8006304 <HAL_LPTIM_Init+0x28>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80062fa:	2280      	movs	r2, #128	@ 0x80
 80062fc:	0412      	lsls	r2, r2, #16
 80062fe:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006300:	4291      	cmp	r1, r2
 8006302:	d101      	bne.n	8006308 <HAL_LPTIM_Init+0x2c>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8006304:	221e      	movs	r2, #30
 8006306:	4393      	bics	r3, r2
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006308:	6961      	ldr	r1, [r4, #20]
 800630a:	4a2c      	ldr	r2, [pc, #176]	@ (80063bc <HAL_LPTIM_Init+0xe0>)
 800630c:	4291      	cmp	r1, r2
 800630e:	d001      	beq.n	8006314 <HAL_LPTIM_Init+0x38>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8006310:	4a2b      	ldr	r2, [pc, #172]	@ (80063c0 <HAL_LPTIM_Init+0xe4>)
 8006312:	4013      	ands	r3, r2
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8006314:	4a2b      	ldr	r2, [pc, #172]	@ (80063c4 <HAL_LPTIM_Init+0xe8>)
 8006316:	401a      	ands	r2, r3
              hlptim->Init.CounterSource);
 8006318:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800631a:	68a3      	ldr	r3, [r4, #8]
 800631c:	432b      	orrs	r3, r5
              hlptim->Init.Clock.Prescaler |
 800631e:	6a27      	ldr	r7, [r4, #32]
 8006320:	433b      	orrs	r3, r7
              hlptim->Init.OutputPolarity  |
 8006322:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 8006324:	433b      	orrs	r3, r7
              hlptim->Init.UpdateMode      |
 8006326:	4333      	orrs	r3, r6
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8006328:	4313      	orrs	r3, r2
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800632a:	2d00      	cmp	r5, #0
 800632c:	d123      	bne.n	8006376 <HAL_LPTIM_Init+0x9a>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800632e:	69e2      	ldr	r2, [r4, #28]
 8006330:	6925      	ldr	r5, [r4, #16]
 8006332:	432a      	orrs	r2, r5
 8006334:	4313      	orrs	r3, r2
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8006336:	2280      	movs	r2, #128	@ 0x80
 8006338:	0412      	lsls	r2, r2, #16
 800633a:	4296      	cmp	r6, r2
 800633c:	d121      	bne.n	8006382 <HAL_LPTIM_Init+0xa6>
 800633e:	e01c      	b.n	800637a <HAL_LPTIM_Init+0x9e>
    hlptim->Lock = HAL_UNLOCKED;
 8006340:	3335      	adds	r3, #53	@ 0x35
 8006342:	2200      	movs	r2, #0
 8006344:	54c2      	strb	r2, [r0, r3]
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 8006346:	4b20      	ldr	r3, [pc, #128]	@ (80063c8 <HAL_LPTIM_Init+0xec>)
 8006348:	6403      	str	r3, [r0, #64]	@ 0x40
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 800634a:	4b20      	ldr	r3, [pc, #128]	@ (80063cc <HAL_LPTIM_Init+0xf0>)
 800634c:	6443      	str	r3, [r0, #68]	@ 0x44
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 800634e:	4b20      	ldr	r3, [pc, #128]	@ (80063d0 <HAL_LPTIM_Init+0xf4>)
 8006350:	6483      	str	r3, [r0, #72]	@ 0x48
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 8006352:	4b20      	ldr	r3, [pc, #128]	@ (80063d4 <HAL_LPTIM_Init+0xf8>)
 8006354:	64c3      	str	r3, [r0, #76]	@ 0x4c
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 8006356:	4b20      	ldr	r3, [pc, #128]	@ (80063d8 <HAL_LPTIM_Init+0xfc>)
 8006358:	6503      	str	r3, [r0, #80]	@ 0x50
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 800635a:	4b20      	ldr	r3, [pc, #128]	@ (80063dc <HAL_LPTIM_Init+0x100>)
 800635c:	6543      	str	r3, [r0, #84]	@ 0x54
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 800635e:	4b20      	ldr	r3, [pc, #128]	@ (80063e0 <HAL_LPTIM_Init+0x104>)
 8006360:	6583      	str	r3, [r0, #88]	@ 0x58
    if (hlptim->MspInitCallback == NULL)
 8006362:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <HAL_LPTIM_Init+0x94>
    hlptim->MspInitCallback(hlptim);
 8006368:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800636a:	0020      	movs	r0, r4
 800636c:	4798      	blx	r3
 800636e:	e7bc      	b.n	80062ea <HAL_LPTIM_Init+0xe>
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 8006370:	4b1c      	ldr	r3, [pc, #112]	@ (80063e4 <HAL_LPTIM_Init+0x108>)
 8006372:	6383      	str	r3, [r0, #56]	@ 0x38
 8006374:	e7f8      	b.n	8006368 <HAL_LPTIM_Init+0x8c>
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8006376:	2d01      	cmp	r5, #1
 8006378:	d1dd      	bne.n	8006336 <HAL_LPTIM_Init+0x5a>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800637a:	68e2      	ldr	r2, [r4, #12]
 800637c:	6925      	ldr	r5, [r4, #16]
 800637e:	432a      	orrs	r2, r5
 8006380:	4313      	orrs	r3, r2
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006382:	4a0e      	ldr	r2, [pc, #56]	@ (80063bc <HAL_LPTIM_Init+0xe0>)
 8006384:	4291      	cmp	r1, r2
 8006386:	d004      	beq.n	8006392 <HAL_LPTIM_Init+0xb6>
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006388:	69a2      	ldr	r2, [r4, #24]
 800638a:	4311      	orrs	r1, r2
                hlptim->Init.Trigger.ActiveEdge |
 800638c:	69e2      	ldr	r2, [r4, #28]
 800638e:	4311      	orrs	r1, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006390:	430b      	orrs	r3, r1
  hlptim->Instance->CFGR = tmpcfgr;
 8006392:	60c3      	str	r3, [r0, #12]
  if (hlptim->Instance == LPTIM1)
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	4a14      	ldr	r2, [pc, #80]	@ (80063e8 <HAL_LPTIM_Init+0x10c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d006      	beq.n	80063aa <HAL_LPTIM_Init+0xce>
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800639c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800639e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 80063a0:	2336      	movs	r3, #54	@ 0x36
 80063a2:	2201      	movs	r2, #1
 80063a4:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80063a6:	2000      	movs	r0, #0
}
 80063a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80063aa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80063ac:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80063ae:	4313      	orrs	r3, r2
 80063b0:	4a0d      	ldr	r2, [pc, #52]	@ (80063e8 <HAL_LPTIM_Init+0x10c>)
 80063b2:	6253      	str	r3, [r2, #36]	@ 0x24
 80063b4:	e7f4      	b.n	80063a0 <HAL_LPTIM_Init+0xc4>
    return HAL_ERROR;
 80063b6:	2001      	movs	r0, #1
 80063b8:	e7f6      	b.n	80063a8 <HAL_LPTIM_Init+0xcc>
 80063ba:	46c0      	nop			@ (mov r8, r8)
 80063bc:	0000ffff 	.word	0x0000ffff
 80063c0:	ffff1f3f 	.word	0xffff1f3f
 80063c4:	ff19f1fe 	.word	0xff19f1fe
 80063c8:	0800628d 	.word	0x0800628d
 80063cc:	0800628f 	.word	0x0800628f
 80063d0:	08006291 	.word	0x08006291
 80063d4:	08006293 	.word	0x08006293
 80063d8:	08006295 	.word	0x08006295
 80063dc:	08006297 	.word	0x08006297
 80063e0:	08006299 	.word	0x08006299
 80063e4:	08004599 	.word	0x08004599
 80063e8:	40007c00 	.word	0x40007c00

080063ec <HAL_LPTIM_IRQHandler>:
{
 80063ec:	b510      	push	{r4, lr}
 80063ee:	0004      	movs	r4, r0
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80063f0:	6802      	ldr	r2, [r0, #0]
 80063f2:	6813      	ldr	r3, [r2, #0]
 80063f4:	07db      	lsls	r3, r3, #31
 80063f6:	d506      	bpl.n	8006406 <HAL_LPTIM_IRQHandler+0x1a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80063f8:	6893      	ldr	r3, [r2, #8]
 80063fa:	07db      	lsls	r3, r3, #31
 80063fc:	d503      	bpl.n	8006406 <HAL_LPTIM_IRQHandler+0x1a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80063fe:	2301      	movs	r3, #1
 8006400:	6053      	str	r3, [r2, #4]
      hlptim->CompareMatchCallback(hlptim);
 8006402:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006404:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8006406:	6822      	ldr	r2, [r4, #0]
 8006408:	6813      	ldr	r3, [r2, #0]
 800640a:	079b      	lsls	r3, r3, #30
 800640c:	d507      	bpl.n	800641e <HAL_LPTIM_IRQHandler+0x32>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800640e:	6893      	ldr	r3, [r2, #8]
 8006410:	079b      	lsls	r3, r3, #30
 8006412:	d504      	bpl.n	800641e <HAL_LPTIM_IRQHandler+0x32>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8006414:	2302      	movs	r3, #2
 8006416:	6053      	str	r3, [r2, #4]
      hlptim->AutoReloadMatchCallback(hlptim);
 8006418:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800641a:	0020      	movs	r0, r4
 800641c:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800641e:	6822      	ldr	r2, [r4, #0]
 8006420:	6813      	ldr	r3, [r2, #0]
 8006422:	075b      	lsls	r3, r3, #29
 8006424:	d507      	bpl.n	8006436 <HAL_LPTIM_IRQHandler+0x4a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8006426:	6893      	ldr	r3, [r2, #8]
 8006428:	075b      	lsls	r3, r3, #29
 800642a:	d504      	bpl.n	8006436 <HAL_LPTIM_IRQHandler+0x4a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800642c:	2304      	movs	r3, #4
 800642e:	6053      	str	r3, [r2, #4]
      hlptim->TriggerCallback(hlptim);
 8006430:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8006432:	0020      	movs	r0, r4
 8006434:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8006436:	6822      	ldr	r2, [r4, #0]
 8006438:	6813      	ldr	r3, [r2, #0]
 800643a:	071b      	lsls	r3, r3, #28
 800643c:	d507      	bpl.n	800644e <HAL_LPTIM_IRQHandler+0x62>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800643e:	6893      	ldr	r3, [r2, #8]
 8006440:	071b      	lsls	r3, r3, #28
 8006442:	d504      	bpl.n	800644e <HAL_LPTIM_IRQHandler+0x62>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8006444:	2308      	movs	r3, #8
 8006446:	6053      	str	r3, [r2, #4]
      hlptim->CompareWriteCallback(hlptim);
 8006448:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800644a:	0020      	movs	r0, r4
 800644c:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800644e:	6822      	ldr	r2, [r4, #0]
 8006450:	6813      	ldr	r3, [r2, #0]
 8006452:	06db      	lsls	r3, r3, #27
 8006454:	d507      	bpl.n	8006466 <HAL_LPTIM_IRQHandler+0x7a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8006456:	6893      	ldr	r3, [r2, #8]
 8006458:	06db      	lsls	r3, r3, #27
 800645a:	d504      	bpl.n	8006466 <HAL_LPTIM_IRQHandler+0x7a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800645c:	2310      	movs	r3, #16
 800645e:	6053      	str	r3, [r2, #4]
      hlptim->AutoReloadWriteCallback(hlptim);
 8006460:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8006462:	0020      	movs	r0, r4
 8006464:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8006466:	6822      	ldr	r2, [r4, #0]
 8006468:	6813      	ldr	r3, [r2, #0]
 800646a:	069b      	lsls	r3, r3, #26
 800646c:	d507      	bpl.n	800647e <HAL_LPTIM_IRQHandler+0x92>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800646e:	6893      	ldr	r3, [r2, #8]
 8006470:	069b      	lsls	r3, r3, #26
 8006472:	d504      	bpl.n	800647e <HAL_LPTIM_IRQHandler+0x92>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8006474:	2320      	movs	r3, #32
 8006476:	6053      	str	r3, [r2, #4]
      hlptim->DirectionUpCallback(hlptim);
 8006478:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800647a:	0020      	movs	r0, r4
 800647c:	4798      	blx	r3
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800647e:	6822      	ldr	r2, [r4, #0]
 8006480:	6813      	ldr	r3, [r2, #0]
 8006482:	065b      	lsls	r3, r3, #25
 8006484:	d507      	bpl.n	8006496 <HAL_LPTIM_IRQHandler+0xaa>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8006486:	6893      	ldr	r3, [r2, #8]
 8006488:	065b      	lsls	r3, r3, #25
 800648a:	d504      	bpl.n	8006496 <HAL_LPTIM_IRQHandler+0xaa>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800648c:	2340      	movs	r3, #64	@ 0x40
 800648e:	6053      	str	r3, [r2, #4]
      hlptim->DirectionDownCallback(hlptim);
 8006490:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006492:	0020      	movs	r0, r4
 8006494:	4798      	blx	r3
}
 8006496:	bd10      	pop	{r4, pc}

08006498 <HAL_LPTIM_RegisterCallback>:
{
 8006498:	b510      	push	{r4, lr}
 800649a:	0003      	movs	r3, r0
  if (pCallback == NULL)
 800649c:	2a00      	cmp	r2, #0
 800649e:	d035      	beq.n	800650c <HAL_LPTIM_RegisterCallback+0x74>
  if (hlptim->State == HAL_LPTIM_STATE_READY)
 80064a0:	2036      	movs	r0, #54	@ 0x36
 80064a2:	5c1c      	ldrb	r4, [r3, r0]
 80064a4:	b2e0      	uxtb	r0, r4
 80064a6:	2c01      	cmp	r4, #1
 80064a8:	d00a      	beq.n	80064c0 <HAL_LPTIM_RegisterCallback+0x28>
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80064aa:	2036      	movs	r0, #54	@ 0x36
 80064ac:	5c1c      	ldrb	r4, [r3, r0]
 80064ae:	b2e0      	uxtb	r0, r4
 80064b0:	2c00      	cmp	r4, #0
 80064b2:	d12d      	bne.n	8006510 <HAL_LPTIM_RegisterCallback+0x78>
    switch (CallbackID)
 80064b4:	2900      	cmp	r1, #0
 80064b6:	d024      	beq.n	8006502 <HAL_LPTIM_RegisterCallback+0x6a>
 80064b8:	2901      	cmp	r1, #1
 80064ba:	d025      	beq.n	8006508 <HAL_LPTIM_RegisterCallback+0x70>
 80064bc:	2001      	movs	r0, #1
 80064be:	e028      	b.n	8006512 <HAL_LPTIM_RegisterCallback+0x7a>
    switch (CallbackID)
 80064c0:	2908      	cmp	r1, #8
 80064c2:	d826      	bhi.n	8006512 <HAL_LPTIM_RegisterCallback+0x7a>
 80064c4:	0088      	lsls	r0, r1, #2
 80064c6:	4c13      	ldr	r4, [pc, #76]	@ (8006514 <HAL_LPTIM_RegisterCallback+0x7c>)
 80064c8:	5820      	ldr	r0, [r4, r0]
 80064ca:	4687      	mov	pc, r0
        hlptim->MspInitCallback = pCallback;
 80064cc:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_StatusTypeDef status = HAL_OK;
 80064ce:	0008      	movs	r0, r1
        break;
 80064d0:	e01f      	b.n	8006512 <HAL_LPTIM_RegisterCallback+0x7a>
        hlptim->MspDeInitCallback = pCallback;
 80064d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80064d4:	2000      	movs	r0, #0
        break;
 80064d6:	e01c      	b.n	8006512 <HAL_LPTIM_RegisterCallback+0x7a>
        hlptim->CompareMatchCallback = pCallback;
 80064d8:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_StatusTypeDef status = HAL_OK;
 80064da:	2000      	movs	r0, #0
        break;
 80064dc:	e019      	b.n	8006512 <HAL_LPTIM_RegisterCallback+0x7a>
        hlptim->AutoReloadMatchCallback = pCallback;
 80064de:	645a      	str	r2, [r3, #68]	@ 0x44
  HAL_StatusTypeDef status = HAL_OK;
 80064e0:	2000      	movs	r0, #0
        break;
 80064e2:	e016      	b.n	8006512 <HAL_LPTIM_RegisterCallback+0x7a>
        hlptim->TriggerCallback = pCallback;
 80064e4:	649a      	str	r2, [r3, #72]	@ 0x48
  HAL_StatusTypeDef status = HAL_OK;
 80064e6:	2000      	movs	r0, #0
        break;
 80064e8:	e013      	b.n	8006512 <HAL_LPTIM_RegisterCallback+0x7a>
        hlptim->CompareWriteCallback = pCallback;
 80064ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 80064ec:	2000      	movs	r0, #0
        break;
 80064ee:	e010      	b.n	8006512 <HAL_LPTIM_RegisterCallback+0x7a>
        hlptim->AutoReloadWriteCallback = pCallback;
 80064f0:	651a      	str	r2, [r3, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;
 80064f2:	2000      	movs	r0, #0
        break;
 80064f4:	e00d      	b.n	8006512 <HAL_LPTIM_RegisterCallback+0x7a>
        hlptim->DirectionUpCallback = pCallback;
 80064f6:	655a      	str	r2, [r3, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 80064f8:	2000      	movs	r0, #0
        break;
 80064fa:	e00a      	b.n	8006512 <HAL_LPTIM_RegisterCallback+0x7a>
        hlptim->DirectionDownCallback = pCallback;
 80064fc:	659a      	str	r2, [r3, #88]	@ 0x58
  HAL_StatusTypeDef status = HAL_OK;
 80064fe:	2000      	movs	r0, #0
        break;
 8006500:	e007      	b.n	8006512 <HAL_LPTIM_RegisterCallback+0x7a>
        hlptim->MspInitCallback = pCallback;
 8006502:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8006504:	0008      	movs	r0, r1
        break;
 8006506:	e004      	b.n	8006512 <HAL_LPTIM_RegisterCallback+0x7a>
        hlptim->MspDeInitCallback = pCallback;
 8006508:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 800650a:	e002      	b.n	8006512 <HAL_LPTIM_RegisterCallback+0x7a>
    return HAL_ERROR;
 800650c:	2001      	movs	r0, #1
 800650e:	e000      	b.n	8006512 <HAL_LPTIM_RegisterCallback+0x7a>
    status =  HAL_ERROR;
 8006510:	2001      	movs	r0, #1
}
 8006512:	bd10      	pop	{r4, pc}
 8006514:	08009d64 	.word	0x08009d64

08006518 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8006518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800651a:	46d6      	mov	lr, sl
 800651c:	464f      	mov	r7, r9
 800651e:	4646      	mov	r6, r8
 8006520:	b5c0      	push	{r6, r7, lr}
 8006522:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006524:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006528:	2301      	movs	r3, #1
 800652a:	f383 8810 	msr	PRIMASK, r3
  primask_bit = __get_PRIMASK();
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800652e:	6803      	ldr	r3, [r0, #0]
 8006530:	4a56      	ldr	r2, [pc, #344]	@ (800668c <LPTIM_Disable+0x174>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d00c      	beq.n	8006550 <LPTIM_Disable+0x38>
 8006536:	4a56      	ldr	r2, [pc, #344]	@ (8006690 <LPTIM_Disable+0x178>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d030      	beq.n	800659e <LPTIM_Disable+0x86>
    default:
      break;
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 800653c:	689f      	ldr	r7, [r3, #8]
  tmpCFGR = hlptim->Instance->CFGR;
 800653e:	68de      	ldr	r6, [r3, #12]
  tmpCMP = hlptim->Instance->CMP;
 8006540:	695a      	ldr	r2, [r3, #20]
  tmpARR = hlptim->Instance->ARR;
 8006542:	6999      	ldr	r1, [r3, #24]
 8006544:	4689      	mov	r9, r1
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8006546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006548:	4698      	mov	r8, r3
 800654a:	2300      	movs	r3, #0
 800654c:	469a      	mov	sl, r3
 800654e:	e016      	b.n	800657e <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006550:	4b50      	ldr	r3, [pc, #320]	@ (8006694 <LPTIM_Disable+0x17c>)
 8006552:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006554:	22c0      	movs	r2, #192	@ 0xc0
 8006556:	0312      	lsls	r2, r2, #12
 8006558:	4011      	ands	r1, r2
 800655a:	468a      	mov	sl, r1
  tmpIER = hlptim->Instance->IER;
 800655c:	494b      	ldr	r1, [pc, #300]	@ (800668c <LPTIM_Disable+0x174>)
 800655e:	688f      	ldr	r7, [r1, #8]
  tmpCFGR = hlptim->Instance->CFGR;
 8006560:	68ce      	ldr	r6, [r1, #12]
  tmpCMP = hlptim->Instance->CMP;
 8006562:	694a      	ldr	r2, [r1, #20]
  tmpARR = hlptim->Instance->ARR;
 8006564:	6988      	ldr	r0, [r1, #24]
 8006566:	4681      	mov	r9, r0
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8006568:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800656a:	4688      	mov	r8, r1

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800656c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800656e:	2180      	movs	r1, #128	@ 0x80
 8006570:	0609      	lsls	r1, r1, #24
 8006572:	4301      	orrs	r1, r0
 8006574:	62d9      	str	r1, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8006576:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006578:	0049      	lsls	r1, r1, #1
 800657a:	0849      	lsrs	r1, r1, #1
 800657c:	62d9      	str	r1, [r3, #44]	@ 0x2c
    default:
      break;
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 800657e:	464b      	mov	r3, r9
 8006580:	4313      	orrs	r3, r2
 8006582:	d06f      	beq.n	8006664 <LPTIM_Disable+0x14c>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	4941      	ldr	r1, [pc, #260]	@ (800668c <LPTIM_Disable+0x174>)
 8006588:	428b      	cmp	r3, r1
 800658a:	d020      	beq.n	80065ce <LPTIM_Disable+0xb6>
 800658c:	4940      	ldr	r1, [pc, #256]	@ (8006690 <LPTIM_Disable+0x178>)
 800658e:	428b      	cmp	r3, r1
 8006590:	d122      	bne.n	80065d8 <LPTIM_Disable+0xc0>
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
        break;
#if defined(LPTIM2)
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8006592:	4940      	ldr	r1, [pc, #256]	@ (8006694 <LPTIM_Disable+0x17c>)
 8006594:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8006596:	4840      	ldr	r0, [pc, #256]	@ (8006698 <LPTIM_Disable+0x180>)
 8006598:	4003      	ands	r3, r0
 800659a:	654b      	str	r3, [r1, #84]	@ 0x54
        break;
 800659c:	e01c      	b.n	80065d8 <LPTIM_Disable+0xc0>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 800659e:	4b3d      	ldr	r3, [pc, #244]	@ (8006694 <LPTIM_Disable+0x17c>)
 80065a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80065a2:	22c0      	movs	r2, #192	@ 0xc0
 80065a4:	0392      	lsls	r2, r2, #14
 80065a6:	4011      	ands	r1, r2
 80065a8:	468a      	mov	sl, r1
  tmpIER = hlptim->Instance->IER;
 80065aa:	4939      	ldr	r1, [pc, #228]	@ (8006690 <LPTIM_Disable+0x178>)
 80065ac:	688f      	ldr	r7, [r1, #8]
  tmpCFGR = hlptim->Instance->CFGR;
 80065ae:	68ce      	ldr	r6, [r1, #12]
  tmpCMP = hlptim->Instance->CMP;
 80065b0:	694a      	ldr	r2, [r1, #20]
  tmpARR = hlptim->Instance->ARR;
 80065b2:	6988      	ldr	r0, [r1, #24]
 80065b4:	4681      	mov	r9, r0
  tmpCFGR2 = hlptim->Instance->CFGR2;
 80065b6:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80065b8:	4688      	mov	r8, r1
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80065ba:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80065bc:	2180      	movs	r1, #128	@ 0x80
 80065be:	05c9      	lsls	r1, r1, #23
 80065c0:	4301      	orrs	r1, r0
 80065c2:	62d9      	str	r1, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80065c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80065c6:	4835      	ldr	r0, [pc, #212]	@ (800669c <LPTIM_Disable+0x184>)
 80065c8:	4001      	ands	r1, r0
 80065ca:	62d9      	str	r1, [r3, #44]	@ 0x2c
      break;
 80065cc:	e7d7      	b.n	800657e <LPTIM_Disable+0x66>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80065ce:	4931      	ldr	r1, [pc, #196]	@ (8006694 <LPTIM_Disable+0x17c>)
 80065d0:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 80065d2:	4833      	ldr	r0, [pc, #204]	@ (80066a0 <LPTIM_Disable+0x188>)
 80065d4:	4003      	ands	r3, r0
 80065d6:	654b      	str	r3, [r1, #84]	@ 0x54
#endif /* LPTIM2 */
      default:
        break;
    }

    if (tmpCMP != 0UL)
 80065d8:	2a00      	cmp	r2, #0
 80065da:	d111      	bne.n	8006600 <LPTIM_Disable+0xe8>
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
    }

    if (tmpARR != 0UL)
 80065dc:	464b      	mov	r3, r9
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d123      	bne.n	800662a <LPTIM_Disable+0x112>

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	4a29      	ldr	r2, [pc, #164]	@ (800668c <LPTIM_Disable+0x174>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d035      	beq.n	8006656 <LPTIM_Disable+0x13e>
 80065ea:	4a29      	ldr	r2, [pc, #164]	@ (8006690 <LPTIM_Disable+0x178>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d139      	bne.n	8006664 <LPTIM_Disable+0x14c>
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
        break;
#if defined(LPTIM2)
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80065f0:	4a28      	ldr	r2, [pc, #160]	@ (8006694 <LPTIM_Disable+0x17c>)
 80065f2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80065f4:	4928      	ldr	r1, [pc, #160]	@ (8006698 <LPTIM_Disable+0x180>)
 80065f6:	400b      	ands	r3, r1
 80065f8:	4651      	mov	r1, sl
 80065fa:	430b      	orrs	r3, r1
 80065fc:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
 80065fe:	e031      	b.n	8006664 <LPTIM_Disable+0x14c>
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8006600:	6821      	ldr	r1, [r4, #0]
 8006602:	690b      	ldr	r3, [r1, #16]
 8006604:	2001      	movs	r0, #1
 8006606:	4303      	orrs	r3, r0
 8006608:	610b      	str	r3, [r1, #16]
      hlptim->Instance->CMP = tmpCMP;
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	615a      	str	r2, [r3, #20]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800660e:	2108      	movs	r1, #8
 8006610:	0020      	movs	r0, r4
 8006612:	f7ff fe43 	bl	800629c <LPTIM_WaitForFlag>
 8006616:	2803      	cmp	r0, #3
 8006618:	d003      	beq.n	8006622 <LPTIM_Disable+0x10a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	2208      	movs	r2, #8
 800661e:	605a      	str	r2, [r3, #4]
 8006620:	e7dc      	b.n	80065dc <LPTIM_Disable+0xc4>
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8006622:	2336      	movs	r3, #54	@ 0x36
 8006624:	2203      	movs	r2, #3
 8006626:	54e2      	strb	r2, [r4, r3]
 8006628:	e7f7      	b.n	800661a <LPTIM_Disable+0x102>
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800662a:	6822      	ldr	r2, [r4, #0]
 800662c:	6913      	ldr	r3, [r2, #16]
 800662e:	2101      	movs	r1, #1
 8006630:	430b      	orrs	r3, r1
 8006632:	6113      	str	r3, [r2, #16]
      hlptim->Instance->ARR = tmpARR;
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	464a      	mov	r2, r9
 8006638:	619a      	str	r2, [r3, #24]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800663a:	310f      	adds	r1, #15
 800663c:	0020      	movs	r0, r4
 800663e:	f7ff fe2d 	bl	800629c <LPTIM_WaitForFlag>
 8006642:	2803      	cmp	r0, #3
 8006644:	d003      	beq.n	800664e <LPTIM_Disable+0x136>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	2210      	movs	r2, #16
 800664a:	605a      	str	r2, [r3, #4]
 800664c:	e7c9      	b.n	80065e2 <LPTIM_Disable+0xca>
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800664e:	2336      	movs	r3, #54	@ 0x36
 8006650:	2203      	movs	r2, #3
 8006652:	54e2      	strb	r2, [r4, r3]
 8006654:	e7f7      	b.n	8006646 <LPTIM_Disable+0x12e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8006656:	4a0f      	ldr	r2, [pc, #60]	@ (8006694 <LPTIM_Disable+0x17c>)
 8006658:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800665a:	4911      	ldr	r1, [pc, #68]	@ (80066a0 <LPTIM_Disable+0x188>)
 800665c:	400b      	ands	r3, r1
 800665e:	4651      	mov	r1, sl
 8006660:	430b      	orrs	r3, r1
 8006662:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8006664:	6822      	ldr	r2, [r4, #0]
 8006666:	6913      	ldr	r3, [r2, #16]
 8006668:	2101      	movs	r1, #1
 800666a:	438b      	bics	r3, r1
 800666c:	6113      	str	r3, [r2, #16]
  hlptim->Instance->IER = tmpIER;
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	609f      	str	r7, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	60de      	str	r6, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	4642      	mov	r2, r8
 800667a:	625a      	str	r2, [r3, #36]	@ 0x24
 800667c:	f385 8810 	msr	PRIMASK, r5

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006680:	bce0      	pop	{r5, r6, r7}
 8006682:	46ba      	mov	sl, r7
 8006684:	46b1      	mov	r9, r6
 8006686:	46a8      	mov	r8, r5
 8006688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800668a:	46c0      	nop			@ (mov r8, r8)
 800668c:	40007c00 	.word	0x40007c00
 8006690:	40009400 	.word	0x40009400
 8006694:	40021000 	.word	0x40021000
 8006698:	ffcfffff 	.word	0xffcfffff
 800669c:	bfffffff 	.word	0xbfffffff
 80066a0:	fff3ffff 	.word	0xfff3ffff

080066a4 <HAL_LPTIM_SetOnce_Start_IT>:
{
 80066a4:	b570      	push	{r4, r5, r6, lr}
 80066a6:	0004      	movs	r4, r0
 80066a8:	0015      	movs	r5, r2
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80066aa:	2336      	movs	r3, #54	@ 0x36
 80066ac:	2202      	movs	r2, #2
 80066ae:	54c2      	strb	r2, [r0, r3]
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 80066b0:	6802      	ldr	r2, [r0, #0]
 80066b2:	68d0      	ldr	r0, [r2, #12]
 80066b4:	2380      	movs	r3, #128	@ 0x80
 80066b6:	035b      	lsls	r3, r3, #13
 80066b8:	4303      	orrs	r3, r0
 80066ba:	60d3      	str	r3, [r2, #12]
  __HAL_LPTIM_ENABLE(hlptim);
 80066bc:	6822      	ldr	r2, [r4, #0]
 80066be:	6913      	ldr	r3, [r2, #16]
 80066c0:	2001      	movs	r0, #1
 80066c2:	4303      	orrs	r3, r0
 80066c4:	6113      	str	r3, [r2, #16]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	2210      	movs	r2, #16
 80066ca:	605a      	str	r2, [r3, #4]
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80066cc:	6823      	ldr	r3, [r4, #0]
 80066ce:	6199      	str	r1, [r3, #24]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80066d0:	2110      	movs	r1, #16
 80066d2:	0020      	movs	r0, r4
 80066d4:	f7ff fde2 	bl	800629c <LPTIM_WaitForFlag>
 80066d8:	2803      	cmp	r0, #3
 80066da:	d03c      	beq.n	8006756 <HAL_LPTIM_SetOnce_Start_IT+0xb2>
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	2208      	movs	r2, #8
 80066e0:	605a      	str	r2, [r3, #4]
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	615d      	str	r5, [r3, #20]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80066e6:	2108      	movs	r1, #8
 80066e8:	0020      	movs	r0, r4
 80066ea:	f7ff fdd7 	bl	800629c <LPTIM_WaitForFlag>
 80066ee:	2803      	cmp	r0, #3
 80066f0:	d031      	beq.n	8006756 <HAL_LPTIM_SetOnce_Start_IT+0xb2>
  __HAL_LPTIM_DISABLE(hlptim);
 80066f2:	0020      	movs	r0, r4
 80066f4:	f7ff ff10 	bl	8006518 <LPTIM_Disable>
  return hlptim->State;
 80066f8:	2336      	movs	r3, #54	@ 0x36
 80066fa:	5ce3      	ldrb	r3, [r4, r3]
 80066fc:	b2d8      	uxtb	r0, r3
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80066fe:	2b03      	cmp	r3, #3
 8006700:	d029      	beq.n	8006756 <HAL_LPTIM_SetOnce_Start_IT+0xb2>
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8006702:	6822      	ldr	r2, [r4, #0]
 8006704:	6893      	ldr	r3, [r2, #8]
 8006706:	2110      	movs	r1, #16
 8006708:	430b      	orrs	r3, r1
 800670a:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 800670c:	6822      	ldr	r2, [r4, #0]
 800670e:	6893      	ldr	r3, [r2, #8]
 8006710:	3908      	subs	r1, #8
 8006712:	430b      	orrs	r3, r1
 8006714:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8006716:	6822      	ldr	r2, [r4, #0]
 8006718:	6893      	ldr	r3, [r2, #8]
 800671a:	3906      	subs	r1, #6
 800671c:	430b      	orrs	r3, r1
 800671e:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8006720:	6822      	ldr	r2, [r4, #0]
 8006722:	6893      	ldr	r3, [r2, #8]
 8006724:	3901      	subs	r1, #1
 8006726:	430b      	orrs	r3, r1
 8006728:	6093      	str	r3, [r2, #8]
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800672a:	4b0b      	ldr	r3, [pc, #44]	@ (8006758 <HAL_LPTIM_SetOnce_Start_IT+0xb4>)
 800672c:	6962      	ldr	r2, [r4, #20]
 800672e:	429a      	cmp	r2, r3
 8006730:	d004      	beq.n	800673c <HAL_LPTIM_SetOnce_Start_IT+0x98>
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 8006732:	6822      	ldr	r2, [r4, #0]
 8006734:	6893      	ldr	r3, [r2, #8]
 8006736:	3103      	adds	r1, #3
 8006738:	430b      	orrs	r3, r1
 800673a:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_ENABLE(hlptim);
 800673c:	6821      	ldr	r1, [r4, #0]
 800673e:	690b      	ldr	r3, [r1, #16]
 8006740:	2201      	movs	r2, #1
 8006742:	4313      	orrs	r3, r2
 8006744:	610b      	str	r3, [r1, #16]
  __HAL_LPTIM_START_SINGLE(hlptim);
 8006746:	6821      	ldr	r1, [r4, #0]
 8006748:	690b      	ldr	r3, [r1, #16]
 800674a:	2002      	movs	r0, #2
 800674c:	4303      	orrs	r3, r0
 800674e:	610b      	str	r3, [r1, #16]
  hlptim->State = HAL_LPTIM_STATE_READY;
 8006750:	2336      	movs	r3, #54	@ 0x36
 8006752:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8006754:	2000      	movs	r0, #0
}
 8006756:	bd70      	pop	{r4, r5, r6, pc}
 8006758:	0000ffff 	.word	0x0000ffff

0800675c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800675c:	b510      	push	{r4, lr}
 800675e:	0002      	movs	r2, r0
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006760:	4913      	ldr	r1, [pc, #76]	@ (80067b0 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8006762:	680b      	ldr	r3, [r1, #0]
 8006764:	4813      	ldr	r0, [pc, #76]	@ (80067b4 <HAL_PWREx_ControlVoltageScaling+0x58>)
 8006766:	4003      	ands	r3, r0
 8006768:	4313      	orrs	r3, r2
 800676a:	600b      	str	r3, [r1, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800676c:	2380      	movs	r3, #128	@ 0x80
 800676e:	009b      	lsls	r3, r3, #2
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8006770:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006772:	429a      	cmp	r2, r3
 8006774:	d000      	beq.n	8006778 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8006776:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006778:	4b0f      	ldr	r3, [pc, #60]	@ (80067b8 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	0058      	lsls	r0, r3, #1
 800677e:	18c0      	adds	r0, r0, r3
 8006780:	0040      	lsls	r0, r0, #1
 8006782:	490e      	ldr	r1, [pc, #56]	@ (80067bc <HAL_PWREx_ControlVoltageScaling+0x60>)
 8006784:	f7f9 fcc0 	bl	8000108 <__udivsi3>
 8006788:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800678a:	4b09      	ldr	r3, [pc, #36]	@ (80067b0 <HAL_PWREx_ControlVoltageScaling+0x54>)
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	055b      	lsls	r3, r3, #21
 8006790:	d50a      	bpl.n	80067a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
 8006792:	4907      	ldr	r1, [pc, #28]	@ (80067b0 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8006794:	2280      	movs	r2, #128	@ 0x80
 8006796:	00d2      	lsls	r2, r2, #3
        wait_loop_index--;
 8006798:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800679a:	694b      	ldr	r3, [r1, #20]
 800679c:	4213      	tst	r3, r2
 800679e:	d005      	beq.n	80067ac <HAL_PWREx_ControlVoltageScaling+0x50>
      if (wait_loop_index != 0U)
 80067a0:	2800      	cmp	r0, #0
 80067a2:	d1f9      	bne.n	8006798 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 80067a4:	2003      	movs	r0, #3
 80067a6:	e7e6      	b.n	8006776 <HAL_PWREx_ControlVoltageScaling+0x1a>
  return HAL_OK;
 80067a8:	2000      	movs	r0, #0
 80067aa:	e7e4      	b.n	8006776 <HAL_PWREx_ControlVoltageScaling+0x1a>
 80067ac:	2000      	movs	r0, #0
 80067ae:	e7e2      	b.n	8006776 <HAL_PWREx_ControlVoltageScaling+0x1a>
 80067b0:	40007000 	.word	0x40007000
 80067b4:	fffff9ff 	.word	0xfffff9ff
 80067b8:	2000044c 	.word	0x2000044c
 80067bc:	000f4240 	.word	0x000f4240

080067c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067c2:	46ce      	mov	lr, r9
 80067c4:	4647      	mov	r7, r8
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b083      	sub	sp, #12
 80067ca:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067cc:	d100      	bne.n	80067d0 <HAL_RCC_OscConfig+0x10>
 80067ce:	e246      	b.n	8006c5e <HAL_RCC_OscConfig+0x49e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067d0:	6803      	ldr	r3, [r0, #0]
 80067d2:	07db      	lsls	r3, r3, #31
 80067d4:	d538      	bpl.n	8006848 <HAL_RCC_OscConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067d6:	4ac7      	ldr	r2, [pc, #796]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 80067d8:	6891      	ldr	r1, [r2, #8]
 80067da:	2338      	movs	r3, #56	@ 0x38
 80067dc:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067de:	68d2      	ldr	r2, [r2, #12]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80067e0:	2b10      	cmp	r3, #16
 80067e2:	d026      	beq.n	8006832 <HAL_RCC_OscConfig+0x72>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d027      	beq.n	8006838 <HAL_RCC_OscConfig+0x78>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067e8:	6863      	ldr	r3, [r4, #4]
 80067ea:	2280      	movs	r2, #128	@ 0x80
 80067ec:	0252      	lsls	r2, r2, #9
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d07a      	beq.n	80068e8 <HAL_RCC_OscConfig+0x128>
 80067f2:	22a0      	movs	r2, #160	@ 0xa0
 80067f4:	02d2      	lsls	r2, r2, #11
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d07d      	beq.n	80068f6 <HAL_RCC_OscConfig+0x136>
 80067fa:	4bbe      	ldr	r3, [pc, #760]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	49be      	ldr	r1, [pc, #760]	@ (8006af8 <HAL_RCC_OscConfig+0x338>)
 8006800:	400a      	ands	r2, r1
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	49bd      	ldr	r1, [pc, #756]	@ (8006afc <HAL_RCC_OscConfig+0x33c>)
 8006808:	400a      	ands	r2, r1
 800680a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800680c:	6863      	ldr	r3, [r4, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d07d      	beq.n	800690e <HAL_RCC_OscConfig+0x14e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006812:	f7fe fb65 	bl	8004ee0 <HAL_GetTick>
 8006816:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006818:	4fb6      	ldr	r7, [pc, #728]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 800681a:	2680      	movs	r6, #128	@ 0x80
 800681c:	02b6      	lsls	r6, r6, #10
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	4233      	tst	r3, r6
 8006822:	d111      	bne.n	8006848 <HAL_RCC_OscConfig+0x88>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006824:	f7fe fb5c 	bl	8004ee0 <HAL_GetTick>
 8006828:	1b40      	subs	r0, r0, r5
 800682a:	2864      	cmp	r0, #100	@ 0x64
 800682c:	d9f7      	bls.n	800681e <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 800682e:	2003      	movs	r0, #3
 8006830:	e216      	b.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006832:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006834:	0792      	lsls	r2, r2, #30
 8006836:	d1d7      	bne.n	80067e8 <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006838:	4bae      	ldr	r3, [pc, #696]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	039b      	lsls	r3, r3, #14
 800683e:	d503      	bpl.n	8006848 <HAL_RCC_OscConfig+0x88>
 8006840:	6863      	ldr	r3, [r4, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d100      	bne.n	8006848 <HAL_RCC_OscConfig+0x88>
 8006846:	e210      	b.n	8006c6a <HAL_RCC_OscConfig+0x4aa>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	079b      	lsls	r3, r3, #30
 800684c:	d52a      	bpl.n	80068a4 <HAL_RCC_OscConfig+0xe4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800684e:	4aa9      	ldr	r2, [pc, #676]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 8006850:	6891      	ldr	r1, [r2, #8]
 8006852:	2338      	movs	r3, #56	@ 0x38
 8006854:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006856:	68d2      	ldr	r2, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006858:	2b10      	cmp	r3, #16
 800685a:	d068      	beq.n	800692e <HAL_RCC_OscConfig+0x16e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800685c:	2b00      	cmp	r3, #0
 800685e:	d16b      	bne.n	8006938 <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006860:	4ba4      	ldr	r3, [pc, #656]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	055b      	lsls	r3, r3, #21
 8006866:	d500      	bpl.n	800686a <HAL_RCC_OscConfig+0xaa>
 8006868:	e222      	b.n	8006cb0 <HAL_RCC_OscConfig+0x4f0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800686a:	49a2      	ldr	r1, [pc, #648]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 800686c:	684a      	ldr	r2, [r1, #4]
 800686e:	6963      	ldr	r3, [r4, #20]
 8006870:	021b      	lsls	r3, r3, #8
 8006872:	48a3      	ldr	r0, [pc, #652]	@ (8006b00 <HAL_RCC_OscConfig+0x340>)
 8006874:	4002      	ands	r2, r0
 8006876:	4313      	orrs	r3, r2
 8006878:	604b      	str	r3, [r1, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800687a:	4a9e      	ldr	r2, [pc, #632]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 800687c:	6813      	ldr	r3, [r2, #0]
 800687e:	49a1      	ldr	r1, [pc, #644]	@ (8006b04 <HAL_RCC_OscConfig+0x344>)
 8006880:	400b      	ands	r3, r1
 8006882:	6921      	ldr	r1, [r4, #16]
 8006884:	430b      	orrs	r3, r1
 8006886:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006888:	6813      	ldr	r3, [r2, #0]
 800688a:	499f      	ldr	r1, [pc, #636]	@ (8006b08 <HAL_RCC_OscConfig+0x348>)
 800688c:	049b      	lsls	r3, r3, #18
 800688e:	0f5b      	lsrs	r3, r3, #29
 8006890:	4a9e      	ldr	r2, [pc, #632]	@ (8006b0c <HAL_RCC_OscConfig+0x34c>)
 8006892:	40da      	lsrs	r2, r3
 8006894:	600a      	str	r2, [r1, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006896:	4b9e      	ldr	r3, [pc, #632]	@ (8006b10 <HAL_RCC_OscConfig+0x350>)
 8006898:	6818      	ldr	r0, [r3, #0]
 800689a:	f7fe fad9 	bl	8004e50 <HAL_InitTick>
 800689e:	2800      	cmp	r0, #0
 80068a0:	d000      	beq.n	80068a4 <HAL_RCC_OscConfig+0xe4>
 80068a2:	e1e4      	b.n	8006c6e <HAL_RCC_OscConfig+0x4ae>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068a4:	6823      	ldr	r3, [r4, #0]
 80068a6:	071b      	lsls	r3, r3, #28
 80068a8:	d400      	bmi.n	80068ac <HAL_RCC_OscConfig+0xec>
 80068aa:	e08b      	b.n	80069c4 <HAL_RCC_OscConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80068ac:	4b91      	ldr	r3, [pc, #580]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	2338      	movs	r3, #56	@ 0x38
 80068b2:	4013      	ands	r3, r2
 80068b4:	2b18      	cmp	r3, #24
 80068b6:	d07d      	beq.n	80069b4 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068b8:	69a3      	ldr	r3, [r4, #24]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d100      	bne.n	80068c0 <HAL_RCC_OscConfig+0x100>
 80068be:	e0c4      	b.n	8006a4a <HAL_RCC_OscConfig+0x28a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80068c0:	4a8c      	ldr	r2, [pc, #560]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 80068c2:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80068c4:	2101      	movs	r1, #1
 80068c6:	430b      	orrs	r3, r1
 80068c8:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ca:	f7fe fb09 	bl	8004ee0 <HAL_GetTick>
 80068ce:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80068d0:	4f88      	ldr	r7, [pc, #544]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 80068d2:	2602      	movs	r6, #2
 80068d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068d6:	421e      	tst	r6, r3
 80068d8:	d174      	bne.n	80069c4 <HAL_RCC_OscConfig+0x204>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068da:	f7fe fb01 	bl	8004ee0 <HAL_GetTick>
 80068de:	1b40      	subs	r0, r0, r5
 80068e0:	2802      	cmp	r0, #2
 80068e2:	d9f7      	bls.n	80068d4 <HAL_RCC_OscConfig+0x114>
          {
            return HAL_TIMEOUT;
 80068e4:	2003      	movs	r0, #3
 80068e6:	e1bb      	b.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068e8:	4a82      	ldr	r2, [pc, #520]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 80068ea:	6811      	ldr	r1, [r2, #0]
 80068ec:	2380      	movs	r3, #128	@ 0x80
 80068ee:	025b      	lsls	r3, r3, #9
 80068f0:	430b      	orrs	r3, r1
 80068f2:	6013      	str	r3, [r2, #0]
 80068f4:	e78a      	b.n	800680c <HAL_RCC_OscConfig+0x4c>
 80068f6:	4b7f      	ldr	r3, [pc, #508]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 80068f8:	6819      	ldr	r1, [r3, #0]
 80068fa:	2280      	movs	r2, #128	@ 0x80
 80068fc:	02d2      	lsls	r2, r2, #11
 80068fe:	430a      	orrs	r2, r1
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	6819      	ldr	r1, [r3, #0]
 8006904:	2280      	movs	r2, #128	@ 0x80
 8006906:	0252      	lsls	r2, r2, #9
 8006908:	430a      	orrs	r2, r1
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	e77e      	b.n	800680c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800690e:	f7fe fae7 	bl	8004ee0 <HAL_GetTick>
 8006912:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006914:	4f77      	ldr	r7, [pc, #476]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 8006916:	2680      	movs	r6, #128	@ 0x80
 8006918:	02b6      	lsls	r6, r6, #10
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	4233      	tst	r3, r6
 800691e:	d093      	beq.n	8006848 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006920:	f7fe fade 	bl	8004ee0 <HAL_GetTick>
 8006924:	1b40      	subs	r0, r0, r5
 8006926:	2864      	cmp	r0, #100	@ 0x64
 8006928:	d9f7      	bls.n	800691a <HAL_RCC_OscConfig+0x15a>
            return HAL_TIMEOUT;
 800692a:	2003      	movs	r0, #3
 800692c:	e198      	b.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800692e:	3b0d      	subs	r3, #13
 8006930:	4013      	ands	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006932:	2b02      	cmp	r3, #2
 8006934:	d100      	bne.n	8006938 <HAL_RCC_OscConfig+0x178>
 8006936:	e1ab      	b.n	8006c90 <HAL_RCC_OscConfig+0x4d0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006938:	68e3      	ldr	r3, [r4, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d024      	beq.n	8006988 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800693e:	4a6d      	ldr	r2, [pc, #436]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 8006940:	6813      	ldr	r3, [r2, #0]
 8006942:	4970      	ldr	r1, [pc, #448]	@ (8006b04 <HAL_RCC_OscConfig+0x344>)
 8006944:	400b      	ands	r3, r1
 8006946:	6921      	ldr	r1, [r4, #16]
 8006948:	430b      	orrs	r3, r1
 800694a:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 800694c:	6811      	ldr	r1, [r2, #0]
 800694e:	2380      	movs	r3, #128	@ 0x80
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	430b      	orrs	r3, r1
 8006954:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006956:	f7fe fac3 	bl	8004ee0 <HAL_GetTick>
 800695a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800695c:	4f65      	ldr	r7, [pc, #404]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 800695e:	2680      	movs	r6, #128	@ 0x80
 8006960:	00f6      	lsls	r6, r6, #3
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	4233      	tst	r3, r6
 8006966:	d106      	bne.n	8006976 <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006968:	f7fe faba 	bl	8004ee0 <HAL_GetTick>
 800696c:	1b40      	subs	r0, r0, r5
 800696e:	2802      	cmp	r0, #2
 8006970:	d9f7      	bls.n	8006962 <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
 8006972:	2003      	movs	r0, #3
 8006974:	e174      	b.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006976:	495f      	ldr	r1, [pc, #380]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 8006978:	684a      	ldr	r2, [r1, #4]
 800697a:	6963      	ldr	r3, [r4, #20]
 800697c:	021b      	lsls	r3, r3, #8
 800697e:	4860      	ldr	r0, [pc, #384]	@ (8006b00 <HAL_RCC_OscConfig+0x340>)
 8006980:	4002      	ands	r2, r0
 8006982:	4313      	orrs	r3, r2
 8006984:	604b      	str	r3, [r1, #4]
 8006986:	e78d      	b.n	80068a4 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_DISABLE();
 8006988:	4a5a      	ldr	r2, [pc, #360]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 800698a:	6813      	ldr	r3, [r2, #0]
 800698c:	4961      	ldr	r1, [pc, #388]	@ (8006b14 <HAL_RCC_OscConfig+0x354>)
 800698e:	400b      	ands	r3, r1
 8006990:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006992:	f7fe faa5 	bl	8004ee0 <HAL_GetTick>
 8006996:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006998:	4f56      	ldr	r7, [pc, #344]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 800699a:	2680      	movs	r6, #128	@ 0x80
 800699c:	00f6      	lsls	r6, r6, #3
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	4233      	tst	r3, r6
 80069a2:	d100      	bne.n	80069a6 <HAL_RCC_OscConfig+0x1e6>
 80069a4:	e77e      	b.n	80068a4 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069a6:	f7fe fa9b 	bl	8004ee0 <HAL_GetTick>
 80069aa:	1b40      	subs	r0, r0, r5
 80069ac:	2802      	cmp	r0, #2
 80069ae:	d9f6      	bls.n	800699e <HAL_RCC_OscConfig+0x1de>
            return HAL_TIMEOUT;
 80069b0:	2003      	movs	r0, #3
 80069b2:	e155      	b.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80069b4:	4b4f      	ldr	r3, [pc, #316]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 80069b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069b8:	079b      	lsls	r3, r3, #30
 80069ba:	d503      	bpl.n	80069c4 <HAL_RCC_OscConfig+0x204>
 80069bc:	69a3      	ldr	r3, [r4, #24]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d100      	bne.n	80069c4 <HAL_RCC_OscConfig+0x204>
 80069c2:	e156      	b.n	8006c72 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	075b      	lsls	r3, r3, #29
 80069c8:	d400      	bmi.n	80069cc <HAL_RCC_OscConfig+0x20c>
 80069ca:	e0ac      	b.n	8006b26 <HAL_RCC_OscConfig+0x366>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80069cc:	4b49      	ldr	r3, [pc, #292]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	2338      	movs	r3, #56	@ 0x38
 80069d2:	4013      	ands	r3, r2
 80069d4:	2b20      	cmp	r3, #32
 80069d6:	d04c      	beq.n	8006a72 <HAL_RCC_OscConfig+0x2b2>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80069d8:	4b46      	ldr	r3, [pc, #280]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 80069da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80069dc:	2200      	movs	r2, #0
 80069de:	4691      	mov	r9, r2
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	d40b      	bmi.n	80069fc <HAL_RCC_OscConfig+0x23c>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80069e4:	4b43      	ldr	r3, [pc, #268]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 80069e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069e8:	2180      	movs	r1, #128	@ 0x80
 80069ea:	0549      	lsls	r1, r1, #21
 80069ec:	430a      	orrs	r2, r1
 80069ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80069f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f2:	400b      	ands	r3, r1
 80069f4:	9301      	str	r3, [sp, #4]
 80069f6:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 80069f8:	2301      	movs	r3, #1
 80069fa:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069fc:	4b46      	ldr	r3, [pc, #280]	@ (8006b18 <HAL_RCC_OscConfig+0x358>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	05db      	lsls	r3, r3, #23
 8006a02:	d53f      	bpl.n	8006a84 <HAL_RCC_OscConfig+0x2c4>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a04:	68a3      	ldr	r3, [r4, #8]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d052      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x2f0>
 8006a0a:	2b05      	cmp	r3, #5
 8006a0c:	d056      	beq.n	8006abc <HAL_RCC_OscConfig+0x2fc>
 8006a0e:	4b39      	ldr	r3, [pc, #228]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 8006a10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a12:	2101      	movs	r1, #1
 8006a14:	438a      	bics	r2, r1
 8006a16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006a18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a1a:	3103      	adds	r1, #3
 8006a1c:	438a      	bics	r2, r1
 8006a1e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a20:	68a3      	ldr	r3, [r4, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d054      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x310>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a26:	f7fe fa5b 	bl	8004ee0 <HAL_GetTick>
 8006a2a:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a2c:	4b31      	ldr	r3, [pc, #196]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 8006a2e:	4698      	mov	r8, r3
 8006a30:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a32:	4d3a      	ldr	r5, [pc, #232]	@ (8006b1c <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a34:	4643      	mov	r3, r8
 8006a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a38:	421f      	tst	r7, r3
 8006a3a:	d171      	bne.n	8006b20 <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a3c:	f7fe fa50 	bl	8004ee0 <HAL_GetTick>
 8006a40:	1b80      	subs	r0, r0, r6
 8006a42:	42a8      	cmp	r0, r5
 8006a44:	d9f6      	bls.n	8006a34 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8006a46:	2003      	movs	r0, #3
 8006a48:	e10a      	b.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_LSI_DISABLE();
 8006a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 8006a4c:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8006a4e:	2101      	movs	r1, #1
 8006a50:	438b      	bics	r3, r1
 8006a52:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8006a54:	f7fe fa44 	bl	8004ee0 <HAL_GetTick>
 8006a58:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a5a:	4f26      	ldr	r7, [pc, #152]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 8006a5c:	2602      	movs	r6, #2
 8006a5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a60:	421e      	tst	r6, r3
 8006a62:	d0af      	beq.n	80069c4 <HAL_RCC_OscConfig+0x204>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a64:	f7fe fa3c 	bl	8004ee0 <HAL_GetTick>
 8006a68:	1b40      	subs	r0, r0, r5
 8006a6a:	2802      	cmp	r0, #2
 8006a6c:	d9f7      	bls.n	8006a5e <HAL_RCC_OscConfig+0x29e>
            return HAL_TIMEOUT;
 8006a6e:	2003      	movs	r0, #3
 8006a70:	e0f6      	b.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006a72:	4b20      	ldr	r3, [pc, #128]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 8006a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a76:	079b      	lsls	r3, r3, #30
 8006a78:	d555      	bpl.n	8006b26 <HAL_RCC_OscConfig+0x366>
 8006a7a:	68a3      	ldr	r3, [r4, #8]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d152      	bne.n	8006b26 <HAL_RCC_OscConfig+0x366>
        return HAL_ERROR;
 8006a80:	2001      	movs	r0, #1
 8006a82:	e0ed      	b.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a84:	4a24      	ldr	r2, [pc, #144]	@ (8006b18 <HAL_RCC_OscConfig+0x358>)
 8006a86:	6811      	ldr	r1, [r2, #0]
 8006a88:	2380      	movs	r3, #128	@ 0x80
 8006a8a:	005b      	lsls	r3, r3, #1
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006a90:	f7fe fa26 	bl	8004ee0 <HAL_GetTick>
 8006a94:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a96:	4d20      	ldr	r5, [pc, #128]	@ (8006b18 <HAL_RCC_OscConfig+0x358>)
 8006a98:	2780      	movs	r7, #128	@ 0x80
 8006a9a:	007f      	lsls	r7, r7, #1
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	423b      	tst	r3, r7
 8006aa0:	d1b0      	bne.n	8006a04 <HAL_RCC_OscConfig+0x244>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aa2:	f7fe fa1d 	bl	8004ee0 <HAL_GetTick>
 8006aa6:	1b80      	subs	r0, r0, r6
 8006aa8:	2802      	cmp	r0, #2
 8006aaa:	d9f7      	bls.n	8006a9c <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8006aac:	2003      	movs	r0, #3
 8006aae:	e0d7      	b.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ab0:	4a10      	ldr	r2, [pc, #64]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 8006ab2:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	430b      	orrs	r3, r1
 8006ab8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8006aba:	e7b1      	b.n	8006a20 <HAL_RCC_OscConfig+0x260>
 8006abc:	4b0d      	ldr	r3, [pc, #52]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 8006abe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006ac0:	2104      	movs	r1, #4
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006ac6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006ac8:	3903      	subs	r1, #3
 8006aca:	430a      	orrs	r2, r1
 8006acc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006ace:	e7a7      	b.n	8006a20 <HAL_RCC_OscConfig+0x260>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad0:	f7fe fa06 	bl	8004ee0 <HAL_GetTick>
 8006ad4:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ad6:	4b07      	ldr	r3, [pc, #28]	@ (8006af4 <HAL_RCC_OscConfig+0x334>)
 8006ad8:	4698      	mov	r8, r3
 8006ada:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006adc:	4d0f      	ldr	r5, [pc, #60]	@ (8006b1c <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ade:	4643      	mov	r3, r8
 8006ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ae2:	421f      	tst	r7, r3
 8006ae4:	d01c      	beq.n	8006b20 <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ae6:	f7fe f9fb 	bl	8004ee0 <HAL_GetTick>
 8006aea:	1b80      	subs	r0, r0, r6
 8006aec:	42a8      	cmp	r0, r5
 8006aee:	d9f6      	bls.n	8006ade <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8006af0:	2003      	movs	r0, #3
 8006af2:	e0b5      	b.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
 8006af4:	40021000 	.word	0x40021000
 8006af8:	fffeffff 	.word	0xfffeffff
 8006afc:	fffbffff 	.word	0xfffbffff
 8006b00:	ffff80ff 	.word	0xffff80ff
 8006b04:	ffffc7ff 	.word	0xffffc7ff
 8006b08:	2000044c 	.word	0x2000044c
 8006b0c:	00f42400 	.word	0x00f42400
 8006b10:	20000454 	.word	0x20000454
 8006b14:	fffffeff 	.word	0xfffffeff
 8006b18:	40007000 	.word	0x40007000
 8006b1c:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006b20:	464b      	mov	r3, r9
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d021      	beq.n	8006b6a <HAL_RCC_OscConfig+0x3aa>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b26:	69e3      	ldr	r3, [r4, #28]
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8006b28:	2000      	movs	r0, #0
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d100      	bne.n	8006b30 <HAL_RCC_OscConfig+0x370>
 8006b2e:	e097      	b.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b30:	4a66      	ldr	r2, [pc, #408]	@ (8006ccc <HAL_RCC_OscConfig+0x50c>)
 8006b32:	6891      	ldr	r1, [r2, #8]
 8006b34:	2238      	movs	r2, #56	@ 0x38
 8006b36:	400a      	ands	r2, r1
 8006b38:	2a10      	cmp	r2, #16
 8006b3a:	d066      	beq.n	8006c0a <HAL_RCC_OscConfig+0x44a>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d01a      	beq.n	8006b76 <HAL_RCC_OscConfig+0x3b6>
        __HAL_RCC_PLL_DISABLE();
 8006b40:	4a62      	ldr	r2, [pc, #392]	@ (8006ccc <HAL_RCC_OscConfig+0x50c>)
 8006b42:	6813      	ldr	r3, [r2, #0]
 8006b44:	4962      	ldr	r1, [pc, #392]	@ (8006cd0 <HAL_RCC_OscConfig+0x510>)
 8006b46:	400b      	ands	r3, r1
 8006b48:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006b4a:	f7fe f9c9 	bl	8004ee0 <HAL_GetTick>
 8006b4e:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b50:	4e5e      	ldr	r6, [pc, #376]	@ (8006ccc <HAL_RCC_OscConfig+0x50c>)
 8006b52:	2580      	movs	r5, #128	@ 0x80
 8006b54:	04ad      	lsls	r5, r5, #18
 8006b56:	6833      	ldr	r3, [r6, #0]
 8006b58:	422b      	tst	r3, r5
 8006b5a:	d04f      	beq.n	8006bfc <HAL_RCC_OscConfig+0x43c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b5c:	f7fe f9c0 	bl	8004ee0 <HAL_GetTick>
 8006b60:	1b00      	subs	r0, r0, r4
 8006b62:	2802      	cmp	r0, #2
 8006b64:	d9f7      	bls.n	8006b56 <HAL_RCC_OscConfig+0x396>
            return HAL_TIMEOUT;
 8006b66:	2003      	movs	r0, #3
 8006b68:	e07a      	b.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PWR_CLK_DISABLE();
 8006b6a:	4a58      	ldr	r2, [pc, #352]	@ (8006ccc <HAL_RCC_OscConfig+0x50c>)
 8006b6c:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8006b6e:	4959      	ldr	r1, [pc, #356]	@ (8006cd4 <HAL_RCC_OscConfig+0x514>)
 8006b70:	400b      	ands	r3, r1
 8006b72:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8006b74:	e7d7      	b.n	8006b26 <HAL_RCC_OscConfig+0x366>
        __HAL_RCC_PLL_DISABLE();
 8006b76:	4a55      	ldr	r2, [pc, #340]	@ (8006ccc <HAL_RCC_OscConfig+0x50c>)
 8006b78:	6813      	ldr	r3, [r2, #0]
 8006b7a:	4955      	ldr	r1, [pc, #340]	@ (8006cd0 <HAL_RCC_OscConfig+0x510>)
 8006b7c:	400b      	ands	r3, r1
 8006b7e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006b80:	f7fe f9ae 	bl	8004ee0 <HAL_GetTick>
 8006b84:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b86:	4f51      	ldr	r7, [pc, #324]	@ (8006ccc <HAL_RCC_OscConfig+0x50c>)
 8006b88:	2680      	movs	r6, #128	@ 0x80
 8006b8a:	04b6      	lsls	r6, r6, #18
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	4233      	tst	r3, r6
 8006b90:	d006      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b92:	f7fe f9a5 	bl	8004ee0 <HAL_GetTick>
 8006b96:	1b40      	subs	r0, r0, r5
 8006b98:	2802      	cmp	r0, #2
 8006b9a:	d9f7      	bls.n	8006b8c <HAL_RCC_OscConfig+0x3cc>
            return HAL_TIMEOUT;
 8006b9c:	2003      	movs	r0, #3
 8006b9e:	e05f      	b.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ba0:	4a4a      	ldr	r2, [pc, #296]	@ (8006ccc <HAL_RCC_OscConfig+0x50c>)
 8006ba2:	68d1      	ldr	r1, [r2, #12]
 8006ba4:	6a23      	ldr	r3, [r4, #32]
 8006ba6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8006ba8:	4303      	orrs	r3, r0
 8006baa:	484b      	ldr	r0, [pc, #300]	@ (8006cd8 <HAL_RCC_OscConfig+0x518>)
 8006bac:	4001      	ands	r1, r0
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006bb2:	430b      	orrs	r3, r1
 8006bb4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006bb6:	430b      	orrs	r3, r1
 8006bb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bba:	430b      	orrs	r3, r1
 8006bbc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006bbe:	0209      	lsls	r1, r1, #8
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8006bc4:	6811      	ldr	r1, [r2, #0]
 8006bc6:	2380      	movs	r3, #128	@ 0x80
 8006bc8:	045b      	lsls	r3, r3, #17
 8006bca:	430b      	orrs	r3, r1
 8006bcc:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006bce:	68d1      	ldr	r1, [r2, #12]
 8006bd0:	2380      	movs	r3, #128	@ 0x80
 8006bd2:	055b      	lsls	r3, r3, #21
 8006bd4:	430b      	orrs	r3, r1
 8006bd6:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8006bd8:	f7fe f982 	bl	8004ee0 <HAL_GetTick>
 8006bdc:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bde:	4e3b      	ldr	r6, [pc, #236]	@ (8006ccc <HAL_RCC_OscConfig+0x50c>)
 8006be0:	2580      	movs	r5, #128	@ 0x80
 8006be2:	04ad      	lsls	r5, r5, #18
 8006be4:	6833      	ldr	r3, [r6, #0]
 8006be6:	422b      	tst	r3, r5
 8006be8:	d106      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x438>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bea:	f7fe f979 	bl	8004ee0 <HAL_GetTick>
 8006bee:	1b00      	subs	r0, r0, r4
 8006bf0:	2802      	cmp	r0, #2
 8006bf2:	d9f7      	bls.n	8006be4 <HAL_RCC_OscConfig+0x424>
            return HAL_TIMEOUT;
 8006bf4:	2003      	movs	r0, #3
 8006bf6:	e033      	b.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
  return HAL_OK;
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	e031      	b.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006bfc:	4a33      	ldr	r2, [pc, #204]	@ (8006ccc <HAL_RCC_OscConfig+0x50c>)
 8006bfe:	68d3      	ldr	r3, [r2, #12]
 8006c00:	4936      	ldr	r1, [pc, #216]	@ (8006cdc <HAL_RCC_OscConfig+0x51c>)
 8006c02:	400b      	ands	r3, r1
 8006c04:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8006c06:	2000      	movs	r0, #0
 8006c08:	e02a      	b.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d033      	beq.n	8006c76 <HAL_RCC_OscConfig+0x4b6>
        temp_pllckcfg = RCC->PLLCFGR;
 8006c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8006ccc <HAL_RCC_OscConfig+0x50c>)
 8006c10:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c12:	2303      	movs	r3, #3
 8006c14:	4013      	ands	r3, r2
 8006c16:	6a21      	ldr	r1, [r4, #32]
          return HAL_ERROR;
 8006c18:	2001      	movs	r0, #1
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c1a:	428b      	cmp	r3, r1
 8006c1c:	d120      	bne.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c1e:	2370      	movs	r3, #112	@ 0x70
 8006c20:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c22:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006c24:	428b      	cmp	r3, r1
 8006c26:	d11b      	bne.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c28:	21fe      	movs	r1, #254	@ 0xfe
 8006c2a:	01c9      	lsls	r1, r1, #7
 8006c2c:	4011      	ands	r1, r2
 8006c2e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006c30:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c32:	4299      	cmp	r1, r3
 8006c34:	d114      	bne.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c36:	23f8      	movs	r3, #248	@ 0xf8
 8006c38:	039b      	lsls	r3, r3, #14
 8006c3a:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c3c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006c3e:	428b      	cmp	r3, r1
 8006c40:	d10e      	bne.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006c42:	23e0      	movs	r3, #224	@ 0xe0
 8006c44:	051b      	lsls	r3, r3, #20
 8006c46:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c48:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006c4a:	428b      	cmp	r3, r1
 8006c4c:	d108      	bne.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006c4e:	0f53      	lsrs	r3, r2, #29
 8006c50:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006c52:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8006c54:	1a9b      	subs	r3, r3, r2
 8006c56:	1e5a      	subs	r2, r3, #1
 8006c58:	4193      	sbcs	r3, r2
 8006c5a:	b2d8      	uxtb	r0, r3
 8006c5c:	e000      	b.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
    return HAL_ERROR;
 8006c5e:	2001      	movs	r0, #1
}
 8006c60:	b003      	add	sp, #12
 8006c62:	bcc0      	pop	{r6, r7}
 8006c64:	46b9      	mov	r9, r7
 8006c66:	46b0      	mov	r8, r6
 8006c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8006c6a:	2001      	movs	r0, #1
 8006c6c:	e7f8      	b.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
          return HAL_ERROR;
 8006c6e:	2001      	movs	r0, #1
 8006c70:	e7f6      	b.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
        return HAL_ERROR;
 8006c72:	2001      	movs	r0, #1
 8006c74:	e7f4      	b.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
        return HAL_ERROR;
 8006c76:	2001      	movs	r0, #1
 8006c78:	e7f2      	b.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
        return HAL_ERROR;
 8006c7a:	2001      	movs	r0, #1
 8006c7c:	e7f0      	b.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c7e:	4913      	ldr	r1, [pc, #76]	@ (8006ccc <HAL_RCC_OscConfig+0x50c>)
 8006c80:	684a      	ldr	r2, [r1, #4]
 8006c82:	6963      	ldr	r3, [r4, #20]
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	4816      	ldr	r0, [pc, #88]	@ (8006ce0 <HAL_RCC_OscConfig+0x520>)
 8006c88:	4002      	ands	r2, r0
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c8e:	e602      	b.n	8006896 <HAL_RCC_OscConfig+0xd6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c90:	4b0e      	ldr	r3, [pc, #56]	@ (8006ccc <HAL_RCC_OscConfig+0x50c>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	055b      	lsls	r3, r3, #21
 8006c96:	d5f2      	bpl.n	8006c7e <HAL_RCC_OscConfig+0x4be>
 8006c98:	68e3      	ldr	r3, [r4, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d0ed      	beq.n	8006c7a <HAL_RCC_OscConfig+0x4ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c9e:	490b      	ldr	r1, [pc, #44]	@ (8006ccc <HAL_RCC_OscConfig+0x50c>)
 8006ca0:	684a      	ldr	r2, [r1, #4]
 8006ca2:	6963      	ldr	r3, [r4, #20]
 8006ca4:	021b      	lsls	r3, r3, #8
 8006ca6:	480e      	ldr	r0, [pc, #56]	@ (8006ce0 <HAL_RCC_OscConfig+0x520>)
 8006ca8:	4002      	ands	r2, r0
 8006caa:	4313      	orrs	r3, r2
 8006cac:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006cae:	e5f2      	b.n	8006896 <HAL_RCC_OscConfig+0xd6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cb0:	68e3      	ldr	r3, [r4, #12]
        return HAL_ERROR;
 8006cb2:	2001      	movs	r0, #1
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d0d3      	beq.n	8006c60 <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cb8:	4904      	ldr	r1, [pc, #16]	@ (8006ccc <HAL_RCC_OscConfig+0x50c>)
 8006cba:	684a      	ldr	r2, [r1, #4]
 8006cbc:	6963      	ldr	r3, [r4, #20]
 8006cbe:	021b      	lsls	r3, r3, #8
 8006cc0:	4807      	ldr	r0, [pc, #28]	@ (8006ce0 <HAL_RCC_OscConfig+0x520>)
 8006cc2:	4002      	ands	r2, r0
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006cc8:	e5d7      	b.n	800687a <HAL_RCC_OscConfig+0xba>
 8006cca:	46c0      	nop			@ (mov r8, r8)
 8006ccc:	40021000 	.word	0x40021000
 8006cd0:	feffffff 	.word	0xfeffffff
 8006cd4:	efffffff 	.word	0xefffffff
 8006cd8:	11c1808c 	.word	0x11c1808c
 8006cdc:	eefefffc 	.word	0xeefefffc
 8006ce0:	ffff80ff 	.word	0xffff80ff

08006ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ce4:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ce6:	4b29      	ldr	r3, [pc, #164]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0xa8>)
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	2238      	movs	r2, #56	@ 0x38
 8006cec:	421a      	tst	r2, r3
 8006cee:	d106      	bne.n	8006cfe <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006cf0:	4b26      	ldr	r3, [pc, #152]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0xa8>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	049b      	lsls	r3, r3, #18
 8006cf6:	0f5b      	lsrs	r3, r3, #29

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006cf8:	4825      	ldr	r0, [pc, #148]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0xac>)
 8006cfa:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8006cfc:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cfe:	4b23      	ldr	r3, [pc, #140]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0xa8>)
 8006d00:	689a      	ldr	r2, [r3, #8]
 8006d02:	2338      	movs	r3, #56	@ 0x38
 8006d04:	4013      	ands	r3, r2
 8006d06:	2b08      	cmp	r3, #8
 8006d08:	d03a      	beq.n	8006d80 <HAL_RCC_GetSysClockFreq+0x9c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d0a:	4b20      	ldr	r3, [pc, #128]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0xa8>)
 8006d0c:	689a      	ldr	r2, [r3, #8]
 8006d0e:	2338      	movs	r3, #56	@ 0x38
 8006d10:	4013      	ands	r3, r2
 8006d12:	2b10      	cmp	r3, #16
 8006d14:	d014      	beq.n	8006d40 <HAL_RCC_GetSysClockFreq+0x5c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006d16:	4b1d      	ldr	r3, [pc, #116]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0xa8>)
 8006d18:	689a      	ldr	r2, [r3, #8]
 8006d1a:	2338      	movs	r3, #56	@ 0x38
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	2b20      	cmp	r3, #32
 8006d20:	d030      	beq.n	8006d84 <HAL_RCC_GetSysClockFreq+0xa0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006d22:	4b1a      	ldr	r3, [pc, #104]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0xa8>)
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	2038      	movs	r0, #56	@ 0x38
 8006d28:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 8006d2a:	3818      	subs	r0, #24
 8006d2c:	1e43      	subs	r3, r0, #1
 8006d2e:	4198      	sbcs	r0, r3
 8006d30:	4240      	negs	r0, r0
 8006d32:	4b18      	ldr	r3, [pc, #96]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006d34:	4018      	ands	r0, r3
 8006d36:	23fa      	movs	r3, #250	@ 0xfa
 8006d38:	01db      	lsls	r3, r3, #7
 8006d3a:	469c      	mov	ip, r3
 8006d3c:	4460      	add	r0, ip
 8006d3e:	e7dd      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006d40:	4a12      	ldr	r2, [pc, #72]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0xa8>)
 8006d42:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d44:	68d1      	ldr	r1, [r2, #12]
 8006d46:	0649      	lsls	r1, r1, #25
 8006d48:	0f49      	lsrs	r1, r1, #29
 8006d4a:	3101      	adds	r1, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006d4c:	43db      	mvns	r3, r3
    switch (pllsource)
 8006d4e:	079b      	lsls	r3, r3, #30
 8006d50:	d00e      	beq.n	8006d70 <HAL_RCC_GetSysClockFreq+0x8c>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006d52:	4b0e      	ldr	r3, [pc, #56]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0xa8>)
 8006d54:	68dc      	ldr	r4, [r3, #12]
 8006d56:	0464      	lsls	r4, r4, #17
 8006d58:	0e64      	lsrs	r4, r4, #25
 8006d5a:	480d      	ldr	r0, [pc, #52]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0xac>)
 8006d5c:	f7f9 f9d4 	bl	8000108 <__udivsi3>
 8006d60:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006d62:	4b0a      	ldr	r3, [pc, #40]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0xa8>)
 8006d64:	68d9      	ldr	r1, [r3, #12]
 8006d66:	0f49      	lsrs	r1, r1, #29
 8006d68:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8006d6a:	f7f9 f9cd 	bl	8000108 <__udivsi3>
 8006d6e:	e7c5      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d70:	68d4      	ldr	r4, [r2, #12]
 8006d72:	0464      	lsls	r4, r4, #17
 8006d74:	0e64      	lsrs	r4, r4, #25
 8006d76:	4808      	ldr	r0, [pc, #32]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006d78:	f7f9 f9c6 	bl	8000108 <__udivsi3>
 8006d7c:	4360      	muls	r0, r4
        break;
 8006d7e:	e7f0      	b.n	8006d62 <HAL_RCC_GetSysClockFreq+0x7e>
    sysclockfreq = HSE_VALUE;
 8006d80:	4805      	ldr	r0, [pc, #20]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006d82:	e7bb      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8006d84:	2080      	movs	r0, #128	@ 0x80
 8006d86:	0200      	lsls	r0, r0, #8
 8006d88:	e7b8      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0x18>
 8006d8a:	46c0      	nop			@ (mov r8, r8)
 8006d8c:	40021000 	.word	0x40021000
 8006d90:	00f42400 	.word	0x00f42400
 8006d94:	ffff8300 	.word	0xffff8300
 8006d98:	007a1200 	.word	0x007a1200

08006d9c <HAL_RCC_ClockConfig>:
{
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	46ce      	mov	lr, r9
 8006da0:	4647      	mov	r7, r8
 8006da2:	b580      	push	{r7, lr}
 8006da4:	0004      	movs	r4, r0
 8006da6:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8006da8:	2800      	cmp	r0, #0
 8006daa:	d100      	bne.n	8006dae <HAL_RCC_ClockConfig+0x12>
 8006dac:	e0b6      	b.n	8006f1c <HAL_RCC_ClockConfig+0x180>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006dae:	4b5d      	ldr	r3, [pc, #372]	@ (8006f24 <HAL_RCC_ClockConfig+0x188>)
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	2307      	movs	r3, #7
 8006db4:	4013      	ands	r3, r2
 8006db6:	428b      	cmp	r3, r1
 8006db8:	d321      	bcc.n	8006dfe <HAL_RCC_ClockConfig+0x62>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	079a      	lsls	r2, r3, #30
 8006dbe:	d50e      	bpl.n	8006dde <HAL_RCC_ClockConfig+0x42>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dc0:	075b      	lsls	r3, r3, #29
 8006dc2:	d505      	bpl.n	8006dd0 <HAL_RCC_ClockConfig+0x34>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006dc4:	4a58      	ldr	r2, [pc, #352]	@ (8006f28 <HAL_RCC_ClockConfig+0x18c>)
 8006dc6:	6891      	ldr	r1, [r2, #8]
 8006dc8:	23e0      	movs	r3, #224	@ 0xe0
 8006dca:	01db      	lsls	r3, r3, #7
 8006dcc:	430b      	orrs	r3, r1
 8006dce:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dd0:	4a55      	ldr	r2, [pc, #340]	@ (8006f28 <HAL_RCC_ClockConfig+0x18c>)
 8006dd2:	6893      	ldr	r3, [r2, #8]
 8006dd4:	4955      	ldr	r1, [pc, #340]	@ (8006f2c <HAL_RCC_ClockConfig+0x190>)
 8006dd6:	400b      	ands	r3, r1
 8006dd8:	68a1      	ldr	r1, [r4, #8]
 8006dda:	430b      	orrs	r3, r1
 8006ddc:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	07db      	lsls	r3, r3, #31
 8006de2:	d55b      	bpl.n	8006e9c <HAL_RCC_ClockConfig+0x100>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006de4:	6863      	ldr	r3, [r4, #4]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d023      	beq.n	8006e32 <HAL_RCC_ClockConfig+0x96>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d042      	beq.n	8006e74 <HAL_RCC_ClockConfig+0xd8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d146      	bne.n	8006e80 <HAL_RCC_ClockConfig+0xe4>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006df2:	4a4d      	ldr	r2, [pc, #308]	@ (8006f28 <HAL_RCC_ClockConfig+0x18c>)
 8006df4:	6812      	ldr	r2, [r2, #0]
 8006df6:	0552      	lsls	r2, r2, #21
 8006df8:	d420      	bmi.n	8006e3c <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8006dfa:	2001      	movs	r0, #1
 8006dfc:	e070      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x144>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dfe:	4a49      	ldr	r2, [pc, #292]	@ (8006f24 <HAL_RCC_ClockConfig+0x188>)
 8006e00:	6813      	ldr	r3, [r2, #0]
 8006e02:	2107      	movs	r1, #7
 8006e04:	438b      	bics	r3, r1
 8006e06:	432b      	orrs	r3, r5
 8006e08:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006e0a:	f7fe f869 	bl	8004ee0 <HAL_GetTick>
 8006e0e:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006e10:	4b44      	ldr	r3, [pc, #272]	@ (8006f24 <HAL_RCC_ClockConfig+0x188>)
 8006e12:	4698      	mov	r8, r3
 8006e14:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e16:	4b46      	ldr	r3, [pc, #280]	@ (8006f30 <HAL_RCC_ClockConfig+0x194>)
 8006e18:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006e1a:	4643      	mov	r3, r8
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	403b      	ands	r3, r7
 8006e20:	42ab      	cmp	r3, r5
 8006e22:	d0ca      	beq.n	8006dba <HAL_RCC_ClockConfig+0x1e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e24:	f7fe f85c 	bl	8004ee0 <HAL_GetTick>
 8006e28:	1b80      	subs	r0, r0, r6
 8006e2a:	4548      	cmp	r0, r9
 8006e2c:	d9f5      	bls.n	8006e1a <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8006e2e:	2003      	movs	r0, #3
 8006e30:	e056      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e32:	4a3d      	ldr	r2, [pc, #244]	@ (8006f28 <HAL_RCC_ClockConfig+0x18c>)
 8006e34:	6812      	ldr	r2, [r2, #0]
 8006e36:	0392      	lsls	r2, r2, #14
 8006e38:	d400      	bmi.n	8006e3c <HAL_RCC_ClockConfig+0xa0>
 8006e3a:	e071      	b.n	8006f20 <HAL_RCC_ClockConfig+0x184>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e3c:	493a      	ldr	r1, [pc, #232]	@ (8006f28 <HAL_RCC_ClockConfig+0x18c>)
 8006e3e:	688a      	ldr	r2, [r1, #8]
 8006e40:	2007      	movs	r0, #7
 8006e42:	4382      	bics	r2, r0
 8006e44:	4313      	orrs	r3, r2
 8006e46:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006e48:	f7fe f84a 	bl	8004ee0 <HAL_GetTick>
 8006e4c:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e4e:	4b36      	ldr	r3, [pc, #216]	@ (8006f28 <HAL_RCC_ClockConfig+0x18c>)
 8006e50:	4698      	mov	r8, r3
 8006e52:	2738      	movs	r7, #56	@ 0x38
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e54:	4b36      	ldr	r3, [pc, #216]	@ (8006f30 <HAL_RCC_ClockConfig+0x194>)
 8006e56:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e58:	4643      	mov	r3, r8
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	403a      	ands	r2, r7
 8006e5e:	6863      	ldr	r3, [r4, #4]
 8006e60:	00db      	lsls	r3, r3, #3
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d01a      	beq.n	8006e9c <HAL_RCC_ClockConfig+0x100>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e66:	f7fe f83b 	bl	8004ee0 <HAL_GetTick>
 8006e6a:	1b80      	subs	r0, r0, r6
 8006e6c:	4548      	cmp	r0, r9
 8006e6e:	d9f3      	bls.n	8006e58 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8006e70:	2003      	movs	r0, #3
 8006e72:	e035      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e74:	4a2c      	ldr	r2, [pc, #176]	@ (8006f28 <HAL_RCC_ClockConfig+0x18c>)
 8006e76:	6812      	ldr	r2, [r2, #0]
 8006e78:	0192      	lsls	r2, r2, #6
 8006e7a:	d4df      	bmi.n	8006e3c <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8006e7c:	2001      	movs	r0, #1
 8006e7e:	e02f      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x144>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d005      	beq.n	8006e90 <HAL_RCC_ClockConfig+0xf4>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e84:	4a28      	ldr	r2, [pc, #160]	@ (8006f28 <HAL_RCC_ClockConfig+0x18c>)
 8006e86:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006e88:	0792      	lsls	r2, r2, #30
 8006e8a:	d4d7      	bmi.n	8006e3c <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8006e8c:	2001      	movs	r0, #1
 8006e8e:	e027      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e90:	4a25      	ldr	r2, [pc, #148]	@ (8006f28 <HAL_RCC_ClockConfig+0x18c>)
 8006e92:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8006e94:	0792      	lsls	r2, r2, #30
 8006e96:	d4d1      	bmi.n	8006e3c <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8006e98:	2001      	movs	r0, #1
 8006e9a:	e021      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e9c:	4b21      	ldr	r3, [pc, #132]	@ (8006f24 <HAL_RCC_ClockConfig+0x188>)
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	2307      	movs	r3, #7
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	42ab      	cmp	r3, r5
 8006ea6:	d81f      	bhi.n	8006ee8 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ea8:	6823      	ldr	r3, [r4, #0]
 8006eaa:	075b      	lsls	r3, r3, #29
 8006eac:	d506      	bpl.n	8006ebc <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006eae:	4a1e      	ldr	r2, [pc, #120]	@ (8006f28 <HAL_RCC_ClockConfig+0x18c>)
 8006eb0:	6893      	ldr	r3, [r2, #8]
 8006eb2:	4920      	ldr	r1, [pc, #128]	@ (8006f34 <HAL_RCC_ClockConfig+0x198>)
 8006eb4:	400b      	ands	r3, r1
 8006eb6:	68e1      	ldr	r1, [r4, #12]
 8006eb8:	430b      	orrs	r3, r1
 8006eba:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006ebc:	f7ff ff12 	bl	8006ce4 <HAL_RCC_GetSysClockFreq>
 8006ec0:	4b19      	ldr	r3, [pc, #100]	@ (8006f28 <HAL_RCC_ClockConfig+0x18c>)
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	491c      	ldr	r1, [pc, #112]	@ (8006f38 <HAL_RCC_ClockConfig+0x19c>)
 8006ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8006f3c <HAL_RCC_ClockConfig+0x1a0>)
 8006ec8:	051b      	lsls	r3, r3, #20
 8006eca:	0f1b      	lsrs	r3, r3, #28
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	589b      	ldr	r3, [r3, r2]
 8006ed0:	221f      	movs	r2, #31
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	40d8      	lsrs	r0, r3
 8006ed6:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8006ed8:	4b19      	ldr	r3, [pc, #100]	@ (8006f40 <HAL_RCC_ClockConfig+0x1a4>)
 8006eda:	6818      	ldr	r0, [r3, #0]
 8006edc:	f7fd ffb8 	bl	8004e50 <HAL_InitTick>
}
 8006ee0:	bcc0      	pop	{r6, r7}
 8006ee2:	46b9      	mov	r9, r7
 8006ee4:	46b0      	mov	r8, r6
 8006ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8006f24 <HAL_RCC_ClockConfig+0x188>)
 8006eea:	6813      	ldr	r3, [r2, #0]
 8006eec:	2107      	movs	r1, #7
 8006eee:	438b      	bics	r3, r1
 8006ef0:	432b      	orrs	r3, r5
 8006ef2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006ef4:	f7fd fff4 	bl	8004ee0 <HAL_GetTick>
 8006ef8:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006efa:	4b0a      	ldr	r3, [pc, #40]	@ (8006f24 <HAL_RCC_ClockConfig+0x188>)
 8006efc:	4698      	mov	r8, r3
 8006efe:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f00:	4b0b      	ldr	r3, [pc, #44]	@ (8006f30 <HAL_RCC_ClockConfig+0x194>)
 8006f02:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006f04:	4643      	mov	r3, r8
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	403b      	ands	r3, r7
 8006f0a:	42ab      	cmp	r3, r5
 8006f0c:	d0cc      	beq.n	8006ea8 <HAL_RCC_ClockConfig+0x10c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f0e:	f7fd ffe7 	bl	8004ee0 <HAL_GetTick>
 8006f12:	1b80      	subs	r0, r0, r6
 8006f14:	4548      	cmp	r0, r9
 8006f16:	d9f5      	bls.n	8006f04 <HAL_RCC_ClockConfig+0x168>
        return HAL_TIMEOUT;
 8006f18:	2003      	movs	r0, #3
 8006f1a:	e7e1      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8006f1c:	2001      	movs	r0, #1
 8006f1e:	e7df      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8006f20:	2001      	movs	r0, #1
 8006f22:	e7dd      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x144>
 8006f24:	40022000 	.word	0x40022000
 8006f28:	40021000 	.word	0x40021000
 8006f2c:	fffff0ff 	.word	0xfffff0ff
 8006f30:	00001388 	.word	0x00001388
 8006f34:	ffff8fff 	.word	0xffff8fff
 8006f38:	2000044c 	.word	0x2000044c
 8006f3c:	08009cf8 	.word	0x08009cf8
 8006f40:	20000454 	.word	0x20000454

08006f44 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006f44:	4b06      	ldr	r3, [pc, #24]	@ (8006f60 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006f46:	689b      	ldr	r3, [r3, #8]
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8006f48:	4a06      	ldr	r2, [pc, #24]	@ (8006f64 <HAL_RCC_GetPCLK1Freq+0x20>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006f4a:	4907      	ldr	r1, [pc, #28]	@ (8006f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f4c:	045b      	lsls	r3, r3, #17
 8006f4e:	0f5b      	lsrs	r3, r3, #29
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	585b      	ldr	r3, [r3, r1]
 8006f54:	211f      	movs	r1, #31
 8006f56:	400b      	ands	r3, r1
 8006f58:	6810      	ldr	r0, [r2, #0]
 8006f5a:	40d8      	lsrs	r0, r3
}
 8006f5c:	4770      	bx	lr
 8006f5e:	46c0      	nop			@ (mov r8, r8)
 8006f60:	40021000 	.word	0x40021000
 8006f64:	2000044c 	.word	0x2000044c
 8006f68:	08009cd8 	.word	0x08009cd8

08006f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f6e:	46d6      	mov	lr, sl
 8006f70:	464f      	mov	r7, r9
 8006f72:	4646      	mov	r6, r8
 8006f74:	b5c0      	push	{r6, r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f7a:	6803      	ldr	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f7c:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f7e:	039b      	lsls	r3, r3, #14
 8006f80:	d52b      	bpl.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x6e>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f82:	4b71      	ldr	r3, [pc, #452]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8006f86:	2200      	movs	r2, #0
 8006f88:	4692      	mov	sl, r2
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	d40b      	bmi.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f8e:	4b6e      	ldr	r3, [pc, #440]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006f90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f92:	2180      	movs	r1, #128	@ 0x80
 8006f94:	0549      	lsls	r1, r1, #21
 8006f96:	430a      	orrs	r2, r1
 8006f98:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f9c:	400b      	ands	r3, r1
 8006f9e:	9301      	str	r3, [sp, #4]
 8006fa0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	469a      	mov	sl, r3
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fa6:	4a69      	ldr	r2, [pc, #420]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006fa8:	6811      	ldr	r1, [r2, #0]
 8006faa:	2380      	movs	r3, #128	@ 0x80
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	430b      	orrs	r3, r1
 8006fb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fb2:	f7fd ff95 	bl	8004ee0 <HAL_GetTick>
 8006fb6:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fb8:	4f64      	ldr	r7, [pc, #400]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006fba:	2680      	movs	r6, #128	@ 0x80
 8006fbc:	0076      	lsls	r6, r6, #1
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	4233      	tst	r3, r6
 8006fc2:	d000      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8006fc4:	e0af      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fc6:	f7fd ff8b 	bl	8004ee0 <HAL_GetTick>
 8006fca:	1b40      	subs	r0, r0, r5
 8006fcc:	2802      	cmp	r0, #2
 8006fce:	d9f6      	bls.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x52>
      {
        ret = HAL_TIMEOUT;
 8006fd0:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006fd2:	4653      	mov	r3, sl
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d100      	bne.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006fd8:	e08a      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fda:	6823      	ldr	r3, [r4, #0]
 8006fdc:	07db      	lsls	r3, r3, #31
 8006fde:	d506      	bpl.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fe0:	4a59      	ldr	r2, [pc, #356]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006fe2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8006fe4:	2103      	movs	r1, #3
 8006fe6:	438b      	bics	r3, r1
 8006fe8:	6861      	ldr	r1, [r4, #4]
 8006fea:	430b      	orrs	r3, r1
 8006fec:	6553      	str	r3, [r2, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	06db      	lsls	r3, r3, #27
 8006ff2:	d506      	bpl.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ff4:	4a54      	ldr	r2, [pc, #336]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006ff6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8006ff8:	4955      	ldr	r1, [pc, #340]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006ffa:	400b      	ands	r3, r1
 8006ffc:	68a1      	ldr	r1, [r4, #8]
 8006ffe:	430b      	orrs	r3, r1
 8007000:	6553      	str	r3, [r2, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007002:	6823      	ldr	r3, [r4, #0]
 8007004:	059b      	lsls	r3, r3, #22
 8007006:	d506      	bpl.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007008:	4a4f      	ldr	r2, [pc, #316]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800700a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800700c:	4951      	ldr	r1, [pc, #324]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800700e:	400b      	ands	r3, r1
 8007010:	6961      	ldr	r1, [r4, #20]
 8007012:	430b      	orrs	r3, r1
 8007014:	6553      	str	r3, [r2, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	055b      	lsls	r3, r3, #21
 800701a:	d506      	bpl.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800701c:	4a4a      	ldr	r2, [pc, #296]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800701e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007020:	494d      	ldr	r1, [pc, #308]	@ (8007158 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8007022:	400b      	ands	r3, r1
 8007024:	69a1      	ldr	r1, [r4, #24]
 8007026:	430b      	orrs	r3, r1
 8007028:	6553      	str	r3, [r2, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	069b      	lsls	r3, r3, #26
 800702e:	d506      	bpl.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007030:	4a45      	ldr	r2, [pc, #276]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007032:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007034:	4949      	ldr	r1, [pc, #292]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8007036:	400b      	ands	r3, r1
 8007038:	68e1      	ldr	r1, [r4, #12]
 800703a:	430b      	orrs	r3, r1
 800703c:	6553      	str	r3, [r2, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800703e:	6823      	ldr	r3, [r4, #0]
 8007040:	045b      	lsls	r3, r3, #17
 8007042:	d50b      	bpl.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007044:	4a40      	ldr	r2, [pc, #256]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007046:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	089b      	lsrs	r3, r3, #2
 800704c:	69e1      	ldr	r1, [r4, #28]
 800704e:	430b      	orrs	r3, r1
 8007050:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007052:	2380      	movs	r3, #128	@ 0x80
 8007054:	05db      	lsls	r3, r3, #23
 8007056:	69e2      	ldr	r2, [r4, #28]
 8007058:	429a      	cmp	r2, r3
 800705a:	d04f      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x190>
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800705c:	6823      	ldr	r3, [r4, #0]
 800705e:	029b      	lsls	r3, r3, #10
 8007060:	d50b      	bpl.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007062:	4a39      	ldr	r2, [pc, #228]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007064:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007066:	493e      	ldr	r1, [pc, #248]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8007068:	400b      	ands	r3, r1
 800706a:	6a21      	ldr	r1, [r4, #32]
 800706c:	430b      	orrs	r3, r1
 800706e:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8007070:	2380      	movs	r3, #128	@ 0x80
 8007072:	03db      	lsls	r3, r3, #15
 8007074:	6a22      	ldr	r2, [r4, #32]
 8007076:	429a      	cmp	r2, r3
 8007078:	d047      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x19e>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	051b      	lsls	r3, r3, #20
 800707e:	d50b      	bpl.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007080:	4a31      	ldr	r2, [pc, #196]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007082:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007084:	4937      	ldr	r1, [pc, #220]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007086:	400b      	ands	r3, r1
 8007088:	6921      	ldr	r1, [r4, #16]
 800708a:	430b      	orrs	r3, r1
 800708c:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800708e:	2380      	movs	r3, #128	@ 0x80
 8007090:	01db      	lsls	r3, r3, #7
 8007092:	6922      	ldr	r2, [r4, #16]
 8007094:	429a      	cmp	r2, r3
 8007096:	d03f      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8007098:	b002      	add	sp, #8
 800709a:	bce0      	pop	{r5, r6, r7}
 800709c:	46ba      	mov	sl, r7
 800709e:	46b1      	mov	r9, r6
 80070a0:	46a8      	mov	r8, r5
 80070a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80070a4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80070a6:	428b      	cmp	r3, r1
 80070a8:	d045      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80070aa:	4b27      	ldr	r3, [pc, #156]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80070ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80070ae:	492e      	ldr	r1, [pc, #184]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80070b0:	4011      	ands	r1, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 80070b2:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 80070b4:	2080      	movs	r0, #128	@ 0x80
 80070b6:	0240      	lsls	r0, r0, #9
 80070b8:	4328      	orrs	r0, r5
 80070ba:	65d8      	str	r0, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070bc:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80070be:	4d2b      	ldr	r5, [pc, #172]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80070c0:	4028      	ands	r0, r5
 80070c2:	65d8      	str	r0, [r3, #92]	@ 0x5c
        RCC->BDCR = tmpregister;
 80070c4:	65d9      	str	r1, [r3, #92]	@ 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80070c6:	07d2      	lsls	r2, r2, #31
 80070c8:	d535      	bpl.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
        tickstart = HAL_GetTick();
 80070ca:	f7fd ff09 	bl	8004ee0 <HAL_GetTick>
 80070ce:	0005      	movs	r5, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070d0:	4b1d      	ldr	r3, [pc, #116]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80070d2:	4698      	mov	r8, r3
 80070d4:	2602      	movs	r6, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070d6:	4b26      	ldr	r3, [pc, #152]	@ (8007170 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80070d8:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070da:	4643      	mov	r3, r8
 80070dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070de:	421e      	tst	r6, r3
 80070e0:	d129      	bne.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070e2:	f7fd fefd 	bl	8004ee0 <HAL_GetTick>
 80070e6:	1b40      	subs	r0, r0, r5
 80070e8:	4548      	cmp	r0, r9
 80070ea:	d9f6      	bls.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x16e>
            ret = HAL_TIMEOUT;
 80070ec:	2003      	movs	r0, #3
 80070ee:	e770      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_PWR_CLK_DISABLE();
 80070f0:	4a15      	ldr	r2, [pc, #84]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80070f2:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80070f4:	491f      	ldr	r1, [pc, #124]	@ (8007174 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80070f6:	400b      	ands	r3, r1
 80070f8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80070fa:	e76e      	b.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80070fc:	4a12      	ldr	r2, [pc, #72]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80070fe:	68d1      	ldr	r1, [r2, #12]
 8007100:	2380      	movs	r3, #128	@ 0x80
 8007102:	025b      	lsls	r3, r3, #9
 8007104:	430b      	orrs	r3, r1
 8007106:	60d3      	str	r3, [r2, #12]
 8007108:	e7a8      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800710a:	4a0f      	ldr	r2, [pc, #60]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800710c:	68d1      	ldr	r1, [r2, #12]
 800710e:	2380      	movs	r3, #128	@ 0x80
 8007110:	045b      	lsls	r3, r3, #17
 8007112:	430b      	orrs	r3, r1
 8007114:	60d3      	str	r3, [r2, #12]
 8007116:	e7b0      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007118:	4a0b      	ldr	r2, [pc, #44]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800711a:	68d1      	ldr	r1, [r2, #12]
 800711c:	2380      	movs	r3, #128	@ 0x80
 800711e:	025b      	lsls	r3, r3, #9
 8007120:	430b      	orrs	r3, r1
 8007122:	60d3      	str	r3, [r2, #12]
  return status;
 8007124:	e7b8      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007126:	4b08      	ldr	r3, [pc, #32]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007128:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800712a:	23c0      	movs	r3, #192	@ 0xc0
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	0011      	movs	r1, r2
 8007130:	4019      	ands	r1, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007132:	421a      	tst	r2, r3
 8007134:	d1b6      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007136:	4a04      	ldr	r2, [pc, #16]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007138:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 800713a:	490b      	ldr	r1, [pc, #44]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800713c:	400b      	ands	r3, r1
 800713e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007140:	430b      	orrs	r3, r1
 8007142:	65d3      	str	r3, [r2, #92]	@ 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007144:	2000      	movs	r0, #0
 8007146:	e744      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8007148:	40021000 	.word	0x40021000
 800714c:	40007000 	.word	0x40007000
 8007150:	fffff3ff 	.word	0xfffff3ff
 8007154:	fff3ffff 	.word	0xfff3ffff
 8007158:	ffcfffff 	.word	0xffcfffff
 800715c:	ffffcfff 	.word	0xffffcfff
 8007160:	ffbfffff 	.word	0xffbfffff
 8007164:	ffff3fff 	.word	0xffff3fff
 8007168:	fffffcff 	.word	0xfffffcff
 800716c:	fffeffff 	.word	0xfffeffff
 8007170:	00001388 	.word	0x00001388
 8007174:	efffffff 	.word	0xefffffff

08007178 <HAL_TIM_OC_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007178:	4770      	bx	lr

0800717a <HAL_TIM_PWM_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800717a:	4770      	bx	lr

0800717c <HAL_TIM_IC_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800717c:	4770      	bx	lr

0800717e <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800717e:	4770      	bx	lr

08007180 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007180:	4770      	bx	lr

08007182 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007182:	4770      	bx	lr

08007184 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007184:	4770      	bx	lr

08007186 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007186:	4770      	bx	lr

08007188 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007188:	4770      	bx	lr

0800718a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800718a:	4770      	bx	lr

0800718c <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800718c:	4770      	bx	lr

0800718e <HAL_TIM_TriggerHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800718e:	4770      	bx	lr

08007190 <HAL_TIM_ErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007190:	4770      	bx	lr
	...

08007194 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007194:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007196:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007198:	6a02      	ldr	r2, [r0, #32]
 800719a:	2401      	movs	r4, #1
 800719c:	43a2      	bics	r2, r4
 800719e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071a2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071a4:	4d18      	ldr	r5, [pc, #96]	@ (8007208 <TIM_OC1_SetConfig+0x74>)
 80071a6:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071a8:	680d      	ldr	r5, [r1, #0]
 80071aa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071ac:	2502      	movs	r5, #2
 80071ae:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071b0:	688d      	ldr	r5, [r1, #8]
 80071b2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071b4:	4d15      	ldr	r5, [pc, #84]	@ (800720c <TIM_OC1_SetConfig+0x78>)
 80071b6:	42a8      	cmp	r0, r5
 80071b8:	d00c      	beq.n	80071d4 <TIM_OC1_SetConfig+0x40>
 80071ba:	4d15      	ldr	r5, [pc, #84]	@ (8007210 <TIM_OC1_SetConfig+0x7c>)
 80071bc:	42a8      	cmp	r0, r5
 80071be:	d01b      	beq.n	80071f8 <TIM_OC1_SetConfig+0x64>
 80071c0:	4d14      	ldr	r5, [pc, #80]	@ (8007214 <TIM_OC1_SetConfig+0x80>)
 80071c2:	42a8      	cmp	r0, r5
 80071c4:	d112      	bne.n	80071ec <TIM_OC1_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071c6:	2508      	movs	r5, #8
 80071c8:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071ca:	68cd      	ldr	r5, [r1, #12]
 80071cc:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071ce:	2504      	movs	r5, #4
 80071d0:	43ab      	bics	r3, r5
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d2:	e005      	b.n	80071e0 <TIM_OC1_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC1NP;
 80071d4:	2508      	movs	r5, #8
 80071d6:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 80071d8:	68cd      	ldr	r5, [r1, #12]
 80071da:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80071dc:	2504      	movs	r5, #4
 80071de:	43ab      	bics	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071e0:	4d0d      	ldr	r5, [pc, #52]	@ (8007218 <TIM_OC1_SetConfig+0x84>)
 80071e2:	4025      	ands	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071e4:	694c      	ldr	r4, [r1, #20]
 80071e6:	698e      	ldr	r6, [r1, #24]
 80071e8:	4334      	orrs	r4, r6
 80071ea:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ec:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071ee:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071f0:	684a      	ldr	r2, [r1, #4]
 80071f2:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f4:	6203      	str	r3, [r0, #32]
}
 80071f6:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC1NP;
 80071f8:	2508      	movs	r5, #8
 80071fa:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 80071fc:	68cd      	ldr	r5, [r1, #12]
 80071fe:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8007200:	2504      	movs	r5, #4
 8007202:	43ab      	bics	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007204:	e7ec      	b.n	80071e0 <TIM_OC1_SetConfig+0x4c>
 8007206:	46c0      	nop			@ (mov r8, r8)
 8007208:	fffeff8c 	.word	0xfffeff8c
 800720c:	40012c00 	.word	0x40012c00
 8007210:	40014400 	.word	0x40014400
 8007214:	40014800 	.word	0x40014800
 8007218:	fffffcff 	.word	0xfffffcff

0800721c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800721c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721e:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007220:	6a03      	ldr	r3, [r0, #32]
 8007222:	4c16      	ldr	r4, [pc, #88]	@ (800727c <TIM_OC3_SetConfig+0x60>)
 8007224:	4023      	ands	r3, r4
 8007226:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007228:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800722a:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800722c:	4d14      	ldr	r5, [pc, #80]	@ (8007280 <TIM_OC3_SetConfig+0x64>)
 800722e:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007230:	680d      	ldr	r5, [r1, #0]
 8007232:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007234:	4b13      	ldr	r3, [pc, #76]	@ (8007284 <TIM_OC3_SetConfig+0x68>)
 8007236:	401a      	ands	r2, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007238:	688b      	ldr	r3, [r1, #8]
 800723a:	021b      	lsls	r3, r3, #8
 800723c:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800723e:	4a12      	ldr	r2, [pc, #72]	@ (8007288 <TIM_OC3_SetConfig+0x6c>)
 8007240:	4290      	cmp	r0, r2
 8007242:	d006      	beq.n	8007252 <TIM_OC3_SetConfig+0x36>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007244:	4a11      	ldr	r2, [pc, #68]	@ (800728c <TIM_OC3_SetConfig+0x70>)
 8007246:	4290      	cmp	r0, r2
 8007248:	d00a      	beq.n	8007260 <TIM_OC3_SetConfig+0x44>
 800724a:	4a11      	ldr	r2, [pc, #68]	@ (8007290 <TIM_OC3_SetConfig+0x74>)
 800724c:	4290      	cmp	r0, r2
 800724e:	d10e      	bne.n	800726e <TIM_OC3_SetConfig+0x52>
 8007250:	e006      	b.n	8007260 <TIM_OC3_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC3NP;
 8007252:	4a10      	ldr	r2, [pc, #64]	@ (8007294 <TIM_OC3_SetConfig+0x78>)
 8007254:	401a      	ands	r2, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007256:	68cb      	ldr	r3, [r1, #12]
 8007258:	021b      	lsls	r3, r3, #8
 800725a:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 800725c:	4a0e      	ldr	r2, [pc, #56]	@ (8007298 <TIM_OC3_SetConfig+0x7c>)
 800725e:	4013      	ands	r3, r2
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007260:	4a0e      	ldr	r2, [pc, #56]	@ (800729c <TIM_OC3_SetConfig+0x80>)
 8007262:	4022      	ands	r2, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007264:	694c      	ldr	r4, [r1, #20]
 8007266:	698e      	ldr	r6, [r1, #24]
 8007268:	4334      	orrs	r4, r6
 800726a:	0124      	lsls	r4, r4, #4
 800726c:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800726e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007270:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007272:	684a      	ldr	r2, [r1, #4]
 8007274:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007276:	6203      	str	r3, [r0, #32]
}
 8007278:	bd70      	pop	{r4, r5, r6, pc}
 800727a:	46c0      	nop			@ (mov r8, r8)
 800727c:	fffffeff 	.word	0xfffffeff
 8007280:	fffeff8c 	.word	0xfffeff8c
 8007284:	fffffdff 	.word	0xfffffdff
 8007288:	40012c00 	.word	0x40012c00
 800728c:	40014400 	.word	0x40014400
 8007290:	40014800 	.word	0x40014800
 8007294:	fffff7ff 	.word	0xfffff7ff
 8007298:	fffffbff 	.word	0xfffffbff
 800729c:	ffffcfff 	.word	0xffffcfff

080072a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072a0:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072a2:	6a04      	ldr	r4, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072a4:	6a03      	ldr	r3, [r0, #32]
 80072a6:	4a11      	ldr	r2, [pc, #68]	@ (80072ec <TIM_OC4_SetConfig+0x4c>)
 80072a8:	4013      	ands	r3, r2
 80072aa:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072ac:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072ae:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072b0:	4a0f      	ldr	r2, [pc, #60]	@ (80072f0 <TIM_OC4_SetConfig+0x50>)
 80072b2:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072b4:	680a      	ldr	r2, [r1, #0]
 80072b6:	0212      	lsls	r2, r2, #8
 80072b8:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072ba:	4b0e      	ldr	r3, [pc, #56]	@ (80072f4 <TIM_OC4_SetConfig+0x54>)
 80072bc:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072be:	688b      	ldr	r3, [r1, #8]
 80072c0:	031b      	lsls	r3, r3, #12
 80072c2:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072c4:	4c0c      	ldr	r4, [pc, #48]	@ (80072f8 <TIM_OC4_SetConfig+0x58>)
 80072c6:	42a0      	cmp	r0, r4
 80072c8:	d005      	beq.n	80072d6 <TIM_OC4_SetConfig+0x36>
 80072ca:	4c0c      	ldr	r4, [pc, #48]	@ (80072fc <TIM_OC4_SetConfig+0x5c>)
 80072cc:	42a0      	cmp	r0, r4
 80072ce:	d002      	beq.n	80072d6 <TIM_OC4_SetConfig+0x36>
 80072d0:	4c0b      	ldr	r4, [pc, #44]	@ (8007300 <TIM_OC4_SetConfig+0x60>)
 80072d2:	42a0      	cmp	r0, r4
 80072d4:	d104      	bne.n	80072e0 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072d6:	4c0b      	ldr	r4, [pc, #44]	@ (8007304 <TIM_OC4_SetConfig+0x64>)
 80072d8:	402c      	ands	r4, r5

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072da:	694d      	ldr	r5, [r1, #20]
 80072dc:	01ad      	lsls	r5, r5, #6
 80072de:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072e0:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072e2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072e4:	684a      	ldr	r2, [r1, #4]
 80072e6:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e8:	6203      	str	r3, [r0, #32]
}
 80072ea:	bd30      	pop	{r4, r5, pc}
 80072ec:	ffffefff 	.word	0xffffefff
 80072f0:	feff8cff 	.word	0xfeff8cff
 80072f4:	ffffdfff 	.word	0xffffdfff
 80072f8:	40012c00 	.word	0x40012c00
 80072fc:	40014400 	.word	0x40014400
 8007300:	40014800 	.word	0x40014800
 8007304:	ffffbfff 	.word	0xffffbfff

08007308 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007308:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800730a:	6a05      	ldr	r5, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800730c:	6a03      	ldr	r3, [r0, #32]
 800730e:	4a11      	ldr	r2, [pc, #68]	@ (8007354 <TIM_OC5_SetConfig+0x4c>)
 8007310:	4013      	ands	r3, r2
 8007312:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007314:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007316:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007318:	4b0f      	ldr	r3, [pc, #60]	@ (8007358 <TIM_OC5_SetConfig+0x50>)
 800731a:	401a      	ands	r2, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800731c:	680b      	ldr	r3, [r1, #0]
 800731e:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007320:	4b0e      	ldr	r3, [pc, #56]	@ (800735c <TIM_OC5_SetConfig+0x54>)
 8007322:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007324:	688b      	ldr	r3, [r1, #8]
 8007326:	041b      	lsls	r3, r3, #16
 8007328:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800732a:	4d0d      	ldr	r5, [pc, #52]	@ (8007360 <TIM_OC5_SetConfig+0x58>)
 800732c:	42a8      	cmp	r0, r5
 800732e:	d005      	beq.n	800733c <TIM_OC5_SetConfig+0x34>
 8007330:	4d0c      	ldr	r5, [pc, #48]	@ (8007364 <TIM_OC5_SetConfig+0x5c>)
 8007332:	42a8      	cmp	r0, r5
 8007334:	d002      	beq.n	800733c <TIM_OC5_SetConfig+0x34>
 8007336:	4d0c      	ldr	r5, [pc, #48]	@ (8007368 <TIM_OC5_SetConfig+0x60>)
 8007338:	42a8      	cmp	r0, r5
 800733a:	d104      	bne.n	8007346 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800733c:	4d05      	ldr	r5, [pc, #20]	@ (8007354 <TIM_OC5_SetConfig+0x4c>)
 800733e:	4025      	ands	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007340:	694c      	ldr	r4, [r1, #20]
 8007342:	0224      	lsls	r4, r4, #8
 8007344:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007346:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007348:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800734a:	684a      	ldr	r2, [r1, #4]
 800734c:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800734e:	6203      	str	r3, [r0, #32]
}
 8007350:	bd30      	pop	{r4, r5, pc}
 8007352:	46c0      	nop			@ (mov r8, r8)
 8007354:	fffeffff 	.word	0xfffeffff
 8007358:	fffeff8f 	.word	0xfffeff8f
 800735c:	fffdffff 	.word	0xfffdffff
 8007360:	40012c00 	.word	0x40012c00
 8007364:	40014400 	.word	0x40014400
 8007368:	40014800 	.word	0x40014800

0800736c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800736c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800736e:	6a04      	ldr	r4, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007370:	6a03      	ldr	r3, [r0, #32]
 8007372:	4a11      	ldr	r2, [pc, #68]	@ (80073b8 <TIM_OC6_SetConfig+0x4c>)
 8007374:	4013      	ands	r3, r2
 8007376:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007378:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800737a:	6d43      	ldr	r3, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800737c:	4a0f      	ldr	r2, [pc, #60]	@ (80073bc <TIM_OC6_SetConfig+0x50>)
 800737e:	4013      	ands	r3, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007380:	680a      	ldr	r2, [r1, #0]
 8007382:	0212      	lsls	r2, r2, #8
 8007384:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007386:	4b0e      	ldr	r3, [pc, #56]	@ (80073c0 <TIM_OC6_SetConfig+0x54>)
 8007388:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800738a:	688b      	ldr	r3, [r1, #8]
 800738c:	051b      	lsls	r3, r3, #20
 800738e:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007390:	4c0c      	ldr	r4, [pc, #48]	@ (80073c4 <TIM_OC6_SetConfig+0x58>)
 8007392:	42a0      	cmp	r0, r4
 8007394:	d005      	beq.n	80073a2 <TIM_OC6_SetConfig+0x36>
 8007396:	4c0c      	ldr	r4, [pc, #48]	@ (80073c8 <TIM_OC6_SetConfig+0x5c>)
 8007398:	42a0      	cmp	r0, r4
 800739a:	d002      	beq.n	80073a2 <TIM_OC6_SetConfig+0x36>
 800739c:	4c0b      	ldr	r4, [pc, #44]	@ (80073cc <TIM_OC6_SetConfig+0x60>)
 800739e:	42a0      	cmp	r0, r4
 80073a0:	d104      	bne.n	80073ac <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80073a2:	4c0b      	ldr	r4, [pc, #44]	@ (80073d0 <TIM_OC6_SetConfig+0x64>)
 80073a4:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80073a6:	694d      	ldr	r5, [r1, #20]
 80073a8:	02ad      	lsls	r5, r5, #10
 80073aa:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ac:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073ae:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80073b0:	684a      	ldr	r2, [r1, #4]
 80073b2:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b4:	6203      	str	r3, [r0, #32]
}
 80073b6:	bd30      	pop	{r4, r5, pc}
 80073b8:	ffefffff 	.word	0xffefffff
 80073bc:	feff8fff 	.word	0xfeff8fff
 80073c0:	ffdfffff 	.word	0xffdfffff
 80073c4:	40012c00 	.word	0x40012c00
 80073c8:	40014400 	.word	0x40014400
 80073cc:	40014800 	.word	0x40014800
 80073d0:	fffbffff 	.word	0xfffbffff

080073d4 <HAL_TIM_Base_Start>:
{
 80073d4:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 80073d6:	223d      	movs	r2, #61	@ 0x3d
 80073d8:	5c82      	ldrb	r2, [r0, r2]
    return HAL_ERROR;
 80073da:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80073dc:	2a01      	cmp	r2, #1
 80073de:	d112      	bne.n	8007406 <HAL_TIM_Base_Start+0x32>
  htim->State = HAL_TIM_STATE_BUSY;
 80073e0:	323c      	adds	r2, #60	@ 0x3c
 80073e2:	2102      	movs	r1, #2
 80073e4:	5499      	strb	r1, [r3, r2]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a10      	ldr	r2, [pc, #64]	@ (800742c <HAL_TIM_Base_Start+0x58>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d00c      	beq.n	8007408 <HAL_TIM_Base_Start+0x34>
 80073ee:	2280      	movs	r2, #128	@ 0x80
 80073f0:	05d2      	lsls	r2, r2, #23
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d008      	beq.n	8007408 <HAL_TIM_Base_Start+0x34>
 80073f6:	4a0e      	ldr	r2, [pc, #56]	@ (8007430 <HAL_TIM_Base_Start+0x5c>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d005      	beq.n	8007408 <HAL_TIM_Base_Start+0x34>
    __HAL_TIM_ENABLE(htim);
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	2101      	movs	r1, #1
 8007400:	430a      	orrs	r2, r1
 8007402:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007404:	2000      	movs	r0, #0
}
 8007406:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007408:	689a      	ldr	r2, [r3, #8]
 800740a:	490a      	ldr	r1, [pc, #40]	@ (8007434 <HAL_TIM_Base_Start+0x60>)
 800740c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800740e:	2a06      	cmp	r2, #6
 8007410:	d008      	beq.n	8007424 <HAL_TIM_Base_Start+0x50>
 8007412:	3907      	subs	r1, #7
 8007414:	428a      	cmp	r2, r1
 8007416:	d007      	beq.n	8007428 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	2101      	movs	r1, #1
 800741c:	430a      	orrs	r2, r1
 800741e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007420:	2000      	movs	r0, #0
 8007422:	e7f0      	b.n	8007406 <HAL_TIM_Base_Start+0x32>
 8007424:	2000      	movs	r0, #0
 8007426:	e7ee      	b.n	8007406 <HAL_TIM_Base_Start+0x32>
 8007428:	2000      	movs	r0, #0
 800742a:	e7ec      	b.n	8007406 <HAL_TIM_Base_Start+0x32>
 800742c:	40012c00 	.word	0x40012c00
 8007430:	40000400 	.word	0x40000400
 8007434:	00010007 	.word	0x00010007

08007438 <HAL_TIM_Base_Start_IT>:
{
 8007438:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 800743a:	223d      	movs	r2, #61	@ 0x3d
 800743c:	5c82      	ldrb	r2, [r0, r2]
    return HAL_ERROR;
 800743e:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8007440:	2a01      	cmp	r2, #1
 8007442:	d116      	bne.n	8007472 <HAL_TIM_Base_Start_IT+0x3a>
  htim->State = HAL_TIM_STATE_BUSY;
 8007444:	323c      	adds	r2, #60	@ 0x3c
 8007446:	2102      	movs	r1, #2
 8007448:	5499      	strb	r1, [r3, r2]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800744a:	6819      	ldr	r1, [r3, #0]
 800744c:	68ca      	ldr	r2, [r1, #12]
 800744e:	4302      	orrs	r2, r0
 8007450:	60ca      	str	r2, [r1, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a10      	ldr	r2, [pc, #64]	@ (8007498 <HAL_TIM_Base_Start_IT+0x60>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d00c      	beq.n	8007474 <HAL_TIM_Base_Start_IT+0x3c>
 800745a:	2280      	movs	r2, #128	@ 0x80
 800745c:	05d2      	lsls	r2, r2, #23
 800745e:	4293      	cmp	r3, r2
 8007460:	d008      	beq.n	8007474 <HAL_TIM_Base_Start_IT+0x3c>
 8007462:	4a0e      	ldr	r2, [pc, #56]	@ (800749c <HAL_TIM_Base_Start_IT+0x64>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d005      	beq.n	8007474 <HAL_TIM_Base_Start_IT+0x3c>
    __HAL_TIM_ENABLE(htim);
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	2101      	movs	r1, #1
 800746c:	430a      	orrs	r2, r1
 800746e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007470:	2000      	movs	r0, #0
}
 8007472:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007474:	689a      	ldr	r2, [r3, #8]
 8007476:	490a      	ldr	r1, [pc, #40]	@ (80074a0 <HAL_TIM_Base_Start_IT+0x68>)
 8007478:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800747a:	2a06      	cmp	r2, #6
 800747c:	d008      	beq.n	8007490 <HAL_TIM_Base_Start_IT+0x58>
 800747e:	3907      	subs	r1, #7
 8007480:	428a      	cmp	r2, r1
 8007482:	d007      	beq.n	8007494 <HAL_TIM_Base_Start_IT+0x5c>
      __HAL_TIM_ENABLE(htim);
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	2101      	movs	r1, #1
 8007488:	430a      	orrs	r2, r1
 800748a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800748c:	2000      	movs	r0, #0
 800748e:	e7f0      	b.n	8007472 <HAL_TIM_Base_Start_IT+0x3a>
 8007490:	2000      	movs	r0, #0
 8007492:	e7ee      	b.n	8007472 <HAL_TIM_Base_Start_IT+0x3a>
 8007494:	2000      	movs	r0, #0
 8007496:	e7ec      	b.n	8007472 <HAL_TIM_Base_Start_IT+0x3a>
 8007498:	40012c00 	.word	0x40012c00
 800749c:	40000400 	.word	0x40000400
 80074a0:	00010007 	.word	0x00010007

080074a4 <HAL_TIM_IRQHandler>:
{
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	0004      	movs	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80074a8:	6803      	ldr	r3, [r0, #0]
 80074aa:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80074ac:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80074ae:	07aa      	lsls	r2, r5, #30
 80074b0:	d510      	bpl.n	80074d4 <HAL_TIM_IRQHandler+0x30>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80074b2:	07b2      	lsls	r2, r6, #30
 80074b4:	d50e      	bpl.n	80074d4 <HAL_TIM_IRQHandler+0x30>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80074b6:	2203      	movs	r2, #3
 80074b8:	4252      	negs	r2, r2
 80074ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074bc:	2301      	movs	r3, #1
 80074be:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074c0:	6803      	ldr	r3, [r0, #0]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	079b      	lsls	r3, r3, #30
 80074c6:	d100      	bne.n	80074ca <HAL_TIM_IRQHandler+0x26>
 80074c8:	e080      	b.n	80075cc <HAL_TIM_IRQHandler+0x128>
          htim->IC_CaptureCallback(htim);
 80074ca:	2394      	movs	r3, #148	@ 0x94
 80074cc:	58c3      	ldr	r3, [r0, r3]
 80074ce:	4798      	blx	r3
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074d0:	2300      	movs	r3, #0
 80074d2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80074d4:	076b      	lsls	r3, r5, #29
 80074d6:	d514      	bpl.n	8007502 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80074d8:	0773      	lsls	r3, r6, #29
 80074da:	d512      	bpl.n	8007502 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	2205      	movs	r2, #5
 80074e0:	4252      	negs	r2, r2
 80074e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074e4:	2302      	movs	r3, #2
 80074e6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074e8:	6823      	ldr	r3, [r4, #0]
 80074ea:	699a      	ldr	r2, [r3, #24]
 80074ec:	23c0      	movs	r3, #192	@ 0xc0
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	421a      	tst	r2, r3
 80074f2:	d100      	bne.n	80074f6 <HAL_TIM_IRQHandler+0x52>
 80074f4:	e072      	b.n	80075dc <HAL_TIM_IRQHandler+0x138>
        htim->IC_CaptureCallback(htim);
 80074f6:	2394      	movs	r3, #148	@ 0x94
 80074f8:	58e3      	ldr	r3, [r4, r3]
 80074fa:	0020      	movs	r0, r4
 80074fc:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074fe:	2300      	movs	r3, #0
 8007500:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007502:	072b      	lsls	r3, r5, #28
 8007504:	d511      	bpl.n	800752a <HAL_TIM_IRQHandler+0x86>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007506:	0733      	lsls	r3, r6, #28
 8007508:	d50f      	bpl.n	800752a <HAL_TIM_IRQHandler+0x86>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	2209      	movs	r2, #9
 800750e:	4252      	negs	r2, r2
 8007510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007512:	2304      	movs	r3, #4
 8007514:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	079b      	lsls	r3, r3, #30
 800751c:	d067      	beq.n	80075ee <HAL_TIM_IRQHandler+0x14a>
        htim->IC_CaptureCallback(htim);
 800751e:	2394      	movs	r3, #148	@ 0x94
 8007520:	58e3      	ldr	r3, [r4, r3]
 8007522:	0020      	movs	r0, r4
 8007524:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007526:	2300      	movs	r3, #0
 8007528:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800752a:	06eb      	lsls	r3, r5, #27
 800752c:	d513      	bpl.n	8007556 <HAL_TIM_IRQHandler+0xb2>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800752e:	06f3      	lsls	r3, r6, #27
 8007530:	d511      	bpl.n	8007556 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	2211      	movs	r2, #17
 8007536:	4252      	negs	r2, r2
 8007538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800753a:	2308      	movs	r3, #8
 800753c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800753e:	6823      	ldr	r3, [r4, #0]
 8007540:	69da      	ldr	r2, [r3, #28]
 8007542:	23c0      	movs	r3, #192	@ 0xc0
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	421a      	tst	r2, r3
 8007548:	d05a      	beq.n	8007600 <HAL_TIM_IRQHandler+0x15c>
        htim->IC_CaptureCallback(htim);
 800754a:	2394      	movs	r3, #148	@ 0x94
 800754c:	58e3      	ldr	r3, [r4, r3]
 800754e:	0020      	movs	r0, r4
 8007550:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007552:	2300      	movs	r3, #0
 8007554:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007556:	07eb      	lsls	r3, r5, #31
 8007558:	d509      	bpl.n	800756e <HAL_TIM_IRQHandler+0xca>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800755a:	07f3      	lsls	r3, r6, #31
 800755c:	d507      	bpl.n	800756e <HAL_TIM_IRQHandler+0xca>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	2202      	movs	r2, #2
 8007562:	4252      	negs	r2, r2
 8007564:	611a      	str	r2, [r3, #16]
      htim->PeriodElapsedCallback(htim);
 8007566:	2384      	movs	r3, #132	@ 0x84
 8007568:	58e3      	ldr	r3, [r4, r3]
 800756a:	0020      	movs	r0, r4
 800756c:	4798      	blx	r3
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800756e:	2382      	movs	r3, #130	@ 0x82
 8007570:	019b      	lsls	r3, r3, #6
 8007572:	421d      	tst	r5, r3
 8007574:	d04d      	beq.n	8007612 <HAL_TIM_IRQHandler+0x16e>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007576:	0633      	lsls	r3, r6, #24
 8007578:	d50f      	bpl.n	800759a <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	4a27      	ldr	r2, [pc, #156]	@ (800761c <HAL_TIM_IRQHandler+0x178>)
 800757e:	611a      	str	r2, [r3, #16]
      htim->BreakCallback(htim);
 8007580:	23b4      	movs	r3, #180	@ 0xb4
 8007582:	58e3      	ldr	r3, [r4, r3]
 8007584:	0020      	movs	r0, r4
 8007586:	4798      	blx	r3
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007588:	05eb      	lsls	r3, r5, #23
 800758a:	d506      	bpl.n	800759a <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	4a24      	ldr	r2, [pc, #144]	@ (8007620 <HAL_TIM_IRQHandler+0x17c>)
 8007590:	611a      	str	r2, [r3, #16]
      htim->Break2Callback(htim);
 8007592:	23b8      	movs	r3, #184	@ 0xb8
 8007594:	58e3      	ldr	r3, [r4, r3]
 8007596:	0020      	movs	r0, r4
 8007598:	4798      	blx	r3
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800759a:	066b      	lsls	r3, r5, #25
 800759c:	d509      	bpl.n	80075b2 <HAL_TIM_IRQHandler+0x10e>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800759e:	0673      	lsls	r3, r6, #25
 80075a0:	d507      	bpl.n	80075b2 <HAL_TIM_IRQHandler+0x10e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	2241      	movs	r2, #65	@ 0x41
 80075a6:	4252      	negs	r2, r2
 80075a8:	611a      	str	r2, [r3, #16]
      htim->TriggerCallback(htim);
 80075aa:	238c      	movs	r3, #140	@ 0x8c
 80075ac:	58e3      	ldr	r3, [r4, r3]
 80075ae:	0020      	movs	r0, r4
 80075b0:	4798      	blx	r3
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80075b2:	06ad      	lsls	r5, r5, #26
 80075b4:	d509      	bpl.n	80075ca <HAL_TIM_IRQHandler+0x126>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80075b6:	06b6      	lsls	r6, r6, #26
 80075b8:	d507      	bpl.n	80075ca <HAL_TIM_IRQHandler+0x126>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80075ba:	6823      	ldr	r3, [r4, #0]
 80075bc:	2221      	movs	r2, #33	@ 0x21
 80075be:	4252      	negs	r2, r2
 80075c0:	611a      	str	r2, [r3, #16]
      htim->CommutationCallback(htim);
 80075c2:	23ac      	movs	r3, #172	@ 0xac
 80075c4:	58e3      	ldr	r3, [r4, r3]
 80075c6:	0020      	movs	r0, r4
 80075c8:	4798      	blx	r3
}
 80075ca:	bd70      	pop	{r4, r5, r6, pc}
          htim->OC_DelayElapsedCallback(htim);
 80075cc:	239c      	movs	r3, #156	@ 0x9c
 80075ce:	58c3      	ldr	r3, [r0, r3]
 80075d0:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80075d2:	23a0      	movs	r3, #160	@ 0xa0
 80075d4:	58e3      	ldr	r3, [r4, r3]
 80075d6:	0020      	movs	r0, r4
 80075d8:	4798      	blx	r3
 80075da:	e779      	b.n	80074d0 <HAL_TIM_IRQHandler+0x2c>
        htim->OC_DelayElapsedCallback(htim);
 80075dc:	239c      	movs	r3, #156	@ 0x9c
 80075de:	58e3      	ldr	r3, [r4, r3]
 80075e0:	0020      	movs	r0, r4
 80075e2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80075e4:	23a0      	movs	r3, #160	@ 0xa0
 80075e6:	58e3      	ldr	r3, [r4, r3]
 80075e8:	0020      	movs	r0, r4
 80075ea:	4798      	blx	r3
 80075ec:	e787      	b.n	80074fe <HAL_TIM_IRQHandler+0x5a>
        htim->OC_DelayElapsedCallback(htim);
 80075ee:	239c      	movs	r3, #156	@ 0x9c
 80075f0:	58e3      	ldr	r3, [r4, r3]
 80075f2:	0020      	movs	r0, r4
 80075f4:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80075f6:	23a0      	movs	r3, #160	@ 0xa0
 80075f8:	58e3      	ldr	r3, [r4, r3]
 80075fa:	0020      	movs	r0, r4
 80075fc:	4798      	blx	r3
 80075fe:	e792      	b.n	8007526 <HAL_TIM_IRQHandler+0x82>
        htim->OC_DelayElapsedCallback(htim);
 8007600:	239c      	movs	r3, #156	@ 0x9c
 8007602:	58e3      	ldr	r3, [r4, r3]
 8007604:	0020      	movs	r0, r4
 8007606:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007608:	23a0      	movs	r3, #160	@ 0xa0
 800760a:	58e3      	ldr	r3, [r4, r3]
 800760c:	0020      	movs	r0, r4
 800760e:	4798      	blx	r3
 8007610:	e79f      	b.n	8007552 <HAL_TIM_IRQHandler+0xae>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007612:	05eb      	lsls	r3, r5, #23
 8007614:	d5c1      	bpl.n	800759a <HAL_TIM_IRQHandler+0xf6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007616:	0633      	lsls	r3, r6, #24
 8007618:	d5bf      	bpl.n	800759a <HAL_TIM_IRQHandler+0xf6>
 800761a:	e7b7      	b.n	800758c <HAL_TIM_IRQHandler+0xe8>
 800761c:	ffffdf7f 	.word	0xffffdf7f
 8007620:	fffffeff 	.word	0xfffffeff

08007624 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8007624:	2908      	cmp	r1, #8
 8007626:	d013      	beq.n	8007650 <HAL_TIM_ReadCapturedValue+0x2c>
 8007628:	d808      	bhi.n	800763c <HAL_TIM_ReadCapturedValue+0x18>
 800762a:	2900      	cmp	r1, #0
 800762c:	d00d      	beq.n	800764a <HAL_TIM_ReadCapturedValue+0x26>
 800762e:	2904      	cmp	r1, #4
 8007630:	d102      	bne.n	8007638 <HAL_TIM_ReadCapturedValue+0x14>
      tmpreg =   htim->Instance->CCR2;
 8007632:	6803      	ldr	r3, [r0, #0]
 8007634:	6b98      	ldr	r0, [r3, #56]	@ 0x38
      break;
 8007636:	e00a      	b.n	800764e <HAL_TIM_ReadCapturedValue+0x2a>
  switch (Channel)
 8007638:	2000      	movs	r0, #0
 800763a:	e008      	b.n	800764e <HAL_TIM_ReadCapturedValue+0x2a>
 800763c:	290c      	cmp	r1, #12
 800763e:	d102      	bne.n	8007646 <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg =   htim->Instance->CCR4;
 8007640:	6803      	ldr	r3, [r0, #0]
 8007642:	6c18      	ldr	r0, [r3, #64]	@ 0x40
  return tmpreg;
 8007644:	e003      	b.n	800764e <HAL_TIM_ReadCapturedValue+0x2a>
  switch (Channel)
 8007646:	2000      	movs	r0, #0
 8007648:	e001      	b.n	800764e <HAL_TIM_ReadCapturedValue+0x2a>
      tmpreg =  htim->Instance->CCR1;
 800764a:	6803      	ldr	r3, [r0, #0]
 800764c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
}
 800764e:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 8007650:	6803      	ldr	r3, [r0, #0]
 8007652:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
      break;
 8007654:	e7fb      	b.n	800764e <HAL_TIM_ReadCapturedValue+0x2a>
	...

08007658 <HAL_TIM_RegisterCallback>:
{
 8007658:	b530      	push	{r4, r5, lr}
 800765a:	0003      	movs	r3, r0
  if (pCallback == NULL)
 800765c:	2a00      	cmp	r2, #0
 800765e:	d100      	bne.n	8007662 <HAL_TIM_RegisterCallback+0xa>
 8007660:	e099      	b.n	8007796 <HAL_TIM_RegisterCallback+0x13e>
  if (htim->State == HAL_TIM_STATE_READY)
 8007662:	203d      	movs	r0, #61	@ 0x3d
 8007664:	5c1c      	ldrb	r4, [r3, r0]
 8007666:	b2e0      	uxtb	r0, r4
 8007668:	2c01      	cmp	r4, #1
 800766a:	d00c      	beq.n	8007686 <HAL_TIM_RegisterCallback+0x2e>
  else if (htim->State == HAL_TIM_STATE_RESET)
 800766c:	203d      	movs	r0, #61	@ 0x3d
 800766e:	5c1c      	ldrb	r4, [r3, r0]
 8007670:	b2e0      	uxtb	r0, r4
 8007672:	2c00      	cmp	r4, #0
 8007674:	d000      	beq.n	8007678 <HAL_TIM_RegisterCallback+0x20>
 8007676:	e090      	b.n	800779a <HAL_TIM_RegisterCallback+0x142>
    switch (CallbackID)
 8007678:	290d      	cmp	r1, #13
 800767a:	d900      	bls.n	800767e <HAL_TIM_RegisterCallback+0x26>
 800767c:	e08f      	b.n	800779e <HAL_TIM_RegisterCallback+0x146>
 800767e:	008c      	lsls	r4, r1, #2
 8007680:	4d48      	ldr	r5, [pc, #288]	@ (80077a4 <HAL_TIM_RegisterCallback+0x14c>)
 8007682:	592c      	ldr	r4, [r5, r4]
 8007684:	46a7      	mov	pc, r4
    switch (CallbackID)
 8007686:	291b      	cmp	r1, #27
 8007688:	d900      	bls.n	800768c <HAL_TIM_RegisterCallback+0x34>
 800768a:	e087      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
 800768c:	0088      	lsls	r0, r1, #2
 800768e:	4c46      	ldr	r4, [pc, #280]	@ (80077a8 <HAL_TIM_RegisterCallback+0x150>)
 8007690:	5820      	ldr	r0, [r4, r0]
 8007692:	4687      	mov	pc, r0
        htim->Base_MspInitCallback                 = pCallback;
 8007694:	64da      	str	r2, [r3, #76]	@ 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8007696:	0008      	movs	r0, r1
        break;
 8007698:	e080      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->Base_MspDeInitCallback               = pCallback;
 800769a:	651a      	str	r2, [r3, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;
 800769c:	2000      	movs	r0, #0
        break;
 800769e:	e07d      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->IC_MspInitCallback                   = pCallback;
 80076a0:	655a      	str	r2, [r3, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 80076a2:	2000      	movs	r0, #0
        break;
 80076a4:	e07a      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->IC_MspDeInitCallback                 = pCallback;
 80076a6:	659a      	str	r2, [r3, #88]	@ 0x58
  HAL_StatusTypeDef status = HAL_OK;
 80076a8:	2000      	movs	r0, #0
        break;
 80076aa:	e077      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->OC_MspInitCallback                   = pCallback;
 80076ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  HAL_StatusTypeDef status = HAL_OK;
 80076ae:	2000      	movs	r0, #0
        break;
 80076b0:	e074      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->OC_MspDeInitCallback                 = pCallback;
 80076b2:	661a      	str	r2, [r3, #96]	@ 0x60
  HAL_StatusTypeDef status = HAL_OK;
 80076b4:	2000      	movs	r0, #0
        break;
 80076b6:	e071      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->PWM_MspInitCallback                  = pCallback;
 80076b8:	665a      	str	r2, [r3, #100]	@ 0x64
  HAL_StatusTypeDef status = HAL_OK;
 80076ba:	2000      	movs	r0, #0
        break;
 80076bc:	e06e      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->PWM_MspDeInitCallback                = pCallback;
 80076be:	669a      	str	r2, [r3, #104]	@ 0x68
  HAL_StatusTypeDef status = HAL_OK;
 80076c0:	2000      	movs	r0, #0
        break;
 80076c2:	e06b      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->OnePulse_MspInitCallback             = pCallback;
 80076c4:	66da      	str	r2, [r3, #108]	@ 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 80076c6:	2000      	movs	r0, #0
        break;
 80076c8:	e068      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80076ca:	671a      	str	r2, [r3, #112]	@ 0x70
  HAL_StatusTypeDef status = HAL_OK;
 80076cc:	2000      	movs	r0, #0
        break;
 80076ce:	e065      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->Encoder_MspInitCallback              = pCallback;
 80076d0:	675a      	str	r2, [r3, #116]	@ 0x74
  HAL_StatusTypeDef status = HAL_OK;
 80076d2:	2000      	movs	r0, #0
        break;
 80076d4:	e062      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->Encoder_MspDeInitCallback            = pCallback;
 80076d6:	679a      	str	r2, [r3, #120]	@ 0x78
  HAL_StatusTypeDef status = HAL_OK;
 80076d8:	2000      	movs	r0, #0
        break;
 80076da:	e05f      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->HallSensor_MspInitCallback           = pCallback;
 80076dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  HAL_StatusTypeDef status = HAL_OK;
 80076de:	2000      	movs	r0, #0
        break;
 80076e0:	e05c      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80076e2:	2180      	movs	r1, #128	@ 0x80
 80076e4:	505a      	str	r2, [r3, r1]
  HAL_StatusTypeDef status = HAL_OK;
 80076e6:	2000      	movs	r0, #0
        break;
 80076e8:	e058      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->PeriodElapsedCallback                = pCallback;
 80076ea:	2184      	movs	r1, #132	@ 0x84
 80076ec:	505a      	str	r2, [r3, r1]
  HAL_StatusTypeDef status = HAL_OK;
 80076ee:	2000      	movs	r0, #0
        break;
 80076f0:	e054      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80076f2:	2188      	movs	r1, #136	@ 0x88
 80076f4:	505a      	str	r2, [r3, r1]
  HAL_StatusTypeDef status = HAL_OK;
 80076f6:	2000      	movs	r0, #0
        break;
 80076f8:	e050      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->TriggerCallback                      = pCallback;
 80076fa:	218c      	movs	r1, #140	@ 0x8c
 80076fc:	505a      	str	r2, [r3, r1]
  HAL_StatusTypeDef status = HAL_OK;
 80076fe:	2000      	movs	r0, #0
        break;
 8007700:	e04c      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->TriggerHalfCpltCallback              = pCallback;
 8007702:	2190      	movs	r1, #144	@ 0x90
 8007704:	505a      	str	r2, [r3, r1]
  HAL_StatusTypeDef status = HAL_OK;
 8007706:	2000      	movs	r0, #0
        break;
 8007708:	e048      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->IC_CaptureCallback                   = pCallback;
 800770a:	2194      	movs	r1, #148	@ 0x94
 800770c:	505a      	str	r2, [r3, r1]
  HAL_StatusTypeDef status = HAL_OK;
 800770e:	2000      	movs	r0, #0
        break;
 8007710:	e044      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007712:	2198      	movs	r1, #152	@ 0x98
 8007714:	505a      	str	r2, [r3, r1]
  HAL_StatusTypeDef status = HAL_OK;
 8007716:	2000      	movs	r0, #0
        break;
 8007718:	e040      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->OC_DelayElapsedCallback              = pCallback;
 800771a:	219c      	movs	r1, #156	@ 0x9c
 800771c:	505a      	str	r2, [r3, r1]
  HAL_StatusTypeDef status = HAL_OK;
 800771e:	2000      	movs	r0, #0
        break;
 8007720:	e03c      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007722:	21a0      	movs	r1, #160	@ 0xa0
 8007724:	505a      	str	r2, [r3, r1]
  HAL_StatusTypeDef status = HAL_OK;
 8007726:	2000      	movs	r0, #0
        break;
 8007728:	e038      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800772a:	21a4      	movs	r1, #164	@ 0xa4
 800772c:	505a      	str	r2, [r3, r1]
  HAL_StatusTypeDef status = HAL_OK;
 800772e:	2000      	movs	r0, #0
        break;
 8007730:	e034      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->ErrorCallback                        = pCallback;
 8007732:	21a8      	movs	r1, #168	@ 0xa8
 8007734:	505a      	str	r2, [r3, r1]
  HAL_StatusTypeDef status = HAL_OK;
 8007736:	2000      	movs	r0, #0
        break;
 8007738:	e030      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->CommutationCallback                  = pCallback;
 800773a:	21ac      	movs	r1, #172	@ 0xac
 800773c:	505a      	str	r2, [r3, r1]
  HAL_StatusTypeDef status = HAL_OK;
 800773e:	2000      	movs	r0, #0
        break;
 8007740:	e02c      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->CommutationHalfCpltCallback          = pCallback;
 8007742:	21b0      	movs	r1, #176	@ 0xb0
 8007744:	505a      	str	r2, [r3, r1]
  HAL_StatusTypeDef status = HAL_OK;
 8007746:	2000      	movs	r0, #0
        break;
 8007748:	e028      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->BreakCallback                        = pCallback;
 800774a:	21b4      	movs	r1, #180	@ 0xb4
 800774c:	505a      	str	r2, [r3, r1]
  HAL_StatusTypeDef status = HAL_OK;
 800774e:	2000      	movs	r0, #0
        break;
 8007750:	e024      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->Break2Callback                       = pCallback;
 8007752:	21b8      	movs	r1, #184	@ 0xb8
 8007754:	505a      	str	r2, [r3, r1]
  HAL_StatusTypeDef status = HAL_OK;
 8007756:	2000      	movs	r0, #0
        break;
 8007758:	e020      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->Base_MspInitCallback         = pCallback;
 800775a:	64da      	str	r2, [r3, #76]	@ 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 800775c:	0008      	movs	r0, r1
        break;
 800775e:	e01d      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->Base_MspDeInitCallback       = pCallback;
 8007760:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007762:	e01b      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->IC_MspInitCallback           = pCallback;
 8007764:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007766:	e019      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->IC_MspDeInitCallback         = pCallback;
 8007768:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800776a:	e017      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->OC_MspInitCallback           = pCallback;
 800776c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800776e:	e015      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->OC_MspDeInitCallback         = pCallback;
 8007770:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007772:	e013      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->PWM_MspInitCallback          = pCallback;
 8007774:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007776:	e011      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->PWM_MspDeInitCallback        = pCallback;
 8007778:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800777a:	e00f      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->OnePulse_MspInitCallback     = pCallback;
 800777c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800777e:	e00d      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007780:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007782:	e00b      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->Encoder_MspInitCallback      = pCallback;
 8007784:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007786:	e009      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007788:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800778a:	e007      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->HallSensor_MspInitCallback   = pCallback;
 800778c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800778e:	e005      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007790:	2180      	movs	r1, #128	@ 0x80
 8007792:	505a      	str	r2, [r3, r1]
        break;
 8007794:	e002      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
    return HAL_ERROR;
 8007796:	2001      	movs	r0, #1
 8007798:	e000      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
    status = HAL_ERROR;
 800779a:	2001      	movs	r0, #1
}
 800779c:	bd30      	pop	{r4, r5, pc}
    switch (CallbackID)
 800779e:	2001      	movs	r0, #1
 80077a0:	e7fc      	b.n	800779c <HAL_TIM_RegisterCallback+0x144>
 80077a2:	46c0      	nop			@ (mov r8, r8)
 80077a4:	08009d88 	.word	0x08009d88
 80077a8:	08009dc0 	.word	0x08009dc0

080077ac <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80077ac:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077ae:	4a46      	ldr	r2, [pc, #280]	@ (80078c8 <TIM_Base_SetConfig+0x11c>)
 80077b0:	4290      	cmp	r0, r2
 80077b2:	d059      	beq.n	8007868 <TIM_Base_SetConfig+0xbc>
 80077b4:	2280      	movs	r2, #128	@ 0x80
 80077b6:	05d2      	lsls	r2, r2, #23
 80077b8:	4290      	cmp	r0, r2
 80077ba:	d100      	bne.n	80077be <TIM_Base_SetConfig+0x12>
 80077bc:	e071      	b.n	80078a2 <TIM_Base_SetConfig+0xf6>
 80077be:	4a43      	ldr	r2, [pc, #268]	@ (80078cc <TIM_Base_SetConfig+0x120>)
 80077c0:	4290      	cmp	r0, r2
 80077c2:	d013      	beq.n	80077ec <TIM_Base_SetConfig+0x40>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077c4:	4a42      	ldr	r2, [pc, #264]	@ (80078d0 <TIM_Base_SetConfig+0x124>)
 80077c6:	4290      	cmp	r0, r2
 80077c8:	d100      	bne.n	80077cc <TIM_Base_SetConfig+0x20>
 80077ca:	e06e      	b.n	80078aa <TIM_Base_SetConfig+0xfe>
 80077cc:	4a41      	ldr	r2, [pc, #260]	@ (80078d4 <TIM_Base_SetConfig+0x128>)
 80077ce:	4290      	cmp	r0, r2
 80077d0:	d03c      	beq.n	800784c <TIM_Base_SetConfig+0xa0>
 80077d2:	4a41      	ldr	r2, [pc, #260]	@ (80078d8 <TIM_Base_SetConfig+0x12c>)
 80077d4:	4290      	cmp	r0, r2
 80077d6:	d02b      	beq.n	8007830 <TIM_Base_SetConfig+0x84>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077d8:	2280      	movs	r2, #128	@ 0x80
 80077da:	4393      	bics	r3, r2
 80077dc:	694a      	ldr	r2, [r1, #20]
 80077de:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80077e0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077e2:	688b      	ldr	r3, [r1, #8]
 80077e4:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80077e6:	680b      	ldr	r3, [r1, #0]
 80077e8:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077ea:	e050      	b.n	800788e <TIM_Base_SetConfig+0xe2>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077ec:	2270      	movs	r2, #112	@ 0x70
 80077ee:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80077f0:	684a      	ldr	r2, [r1, #4]
 80077f2:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077f4:	4a34      	ldr	r2, [pc, #208]	@ (80078c8 <TIM_Base_SetConfig+0x11c>)
 80077f6:	4290      	cmp	r0, r2
 80077f8:	d03a      	beq.n	8007870 <TIM_Base_SetConfig+0xc4>
 80077fa:	2280      	movs	r2, #128	@ 0x80
 80077fc:	05d2      	lsls	r2, r2, #23
 80077fe:	4290      	cmp	r0, r2
 8007800:	d053      	beq.n	80078aa <TIM_Base_SetConfig+0xfe>
    tmpcr1 &= ~TIM_CR1_CKD;
 8007802:	4a36      	ldr	r2, [pc, #216]	@ (80078dc <TIM_Base_SetConfig+0x130>)
 8007804:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007806:	68ca      	ldr	r2, [r1, #12]
 8007808:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800780a:	2280      	movs	r2, #128	@ 0x80
 800780c:	4393      	bics	r3, r2
 800780e:	694a      	ldr	r2, [r1, #20]
 8007810:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007812:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007814:	688b      	ldr	r3, [r1, #8]
 8007816:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007818:	680b      	ldr	r3, [r1, #0]
 800781a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800781c:	4b2a      	ldr	r3, [pc, #168]	@ (80078c8 <TIM_Base_SetConfig+0x11c>)
 800781e:	4298      	cmp	r0, r3
 8007820:	d033      	beq.n	800788a <TIM_Base_SetConfig+0xde>
 8007822:	4b2c      	ldr	r3, [pc, #176]	@ (80078d4 <TIM_Base_SetConfig+0x128>)
 8007824:	4298      	cmp	r0, r3
 8007826:	d030      	beq.n	800788a <TIM_Base_SetConfig+0xde>
 8007828:	4b2b      	ldr	r3, [pc, #172]	@ (80078d8 <TIM_Base_SetConfig+0x12c>)
 800782a:	4298      	cmp	r0, r3
 800782c:	d02d      	beq.n	800788a <TIM_Base_SetConfig+0xde>
 800782e:	e02e      	b.n	800788e <TIM_Base_SetConfig+0xe2>
    tmpcr1 &= ~TIM_CR1_CKD;
 8007830:	4a2a      	ldr	r2, [pc, #168]	@ (80078dc <TIM_Base_SetConfig+0x130>)
 8007832:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007834:	68ca      	ldr	r2, [r1, #12]
 8007836:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007838:	2280      	movs	r2, #128	@ 0x80
 800783a:	4393      	bics	r3, r2
 800783c:	694a      	ldr	r2, [r1, #20]
 800783e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007840:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007842:	688b      	ldr	r3, [r1, #8]
 8007844:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007846:	680b      	ldr	r3, [r1, #0]
 8007848:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800784a:	e01e      	b.n	800788a <TIM_Base_SetConfig+0xde>
    tmpcr1 &= ~TIM_CR1_CKD;
 800784c:	4a23      	ldr	r2, [pc, #140]	@ (80078dc <TIM_Base_SetConfig+0x130>)
 800784e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007850:	68ca      	ldr	r2, [r1, #12]
 8007852:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007854:	2280      	movs	r2, #128	@ 0x80
 8007856:	4393      	bics	r3, r2
 8007858:	694a      	ldr	r2, [r1, #20]
 800785a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800785c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800785e:	688b      	ldr	r3, [r1, #8]
 8007860:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007862:	680b      	ldr	r3, [r1, #0]
 8007864:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007866:	e010      	b.n	800788a <TIM_Base_SetConfig+0xde>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007868:	2270      	movs	r2, #112	@ 0x70
 800786a:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800786c:	684a      	ldr	r2, [r1, #4]
 800786e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8007870:	4a1a      	ldr	r2, [pc, #104]	@ (80078dc <TIM_Base_SetConfig+0x130>)
 8007872:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007874:	68ca      	ldr	r2, [r1, #12]
 8007876:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007878:	2280      	movs	r2, #128	@ 0x80
 800787a:	4393      	bics	r3, r2
 800787c:	694a      	ldr	r2, [r1, #20]
 800787e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007880:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007882:	688b      	ldr	r3, [r1, #8]
 8007884:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007886:	680b      	ldr	r3, [r1, #0]
 8007888:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800788a:	690b      	ldr	r3, [r1, #16]
 800788c:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800788e:	2301      	movs	r3, #1
 8007890:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007892:	6902      	ldr	r2, [r0, #16]
 8007894:	4213      	tst	r3, r2
 8007896:	d003      	beq.n	80078a0 <TIM_Base_SetConfig+0xf4>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007898:	6903      	ldr	r3, [r0, #16]
 800789a:	2201      	movs	r2, #1
 800789c:	4393      	bics	r3, r2
 800789e:	6103      	str	r3, [r0, #16]
}
 80078a0:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078a2:	2270      	movs	r2, #112	@ 0x70
 80078a4:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80078a6:	684a      	ldr	r2, [r1, #4]
 80078a8:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80078aa:	4a0c      	ldr	r2, [pc, #48]	@ (80078dc <TIM_Base_SetConfig+0x130>)
 80078ac:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078ae:	68ca      	ldr	r2, [r1, #12]
 80078b0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078b2:	2280      	movs	r2, #128	@ 0x80
 80078b4:	4393      	bics	r3, r2
 80078b6:	694a      	ldr	r2, [r1, #20]
 80078b8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80078ba:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078bc:	688b      	ldr	r3, [r1, #8]
 80078be:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80078c0:	680b      	ldr	r3, [r1, #0]
 80078c2:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078c4:	e7e3      	b.n	800788e <TIM_Base_SetConfig+0xe2>
 80078c6:	46c0      	nop			@ (mov r8, r8)
 80078c8:	40012c00 	.word	0x40012c00
 80078cc:	40000400 	.word	0x40000400
 80078d0:	40002000 	.word	0x40002000
 80078d4:	40014400 	.word	0x40014400
 80078d8:	40014800 	.word	0x40014800
 80078dc:	fffffcff 	.word	0xfffffcff

080078e0 <TIM_OC2_SetConfig>:
{
 80078e0:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 80078e2:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078e4:	6a03      	ldr	r3, [r0, #32]
 80078e6:	2210      	movs	r2, #16
 80078e8:	4393      	bics	r3, r2
 80078ea:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80078ec:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80078ee:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078f0:	4d14      	ldr	r5, [pc, #80]	@ (8007944 <TIM_OC2_SetConfig+0x64>)
 80078f2:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078f4:	680d      	ldr	r5, [r1, #0]
 80078f6:	022d      	lsls	r5, r5, #8
 80078f8:	4315      	orrs	r5, r2
  tmpccer &= ~TIM_CCER_CC2P;
 80078fa:	2220      	movs	r2, #32
 80078fc:	4394      	bics	r4, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078fe:	688a      	ldr	r2, [r1, #8]
 8007900:	0112      	lsls	r2, r2, #4
 8007902:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007904:	4c10      	ldr	r4, [pc, #64]	@ (8007948 <TIM_OC2_SetConfig+0x68>)
 8007906:	42a0      	cmp	r0, r4
 8007908:	d006      	beq.n	8007918 <TIM_OC2_SetConfig+0x38>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800790a:	4c10      	ldr	r4, [pc, #64]	@ (800794c <TIM_OC2_SetConfig+0x6c>)
 800790c:	42a0      	cmp	r0, r4
 800790e:	d00b      	beq.n	8007928 <TIM_OC2_SetConfig+0x48>
 8007910:	4c0f      	ldr	r4, [pc, #60]	@ (8007950 <TIM_OC2_SetConfig+0x70>)
 8007912:	42a0      	cmp	r0, r4
 8007914:	d10f      	bne.n	8007936 <TIM_OC2_SetConfig+0x56>
 8007916:	e007      	b.n	8007928 <TIM_OC2_SetConfig+0x48>
    tmpccer &= ~TIM_CCER_CC2NP;
 8007918:	2480      	movs	r4, #128	@ 0x80
 800791a:	43a2      	bics	r2, r4
 800791c:	0016      	movs	r6, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800791e:	68ca      	ldr	r2, [r1, #12]
 8007920:	0112      	lsls	r2, r2, #4
 8007922:	4332      	orrs	r2, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8007924:	3c40      	subs	r4, #64	@ 0x40
 8007926:	43a2      	bics	r2, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007928:	4c0a      	ldr	r4, [pc, #40]	@ (8007954 <TIM_OC2_SetConfig+0x74>)
 800792a:	401c      	ands	r4, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800792c:	694b      	ldr	r3, [r1, #20]
 800792e:	698e      	ldr	r6, [r1, #24]
 8007930:	4333      	orrs	r3, r6
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4323      	orrs	r3, r4
  TIMx->CR2 = tmpcr2;
 8007936:	6043      	str	r3, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007938:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800793a:	684b      	ldr	r3, [r1, #4]
 800793c:	6383      	str	r3, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800793e:	6202      	str	r2, [r0, #32]
}
 8007940:	bd70      	pop	{r4, r5, r6, pc}
 8007942:	46c0      	nop			@ (mov r8, r8)
 8007944:	feff8cff 	.word	0xfeff8cff
 8007948:	40012c00 	.word	0x40012c00
 800794c:	40014400 	.word	0x40014400
 8007950:	40014800 	.word	0x40014800
 8007954:	fffff3ff 	.word	0xfffff3ff

08007958 <HAL_TIM_OC_ConfigChannel>:
{
 8007958:	b510      	push	{r4, lr}
 800795a:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 800795c:	233c      	movs	r3, #60	@ 0x3c
 800795e:	5cc3      	ldrb	r3, [r0, r3]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d02b      	beq.n	80079bc <HAL_TIM_OC_ConfigChannel+0x64>
 8007964:	233c      	movs	r3, #60	@ 0x3c
 8007966:	2001      	movs	r0, #1
 8007968:	54e0      	strb	r0, [r4, r3]
  switch (Channel)
 800796a:	2a14      	cmp	r2, #20
 800796c:	d821      	bhi.n	80079b2 <HAL_TIM_OC_ConfigChannel+0x5a>
 800796e:	0092      	lsls	r2, r2, #2
 8007970:	4b13      	ldr	r3, [pc, #76]	@ (80079c0 <HAL_TIM_OC_ConfigChannel+0x68>)
 8007972:	589b      	ldr	r3, [r3, r2]
 8007974:	469f      	mov	pc, r3
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007976:	6820      	ldr	r0, [r4, #0]
 8007978:	f7ff fc0c 	bl	8007194 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800797c:	2000      	movs	r0, #0
      break;
 800797e:	e019      	b.n	80079b4 <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007980:	6820      	ldr	r0, [r4, #0]
 8007982:	f7ff ffad 	bl	80078e0 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007986:	2000      	movs	r0, #0
      break;
 8007988:	e014      	b.n	80079b4 <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800798a:	6820      	ldr	r0, [r4, #0]
 800798c:	f7ff fc46 	bl	800721c <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007990:	2000      	movs	r0, #0
      break;
 8007992:	e00f      	b.n	80079b4 <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007994:	6820      	ldr	r0, [r4, #0]
 8007996:	f7ff fc83 	bl	80072a0 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800799a:	2000      	movs	r0, #0
      break;
 800799c:	e00a      	b.n	80079b4 <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800799e:	6820      	ldr	r0, [r4, #0]
 80079a0:	f7ff fcb2 	bl	8007308 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80079a4:	2000      	movs	r0, #0
      break;
 80079a6:	e005      	b.n	80079b4 <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80079a8:	6820      	ldr	r0, [r4, #0]
 80079aa:	f7ff fcdf 	bl	800736c <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80079ae:	2000      	movs	r0, #0
      break;
 80079b0:	e000      	b.n	80079b4 <HAL_TIM_OC_ConfigChannel+0x5c>
  switch (Channel)
 80079b2:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80079b4:	233c      	movs	r3, #60	@ 0x3c
 80079b6:	2200      	movs	r2, #0
 80079b8:	54e2      	strb	r2, [r4, r3]
}
 80079ba:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80079bc:	2002      	movs	r0, #2
 80079be:	e7fc      	b.n	80079ba <HAL_TIM_OC_ConfigChannel+0x62>
 80079c0:	08009e30 	.word	0x08009e30

080079c4 <HAL_TIM_PWM_ConfigChannel>:
{
 80079c4:	b570      	push	{r4, r5, r6, lr}
 80079c6:	0004      	movs	r4, r0
 80079c8:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 80079ca:	233c      	movs	r3, #60	@ 0x3c
 80079cc:	5cc3      	ldrb	r3, [r0, r3]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d100      	bne.n	80079d4 <HAL_TIM_PWM_ConfigChannel+0x10>
 80079d2:	e092      	b.n	8007afa <HAL_TIM_PWM_ConfigChannel+0x136>
 80079d4:	233c      	movs	r3, #60	@ 0x3c
 80079d6:	2101      	movs	r1, #1
 80079d8:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 80079da:	2a14      	cmp	r2, #20
 80079dc:	d900      	bls.n	80079e0 <HAL_TIM_PWM_ConfigChannel+0x1c>
 80079de:	e087      	b.n	8007af0 <HAL_TIM_PWM_ConfigChannel+0x12c>
 80079e0:	0092      	lsls	r2, r2, #2
 80079e2:	4b47      	ldr	r3, [pc, #284]	@ (8007b00 <HAL_TIM_PWM_ConfigChannel+0x13c>)
 80079e4:	589b      	ldr	r3, [r3, r2]
 80079e6:	469f      	mov	pc, r3
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079e8:	6800      	ldr	r0, [r0, #0]
 80079ea:	0029      	movs	r1, r5
 80079ec:	f7ff fbd2 	bl	8007194 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80079f0:	6822      	ldr	r2, [r4, #0]
 80079f2:	6993      	ldr	r3, [r2, #24]
 80079f4:	2108      	movs	r1, #8
 80079f6:	430b      	orrs	r3, r1
 80079f8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079fa:	6822      	ldr	r2, [r4, #0]
 80079fc:	6993      	ldr	r3, [r2, #24]
 80079fe:	3904      	subs	r1, #4
 8007a00:	438b      	bics	r3, r1
 8007a02:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a04:	6822      	ldr	r2, [r4, #0]
 8007a06:	6993      	ldr	r3, [r2, #24]
 8007a08:	6929      	ldr	r1, [r5, #16]
 8007a0a:	430b      	orrs	r3, r1
 8007a0c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007a0e:	2000      	movs	r0, #0
      break;
 8007a10:	e06f      	b.n	8007af2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a12:	6800      	ldr	r0, [r0, #0]
 8007a14:	0029      	movs	r1, r5
 8007a16:	f7ff ff63 	bl	80078e0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a1a:	6822      	ldr	r2, [r4, #0]
 8007a1c:	6991      	ldr	r1, [r2, #24]
 8007a1e:	2380      	movs	r3, #128	@ 0x80
 8007a20:	011b      	lsls	r3, r3, #4
 8007a22:	430b      	orrs	r3, r1
 8007a24:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a26:	6822      	ldr	r2, [r4, #0]
 8007a28:	6993      	ldr	r3, [r2, #24]
 8007a2a:	4936      	ldr	r1, [pc, #216]	@ (8007b04 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8007a2c:	400b      	ands	r3, r1
 8007a2e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a30:	6822      	ldr	r2, [r4, #0]
 8007a32:	6991      	ldr	r1, [r2, #24]
 8007a34:	692b      	ldr	r3, [r5, #16]
 8007a36:	021b      	lsls	r3, r3, #8
 8007a38:	430b      	orrs	r3, r1
 8007a3a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007a3c:	2000      	movs	r0, #0
      break;
 8007a3e:	e058      	b.n	8007af2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a40:	6800      	ldr	r0, [r0, #0]
 8007a42:	0029      	movs	r1, r5
 8007a44:	f7ff fbea 	bl	800721c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a48:	6822      	ldr	r2, [r4, #0]
 8007a4a:	69d3      	ldr	r3, [r2, #28]
 8007a4c:	2108      	movs	r1, #8
 8007a4e:	430b      	orrs	r3, r1
 8007a50:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a52:	6822      	ldr	r2, [r4, #0]
 8007a54:	69d3      	ldr	r3, [r2, #28]
 8007a56:	3904      	subs	r1, #4
 8007a58:	438b      	bics	r3, r1
 8007a5a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a5c:	6822      	ldr	r2, [r4, #0]
 8007a5e:	69d3      	ldr	r3, [r2, #28]
 8007a60:	6929      	ldr	r1, [r5, #16]
 8007a62:	430b      	orrs	r3, r1
 8007a64:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007a66:	2000      	movs	r0, #0
      break;
 8007a68:	e043      	b.n	8007af2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a6a:	6800      	ldr	r0, [r0, #0]
 8007a6c:	0029      	movs	r1, r5
 8007a6e:	f7ff fc17 	bl	80072a0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a72:	6822      	ldr	r2, [r4, #0]
 8007a74:	69d1      	ldr	r1, [r2, #28]
 8007a76:	2380      	movs	r3, #128	@ 0x80
 8007a78:	011b      	lsls	r3, r3, #4
 8007a7a:	430b      	orrs	r3, r1
 8007a7c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a7e:	6822      	ldr	r2, [r4, #0]
 8007a80:	69d3      	ldr	r3, [r2, #28]
 8007a82:	4920      	ldr	r1, [pc, #128]	@ (8007b04 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8007a84:	400b      	ands	r3, r1
 8007a86:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a88:	6822      	ldr	r2, [r4, #0]
 8007a8a:	69d1      	ldr	r1, [r2, #28]
 8007a8c:	692b      	ldr	r3, [r5, #16]
 8007a8e:	021b      	lsls	r3, r3, #8
 8007a90:	430b      	orrs	r3, r1
 8007a92:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007a94:	2000      	movs	r0, #0
      break;
 8007a96:	e02c      	b.n	8007af2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a98:	6800      	ldr	r0, [r0, #0]
 8007a9a:	0029      	movs	r1, r5
 8007a9c:	f7ff fc34 	bl	8007308 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007aa0:	6822      	ldr	r2, [r4, #0]
 8007aa2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007aa4:	2108      	movs	r1, #8
 8007aa6:	430b      	orrs	r3, r1
 8007aa8:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007aaa:	6822      	ldr	r2, [r4, #0]
 8007aac:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007aae:	3904      	subs	r1, #4
 8007ab0:	438b      	bics	r3, r1
 8007ab2:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ab4:	6822      	ldr	r2, [r4, #0]
 8007ab6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007ab8:	6929      	ldr	r1, [r5, #16]
 8007aba:	430b      	orrs	r3, r1
 8007abc:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8007abe:	2000      	movs	r0, #0
      break;
 8007ac0:	e017      	b.n	8007af2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ac2:	6800      	ldr	r0, [r0, #0]
 8007ac4:	0029      	movs	r1, r5
 8007ac6:	f7ff fc51 	bl	800736c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007aca:	6822      	ldr	r2, [r4, #0]
 8007acc:	6d51      	ldr	r1, [r2, #84]	@ 0x54
 8007ace:	2380      	movs	r3, #128	@ 0x80
 8007ad0:	011b      	lsls	r3, r3, #4
 8007ad2:	430b      	orrs	r3, r1
 8007ad4:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ad6:	6822      	ldr	r2, [r4, #0]
 8007ad8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007ada:	490a      	ldr	r1, [pc, #40]	@ (8007b04 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8007adc:	400b      	ands	r3, r1
 8007ade:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ae0:	6822      	ldr	r2, [r4, #0]
 8007ae2:	6d51      	ldr	r1, [r2, #84]	@ 0x54
 8007ae4:	692b      	ldr	r3, [r5, #16]
 8007ae6:	021b      	lsls	r3, r3, #8
 8007ae8:	430b      	orrs	r3, r1
 8007aea:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8007aec:	2000      	movs	r0, #0
      break;
 8007aee:	e000      	b.n	8007af2 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8007af0:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8007af2:	233c      	movs	r3, #60	@ 0x3c
 8007af4:	2200      	movs	r2, #0
 8007af6:	54e2      	strb	r2, [r4, r3]
}
 8007af8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8007afa:	2002      	movs	r0, #2
 8007afc:	e7fc      	b.n	8007af8 <HAL_TIM_PWM_ConfigChannel+0x134>
 8007afe:	46c0      	nop			@ (mov r8, r8)
 8007b00:	08009e84 	.word	0x08009e84
 8007b04:	fffffbff 	.word	0xfffffbff

08007b08 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007b08:	b570      	push	{r4, r5, r6, lr}
 8007b0a:	0016      	movs	r6, r2
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b0c:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b0e:	6a02      	ldr	r2, [r0, #32]
 8007b10:	2501      	movs	r5, #1
 8007b12:	43aa      	bics	r2, r5
 8007b14:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b16:	6982      	ldr	r2, [r0, #24]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007b18:	4d0e      	ldr	r5, [pc, #56]	@ (8007b54 <TIM_TI1_SetConfig+0x4c>)
 8007b1a:	42a8      	cmp	r0, r5
 8007b1c:	d009      	beq.n	8007b32 <TIM_TI1_SetConfig+0x2a>
 8007b1e:	2580      	movs	r5, #128	@ 0x80
 8007b20:	05ed      	lsls	r5, r5, #23
 8007b22:	42a8      	cmp	r0, r5
 8007b24:	d005      	beq.n	8007b32 <TIM_TI1_SetConfig+0x2a>
 8007b26:	4d0c      	ldr	r5, [pc, #48]	@ (8007b58 <TIM_TI1_SetConfig+0x50>)
 8007b28:	42a8      	cmp	r0, r5
 8007b2a:	d002      	beq.n	8007b32 <TIM_TI1_SetConfig+0x2a>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007b2c:	2501      	movs	r5, #1
 8007b2e:	432a      	orrs	r2, r5
 8007b30:	e002      	b.n	8007b38 <TIM_TI1_SetConfig+0x30>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007b32:	2503      	movs	r5, #3
 8007b34:	43aa      	bics	r2, r5
    tmpccmr1 |= TIM_ICSelection;
 8007b36:	4332      	orrs	r2, r6
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b38:	25f0      	movs	r5, #240	@ 0xf0
 8007b3a:	43aa      	bics	r2, r5
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007b3c:	011d      	lsls	r5, r3, #4
 8007b3e:	23ff      	movs	r3, #255	@ 0xff
 8007b40:	402b      	ands	r3, r5
 8007b42:	4313      	orrs	r3, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b44:	220a      	movs	r2, #10
 8007b46:	4394      	bics	r4, r2
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007b48:	400a      	ands	r2, r1
 8007b4a:	4322      	orrs	r2, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b4c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007b4e:	6202      	str	r2, [r0, #32]
}
 8007b50:	bd70      	pop	{r4, r5, r6, pc}
 8007b52:	46c0      	nop			@ (mov r8, r8)
 8007b54:	40012c00 	.word	0x40012c00
 8007b58:	40000400 	.word	0x40000400

08007b5c <HAL_TIM_IC_ConfigChannel>:
{
 8007b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b5e:	46c6      	mov	lr, r8
 8007b60:	b500      	push	{lr}
 8007b62:	0004      	movs	r4, r0
 8007b64:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8007b66:	233c      	movs	r3, #60	@ 0x3c
 8007b68:	5cc3      	ldrb	r3, [r0, r3]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d100      	bne.n	8007b70 <HAL_TIM_IC_ConfigChannel+0x14>
 8007b6e:	e0a2      	b.n	8007cb6 <HAL_TIM_IC_ConfigChannel+0x15a>
 8007b70:	233c      	movs	r3, #60	@ 0x3c
 8007b72:	2101      	movs	r1, #1
 8007b74:	54c1      	strb	r1, [r0, r3]
  if (Channel == TIM_CHANNEL_1)
 8007b76:	2a00      	cmp	r2, #0
 8007b78:	d00c      	beq.n	8007b94 <HAL_TIM_IC_ConfigChannel+0x38>
  else if (Channel == TIM_CHANNEL_2)
 8007b7a:	2a04      	cmp	r2, #4
 8007b7c:	d01c      	beq.n	8007bb8 <HAL_TIM_IC_ConfigChannel+0x5c>
  else if (Channel == TIM_CHANNEL_3)
 8007b7e:	2a08      	cmp	r2, #8
 8007b80:	d043      	beq.n	8007c0a <HAL_TIM_IC_ConfigChannel+0xae>
    status = HAL_ERROR;
 8007b82:	2001      	movs	r0, #1
  else if (Channel == TIM_CHANNEL_4)
 8007b84:	2a0c      	cmp	r2, #12
 8007b86:	d06b      	beq.n	8007c60 <HAL_TIM_IC_ConfigChannel+0x104>
  __HAL_UNLOCK(htim);
 8007b88:	233c      	movs	r3, #60	@ 0x3c
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	54e2      	strb	r2, [r4, r3]
}
 8007b8e:	bc80      	pop	{r7}
 8007b90:	46b8      	mov	r8, r7
 8007b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8007b94:	68eb      	ldr	r3, [r5, #12]
 8007b96:	686a      	ldr	r2, [r5, #4]
 8007b98:	6829      	ldr	r1, [r5, #0]
 8007b9a:	6800      	ldr	r0, [r0, #0]
 8007b9c:	f7ff ffb4 	bl	8007b08 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007ba0:	6822      	ldr	r2, [r4, #0]
 8007ba2:	6993      	ldr	r3, [r2, #24]
 8007ba4:	210c      	movs	r1, #12
 8007ba6:	438b      	bics	r3, r1
 8007ba8:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007baa:	6822      	ldr	r2, [r4, #0]
 8007bac:	6993      	ldr	r3, [r2, #24]
 8007bae:	68a9      	ldr	r1, [r5, #8]
 8007bb0:	430b      	orrs	r3, r1
 8007bb2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	e7e7      	b.n	8007b88 <HAL_TIM_IC_ConfigChannel+0x2c>
    TIM_TI2_SetConfig(htim->Instance,
 8007bb8:	6801      	ldr	r1, [r0, #0]
                      sConfig->ICPolarity,
 8007bba:	682e      	ldr	r6, [r5, #0]
                      sConfig->ICSelection,
 8007bbc:	686a      	ldr	r2, [r5, #4]
                      sConfig->ICFilter);
 8007bbe:	68eb      	ldr	r3, [r5, #12]
 8007bc0:	4698      	mov	r8, r3
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007bc2:	6a08      	ldr	r0, [r1, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bc4:	6a0f      	ldr	r7, [r1, #32]
 8007bc6:	2310      	movs	r3, #16
 8007bc8:	439f      	bics	r7, r3
 8007bca:	620f      	str	r7, [r1, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bcc:	698f      	ldr	r7, [r1, #24]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007bce:	4b3b      	ldr	r3, [pc, #236]	@ (8007cbc <HAL_TIM_IC_ConfigChannel+0x160>)
 8007bd0:	401f      	ands	r7, r3
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007bd2:	0212      	lsls	r2, r2, #8
 8007bd4:	433a      	orrs	r2, r7

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bd6:	4f3a      	ldr	r7, [pc, #232]	@ (8007cc0 <HAL_TIM_IC_ConfigChannel+0x164>)
 8007bd8:	403a      	ands	r2, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007bda:	4643      	mov	r3, r8
 8007bdc:	071b      	lsls	r3, r3, #28
 8007bde:	0c1b      	lsrs	r3, r3, #16
 8007be0:	4313      	orrs	r3, r2

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007be2:	22a0      	movs	r2, #160	@ 0xa0
 8007be4:	4390      	bics	r0, r2
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007be6:	0136      	lsls	r6, r6, #4
 8007be8:	4032      	ands	r2, r6
 8007bea:	4302      	orrs	r2, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bec:	618b      	str	r3, [r1, #24]
  TIMx->CCER = tmpccer;
 8007bee:	620a      	str	r2, [r1, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007bf0:	6822      	ldr	r2, [r4, #0]
 8007bf2:	6993      	ldr	r3, [r2, #24]
 8007bf4:	4933      	ldr	r1, [pc, #204]	@ (8007cc4 <HAL_TIM_IC_ConfigChannel+0x168>)
 8007bf6:	400b      	ands	r3, r1
 8007bf8:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007bfa:	6822      	ldr	r2, [r4, #0]
 8007bfc:	6991      	ldr	r1, [r2, #24]
 8007bfe:	68ab      	ldr	r3, [r5, #8]
 8007c00:	021b      	lsls	r3, r3, #8
 8007c02:	430b      	orrs	r3, r1
 8007c04:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007c06:	2000      	movs	r0, #0
 8007c08:	e7be      	b.n	8007b88 <HAL_TIM_IC_ConfigChannel+0x2c>
    TIM_TI3_SetConfig(htim->Instance,
 8007c0a:	6802      	ldr	r2, [r0, #0]
                      sConfig->ICPolarity,
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	4698      	mov	r8, r3
                      sConfig->ICSelection,
 8007c10:	6868      	ldr	r0, [r5, #4]
                      sConfig->ICFilter);
 8007c12:	68ef      	ldr	r7, [r5, #12]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007c14:	6a16      	ldr	r6, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c16:	6a11      	ldr	r1, [r2, #32]
 8007c18:	4b2b      	ldr	r3, [pc, #172]	@ (8007cc8 <HAL_TIM_IC_ConfigChannel+0x16c>)
 8007c1a:	4019      	ands	r1, r3
 8007c1c:	6211      	str	r1, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c1e:	69d1      	ldr	r1, [r2, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007c20:	3305      	adds	r3, #5
 8007c22:	33ff      	adds	r3, #255	@ 0xff
 8007c24:	4399      	bics	r1, r3
  tmpccmr2 |= TIM_ICSelection;
 8007c26:	4308      	orrs	r0, r1

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007c28:	21f0      	movs	r1, #240	@ 0xf0
 8007c2a:	4388      	bics	r0, r1
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007c2c:	013f      	lsls	r7, r7, #4
 8007c2e:	310f      	adds	r1, #15
 8007c30:	4039      	ands	r1, r7
 8007c32:	4301      	orrs	r1, r0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007c34:	4825      	ldr	r0, [pc, #148]	@ (8007ccc <HAL_TIM_IC_ConfigChannel+0x170>)
 8007c36:	4030      	ands	r0, r6
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007c38:	4643      	mov	r3, r8
 8007c3a:	021b      	lsls	r3, r3, #8
 8007c3c:	26a0      	movs	r6, #160	@ 0xa0
 8007c3e:	0136      	lsls	r6, r6, #4
 8007c40:	4033      	ands	r3, r6
 8007c42:	4303      	orrs	r3, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c44:	61d1      	str	r1, [r2, #28]
  TIMx->CCER = tmpccer;
 8007c46:	6213      	str	r3, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007c48:	6822      	ldr	r2, [r4, #0]
 8007c4a:	69d3      	ldr	r3, [r2, #28]
 8007c4c:	210c      	movs	r1, #12
 8007c4e:	438b      	bics	r3, r1
 8007c50:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007c52:	6822      	ldr	r2, [r4, #0]
 8007c54:	69d3      	ldr	r3, [r2, #28]
 8007c56:	68a9      	ldr	r1, [r5, #8]
 8007c58:	430b      	orrs	r3, r1
 8007c5a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	e793      	b.n	8007b88 <HAL_TIM_IC_ConfigChannel+0x2c>
    TIM_TI4_SetConfig(htim->Instance,
 8007c60:	6820      	ldr	r0, [r4, #0]
                      sConfig->ICPolarity,
 8007c62:	682b      	ldr	r3, [r5, #0]
 8007c64:	4698      	mov	r8, r3
                      sConfig->ICSelection,
 8007c66:	6869      	ldr	r1, [r5, #4]
                      sConfig->ICFilter);
 8007c68:	68ea      	ldr	r2, [r5, #12]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007c6a:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c6c:	6a07      	ldr	r7, [r0, #32]
 8007c6e:	4b18      	ldr	r3, [pc, #96]	@ (8007cd0 <HAL_TIM_IC_ConfigChannel+0x174>)
 8007c70:	401f      	ands	r7, r3
 8007c72:	6207      	str	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c74:	69c7      	ldr	r7, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007c76:	4b11      	ldr	r3, [pc, #68]	@ (8007cbc <HAL_TIM_IC_ConfigChannel+0x160>)
 8007c78:	401f      	ands	r7, r3
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007c7a:	0209      	lsls	r1, r1, #8
 8007c7c:	4339      	orrs	r1, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007c7e:	4f10      	ldr	r7, [pc, #64]	@ (8007cc0 <HAL_TIM_IC_ConfigChannel+0x164>)
 8007c80:	4039      	ands	r1, r7
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007c82:	0712      	lsls	r2, r2, #28
 8007c84:	0c12      	lsrs	r2, r2, #16
 8007c86:	430a      	orrs	r2, r1

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007c88:	4912      	ldr	r1, [pc, #72]	@ (8007cd4 <HAL_TIM_IC_ConfigChannel+0x178>)
 8007c8a:	4031      	ands	r1, r6
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007c8c:	4643      	mov	r3, r8
 8007c8e:	031b      	lsls	r3, r3, #12
 8007c90:	26a0      	movs	r6, #160	@ 0xa0
 8007c92:	0236      	lsls	r6, r6, #8
 8007c94:	4033      	ands	r3, r6
 8007c96:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c98:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 8007c9a:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007c9c:	6822      	ldr	r2, [r4, #0]
 8007c9e:	69d3      	ldr	r3, [r2, #28]
 8007ca0:	4908      	ldr	r1, [pc, #32]	@ (8007cc4 <HAL_TIM_IC_ConfigChannel+0x168>)
 8007ca2:	400b      	ands	r3, r1
 8007ca4:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007ca6:	6822      	ldr	r2, [r4, #0]
 8007ca8:	69d1      	ldr	r1, [r2, #28]
 8007caa:	68ab      	ldr	r3, [r5, #8]
 8007cac:	021b      	lsls	r3, r3, #8
 8007cae:	430b      	orrs	r3, r1
 8007cb0:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	e768      	b.n	8007b88 <HAL_TIM_IC_ConfigChannel+0x2c>
  __HAL_LOCK(htim);
 8007cb6:	2002      	movs	r0, #2
 8007cb8:	e769      	b.n	8007b8e <HAL_TIM_IC_ConfigChannel+0x32>
 8007cba:	46c0      	nop			@ (mov r8, r8)
 8007cbc:	fffffcff 	.word	0xfffffcff
 8007cc0:	ffff0fff 	.word	0xffff0fff
 8007cc4:	fffff3ff 	.word	0xfffff3ff
 8007cc8:	fffffeff 	.word	0xfffffeff
 8007ccc:	fffff5ff 	.word	0xfffff5ff
 8007cd0:	ffffefff 	.word	0xffffefff
 8007cd4:	ffff5fff 	.word	0xffff5fff

08007cd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cd8:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cda:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cdc:	4d03      	ldr	r5, [pc, #12]	@ (8007cec <TIM_ETR_SetConfig+0x14>)
 8007cde:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ce0:	021b      	lsls	r3, r3, #8
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ce8:	6083      	str	r3, [r0, #8]
}
 8007cea:	bd30      	pop	{r4, r5, pc}
 8007cec:	ffff00ff 	.word	0xffff00ff

08007cf0 <HAL_TIM_ConfigClockSource>:
{
 8007cf0:	b570      	push	{r4, r5, r6, lr}
 8007cf2:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8007cf4:	233c      	movs	r3, #60	@ 0x3c
 8007cf6:	5cc3      	ldrb	r3, [r0, r3]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d100      	bne.n	8007cfe <HAL_TIM_ConfigClockSource+0xe>
 8007cfc:	e0ad      	b.n	8007e5a <HAL_TIM_ConfigClockSource+0x16a>
 8007cfe:	233c      	movs	r3, #60	@ 0x3c
 8007d00:	2201      	movs	r2, #1
 8007d02:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8007d04:	3301      	adds	r3, #1
 8007d06:	3201      	adds	r2, #1
 8007d08:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8007d0a:	6802      	ldr	r2, [r0, #0]
 8007d0c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d0e:	4854      	ldr	r0, [pc, #336]	@ (8007e60 <HAL_TIM_ConfigClockSource+0x170>)
 8007d10:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8007d12:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8007d14:	680b      	ldr	r3, [r1, #0]
 8007d16:	2b60      	cmp	r3, #96	@ 0x60
 8007d18:	d064      	beq.n	8007de4 <HAL_TIM_ConfigClockSource+0xf4>
 8007d1a:	d838      	bhi.n	8007d8e <HAL_TIM_ConfigClockSource+0x9e>
 8007d1c:	2b40      	cmp	r3, #64	@ 0x40
 8007d1e:	d100      	bne.n	8007d22 <HAL_TIM_ConfigClockSource+0x32>
 8007d20:	e07c      	b.n	8007e1c <HAL_TIM_ConfigClockSource+0x12c>
 8007d22:	d816      	bhi.n	8007d52 <HAL_TIM_ConfigClockSource+0x62>
 8007d24:	2b20      	cmp	r3, #32
 8007d26:	d006      	beq.n	8007d36 <HAL_TIM_ConfigClockSource+0x46>
 8007d28:	d80f      	bhi.n	8007d4a <HAL_TIM_ConfigClockSource+0x5a>
 8007d2a:	2210      	movs	r2, #16
 8007d2c:	0019      	movs	r1, r3
 8007d2e:	4391      	bics	r1, r2
 8007d30:	2001      	movs	r0, #1
 8007d32:	2900      	cmp	r1, #0
 8007d34:	d141      	bne.n	8007dba <HAL_TIM_ConfigClockSource+0xca>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d36:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8007d38:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d3a:	484a      	ldr	r0, [pc, #296]	@ (8007e64 <HAL_TIM_ConfigClockSource+0x174>)
 8007d3c:	4002      	ands	r2, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	2207      	movs	r2, #7
 8007d42:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8007d44:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007d46:	2000      	movs	r0, #0
}
 8007d48:	e037      	b.n	8007dba <HAL_TIM_ConfigClockSource+0xca>
  switch (sClockSourceConfig->ClockSource)
 8007d4a:	2001      	movs	r0, #1
 8007d4c:	2b30      	cmp	r3, #48	@ 0x30
 8007d4e:	d0f2      	beq.n	8007d36 <HAL_TIM_ConfigClockSource+0x46>
 8007d50:	e033      	b.n	8007dba <HAL_TIM_ConfigClockSource+0xca>
 8007d52:	2001      	movs	r0, #1
 8007d54:	2b50      	cmp	r3, #80	@ 0x50
 8007d56:	d130      	bne.n	8007dba <HAL_TIM_ConfigClockSource+0xca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d58:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d5a:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007d5c:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8007d5e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d60:	6a1d      	ldr	r5, [r3, #32]
 8007d62:	2601      	movs	r6, #1
 8007d64:	43b5      	bics	r5, r6
 8007d66:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d68:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d6a:	36ef      	adds	r6, #239	@ 0xef
 8007d6c:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d6e:	0112      	lsls	r2, r2, #4
 8007d70:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d72:	250a      	movs	r5, #10
 8007d74:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 8007d76:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8007d78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d7a:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d7c:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8007d7e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d80:	4938      	ldr	r1, [pc, #224]	@ (8007e64 <HAL_TIM_ConfigClockSource+0x174>)
 8007d82:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d84:	2157      	movs	r1, #87	@ 0x57
 8007d86:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8007d88:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007d8a:	2000      	movs	r0, #0
}
 8007d8c:	e015      	b.n	8007dba <HAL_TIM_ConfigClockSource+0xca>
  switch (sClockSourceConfig->ClockSource)
 8007d8e:	2280      	movs	r2, #128	@ 0x80
 8007d90:	0152      	lsls	r2, r2, #5
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d05d      	beq.n	8007e52 <HAL_TIM_ConfigClockSource+0x162>
 8007d96:	2280      	movs	r2, #128	@ 0x80
 8007d98:	0192      	lsls	r2, r2, #6
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d014      	beq.n	8007dc8 <HAL_TIM_ConfigClockSource+0xd8>
 8007d9e:	2b70      	cmp	r3, #112	@ 0x70
 8007da0:	d159      	bne.n	8007e56 <HAL_TIM_ConfigClockSource+0x166>
      TIM_ETR_SetConfig(htim->Instance,
 8007da2:	68cb      	ldr	r3, [r1, #12]
 8007da4:	684a      	ldr	r2, [r1, #4]
 8007da6:	6889      	ldr	r1, [r1, #8]
 8007da8:	6820      	ldr	r0, [r4, #0]
 8007daa:	f7ff ff95 	bl	8007cd8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007dae:	6822      	ldr	r2, [r4, #0]
 8007db0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007db2:	2177      	movs	r1, #119	@ 0x77
 8007db4:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8007db6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007db8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007dba:	233d      	movs	r3, #61	@ 0x3d
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	54e2      	strb	r2, [r4, r3]
}
 8007dc6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8007dc8:	68cb      	ldr	r3, [r1, #12]
 8007dca:	684a      	ldr	r2, [r1, #4]
 8007dcc:	6889      	ldr	r1, [r1, #8]
 8007dce:	6820      	ldr	r0, [r4, #0]
 8007dd0:	f7ff ff82 	bl	8007cd8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007dd4:	6822      	ldr	r2, [r4, #0]
 8007dd6:	6891      	ldr	r1, [r2, #8]
 8007dd8:	2380      	movs	r3, #128	@ 0x80
 8007dda:	01db      	lsls	r3, r3, #7
 8007ddc:	430b      	orrs	r3, r1
 8007dde:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007de0:	2000      	movs	r0, #0
      break;
 8007de2:	e7ea      	b.n	8007dba <HAL_TIM_ConfigClockSource+0xca>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007de4:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 8007de6:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007de8:	68c9      	ldr	r1, [r1, #12]
  tmpccer = TIMx->CCER;
 8007dea:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dec:	6a1d      	ldr	r5, [r3, #32]
 8007dee:	2610      	movs	r6, #16
 8007df0:	43b5      	bics	r5, r6
 8007df2:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007df4:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007df6:	4e1c      	ldr	r6, [pc, #112]	@ (8007e68 <HAL_TIM_ConfigClockSource+0x178>)
 8007df8:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dfa:	0309      	lsls	r1, r1, #12
 8007dfc:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dfe:	25a0      	movs	r5, #160	@ 0xa0
 8007e00:	43a8      	bics	r0, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e02:	0112      	lsls	r2, r2, #4
 8007e04:	4302      	orrs	r2, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8007e06:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e08:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e0a:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8007e0c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e0e:	4915      	ldr	r1, [pc, #84]	@ (8007e64 <HAL_TIM_ConfigClockSource+0x174>)
 8007e10:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e12:	2167      	movs	r1, #103	@ 0x67
 8007e14:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8007e16:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007e18:	2000      	movs	r0, #0
}
 8007e1a:	e7ce      	b.n	8007dba <HAL_TIM_ConfigClockSource+0xca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e1c:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e1e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007e20:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8007e22:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e24:	6a1d      	ldr	r5, [r3, #32]
 8007e26:	2601      	movs	r6, #1
 8007e28:	43b5      	bics	r5, r6
 8007e2a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e2c:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e2e:	36ef      	adds	r6, #239	@ 0xef
 8007e30:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e32:	0112      	lsls	r2, r2, #4
 8007e34:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e36:	250a      	movs	r5, #10
 8007e38:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 8007e3a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8007e3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e3e:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e40:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8007e42:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e44:	4907      	ldr	r1, [pc, #28]	@ (8007e64 <HAL_TIM_ConfigClockSource+0x174>)
 8007e46:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e48:	2147      	movs	r1, #71	@ 0x47
 8007e4a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8007e4c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007e4e:	2000      	movs	r0, #0
}
 8007e50:	e7b3      	b.n	8007dba <HAL_TIM_ConfigClockSource+0xca>
  HAL_StatusTypeDef status = HAL_OK;
 8007e52:	2000      	movs	r0, #0
 8007e54:	e7b1      	b.n	8007dba <HAL_TIM_ConfigClockSource+0xca>
  switch (sClockSourceConfig->ClockSource)
 8007e56:	2001      	movs	r0, #1
 8007e58:	e7af      	b.n	8007dba <HAL_TIM_ConfigClockSource+0xca>
  __HAL_LOCK(htim);
 8007e5a:	2002      	movs	r0, #2
 8007e5c:	e7b3      	b.n	8007dc6 <HAL_TIM_ConfigClockSource+0xd6>
 8007e5e:	46c0      	nop			@ (mov r8, r8)
 8007e60:	ffce0088 	.word	0xffce0088
 8007e64:	ffcfff8f 	.word	0xffcfff8f
 8007e68:	ffff0fff 	.word	0xffff0fff

08007e6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e6c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e6e:	231f      	movs	r3, #31
 8007e70:	4019      	ands	r1, r3

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e72:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e74:	2401      	movs	r4, #1
 8007e76:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8007e78:	43a3      	bics	r3, r4
 8007e7a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e7c:	6a03      	ldr	r3, [r0, #32]
 8007e7e:	408a      	lsls	r2, r1
 8007e80:	431a      	orrs	r2, r3
 8007e82:	6202      	str	r2, [r0, #32]
}
 8007e84:	bd10      	pop	{r4, pc}
	...

08007e88 <HAL_TIM_OC_Start_IT>:
{
 8007e88:	b510      	push	{r4, lr}
 8007e8a:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e8c:	2910      	cmp	r1, #16
 8007e8e:	d85f      	bhi.n	8007f50 <HAL_TIM_OC_Start_IT+0xc8>
 8007e90:	008b      	lsls	r3, r1, #2
 8007e92:	4a4a      	ldr	r2, [pc, #296]	@ (8007fbc <HAL_TIM_OC_Start_IT+0x134>)
 8007e94:	58d3      	ldr	r3, [r2, r3]
 8007e96:	469f      	mov	pc, r3
 8007e98:	233e      	movs	r3, #62	@ 0x3e
 8007e9a:	5cc3      	ldrb	r3, [r0, r3]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d000      	beq.n	8007ea2 <HAL_TIM_OC_Start_IT+0x1a>
 8007ea0:	e081      	b.n	8007fa6 <HAL_TIM_OC_Start_IT+0x11e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ea2:	2002      	movs	r0, #2
 8007ea4:	233e      	movs	r3, #62	@ 0x3e
 8007ea6:	54e0      	strb	r0, [r4, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ea8:	6822      	ldr	r2, [r4, #0]
 8007eaa:	68d3      	ldr	r3, [r2, #12]
 8007eac:	4303      	orrs	r3, r0
 8007eae:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007eb0:	6820      	ldr	r0, [r4, #0]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f7ff ffda 	bl	8007e6c <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007eb8:	6823      	ldr	r3, [r4, #0]
 8007eba:	4a41      	ldr	r2, [pc, #260]	@ (8007fc0 <HAL_TIM_OC_Start_IT+0x138>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d005      	beq.n	8007ecc <HAL_TIM_OC_Start_IT+0x44>
 8007ec0:	4a40      	ldr	r2, [pc, #256]	@ (8007fc4 <HAL_TIM_OC_Start_IT+0x13c>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d002      	beq.n	8007ecc <HAL_TIM_OC_Start_IT+0x44>
 8007ec6:	4a40      	ldr	r2, [pc, #256]	@ (8007fc8 <HAL_TIM_OC_Start_IT+0x140>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d108      	bne.n	8007ede <HAL_TIM_OC_Start_IT+0x56>
      __HAL_TIM_MOE_ENABLE(htim);
 8007ecc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8007ece:	2280      	movs	r2, #128	@ 0x80
 8007ed0:	0212      	lsls	r2, r2, #8
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	645a      	str	r2, [r3, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	4a39      	ldr	r2, [pc, #228]	@ (8007fc0 <HAL_TIM_OC_Start_IT+0x138>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d055      	beq.n	8007f8a <HAL_TIM_OC_Start_IT+0x102>
 8007ede:	2280      	movs	r2, #128	@ 0x80
 8007ee0:	05d2      	lsls	r2, r2, #23
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d051      	beq.n	8007f8a <HAL_TIM_OC_Start_IT+0x102>
 8007ee6:	4a39      	ldr	r2, [pc, #228]	@ (8007fcc <HAL_TIM_OC_Start_IT+0x144>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d04e      	beq.n	8007f8a <HAL_TIM_OC_Start_IT+0x102>
      __HAL_TIM_ENABLE(htim);
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	2101      	movs	r1, #1
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	2000      	movs	r0, #0
}
 8007ef6:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ef8:	233f      	movs	r3, #63	@ 0x3f
 8007efa:	5cc3      	ldrb	r3, [r0, r3]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d154      	bne.n	8007faa <HAL_TIM_OC_Start_IT+0x122>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f00:	233f      	movs	r3, #63	@ 0x3f
 8007f02:	2202      	movs	r2, #2
 8007f04:	54e2      	strb	r2, [r4, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f06:	6822      	ldr	r2, [r4, #0]
 8007f08:	68d3      	ldr	r3, [r2, #12]
 8007f0a:	2004      	movs	r0, #4
 8007f0c:	4303      	orrs	r3, r0
 8007f0e:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8007f10:	e7ce      	b.n	8007eb0 <HAL_TIM_OC_Start_IT+0x28>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f12:	2340      	movs	r3, #64	@ 0x40
 8007f14:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_ERROR;
 8007f16:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d1ec      	bne.n	8007ef6 <HAL_TIM_OC_Start_IT+0x6e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f1c:	2340      	movs	r3, #64	@ 0x40
 8007f1e:	2202      	movs	r2, #2
 8007f20:	54e2      	strb	r2, [r4, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007f22:	6822      	ldr	r2, [r4, #0]
 8007f24:	68d3      	ldr	r3, [r2, #12]
 8007f26:	2008      	movs	r0, #8
 8007f28:	4303      	orrs	r3, r0
 8007f2a:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8007f2c:	e7c0      	b.n	8007eb0 <HAL_TIM_OC_Start_IT+0x28>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f2e:	2341      	movs	r3, #65	@ 0x41
 8007f30:	5cc3      	ldrb	r3, [r0, r3]
 8007f32:	3b01      	subs	r3, #1
 8007f34:	1e5a      	subs	r2, r3, #1
 8007f36:	4193      	sbcs	r3, r2
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00c      	beq.n	8007f58 <HAL_TIM_OC_Start_IT+0xd0>
    return HAL_ERROR;
 8007f3e:	2001      	movs	r0, #1
 8007f40:	e7d9      	b.n	8007ef6 <HAL_TIM_OC_Start_IT+0x6e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f42:	2342      	movs	r3, #66	@ 0x42
 8007f44:	5cc3      	ldrb	r3, [r0, r3]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	1e5a      	subs	r2, r3, #1
 8007f4a:	4193      	sbcs	r3, r2
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	e7f4      	b.n	8007f3a <HAL_TIM_OC_Start_IT+0xb2>
 8007f50:	2343      	movs	r3, #67	@ 0x43
 8007f52:	5ce3      	ldrb	r3, [r4, r3]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d12a      	bne.n	8007fae <HAL_TIM_OC_Start_IT+0x126>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f58:	2910      	cmp	r1, #16
 8007f5a:	d811      	bhi.n	8007f80 <HAL_TIM_OC_Start_IT+0xf8>
 8007f5c:	008b      	lsls	r3, r1, #2
 8007f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8007fd0 <HAL_TIM_OC_Start_IT+0x148>)
 8007f60:	58d3      	ldr	r3, [r2, r3]
 8007f62:	469f      	mov	pc, r3
 8007f64:	2341      	movs	r3, #65	@ 0x41
 8007f66:	2202      	movs	r2, #2
 8007f68:	54e2      	strb	r2, [r4, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007f6a:	6822      	ldr	r2, [r4, #0]
 8007f6c:	68d3      	ldr	r3, [r2, #12]
 8007f6e:	2010      	movs	r0, #16
 8007f70:	4303      	orrs	r3, r0
 8007f72:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8007f74:	e79c      	b.n	8007eb0 <HAL_TIM_OC_Start_IT+0x28>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f76:	2342      	movs	r3, #66	@ 0x42
 8007f78:	2202      	movs	r2, #2
 8007f7a:	54e2      	strb	r2, [r4, r3]
 8007f7c:	2001      	movs	r0, #1
 8007f7e:	e7ba      	b.n	8007ef6 <HAL_TIM_OC_Start_IT+0x6e>
 8007f80:	2343      	movs	r3, #67	@ 0x43
 8007f82:	2202      	movs	r2, #2
 8007f84:	54e2      	strb	r2, [r4, r3]
 8007f86:	2001      	movs	r0, #1
 8007f88:	e7b5      	b.n	8007ef6 <HAL_TIM_OC_Start_IT+0x6e>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f8a:	689a      	ldr	r2, [r3, #8]
 8007f8c:	4911      	ldr	r1, [pc, #68]	@ (8007fd4 <HAL_TIM_OC_Start_IT+0x14c>)
 8007f8e:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f90:	2a06      	cmp	r2, #6
 8007f92:	d00e      	beq.n	8007fb2 <HAL_TIM_OC_Start_IT+0x12a>
 8007f94:	3907      	subs	r1, #7
 8007f96:	428a      	cmp	r2, r1
 8007f98:	d00d      	beq.n	8007fb6 <HAL_TIM_OC_Start_IT+0x12e>
        __HAL_TIM_ENABLE(htim);
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	2101      	movs	r1, #1
 8007f9e:	430a      	orrs	r2, r1
 8007fa0:	601a      	str	r2, [r3, #0]
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	e7a7      	b.n	8007ef6 <HAL_TIM_OC_Start_IT+0x6e>
    return HAL_ERROR;
 8007fa6:	2001      	movs	r0, #1
 8007fa8:	e7a5      	b.n	8007ef6 <HAL_TIM_OC_Start_IT+0x6e>
 8007faa:	2001      	movs	r0, #1
 8007fac:	e7a3      	b.n	8007ef6 <HAL_TIM_OC_Start_IT+0x6e>
 8007fae:	2001      	movs	r0, #1
 8007fb0:	e7a1      	b.n	8007ef6 <HAL_TIM_OC_Start_IT+0x6e>
 8007fb2:	2000      	movs	r0, #0
 8007fb4:	e79f      	b.n	8007ef6 <HAL_TIM_OC_Start_IT+0x6e>
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	e79d      	b.n	8007ef6 <HAL_TIM_OC_Start_IT+0x6e>
 8007fba:	46c0      	nop			@ (mov r8, r8)
 8007fbc:	08009ed8 	.word	0x08009ed8
 8007fc0:	40012c00 	.word	0x40012c00
 8007fc4:	40014400 	.word	0x40014400
 8007fc8:	40014800 	.word	0x40014800
 8007fcc:	40000400 	.word	0x40000400
 8007fd0:	08009f1c 	.word	0x08009f1c
 8007fd4:	00010007 	.word	0x00010007

08007fd8 <HAL_TIM_OC_Stop_IT>:
{
 8007fd8:	b570      	push	{r4, r5, r6, lr}
 8007fda:	0005      	movs	r5, r0
 8007fdc:	000c      	movs	r4, r1
  switch (Channel)
 8007fde:	2908      	cmp	r1, #8
 8007fe0:	d03b      	beq.n	800805a <HAL_TIM_OC_Stop_IT+0x82>
 8007fe2:	d80a      	bhi.n	8007ffa <HAL_TIM_OC_Stop_IT+0x22>
 8007fe4:	2900      	cmp	r1, #0
 8007fe6:	d011      	beq.n	800800c <HAL_TIM_OC_Stop_IT+0x34>
 8007fe8:	2001      	movs	r0, #1
 8007fea:	2904      	cmp	r1, #4
 8007fec:	d14c      	bne.n	8008088 <HAL_TIM_OC_Stop_IT+0xb0>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007fee:	682a      	ldr	r2, [r5, #0]
 8007ff0:	68d3      	ldr	r3, [r2, #12]
 8007ff2:	2104      	movs	r1, #4
 8007ff4:	438b      	bics	r3, r1
 8007ff6:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8007ff8:	e00d      	b.n	8008016 <HAL_TIM_OC_Stop_IT+0x3e>
  switch (Channel)
 8007ffa:	2001      	movs	r0, #1
 8007ffc:	290c      	cmp	r1, #12
 8007ffe:	d143      	bne.n	8008088 <HAL_TIM_OC_Stop_IT+0xb0>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8008000:	682a      	ldr	r2, [r5, #0]
 8008002:	68d3      	ldr	r3, [r2, #12]
 8008004:	2110      	movs	r1, #16
 8008006:	438b      	bics	r3, r1
 8008008:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800800a:	e004      	b.n	8008016 <HAL_TIM_OC_Stop_IT+0x3e>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800800c:	6802      	ldr	r2, [r0, #0]
 800800e:	68d3      	ldr	r3, [r2, #12]
 8008010:	2102      	movs	r1, #2
 8008012:	438b      	bics	r3, r1
 8008014:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008016:	6828      	ldr	r0, [r5, #0]
 8008018:	2200      	movs	r2, #0
 800801a:	0021      	movs	r1, r4
 800801c:	f7ff ff26 	bl	8007e6c <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008020:	682b      	ldr	r3, [r5, #0]
 8008022:	4a26      	ldr	r2, [pc, #152]	@ (80080bc <HAL_TIM_OC_Stop_IT+0xe4>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d01e      	beq.n	8008066 <HAL_TIM_OC_Stop_IT+0x8e>
 8008028:	4a25      	ldr	r2, [pc, #148]	@ (80080c0 <HAL_TIM_OC_Stop_IT+0xe8>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d01b      	beq.n	8008066 <HAL_TIM_OC_Stop_IT+0x8e>
 800802e:	4a25      	ldr	r2, [pc, #148]	@ (80080c4 <HAL_TIM_OC_Stop_IT+0xec>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d018      	beq.n	8008066 <HAL_TIM_OC_Stop_IT+0x8e>
    __HAL_TIM_DISABLE(htim);
 8008034:	682b      	ldr	r3, [r5, #0]
 8008036:	6a19      	ldr	r1, [r3, #32]
 8008038:	4a23      	ldr	r2, [pc, #140]	@ (80080c8 <HAL_TIM_OC_Stop_IT+0xf0>)
 800803a:	4211      	tst	r1, r2
 800803c:	d107      	bne.n	800804e <HAL_TIM_OC_Stop_IT+0x76>
 800803e:	6a19      	ldr	r1, [r3, #32]
 8008040:	4a22      	ldr	r2, [pc, #136]	@ (80080cc <HAL_TIM_OC_Stop_IT+0xf4>)
 8008042:	4211      	tst	r1, r2
 8008044:	d103      	bne.n	800804e <HAL_TIM_OC_Stop_IT+0x76>
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	2101      	movs	r1, #1
 800804a:	438a      	bics	r2, r1
 800804c:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800804e:	2c10      	cmp	r4, #16
 8008050:	d82f      	bhi.n	80080b2 <HAL_TIM_OC_Stop_IT+0xda>
 8008052:	00a4      	lsls	r4, r4, #2
 8008054:	4b1e      	ldr	r3, [pc, #120]	@ (80080d0 <HAL_TIM_OC_Stop_IT+0xf8>)
 8008056:	591b      	ldr	r3, [r3, r4]
 8008058:	469f      	mov	pc, r3
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800805a:	6802      	ldr	r2, [r0, #0]
 800805c:	68d3      	ldr	r3, [r2, #12]
 800805e:	2108      	movs	r1, #8
 8008060:	438b      	bics	r3, r1
 8008062:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8008064:	e7d7      	b.n	8008016 <HAL_TIM_OC_Stop_IT+0x3e>
      __HAL_TIM_MOE_DISABLE(htim);
 8008066:	6a19      	ldr	r1, [r3, #32]
 8008068:	4a17      	ldr	r2, [pc, #92]	@ (80080c8 <HAL_TIM_OC_Stop_IT+0xf0>)
 800806a:	4211      	tst	r1, r2
 800806c:	d1e2      	bne.n	8008034 <HAL_TIM_OC_Stop_IT+0x5c>
 800806e:	6a19      	ldr	r1, [r3, #32]
 8008070:	4a16      	ldr	r2, [pc, #88]	@ (80080cc <HAL_TIM_OC_Stop_IT+0xf4>)
 8008072:	4211      	tst	r1, r2
 8008074:	d1de      	bne.n	8008034 <HAL_TIM_OC_Stop_IT+0x5c>
 8008076:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008078:	4916      	ldr	r1, [pc, #88]	@ (80080d4 <HAL_TIM_OC_Stop_IT+0xfc>)
 800807a:	400a      	ands	r2, r1
 800807c:	645a      	str	r2, [r3, #68]	@ 0x44
 800807e:	e7d9      	b.n	8008034 <HAL_TIM_OC_Stop_IT+0x5c>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008080:	233e      	movs	r3, #62	@ 0x3e
 8008082:	2201      	movs	r2, #1
 8008084:	54ea      	strb	r2, [r5, r3]
 8008086:	2000      	movs	r0, #0
}
 8008088:	bd70      	pop	{r4, r5, r6, pc}
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800808a:	233f      	movs	r3, #63	@ 0x3f
 800808c:	2201      	movs	r2, #1
 800808e:	54ea      	strb	r2, [r5, r3]
 8008090:	2000      	movs	r0, #0
 8008092:	e7f9      	b.n	8008088 <HAL_TIM_OC_Stop_IT+0xb0>
 8008094:	2340      	movs	r3, #64	@ 0x40
 8008096:	2201      	movs	r2, #1
 8008098:	54ea      	strb	r2, [r5, r3]
 800809a:	2000      	movs	r0, #0
 800809c:	e7f4      	b.n	8008088 <HAL_TIM_OC_Stop_IT+0xb0>
 800809e:	2341      	movs	r3, #65	@ 0x41
 80080a0:	2201      	movs	r2, #1
 80080a2:	54ea      	strb	r2, [r5, r3]
 80080a4:	2000      	movs	r0, #0
 80080a6:	e7ef      	b.n	8008088 <HAL_TIM_OC_Stop_IT+0xb0>
 80080a8:	2342      	movs	r3, #66	@ 0x42
 80080aa:	2201      	movs	r2, #1
 80080ac:	54ea      	strb	r2, [r5, r3]
 80080ae:	2000      	movs	r0, #0
 80080b0:	e7ea      	b.n	8008088 <HAL_TIM_OC_Stop_IT+0xb0>
 80080b2:	2343      	movs	r3, #67	@ 0x43
 80080b4:	2201      	movs	r2, #1
 80080b6:	54ea      	strb	r2, [r5, r3]
 80080b8:	2000      	movs	r0, #0
 80080ba:	e7e5      	b.n	8008088 <HAL_TIM_OC_Stop_IT+0xb0>
 80080bc:	40012c00 	.word	0x40012c00
 80080c0:	40014400 	.word	0x40014400
 80080c4:	40014800 	.word	0x40014800
 80080c8:	00001111 	.word	0x00001111
 80080cc:	00000444 	.word	0x00000444
 80080d0:	08009f60 	.word	0x08009f60
 80080d4:	ffff7fff 	.word	0xffff7fff

080080d8 <HAL_TIM_PWM_Start>:
{
 80080d8:	b510      	push	{r4, lr}
 80080da:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80080dc:	2910      	cmp	r1, #16
 80080de:	d851      	bhi.n	8008184 <HAL_TIM_PWM_Start+0xac>
 80080e0:	008b      	lsls	r3, r1, #2
 80080e2:	4a3f      	ldr	r2, [pc, #252]	@ (80081e0 <HAL_TIM_PWM_Start+0x108>)
 80080e4:	58d3      	ldr	r3, [r2, r3]
 80080e6:	469f      	mov	pc, r3
 80080e8:	233e      	movs	r3, #62	@ 0x3e
 80080ea:	5cc3      	ldrb	r3, [r0, r3]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d000      	beq.n	80080f2 <HAL_TIM_PWM_Start+0x1a>
 80080f0:	e06c      	b.n	80081cc <HAL_TIM_PWM_Start+0xf4>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080f2:	233e      	movs	r3, #62	@ 0x3e
 80080f4:	2202      	movs	r2, #2
 80080f6:	54e2      	strb	r2, [r4, r3]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080f8:	6820      	ldr	r0, [r4, #0]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f7ff feb6 	bl	8007e6c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	4a38      	ldr	r2, [pc, #224]	@ (80081e4 <HAL_TIM_PWM_Start+0x10c>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d005      	beq.n	8008114 <HAL_TIM_PWM_Start+0x3c>
 8008108:	4a37      	ldr	r2, [pc, #220]	@ (80081e8 <HAL_TIM_PWM_Start+0x110>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d002      	beq.n	8008114 <HAL_TIM_PWM_Start+0x3c>
 800810e:	4a37      	ldr	r2, [pc, #220]	@ (80081ec <HAL_TIM_PWM_Start+0x114>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d108      	bne.n	8008126 <HAL_TIM_PWM_Start+0x4e>
    __HAL_TIM_MOE_ENABLE(htim);
 8008114:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8008116:	2280      	movs	r2, #128	@ 0x80
 8008118:	0212      	lsls	r2, r2, #8
 800811a:	430a      	orrs	r2, r1
 800811c:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	4a30      	ldr	r2, [pc, #192]	@ (80081e4 <HAL_TIM_PWM_Start+0x10c>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d044      	beq.n	80081b0 <HAL_TIM_PWM_Start+0xd8>
 8008126:	2280      	movs	r2, #128	@ 0x80
 8008128:	05d2      	lsls	r2, r2, #23
 800812a:	4293      	cmp	r3, r2
 800812c:	d040      	beq.n	80081b0 <HAL_TIM_PWM_Start+0xd8>
 800812e:	4a30      	ldr	r2, [pc, #192]	@ (80081f0 <HAL_TIM_PWM_Start+0x118>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d03d      	beq.n	80081b0 <HAL_TIM_PWM_Start+0xd8>
    __HAL_TIM_ENABLE(htim);
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	2101      	movs	r1, #1
 8008138:	430a      	orrs	r2, r1
 800813a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800813c:	2000      	movs	r0, #0
}
 800813e:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008140:	233f      	movs	r3, #63	@ 0x3f
 8008142:	5cc3      	ldrb	r3, [r0, r3]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d143      	bne.n	80081d0 <HAL_TIM_PWM_Start+0xf8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008148:	233f      	movs	r3, #63	@ 0x3f
 800814a:	2202      	movs	r2, #2
 800814c:	54e2      	strb	r2, [r4, r3]
 800814e:	e7d3      	b.n	80080f8 <HAL_TIM_PWM_Start+0x20>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008150:	2340      	movs	r3, #64	@ 0x40
 8008152:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_ERROR;
 8008154:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008156:	2b01      	cmp	r3, #1
 8008158:	d1f1      	bne.n	800813e <HAL_TIM_PWM_Start+0x66>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800815a:	2340      	movs	r3, #64	@ 0x40
 800815c:	2202      	movs	r2, #2
 800815e:	54e2      	strb	r2, [r4, r3]
 8008160:	e7ca      	b.n	80080f8 <HAL_TIM_PWM_Start+0x20>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008162:	2341      	movs	r3, #65	@ 0x41
 8008164:	5cc3      	ldrb	r3, [r0, r3]
 8008166:	3b01      	subs	r3, #1
 8008168:	1e5a      	subs	r2, r3, #1
 800816a:	4193      	sbcs	r3, r2
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00c      	beq.n	800818c <HAL_TIM_PWM_Start+0xb4>
    return HAL_ERROR;
 8008172:	2001      	movs	r0, #1
 8008174:	e7e3      	b.n	800813e <HAL_TIM_PWM_Start+0x66>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008176:	2342      	movs	r3, #66	@ 0x42
 8008178:	5cc3      	ldrb	r3, [r0, r3]
 800817a:	3b01      	subs	r3, #1
 800817c:	1e5a      	subs	r2, r3, #1
 800817e:	4193      	sbcs	r3, r2
 8008180:	b2db      	uxtb	r3, r3
 8008182:	e7f4      	b.n	800816e <HAL_TIM_PWM_Start+0x96>
 8008184:	2343      	movs	r3, #67	@ 0x43
 8008186:	5ce3      	ldrb	r3, [r4, r3]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d123      	bne.n	80081d4 <HAL_TIM_PWM_Start+0xfc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800818c:	2910      	cmp	r1, #16
 800818e:	d80b      	bhi.n	80081a8 <HAL_TIM_PWM_Start+0xd0>
 8008190:	008b      	lsls	r3, r1, #2
 8008192:	4a18      	ldr	r2, [pc, #96]	@ (80081f4 <HAL_TIM_PWM_Start+0x11c>)
 8008194:	58d3      	ldr	r3, [r2, r3]
 8008196:	469f      	mov	pc, r3
 8008198:	2341      	movs	r3, #65	@ 0x41
 800819a:	2202      	movs	r2, #2
 800819c:	54e2      	strb	r2, [r4, r3]
 800819e:	e7ab      	b.n	80080f8 <HAL_TIM_PWM_Start+0x20>
 80081a0:	2342      	movs	r3, #66	@ 0x42
 80081a2:	2202      	movs	r2, #2
 80081a4:	54e2      	strb	r2, [r4, r3]
 80081a6:	e7a7      	b.n	80080f8 <HAL_TIM_PWM_Start+0x20>
 80081a8:	2343      	movs	r3, #67	@ 0x43
 80081aa:	2202      	movs	r2, #2
 80081ac:	54e2      	strb	r2, [r4, r3]
 80081ae:	e7a3      	b.n	80080f8 <HAL_TIM_PWM_Start+0x20>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081b0:	689a      	ldr	r2, [r3, #8]
 80081b2:	4911      	ldr	r1, [pc, #68]	@ (80081f8 <HAL_TIM_PWM_Start+0x120>)
 80081b4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081b6:	2a06      	cmp	r2, #6
 80081b8:	d00e      	beq.n	80081d8 <HAL_TIM_PWM_Start+0x100>
 80081ba:	3907      	subs	r1, #7
 80081bc:	428a      	cmp	r2, r1
 80081be:	d00d      	beq.n	80081dc <HAL_TIM_PWM_Start+0x104>
      __HAL_TIM_ENABLE(htim);
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	2101      	movs	r1, #1
 80081c4:	430a      	orrs	r2, r1
 80081c6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80081c8:	2000      	movs	r0, #0
 80081ca:	e7b8      	b.n	800813e <HAL_TIM_PWM_Start+0x66>
    return HAL_ERROR;
 80081cc:	2001      	movs	r0, #1
 80081ce:	e7b6      	b.n	800813e <HAL_TIM_PWM_Start+0x66>
 80081d0:	2001      	movs	r0, #1
 80081d2:	e7b4      	b.n	800813e <HAL_TIM_PWM_Start+0x66>
 80081d4:	2001      	movs	r0, #1
 80081d6:	e7b2      	b.n	800813e <HAL_TIM_PWM_Start+0x66>
  return HAL_OK;
 80081d8:	2000      	movs	r0, #0
 80081da:	e7b0      	b.n	800813e <HAL_TIM_PWM_Start+0x66>
 80081dc:	2000      	movs	r0, #0
 80081de:	e7ae      	b.n	800813e <HAL_TIM_PWM_Start+0x66>
 80081e0:	08009fa4 	.word	0x08009fa4
 80081e4:	40012c00 	.word	0x40012c00
 80081e8:	40014400 	.word	0x40014400
 80081ec:	40014800 	.word	0x40014800
 80081f0:	40000400 	.word	0x40000400
 80081f4:	08009fe8 	.word	0x08009fe8
 80081f8:	00010007 	.word	0x00010007

080081fc <HAL_TIM_IC_Start_IT>:
{
 80081fc:	b510      	push	{r4, lr}
 80081fe:	0004      	movs	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008200:	2910      	cmp	r1, #16
 8008202:	d82c      	bhi.n	800825e <HAL_TIM_IC_Start_IT+0x62>
 8008204:	008b      	lsls	r3, r1, #2
 8008206:	4a48      	ldr	r2, [pc, #288]	@ (8008328 <HAL_TIM_IC_Start_IT+0x12c>)
 8008208:	58d3      	ldr	r3, [r2, r3]
 800820a:	469f      	mov	pc, r3
 800820c:	233e      	movs	r3, #62	@ 0x3e
 800820e:	5cc0      	ldrb	r0, [r0, r3]
 8008210:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008212:	3306      	adds	r3, #6
 8008214:	5ce3      	ldrb	r3, [r4, r3]
 8008216:	b2db      	uxtb	r3, r3
 8008218:	e013      	b.n	8008242 <HAL_TIM_IC_Start_IT+0x46>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800821a:	233f      	movs	r3, #63	@ 0x3f
 800821c:	5cc0      	ldrb	r0, [r0, r3]
 800821e:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008220:	3306      	adds	r3, #6
 8008222:	5ce3      	ldrb	r3, [r4, r3]
 8008224:	b2db      	uxtb	r3, r3
 8008226:	e00c      	b.n	8008242 <HAL_TIM_IC_Start_IT+0x46>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008228:	2340      	movs	r3, #64	@ 0x40
 800822a:	5cc0      	ldrb	r0, [r0, r3]
 800822c:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800822e:	3306      	adds	r3, #6
 8008230:	5ce3      	ldrb	r3, [r4, r3]
 8008232:	b2db      	uxtb	r3, r3
 8008234:	e005      	b.n	8008242 <HAL_TIM_IC_Start_IT+0x46>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008236:	2341      	movs	r3, #65	@ 0x41
 8008238:	5cc0      	ldrb	r0, [r0, r3]
 800823a:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800823c:	2347      	movs	r3, #71	@ 0x47
 800823e:	5ce3      	ldrb	r3, [r4, r3]
 8008240:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008242:	2801      	cmp	r0, #1
 8008244:	d16a      	bne.n	800831c <HAL_TIM_IC_Start_IT+0x120>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008246:	2b01      	cmp	r3, #1
 8008248:	d169      	bne.n	800831e <HAL_TIM_IC_Start_IT+0x122>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800824a:	2910      	cmp	r1, #16
 800824c:	d854      	bhi.n	80082f8 <HAL_TIM_IC_Start_IT+0xfc>
 800824e:	008a      	lsls	r2, r1, #2
 8008250:	4836      	ldr	r0, [pc, #216]	@ (800832c <HAL_TIM_IC_Start_IT+0x130>)
 8008252:	5882      	ldr	r2, [r0, r2]
 8008254:	4697      	mov	pc, r2
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008256:	2342      	movs	r3, #66	@ 0x42
 8008258:	5cc0      	ldrb	r0, [r0, r3]
 800825a:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800825c:	e7ee      	b.n	800823c <HAL_TIM_IC_Start_IT+0x40>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800825e:	2343      	movs	r3, #67	@ 0x43
 8008260:	5ce0      	ldrb	r0, [r4, r3]
 8008262:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008264:	e7ea      	b.n	800823c <HAL_TIM_IC_Start_IT+0x40>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008266:	2202      	movs	r2, #2
 8008268:	233e      	movs	r3, #62	@ 0x3e
 800826a:	54e2      	strb	r2, [r4, r3]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800826c:	3306      	adds	r3, #6
 800826e:	54e2      	strb	r2, [r4, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008270:	6820      	ldr	r0, [r4, #0]
 8008272:	68c3      	ldr	r3, [r0, #12]
 8008274:	4313      	orrs	r3, r2
 8008276:	60c3      	str	r3, [r0, #12]
  if (status == HAL_OK)
 8008278:	e009      	b.n	800828e <HAL_TIM_IC_Start_IT+0x92>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800827a:	2302      	movs	r3, #2
 800827c:	223f      	movs	r2, #63	@ 0x3f
 800827e:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008280:	3206      	adds	r2, #6
 8008282:	54a3      	strb	r3, [r4, r2]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008284:	6822      	ldr	r2, [r4, #0]
 8008286:	68d3      	ldr	r3, [r2, #12]
 8008288:	2004      	movs	r0, #4
 800828a:	4303      	orrs	r3, r0
 800828c:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800828e:	6820      	ldr	r0, [r4, #0]
 8008290:	2201      	movs	r2, #1
 8008292:	f7ff fdeb 	bl	8007e6c <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008296:	6822      	ldr	r2, [r4, #0]
 8008298:	4b25      	ldr	r3, [pc, #148]	@ (8008330 <HAL_TIM_IC_Start_IT+0x134>)
 800829a:	429a      	cmp	r2, r3
 800829c:	d030      	beq.n	8008300 <HAL_TIM_IC_Start_IT+0x104>
 800829e:	2380      	movs	r3, #128	@ 0x80
 80082a0:	05db      	lsls	r3, r3, #23
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d02c      	beq.n	8008300 <HAL_TIM_IC_Start_IT+0x104>
 80082a6:	4b23      	ldr	r3, [pc, #140]	@ (8008334 <HAL_TIM_IC_Start_IT+0x138>)
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d029      	beq.n	8008300 <HAL_TIM_IC_Start_IT+0x104>
      __HAL_TIM_ENABLE(htim);
 80082ac:	6813      	ldr	r3, [r2, #0]
 80082ae:	2101      	movs	r1, #1
 80082b0:	430b      	orrs	r3, r1
 80082b2:	6013      	str	r3, [r2, #0]
 80082b4:	2000      	movs	r0, #0
 80082b6:	e032      	b.n	800831e <HAL_TIM_IC_Start_IT+0x122>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082b8:	2302      	movs	r3, #2
 80082ba:	2240      	movs	r2, #64	@ 0x40
 80082bc:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082be:	3206      	adds	r2, #6
 80082c0:	54a3      	strb	r3, [r4, r2]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80082c2:	6822      	ldr	r2, [r4, #0]
 80082c4:	68d3      	ldr	r3, [r2, #12]
 80082c6:	2008      	movs	r0, #8
 80082c8:	4303      	orrs	r3, r0
 80082ca:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 80082cc:	e7df      	b.n	800828e <HAL_TIM_IC_Start_IT+0x92>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082ce:	2241      	movs	r2, #65	@ 0x41
 80082d0:	2002      	movs	r0, #2
 80082d2:	54a0      	strb	r0, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082d4:	2247      	movs	r2, #71	@ 0x47
 80082d6:	2002      	movs	r0, #2
 80082d8:	54a0      	strb	r0, [r4, r2]
  switch (Channel)
 80082da:	0018      	movs	r0, r3
 80082dc:	2908      	cmp	r1, #8
 80082de:	d91e      	bls.n	800831e <HAL_TIM_IC_Start_IT+0x122>
 80082e0:	290c      	cmp	r1, #12
 80082e2:	d11c      	bne.n	800831e <HAL_TIM_IC_Start_IT+0x122>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80082e4:	6822      	ldr	r2, [r4, #0]
 80082e6:	68d3      	ldr	r3, [r2, #12]
 80082e8:	2010      	movs	r0, #16
 80082ea:	4303      	orrs	r3, r0
 80082ec:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 80082ee:	e7ce      	b.n	800828e <HAL_TIM_IC_Start_IT+0x92>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082f0:	2242      	movs	r2, #66	@ 0x42
 80082f2:	2002      	movs	r0, #2
 80082f4:	54a0      	strb	r0, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082f6:	e7ed      	b.n	80082d4 <HAL_TIM_IC_Start_IT+0xd8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082f8:	2243      	movs	r2, #67	@ 0x43
 80082fa:	2002      	movs	r0, #2
 80082fc:	54a0      	strb	r0, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082fe:	e7e9      	b.n	80082d4 <HAL_TIM_IC_Start_IT+0xd8>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008300:	6893      	ldr	r3, [r2, #8]
 8008302:	490d      	ldr	r1, [pc, #52]	@ (8008338 <HAL_TIM_IC_Start_IT+0x13c>)
 8008304:	400b      	ands	r3, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008306:	2b06      	cmp	r3, #6
 8008308:	d00a      	beq.n	8008320 <HAL_TIM_IC_Start_IT+0x124>
 800830a:	3907      	subs	r1, #7
 800830c:	428b      	cmp	r3, r1
 800830e:	d009      	beq.n	8008324 <HAL_TIM_IC_Start_IT+0x128>
        __HAL_TIM_ENABLE(htim);
 8008310:	6813      	ldr	r3, [r2, #0]
 8008312:	2101      	movs	r1, #1
 8008314:	430b      	orrs	r3, r1
 8008316:	6013      	str	r3, [r2, #0]
 8008318:	2000      	movs	r0, #0
 800831a:	e000      	b.n	800831e <HAL_TIM_IC_Start_IT+0x122>
    return HAL_ERROR;
 800831c:	2001      	movs	r0, #1
}
 800831e:	bd10      	pop	{r4, pc}
 8008320:	2000      	movs	r0, #0
 8008322:	e7fc      	b.n	800831e <HAL_TIM_IC_Start_IT+0x122>
 8008324:	2000      	movs	r0, #0
 8008326:	e7fa      	b.n	800831e <HAL_TIM_IC_Start_IT+0x122>
 8008328:	0800a02c 	.word	0x0800a02c
 800832c:	0800a070 	.word	0x0800a070
 8008330:	40012c00 	.word	0x40012c00
 8008334:	40000400 	.word	0x40000400
 8008338:	00010007 	.word	0x00010007

0800833c <TIM_ResetCallback>:
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800833c:	4b15      	ldr	r3, [pc, #84]	@ (8008394 <TIM_ResetCallback+0x58>)
 800833e:	2284      	movs	r2, #132	@ 0x84
 8008340:	5083      	str	r3, [r0, r2]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008342:	4b15      	ldr	r3, [pc, #84]	@ (8008398 <TIM_ResetCallback+0x5c>)
 8008344:	3204      	adds	r2, #4
 8008346:	5083      	str	r3, [r0, r2]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008348:	4b14      	ldr	r3, [pc, #80]	@ (800839c <TIM_ResetCallback+0x60>)
 800834a:	3204      	adds	r2, #4
 800834c:	5083      	str	r3, [r0, r2]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800834e:	4b14      	ldr	r3, [pc, #80]	@ (80083a0 <TIM_ResetCallback+0x64>)
 8008350:	3204      	adds	r2, #4
 8008352:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008354:	4b13      	ldr	r3, [pc, #76]	@ (80083a4 <TIM_ResetCallback+0x68>)
 8008356:	3204      	adds	r2, #4
 8008358:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800835a:	4b13      	ldr	r3, [pc, #76]	@ (80083a8 <TIM_ResetCallback+0x6c>)
 800835c:	3204      	adds	r2, #4
 800835e:	5083      	str	r3, [r0, r2]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008360:	4b12      	ldr	r3, [pc, #72]	@ (80083ac <TIM_ResetCallback+0x70>)
 8008362:	3204      	adds	r2, #4
 8008364:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008366:	4b12      	ldr	r3, [pc, #72]	@ (80083b0 <TIM_ResetCallback+0x74>)
 8008368:	3204      	adds	r2, #4
 800836a:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800836c:	4b11      	ldr	r3, [pc, #68]	@ (80083b4 <TIM_ResetCallback+0x78>)
 800836e:	3204      	adds	r2, #4
 8008370:	5083      	str	r3, [r0, r2]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008372:	4b11      	ldr	r3, [pc, #68]	@ (80083b8 <TIM_ResetCallback+0x7c>)
 8008374:	3204      	adds	r2, #4
 8008376:	5083      	str	r3, [r0, r2]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008378:	4b10      	ldr	r3, [pc, #64]	@ (80083bc <TIM_ResetCallback+0x80>)
 800837a:	3204      	adds	r2, #4
 800837c:	5083      	str	r3, [r0, r2]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800837e:	4b10      	ldr	r3, [pc, #64]	@ (80083c0 <TIM_ResetCallback+0x84>)
 8008380:	3204      	adds	r2, #4
 8008382:	5083      	str	r3, [r0, r2]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008384:	4b0f      	ldr	r3, [pc, #60]	@ (80083c4 <TIM_ResetCallback+0x88>)
 8008386:	3204      	adds	r2, #4
 8008388:	5083      	str	r3, [r0, r2]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800838a:	4b0f      	ldr	r3, [pc, #60]	@ (80083c8 <TIM_ResetCallback+0x8c>)
 800838c:	3204      	adds	r2, #4
 800838e:	5083      	str	r3, [r0, r2]
}
 8008390:	4770      	bx	lr
 8008392:	46c0      	nop			@ (mov r8, r8)
 8008394:	0800717f 	.word	0x0800717f
 8008398:	08007181 	.word	0x08007181
 800839c:	0800718d 	.word	0x0800718d
 80083a0:	0800718f 	.word	0x0800718f
 80083a4:	08007185 	.word	0x08007185
 80083a8:	08007187 	.word	0x08007187
 80083ac:	08007183 	.word	0x08007183
 80083b0:	08007189 	.word	0x08007189
 80083b4:	0800718b 	.word	0x0800718b
 80083b8:	08007191 	.word	0x08007191
 80083bc:	080086e9 	.word	0x080086e9
 80083c0:	080086eb 	.word	0x080086eb
 80083c4:	080086ed 	.word	0x080086ed
 80083c8:	080086ef 	.word	0x080086ef

080083cc <HAL_TIM_Base_Init>:
{
 80083cc:	b570      	push	{r4, r5, r6, lr}
 80083ce:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80083d0:	d033      	beq.n	800843a <HAL_TIM_Base_Init+0x6e>
  if (htim->State == HAL_TIM_STATE_RESET)
 80083d2:	233d      	movs	r3, #61	@ 0x3d
 80083d4:	5cc3      	ldrb	r3, [r0, r3]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d020      	beq.n	800841c <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80083da:	253d      	movs	r5, #61	@ 0x3d
 80083dc:	2302      	movs	r3, #2
 80083de:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083e0:	0021      	movs	r1, r4
 80083e2:	c901      	ldmia	r1!, {r0}
 80083e4:	f7ff f9e2 	bl	80077ac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083e8:	2301      	movs	r3, #1
 80083ea:	2248      	movs	r2, #72	@ 0x48
 80083ec:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083ee:	3a0a      	subs	r2, #10
 80083f0:	54a3      	strb	r3, [r4, r2]
 80083f2:	3201      	adds	r2, #1
 80083f4:	54a3      	strb	r3, [r4, r2]
 80083f6:	3201      	adds	r2, #1
 80083f8:	54a3      	strb	r3, [r4, r2]
 80083fa:	3201      	adds	r2, #1
 80083fc:	54a3      	strb	r3, [r4, r2]
 80083fe:	3201      	adds	r2, #1
 8008400:	54a3      	strb	r3, [r4, r2]
 8008402:	3201      	adds	r2, #1
 8008404:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008406:	3201      	adds	r2, #1
 8008408:	54a3      	strb	r3, [r4, r2]
 800840a:	3201      	adds	r2, #1
 800840c:	54a3      	strb	r3, [r4, r2]
 800840e:	3201      	adds	r2, #1
 8008410:	54a3      	strb	r3, [r4, r2]
 8008412:	3201      	adds	r2, #1
 8008414:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8008416:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8008418:	2000      	movs	r0, #0
}
 800841a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800841c:	333c      	adds	r3, #60	@ 0x3c
 800841e:	2200      	movs	r2, #0
 8008420:	54c2      	strb	r2, [r0, r3]
    TIM_ResetCallback(htim);
 8008422:	f7ff ff8b 	bl	800833c <TIM_ResetCallback>
    if (htim->Base_MspInitCallback == NULL)
 8008426:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8008428:	2b00      	cmp	r3, #0
 800842a:	d003      	beq.n	8008434 <HAL_TIM_Base_Init+0x68>
    htim->Base_MspInitCallback(htim);
 800842c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800842e:	0020      	movs	r0, r4
 8008430:	4798      	blx	r3
 8008432:	e7d2      	b.n	80083da <HAL_TIM_Base_Init+0xe>
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008434:	4b02      	ldr	r3, [pc, #8]	@ (8008440 <HAL_TIM_Base_Init+0x74>)
 8008436:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8008438:	e7f8      	b.n	800842c <HAL_TIM_Base_Init+0x60>
    return HAL_ERROR;
 800843a:	2001      	movs	r0, #1
 800843c:	e7ed      	b.n	800841a <HAL_TIM_Base_Init+0x4e>
 800843e:	46c0      	nop			@ (mov r8, r8)
 8008440:	08004685 	.word	0x08004685

08008444 <HAL_TIM_OC_Init>:
{
 8008444:	b570      	push	{r4, r5, r6, lr}
 8008446:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8008448:	d033      	beq.n	80084b2 <HAL_TIM_OC_Init+0x6e>
  if (htim->State == HAL_TIM_STATE_RESET)
 800844a:	233d      	movs	r3, #61	@ 0x3d
 800844c:	5cc3      	ldrb	r3, [r0, r3]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d020      	beq.n	8008494 <HAL_TIM_OC_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8008452:	253d      	movs	r5, #61	@ 0x3d
 8008454:	2302      	movs	r3, #2
 8008456:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008458:	0021      	movs	r1, r4
 800845a:	c901      	ldmia	r1!, {r0}
 800845c:	f7ff f9a6 	bl	80077ac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008460:	2301      	movs	r3, #1
 8008462:	2248      	movs	r2, #72	@ 0x48
 8008464:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008466:	3a0a      	subs	r2, #10
 8008468:	54a3      	strb	r3, [r4, r2]
 800846a:	3201      	adds	r2, #1
 800846c:	54a3      	strb	r3, [r4, r2]
 800846e:	3201      	adds	r2, #1
 8008470:	54a3      	strb	r3, [r4, r2]
 8008472:	3201      	adds	r2, #1
 8008474:	54a3      	strb	r3, [r4, r2]
 8008476:	3201      	adds	r2, #1
 8008478:	54a3      	strb	r3, [r4, r2]
 800847a:	3201      	adds	r2, #1
 800847c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800847e:	3201      	adds	r2, #1
 8008480:	54a3      	strb	r3, [r4, r2]
 8008482:	3201      	adds	r2, #1
 8008484:	54a3      	strb	r3, [r4, r2]
 8008486:	3201      	adds	r2, #1
 8008488:	54a3      	strb	r3, [r4, r2]
 800848a:	3201      	adds	r2, #1
 800848c:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800848e:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8008490:	2000      	movs	r0, #0
}
 8008492:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8008494:	333c      	adds	r3, #60	@ 0x3c
 8008496:	2200      	movs	r2, #0
 8008498:	54c2      	strb	r2, [r0, r3]
    TIM_ResetCallback(htim);
 800849a:	f7ff ff4f 	bl	800833c <TIM_ResetCallback>
    if (htim->OC_MspInitCallback == NULL)
 800849e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d003      	beq.n	80084ac <HAL_TIM_OC_Init+0x68>
    htim->OC_MspInitCallback(htim);
 80084a4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80084a6:	0020      	movs	r0, r4
 80084a8:	4798      	blx	r3
 80084aa:	e7d2      	b.n	8008452 <HAL_TIM_OC_Init+0xe>
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80084ac:	4b02      	ldr	r3, [pc, #8]	@ (80084b8 <HAL_TIM_OC_Init+0x74>)
 80084ae:	65e3      	str	r3, [r4, #92]	@ 0x5c
 80084b0:	e7f8      	b.n	80084a4 <HAL_TIM_OC_Init+0x60>
    return HAL_ERROR;
 80084b2:	2001      	movs	r0, #1
 80084b4:	e7ed      	b.n	8008492 <HAL_TIM_OC_Init+0x4e>
 80084b6:	46c0      	nop			@ (mov r8, r8)
 80084b8:	08007179 	.word	0x08007179

080084bc <HAL_TIM_PWM_Init>:
{
 80084bc:	b570      	push	{r4, r5, r6, lr}
 80084be:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80084c0:	d033      	beq.n	800852a <HAL_TIM_PWM_Init+0x6e>
  if (htim->State == HAL_TIM_STATE_RESET)
 80084c2:	233d      	movs	r3, #61	@ 0x3d
 80084c4:	5cc3      	ldrb	r3, [r0, r3]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d020      	beq.n	800850c <HAL_TIM_PWM_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80084ca:	253d      	movs	r5, #61	@ 0x3d
 80084cc:	2302      	movs	r3, #2
 80084ce:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084d0:	0021      	movs	r1, r4
 80084d2:	c901      	ldmia	r1!, {r0}
 80084d4:	f7ff f96a 	bl	80077ac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084d8:	2301      	movs	r3, #1
 80084da:	2248      	movs	r2, #72	@ 0x48
 80084dc:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084de:	3a0a      	subs	r2, #10
 80084e0:	54a3      	strb	r3, [r4, r2]
 80084e2:	3201      	adds	r2, #1
 80084e4:	54a3      	strb	r3, [r4, r2]
 80084e6:	3201      	adds	r2, #1
 80084e8:	54a3      	strb	r3, [r4, r2]
 80084ea:	3201      	adds	r2, #1
 80084ec:	54a3      	strb	r3, [r4, r2]
 80084ee:	3201      	adds	r2, #1
 80084f0:	54a3      	strb	r3, [r4, r2]
 80084f2:	3201      	adds	r2, #1
 80084f4:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084f6:	3201      	adds	r2, #1
 80084f8:	54a3      	strb	r3, [r4, r2]
 80084fa:	3201      	adds	r2, #1
 80084fc:	54a3      	strb	r3, [r4, r2]
 80084fe:	3201      	adds	r2, #1
 8008500:	54a3      	strb	r3, [r4, r2]
 8008502:	3201      	adds	r2, #1
 8008504:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8008506:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8008508:	2000      	movs	r0, #0
}
 800850a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800850c:	333c      	adds	r3, #60	@ 0x3c
 800850e:	2200      	movs	r2, #0
 8008510:	54c2      	strb	r2, [r0, r3]
    TIM_ResetCallback(htim);
 8008512:	f7ff ff13 	bl	800833c <TIM_ResetCallback>
    if (htim->PWM_MspInitCallback == NULL)
 8008516:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008518:	2b00      	cmp	r3, #0
 800851a:	d003      	beq.n	8008524 <HAL_TIM_PWM_Init+0x68>
    htim->PWM_MspInitCallback(htim);
 800851c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800851e:	0020      	movs	r0, r4
 8008520:	4798      	blx	r3
 8008522:	e7d2      	b.n	80084ca <HAL_TIM_PWM_Init+0xe>
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008524:	4b02      	ldr	r3, [pc, #8]	@ (8008530 <HAL_TIM_PWM_Init+0x74>)
 8008526:	6663      	str	r3, [r4, #100]	@ 0x64
 8008528:	e7f8      	b.n	800851c <HAL_TIM_PWM_Init+0x60>
    return HAL_ERROR;
 800852a:	2001      	movs	r0, #1
 800852c:	e7ed      	b.n	800850a <HAL_TIM_PWM_Init+0x4e>
 800852e:	46c0      	nop			@ (mov r8, r8)
 8008530:	0800717b 	.word	0x0800717b

08008534 <HAL_TIM_IC_Init>:
{
 8008534:	b570      	push	{r4, r5, r6, lr}
 8008536:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8008538:	d033      	beq.n	80085a2 <HAL_TIM_IC_Init+0x6e>
  if (htim->State == HAL_TIM_STATE_RESET)
 800853a:	233d      	movs	r3, #61	@ 0x3d
 800853c:	5cc3      	ldrb	r3, [r0, r3]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d020      	beq.n	8008584 <HAL_TIM_IC_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8008542:	253d      	movs	r5, #61	@ 0x3d
 8008544:	2302      	movs	r3, #2
 8008546:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008548:	0021      	movs	r1, r4
 800854a:	c901      	ldmia	r1!, {r0}
 800854c:	f7ff f92e 	bl	80077ac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008550:	2301      	movs	r3, #1
 8008552:	2248      	movs	r2, #72	@ 0x48
 8008554:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008556:	3a0a      	subs	r2, #10
 8008558:	54a3      	strb	r3, [r4, r2]
 800855a:	3201      	adds	r2, #1
 800855c:	54a3      	strb	r3, [r4, r2]
 800855e:	3201      	adds	r2, #1
 8008560:	54a3      	strb	r3, [r4, r2]
 8008562:	3201      	adds	r2, #1
 8008564:	54a3      	strb	r3, [r4, r2]
 8008566:	3201      	adds	r2, #1
 8008568:	54a3      	strb	r3, [r4, r2]
 800856a:	3201      	adds	r2, #1
 800856c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800856e:	3201      	adds	r2, #1
 8008570:	54a3      	strb	r3, [r4, r2]
 8008572:	3201      	adds	r2, #1
 8008574:	54a3      	strb	r3, [r4, r2]
 8008576:	3201      	adds	r2, #1
 8008578:	54a3      	strb	r3, [r4, r2]
 800857a:	3201      	adds	r2, #1
 800857c:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800857e:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8008580:	2000      	movs	r0, #0
}
 8008582:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8008584:	333c      	adds	r3, #60	@ 0x3c
 8008586:	2200      	movs	r2, #0
 8008588:	54c2      	strb	r2, [r0, r3]
    TIM_ResetCallback(htim);
 800858a:	f7ff fed7 	bl	800833c <TIM_ResetCallback>
    if (htim->IC_MspInitCallback == NULL)
 800858e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008590:	2b00      	cmp	r3, #0
 8008592:	d003      	beq.n	800859c <HAL_TIM_IC_Init+0x68>
    htim->IC_MspInitCallback(htim);
 8008594:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008596:	0020      	movs	r0, r4
 8008598:	4798      	blx	r3
 800859a:	e7d2      	b.n	8008542 <HAL_TIM_IC_Init+0xe>
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 800859c:	4b02      	ldr	r3, [pc, #8]	@ (80085a8 <HAL_TIM_IC_Init+0x74>)
 800859e:	6563      	str	r3, [r4, #84]	@ 0x54
 80085a0:	e7f8      	b.n	8008594 <HAL_TIM_IC_Init+0x60>
    return HAL_ERROR;
 80085a2:	2001      	movs	r0, #1
 80085a4:	e7ed      	b.n	8008582 <HAL_TIM_IC_Init+0x4e>
 80085a6:	46c0      	nop			@ (mov r8, r8)
 80085a8:	0800717d 	.word	0x0800717d

080085ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085ac:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ae:	233c      	movs	r3, #60	@ 0x3c
 80085b0:	5cc3      	ldrb	r3, [r0, r3]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d02d      	beq.n	8008612 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80085b6:	233c      	movs	r3, #60	@ 0x3c
 80085b8:	2201      	movs	r2, #1
 80085ba:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085bc:	3301      	adds	r3, #1
 80085be:	3201      	adds	r2, #1
 80085c0:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085c2:	6802      	ldr	r2, [r0, #0]
 80085c4:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085c6:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085c8:	4d13      	ldr	r5, [pc, #76]	@ (8008618 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80085ca:	42aa      	cmp	r2, r5
 80085cc:	d01c      	beq.n	8008608 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085ce:	2570      	movs	r5, #112	@ 0x70
 80085d0:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085d2:	680d      	ldr	r5, [r1, #0]
 80085d4:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085d6:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085d8:	6803      	ldr	r3, [r0, #0]
 80085da:	4a0f      	ldr	r2, [pc, #60]	@ (8008618 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d006      	beq.n	80085ee <HAL_TIMEx_MasterConfigSynchronization+0x42>
 80085e0:	2280      	movs	r2, #128	@ 0x80
 80085e2:	05d2      	lsls	r2, r2, #23
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d002      	beq.n	80085ee <HAL_TIMEx_MasterConfigSynchronization+0x42>
 80085e8:	4a0c      	ldr	r2, [pc, #48]	@ (800861c <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d104      	bne.n	80085f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085ee:	2280      	movs	r2, #128	@ 0x80
 80085f0:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085f2:	688a      	ldr	r2, [r1, #8]
 80085f4:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085f6:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085f8:	233d      	movs	r3, #61	@ 0x3d
 80085fa:	2201      	movs	r2, #1
 80085fc:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80085fe:	3b01      	subs	r3, #1
 8008600:	2200      	movs	r2, #0
 8008602:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8008604:	2000      	movs	r0, #0
}
 8008606:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008608:	4d05      	ldr	r5, [pc, #20]	@ (8008620 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 800860a:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800860c:	684d      	ldr	r5, [r1, #4]
 800860e:	432b      	orrs	r3, r5
 8008610:	e7dd      	b.n	80085ce <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8008612:	2002      	movs	r0, #2
 8008614:	e7f7      	b.n	8008606 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8008616:	46c0      	nop			@ (mov r8, r8)
 8008618:	40012c00 	.word	0x40012c00
 800861c:	40000400 	.word	0x40000400
 8008620:	ff0fffff 	.word	0xff0fffff

08008624 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008624:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008626:	233c      	movs	r3, #60	@ 0x3c
 8008628:	5cc3      	ldrb	r3, [r0, r3]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d040      	beq.n	80086b0 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 800862e:	233c      	movs	r3, #60	@ 0x3c
 8008630:	2201      	movs	r2, #1
 8008632:	54c2      	strb	r2, [r0, r3]
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008634:	68cb      	ldr	r3, [r1, #12]
 8008636:	4a1f      	ldr	r2, [pc, #124]	@ (80086b4 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8008638:	4013      	ands	r3, r2
 800863a:	688a      	ldr	r2, [r1, #8]
 800863c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800863e:	4a1e      	ldr	r2, [pc, #120]	@ (80086b8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8008640:	4013      	ands	r3, r2
 8008642:	684a      	ldr	r2, [r1, #4]
 8008644:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008646:	4a1d      	ldr	r2, [pc, #116]	@ (80086bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8008648:	4013      	ands	r3, r2
 800864a:	680a      	ldr	r2, [r1, #0]
 800864c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800864e:	4a1c      	ldr	r2, [pc, #112]	@ (80086c0 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8008650:	4013      	ands	r3, r2
 8008652:	690a      	ldr	r2, [r1, #16]
 8008654:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008656:	4a1b      	ldr	r2, [pc, #108]	@ (80086c4 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8008658:	4013      	ands	r3, r2
 800865a:	694a      	ldr	r2, [r1, #20]
 800865c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800865e:	4a1a      	ldr	r2, [pc, #104]	@ (80086c8 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8008660:	4013      	ands	r3, r2
 8008662:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8008664:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008666:	4a19      	ldr	r2, [pc, #100]	@ (80086cc <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8008668:	4013      	ands	r3, r2
 800866a:	698a      	ldr	r2, [r1, #24]
 800866c:	0412      	lsls	r2, r2, #16
 800866e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008670:	4a17      	ldr	r2, [pc, #92]	@ (80086d0 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8008672:	4013      	ands	r3, r2
 8008674:	69ca      	ldr	r2, [r1, #28]
 8008676:	4313      	orrs	r3, r2

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008678:	6804      	ldr	r4, [r0, #0]
 800867a:	4a16      	ldr	r2, [pc, #88]	@ (80086d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800867c:	4294      	cmp	r4, r2
 800867e:	d005      	beq.n	800868c <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008680:	6463      	str	r3, [r4, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008682:	233c      	movs	r3, #60	@ 0x3c
 8008684:	2200      	movs	r2, #0
 8008686:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8008688:	2000      	movs	r0, #0
}
 800868a:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800868c:	4a12      	ldr	r2, [pc, #72]	@ (80086d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800868e:	4013      	ands	r3, r2
 8008690:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8008692:	0512      	lsls	r2, r2, #20
 8008694:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008696:	4b11      	ldr	r3, [pc, #68]	@ (80086dc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8008698:	401a      	ands	r2, r3
 800869a:	6a0b      	ldr	r3, [r1, #32]
 800869c:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800869e:	4b10      	ldr	r3, [pc, #64]	@ (80086e0 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 80086a0:	401a      	ands	r2, r3
 80086a2:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80086a4:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80086a6:	4b0f      	ldr	r3, [pc, #60]	@ (80086e4 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 80086a8:	401a      	ands	r2, r3
 80086aa:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80086ac:	4313      	orrs	r3, r2
 80086ae:	e7e7      	b.n	8008680 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
  __HAL_LOCK(htim);
 80086b0:	2002      	movs	r0, #2
 80086b2:	e7ea      	b.n	800868a <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 80086b4:	fffffcff 	.word	0xfffffcff
 80086b8:	fffffbff 	.word	0xfffffbff
 80086bc:	fffff7ff 	.word	0xfffff7ff
 80086c0:	ffffefff 	.word	0xffffefff
 80086c4:	ffffdfff 	.word	0xffffdfff
 80086c8:	ffffbfff 	.word	0xffffbfff
 80086cc:	fff0ffff 	.word	0xfff0ffff
 80086d0:	efffffff 	.word	0xefffffff
 80086d4:	40012c00 	.word	0x40012c00
 80086d8:	ff0fffff 	.word	0xff0fffff
 80086dc:	feffffff 	.word	0xfeffffff
 80086e0:	fdffffff 	.word	0xfdffffff
 80086e4:	dfffffff 	.word	0xdfffffff

080086e8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086e8:	4770      	bx	lr

080086ea <HAL_TIMEx_CommutHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80086ea:	4770      	bx	lr

080086ec <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086ec:	4770      	bx	lr

080086ee <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80086ee:	4770      	bx	lr

080086f0 <HAL_UART_TxCpltCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80086f0:	4770      	bx	lr

080086f2 <HAL_UART_TxHalfCpltCallback>:
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80086f2:	4770      	bx	lr

080086f4 <HAL_UART_RxCpltCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80086f4:	4770      	bx	lr

080086f6 <HAL_UART_RxHalfCpltCallback>:
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80086f6:	4770      	bx	lr

080086f8 <HAL_UART_ErrorCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086f8:	4770      	bx	lr

080086fa <HAL_UART_AbortCpltCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80086fa:	4770      	bx	lr

080086fc <HAL_UART_AbortTransmitCpltCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80086fc:	4770      	bx	lr

080086fe <HAL_UART_AbortReceiveCpltCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80086fe:	4770      	bx	lr

08008700 <HAL_UARTEx_RxEventCallback>:
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008700:	4770      	bx	lr
	...

08008704 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008704:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008706:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800870a:	2201      	movs	r2, #1
 800870c:	f382 8810 	msr	PRIMASK, r2
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008710:	6801      	ldr	r1, [r0, #0]
 8008712:	680b      	ldr	r3, [r1, #0]
 8008714:	25c0      	movs	r5, #192	@ 0xc0
 8008716:	43ab      	bics	r3, r5
 8008718:	600b      	str	r3, [r1, #0]
 800871a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800871e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008722:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008726:	6802      	ldr	r2, [r0, #0]
 8008728:	6893      	ldr	r3, [r2, #8]
 800872a:	4c04      	ldr	r4, [pc, #16]	@ (800873c <UART_EndTxTransfer+0x38>)
 800872c:	4023      	ands	r3, r4
 800872e:	6093      	str	r3, [r2, #8]
 8008730:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008734:	2388      	movs	r3, #136	@ 0x88
 8008736:	2220      	movs	r2, #32
 8008738:	50c2      	str	r2, [r0, r3]
}
 800873a:	bd30      	pop	{r4, r5, pc}
 800873c:	ff7fffff 	.word	0xff7fffff

08008740 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008740:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008742:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008746:	2201      	movs	r2, #1
 8008748:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800874c:	6801      	ldr	r1, [r0, #0]
 800874e:	680b      	ldr	r3, [r1, #0]
 8008750:	4d12      	ldr	r5, [pc, #72]	@ (800879c <UART_EndRxTransfer+0x5c>)
 8008752:	402b      	ands	r3, r5
 8008754:	600b      	str	r3, [r1, #0]
 8008756:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800875a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800875e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008762:	6802      	ldr	r2, [r0, #0]
 8008764:	6893      	ldr	r3, [r2, #8]
 8008766:	4c0e      	ldr	r4, [pc, #56]	@ (80087a0 <UART_EndRxTransfer+0x60>)
 8008768:	4023      	ands	r3, r4
 800876a:	6093      	str	r3, [r2, #8]
 800876c:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008770:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8008772:	2b01      	cmp	r3, #1
 8008774:	d006      	beq.n	8008784 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008776:	238c      	movs	r3, #140	@ 0x8c
 8008778:	2220      	movs	r2, #32
 800877a:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800877c:	2300      	movs	r3, #0
 800877e:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008780:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8008782:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008784:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008788:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800878c:	6802      	ldr	r2, [r0, #0]
 800878e:	6813      	ldr	r3, [r2, #0]
 8008790:	2410      	movs	r4, #16
 8008792:	43a3      	bics	r3, r4
 8008794:	6013      	str	r3, [r2, #0]
 8008796:	f381 8810 	msr	PRIMASK, r1
}
 800879a:	e7ec      	b.n	8008776 <UART_EndRxTransfer+0x36>
 800879c:	fffffedf 	.word	0xfffffedf
 80087a0:	effffffe 	.word	0xeffffffe

080087a4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80087a4:	b570      	push	{r4, r5, r6, lr}
 80087a6:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087a8:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	069b      	lsls	r3, r3, #26
 80087b0:	d429      	bmi.n	8008806 <UART_DMAReceiveCplt+0x62>
  {
    huart->RxXferCount = 0U;
 80087b2:	235e      	movs	r3, #94	@ 0x5e
 80087b4:	2200      	movs	r2, #0
 80087b6:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087b8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087bc:	3b5d      	subs	r3, #93	@ 0x5d
 80087be:	f383 8810 	msr	PRIMASK, r3

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087c2:	6801      	ldr	r1, [r0, #0]
 80087c4:	680a      	ldr	r2, [r1, #0]
 80087c6:	4d1d      	ldr	r5, [pc, #116]	@ (800883c <UART_DMAReceiveCplt+0x98>)
 80087c8:	402a      	ands	r2, r5
 80087ca:	600a      	str	r2, [r1, #0]
 80087cc:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087d0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087d4:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d8:	6801      	ldr	r1, [r0, #0]
 80087da:	688a      	ldr	r2, [r1, #8]
 80087dc:	439a      	bics	r2, r3
 80087de:	608a      	str	r2, [r1, #8]
 80087e0:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087e4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087e8:	f383 8810 	msr	PRIMASK, r3

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ec:	6802      	ldr	r2, [r0, #0]
 80087ee:	6893      	ldr	r3, [r2, #8]
 80087f0:	2440      	movs	r4, #64	@ 0x40
 80087f2:	43a3      	bics	r3, r4
 80087f4:	6093      	str	r3, [r2, #8]
 80087f6:	f381 8810 	msr	PRIMASK, r1

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80087fa:	238c      	movs	r3, #140	@ 0x8c
 80087fc:	2220      	movs	r2, #32
 80087fe:	50c2      	str	r2, [r0, r3]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008800:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8008802:	2b01      	cmp	r3, #1
 8008804:	d008      	beq.n	8008818 <UART_DMAReceiveCplt+0x74>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008806:	2300      	movs	r3, #0
 8008808:	6703      	str	r3, [r0, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800880a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800880c:	2b01      	cmp	r3, #1
 800880e:	d00f      	beq.n	8008830 <UART_DMAReceiveCplt+0x8c>
  else
  {
    /* In other cases : use Rx Complete callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx complete callback*/
    huart->RxCpltCallback(huart);
 8008810:	23a0      	movs	r3, #160	@ 0xa0
 8008812:	58c3      	ldr	r3, [r0, r3]
 8008814:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008816:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008818:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800881c:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008820:	6802      	ldr	r2, [r0, #0]
 8008822:	6813      	ldr	r3, [r2, #0]
 8008824:	3c30      	subs	r4, #48	@ 0x30
 8008826:	43a3      	bics	r3, r4
 8008828:	6013      	str	r3, [r2, #0]
 800882a:	f381 8810 	msr	PRIMASK, r1
}
 800882e:	e7ea      	b.n	8008806 <UART_DMAReceiveCplt+0x62>
    huart->RxEventCallback(huart, huart->RxXferSize);
 8008830:	335b      	adds	r3, #91	@ 0x5b
 8008832:	5ac1      	ldrh	r1, [r0, r3]
 8008834:	3364      	adds	r3, #100	@ 0x64
 8008836:	58c3      	ldr	r3, [r0, r3]
 8008838:	4798      	blx	r3
 800883a:	e7ec      	b.n	8008816 <UART_DMAReceiveCplt+0x72>
 800883c:	fffffeff 	.word	0xfffffeff

08008840 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008840:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008842:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008844:	2301      	movs	r3, #1
 8008846:	6703      	str	r3, [r0, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008848:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800884a:	2b01      	cmp	r3, #1
 800884c:	d003      	beq.n	8008856 <UART_DMARxHalfCplt+0x16>
  else
  {
    /* In other cases : use Rx Half Complete callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Half complete callback*/
    huart->RxHalfCpltCallback(huart);
 800884e:	239c      	movs	r3, #156	@ 0x9c
 8008850:	58c3      	ldr	r3, [r0, r3]
 8008852:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008854:	bd10      	pop	{r4, pc}
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8008856:	335b      	adds	r3, #91	@ 0x5b
 8008858:	5ac1      	ldrh	r1, [r0, r3]
 800885a:	0849      	lsrs	r1, r1, #1
 800885c:	3364      	adds	r3, #100	@ 0x64
 800885e:	58c3      	ldr	r3, [r0, r3]
 8008860:	4798      	blx	r3
 8008862:	e7f7      	b.n	8008854 <UART_DMARxHalfCplt+0x14>

08008864 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008864:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008866:	6a84      	ldr	r4, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008868:	2388      	movs	r3, #136	@ 0x88
 800886a:	58e2      	ldr	r2, [r4, r3]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800886c:	3304      	adds	r3, #4
 800886e:	58e5      	ldr	r5, [r4, r3]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	061b      	lsls	r3, r3, #24
 8008876:	d501      	bpl.n	800887c <UART_DMAError+0x18>
 8008878:	2a21      	cmp	r2, #33	@ 0x21
 800887a:	d00f      	beq.n	800889c <UART_DMAError+0x38>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	065b      	lsls	r3, r3, #25
 8008882:	d501      	bpl.n	8008888 <UART_DMAError+0x24>
 8008884:	2d22      	cmp	r5, #34	@ 0x22
 8008886:	d010      	beq.n	80088aa <UART_DMAError+0x46>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008888:	2290      	movs	r2, #144	@ 0x90
 800888a:	58a3      	ldr	r3, [r4, r2]
 800888c:	2110      	movs	r1, #16
 800888e:	430b      	orrs	r3, r1
 8008890:	50a3      	str	r3, [r4, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008892:	23a4      	movs	r3, #164	@ 0xa4
 8008894:	58e3      	ldr	r3, [r4, r3]
 8008896:	0020      	movs	r0, r4
 8008898:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800889a:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 800889c:	2356      	movs	r3, #86	@ 0x56
 800889e:	2200      	movs	r2, #0
 80088a0:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 80088a2:	0020      	movs	r0, r4
 80088a4:	f7ff ff2e 	bl	8008704 <UART_EndTxTransfer>
 80088a8:	e7e8      	b.n	800887c <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 80088aa:	235e      	movs	r3, #94	@ 0x5e
 80088ac:	2200      	movs	r2, #0
 80088ae:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 80088b0:	0020      	movs	r0, r4
 80088b2:	f7ff ff45 	bl	8008740 <UART_EndRxTransfer>
 80088b6:	e7e7      	b.n	8008888 <UART_DMAError+0x24>

080088b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088b8:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088ba:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 80088bc:	2300      	movs	r3, #0
 80088be:	225e      	movs	r2, #94	@ 0x5e
 80088c0:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 80088c2:	3a08      	subs	r2, #8
 80088c4:	5283      	strh	r3, [r0, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80088c6:	33a4      	adds	r3, #164	@ 0xa4
 80088c8:	58c3      	ldr	r3, [r0, r3]
 80088ca:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088cc:	bd10      	pop	{r4, pc}
	...

080088d0 <HAL_UART_RegisterCallback>:
{
 80088d0:	b510      	push	{r4, lr}
  if (pCallback == NULL)
 80088d2:	2a00      	cmp	r2, #0
 80088d4:	d012      	beq.n	80088fc <HAL_UART_RegisterCallback+0x2c>
  if (huart->gState == HAL_UART_STATE_READY)
 80088d6:	2388      	movs	r3, #136	@ 0x88
 80088d8:	58c3      	ldr	r3, [r0, r3]
 80088da:	2b20      	cmp	r3, #32
 80088dc:	d015      	beq.n	800890a <HAL_UART_RegisterCallback+0x3a>
  else if (huart->gState == HAL_UART_STATE_RESET)
 80088de:	2388      	movs	r3, #136	@ 0x88
 80088e0:	58c3      	ldr	r3, [r0, r3]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d15a      	bne.n	800899c <HAL_UART_RegisterCallback+0xcc>
    switch (CallbackID)
 80088e6:	290b      	cmp	r1, #11
 80088e8:	d050      	beq.n	800898c <HAL_UART_RegisterCallback+0xbc>
 80088ea:	290c      	cmp	r1, #12
 80088ec:	d052      	beq.n	8008994 <HAL_UART_RegisterCallback+0xc4>
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80088ee:	2290      	movs	r2, #144	@ 0x90
 80088f0:	5883      	ldr	r3, [r0, r2]
 80088f2:	2140      	movs	r1, #64	@ 0x40
 80088f4:	430b      	orrs	r3, r1
 80088f6:	5083      	str	r3, [r0, r2]
        status =  HAL_ERROR;
 80088f8:	2001      	movs	r0, #1
        break;
 80088fa:	e055      	b.n	80089a8 <HAL_UART_RegisterCallback+0xd8>
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80088fc:	3290      	adds	r2, #144	@ 0x90
 80088fe:	5883      	ldr	r3, [r0, r2]
 8008900:	2140      	movs	r1, #64	@ 0x40
 8008902:	430b      	orrs	r3, r1
 8008904:	5083      	str	r3, [r0, r2]
    return HAL_ERROR;
 8008906:	2001      	movs	r0, #1
 8008908:	e04e      	b.n	80089a8 <HAL_UART_RegisterCallback+0xd8>
    switch (CallbackID)
 800890a:	290c      	cmp	r1, #12
 800890c:	d837      	bhi.n	800897e <HAL_UART_RegisterCallback+0xae>
 800890e:	008b      	lsls	r3, r1, #2
 8008910:	4c26      	ldr	r4, [pc, #152]	@ (80089ac <HAL_UART_RegisterCallback+0xdc>)
 8008912:	58e3      	ldr	r3, [r4, r3]
 8008914:	469f      	mov	pc, r3
        huart->TxHalfCpltCallback = pCallback;
 8008916:	2394      	movs	r3, #148	@ 0x94
 8008918:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 800891a:	0008      	movs	r0, r1
        break;
 800891c:	e044      	b.n	80089a8 <HAL_UART_RegisterCallback+0xd8>
        huart->TxCpltCallback = pCallback;
 800891e:	2398      	movs	r3, #152	@ 0x98
 8008920:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8008922:	2000      	movs	r0, #0
        break;
 8008924:	e040      	b.n	80089a8 <HAL_UART_RegisterCallback+0xd8>
        huart->RxHalfCpltCallback = pCallback;
 8008926:	239c      	movs	r3, #156	@ 0x9c
 8008928:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 800892a:	2000      	movs	r0, #0
        break;
 800892c:	e03c      	b.n	80089a8 <HAL_UART_RegisterCallback+0xd8>
        huart->RxCpltCallback = pCallback;
 800892e:	23a0      	movs	r3, #160	@ 0xa0
 8008930:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8008932:	2000      	movs	r0, #0
        break;
 8008934:	e038      	b.n	80089a8 <HAL_UART_RegisterCallback+0xd8>
        huart->ErrorCallback = pCallback;
 8008936:	23a4      	movs	r3, #164	@ 0xa4
 8008938:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 800893a:	2000      	movs	r0, #0
        break;
 800893c:	e034      	b.n	80089a8 <HAL_UART_RegisterCallback+0xd8>
        huart->AbortCpltCallback = pCallback;
 800893e:	23a8      	movs	r3, #168	@ 0xa8
 8008940:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8008942:	2000      	movs	r0, #0
        break;
 8008944:	e030      	b.n	80089a8 <HAL_UART_RegisterCallback+0xd8>
        huart->AbortTransmitCpltCallback = pCallback;
 8008946:	23ac      	movs	r3, #172	@ 0xac
 8008948:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 800894a:	2000      	movs	r0, #0
        break;
 800894c:	e02c      	b.n	80089a8 <HAL_UART_RegisterCallback+0xd8>
        huart->AbortReceiveCpltCallback = pCallback;
 800894e:	23b0      	movs	r3, #176	@ 0xb0
 8008950:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8008952:	2000      	movs	r0, #0
        break;
 8008954:	e028      	b.n	80089a8 <HAL_UART_RegisterCallback+0xd8>
        huart->WakeupCallback = pCallback;
 8008956:	23b4      	movs	r3, #180	@ 0xb4
 8008958:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 800895a:	2000      	movs	r0, #0
        break;
 800895c:	e024      	b.n	80089a8 <HAL_UART_RegisterCallback+0xd8>
        huart->RxFifoFullCallback = pCallback;
 800895e:	23b8      	movs	r3, #184	@ 0xb8
 8008960:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8008962:	2000      	movs	r0, #0
        break;
 8008964:	e020      	b.n	80089a8 <HAL_UART_RegisterCallback+0xd8>
        huart->TxFifoEmptyCallback = pCallback;
 8008966:	23bc      	movs	r3, #188	@ 0xbc
 8008968:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 800896a:	2000      	movs	r0, #0
        break;
 800896c:	e01c      	b.n	80089a8 <HAL_UART_RegisterCallback+0xd8>
        huart->MspInitCallback = pCallback;
 800896e:	23c4      	movs	r3, #196	@ 0xc4
 8008970:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8008972:	2000      	movs	r0, #0
        break;
 8008974:	e018      	b.n	80089a8 <HAL_UART_RegisterCallback+0xd8>
        huart->MspDeInitCallback = pCallback;
 8008976:	23c8      	movs	r3, #200	@ 0xc8
 8008978:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 800897a:	2000      	movs	r0, #0
        break;
 800897c:	e014      	b.n	80089a8 <HAL_UART_RegisterCallback+0xd8>
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800897e:	2290      	movs	r2, #144	@ 0x90
 8008980:	5883      	ldr	r3, [r0, r2]
 8008982:	2140      	movs	r1, #64	@ 0x40
 8008984:	430b      	orrs	r3, r1
 8008986:	5083      	str	r3, [r0, r2]
        status =  HAL_ERROR;
 8008988:	2001      	movs	r0, #1
        break;
 800898a:	e00d      	b.n	80089a8 <HAL_UART_RegisterCallback+0xd8>
        huart->MspInitCallback = pCallback;
 800898c:	23c4      	movs	r3, #196	@ 0xc4
 800898e:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8008990:	2000      	movs	r0, #0
        break;
 8008992:	e009      	b.n	80089a8 <HAL_UART_RegisterCallback+0xd8>
        huart->MspDeInitCallback = pCallback;
 8008994:	23c8      	movs	r3, #200	@ 0xc8
 8008996:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8008998:	2000      	movs	r0, #0
        break;
 800899a:	e005      	b.n	80089a8 <HAL_UART_RegisterCallback+0xd8>
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800899c:	2290      	movs	r2, #144	@ 0x90
 800899e:	5883      	ldr	r3, [r0, r2]
 80089a0:	2140      	movs	r1, #64	@ 0x40
 80089a2:	430b      	orrs	r3, r1
 80089a4:	5083      	str	r3, [r0, r2]
    status =  HAL_ERROR;
 80089a6:	2001      	movs	r0, #1
}
 80089a8:	bd10      	pop	{r4, pc}
 80089aa:	46c0      	nop			@ (mov r8, r8)
 80089ac:	0800a0b4 	.word	0x0800a0b4

080089b0 <HAL_UART_IRQHandler>:
{
 80089b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b2:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80089b4:	6802      	ldr	r2, [r0, #0]
 80089b6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089b8:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089ba:	6895      	ldr	r5, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80089bc:	49c0      	ldr	r1, [pc, #768]	@ (8008cc0 <HAL_UART_IRQHandler+0x310>)
  if (errorflags == 0U)
 80089be:	420b      	tst	r3, r1
 80089c0:	d10e      	bne.n	80089e0 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80089c2:	0699      	lsls	r1, r3, #26
 80089c4:	d512      	bpl.n	80089ec <HAL_UART_IRQHandler+0x3c>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80089c6:	2120      	movs	r1, #32
 80089c8:	4001      	ands	r1, r0
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80089ca:	2680      	movs	r6, #128	@ 0x80
 80089cc:	0576      	lsls	r6, r6, #21
 80089ce:	402e      	ands	r6, r5
 80089d0:	4331      	orrs	r1, r6
 80089d2:	d00b      	beq.n	80089ec <HAL_UART_IRQHandler+0x3c>
      if (huart->RxISR != NULL)
 80089d4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d001      	beq.n	80089de <HAL_UART_IRQHandler+0x2e>
        huart->RxISR(huart);
 80089da:	0020      	movs	r0, r4
 80089dc:	4798      	blx	r3
}
 80089de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80089e0:	4eb8      	ldr	r6, [pc, #736]	@ (8008cc4 <HAL_UART_IRQHandler+0x314>)
 80089e2:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80089e4:	49b8      	ldr	r1, [pc, #736]	@ (8008cc8 <HAL_UART_IRQHandler+0x318>)
 80089e6:	4001      	ands	r1, r0
 80089e8:	4331      	orrs	r1, r6
 80089ea:	d125      	bne.n	8008a38 <HAL_UART_IRQHandler+0x88>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089ec:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 80089ee:	2901      	cmp	r1, #1
 80089f0:	d100      	bne.n	80089f4 <HAL_UART_IRQHandler+0x44>
 80089f2:	e0b4      	b.n	8008b5e <HAL_UART_IRQHandler+0x1ae>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80089f4:	02d9      	lsls	r1, r3, #11
 80089f6:	d502      	bpl.n	80089fe <HAL_UART_IRQHandler+0x4e>
 80089f8:	0269      	lsls	r1, r5, #9
 80089fa:	d500      	bpl.n	80089fe <HAL_UART_IRQHandler+0x4e>
 80089fc:	e150      	b.n	8008ca0 <HAL_UART_IRQHandler+0x2f0>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80089fe:	061a      	lsls	r2, r3, #24
 8008a00:	d507      	bpl.n	8008a12 <HAL_UART_IRQHandler+0x62>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008a02:	2280      	movs	r2, #128	@ 0x80
 8008a04:	4002      	ands	r2, r0
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008a06:	2180      	movs	r1, #128	@ 0x80
 8008a08:	0409      	lsls	r1, r1, #16
 8008a0a:	400d      	ands	r5, r1
 8008a0c:	432a      	orrs	r2, r5
 8008a0e:	d000      	beq.n	8008a12 <HAL_UART_IRQHandler+0x62>
 8008a10:	e14e      	b.n	8008cb0 <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a12:	065a      	lsls	r2, r3, #25
 8008a14:	d502      	bpl.n	8008a1c <HAL_UART_IRQHandler+0x6c>
 8008a16:	0642      	lsls	r2, r0, #25
 8008a18:	d500      	bpl.n	8008a1c <HAL_UART_IRQHandler+0x6c>
 8008a1a:	e15f      	b.n	8008cdc <HAL_UART_IRQHandler+0x32c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008a1c:	021a      	lsls	r2, r3, #8
 8008a1e:	d502      	bpl.n	8008a26 <HAL_UART_IRQHandler+0x76>
 8008a20:	0042      	lsls	r2, r0, #1
 8008a22:	d500      	bpl.n	8008a26 <HAL_UART_IRQHandler+0x76>
 8008a24:	e170      	b.n	8008d08 <HAL_UART_IRQHandler+0x358>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008a26:	01db      	lsls	r3, r3, #7
 8008a28:	d5d9      	bpl.n	80089de <HAL_UART_IRQHandler+0x2e>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	dad7      	bge.n	80089de <HAL_UART_IRQHandler+0x2e>
    huart->RxFifoFullCallback(huart);
 8008a2e:	23b8      	movs	r3, #184	@ 0xb8
 8008a30:	58e3      	ldr	r3, [r4, r3]
 8008a32:	0020      	movs	r0, r4
 8008a34:	4798      	blx	r3
    return;
 8008a36:	e7d2      	b.n	80089de <HAL_UART_IRQHandler+0x2e>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a38:	07d9      	lsls	r1, r3, #31
 8008a3a:	d507      	bpl.n	8008a4c <HAL_UART_IRQHandler+0x9c>
 8008a3c:	05c1      	lsls	r1, r0, #23
 8008a3e:	d505      	bpl.n	8008a4c <HAL_UART_IRQHandler+0x9c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a40:	2701      	movs	r7, #1
 8008a42:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a44:	2190      	movs	r1, #144	@ 0x90
 8008a46:	5862      	ldr	r2, [r4, r1]
 8008a48:	433a      	orrs	r2, r7
 8008a4a:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a4c:	079a      	lsls	r2, r3, #30
 8008a4e:	d56f      	bpl.n	8008b30 <HAL_UART_IRQHandler+0x180>
 8008a50:	07ea      	lsls	r2, r5, #31
 8008a52:	d511      	bpl.n	8008a78 <HAL_UART_IRQHandler+0xc8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a54:	6822      	ldr	r2, [r4, #0]
 8008a56:	2102      	movs	r1, #2
 8008a58:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a5a:	2790      	movs	r7, #144	@ 0x90
 8008a5c:	59e2      	ldr	r2, [r4, r7]
 8008a5e:	3102      	adds	r1, #2
 8008a60:	430a      	orrs	r2, r1
 8008a62:	51e2      	str	r2, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a64:	4219      	tst	r1, r3
 8008a66:	d007      	beq.n	8008a78 <HAL_UART_IRQHandler+0xc8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a68:	6822      	ldr	r2, [r4, #0]
 8008a6a:	2104      	movs	r1, #4
 8008a6c:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a6e:	318c      	adds	r1, #140	@ 0x8c
 8008a70:	5862      	ldr	r2, [r4, r1]
 8008a72:	2702      	movs	r7, #2
 8008a74:	433a      	orrs	r2, r7
 8008a76:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008a78:	071a      	lsls	r2, r3, #28
 8008a7a:	d50a      	bpl.n	8008a92 <HAL_UART_IRQHandler+0xe2>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	4002      	ands	r2, r0
 8008a80:	4332      	orrs	r2, r6
 8008a82:	d006      	beq.n	8008a92 <HAL_UART_IRQHandler+0xe2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a84:	6822      	ldr	r2, [r4, #0]
 8008a86:	2608      	movs	r6, #8
 8008a88:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a8a:	2190      	movs	r1, #144	@ 0x90
 8008a8c:	5862      	ldr	r2, [r4, r1]
 8008a8e:	4332      	orrs	r2, r6
 8008a90:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008a92:	051a      	lsls	r2, r3, #20
 8008a94:	d50a      	bpl.n	8008aac <HAL_UART_IRQHandler+0xfc>
 8008a96:	0142      	lsls	r2, r0, #5
 8008a98:	d508      	bpl.n	8008aac <HAL_UART_IRQHandler+0xfc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a9a:	6822      	ldr	r2, [r4, #0]
 8008a9c:	2180      	movs	r1, #128	@ 0x80
 8008a9e:	0109      	lsls	r1, r1, #4
 8008aa0:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008aa2:	2190      	movs	r1, #144	@ 0x90
 8008aa4:	5862      	ldr	r2, [r4, r1]
 8008aa6:	2620      	movs	r6, #32
 8008aa8:	4332      	orrs	r2, r6
 8008aaa:	5062      	str	r2, [r4, r1]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008aac:	2290      	movs	r2, #144	@ 0x90
 8008aae:	58a2      	ldr	r2, [r4, r2]
 8008ab0:	2a00      	cmp	r2, #0
 8008ab2:	d100      	bne.n	8008ab6 <HAL_UART_IRQHandler+0x106>
 8008ab4:	e793      	b.n	80089de <HAL_UART_IRQHandler+0x2e>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ab6:	069b      	lsls	r3, r3, #26
 8008ab8:	d50b      	bpl.n	8008ad2 <HAL_UART_IRQHandler+0x122>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008aba:	2320      	movs	r3, #32
 8008abc:	4003      	ands	r3, r0
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008abe:	2280      	movs	r2, #128	@ 0x80
 8008ac0:	0552      	lsls	r2, r2, #21
 8008ac2:	402a      	ands	r2, r5
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	d004      	beq.n	8008ad2 <HAL_UART_IRQHandler+0x122>
        if (huart->RxISR != NULL)
 8008ac8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <HAL_UART_IRQHandler+0x122>
          huart->RxISR(huart);
 8008ace:	0020      	movs	r0, r4
 8008ad0:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8008ad2:	2390      	movs	r3, #144	@ 0x90
 8008ad4:	58e1      	ldr	r1, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	689a      	ldr	r2, [r3, #8]
 8008ada:	2340      	movs	r3, #64	@ 0x40
 8008adc:	4013      	ands	r3, r2
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008ade:	2228      	movs	r2, #40	@ 0x28
 8008ae0:	400a      	ands	r2, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	d033      	beq.n	8008b4e <HAL_UART_IRQHandler+0x19e>
        UART_EndRxTransfer(huart);
 8008ae6:	0020      	movs	r0, r4
 8008ae8:	f7ff fe2a 	bl	8008740 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aec:	6823      	ldr	r3, [r4, #0]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	065b      	lsls	r3, r3, #25
 8008af2:	d527      	bpl.n	8008b44 <HAL_UART_IRQHandler+0x194>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008af4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008af8:	2301      	movs	r3, #1
 8008afa:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008afe:	6822      	ldr	r2, [r4, #0]
 8008b00:	6893      	ldr	r3, [r2, #8]
 8008b02:	2040      	movs	r0, #64	@ 0x40
 8008b04:	4383      	bics	r3, r0
 8008b06:	6093      	str	r3, [r2, #8]
 8008b08:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8008b0c:	2380      	movs	r3, #128	@ 0x80
 8008b0e:	58e3      	ldr	r3, [r4, r3]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d012      	beq.n	8008b3a <HAL_UART_IRQHandler+0x18a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b14:	4a6d      	ldr	r2, [pc, #436]	@ (8008ccc <HAL_UART_IRQHandler+0x31c>)
 8008b16:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b18:	2380      	movs	r3, #128	@ 0x80
 8008b1a:	58e0      	ldr	r0, [r4, r3]
 8008b1c:	f7fd f90c 	bl	8005d38 <HAL_DMA_Abort_IT>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	d100      	bne.n	8008b26 <HAL_UART_IRQHandler+0x176>
 8008b24:	e75b      	b.n	80089de <HAL_UART_IRQHandler+0x2e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b26:	2380      	movs	r3, #128	@ 0x80
 8008b28:	58e0      	ldr	r0, [r4, r3]
 8008b2a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8008b2c:	4798      	blx	r3
 8008b2e:	e756      	b.n	80089de <HAL_UART_IRQHandler+0x2e>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b30:	075a      	lsls	r2, r3, #29
 8008b32:	d5a1      	bpl.n	8008a78 <HAL_UART_IRQHandler+0xc8>
 8008b34:	07ea      	lsls	r2, r5, #31
 8008b36:	d59f      	bpl.n	8008a78 <HAL_UART_IRQHandler+0xc8>
 8008b38:	e796      	b.n	8008a68 <HAL_UART_IRQHandler+0xb8>
            huart->ErrorCallback(huart);
 8008b3a:	23a4      	movs	r3, #164	@ 0xa4
 8008b3c:	58e3      	ldr	r3, [r4, r3]
 8008b3e:	0020      	movs	r0, r4
 8008b40:	4798      	blx	r3
 8008b42:	e74c      	b.n	80089de <HAL_UART_IRQHandler+0x2e>
          huart->ErrorCallback(huart);
 8008b44:	23a4      	movs	r3, #164	@ 0xa4
 8008b46:	58e3      	ldr	r3, [r4, r3]
 8008b48:	0020      	movs	r0, r4
 8008b4a:	4798      	blx	r3
 8008b4c:	e747      	b.n	80089de <HAL_UART_IRQHandler+0x2e>
        huart->ErrorCallback(huart);
 8008b4e:	23a4      	movs	r3, #164	@ 0xa4
 8008b50:	58e3      	ldr	r3, [r4, r3]
 8008b52:	0020      	movs	r0, r4
 8008b54:	4798      	blx	r3
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b56:	2390      	movs	r3, #144	@ 0x90
 8008b58:	2200      	movs	r2, #0
 8008b5a:	50e2      	str	r2, [r4, r3]
 8008b5c:	e73f      	b.n	80089de <HAL_UART_IRQHandler+0x2e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008b5e:	06d9      	lsls	r1, r3, #27
 8008b60:	d400      	bmi.n	8008b64 <HAL_UART_IRQHandler+0x1b4>
 8008b62:	e747      	b.n	80089f4 <HAL_UART_IRQHandler+0x44>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008b64:	06c1      	lsls	r1, r0, #27
 8008b66:	d400      	bmi.n	8008b6a <HAL_UART_IRQHandler+0x1ba>
 8008b68:	e744      	b.n	80089f4 <HAL_UART_IRQHandler+0x44>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b6a:	2310      	movs	r3, #16
 8008b6c:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	065b      	lsls	r3, r3, #25
 8008b74:	d556      	bpl.n	8008c24 <HAL_UART_IRQHandler+0x274>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b76:	2380      	movs	r3, #128	@ 0x80
 8008b78:	58e2      	ldr	r2, [r4, r3]
 8008b7a:	6813      	ldr	r3, [r2, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d100      	bne.n	8008b86 <HAL_UART_IRQHandler+0x1d6>
 8008b84:	e72b      	b.n	80089de <HAL_UART_IRQHandler+0x2e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b86:	215c      	movs	r1, #92	@ 0x5c
 8008b88:	5a61      	ldrh	r1, [r4, r1]
 8008b8a:	4299      	cmp	r1, r3
 8008b8c:	d800      	bhi.n	8008b90 <HAL_UART_IRQHandler+0x1e0>
 8008b8e:	e726      	b.n	80089de <HAL_UART_IRQHandler+0x2e>
        huart->RxXferCount = nb_remaining_rx_data;
 8008b90:	215e      	movs	r1, #94	@ 0x5e
 8008b92:	5263      	strh	r3, [r4, r1]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008b94:	6813      	ldr	r3, [r2, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	069b      	lsls	r3, r3, #26
 8008b9a:	d50c      	bpl.n	8008bb6 <HAL_UART_IRQHandler+0x206>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	6723      	str	r3, [r4, #112]	@ 0x70
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ba0:	335c      	adds	r3, #92	@ 0x5c
 8008ba2:	5ae3      	ldrh	r3, [r4, r3]
 8008ba4:	225c      	movs	r2, #92	@ 0x5c
 8008ba6:	5aa1      	ldrh	r1, [r4, r2]
 8008ba8:	1ac9      	subs	r1, r1, r3
 8008baa:	b289      	uxth	r1, r1
 8008bac:	23c0      	movs	r3, #192	@ 0xc0
 8008bae:	58e3      	ldr	r3, [r4, r3]
 8008bb0:	0020      	movs	r0, r4
 8008bb2:	4798      	blx	r3
 8008bb4:	e713      	b.n	80089de <HAL_UART_IRQHandler+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bb6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bba:	2301      	movs	r3, #1
 8008bbc:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bc0:	6821      	ldr	r1, [r4, #0]
 8008bc2:	680a      	ldr	r2, [r1, #0]
 8008bc4:	4d42      	ldr	r5, [pc, #264]	@ (8008cd0 <HAL_UART_IRQHandler+0x320>)
 8008bc6:	402a      	ands	r2, r5
 8008bc8:	600a      	str	r2, [r1, #0]
 8008bca:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bce:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bd2:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bd6:	6821      	ldr	r1, [r4, #0]
 8008bd8:	688a      	ldr	r2, [r1, #8]
 8008bda:	439a      	bics	r2, r3
 8008bdc:	608a      	str	r2, [r1, #8]
 8008bde:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008be2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008be6:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bea:	6821      	ldr	r1, [r4, #0]
 8008bec:	688a      	ldr	r2, [r1, #8]
 8008bee:	3542      	adds	r5, #66	@ 0x42
 8008bf0:	35ff      	adds	r5, #255	@ 0xff
 8008bf2:	43aa      	bics	r2, r5
 8008bf4:	608a      	str	r2, [r1, #8]
 8008bf6:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 8008bfa:	228c      	movs	r2, #140	@ 0x8c
 8008bfc:	2120      	movs	r1, #32
 8008bfe:	50a1      	str	r1, [r4, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c00:	2200      	movs	r2, #0
 8008c02:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c04:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c08:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c0c:	6822      	ldr	r2, [r4, #0]
 8008c0e:	6813      	ldr	r3, [r2, #0]
 8008c10:	2010      	movs	r0, #16
 8008c12:	4383      	bics	r3, r0
 8008c14:	6013      	str	r3, [r2, #0]
 8008c16:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c1a:	2380      	movs	r3, #128	@ 0x80
 8008c1c:	58e0      	ldr	r0, [r4, r3]
 8008c1e:	f7fd f84b 	bl	8005cb8 <HAL_DMA_Abort>
 8008c22:	e7bb      	b.n	8008b9c <HAL_UART_IRQHandler+0x1ec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c24:	215e      	movs	r1, #94	@ 0x5e
 8008c26:	5a62      	ldrh	r2, [r4, r1]
 8008c28:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8008c2a:	5a63      	ldrh	r3, [r4, r1]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d100      	bne.n	8008c34 <HAL_UART_IRQHandler+0x284>
 8008c32:	e6d4      	b.n	80089de <HAL_UART_IRQHandler+0x2e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c34:	235c      	movs	r3, #92	@ 0x5c
 8008c36:	5ae1      	ldrh	r1, [r4, r3]
 8008c38:	1a89      	subs	r1, r1, r2
 8008c3a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8008c3c:	2900      	cmp	r1, #0
 8008c3e:	d100      	bne.n	8008c42 <HAL_UART_IRQHandler+0x292>
 8008c40:	e6cd      	b.n	80089de <HAL_UART_IRQHandler+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c42:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c46:	3b5b      	subs	r3, #91	@ 0x5b
 8008c48:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c4c:	6820      	ldr	r0, [r4, #0]
 8008c4e:	6802      	ldr	r2, [r0, #0]
 8008c50:	4e20      	ldr	r6, [pc, #128]	@ (8008cd4 <HAL_UART_IRQHandler+0x324>)
 8008c52:	4032      	ands	r2, r6
 8008c54:	6002      	str	r2, [r0, #0]
 8008c56:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c5a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c5e:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c62:	6820      	ldr	r0, [r4, #0]
 8008c64:	6882      	ldr	r2, [r0, #8]
 8008c66:	4e1c      	ldr	r6, [pc, #112]	@ (8008cd8 <HAL_UART_IRQHandler+0x328>)
 8008c68:	4032      	ands	r2, r6
 8008c6a:	6082      	str	r2, [r0, #8]
 8008c6c:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8008c70:	228c      	movs	r2, #140	@ 0x8c
 8008c72:	2020      	movs	r0, #32
 8008c74:	50a0      	str	r0, [r4, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c76:	2200      	movs	r2, #0
 8008c78:	66e2      	str	r2, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8008c7a:	6762      	str	r2, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c7c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c80:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c84:	6822      	ldr	r2, [r4, #0]
 8008c86:	6813      	ldr	r3, [r2, #0]
 8008c88:	2510      	movs	r5, #16
 8008c8a:	43ab      	bics	r3, r5
 8008c8c:	6013      	str	r3, [r2, #0]
 8008c8e:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c92:	2302      	movs	r3, #2
 8008c94:	6723      	str	r3, [r4, #112]	@ 0x70
        huart->RxEventCallback(huart, nb_rx_data);
 8008c96:	33be      	adds	r3, #190	@ 0xbe
 8008c98:	58e3      	ldr	r3, [r4, r3]
 8008c9a:	0020      	movs	r0, r4
 8008c9c:	4798      	blx	r3
 8008c9e:	e69e      	b.n	80089de <HAL_UART_IRQHandler+0x2e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ca0:	2380      	movs	r3, #128	@ 0x80
 8008ca2:	035b      	lsls	r3, r3, #13
 8008ca4:	6213      	str	r3, [r2, #32]
    huart->WakeupCallback(huart);
 8008ca6:	23b4      	movs	r3, #180	@ 0xb4
 8008ca8:	58e3      	ldr	r3, [r4, r3]
 8008caa:	0020      	movs	r0, r4
 8008cac:	4798      	blx	r3
    return;
 8008cae:	e696      	b.n	80089de <HAL_UART_IRQHandler+0x2e>
    if (huart->TxISR != NULL)
 8008cb0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d100      	bne.n	8008cb8 <HAL_UART_IRQHandler+0x308>
 8008cb6:	e692      	b.n	80089de <HAL_UART_IRQHandler+0x2e>
      huart->TxISR(huart);
 8008cb8:	0020      	movs	r0, r4
 8008cba:	4798      	blx	r3
 8008cbc:	e68f      	b.n	80089de <HAL_UART_IRQHandler+0x2e>
 8008cbe:	46c0      	nop			@ (mov r8, r8)
 8008cc0:	0000080f 	.word	0x0000080f
 8008cc4:	10000001 	.word	0x10000001
 8008cc8:	04000120 	.word	0x04000120
 8008ccc:	080088b9 	.word	0x080088b9
 8008cd0:	fffffeff 	.word	0xfffffeff
 8008cd4:	fffffedf 	.word	0xfffffedf
 8008cd8:	effffffe 	.word	0xeffffffe
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cdc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ce6:	6822      	ldr	r2, [r4, #0]
 8008ce8:	6813      	ldr	r3, [r2, #0]
 8008cea:	2040      	movs	r0, #64	@ 0x40
 8008cec:	4383      	bics	r3, r0
 8008cee:	6013      	str	r3, [r2, #0]
 8008cf0:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cf4:	2388      	movs	r3, #136	@ 0x88
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	67a3      	str	r3, [r4, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008cfe:	3398      	adds	r3, #152	@ 0x98
 8008d00:	58e3      	ldr	r3, [r4, r3]
 8008d02:	0020      	movs	r0, r4
 8008d04:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d06:	e66a      	b.n	80089de <HAL_UART_IRQHandler+0x2e>
    huart->TxFifoEmptyCallback(huart);
 8008d08:	23bc      	movs	r3, #188	@ 0xbc
 8008d0a:	58e3      	ldr	r3, [r4, r3]
 8008d0c:	0020      	movs	r0, r4
 8008d0e:	4798      	blx	r3
    return;
 8008d10:	e665      	b.n	80089de <HAL_UART_IRQHandler+0x2e>
 8008d12:	46c0      	nop			@ (mov r8, r8)

08008d14 <UART_InitCallbacksToDefault>:
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008d14:	4b12      	ldr	r3, [pc, #72]	@ (8008d60 <UART_InitCallbacksToDefault+0x4c>)
 8008d16:	2294      	movs	r2, #148	@ 0x94
 8008d18:	5083      	str	r3, [r0, r2]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008d1a:	4b12      	ldr	r3, [pc, #72]	@ (8008d64 <UART_InitCallbacksToDefault+0x50>)
 8008d1c:	3204      	adds	r2, #4
 8008d1e:	5083      	str	r3, [r0, r2]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008d20:	4b11      	ldr	r3, [pc, #68]	@ (8008d68 <UART_InitCallbacksToDefault+0x54>)
 8008d22:	3204      	adds	r2, #4
 8008d24:	5083      	str	r3, [r0, r2]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008d26:	4b11      	ldr	r3, [pc, #68]	@ (8008d6c <UART_InitCallbacksToDefault+0x58>)
 8008d28:	3204      	adds	r2, #4
 8008d2a:	5083      	str	r3, [r0, r2]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008d2c:	4b10      	ldr	r3, [pc, #64]	@ (8008d70 <UART_InitCallbacksToDefault+0x5c>)
 8008d2e:	3204      	adds	r2, #4
 8008d30:	5083      	str	r3, [r0, r2]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008d32:	4b10      	ldr	r3, [pc, #64]	@ (8008d74 <UART_InitCallbacksToDefault+0x60>)
 8008d34:	3204      	adds	r2, #4
 8008d36:	5083      	str	r3, [r0, r2]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008d38:	4b0f      	ldr	r3, [pc, #60]	@ (8008d78 <UART_InitCallbacksToDefault+0x64>)
 8008d3a:	3204      	adds	r2, #4
 8008d3c:	5083      	str	r3, [r0, r2]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8008d7c <UART_InitCallbacksToDefault+0x68>)
 8008d40:	3204      	adds	r2, #4
 8008d42:	5083      	str	r3, [r0, r2]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8008d44:	4b0e      	ldr	r3, [pc, #56]	@ (8008d80 <UART_InitCallbacksToDefault+0x6c>)
 8008d46:	3204      	adds	r2, #4
 8008d48:	5083      	str	r3, [r0, r2]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8008d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8008d84 <UART_InitCallbacksToDefault+0x70>)
 8008d4c:	3204      	adds	r2, #4
 8008d4e:	5083      	str	r3, [r0, r2]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8008d50:	4b0d      	ldr	r3, [pc, #52]	@ (8008d88 <UART_InitCallbacksToDefault+0x74>)
 8008d52:	3204      	adds	r2, #4
 8008d54:	5083      	str	r3, [r0, r2]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008d56:	4b0d      	ldr	r3, [pc, #52]	@ (8008d8c <UART_InitCallbacksToDefault+0x78>)
 8008d58:	3204      	adds	r2, #4
 8008d5a:	5083      	str	r3, [r0, r2]
}
 8008d5c:	4770      	bx	lr
 8008d5e:	46c0      	nop			@ (mov r8, r8)
 8008d60:	080086f3 	.word	0x080086f3
 8008d64:	080086f1 	.word	0x080086f1
 8008d68:	080086f7 	.word	0x080086f7
 8008d6c:	080086f5 	.word	0x080086f5
 8008d70:	080086f9 	.word	0x080086f9
 8008d74:	080086fb 	.word	0x080086fb
 8008d78:	080086fd 	.word	0x080086fd
 8008d7c:	080086ff 	.word	0x080086ff
 8008d80:	080093f1 	.word	0x080093f1
 8008d84:	080093f3 	.word	0x080093f3
 8008d88:	080093f5 	.word	0x080093f5
 8008d8c:	08008701 	.word	0x08008701

08008d90 <UART_SetConfig>:
{
 8008d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d92:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d94:	6801      	ldr	r1, [r0, #0]
 8008d96:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d98:	6883      	ldr	r3, [r0, #8]
 8008d9a:	6900      	ldr	r0, [r0, #16]
 8008d9c:	4303      	orrs	r3, r0
 8008d9e:	6960      	ldr	r0, [r4, #20]
 8008da0:	4303      	orrs	r3, r0
 8008da2:	69e0      	ldr	r0, [r4, #28]
 8008da4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008da6:	4885      	ldr	r0, [pc, #532]	@ (8008fbc <UART_SetConfig+0x22c>)
 8008da8:	4002      	ands	r2, r0
 8008daa:	4313      	orrs	r3, r2
 8008dac:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dae:	6822      	ldr	r2, [r4, #0]
 8008db0:	6853      	ldr	r3, [r2, #4]
 8008db2:	4983      	ldr	r1, [pc, #524]	@ (8008fc0 <UART_SetConfig+0x230>)
 8008db4:	400b      	ands	r3, r1
 8008db6:	68e1      	ldr	r1, [r4, #12]
 8008db8:	430b      	orrs	r3, r1
 8008dba:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008dbc:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008dbe:	6822      	ldr	r2, [r4, #0]
 8008dc0:	4b80      	ldr	r3, [pc, #512]	@ (8008fc4 <UART_SetConfig+0x234>)
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d001      	beq.n	8008dca <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8008dc6:	6a23      	ldr	r3, [r4, #32]
 8008dc8:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008dca:	6893      	ldr	r3, [r2, #8]
 8008dcc:	487e      	ldr	r0, [pc, #504]	@ (8008fc8 <UART_SetConfig+0x238>)
 8008dce:	4003      	ands	r3, r0
 8008dd0:	430b      	orrs	r3, r1
 8008dd2:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008dd4:	6822      	ldr	r2, [r4, #0]
 8008dd6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008dd8:	210f      	movs	r1, #15
 8008dda:	438b      	bics	r3, r1
 8008ddc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008dde:	430b      	orrs	r3, r1
 8008de0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008de2:	6823      	ldr	r3, [r4, #0]
 8008de4:	4a79      	ldr	r2, [pc, #484]	@ (8008fcc <UART_SetConfig+0x23c>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d038      	beq.n	8008e5c <UART_SetConfig+0xcc>
 8008dea:	4a79      	ldr	r2, [pc, #484]	@ (8008fd0 <UART_SetConfig+0x240>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d100      	bne.n	8008df2 <UART_SetConfig+0x62>
 8008df0:	e0e2      	b.n	8008fb8 <UART_SetConfig+0x228>
 8008df2:	4974      	ldr	r1, [pc, #464]	@ (8008fc4 <UART_SetConfig+0x234>)
 8008df4:	2210      	movs	r2, #16
 8008df6:	428b      	cmp	r3, r1
 8008df8:	d043      	beq.n	8008e82 <UART_SetConfig+0xf2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dfa:	69e3      	ldr	r3, [r4, #28]
 8008dfc:	2180      	movs	r1, #128	@ 0x80
 8008dfe:	0209      	lsls	r1, r1, #8
 8008e00:	428b      	cmp	r3, r1
 8008e02:	d100      	bne.n	8008e06 <UART_SetConfig+0x76>
 8008e04:	e08c      	b.n	8008f20 <UART_SetConfig+0x190>
    switch (clocksource)
 8008e06:	2a04      	cmp	r2, #4
 8008e08:	d100      	bne.n	8008e0c <UART_SetConfig+0x7c>
 8008e0a:	e0cd      	b.n	8008fa8 <UART_SetConfig+0x218>
 8008e0c:	d900      	bls.n	8008e10 <UART_SetConfig+0x80>
 8008e0e:	e0bc      	b.n	8008f8a <UART_SetConfig+0x1fa>
 8008e10:	2a00      	cmp	r2, #0
 8008e12:	d100      	bne.n	8008e16 <UART_SetConfig+0x86>
 8008e14:	e0c0      	b.n	8008f98 <UART_SetConfig+0x208>
        pclk = (uint32_t) HSI_VALUE;
 8008e16:	4b6f      	ldr	r3, [pc, #444]	@ (8008fd4 <UART_SetConfig+0x244>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e18:	6865      	ldr	r5, [r4, #4]
 8008e1a:	4a6f      	ldr	r2, [pc, #444]	@ (8008fd8 <UART_SetConfig+0x248>)
 8008e1c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008e1e:	0049      	lsls	r1, r1, #1
 8008e20:	5a89      	ldrh	r1, [r1, r2]
 8008e22:	0018      	movs	r0, r3
 8008e24:	f7f7 f970 	bl	8000108 <__udivsi3>
 8008e28:	086b      	lsrs	r3, r5, #1
 8008e2a:	18c0      	adds	r0, r0, r3
 8008e2c:	0029      	movs	r1, r5
 8008e2e:	f7f7 f96b 	bl	8000108 <__udivsi3>
 8008e32:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e34:	0001      	movs	r1, r0
 8008e36:	3910      	subs	r1, #16
 8008e38:	4a68      	ldr	r2, [pc, #416]	@ (8008fdc <UART_SetConfig+0x24c>)
        ret = HAL_ERROR;
 8008e3a:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e3c:	4291      	cmp	r1, r2
 8008e3e:	d804      	bhi.n	8008e4a <UART_SetConfig+0xba>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e40:	6822      	ldr	r2, [r4, #0]
 8008e42:	041b      	lsls	r3, r3, #16
 8008e44:	0c1b      	lsrs	r3, r3, #16
 8008e46:	60d3      	str	r3, [r2, #12]
 8008e48:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	226a      	movs	r2, #106	@ 0x6a
 8008e4e:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 8008e50:	3a02      	subs	r2, #2
 8008e52:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 8008e54:	2300      	movs	r3, #0
 8008e56:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8008e58:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8008e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e5c:	4b60      	ldr	r3, [pc, #384]	@ (8008fe0 <UART_SetConfig+0x250>)
 8008e5e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008e60:	2303      	movs	r3, #3
 8008e62:	4013      	ands	r3, r2
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d100      	bne.n	8008e6a <UART_SetConfig+0xda>
 8008e68:	e0a2      	b.n	8008fb0 <UART_SetConfig+0x220>
 8008e6a:	d900      	bls.n	8008e6e <UART_SetConfig+0xde>
 8008e6c:	e0a2      	b.n	8008fb4 <UART_SetConfig+0x224>
 8008e6e:	2204      	movs	r2, #4
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1c2      	bne.n	8008dfa <UART_SetConfig+0x6a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e74:	2380      	movs	r3, #128	@ 0x80
 8008e76:	021b      	lsls	r3, r3, #8
 8008e78:	69e2      	ldr	r2, [r4, #28]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d079      	beq.n	8008f72 <UART_SetConfig+0x1e2>
 8008e7e:	2200      	movs	r2, #0
 8008e80:	e7c1      	b.n	8008e06 <UART_SetConfig+0x76>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e82:	4b57      	ldr	r3, [pc, #348]	@ (8008fe0 <UART_SetConfig+0x250>)
 8008e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e86:	22c0      	movs	r2, #192	@ 0xc0
 8008e88:	0112      	lsls	r2, r2, #4
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	2280      	movs	r2, #128	@ 0x80
 8008e8e:	0112      	lsls	r2, r2, #4
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d043      	beq.n	8008f1c <UART_SetConfig+0x18c>
 8008e94:	d805      	bhi.n	8008ea2 <UART_SetConfig+0x112>
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00b      	beq.n	8008eb2 <UART_SetConfig+0x122>
        pclk = HAL_RCC_GetSysClockFreq();
 8008e9a:	f7fd ff23 	bl	8006ce4 <HAL_RCC_GetSysClockFreq>
 8008e9e:	0006      	movs	r6, r0
        break;
 8008ea0:	e00a      	b.n	8008eb8 <UART_SetConfig+0x128>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ea2:	22c0      	movs	r2, #192	@ 0xc0
 8008ea4:	0112      	lsls	r2, r2, #4
 8008ea6:	2001      	movs	r0, #1
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d1ce      	bne.n	8008e4a <UART_SetConfig+0xba>
 8008eac:	2680      	movs	r6, #128	@ 0x80
 8008eae:	0236      	lsls	r6, r6, #8
 8008eb0:	e005      	b.n	8008ebe <UART_SetConfig+0x12e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008eb2:	f7fe f847 	bl	8006f44 <HAL_RCC_GetPCLK1Freq>
 8008eb6:	0006      	movs	r6, r0
    if (pclk != 0U)
 8008eb8:	2000      	movs	r0, #0
 8008eba:	2e00      	cmp	r6, #0
 8008ebc:	d0c5      	beq.n	8008e4a <UART_SetConfig+0xba>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ebe:	4b46      	ldr	r3, [pc, #280]	@ (8008fd8 <UART_SetConfig+0x248>)
 8008ec0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008ec2:	0052      	lsls	r2, r2, #1
 8008ec4:	5ad7      	ldrh	r7, [r2, r3]
 8008ec6:	0039      	movs	r1, r7
 8008ec8:	0030      	movs	r0, r6
 8008eca:	f7f7 f91d 	bl	8000108 <__udivsi3>
 8008ece:	0003      	movs	r3, r0
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ed0:	6865      	ldr	r5, [r4, #4]
 8008ed2:	006a      	lsls	r2, r5, #1
 8008ed4:	1952      	adds	r2, r2, r5
        ret = HAL_ERROR;
 8008ed6:	2001      	movs	r0, #1
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d8b6      	bhi.n	8008e4a <UART_SetConfig+0xba>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008edc:	032a      	lsls	r2, r5, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d3b3      	bcc.n	8008e4a <UART_SetConfig+0xba>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ee2:	003a      	movs	r2, r7
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	0030      	movs	r0, r6
 8008ee8:	2100      	movs	r1, #0
 8008eea:	f7f7 f999 	bl	8000220 <__aeabi_uldivmod>
 8008eee:	0e06      	lsrs	r6, r0, #24
 8008ef0:	020b      	lsls	r3, r1, #8
 8008ef2:	4333      	orrs	r3, r6
 8008ef4:	0202      	lsls	r2, r0, #8
 8008ef6:	0868      	lsrs	r0, r5, #1
 8008ef8:	2100      	movs	r1, #0
 8008efa:	1880      	adds	r0, r0, r2
 8008efc:	4159      	adcs	r1, r3
 8008efe:	002a      	movs	r2, r5
 8008f00:	2300      	movs	r3, #0
 8008f02:	f7f7 f98d 	bl	8000220 <__aeabi_uldivmod>
 8008f06:	0003      	movs	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f08:	4a36      	ldr	r2, [pc, #216]	@ (8008fe4 <UART_SetConfig+0x254>)
 8008f0a:	1881      	adds	r1, r0, r2
 8008f0c:	4a36      	ldr	r2, [pc, #216]	@ (8008fe8 <UART_SetConfig+0x258>)
          ret = HAL_ERROR;
 8008f0e:	2001      	movs	r0, #1
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f10:	4291      	cmp	r1, r2
 8008f12:	d89a      	bhi.n	8008e4a <UART_SetConfig+0xba>
          huart->Instance->BRR = usartdiv;
 8008f14:	6822      	ldr	r2, [r4, #0]
 8008f16:	60d3      	str	r3, [r2, #12]
 8008f18:	2000      	movs	r0, #0
 8008f1a:	e796      	b.n	8008e4a <UART_SetConfig+0xba>
        pclk = (uint32_t) HSI_VALUE;
 8008f1c:	4e2d      	ldr	r6, [pc, #180]	@ (8008fd4 <UART_SetConfig+0x244>)
 8008f1e:	e7ce      	b.n	8008ebe <UART_SetConfig+0x12e>
    switch (clocksource)
 8008f20:	2a04      	cmp	r2, #4
 8008f22:	d02e      	beq.n	8008f82 <UART_SetConfig+0x1f2>
 8008f24:	d821      	bhi.n	8008f6a <UART_SetConfig+0x1da>
 8008f26:	2a00      	cmp	r2, #0
 8008f28:	d023      	beq.n	8008f72 <UART_SetConfig+0x1e2>
        pclk = (uint32_t) HSI_VALUE;
 8008f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8008fd4 <UART_SetConfig+0x244>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f2c:	6865      	ldr	r5, [r4, #4]
 8008f2e:	4a2a      	ldr	r2, [pc, #168]	@ (8008fd8 <UART_SetConfig+0x248>)
 8008f30:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008f32:	0049      	lsls	r1, r1, #1
 8008f34:	5a89      	ldrh	r1, [r1, r2]
 8008f36:	0018      	movs	r0, r3
 8008f38:	f7f7 f8e6 	bl	8000108 <__udivsi3>
 8008f3c:	0040      	lsls	r0, r0, #1
 8008f3e:	086b      	lsrs	r3, r5, #1
 8008f40:	18c0      	adds	r0, r0, r3
 8008f42:	0029      	movs	r1, r5
 8008f44:	f7f7 f8e0 	bl	8000108 <__udivsi3>
 8008f48:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f4a:	0001      	movs	r1, r0
 8008f4c:	3910      	subs	r1, #16
 8008f4e:	4a23      	ldr	r2, [pc, #140]	@ (8008fdc <UART_SetConfig+0x24c>)
        ret = HAL_ERROR;
 8008f50:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f52:	4291      	cmp	r1, r2
 8008f54:	d900      	bls.n	8008f58 <UART_SetConfig+0x1c8>
 8008f56:	e778      	b.n	8008e4a <UART_SetConfig+0xba>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f58:	4a24      	ldr	r2, [pc, #144]	@ (8008fec <UART_SetConfig+0x25c>)
 8008f5a:	401a      	ands	r2, r3
        huart->Instance->BRR = brrtemp;
 8008f5c:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f5e:	071b      	lsls	r3, r3, #28
 8008f60:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8008f62:	4313      	orrs	r3, r2
 8008f64:	60cb      	str	r3, [r1, #12]
 8008f66:	2000      	movs	r0, #0
 8008f68:	e76f      	b.n	8008e4a <UART_SetConfig+0xba>
    switch (clocksource)
 8008f6a:	2001      	movs	r0, #1
 8008f6c:	2a08      	cmp	r2, #8
 8008f6e:	d0dd      	beq.n	8008f2c <UART_SetConfig+0x19c>
 8008f70:	e76b      	b.n	8008e4a <UART_SetConfig+0xba>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f72:	f7fd ffe7 	bl	8006f44 <HAL_RCC_GetPCLK1Freq>
 8008f76:	0003      	movs	r3, r0
    if (pclk != 0U)
 8008f78:	2000      	movs	r0, #0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d100      	bne.n	8008f80 <UART_SetConfig+0x1f0>
 8008f7e:	e764      	b.n	8008e4a <UART_SetConfig+0xba>
 8008f80:	e7d4      	b.n	8008f2c <UART_SetConfig+0x19c>
        pclk = HAL_RCC_GetSysClockFreq();
 8008f82:	f7fd feaf 	bl	8006ce4 <HAL_RCC_GetSysClockFreq>
 8008f86:	0003      	movs	r3, r0
        break;
 8008f88:	e7f6      	b.n	8008f78 <UART_SetConfig+0x1e8>
    switch (clocksource)
 8008f8a:	2001      	movs	r0, #1
 8008f8c:	2a08      	cmp	r2, #8
 8008f8e:	d000      	beq.n	8008f92 <UART_SetConfig+0x202>
 8008f90:	e75b      	b.n	8008e4a <UART_SetConfig+0xba>
 8008f92:	2380      	movs	r3, #128	@ 0x80
 8008f94:	021b      	lsls	r3, r3, #8
 8008f96:	e73f      	b.n	8008e18 <UART_SetConfig+0x88>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f98:	f7fd ffd4 	bl	8006f44 <HAL_RCC_GetPCLK1Freq>
 8008f9c:	0003      	movs	r3, r0
    if (pclk != 0U)
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d100      	bne.n	8008fa6 <UART_SetConfig+0x216>
 8008fa4:	e751      	b.n	8008e4a <UART_SetConfig+0xba>
 8008fa6:	e737      	b.n	8008e18 <UART_SetConfig+0x88>
        pclk = HAL_RCC_GetSysClockFreq();
 8008fa8:	f7fd fe9c 	bl	8006ce4 <HAL_RCC_GetSysClockFreq>
 8008fac:	0003      	movs	r3, r0
        break;
 8008fae:	e7f6      	b.n	8008f9e <UART_SetConfig+0x20e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fb0:	2202      	movs	r2, #2
 8008fb2:	e722      	b.n	8008dfa <UART_SetConfig+0x6a>
 8008fb4:	2208      	movs	r2, #8
 8008fb6:	e720      	b.n	8008dfa <UART_SetConfig+0x6a>
 8008fb8:	2200      	movs	r2, #0
 8008fba:	e71e      	b.n	8008dfa <UART_SetConfig+0x6a>
 8008fbc:	cfff69f3 	.word	0xcfff69f3
 8008fc0:	ffffcfff 	.word	0xffffcfff
 8008fc4:	40008000 	.word	0x40008000
 8008fc8:	11fff4ff 	.word	0x11fff4ff
 8008fcc:	40013800 	.word	0x40013800
 8008fd0:	40004400 	.word	0x40004400
 8008fd4:	00f42400 	.word	0x00f42400
 8008fd8:	0800a0e8 	.word	0x0800a0e8
 8008fdc:	0000ffef 	.word	0x0000ffef
 8008fe0:	40021000 	.word	0x40021000
 8008fe4:	fffffd00 	.word	0xfffffd00
 8008fe8:	000ffcff 	.word	0x000ffcff
 8008fec:	0000fff0 	.word	0x0000fff0

08008ff0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ff0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008ff2:	071b      	lsls	r3, r3, #28
 8008ff4:	d506      	bpl.n	8009004 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ff6:	6802      	ldr	r2, [r0, #0]
 8008ff8:	6853      	ldr	r3, [r2, #4]
 8008ffa:	492c      	ldr	r1, [pc, #176]	@ (80090ac <UART_AdvFeatureConfig+0xbc>)
 8008ffc:	400b      	ands	r3, r1
 8008ffe:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8009000:	430b      	orrs	r3, r1
 8009002:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009004:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009006:	07db      	lsls	r3, r3, #31
 8009008:	d506      	bpl.n	8009018 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800900a:	6802      	ldr	r2, [r0, #0]
 800900c:	6853      	ldr	r3, [r2, #4]
 800900e:	4928      	ldr	r1, [pc, #160]	@ (80090b0 <UART_AdvFeatureConfig+0xc0>)
 8009010:	400b      	ands	r3, r1
 8009012:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8009014:	430b      	orrs	r3, r1
 8009016:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009018:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800901a:	079b      	lsls	r3, r3, #30
 800901c:	d506      	bpl.n	800902c <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800901e:	6802      	ldr	r2, [r0, #0]
 8009020:	6853      	ldr	r3, [r2, #4]
 8009022:	4924      	ldr	r1, [pc, #144]	@ (80090b4 <UART_AdvFeatureConfig+0xc4>)
 8009024:	400b      	ands	r3, r1
 8009026:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8009028:	430b      	orrs	r3, r1
 800902a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800902c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800902e:	075b      	lsls	r3, r3, #29
 8009030:	d506      	bpl.n	8009040 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009032:	6802      	ldr	r2, [r0, #0]
 8009034:	6853      	ldr	r3, [r2, #4]
 8009036:	4920      	ldr	r1, [pc, #128]	@ (80090b8 <UART_AdvFeatureConfig+0xc8>)
 8009038:	400b      	ands	r3, r1
 800903a:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800903c:	430b      	orrs	r3, r1
 800903e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009040:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009042:	06db      	lsls	r3, r3, #27
 8009044:	d506      	bpl.n	8009054 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009046:	6802      	ldr	r2, [r0, #0]
 8009048:	6893      	ldr	r3, [r2, #8]
 800904a:	491c      	ldr	r1, [pc, #112]	@ (80090bc <UART_AdvFeatureConfig+0xcc>)
 800904c:	400b      	ands	r3, r1
 800904e:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8009050:	430b      	orrs	r3, r1
 8009052:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009054:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009056:	069b      	lsls	r3, r3, #26
 8009058:	d506      	bpl.n	8009068 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800905a:	6802      	ldr	r2, [r0, #0]
 800905c:	6893      	ldr	r3, [r2, #8]
 800905e:	4918      	ldr	r1, [pc, #96]	@ (80090c0 <UART_AdvFeatureConfig+0xd0>)
 8009060:	400b      	ands	r3, r1
 8009062:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8009064:	430b      	orrs	r3, r1
 8009066:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009068:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800906a:	065b      	lsls	r3, r3, #25
 800906c:	d50b      	bpl.n	8009086 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800906e:	6802      	ldr	r2, [r0, #0]
 8009070:	6853      	ldr	r3, [r2, #4]
 8009072:	4914      	ldr	r1, [pc, #80]	@ (80090c4 <UART_AdvFeatureConfig+0xd4>)
 8009074:	400b      	ands	r3, r1
 8009076:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8009078:	430b      	orrs	r3, r1
 800907a:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800907c:	2380      	movs	r3, #128	@ 0x80
 800907e:	035b      	lsls	r3, r3, #13
 8009080:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8009082:	429a      	cmp	r2, r3
 8009084:	d00a      	beq.n	800909c <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009086:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009088:	061b      	lsls	r3, r3, #24
 800908a:	d506      	bpl.n	800909a <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800908c:	6802      	ldr	r2, [r0, #0]
 800908e:	6853      	ldr	r3, [r2, #4]
 8009090:	490d      	ldr	r1, [pc, #52]	@ (80090c8 <UART_AdvFeatureConfig+0xd8>)
 8009092:	400b      	ands	r3, r1
 8009094:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8009096:	430b      	orrs	r3, r1
 8009098:	6053      	str	r3, [r2, #4]
}
 800909a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800909c:	6802      	ldr	r2, [r0, #0]
 800909e:	6853      	ldr	r3, [r2, #4]
 80090a0:	490a      	ldr	r1, [pc, #40]	@ (80090cc <UART_AdvFeatureConfig+0xdc>)
 80090a2:	400b      	ands	r3, r1
 80090a4:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80090a6:	430b      	orrs	r3, r1
 80090a8:	6053      	str	r3, [r2, #4]
 80090aa:	e7ec      	b.n	8009086 <UART_AdvFeatureConfig+0x96>
 80090ac:	ffff7fff 	.word	0xffff7fff
 80090b0:	fffdffff 	.word	0xfffdffff
 80090b4:	fffeffff 	.word	0xfffeffff
 80090b8:	fffbffff 	.word	0xfffbffff
 80090bc:	ffffefff 	.word	0xffffefff
 80090c0:	ffffdfff 	.word	0xffffdfff
 80090c4:	ffefffff 	.word	0xffefffff
 80090c8:	fff7ffff 	.word	0xfff7ffff
 80090cc:	ff9fffff 	.word	0xff9fffff

080090d0 <UART_WaitOnFlagUntilTimeout>:
{
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d2:	46ce      	mov	lr, r9
 80090d4:	4647      	mov	r7, r8
 80090d6:	b580      	push	{r7, lr}
 80090d8:	4680      	mov	r8, r0
 80090da:	000d      	movs	r5, r1
 80090dc:	0016      	movs	r6, r2
 80090de:	4699      	mov	r9, r3
 80090e0:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090e2:	4643      	mov	r3, r8
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	69dc      	ldr	r4, [r3, #28]
 80090e8:	402c      	ands	r4, r5
 80090ea:	1b64      	subs	r4, r4, r5
 80090ec:	4262      	negs	r2, r4
 80090ee:	4154      	adcs	r4, r2
 80090f0:	42b4      	cmp	r4, r6
 80090f2:	d136      	bne.n	8009162 <UART_WaitOnFlagUntilTimeout+0x92>
    if (Timeout != HAL_MAX_DELAY)
 80090f4:	1c7a      	adds	r2, r7, #1
 80090f6:	d0f6      	beq.n	80090e6 <UART_WaitOnFlagUntilTimeout+0x16>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090f8:	f7fb fef2 	bl	8004ee0 <HAL_GetTick>
 80090fc:	464b      	mov	r3, r9
 80090fe:	1ac0      	subs	r0, r0, r3
 8009100:	42b8      	cmp	r0, r7
 8009102:	d833      	bhi.n	800916c <UART_WaitOnFlagUntilTimeout+0x9c>
 8009104:	2f00      	cmp	r7, #0
 8009106:	d033      	beq.n	8009170 <UART_WaitOnFlagUntilTimeout+0xa0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009108:	4643      	mov	r3, r8
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	6813      	ldr	r3, [r2, #0]
 800910e:	075b      	lsls	r3, r3, #29
 8009110:	d5e7      	bpl.n	80090e2 <UART_WaitOnFlagUntilTimeout+0x12>
 8009112:	002b      	movs	r3, r5
 8009114:	3b40      	subs	r3, #64	@ 0x40
 8009116:	2140      	movs	r1, #64	@ 0x40
 8009118:	438b      	bics	r3, r1
 800911a:	d0e2      	beq.n	80090e2 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800911c:	69d3      	ldr	r3, [r2, #28]
 800911e:	071b      	lsls	r3, r3, #28
 8009120:	d411      	bmi.n	8009146 <UART_WaitOnFlagUntilTimeout+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009122:	69d3      	ldr	r3, [r2, #28]
 8009124:	051b      	lsls	r3, r3, #20
 8009126:	d5dc      	bpl.n	80090e2 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009128:	2380      	movs	r3, #128	@ 0x80
 800912a:	011b      	lsls	r3, r3, #4
 800912c:	6213      	str	r3, [r2, #32]
          UART_EndRxTransfer(huart);
 800912e:	4640      	mov	r0, r8
 8009130:	f7ff fb06 	bl	8008740 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009134:	2390      	movs	r3, #144	@ 0x90
 8009136:	2220      	movs	r2, #32
 8009138:	4641      	mov	r1, r8
 800913a:	50ca      	str	r2, [r1, r3]
          __HAL_UNLOCK(huart);
 800913c:	3b0c      	subs	r3, #12
 800913e:	2200      	movs	r2, #0
 8009140:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 8009142:	2003      	movs	r0, #3
 8009144:	e00e      	b.n	8009164 <UART_WaitOnFlagUntilTimeout+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009146:	2408      	movs	r4, #8
 8009148:	6214      	str	r4, [r2, #32]
          UART_EndRxTransfer(huart);
 800914a:	4640      	mov	r0, r8
 800914c:	f7ff faf8 	bl	8008740 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009150:	2390      	movs	r3, #144	@ 0x90
 8009152:	4642      	mov	r2, r8
 8009154:	50d4      	str	r4, [r2, r3]
          __HAL_UNLOCK(huart);
 8009156:	3b0c      	subs	r3, #12
 8009158:	2200      	movs	r2, #0
 800915a:	4641      	mov	r1, r8
 800915c:	54ca      	strb	r2, [r1, r3]
          return HAL_ERROR;
 800915e:	2001      	movs	r0, #1
 8009160:	e000      	b.n	8009164 <UART_WaitOnFlagUntilTimeout+0x94>
  return HAL_OK;
 8009162:	2000      	movs	r0, #0
}
 8009164:	bcc0      	pop	{r6, r7}
 8009166:	46b9      	mov	r9, r7
 8009168:	46b0      	mov	r8, r6
 800916a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800916c:	2003      	movs	r0, #3
 800916e:	e7f9      	b.n	8009164 <UART_WaitOnFlagUntilTimeout+0x94>
 8009170:	2003      	movs	r0, #3
 8009172:	e7f7      	b.n	8009164 <UART_WaitOnFlagUntilTimeout+0x94>

08009174 <UART_CheckIdleState>:
{
 8009174:	b530      	push	{r4, r5, lr}
 8009176:	b083      	sub	sp, #12
 8009178:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800917a:	2390      	movs	r3, #144	@ 0x90
 800917c:	2200      	movs	r2, #0
 800917e:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8009180:	f7fb feae 	bl	8004ee0 <HAL_GetTick>
 8009184:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	071b      	lsls	r3, r3, #28
 800918c:	d411      	bmi.n	80091b2 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	075b      	lsls	r3, r3, #29
 8009194:	d429      	bmi.n	80091ea <UART_CheckIdleState+0x76>
  huart->gState = HAL_UART_STATE_READY;
 8009196:	2320      	movs	r3, #32
 8009198:	2288      	movs	r2, #136	@ 0x88
 800919a:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800919c:	3204      	adds	r2, #4
 800919e:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091a0:	2300      	movs	r3, #0
 80091a2:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091a4:	6723      	str	r3, [r4, #112]	@ 0x70
  return HAL_OK;
 80091a6:	2000      	movs	r0, #0
      __HAL_UNLOCK(huart);
 80091a8:	2384      	movs	r3, #132	@ 0x84
 80091aa:	2200      	movs	r2, #0
 80091ac:	54e2      	strb	r2, [r4, r3]
}
 80091ae:	b003      	add	sp, #12
 80091b0:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091b2:	2180      	movs	r1, #128	@ 0x80
 80091b4:	4b20      	ldr	r3, [pc, #128]	@ (8009238 <UART_CheckIdleState+0xc4>)
 80091b6:	9300      	str	r3, [sp, #0]
 80091b8:	0003      	movs	r3, r0
 80091ba:	2200      	movs	r2, #0
 80091bc:	0389      	lsls	r1, r1, #14
 80091be:	0020      	movs	r0, r4
 80091c0:	f7ff ff86 	bl	80090d0 <UART_WaitOnFlagUntilTimeout>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d0e2      	beq.n	800918e <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091c8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091cc:	2301      	movs	r3, #1
 80091ce:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80091d2:	6822      	ldr	r2, [r4, #0]
 80091d4:	6813      	ldr	r3, [r2, #0]
 80091d6:	2080      	movs	r0, #128	@ 0x80
 80091d8:	4383      	bics	r3, r0
 80091da:	6013      	str	r3, [r2, #0]
 80091dc:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80091e0:	2388      	movs	r3, #136	@ 0x88
 80091e2:	2220      	movs	r2, #32
 80091e4:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 80091e6:	387d      	subs	r0, #125	@ 0x7d
 80091e8:	e7de      	b.n	80091a8 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091ea:	2180      	movs	r1, #128	@ 0x80
 80091ec:	4b12      	ldr	r3, [pc, #72]	@ (8009238 <UART_CheckIdleState+0xc4>)
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	002b      	movs	r3, r5
 80091f2:	2200      	movs	r2, #0
 80091f4:	03c9      	lsls	r1, r1, #15
 80091f6:	0020      	movs	r0, r4
 80091f8:	f7ff ff6a 	bl	80090d0 <UART_WaitOnFlagUntilTimeout>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d0ca      	beq.n	8009196 <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009200:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009204:	2201      	movs	r2, #1
 8009206:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800920a:	6821      	ldr	r1, [r4, #0]
 800920c:	680b      	ldr	r3, [r1, #0]
 800920e:	4d0b      	ldr	r5, [pc, #44]	@ (800923c <UART_CheckIdleState+0xc8>)
 8009210:	402b      	ands	r3, r5
 8009212:	600b      	str	r3, [r1, #0]
 8009214:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009218:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800921c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009220:	6821      	ldr	r1, [r4, #0]
 8009222:	688b      	ldr	r3, [r1, #8]
 8009224:	4393      	bics	r3, r2
 8009226:	608b      	str	r3, [r1, #8]
 8009228:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 800922c:	238c      	movs	r3, #140	@ 0x8c
 800922e:	321f      	adds	r2, #31
 8009230:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8009232:	2003      	movs	r0, #3
 8009234:	e7b8      	b.n	80091a8 <UART_CheckIdleState+0x34>
 8009236:	46c0      	nop			@ (mov r8, r8)
 8009238:	01ffffff 	.word	0x01ffffff
 800923c:	fffffedf 	.word	0xfffffedf

08009240 <HAL_UART_Init>:
{
 8009240:	b510      	push	{r4, lr}
 8009242:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8009244:	d03c      	beq.n	80092c0 <HAL_UART_Init+0x80>
  if (huart->gState == HAL_UART_STATE_RESET)
 8009246:	2388      	movs	r3, #136	@ 0x88
 8009248:	58c3      	ldr	r3, [r0, r3]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d022      	beq.n	8009294 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 800924e:	2388      	movs	r3, #136	@ 0x88
 8009250:	2224      	movs	r2, #36	@ 0x24
 8009252:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8009254:	6822      	ldr	r2, [r4, #0]
 8009256:	6813      	ldr	r3, [r2, #0]
 8009258:	2101      	movs	r1, #1
 800925a:	438b      	bics	r3, r1
 800925c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800925e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009260:	2b00      	cmp	r3, #0
 8009262:	d129      	bne.n	80092b8 <HAL_UART_Init+0x78>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009264:	0020      	movs	r0, r4
 8009266:	f7ff fd93 	bl	8008d90 <UART_SetConfig>
 800926a:	2801      	cmp	r0, #1
 800926c:	d011      	beq.n	8009292 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800926e:	6822      	ldr	r2, [r4, #0]
 8009270:	6853      	ldr	r3, [r2, #4]
 8009272:	4914      	ldr	r1, [pc, #80]	@ (80092c4 <HAL_UART_Init+0x84>)
 8009274:	400b      	ands	r3, r1
 8009276:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009278:	6822      	ldr	r2, [r4, #0]
 800927a:	6893      	ldr	r3, [r2, #8]
 800927c:	212a      	movs	r1, #42	@ 0x2a
 800927e:	438b      	bics	r3, r1
 8009280:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8009282:	6822      	ldr	r2, [r4, #0]
 8009284:	6813      	ldr	r3, [r2, #0]
 8009286:	3929      	subs	r1, #41	@ 0x29
 8009288:	430b      	orrs	r3, r1
 800928a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800928c:	0020      	movs	r0, r4
 800928e:	f7ff ff71 	bl	8009174 <UART_CheckIdleState>
}
 8009292:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8009294:	3384      	adds	r3, #132	@ 0x84
 8009296:	2200      	movs	r2, #0
 8009298:	54c2      	strb	r2, [r0, r3]
    UART_InitCallbacksToDefault(huart);
 800929a:	f7ff fd3b 	bl	8008d14 <UART_InitCallbacksToDefault>
    if (huart->MspInitCallback == NULL)
 800929e:	23c4      	movs	r3, #196	@ 0xc4
 80092a0:	58e3      	ldr	r3, [r4, r3]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d004      	beq.n	80092b0 <HAL_UART_Init+0x70>
    huart->MspInitCallback(huart);
 80092a6:	23c4      	movs	r3, #196	@ 0xc4
 80092a8:	58e3      	ldr	r3, [r4, r3]
 80092aa:	0020      	movs	r0, r4
 80092ac:	4798      	blx	r3
 80092ae:	e7ce      	b.n	800924e <HAL_UART_Init+0xe>
      huart->MspInitCallback = HAL_UART_MspInit;
 80092b0:	4b05      	ldr	r3, [pc, #20]	@ (80092c8 <HAL_UART_Init+0x88>)
 80092b2:	22c4      	movs	r2, #196	@ 0xc4
 80092b4:	50a3      	str	r3, [r4, r2]
 80092b6:	e7f6      	b.n	80092a6 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 80092b8:	0020      	movs	r0, r4
 80092ba:	f7ff fe99 	bl	8008ff0 <UART_AdvFeatureConfig>
 80092be:	e7d1      	b.n	8009264 <HAL_UART_Init+0x24>
    return HAL_ERROR;
 80092c0:	2001      	movs	r0, #1
 80092c2:	e7e6      	b.n	8009292 <HAL_UART_Init+0x52>
 80092c4:	ffffb7ff 	.word	0xffffb7ff
 80092c8:	08004869 	.word	0x08004869

080092cc <UART_Start_Receive_DMA>:
{
 80092cc:	b510      	push	{r4, lr}
 80092ce:	0004      	movs	r4, r0
 80092d0:	0013      	movs	r3, r2
  huart->pRxBuffPtr = pData;
 80092d2:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize = Size;
 80092d4:	225c      	movs	r2, #92	@ 0x5c
 80092d6:	5283      	strh	r3, [r0, r2]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092d8:	3234      	adds	r2, #52	@ 0x34
 80092da:	2100      	movs	r1, #0
 80092dc:	5081      	str	r1, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092de:	3a04      	subs	r2, #4
 80092e0:	3122      	adds	r1, #34	@ 0x22
 80092e2:	5081      	str	r1, [r0, r2]
  if (huart->hdmarx != NULL)
 80092e4:	3a0c      	subs	r2, #12
 80092e6:	5882      	ldr	r2, [r0, r2]
 80092e8:	2a00      	cmp	r2, #0
 80092ea:	d013      	beq.n	8009314 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80092ec:	4921      	ldr	r1, [pc, #132]	@ (8009374 <UART_Start_Receive_DMA+0xa8>)
 80092ee:	62d1      	str	r1, [r2, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80092f0:	2080      	movs	r0, #128	@ 0x80
 80092f2:	5822      	ldr	r2, [r4, r0]
 80092f4:	4920      	ldr	r1, [pc, #128]	@ (8009378 <UART_Start_Receive_DMA+0xac>)
 80092f6:	6311      	str	r1, [r2, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80092f8:	5822      	ldr	r2, [r4, r0]
 80092fa:	4920      	ldr	r1, [pc, #128]	@ (800937c <UART_Start_Receive_DMA+0xb0>)
 80092fc:	6351      	str	r1, [r2, #52]	@ 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 80092fe:	5822      	ldr	r2, [r4, r0]
 8009300:	2100      	movs	r1, #0
 8009302:	6391      	str	r1, [r2, #56]	@ 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009304:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8009306:	6821      	ldr	r1, [r4, #0]
 8009308:	3124      	adds	r1, #36	@ 0x24
 800930a:	5820      	ldr	r0, [r4, r0]
 800930c:	f7fc fc86 	bl	8005c1c <HAL_DMA_Start_IT>
 8009310:	2800      	cmp	r0, #0
 8009312:	d126      	bne.n	8009362 <UART_Start_Receive_DMA+0x96>
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009314:	6923      	ldr	r3, [r4, #16]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00b      	beq.n	8009332 <UART_Start_Receive_DMA+0x66>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800931a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800931e:	2301      	movs	r3, #1
 8009320:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009324:	6822      	ldr	r2, [r4, #0]
 8009326:	6810      	ldr	r0, [r2, #0]
 8009328:	33ff      	adds	r3, #255	@ 0xff
 800932a:	4303      	orrs	r3, r0
 800932c:	6013      	str	r3, [r2, #0]
 800932e:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009332:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009336:	2301      	movs	r3, #1
 8009338:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800933c:	6821      	ldr	r1, [r4, #0]
 800933e:	688a      	ldr	r2, [r1, #8]
 8009340:	431a      	orrs	r2, r3
 8009342:	608a      	str	r2, [r1, #8]
 8009344:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009348:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800934c:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009350:	6822      	ldr	r2, [r4, #0]
 8009352:	6893      	ldr	r3, [r2, #8]
 8009354:	2040      	movs	r0, #64	@ 0x40
 8009356:	4303      	orrs	r3, r0
 8009358:	6093      	str	r3, [r2, #8]
 800935a:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 800935e:	2000      	movs	r0, #0
}
 8009360:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009362:	2390      	movs	r3, #144	@ 0x90
 8009364:	2210      	movs	r2, #16
 8009366:	50e2      	str	r2, [r4, r3]
      huart->RxState = HAL_UART_STATE_READY;
 8009368:	3b04      	subs	r3, #4
 800936a:	3210      	adds	r2, #16
 800936c:	50e2      	str	r2, [r4, r3]
      return HAL_ERROR;
 800936e:	2001      	movs	r0, #1
 8009370:	e7f6      	b.n	8009360 <UART_Start_Receive_DMA+0x94>
 8009372:	46c0      	nop			@ (mov r8, r8)
 8009374:	080087a5 	.word	0x080087a5
 8009378:	08008841 	.word	0x08008841
 800937c:	08008865 	.word	0x08008865

08009380 <HAL_UART_Receive_DMA>:
{
 8009380:	b570      	push	{r4, r5, r6, lr}
 8009382:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8009384:	208c      	movs	r0, #140	@ 0x8c
 8009386:	5818      	ldr	r0, [r3, r0]
 8009388:	2820      	cmp	r0, #32
 800938a:	d128      	bne.n	80093de <HAL_UART_Receive_DMA+0x5e>
    if ((pData == NULL) || (Size == 0U))
 800938c:	2900      	cmp	r1, #0
 800938e:	d028      	beq.n	80093e2 <HAL_UART_Receive_DMA+0x62>
 8009390:	2a00      	cmp	r2, #0
 8009392:	d028      	beq.n	80093e6 <HAL_UART_Receive_DMA+0x66>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009394:	2080      	movs	r0, #128	@ 0x80
 8009396:	0140      	lsls	r0, r0, #5
 8009398:	689c      	ldr	r4, [r3, #8]
 800939a:	4284      	cmp	r4, r0
 800939c:	d105      	bne.n	80093aa <HAL_UART_Receive_DMA+0x2a>
 800939e:	6918      	ldr	r0, [r3, #16]
 80093a0:	2800      	cmp	r0, #0
 80093a2:	d102      	bne.n	80093aa <HAL_UART_Receive_DMA+0x2a>
        return  HAL_ERROR;
 80093a4:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 80093a6:	07cc      	lsls	r4, r1, #31
 80093a8:	d41a      	bmi.n	80093e0 <HAL_UART_Receive_DMA+0x60>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093aa:	2000      	movs	r0, #0
 80093ac:	66d8      	str	r0, [r3, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80093ae:	6818      	ldr	r0, [r3, #0]
 80093b0:	4c0e      	ldr	r4, [pc, #56]	@ (80093ec <HAL_UART_Receive_DMA+0x6c>)
 80093b2:	42a0      	cmp	r0, r4
 80093b4:	d00f      	beq.n	80093d6 <HAL_UART_Receive_DMA+0x56>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80093b6:	6840      	ldr	r0, [r0, #4]
 80093b8:	0200      	lsls	r0, r0, #8
 80093ba:	d50c      	bpl.n	80093d6 <HAL_UART_Receive_DMA+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093bc:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093c0:	2001      	movs	r0, #1
 80093c2:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80093c6:	681c      	ldr	r4, [r3, #0]
 80093c8:	6825      	ldr	r5, [r4, #0]
 80093ca:	2080      	movs	r0, #128	@ 0x80
 80093cc:	04c0      	lsls	r0, r0, #19
 80093ce:	4328      	orrs	r0, r5
 80093d0:	6020      	str	r0, [r4, #0]
 80093d2:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80093d6:	0018      	movs	r0, r3
 80093d8:	f7ff ff78 	bl	80092cc <UART_Start_Receive_DMA>
 80093dc:	e000      	b.n	80093e0 <HAL_UART_Receive_DMA+0x60>
    return HAL_BUSY;
 80093de:	2002      	movs	r0, #2
}
 80093e0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80093e2:	2001      	movs	r0, #1
 80093e4:	e7fc      	b.n	80093e0 <HAL_UART_Receive_DMA+0x60>
 80093e6:	2001      	movs	r0, #1
 80093e8:	e7fa      	b.n	80093e0 <HAL_UART_Receive_DMA+0x60>
 80093ea:	46c0      	nop			@ (mov r8, r8)
 80093ec:	40008000 	.word	0x40008000

080093f0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80093f0:	4770      	bx	lr

080093f2 <HAL_UARTEx_RxFifoFullCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80093f2:	4770      	bx	lr

080093f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80093f4:	4770      	bx	lr

080093f6 <memset>:
 80093f6:	0003      	movs	r3, r0
 80093f8:	1882      	adds	r2, r0, r2
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d100      	bne.n	8009400 <memset+0xa>
 80093fe:	4770      	bx	lr
 8009400:	7019      	strb	r1, [r3, #0]
 8009402:	3301      	adds	r3, #1
 8009404:	e7f9      	b.n	80093fa <memset+0x4>
	...

08009408 <__libc_init_array>:
 8009408:	b570      	push	{r4, r5, r6, lr}
 800940a:	2600      	movs	r6, #0
 800940c:	4c0c      	ldr	r4, [pc, #48]	@ (8009440 <__libc_init_array+0x38>)
 800940e:	4d0d      	ldr	r5, [pc, #52]	@ (8009444 <__libc_init_array+0x3c>)
 8009410:	1b64      	subs	r4, r4, r5
 8009412:	10a4      	asrs	r4, r4, #2
 8009414:	42a6      	cmp	r6, r4
 8009416:	d109      	bne.n	800942c <__libc_init_array+0x24>
 8009418:	2600      	movs	r6, #0
 800941a:	f000 f823 	bl	8009464 <_init>
 800941e:	4c0a      	ldr	r4, [pc, #40]	@ (8009448 <__libc_init_array+0x40>)
 8009420:	4d0a      	ldr	r5, [pc, #40]	@ (800944c <__libc_init_array+0x44>)
 8009422:	1b64      	subs	r4, r4, r5
 8009424:	10a4      	asrs	r4, r4, #2
 8009426:	42a6      	cmp	r6, r4
 8009428:	d105      	bne.n	8009436 <__libc_init_array+0x2e>
 800942a:	bd70      	pop	{r4, r5, r6, pc}
 800942c:	00b3      	lsls	r3, r6, #2
 800942e:	58eb      	ldr	r3, [r5, r3]
 8009430:	4798      	blx	r3
 8009432:	3601      	adds	r6, #1
 8009434:	e7ee      	b.n	8009414 <__libc_init_array+0xc>
 8009436:	00b3      	lsls	r3, r6, #2
 8009438:	58eb      	ldr	r3, [r5, r3]
 800943a:	4798      	blx	r3
 800943c:	3601      	adds	r6, #1
 800943e:	e7f2      	b.n	8009426 <__libc_init_array+0x1e>
 8009440:	0800a108 	.word	0x0800a108
 8009444:	0800a108 	.word	0x0800a108
 8009448:	0800a10c 	.word	0x0800a10c
 800944c:	0800a108 	.word	0x0800a108

08009450 <memcpy>:
 8009450:	2300      	movs	r3, #0
 8009452:	b510      	push	{r4, lr}
 8009454:	429a      	cmp	r2, r3
 8009456:	d100      	bne.n	800945a <memcpy+0xa>
 8009458:	bd10      	pop	{r4, pc}
 800945a:	5ccc      	ldrb	r4, [r1, r3]
 800945c:	54c4      	strb	r4, [r0, r3]
 800945e:	3301      	adds	r3, #1
 8009460:	e7f8      	b.n	8009454 <memcpy+0x4>
	...

08009464 <_init>:
 8009464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009466:	46c0      	nop			@ (mov r8, r8)
 8009468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800946a:	bc08      	pop	{r3}
 800946c:	469e      	mov	lr, r3
 800946e:	4770      	bx	lr

08009470 <_fini>:
 8009470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009472:	46c0      	nop			@ (mov r8, r8)
 8009474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009476:	bc08      	pop	{r3}
 8009478:	469e      	mov	lr, r3
 800947a:	4770      	bx	lr
 800947c:	0000      	movs	r0, r0
	...

08009480 <__FLASH_Program_Fast_veneer>:
 8009480:	b401      	push	{r0}
 8009482:	4802      	ldr	r0, [pc, #8]	@ (800948c <__FLASH_Program_Fast_veneer+0xc>)
 8009484:	4684      	mov	ip, r0
 8009486:	bc01      	pop	{r0}
 8009488:	4760      	bx	ip
 800948a:	bf00      	nop
 800948c:	20000459 	.word	0x20000459

Disassembly of section .data:

20000000 <user_preset_3>:
20000000:	7f7f4040 00000064                       @@..d...

20000008 <user_preset_2>:
20000008:	007f4000 00000020                       .@.. ...

20000010 <user_preset_1>:
20000010:	40402840 00000040                       @(@@@...

20000018 <user_preset_0>:
20000018:	407f6e7f 00000000                       .n.@....

20000020 <led_blink_period>:
20000020:	0000012c                                ,...

20000024 <tap_tempo_switch_state_counter.1>:
20000024:	                                         .

20000025 <preset.4>:
20000025:	                                         ...

20000028 <delay_line>:
	...
20000428:	00010000 00000200                       ........

20000430 <LED_fsm>:
20000430:	00000001                                ....

20000434 <IP_CAP_fsm>:
20000434:	00000400                                ....

20000438 <phase_fsm>:
20000438:	00000001                                ....

2000043c <symmetry_fsm>:
2000043c:	00000001                                ....

20000440 <waveshape_fsm>:
20000440:	00000001                                ....

20000444 <depth_fsm>:
20000444:	00000001                                ....

20000448 <speed_fsm>:
20000448:	00000001                                ....

2000044c <SystemCoreClock>:
2000044c:	00f42400                                .$..

20000450 <uwTickFreq>:
20000450:	00000001                                ....

20000454 <uwTickPrio>:
20000454:	00000004                                ....

20000458 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000458:	b530      	push	{r4, r5, lr}
  uint32_t dest = Address;
  uint32_t src = DataAddress;
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000045a:	4a0d      	ldr	r2, [pc, #52]	@ (20000490 <FLASH_Program_Fast+0x38>)
2000045c:	6954      	ldr	r4, [r2, #20]
2000045e:	2380      	movs	r3, #128	@ 0x80
20000460:	02db      	lsls	r3, r3, #11
20000462:	4323      	orrs	r3, r4
20000464:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000466:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
2000046a:	b672      	cpsid	i
  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000046c:	1c4c      	adds	r4, r1, #1
2000046e:	34ff      	adds	r4, #255	@ 0xff
  uint32_t src = DataAddress;
20000470:	000b      	movs	r3, r1
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000472:	1a41      	subs	r1, r0, r1
20000474:	681a      	ldr	r2, [r3, #0]
20000476:	50ca      	str	r2, [r1, r3]
    src += 4U;
20000478:	3304      	adds	r3, #4
  while (index < 64U)
2000047a:	42a3      	cmp	r3, r4
2000047c:	d1fa      	bne.n	20000474 <FLASH_Program_Fast+0x1c>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
2000047e:	4904      	ldr	r1, [pc, #16]	@ (20000490 <FLASH_Program_Fast+0x38>)
20000480:	2280      	movs	r2, #128	@ 0x80
20000482:	0252      	lsls	r2, r2, #9
20000484:	690b      	ldr	r3, [r1, #16]
20000486:	4213      	tst	r3, r2
20000488:	d1fc      	bne.n	20000484 <FLASH_Program_Fast+0x2c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2000048a:	f385 8810 	msr	PRIMASK, r5
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
2000048e:	bd30      	pop	{r4, r5, pc}
20000490:	40022000 	.word	0x40022000
