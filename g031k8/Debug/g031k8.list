
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f58  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e0  08006014  08006014  00007014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069f4  080069f4  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  080069f4  080069f4  000079f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069fc  080069fc  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069fc  080069fc  000079fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a00  08006a00  00007a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006a04  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000010  08006a14  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08006a14  00008348  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015669  00000000  00000000  00008038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a0b  00000000  00000000  0001d6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  000200b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d77  00000000  00000000  000211e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017843  00000000  00000000  00021f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a79  00000000  00000000  0003979a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a98b  00000000  00000000  0004e213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8b9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e80  00000000  00000000  000e8be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000eca64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005ffc 	.word	0x08005ffc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08005ffc 	.word	0x08005ffc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <SystemClock_Config>:
UART_HandleTypeDef huart2;


//FUNCTIONS
void SystemClock_Config(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b093      	sub	sp, #76	@ 0x4c
 800044c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044e:	2410      	movs	r4, #16
 8000450:	193b      	adds	r3, r7, r4
 8000452:	0018      	movs	r0, r3
 8000454:	2338      	movs	r3, #56	@ 0x38
 8000456:	001a      	movs	r2, r3
 8000458:	2100      	movs	r1, #0
 800045a:	f005 fda3 	bl	8005fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045e:	003b      	movs	r3, r7
 8000460:	0018      	movs	r0, r3
 8000462:	2310      	movs	r3, #16
 8000464:	001a      	movs	r2, r3
 8000466:	2100      	movs	r1, #0
 8000468:	f005 fd9c 	bl	8005fa4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800046c:	2380      	movs	r3, #128	@ 0x80
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	0018      	movs	r0, r3
 8000472:	f002 ffb9 	bl	80033e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2202      	movs	r2, #2
 800047a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	193b      	adds	r3, r7, r4
 800047e:	2280      	movs	r2, #128	@ 0x80
 8000480:	0052      	lsls	r2, r2, #1
 8000482:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000484:	0021      	movs	r1, r4
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2240      	movs	r2, #64	@ 0x40
 8000490:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2202      	movs	r2, #2
 8000496:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2202      	movs	r2, #2
 800049c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2200      	movs	r2, #0
 80004a2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2208      	movs	r2, #8
 80004a8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2280      	movs	r2, #128	@ 0x80
 80004ae:	0292      	lsls	r2, r2, #10
 80004b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	22c0      	movs	r2, #192	@ 0xc0
 80004b6:	04d2      	lsls	r2, r2, #19
 80004b8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2280      	movs	r2, #128	@ 0x80
 80004be:	0592      	lsls	r2, r2, #22
 80004c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	0018      	movs	r0, r3
 80004c6:	f002 ffdb 	bl	8003480 <HAL_RCC_OscConfig>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80004ce:	f000 faa7 	bl	8000a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d2:	003b      	movs	r3, r7
 80004d4:	2207      	movs	r2, #7
 80004d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d8:	003b      	movs	r3, r7
 80004da:	2202      	movs	r2, #2
 80004dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004de:	003b      	movs	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e4:	003b      	movs	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ea:	003b      	movs	r3, r7
 80004ec:	2102      	movs	r1, #2
 80004ee:	0018      	movs	r0, r3
 80004f0:	f003 fae0 	bl	8003ab4 <HAL_RCC_ClockConfig>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004f8:	f000 fa92 	bl	8000a20 <Error_Handler>
  }
}
 80004fc:	46c0      	nop			@ (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b013      	add	sp, #76	@ 0x4c
 8000502:	bd90      	pop	{r4, r7, pc}

08000504 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	0018      	movs	r0, r3
 800050e:	230c      	movs	r3, #12
 8000510:	001a      	movs	r2, r3
 8000512:	2100      	movs	r1, #0
 8000514:	f005 fd46 	bl	8005fa4 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000518:	4b4e      	ldr	r3, [pc, #312]	@ (8000654 <MX_ADC1_Init+0x150>)
 800051a:	4a4f      	ldr	r2, [pc, #316]	@ (8000658 <MX_ADC1_Init+0x154>)
 800051c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800051e:	4b4d      	ldr	r3, [pc, #308]	@ (8000654 <MX_ADC1_Init+0x150>)
 8000520:	2280      	movs	r2, #128	@ 0x80
 8000522:	05d2      	lsls	r2, r2, #23
 8000524:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000526:	4b4b      	ldr	r3, [pc, #300]	@ (8000654 <MX_ADC1_Init+0x150>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052c:	4b49      	ldr	r3, [pc, #292]	@ (8000654 <MX_ADC1_Init+0x150>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000532:	4b48      	ldr	r3, [pc, #288]	@ (8000654 <MX_ADC1_Init+0x150>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000538:	4b46      	ldr	r3, [pc, #280]	@ (8000654 <MX_ADC1_Init+0x150>)
 800053a:	2204      	movs	r2, #4
 800053c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800053e:	4b45      	ldr	r3, [pc, #276]	@ (8000654 <MX_ADC1_Init+0x150>)
 8000540:	2200      	movs	r2, #0
 8000542:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000544:	4b43      	ldr	r3, [pc, #268]	@ (8000654 <MX_ADC1_Init+0x150>)
 8000546:	2200      	movs	r2, #0
 8000548:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800054a:	4b42      	ldr	r3, [pc, #264]	@ (8000654 <MX_ADC1_Init+0x150>)
 800054c:	2200      	movs	r2, #0
 800054e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000550:	4b40      	ldr	r3, [pc, #256]	@ (8000654 <MX_ADC1_Init+0x150>)
 8000552:	2201      	movs	r2, #1
 8000554:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000556:	4b3f      	ldr	r3, [pc, #252]	@ (8000654 <MX_ADC1_Init+0x150>)
 8000558:	2220      	movs	r2, #32
 800055a:	2100      	movs	r1, #0
 800055c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800055e:	4b3d      	ldr	r3, [pc, #244]	@ (8000654 <MX_ADC1_Init+0x150>)
 8000560:	2200      	movs	r2, #0
 8000562:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000564:	4b3b      	ldr	r3, [pc, #236]	@ (8000654 <MX_ADC1_Init+0x150>)
 8000566:	2200      	movs	r2, #0
 8000568:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800056a:	4b3a      	ldr	r3, [pc, #232]	@ (8000654 <MX_ADC1_Init+0x150>)
 800056c:	222c      	movs	r2, #44	@ 0x2c
 800056e:	2100      	movs	r1, #0
 8000570:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000572:	4b38      	ldr	r3, [pc, #224]	@ (8000654 <MX_ADC1_Init+0x150>)
 8000574:	2280      	movs	r2, #128	@ 0x80
 8000576:	0152      	lsls	r2, r2, #5
 8000578:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800057a:	4b36      	ldr	r3, [pc, #216]	@ (8000654 <MX_ADC1_Init+0x150>)
 800057c:	2200      	movs	r2, #0
 800057e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000580:	4b34      	ldr	r3, [pc, #208]	@ (8000654 <MX_ADC1_Init+0x150>)
 8000582:	2200      	movs	r2, #0
 8000584:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000586:	4b33      	ldr	r3, [pc, #204]	@ (8000654 <MX_ADC1_Init+0x150>)
 8000588:	223c      	movs	r2, #60	@ 0x3c
 800058a:	2100      	movs	r1, #0
 800058c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800058e:	4b31      	ldr	r3, [pc, #196]	@ (8000654 <MX_ADC1_Init+0x150>)
 8000590:	2200      	movs	r2, #0
 8000592:	64da      	str	r2, [r3, #76]	@ 0x4c

  HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000594:	2200      	movs	r2, #0
 8000596:	2100      	movs	r1, #0
 8000598:	200c      	movs	r0, #12
 800059a:	f002 fc97 	bl	8002ecc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800059e:	200c      	movs	r0, #12
 80005a0:	f002 fca9 	bl	8002ef6 <HAL_NVIC_EnableIRQ>

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000654 <MX_ADC1_Init+0x150>)
 80005a6:	0018      	movs	r0, r3
 80005a8:	f001 fd62 	bl	8002070 <HAL_ADC_Init>
 80005ac:	1e03      	subs	r3, r0, #0
 80005ae:	d001      	beq.n	80005b4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80005b0:	f000 fa36 	bl	8000a20 <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2201      	movs	r2, #1
 80005b8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2200      	movs	r2, #0
 80005be:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c6:	1d3a      	adds	r2, r7, #4
 80005c8:	4b22      	ldr	r3, [pc, #136]	@ (8000654 <MX_ADC1_Init+0x150>)
 80005ca:	0011      	movs	r1, r2
 80005cc:	0018      	movs	r0, r3
 80005ce:	f002 f953 	bl	8002878 <HAL_ADC_ConfigChannel>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80005d6:	f000 fa23 	bl	8000a20 <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	4a1f      	ldr	r2, [pc, #124]	@ (800065c <MX_ADC1_Init+0x158>)
 80005de:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2200      	movs	r2, #0
 80005e4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	1d3a      	adds	r2, r7, #4
 80005ee:	4b19      	ldr	r3, [pc, #100]	@ (8000654 <MX_ADC1_Init+0x150>)
 80005f0:	0011      	movs	r1, r2
 80005f2:	0018      	movs	r0, r3
 80005f4:	f002 f940 	bl	8002878 <HAL_ADC_ConfigChannel>
 80005f8:	1e03      	subs	r3, r0, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80005fc:	f000 fa10 	bl	8000a20 <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	4a17      	ldr	r2, [pc, #92]	@ (8000660 <MX_ADC1_Init+0x15c>)
 8000604:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2200      	movs	r2, #0
 800060a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000612:	1d3a      	adds	r2, r7, #4
 8000614:	4b0f      	ldr	r3, [pc, #60]	@ (8000654 <MX_ADC1_Init+0x150>)
 8000616:	0011      	movs	r1, r2
 8000618:	0018      	movs	r0, r3
 800061a:	f002 f92d 	bl	8002878 <HAL_ADC_ConfigChannel>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000622:	f000 f9fd 	bl	8000a20 <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4a0e      	ldr	r2, [pc, #56]	@ (8000664 <MX_ADC1_Init+0x160>)
 800062a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2200      	movs	r2, #0
 8000630:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000638:	1d3a      	adds	r2, r7, #4
 800063a:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <MX_ADC1_Init+0x150>)
 800063c:	0011      	movs	r1, r2
 800063e:	0018      	movs	r0, r3
 8000640:	f002 f91a 	bl	8002878 <HAL_ADC_ConfigChannel>
 8000644:	1e03      	subs	r3, r0, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x148>
  {
    Error_Handler();
 8000648:	f000 f9ea 	bl	8000a20 <Error_Handler>
  }
}
 800064c:	46c0      	nop			@ (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b004      	add	sp, #16
 8000652:	bd80      	pop	{r7, pc}
 8000654:	2000002c 	.word	0x2000002c
 8000658:	40012400 	.word	0x40012400
 800065c:	04000002 	.word	0x04000002
 8000660:	10000010 	.word	0x10000010
 8000664:	14000020 	.word	0x14000020

08000668 <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	0018      	movs	r0, r3
 8000672:	231c      	movs	r3, #28
 8000674:	001a      	movs	r2, r3
 8000676:	2100      	movs	r1, #0
 8000678:	f005 fc94 	bl	8005fa4 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800067c:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <MX_TIM14_Init+0x98>)
 800067e:	4a21      	ldr	r2, [pc, #132]	@ (8000704 <MX_TIM14_Init+0x9c>)
 8000680:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000682:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <MX_TIM14_Init+0x98>)
 8000684:	2200      	movs	r2, #0
 8000686:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000688:	4b1d      	ldr	r3, [pc, #116]	@ (8000700 <MX_TIM14_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1023;
 800068e:	4b1c      	ldr	r3, [pc, #112]	@ (8000700 <MX_TIM14_Init+0x98>)
 8000690:	4a1d      	ldr	r2, [pc, #116]	@ (8000708 <MX_TIM14_Init+0xa0>)
 8000692:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000694:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <MX_TIM14_Init+0x98>)
 8000696:	2280      	movs	r2, #128	@ 0x80
 8000698:	0052      	lsls	r2, r2, #1
 800069a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800069c:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <MX_TIM14_Init+0x98>)
 800069e:	2280      	movs	r2, #128	@ 0x80
 80006a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80006a2:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <MX_TIM14_Init+0x98>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f003 fbaf 	bl	8003e08 <HAL_TIM_Base_Init>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 80006ae:	f000 f9b7 	bl	8000a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80006b2:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <MX_TIM14_Init+0x98>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f003 fdeb 	bl	8004290 <HAL_TIM_PWM_Init>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 80006be:	f000 f9af 	bl	8000a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2260      	movs	r2, #96	@ 0x60
 80006c6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 400;
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	22c8      	movs	r2, #200	@ 0xc8
 80006cc:	0052      	lsls	r2, r2, #1
 80006ce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006dc:	1d39      	adds	r1, r7, #4
 80006de:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <MX_TIM14_Init+0x98>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	0018      	movs	r0, r3
 80006e4:	f004 f8aa 	bl	800483c <HAL_TIM_PWM_ConfigChannel>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 80006ec:	f000 f998 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80006f0:	4b03      	ldr	r3, [pc, #12]	@ (8000700 <MX_TIM14_Init+0x98>)
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 fd40 	bl	8001178 <HAL_TIM_MspPostInit>

}
 80006f8:	46c0      	nop			@ (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b008      	add	sp, #32
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000110 	.word	0x20000110
 8000704:	40002000 	.word	0x40002000
 8000708:	000003ff 	.word	0x000003ff

0800070c <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	@ 0x50
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000712:	2334      	movs	r3, #52	@ 0x34
 8000714:	18fb      	adds	r3, r7, r3
 8000716:	0018      	movs	r0, r3
 8000718:	231c      	movs	r3, #28
 800071a:	001a      	movs	r2, r3
 800071c:	2100      	movs	r1, #0
 800071e:	f005 fc41 	bl	8005fa4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000722:	003b      	movs	r3, r7
 8000724:	0018      	movs	r0, r3
 8000726:	2334      	movs	r3, #52	@ 0x34
 8000728:	001a      	movs	r2, r3
 800072a:	2100      	movs	r1, #0
 800072c:	f005 fc3a 	bl	8005fa4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000730:	4b3e      	ldr	r3, [pc, #248]	@ (800082c <MX_TIM16_Init+0x120>)
 8000732:	4a3f      	ldr	r2, [pc, #252]	@ (8000830 <MX_TIM16_Init+0x124>)
 8000734:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000736:	4b3d      	ldr	r3, [pc, #244]	@ (800082c <MX_TIM16_Init+0x120>)
 8000738:	2200      	movs	r2, #0
 800073a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073c:	4b3b      	ldr	r3, [pc, #236]	@ (800082c <MX_TIM16_Init+0x120>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 8000742:	4b3a      	ldr	r3, [pc, #232]	@ (800082c <MX_TIM16_Init+0x120>)
 8000744:	22ff      	movs	r2, #255	@ 0xff
 8000746:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000748:	4b38      	ldr	r3, [pc, #224]	@ (800082c <MX_TIM16_Init+0x120>)
 800074a:	2280      	movs	r2, #128	@ 0x80
 800074c:	0092      	lsls	r2, r2, #2
 800074e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000750:	4b36      	ldr	r3, [pc, #216]	@ (800082c <MX_TIM16_Init+0x120>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000756:	4b35      	ldr	r3, [pc, #212]	@ (800082c <MX_TIM16_Init+0x120>)
 8000758:	2280      	movs	r2, #128	@ 0x80
 800075a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800075c:	4b33      	ldr	r3, [pc, #204]	@ (800082c <MX_TIM16_Init+0x120>)
 800075e:	0018      	movs	r0, r3
 8000760:	f003 fb52 	bl	8003e08 <HAL_TIM_Base_Init>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d001      	beq.n	800076c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000768:	f000 f95a 	bl	8000a20 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 800076c:	4b2f      	ldr	r3, [pc, #188]	@ (800082c <MX_TIM16_Init+0x120>)
 800076e:	0018      	movs	r0, r3
 8000770:	f003 fbfc 	bl	8003f6c <HAL_TIM_OC_Init>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000778:	f000 f952 	bl	8000a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800077c:	2134      	movs	r1, #52	@ 0x34
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	22ff      	movs	r2, #255	@ 0xff
 8000788:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2200      	movs	r2, #0
 80007a0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007a8:	1879      	adds	r1, r7, r1
 80007aa:	4b20      	ldr	r3, [pc, #128]	@ (800082c <MX_TIM16_Init+0x120>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	0018      	movs	r0, r3
 80007b0:	f003 ffe4 	bl	800477c <HAL_TIM_OC_ConfigChannel>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 80007b8:	f000 f932 	bl	8000a20 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 80007bc:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <MX_TIM16_Init+0x120>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	699a      	ldr	r2, [r3, #24]
 80007c2:	4b1a      	ldr	r3, [pc, #104]	@ (800082c <MX_TIM16_Init+0x120>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2108      	movs	r1, #8
 80007c8:	430a      	orrs	r2, r1
 80007ca:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007cc:	003b      	movs	r3, r7
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007d2:	003b      	movs	r3, r7
 80007d4:	2200      	movs	r2, #0
 80007d6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007d8:	003b      	movs	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007de:	003b      	movs	r3, r7
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007e4:	003b      	movs	r3, r7
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ea:	003b      	movs	r3, r7
 80007ec:	2280      	movs	r2, #128	@ 0x80
 80007ee:	0192      	lsls	r2, r2, #6
 80007f0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007f2:	003b      	movs	r3, r7
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007f8:	003b      	movs	r3, r7
 80007fa:	2200      	movs	r2, #0
 80007fc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80007fe:	003a      	movs	r2, r7
 8000800:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <MX_TIM16_Init+0x120>)
 8000802:	0011      	movs	r1, r2
 8000804:	0018      	movs	r0, r3
 8000806:	f004 fe0f 	bl	8005428 <HAL_TIMEx_ConfigBreakDeadTime>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 800080e:	f000 f907 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	2015      	movs	r0, #21
 8000818:	f002 fb58 	bl	8002ecc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800081c:	2015      	movs	r0, #21
 800081e:	f002 fb6a 	bl	8002ef6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM16_Init 2 */
}
 8000822:	46c0      	nop			@ (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b014      	add	sp, #80	@ 0x50
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	200001cc 	.word	0x200001cc
 8000830:	40014400 	.word	0x40014400

08000834 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000838:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <MX_USART2_UART_Init+0x60>)
 800083a:	4a17      	ldr	r2, [pc, #92]	@ (8000898 <MX_USART2_UART_Init+0x64>)
 800083c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <MX_USART2_UART_Init+0x60>)
 8000840:	22e1      	movs	r2, #225	@ 0xe1
 8000842:	0252      	lsls	r2, r2, #9
 8000844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b13      	ldr	r3, [pc, #76]	@ (8000894 <MX_USART2_UART_Init+0x60>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_USART2_UART_Init+0x60>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000852:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <MX_USART2_UART_Init+0x60>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_USART2_UART_Init+0x60>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <MX_USART2_UART_Init+0x60>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <MX_USART2_UART_Init+0x60>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b0a      	ldr	r3, [pc, #40]	@ (8000894 <MX_USART2_UART_Init+0x60>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000870:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <MX_USART2_UART_Init+0x60>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000876:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <MX_USART2_UART_Init+0x60>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (HAL_UART_Init(&huart2) != HAL_OK)
 800087c:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <MX_USART2_UART_Init+0x60>)
 800087e:	0018      	movs	r0, r3
 8000880:	f004 fe8e 	bl	80055a0 <HAL_UART_Init>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d001      	beq.n	800088c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000888:	f000 f8ca 	bl	8000a20 <Error_Handler>
  }
}
 800088c:	46c0      	nop			@ (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	20000288 	.word	0x20000288
 8000898:	40004400 	.word	0x40004400

0800089c <MX_GPIO_Init>:
  HAL_NVIC_EnableIRQ(DMA1_Ch4_5_DMAMUX1_OVR_IRQn);

}

void MX_GPIO_Init(void)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b089      	sub	sp, #36	@ 0x24
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	240c      	movs	r4, #12
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	0018      	movs	r0, r3
 80008a8:	2314      	movs	r3, #20
 80008aa:	001a      	movs	r2, r3
 80008ac:	2100      	movs	r1, #0
 80008ae:	f005 fb79 	bl	8005fa4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	4b58      	ldr	r3, [pc, #352]	@ (8000a14 <MX_GPIO_Init+0x178>)
 80008b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008b6:	4b57      	ldr	r3, [pc, #348]	@ (8000a14 <MX_GPIO_Init+0x178>)
 80008b8:	2104      	movs	r1, #4
 80008ba:	430a      	orrs	r2, r1
 80008bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80008be:	4b55      	ldr	r3, [pc, #340]	@ (8000a14 <MX_GPIO_Init+0x178>)
 80008c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008c2:	2204      	movs	r2, #4
 80008c4:	4013      	ands	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ca:	4b52      	ldr	r3, [pc, #328]	@ (8000a14 <MX_GPIO_Init+0x178>)
 80008cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008ce:	4b51      	ldr	r3, [pc, #324]	@ (8000a14 <MX_GPIO_Init+0x178>)
 80008d0:	2120      	movs	r1, #32
 80008d2:	430a      	orrs	r2, r1
 80008d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80008d6:	4b4f      	ldr	r3, [pc, #316]	@ (8000a14 <MX_GPIO_Init+0x178>)
 80008d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008da:	2220      	movs	r2, #32
 80008dc:	4013      	ands	r3, r2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b4c      	ldr	r3, [pc, #304]	@ (8000a14 <MX_GPIO_Init+0x178>)
 80008e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008e6:	4b4b      	ldr	r3, [pc, #300]	@ (8000a14 <MX_GPIO_Init+0x178>)
 80008e8:	2101      	movs	r1, #1
 80008ea:	430a      	orrs	r2, r1
 80008ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80008ee:	4b49      	ldr	r3, [pc, #292]	@ (8000a14 <MX_GPIO_Init+0x178>)
 80008f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008f2:	2201      	movs	r2, #1
 80008f4:	4013      	ands	r3, r2
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008fa:	4b47      	ldr	r3, [pc, #284]	@ (8000a18 <MX_GPIO_Init+0x17c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	2140      	movs	r1, #64	@ 0x40
 8000900:	0018      	movs	r0, r3
 8000902:	f002 fd53 	bl	80033ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000906:	193b      	adds	r3, r7, r4
 8000908:	2204      	movs	r2, #4
 800090a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090c:	193b      	adds	r3, r7, r4
 800090e:	2288      	movs	r2, #136	@ 0x88
 8000910:	0352      	lsls	r2, r2, #13
 8000912:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	193b      	adds	r3, r7, r4
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 800091a:	193b      	adds	r3, r7, r4
 800091c:	4a3f      	ldr	r2, [pc, #252]	@ (8000a1c <MX_GPIO_Init+0x180>)
 800091e:	0019      	movs	r1, r3
 8000920:	0010      	movs	r0, r2
 8000922:	f002 fbdf 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */ // - on-board green LED
  GPIO_InitStruct.Pin = LD3_Pin;
 8000926:	193b      	adds	r3, r7, r4
 8000928:	2240      	movs	r2, #64	@ 0x40
 800092a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	193b      	adds	r3, r7, r4
 800092e:	2201      	movs	r2, #1
 8000930:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000938:	193b      	adds	r3, r7, r4
 800093a:	4a37      	ldr	r2, [pc, #220]	@ (8000a18 <MX_GPIO_Init+0x17c>)
 800093c:	0019      	movs	r1, r3
 800093e:	0010      	movs	r0, r2
 8000940:	f002 fbd0 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH0_Pin */
  GPIO_InitStruct.Pin = ADC_CH0_Pin;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2201      	movs	r2, #1
 8000948:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2203      	movs	r2, #3
 800094e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	193b      	adds	r3, r7, r4
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH0_GPIO_Port, &GPIO_InitStruct);
 8000956:	193a      	adds	r2, r7, r4
 8000958:	23a0      	movs	r3, #160	@ 0xa0
 800095a:	05db      	lsls	r3, r3, #23
 800095c:	0011      	movs	r1, r2
 800095e:	0018      	movs	r0, r3
 8000960:	f002 fbc0 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH1_Pin */
  GPIO_InitStruct.Pin = ADC_CH1_Pin;
 8000964:	193b      	adds	r3, r7, r4
 8000966:	2202      	movs	r2, #2
 8000968:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800096a:	193b      	adds	r3, r7, r4
 800096c:	2203      	movs	r2, #3
 800096e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	193b      	adds	r3, r7, r4
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH1_GPIO_Port, &GPIO_InitStruct);
 8000976:	193a      	adds	r2, r7, r4
 8000978:	23a0      	movs	r3, #160	@ 0xa0
 800097a:	05db      	lsls	r3, r3, #23
 800097c:	0011      	movs	r1, r2
 800097e:	0018      	movs	r0, r3
 8000980:	f002 fbb0 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH4_Pin */
  GPIO_InitStruct.Pin = ADC_CH4_Pin;
 8000984:	193b      	adds	r3, r7, r4
 8000986:	2210      	movs	r2, #16
 8000988:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800098a:	193b      	adds	r3, r7, r4
 800098c:	2203      	movs	r2, #3
 800098e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	193b      	adds	r3, r7, r4
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH4_GPIO_Port, &GPIO_InitStruct);
 8000996:	193a      	adds	r2, r7, r4
 8000998:	23a0      	movs	r3, #160	@ 0xa0
 800099a:	05db      	lsls	r3, r3, #23
 800099c:	0011      	movs	r1, r2
 800099e:	0018      	movs	r0, r3
 80009a0:	f002 fba0 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH5_Pin */
  GPIO_InitStruct.Pin = ADC_CH5_Pin;
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	2220      	movs	r2, #32
 80009a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	2203      	movs	r2, #3
 80009ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH5_GPIO_Port, &GPIO_InitStruct);
 80009b6:	193a      	adds	r2, r7, r4
 80009b8:	23a0      	movs	r3, #160	@ 0xa0
 80009ba:	05db      	lsls	r3, r3, #23
 80009bc:	0011      	movs	r1, r2
 80009be:	0018      	movs	r0, r3
 80009c0:	f002 fb90 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ISR measurement pin */
  GPIO_InitStruct.Pin = ISR_MEAS_Pin;
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	2280      	movs	r2, #128	@ 0x80
 80009c8:	0152      	lsls	r2, r2, #5
 80009ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	2201      	movs	r2, #1
 80009d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ISR_MEAS_GPIO_Port, &GPIO_InitStruct);
 80009d8:	193a      	adds	r2, r7, r4
 80009da:	23a0      	movs	r3, #160	@ 0xa0
 80009dc:	05db      	lsls	r3, r3, #23
 80009de:	0011      	movs	r1, r2
 80009e0:	0018      	movs	r0, r3
 80009e2:	f002 fb7f 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SYM processing flag pin */
  GPIO_InitStruct.Pin = SYM_PROC_Pin;
 80009e6:	0021      	movs	r1, r4
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2280      	movs	r2, #128	@ 0x80
 80009ec:	0112      	lsls	r2, r2, #4
 80009ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2201      	movs	r2, #1
 80009f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SYM_PROC_GPIO_Port, &GPIO_InitStruct);
 80009fc:	187a      	adds	r2, r7, r1
 80009fe:	23a0      	movs	r3, #160	@ 0xa0
 8000a00:	05db      	lsls	r3, r3, #23
 8000a02:	0011      	movs	r1, r2
 8000a04:	0018      	movs	r0, r3
 8000a06:	f002 fb6d 	bl	80030e4 <HAL_GPIO_Init>
}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b009      	add	sp, #36	@ 0x24
 8000a10:	bd90      	pop	{r4, r7, pc}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	40021000 	.word	0x40021000
 8000a18:	50000800 	.word	0x50000800
 8000a1c:	50001400 	.word	0x50001400

08000a20 <Error_Handler>:

void Error_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a24:	b672      	cpsid	i
}
 8000a26:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a28:	46c0      	nop			@ (mov r8, r8)
 8000a2a:	e7fd      	b.n	8000a28 <Error_Handler+0x8>

08000a2c <System_Init>:
  {

  }
}

void System_Init(void){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a30:	f001 f956 	bl	8001ce0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000a34:	f7ff fd08 	bl	8000448 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a38:	f7ff ff30 	bl	800089c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000a3c:	f7ff fefa 	bl	8000834 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8000a40:	f7ff fd60 	bl	8000504 <MX_ADC1_Init>
	MX_TIM14_Init();
 8000a44:	f7ff fe10 	bl	8000668 <MX_TIM14_Init>
	MX_TIM16_Init();
 8000a48:	f7ff fe60 	bl	800070c <MX_TIM16_Init>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM16_callback);
 8000a4c:	4a04      	ldr	r2, [pc, #16]	@ (8000a60 <System_Init+0x34>)
 8000a4e:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <System_Init+0x38>)
 8000a50:	2114      	movs	r1, #20
 8000a52:	0018      	movs	r0, r3
 8000a54:	f004 f842 	bl	8004adc <HAL_TIM_RegisterCallback>

}
 8000a58:	46c0      	nop			@ (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	08000a69 	.word	0x08000a69
 8000a64:	200001cc 	.word	0x200001cc

08000a68 <TIM16_callback>:
#include "custom_callbacks.h"

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	//TIM16 interrupt flag is already cleared by stm32g0xx_it.c

	TIM16_callback_active = YES;
 8000a70:	4bb1      	ldr	r3, [pc, #708]	@ (8000d38 <TIM16_callback+0x2d0>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	701a      	strb	r2, [r3, #0]
	Global_Interrupt_Disable();
 8000a76:	f000 fc3f 	bl	80012f8 <Global_Interrupt_Disable>
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000a7a:	2380      	movs	r3, #128	@ 0x80
 8000a7c:	0159      	lsls	r1, r3, #5
 8000a7e:	23a0      	movs	r3, #160	@ 0xa0
 8000a80:	05db      	lsls	r3, r3, #23
 8000a82:	2201      	movs	r2, #1
 8000a84:	0018      	movs	r0, r3
 8000a86:	f002 fc91 	bl	80033ac <HAL_GPIO_WritePin>

	//////////////////////////
	//SET THE CURRENT(prev) VALUES//
	//////////////////////////
	__HAL_TIM_SET_COUNTER(&htim16, TIM16_final_start_value_locked); //this line must go here, or at least very near the beginning!
 8000a8a:	4bac      	ldr	r3, [pc, #688]	@ (8000d3c <TIM16_callback+0x2d4>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	4bab      	ldr	r3, [pc, #684]	@ (8000d40 <TIM16_callback+0x2d8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_PRESCALER(&htim16, (TIM16_prescaler_divisors[TIM16_prescaler_divisors_final_index_locked]) - 1); //have to take one off the divisor
 8000a96:	4bab      	ldr	r3, [pc, #684]	@ (8000d44 <TIM16_callback+0x2dc>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	4baa      	ldr	r3, [pc, #680]	@ (8000d48 <TIM16_callback+0x2e0>)
 8000aa0:	0052      	lsls	r2, r2, #1
 8000aa2:	5ad3      	ldrh	r3, [r2, r3]
 8000aa4:	1e5a      	subs	r2, r3, #1
 8000aa6:	4ba6      	ldr	r3, [pc, #664]	@ (8000d40 <TIM16_callback+0x2d8>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	629a      	str	r2, [r3, #40]	@ 0x28
	//htim16.Init.Prescaler = (TIM16_prescaler_divisors[TIM16_prescaler_divisors_final_index_locked]) - 1;
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8000aac:	4ba7      	ldr	r3, [pc, #668]	@ (8000d4c <TIM16_callback+0x2e4>)
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	4ba7      	ldr	r3, [pc, #668]	@ (8000d50 <TIM16_callback+0x2e8>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	635a      	str	r2, [r3, #52]	@ 0x34
	/////////////////////////////
	//CALCULATE THE NEXT VALUES//
	/////////////////////////////
	current_index++;
 8000ab8:	4ba6      	ldr	r3, [pc, #664]	@ (8000d54 <TIM16_callback+0x2ec>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	3301      	adds	r3, #1
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	4ba4      	ldr	r3, [pc, #656]	@ (8000d54 <TIM16_callback+0x2ec>)
 8000ac4:	801a      	strh	r2, [r3, #0]

	if(current_index == FINAL_INDEX + 1){
 8000ac6:	4ba3      	ldr	r3, [pc, #652]	@ (8000d54 <TIM16_callback+0x2ec>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	2380      	movs	r3, #128	@ 0x80
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d108      	bne.n	8000ae6 <TIM16_callback+0x7e>
		current_quadrant = FIRST_QUADRANT;
 8000ad4:	4ba0      	ldr	r3, [pc, #640]	@ (8000d58 <TIM16_callback+0x2f0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
		current_halfcycle = FIRST_HALFCYCLE;
 8000ada:	4ba0      	ldr	r3, [pc, #640]	@ (8000d5c <TIM16_callback+0x2f4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
		current_index = 0;
 8000ae0:	4b9c      	ldr	r3, [pc, #624]	@ (8000d54 <TIM16_callback+0x2ec>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	801a      	strh	r2, [r3, #0]
	}

	if(current_waveshape == TRIANGLE_MODE){
 8000ae6:	4b9e      	ldr	r3, [pc, #632]	@ (8000d60 <TIM16_callback+0x2f8>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d109      	bne.n	8000b04 <TIM16_callback+0x9c>
		duty = tri_wavetable[current_index];
 8000af0:	4b98      	ldr	r3, [pc, #608]	@ (8000d54 <TIM16_callback+0x2ec>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	001a      	movs	r2, r3
 8000af8:	4b9a      	ldr	r3, [pc, #616]	@ (8000d64 <TIM16_callback+0x2fc>)
 8000afa:	0052      	lsls	r2, r2, #1
 8000afc:	5ad2      	ldrh	r2, [r2, r3]
 8000afe:	4b9a      	ldr	r3, [pc, #616]	@ (8000d68 <TIM16_callback+0x300>)
 8000b00:	801a      	strh	r2, [r3, #0]
 8000b02:	e040      	b.n	8000b86 <TIM16_callback+0x11e>
	}
	else if(current_waveshape == SINE_MODE){
 8000b04:	4b96      	ldr	r3, [pc, #600]	@ (8000d60 <TIM16_callback+0x2f8>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d109      	bne.n	8000b22 <TIM16_callback+0xba>
		duty = sine_wavetable[current_index];
 8000b0e:	4b91      	ldr	r3, [pc, #580]	@ (8000d54 <TIM16_callback+0x2ec>)
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	001a      	movs	r2, r3
 8000b16:	4b95      	ldr	r3, [pc, #596]	@ (8000d6c <TIM16_callback+0x304>)
 8000b18:	0052      	lsls	r2, r2, #1
 8000b1a:	5ad2      	ldrh	r2, [r2, r3]
 8000b1c:	4b92      	ldr	r3, [pc, #584]	@ (8000d68 <TIM16_callback+0x300>)
 8000b1e:	801a      	strh	r2, [r3, #0]
 8000b20:	e031      	b.n	8000b86 <TIM16_callback+0x11e>
	}
	else if((current_waveshape == SQUARE_MODE) && (current_index < SECOND_QUADRANT_START_INDEX)){
 8000b22:	4b8f      	ldr	r3, [pc, #572]	@ (8000d60 <TIM16_callback+0x2f8>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d108      	bne.n	8000b3e <TIM16_callback+0xd6>
 8000b2c:	4b89      	ldr	r3, [pc, #548]	@ (8000d54 <TIM16_callback+0x2ec>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b34:	d803      	bhi.n	8000b3e <TIM16_callback+0xd6>
		duty = 1023;
 8000b36:	4b8c      	ldr	r3, [pc, #560]	@ (8000d68 <TIM16_callback+0x300>)
 8000b38:	4a8d      	ldr	r2, [pc, #564]	@ (8000d70 <TIM16_callback+0x308>)
 8000b3a:	801a      	strh	r2, [r3, #0]
 8000b3c:	e023      	b.n	8000b86 <TIM16_callback+0x11e>
	}
	else if((current_waveshape == SQUARE_MODE) && (current_index >= SECOND_QUADRANT_START_INDEX) && (current_index < FOURTH_QUADRANT_START_INDEX)){
 8000b3e:	4b88      	ldr	r3, [pc, #544]	@ (8000d60 <TIM16_callback+0x2f8>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d10f      	bne.n	8000b68 <TIM16_callback+0x100>
 8000b48:	4b82      	ldr	r3, [pc, #520]	@ (8000d54 <TIM16_callback+0x2ec>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b50:	d90a      	bls.n	8000b68 <TIM16_callback+0x100>
 8000b52:	4b80      	ldr	r3, [pc, #512]	@ (8000d54 <TIM16_callback+0x2ec>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	23c0      	movs	r3, #192	@ 0xc0
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d203      	bcs.n	8000b68 <TIM16_callback+0x100>
			duty = 0;
 8000b60:	4b81      	ldr	r3, [pc, #516]	@ (8000d68 <TIM16_callback+0x300>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	801a      	strh	r2, [r3, #0]
 8000b66:	e00e      	b.n	8000b86 <TIM16_callback+0x11e>
	}
	else if((current_waveshape == SQUARE_MODE) && (current_index >= FOURTH_QUADRANT_START_INDEX)){
 8000b68:	4b7d      	ldr	r3, [pc, #500]	@ (8000d60 <TIM16_callback+0x2f8>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d109      	bne.n	8000b86 <TIM16_callback+0x11e>
 8000b72:	4b78      	ldr	r3, [pc, #480]	@ (8000d54 <TIM16_callback+0x2ec>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	23c0      	movs	r3, #192	@ 0xc0
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d302      	bcc.n	8000b86 <TIM16_callback+0x11e>
		duty = 1023;
 8000b80:	4b79      	ldr	r3, [pc, #484]	@ (8000d68 <TIM16_callback+0x300>)
 8000b82:	4a7b      	ldr	r2, [pc, #492]	@ (8000d70 <TIM16_callback+0x308>)
 8000b84:	801a      	strh	r2, [r3, #0]
	}

	if(current_index == FIRST_QUADRANT_START_INDEX){
 8000b86:	4b73      	ldr	r3, [pc, #460]	@ (8000d54 <TIM16_callback+0x2ec>)
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d106      	bne.n	8000b9e <TIM16_callback+0x136>
		current_quadrant = FIRST_QUADRANT;
 8000b90:	4b71      	ldr	r3, [pc, #452]	@ (8000d58 <TIM16_callback+0x2f0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
		current_halfcycle = FIRST_HALFCYCLE;
 8000b96:	4b71      	ldr	r3, [pc, #452]	@ (8000d5c <TIM16_callback+0x2f4>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	e026      	b.n	8000bec <TIM16_callback+0x184>
	}
	else if(current_index == SECOND_QUADRANT_START_INDEX){
 8000b9e:	4b6d      	ldr	r3, [pc, #436]	@ (8000d54 <TIM16_callback+0x2ec>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	2b80      	cmp	r3, #128	@ 0x80
 8000ba6:	d106      	bne.n	8000bb6 <TIM16_callback+0x14e>
		current_quadrant = SECOND_QUADRANT;
 8000ba8:	4b6b      	ldr	r3, [pc, #428]	@ (8000d58 <TIM16_callback+0x2f0>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	701a      	strb	r2, [r3, #0]
		current_halfcycle = FIRST_HALFCYCLE;
 8000bae:	4b6b      	ldr	r3, [pc, #428]	@ (8000d5c <TIM16_callback+0x2f4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
 8000bb4:	e01a      	b.n	8000bec <TIM16_callback+0x184>
	}
	else if(current_index == THIRD_QUADRANT_START_INDEX){
 8000bb6:	4b67      	ldr	r3, [pc, #412]	@ (8000d54 <TIM16_callback+0x2ec>)
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	2380      	movs	r3, #128	@ 0x80
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d106      	bne.n	8000bd2 <TIM16_callback+0x16a>
		current_quadrant = FIRST_QUADRANT;
 8000bc4:	4b64      	ldr	r3, [pc, #400]	@ (8000d58 <TIM16_callback+0x2f0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
		current_halfcycle = SECOND_HALFCYCLE;
 8000bca:	4b64      	ldr	r3, [pc, #400]	@ (8000d5c <TIM16_callback+0x2f4>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]
 8000bd0:	e00c      	b.n	8000bec <TIM16_callback+0x184>
	}
	else if(current_index == FOURTH_QUADRANT_START_INDEX){
 8000bd2:	4b60      	ldr	r3, [pc, #384]	@ (8000d54 <TIM16_callback+0x2ec>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	23c0      	movs	r3, #192	@ 0xc0
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d105      	bne.n	8000bec <TIM16_callback+0x184>
		current_quadrant = SECOND_QUADRANT;
 8000be0:	4b5d      	ldr	r3, [pc, #372]	@ (8000d58 <TIM16_callback+0x2f0>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
		current_halfcycle = SECOND_HALFCYCLE;
 8000be6:	4b5d      	ldr	r3, [pc, #372]	@ (8000d5c <TIM16_callback+0x2f4>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	701a      	strb	r2, [r3, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(current_depth == 255){
 8000bec:	4b61      	ldr	r3, [pc, #388]	@ (8000d74 <TIM16_callback+0x30c>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	2bff      	cmp	r3, #255	@ 0xff
 8000bf4:	d108      	bne.n	8000c08 <TIM16_callback+0x1a0>
			duty = 1023 - duty;
 8000bf6:	4b5c      	ldr	r3, [pc, #368]	@ (8000d68 <TIM16_callback+0x300>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	4a5c      	ldr	r2, [pc, #368]	@ (8000d70 <TIM16_callback+0x308>)
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	4b59      	ldr	r3, [pc, #356]	@ (8000d68 <TIM16_callback+0x300>)
 8000c04:	801a      	strh	r2, [r3, #0]
 8000c06:	e00a      	b.n	8000c1e <TIM16_callback+0x1b6>
		}
		else if(current_depth != 0){
 8000c08:	4b5a      	ldr	r3, [pc, #360]	@ (8000d74 <TIM16_callback+0x30c>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d002      	beq.n	8000c18 <TIM16_callback+0x1b0>
			//duty = 1023 - duty*(current_depth >> 8);
			Multiply_Duty_By_Current_Depth_and_Divide_By_256();
 8000c12:	f000 f8c3 	bl	8000d9c <Multiply_Duty_By_Current_Depth_and_Divide_By_256>
 8000c16:	e002      	b.n	8000c1e <TIM16_callback+0x1b6>
		}
		else{
			duty = 1023; //if depth is 0, just output 1023
 8000c18:	4b53      	ldr	r3, [pc, #332]	@ (8000d68 <TIM16_callback+0x300>)
 8000c1a:	4a55      	ldr	r2, [pc, #340]	@ (8000d70 <TIM16_callback+0x308>)
 8000c1c:	801a      	strh	r2, [r3, #0]
		}

	#endif

	prev_duty = duty;
 8000c1e:	4b52      	ldr	r3, [pc, #328]	@ (8000d68 <TIM16_callback+0x300>)
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	4b49      	ldr	r3, [pc, #292]	@ (8000d4c <TIM16_callback+0x2e4>)
 8000c26:	801a      	strh	r2, [r3, #0]



	hadc1.Instance->CHSELR = ADC_CHANNEL_0;
 8000c28:	4b53      	ldr	r3, [pc, #332]	@ (8000d78 <TIM16_callback+0x310>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_ADC_Start(&hadc1);
 8000c30:	4b51      	ldr	r3, [pc, #324]	@ (8000d78 <TIM16_callback+0x310>)
 8000c32:	0018      	movs	r0, r3
 8000c34:	f001 fbf4 	bl	8002420 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 8000c38:	4b4f      	ldr	r3, [pc, #316]	@ (8000d78 <TIM16_callback+0x310>)
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f001 fc3d 	bl	80024bc <HAL_ADC_PollForConversion>
	uint16_t ADC_result = (uint16_t)HAL_ADC_GetValue(&hadc1); //set ADC_Result to waveshape index value
 8000c42:	4b4d      	ldr	r3, [pc, #308]	@ (8000d78 <TIM16_callback+0x310>)
 8000c44:	0018      	movs	r0, r3
 8000c46:	f001 fccd 	bl	80025e4 <HAL_ADC_GetValue>
 8000c4a:	0002      	movs	r2, r0
 8000c4c:	210e      	movs	r1, #14
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	4a49      	ldr	r2, [pc, #292]	@ (8000d7c <TIM16_callback+0x314>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d803      	bhi.n	8000c64 <TIM16_callback+0x1fc>
		current_waveshape = TRIANGLE_MODE; //triangle wave
 8000c5c:	4b40      	ldr	r3, [pc, #256]	@ (8000d60 <TIM16_callback+0x2f8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	e017      	b.n	8000c94 <TIM16_callback+0x22c>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8000c64:	230e      	movs	r3, #14
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	4a45      	ldr	r2, [pc, #276]	@ (8000d80 <TIM16_callback+0x318>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d803      	bhi.n	8000c78 <TIM16_callback+0x210>
		current_waveshape = SINE_MODE; //sine wave
 8000c70:	4b3b      	ldr	r3, [pc, #236]	@ (8000d60 <TIM16_callback+0x2f8>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e00d      	b.n	8000c94 <TIM16_callback+0x22c>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 8000c78:	230e      	movs	r3, #14
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	881a      	ldrh	r2, [r3, #0]
 8000c7e:	2380      	movs	r3, #128	@ 0x80
 8000c80:	015b      	lsls	r3, r3, #5
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d203      	bcs.n	8000c8e <TIM16_callback+0x226>
		current_waveshape = SQUARE_MODE; //square wave
 8000c86:	4b36      	ldr	r3, [pc, #216]	@ (8000d60 <TIM16_callback+0x2f8>)
 8000c88:	2202      	movs	r2, #2
 8000c8a:	701a      	strb	r2, [r3, #0]
 8000c8c:	e002      	b.n	8000c94 <TIM16_callback+0x22c>
	}
	else{
		current_waveshape = SINE_MODE; //if error, return sine
 8000c8e:	4b34      	ldr	r3, [pc, #208]	@ (8000d60 <TIM16_callback+0x2f8>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]
	}



	hadc1.Instance->CHSELR = ADC_CHANNEL_1;
 8000c94:	4b38      	ldr	r3, [pc, #224]	@ (8000d78 <TIM16_callback+0x310>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a3a      	ldr	r2, [pc, #232]	@ (8000d84 <TIM16_callback+0x31c>)
 8000c9a:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_ADC_Start(&hadc1);
 8000c9c:	4b36      	ldr	r3, [pc, #216]	@ (8000d78 <TIM16_callback+0x310>)
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f001 fbbe 	bl	8002420 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 8000ca4:	4b34      	ldr	r3, [pc, #208]	@ (8000d78 <TIM16_callback+0x310>)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f001 fc07 	bl	80024bc <HAL_ADC_PollForConversion>
	current_speed_linear = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 2; //convert to 10-bit
 8000cae:	4b32      	ldr	r3, [pc, #200]	@ (8000d78 <TIM16_callback+0x310>)
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f001 fc97 	bl	80025e4 <HAL_ADC_GetValue>
 8000cb6:	0003      	movs	r3, r0
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	089b      	lsrs	r3, r3, #2
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	4b32      	ldr	r3, [pc, #200]	@ (8000d88 <TIM16_callback+0x320>)
 8000cc0:	801a      	strh	r2, [r3, #0]



	hadc1.Instance->CHSELR = ADC_CHANNEL_4;
 8000cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d78 <TIM16_callback+0x310>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a31      	ldr	r2, [pc, #196]	@ (8000d8c <TIM16_callback+0x324>)
 8000cc8:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_ADC_Start(&hadc1);
 8000cca:	4b2b      	ldr	r3, [pc, #172]	@ (8000d78 <TIM16_callback+0x310>)
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f001 fba7 	bl	8002420 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 8000cd2:	4b29      	ldr	r3, [pc, #164]	@ (8000d78 <TIM16_callback+0x310>)
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f001 fbf0 	bl	80024bc <HAL_ADC_PollForConversion>
	current_depth = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 4; //convert to 8-bit
 8000cdc:	4b26      	ldr	r3, [pc, #152]	@ (8000d78 <TIM16_callback+0x310>)
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f001 fc80 	bl	80025e4 <HAL_ADC_GetValue>
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	091b      	lsrs	r3, r3, #4
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	4b21      	ldr	r3, [pc, #132]	@ (8000d74 <TIM16_callback+0x30c>)
 8000cee:	801a      	strh	r2, [r3, #0]



	hadc1.Instance->CHSELR = ADC_CHANNEL_5;
 8000cf0:	4b21      	ldr	r3, [pc, #132]	@ (8000d78 <TIM16_callback+0x310>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a26      	ldr	r2, [pc, #152]	@ (8000d90 <TIM16_callback+0x328>)
 8000cf6:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_ADC_Start(&hadc1);
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d78 <TIM16_callback+0x310>)
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f001 fb90 	bl	8002420 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 8000d00:	4b1d      	ldr	r3, [pc, #116]	@ (8000d78 <TIM16_callback+0x310>)
 8000d02:	2100      	movs	r1, #0
 8000d04:	0018      	movs	r0, r3
 8000d06:	f001 fbd9 	bl	80024bc <HAL_ADC_PollForConversion>
		current_symmetry = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 2;

	#endif

	#if SYMMETRY_ADC_RESOLUTION == 8
		current_symmetry = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 4;
 8000d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <TIM16_callback+0x310>)
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f001 fc69 	bl	80025e4 <HAL_ADC_GetValue>
 8000d12:	0003      	movs	r3, r0
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	091b      	lsrs	r3, r3, #4
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	001a      	movs	r2, r3
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d94 <TIM16_callback+0x32c>)
 8000d1e:	601a      	str	r2, [r3, #0]
	#if SYMMETRY_ADC_RESOLUTION == 12
		current_symmetry = (uint16_t)HAL_ADC_GetValue(&hadc1);

	#endif

	TIM16_callback_active = NO;
 8000d20:	4b05      	ldr	r3, [pc, #20]	@ (8000d38 <TIM16_callback+0x2d0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
	Global_Interrupt_Enable();
 8000d26:	f000 fadf 	bl	80012e8 <Global_Interrupt_Enable>
	isr_done = YES;
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <TIM16_callback+0x330>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
}
 8000d30:	46c0      	nop			@ (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b004      	add	sp, #16
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2000033d 	.word	0x2000033d
 8000d3c:	2000033e 	.word	0x2000033e
 8000d40:	200001cc 	.word	0x200001cc
 8000d44:	2000033b 	.word	0x2000033b
 8000d48:	08006814 	.word	0x08006814
 8000d4c:	20000340 	.word	0x20000340
 8000d50:	20000110 	.word	0x20000110
 8000d54:	2000032c 	.word	0x2000032c
 8000d58:	2000032f 	.word	0x2000032f
 8000d5c:	2000032e 	.word	0x2000032e
 8000d60:	2000031c 	.word	0x2000031c
 8000d64:	08006414 	.word	0x08006414
 8000d68:	20000338 	.word	0x20000338
 8000d6c:	08006014 	.word	0x08006014
 8000d70:	000003ff 	.word	0x000003ff
 8000d74:	20000324 	.word	0x20000324
 8000d78:	2000002c 	.word	0x2000002c
 8000d7c:	00000555 	.word	0x00000555
 8000d80:	00000aaa 	.word	0x00000aaa
 8000d84:	04000002 	.word	0x04000002
 8000d88:	2000031e 	.word	0x2000031e
 8000d8c:	10000010 	.word	0x10000010
 8000d90:	14000020 	.word	0x14000020
 8000d94:	20000328 	.word	0x20000328
 8000d98:	20000000 	.word	0x20000000

08000d9c <Multiply_Duty_By_Current_Depth_and_Divide_By_256>:

uint8_t Multiply_Duty_By_Current_Depth_and_Divide_By_256(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
	volatile uint32_t multiply_product = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]

	//Perform: (duty*current_depth) / 256
	multiply_product = duty * current_depth; //compiler should compile this as a hardware multiplication, but need to check
 8000da6:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd4 <Multiply_Duty_By_Current_Depth_and_Divide_By_256+0x38>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	001a      	movs	r2, r3
 8000dae:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd8 <Multiply_Duty_By_Current_Depth_and_Divide_By_256+0x3c>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	4353      	muls	r3, r2
 8000db6:	607b      	str	r3, [r7, #4]
    duty = 1023 - (uint16_t)(multiply_product >> 8);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	0a1b      	lsrs	r3, r3, #8
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	4a07      	ldr	r2, [pc, #28]	@ (8000ddc <Multiply_Duty_By_Current_Depth_and_Divide_By_256+0x40>)
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	4b03      	ldr	r3, [pc, #12]	@ (8000dd4 <Multiply_Duty_By_Current_Depth_and_Divide_By_256+0x38>)
 8000dc6:	801a      	strh	r2, [r3, #0]

    return 1;
 8000dc8:	2301      	movs	r3, #1
}
 8000dca:	0018      	movs	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b002      	add	sp, #8
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	20000338 	.word	0x20000338
 8000dd8:	20000324 	.word	0x20000324
 8000ddc:	000003ff 	.word	0x000003ff

08000de0 <main>:

//INCLUDES
#include "system.h"

int main(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
	System_Init();
 8000de6:	f7ff fe21 	bl	8000a2c <System_Init>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 8000dea:	f000 fa7d 	bl	80012e8 <Global_Interrupt_Enable>


	hadc1.Instance->CHSELR = ADC_CHANNEL_0;
 8000dee:	4b59      	ldr	r3, [pc, #356]	@ (8000f54 <main+0x174>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2201      	movs	r2, #1
 8000df4:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_ADC_Start(&hadc1);
 8000df6:	4b57      	ldr	r3, [pc, #348]	@ (8000f54 <main+0x174>)
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f001 fb11 	bl	8002420 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 8000dfe:	4b55      	ldr	r3, [pc, #340]	@ (8000f54 <main+0x174>)
 8000e00:	2100      	movs	r1, #0
 8000e02:	0018      	movs	r0, r3
 8000e04:	f001 fb5a 	bl	80024bc <HAL_ADC_PollForConversion>
	uint16_t ADC_result = (uint16_t)HAL_ADC_GetValue(&hadc1); //set ADC_Result to waveshape index value
 8000e08:	4b52      	ldr	r3, [pc, #328]	@ (8000f54 <main+0x174>)
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f001 fbea 	bl	80025e4 <HAL_ADC_GetValue>
 8000e10:	0002      	movs	r2, r0
 8000e12:	1dbb      	adds	r3, r7, #6
 8000e14:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000e16:	1dbb      	adds	r3, r7, #6
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	4a4f      	ldr	r2, [pc, #316]	@ (8000f58 <main+0x178>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d803      	bhi.n	8000e28 <main+0x48>
		current_waveshape = TRIANGLE_MODE; //triangle wave
 8000e20:	4b4e      	ldr	r3, [pc, #312]	@ (8000f5c <main+0x17c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
 8000e26:	e015      	b.n	8000e54 <main+0x74>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8000e28:	1dbb      	adds	r3, r7, #6
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	4a4c      	ldr	r2, [pc, #304]	@ (8000f60 <main+0x180>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d803      	bhi.n	8000e3a <main+0x5a>
		current_waveshape = SINE_MODE; //sine wave
 8000e32:	4b4a      	ldr	r3, [pc, #296]	@ (8000f5c <main+0x17c>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
 8000e38:	e00c      	b.n	8000e54 <main+0x74>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 8000e3a:	1dbb      	adds	r3, r7, #6
 8000e3c:	881a      	ldrh	r2, [r3, #0]
 8000e3e:	2380      	movs	r3, #128	@ 0x80
 8000e40:	015b      	lsls	r3, r3, #5
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d203      	bcs.n	8000e4e <main+0x6e>
		current_waveshape = SQUARE_MODE; //square wave
 8000e46:	4b45      	ldr	r3, [pc, #276]	@ (8000f5c <main+0x17c>)
 8000e48:	2202      	movs	r2, #2
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	e002      	b.n	8000e54 <main+0x74>
	}
	else{
		current_waveshape = SINE_MODE; //if error, return sine
 8000e4e:	4b43      	ldr	r3, [pc, #268]	@ (8000f5c <main+0x17c>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
	}



	hadc1.Instance->CHSELR = ADC_CHANNEL_1;
 8000e54:	4b3f      	ldr	r3, [pc, #252]	@ (8000f54 <main+0x174>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a42      	ldr	r2, [pc, #264]	@ (8000f64 <main+0x184>)
 8000e5a:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_ADC_Start(&hadc1);
 8000e5c:	4b3d      	ldr	r3, [pc, #244]	@ (8000f54 <main+0x174>)
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f001 fade 	bl	8002420 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 8000e64:	4b3b      	ldr	r3, [pc, #236]	@ (8000f54 <main+0x174>)
 8000e66:	2100      	movs	r1, #0
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f001 fb27 	bl	80024bc <HAL_ADC_PollForConversion>
	current_speed_linear = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 2; //convert to 10-bit
 8000e6e:	4b39      	ldr	r3, [pc, #228]	@ (8000f54 <main+0x174>)
 8000e70:	0018      	movs	r0, r3
 8000e72:	f001 fbb7 	bl	80025e4 <HAL_ADC_GetValue>
 8000e76:	0003      	movs	r3, r0
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	089b      	lsrs	r3, r3, #2
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f68 <main+0x188>)
 8000e80:	801a      	strh	r2, [r3, #0]



	hadc1.Instance->CHSELR = ADC_CHANNEL_4;
 8000e82:	4b34      	ldr	r3, [pc, #208]	@ (8000f54 <main+0x174>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a39      	ldr	r2, [pc, #228]	@ (8000f6c <main+0x18c>)
 8000e88:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_ADC_Start(&hadc1);
 8000e8a:	4b32      	ldr	r3, [pc, #200]	@ (8000f54 <main+0x174>)
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f001 fac7 	bl	8002420 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 8000e92:	4b30      	ldr	r3, [pc, #192]	@ (8000f54 <main+0x174>)
 8000e94:	2100      	movs	r1, #0
 8000e96:	0018      	movs	r0, r3
 8000e98:	f001 fb10 	bl	80024bc <HAL_ADC_PollForConversion>
	current_depth = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 4; //convert to 8-bit
 8000e9c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f54 <main+0x174>)
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f001 fba0 	bl	80025e4 <HAL_ADC_GetValue>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	091b      	lsrs	r3, r3, #4
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4b30      	ldr	r3, [pc, #192]	@ (8000f70 <main+0x190>)
 8000eae:	801a      	strh	r2, [r3, #0]



	hadc1.Instance->CHSELR = ADC_CHANNEL_5;
 8000eb0:	4b28      	ldr	r3, [pc, #160]	@ (8000f54 <main+0x174>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a2f      	ldr	r2, [pc, #188]	@ (8000f74 <main+0x194>)
 8000eb6:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_ADC_Start(&hadc1);
 8000eb8:	4b26      	ldr	r3, [pc, #152]	@ (8000f54 <main+0x174>)
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f001 fab0 	bl	8002420 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0.1);
 8000ec0:	4b24      	ldr	r3, [pc, #144]	@ (8000f54 <main+0x174>)
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f001 faf9 	bl	80024bc <HAL_ADC_PollForConversion>
		current_symmetry = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 2;

	#endif

	#if SYMMETRY_ADC_RESOLUTION == 8
		current_symmetry = (uint16_t)HAL_ADC_GetValue(&hadc1) >> 4;
 8000eca:	4b22      	ldr	r3, [pc, #136]	@ (8000f54 <main+0x174>)
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f001 fb89 	bl	80025e4 <HAL_ADC_GetValue>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	091b      	lsrs	r3, r3, #4
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	001a      	movs	r2, r3
 8000edc:	4b26      	ldr	r3, [pc, #152]	@ (8000f78 <main+0x198>)
 8000ede:	601a      	str	r2, [r3, #0]
	#endif



	//PROCESS RAW AND FINAL FREQ. GEN. TIMER START VALUES AND PRESCALER
	Process_TIM16_Raw_Start_Value_and_Raw_Prescaler();
 8000ee0:	f000 fa88 	bl	80013f4 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	Process_TIM16_Final_Start_Value_and_Prescaler_Adjust();
 8000ee4:	f000 fb1e 	bl	8001524 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer();
 8000ee8:	f000 fa0e 	bl	8001308 <Start_PWM_Gen_Timer>
	Start_Freq_Gen_Timer();
 8000eec:	f000 fa26 	bl	800133c <Start_Freq_Gen_Timer>

	while (1)
	{
		if(isr_done == YES){
 8000ef0:	4b22      	ldr	r3, [pc, #136]	@ (8000f7c <main+0x19c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d1fa      	bne.n	8000ef0 <main+0x110>

			Global_Interrupt_Disable(); //DO NOT DELETE
 8000efa:	f000 f9fd 	bl	80012f8 <Global_Interrupt_Disable>

			HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000efe:	2380      	movs	r3, #128	@ 0x80
 8000f00:	0159      	lsls	r1, r3, #5
 8000f02:	23a0      	movs	r3, #160	@ 0xa0
 8000f04:	05db      	lsls	r3, r3, #23
 8000f06:	2201      	movs	r2, #1
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f002 fa4f 	bl	80033ac <HAL_GPIO_WritePin>

			processing_TIM16_final_start_value_and_prescaler = YES;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <main+0x1a0>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]

			Process_TIM16_Raw_Start_Value_and_Raw_Prescaler();
 8000f14:	f000 fa6e 	bl	80013f4 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
			Process_TIM16_Final_Start_Value_and_Prescaler_Adjust();
 8000f18:	f000 fb04 	bl	8001524 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust>

			TIM16_final_start_value_locked = TIM16_final_start_value;
 8000f1c:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <main+0x1a4>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <main+0x1a8>)
 8000f24:	801a      	strh	r2, [r3, #0]
			TIM16_prescaler_divisors_final_index_locked = TIM16_prescaler_divisors_final_index;
 8000f26:	4b19      	ldr	r3, [pc, #100]	@ (8000f8c <main+0x1ac>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b18      	ldr	r3, [pc, #96]	@ (8000f90 <main+0x1b0>)
 8000f2e:	701a      	strb	r2, [r3, #0]

			processing_TIM16_final_start_value_and_prescaler = NO;
 8000f30:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <main+0x1a0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 0);
 8000f36:	2380      	movs	r3, #128	@ 0x80
 8000f38:	0159      	lsls	r1, r3, #5
 8000f3a:	23a0      	movs	r3, #160	@ 0xa0
 8000f3c:	05db      	lsls	r3, r3, #23
 8000f3e:	2200      	movs	r2, #0
 8000f40:	0018      	movs	r0, r3
 8000f42:	f002 fa33 	bl	80033ac <HAL_GPIO_WritePin>

			isr_done = NO;
 8000f46:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <main+0x19c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]

			Global_Interrupt_Enable(); //DO NOT DELETE
 8000f4c:	f000 f9cc 	bl	80012e8 <Global_Interrupt_Enable>
		if(isr_done == YES){
 8000f50:	e7ce      	b.n	8000ef0 <main+0x110>
 8000f52:	46c0      	nop			@ (mov r8, r8)
 8000f54:	2000002c 	.word	0x2000002c
 8000f58:	00000555 	.word	0x00000555
 8000f5c:	2000031c 	.word	0x2000031c
 8000f60:	00000aaa 	.word	0x00000aaa
 8000f64:	04000002 	.word	0x04000002
 8000f68:	2000031e 	.word	0x2000031e
 8000f6c:	10000010 	.word	0x10000010
 8000f70:	20000324 	.word	0x20000324
 8000f74:	14000020 	.word	0x14000020
 8000f78:	20000328 	.word	0x20000328
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	2000033c 	.word	0x2000033c
 8000f84:	20000330 	.word	0x20000330
 8000f88:	2000033e 	.word	0x2000033e
 8000f8c:	2000033a 	.word	0x2000033a
 8000f90:	2000033b 	.word	0x2000033b

08000f94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <HAL_MspInit+0x44>)
 8000f9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <HAL_MspInit+0x44>)
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <HAL_MspInit+0x44>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	2201      	movs	r2, #1
 8000fac:	4013      	ands	r3, r2
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	4b09      	ldr	r3, [pc, #36]	@ (8000fd8 <HAL_MspInit+0x44>)
 8000fb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fb6:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <HAL_MspInit+0x44>)
 8000fb8:	2180      	movs	r1, #128	@ 0x80
 8000fba:	0549      	lsls	r1, r1, #21
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fc0:	4b05      	ldr	r3, [pc, #20]	@ (8000fd8 <HAL_MspInit+0x44>)
 8000fc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fc4:	2380      	movs	r3, #128	@ 0x80
 8000fc6:	055b      	lsls	r3, r3, #21
 8000fc8:	4013      	ands	r3, r2
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fce:	46c0      	nop			@ (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b002      	add	sp, #8
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	40021000 	.word	0x40021000

08000fdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b08b      	sub	sp, #44	@ 0x2c
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	2414      	movs	r4, #20
 8000fe6:	193b      	adds	r3, r7, r4
 8000fe8:	0018      	movs	r0, r3
 8000fea:	2314      	movs	r3, #20
 8000fec:	001a      	movs	r2, r3
 8000fee:	2100      	movs	r1, #0
 8000ff0:	f004 ffd8 	bl	8005fa4 <memset>
  if(hadc->Instance==ADC1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a2d      	ldr	r2, [pc, #180]	@ (80010b0 <HAL_ADC_MspInit+0xd4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d154      	bne.n	80010a8 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80010b4 <HAL_ADC_MspInit+0xd8>)
 8001000:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001002:	4b2c      	ldr	r3, [pc, #176]	@ (80010b4 <HAL_ADC_MspInit+0xd8>)
 8001004:	2180      	movs	r1, #128	@ 0x80
 8001006:	0349      	lsls	r1, r1, #13
 8001008:	430a      	orrs	r2, r1
 800100a:	641a      	str	r2, [r3, #64]	@ 0x40
 800100c:	4b29      	ldr	r3, [pc, #164]	@ (80010b4 <HAL_ADC_MspInit+0xd8>)
 800100e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001010:	2380      	movs	r3, #128	@ 0x80
 8001012:	035b      	lsls	r3, r3, #13
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b26      	ldr	r3, [pc, #152]	@ (80010b4 <HAL_ADC_MspInit+0xd8>)
 800101c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800101e:	4b25      	ldr	r3, [pc, #148]	@ (80010b4 <HAL_ADC_MspInit+0xd8>)
 8001020:	2101      	movs	r1, #1
 8001022:	430a      	orrs	r2, r1
 8001024:	635a      	str	r2, [r3, #52]	@ 0x34
 8001026:	4b23      	ldr	r3, [pc, #140]	@ (80010b4 <HAL_ADC_MspInit+0xd8>)
 8001028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800102a:	2201      	movs	r2, #1
 800102c:	4013      	ands	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001032:	193b      	adds	r3, r7, r4
 8001034:	2233      	movs	r2, #51	@ 0x33
 8001036:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001038:	193b      	adds	r3, r7, r4
 800103a:	2203      	movs	r2, #3
 800103c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	193b      	adds	r3, r7, r4
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	193a      	adds	r2, r7, r4
 8001046:	23a0      	movs	r3, #160	@ 0xa0
 8001048:	05db      	lsls	r3, r3, #23
 800104a:	0011      	movs	r1, r2
 800104c:	0018      	movs	r0, r3
 800104e:	f002 f849 	bl	80030e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001052:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <HAL_ADC_MspInit+0xdc>)
 8001054:	4a19      	ldr	r2, [pc, #100]	@ (80010bc <HAL_ADC_MspInit+0xe0>)
 8001056:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001058:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <HAL_ADC_MspInit+0xdc>)
 800105a:	2205      	movs	r2, #5
 800105c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800105e:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <HAL_ADC_MspInit+0xdc>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001064:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <HAL_ADC_MspInit+0xdc>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800106a:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <HAL_ADC_MspInit+0xdc>)
 800106c:	2280      	movs	r2, #128	@ 0x80
 800106e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <HAL_ADC_MspInit+0xdc>)
 8001072:	2280      	movs	r2, #128	@ 0x80
 8001074:	0052      	lsls	r2, r2, #1
 8001076:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001078:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <HAL_ADC_MspInit+0xdc>)
 800107a:	2280      	movs	r2, #128	@ 0x80
 800107c:	00d2      	lsls	r2, r2, #3
 800107e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001080:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <HAL_ADC_MspInit+0xdc>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001086:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <HAL_ADC_MspInit+0xdc>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800108c:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <HAL_ADC_MspInit+0xdc>)
 800108e:	0018      	movs	r0, r3
 8001090:	f001 ff4e 	bl	8002f30 <HAL_DMA_Init>
 8001094:	1e03      	subs	r3, r0, #0
 8001096:	d001      	beq.n	800109c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8001098:	f7ff fcc2 	bl	8000a20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a06      	ldr	r2, [pc, #24]	@ (80010b8 <HAL_ADC_MspInit+0xdc>)
 80010a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80010a2:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <HAL_ADC_MspInit+0xdc>)
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80010a8:	46c0      	nop			@ (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b00b      	add	sp, #44	@ 0x2c
 80010ae:	bd90      	pop	{r4, r7, pc}
 80010b0:	40012400 	.word	0x40012400
 80010b4:	40021000 	.word	0x40021000
 80010b8:	200000b4 	.word	0x200000b4
 80010bc:	40020008 	.word	0x40020008

080010c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a26      	ldr	r2, [pc, #152]	@ (8001168 <HAL_TIM_Base_MspInit+0xa8>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d10e      	bne.n	80010f0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80010d2:	4b26      	ldr	r3, [pc, #152]	@ (800116c <HAL_TIM_Base_MspInit+0xac>)
 80010d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010d6:	4b25      	ldr	r3, [pc, #148]	@ (800116c <HAL_TIM_Base_MspInit+0xac>)
 80010d8:	2180      	movs	r1, #128	@ 0x80
 80010da:	0209      	lsls	r1, r1, #8
 80010dc:	430a      	orrs	r2, r1
 80010de:	641a      	str	r2, [r3, #64]	@ 0x40
 80010e0:	4b22      	ldr	r3, [pc, #136]	@ (800116c <HAL_TIM_Base_MspInit+0xac>)
 80010e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010e4:	2380      	movs	r3, #128	@ 0x80
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	4013      	ands	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80010ee:	e036      	b.n	800115e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM16)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a1e      	ldr	r2, [pc, #120]	@ (8001170 <HAL_TIM_Base_MspInit+0xb0>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d116      	bne.n	8001128 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80010fa:	4b1c      	ldr	r3, [pc, #112]	@ (800116c <HAL_TIM_Base_MspInit+0xac>)
 80010fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010fe:	4b1b      	ldr	r3, [pc, #108]	@ (800116c <HAL_TIM_Base_MspInit+0xac>)
 8001100:	2180      	movs	r1, #128	@ 0x80
 8001102:	0289      	lsls	r1, r1, #10
 8001104:	430a      	orrs	r2, r1
 8001106:	641a      	str	r2, [r3, #64]	@ 0x40
 8001108:	4b18      	ldr	r3, [pc, #96]	@ (800116c <HAL_TIM_Base_MspInit+0xac>)
 800110a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800110c:	2380      	movs	r3, #128	@ 0x80
 800110e:	029b      	lsls	r3, r3, #10
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	2015      	movs	r0, #21
 800111c:	f001 fed6 	bl	8002ecc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001120:	2015      	movs	r0, #21
 8001122:	f001 fee8 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
}
 8001126:	e01a      	b.n	800115e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM17)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a11      	ldr	r2, [pc, #68]	@ (8001174 <HAL_TIM_Base_MspInit+0xb4>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d115      	bne.n	800115e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <HAL_TIM_Base_MspInit+0xac>)
 8001134:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001136:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <HAL_TIM_Base_MspInit+0xac>)
 8001138:	2180      	movs	r1, #128	@ 0x80
 800113a:	02c9      	lsls	r1, r1, #11
 800113c:	430a      	orrs	r2, r1
 800113e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001140:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <HAL_TIM_Base_MspInit+0xac>)
 8001142:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001144:	2380      	movs	r3, #128	@ 0x80
 8001146:	02db      	lsls	r3, r3, #11
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	2016      	movs	r0, #22
 8001154:	f001 feba 	bl	8002ecc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001158:	2016      	movs	r0, #22
 800115a:	f001 fecc 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
}
 800115e:	46c0      	nop			@ (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	b006      	add	sp, #24
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			@ (mov r8, r8)
 8001168:	40002000 	.word	0x40002000
 800116c:	40021000 	.word	0x40021000
 8001170:	40014400 	.word	0x40014400
 8001174:	40014800 	.word	0x40014800

08001178 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b089      	sub	sp, #36	@ 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	240c      	movs	r4, #12
 8001182:	193b      	adds	r3, r7, r4
 8001184:	0018      	movs	r0, r3
 8001186:	2314      	movs	r3, #20
 8001188:	001a      	movs	r2, r3
 800118a:	2100      	movs	r1, #0
 800118c:	f004 ff0a 	bl	8005fa4 <memset>
  if(htim->Instance==TIM14)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a14      	ldr	r2, [pc, #80]	@ (80011e8 <HAL_TIM_MspPostInit+0x70>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d122      	bne.n	80011e0 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <HAL_TIM_MspPostInit+0x74>)
 800119c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800119e:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <HAL_TIM_MspPostInit+0x74>)
 80011a0:	2101      	movs	r1, #1
 80011a2:	430a      	orrs	r2, r1
 80011a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <HAL_TIM_MspPostInit+0x74>)
 80011a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011aa:	2201      	movs	r2, #1
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PA7     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011b2:	0021      	movs	r1, r4
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	2280      	movs	r2, #128	@ 0x80
 80011b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	2202      	movs	r2, #2
 80011be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	187b      	adds	r3, r7, r1
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	2204      	movs	r2, #4
 80011d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	187a      	adds	r2, r7, r1
 80011d4:	23a0      	movs	r3, #160	@ 0xa0
 80011d6:	05db      	lsls	r3, r3, #23
 80011d8:	0011      	movs	r1, r2
 80011da:	0018      	movs	r0, r3
 80011dc:	f001 ff82 	bl	80030e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80011e0:	46c0      	nop			@ (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b009      	add	sp, #36	@ 0x24
 80011e6:	bd90      	pop	{r4, r7, pc}
 80011e8:	40002000 	.word	0x40002000
 80011ec:	40021000 	.word	0x40021000

080011f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b08b      	sub	sp, #44	@ 0x2c
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	2414      	movs	r4, #20
 80011fa:	193b      	adds	r3, r7, r4
 80011fc:	0018      	movs	r0, r3
 80011fe:	2314      	movs	r3, #20
 8001200:	001a      	movs	r2, r3
 8001202:	2100      	movs	r1, #0
 8001204:	f004 fece 	bl	8005fa4 <memset>
  if(huart->Instance==USART2)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a1b      	ldr	r2, [pc, #108]	@ (800127c <HAL_UART_MspInit+0x8c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d130      	bne.n	8001274 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001212:	4b1b      	ldr	r3, [pc, #108]	@ (8001280 <HAL_UART_MspInit+0x90>)
 8001214:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001216:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <HAL_UART_MspInit+0x90>)
 8001218:	2180      	movs	r1, #128	@ 0x80
 800121a:	0289      	lsls	r1, r1, #10
 800121c:	430a      	orrs	r2, r1
 800121e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001220:	4b17      	ldr	r3, [pc, #92]	@ (8001280 <HAL_UART_MspInit+0x90>)
 8001222:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001224:	2380      	movs	r3, #128	@ 0x80
 8001226:	029b      	lsls	r3, r3, #10
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <HAL_UART_MspInit+0x90>)
 8001230:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001232:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <HAL_UART_MspInit+0x90>)
 8001234:	2101      	movs	r1, #1
 8001236:	430a      	orrs	r2, r1
 8001238:	635a      	str	r2, [r3, #52]	@ 0x34
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <HAL_UART_MspInit+0x90>)
 800123c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800123e:	2201      	movs	r2, #1
 8001240:	4013      	ands	r3, r2
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8001246:	0021      	movs	r1, r4
 8001248:	187b      	adds	r3, r7, r1
 800124a:	220c      	movs	r2, #12
 800124c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	187b      	adds	r3, r7, r1
 8001250:	2202      	movs	r2, #2
 8001252:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	187b      	adds	r3, r7, r1
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	187b      	adds	r3, r7, r1
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001260:	187b      	adds	r3, r7, r1
 8001262:	2201      	movs	r2, #1
 8001264:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	187a      	adds	r2, r7, r1
 8001268:	23a0      	movs	r3, #160	@ 0xa0
 800126a:	05db      	lsls	r3, r3, #23
 800126c:	0011      	movs	r1, r2
 800126e:	0018      	movs	r0, r3
 8001270:	f001 ff38 	bl	80030e4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001274:	46c0      	nop			@ (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	b00b      	add	sp, #44	@ 0x2c
 800127a:	bd90      	pop	{r4, r7, pc}
 800127c:	40004400 	.word	0x40004400
 8001280:	40021000 	.word	0x40021000

08001284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001288:	46c0      	nop			@ (mov r8, r8)
 800128a:	e7fd      	b.n	8001288 <NMI_Handler+0x4>

0800128c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001290:	46c0      	nop			@ (mov r8, r8)
 8001292:	e7fd      	b.n	8001290 <HardFault_Handler+0x4>

08001294 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001298:	46c0      	nop			@ (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a2:	46c0      	nop			@ (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ac:	f000 fd82 	bl	8001db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b0:	46c0      	nop			@ (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <ADC1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80012bc:	4b03      	ldr	r3, [pc, #12]	@ (80012cc <ADC1_IRQHandler+0x14>)
 80012be:	0018      	movs	r0, r3
 80012c0:	f001 f99c 	bl	80025fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012c4:	46c0      	nop			@ (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			@ (mov r8, r8)
 80012cc:	2000002c 	.word	0x2000002c

080012d0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80012d4:	4b03      	ldr	r3, [pc, #12]	@ (80012e4 <TIM16_IRQHandler+0x14>)
 80012d6:	0018      	movs	r0, r3
 80012d8:	f003 f926 	bl	8004528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80012dc:	46c0      	nop			@ (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	46c0      	nop			@ (mov r8, r8)
 80012e4:	200001cc 	.word	0x200001cc

080012e8 <Global_Interrupt_Enable>:
volatile uint8_t pot_rotation_corrected_global = 0;
volatile enum Validate adc_values_ready = NO;
volatile uint8_t adc_conv_num = 0;

//FUNCTION DEFINITIONS
uint8_t Global_Interrupt_Enable(void){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80012ec:	b662      	cpsie	i
}
 80012ee:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
	return 1;
 80012f0:	2301      	movs	r3, #1
}
 80012f2:	0018      	movs	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <Global_Interrupt_Disable>:

uint8_t Global_Interrupt_Disable(void){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
}
 80012fe:	46c0      	nop			@ (mov r8, r8)

	__disable_irq();
	return 1;
 8001300:	2301      	movs	r3, #1
}
 8001302:	0018      	movs	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <Start_PWM_Gen_Timer>:

	return ok;
}

uint8_t Start_PWM_Gen_Timer(void)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
	uint8_t ok = Start_PWM_TIM(&htim14, TIM_CHANNEL_1); //start PWM
 800130e:	1dfc      	adds	r4, r7, #7
 8001310:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <Start_PWM_Gen_Timer+0x30>)
 8001312:	2100      	movs	r1, #0
 8001314:	0018      	movs	r0, r3
 8001316:	f000 f82b 	bl	8001370 <Start_PWM_TIM>
 800131a:	0003      	movs	r3, r0
 800131c:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <Start_PWM_Gen_Timer+0x22>

		Error_Handler();
 8001326:	f7ff fb7b 	bl	8000a20 <Error_Handler>
	}

	return ok;
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	781b      	ldrb	r3, [r3, #0]
}
 800132e:	0018      	movs	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	b003      	add	sp, #12
 8001334:	bd90      	pop	{r4, r7, pc}
 8001336:	46c0      	nop			@ (mov r8, r8)
 8001338:	20000110 	.word	0x20000110

0800133c <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 8001342:	1dfc      	adds	r4, r7, #7
 8001344:	4b09      	ldr	r3, [pc, #36]	@ (800136c <Start_Freq_Gen_Timer+0x30>)
 8001346:	2100      	movs	r1, #0
 8001348:	0018      	movs	r0, r3
 800134a:	f000 f837 	bl	80013bc <Start_OC_TIM>
 800134e:	0003      	movs	r3, r0
 8001350:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <Start_Freq_Gen_Timer+0x22>

		Error_Handler();
 800135a:	f7ff fb61 	bl	8000a20 <Error_Handler>
	}

	return ok;
 800135e:	1dfb      	adds	r3, r7, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
}
 8001362:	0018      	movs	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	b003      	add	sp, #12
 8001368:	bd90      	pop	{r4, r7, pc}
 800136a:	46c0      	nop			@ (mov r8, r8)
 800136c:	200001cc 	.word	0x200001cc

08001370 <Start_PWM_TIM>:

uint8_t Start_PWM_TIM(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel){
 8001370:	b5b0      	push	{r4, r5, r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]

	uint8_t ok = 0;
 800137a:	250f      	movs	r5, #15
 800137c:	197b      	adds	r3, r7, r5
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
	ok = HAL_TIM_Base_Start(TIM);
 8001382:	197c      	adds	r4, r7, r5
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	0018      	movs	r0, r3
 8001388:	f002 fda4 	bl	8003ed4 <HAL_TIM_Base_Start>
 800138c:	0003      	movs	r3, r0
 800138e:	7023      	strb	r3, [r4, #0]
	ok = HAL_TIM_PWM_Start(TIM, PWM_TIM_channel);
 8001390:	197c      	adds	r4, r7, r5
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	0011      	movs	r1, r2
 8001398:	0018      	movs	r0, r3
 800139a:	f002 ffe7 	bl	800436c <HAL_TIM_PWM_Start>
 800139e:	0003      	movs	r3, r0
 80013a0:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 80013a2:	197b      	adds	r3, r7, r5
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <Start_PWM_TIM+0x3e>

		Error_Handler();
 80013aa:	f7ff fb39 	bl	8000a20 <Error_Handler>
	}

	return ok;
 80013ae:	230f      	movs	r3, #15
 80013b0:	18fb      	adds	r3, r7, r3
 80013b2:	781b      	ldrb	r3, [r3, #0]
}
 80013b4:	0018      	movs	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b004      	add	sp, #16
 80013ba:	bdb0      	pop	{r4, r5, r7, pc}

080013bc <Start_OC_TIM>:

uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 80013bc:	b5b0      	push	{r4, r5, r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 80013c6:	250f      	movs	r5, #15
 80013c8:	197c      	adds	r4, r7, r5
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	0011      	movs	r1, r2
 80013d0:	0018      	movs	r0, r3
 80013d2:	f002 fe39 	bl	8004048 <HAL_TIM_OC_Start_IT>
 80013d6:	0003      	movs	r3, r0
 80013d8:	7023      	strb	r3, [r4, #0]
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 80013da:	197b      	adds	r3, r7, r5
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <Start_OC_TIM+0x2a>

		Error_Handler();
 80013e2:	f7ff fb1d 	bl	8000a20 <Error_Handler>
	}

	return ok;
 80013e6:	230f      	movs	r3, #15
 80013e8:	18fb      	adds	r3, r7, r3
 80013ea:	781b      	ldrb	r3, [r3, #0]
}
 80013ec:	0018      	movs	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b004      	add	sp, #16
 80013f2:	bdb0      	pop	{r4, r5, r7, pc}

080013f4 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:
	}

	return ok;
}

uint8_t Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(void){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0

	uint16_t speed_control = 0;
 80013fa:	210e      	movs	r1, #14
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	2200      	movs	r2, #0
 8001400:	801a      	strh	r2, [r3, #0]
	uint32_t speed_control_32 = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
	uint8_t how_many_128 = 0;
 8001406:	1dfb      	adds	r3, r7, #7
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]

    current_speed_linear_32 = current_speed_linear;
 800140c:	4b23      	ldr	r3, [pc, #140]	@ (800149c <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0xa8>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	001a      	movs	r2, r3
 8001414:	4b22      	ldr	r3, [pc, #136]	@ (80014a0 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0xac>)
 8001416:	601a      	str	r2, [r3, #0]
    speed_control_32 = current_speed_linear_32 * NUMBER_OF_FREQUENCY_STEPS;
 8001418:	4b21      	ldr	r3, [pc, #132]	@ (80014a0 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0xac>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	0013      	movs	r3, r2
 800141e:	015b      	lsls	r3, r3, #5
 8001420:	1a9b      	subs	r3, r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	189b      	adds	r3, r3, r2
 8001426:	009a      	lsls	r2, r3, #2
 8001428:	189b      	adds	r3, r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
    speed_control_32 = speed_control_32 >> 10;
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	0a9b      	lsrs	r3, r3, #10
 8001430:	60bb      	str	r3, [r7, #8]
    speed_control = (uint16_t) speed_control_32;
 8001432:	187b      	adds	r3, r7, r1
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	801a      	strh	r2, [r3, #0]

    //speed_control = (speed_adc_10_bit/1024)*883

        if(speed_control <= (127-12)){ //inequality is correct!
 8001438:	187b      	adds	r3, r7, r1
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	2b73      	cmp	r3, #115	@ 0x73
 800143e:	d80a      	bhi.n	8001456 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x62>

            TIM16_raw_start_value = (uint8_t) speed_control + 12;
 8001440:	187b      	adds	r3, r7, r1
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	330c      	adds	r3, #12
 8001448:	b29a      	uxth	r2, r3
 800144a:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0xb0>)
 800144c:	801a      	strh	r2, [r3, #0]
            TIM16_base_prescaler_divisors_index = 1;
 800144e:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0xb4>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
 8001454:	e01d      	b.n	8001492 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x9e>
        }
        else{ 	//(speed_control > (127-12))

            uint16_t speed_control_subtracted;
            speed_control_subtracted = speed_control - (127-12);
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	220e      	movs	r2, #14
 800145a:	18ba      	adds	r2, r7, r2
 800145c:	8812      	ldrh	r2, [r2, #0]
 800145e:	3a73      	subs	r2, #115	@ 0x73
 8001460:	801a      	strh	r2, [r3, #0]
            how_many_128 = (uint8_t)(speed_control_subtracted >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	09db      	lsrs	r3, r3, #7
 8001468:	b29a      	uxth	r2, r3
 800146a:	1dfb      	adds	r3, r7, #7
 800146c:	701a      	strb	r2, [r3, #0]
            TIM16_raw_start_value = (uint8_t)(speed_control_subtracted - (uint16_t)(how_many_128 << 7)); //how_many_128*128, set TMR0
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	1dfb      	adds	r3, r7, #7
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	01db      	lsls	r3, r3, #7
 800147a:	b2db      	uxtb	r3, r3
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	001a      	movs	r2, r3
 8001482:	4b08      	ldr	r3, [pc, #32]	@ (80014a4 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0xb0>)
 8001484:	801a      	strh	r2, [r3, #0]
            //biggest how_many_128 for NUMBER_OF_FREQUENCY_STEPS == 600 is 3
            //biggest base_prescaler_divisors_index == 5 for NUMBER_OF_FREQUENCY_STEPS == 600
            TIM16_base_prescaler_divisors_index = (uint8_t)(how_many_128 + 2);
 8001486:	1dfb      	adds	r3, r7, #7
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	3302      	adds	r3, #2
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0xb4>)
 8001490:	701a      	strb	r2, [r3, #0]
        }
    return 1;
 8001492:	2301      	movs	r3, #1
}
 8001494:	0018      	movs	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	b004      	add	sp, #16
 800149a:	bd80      	pop	{r7, pc}
 800149c:	2000031e 	.word	0x2000031e
 80014a0:	20000320 	.word	0x20000320
 80014a4:	20000334 	.word	0x20000334
 80014a8:	20000336 	.word	0x20000336

080014ac <Adjust_TIM16_Prescaler>:

uint8_t Adjust_TIM16_Prescaler(uint8_t TIM16_prescaler_adjust_arg){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	0002      	movs	r2, r0
 80014b4:	1dfb      	adds	r3, r7, #7
 80014b6:	701a      	strb	r2, [r3, #0]

    if(TIM16_prescaler_adjust_arg == DIVIDE_BY_TWO){
 80014b8:	1dfb      	adds	r3, r7, #7
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d107      	bne.n	80014d0 <Adjust_TIM16_Prescaler+0x24>
        TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index + 1;
 80014c0:	4b16      	ldr	r3, [pc, #88]	@ (800151c <Adjust_TIM16_Prescaler+0x70>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	3301      	adds	r3, #1
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <Adjust_TIM16_Prescaler+0x74>)
 80014cc:	701a      	strb	r2, [r3, #0]
 80014ce:	e020      	b.n	8001512 <Adjust_TIM16_Prescaler+0x66>
    }
    else if(TIM16_prescaler_adjust_arg == DIVIDE_BY_FOUR){
 80014d0:	1dfb      	adds	r3, r7, #7
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d107      	bne.n	80014e8 <Adjust_TIM16_Prescaler+0x3c>
    	TIM16_prescaler_divisors_final_index= TIM16_base_prescaler_divisors_index + 2;
 80014d8:	4b10      	ldr	r3, [pc, #64]	@ (800151c <Adjust_TIM16_Prescaler+0x70>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	3302      	adds	r3, #2
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <Adjust_TIM16_Prescaler+0x74>)
 80014e4:	701a      	strb	r2, [r3, #0]
 80014e6:	e014      	b.n	8001512 <Adjust_TIM16_Prescaler+0x66>
    }
    else if(TIM16_prescaler_adjust_arg == MULTIPLY_BY_TWO){
 80014e8:	1dfb      	adds	r3, r7, #7
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d107      	bne.n	8001500 <Adjust_TIM16_Prescaler+0x54>
    	TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index - 1;
 80014f0:	4b0a      	ldr	r3, [pc, #40]	@ (800151c <Adjust_TIM16_Prescaler+0x70>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	3b01      	subs	r3, #1
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <Adjust_TIM16_Prescaler+0x74>)
 80014fc:	701a      	strb	r2, [r3, #0]
 80014fe:	e008      	b.n	8001512 <Adjust_TIM16_Prescaler+0x66>
    }
    else if(TIM16_prescaler_adjust_arg == DO_NOTHING){
 8001500:	1dfb      	adds	r3, r7, #7
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d104      	bne.n	8001512 <Adjust_TIM16_Prescaler+0x66>
    	TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index;
 8001508:	4b04      	ldr	r3, [pc, #16]	@ (800151c <Adjust_TIM16_Prescaler+0x70>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <Adjust_TIM16_Prescaler+0x74>)
 8001510:	701a      	strb	r2, [r3, #0]
    }
    return 1;
 8001512:	2301      	movs	r3, #1
}
 8001514:	0018      	movs	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	b002      	add	sp, #8
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000336 	.word	0x20000336
 8001520:	2000033a 	.word	0x2000033a

08001524 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust>:

uint8_t Process_TIM16_Final_Start_Value_and_Prescaler_Adjust(void){
 8001524:	b5b0      	push	{r4, r5, r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0

    #if SYMMETRY_ON_OR_OFF == ON

		volatile enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800152a:	1d7b      	adds	r3, r7, #5
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
		volatile enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]

		volatile uint8_t pot_rotation_corrected = 0;
 8001536:	1cfb      	adds	r3, r7, #3
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
		volatile uint8_t symmetry_status = CW;
 800153c:	1cbb      	adds	r3, r7, #2
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]

		if(current_symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 8001542:	4bc3      	ldr	r3, [pc, #780]	@ (8001850 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x32c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b7f      	cmp	r3, #127	@ 0x7f
 8001548:	d803      	bhi.n	8001552 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e>
			symmetry_status = CW;
 800154a:	1cbb      	adds	r3, r7, #2
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	e002      	b.n	8001558 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x34>
		}
		else{ //adc is 128-255
			symmetry_status = CCW;
 8001552:	1cbb      	adds	r3, r7, #2
 8001554:	2201      	movs	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]
		}

		if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == FIRST_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == SECOND_QUADRANT)){
 8001558:	4bbe      	ldr	r3, [pc, #760]	@ (8001854 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x330>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d104      	bne.n	800156c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x48>
 8001562:	4bbd      	ldr	r3, [pc, #756]	@ (8001858 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x334>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d009      	beq.n	8001580 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5c>
 800156c:	4bb9      	ldr	r3, [pc, #740]	@ (8001854 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x330>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b01      	cmp	r3, #1
 8001574:	d111      	bne.n	800159a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x76>
 8001576:	4bb8      	ldr	r3, [pc, #736]	@ (8001858 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x334>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b01      	cmp	r3, #1
 800157e:	d10c      	bne.n	800159a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x76>

			if(symmetry_status == CW){
 8001580:	1cbb      	adds	r3, r7, #2
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d103      	bne.n	8001592 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6e>

				symmetry_type_for_halfcycle = LENGTHEN;
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
			if(symmetry_status == CW){
 8001590:	e023      	b.n	80015da <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb6>
			}
			else{

				symmetry_type_for_halfcycle = SHORTEN;
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
			if(symmetry_status == CW){
 8001598:	e01f      	b.n	80015da <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb6>
			}
		}
		else if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == SECOND_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == FIRST_QUADRANT)){
 800159a:	4bae      	ldr	r3, [pc, #696]	@ (8001854 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x330>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d104      	bne.n	80015ae <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x8a>
 80015a4:	4bac      	ldr	r3, [pc, #688]	@ (8001858 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x334>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d009      	beq.n	80015c2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x9e>
 80015ae:	4ba9      	ldr	r3, [pc, #676]	@ (8001854 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x330>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d110      	bne.n	80015da <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb6>
 80015b8:	4ba7      	ldr	r3, [pc, #668]	@ (8001858 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x334>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10b      	bne.n	80015da <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb6>

			if(symmetry_status == CW){
 80015c2:	1cbb      	adds	r3, r7, #2
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d103      	bne.n	80015d4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb0>

				symmetry_type_for_halfcycle = SHORTEN;
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
 80015d2:	e002      	b.n	80015da <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb6>
			}
			else{

				symmetry_type_for_halfcycle = LENGTHEN;
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
			}
		}

		if(symmetry_status == CW){
 80015da:	1cbb      	adds	r3, r7, #2
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d108      	bne.n	80015f6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xd2>

			pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - current_symmetry;
 80015e4:	4b9a      	ldr	r3, [pc, #616]	@ (8001850 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x32c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	227f      	movs	r2, #127	@ 0x7f
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	1cfb      	adds	r3, r7, #3
 80015f2:	701a      	strb	r2, [r3, #0]
 80015f4:	e006      	b.n	8001604 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xe0>
		}
		else{ //CCW

			pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - current_symmetry);
 80015f6:	4b96      	ldr	r3, [pc, #600]	@ (8001850 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x32c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	3b80      	subs	r3, #128	@ 0x80
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	1cfb      	adds	r3, r7, #3
 8001602:	701a      	strb	r2, [r3, #0]
		}

		pot_rotation_corrected_global = pot_rotation_corrected;
 8001604:	1cfb      	adds	r3, r7, #3
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4b94      	ldr	r3, [pc, #592]	@ (800185c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x338>)
 800160c:	701a      	strb	r2, [r3, #0]

		//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
		uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - TIM16_raw_start_value;
 800160e:	4b94      	ldr	r3, [pc, #592]	@ (8001860 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x33c>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	b29a      	uxth	r2, r3
 8001614:	200a      	movs	r0, #10
 8001616:	183b      	adds	r3, r7, r0
 8001618:	2180      	movs	r1, #128	@ 0x80
 800161a:	0049      	lsls	r1, r1, #1
 800161c:	1a8a      	subs	r2, r1, r2
 800161e:	801a      	strh	r2, [r3, #0]

		uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected;
 8001620:	1cfb      	adds	r3, r7, #3
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	0019      	movs	r1, r3
 8001628:	2408      	movs	r4, #8
 800162a:	193b      	adds	r3, r7, r4
 800162c:	183a      	adds	r2, r7, r0
 800162e:	8812      	ldrh	r2, [r2, #0]
 8001630:	434a      	muls	r2, r1
 8001632:	801a      	strh	r2, [r3, #0]

		uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 8001634:	1dbb      	adds	r3, r7, #6
 8001636:	193a      	adds	r2, r7, r4
 8001638:	8812      	ldrh	r2, [r2, #0]
 800163a:	0a12      	lsrs	r2, r2, #8
 800163c:	801a      	strh	r2, [r3, #0]


		//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
		uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 800163e:	230e      	movs	r3, #14
 8001640:	18fb      	adds	r3, r7, r3
 8001642:	1839      	adds	r1, r7, r0
 8001644:	1dba      	adds	r2, r7, #6
 8001646:	8809      	ldrh	r1, [r1, #0]
 8001648:	8812      	ldrh	r2, [r2, #0]
 800164a:	1a8a      	subs	r2, r1, r2
 800164c:	801a      	strh	r2, [r3, #0]

		uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 800164e:	250c      	movs	r5, #12
 8001650:	197b      	adds	r3, r7, r5
 8001652:	1839      	adds	r1, r7, r0
 8001654:	1dba      	adds	r2, r7, #6
 8001656:	8809      	ldrh	r1, [r1, #0]
 8001658:	8812      	ldrh	r2, [r2, #0]
 800165a:	188a      	adds	r2, r1, r2
 800165c:	801a      	strh	r2, [r3, #0]


		if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 800165e:	197b      	adds	r3, r7, r5
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	2bff      	cmp	r3, #255	@ 0xff
 8001664:	d90f      	bls.n	8001686 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x162>
 8001666:	197b      	adds	r3, r7, r5
 8001668:	881a      	ldrh	r2, [r3, #0]
 800166a:	2380      	movs	r3, #128	@ 0x80
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	429a      	cmp	r2, r3
 8001670:	d000      	beq.n	8001674 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x150>
 8001672:	e0a4      	b.n	80017be <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x29a>
 8001674:	193b      	adds	r3, r7, r4
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	2108      	movs	r1, #8
 800167a:	0018      	movs	r0, r3
 800167c:	f000 faec 	bl	8001c58 <unsigned_bitwise_modulo>
 8001680:	1e03      	subs	r3, r0, #0
 8001682:	d000      	beq.n	8001686 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x162>
 8001684:	e09b      	b.n	80017be <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x29a>

			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001686:	2308      	movs	r3, #8
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	2108      	movs	r1, #8
 800168e:	0018      	movs	r0, r3
 8001690:	f000 fae2 	bl	8001c58 <unsigned_bitwise_modulo>
 8001694:	0003      	movs	r3, r0
 8001696:	2b80      	cmp	r3, #128	@ 0x80
 8001698:	d114      	bne.n	80016c4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1a0>
				//remainder is 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in 0.5

				//manipulated_period_shorten should oscillate over the halfperiod between manipulated_period_shorten and manipulated_period_shorten - 1; //DONE
				//manipulated_period_lengthen should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1; //DONE

				if(symmetry_type_for_halfcycle == SHORTEN){
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d103      	bne.n	80016ac <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x188>

					TIM16_final_start_value_oscillation_mode = OSCILLATE_DOWNWARDS;
 80016a4:	1d7b      	adds	r3, r7, #5
 80016a6:	2202      	movs	r2, #2
 80016a8:	701a      	strb	r2, [r3, #0]
 80016aa:	e007      	b.n	80016bc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x198>
				}
				else if(symmetry_type_for_halfcycle == LENGTHEN){
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d102      	bne.n	80016bc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x198>

					TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80016b6:	1d7b      	adds	r3, r7, #5
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
				}
				TIM16_prescaler_adjust = DO_NOTHING;
 80016bc:	4b69      	ldr	r3, [pc, #420]	@ (8001864 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x340>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80016c2:	e202      	b.n	8001aca <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a6>
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 80016c4:	2308      	movs	r3, #8
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	2108      	movs	r1, #8
 80016cc:	0018      	movs	r0, r3
 80016ce:	f000 fac3 	bl	8001c58 <unsigned_bitwise_modulo>
 80016d2:	1e03      	subs	r3, r0, #0
 80016d4:	d11e      	bne.n	8001714 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1f0>

				//remainder is zero, which means both shortened and lengthened manipulated periods have no no remainder

				manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 80016d6:	220e      	movs	r2, #14
 80016d8:	18bb      	adds	r3, r7, r2
 80016da:	18ba      	adds	r2, r7, r2
 80016dc:	8812      	ldrh	r2, [r2, #0]
 80016de:	801a      	strh	r2, [r3, #0]
				manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 80016e0:	220c      	movs	r2, #12
 80016e2:	18bb      	adds	r3, r7, r2
 80016e4:	18ba      	adds	r2, r7, r2
 80016e6:	8812      	ldrh	r2, [r2, #0]
 80016e8:	801a      	strh	r2, [r3, #0]

				if(symmetry_type_for_halfcycle == SHORTEN){
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d103      	bne.n	80016fc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1d8>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80016f4:	1d7b      	adds	r3, r7, #5
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
 80016fa:	e007      	b.n	800170c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1e8>
				}
				else if(symmetry_type_for_halfcycle == LENGTHEN){
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b01      	cmp	r3, #1
 8001704:	d102      	bne.n	800170c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1e8>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001706:	1d7b      	adds	r3, r7, #5
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
				}
				TIM16_prescaler_adjust = DO_NOTHING;
 800170c:	4b55      	ldr	r3, [pc, #340]	@ (8001864 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x340>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001712:	e1da      	b.n	8001aca <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a6>
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8001714:	2308      	movs	r3, #8
 8001716:	18fb      	adds	r3, r7, r3
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	2108      	movs	r1, #8
 800171c:	0018      	movs	r0, r3
 800171e:	f000 fa9b 	bl	8001c58 <unsigned_bitwise_modulo>
 8001722:	0003      	movs	r3, r0
 8001724:	2b7f      	cmp	r3, #127	@ 0x7f
 8001726:	d81e      	bhi.n	8001766 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x242>

				//remainder is less than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in less than 0.5

				manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 8001728:	220e      	movs	r2, #14
 800172a:	18bb      	adds	r3, r7, r2
 800172c:	18ba      	adds	r2, r7, r2
 800172e:	8812      	ldrh	r2, [r2, #0]
 8001730:	801a      	strh	r2, [r3, #0]
				manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8001732:	220c      	movs	r2, #12
 8001734:	18bb      	adds	r3, r7, r2
 8001736:	18ba      	adds	r2, r7, r2
 8001738:	8812      	ldrh	r2, [r2, #0]
 800173a:	801a      	strh	r2, [r3, #0]

				if(symmetry_type_for_halfcycle == SHORTEN){
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d103      	bne.n	800174e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x22a>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001746:	1d7b      	adds	r3, r7, #5
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
 800174c:	e007      	b.n	800175e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x23a>
				}
				else if(symmetry_type_for_halfcycle == LENGTHEN){
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d102      	bne.n	800175e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x23a>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001758:	1d7b      	adds	r3, r7, #5
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
				}
				TIM16_prescaler_adjust = DO_NOTHING;
 800175e:	4b41      	ldr	r3, [pc, #260]	@ (8001864 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x340>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001764:	e1b1      	b.n	8001aca <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a6>
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8001766:	2308      	movs	r3, #8
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	2108      	movs	r1, #8
 800176e:	0018      	movs	r0, r3
 8001770:	f000 fa72 	bl	8001c58 <unsigned_bitwise_modulo>
 8001774:	0003      	movs	r3, r0
 8001776:	2b80      	cmp	r3, #128	@ 0x80
 8001778:	d800      	bhi.n	800177c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x258>
 800177a:	e1a6      	b.n	8001aca <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a6>

				//remainder is greater than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in more than 0.5

				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 800177c:	220e      	movs	r2, #14
 800177e:	18bb      	adds	r3, r7, r2
 8001780:	18ba      	adds	r2, r7, r2
 8001782:	8812      	ldrh	r2, [r2, #0]
 8001784:	3a01      	subs	r2, #1
 8001786:	801a      	strh	r2, [r3, #0]
				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8001788:	220c      	movs	r2, #12
 800178a:	18bb      	adds	r3, r7, r2
 800178c:	18ba      	adds	r2, r7, r2
 800178e:	8812      	ldrh	r2, [r2, #0]
 8001790:	3201      	adds	r2, #1
 8001792:	801a      	strh	r2, [r3, #0]

				if(symmetry_type_for_halfcycle == SHORTEN){
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d103      	bne.n	80017a6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x282>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800179e:	1d7b      	adds	r3, r7, #5
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
 80017a4:	e007      	b.n	80017b6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x292>
				}
				else if(symmetry_type_for_halfcycle == LENGTHEN){
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d102      	bne.n	80017b6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x292>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80017b0:	1d7b      	adds	r3, r7, #5
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
				}
				TIM16_prescaler_adjust = DO_NOTHING;
 80017b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001864 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x340>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80017bc:	e185      	b.n	8001aca <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a6>
			}
		}

		else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 80017be:	210c      	movs	r1, #12
 80017c0:	187b      	adds	r3, r7, r1
 80017c2:	881a      	ldrh	r2, [r3, #0]
 80017c4:	2380      	movs	r3, #128	@ 0x80
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d810      	bhi.n	80017ee <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ca>
 80017cc:	187b      	adds	r3, r7, r1
 80017ce:	881a      	ldrh	r2, [r3, #0]
 80017d0:	2380      	movs	r3, #128	@ 0x80
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d000      	beq.n	80017da <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2b6>
 80017d8:	e178      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
 80017da:	2308      	movs	r3, #8
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	2108      	movs	r1, #8
 80017e2:	0018      	movs	r0, r3
 80017e4:	f000 fa38 	bl	8001c58 <unsigned_bitwise_modulo>
 80017e8:	1e03      	subs	r3, r0, #0
 80017ea:	d100      	bne.n	80017ee <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ca>
 80017ec:	e16e      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>

			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80017ee:	2308      	movs	r3, #8
 80017f0:	18fb      	adds	r3, r7, r3
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	2108      	movs	r1, #8
 80017f6:	0018      	movs	r0, r3
 80017f8:	f000 fa2e 	bl	8001c58 <unsigned_bitwise_modulo>
 80017fc:	0003      	movs	r3, r0
 80017fe:	2b80      	cmp	r3, #128	@ 0x80
 8001800:	d15e      	bne.n	80018c0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x39c>

				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001802:	220e      	movs	r2, #14
 8001804:	18bb      	adds	r3, r7, r2
 8001806:	18ba      	adds	r2, r7, r2
 8001808:	8812      	ldrh	r2, [r2, #0]
 800180a:	3a01      	subs	r2, #1
 800180c:	801a      	strh	r2, [r3, #0]
				//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 800180e:	210c      	movs	r1, #12
 8001810:	187b      	adds	r3, r7, r1
 8001812:	187a      	adds	r2, r7, r1
 8001814:	8812      	ldrh	r2, [r2, #0]
 8001816:	3201      	adds	r2, #1
 8001818:	801a      	strh	r2, [r3, #0]

				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 800181a:	000c      	movs	r4, r1
 800181c:	187b      	adds	r3, r7, r1
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	2101      	movs	r1, #1
 8001822:	0018      	movs	r0, r3
 8001824:	f000 fa18 	bl	8001c58 <unsigned_bitwise_modulo>
 8001828:	1e03      	subs	r3, r0, #0
 800182a:	d12a      	bne.n	8001882 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x35e>

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 800182c:	193b      	adds	r3, r7, r4
 800182e:	193a      	adds	r2, r7, r4
 8001830:	8812      	ldrh	r2, [r2, #0]
 8001832:	0852      	lsrs	r2, r2, #1
 8001834:	801a      	strh	r2, [r3, #0]
					//DO NOT OSCILLATE BETWEEN VALUES //DONE
					//prescaler during lengthened halfperiod should be set to half //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d113      	bne.n	8001868 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x344>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001840:	1d7b      	adds	r3, r7, #5
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001846:	4b07      	ldr	r3, [pc, #28]	@ (8001864 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x340>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
 800184c:	e13e      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
 800184e:	46c0      	nop			@ (mov r8, r8)
 8001850:	20000328 	.word	0x20000328
 8001854:	2000032e 	.word	0x2000032e
 8001858:	2000032f 	.word	0x2000032f
 800185c:	20000342 	.word	0x20000342
 8001860:	20000334 	.word	0x20000334
 8001864:	20000332 	.word	0x20000332
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b01      	cmp	r3, #1
 8001870:	d000      	beq.n	8001874 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x350>
 8001872:	e12b      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001874:	1d7b      	adds	r3, r7, #5
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 800187a:	4bc0      	ldr	r3, [pc, #768]	@ (8001b7c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x658>)
 800187c:	2202      	movs	r2, #2
 800187e:	701a      	strb	r2, [r3, #0]
 8001880:	e124      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
					}
				}
				else{

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001882:	220c      	movs	r2, #12
 8001884:	18bb      	adds	r3, r7, r2
 8001886:	18ba      	adds	r2, r7, r2
 8001888:	8812      	ldrh	r2, [r2, #0]
 800188a:	0852      	lsrs	r2, r2, #1
 800188c:	801a      	strh	r2, [r3, #0]
					//prescaler during lengthened halfperiod should be set to half //DONE
					//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d106      	bne.n	80018a6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x382>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001898:	1d7b      	adds	r3, r7, #5
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 800189e:	4bb7      	ldr	r3, [pc, #732]	@ (8001b7c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x658>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
 80018a4:	e112      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d000      	beq.n	80018b2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x38e>
 80018b0:	e10c      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80018b2:	1d7b      	adds	r3, r7, #5
 80018b4:	2201      	movs	r2, #1
 80018b6:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 80018b8:	4bb0      	ldr	r3, [pc, #704]	@ (8001b7c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x658>)
 80018ba:	2202      	movs	r2, #2
 80018bc:	701a      	strb	r2, [r3, #0]
 80018be:	e105      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
					}
				}
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 80018c0:	2308      	movs	r3, #8
 80018c2:	18fb      	adds	r3, r7, r3
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	2108      	movs	r1, #8
 80018c8:	0018      	movs	r0, r3
 80018ca:	f000 f9c5 	bl	8001c58 <unsigned_bitwise_modulo>
 80018ce:	1e03      	subs	r3, r0, #0
 80018d0:	d14a      	bne.n	8001968 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x444>

				manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 80018d2:	220e      	movs	r2, #14
 80018d4:	18bb      	adds	r3, r7, r2
 80018d6:	18ba      	adds	r2, r7, r2
 80018d8:	8812      	ldrh	r2, [r2, #0]
 80018da:	801a      	strh	r2, [r3, #0]

				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80018dc:	240c      	movs	r4, #12
 80018de:	193b      	adds	r3, r7, r4
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	2101      	movs	r1, #1
 80018e4:	0018      	movs	r0, r3
 80018e6:	f000 f9b7 	bl	8001c58 <unsigned_bitwise_modulo>
 80018ea:	1e03      	subs	r3, r0, #0
 80018ec:	d11d      	bne.n	800192a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x406>

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80018ee:	193b      	adds	r3, r7, r4
 80018f0:	193a      	adds	r2, r7, r4
 80018f2:	8812      	ldrh	r2, [r2, #0]
 80018f4:	0852      	lsrs	r2, r2, #1
 80018f6:	801a      	strh	r2, [r3, #0]
					//DO NOT OSCILLATE BETWEEN VALUES //DONE
					//prescaler during lengthened halfperiod should be set to half //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d106      	bne.n	8001910 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3ec>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001902:	1d7b      	adds	r3, r7, #5
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001908:	4b9c      	ldr	r3, [pc, #624]	@ (8001b7c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x658>)
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
 800190e:	e0dd      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b01      	cmp	r3, #1
 8001918:	d000      	beq.n	800191c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3f8>
 800191a:	e0d7      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800191c:	1d7b      	adds	r3, r7, #5
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001922:	4b96      	ldr	r3, [pc, #600]	@ (8001b7c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x658>)
 8001924:	2202      	movs	r2, #2
 8001926:	701a      	strb	r2, [r3, #0]
 8001928:	e0d0      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
					}
				}
				else{

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 800192a:	220c      	movs	r2, #12
 800192c:	18bb      	adds	r3, r7, r2
 800192e:	18ba      	adds	r2, r7, r2
 8001930:	8812      	ldrh	r2, [r2, #0]
 8001932:	0852      	lsrs	r2, r2, #1
 8001934:	801a      	strh	r2, [r3, #0]
					//prescaler during lengthened halfperiod should be set to half //DONE
					//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d106      	bne.n	800194e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x42a>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001940:	1d7b      	adds	r3, r7, #5
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001946:	4b8d      	ldr	r3, [pc, #564]	@ (8001b7c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x658>)
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
 800194c:	e0be      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b01      	cmp	r3, #1
 8001956:	d000      	beq.n	800195a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x436>
 8001958:	e0b8      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 800195a:	1d7b      	adds	r3, r7, #5
 800195c:	2201      	movs	r2, #1
 800195e:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001960:	4b86      	ldr	r3, [pc, #536]	@ (8001b7c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x658>)
 8001962:	2202      	movs	r2, #2
 8001964:	701a      	strb	r2, [r3, #0]
 8001966:	e0b1      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
					}
				}
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8001968:	2308      	movs	r3, #8
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	2108      	movs	r1, #8
 8001970:	0018      	movs	r0, r3
 8001972:	f000 f971 	bl	8001c58 <unsigned_bitwise_modulo>
 8001976:	0003      	movs	r3, r0
 8001978:	2b7f      	cmp	r3, #127	@ 0x7f
 800197a:	d84d      	bhi.n	8001a18 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x4f4>

				manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 800197c:	220e      	movs	r2, #14
 800197e:	18bb      	adds	r3, r7, r2
 8001980:	18ba      	adds	r2, r7, r2
 8001982:	8812      	ldrh	r2, [r2, #0]
 8001984:	801a      	strh	r2, [r3, #0]
				//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
				manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8001986:	240c      	movs	r4, #12
 8001988:	193b      	adds	r3, r7, r4
 800198a:	193a      	adds	r2, r7, r4
 800198c:	8812      	ldrh	r2, [r2, #0]
 800198e:	801a      	strh	r2, [r3, #0]

				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001990:	193b      	adds	r3, r7, r4
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	2101      	movs	r1, #1
 8001996:	0018      	movs	r0, r3
 8001998:	f000 f95e 	bl	8001c58 <unsigned_bitwise_modulo>
 800199c:	1e03      	subs	r3, r0, #0
 800199e:	d11d      	bne.n	80019dc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x4b8>

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80019a0:	193b      	adds	r3, r7, r4
 80019a2:	193a      	adds	r2, r7, r4
 80019a4:	8812      	ldrh	r2, [r2, #0]
 80019a6:	0852      	lsrs	r2, r2, #1
 80019a8:	801a      	strh	r2, [r3, #0]
					//DO NOT OSCILLATE BETWEEN VALUES //DONE
					//prescaler during lengthened halfperiod should be set to half //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d106      	bne.n	80019c2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x49e>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80019b4:	1d7b      	adds	r3, r7, #5
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 80019ba:	4b70      	ldr	r3, [pc, #448]	@ (8001b7c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x658>)
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
 80019c0:	e084      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d000      	beq.n	80019ce <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x4aa>
 80019cc:	e07e      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80019ce:	1d7b      	adds	r3, r7, #5
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 80019d4:	4b69      	ldr	r3, [pc, #420]	@ (8001b7c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x658>)
 80019d6:	2202      	movs	r2, #2
 80019d8:	701a      	strb	r2, [r3, #0]
 80019da:	e077      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
					}
				}
				else{

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80019dc:	220c      	movs	r2, #12
 80019de:	18bb      	adds	r3, r7, r2
 80019e0:	18ba      	adds	r2, r7, r2
 80019e2:	8812      	ldrh	r2, [r2, #0]
 80019e4:	0852      	lsrs	r2, r2, #1
 80019e6:	801a      	strh	r2, [r3, #0]
					//prescaler during lengthened halfperiod should be set to half //DONE
					//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d106      	bne.n	8001a00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x4dc>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80019f2:	1d7b      	adds	r3, r7, #5
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 80019f8:	4b60      	ldr	r3, [pc, #384]	@ (8001b7c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x658>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
 80019fe:	e065      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d160      	bne.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8001a0a:	1d7b      	adds	r3, r7, #5
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001a10:	4b5a      	ldr	r3, [pc, #360]	@ (8001b7c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x658>)
 8001a12:	2202      	movs	r2, #2
 8001a14:	701a      	strb	r2, [r3, #0]
 8001a16:	e059      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
					}
				}
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8001a18:	2308      	movs	r3, #8
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	2108      	movs	r1, #8
 8001a20:	0018      	movs	r0, r3
 8001a22:	f000 f919 	bl	8001c58 <unsigned_bitwise_modulo>
 8001a26:	0003      	movs	r3, r0
 8001a28:	2b80      	cmp	r3, #128	@ 0x80
 8001a2a:	d94f      	bls.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>

				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001a2c:	220e      	movs	r2, #14
 8001a2e:	18bb      	adds	r3, r7, r2
 8001a30:	18ba      	adds	r2, r7, r2
 8001a32:	8812      	ldrh	r2, [r2, #0]
 8001a34:	3a01      	subs	r2, #1
 8001a36:	801a      	strh	r2, [r3, #0]
				//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8001a38:	240c      	movs	r4, #12
 8001a3a:	193b      	adds	r3, r7, r4
 8001a3c:	193a      	adds	r2, r7, r4
 8001a3e:	8812      	ldrh	r2, [r2, #0]
 8001a40:	3201      	adds	r2, #1
 8001a42:	801a      	strh	r2, [r3, #0]

				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001a44:	193b      	adds	r3, r7, r4
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	2101      	movs	r1, #1
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f000 f904 	bl	8001c58 <unsigned_bitwise_modulo>
 8001a50:	1e03      	subs	r3, r0, #0
 8001a52:	d11c      	bne.n	8001a8e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x56a>

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001a54:	193b      	adds	r3, r7, r4
 8001a56:	193a      	adds	r2, r7, r4
 8001a58:	8812      	ldrh	r2, [r2, #0]
 8001a5a:	0852      	lsrs	r2, r2, #1
 8001a5c:	801a      	strh	r2, [r3, #0]
					//DO NOT OSCILLATE BETWEEN VALUES //DONE
					//prescaler during lengthened halfperiod should be set to half //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d106      	bne.n	8001a76 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x552>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001a68:	1d7b      	adds	r3, r7, #5
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001a6e:	4b43      	ldr	r3, [pc, #268]	@ (8001b7c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x658>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
 8001a74:	e02a      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d125      	bne.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001a80:	1d7b      	adds	r3, r7, #5
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001a86:	4b3d      	ldr	r3, [pc, #244]	@ (8001b7c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x658>)
 8001a88:	2202      	movs	r2, #2
 8001a8a:	701a      	strb	r2, [r3, #0]
 8001a8c:	e01e      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
					}
				}
				else{

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001a8e:	220c      	movs	r2, #12
 8001a90:	18bb      	adds	r3, r7, r2
 8001a92:	18ba      	adds	r2, r7, r2
 8001a94:	8812      	ldrh	r2, [r2, #0]
 8001a96:	0852      	lsrs	r2, r2, #1
 8001a98:	801a      	strh	r2, [r3, #0]
					//prescaler during lengthened halfperiod should be set to half //DONE
					//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d106      	bne.n	8001ab2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x58e>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001aa4:	1d7b      	adds	r3, r7, #5
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001aaa:	4b34      	ldr	r3, [pc, #208]	@ (8001b7c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x658>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
 8001ab0:	e00c      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d107      	bne.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8001abc:	1d7b      	adds	r3, r7, #5
 8001abe:	2201      	movs	r2, #1
 8001ac0:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001ac2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b7c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x658>)
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	e000      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5a8>
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001aca:	46c0      	nop			@ (mov r8, r8)
		}

	//DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	//NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	//ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	if(symmetry_type_for_halfcycle == SHORTEN){
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d158      	bne.n	8001b88 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x664>

		if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8001ad6:	1d7b      	adds	r3, r7, #5
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d109      	bne.n	8001af4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5d0>

			TIM16_final_start_value = 256 - manipulated_period_shorten;
 8001ae0:	230e      	movs	r3, #14
 8001ae2:	18fb      	adds	r3, r7, r3
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	2280      	movs	r2, #128	@ 0x80
 8001ae8:	0052      	lsls	r2, r2, #1
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	4b24      	ldr	r3, [pc, #144]	@ (8001b80 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x65c>)
 8001af0:	801a      	strh	r2, [r3, #0]
 8001af2:	e09f      	b.n	8001c34 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x710>
		}
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8001af4:	1d7b      	adds	r3, r7, #5
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d11b      	bne.n	8001b36 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x612>

			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8001afe:	4b21      	ldr	r3, [pc, #132]	@ (8001b84 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x660>)
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	2101      	movs	r1, #1
 8001b06:	0018      	movs	r0, r3
 8001b08:	f000 f8a6 	bl	8001c58 <unsigned_bitwise_modulo>
 8001b0c:	1e03      	subs	r3, r0, #0
 8001b0e:	d109      	bne.n	8001b24 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>

				TIM16_final_start_value = 256 - manipulated_period_shorten;
 8001b10:	230e      	movs	r3, #14
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	2280      	movs	r2, #128	@ 0x80
 8001b18:	0052      	lsls	r2, r2, #1
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	4b18      	ldr	r3, [pc, #96]	@ (8001b80 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x65c>)
 8001b20:	801a      	strh	r2, [r3, #0]
 8001b22:	e087      	b.n	8001c34 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x710>
			}
			else{ //if current index is odd

				TIM16_final_start_value = 256 - manipulated_period_shorten - 1;
 8001b24:	230e      	movs	r3, #14
 8001b26:	18fb      	adds	r3, r7, r3
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	22ff      	movs	r2, #255	@ 0xff
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	4b13      	ldr	r3, [pc, #76]	@ (8001b80 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x65c>)
 8001b32:	801a      	strh	r2, [r3, #0]
 8001b34:	e07e      	b.n	8001c34 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x710>
			}
		}
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8001b36:	1d7b      	adds	r3, r7, #5
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d000      	beq.n	8001b42 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x61e>
 8001b40:	e078      	b.n	8001c34 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x710>

			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8001b42:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x660>)
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	2101      	movs	r1, #1
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f000 f884 	bl	8001c58 <unsigned_bitwise_modulo>
 8001b50:	1e03      	subs	r3, r0, #0
 8001b52:	d109      	bne.n	8001b68 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x644>

				TIM16_final_start_value = 256 - manipulated_period_shorten;
 8001b54:	230e      	movs	r3, #14
 8001b56:	18fb      	adds	r3, r7, r3
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	2280      	movs	r2, #128	@ 0x80
 8001b5c:	0052      	lsls	r2, r2, #1
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	4b07      	ldr	r3, [pc, #28]	@ (8001b80 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x65c>)
 8001b64:	801a      	strh	r2, [r3, #0]
 8001b66:	e065      	b.n	8001c34 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x710>
			}
			else{ //if current index is odd

				TIM16_final_start_value = 256 - manipulated_period_shorten + 1;
 8001b68:	230e      	movs	r3, #14
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	32ff      	adds	r2, #255	@ 0xff
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	4b02      	ldr	r3, [pc, #8]	@ (8001b80 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x65c>)
 8001b78:	801a      	strh	r2, [r3, #0]
 8001b7a:	e05b      	b.n	8001c34 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x710>
 8001b7c:	20000332 	.word	0x20000332
 8001b80:	20000330 	.word	0x20000330
 8001b84:	2000032c 	.word	0x2000032c
			}
		}
	}
	else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d150      	bne.n	8001c34 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x710>

		if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8001b92:	1d7b      	adds	r3, r7, #5
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d109      	bne.n	8001bb0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x68c>

			TIM16_final_start_value = 256 - manipulated_period_lengthen;
 8001b9c:	230c      	movs	r3, #12
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	2280      	movs	r2, #128	@ 0x80
 8001ba4:	0052      	lsls	r2, r2, #1
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	4b28      	ldr	r3, [pc, #160]	@ (8001c4c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x728>)
 8001bac:	801a      	strh	r2, [r3, #0]
 8001bae:	e041      	b.n	8001c34 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x710>
		}
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8001bb0:	1d7b      	adds	r3, r7, #5
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d11b      	bne.n	8001bf2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6ce>

			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8001bba:	4b25      	ldr	r3, [pc, #148]	@ (8001c50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x72c>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f000 f848 	bl	8001c58 <unsigned_bitwise_modulo>
 8001bc8:	1e03      	subs	r3, r0, #0
 8001bca:	d109      	bne.n	8001be0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6bc>

				TIM16_final_start_value = 256 - manipulated_period_lengthen;
 8001bcc:	230c      	movs	r3, #12
 8001bce:	18fb      	adds	r3, r7, r3
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	2280      	movs	r2, #128	@ 0x80
 8001bd4:	0052      	lsls	r2, r2, #1
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	4b1c      	ldr	r3, [pc, #112]	@ (8001c4c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x728>)
 8001bdc:	801a      	strh	r2, [r3, #0]
 8001bde:	e029      	b.n	8001c34 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x710>
			}
			else{ //if current index is odd

				TIM16_final_start_value = 256 - manipulated_period_lengthen - 1;
 8001be0:	230c      	movs	r3, #12
 8001be2:	18fb      	adds	r3, r7, r3
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	22ff      	movs	r2, #255	@ 0xff
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	4b17      	ldr	r3, [pc, #92]	@ (8001c4c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x728>)
 8001bee:	801a      	strh	r2, [r3, #0]
 8001bf0:	e020      	b.n	8001c34 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x710>
			}
		}
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8001bf2:	1d7b      	adds	r3, r7, #5
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d11b      	bne.n	8001c34 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x710>

			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8001bfc:	4b14      	ldr	r3, [pc, #80]	@ (8001c50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x72c>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2101      	movs	r1, #1
 8001c04:	0018      	movs	r0, r3
 8001c06:	f000 f827 	bl	8001c58 <unsigned_bitwise_modulo>
 8001c0a:	1e03      	subs	r3, r0, #0
 8001c0c:	d109      	bne.n	8001c22 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6fe>

				TIM16_final_start_value = 256 - manipulated_period_lengthen;
 8001c0e:	230c      	movs	r3, #12
 8001c10:	18fb      	adds	r3, r7, r3
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	2280      	movs	r2, #128	@ 0x80
 8001c16:	0052      	lsls	r2, r2, #1
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c4c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x728>)
 8001c1e:	801a      	strh	r2, [r3, #0]
 8001c20:	e008      	b.n	8001c34 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x710>
			}
			else{ //if current index is odd

				TIM16_final_start_value = 256 - manipulated_period_lengthen + 1;
 8001c22:	230c      	movs	r3, #12
 8001c24:	18fb      	adds	r3, r7, r3
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	2202      	movs	r2, #2
 8001c2a:	32ff      	adds	r2, #255	@ 0xff
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x728>)
 8001c32:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	Adjust_TIM16_Prescaler(TIM16_prescaler_adjust);
 8001c34:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x730>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f7ff fc36 	bl	80014ac <Adjust_TIM16_Prescaler>
        TIM16_final_start_value = TIM16_raw_start_value;
        TIM16_prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(TIM16_prescaler_adjust);
    #endif

    return 1;
 8001c40:	2301      	movs	r3, #1
}
 8001c42:	0018      	movs	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b004      	add	sp, #16
 8001c48:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4a:	46c0      	nop			@ (mov r8, r8)
 8001c4c:	20000330 	.word	0x20000330
 8001c50:	2000032c 	.word	0x2000032c
 8001c54:	20000332 	.word	0x20000332

08001c58 <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	000a      	movs	r2, r1
 8001c62:	1cfb      	adds	r3, r7, #3
 8001c64:	701a      	strb	r2, [r3, #0]

    return dividend & ((1 << base_2_exponent) - 1);
 8001c66:	1cfb      	adds	r3, r7, #3
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	0013      	movs	r3, r2
 8001c70:	3b01      	subs	r3, #1
 8001c72:	001a      	movs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4013      	ands	r3, r2
}
 8001c78:	0018      	movs	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b002      	add	sp, #8
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c84:	46c0      	nop			@ (mov r8, r8)
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c8c:	480d      	ldr	r0, [pc, #52]	@ (8001cc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c90:	f7ff fff6 	bl	8001c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c94:	480c      	ldr	r0, [pc, #48]	@ (8001cc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c96:	490d      	ldr	r1, [pc, #52]	@ (8001ccc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c98:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd0 <LoopForever+0xe>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c9c:	e002      	b.n	8001ca4 <LoopCopyDataInit>

08001c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca2:	3304      	adds	r3, #4

08001ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca8:	d3f9      	bcc.n	8001c9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001caa:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cac:	4c0a      	ldr	r4, [pc, #40]	@ (8001cd8 <LoopForever+0x16>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb0:	e001      	b.n	8001cb6 <LoopFillZerobss>

08001cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb4:	3204      	adds	r2, #4

08001cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb8:	d3fb      	bcc.n	8001cb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cba:	f004 f97b 	bl	8005fb4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001cbe:	f7ff f88f 	bl	8000de0 <main>

08001cc2 <LoopForever>:

LoopForever:
  b LoopForever
 8001cc2:	e7fe      	b.n	8001cc2 <LoopForever>
  ldr   r0, =_estack
 8001cc4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ccc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001cd0:	08006a04 	.word	0x08006a04
  ldr r2, =_sbss
 8001cd4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001cd8:	20000348 	.word	0x20000348

08001cdc <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cdc:	e7fe      	b.n	8001cdc <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

08001ce0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ce6:	1dfb      	adds	r3, r7, #7
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cec:	4b0b      	ldr	r3, [pc, #44]	@ (8001d1c <HAL_Init+0x3c>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8001d1c <HAL_Init+0x3c>)
 8001cf2:	2180      	movs	r1, #128	@ 0x80
 8001cf4:	0049      	lsls	r1, r1, #1
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f000 f810 	bl	8001d20 <HAL_InitTick>
 8001d00:	1e03      	subs	r3, r0, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d04:	1dfb      	adds	r3, r7, #7
 8001d06:	2201      	movs	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]
 8001d0a:	e001      	b.n	8001d10 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001d0c:	f7ff f942 	bl	8000f94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d10:	1dfb      	adds	r3, r7, #7
 8001d12:	781b      	ldrb	r3, [r3, #0]
}
 8001d14:	0018      	movs	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b002      	add	sp, #8
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40022000 	.word	0x40022000

08001d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d28:	230f      	movs	r3, #15
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001d30:	4b1d      	ldr	r3, [pc, #116]	@ (8001da8 <HAL_InitTick+0x88>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d02b      	beq.n	8001d90 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001d38:	4b1c      	ldr	r3, [pc, #112]	@ (8001dac <HAL_InitTick+0x8c>)
 8001d3a:	681c      	ldr	r4, [r3, #0]
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001da8 <HAL_InitTick+0x88>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	0019      	movs	r1, r3
 8001d42:	23fa      	movs	r3, #250	@ 0xfa
 8001d44:	0098      	lsls	r0, r3, #2
 8001d46:	f7fe f9dd 	bl	8000104 <__udivsi3>
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	0019      	movs	r1, r3
 8001d4e:	0020      	movs	r0, r4
 8001d50:	f7fe f9d8 	bl	8000104 <__udivsi3>
 8001d54:	0003      	movs	r3, r0
 8001d56:	0018      	movs	r0, r3
 8001d58:	f001 f8dd 	bl	8002f16 <HAL_SYSTICK_Config>
 8001d5c:	1e03      	subs	r3, r0, #0
 8001d5e:	d112      	bne.n	8001d86 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d80a      	bhi.n	8001d7c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	2301      	movs	r3, #1
 8001d6a:	425b      	negs	r3, r3
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f001 f8ac 	bl	8002ecc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d74:	4b0e      	ldr	r3, [pc, #56]	@ (8001db0 <HAL_InitTick+0x90>)
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	e00d      	b.n	8001d98 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001d7c:	230f      	movs	r3, #15
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	2201      	movs	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	e008      	b.n	8001d98 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d86:	230f      	movs	r3, #15
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	e003      	b.n	8001d98 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d90:	230f      	movs	r3, #15
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	2201      	movs	r2, #1
 8001d96:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001d98:	230f      	movs	r3, #15
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	781b      	ldrb	r3, [r3, #0]
}
 8001d9e:	0018      	movs	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b005      	add	sp, #20
 8001da4:	bd90      	pop	{r4, r7, pc}
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	2000000c 	.word	0x2000000c
 8001dac:	20000004 	.word	0x20000004
 8001db0:	20000008 	.word	0x20000008

08001db4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001db8:	4b05      	ldr	r3, [pc, #20]	@ (8001dd0 <HAL_IncTick+0x1c>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	001a      	movs	r2, r3
 8001dbe:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <HAL_IncTick+0x20>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	18d2      	adds	r2, r2, r3
 8001dc4:	4b03      	ldr	r3, [pc, #12]	@ (8001dd4 <HAL_IncTick+0x20>)
 8001dc6:	601a      	str	r2, [r3, #0]
}
 8001dc8:	46c0      	nop			@ (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	2000000c 	.word	0x2000000c
 8001dd4:	20000344 	.word	0x20000344

08001dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  return uwTick;
 8001ddc:	4b02      	ldr	r3, [pc, #8]	@ (8001de8 <HAL_GetTick+0x10>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	0018      	movs	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	46c0      	nop			@ (mov r8, r8)
 8001de8:	20000344 	.word	0x20000344

08001dec <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a05      	ldr	r2, [pc, #20]	@ (8001e10 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001dfc:	401a      	ands	r2, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	601a      	str	r2, [r3, #0]
}
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b002      	add	sp, #8
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	fe3fffff 	.word	0xfe3fffff

08001e14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	23e0      	movs	r3, #224	@ 0xe0
 8001e22:	045b      	lsls	r3, r3, #17
 8001e24:	4013      	ands	r3, r2
}
 8001e26:	0018      	movs	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b002      	add	sp, #8
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b084      	sub	sp, #16
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	2104      	movs	r1, #4
 8001e42:	400a      	ands	r2, r1
 8001e44:	2107      	movs	r1, #7
 8001e46:	4091      	lsls	r1, r2
 8001e48:	000a      	movs	r2, r1
 8001e4a:	43d2      	mvns	r2, r2
 8001e4c:	401a      	ands	r2, r3
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2104      	movs	r1, #4
 8001e52:	400b      	ands	r3, r1
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	4099      	lsls	r1, r3
 8001e58:	000b      	movs	r3, r1
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001e60:	46c0      	nop			@ (mov r8, r8)
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b004      	add	sp, #16
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	2104      	movs	r1, #4
 8001e7a:	400a      	ands	r2, r1
 8001e7c:	2107      	movs	r1, #7
 8001e7e:	4091      	lsls	r1, r2
 8001e80:	000a      	movs	r2, r1
 8001e82:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	2104      	movs	r1, #4
 8001e88:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001e8a:	40da      	lsrs	r2, r3
 8001e8c:	0013      	movs	r3, r2
}
 8001e8e:	0018      	movs	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b002      	add	sp, #8
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	23c0      	movs	r3, #192	@ 0xc0
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d101      	bne.n	8001eae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b002      	add	sp, #8
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	211f      	movs	r1, #31
 8001ecc:	400a      	ands	r2, r1
 8001ece:	210f      	movs	r1, #15
 8001ed0:	4091      	lsls	r1, r2
 8001ed2:	000a      	movs	r2, r1
 8001ed4:	43d2      	mvns	r2, r2
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	0e9b      	lsrs	r3, r3, #26
 8001edc:	210f      	movs	r1, #15
 8001ede:	4019      	ands	r1, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	201f      	movs	r0, #31
 8001ee4:	4003      	ands	r3, r0
 8001ee6:	4099      	lsls	r1, r3
 8001ee8:	000b      	movs	r3, r1
 8001eea:	431a      	orrs	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ef0:	46c0      	nop			@ (mov r8, r8)
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b004      	add	sp, #16
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	035b      	lsls	r3, r3, #13
 8001f0a:	0b5b      	lsrs	r3, r3, #13
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f12:	46c0      	nop			@ (mov r8, r8)
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b002      	add	sp, #8
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	0352      	lsls	r2, r2, #13
 8001f2c:	0b52      	lsrs	r2, r2, #13
 8001f2e:	43d2      	mvns	r2, r2
 8001f30:	401a      	ands	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f36:	46c0      	nop			@ (mov r8, r8)
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b002      	add	sp, #8
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	4013      	ands	r3, r2
}
 8001f4e:	0018      	movs	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b002      	add	sp, #8
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	0212      	lsls	r2, r2, #8
 8001f6c:	43d2      	mvns	r2, r2
 8001f6e:	401a      	ands	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	400b      	ands	r3, r1
 8001f78:	4904      	ldr	r1, [pc, #16]	@ (8001f8c <LL_ADC_SetChannelSamplingTime+0x34>)
 8001f7a:	400b      	ands	r3, r1
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001f82:	46c0      	nop			@ (mov r8, r8)
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b004      	add	sp, #16
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	46c0      	nop			@ (mov r8, r8)
 8001f8c:	07ffff00 	.word	0x07ffff00

08001f90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4a05      	ldr	r2, [pc, #20]	@ (8001fb4 <LL_ADC_EnableInternalRegulator+0x24>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2280      	movs	r2, #128	@ 0x80
 8001fa2:	0552      	lsls	r2, r2, #21
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001faa:	46c0      	nop			@ (mov r8, r8)
 8001fac:	46bd      	mov	sp, r7
 8001fae:	b002      	add	sp, #8
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	46c0      	nop			@ (mov r8, r8)
 8001fb4:	6fffffe8 	.word	0x6fffffe8

08001fb8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	2380      	movs	r3, #128	@ 0x80
 8001fc6:	055b      	lsls	r3, r3, #21
 8001fc8:	401a      	ands	r2, r3
 8001fca:	2380      	movs	r3, #128	@ 0x80
 8001fcc:	055b      	lsls	r3, r3, #21
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d101      	bne.n	8001fd6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	0018      	movs	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b002      	add	sp, #8
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	4a04      	ldr	r2, [pc, #16]	@ (8002000 <LL_ADC_Enable+0x20>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ff8:	46c0      	nop			@ (mov r8, r8)
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b002      	add	sp, #8
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	7fffffe8 	.word	0x7fffffe8

08002004 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2201      	movs	r2, #1
 8002012:	4013      	ands	r3, r2
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <LL_ADC_IsEnabled+0x18>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <LL_ADC_IsEnabled+0x1a>
 800201c:	2300      	movs	r3, #0
}
 800201e:	0018      	movs	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	b002      	add	sp, #8
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	4a04      	ldr	r2, [pc, #16]	@ (8002048 <LL_ADC_REG_StartConversion+0x20>)
 8002036:	4013      	ands	r3, r2
 8002038:	2204      	movs	r2, #4
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002040:	46c0      	nop			@ (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	b002      	add	sp, #8
 8002046:	bd80      	pop	{r7, pc}
 8002048:	7fffffe8 	.word	0x7fffffe8

0800204c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2204      	movs	r2, #4
 800205a:	4013      	ands	r3, r2
 800205c:	2b04      	cmp	r3, #4
 800205e:	d101      	bne.n	8002064 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002064:	2300      	movs	r3, #0
}
 8002066:	0018      	movs	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	b002      	add	sp, #8
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002078:	231f      	movs	r3, #31
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002080:	2300      	movs	r3, #0
 8002082:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e19f      	b.n	80023d6 <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209a:	2b00      	cmp	r3, #0
 800209c:	d12a      	bne.n	80020f4 <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4acf      	ldr	r2, [pc, #828]	@ (80023e0 <HAL_ADC_Init+0x370>)
 80020a2:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4acf      	ldr	r2, [pc, #828]	@ (80023e4 <HAL_ADC_Init+0x374>)
 80020a8:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4ace      	ldr	r2, [pc, #824]	@ (80023e8 <HAL_ADC_Init+0x378>)
 80020ae:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4ace      	ldr	r2, [pc, #824]	@ (80023ec <HAL_ADC_Init+0x37c>)
 80020b4:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4acd      	ldr	r2, [pc, #820]	@ (80023f0 <HAL_ADC_Init+0x380>)
 80020ba:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4acd      	ldr	r2, [pc, #820]	@ (80023f4 <HAL_ADC_Init+0x384>)
 80020c0:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4acc      	ldr	r2, [pc, #816]	@ (80023f8 <HAL_ADC_Init+0x388>)
 80020c6:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (hadc->MspInitCallback == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2280      	movs	r2, #128	@ 0x80
 80020cc:	589b      	ldr	r3, [r3, r2]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d103      	bne.n	80020da <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2180      	movs	r1, #128	@ 0x80
 80020d6:	4ac9      	ldr	r2, [pc, #804]	@ (80023fc <HAL_ADC_Init+0x38c>)
 80020d8:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2280      	movs	r2, #128	@ 0x80
 80020de:	589b      	ldr	r3, [r3, r2]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	0010      	movs	r0, r2
 80020e4:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2254      	movs	r2, #84	@ 0x54
 80020f0:	2100      	movs	r1, #0
 80020f2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	0018      	movs	r0, r3
 80020fa:	f7ff ff5d 	bl	8001fb8 <LL_ADC_IsInternalRegulatorEnabled>
 80020fe:	1e03      	subs	r3, r0, #0
 8002100:	d115      	bne.n	800212e <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	0018      	movs	r0, r3
 8002108:	f7ff ff42 	bl	8001f90 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800210c:	4bbc      	ldr	r3, [pc, #752]	@ (8002400 <HAL_ADC_Init+0x390>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	49bc      	ldr	r1, [pc, #752]	@ (8002404 <HAL_ADC_Init+0x394>)
 8002112:	0018      	movs	r0, r3
 8002114:	f7fd fff6 	bl	8000104 <__udivsi3>
 8002118:	0003      	movs	r3, r0
 800211a:	3301      	adds	r3, #1
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002120:	e002      	b.n	8002128 <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3b01      	subs	r3, #1
 8002126:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f9      	bne.n	8002122 <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	0018      	movs	r0, r3
 8002134:	f7ff ff40 	bl	8001fb8 <LL_ADC_IsInternalRegulatorEnabled>
 8002138:	1e03      	subs	r3, r0, #0
 800213a:	d10f      	bne.n	800215c <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002140:	2210      	movs	r2, #16
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214c:	2201      	movs	r2, #1
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002154:	231f      	movs	r3, #31
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	0018      	movs	r0, r3
 8002162:	f7ff ff73 	bl	800204c <LL_ADC_REG_IsConversionOngoing>
 8002166:	0003      	movs	r3, r0
 8002168:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216e:	2210      	movs	r2, #16
 8002170:	4013      	ands	r3, r2
 8002172:	d000      	beq.n	8002176 <HAL_ADC_Init+0x106>
 8002174:	e122      	b.n	80023bc <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d000      	beq.n	800217e <HAL_ADC_Init+0x10e>
 800217c:	e11e      	b.n	80023bc <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002182:	4aa1      	ldr	r2, [pc, #644]	@ (8002408 <HAL_ADC_Init+0x398>)
 8002184:	4013      	ands	r3, r2
 8002186:	2202      	movs	r2, #2
 8002188:	431a      	orrs	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	0018      	movs	r0, r3
 8002194:	f7ff ff36 	bl	8002004 <LL_ADC_IsEnabled>
 8002198:	1e03      	subs	r3, r0, #0
 800219a:	d000      	beq.n	800219e <HAL_ADC_Init+0x12e>
 800219c:	e0ad      	b.n	80022fa <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	7e1b      	ldrb	r3, [r3, #24]
 80021a6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80021a8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	7e5b      	ldrb	r3, [r3, #25]
 80021ae:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80021b0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	7e9b      	ldrb	r3, [r3, #26]
 80021b6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80021b8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <HAL_ADC_Init+0x158>
 80021c2:	2380      	movs	r3, #128	@ 0x80
 80021c4:	015b      	lsls	r3, r3, #5
 80021c6:	e000      	b.n	80021ca <HAL_ADC_Init+0x15a>
 80021c8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80021ca:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80021d0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	da04      	bge.n	80021e4 <HAL_ADC_Init+0x174>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	085b      	lsrs	r3, r3, #1
 80021e2:	e001      	b.n	80021e8 <HAL_ADC_Init+0x178>
 80021e4:	2380      	movs	r3, #128	@ 0x80
 80021e6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80021e8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	212c      	movs	r1, #44	@ 0x2c
 80021ee:	5c5b      	ldrb	r3, [r3, r1]
 80021f0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80021f2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2220      	movs	r2, #32
 80021fe:	5c9b      	ldrb	r3, [r3, r2]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d115      	bne.n	8002230 <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	7e9b      	ldrb	r3, [r3, #26]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d105      	bne.n	8002218 <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2280      	movs	r2, #128	@ 0x80
 8002210:	0252      	lsls	r2, r2, #9
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
 8002216:	e00b      	b.n	8002230 <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221c:	2220      	movs	r2, #32
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002228:	2201      	movs	r2, #1
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00a      	beq.n	800224e <HAL_ADC_Init+0x1de>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800223c:	23e0      	movs	r3, #224	@ 0xe0
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002246:	4313      	orrs	r3, r2
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4a6d      	ldr	r2, [pc, #436]	@ (800240c <HAL_ADC_Init+0x39c>)
 8002256:	4013      	ands	r3, r2
 8002258:	0019      	movs	r1, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	430a      	orrs	r2, r1
 8002262:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	0f9b      	lsrs	r3, r3, #30
 800226a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002270:	4313      	orrs	r3, r2
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4313      	orrs	r3, r2
 8002276:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	223c      	movs	r2, #60	@ 0x3c
 800227c:	5c9b      	ldrb	r3, [r3, r2]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d111      	bne.n	80022a6 <HAL_ADC_Init+0x236>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	0f9b      	lsrs	r3, r3, #30
 8002288:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800228e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002294:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800229a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	4313      	orrs	r3, r2
 80022a0:	2201      	movs	r2, #1
 80022a2:	4313      	orrs	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	4a58      	ldr	r2, [pc, #352]	@ (8002410 <HAL_ADC_Init+0x3a0>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	0019      	movs	r1, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	23c0      	movs	r3, #192	@ 0xc0
 80022c2:	061b      	lsls	r3, r3, #24
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d018      	beq.n	80022fa <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80022cc:	2380      	movs	r3, #128	@ 0x80
 80022ce:	05db      	lsls	r3, r3, #23
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d012      	beq.n	80022fa <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80022d8:	2380      	movs	r3, #128	@ 0x80
 80022da:	061b      	lsls	r3, r3, #24
 80022dc:	429a      	cmp	r2, r3
 80022de:	d00c      	beq.n	80022fa <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80022e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002414 <HAL_ADC_Init+0x3a4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a4c      	ldr	r2, [pc, #304]	@ (8002418 <HAL_ADC_Init+0x3a8>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	0019      	movs	r1, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	23f0      	movs	r3, #240	@ 0xf0
 80022f0:	039b      	lsls	r3, r3, #14
 80022f2:	401a      	ands	r2, r3
 80022f4:	4b47      	ldr	r3, [pc, #284]	@ (8002414 <HAL_ADC_Init+0x3a4>)
 80022f6:	430a      	orrs	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002302:	001a      	movs	r2, r3
 8002304:	2100      	movs	r1, #0
 8002306:	f7ff fd92 	bl	8001e2e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002312:	4942      	ldr	r1, [pc, #264]	@ (800241c <HAL_ADC_Init+0x3ac>)
 8002314:	001a      	movs	r2, r3
 8002316:	f7ff fd8a 	bl	8001e2e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2110      	movs	r1, #16
 800232e:	4249      	negs	r1, r1
 8002330:	430a      	orrs	r2, r1
 8002332:	629a      	str	r2, [r3, #40]	@ 0x28
 8002334:	e018      	b.n	8002368 <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691a      	ldr	r2, [r3, #16]
 800233a:	2380      	movs	r3, #128	@ 0x80
 800233c:	039b      	lsls	r3, r3, #14
 800233e:	429a      	cmp	r2, r3
 8002340:	d112      	bne.n	8002368 <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	3b01      	subs	r3, #1
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	221c      	movs	r2, #28
 8002352:	4013      	ands	r3, r2
 8002354:	2210      	movs	r2, #16
 8002356:	4252      	negs	r2, r2
 8002358:	409a      	lsls	r2, r3
 800235a:	0011      	movs	r1, r2
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2100      	movs	r1, #0
 800236e:	0018      	movs	r0, r3
 8002370:	f7ff fd7a 	bl	8001e68 <LL_ADC_GetSamplingTimeCommonChannels>
 8002374:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800237a:	429a      	cmp	r2, r3
 800237c:	d10b      	bne.n	8002396 <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002388:	2203      	movs	r2, #3
 800238a:	4393      	bics	r3, r2
 800238c:	2201      	movs	r2, #1
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002394:	e01c      	b.n	80023d0 <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239a:	2212      	movs	r2, #18
 800239c:	4393      	bics	r3, r2
 800239e:	2210      	movs	r2, #16
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023aa:	2201      	movs	r2, #1
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80023b2:	231f      	movs	r3, #31
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80023ba:	e009      	b.n	80023d0 <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c0:	2210      	movs	r2, #16
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80023c8:	231f      	movs	r3, #31
 80023ca:	18fb      	adds	r3, r7, r3
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80023d0:	231f      	movs	r3, #31
 80023d2:	18fb      	adds	r3, r7, r3
 80023d4:	781b      	ldrb	r3, [r3, #0]
}
 80023d6:	0018      	movs	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	b008      	add	sp, #32
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	08002839 	.word	0x08002839
 80023e4:	08002849 	.word	0x08002849
 80023e8:	08002859 	.word	0x08002859
 80023ec:	08002869 	.word	0x08002869
 80023f0:	08002d35 	.word	0x08002d35
 80023f4:	08002d45 	.word	0x08002d45
 80023f8:	08002d55 	.word	0x08002d55
 80023fc:	08000fdd 	.word	0x08000fdd
 8002400:	20000004 	.word	0x20000004
 8002404:	00030d40 	.word	0x00030d40
 8002408:	fffffefd 	.word	0xfffffefd
 800240c:	ffde0201 	.word	0xffde0201
 8002410:	1ffffc02 	.word	0x1ffffc02
 8002414:	40012708 	.word	0x40012708
 8002418:	ffc3ffff 	.word	0xffc3ffff
 800241c:	07ffff04 	.word	0x07ffff04

08002420 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002420:	b5b0      	push	{r4, r5, r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	0018      	movs	r0, r3
 800242e:	f7ff fe0d 	bl	800204c <LL_ADC_REG_IsConversionOngoing>
 8002432:	1e03      	subs	r3, r0, #0
 8002434:	d135      	bne.n	80024a2 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2254      	movs	r2, #84	@ 0x54
 800243a:	5c9b      	ldrb	r3, [r3, r2]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_ADC_Start+0x24>
 8002440:	2302      	movs	r3, #2
 8002442:	e035      	b.n	80024b0 <HAL_ADC_Start+0x90>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2254      	movs	r2, #84	@ 0x54
 8002448:	2101      	movs	r1, #1
 800244a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800244c:	250f      	movs	r5, #15
 800244e:	197c      	adds	r4, r7, r5
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	0018      	movs	r0, r3
 8002454:	f000 fbe8 	bl	8002c28 <ADC_Enable>
 8002458:	0003      	movs	r3, r0
 800245a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800245c:	197b      	adds	r3, r7, r5
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d119      	bne.n	8002498 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002468:	4a13      	ldr	r2, [pc, #76]	@ (80024b8 <HAL_ADC_Start+0x98>)
 800246a:	4013      	ands	r3, r2
 800246c:	2280      	movs	r2, #128	@ 0x80
 800246e:	0052      	lsls	r2, r2, #1
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	221c      	movs	r2, #28
 8002482:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2254      	movs	r2, #84	@ 0x54
 8002488:	2100      	movs	r1, #0
 800248a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	0018      	movs	r0, r3
 8002492:	f7ff fdc9 	bl	8002028 <LL_ADC_REG_StartConversion>
 8002496:	e008      	b.n	80024aa <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2254      	movs	r2, #84	@ 0x54
 800249c:	2100      	movs	r1, #0
 800249e:	5499      	strb	r1, [r3, r2]
 80024a0:	e003      	b.n	80024aa <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024a2:	230f      	movs	r3, #15
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	2202      	movs	r2, #2
 80024a8:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80024aa:	230f      	movs	r3, #15
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	781b      	ldrb	r3, [r3, #0]
}
 80024b0:	0018      	movs	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b004      	add	sp, #16
 80024b6:	bdb0      	pop	{r4, r5, r7, pc}
 80024b8:	fffff0fe 	.word	0xfffff0fe

080024bc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d102      	bne.n	80024d4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80024ce:	2308      	movs	r3, #8
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	e00f      	b.n	80024f4 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2201      	movs	r2, #1
 80024dc:	4013      	ands	r3, r2
 80024de:	d007      	beq.n	80024f0 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e4:	2220      	movs	r2, #32
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e072      	b.n	80025d6 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80024f0:	2304      	movs	r3, #4
 80024f2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80024f4:	f7ff fc70 	bl	8001dd8 <HAL_GetTick>
 80024f8:	0003      	movs	r3, r0
 80024fa:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80024fc:	e01f      	b.n	800253e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	3301      	adds	r3, #1
 8002502:	d01c      	beq.n	800253e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002504:	f7ff fc68 	bl	8001dd8 <HAL_GetTick>
 8002508:	0002      	movs	r2, r0
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d302      	bcc.n	800251a <HAL_ADC_PollForConversion+0x5e>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d111      	bne.n	800253e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4013      	ands	r3, r2
 8002524:	d10b      	bne.n	800253e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252a:	2204      	movs	r2, #4
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2254      	movs	r2, #84	@ 0x54
 8002536:	2100      	movs	r1, #0
 8002538:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e04b      	b.n	80025d6 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4013      	ands	r3, r2
 8002548:	d0d9      	beq.n	80024fe <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254e:	2280      	movs	r2, #128	@ 0x80
 8002550:	0092      	lsls	r2, r2, #2
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	0018      	movs	r0, r3
 800255e:	f7ff fc9a 	bl	8001e96 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002562:	1e03      	subs	r3, r0, #0
 8002564:	d02e      	beq.n	80025c4 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	7e9b      	ldrb	r3, [r3, #26]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d12a      	bne.n	80025c4 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2208      	movs	r2, #8
 8002576:	4013      	ands	r3, r2
 8002578:	2b08      	cmp	r3, #8
 800257a:	d123      	bne.n	80025c4 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	0018      	movs	r0, r3
 8002582:	f7ff fd63 	bl	800204c <LL_ADC_REG_IsConversionOngoing>
 8002586:	1e03      	subs	r3, r0, #0
 8002588:	d110      	bne.n	80025ac <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	210c      	movs	r1, #12
 8002596:	438a      	bics	r2, r1
 8002598:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259e:	4a10      	ldr	r2, [pc, #64]	@ (80025e0 <HAL_ADC_PollForConversion+0x124>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	2201      	movs	r2, #1
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80025aa:	e00b      	b.n	80025c4 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b0:	2220      	movs	r2, #32
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025bc:	2201      	movs	r2, #1
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	7e1b      	ldrb	r3, [r3, #24]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d103      	bne.n	80025d4 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	220c      	movs	r2, #12
 80025d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	0018      	movs	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	b004      	add	sp, #16
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	46c0      	nop			@ (mov r8, r8)
 80025e0:	fffffefe 	.word	0xfffffefe

080025e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80025f2:	0018      	movs	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	b002      	add	sp, #8
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	2202      	movs	r2, #2
 800261c:	4013      	ands	r3, r2
 800261e:	d018      	beq.n	8002652 <HAL_ADC_IRQHandler+0x56>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2202      	movs	r2, #2
 8002624:	4013      	ands	r3, r2
 8002626:	d014      	beq.n	8002652 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262c:	2210      	movs	r2, #16
 800262e:	4013      	ands	r3, r2
 8002630:	d106      	bne.n	8002640 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002636:	2280      	movs	r2, #128	@ 0x80
 8002638:	0112      	lsls	r2, r2, #4
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	0010      	movs	r0, r2
 8002648:	4798      	blx	r3
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2202      	movs	r2, #2
 8002650:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	2204      	movs	r2, #4
 8002656:	4013      	ands	r3, r2
 8002658:	d003      	beq.n	8002662 <HAL_ADC_IRQHandler+0x66>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2204      	movs	r2, #4
 800265e:	4013      	ands	r3, r2
 8002660:	d107      	bne.n	8002672 <HAL_ADC_IRQHandler+0x76>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	2208      	movs	r2, #8
 8002666:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002668:	d04e      	beq.n	8002708 <HAL_ADC_IRQHandler+0x10c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2208      	movs	r2, #8
 800266e:	4013      	ands	r3, r2
 8002670:	d04a      	beq.n	8002708 <HAL_ADC_IRQHandler+0x10c>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002676:	2210      	movs	r2, #16
 8002678:	4013      	ands	r3, r2
 800267a:	d106      	bne.n	800268a <HAL_ADC_IRQHandler+0x8e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002680:	2280      	movs	r2, #128	@ 0x80
 8002682:	0092      	lsls	r2, r2, #2
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	0018      	movs	r0, r3
 8002690:	f7ff fc01 	bl	8001e96 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002694:	1e03      	subs	r3, r0, #0
 8002696:	d02e      	beq.n	80026f6 <HAL_ADC_IRQHandler+0xfa>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	7e9b      	ldrb	r3, [r3, #26]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d12a      	bne.n	80026f6 <HAL_ADC_IRQHandler+0xfa>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2208      	movs	r2, #8
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d123      	bne.n	80026f6 <HAL_ADC_IRQHandler+0xfa>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	0018      	movs	r0, r3
 80026b4:	f7ff fcca 	bl	800204c <LL_ADC_REG_IsConversionOngoing>
 80026b8:	1e03      	subs	r3, r0, #0
 80026ba:	d110      	bne.n	80026de <HAL_ADC_IRQHandler+0xe2>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	210c      	movs	r1, #12
 80026c8:	438a      	bics	r2, r1
 80026ca:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d0:	4a58      	ldr	r2, [pc, #352]	@ (8002834 <HAL_ADC_IRQHandler+0x238>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	2201      	movs	r2, #1
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	659a      	str	r2, [r3, #88]	@ 0x58
 80026dc:	e00b      	b.n	80026f6 <HAL_ADC_IRQHandler+0xfa>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e2:	2220      	movs	r2, #32
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ee:	2201      	movs	r2, #1
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: Into callback function "HAL_ADC_ConvCpltCallback()",             */
    /*       to determine if conversion has been triggered from EOC or EOS,   */
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	0010      	movs	r0, r2
 80026fe:	4798      	blx	r3
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	220c      	movs	r2, #12
 8002706:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	2280      	movs	r2, #128	@ 0x80
 800270c:	4013      	ands	r3, r2
 800270e:	d013      	beq.n	8002738 <HAL_ADC_IRQHandler+0x13c>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2280      	movs	r2, #128	@ 0x80
 8002714:	4013      	ands	r3, r2
 8002716:	d00f      	beq.n	8002738 <HAL_ADC_IRQHandler+0x13c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271c:	2280      	movs	r2, #128	@ 0x80
 800271e:	0252      	lsls	r2, r2, #9
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	0010      	movs	r0, r2
 800272e:	4798      	blx	r3
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2280      	movs	r2, #128	@ 0x80
 8002736:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	2380      	movs	r3, #128	@ 0x80
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4013      	ands	r3, r2
 8002740:	d015      	beq.n	800276e <HAL_ADC_IRQHandler+0x172>
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	2380      	movs	r3, #128	@ 0x80
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4013      	ands	r3, r2
 800274a:	d010      	beq.n	800276e <HAL_ADC_IRQHandler+0x172>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002750:	2280      	movs	r2, #128	@ 0x80
 8002752:	0292      	lsls	r2, r2, #10
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	0010      	movs	r0, r2
 8002762:	4798      	blx	r3
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2280      	movs	r2, #128	@ 0x80
 800276a:	0052      	lsls	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	2380      	movs	r3, #128	@ 0x80
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4013      	ands	r3, r2
 8002776:	d015      	beq.n	80027a4 <HAL_ADC_IRQHandler+0x1a8>
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	2380      	movs	r3, #128	@ 0x80
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4013      	ands	r3, r2
 8002780:	d010      	beq.n	80027a4 <HAL_ADC_IRQHandler+0x1a8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002786:	2280      	movs	r2, #128	@ 0x80
 8002788:	02d2      	lsls	r2, r2, #11
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	0010      	movs	r0, r2
 8002798:	4798      	blx	r3
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2280      	movs	r2, #128	@ 0x80
 80027a0:	0092      	lsls	r2, r2, #2
 80027a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	2210      	movs	r2, #16
 80027a8:	4013      	ands	r3, r2
 80027aa:	d02c      	beq.n	8002806 <HAL_ADC_IRQHandler+0x20a>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2210      	movs	r2, #16
 80027b0:	4013      	ands	r3, r2
 80027b2:	d028      	beq.n	8002806 <HAL_ADC_IRQHandler+0x20a>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d102      	bne.n	80027c2 <HAL_ADC_IRQHandler+0x1c6>
    {
      overrun_error = 1UL;
 80027bc:	2301      	movs	r3, #1
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	e008      	b.n	80027d4 <HAL_ADC_IRQHandler+0x1d8>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	0018      	movs	r0, r3
 80027c8:	f7ff fbb9 	bl	8001f3e <LL_ADC_REG_GetDMATransfer>
 80027cc:	1e03      	subs	r3, r0, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_ADC_IRQHandler+0x1d8>
      {
        overrun_error = 1UL;
 80027d0:	2301      	movs	r3, #1
 80027d2:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d111      	bne.n	80027fe <HAL_ADC_IRQHandler+0x202>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027de:	2280      	movs	r2, #128	@ 0x80
 80027e0:	00d2      	lsls	r2, r2, #3
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ec:	2202      	movs	r2, #2
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Note: In case of overrun, ADC conversion data is preserved until     */
      /*       flag OVR is reset.                                             */
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	0010      	movs	r0, r2
 80027fc:	4798      	blx	r3
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2210      	movs	r2, #16
 8002804:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	2380      	movs	r3, #128	@ 0x80
 800280a:	019b      	lsls	r3, r3, #6
 800280c:	4013      	ands	r3, r2
 800280e:	d00d      	beq.n	800282c <HAL_ADC_IRQHandler+0x230>
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	2380      	movs	r3, #128	@ 0x80
 8002814:	019b      	lsls	r3, r3, #6
 8002816:	4013      	ands	r3, r2
 8002818:	d008      	beq.n	800282c <HAL_ADC_IRQHandler+0x230>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	0018      	movs	r0, r3
 800281e:	f000 faa1 	bl	8002d64 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2280      	movs	r2, #128	@ 0x80
 8002828:	0192      	lsls	r2, r2, #6
 800282a:	601a      	str	r2, [r3, #0]
  }
}
 800282c:	46c0      	nop			@ (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	b006      	add	sp, #24
 8002832:	bd80      	pop	{r7, pc}
 8002834:	fffffefe 	.word	0xfffffefe

08002838 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002840:	46c0      	nop			@ (mov r8, r8)
 8002842:	46bd      	mov	sp, r7
 8002844:	b002      	add	sp, #8
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002850:	46c0      	nop			@ (mov r8, r8)
 8002852:	46bd      	mov	sp, r7
 8002854:	b002      	add	sp, #8
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002860:	46c0      	nop			@ (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	b002      	add	sp, #8
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002870:	46c0      	nop			@ (mov r8, r8)
 8002872:	46bd      	mov	sp, r7
 8002874:	b002      	add	sp, #8
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002882:	2317      	movs	r3, #23
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2254      	movs	r2, #84	@ 0x54
 8002892:	5c9b      	ldrb	r3, [r3, r2]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_ADC_ConfigChannel+0x24>
 8002898:	2302      	movs	r3, #2
 800289a:	e1c0      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x3a6>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2254      	movs	r2, #84	@ 0x54
 80028a0:	2101      	movs	r1, #1
 80028a2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7ff fbcf 	bl	800204c <LL_ADC_REG_IsConversionOngoing>
 80028ae:	1e03      	subs	r3, r0, #0
 80028b0:	d000      	beq.n	80028b4 <HAL_ADC_ConfigChannel+0x3c>
 80028b2:	e1a3      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d100      	bne.n	80028be <HAL_ADC_ConfigChannel+0x46>
 80028bc:	e143      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691a      	ldr	r2, [r3, #16]
 80028c2:	2380      	movs	r3, #128	@ 0x80
 80028c4:	061b      	lsls	r3, r3, #24
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d004      	beq.n	80028d4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80028ce:	4ac1      	ldr	r2, [pc, #772]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x35c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d108      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	0019      	movs	r1, r3
 80028de:	0010      	movs	r0, r2
 80028e0:	f7ff fb0a 	bl	8001ef8 <LL_ADC_REG_SetSequencerChAdd>
 80028e4:	e0c9      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	211f      	movs	r1, #31
 80028f0:	400b      	ands	r3, r1
 80028f2:	210f      	movs	r1, #15
 80028f4:	4099      	lsls	r1, r3
 80028f6:	000b      	movs	r3, r1
 80028f8:	43db      	mvns	r3, r3
 80028fa:	4013      	ands	r3, r2
 80028fc:	0019      	movs	r1, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	035b      	lsls	r3, r3, #13
 8002904:	0b5b      	lsrs	r3, r3, #13
 8002906:	d105      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x9c>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	0e9b      	lsrs	r3, r3, #26
 800290e:	221f      	movs	r2, #31
 8002910:	4013      	ands	r3, r2
 8002912:	e098      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1ce>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2201      	movs	r2, #1
 800291a:	4013      	ands	r3, r2
 800291c:	d000      	beq.n	8002920 <HAL_ADC_ConfigChannel+0xa8>
 800291e:	e091      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x1cc>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2202      	movs	r2, #2
 8002926:	4013      	ands	r3, r2
 8002928:	d000      	beq.n	800292c <HAL_ADC_ConfigChannel+0xb4>
 800292a:	e089      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x1c8>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2204      	movs	r2, #4
 8002932:	4013      	ands	r3, r2
 8002934:	d000      	beq.n	8002938 <HAL_ADC_ConfigChannel+0xc0>
 8002936:	e081      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x1c4>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2208      	movs	r2, #8
 800293e:	4013      	ands	r3, r2
 8002940:	d000      	beq.n	8002944 <HAL_ADC_ConfigChannel+0xcc>
 8002942:	e079      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x1c0>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2210      	movs	r2, #16
 800294a:	4013      	ands	r3, r2
 800294c:	d000      	beq.n	8002950 <HAL_ADC_ConfigChannel+0xd8>
 800294e:	e071      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x1bc>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2220      	movs	r2, #32
 8002956:	4013      	ands	r3, r2
 8002958:	d000      	beq.n	800295c <HAL_ADC_ConfigChannel+0xe4>
 800295a:	e069      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x1b8>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2240      	movs	r2, #64	@ 0x40
 8002962:	4013      	ands	r3, r2
 8002964:	d000      	beq.n	8002968 <HAL_ADC_ConfigChannel+0xf0>
 8002966:	e061      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x1b4>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2280      	movs	r2, #128	@ 0x80
 800296e:	4013      	ands	r3, r2
 8002970:	d000      	beq.n	8002974 <HAL_ADC_ConfigChannel+0xfc>
 8002972:	e059      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x1b0>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	2380      	movs	r3, #128	@ 0x80
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4013      	ands	r3, r2
 800297e:	d151      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x1ac>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	2380      	movs	r3, #128	@ 0x80
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4013      	ands	r3, r2
 800298a:	d149      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x1a8>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	2380      	movs	r3, #128	@ 0x80
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4013      	ands	r3, r2
 8002996:	d141      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x1a4>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	2380      	movs	r3, #128	@ 0x80
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	4013      	ands	r3, r2
 80029a2:	d139      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x1a0>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	2380      	movs	r3, #128	@ 0x80
 80029aa:	015b      	lsls	r3, r3, #5
 80029ac:	4013      	ands	r3, r2
 80029ae:	d131      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x19c>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	2380      	movs	r3, #128	@ 0x80
 80029b6:	019b      	lsls	r3, r3, #6
 80029b8:	4013      	ands	r3, r2
 80029ba:	d129      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x198>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	2380      	movs	r3, #128	@ 0x80
 80029c2:	01db      	lsls	r3, r3, #7
 80029c4:	4013      	ands	r3, r2
 80029c6:	d121      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x194>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	2380      	movs	r3, #128	@ 0x80
 80029ce:	021b      	lsls	r3, r3, #8
 80029d0:	4013      	ands	r3, r2
 80029d2:	d119      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x190>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	2380      	movs	r3, #128	@ 0x80
 80029da:	025b      	lsls	r3, r3, #9
 80029dc:	4013      	ands	r3, r2
 80029de:	d111      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x18c>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	2380      	movs	r3, #128	@ 0x80
 80029e6:	029b      	lsls	r3, r3, #10
 80029e8:	4013      	ands	r3, r2
 80029ea:	d109      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x188>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	2380      	movs	r3, #128	@ 0x80
 80029f2:	02db      	lsls	r3, r3, #11
 80029f4:	4013      	ands	r3, r2
 80029f6:	d001      	beq.n	80029fc <HAL_ADC_ConfigChannel+0x184>
 80029f8:	2312      	movs	r3, #18
 80029fa:	e024      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1ce>
 80029fc:	2300      	movs	r3, #0
 80029fe:	e022      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1ce>
 8002a00:	2311      	movs	r3, #17
 8002a02:	e020      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1ce>
 8002a04:	2310      	movs	r3, #16
 8002a06:	e01e      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1ce>
 8002a08:	230f      	movs	r3, #15
 8002a0a:	e01c      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1ce>
 8002a0c:	230e      	movs	r3, #14
 8002a0e:	e01a      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1ce>
 8002a10:	230d      	movs	r3, #13
 8002a12:	e018      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1ce>
 8002a14:	230c      	movs	r3, #12
 8002a16:	e016      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1ce>
 8002a18:	230b      	movs	r3, #11
 8002a1a:	e014      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1ce>
 8002a1c:	230a      	movs	r3, #10
 8002a1e:	e012      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1ce>
 8002a20:	2309      	movs	r3, #9
 8002a22:	e010      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1ce>
 8002a24:	2308      	movs	r3, #8
 8002a26:	e00e      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1ce>
 8002a28:	2307      	movs	r3, #7
 8002a2a:	e00c      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1ce>
 8002a2c:	2306      	movs	r3, #6
 8002a2e:	e00a      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1ce>
 8002a30:	2305      	movs	r3, #5
 8002a32:	e008      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1ce>
 8002a34:	2304      	movs	r3, #4
 8002a36:	e006      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1ce>
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e004      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1ce>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e002      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1ce>
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1ce>
 8002a44:	2300      	movs	r3, #0
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	6852      	ldr	r2, [r2, #4]
 8002a4a:	201f      	movs	r0, #31
 8002a4c:	4002      	ands	r2, r0
 8002a4e:	4093      	lsls	r3, r2
 8002a50:	000a      	movs	r2, r1
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	089b      	lsrs	r3, r3, #2
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d808      	bhi.n	8002a7a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	001a      	movs	r2, r3
 8002a76:	f7ff fa1f 	bl	8001eb8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	6819      	ldr	r1, [r3, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	001a      	movs	r2, r3
 8002a88:	f7ff fa66 	bl	8001f58 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	db00      	blt.n	8002a96 <HAL_ADC_ConfigChannel+0x21e>
 8002a94:	e0bc      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a96:	4b50      	ldr	r3, [pc, #320]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x360>)
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f7ff f9bb 	bl	8001e14 <LL_ADC_GetCommonPathInternalCh>
 8002a9e:	0003      	movs	r3, r0
 8002aa0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a4d      	ldr	r2, [pc, #308]	@ (8002bdc <HAL_ADC_ConfigChannel+0x364>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d122      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	2380      	movs	r3, #128	@ 0x80
 8002ab0:	041b      	lsls	r3, r3, #16
 8002ab2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ab4:	d11d      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2280      	movs	r2, #128	@ 0x80
 8002aba:	0412      	lsls	r2, r2, #16
 8002abc:	4313      	orrs	r3, r2
 8002abe:	4a46      	ldr	r2, [pc, #280]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x360>)
 8002ac0:	0019      	movs	r1, r3
 8002ac2:	0010      	movs	r0, r2
 8002ac4:	f7ff f992 	bl	8001dec <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ac8:	4b45      	ldr	r3, [pc, #276]	@ (8002be0 <HAL_ADC_ConfigChannel+0x368>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4945      	ldr	r1, [pc, #276]	@ (8002be4 <HAL_ADC_ConfigChannel+0x36c>)
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7fd fb18 	bl	8000104 <__udivsi3>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	0013      	movs	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	189b      	adds	r3, r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ae2:	e002      	b.n	8002aea <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f9      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002af0:	e08e      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a3c      	ldr	r2, [pc, #240]	@ (8002be8 <HAL_ADC_ConfigChannel+0x370>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d10e      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	2380      	movs	r3, #128	@ 0x80
 8002b00:	045b      	lsls	r3, r3, #17
 8002b02:	4013      	ands	r3, r2
 8002b04:	d109      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2280      	movs	r2, #128	@ 0x80
 8002b0a:	0452      	lsls	r2, r2, #17
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	4a32      	ldr	r2, [pc, #200]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x360>)
 8002b10:	0019      	movs	r1, r3
 8002b12:	0010      	movs	r0, r2
 8002b14:	f7ff f96a 	bl	8001dec <LL_ADC_SetCommonPathInternalCh>
 8002b18:	e07a      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a33      	ldr	r2, [pc, #204]	@ (8002bec <HAL_ADC_ConfigChannel+0x374>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d000      	beq.n	8002b26 <HAL_ADC_ConfigChannel+0x2ae>
 8002b24:	e074      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	2380      	movs	r3, #128	@ 0x80
 8002b2a:	03db      	lsls	r3, r3, #15
 8002b2c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002b2e:	d000      	beq.n	8002b32 <HAL_ADC_ConfigChannel+0x2ba>
 8002b30:	e06e      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	2280      	movs	r2, #128	@ 0x80
 8002b36:	03d2      	lsls	r2, r2, #15
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	4a27      	ldr	r2, [pc, #156]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x360>)
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	0010      	movs	r0, r2
 8002b40:	f7ff f954 	bl	8001dec <LL_ADC_SetCommonPathInternalCh>
 8002b44:	e064      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	2380      	movs	r3, #128	@ 0x80
 8002b4c:	061b      	lsls	r3, r3, #24
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d004      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b56:	4a1f      	ldr	r2, [pc, #124]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x35c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d107      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	0019      	movs	r1, r3
 8002b66:	0010      	movs	r0, r2
 8002b68:	f7ff f9d7 	bl	8001f1a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	da4d      	bge.n	8002c10 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b74:	4b18      	ldr	r3, [pc, #96]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x360>)
 8002b76:	0018      	movs	r0, r3
 8002b78:	f7ff f94c 	bl	8001e14 <LL_ADC_GetCommonPathInternalCh>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a15      	ldr	r2, [pc, #84]	@ (8002bdc <HAL_ADC_ConfigChannel+0x364>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d108      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4a18      	ldr	r2, [pc, #96]	@ (8002bf0 <HAL_ADC_ConfigChannel+0x378>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	4a11      	ldr	r2, [pc, #68]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x360>)
 8002b92:	0019      	movs	r1, r3
 8002b94:	0010      	movs	r0, r2
 8002b96:	f7ff f929 	bl	8001dec <LL_ADC_SetCommonPathInternalCh>
 8002b9a:	e039      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a11      	ldr	r2, [pc, #68]	@ (8002be8 <HAL_ADC_ConfigChannel+0x370>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d108      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4a12      	ldr	r2, [pc, #72]	@ (8002bf4 <HAL_ADC_ConfigChannel+0x37c>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x360>)
 8002bae:	0019      	movs	r1, r3
 8002bb0:	0010      	movs	r0, r2
 8002bb2:	f7ff f91b 	bl	8001dec <LL_ADC_SetCommonPathInternalCh>
 8002bb6:	e02b      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a0b      	ldr	r2, [pc, #44]	@ (8002bec <HAL_ADC_ConfigChannel+0x374>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d126      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8002bf8 <HAL_ADC_ConfigChannel+0x380>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	4a03      	ldr	r2, [pc, #12]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x360>)
 8002bca:	0019      	movs	r1, r3
 8002bcc:	0010      	movs	r0, r2
 8002bce:	f7ff f90d 	bl	8001dec <LL_ADC_SetCommonPathInternalCh>
 8002bd2:	e01d      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x398>
 8002bd4:	80000004 	.word	0x80000004
 8002bd8:	40012708 	.word	0x40012708
 8002bdc:	b0001000 	.word	0xb0001000
 8002be0:	20000004 	.word	0x20000004
 8002be4:	00030d40 	.word	0x00030d40
 8002be8:	b8004000 	.word	0xb8004000
 8002bec:	b4002000 	.word	0xb4002000
 8002bf0:	ff7fffff 	.word	0xff7fffff
 8002bf4:	feffffff 	.word	0xfeffffff
 8002bf8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c00:	2220      	movs	r2, #32
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002c08:	2317      	movs	r3, #23
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2254      	movs	r2, #84	@ 0x54
 8002c14:	2100      	movs	r1, #0
 8002c16:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002c18:	2317      	movs	r3, #23
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	781b      	ldrb	r3, [r3, #0]
}
 8002c1e:	0018      	movs	r0, r3
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b006      	add	sp, #24
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	46c0      	nop			@ (mov r8, r8)

08002c28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f7ff f9e3 	bl	8002004 <LL_ADC_IsEnabled>
 8002c3e:	1e03      	subs	r3, r0, #0
 8002c40:	d000      	beq.n	8002c44 <ADC_Enable+0x1c>
 8002c42:	e069      	b.n	8002d18 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	4a36      	ldr	r2, [pc, #216]	@ (8002d24 <ADC_Enable+0xfc>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d00d      	beq.n	8002c6c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c54:	2210      	movs	r2, #16
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c60:	2201      	movs	r2, #1
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e056      	b.n	8002d1a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	0018      	movs	r0, r3
 8002c72:	f7ff f9b5 	bl	8001fe0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002c76:	4b2c      	ldr	r3, [pc, #176]	@ (8002d28 <ADC_Enable+0x100>)
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f7ff f8cb 	bl	8001e14 <LL_ADC_GetCommonPathInternalCh>
 8002c7e:	0002      	movs	r2, r0
 8002c80:	2380      	movs	r3, #128	@ 0x80
 8002c82:	041b      	lsls	r3, r3, #16
 8002c84:	4013      	ands	r3, r2
 8002c86:	d00f      	beq.n	8002ca8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c88:	4b28      	ldr	r3, [pc, #160]	@ (8002d2c <ADC_Enable+0x104>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4928      	ldr	r1, [pc, #160]	@ (8002d30 <ADC_Enable+0x108>)
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f7fd fa38 	bl	8000104 <__udivsi3>
 8002c94:	0003      	movs	r3, r0
 8002c96:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002c98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c9a:	e002      	b.n	8002ca2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f9      	bne.n	8002c9c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7e5b      	ldrb	r3, [r3, #25]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d033      	beq.n	8002d18 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002cb0:	f7ff f892 	bl	8001dd8 <HAL_GetTick>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cb8:	e027      	b.n	8002d0a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f7ff f9a0 	bl	8002004 <LL_ADC_IsEnabled>
 8002cc4:	1e03      	subs	r3, r0, #0
 8002cc6:	d104      	bne.n	8002cd2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f7ff f987 	bl	8001fe0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cd2:	f7ff f881 	bl	8001dd8 <HAL_GetTick>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d914      	bls.n	8002d0a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d00d      	beq.n	8002d0a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf2:	2210      	movs	r2, #16
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfe:	2201      	movs	r2, #1
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e007      	b.n	8002d1a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2201      	movs	r2, #1
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d1d0      	bne.n	8002cba <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	b004      	add	sp, #16
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	46c0      	nop			@ (mov r8, r8)
 8002d24:	80000017 	.word	0x80000017
 8002d28:	40012708 	.word	0x40012708
 8002d2c:	20000004 	.word	0x20000004
 8002d30:	00030d40 	.word	0x00030d40

08002d34 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002d3c:	46c0      	nop			@ (mov r8, r8)
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b002      	add	sp, #8
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002d4c:	46c0      	nop			@ (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b002      	add	sp, #8
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002d5c:	46c0      	nop			@ (mov r8, r8)
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b002      	add	sp, #8
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002d6c:	46c0      	nop			@ (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b002      	add	sp, #8
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	0002      	movs	r2, r0
 8002d7c:	1dfb      	adds	r3, r7, #7
 8002d7e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d80:	1dfb      	adds	r3, r7, #7
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d86:	d809      	bhi.n	8002d9c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d88:	1dfb      	adds	r3, r7, #7
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	001a      	movs	r2, r3
 8002d8e:	231f      	movs	r3, #31
 8002d90:	401a      	ands	r2, r3
 8002d92:	4b04      	ldr	r3, [pc, #16]	@ (8002da4 <__NVIC_EnableIRQ+0x30>)
 8002d94:	2101      	movs	r1, #1
 8002d96:	4091      	lsls	r1, r2
 8002d98:	000a      	movs	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002d9c:	46c0      	nop			@ (mov r8, r8)
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b002      	add	sp, #8
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	e000e100 	.word	0xe000e100

08002da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da8:	b590      	push	{r4, r7, lr}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	0002      	movs	r2, r0
 8002db0:	6039      	str	r1, [r7, #0]
 8002db2:	1dfb      	adds	r3, r7, #7
 8002db4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002db6:	1dfb      	adds	r3, r7, #7
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b7f      	cmp	r3, #127	@ 0x7f
 8002dbc:	d828      	bhi.n	8002e10 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dbe:	4a2f      	ldr	r2, [pc, #188]	@ (8002e7c <__NVIC_SetPriority+0xd4>)
 8002dc0:	1dfb      	adds	r3, r7, #7
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	b25b      	sxtb	r3, r3
 8002dc6:	089b      	lsrs	r3, r3, #2
 8002dc8:	33c0      	adds	r3, #192	@ 0xc0
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	589b      	ldr	r3, [r3, r2]
 8002dce:	1dfa      	adds	r2, r7, #7
 8002dd0:	7812      	ldrb	r2, [r2, #0]
 8002dd2:	0011      	movs	r1, r2
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	400a      	ands	r2, r1
 8002dd8:	00d2      	lsls	r2, r2, #3
 8002dda:	21ff      	movs	r1, #255	@ 0xff
 8002ddc:	4091      	lsls	r1, r2
 8002dde:	000a      	movs	r2, r1
 8002de0:	43d2      	mvns	r2, r2
 8002de2:	401a      	ands	r2, r3
 8002de4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	019b      	lsls	r3, r3, #6
 8002dea:	22ff      	movs	r2, #255	@ 0xff
 8002dec:	401a      	ands	r2, r3
 8002dee:	1dfb      	adds	r3, r7, #7
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	0018      	movs	r0, r3
 8002df4:	2303      	movs	r3, #3
 8002df6:	4003      	ands	r3, r0
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dfc:	481f      	ldr	r0, [pc, #124]	@ (8002e7c <__NVIC_SetPriority+0xd4>)
 8002dfe:	1dfb      	adds	r3, r7, #7
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	b25b      	sxtb	r3, r3
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	430a      	orrs	r2, r1
 8002e08:	33c0      	adds	r3, #192	@ 0xc0
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002e0e:	e031      	b.n	8002e74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e10:	4a1b      	ldr	r2, [pc, #108]	@ (8002e80 <__NVIC_SetPriority+0xd8>)
 8002e12:	1dfb      	adds	r3, r7, #7
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	0019      	movs	r1, r3
 8002e18:	230f      	movs	r3, #15
 8002e1a:	400b      	ands	r3, r1
 8002e1c:	3b08      	subs	r3, #8
 8002e1e:	089b      	lsrs	r3, r3, #2
 8002e20:	3306      	adds	r3, #6
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	18d3      	adds	r3, r2, r3
 8002e26:	3304      	adds	r3, #4
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	1dfa      	adds	r2, r7, #7
 8002e2c:	7812      	ldrb	r2, [r2, #0]
 8002e2e:	0011      	movs	r1, r2
 8002e30:	2203      	movs	r2, #3
 8002e32:	400a      	ands	r2, r1
 8002e34:	00d2      	lsls	r2, r2, #3
 8002e36:	21ff      	movs	r1, #255	@ 0xff
 8002e38:	4091      	lsls	r1, r2
 8002e3a:	000a      	movs	r2, r1
 8002e3c:	43d2      	mvns	r2, r2
 8002e3e:	401a      	ands	r2, r3
 8002e40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	019b      	lsls	r3, r3, #6
 8002e46:	22ff      	movs	r2, #255	@ 0xff
 8002e48:	401a      	ands	r2, r3
 8002e4a:	1dfb      	adds	r3, r7, #7
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	0018      	movs	r0, r3
 8002e50:	2303      	movs	r3, #3
 8002e52:	4003      	ands	r3, r0
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e58:	4809      	ldr	r0, [pc, #36]	@ (8002e80 <__NVIC_SetPriority+0xd8>)
 8002e5a:	1dfb      	adds	r3, r7, #7
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	001c      	movs	r4, r3
 8002e60:	230f      	movs	r3, #15
 8002e62:	4023      	ands	r3, r4
 8002e64:	3b08      	subs	r3, #8
 8002e66:	089b      	lsrs	r3, r3, #2
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	3306      	adds	r3, #6
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	18c3      	adds	r3, r0, r3
 8002e70:	3304      	adds	r3, #4
 8002e72:	601a      	str	r2, [r3, #0]
}
 8002e74:	46c0      	nop			@ (mov r8, r8)
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b003      	add	sp, #12
 8002e7a:	bd90      	pop	{r4, r7, pc}
 8002e7c:	e000e100 	.word	0xe000e100
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	1e5a      	subs	r2, r3, #1
 8002e90:	2380      	movs	r3, #128	@ 0x80
 8002e92:	045b      	lsls	r3, r3, #17
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d301      	bcc.n	8002e9c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e010      	b.n	8002ebe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec8 <SysTick_Config+0x44>)
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	3a01      	subs	r2, #1
 8002ea2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	425b      	negs	r3, r3
 8002ea8:	2103      	movs	r1, #3
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f7ff ff7c 	bl	8002da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eb0:	4b05      	ldr	r3, [pc, #20]	@ (8002ec8 <SysTick_Config+0x44>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eb6:	4b04      	ldr	r3, [pc, #16]	@ (8002ec8 <SysTick_Config+0x44>)
 8002eb8:	2207      	movs	r2, #7
 8002eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b002      	add	sp, #8
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			@ (mov r8, r8)
 8002ec8:	e000e010 	.word	0xe000e010

08002ecc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	210f      	movs	r1, #15
 8002ed8:	187b      	adds	r3, r7, r1
 8002eda:	1c02      	adds	r2, r0, #0
 8002edc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	187b      	adds	r3, r7, r1
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	b25b      	sxtb	r3, r3
 8002ee6:	0011      	movs	r1, r2
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f7ff ff5d 	bl	8002da8 <__NVIC_SetPriority>
}
 8002eee:	46c0      	nop			@ (mov r8, r8)
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b004      	add	sp, #16
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	0002      	movs	r2, r0
 8002efe:	1dfb      	adds	r3, r7, #7
 8002f00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f02:	1dfb      	adds	r3, r7, #7
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	b25b      	sxtb	r3, r3
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f7ff ff33 	bl	8002d74 <__NVIC_EnableIRQ>
}
 8002f0e:	46c0      	nop			@ (mov r8, r8)
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b002      	add	sp, #8
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f7ff ffaf 	bl	8002e84 <SysTick_Config>
 8002f26:	0003      	movs	r3, r0
}
 8002f28:	0018      	movs	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b002      	add	sp, #8
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e077      	b.n	8003032 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a3d      	ldr	r2, [pc, #244]	@ (800303c <HAL_DMA_Init+0x10c>)
 8002f48:	4694      	mov	ip, r2
 8002f4a:	4463      	add	r3, ip
 8002f4c:	2114      	movs	r1, #20
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f7fd f8d8 	bl	8000104 <__udivsi3>
 8002f54:	0003      	movs	r3, r0
 8002f56:	009a      	lsls	r2, r3, #2
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2225      	movs	r2, #37	@ 0x25
 8002f60:	2102      	movs	r1, #2
 8002f62:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4934      	ldr	r1, [pc, #208]	@ (8003040 <HAL_DMA_Init+0x110>)
 8002f70:	400a      	ands	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6819      	ldr	r1, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	0018      	movs	r0, r3
 8002fae:	f000 f849 	bl	8003044 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	2380      	movs	r3, #128	@ 0x80
 8002fb8:	01db      	lsls	r3, r3, #7
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d102      	bne.n	8002fc4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fcc:	213f      	movs	r1, #63	@ 0x3f
 8002fce:	400a      	ands	r2, r1
 8002fd0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002fda:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d011      	beq.n	8003008 <HAL_DMA_Init+0xd8>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d80d      	bhi.n	8003008 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f000 f854 	bl	800309c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	e008      	b.n	800301a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2225      	movs	r2, #37	@ 0x25
 8003024:	2101      	movs	r1, #1
 8003026:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2224      	movs	r2, #36	@ 0x24
 800302c:	2100      	movs	r1, #0
 800302e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	0018      	movs	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	b002      	add	sp, #8
 8003038:	bd80      	pop	{r7, pc}
 800303a:	46c0      	nop			@ (mov r8, r8)
 800303c:	bffdfff8 	.word	0xbffdfff8
 8003040:	ffff800f 	.word	0xffff800f

08003044 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003050:	089b      	lsrs	r3, r3, #2
 8003052:	4a10      	ldr	r2, [pc, #64]	@ (8003094 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003054:	4694      	mov	ip, r2
 8003056:	4463      	add	r3, ip
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	001a      	movs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	001a      	movs	r2, r3
 8003066:	23ff      	movs	r3, #255	@ 0xff
 8003068:	4013      	ands	r3, r2
 800306a:	3b08      	subs	r3, #8
 800306c:	2114      	movs	r1, #20
 800306e:	0018      	movs	r0, r3
 8003070:	f7fd f848 	bl	8000104 <__udivsi3>
 8003074:	0003      	movs	r3, r0
 8003076:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a07      	ldr	r2, [pc, #28]	@ (8003098 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800307c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	221f      	movs	r2, #31
 8003082:	4013      	ands	r3, r2
 8003084:	2201      	movs	r2, #1
 8003086:	409a      	lsls	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800308c:	46c0      	nop			@ (mov r8, r8)
 800308e:	46bd      	mov	sp, r7
 8003090:	b004      	add	sp, #16
 8003092:	bd80      	pop	{r7, pc}
 8003094:	10008200 	.word	0x10008200
 8003098:	40020880 	.word	0x40020880

0800309c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	223f      	movs	r2, #63	@ 0x3f
 80030aa:	4013      	ands	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4a0a      	ldr	r2, [pc, #40]	@ (80030dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80030b2:	4694      	mov	ip, r2
 80030b4:	4463      	add	r3, ip
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	001a      	movs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a07      	ldr	r2, [pc, #28]	@ (80030e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80030c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	2203      	movs	r2, #3
 80030ca:	4013      	ands	r3, r2
 80030cc:	2201      	movs	r2, #1
 80030ce:	409a      	lsls	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80030d4:	46c0      	nop			@ (mov r8, r8)
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b004      	add	sp, #16
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	1000823f 	.word	0x1000823f
 80030e0:	40020940 	.word	0x40020940

080030e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030f2:	e147      	b.n	8003384 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2101      	movs	r1, #1
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4091      	lsls	r1, r2
 80030fe:	000a      	movs	r2, r1
 8003100:	4013      	ands	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d100      	bne.n	800310c <HAL_GPIO_Init+0x28>
 800310a:	e138      	b.n	800337e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2203      	movs	r2, #3
 8003112:	4013      	ands	r3, r2
 8003114:	2b01      	cmp	r3, #1
 8003116:	d005      	beq.n	8003124 <HAL_GPIO_Init+0x40>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2203      	movs	r2, #3
 800311e:	4013      	ands	r3, r2
 8003120:	2b02      	cmp	r3, #2
 8003122:	d130      	bne.n	8003186 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	2203      	movs	r2, #3
 8003130:	409a      	lsls	r2, r3
 8003132:	0013      	movs	r3, r2
 8003134:	43da      	mvns	r2, r3
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	409a      	lsls	r2, r3
 8003146:	0013      	movs	r3, r2
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800315a:	2201      	movs	r2, #1
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	409a      	lsls	r2, r3
 8003160:	0013      	movs	r3, r2
 8003162:	43da      	mvns	r2, r3
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	4013      	ands	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	091b      	lsrs	r3, r3, #4
 8003170:	2201      	movs	r2, #1
 8003172:	401a      	ands	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	409a      	lsls	r2, r3
 8003178:	0013      	movs	r3, r2
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2203      	movs	r2, #3
 800318c:	4013      	ands	r3, r2
 800318e:	2b03      	cmp	r3, #3
 8003190:	d017      	beq.n	80031c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	2203      	movs	r2, #3
 800319e:	409a      	lsls	r2, r3
 80031a0:	0013      	movs	r3, r2
 80031a2:	43da      	mvns	r2, r3
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	409a      	lsls	r2, r3
 80031b4:	0013      	movs	r3, r2
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2203      	movs	r2, #3
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d123      	bne.n	8003216 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	08da      	lsrs	r2, r3, #3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3208      	adds	r2, #8
 80031d6:	0092      	lsls	r2, r2, #2
 80031d8:	58d3      	ldr	r3, [r2, r3]
 80031da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2207      	movs	r2, #7
 80031e0:	4013      	ands	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	220f      	movs	r2, #15
 80031e6:	409a      	lsls	r2, r3
 80031e8:	0013      	movs	r3, r2
 80031ea:	43da      	mvns	r2, r3
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4013      	ands	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2107      	movs	r1, #7
 80031fa:	400b      	ands	r3, r1
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	409a      	lsls	r2, r3
 8003200:	0013      	movs	r3, r2
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	08da      	lsrs	r2, r3, #3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3208      	adds	r2, #8
 8003210:	0092      	lsls	r2, r2, #2
 8003212:	6939      	ldr	r1, [r7, #16]
 8003214:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	2203      	movs	r2, #3
 8003222:	409a      	lsls	r2, r3
 8003224:	0013      	movs	r3, r2
 8003226:	43da      	mvns	r2, r3
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	4013      	ands	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2203      	movs	r2, #3
 8003234:	401a      	ands	r2, r3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	409a      	lsls	r2, r3
 800323c:	0013      	movs	r3, r2
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	23c0      	movs	r3, #192	@ 0xc0
 8003250:	029b      	lsls	r3, r3, #10
 8003252:	4013      	ands	r3, r2
 8003254:	d100      	bne.n	8003258 <HAL_GPIO_Init+0x174>
 8003256:	e092      	b.n	800337e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003258:	4a50      	ldr	r2, [pc, #320]	@ (800339c <HAL_GPIO_Init+0x2b8>)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	089b      	lsrs	r3, r3, #2
 800325e:	3318      	adds	r3, #24
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	589b      	ldr	r3, [r3, r2]
 8003264:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2203      	movs	r2, #3
 800326a:	4013      	ands	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	220f      	movs	r2, #15
 8003270:	409a      	lsls	r2, r3
 8003272:	0013      	movs	r3, r2
 8003274:	43da      	mvns	r2, r3
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4013      	ands	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	23a0      	movs	r3, #160	@ 0xa0
 8003280:	05db      	lsls	r3, r3, #23
 8003282:	429a      	cmp	r2, r3
 8003284:	d013      	beq.n	80032ae <HAL_GPIO_Init+0x1ca>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a45      	ldr	r2, [pc, #276]	@ (80033a0 <HAL_GPIO_Init+0x2bc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00d      	beq.n	80032aa <HAL_GPIO_Init+0x1c6>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a44      	ldr	r2, [pc, #272]	@ (80033a4 <HAL_GPIO_Init+0x2c0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d007      	beq.n	80032a6 <HAL_GPIO_Init+0x1c2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a43      	ldr	r2, [pc, #268]	@ (80033a8 <HAL_GPIO_Init+0x2c4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <HAL_GPIO_Init+0x1be>
 800329e:	2303      	movs	r3, #3
 80032a0:	e006      	b.n	80032b0 <HAL_GPIO_Init+0x1cc>
 80032a2:	2305      	movs	r3, #5
 80032a4:	e004      	b.n	80032b0 <HAL_GPIO_Init+0x1cc>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e002      	b.n	80032b0 <HAL_GPIO_Init+0x1cc>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <HAL_GPIO_Init+0x1cc>
 80032ae:	2300      	movs	r3, #0
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	2103      	movs	r1, #3
 80032b4:	400a      	ands	r2, r1
 80032b6:	00d2      	lsls	r2, r2, #3
 80032b8:	4093      	lsls	r3, r2
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80032c0:	4936      	ldr	r1, [pc, #216]	@ (800339c <HAL_GPIO_Init+0x2b8>)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	089b      	lsrs	r3, r3, #2
 80032c6:	3318      	adds	r3, #24
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032ce:	4b33      	ldr	r3, [pc, #204]	@ (800339c <HAL_GPIO_Init+0x2b8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	43da      	mvns	r2, r3
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4013      	ands	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	2380      	movs	r3, #128	@ 0x80
 80032e4:	035b      	lsls	r3, r3, #13
 80032e6:	4013      	ands	r3, r2
 80032e8:	d003      	beq.n	80032f2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032f2:	4b2a      	ldr	r3, [pc, #168]	@ (800339c <HAL_GPIO_Init+0x2b8>)
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80032f8:	4b28      	ldr	r3, [pc, #160]	@ (800339c <HAL_GPIO_Init+0x2b8>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	43da      	mvns	r2, r3
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	2380      	movs	r3, #128	@ 0x80
 800330e:	039b      	lsls	r3, r3, #14
 8003310:	4013      	ands	r3, r2
 8003312:	d003      	beq.n	800331c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800331c:	4b1f      	ldr	r3, [pc, #124]	@ (800339c <HAL_GPIO_Init+0x2b8>)
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003322:	4a1e      	ldr	r2, [pc, #120]	@ (800339c <HAL_GPIO_Init+0x2b8>)
 8003324:	2384      	movs	r3, #132	@ 0x84
 8003326:	58d3      	ldr	r3, [r2, r3]
 8003328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	43da      	mvns	r2, r3
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	029b      	lsls	r3, r3, #10
 800333c:	4013      	ands	r3, r2
 800333e:	d003      	beq.n	8003348 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003348:	4914      	ldr	r1, [pc, #80]	@ (800339c <HAL_GPIO_Init+0x2b8>)
 800334a:	2284      	movs	r2, #132	@ 0x84
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003350:	4a12      	ldr	r2, [pc, #72]	@ (800339c <HAL_GPIO_Init+0x2b8>)
 8003352:	2380      	movs	r3, #128	@ 0x80
 8003354:	58d3      	ldr	r3, [r2, r3]
 8003356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	43da      	mvns	r2, r3
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4013      	ands	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	2380      	movs	r3, #128	@ 0x80
 8003368:	025b      	lsls	r3, r3, #9
 800336a:	4013      	ands	r3, r2
 800336c:	d003      	beq.n	8003376 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003376:	4909      	ldr	r1, [pc, #36]	@ (800339c <HAL_GPIO_Init+0x2b8>)
 8003378:	2280      	movs	r2, #128	@ 0x80
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	3301      	adds	r3, #1
 8003382:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	40da      	lsrs	r2, r3
 800338c:	1e13      	subs	r3, r2, #0
 800338e:	d000      	beq.n	8003392 <HAL_GPIO_Init+0x2ae>
 8003390:	e6b0      	b.n	80030f4 <HAL_GPIO_Init+0x10>
  }
}
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	46c0      	nop			@ (mov r8, r8)
 8003396:	46bd      	mov	sp, r7
 8003398:	b006      	add	sp, #24
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021800 	.word	0x40021800
 80033a0:	50000400 	.word	0x50000400
 80033a4:	50000800 	.word	0x50000800
 80033a8:	50000c00 	.word	0x50000c00

080033ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	0008      	movs	r0, r1
 80033b6:	0011      	movs	r1, r2
 80033b8:	1cbb      	adds	r3, r7, #2
 80033ba:	1c02      	adds	r2, r0, #0
 80033bc:	801a      	strh	r2, [r3, #0]
 80033be:	1c7b      	adds	r3, r7, #1
 80033c0:	1c0a      	adds	r2, r1, #0
 80033c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033c4:	1c7b      	adds	r3, r7, #1
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d004      	beq.n	80033d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033cc:	1cbb      	adds	r3, r7, #2
 80033ce:	881a      	ldrh	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033d4:	e003      	b.n	80033de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033d6:	1cbb      	adds	r3, r7, #2
 80033d8:	881a      	ldrh	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033de:	46c0      	nop			@ (mov r8, r8)
 80033e0:	46bd      	mov	sp, r7
 80033e2:	b002      	add	sp, #8
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80033f0:	4b19      	ldr	r3, [pc, #100]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a19      	ldr	r2, [pc, #100]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	0019      	movs	r1, r3
 80033fa:	4b17      	ldr	r3, [pc, #92]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	430a      	orrs	r2, r1
 8003400:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	2380      	movs	r3, #128	@ 0x80
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	429a      	cmp	r2, r3
 800340a:	d11f      	bne.n	800344c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800340c:	4b14      	ldr	r3, [pc, #80]	@ (8003460 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	0013      	movs	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	189b      	adds	r3, r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4912      	ldr	r1, [pc, #72]	@ (8003464 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800341a:	0018      	movs	r0, r3
 800341c:	f7fc fe72 	bl	8000104 <__udivsi3>
 8003420:	0003      	movs	r3, r0
 8003422:	3301      	adds	r3, #1
 8003424:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003426:	e008      	b.n	800343a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	3b01      	subs	r3, #1
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	e001      	b.n	800343a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e009      	b.n	800344e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800343a:	4b07      	ldr	r3, [pc, #28]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	2380      	movs	r3, #128	@ 0x80
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	401a      	ands	r2, r3
 8003444:	2380      	movs	r3, #128	@ 0x80
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	429a      	cmp	r2, r3
 800344a:	d0ed      	beq.n	8003428 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	0018      	movs	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	b004      	add	sp, #16
 8003454:	bd80      	pop	{r7, pc}
 8003456:	46c0      	nop			@ (mov r8, r8)
 8003458:	40007000 	.word	0x40007000
 800345c:	fffff9ff 	.word	0xfffff9ff
 8003460:	20000004 	.word	0x20000004
 8003464:	000f4240 	.word	0x000f4240

08003468 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800346c:	4b03      	ldr	r3, [pc, #12]	@ (800347c <LL_RCC_GetAPB1Prescaler+0x14>)
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	23e0      	movs	r3, #224	@ 0xe0
 8003472:	01db      	lsls	r3, r3, #7
 8003474:	4013      	ands	r3, r2
}
 8003476:	0018      	movs	r0, r3
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40021000 	.word	0x40021000

08003480 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e2fe      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2201      	movs	r2, #1
 8003498:	4013      	ands	r3, r2
 800349a:	d100      	bne.n	800349e <HAL_RCC_OscConfig+0x1e>
 800349c:	e07c      	b.n	8003598 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800349e:	4bc3      	ldr	r3, [pc, #780]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2238      	movs	r2, #56	@ 0x38
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034a8:	4bc0      	ldr	r3, [pc, #768]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2203      	movs	r2, #3
 80034ae:	4013      	ands	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	2b10      	cmp	r3, #16
 80034b6:	d102      	bne.n	80034be <HAL_RCC_OscConfig+0x3e>
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d002      	beq.n	80034c4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d10b      	bne.n	80034dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c4:	4bb9      	ldr	r3, [pc, #740]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	2380      	movs	r3, #128	@ 0x80
 80034ca:	029b      	lsls	r3, r3, #10
 80034cc:	4013      	ands	r3, r2
 80034ce:	d062      	beq.n	8003596 <HAL_RCC_OscConfig+0x116>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d15e      	bne.n	8003596 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e2d9      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	2380      	movs	r3, #128	@ 0x80
 80034e2:	025b      	lsls	r3, r3, #9
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d107      	bne.n	80034f8 <HAL_RCC_OscConfig+0x78>
 80034e8:	4bb0      	ldr	r3, [pc, #704]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	4baf      	ldr	r3, [pc, #700]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 80034ee:	2180      	movs	r1, #128	@ 0x80
 80034f0:	0249      	lsls	r1, r1, #9
 80034f2:	430a      	orrs	r2, r1
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	e020      	b.n	800353a <HAL_RCC_OscConfig+0xba>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	23a0      	movs	r3, #160	@ 0xa0
 80034fe:	02db      	lsls	r3, r3, #11
 8003500:	429a      	cmp	r2, r3
 8003502:	d10e      	bne.n	8003522 <HAL_RCC_OscConfig+0xa2>
 8003504:	4ba9      	ldr	r3, [pc, #676]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4ba8      	ldr	r3, [pc, #672]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 800350a:	2180      	movs	r1, #128	@ 0x80
 800350c:	02c9      	lsls	r1, r1, #11
 800350e:	430a      	orrs	r2, r1
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	4ba6      	ldr	r3, [pc, #664]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	4ba5      	ldr	r3, [pc, #660]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 8003518:	2180      	movs	r1, #128	@ 0x80
 800351a:	0249      	lsls	r1, r1, #9
 800351c:	430a      	orrs	r2, r1
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	e00b      	b.n	800353a <HAL_RCC_OscConfig+0xba>
 8003522:	4ba2      	ldr	r3, [pc, #648]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	4ba1      	ldr	r3, [pc, #644]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 8003528:	49a1      	ldr	r1, [pc, #644]	@ (80037b0 <HAL_RCC_OscConfig+0x330>)
 800352a:	400a      	ands	r2, r1
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	4b9f      	ldr	r3, [pc, #636]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	4b9e      	ldr	r3, [pc, #632]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 8003534:	499f      	ldr	r1, [pc, #636]	@ (80037b4 <HAL_RCC_OscConfig+0x334>)
 8003536:	400a      	ands	r2, r1
 8003538:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d014      	beq.n	800356c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003542:	f7fe fc49 	bl	8001dd8 <HAL_GetTick>
 8003546:	0003      	movs	r3, r0
 8003548:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800354c:	f7fe fc44 	bl	8001dd8 <HAL_GetTick>
 8003550:	0002      	movs	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b64      	cmp	r3, #100	@ 0x64
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e298      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800355e:	4b93      	ldr	r3, [pc, #588]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	2380      	movs	r3, #128	@ 0x80
 8003564:	029b      	lsls	r3, r3, #10
 8003566:	4013      	ands	r3, r2
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0xcc>
 800356a:	e015      	b.n	8003598 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fe fc34 	bl	8001dd8 <HAL_GetTick>
 8003570:	0003      	movs	r3, r0
 8003572:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003576:	f7fe fc2f 	bl	8001dd8 <HAL_GetTick>
 800357a:	0002      	movs	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b64      	cmp	r3, #100	@ 0x64
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e283      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003588:	4b88      	ldr	r3, [pc, #544]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	2380      	movs	r3, #128	@ 0x80
 800358e:	029b      	lsls	r3, r3, #10
 8003590:	4013      	ands	r3, r2
 8003592:	d1f0      	bne.n	8003576 <HAL_RCC_OscConfig+0xf6>
 8003594:	e000      	b.n	8003598 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003596:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2202      	movs	r2, #2
 800359e:	4013      	ands	r3, r2
 80035a0:	d100      	bne.n	80035a4 <HAL_RCC_OscConfig+0x124>
 80035a2:	e099      	b.n	80036d8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035a4:	4b81      	ldr	r3, [pc, #516]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2238      	movs	r2, #56	@ 0x38
 80035aa:	4013      	ands	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035ae:	4b7f      	ldr	r3, [pc, #508]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	2203      	movs	r2, #3
 80035b4:	4013      	ands	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b10      	cmp	r3, #16
 80035bc:	d102      	bne.n	80035c4 <HAL_RCC_OscConfig+0x144>
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d002      	beq.n	80035ca <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d135      	bne.n	8003636 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035ca:	4b78      	ldr	r3, [pc, #480]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	2380      	movs	r3, #128	@ 0x80
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4013      	ands	r3, r2
 80035d4:	d005      	beq.n	80035e2 <HAL_RCC_OscConfig+0x162>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e256      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e2:	4b72      	ldr	r3, [pc, #456]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4a74      	ldr	r2, [pc, #464]	@ (80037b8 <HAL_RCC_OscConfig+0x338>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	0019      	movs	r1, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	021a      	lsls	r2, r3, #8
 80035f2:	4b6e      	ldr	r3, [pc, #440]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 80035f4:	430a      	orrs	r2, r1
 80035f6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d112      	bne.n	8003624 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80035fe:	4b6b      	ldr	r3, [pc, #428]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a6e      	ldr	r2, [pc, #440]	@ (80037bc <HAL_RCC_OscConfig+0x33c>)
 8003604:	4013      	ands	r3, r2
 8003606:	0019      	movs	r1, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	4b67      	ldr	r3, [pc, #412]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 800360e:	430a      	orrs	r2, r1
 8003610:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003612:	4b66      	ldr	r3, [pc, #408]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	0adb      	lsrs	r3, r3, #11
 8003618:	2207      	movs	r2, #7
 800361a:	4013      	ands	r3, r2
 800361c:	4a68      	ldr	r2, [pc, #416]	@ (80037c0 <HAL_RCC_OscConfig+0x340>)
 800361e:	40da      	lsrs	r2, r3
 8003620:	4b68      	ldr	r3, [pc, #416]	@ (80037c4 <HAL_RCC_OscConfig+0x344>)
 8003622:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003624:	4b68      	ldr	r3, [pc, #416]	@ (80037c8 <HAL_RCC_OscConfig+0x348>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	0018      	movs	r0, r3
 800362a:	f7fe fb79 	bl	8001d20 <HAL_InitTick>
 800362e:	1e03      	subs	r3, r0, #0
 8003630:	d051      	beq.n	80036d6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e22c      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d030      	beq.n	80036a0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800363e:	4b5b      	ldr	r3, [pc, #364]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a5e      	ldr	r2, [pc, #376]	@ (80037bc <HAL_RCC_OscConfig+0x33c>)
 8003644:	4013      	ands	r3, r2
 8003646:	0019      	movs	r1, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	4b57      	ldr	r3, [pc, #348]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 800364e:	430a      	orrs	r2, r1
 8003650:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003652:	4b56      	ldr	r3, [pc, #344]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	4b55      	ldr	r3, [pc, #340]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 8003658:	2180      	movs	r1, #128	@ 0x80
 800365a:	0049      	lsls	r1, r1, #1
 800365c:	430a      	orrs	r2, r1
 800365e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fe fbba 	bl	8001dd8 <HAL_GetTick>
 8003664:	0003      	movs	r3, r0
 8003666:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800366a:	f7fe fbb5 	bl	8001dd8 <HAL_GetTick>
 800366e:	0002      	movs	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e209      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800367c:	4b4b      	ldr	r3, [pc, #300]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	2380      	movs	r3, #128	@ 0x80
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4013      	ands	r3, r2
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003688:	4b48      	ldr	r3, [pc, #288]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4a4a      	ldr	r2, [pc, #296]	@ (80037b8 <HAL_RCC_OscConfig+0x338>)
 800368e:	4013      	ands	r3, r2
 8003690:	0019      	movs	r1, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	021a      	lsls	r2, r3, #8
 8003698:	4b44      	ldr	r3, [pc, #272]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	e01b      	b.n	80036d8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80036a0:	4b42      	ldr	r3, [pc, #264]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	4b41      	ldr	r3, [pc, #260]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 80036a6:	4949      	ldr	r1, [pc, #292]	@ (80037cc <HAL_RCC_OscConfig+0x34c>)
 80036a8:	400a      	ands	r2, r1
 80036aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7fe fb94 	bl	8001dd8 <HAL_GetTick>
 80036b0:	0003      	movs	r3, r0
 80036b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b6:	f7fe fb8f 	bl	8001dd8 <HAL_GetTick>
 80036ba:	0002      	movs	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e1e3      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036c8:	4b38      	ldr	r3, [pc, #224]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	2380      	movs	r3, #128	@ 0x80
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4013      	ands	r3, r2
 80036d2:	d1f0      	bne.n	80036b6 <HAL_RCC_OscConfig+0x236>
 80036d4:	e000      	b.n	80036d8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036d6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2208      	movs	r2, #8
 80036de:	4013      	ands	r3, r2
 80036e0:	d047      	beq.n	8003772 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80036e2:	4b32      	ldr	r3, [pc, #200]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2238      	movs	r2, #56	@ 0x38
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b18      	cmp	r3, #24
 80036ec:	d10a      	bne.n	8003704 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80036ee:	4b2f      	ldr	r3, [pc, #188]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 80036f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f2:	2202      	movs	r2, #2
 80036f4:	4013      	ands	r3, r2
 80036f6:	d03c      	beq.n	8003772 <HAL_RCC_OscConfig+0x2f2>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d138      	bne.n	8003772 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e1c5      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d019      	beq.n	8003740 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800370c:	4b27      	ldr	r3, [pc, #156]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 800370e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003710:	4b26      	ldr	r3, [pc, #152]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 8003712:	2101      	movs	r1, #1
 8003714:	430a      	orrs	r2, r1
 8003716:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fe fb5e 	bl	8001dd8 <HAL_GetTick>
 800371c:	0003      	movs	r3, r0
 800371e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003722:	f7fe fb59 	bl	8001dd8 <HAL_GetTick>
 8003726:	0002      	movs	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e1ad      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003734:	4b1d      	ldr	r3, [pc, #116]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 8003736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003738:	2202      	movs	r2, #2
 800373a:	4013      	ands	r3, r2
 800373c:	d0f1      	beq.n	8003722 <HAL_RCC_OscConfig+0x2a2>
 800373e:	e018      	b.n	8003772 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003740:	4b1a      	ldr	r3, [pc, #104]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 8003742:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003744:	4b19      	ldr	r3, [pc, #100]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 8003746:	2101      	movs	r1, #1
 8003748:	438a      	bics	r2, r1
 800374a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374c:	f7fe fb44 	bl	8001dd8 <HAL_GetTick>
 8003750:	0003      	movs	r3, r0
 8003752:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003756:	f7fe fb3f 	bl	8001dd8 <HAL_GetTick>
 800375a:	0002      	movs	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e193      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003768:	4b10      	ldr	r3, [pc, #64]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 800376a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800376c:	2202      	movs	r2, #2
 800376e:	4013      	ands	r3, r2
 8003770:	d1f1      	bne.n	8003756 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2204      	movs	r2, #4
 8003778:	4013      	ands	r3, r2
 800377a:	d100      	bne.n	800377e <HAL_RCC_OscConfig+0x2fe>
 800377c:	e0c6      	b.n	800390c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377e:	231f      	movs	r3, #31
 8003780:	18fb      	adds	r3, r7, r3
 8003782:	2200      	movs	r2, #0
 8003784:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003786:	4b09      	ldr	r3, [pc, #36]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2238      	movs	r2, #56	@ 0x38
 800378c:	4013      	ands	r3, r2
 800378e:	2b20      	cmp	r3, #32
 8003790:	d11e      	bne.n	80037d0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003792:	4b06      	ldr	r3, [pc, #24]	@ (80037ac <HAL_RCC_OscConfig+0x32c>)
 8003794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003796:	2202      	movs	r2, #2
 8003798:	4013      	ands	r3, r2
 800379a:	d100      	bne.n	800379e <HAL_RCC_OscConfig+0x31e>
 800379c:	e0b6      	b.n	800390c <HAL_RCC_OscConfig+0x48c>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d000      	beq.n	80037a8 <HAL_RCC_OscConfig+0x328>
 80037a6:	e0b1      	b.n	800390c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e171      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
 80037ac:	40021000 	.word	0x40021000
 80037b0:	fffeffff 	.word	0xfffeffff
 80037b4:	fffbffff 	.word	0xfffbffff
 80037b8:	ffff80ff 	.word	0xffff80ff
 80037bc:	ffffc7ff 	.word	0xffffc7ff
 80037c0:	00f42400 	.word	0x00f42400
 80037c4:	20000004 	.word	0x20000004
 80037c8:	20000008 	.word	0x20000008
 80037cc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037d0:	4bb1      	ldr	r3, [pc, #708]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 80037d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037d4:	2380      	movs	r3, #128	@ 0x80
 80037d6:	055b      	lsls	r3, r3, #21
 80037d8:	4013      	ands	r3, r2
 80037da:	d101      	bne.n	80037e0 <HAL_RCC_OscConfig+0x360>
 80037dc:	2301      	movs	r3, #1
 80037de:	e000      	b.n	80037e2 <HAL_RCC_OscConfig+0x362>
 80037e0:	2300      	movs	r3, #0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d011      	beq.n	800380a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80037e6:	4bac      	ldr	r3, [pc, #688]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 80037e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037ea:	4bab      	ldr	r3, [pc, #684]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 80037ec:	2180      	movs	r1, #128	@ 0x80
 80037ee:	0549      	lsls	r1, r1, #21
 80037f0:	430a      	orrs	r2, r1
 80037f2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80037f4:	4ba8      	ldr	r3, [pc, #672]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 80037f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037f8:	2380      	movs	r3, #128	@ 0x80
 80037fa:	055b      	lsls	r3, r3, #21
 80037fc:	4013      	ands	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003802:	231f      	movs	r3, #31
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	2201      	movs	r2, #1
 8003808:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800380a:	4ba4      	ldr	r3, [pc, #656]	@ (8003a9c <HAL_RCC_OscConfig+0x61c>)
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	2380      	movs	r3, #128	@ 0x80
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	4013      	ands	r3, r2
 8003814:	d11a      	bne.n	800384c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003816:	4ba1      	ldr	r3, [pc, #644]	@ (8003a9c <HAL_RCC_OscConfig+0x61c>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4ba0      	ldr	r3, [pc, #640]	@ (8003a9c <HAL_RCC_OscConfig+0x61c>)
 800381c:	2180      	movs	r1, #128	@ 0x80
 800381e:	0049      	lsls	r1, r1, #1
 8003820:	430a      	orrs	r2, r1
 8003822:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003824:	f7fe fad8 	bl	8001dd8 <HAL_GetTick>
 8003828:	0003      	movs	r3, r0
 800382a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382e:	f7fe fad3 	bl	8001dd8 <HAL_GetTick>
 8003832:	0002      	movs	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e127      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003840:	4b96      	ldr	r3, [pc, #600]	@ (8003a9c <HAL_RCC_OscConfig+0x61c>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	2380      	movs	r3, #128	@ 0x80
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	4013      	ands	r3, r2
 800384a:	d0f0      	beq.n	800382e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d106      	bne.n	8003862 <HAL_RCC_OscConfig+0x3e2>
 8003854:	4b90      	ldr	r3, [pc, #576]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003856:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003858:	4b8f      	ldr	r3, [pc, #572]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 800385a:	2101      	movs	r1, #1
 800385c:	430a      	orrs	r2, r1
 800385e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003860:	e01c      	b.n	800389c <HAL_RCC_OscConfig+0x41c>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2b05      	cmp	r3, #5
 8003868:	d10c      	bne.n	8003884 <HAL_RCC_OscConfig+0x404>
 800386a:	4b8b      	ldr	r3, [pc, #556]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 800386c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800386e:	4b8a      	ldr	r3, [pc, #552]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003870:	2104      	movs	r1, #4
 8003872:	430a      	orrs	r2, r1
 8003874:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003876:	4b88      	ldr	r3, [pc, #544]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003878:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800387a:	4b87      	ldr	r3, [pc, #540]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 800387c:	2101      	movs	r1, #1
 800387e:	430a      	orrs	r2, r1
 8003880:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003882:	e00b      	b.n	800389c <HAL_RCC_OscConfig+0x41c>
 8003884:	4b84      	ldr	r3, [pc, #528]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003886:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003888:	4b83      	ldr	r3, [pc, #524]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 800388a:	2101      	movs	r1, #1
 800388c:	438a      	bics	r2, r1
 800388e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003890:	4b81      	ldr	r3, [pc, #516]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003892:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003894:	4b80      	ldr	r3, [pc, #512]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003896:	2104      	movs	r1, #4
 8003898:	438a      	bics	r2, r1
 800389a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d014      	beq.n	80038ce <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fe fa98 	bl	8001dd8 <HAL_GetTick>
 80038a8:	0003      	movs	r3, r0
 80038aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ac:	e009      	b.n	80038c2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ae:	f7fe fa93 	bl	8001dd8 <HAL_GetTick>
 80038b2:	0002      	movs	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	4a79      	ldr	r2, [pc, #484]	@ (8003aa0 <HAL_RCC_OscConfig+0x620>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e0e6      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c2:	4b75      	ldr	r3, [pc, #468]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 80038c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c6:	2202      	movs	r2, #2
 80038c8:	4013      	ands	r3, r2
 80038ca:	d0f0      	beq.n	80038ae <HAL_RCC_OscConfig+0x42e>
 80038cc:	e013      	b.n	80038f6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ce:	f7fe fa83 	bl	8001dd8 <HAL_GetTick>
 80038d2:	0003      	movs	r3, r0
 80038d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038d6:	e009      	b.n	80038ec <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d8:	f7fe fa7e 	bl	8001dd8 <HAL_GetTick>
 80038dc:	0002      	movs	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	4a6f      	ldr	r2, [pc, #444]	@ (8003aa0 <HAL_RCC_OscConfig+0x620>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e0d1      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 80038ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f0:	2202      	movs	r2, #2
 80038f2:	4013      	ands	r3, r2
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80038f6:	231f      	movs	r3, #31
 80038f8:	18fb      	adds	r3, r7, r3
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d105      	bne.n	800390c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003900:	4b65      	ldr	r3, [pc, #404]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003902:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003904:	4b64      	ldr	r3, [pc, #400]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003906:	4967      	ldr	r1, [pc, #412]	@ (8003aa4 <HAL_RCC_OscConfig+0x624>)
 8003908:	400a      	ands	r2, r1
 800390a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d100      	bne.n	8003916 <HAL_RCC_OscConfig+0x496>
 8003914:	e0bb      	b.n	8003a8e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003916:	4b60      	ldr	r3, [pc, #384]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2238      	movs	r2, #56	@ 0x38
 800391c:	4013      	ands	r3, r2
 800391e:	2b10      	cmp	r3, #16
 8003920:	d100      	bne.n	8003924 <HAL_RCC_OscConfig+0x4a4>
 8003922:	e07b      	b.n	8003a1c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d156      	bne.n	80039da <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392c:	4b5a      	ldr	r3, [pc, #360]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4b59      	ldr	r3, [pc, #356]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003932:	495d      	ldr	r1, [pc, #372]	@ (8003aa8 <HAL_RCC_OscConfig+0x628>)
 8003934:	400a      	ands	r2, r1
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fe fa4e 	bl	8001dd8 <HAL_GetTick>
 800393c:	0003      	movs	r3, r0
 800393e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003942:	f7fe fa49 	bl	8001dd8 <HAL_GetTick>
 8003946:	0002      	movs	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e09d      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003954:	4b50      	ldr	r3, [pc, #320]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	2380      	movs	r3, #128	@ 0x80
 800395a:	049b      	lsls	r3, r3, #18
 800395c:	4013      	ands	r3, r2
 800395e:	d1f0      	bne.n	8003942 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003960:	4b4d      	ldr	r3, [pc, #308]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	4a51      	ldr	r2, [pc, #324]	@ (8003aac <HAL_RCC_OscConfig+0x62c>)
 8003966:	4013      	ands	r3, r2
 8003968:	0019      	movs	r1, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1a      	ldr	r2, [r3, #32]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003978:	021b      	lsls	r3, r3, #8
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800398c:	431a      	orrs	r2, r3
 800398e:	4b42      	ldr	r3, [pc, #264]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003990:	430a      	orrs	r2, r1
 8003992:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003994:	4b40      	ldr	r3, [pc, #256]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	4b3f      	ldr	r3, [pc, #252]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 800399a:	2180      	movs	r1, #128	@ 0x80
 800399c:	0449      	lsls	r1, r1, #17
 800399e:	430a      	orrs	r2, r1
 80039a0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80039a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	4b3c      	ldr	r3, [pc, #240]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 80039a8:	2180      	movs	r1, #128	@ 0x80
 80039aa:	0549      	lsls	r1, r1, #21
 80039ac:	430a      	orrs	r2, r1
 80039ae:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fe fa12 	bl	8001dd8 <HAL_GetTick>
 80039b4:	0003      	movs	r3, r0
 80039b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ba:	f7fe fa0d 	bl	8001dd8 <HAL_GetTick>
 80039be:	0002      	movs	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e061      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039cc:	4b32      	ldr	r3, [pc, #200]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	2380      	movs	r3, #128	@ 0x80
 80039d2:	049b      	lsls	r3, r3, #18
 80039d4:	4013      	ands	r3, r2
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCC_OscConfig+0x53a>
 80039d8:	e059      	b.n	8003a8e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039da:	4b2f      	ldr	r3, [pc, #188]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	4b2e      	ldr	r3, [pc, #184]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 80039e0:	4931      	ldr	r1, [pc, #196]	@ (8003aa8 <HAL_RCC_OscConfig+0x628>)
 80039e2:	400a      	ands	r2, r1
 80039e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e6:	f7fe f9f7 	bl	8001dd8 <HAL_GetTick>
 80039ea:	0003      	movs	r3, r0
 80039ec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fe f9f2 	bl	8001dd8 <HAL_GetTick>
 80039f4:	0002      	movs	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e046      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a02:	4b25      	ldr	r3, [pc, #148]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	2380      	movs	r3, #128	@ 0x80
 8003a08:	049b      	lsls	r3, r3, #18
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003a0e:	4b22      	ldr	r3, [pc, #136]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	4b21      	ldr	r3, [pc, #132]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003a14:	4926      	ldr	r1, [pc, #152]	@ (8003ab0 <HAL_RCC_OscConfig+0x630>)
 8003a16:	400a      	ands	r2, r1
 8003a18:	60da      	str	r2, [r3, #12]
 8003a1a:	e038      	b.n	8003a8e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e033      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003a28:	4b1b      	ldr	r3, [pc, #108]	@ (8003a98 <HAL_RCC_OscConfig+0x618>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2203      	movs	r2, #3
 8003a32:	401a      	ands	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d126      	bne.n	8003a8a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	2270      	movs	r2, #112	@ 0x70
 8003a40:	401a      	ands	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d11f      	bne.n	8003a8a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	23fe      	movs	r3, #254	@ 0xfe
 8003a4e:	01db      	lsls	r3, r3, #7
 8003a50:	401a      	ands	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a56:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d116      	bne.n	8003a8a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	23f8      	movs	r3, #248	@ 0xf8
 8003a60:	039b      	lsls	r3, r3, #14
 8003a62:	401a      	ands	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d10e      	bne.n	8003a8a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	23e0      	movs	r3, #224	@ 0xe0
 8003a70:	051b      	lsls	r3, r3, #20
 8003a72:	401a      	ands	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d106      	bne.n	8003a8a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	0f5b      	lsrs	r3, r3, #29
 8003a80:	075a      	lsls	r2, r3, #29
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d001      	beq.n	8003a8e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b008      	add	sp, #32
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40007000 	.word	0x40007000
 8003aa0:	00001388 	.word	0x00001388
 8003aa4:	efffffff 	.word	0xefffffff
 8003aa8:	feffffff 	.word	0xfeffffff
 8003aac:	11c1808c 	.word	0x11c1808c
 8003ab0:	eefefffc 	.word	0xeefefffc

08003ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0e9      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b76      	ldr	r3, [pc, #472]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2207      	movs	r2, #7
 8003ace:	4013      	ands	r3, r2
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d91e      	bls.n	8003b14 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b73      	ldr	r3, [pc, #460]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2207      	movs	r2, #7
 8003adc:	4393      	bics	r3, r2
 8003ade:	0019      	movs	r1, r3
 8003ae0:	4b70      	ldr	r3, [pc, #448]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ae8:	f7fe f976 	bl	8001dd8 <HAL_GetTick>
 8003aec:	0003      	movs	r3, r0
 8003aee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003af0:	e009      	b.n	8003b06 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af2:	f7fe f971 	bl	8001dd8 <HAL_GetTick>
 8003af6:	0002      	movs	r2, r0
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	4a6a      	ldr	r2, [pc, #424]	@ (8003ca8 <HAL_RCC_ClockConfig+0x1f4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e0ca      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b06:	4b67      	ldr	r3, [pc, #412]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2207      	movs	r2, #7
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d1ee      	bne.n	8003af2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d015      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2204      	movs	r2, #4
 8003b24:	4013      	ands	r3, r2
 8003b26:	d006      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b28:	4b60      	ldr	r3, [pc, #384]	@ (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	4b5f      	ldr	r3, [pc, #380]	@ (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003b2e:	21e0      	movs	r1, #224	@ 0xe0
 8003b30:	01c9      	lsls	r1, r1, #7
 8003b32:	430a      	orrs	r2, r1
 8003b34:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b36:	4b5d      	ldr	r3, [pc, #372]	@ (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	4a5d      	ldr	r2, [pc, #372]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1fc>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	0019      	movs	r1, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	4b59      	ldr	r3, [pc, #356]	@ (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003b46:	430a      	orrs	r2, r1
 8003b48:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	4013      	ands	r3, r2
 8003b52:	d057      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d107      	bne.n	8003b6c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b5c:	4b53      	ldr	r3, [pc, #332]	@ (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	2380      	movs	r3, #128	@ 0x80
 8003b62:	029b      	lsls	r3, r3, #10
 8003b64:	4013      	ands	r3, r2
 8003b66:	d12b      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e097      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d107      	bne.n	8003b84 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b74:	4b4d      	ldr	r3, [pc, #308]	@ (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	2380      	movs	r3, #128	@ 0x80
 8003b7a:	049b      	lsls	r3, r3, #18
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	d11f      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e08b      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d107      	bne.n	8003b9c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b8c:	4b47      	ldr	r3, [pc, #284]	@ (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	2380      	movs	r3, #128	@ 0x80
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4013      	ands	r3, r2
 8003b96:	d113      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e07f      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b03      	cmp	r3, #3
 8003ba2:	d106      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ba4:	4b41      	ldr	r3, [pc, #260]	@ (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba8:	2202      	movs	r2, #2
 8003baa:	4013      	ands	r3, r2
 8003bac:	d108      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e074      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bb2:	4b3e      	ldr	r3, [pc, #248]	@ (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d101      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e06d      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2207      	movs	r2, #7
 8003bc6:	4393      	bics	r3, r2
 8003bc8:	0019      	movs	r1, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	4b37      	ldr	r3, [pc, #220]	@ (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bd4:	f7fe f900 	bl	8001dd8 <HAL_GetTick>
 8003bd8:	0003      	movs	r3, r0
 8003bda:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bdc:	e009      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bde:	f7fe f8fb 	bl	8001dd8 <HAL_GetTick>
 8003be2:	0002      	movs	r2, r0
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	4a2f      	ldr	r2, [pc, #188]	@ (8003ca8 <HAL_RCC_ClockConfig+0x1f4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e054      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf2:	4b2e      	ldr	r3, [pc, #184]	@ (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2238      	movs	r2, #56	@ 0x38
 8003bf8:	401a      	ands	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d1ec      	bne.n	8003bde <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c04:	4b27      	ldr	r3, [pc, #156]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2207      	movs	r2, #7
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d21e      	bcs.n	8003c50 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c12:	4b24      	ldr	r3, [pc, #144]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2207      	movs	r2, #7
 8003c18:	4393      	bics	r3, r2
 8003c1a:	0019      	movs	r1, r3
 8003c1c:	4b21      	ldr	r3, [pc, #132]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c24:	f7fe f8d8 	bl	8001dd8 <HAL_GetTick>
 8003c28:	0003      	movs	r3, r0
 8003c2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c2c:	e009      	b.n	8003c42 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c2e:	f7fe f8d3 	bl	8001dd8 <HAL_GetTick>
 8003c32:	0002      	movs	r2, r0
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca8 <HAL_RCC_ClockConfig+0x1f4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e02c      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c42:	4b18      	ldr	r3, [pc, #96]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2207      	movs	r2, #7
 8003c48:	4013      	ands	r3, r2
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d1ee      	bne.n	8003c2e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2204      	movs	r2, #4
 8003c56:	4013      	ands	r3, r2
 8003c58:	d009      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c5a:	4b14      	ldr	r3, [pc, #80]	@ (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	4a15      	ldr	r2, [pc, #84]	@ (8003cb4 <HAL_RCC_ClockConfig+0x200>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	0019      	movs	r1, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	4b10      	ldr	r3, [pc, #64]	@ (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003c6e:	f000 f829 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 8003c72:	0001      	movs	r1, r0
 8003c74:	4b0d      	ldr	r3, [pc, #52]	@ (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	220f      	movs	r2, #15
 8003c7c:	401a      	ands	r2, r3
 8003c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8003cb8 <HAL_RCC_ClockConfig+0x204>)
 8003c80:	0092      	lsls	r2, r2, #2
 8003c82:	58d3      	ldr	r3, [r2, r3]
 8003c84:	221f      	movs	r2, #31
 8003c86:	4013      	ands	r3, r2
 8003c88:	000a      	movs	r2, r1
 8003c8a:	40da      	lsrs	r2, r3
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003cbc <HAL_RCC_ClockConfig+0x208>)
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c90:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc0 <HAL_RCC_ClockConfig+0x20c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	0018      	movs	r0, r3
 8003c96:	f7fe f843 	bl	8001d20 <HAL_InitTick>
 8003c9a:	0003      	movs	r3, r0
}
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b004      	add	sp, #16
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40022000 	.word	0x40022000
 8003ca8:	00001388 	.word	0x00001388
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	fffff0ff 	.word	0xfffff0ff
 8003cb4:	ffff8fff 	.word	0xffff8fff
 8003cb8:	0800682c 	.word	0x0800682c
 8003cbc:	20000004 	.word	0x20000004
 8003cc0:	20000008 	.word	0x20000008

08003cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cca:	4b3c      	ldr	r3, [pc, #240]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2238      	movs	r2, #56	@ 0x38
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	d10f      	bne.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003cd4:	4b39      	ldr	r3, [pc, #228]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	0adb      	lsrs	r3, r3, #11
 8003cda:	2207      	movs	r2, #7
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2201      	movs	r2, #1
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	0013      	movs	r3, r2
 8003ce4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003ce6:	6839      	ldr	r1, [r7, #0]
 8003ce8:	4835      	ldr	r0, [pc, #212]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003cea:	f7fc fa0b 	bl	8000104 <__udivsi3>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	e05d      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cf4:	4b31      	ldr	r3, [pc, #196]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2238      	movs	r2, #56	@ 0x38
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d102      	bne.n	8003d06 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d00:	4b30      	ldr	r3, [pc, #192]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	e054      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d06:	4b2d      	ldr	r3, [pc, #180]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2238      	movs	r2, #56	@ 0x38
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b10      	cmp	r3, #16
 8003d10:	d138      	bne.n	8003d84 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003d12:	4b2a      	ldr	r3, [pc, #168]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	2203      	movs	r2, #3
 8003d18:	4013      	ands	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d1c:	4b27      	ldr	r3, [pc, #156]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	2207      	movs	r2, #7
 8003d24:	4013      	ands	r3, r2
 8003d26:	3301      	adds	r3, #1
 8003d28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2b03      	cmp	r3, #3
 8003d2e:	d10d      	bne.n	8003d4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	4824      	ldr	r0, [pc, #144]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003d34:	f7fc f9e6 	bl	8000104 <__udivsi3>
 8003d38:	0003      	movs	r3, r0
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	0a1b      	lsrs	r3, r3, #8
 8003d42:	227f      	movs	r2, #127	@ 0x7f
 8003d44:	4013      	ands	r3, r2
 8003d46:	434b      	muls	r3, r1
 8003d48:	617b      	str	r3, [r7, #20]
        break;
 8003d4a:	e00d      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	481c      	ldr	r0, [pc, #112]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003d50:	f7fc f9d8 	bl	8000104 <__udivsi3>
 8003d54:	0003      	movs	r3, r0
 8003d56:	0019      	movs	r1, r3
 8003d58:	4b18      	ldr	r3, [pc, #96]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	227f      	movs	r2, #127	@ 0x7f
 8003d60:	4013      	ands	r3, r2
 8003d62:	434b      	muls	r3, r1
 8003d64:	617b      	str	r3, [r7, #20]
        break;
 8003d66:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003d68:	4b14      	ldr	r3, [pc, #80]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	0f5b      	lsrs	r3, r3, #29
 8003d6e:	2207      	movs	r2, #7
 8003d70:	4013      	ands	r3, r2
 8003d72:	3301      	adds	r3, #1
 8003d74:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	6978      	ldr	r0, [r7, #20]
 8003d7a:	f7fc f9c3 	bl	8000104 <__udivsi3>
 8003d7e:	0003      	movs	r3, r0
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	e015      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003d84:	4b0d      	ldr	r3, [pc, #52]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2238      	movs	r2, #56	@ 0x38
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d103      	bne.n	8003d98 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003d90:	2380      	movs	r3, #128	@ 0x80
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	e00b      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003d98:	4b08      	ldr	r3, [pc, #32]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2238      	movs	r2, #56	@ 0x38
 8003d9e:	4013      	ands	r3, r2
 8003da0:	2b18      	cmp	r3, #24
 8003da2:	d103      	bne.n	8003dac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003da4:	23fa      	movs	r3, #250	@ 0xfa
 8003da6:	01db      	lsls	r3, r3, #7
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	e001      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003db0:	693b      	ldr	r3, [r7, #16]
}
 8003db2:	0018      	movs	r0, r3
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b006      	add	sp, #24
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	00f42400 	.word	0x00f42400
 8003dc4:	007a1200 	.word	0x007a1200

08003dc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dcc:	4b02      	ldr	r3, [pc, #8]	@ (8003dd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dce:	681b      	ldr	r3, [r3, #0]
}
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	46c0      	nop			@ (mov r8, r8)
 8003dd8:	20000004 	.word	0x20000004

08003ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ddc:	b5b0      	push	{r4, r5, r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003de0:	f7ff fff2 	bl	8003dc8 <HAL_RCC_GetHCLKFreq>
 8003de4:	0004      	movs	r4, r0
 8003de6:	f7ff fb3f 	bl	8003468 <LL_RCC_GetAPB1Prescaler>
 8003dea:	0003      	movs	r3, r0
 8003dec:	0b1a      	lsrs	r2, r3, #12
 8003dee:	4b05      	ldr	r3, [pc, #20]	@ (8003e04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003df0:	0092      	lsls	r2, r2, #2
 8003df2:	58d3      	ldr	r3, [r2, r3]
 8003df4:	221f      	movs	r2, #31
 8003df6:	4013      	ands	r3, r2
 8003df8:	40dc      	lsrs	r4, r3
 8003dfa:	0023      	movs	r3, r4
}
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bdb0      	pop	{r4, r5, r7, pc}
 8003e02:	46c0      	nop			@ (mov r8, r8)
 8003e04:	0800686c 	.word	0x0800686c

08003e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e056      	b.n	8003ec8 <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	223d      	movs	r2, #61	@ 0x3d
 8003e1e:	5c9b      	ldrb	r3, [r3, r2]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d113      	bne.n	8003e4e <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	223c      	movs	r2, #60	@ 0x3c
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	0018      	movs	r0, r3
 8003e32:	f001 fa9d 	bl	8005370 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d102      	bne.n	8003e44 <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a23      	ldr	r2, [pc, #140]	@ (8003ed0 <HAL_TIM_Base_Init+0xc8>)
 8003e42:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	0010      	movs	r0, r2
 8003e4c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	223d      	movs	r2, #61	@ 0x3d
 8003e52:	2102      	movs	r1, #2
 8003e54:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	0019      	movs	r1, r3
 8003e60:	0010      	movs	r0, r2
 8003e62:	f000 ff41 	bl	8004ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2248      	movs	r2, #72	@ 0x48
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	223e      	movs	r2, #62	@ 0x3e
 8003e72:	2101      	movs	r1, #1
 8003e74:	5499      	strb	r1, [r3, r2]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	223f      	movs	r2, #63	@ 0x3f
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	5499      	strb	r1, [r3, r2]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2240      	movs	r2, #64	@ 0x40
 8003e82:	2101      	movs	r1, #1
 8003e84:	5499      	strb	r1, [r3, r2]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2241      	movs	r2, #65	@ 0x41
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	5499      	strb	r1, [r3, r2]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2242      	movs	r2, #66	@ 0x42
 8003e92:	2101      	movs	r1, #1
 8003e94:	5499      	strb	r1, [r3, r2]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2243      	movs	r2, #67	@ 0x43
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2244      	movs	r2, #68	@ 0x44
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	5499      	strb	r1, [r3, r2]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2245      	movs	r2, #69	@ 0x45
 8003eaa:	2101      	movs	r1, #1
 8003eac:	5499      	strb	r1, [r3, r2]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2246      	movs	r2, #70	@ 0x46
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	5499      	strb	r1, [r3, r2]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2247      	movs	r2, #71	@ 0x47
 8003eba:	2101      	movs	r1, #1
 8003ebc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	223d      	movs	r2, #61	@ 0x3d
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	0018      	movs	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	b002      	add	sp, #8
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	080010c1 	.word	0x080010c1

08003ed4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	223d      	movs	r2, #61	@ 0x3d
 8003ee0:	5c9b      	ldrb	r3, [r3, r2]
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d001      	beq.n	8003eec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e035      	b.n	8003f58 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	223d      	movs	r2, #61	@ 0x3d
 8003ef0:	2102      	movs	r1, #2
 8003ef2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a19      	ldr	r2, [pc, #100]	@ (8003f60 <HAL_TIM_Base_Start+0x8c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00a      	beq.n	8003f14 <HAL_TIM_Base_Start+0x40>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	2380      	movs	r3, #128	@ 0x80
 8003f04:	05db      	lsls	r3, r3, #23
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d004      	beq.n	8003f14 <HAL_TIM_Base_Start+0x40>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a15      	ldr	r2, [pc, #84]	@ (8003f64 <HAL_TIM_Base_Start+0x90>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d116      	bne.n	8003f42 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	4a13      	ldr	r2, [pc, #76]	@ (8003f68 <HAL_TIM_Base_Start+0x94>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b06      	cmp	r3, #6
 8003f24:	d016      	beq.n	8003f54 <HAL_TIM_Base_Start+0x80>
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	2380      	movs	r3, #128	@ 0x80
 8003f2a:	025b      	lsls	r3, r3, #9
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d011      	beq.n	8003f54 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f40:	e008      	b.n	8003f54 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	e000      	b.n	8003f56 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f54:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	0018      	movs	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b004      	add	sp, #16
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40012c00 	.word	0x40012c00
 8003f64:	40000400 	.word	0x40000400
 8003f68:	00010007 	.word	0x00010007

08003f6c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e056      	b.n	800402c <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	223d      	movs	r2, #61	@ 0x3d
 8003f82:	5c9b      	ldrb	r3, [r3, r2]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d113      	bne.n	8003fb2 <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	223c      	movs	r2, #60	@ 0x3c
 8003f8e:	2100      	movs	r1, #0
 8003f90:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	0018      	movs	r0, r3
 8003f96:	f001 f9eb 	bl	8005370 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d102      	bne.n	8003fa8 <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a23      	ldr	r2, [pc, #140]	@ (8004034 <HAL_TIM_OC_Init+0xc8>)
 8003fa6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	0010      	movs	r0, r2
 8003fb0:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	223d      	movs	r2, #61	@ 0x3d
 8003fb6:	2102      	movs	r1, #2
 8003fb8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	0019      	movs	r1, r3
 8003fc4:	0010      	movs	r0, r2
 8003fc6:	f000 fe8f 	bl	8004ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2248      	movs	r2, #72	@ 0x48
 8003fce:	2101      	movs	r1, #1
 8003fd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	223e      	movs	r2, #62	@ 0x3e
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	5499      	strb	r1, [r3, r2]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	223f      	movs	r2, #63	@ 0x3f
 8003fde:	2101      	movs	r1, #1
 8003fe0:	5499      	strb	r1, [r3, r2]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2240      	movs	r2, #64	@ 0x40
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	5499      	strb	r1, [r3, r2]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2241      	movs	r2, #65	@ 0x41
 8003fee:	2101      	movs	r1, #1
 8003ff0:	5499      	strb	r1, [r3, r2]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2242      	movs	r2, #66	@ 0x42
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	5499      	strb	r1, [r3, r2]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2243      	movs	r2, #67	@ 0x43
 8003ffe:	2101      	movs	r1, #1
 8004000:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2244      	movs	r2, #68	@ 0x44
 8004006:	2101      	movs	r1, #1
 8004008:	5499      	strb	r1, [r3, r2]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2245      	movs	r2, #69	@ 0x45
 800400e:	2101      	movs	r1, #1
 8004010:	5499      	strb	r1, [r3, r2]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2246      	movs	r2, #70	@ 0x46
 8004016:	2101      	movs	r1, #1
 8004018:	5499      	strb	r1, [r3, r2]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2247      	movs	r2, #71	@ 0x47
 800401e:	2101      	movs	r1, #1
 8004020:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	223d      	movs	r2, #61	@ 0x3d
 8004026:	2101      	movs	r1, #1
 8004028:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	0018      	movs	r0, r3
 800402e:	46bd      	mov	sp, r7
 8004030:	b002      	add	sp, #8
 8004032:	bd80      	pop	{r7, pc}
 8004034:	08004039 	.word	0x08004039

08004038 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004040:	46c0      	nop			@ (mov r8, r8)
 8004042:	46bd      	mov	sp, r7
 8004044:	b002      	add	sp, #8
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004052:	230f      	movs	r3, #15
 8004054:	18fb      	adds	r3, r7, r3
 8004056:	2200      	movs	r2, #0
 8004058:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d108      	bne.n	8004072 <HAL_TIM_OC_Start_IT+0x2a>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	223e      	movs	r2, #62	@ 0x3e
 8004064:	5c9b      	ldrb	r3, [r3, r2]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	1e5a      	subs	r2, r3, #1
 800406c:	4193      	sbcs	r3, r2
 800406e:	b2db      	uxtb	r3, r3
 8004070:	e037      	b.n	80040e2 <HAL_TIM_OC_Start_IT+0x9a>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b04      	cmp	r3, #4
 8004076:	d108      	bne.n	800408a <HAL_TIM_OC_Start_IT+0x42>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	223f      	movs	r2, #63	@ 0x3f
 800407c:	5c9b      	ldrb	r3, [r3, r2]
 800407e:	b2db      	uxtb	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	1e5a      	subs	r2, r3, #1
 8004084:	4193      	sbcs	r3, r2
 8004086:	b2db      	uxtb	r3, r3
 8004088:	e02b      	b.n	80040e2 <HAL_TIM_OC_Start_IT+0x9a>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d108      	bne.n	80040a2 <HAL_TIM_OC_Start_IT+0x5a>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2240      	movs	r2, #64	@ 0x40
 8004094:	5c9b      	ldrb	r3, [r3, r2]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	1e5a      	subs	r2, r3, #1
 800409c:	4193      	sbcs	r3, r2
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	e01f      	b.n	80040e2 <HAL_TIM_OC_Start_IT+0x9a>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b0c      	cmp	r3, #12
 80040a6:	d108      	bne.n	80040ba <HAL_TIM_OC_Start_IT+0x72>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2241      	movs	r2, #65	@ 0x41
 80040ac:	5c9b      	ldrb	r3, [r3, r2]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	1e5a      	subs	r2, r3, #1
 80040b4:	4193      	sbcs	r3, r2
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	e013      	b.n	80040e2 <HAL_TIM_OC_Start_IT+0x9a>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b10      	cmp	r3, #16
 80040be:	d108      	bne.n	80040d2 <HAL_TIM_OC_Start_IT+0x8a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2242      	movs	r2, #66	@ 0x42
 80040c4:	5c9b      	ldrb	r3, [r3, r2]
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	1e5a      	subs	r2, r3, #1
 80040cc:	4193      	sbcs	r3, r2
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	e007      	b.n	80040e2 <HAL_TIM_OC_Start_IT+0x9a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2243      	movs	r2, #67	@ 0x43
 80040d6:	5c9b      	ldrb	r3, [r3, r2]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	1e5a      	subs	r2, r3, #1
 80040de:	4193      	sbcs	r3, r2
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e0c4      	b.n	8004274 <HAL_TIM_OC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d104      	bne.n	80040fa <HAL_TIM_OC_Start_IT+0xb2>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	223e      	movs	r2, #62	@ 0x3e
 80040f4:	2102      	movs	r1, #2
 80040f6:	5499      	strb	r1, [r3, r2]
 80040f8:	e023      	b.n	8004142 <HAL_TIM_OC_Start_IT+0xfa>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d104      	bne.n	800410a <HAL_TIM_OC_Start_IT+0xc2>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	223f      	movs	r2, #63	@ 0x3f
 8004104:	2102      	movs	r1, #2
 8004106:	5499      	strb	r1, [r3, r2]
 8004108:	e01b      	b.n	8004142 <HAL_TIM_OC_Start_IT+0xfa>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d104      	bne.n	800411a <HAL_TIM_OC_Start_IT+0xd2>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2240      	movs	r2, #64	@ 0x40
 8004114:	2102      	movs	r1, #2
 8004116:	5499      	strb	r1, [r3, r2]
 8004118:	e013      	b.n	8004142 <HAL_TIM_OC_Start_IT+0xfa>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b0c      	cmp	r3, #12
 800411e:	d104      	bne.n	800412a <HAL_TIM_OC_Start_IT+0xe2>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2241      	movs	r2, #65	@ 0x41
 8004124:	2102      	movs	r1, #2
 8004126:	5499      	strb	r1, [r3, r2]
 8004128:	e00b      	b.n	8004142 <HAL_TIM_OC_Start_IT+0xfa>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b10      	cmp	r3, #16
 800412e:	d104      	bne.n	800413a <HAL_TIM_OC_Start_IT+0xf2>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2242      	movs	r2, #66	@ 0x42
 8004134:	2102      	movs	r1, #2
 8004136:	5499      	strb	r1, [r3, r2]
 8004138:	e003      	b.n	8004142 <HAL_TIM_OC_Start_IT+0xfa>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2243      	movs	r2, #67	@ 0x43
 800413e:	2102      	movs	r1, #2
 8004140:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b0c      	cmp	r3, #12
 8004146:	d02a      	beq.n	800419e <HAL_TIM_OC_Start_IT+0x156>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2b0c      	cmp	r3, #12
 800414c:	d830      	bhi.n	80041b0 <HAL_TIM_OC_Start_IT+0x168>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b08      	cmp	r3, #8
 8004152:	d01b      	beq.n	800418c <HAL_TIM_OC_Start_IT+0x144>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2b08      	cmp	r3, #8
 8004158:	d82a      	bhi.n	80041b0 <HAL_TIM_OC_Start_IT+0x168>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <HAL_TIM_OC_Start_IT+0x120>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2b04      	cmp	r3, #4
 8004164:	d009      	beq.n	800417a <HAL_TIM_OC_Start_IT+0x132>
 8004166:	e023      	b.n	80041b0 <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2102      	movs	r1, #2
 8004174:	430a      	orrs	r2, r1
 8004176:	60da      	str	r2, [r3, #12]
      break;
 8004178:	e01f      	b.n	80041ba <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2104      	movs	r1, #4
 8004186:	430a      	orrs	r2, r1
 8004188:	60da      	str	r2, [r3, #12]
      break;
 800418a:	e016      	b.n	80041ba <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2108      	movs	r1, #8
 8004198:	430a      	orrs	r2, r1
 800419a:	60da      	str	r2, [r3, #12]
      break;
 800419c:	e00d      	b.n	80041ba <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2110      	movs	r1, #16
 80041aa:	430a      	orrs	r2, r1
 80041ac:	60da      	str	r2, [r3, #12]
      break;
 80041ae:	e004      	b.n	80041ba <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 80041b0:	230f      	movs	r3, #15
 80041b2:	18fb      	adds	r3, r7, r3
 80041b4:	2201      	movs	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]
      break;
 80041b8:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80041ba:	230f      	movs	r3, #15
 80041bc:	18fb      	adds	r3, r7, r3
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d154      	bne.n	800426e <HAL_TIM_OC_Start_IT+0x226>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6839      	ldr	r1, [r7, #0]
 80041ca:	2201      	movs	r2, #1
 80041cc:	0018      	movs	r0, r3
 80041ce:	f001 f8ab 	bl	8005328 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a29      	ldr	r2, [pc, #164]	@ (800427c <HAL_TIM_OC_Start_IT+0x234>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d009      	beq.n	80041f0 <HAL_TIM_OC_Start_IT+0x1a8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a27      	ldr	r2, [pc, #156]	@ (8004280 <HAL_TIM_OC_Start_IT+0x238>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d004      	beq.n	80041f0 <HAL_TIM_OC_Start_IT+0x1a8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a26      	ldr	r2, [pc, #152]	@ (8004284 <HAL_TIM_OC_Start_IT+0x23c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d101      	bne.n	80041f4 <HAL_TIM_OC_Start_IT+0x1ac>
 80041f0:	2301      	movs	r3, #1
 80041f2:	e000      	b.n	80041f6 <HAL_TIM_OC_Start_IT+0x1ae>
 80041f4:	2300      	movs	r3, #0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d008      	beq.n	800420c <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2180      	movs	r1, #128	@ 0x80
 8004206:	0209      	lsls	r1, r1, #8
 8004208:	430a      	orrs	r2, r1
 800420a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a1a      	ldr	r2, [pc, #104]	@ (800427c <HAL_TIM_OC_Start_IT+0x234>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00a      	beq.n	800422c <HAL_TIM_OC_Start_IT+0x1e4>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	2380      	movs	r3, #128	@ 0x80
 800421c:	05db      	lsls	r3, r3, #23
 800421e:	429a      	cmp	r2, r3
 8004220:	d004      	beq.n	800422c <HAL_TIM_OC_Start_IT+0x1e4>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a18      	ldr	r2, [pc, #96]	@ (8004288 <HAL_TIM_OC_Start_IT+0x240>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d116      	bne.n	800425a <HAL_TIM_OC_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	4a16      	ldr	r2, [pc, #88]	@ (800428c <HAL_TIM_OC_Start_IT+0x244>)
 8004234:	4013      	ands	r3, r2
 8004236:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b06      	cmp	r3, #6
 800423c:	d016      	beq.n	800426c <HAL_TIM_OC_Start_IT+0x224>
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	2380      	movs	r3, #128	@ 0x80
 8004242:	025b      	lsls	r3, r3, #9
 8004244:	429a      	cmp	r2, r3
 8004246:	d011      	beq.n	800426c <HAL_TIM_OC_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2101      	movs	r1, #1
 8004254:	430a      	orrs	r2, r1
 8004256:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004258:	e008      	b.n	800426c <HAL_TIM_OC_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2101      	movs	r1, #1
 8004266:	430a      	orrs	r2, r1
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	e000      	b.n	800426e <HAL_TIM_OC_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800426e:	230f      	movs	r3, #15
 8004270:	18fb      	adds	r3, r7, r3
 8004272:	781b      	ldrb	r3, [r3, #0]
}
 8004274:	0018      	movs	r0, r3
 8004276:	46bd      	mov	sp, r7
 8004278:	b004      	add	sp, #16
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40012c00 	.word	0x40012c00
 8004280:	40014400 	.word	0x40014400
 8004284:	40014800 	.word	0x40014800
 8004288:	40000400 	.word	0x40000400
 800428c:	00010007 	.word	0x00010007

08004290 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e056      	b.n	8004350 <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	223d      	movs	r2, #61	@ 0x3d
 80042a6:	5c9b      	ldrb	r3, [r3, r2]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d113      	bne.n	80042d6 <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	223c      	movs	r2, #60	@ 0x3c
 80042b2:	2100      	movs	r1, #0
 80042b4:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	0018      	movs	r0, r3
 80042ba:	f001 f859 	bl	8005370 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d102      	bne.n	80042cc <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a23      	ldr	r2, [pc, #140]	@ (8004358 <HAL_TIM_PWM_Init+0xc8>)
 80042ca:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	0010      	movs	r0, r2
 80042d4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	223d      	movs	r2, #61	@ 0x3d
 80042da:	2102      	movs	r1, #2
 80042dc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	3304      	adds	r3, #4
 80042e6:	0019      	movs	r1, r3
 80042e8:	0010      	movs	r0, r2
 80042ea:	f000 fcfd 	bl	8004ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2248      	movs	r2, #72	@ 0x48
 80042f2:	2101      	movs	r1, #1
 80042f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	223e      	movs	r2, #62	@ 0x3e
 80042fa:	2101      	movs	r1, #1
 80042fc:	5499      	strb	r1, [r3, r2]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	223f      	movs	r2, #63	@ 0x3f
 8004302:	2101      	movs	r1, #1
 8004304:	5499      	strb	r1, [r3, r2]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2240      	movs	r2, #64	@ 0x40
 800430a:	2101      	movs	r1, #1
 800430c:	5499      	strb	r1, [r3, r2]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2241      	movs	r2, #65	@ 0x41
 8004312:	2101      	movs	r1, #1
 8004314:	5499      	strb	r1, [r3, r2]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2242      	movs	r2, #66	@ 0x42
 800431a:	2101      	movs	r1, #1
 800431c:	5499      	strb	r1, [r3, r2]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2243      	movs	r2, #67	@ 0x43
 8004322:	2101      	movs	r1, #1
 8004324:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2244      	movs	r2, #68	@ 0x44
 800432a:	2101      	movs	r1, #1
 800432c:	5499      	strb	r1, [r3, r2]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2245      	movs	r2, #69	@ 0x45
 8004332:	2101      	movs	r1, #1
 8004334:	5499      	strb	r1, [r3, r2]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2246      	movs	r2, #70	@ 0x46
 800433a:	2101      	movs	r1, #1
 800433c:	5499      	strb	r1, [r3, r2]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2247      	movs	r2, #71	@ 0x47
 8004342:	2101      	movs	r1, #1
 8004344:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	223d      	movs	r2, #61	@ 0x3d
 800434a:	2101      	movs	r1, #1
 800434c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	0018      	movs	r0, r3
 8004352:	46bd      	mov	sp, r7
 8004354:	b002      	add	sp, #8
 8004356:	bd80      	pop	{r7, pc}
 8004358:	0800435d 	.word	0x0800435d

0800435c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004364:	46c0      	nop			@ (mov r8, r8)
 8004366:	46bd      	mov	sp, r7
 8004368:	b002      	add	sp, #8
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d108      	bne.n	800438e <HAL_TIM_PWM_Start+0x22>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	223e      	movs	r2, #62	@ 0x3e
 8004380:	5c9b      	ldrb	r3, [r3, r2]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	3b01      	subs	r3, #1
 8004386:	1e5a      	subs	r2, r3, #1
 8004388:	4193      	sbcs	r3, r2
 800438a:	b2db      	uxtb	r3, r3
 800438c:	e037      	b.n	80043fe <HAL_TIM_PWM_Start+0x92>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b04      	cmp	r3, #4
 8004392:	d108      	bne.n	80043a6 <HAL_TIM_PWM_Start+0x3a>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	223f      	movs	r2, #63	@ 0x3f
 8004398:	5c9b      	ldrb	r3, [r3, r2]
 800439a:	b2db      	uxtb	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	1e5a      	subs	r2, r3, #1
 80043a0:	4193      	sbcs	r3, r2
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	e02b      	b.n	80043fe <HAL_TIM_PWM_Start+0x92>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d108      	bne.n	80043be <HAL_TIM_PWM_Start+0x52>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2240      	movs	r2, #64	@ 0x40
 80043b0:	5c9b      	ldrb	r3, [r3, r2]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	1e5a      	subs	r2, r3, #1
 80043b8:	4193      	sbcs	r3, r2
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	e01f      	b.n	80043fe <HAL_TIM_PWM_Start+0x92>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b0c      	cmp	r3, #12
 80043c2:	d108      	bne.n	80043d6 <HAL_TIM_PWM_Start+0x6a>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2241      	movs	r2, #65	@ 0x41
 80043c8:	5c9b      	ldrb	r3, [r3, r2]
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	1e5a      	subs	r2, r3, #1
 80043d0:	4193      	sbcs	r3, r2
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	e013      	b.n	80043fe <HAL_TIM_PWM_Start+0x92>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b10      	cmp	r3, #16
 80043da:	d108      	bne.n	80043ee <HAL_TIM_PWM_Start+0x82>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2242      	movs	r2, #66	@ 0x42
 80043e0:	5c9b      	ldrb	r3, [r3, r2]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	1e5a      	subs	r2, r3, #1
 80043e8:	4193      	sbcs	r3, r2
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	e007      	b.n	80043fe <HAL_TIM_PWM_Start+0x92>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2243      	movs	r2, #67	@ 0x43
 80043f2:	5c9b      	ldrb	r3, [r3, r2]
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	3b01      	subs	r3, #1
 80043f8:	1e5a      	subs	r2, r3, #1
 80043fa:	4193      	sbcs	r3, r2
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e081      	b.n	800450a <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d104      	bne.n	8004416 <HAL_TIM_PWM_Start+0xaa>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	223e      	movs	r2, #62	@ 0x3e
 8004410:	2102      	movs	r1, #2
 8004412:	5499      	strb	r1, [r3, r2]
 8004414:	e023      	b.n	800445e <HAL_TIM_PWM_Start+0xf2>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b04      	cmp	r3, #4
 800441a:	d104      	bne.n	8004426 <HAL_TIM_PWM_Start+0xba>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	223f      	movs	r2, #63	@ 0x3f
 8004420:	2102      	movs	r1, #2
 8004422:	5499      	strb	r1, [r3, r2]
 8004424:	e01b      	b.n	800445e <HAL_TIM_PWM_Start+0xf2>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b08      	cmp	r3, #8
 800442a:	d104      	bne.n	8004436 <HAL_TIM_PWM_Start+0xca>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2240      	movs	r2, #64	@ 0x40
 8004430:	2102      	movs	r1, #2
 8004432:	5499      	strb	r1, [r3, r2]
 8004434:	e013      	b.n	800445e <HAL_TIM_PWM_Start+0xf2>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b0c      	cmp	r3, #12
 800443a:	d104      	bne.n	8004446 <HAL_TIM_PWM_Start+0xda>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2241      	movs	r2, #65	@ 0x41
 8004440:	2102      	movs	r1, #2
 8004442:	5499      	strb	r1, [r3, r2]
 8004444:	e00b      	b.n	800445e <HAL_TIM_PWM_Start+0xf2>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b10      	cmp	r3, #16
 800444a:	d104      	bne.n	8004456 <HAL_TIM_PWM_Start+0xea>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2242      	movs	r2, #66	@ 0x42
 8004450:	2102      	movs	r1, #2
 8004452:	5499      	strb	r1, [r3, r2]
 8004454:	e003      	b.n	800445e <HAL_TIM_PWM_Start+0xf2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2243      	movs	r2, #67	@ 0x43
 800445a:	2102      	movs	r1, #2
 800445c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6839      	ldr	r1, [r7, #0]
 8004464:	2201      	movs	r2, #1
 8004466:	0018      	movs	r0, r3
 8004468:	f000 ff5e 	bl	8005328 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a28      	ldr	r2, [pc, #160]	@ (8004514 <HAL_TIM_PWM_Start+0x1a8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d009      	beq.n	800448a <HAL_TIM_PWM_Start+0x11e>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a27      	ldr	r2, [pc, #156]	@ (8004518 <HAL_TIM_PWM_Start+0x1ac>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d004      	beq.n	800448a <HAL_TIM_PWM_Start+0x11e>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a25      	ldr	r2, [pc, #148]	@ (800451c <HAL_TIM_PWM_Start+0x1b0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d101      	bne.n	800448e <HAL_TIM_PWM_Start+0x122>
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <HAL_TIM_PWM_Start+0x124>
 800448e:	2300      	movs	r3, #0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2180      	movs	r1, #128	@ 0x80
 80044a0:	0209      	lsls	r1, r1, #8
 80044a2:	430a      	orrs	r2, r1
 80044a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004514 <HAL_TIM_PWM_Start+0x1a8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00a      	beq.n	80044c6 <HAL_TIM_PWM_Start+0x15a>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	2380      	movs	r3, #128	@ 0x80
 80044b6:	05db      	lsls	r3, r3, #23
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d004      	beq.n	80044c6 <HAL_TIM_PWM_Start+0x15a>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a17      	ldr	r2, [pc, #92]	@ (8004520 <HAL_TIM_PWM_Start+0x1b4>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d116      	bne.n	80044f4 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	4a15      	ldr	r2, [pc, #84]	@ (8004524 <HAL_TIM_PWM_Start+0x1b8>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2b06      	cmp	r3, #6
 80044d6:	d016      	beq.n	8004506 <HAL_TIM_PWM_Start+0x19a>
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	2380      	movs	r3, #128	@ 0x80
 80044dc:	025b      	lsls	r3, r3, #9
 80044de:	429a      	cmp	r2, r3
 80044e0:	d011      	beq.n	8004506 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2101      	movs	r1, #1
 80044ee:	430a      	orrs	r2, r1
 80044f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f2:	e008      	b.n	8004506 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2101      	movs	r1, #1
 8004500:	430a      	orrs	r2, r1
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	e000      	b.n	8004508 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004506:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	0018      	movs	r0, r3
 800450c:	46bd      	mov	sp, r7
 800450e:	b004      	add	sp, #16
 8004510:	bd80      	pop	{r7, pc}
 8004512:	46c0      	nop			@ (mov r8, r8)
 8004514:	40012c00 	.word	0x40012c00
 8004518:	40014400 	.word	0x40014400
 800451c:	40014800 	.word	0x40014800
 8004520:	40000400 	.word	0x40000400
 8004524:	00010007 	.word	0x00010007

08004528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2202      	movs	r2, #2
 8004544:	4013      	ands	r3, r2
 8004546:	d027      	beq.n	8004598 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2202      	movs	r2, #2
 800454c:	4013      	ands	r3, r2
 800454e:	d023      	beq.n	8004598 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2203      	movs	r2, #3
 8004556:	4252      	negs	r2, r2
 8004558:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	2203      	movs	r2, #3
 8004568:	4013      	ands	r3, r2
 800456a:	d006      	beq.n	800457a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2294      	movs	r2, #148	@ 0x94
 8004570:	589b      	ldr	r3, [r3, r2]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	0010      	movs	r0, r2
 8004576:	4798      	blx	r3
 8004578:	e00b      	b.n	8004592 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	229c      	movs	r2, #156	@ 0x9c
 800457e:	589b      	ldr	r3, [r3, r2]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	0010      	movs	r0, r2
 8004584:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	22a0      	movs	r2, #160	@ 0xa0
 800458a:	589b      	ldr	r3, [r3, r2]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	0010      	movs	r0, r2
 8004590:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2204      	movs	r2, #4
 800459c:	4013      	ands	r3, r2
 800459e:	d028      	beq.n	80045f2 <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2204      	movs	r2, #4
 80045a4:	4013      	ands	r3, r2
 80045a6:	d024      	beq.n	80045f2 <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2205      	movs	r2, #5
 80045ae:	4252      	negs	r2, r2
 80045b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2202      	movs	r2, #2
 80045b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	23c0      	movs	r3, #192	@ 0xc0
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4013      	ands	r3, r2
 80045c4:	d006      	beq.n	80045d4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2294      	movs	r2, #148	@ 0x94
 80045ca:	589b      	ldr	r3, [r3, r2]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	0010      	movs	r0, r2
 80045d0:	4798      	blx	r3
 80045d2:	e00b      	b.n	80045ec <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	229c      	movs	r2, #156	@ 0x9c
 80045d8:	589b      	ldr	r3, [r3, r2]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	0010      	movs	r0, r2
 80045de:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	22a0      	movs	r2, #160	@ 0xa0
 80045e4:	589b      	ldr	r3, [r3, r2]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	0010      	movs	r0, r2
 80045ea:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2208      	movs	r2, #8
 80045f6:	4013      	ands	r3, r2
 80045f8:	d027      	beq.n	800464a <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2208      	movs	r2, #8
 80045fe:	4013      	ands	r3, r2
 8004600:	d023      	beq.n	800464a <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2209      	movs	r2, #9
 8004608:	4252      	negs	r2, r2
 800460a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2204      	movs	r2, #4
 8004610:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	2203      	movs	r2, #3
 800461a:	4013      	ands	r3, r2
 800461c:	d006      	beq.n	800462c <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2294      	movs	r2, #148	@ 0x94
 8004622:	589b      	ldr	r3, [r3, r2]
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	0010      	movs	r0, r2
 8004628:	4798      	blx	r3
 800462a:	e00b      	b.n	8004644 <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	229c      	movs	r2, #156	@ 0x9c
 8004630:	589b      	ldr	r3, [r3, r2]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	0010      	movs	r0, r2
 8004636:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	22a0      	movs	r2, #160	@ 0xa0
 800463c:	589b      	ldr	r3, [r3, r2]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	0010      	movs	r0, r2
 8004642:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	2210      	movs	r2, #16
 800464e:	4013      	ands	r3, r2
 8004650:	d028      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2210      	movs	r2, #16
 8004656:	4013      	ands	r3, r2
 8004658:	d024      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2211      	movs	r2, #17
 8004660:	4252      	negs	r2, r2
 8004662:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2208      	movs	r2, #8
 8004668:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69da      	ldr	r2, [r3, #28]
 8004670:	23c0      	movs	r3, #192	@ 0xc0
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4013      	ands	r3, r2
 8004676:	d006      	beq.n	8004686 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2294      	movs	r2, #148	@ 0x94
 800467c:	589b      	ldr	r3, [r3, r2]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	0010      	movs	r0, r2
 8004682:	4798      	blx	r3
 8004684:	e00b      	b.n	800469e <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	229c      	movs	r2, #156	@ 0x9c
 800468a:	589b      	ldr	r3, [r3, r2]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	0010      	movs	r0, r2
 8004690:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	22a0      	movs	r2, #160	@ 0xa0
 8004696:	589b      	ldr	r3, [r3, r2]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	0010      	movs	r0, r2
 800469c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2201      	movs	r2, #1
 80046a8:	4013      	ands	r3, r2
 80046aa:	d00e      	beq.n	80046ca <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2201      	movs	r2, #1
 80046b0:	4013      	ands	r3, r2
 80046b2:	d00a      	beq.n	80046ca <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2202      	movs	r2, #2
 80046ba:	4252      	negs	r2, r2
 80046bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2284      	movs	r2, #132	@ 0x84
 80046c2:	589b      	ldr	r3, [r3, r2]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	0010      	movs	r0, r2
 80046c8:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2280      	movs	r2, #128	@ 0x80
 80046ce:	4013      	ands	r3, r2
 80046d0:	d104      	bne.n	80046dc <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	2380      	movs	r3, #128	@ 0x80
 80046d6:	019b      	lsls	r3, r3, #6
 80046d8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80046da:	d00d      	beq.n	80046f8 <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2280      	movs	r2, #128	@ 0x80
 80046e0:	4013      	ands	r3, r2
 80046e2:	d009      	beq.n	80046f8 <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a22      	ldr	r2, [pc, #136]	@ (8004774 <HAL_TIM_IRQHandler+0x24c>)
 80046ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	22b4      	movs	r2, #180	@ 0xb4
 80046f0:	589b      	ldr	r3, [r3, r2]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	0010      	movs	r0, r2
 80046f6:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	2380      	movs	r3, #128	@ 0x80
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	4013      	ands	r3, r2
 8004700:	d00d      	beq.n	800471e <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2280      	movs	r2, #128	@ 0x80
 8004706:	4013      	ands	r3, r2
 8004708:	d009      	beq.n	800471e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1a      	ldr	r2, [pc, #104]	@ (8004778 <HAL_TIM_IRQHandler+0x250>)
 8004710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	22b8      	movs	r2, #184	@ 0xb8
 8004716:	589b      	ldr	r3, [r3, r2]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	0010      	movs	r0, r2
 800471c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2240      	movs	r2, #64	@ 0x40
 8004722:	4013      	ands	r3, r2
 8004724:	d00e      	beq.n	8004744 <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2240      	movs	r2, #64	@ 0x40
 800472a:	4013      	ands	r3, r2
 800472c:	d00a      	beq.n	8004744 <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2241      	movs	r2, #65	@ 0x41
 8004734:	4252      	negs	r2, r2
 8004736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	228c      	movs	r2, #140	@ 0x8c
 800473c:	589b      	ldr	r3, [r3, r2]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	0010      	movs	r0, r2
 8004742:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2220      	movs	r2, #32
 8004748:	4013      	ands	r3, r2
 800474a:	d00e      	beq.n	800476a <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2220      	movs	r2, #32
 8004750:	4013      	ands	r3, r2
 8004752:	d00a      	beq.n	800476a <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2221      	movs	r2, #33	@ 0x21
 800475a:	4252      	negs	r2, r2
 800475c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	22ac      	movs	r2, #172	@ 0xac
 8004762:	589b      	ldr	r3, [r3, r2]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	0010      	movs	r0, r2
 8004768:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800476a:	46c0      	nop			@ (mov r8, r8)
 800476c:	46bd      	mov	sp, r7
 800476e:	b004      	add	sp, #16
 8004770:	bd80      	pop	{r7, pc}
 8004772:	46c0      	nop			@ (mov r8, r8)
 8004774:	ffffdf7f 	.word	0xffffdf7f
 8004778:	fffffeff 	.word	0xfffffeff

0800477c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004788:	2317      	movs	r3, #23
 800478a:	18fb      	adds	r3, r7, r3
 800478c:	2200      	movs	r2, #0
 800478e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	223c      	movs	r2, #60	@ 0x3c
 8004794:	5c9b      	ldrb	r3, [r3, r2]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <HAL_TIM_OC_ConfigChannel+0x22>
 800479a:	2302      	movs	r3, #2
 800479c:	e048      	b.n	8004830 <HAL_TIM_OC_ConfigChannel+0xb4>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	223c      	movs	r2, #60	@ 0x3c
 80047a2:	2101      	movs	r1, #1
 80047a4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b14      	cmp	r3, #20
 80047aa:	d835      	bhi.n	8004818 <HAL_TIM_OC_ConfigChannel+0x9c>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	009a      	lsls	r2, r3, #2
 80047b0:	4b21      	ldr	r3, [pc, #132]	@ (8004838 <HAL_TIM_OC_ConfigChannel+0xbc>)
 80047b2:	18d3      	adds	r3, r2, r3
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	0011      	movs	r1, r2
 80047c0:	0018      	movs	r0, r3
 80047c2:	f000 fb15 	bl	8004df0 <TIM_OC1_SetConfig>
      break;
 80047c6:	e02c      	b.n	8004822 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	0011      	movs	r1, r2
 80047d0:	0018      	movs	r0, r3
 80047d2:	f000 fb8d 	bl	8004ef0 <TIM_OC2_SetConfig>
      break;
 80047d6:	e024      	b.n	8004822 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	0011      	movs	r1, r2
 80047e0:	0018      	movs	r0, r3
 80047e2:	f000 fc03 	bl	8004fec <TIM_OC3_SetConfig>
      break;
 80047e6:	e01c      	b.n	8004822 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	0011      	movs	r1, r2
 80047f0:	0018      	movs	r0, r3
 80047f2:	f000 fc7d 	bl	80050f0 <TIM_OC4_SetConfig>
      break;
 80047f6:	e014      	b.n	8004822 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	0011      	movs	r1, r2
 8004800:	0018      	movs	r0, r3
 8004802:	f000 fcd9 	bl	80051b8 <TIM_OC5_SetConfig>
      break;
 8004806:	e00c      	b.n	8004822 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	0011      	movs	r1, r2
 8004810:	0018      	movs	r0, r3
 8004812:	f000 fd2b 	bl	800526c <TIM_OC6_SetConfig>
      break;
 8004816:	e004      	b.n	8004822 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004818:	2317      	movs	r3, #23
 800481a:	18fb      	adds	r3, r7, r3
 800481c:	2201      	movs	r2, #1
 800481e:	701a      	strb	r2, [r3, #0]
      break;
 8004820:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	223c      	movs	r2, #60	@ 0x3c
 8004826:	2100      	movs	r1, #0
 8004828:	5499      	strb	r1, [r3, r2]

  return status;
 800482a:	2317      	movs	r3, #23
 800482c:	18fb      	adds	r3, r7, r3
 800482e:	781b      	ldrb	r3, [r3, #0]
}
 8004830:	0018      	movs	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	b006      	add	sp, #24
 8004836:	bd80      	pop	{r7, pc}
 8004838:	0800688c 	.word	0x0800688c

0800483c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004848:	2317      	movs	r3, #23
 800484a:	18fb      	adds	r3, r7, r3
 800484c:	2200      	movs	r2, #0
 800484e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	223c      	movs	r2, #60	@ 0x3c
 8004854:	5c9b      	ldrb	r3, [r3, r2]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d101      	bne.n	800485e <HAL_TIM_PWM_ConfigChannel+0x22>
 800485a:	2302      	movs	r3, #2
 800485c:	e0e5      	b.n	8004a2a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	223c      	movs	r2, #60	@ 0x3c
 8004862:	2101      	movs	r1, #1
 8004864:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b14      	cmp	r3, #20
 800486a:	d900      	bls.n	800486e <HAL_TIM_PWM_ConfigChannel+0x32>
 800486c:	e0d1      	b.n	8004a12 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	009a      	lsls	r2, r3, #2
 8004872:	4b70      	ldr	r3, [pc, #448]	@ (8004a34 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004874:	18d3      	adds	r3, r2, r3
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	0011      	movs	r1, r2
 8004882:	0018      	movs	r0, r3
 8004884:	f000 fab4 	bl	8004df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699a      	ldr	r2, [r3, #24]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2108      	movs	r1, #8
 8004894:	430a      	orrs	r2, r1
 8004896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699a      	ldr	r2, [r3, #24]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2104      	movs	r1, #4
 80048a4:	438a      	bics	r2, r1
 80048a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6999      	ldr	r1, [r3, #24]
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	619a      	str	r2, [r3, #24]
      break;
 80048ba:	e0af      	b.n	8004a1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	0011      	movs	r1, r2
 80048c4:	0018      	movs	r0, r3
 80048c6:	f000 fb13 	bl	8004ef0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699a      	ldr	r2, [r3, #24]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2180      	movs	r1, #128	@ 0x80
 80048d6:	0109      	lsls	r1, r1, #4
 80048d8:	430a      	orrs	r2, r1
 80048da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699a      	ldr	r2, [r3, #24]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4954      	ldr	r1, [pc, #336]	@ (8004a38 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80048e8:	400a      	ands	r2, r1
 80048ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6999      	ldr	r1, [r3, #24]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	021a      	lsls	r2, r3, #8
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	619a      	str	r2, [r3, #24]
      break;
 8004900:	e08c      	b.n	8004a1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	0011      	movs	r1, r2
 800490a:	0018      	movs	r0, r3
 800490c:	f000 fb6e 	bl	8004fec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	69da      	ldr	r2, [r3, #28]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2108      	movs	r1, #8
 800491c:	430a      	orrs	r2, r1
 800491e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	69da      	ldr	r2, [r3, #28]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2104      	movs	r1, #4
 800492c:	438a      	bics	r2, r1
 800492e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69d9      	ldr	r1, [r3, #28]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	691a      	ldr	r2, [r3, #16]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	61da      	str	r2, [r3, #28]
      break;
 8004942:	e06b      	b.n	8004a1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	0011      	movs	r1, r2
 800494c:	0018      	movs	r0, r3
 800494e:	f000 fbcf 	bl	80050f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69da      	ldr	r2, [r3, #28]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2180      	movs	r1, #128	@ 0x80
 800495e:	0109      	lsls	r1, r1, #4
 8004960:	430a      	orrs	r2, r1
 8004962:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69da      	ldr	r2, [r3, #28]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4932      	ldr	r1, [pc, #200]	@ (8004a38 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004970:	400a      	ands	r2, r1
 8004972:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69d9      	ldr	r1, [r3, #28]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	021a      	lsls	r2, r3, #8
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	61da      	str	r2, [r3, #28]
      break;
 8004988:	e048      	b.n	8004a1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	0011      	movs	r1, r2
 8004992:	0018      	movs	r0, r3
 8004994:	f000 fc10 	bl	80051b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2108      	movs	r1, #8
 80049a4:	430a      	orrs	r2, r1
 80049a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2104      	movs	r1, #4
 80049b4:	438a      	bics	r2, r1
 80049b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	691a      	ldr	r2, [r3, #16]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80049ca:	e027      	b.n	8004a1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	0011      	movs	r1, r2
 80049d4:	0018      	movs	r0, r3
 80049d6:	f000 fc49 	bl	800526c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2180      	movs	r1, #128	@ 0x80
 80049e6:	0109      	lsls	r1, r1, #4
 80049e8:	430a      	orrs	r2, r1
 80049ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4910      	ldr	r1, [pc, #64]	@ (8004a38 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80049f8:	400a      	ands	r2, r1
 80049fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	021a      	lsls	r2, r3, #8
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004a10:	e004      	b.n	8004a1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004a12:	2317      	movs	r3, #23
 8004a14:	18fb      	adds	r3, r7, r3
 8004a16:	2201      	movs	r2, #1
 8004a18:	701a      	strb	r2, [r3, #0]
      break;
 8004a1a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	223c      	movs	r2, #60	@ 0x3c
 8004a20:	2100      	movs	r1, #0
 8004a22:	5499      	strb	r1, [r3, r2]

  return status;
 8004a24:	2317      	movs	r3, #23
 8004a26:	18fb      	adds	r3, r7, r3
 8004a28:	781b      	ldrb	r3, [r3, #0]
}
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	b006      	add	sp, #24
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	46c0      	nop			@ (mov r8, r8)
 8004a34:	080068e0 	.word	0x080068e0
 8004a38:	fffffbff 	.word	0xfffffbff

08004a3c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a44:	46c0      	nop			@ (mov r8, r8)
 8004a46:	46bd      	mov	sp, r7
 8004a48:	b002      	add	sp, #8
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8004a54:	46c0      	nop			@ (mov r8, r8)
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b002      	add	sp, #8
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a64:	46c0      	nop			@ (mov r8, r8)
 8004a66:	46bd      	mov	sp, r7
 8004a68:	b002      	add	sp, #8
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a74:	46c0      	nop			@ (mov r8, r8)
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b002      	add	sp, #8
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8004a84:	46c0      	nop			@ (mov r8, r8)
 8004a86:	46bd      	mov	sp, r7
 8004a88:	b002      	add	sp, #8
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a94:	46c0      	nop			@ (mov r8, r8)
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b002      	add	sp, #8
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004aa4:	46c0      	nop			@ (mov r8, r8)
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	b002      	add	sp, #8
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ab4:	46c0      	nop			@ (mov r8, r8)
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b002      	add	sp, #8
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8004ac4:	46c0      	nop			@ (mov r8, r8)
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b002      	add	sp, #8
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004ad4:	46c0      	nop			@ (mov r8, r8)
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	b002      	add	sp, #8
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	607a      	str	r2, [r7, #4]
 8004ae6:	230b      	movs	r3, #11
 8004ae8:	18fb      	adds	r3, r7, r3
 8004aea:	1c0a      	adds	r2, r1, #0
 8004aec:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aee:	2317      	movs	r3, #23
 8004af0:	18fb      	adds	r3, r7, r3
 8004af2:	2200      	movs	r2, #0
 8004af4:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e0ea      	b.n	8004cd6 <HAL_TIM_RegisterCallback+0x1fa>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	223d      	movs	r2, #61	@ 0x3d
 8004b04:	5c9b      	ldrb	r3, [r3, r2]
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d000      	beq.n	8004b0e <HAL_TIM_RegisterCallback+0x32>
 8004b0c:	e08e      	b.n	8004c2c <HAL_TIM_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8004b0e:	230b      	movs	r3, #11
 8004b10:	18fb      	adds	r3, r7, r3
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b1b      	cmp	r3, #27
 8004b16:	d900      	bls.n	8004b1a <HAL_TIM_RegisterCallback+0x3e>
 8004b18:	e083      	b.n	8004c22 <HAL_TIM_RegisterCallback+0x146>
 8004b1a:	009a      	lsls	r2, r3, #2
 8004b1c:	4b70      	ldr	r3, [pc, #448]	@ (8004ce0 <HAL_TIM_RegisterCallback+0x204>)
 8004b1e:	18d3      	adds	r3, r2, r3
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8004b2a:	e0d1      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8004b32:	e0cd      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8004b3a:	e0c9      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8004b42:	e0c5      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8004b4a:	e0c1      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8004b52:	e0bd      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8004b5a:	e0b9      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8004b62:	e0b5      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8004b6a:	e0b1      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8004b72:	e0ad      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8004b7a:	e0a9      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8004b82:	e0a5      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8004b8a:	e0a1      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2180      	movs	r1, #128	@ 0x80
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	505a      	str	r2, [r3, r1]
        break;
 8004b94:	e09c      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2184      	movs	r1, #132	@ 0x84
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	505a      	str	r2, [r3, r1]
        break;
 8004b9e:	e097      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2188      	movs	r1, #136	@ 0x88
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	505a      	str	r2, [r3, r1]
        break;
 8004ba8:	e092      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	218c      	movs	r1, #140	@ 0x8c
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	505a      	str	r2, [r3, r1]
        break;
 8004bb2:	e08d      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2190      	movs	r1, #144	@ 0x90
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	505a      	str	r2, [r3, r1]
        break;
 8004bbc:	e088      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2194      	movs	r1, #148	@ 0x94
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	505a      	str	r2, [r3, r1]
        break;
 8004bc6:	e083      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2198      	movs	r1, #152	@ 0x98
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	505a      	str	r2, [r3, r1]
        break;
 8004bd0:	e07e      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	219c      	movs	r1, #156	@ 0x9c
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	505a      	str	r2, [r3, r1]
        break;
 8004bda:	e079      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	21a0      	movs	r1, #160	@ 0xa0
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	505a      	str	r2, [r3, r1]
        break;
 8004be4:	e074      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	21a4      	movs	r1, #164	@ 0xa4
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	505a      	str	r2, [r3, r1]
        break;
 8004bee:	e06f      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	21a8      	movs	r1, #168	@ 0xa8
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	505a      	str	r2, [r3, r1]
        break;
 8004bf8:	e06a      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	21ac      	movs	r1, #172	@ 0xac
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	505a      	str	r2, [r3, r1]
        break;
 8004c02:	e065      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	21b0      	movs	r1, #176	@ 0xb0
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	505a      	str	r2, [r3, r1]
        break;
 8004c0c:	e060      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	21b4      	movs	r1, #180	@ 0xb4
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	505a      	str	r2, [r3, r1]
        break;
 8004c16:	e05b      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	21b8      	movs	r1, #184	@ 0xb8
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	505a      	str	r2, [r3, r1]
        break;
 8004c20:	e056      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8004c22:	2317      	movs	r3, #23
 8004c24:	18fb      	adds	r3, r7, r3
 8004c26:	2201      	movs	r2, #1
 8004c28:	701a      	strb	r2, [r3, #0]
        break;
 8004c2a:	e051      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	223d      	movs	r2, #61	@ 0x3d
 8004c30:	5c9b      	ldrb	r3, [r3, r2]
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d147      	bne.n	8004cc8 <HAL_TIM_RegisterCallback+0x1ec>
  {
    switch (CallbackID)
 8004c38:	230b      	movs	r3, #11
 8004c3a:	18fb      	adds	r3, r7, r3
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	2b0d      	cmp	r3, #13
 8004c40:	d83d      	bhi.n	8004cbe <HAL_TIM_RegisterCallback+0x1e2>
 8004c42:	009a      	lsls	r2, r3, #2
 8004c44:	4b27      	ldr	r3, [pc, #156]	@ (8004ce4 <HAL_TIM_RegisterCallback+0x208>)
 8004c46:	18d3      	adds	r3, r2, r3
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8004c52:	e03d      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8004c5a:	e039      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8004c62:	e035      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8004c6a:	e031      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8004c72:	e02d      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8004c7a:	e029      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8004c82:	e025      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8004c8a:	e021      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8004c92:	e01d      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8004c9a:	e019      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8004ca2:	e015      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8004caa:	e011      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8004cb2:	e00d      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2180      	movs	r1, #128	@ 0x80
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	505a      	str	r2, [r3, r1]
        break;
 8004cbc:	e008      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8004cbe:	2317      	movs	r3, #23
 8004cc0:	18fb      	adds	r3, r7, r3
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	701a      	strb	r2, [r3, #0]
        break;
 8004cc6:	e003      	b.n	8004cd0 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8004cc8:	2317      	movs	r3, #23
 8004cca:	18fb      	adds	r3, r7, r3
 8004ccc:	2201      	movs	r2, #1
 8004cce:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004cd0:	2317      	movs	r3, #23
 8004cd2:	18fb      	adds	r3, r7, r3
 8004cd4:	781b      	ldrb	r3, [r3, #0]
}
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	b006      	add	sp, #24
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	46c0      	nop			@ (mov r8, r8)
 8004ce0:	08006934 	.word	0x08006934
 8004ce4:	080069a4 	.word	0x080069a4

08004ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a37      	ldr	r2, [pc, #220]	@ (8004dd8 <TIM_Base_SetConfig+0xf0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d008      	beq.n	8004d12 <TIM_Base_SetConfig+0x2a>
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	2380      	movs	r3, #128	@ 0x80
 8004d04:	05db      	lsls	r3, r3, #23
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d003      	beq.n	8004d12 <TIM_Base_SetConfig+0x2a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a33      	ldr	r2, [pc, #204]	@ (8004ddc <TIM_Base_SetConfig+0xf4>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d108      	bne.n	8004d24 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2270      	movs	r2, #112	@ 0x70
 8004d16:	4393      	bics	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a2c      	ldr	r2, [pc, #176]	@ (8004dd8 <TIM_Base_SetConfig+0xf0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d014      	beq.n	8004d56 <TIM_Base_SetConfig+0x6e>
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	2380      	movs	r3, #128	@ 0x80
 8004d30:	05db      	lsls	r3, r3, #23
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d00f      	beq.n	8004d56 <TIM_Base_SetConfig+0x6e>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a28      	ldr	r2, [pc, #160]	@ (8004ddc <TIM_Base_SetConfig+0xf4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00b      	beq.n	8004d56 <TIM_Base_SetConfig+0x6e>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a27      	ldr	r2, [pc, #156]	@ (8004de0 <TIM_Base_SetConfig+0xf8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d007      	beq.n	8004d56 <TIM_Base_SetConfig+0x6e>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a26      	ldr	r2, [pc, #152]	@ (8004de4 <TIM_Base_SetConfig+0xfc>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d003      	beq.n	8004d56 <TIM_Base_SetConfig+0x6e>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a25      	ldr	r2, [pc, #148]	@ (8004de8 <TIM_Base_SetConfig+0x100>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d108      	bne.n	8004d68 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4a24      	ldr	r2, [pc, #144]	@ (8004dec <TIM_Base_SetConfig+0x104>)
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2280      	movs	r2, #128	@ 0x80
 8004d6c:	4393      	bics	r3, r2
 8004d6e:	001a      	movs	r2, r3
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a11      	ldr	r2, [pc, #68]	@ (8004dd8 <TIM_Base_SetConfig+0xf0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d007      	beq.n	8004da6 <TIM_Base_SetConfig+0xbe>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a12      	ldr	r2, [pc, #72]	@ (8004de4 <TIM_Base_SetConfig+0xfc>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d003      	beq.n	8004da6 <TIM_Base_SetConfig+0xbe>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a11      	ldr	r2, [pc, #68]	@ (8004de8 <TIM_Base_SetConfig+0x100>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d103      	bne.n	8004dae <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	2201      	movs	r2, #1
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d106      	bne.n	8004dce <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	4393      	bics	r3, r2
 8004dc8:	001a      	movs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	611a      	str	r2, [r3, #16]
  }
}
 8004dce:	46c0      	nop			@ (mov r8, r8)
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	b004      	add	sp, #16
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	46c0      	nop			@ (mov r8, r8)
 8004dd8:	40012c00 	.word	0x40012c00
 8004ddc:	40000400 	.word	0x40000400
 8004de0:	40002000 	.word	0x40002000
 8004de4:	40014400 	.word	0x40014400
 8004de8:	40014800 	.word	0x40014800
 8004dec:	fffffcff 	.word	0xfffffcff

08004df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	2201      	movs	r2, #1
 8004e06:	4393      	bics	r3, r2
 8004e08:	001a      	movs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4a2e      	ldr	r2, [pc, #184]	@ (8004ed8 <TIM_OC1_SetConfig+0xe8>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2203      	movs	r2, #3
 8004e26:	4393      	bics	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2202      	movs	r2, #2
 8004e38:	4393      	bics	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a24      	ldr	r2, [pc, #144]	@ (8004edc <TIM_OC1_SetConfig+0xec>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d007      	beq.n	8004e5e <TIM_OC1_SetConfig+0x6e>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a23      	ldr	r2, [pc, #140]	@ (8004ee0 <TIM_OC1_SetConfig+0xf0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d003      	beq.n	8004e5e <TIM_OC1_SetConfig+0x6e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a22      	ldr	r2, [pc, #136]	@ (8004ee4 <TIM_OC1_SetConfig+0xf4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d10c      	bne.n	8004e78 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2208      	movs	r2, #8
 8004e62:	4393      	bics	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	2204      	movs	r2, #4
 8004e74:	4393      	bics	r3, r2
 8004e76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a18      	ldr	r2, [pc, #96]	@ (8004edc <TIM_OC1_SetConfig+0xec>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d007      	beq.n	8004e90 <TIM_OC1_SetConfig+0xa0>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a17      	ldr	r2, [pc, #92]	@ (8004ee0 <TIM_OC1_SetConfig+0xf0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d003      	beq.n	8004e90 <TIM_OC1_SetConfig+0xa0>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a16      	ldr	r2, [pc, #88]	@ (8004ee4 <TIM_OC1_SetConfig+0xf4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d111      	bne.n	8004eb4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	4a15      	ldr	r2, [pc, #84]	@ (8004ee8 <TIM_OC1_SetConfig+0xf8>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	4a14      	ldr	r2, [pc, #80]	@ (8004eec <TIM_OC1_SetConfig+0xfc>)
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	621a      	str	r2, [r3, #32]
}
 8004ece:	46c0      	nop			@ (mov r8, r8)
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	b006      	add	sp, #24
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	46c0      	nop			@ (mov r8, r8)
 8004ed8:	fffeff8f 	.word	0xfffeff8f
 8004edc:	40012c00 	.word	0x40012c00
 8004ee0:	40014400 	.word	0x40014400
 8004ee4:	40014800 	.word	0x40014800
 8004ee8:	fffffeff 	.word	0xfffffeff
 8004eec:	fffffdff 	.word	0xfffffdff

08004ef0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	2210      	movs	r2, #16
 8004f06:	4393      	bics	r3, r2
 8004f08:	001a      	movs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4a2c      	ldr	r2, [pc, #176]	@ (8004fd0 <TIM_OC2_SetConfig+0xe0>)
 8004f1e:	4013      	ands	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4a2b      	ldr	r2, [pc, #172]	@ (8004fd4 <TIM_OC2_SetConfig+0xe4>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	021b      	lsls	r3, r3, #8
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	4393      	bics	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a22      	ldr	r2, [pc, #136]	@ (8004fd8 <TIM_OC2_SetConfig+0xe8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d10d      	bne.n	8004f6e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2280      	movs	r2, #128	@ 0x80
 8004f56:	4393      	bics	r3, r2
 8004f58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2240      	movs	r2, #64	@ 0x40
 8004f6a:	4393      	bics	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a19      	ldr	r2, [pc, #100]	@ (8004fd8 <TIM_OC2_SetConfig+0xe8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d007      	beq.n	8004f86 <TIM_OC2_SetConfig+0x96>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a18      	ldr	r2, [pc, #96]	@ (8004fdc <TIM_OC2_SetConfig+0xec>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d003      	beq.n	8004f86 <TIM_OC2_SetConfig+0x96>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a17      	ldr	r2, [pc, #92]	@ (8004fe0 <TIM_OC2_SetConfig+0xf0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d113      	bne.n	8004fae <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	4a16      	ldr	r2, [pc, #88]	@ (8004fe4 <TIM_OC2_SetConfig+0xf4>)
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	4a15      	ldr	r2, [pc, #84]	@ (8004fe8 <TIM_OC2_SetConfig+0xf8>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	621a      	str	r2, [r3, #32]
}
 8004fc8:	46c0      	nop			@ (mov r8, r8)
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	b006      	add	sp, #24
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	feff8fff 	.word	0xfeff8fff
 8004fd4:	fffffcff 	.word	0xfffffcff
 8004fd8:	40012c00 	.word	0x40012c00
 8004fdc:	40014400 	.word	0x40014400
 8004fe0:	40014800 	.word	0x40014800
 8004fe4:	fffffbff 	.word	0xfffffbff
 8004fe8:	fffff7ff 	.word	0xfffff7ff

08004fec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	4a31      	ldr	r2, [pc, #196]	@ (80050c8 <TIM_OC3_SetConfig+0xdc>)
 8005002:	401a      	ands	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4a2d      	ldr	r2, [pc, #180]	@ (80050cc <TIM_OC3_SetConfig+0xe0>)
 8005018:	4013      	ands	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2203      	movs	r2, #3
 8005020:	4393      	bics	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	4313      	orrs	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	4a27      	ldr	r2, [pc, #156]	@ (80050d0 <TIM_OC3_SetConfig+0xe4>)
 8005032:	4013      	ands	r3, r2
 8005034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	021b      	lsls	r3, r3, #8
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a23      	ldr	r2, [pc, #140]	@ (80050d4 <TIM_OC3_SetConfig+0xe8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d10d      	bne.n	8005066 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	4a22      	ldr	r2, [pc, #136]	@ (80050d8 <TIM_OC3_SetConfig+0xec>)
 800504e:	4013      	ands	r3, r2
 8005050:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	4a1e      	ldr	r2, [pc, #120]	@ (80050dc <TIM_OC3_SetConfig+0xf0>)
 8005062:	4013      	ands	r3, r2
 8005064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a1a      	ldr	r2, [pc, #104]	@ (80050d4 <TIM_OC3_SetConfig+0xe8>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d007      	beq.n	800507e <TIM_OC3_SetConfig+0x92>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a1b      	ldr	r2, [pc, #108]	@ (80050e0 <TIM_OC3_SetConfig+0xf4>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d003      	beq.n	800507e <TIM_OC3_SetConfig+0x92>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a1a      	ldr	r2, [pc, #104]	@ (80050e4 <TIM_OC3_SetConfig+0xf8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d113      	bne.n	80050a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	4a19      	ldr	r2, [pc, #100]	@ (80050e8 <TIM_OC3_SetConfig+0xfc>)
 8005082:	4013      	ands	r3, r2
 8005084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	4a18      	ldr	r2, [pc, #96]	@ (80050ec <TIM_OC3_SetConfig+0x100>)
 800508a:	4013      	ands	r3, r2
 800508c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	621a      	str	r2, [r3, #32]
}
 80050c0:	46c0      	nop			@ (mov r8, r8)
 80050c2:	46bd      	mov	sp, r7
 80050c4:	b006      	add	sp, #24
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	fffffeff 	.word	0xfffffeff
 80050cc:	fffeff8f 	.word	0xfffeff8f
 80050d0:	fffffdff 	.word	0xfffffdff
 80050d4:	40012c00 	.word	0x40012c00
 80050d8:	fffff7ff 	.word	0xfffff7ff
 80050dc:	fffffbff 	.word	0xfffffbff
 80050e0:	40014400 	.word	0x40014400
 80050e4:	40014800 	.word	0x40014800
 80050e8:	ffffefff 	.word	0xffffefff
 80050ec:	ffffdfff 	.word	0xffffdfff

080050f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	4a24      	ldr	r2, [pc, #144]	@ (8005198 <TIM_OC4_SetConfig+0xa8>)
 8005106:	401a      	ands	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4a20      	ldr	r2, [pc, #128]	@ (800519c <TIM_OC4_SetConfig+0xac>)
 800511c:	4013      	ands	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4a1f      	ldr	r2, [pc, #124]	@ (80051a0 <TIM_OC4_SetConfig+0xb0>)
 8005124:	4013      	ands	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4313      	orrs	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	4a1b      	ldr	r2, [pc, #108]	@ (80051a4 <TIM_OC4_SetConfig+0xb4>)
 8005138:	4013      	ands	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	031b      	lsls	r3, r3, #12
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a17      	ldr	r2, [pc, #92]	@ (80051a8 <TIM_OC4_SetConfig+0xb8>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d007      	beq.n	8005160 <TIM_OC4_SetConfig+0x70>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a16      	ldr	r2, [pc, #88]	@ (80051ac <TIM_OC4_SetConfig+0xbc>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d003      	beq.n	8005160 <TIM_OC4_SetConfig+0x70>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a15      	ldr	r2, [pc, #84]	@ (80051b0 <TIM_OC4_SetConfig+0xc0>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d109      	bne.n	8005174 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	4a14      	ldr	r2, [pc, #80]	@ (80051b4 <TIM_OC4_SetConfig+0xc4>)
 8005164:	4013      	ands	r3, r2
 8005166:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	019b      	lsls	r3, r3, #6
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	621a      	str	r2, [r3, #32]
}
 800518e:	46c0      	nop			@ (mov r8, r8)
 8005190:	46bd      	mov	sp, r7
 8005192:	b006      	add	sp, #24
 8005194:	bd80      	pop	{r7, pc}
 8005196:	46c0      	nop			@ (mov r8, r8)
 8005198:	ffffefff 	.word	0xffffefff
 800519c:	feff8fff 	.word	0xfeff8fff
 80051a0:	fffffcff 	.word	0xfffffcff
 80051a4:	ffffdfff 	.word	0xffffdfff
 80051a8:	40012c00 	.word	0x40012c00
 80051ac:	40014400 	.word	0x40014400
 80051b0:	40014800 	.word	0x40014800
 80051b4:	ffffbfff 	.word	0xffffbfff

080051b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	4a21      	ldr	r2, [pc, #132]	@ (8005254 <TIM_OC5_SetConfig+0x9c>)
 80051ce:	401a      	ands	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4a1d      	ldr	r2, [pc, #116]	@ (8005258 <TIM_OC5_SetConfig+0xa0>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	4a19      	ldr	r2, [pc, #100]	@ (800525c <TIM_OC5_SetConfig+0xa4>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	041b      	lsls	r3, r3, #16
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	4313      	orrs	r3, r2
 8005204:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a15      	ldr	r2, [pc, #84]	@ (8005260 <TIM_OC5_SetConfig+0xa8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d007      	beq.n	800521e <TIM_OC5_SetConfig+0x66>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a14      	ldr	r2, [pc, #80]	@ (8005264 <TIM_OC5_SetConfig+0xac>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d003      	beq.n	800521e <TIM_OC5_SetConfig+0x66>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a13      	ldr	r2, [pc, #76]	@ (8005268 <TIM_OC5_SetConfig+0xb0>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d109      	bne.n	8005232 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	4a0c      	ldr	r2, [pc, #48]	@ (8005254 <TIM_OC5_SetConfig+0x9c>)
 8005222:	4013      	ands	r3, r2
 8005224:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	021b      	lsls	r3, r3, #8
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	621a      	str	r2, [r3, #32]
}
 800524c:	46c0      	nop			@ (mov r8, r8)
 800524e:	46bd      	mov	sp, r7
 8005250:	b006      	add	sp, #24
 8005252:	bd80      	pop	{r7, pc}
 8005254:	fffeffff 	.word	0xfffeffff
 8005258:	fffeff8f 	.word	0xfffeff8f
 800525c:	fffdffff 	.word	0xfffdffff
 8005260:	40012c00 	.word	0x40012c00
 8005264:	40014400 	.word	0x40014400
 8005268:	40014800 	.word	0x40014800

0800526c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	4a22      	ldr	r2, [pc, #136]	@ (800530c <TIM_OC6_SetConfig+0xa0>)
 8005282:	401a      	ands	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4a1e      	ldr	r2, [pc, #120]	@ (8005310 <TIM_OC6_SetConfig+0xa4>)
 8005298:	4013      	ands	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	021b      	lsls	r3, r3, #8
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005314 <TIM_OC6_SetConfig+0xa8>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	051b      	lsls	r3, r3, #20
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a16      	ldr	r2, [pc, #88]	@ (8005318 <TIM_OC6_SetConfig+0xac>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d007      	beq.n	80052d4 <TIM_OC6_SetConfig+0x68>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a15      	ldr	r2, [pc, #84]	@ (800531c <TIM_OC6_SetConfig+0xb0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d003      	beq.n	80052d4 <TIM_OC6_SetConfig+0x68>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a14      	ldr	r2, [pc, #80]	@ (8005320 <TIM_OC6_SetConfig+0xb4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d109      	bne.n	80052e8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	4a13      	ldr	r2, [pc, #76]	@ (8005324 <TIM_OC6_SetConfig+0xb8>)
 80052d8:	4013      	ands	r3, r2
 80052da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	029b      	lsls	r3, r3, #10
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	621a      	str	r2, [r3, #32]
}
 8005302:	46c0      	nop			@ (mov r8, r8)
 8005304:	46bd      	mov	sp, r7
 8005306:	b006      	add	sp, #24
 8005308:	bd80      	pop	{r7, pc}
 800530a:	46c0      	nop			@ (mov r8, r8)
 800530c:	ffefffff 	.word	0xffefffff
 8005310:	feff8fff 	.word	0xfeff8fff
 8005314:	ffdfffff 	.word	0xffdfffff
 8005318:	40012c00 	.word	0x40012c00
 800531c:	40014400 	.word	0x40014400
 8005320:	40014800 	.word	0x40014800
 8005324:	fffbffff 	.word	0xfffbffff

08005328 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	221f      	movs	r2, #31
 8005338:	4013      	ands	r3, r2
 800533a:	2201      	movs	r2, #1
 800533c:	409a      	lsls	r2, r3
 800533e:	0013      	movs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	43d2      	mvns	r2, r2
 800534a:	401a      	ands	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a1a      	ldr	r2, [r3, #32]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	211f      	movs	r1, #31
 8005358:	400b      	ands	r3, r1
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	4099      	lsls	r1, r3
 800535e:	000b      	movs	r3, r1
 8005360:	431a      	orrs	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	621a      	str	r2, [r3, #32]
}
 8005366:	46c0      	nop			@ (mov r8, r8)
 8005368:	46bd      	mov	sp, r7
 800536a:	b006      	add	sp, #24
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2184      	movs	r1, #132	@ 0x84
 800537c:	4a1c      	ldr	r2, [pc, #112]	@ (80053f0 <TIM_ResetCallback+0x80>)
 800537e:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2188      	movs	r1, #136	@ 0x88
 8005384:	4a1b      	ldr	r2, [pc, #108]	@ (80053f4 <TIM_ResetCallback+0x84>)
 8005386:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	218c      	movs	r1, #140	@ 0x8c
 800538c:	4a1a      	ldr	r2, [pc, #104]	@ (80053f8 <TIM_ResetCallback+0x88>)
 800538e:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2190      	movs	r1, #144	@ 0x90
 8005394:	4a19      	ldr	r2, [pc, #100]	@ (80053fc <TIM_ResetCallback+0x8c>)
 8005396:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2194      	movs	r1, #148	@ 0x94
 800539c:	4a18      	ldr	r2, [pc, #96]	@ (8005400 <TIM_ResetCallback+0x90>)
 800539e:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2198      	movs	r1, #152	@ 0x98
 80053a4:	4a17      	ldr	r2, [pc, #92]	@ (8005404 <TIM_ResetCallback+0x94>)
 80053a6:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	219c      	movs	r1, #156	@ 0x9c
 80053ac:	4a16      	ldr	r2, [pc, #88]	@ (8005408 <TIM_ResetCallback+0x98>)
 80053ae:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	21a0      	movs	r1, #160	@ 0xa0
 80053b4:	4a15      	ldr	r2, [pc, #84]	@ (800540c <TIM_ResetCallback+0x9c>)
 80053b6:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	21a4      	movs	r1, #164	@ 0xa4
 80053bc:	4a14      	ldr	r2, [pc, #80]	@ (8005410 <TIM_ResetCallback+0xa0>)
 80053be:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	21a8      	movs	r1, #168	@ 0xa8
 80053c4:	4a13      	ldr	r2, [pc, #76]	@ (8005414 <TIM_ResetCallback+0xa4>)
 80053c6:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	21ac      	movs	r1, #172	@ 0xac
 80053cc:	4a12      	ldr	r2, [pc, #72]	@ (8005418 <TIM_ResetCallback+0xa8>)
 80053ce:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	21b0      	movs	r1, #176	@ 0xb0
 80053d4:	4a11      	ldr	r2, [pc, #68]	@ (800541c <TIM_ResetCallback+0xac>)
 80053d6:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	21b4      	movs	r1, #180	@ 0xb4
 80053dc:	4a10      	ldr	r2, [pc, #64]	@ (8005420 <TIM_ResetCallback+0xb0>)
 80053de:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	21b8      	movs	r1, #184	@ 0xb8
 80053e4:	4a0f      	ldr	r2, [pc, #60]	@ (8005424 <TIM_ResetCallback+0xb4>)
 80053e6:	505a      	str	r2, [r3, r1]
}
 80053e8:	46c0      	nop			@ (mov r8, r8)
 80053ea:	46bd      	mov	sp, r7
 80053ec:	b002      	add	sp, #8
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	08004a3d 	.word	0x08004a3d
 80053f4:	08004a4d 	.word	0x08004a4d
 80053f8:	08004aad 	.word	0x08004aad
 80053fc:	08004abd 	.word	0x08004abd
 8005400:	08004a6d 	.word	0x08004a6d
 8005404:	08004a7d 	.word	0x08004a7d
 8005408:	08004a5d 	.word	0x08004a5d
 800540c:	08004a8d 	.word	0x08004a8d
 8005410:	08004a9d 	.word	0x08004a9d
 8005414:	08004acd 	.word	0x08004acd
 8005418:	08005561 	.word	0x08005561
 800541c:	08005571 	.word	0x08005571
 8005420:	08005581 	.word	0x08005581
 8005424:	08005591 	.word	0x08005591

08005428 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	223c      	movs	r2, #60	@ 0x3c
 800543a:	5c9b      	ldrb	r3, [r3, r2]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005440:	2302      	movs	r3, #2
 8005442:	e06f      	b.n	8005524 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	223c      	movs	r2, #60	@ 0x3c
 8005448:	2101      	movs	r1, #1
 800544a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	22ff      	movs	r2, #255	@ 0xff
 8005450:	4393      	bics	r3, r2
 8005452:	001a      	movs	r2, r3
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4a33      	ldr	r2, [pc, #204]	@ (800552c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005460:	401a      	ands	r2, r3
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	4313      	orrs	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4a30      	ldr	r2, [pc, #192]	@ (8005530 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800546e:	401a      	ands	r2, r3
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	4313      	orrs	r3, r2
 8005476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4a2e      	ldr	r2, [pc, #184]	@ (8005534 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800547c:	401a      	ands	r2, r3
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4a2b      	ldr	r2, [pc, #172]	@ (8005538 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800548a:	401a      	ands	r2, r3
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4a29      	ldr	r2, [pc, #164]	@ (800553c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005498:	401a      	ands	r2, r3
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4a26      	ldr	r2, [pc, #152]	@ (8005540 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80054a6:	401a      	ands	r2, r3
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4a24      	ldr	r2, [pc, #144]	@ (8005544 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80054b4:	401a      	ands	r2, r3
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	041b      	lsls	r3, r3, #16
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4a21      	ldr	r2, [pc, #132]	@ (8005548 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80054c4:	401a      	ands	r2, r3
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a1e      	ldr	r2, [pc, #120]	@ (800554c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d11c      	bne.n	8005512 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4a1d      	ldr	r2, [pc, #116]	@ (8005550 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80054dc:	401a      	ands	r2, r3
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e2:	051b      	lsls	r3, r3, #20
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005554 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80054ec:	401a      	ands	r2, r3
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4a17      	ldr	r2, [pc, #92]	@ (8005558 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80054fa:	401a      	ands	r2, r3
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4a15      	ldr	r2, [pc, #84]	@ (800555c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005508:	401a      	ands	r2, r3
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	223c      	movs	r2, #60	@ 0x3c
 800551e:	2100      	movs	r1, #0
 8005520:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	0018      	movs	r0, r3
 8005526:	46bd      	mov	sp, r7
 8005528:	b004      	add	sp, #16
 800552a:	bd80      	pop	{r7, pc}
 800552c:	fffffcff 	.word	0xfffffcff
 8005530:	fffffbff 	.word	0xfffffbff
 8005534:	fffff7ff 	.word	0xfffff7ff
 8005538:	ffffefff 	.word	0xffffefff
 800553c:	ffffdfff 	.word	0xffffdfff
 8005540:	ffffbfff 	.word	0xffffbfff
 8005544:	fff0ffff 	.word	0xfff0ffff
 8005548:	efffffff 	.word	0xefffffff
 800554c:	40012c00 	.word	0x40012c00
 8005550:	ff0fffff 	.word	0xff0fffff
 8005554:	feffffff 	.word	0xfeffffff
 8005558:	fdffffff 	.word	0xfdffffff
 800555c:	dfffffff 	.word	0xdfffffff

08005560 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005568:	46c0      	nop			@ (mov r8, r8)
 800556a:	46bd      	mov	sp, r7
 800556c:	b002      	add	sp, #8
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005578:	46c0      	nop			@ (mov r8, r8)
 800557a:	46bd      	mov	sp, r7
 800557c:	b002      	add	sp, #8
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005588:	46c0      	nop			@ (mov r8, r8)
 800558a:	46bd      	mov	sp, r7
 800558c:	b002      	add	sp, #8
 800558e:	bd80      	pop	{r7, pc}

08005590 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005598:	46c0      	nop			@ (mov r8, r8)
 800559a:	46bd      	mov	sp, r7
 800559c:	b002      	add	sp, #8
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e046      	b.n	8005640 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2288      	movs	r2, #136	@ 0x88
 80055b6:	589b      	ldr	r3, [r3, r2]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d107      	bne.n	80055cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2284      	movs	r2, #132	@ 0x84
 80055c0:	2100      	movs	r1, #0
 80055c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	0018      	movs	r0, r3
 80055c8:	f7fb fe12 	bl	80011f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2288      	movs	r2, #136	@ 0x88
 80055d0:	2124      	movs	r1, #36	@ 0x24
 80055d2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2101      	movs	r1, #1
 80055e0:	438a      	bics	r2, r1
 80055e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	0018      	movs	r0, r3
 80055f0:	f000 faa4 	bl	8005b3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	0018      	movs	r0, r3
 80055f8:	f000 f828 	bl	800564c <UART_SetConfig>
 80055fc:	0003      	movs	r3, r0
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e01c      	b.n	8005640 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	490d      	ldr	r1, [pc, #52]	@ (8005648 <HAL_UART_Init+0xa8>)
 8005612:	400a      	ands	r2, r1
 8005614:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	212a      	movs	r1, #42	@ 0x2a
 8005622:	438a      	bics	r2, r1
 8005624:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2101      	movs	r1, #1
 8005632:	430a      	orrs	r2, r1
 8005634:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	0018      	movs	r0, r3
 800563a:	f000 fb33 	bl	8005ca4 <UART_CheckIdleState>
 800563e:	0003      	movs	r3, r0
}
 8005640:	0018      	movs	r0, r3
 8005642:	46bd      	mov	sp, r7
 8005644:	b002      	add	sp, #8
 8005646:	bd80      	pop	{r7, pc}
 8005648:	ffffb7ff 	.word	0xffffb7ff

0800564c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800564c:	b5b0      	push	{r4, r5, r7, lr}
 800564e:	b090      	sub	sp, #64	@ 0x40
 8005650:	af00      	add	r7, sp, #0
 8005652:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005654:	231a      	movs	r3, #26
 8005656:	2220      	movs	r2, #32
 8005658:	189b      	adds	r3, r3, r2
 800565a:	19db      	adds	r3, r3, r7
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	431a      	orrs	r2, r3
 800566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	431a      	orrs	r2, r3
 8005670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	4313      	orrs	r3, r2
 8005676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4ac4      	ldr	r2, [pc, #784]	@ (8005990 <UART_SetConfig+0x344>)
 8005680:	4013      	ands	r3, r2
 8005682:	0019      	movs	r1, r3
 8005684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800568a:	430b      	orrs	r3, r1
 800568c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800568e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	4abf      	ldr	r2, [pc, #764]	@ (8005994 <UART_SetConfig+0x348>)
 8005696:	4013      	ands	r3, r2
 8005698:	0018      	movs	r0, r3
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569c:	68d9      	ldr	r1, [r3, #12]
 800569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	0003      	movs	r3, r0
 80056a4:	430b      	orrs	r3, r1
 80056a6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4ab9      	ldr	r2, [pc, #740]	@ (8005998 <UART_SetConfig+0x34c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d004      	beq.n	80056c2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056be:	4313      	orrs	r3, r2
 80056c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	4ab4      	ldr	r2, [pc, #720]	@ (800599c <UART_SetConfig+0x350>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	0019      	movs	r1, r3
 80056ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056d4:	430b      	orrs	r3, r1
 80056d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80056d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056de:	220f      	movs	r2, #15
 80056e0:	4393      	bics	r3, r2
 80056e2:	0018      	movs	r0, r3
 80056e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80056e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	0003      	movs	r3, r0
 80056ee:	430b      	orrs	r3, r1
 80056f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4aaa      	ldr	r2, [pc, #680]	@ (80059a0 <UART_SetConfig+0x354>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d131      	bne.n	8005760 <UART_SetConfig+0x114>
 80056fc:	4ba9      	ldr	r3, [pc, #676]	@ (80059a4 <UART_SetConfig+0x358>)
 80056fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005700:	2203      	movs	r2, #3
 8005702:	4013      	ands	r3, r2
 8005704:	2b03      	cmp	r3, #3
 8005706:	d01d      	beq.n	8005744 <UART_SetConfig+0xf8>
 8005708:	d823      	bhi.n	8005752 <UART_SetConfig+0x106>
 800570a:	2b02      	cmp	r3, #2
 800570c:	d00c      	beq.n	8005728 <UART_SetConfig+0xdc>
 800570e:	d820      	bhi.n	8005752 <UART_SetConfig+0x106>
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <UART_SetConfig+0xce>
 8005714:	2b01      	cmp	r3, #1
 8005716:	d00e      	beq.n	8005736 <UART_SetConfig+0xea>
 8005718:	e01b      	b.n	8005752 <UART_SetConfig+0x106>
 800571a:	231b      	movs	r3, #27
 800571c:	2220      	movs	r2, #32
 800571e:	189b      	adds	r3, r3, r2
 8005720:	19db      	adds	r3, r3, r7
 8005722:	2200      	movs	r2, #0
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	e071      	b.n	800580c <UART_SetConfig+0x1c0>
 8005728:	231b      	movs	r3, #27
 800572a:	2220      	movs	r2, #32
 800572c:	189b      	adds	r3, r3, r2
 800572e:	19db      	adds	r3, r3, r7
 8005730:	2202      	movs	r2, #2
 8005732:	701a      	strb	r2, [r3, #0]
 8005734:	e06a      	b.n	800580c <UART_SetConfig+0x1c0>
 8005736:	231b      	movs	r3, #27
 8005738:	2220      	movs	r2, #32
 800573a:	189b      	adds	r3, r3, r2
 800573c:	19db      	adds	r3, r3, r7
 800573e:	2204      	movs	r2, #4
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	e063      	b.n	800580c <UART_SetConfig+0x1c0>
 8005744:	231b      	movs	r3, #27
 8005746:	2220      	movs	r2, #32
 8005748:	189b      	adds	r3, r3, r2
 800574a:	19db      	adds	r3, r3, r7
 800574c:	2208      	movs	r2, #8
 800574e:	701a      	strb	r2, [r3, #0]
 8005750:	e05c      	b.n	800580c <UART_SetConfig+0x1c0>
 8005752:	231b      	movs	r3, #27
 8005754:	2220      	movs	r2, #32
 8005756:	189b      	adds	r3, r3, r2
 8005758:	19db      	adds	r3, r3, r7
 800575a:	2210      	movs	r2, #16
 800575c:	701a      	strb	r2, [r3, #0]
 800575e:	e055      	b.n	800580c <UART_SetConfig+0x1c0>
 8005760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a90      	ldr	r2, [pc, #576]	@ (80059a8 <UART_SetConfig+0x35c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d106      	bne.n	8005778 <UART_SetConfig+0x12c>
 800576a:	231b      	movs	r3, #27
 800576c:	2220      	movs	r2, #32
 800576e:	189b      	adds	r3, r3, r2
 8005770:	19db      	adds	r3, r3, r7
 8005772:	2200      	movs	r2, #0
 8005774:	701a      	strb	r2, [r3, #0]
 8005776:	e049      	b.n	800580c <UART_SetConfig+0x1c0>
 8005778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a86      	ldr	r2, [pc, #536]	@ (8005998 <UART_SetConfig+0x34c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d13e      	bne.n	8005800 <UART_SetConfig+0x1b4>
 8005782:	4b88      	ldr	r3, [pc, #544]	@ (80059a4 <UART_SetConfig+0x358>)
 8005784:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005786:	23c0      	movs	r3, #192	@ 0xc0
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	4013      	ands	r3, r2
 800578c:	22c0      	movs	r2, #192	@ 0xc0
 800578e:	0112      	lsls	r2, r2, #4
 8005790:	4293      	cmp	r3, r2
 8005792:	d027      	beq.n	80057e4 <UART_SetConfig+0x198>
 8005794:	22c0      	movs	r2, #192	@ 0xc0
 8005796:	0112      	lsls	r2, r2, #4
 8005798:	4293      	cmp	r3, r2
 800579a:	d82a      	bhi.n	80057f2 <UART_SetConfig+0x1a6>
 800579c:	2280      	movs	r2, #128	@ 0x80
 800579e:	0112      	lsls	r2, r2, #4
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d011      	beq.n	80057c8 <UART_SetConfig+0x17c>
 80057a4:	2280      	movs	r2, #128	@ 0x80
 80057a6:	0112      	lsls	r2, r2, #4
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d822      	bhi.n	80057f2 <UART_SetConfig+0x1a6>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d004      	beq.n	80057ba <UART_SetConfig+0x16e>
 80057b0:	2280      	movs	r2, #128	@ 0x80
 80057b2:	00d2      	lsls	r2, r2, #3
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00e      	beq.n	80057d6 <UART_SetConfig+0x18a>
 80057b8:	e01b      	b.n	80057f2 <UART_SetConfig+0x1a6>
 80057ba:	231b      	movs	r3, #27
 80057bc:	2220      	movs	r2, #32
 80057be:	189b      	adds	r3, r3, r2
 80057c0:	19db      	adds	r3, r3, r7
 80057c2:	2200      	movs	r2, #0
 80057c4:	701a      	strb	r2, [r3, #0]
 80057c6:	e021      	b.n	800580c <UART_SetConfig+0x1c0>
 80057c8:	231b      	movs	r3, #27
 80057ca:	2220      	movs	r2, #32
 80057cc:	189b      	adds	r3, r3, r2
 80057ce:	19db      	adds	r3, r3, r7
 80057d0:	2202      	movs	r2, #2
 80057d2:	701a      	strb	r2, [r3, #0]
 80057d4:	e01a      	b.n	800580c <UART_SetConfig+0x1c0>
 80057d6:	231b      	movs	r3, #27
 80057d8:	2220      	movs	r2, #32
 80057da:	189b      	adds	r3, r3, r2
 80057dc:	19db      	adds	r3, r3, r7
 80057de:	2204      	movs	r2, #4
 80057e0:	701a      	strb	r2, [r3, #0]
 80057e2:	e013      	b.n	800580c <UART_SetConfig+0x1c0>
 80057e4:	231b      	movs	r3, #27
 80057e6:	2220      	movs	r2, #32
 80057e8:	189b      	adds	r3, r3, r2
 80057ea:	19db      	adds	r3, r3, r7
 80057ec:	2208      	movs	r2, #8
 80057ee:	701a      	strb	r2, [r3, #0]
 80057f0:	e00c      	b.n	800580c <UART_SetConfig+0x1c0>
 80057f2:	231b      	movs	r3, #27
 80057f4:	2220      	movs	r2, #32
 80057f6:	189b      	adds	r3, r3, r2
 80057f8:	19db      	adds	r3, r3, r7
 80057fa:	2210      	movs	r2, #16
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	e005      	b.n	800580c <UART_SetConfig+0x1c0>
 8005800:	231b      	movs	r3, #27
 8005802:	2220      	movs	r2, #32
 8005804:	189b      	adds	r3, r3, r2
 8005806:	19db      	adds	r3, r3, r7
 8005808:	2210      	movs	r2, #16
 800580a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800580c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a61      	ldr	r2, [pc, #388]	@ (8005998 <UART_SetConfig+0x34c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d000      	beq.n	8005818 <UART_SetConfig+0x1cc>
 8005816:	e092      	b.n	800593e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005818:	231b      	movs	r3, #27
 800581a:	2220      	movs	r2, #32
 800581c:	189b      	adds	r3, r3, r2
 800581e:	19db      	adds	r3, r3, r7
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b08      	cmp	r3, #8
 8005824:	d015      	beq.n	8005852 <UART_SetConfig+0x206>
 8005826:	dc18      	bgt.n	800585a <UART_SetConfig+0x20e>
 8005828:	2b04      	cmp	r3, #4
 800582a:	d00d      	beq.n	8005848 <UART_SetConfig+0x1fc>
 800582c:	dc15      	bgt.n	800585a <UART_SetConfig+0x20e>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <UART_SetConfig+0x1ec>
 8005832:	2b02      	cmp	r3, #2
 8005834:	d005      	beq.n	8005842 <UART_SetConfig+0x1f6>
 8005836:	e010      	b.n	800585a <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005838:	f7fe fad0 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 800583c:	0003      	movs	r3, r0
 800583e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005840:	e014      	b.n	800586c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005842:	4b5a      	ldr	r3, [pc, #360]	@ (80059ac <UART_SetConfig+0x360>)
 8005844:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005846:	e011      	b.n	800586c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005848:	f7fe fa3c 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 800584c:	0003      	movs	r3, r0
 800584e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005850:	e00c      	b.n	800586c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005852:	2380      	movs	r3, #128	@ 0x80
 8005854:	021b      	lsls	r3, r3, #8
 8005856:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005858:	e008      	b.n	800586c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800585a:	2300      	movs	r3, #0
 800585c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800585e:	231a      	movs	r3, #26
 8005860:	2220      	movs	r2, #32
 8005862:	189b      	adds	r3, r3, r2
 8005864:	19db      	adds	r3, r3, r7
 8005866:	2201      	movs	r2, #1
 8005868:	701a      	strb	r2, [r3, #0]
        break;
 800586a:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800586c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800586e:	2b00      	cmp	r3, #0
 8005870:	d100      	bne.n	8005874 <UART_SetConfig+0x228>
 8005872:	e147      	b.n	8005b04 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005876:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005878:	4b4d      	ldr	r3, [pc, #308]	@ (80059b0 <UART_SetConfig+0x364>)
 800587a:	0052      	lsls	r2, r2, #1
 800587c:	5ad3      	ldrh	r3, [r2, r3]
 800587e:	0019      	movs	r1, r3
 8005880:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005882:	f7fa fc3f 	bl	8000104 <__udivsi3>
 8005886:	0003      	movs	r3, r0
 8005888:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800588a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	0013      	movs	r3, r2
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	189b      	adds	r3, r3, r2
 8005894:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005896:	429a      	cmp	r2, r3
 8005898:	d305      	bcc.n	80058a6 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800589a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d906      	bls.n	80058b4 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80058a6:	231a      	movs	r3, #26
 80058a8:	2220      	movs	r2, #32
 80058aa:	189b      	adds	r3, r3, r2
 80058ac:	19db      	adds	r3, r3, r7
 80058ae:	2201      	movs	r2, #1
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	e127      	b.n	8005b04 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058b6:	61bb      	str	r3, [r7, #24]
 80058b8:	2300      	movs	r3, #0
 80058ba:	61fb      	str	r3, [r7, #28]
 80058bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058c0:	4b3b      	ldr	r3, [pc, #236]	@ (80059b0 <UART_SetConfig+0x364>)
 80058c2:	0052      	lsls	r2, r2, #1
 80058c4:	5ad3      	ldrh	r3, [r2, r3]
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	2300      	movs	r3, #0
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	69b8      	ldr	r0, [r7, #24]
 80058d2:	69f9      	ldr	r1, [r7, #28]
 80058d4:	f7fa fca2 	bl	800021c <__aeabi_uldivmod>
 80058d8:	0002      	movs	r2, r0
 80058da:	000b      	movs	r3, r1
 80058dc:	0e11      	lsrs	r1, r2, #24
 80058de:	021d      	lsls	r5, r3, #8
 80058e0:	430d      	orrs	r5, r1
 80058e2:	0214      	lsls	r4, r2, #8
 80058e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	085b      	lsrs	r3, r3, #1
 80058ea:	60bb      	str	r3, [r7, #8]
 80058ec:	2300      	movs	r3, #0
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	68b8      	ldr	r0, [r7, #8]
 80058f2:	68f9      	ldr	r1, [r7, #12]
 80058f4:	1900      	adds	r0, r0, r4
 80058f6:	4169      	adcs	r1, r5
 80058f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	603b      	str	r3, [r7, #0]
 80058fe:	2300      	movs	r3, #0
 8005900:	607b      	str	r3, [r7, #4]
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f7fa fc89 	bl	800021c <__aeabi_uldivmod>
 800590a:	0002      	movs	r2, r0
 800590c:	000b      	movs	r3, r1
 800590e:	0013      	movs	r3, r2
 8005910:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005914:	23c0      	movs	r3, #192	@ 0xc0
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	429a      	cmp	r2, r3
 800591a:	d309      	bcc.n	8005930 <UART_SetConfig+0x2e4>
 800591c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800591e:	2380      	movs	r3, #128	@ 0x80
 8005920:	035b      	lsls	r3, r3, #13
 8005922:	429a      	cmp	r2, r3
 8005924:	d204      	bcs.n	8005930 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8005926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800592c:	60da      	str	r2, [r3, #12]
 800592e:	e0e9      	b.n	8005b04 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8005930:	231a      	movs	r3, #26
 8005932:	2220      	movs	r2, #32
 8005934:	189b      	adds	r3, r3, r2
 8005936:	19db      	adds	r3, r3, r7
 8005938:	2201      	movs	r2, #1
 800593a:	701a      	strb	r2, [r3, #0]
 800593c:	e0e2      	b.n	8005b04 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	69da      	ldr	r2, [r3, #28]
 8005942:	2380      	movs	r3, #128	@ 0x80
 8005944:	021b      	lsls	r3, r3, #8
 8005946:	429a      	cmp	r2, r3
 8005948:	d000      	beq.n	800594c <UART_SetConfig+0x300>
 800594a:	e083      	b.n	8005a54 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800594c:	231b      	movs	r3, #27
 800594e:	2220      	movs	r2, #32
 8005950:	189b      	adds	r3, r3, r2
 8005952:	19db      	adds	r3, r3, r7
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	2b08      	cmp	r3, #8
 8005958:	d015      	beq.n	8005986 <UART_SetConfig+0x33a>
 800595a:	dc2b      	bgt.n	80059b4 <UART_SetConfig+0x368>
 800595c:	2b04      	cmp	r3, #4
 800595e:	d00d      	beq.n	800597c <UART_SetConfig+0x330>
 8005960:	dc28      	bgt.n	80059b4 <UART_SetConfig+0x368>
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <UART_SetConfig+0x320>
 8005966:	2b02      	cmp	r3, #2
 8005968:	d005      	beq.n	8005976 <UART_SetConfig+0x32a>
 800596a:	e023      	b.n	80059b4 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800596c:	f7fe fa36 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 8005970:	0003      	movs	r3, r0
 8005972:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005974:	e027      	b.n	80059c6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005976:	4b0d      	ldr	r3, [pc, #52]	@ (80059ac <UART_SetConfig+0x360>)
 8005978:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800597a:	e024      	b.n	80059c6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800597c:	f7fe f9a2 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 8005980:	0003      	movs	r3, r0
 8005982:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005984:	e01f      	b.n	80059c6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005986:	2380      	movs	r3, #128	@ 0x80
 8005988:	021b      	lsls	r3, r3, #8
 800598a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800598c:	e01b      	b.n	80059c6 <UART_SetConfig+0x37a>
 800598e:	46c0      	nop			@ (mov r8, r8)
 8005990:	cfff69f3 	.word	0xcfff69f3
 8005994:	ffffcfff 	.word	0xffffcfff
 8005998:	40008000 	.word	0x40008000
 800599c:	11fff4ff 	.word	0x11fff4ff
 80059a0:	40013800 	.word	0x40013800
 80059a4:	40021000 	.word	0x40021000
 80059a8:	40004400 	.word	0x40004400
 80059ac:	00f42400 	.word	0x00f42400
 80059b0:	080069dc 	.word	0x080069dc
      default:
        pclk = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80059b8:	231a      	movs	r3, #26
 80059ba:	2220      	movs	r2, #32
 80059bc:	189b      	adds	r3, r3, r2
 80059be:	19db      	adds	r3, r3, r7
 80059c0:	2201      	movs	r2, #1
 80059c2:	701a      	strb	r2, [r3, #0]
        break;
 80059c4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d100      	bne.n	80059ce <UART_SetConfig+0x382>
 80059cc:	e09a      	b.n	8005b04 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059d2:	4b58      	ldr	r3, [pc, #352]	@ (8005b34 <UART_SetConfig+0x4e8>)
 80059d4:	0052      	lsls	r2, r2, #1
 80059d6:	5ad3      	ldrh	r3, [r2, r3]
 80059d8:	0019      	movs	r1, r3
 80059da:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80059dc:	f7fa fb92 	bl	8000104 <__udivsi3>
 80059e0:	0003      	movs	r3, r0
 80059e2:	005a      	lsls	r2, r3, #1
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	085b      	lsrs	r3, r3, #1
 80059ea:	18d2      	adds	r2, r2, r3
 80059ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	0019      	movs	r1, r3
 80059f2:	0010      	movs	r0, r2
 80059f4:	f7fa fb86 	bl	8000104 <__udivsi3>
 80059f8:	0003      	movs	r3, r0
 80059fa:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fe:	2b0f      	cmp	r3, #15
 8005a00:	d921      	bls.n	8005a46 <UART_SetConfig+0x3fa>
 8005a02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a04:	2380      	movs	r3, #128	@ 0x80
 8005a06:	025b      	lsls	r3, r3, #9
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d21c      	bcs.n	8005a46 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	200e      	movs	r0, #14
 8005a12:	2420      	movs	r4, #32
 8005a14:	1903      	adds	r3, r0, r4
 8005a16:	19db      	adds	r3, r3, r7
 8005a18:	210f      	movs	r1, #15
 8005a1a:	438a      	bics	r2, r1
 8005a1c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a20:	085b      	lsrs	r3, r3, #1
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2207      	movs	r2, #7
 8005a26:	4013      	ands	r3, r2
 8005a28:	b299      	uxth	r1, r3
 8005a2a:	1903      	adds	r3, r0, r4
 8005a2c:	19db      	adds	r3, r3, r7
 8005a2e:	1902      	adds	r2, r0, r4
 8005a30:	19d2      	adds	r2, r2, r7
 8005a32:	8812      	ldrh	r2, [r2, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	1902      	adds	r2, r0, r4
 8005a3e:	19d2      	adds	r2, r2, r7
 8005a40:	8812      	ldrh	r2, [r2, #0]
 8005a42:	60da      	str	r2, [r3, #12]
 8005a44:	e05e      	b.n	8005b04 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005a46:	231a      	movs	r3, #26
 8005a48:	2220      	movs	r2, #32
 8005a4a:	189b      	adds	r3, r3, r2
 8005a4c:	19db      	adds	r3, r3, r7
 8005a4e:	2201      	movs	r2, #1
 8005a50:	701a      	strb	r2, [r3, #0]
 8005a52:	e057      	b.n	8005b04 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a54:	231b      	movs	r3, #27
 8005a56:	2220      	movs	r2, #32
 8005a58:	189b      	adds	r3, r3, r2
 8005a5a:	19db      	adds	r3, r3, r7
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b08      	cmp	r3, #8
 8005a60:	d015      	beq.n	8005a8e <UART_SetConfig+0x442>
 8005a62:	dc18      	bgt.n	8005a96 <UART_SetConfig+0x44a>
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d00d      	beq.n	8005a84 <UART_SetConfig+0x438>
 8005a68:	dc15      	bgt.n	8005a96 <UART_SetConfig+0x44a>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <UART_SetConfig+0x428>
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d005      	beq.n	8005a7e <UART_SetConfig+0x432>
 8005a72:	e010      	b.n	8005a96 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a74:	f7fe f9b2 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 8005a78:	0003      	movs	r3, r0
 8005a7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a7c:	e014      	b.n	8005aa8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8005b38 <UART_SetConfig+0x4ec>)
 8005a80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a82:	e011      	b.n	8005aa8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a84:	f7fe f91e 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 8005a88:	0003      	movs	r3, r0
 8005a8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a8c:	e00c      	b.n	8005aa8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a8e:	2380      	movs	r3, #128	@ 0x80
 8005a90:	021b      	lsls	r3, r3, #8
 8005a92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a94:	e008      	b.n	8005aa8 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005a9a:	231a      	movs	r3, #26
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	189b      	adds	r3, r3, r2
 8005aa0:	19db      	adds	r3, r3, r7
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	701a      	strb	r2, [r3, #0]
        break;
 8005aa6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d02a      	beq.n	8005b04 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ab2:	4b20      	ldr	r3, [pc, #128]	@ (8005b34 <UART_SetConfig+0x4e8>)
 8005ab4:	0052      	lsls	r2, r2, #1
 8005ab6:	5ad3      	ldrh	r3, [r2, r3]
 8005ab8:	0019      	movs	r1, r3
 8005aba:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005abc:	f7fa fb22 	bl	8000104 <__udivsi3>
 8005ac0:	0003      	movs	r3, r0
 8005ac2:	001a      	movs	r2, r3
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	085b      	lsrs	r3, r3, #1
 8005aca:	18d2      	adds	r2, r2, r3
 8005acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	0019      	movs	r1, r3
 8005ad2:	0010      	movs	r0, r2
 8005ad4:	f7fa fb16 	bl	8000104 <__udivsi3>
 8005ad8:	0003      	movs	r3, r0
 8005ada:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ade:	2b0f      	cmp	r3, #15
 8005ae0:	d90a      	bls.n	8005af8 <UART_SetConfig+0x4ac>
 8005ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ae4:	2380      	movs	r3, #128	@ 0x80
 8005ae6:	025b      	lsls	r3, r3, #9
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d205      	bcs.n	8005af8 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60da      	str	r2, [r3, #12]
 8005af6:	e005      	b.n	8005b04 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005af8:	231a      	movs	r3, #26
 8005afa:	2220      	movs	r2, #32
 8005afc:	189b      	adds	r3, r3, r2
 8005afe:	19db      	adds	r3, r3, r7
 8005b00:	2201      	movs	r2, #1
 8005b02:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b06:	226a      	movs	r2, #106	@ 0x6a
 8005b08:	2101      	movs	r1, #1
 8005b0a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0e:	2268      	movs	r2, #104	@ 0x68
 8005b10:	2101      	movs	r1, #1
 8005b12:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	2200      	movs	r2, #0
 8005b18:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005b20:	231a      	movs	r3, #26
 8005b22:	2220      	movs	r2, #32
 8005b24:	189b      	adds	r3, r3, r2
 8005b26:	19db      	adds	r3, r3, r7
 8005b28:	781b      	ldrb	r3, [r3, #0]
}
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	b010      	add	sp, #64	@ 0x40
 8005b30:	bdb0      	pop	{r4, r5, r7, pc}
 8005b32:	46c0      	nop			@ (mov r8, r8)
 8005b34:	080069dc 	.word	0x080069dc
 8005b38:	00f42400 	.word	0x00f42400

08005b3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b48:	2208      	movs	r2, #8
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	d00b      	beq.n	8005b66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	4a4a      	ldr	r2, [pc, #296]	@ (8005c80 <UART_AdvFeatureConfig+0x144>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	0019      	movs	r1, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	d00b      	beq.n	8005b88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	4a43      	ldr	r2, [pc, #268]	@ (8005c84 <UART_AdvFeatureConfig+0x148>)
 8005b78:	4013      	ands	r3, r2
 8005b7a:	0019      	movs	r1, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	4013      	ands	r3, r2
 8005b90:	d00b      	beq.n	8005baa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	4a3b      	ldr	r2, [pc, #236]	@ (8005c88 <UART_AdvFeatureConfig+0x14c>)
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	0019      	movs	r1, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bae:	2204      	movs	r2, #4
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	d00b      	beq.n	8005bcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	4a34      	ldr	r2, [pc, #208]	@ (8005c8c <UART_AdvFeatureConfig+0x150>)
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	0019      	movs	r1, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd0:	2210      	movs	r2, #16
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	d00b      	beq.n	8005bee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	4a2c      	ldr	r2, [pc, #176]	@ (8005c90 <UART_AdvFeatureConfig+0x154>)
 8005bde:	4013      	ands	r3, r2
 8005be0:	0019      	movs	r1, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	d00b      	beq.n	8005c10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	4a25      	ldr	r2, [pc, #148]	@ (8005c94 <UART_AdvFeatureConfig+0x158>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	0019      	movs	r1, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c14:	2240      	movs	r2, #64	@ 0x40
 8005c16:	4013      	ands	r3, r2
 8005c18:	d01d      	beq.n	8005c56 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	4a1d      	ldr	r2, [pc, #116]	@ (8005c98 <UART_AdvFeatureConfig+0x15c>)
 8005c22:	4013      	ands	r3, r2
 8005c24:	0019      	movs	r1, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c36:	2380      	movs	r3, #128	@ 0x80
 8005c38:	035b      	lsls	r3, r3, #13
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d10b      	bne.n	8005c56 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	4a15      	ldr	r2, [pc, #84]	@ (8005c9c <UART_AdvFeatureConfig+0x160>)
 8005c46:	4013      	ands	r3, r2
 8005c48:	0019      	movs	r1, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5a:	2280      	movs	r2, #128	@ 0x80
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	d00b      	beq.n	8005c78 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	4a0e      	ldr	r2, [pc, #56]	@ (8005ca0 <UART_AdvFeatureConfig+0x164>)
 8005c68:	4013      	ands	r3, r2
 8005c6a:	0019      	movs	r1, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	605a      	str	r2, [r3, #4]
  }
}
 8005c78:	46c0      	nop			@ (mov r8, r8)
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	b002      	add	sp, #8
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	ffff7fff 	.word	0xffff7fff
 8005c84:	fffdffff 	.word	0xfffdffff
 8005c88:	fffeffff 	.word	0xfffeffff
 8005c8c:	fffbffff 	.word	0xfffbffff
 8005c90:	ffffefff 	.word	0xffffefff
 8005c94:	ffffdfff 	.word	0xffffdfff
 8005c98:	ffefffff 	.word	0xffefffff
 8005c9c:	ff9fffff 	.word	0xff9fffff
 8005ca0:	fff7ffff 	.word	0xfff7ffff

08005ca4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b092      	sub	sp, #72	@ 0x48
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2290      	movs	r2, #144	@ 0x90
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cb4:	f7fc f890 	bl	8001dd8 <HAL_GetTick>
 8005cb8:	0003      	movs	r3, r0
 8005cba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2208      	movs	r2, #8
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	2b08      	cmp	r3, #8
 8005cc8:	d12d      	bne.n	8005d26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ccc:	2280      	movs	r2, #128	@ 0x80
 8005cce:	0391      	lsls	r1, r2, #14
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	4a47      	ldr	r2, [pc, #284]	@ (8005df0 <UART_CheckIdleState+0x14c>)
 8005cd4:	9200      	str	r2, [sp, #0]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f000 f88e 	bl	8005df8 <UART_WaitOnFlagUntilTimeout>
 8005cdc:	1e03      	subs	r3, r0, #0
 8005cde:	d022      	beq.n	8005d26 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cea:	2301      	movs	r3, #1
 8005cec:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf0:	f383 8810 	msr	PRIMASK, r3
}
 8005cf4:	46c0      	nop			@ (mov r8, r8)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2180      	movs	r1, #128	@ 0x80
 8005d02:	438a      	bics	r2, r1
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d0c:	f383 8810 	msr	PRIMASK, r3
}
 8005d10:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2288      	movs	r2, #136	@ 0x88
 8005d16:	2120      	movs	r1, #32
 8005d18:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2284      	movs	r2, #132	@ 0x84
 8005d1e:	2100      	movs	r1, #0
 8005d20:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e060      	b.n	8005de8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2204      	movs	r2, #4
 8005d2e:	4013      	ands	r3, r2
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d146      	bne.n	8005dc2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d36:	2280      	movs	r2, #128	@ 0x80
 8005d38:	03d1      	lsls	r1, r2, #15
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8005df0 <UART_CheckIdleState+0x14c>)
 8005d3e:	9200      	str	r2, [sp, #0]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f000 f859 	bl	8005df8 <UART_WaitOnFlagUntilTimeout>
 8005d46:	1e03      	subs	r3, r0, #0
 8005d48:	d03b      	beq.n	8005dc2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d50:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d52:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d54:	2301      	movs	r3, #1
 8005d56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f383 8810 	msr	PRIMASK, r3
}
 8005d5e:	46c0      	nop			@ (mov r8, r8)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4922      	ldr	r1, [pc, #136]	@ (8005df4 <UART_CheckIdleState+0x150>)
 8005d6c:	400a      	ands	r2, r1
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f383 8810 	msr	PRIMASK, r3
}
 8005d7a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d80:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d82:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d86:	2301      	movs	r3, #1
 8005d88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	f383 8810 	msr	PRIMASK, r3
}
 8005d90:	46c0      	nop			@ (mov r8, r8)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	438a      	bics	r2, r1
 8005da0:	609a      	str	r2, [r3, #8]
 8005da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	f383 8810 	msr	PRIMASK, r3
}
 8005dac:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	228c      	movs	r2, #140	@ 0x8c
 8005db2:	2120      	movs	r1, #32
 8005db4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2284      	movs	r2, #132	@ 0x84
 8005dba:	2100      	movs	r1, #0
 8005dbc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e012      	b.n	8005de8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2288      	movs	r2, #136	@ 0x88
 8005dc6:	2120      	movs	r1, #32
 8005dc8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	228c      	movs	r2, #140	@ 0x8c
 8005dce:	2120      	movs	r1, #32
 8005dd0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2284      	movs	r2, #132	@ 0x84
 8005de2:	2100      	movs	r1, #0
 8005de4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	0018      	movs	r0, r3
 8005dea:	46bd      	mov	sp, r7
 8005dec:	b010      	add	sp, #64	@ 0x40
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	01ffffff 	.word	0x01ffffff
 8005df4:	fffffedf 	.word	0xfffffedf

08005df8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	603b      	str	r3, [r7, #0]
 8005e04:	1dfb      	adds	r3, r7, #7
 8005e06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e08:	e051      	b.n	8005eae <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	d04e      	beq.n	8005eae <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e10:	f7fb ffe2 	bl	8001dd8 <HAL_GetTick>
 8005e14:	0002      	movs	r2, r0
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d302      	bcc.n	8005e26 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e051      	b.n	8005ece <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2204      	movs	r2, #4
 8005e32:	4013      	ands	r3, r2
 8005e34:	d03b      	beq.n	8005eae <UART_WaitOnFlagUntilTimeout+0xb6>
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b80      	cmp	r3, #128	@ 0x80
 8005e3a:	d038      	beq.n	8005eae <UART_WaitOnFlagUntilTimeout+0xb6>
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b40      	cmp	r3, #64	@ 0x40
 8005e40:	d035      	beq.n	8005eae <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	2208      	movs	r2, #8
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d111      	bne.n	8005e74 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2208      	movs	r2, #8
 8005e56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	f000 f83c 	bl	8005ed8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2290      	movs	r2, #144	@ 0x90
 8005e64:	2108      	movs	r1, #8
 8005e66:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2284      	movs	r2, #132	@ 0x84
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e02c      	b.n	8005ece <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	69da      	ldr	r2, [r3, #28]
 8005e7a:	2380      	movs	r3, #128	@ 0x80
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	401a      	ands	r2, r3
 8005e80:	2380      	movs	r3, #128	@ 0x80
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d112      	bne.n	8005eae <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2280      	movs	r2, #128	@ 0x80
 8005e8e:	0112      	lsls	r2, r2, #4
 8005e90:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	0018      	movs	r0, r3
 8005e96:	f000 f81f 	bl	8005ed8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2290      	movs	r2, #144	@ 0x90
 8005e9e:	2120      	movs	r1, #32
 8005ea0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2284      	movs	r2, #132	@ 0x84
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e00f      	b.n	8005ece <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	425a      	negs	r2, r3
 8005ebe:	4153      	adcs	r3, r2
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	001a      	movs	r2, r3
 8005ec4:	1dfb      	adds	r3, r7, #7
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d09e      	beq.n	8005e0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	0018      	movs	r0, r3
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	b004      	add	sp, #16
 8005ed4:	bd80      	pop	{r7, pc}
	...

08005ed8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08e      	sub	sp, #56	@ 0x38
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ee4:	617b      	str	r3, [r7, #20]
  return(result);
 8005ee6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ee8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005eea:	2301      	movs	r3, #1
 8005eec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	f383 8810 	msr	PRIMASK, r3
}
 8005ef4:	46c0      	nop			@ (mov r8, r8)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4926      	ldr	r1, [pc, #152]	@ (8005f9c <UART_EndRxTransfer+0xc4>)
 8005f02:	400a      	ands	r2, r1
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	f383 8810 	msr	PRIMASK, r3
}
 8005f10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f12:	f3ef 8310 	mrs	r3, PRIMASK
 8005f16:	623b      	str	r3, [r7, #32]
  return(result);
 8005f18:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f22:	f383 8810 	msr	PRIMASK, r3
}
 8005f26:	46c0      	nop			@ (mov r8, r8)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	491b      	ldr	r1, [pc, #108]	@ (8005fa0 <UART_EndRxTransfer+0xc8>)
 8005f34:	400a      	ands	r2, r1
 8005f36:	609a      	str	r2, [r3, #8]
 8005f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3e:	f383 8810 	msr	PRIMASK, r3
}
 8005f42:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d118      	bne.n	8005f7e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f50:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f52:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f56:	2301      	movs	r3, #1
 8005f58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f383 8810 	msr	PRIMASK, r3
}
 8005f60:	46c0      	nop			@ (mov r8, r8)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2110      	movs	r1, #16
 8005f6e:	438a      	bics	r2, r1
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f383 8810 	msr	PRIMASK, r3
}
 8005f7c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	228c      	movs	r2, #140	@ 0x8c
 8005f82:	2120      	movs	r1, #32
 8005f84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005f92:	46c0      	nop			@ (mov r8, r8)
 8005f94:	46bd      	mov	sp, r7
 8005f96:	b00e      	add	sp, #56	@ 0x38
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	46c0      	nop			@ (mov r8, r8)
 8005f9c:	fffffedf 	.word	0xfffffedf
 8005fa0:	effffffe 	.word	0xeffffffe

08005fa4 <memset>:
 8005fa4:	0003      	movs	r3, r0
 8005fa6:	1882      	adds	r2, r0, r2
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d100      	bne.n	8005fae <memset+0xa>
 8005fac:	4770      	bx	lr
 8005fae:	7019      	strb	r1, [r3, #0]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	e7f9      	b.n	8005fa8 <memset+0x4>

08005fb4 <__libc_init_array>:
 8005fb4:	b570      	push	{r4, r5, r6, lr}
 8005fb6:	2600      	movs	r6, #0
 8005fb8:	4c0c      	ldr	r4, [pc, #48]	@ (8005fec <__libc_init_array+0x38>)
 8005fba:	4d0d      	ldr	r5, [pc, #52]	@ (8005ff0 <__libc_init_array+0x3c>)
 8005fbc:	1b64      	subs	r4, r4, r5
 8005fbe:	10a4      	asrs	r4, r4, #2
 8005fc0:	42a6      	cmp	r6, r4
 8005fc2:	d109      	bne.n	8005fd8 <__libc_init_array+0x24>
 8005fc4:	2600      	movs	r6, #0
 8005fc6:	f000 f819 	bl	8005ffc <_init>
 8005fca:	4c0a      	ldr	r4, [pc, #40]	@ (8005ff4 <__libc_init_array+0x40>)
 8005fcc:	4d0a      	ldr	r5, [pc, #40]	@ (8005ff8 <__libc_init_array+0x44>)
 8005fce:	1b64      	subs	r4, r4, r5
 8005fd0:	10a4      	asrs	r4, r4, #2
 8005fd2:	42a6      	cmp	r6, r4
 8005fd4:	d105      	bne.n	8005fe2 <__libc_init_array+0x2e>
 8005fd6:	bd70      	pop	{r4, r5, r6, pc}
 8005fd8:	00b3      	lsls	r3, r6, #2
 8005fda:	58eb      	ldr	r3, [r5, r3]
 8005fdc:	4798      	blx	r3
 8005fde:	3601      	adds	r6, #1
 8005fe0:	e7ee      	b.n	8005fc0 <__libc_init_array+0xc>
 8005fe2:	00b3      	lsls	r3, r6, #2
 8005fe4:	58eb      	ldr	r3, [r5, r3]
 8005fe6:	4798      	blx	r3
 8005fe8:	3601      	adds	r6, #1
 8005fea:	e7f2      	b.n	8005fd2 <__libc_init_array+0x1e>
 8005fec:	080069fc 	.word	0x080069fc
 8005ff0:	080069fc 	.word	0x080069fc
 8005ff4:	08006a00 	.word	0x08006a00
 8005ff8:	080069fc 	.word	0x080069fc

08005ffc <_init>:
 8005ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffe:	46c0      	nop			@ (mov r8, r8)
 8006000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006002:	bc08      	pop	{r3}
 8006004:	469e      	mov	lr, r3
 8006006:	4770      	bx	lr

08006008 <_fini>:
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600a:	46c0      	nop			@ (mov r8, r8)
 800600c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600e:	bc08      	pop	{r3}
 8006010:	469e      	mov	lr, r3
 8006012:	4770      	bx	lr
